////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2007 Xilinx, Inc.
// All Right Reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 9.2.03i
//  \   \         Application : ISE
//  /   /         Filename : test_i2c.ant
// /___/   /\     Timestamp : Thu Nov 15 11:06:37 2007
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: 
//Design Name: test_i2c
//Device: Xilinx
//
`timescale 1ns/1ps

module test_i2c;
    reg reset_i = 1'b0;
    reg clk_i = 1'b0;
    reg SCL_i = 1'b0;
    reg SDA_io$inout$reg = 1'bZ;
    wire SDA_io = SDA_io$inout$reg;
    reg [7:0] send_byte_i = 8'b00000000;
    wire [7:0] recieved_byte_o;
    reg [6:0] address_i = 7'b0000000;
    wire update_flag_o;
    wire start_o;
    wire stop_o;
    wire error_o;

    parameter PERIOD = 200;
    parameter real DUTY_CYCLE = 0.5;
    parameter OFFSET = 100;

    initial    // Clock process for clk_i
    begin
        #OFFSET;
        forever
        begin
            clk_i = 1'b0;
            #(PERIOD-(PERIOD*DUTY_CYCLE)) clk_i = 1'b1;
            #(PERIOD*DUTY_CYCLE);
        end
    end

    I2C_engine UUT (
        .reset_i(reset_i),
        .clk_i(clk_i),
        .SCL_i(SCL_i),
        .SDA_io(SDA_io),
        .send_byte_i(send_byte_i),
        .recieved_byte_o(recieved_byte_o),
        .address_i(address_i),
        .update_flag_o(update_flag_o),
        .start_o(start_o),
        .stop_o(stop_o),
        .error_o(error_o));

    integer TX_FILE = 0;
    integer TX_ERROR = 0;
    
    initial begin    // Annotation process for clock clk_i
        #0;
        ANNOTATE_recieved_byte_o;
        ANNOTATE_update_flag_o;
        ANNOTATE_start_o;
        ANNOTATE_stop_o;
        ANNOTATE_error_o;
        #OFFSET;
        forever begin
            #115;
            ANNOTATE_recieved_byte_o;
            ANNOTATE_update_flag_o;
            ANNOTATE_start_o;
            ANNOTATE_stop_o;
            ANNOTATE_error_o;
            #85;
        end
    end

    initial begin  // Open the annotations file...
        TX_FILE = $fopen("\\\\wts\\data1\\PT8616\\final_source\\FPGA\\test_i2c.ano");
        #1.0002e+006 // Final time:  1.0002e+006 ns
        $display("Success! Annotation Simulation Complete.");
        $fdisplay(TX_FILE, "Total[%d]", TX_ERROR);
        $fclose(TX_FILE);
        $finish;
    end

    initial begin
        // -------------  Current Time:  185ns
        #185;
        SCL_i = 1'b1;
        // -------------------------------------
        // -------------  Current Time:  585ns
        #400;
        SCL_i = 1'b0;
        // -------------------------------------
        // -------------  Current Time:  1385ns
        #800;
        SCL_i = 1'b1;
        // -------------------------------------
        // -------------  Current Time:  1985ns
        #600;
        SCL_i = 1'b0;
        // -------------------------------------
        // -------------  Current Time:  2585ns
        #600;
        SCL_i = 1'b1;
        // -------------------------------------
        // -------------  Current Time:  3185ns
        #600;
        SCL_i = 1'b0;
        // -------------------------------------
        // -------------  Current Time:  3785ns
        #600;
        SCL_i = 1'b1;
        // -------------------------------------
        // -------------  Current Time:  4385ns
        #600;
        SCL_i = 1'b0;
        // -------------------------------------
        // -------------  Current Time:  4985ns
        #600;
        SCL_i = 1'b1;
        // -------------------------------------
        // -------------  Current Time:  5585ns
        #600;
        SCL_i = 1'b0;
        // -------------------------------------
        // -------------  Current Time:  6185ns
        #600;
        SCL_i = 1'b1;
        // -------------------------------------
        // -------------  Current Time:  6785ns
        #600;
        SCL_i = 1'b0;
        // -------------------------------------
        // -------------  Current Time:  7385ns
        #600;
        SCL_i = 1'b1;
        // -------------------------------------
        // -------------  Current Time:  7985ns
        #600;
        SCL_i = 1'b0;
        // -------------------------------------
        // -------------  Current Time:  8585ns
        #600;
        SCL_i = 1'b1;
        // -------------------------------------
        // -------------  Current Time:  9185ns
        #600;
        SCL_i = 1'b0;
        // -------------------------------------
        // -------------  Current Time:  9785ns
        #600;
        SCL_i = 1'b1;
        // -------------------------------------
        // -------------  Current Time:  10385ns
        #600;
        SCL_i = 1'b0;
        // -------------------------------------
    end

    task ANNOTATE_recieved_byte_o;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,recieved_byte_o,%b]", $time, recieved_byte_o);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_update_flag_o;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,update_flag_o,%b]", $time, update_flag_o);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_start_o;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,start_o,%b]", $time, start_o);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_stop_o;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,stop_o,%b]", $time, stop_o);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

    task ANNOTATE_error_o;
        #0 begin
            $fdisplay(TX_FILE, "Annotate[%d,error_o,%b]", $time, error_o);
            $fflush(TX_FILE);
            TX_ERROR = TX_ERROR + 1;
        end
    endtask

endmodule

