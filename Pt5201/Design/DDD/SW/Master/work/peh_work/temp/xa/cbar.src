; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -Ic:\cxa\rtxc\xa\include -I. -Ml
;          -O2 -s
$CASE
$NOZPAGE
	NAME	CBAR
	SYMB	TOOL, "XA C compiler v2.0", 1
	SYMB	TYPE, 256, "bit", 'g', 0, 1
	SYMB	FILE, "cbar.c"
; cbar.c      1	/****************************************************************************/
; cbar.c      2	/* MODULE:                                                                  */
; cbar.c      3	/*  cbar.c - ColorBar generator                                             */
; cbar.c      4	/****************************************************************************/
; cbar.c      5	/* FUNCTIONS:                                                               */
; cbar.c      6	/*                                                                          */
; cbar.c      7	/*	int WriteCBGain( UC gain)                                   						*/
; cbar.c      8	/*	int WriteCBChromaGain( UC gain)                                    			*/
; cbar.c      9	/*	int SRAMVideoLoad( UC signal, UC bank)                          		    */
; cbar.c     10	/*	int SRAMSoundLoad( UC signal)                           						    */
; cbar.c     11	/*	void CBLineInterrupt( void)                           							    */
; cbar.c     12	/*	void CBDefaults( void)                                							    */
; cbar.c     13	/*	int CBInit( void)                                 									   	*/
; cbar.c     14	/*	int CBUpdate( void)                       								             	*/
; cbar.c     15	/*	int SetCBPattern( UI pattern)																		      	*/
; cbar.c     16	/*	int SetCBSystem( UC system)                                    					*/
; cbar.c     17	/*	int SetCBDelay( UL delay)                                    						*/
; cbar.c     18	/*	int SetCBScHPhase( int schphase)                                    		*/
; cbar.c     19	/*	int SetCBEmbAudioSignal( UC signal)                                     */
; cbar.c     20	/*	int ValidateCBPattern( UC system, UI *pattern)													*/	
; cbar.c     21	/*                                                                          */
; cbar.c     22	/* TASKS:                                                                   */
; cbar.c     23	/*                                                                          */
; cbar.c     24	/* NOTES:                                                                   */
; cbar.c     25	/*                                                                          */
; cbar.c     26	/****************************************************************************/
; cbar.c     27	/*
; cbar.c     28	 *   PTV software for PT5201    
; cbar.c     29	 *   Copyright (c) 
; cbar.c     30	 *   ProTeleVision Technologies A/S.
; cbar.c     31	 *   ALL RIGHTS RESERVED
; cbar.c     32	*/
; cbar.c     33	/****************************************************************************/
; cbar.c     34	
; cbar.c     35	#include "reg8051.h"
	SYMB	FILE, "reg8051.h"
	SYMB	ENDF
; cbar.c     36	#include "define.h"        // Standard PTV defines
	SYMB	FILE, "define.h"
	SYMB	ENDF
; cbar.c     37	#include "rtxcobj.h"
	SYMB	FILE, "rtxcobj.h"
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\rtxcapi.h"
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\typedef.h"
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 257, "KOBJNUM", 'T', #3
	SYMB	TYPE, 258, "TASK", 'T', #2
	SYMB	ENDF
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\rtxstruc.h"
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 259, "KSNUM", 'T', #3
	SYMB	TYPE, 260, "PRIORITY", 'T', #258
	SYMB	TYPE, 261, "TSTATE", 'T', #5
	SYMB	TYPE, 262, "size_t", 'T', #18
	SYMB	TYPE, 263, "TSLICE", 'T', #3
	SYMB	TYPE, 265, 'n', #264, 130
	SYMB	TYPE, 266, 'P', #265
	SYMB	TYPE, 268, 'n', #267, 130
	SYMB	TYPE, 269, 'P', #268
	SYMB	TYPE, 270, 'n', #259, 130
	SYMB	TYPE, 271, 'P', #270
	SYMB	TYPE, 272, 'X', 12, #1, 30, 0
	SYMB	TYPE, 273, 'n', #272, 129
	SYMB	TYPE, 274, 'P', #273
	SYMB	TYPE, 275, "frame", 'S', 24,\
		 "es", #3, 0,\
		 "cs", #3, 1,\
		 "ssel", #3, 2,\
		 "ds", #3, 3,\
		 "pksnum", #271, 4,\
		 "R2", #18, 8,\
		 "R3", #18, 10,\
		 "R4", #18, 12,\
		 "R5", #18, 14,\
		 "R6", #18, 16,\
		 "psw", #18, 18,\
		 "pc", #274, 20
	SYMB	TYPE, 276, 'n', #275, 130
	SYMB	TYPE, 277, 'P', #276
	SYMB	TYPE, 278, 'X', 12, #1, 30, 0
	SYMB	TYPE, 279, 'n', #278, 129
	SYMB	TYPE, 280, 'P', #279
	SYMB	TYPE, 281, 'n', #2, 130
	SYMB	TYPE, 282, 'P', #281
	SYMB	TYPE, 283, 'n', #1, 130
	SYMB	TYPE, 284, 'P', #283
	SYMB	TYPE, 264, "tcb", 'S', 36,\
		 "flink", #266, 0,\
		 "blink", #266, 4,\
		 "pclkblk", #269, 8,\
		 "task", #258, 12,\
		 "priority", #260, 13,\
		 "sp", #277, 14,\
		 "status", #261, 18,\
		 "pc_t0", #280, 20,\
		 "stackbase", #282, 24,\
		 "stacksize", #262, 28,\
		 "tslice", #263, 30,\
		 "newslice", #263, 31,\
		 "arg", #284, 32
	SYMB	TYPE, 285, "TCB", 'T', #264
	SYMB	TYPE, 286, "SEMA", 'T', #257
	SYMB	TYPE, 287, "MAP", 'T', #257
	SYMB	TYPE, 289, 'n', #288, 130
	SYMB	TYPE, 290, 'P', #289
	SYMB	TYPE, 288, "rtxcmsg", 'S', 8,\
		 "link", #290, 0,\
		 "task", #258, 4,\
		 "priority", #260, 5,\
		 "sema", #286, 6
	SYMB	TYPE, 291, "RTXCMSG", 'T', #288
	SYMB	TYPE, 292, "TICKS", 'T', #16
	SYMB	TYPE, 293, 'N',\
		 "DELAY_OBJ", 0,\
		 "SEMAPHORE_OBJ", 1,\
		 "PARTITION_OBJ", 2,\
		 "QUEUE_OBJ", 3,\
		 "RESOURCE_OBJ", 4,\
		 "MAILBOX_OBJ", 5,\
		 "TIMER_OBJ", 6
	SYMB	TYPE, 294, "OBJTYPE", 'T', #293
	SYMB	TYPE, 267, "clkblk", 'S', 18,\
		 "flink", #269, 0,\
		 "blink", #269, 4,\
		 "remain", #292, 8,\
		 "recycle", #292, 10,\
		 "task", #258, 12,\
		 "state", #2, 13,\
		 "objtype", #294, 14,\
		 "objid", #257, 16
	SYMB	TYPE, 295, 'N',\
		 "PRIORITY_INVERSION_OFF", 0,\
		 "PRIORITY_INVERSION_ON", 1
	SYMB	TYPE, 296, "RESATTR", 'T', #295
	SYMB	ENDF
	SYMB	TYPE, 297, 'N',\
		 "RC_GOOD", 0,\
		 "RC_WAIT_CONFLICT", 1,\
		 "RC_NO_TIMERS", 2,\
		 "RC_TIMER_INACTIVE", 3,\
		 "RC_TIMER_ILLEGAL", 4,\
		 "RC_TIMEOUT", 5,\
		 "RC_QUEUE_FULL", 6,\
		 "RC_QUEUE_EMPTY", 7,\
		 "RC_ILLEGAL_QUEUE_SIZE", 8,\
		 "RC_BUSY", 9,\
		 "RC_NESTED", 10,\
		 "RC_ILLEGAL_TASK", 11,\
		 "RC_ACTIVE_TASK", 12,\
		 "RC_NO_YIELD", 13,\
		 "RC_MISSED_EVENT", 14
	SYMB	TYPE, 298, "KSRC", 'T', #297
	SYMB	TYPE, 299, "SSTATE", 'T', #258
	SYMB	TYPE, 300, "MBOX", 'T', #257
	SYMB	TYPE, 301, "QUEUE", 'T', #257
	SYMB	TYPE, 302, 'N',\
		 "QNE", 0,\
		 "QNF", 1,\
		 "QF", 2,\
		 "QE", 3
	SYMB	TYPE, 303, "QCOND", 'T', #302
	SYMB	TYPE, 304, "RESOURCE", 'T', #257
	SYMB	TYPE, 305, "CLKBLK", 'T', #267
	SYMB	TYPE, 306, "time_t", 'T', #6
	SYMB	TYPE, 307, "FRAME", 'T', #275
	SYMB	ENDF
	SYMB	FILE, "ctask.h"
	SYMB	ENDF
	SYMB	FILE, "csema.h"
	SYMB	ENDF
	SYMB	FILE, "cres.h"
	SYMB	ENDF
	SYMB	FILE, "cqueue.h"
	SYMB	ENDF
	SYMB	FILE, "cpart.h"
	SYMB	ENDF
	SYMB	FILE, "cmbox.h"
	SYMB	ENDF
	SYMB	FILE, "cclock.h"
	SYMB	ENDF
	SYMB	TYPE, 309, 'n', #308, 130
	SYMB	TYPE, 310, 'P', #309
	SYMB	TYPE, 308, 'X', 12, #1, 30, 2, #310, #282
	SYMB	TYPE, 312, 'n', #311, 129
	SYMB	TYPE, 313, 'P', #312
	SYMB	TYPE, 314, 'X', 12, #1, 30, 1, #310
	SYMB	TYPE, 315, 'n', #314, 129
	SYMB	TYPE, 316, 'P', #315
	SYMB	TYPE, 317, 'n', #6, 130
	SYMB	TYPE, 318, 'P', #317
	SYMB	TYPE, 317, 'X', 12, #16, 30, 2, #310, #318
	SYMB	TYPE, 320, 'n', #319, 129
	SYMB	TYPE, 321, 'P', #320
	SYMB	TYPE, 322, 'X', 12, #1, 30, 1, #310
	SYMB	TYPE, 323, 'n', #322, 129
	SYMB	TYPE, 324, 'P', #323
	SYMB	TYPE, 325, 'X', 12, #1, 30, 1, #310
	SYMB	TYPE, 326, 'n', #325, 129
	SYMB	TYPE, 327, 'P', #326
	SYMB	TYPE, 328, 'X', 12, #16, 30, 1, #310
	SYMB	TYPE, 329, 'n', #328, 129
	SYMB	TYPE, 330, 'P', #329
	SYMB	TYPE, 308, "TEvent", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TEvent", #313, 2,\
		 "_TEvent", #316, 6,\
		 "Wait", #321, 10,\
		 "Set", #324, 14,\
		 "Clear", #327, 18,\
		 "IsSet", #330, 22,\
		 "ID", #286, 26,\
		 "Name", #282, 28
	SYMB	TYPE, 331, "TEvent", 'T', #308
	SYMB	TYPE, 333, 'n', #332, 130
	SYMB	TYPE, 334, 'P', #333
	SYMB	TYPE, 332, 'X', 12, #1, 30, 1, #334
	SYMB	TYPE, 336, 'n', #335, 129
	SYMB	TYPE, 337, 'P', #336
	SYMB	TYPE, 338, 'X', 12, #1, 30, 1, #334
	SYMB	TYPE, 339, 'n', #338, 129
	SYMB	TYPE, 340, 'P', #339
	SYMB	TYPE, 341, 'n', #331, 130
	SYMB	TYPE, 342, 'P', #341
	SYMB	TYPE, 341, 'X', 12, #16, 30, 2, #334, #342
	SYMB	TYPE, 344, 'n', #343, 129
	SYMB	TYPE, 345, 'P', #344
	SYMB	TYPE, 346, 'X', 12, #1, 30, 2, #334, #342
	SYMB	TYPE, 347, 'n', #346, 129
	SYMB	TYPE, 348, 'P', #347
	SYMB	TYPE, 349, 'X', 12, #16, 30, 2, #334, #342
	SYMB	TYPE, 350, 'n', #349, 129
	SYMB	TYPE, 351, 'P', #350
	SYMB	TYPE, 352, 'X', 12, #342, 30, 2, #334, #318
	SYMB	TYPE, 353, 'n', #352, 129
	SYMB	TYPE, 354, 'P', #353
	SYMB	TYPE, 355, 'Z', #2, 95
	SYMB	TYPE, 332, "TEventList", 'S', 122,\
		 "ObjectID", #16, 0,\
		 "TEventList", #337, 2,\
		 "_TEventList", #340, 6,\
		 "Append", #345, 10,\
		 "Clear", #348, 14,\
		 "InList", #351, 18,\
		 "Wait", #354, 22,\
		 "Align", #355, 26
	SYMB	TYPE, 357, "TEventList", 'T', #332
	SYMB	TYPE, 359, 'n', #358, 130
	SYMB	TYPE, 360, 'P', #359
	SYMB	TYPE, 358, 'X', 12, #1, 30, 2, #360, #282
	SYMB	TYPE, 362, 'n', #361, 129
	SYMB	TYPE, 363, 'P', #362
	SYMB	TYPE, 364, 'X', 12, #1, 30, 1, #360
	SYMB	TYPE, 365, 'n', #364, 129
	SYMB	TYPE, 366, 'P', #365
	SYMB	TYPE, 367, 'X', 12, #1, 30, 1, #360
	SYMB	TYPE, 368, 'n', #367, 129
	SYMB	TYPE, 369, 'P', #368
	SYMB	TYPE, 370, 'X', 12, #1, 30, 1, #360
	SYMB	TYPE, 371, 'n', #370, 129
	SYMB	TYPE, 372, 'P', #371
	SYMB	TYPE, 373, 'X', 12, #16, 30, 1, #360
	SYMB	TYPE, 374, 'n', #373, 129
	SYMB	TYPE, 375, 'P', #374
	SYMB	TYPE, 358, "TResource", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TResource", #363, 2,\
		 "_TResource", #366, 6,\
		 "Lock", #369, 10,\
		 "Unlock", #372, 14,\
		 "Owner", #375, 18,\
		 "ID", #304, 22,\
		 "Name", #282, 24
	SYMB	TYPE, 376, "TResource", 'T', #358
	SYMB	TYPE, 377, 'X', 12, #1, 30, 0
	SYMB	TYPE, 378, 'n', #377, 129
	SYMB	TYPE, 379, 'P', #378
	SYMB	TYPE, 381, 'n', #380, 130
	SYMB	TYPE, 382, 'P', #381
	SYMB	TYPE, 377, 'X', 12, #1, 30, 3, #382, #16, #379
	SYMB	TYPE, 384, 'n', #383, 129
	SYMB	TYPE, 385, 'P', #384
	SYMB	TYPE, 386, 'X', 12, #1, 30, 1, #382
	SYMB	TYPE, 387, 'n', #386, 129
	SYMB	TYPE, 388, 'P', #387
	SYMB	TYPE, 389, 'X', 12, #1, 30, 1, #382
	SYMB	TYPE, 390, 'n', #389, 129
	SYMB	TYPE, 391, 'P', #390
	SYMB	TYPE, 392, 'X', 12, #1, 30, 2, #382, #16
	SYMB	TYPE, 393, 'n', #392, 129
	SYMB	TYPE, 394, 'P', #393
	SYMB	TYPE, 395, 'X', 12, #1, 30, 1, #382
	SYMB	TYPE, 396, 'n', #395, 129
	SYMB	TYPE, 397, 'P', #396
	SYMB	TYPE, 398, 'X', 12, #16, 30, 1, #382
	SYMB	TYPE, 399, 'n', #398, 129
	SYMB	TYPE, 400, 'P', #399
	SYMB	TYPE, 401, 'X', 12, #1, 30, 2, #382, #16
	SYMB	TYPE, 402, 'n', #401, 129
	SYMB	TYPE, 403, 'P', #402
	SYMB	TYPE, 380, "TThread", 'S', 36,\
		 "ObjectID", #16, 0,\
		 "TThread", #385, 2,\
		 "Execute", #388, 6,\
		 "Terminate", #391, 10,\
		 "Suspend", #394, 14,\
		 "Resume", #397, 18,\
		 "GetPriority", #400, 22,\
		 "SetPriority", #403, 26,\
		 "ID", #258, 30,\
		 "Status", #2, 31,\
		 "Stack", #282, 32
	SYMB	TYPE, 404, "TThread", 'T', #380
	SYMB	TYPE, 406, 'n', #405, 130
	SYMB	TYPE, 407, 'P', #406
	SYMB	TYPE, 405, 'X', 12, #1, 30, 1, #407
	SYMB	TYPE, 409, 'n', #408, 129
	SYMB	TYPE, 410, 'P', #409
	SYMB	TYPE, 411, 'X', 12, #1, 30, 1, #407
	SYMB	TYPE, 412, 'n', #411, 129
	SYMB	TYPE, 413, 'P', #412
	SYMB	TYPE, 414, 'X', 12, #1, 30, 2, #407, #16
	SYMB	TYPE, 415, 'n', #414, 129
	SYMB	TYPE, 416, 'P', #415
	SYMB	TYPE, 417, 'X', 12, #16, 30, 1, #407
	SYMB	TYPE, 418, 'n', #417, 129
	SYMB	TYPE, 419, 'P', #418
	SYMB	TYPE, 420, 'X', 12, #1, 30, 2, #407, #16
	SYMB	TYPE, 421, 'n', #420, 129
	SYMB	TYPE, 422, 'P', #421
	SYMB	TYPE, 423, 'n', #305, 130
	SYMB	TYPE, 424, 'P', #423
	SYMB	TYPE, 405, "TTimer", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TTimer", #410, 2,\
		 "_TTimer", #413, 6,\
		 "SetPeriod", #416, 10,\
		 "GetPeriod", #419, 14,\
		 "Tick", #422, 18,\
		 "TimeOut", #342, 22,\
		 "Period", #4, 26,\
		 "Handle", #424, 28
	SYMB	TYPE, 425, "TTimer", 'T', #405
	SYMB	TYPE, 427, 'n', #426, 130
	SYMB	TYPE, 428, 'P', #427
	SYMB	TYPE, 426, 'X', 12, #1, 30, 3, #428, #16, #16
	SYMB	TYPE, 430, 'n', #429, 129
	SYMB	TYPE, 431, 'P', #430
	SYMB	TYPE, 432, 'X', 12, #1, 30, 1, #428
	SYMB	TYPE, 433, 'n', #432, 129
	SYMB	TYPE, 434, 'P', #433
	SYMB	TYPE, 435, 'X', 12, #282, 30, 2, #428, #284
	SYMB	TYPE, 436, 'n', #435, 129
	SYMB	TYPE, 437, 'P', #436
	SYMB	TYPE, 438, 'X', 12, #1, 30, 2, #428, #284
	SYMB	TYPE, 439, 'n', #438, 129
	SYMB	TYPE, 440, 'P', #439
	SYMB	TYPE, 426, "TStream", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TStream", #431, 2,\
		 "_TStream", #434, 6,\
		 "Get", #437, 10,\
		 "Put", #440, 14,\
		 "ID", #301, 18,\
		 "Width", #16, 20,\
		 "Depth", #16, 22,\
		 "Handle", #282, 24
	SYMB	TYPE, 441, "TStream", 'T', #426
	SYMB	ENDF
; cbar.c     38	#include "config.h" 
	SYMB	FILE, "config.h"
	SYMB	ENDF
; cbar.c     39	#include "audio.h"
	SYMB	FILE, "audio.h"
	SYMB	TYPE, 442, 'S', 14,\
		 "System", #16, 0,\
		 "Signal", #16, 2,\
		 "Level", #16, 4,\
		 "Timing", #10, 6,\
		 "Frequency", #16, 10,\
		 "Click", #16, 12
	SYMB	TYPE, 443, "AudioObject", 'T', #442
	SYMB	ENDF
; cbar.c     40	#include "cbar.h"
	SYMB	FILE, "cbar.h"
	SYMB	TYPE, 444, 'S', 12,\
		 "System", #3, 0,\
		 "Pattern", #18, 2,\
		 "Delay", #7, 4,\
		 "ScHPhase", #16, 8,\
		 "EmbAudioSignal", #3, 10
	SYMB	TYPE, 445, "CBObject", 'T', #444
	SYMB	ENDF
; cbar.c     41	#include "tables.h"
	SYMB	FILE, "tables.h"
	SYMB	ENDF
; cbar.c     42	#include "led_hw.h"
	SYMB	FILE, "led_hw.h"
	SYMB	TYPE, 446, 'N',\
		 "true", -1,\
		 "false", 0
	SYMB	TYPE, 447, "bool", 'T', #446
	SYMB	ENDF
; cbar.c     43	#include "tvp6kdrv.h"
	SYMB	FILE, "tvp6kdrv.h"
	SYMB	ENDF
; cbar.c     44	#include "i2c_drv.h"
	SYMB	FILE, "i2c_drv.h"
	SYMB	ENDF
; cbar.c     45	#include "instru.h"
	SYMB	FILE, "instru.h"
	SYMB	FILE, "nv_drv.h"
	SYMB	TYPE, 448, "NvPointer", 'T', #18
	SYMB	ENDF
	SYMB	FILE, "genlock.h"
	SYMB	TYPE, 449, 'S', 6,\
		 "System", #3, 0,\
		 "Delay", #7, 2
	SYMB	TYPE, 450, "GenlockObject", 'T', #449
	SYMB	ENDF
	SYMB	FILE, "bb.h"
	SYMB	TYPE, 451, 'S', 8,\
		 "System", #3, 0,\
		 "Delay", #7, 2,\
		 "ScHPhase", #16, 6
	SYMB	TYPE, 452, "BBObject", 'T', #451
	SYMB	ENDF
	SYMB	FILE, "cbar.h"
	SYMB	ENDF
	SYMB	FILE, "audio.h"
	SYMB	ENDF
	SYMB	TYPE, 453, 'S', 32,\
		 "Date", #7, 0,\
		 "DACFactDate", #7, 4,\
		 "DACUserDate", #7, 8,\
		 "DACFactValue", #18, 12,\
		 "DACUserValue", #18, 14,\
		 "HPHZeroG", #7, 16,\
		 "PhaseG", #7, 20,\
		 "HPHZeroM", #7, 24,\
		 "PhaseM", #7, 28
	SYMB	TYPE, 454, "GenlockCalibrationObject", 'T', #453
	SYMB	TYPE, 455, 'S', 20,\
		 "Date", #7, 0,\
		 "PhaseG", #7, 4,\
		 "ScHPhaseG", #18, 8,\
		 "PhaseM", #7, 10,\
		 "ScHPhaseM", #18, 14,\
		 "DACGain", #3, 16,\
		 "DACOffset", #3, 17,\
		 "DACLevel", #3, 18
	SYMB	TYPE, 456, "BBCalibrationObject", 'T', #455
	SYMB	TYPE, 457, 'S', 20,\
		 "Date", #7, 0,\
		 "PhaseG", #7, 4,\
		 "ScHPhaseG", #3, 8,\
		 "PhaseM", #7, 10,\
		 "ScHPhaseM", #3, 14,\
		 "GainG", #3, 15,\
		 "ChromaGainG", #3, 16,\
		 "GainM", #3, 17,\
		 "ChromaGainM", #3, 18
	SYMB	TYPE, 458, "CBCalibrationObject", 'T', #457
	SYMB	TYPE, 459, 'S', 6,\
		 "Date", #7, 0,\
		 "AnalogLeftChannel", #3, 4,\
		 "AnalogRightChannel", #3, 5
	SYMB	TYPE, 460, "AudioCalibrationObject", 'T', #459
	SYMB	TYPE, 461, 'Z', #452, 2
	SYMB	TYPE, 463, 'Z', #443, 1
	SYMB	TYPE, 465, 'S', 74,\
		 "ActivePreset", #16, 0,\
		 "GenlockSetup", #450, 2,\
		 "BBSetup", #461, 8,\
		 "CBSetup", #445, 32,\
		 "AudioOutput", #16, 44,\
		 "AudioSetup", #463, 46
	SYMB	TYPE, 466, "SettingsObject", 'T', #465
	SYMB	TYPE, 467, 'Z', #2, 32
	SYMB	TYPE, 469, 'Z', #2, 8
	SYMB	TYPE, 471, 'Z', #2, 12
	SYMB	TYPE, 473, 'Z', #456, 2
	SYMB	TYPE, 475, 'S', 224,\
		 "Company", #467, 0,\
		 "Type", #467, 33,\
		 "KUNumber", #469, 66,\
		 "SWRevision", #469, 75,\
		 "NC12", #471, 84,\
		 "ResetSystem", #3, 97,\
		 "ProdDate", #7, 98,\
		 "UpdateDate", #7, 102,\
		 "GenlockCalibration", #454, 106,\
		 "BBCalibration", #473, 138,\
		 "CBCalibration", #458, 198,\
		 "AudioCalibration", #460, 218
	SYMB	TYPE, 476, "CalibrationObject", 'T', #475
	SYMB	ENDF
; cbar.c     46	
; cbar.c     47	#define SRAMBank0			0x00
; cbar.c     48	#define SRAMBank1			0x10
; cbar.c     49	#define SRAMBank2			0x14
; cbar.c     50	#define SRAMBank3			0x18
; cbar.c     51	#define SRAMBank4			0x1C
; cbar.c     52	#define SRAMBank5			0x20
; cbar.c     53	#define SRAMBank6			0x24
; cbar.c     54	#define SRAMBank7			0x28
; cbar.c     55	#define SRAMBank8			0x2C
; cbar.c     56	#define SRAMBank9			0x30
; cbar.c     57	#define SRAMBank10		0x34
; cbar.c     58	#define SRAMBank11		0x38
; cbar.c     59	#define SRAMBank12		0x3C
; cbar.c     60	
; cbar.c     61	#define dEBUCBar_8bit_625	 				0
; cbar.c     62	#define dEBUCBar_625							1
; cbar.c     63	#define dSMPTECBar								2
; cbar.c     64	#define dBlueBars									3
; cbar.c     65	#define dIWhiteQ									4
; cbar.c     66	#define dCBar100_625							5
; cbar.c     67	#define dGrey75_625								6
; cbar.c     68	#define dRed75_625								7
; cbar.c     69	#define dRed75_525								8
; cbar.c     70	#define dChroma_Multiburst				9
; cbar.c     71	#define d_CCIR18_625							9
; cbar.c     72	#define dFCC_Multiburst_525				10
; cbar.c     73	#define dChroma_Multiburst_525		11
; cbar.c     74	#define dWhiteLine_625						11
; cbar.c     75	#define dCrossHatch19_625					12
; cbar.c     76	#define dWhiteLine_525						13
; cbar.c     77	#define dCrossHatch17_525					14
; cbar.c     78	#define dPlugeWhite_625						15
; cbar.c     79	#define dPlugeGreyC_625						16
; cbar.c     80	#define dPlugeGreyD_625						17
; cbar.c     81	#define dPlugeGreyE_625						18
; cbar.c     82	#define dPlugeWhite_525						19
; cbar.c     83	#define dPlugeGreyC_525						20
; cbar.c     84	#define dPlugeGreyD_525						21
; cbar.c     85	#define dPlugeGreyE_525						22
; cbar.c     86	#define dGreyScale5_625						23
; cbar.c     87	#define dGreyScale5_525						24
; cbar.c     88	#define dGreyScale10_625					25
; cbar.c     89	#define dGreyScale10_525					26
; cbar.c     90	#define dWindow50Marker						27
; cbar.c     91	#define dMarkerLine							28
; cbar.c     92	#define dWindow15								29
; cbar.c     93	#define dMarker15								30
; cbar.c     94	#define dWindow20								31
; cbar.c     95	#define dMarker20								32
; cbar.c     96	#define dWindow100							33
; cbar.c     97	#define dMarker100							34
; cbar.c     98	#define dDigitalGrey_625					35
; cbar.c     99	#define dDigitalGrey_525					36
; cbar.c    100	#define dSDI_test_line1						37
; cbar.c    101	#define dSDI_test_line2						38
; cbar.c    102	#define dSDI_test_line3						39
; cbar.c    103	#define dCBar75_STD_625	 					40
; cbar.c    104	#define dFCC_CBar_525						41
; cbar.c    105	#define dFCC_CBar100_525					42
; cbar.c    106	#define dWindow10								43
; cbar.c    107	#define dMarker10								44
; cbar.c    108	#define dkHz15BlWh_625						45
; cbar.c    109	#define dkHz15BlWh_525						46
; cbar.c    110	#define dCCIR18_625							47
; cbar.c    111	
; cbar.c    112	/****************************************************************************/
; cbar.c    113	/*
; cbar.c    114	The statusport is defined in the PLD as:
; cbar.c    115	
; cbar.c    116		bit 0:	S0				Background system
; cbar.c    117		bit 1:	S1
; cbar.c    118	
; cbar.c    119		bit 2:	S2				Linetype
; cbar.c    120		bit 3:	S3
; cbar.c    121		bit 4:	S4
; cbar.c    122		bit 5:	S5
; cbar.c    123	
; cbar.c    124		bit 6:	SYSSEL		System select ( 0:G, 1:M)
; cbar.c    125		bit 7:	SOUND			Sound ( 0:off, 1:on)
; cbar.c    126	
; cbar.c    127		bit 8:	3OR4			Samples in sound ( 0:3 samples, 1:4 samples)
; cbar.c    128		bit 9:	FIELD1		Field one bit ( 1 in Field 1/line 1 (out of 8/4) otherwise 0)
; cbar.c    129		bit 10: CB	
; cbar.c    130		bit 11: EDHON			EDH bit for future use ( 0:off, 1:on)
; cbar.c    131	
; cbar.c    132		bit 12: PS				PS ( 0:disable writing in SRAM, 1: enable writing in SRAM)
; cbar.c    133		bit 13: Line7			Line 7 pulse in PAL w/PAL_ID
; cbar.c    134		bit 14: PhaseReg	Phase offset register select
; cbar.c    135		bit 15: -					Not used
; cbar.c    136	*/
; cbar.c    137	/****************************************************************************/
; cbar.c    138											
; cbar.c    139	#define S1S0		  	0x0003
; cbar.c    140	#define S5S4S3S2		0x003C
; cbar.c    141	#define SYSSEL			0x0040
; cbar.c    142	#define SOUNDON	  	0x0080
; cbar.c    143	#define S3OR4		  	0x0100
; cbar.c    144	#define FIELD1			0x0200
; cbar.c    145	#define CB			  	0x0400
; cbar.c    146	#define EDHON		  	0x0800
; cbar.c    147	#define PS			  	0x1000
; cbar.c    148	#define LINE7PULSE	0x2000
; cbar.c    149	#define PHASEREGSEL	0x4000
; cbar.c    150	
; cbar.c    151	#define SOUND		  	(int)(SOUNDON + S3OR4)
; cbar.c    152	
; cbar.c    153	#define SyncLineA		1
; cbar.c    154	#define SyncLineB 	0
; cbar.c    155	#define SyncLineC 	2
; cbar.c    156	#define SyncLineD 	3
; cbar.c    157	
; cbar.c    158	/****************************************************************************/
; cbar.c    159	// Prototypes internal functions
; cbar.c    160	
; cbar.c    161	int ValidateCBPattern( UC system, UI *pattern);
; cbar.c    162	
; cbar.c    163		_ROM_ UI Sound525[48] = {
CBAR_RO	SEGMENT	HCODE ROMDATA
	RSEG	CBAR_RO
	SYMB	TYPE, 477, 'Z', #18, 47
	SYMB	IDEN, "Sound525", _Sound525, #477, 129, 0
	SYMB	ALAB, _Sound525, #477
	PUBLIC	_Sound525
	ALIGN	1
_Sound525:
	DW	00083H,00181H,00085H,00003H,00086H,00181H,0008BH,00181H
	DW	0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
	DW	0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
	DW	0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
	DW	0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
; cbar.c    164		0x083, 0x181, 0x085, 0x003, 0x086, 0x181, 0x08B, 0x181,
; cbar.c    165		0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181,
; cbar.c    166		0x08B, 0x181,	0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181,
; cbar.c    167		0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181,
; cbar.c    168		0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181,
; cbar.c    169		0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x083, 0x081
; cbar.c    170	};
; cbar.c    171	
; cbar.c    172		_ROM_ UI Sound625[65] = {
	DW	0008BH,00181H,0008BH,00181H,0008BH,00181H,00083H,00081H
	SYMB	TYPE, 479, 'Z', #18, 64
	SYMB	IDEN, "Sound625", _Sound625, #479, 129, 0
	SYMB	ALAB, _Sound625, #479
	PUBLIC	_Sound625
	ALIGN	1
_Sound625:
	DW	00181H,00084H,00003H,00085H,00181H,00089H,00181H,00089H
	DW	00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
	DW	00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
	DW	00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
	DW	00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
	DW	00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
	DW	00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
	DW	00181H,00089H,00181H,00089H,00181H,00089H,00181H,00088H
; cbar.c    173		0x181,  0x084,  0x003,  0x085,  0x181,  0x089,  0x181,  0x089,
; cbar.c    174		0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
; cbar.c    175		0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
; cbar.c    176		0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
; cbar.c    177		0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
; cbar.c    178		0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
; cbar.c    179		0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
; cbar.c    180		0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x088,
; cbar.c    181		0x181
; cbar.c    182	};
; cbar.c    183	
; cbar.c    184	_ROM_	UI PALBlackTable[] =
	DW	00181H
	SYMB	TYPE, 481, 'Z', #18, -1
	SYMB	IDEN, "PALBlackTable", _PALBlackTable, #481, 129, 0
	SYMB	ALAB, _PALBlackTable, #481
	PUBLIC	_PALBlackTable
	ALIGN	1
_PALBlackTable:
	DW	01600H,09002H,09002H,00200H,01701H,09003H,09003H,00201H
; cbar.c    185	{
; cbar.c    186		22*256 	+							SyncLineB,
; cbar.c    187		144*256	+							SyncLineC,
; cbar.c    188		144*256	+							SyncLineC,
; cbar.c    189		2*256		+							SyncLineB,
; cbar.c    190	
; cbar.c    191		23*256 	+							SyncLineA,
; cbar.c    192		144*256	+							SyncLineD,
; cbar.c    193		144*256	+							SyncLineD,
; cbar.c    194		2*256		+							SyncLineA,
; cbar.c    195		0
; cbar.c    196	};
; cbar.c    197	
; cbar.c    198	_ROM_ UI PALFullFieldTable[] =
	DW	00000H
	SYMB	IDEN, "PALFullFieldTable", _PALFullFieldTable, #481, 129, 0
	SYMB	ALAB, _PALFullFieldTable, #481
	PUBLIC	_PALFullFieldTable
	ALIGN	1
_PALFullFieldTable:
	DW	01600H,09012H,09012H,00200H,01701H,09013H,09013H,00201H
; cbar.c    199	{
; cbar.c    200		22*256 	+							SyncLineB,
; cbar.c    201		144*256	+	SRAMBank1 + SyncLineC,
; cbar.c    202		144*256	+	SRAMBank1 + SyncLineC,
; cbar.c    203		2*256		+							SyncLineB,
; cbar.c    204	
; cbar.c    205		23*256 	+							SyncLineA,
; cbar.c    206		144*256	+	SRAMBank1 + SyncLineD,
; cbar.c    207		144*256	+	SRAMBank1 + SyncLineD,
; cbar.c    208		2*256		+							SyncLineA,
; cbar.c    209		0
; cbar.c    210	};
; cbar.c    211	
; cbar.c    212	_ROM_ UI PALSplitFieldTable[] =
	DW	00000H
	SYMB	IDEN, "PALSplitFieldTable", _PALSplitFieldTable, #481, 129, 0
	SYMB	ALAB, _PALSplitFieldTable, #481
	PUBLIC	_PALSplitFieldTable
	ALIGN	1
_PALSplitFieldTable:
	DW	01600H,0C012H,06016H,00200H,01701H,0C013H,06017H,00201H
; cbar.c    213	{
; cbar.c    214		22*256 	+							SyncLineB,
; cbar.c    215		192*256	+	SRAMBank1 + SyncLineC,
; cbar.c    216		96*256	+	SRAMBank2 + SyncLineC,
; cbar.c    217		2*256		+							SyncLineB,
; cbar.c    218	
; cbar.c    219		23*256 	+							SyncLineA,
; cbar.c    220		192*256	+	SRAMBank1 + SyncLineD,
; cbar.c    221		96*256	+	SRAMBank2 + SyncLineD,
; cbar.c    222		2*256		+							SyncLineA,
; cbar.c    223		0
; cbar.c    224	};
; cbar.c    225	
; cbar.c    226	_ROM_ UI PALWindowTable[] =
	DW	00000H
	SYMB	IDEN, "PALWindowTable", _PALWindowTable, #481, 129, 0
	SYMB	ALAB, _PALWindowTable, #481
	PUBLIC	_PALWindowTable
	ALIGN	1
_PALWindowTable:
	DW	01600H,01802H,00112H,00116H,00102H,0011AH,02C02H,0901EH
	DW	04802H,00200H,01701H,01803H,00113H,00117H,00103H,0011BH
; cbar.c    227	{
; cbar.c    228		22*256 	+							SyncLineB,
; cbar.c    229		24*256	+         		SyncLineC,
; cbar.c    230		1*256		+	SRAMBank1 + SyncLineC,
; cbar.c    231		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    232		1*256		+	  		      SyncLineC,
; cbar.c    233		1*256		+	SRAMBank3 + SyncLineC,
; cbar.c    234		44*256	+	      		  SyncLineC,
; cbar.c    235		144*256	+	SRAMBank4 + SyncLineC,
; cbar.c    236		72*256	+	    		    SyncLineC,
; cbar.c    237		2*256		+							SyncLineB,
; cbar.c    238	
; cbar.c    239		23*256 	+							SyncLineA,
; cbar.c    240		24*256	+         		SyncLineD,
; cbar.c    241		1*256		+	SRAMBank1 + SyncLineD,
; cbar.c    242		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    243		1*256		+	      		  SyncLineD,
; cbar.c    244		1*256		+	SRAMBank3 + SyncLineD,
; cbar.c    245		44*256	+	 			      SyncLineD,
; cbar.c    246		144*256	+	SRAMBank4 + SyncLineD,
; cbar.c    247		72*256	+	      		  SyncLineD,
; cbar.c    248		2*256		+							SyncLineA,
; cbar.c    249		0
; cbar.c    250	};
; cbar.c    251	
; cbar.c    252	_ROM_ UI PALCheckfieldTable[] =
	DW	02C03H,0901FH,04803H,00201H,00000H
	SYMB	IDEN, "PALCheckfieldTable", _PALCheckfieldTable, #481, 129, 0
	SYMB	ALAB, _PALCheckfieldTable, #481
	PUBLIC	_PALCheckfieldTable
	ALIGN	1
_PALCheckfieldTable:
	DW	01600H,00112H,08F16H,0901AH,00200H,01701H,09017H,0901BH
; cbar.c    253	{
; cbar.c    254		22*256 	+							SyncLineB,
; cbar.c    255		1*256		+	SRAMBank1 + SyncLineC,
; cbar.c    256		143*256	+	SRAMBank2 + SyncLineC,
; cbar.c    257		144*256	+	SRAMBank3 + SyncLineC,
; cbar.c    258		2*256		+							SyncLineB,
; cbar.c    259	
; cbar.c    260		23*256 	+							SyncLineA,
; cbar.c    261		144*256	+	SRAMBank2 + SyncLineD,
; cbar.c    262		144*256	+	SRAMBank3 + SyncLineD,
; cbar.c    263		2*256		+							SyncLineA,
; cbar.c    264		0
; cbar.c    265	};
; cbar.c    266	
; cbar.c    267	_ROM_ UI PALCrosshatchTable[] =
	DW	00201H,00000H
	SYMB	IDEN, "PALCrosshatchTable", _PALCrosshatchTable, #481, 129, 0
	SYMB	ALAB, _PALCrosshatchTable, #481
	PUBLIC	_PALCrosshatchTable
	ALIGN	1
_PALCrosshatchTable:
	DW	01600H,00712H,00116H,01412H,00116H,01412H,00116H,01412H
	DW	00116H,01412H,00116H,01412H,00116H,01412H,00116H,01412H
	DW	00116H,01412H,00116H,01412H,00116H,01412H,00116H,01412H
	DW	00116H,01412H,00116H,01412H,00116H,00712H,00200H,01701H
	DW	00713H,00117H,01413H,00117H,01413H,00117H,01413H,00117H
	DW	01413H,00117H,01413H,00117H,01413H,00117H,01413H,00117H
	DW	01413H,00117H,01413H,00117H,01413H,00117H,01413H,00117H
; cbar.c    268	{
; cbar.c    269		22*256 	+							SyncLineB,
; cbar.c    270		7*256		+ SRAMBank1 + SyncLineC,
; cbar.c    271		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    272		20*256	+	SRAMBank1 + SyncLineC,
; cbar.c    273		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    274		20*256	+	SRAMBank1 + SyncLineC,
; cbar.c    275		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    276		20*256	+	SRAMBank1 + SyncLineC,
; cbar.c    277		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    278		20*256	+	SRAMBank1 + SyncLineC,
; cbar.c    279		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    280		20*256	+	SRAMBank1 + SyncLineC,
; cbar.c    281		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    282		20*256	+	SRAMBank1 + SyncLineC,
; cbar.c    283		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    284		20*256	+	SRAMBank1 + SyncLineC,
; cbar.c    285		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    286		20*256	+	SRAMBank1 + SyncLineC,
; cbar.c    287		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    288		20*256	+	SRAMBank1 + SyncLineC,
; cbar.c    289		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    290		20*256	+	SRAMBank1 + SyncLineC,
; cbar.c    291		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    292		20*256	+	SRAMBank1 + SyncLineC,
; cbar.c    293		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    294		20*256	+	SRAMBank1 + SyncLineC,
; cbar.c    295		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    296		20*256	+	SRAMBank1 + SyncLineC,
; cbar.c    297		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    298		7*256	  +	SRAMBank1 + SyncLineC,
; cbar.c    299		2*256		+							SyncLineB,
; cbar.c    300	
; cbar.c    301		23*256 	+							SyncLineA,
; cbar.c    302		7*256		+ SRAMBank1 + SyncLineD,
; cbar.c    303		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    304		20*256	+	SRAMBank1 + SyncLineD,
; cbar.c    305		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    306		20*256	+	SRAMBank1 + SyncLineD,
; cbar.c    307		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    308		20*256	+	SRAMBank1 + SyncLineD,
; cbar.c    309		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    310		20*256	+	SRAMBank1 + SyncLineD,
; cbar.c    311		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    312		20*256	+	SRAMBank1 + SyncLineD,
; cbar.c    313		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    314		20*256	+	SRAMBank1 + SyncLineD,
; cbar.c    315		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    316		20*256	+	SRAMBank1 + SyncLineD,
; cbar.c    317		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    318		20*256	+	SRAMBank1 + SyncLineD,
; cbar.c    319		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    320		20*256	+	SRAMBank1 + SyncLineD,
; cbar.c    321		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    322		20*256	+	SRAMBank1 + SyncLineD,
; cbar.c    323		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    324		20*256	+	SRAMBank1 + SyncLineD,
; cbar.c    325		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    326		20*256	+	SRAMBank1 + SyncLineD,
; cbar.c    327		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    328		20*256	+	SRAMBank1 + SyncLineD,
; cbar.c    329		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    330		7*256	  +	SRAMBank1 + SyncLineD,
; cbar.c    331		2*256		+							SyncLineA,
; cbar.c    332		0
; cbar.c    333	};
; cbar.c    334	
; cbar.c    335	_ROM_ UI PALPLUGETable[] =
	DW	01413H,00117H,01413H,00117H,00713H,00201H,00000H
	SYMB	IDEN, "PALPLUGETable", _PALPLUGETable, #481, 129, 0
	SYMB	ALAB, _PALPLUGETable, #481
	PUBLIC	_PALPLUGETable
	ALIGN	1
_PALPLUGETable:
	DW	01600H,02602H,03512H,03516H,0351AH,0351EH,02602H,00200H
	DW	01701H,02603H,03513H,03517H,0351BH,0351FH,02603H,00201H
; cbar.c    336	{
; cbar.c    337		22*256 	+							SyncLineB,
; cbar.c    338		38*256	+       		  SyncLineC,
; cbar.c    339		53*256	+	SRAMBank1 + SyncLineC,
; cbar.c    340		53*256	+	SRAMBank2 + SyncLineC,
; cbar.c    341		53*256	+	SRAMBank3 + SyncLineC,
; cbar.c    342		53*256	+	SRAMBank4 + SyncLineC,
; cbar.c    343		38*256	+	  		      SyncLineC,
; cbar.c    344		2*256		+							SyncLineB,
; cbar.c    345	
; cbar.c    346		23*256 	+							SyncLineA,
; cbar.c    347		38*256	+     		    SyncLineD,
; cbar.c    348		53*256 	+	SRAMBank1 + SyncLineD,
; cbar.c    349		53*256 	+	SRAMBank2 + SyncLineD,
; cbar.c    350		53*256 	+	SRAMBank3 + SyncLineD,
; cbar.c    351		53*256 	+	SRAMBank4 + SyncLineD,
; cbar.c    352		38*256	+	 		    	  SyncLineD,
; cbar.c    353		2*256		+							SyncLineA,
; cbar.c    354		0
; cbar.c    355	};
; cbar.c    356	
; cbar.c    357	_ROM_ UI NTSCBlackTable[] =
	DW	00000H
	SYMB	IDEN, "NTSCBlackTable", _NTSCBlackTable, #481, 129, 0
	SYMB	ALAB, _NTSCBlackTable, #481
	PUBLIC	_NTSCBlackTable
	ALIGN	1
_NTSCBlackTable:
	DW	00301H,01000H,07A02H,07A02H,00200H,01101H,07A03H,07903H
; cbar.c    358	{
; cbar.c    359		3*256 	+							SyncLineA,
; cbar.c    360		16*256	+							SyncLineB,
; cbar.c    361		122*256	+							SyncLineC,
; cbar.c    362		122*256	+							SyncLineC,
; cbar.c    363	
; cbar.c    364		2*256		+							SyncLineB,
; cbar.c    365		17*256 	+							SyncLineA,
; cbar.c    366		122*256	+							SyncLineD,
; cbar.c    367		121*256	+							SyncLineD,
; cbar.c    368		0
; cbar.c    369	};
; cbar.c    370	
; cbar.c    371	_ROM_ UI NTSCFullFieldTable[] =
	DW	00000H
	SYMB	IDEN, "NTSCFullFieldTable", _NTSCFullFieldTable, #481, 129, 0
	SYMB	ALAB, _NTSCFullFieldTable, #481
	PUBLIC	_NTSCFullFieldTable
	ALIGN	1
_NTSCFullFieldTable:
	DW	00301H,01000H,07A12H,07A12H,00200H,01101H,07A13H,07913H
; cbar.c    372	{
; cbar.c    373		3*256 	+							SyncLineA,
; cbar.c    374		16*256	+							SyncLineB,
; cbar.c    375		122*256	+	SRAMBank1	+	SyncLineC,
; cbar.c    376		122*256	+	SRAMBank1 + SyncLineC,
; cbar.c    377	
; cbar.c    378		2*256		+							SyncLineB,
; cbar.c    379		17*256 	+							SyncLineA,
; cbar.c    380		122*256	+	SRAMBank1 + SyncLineD,
; cbar.c    381		121*256	+	SRAMBank1 + SyncLineD,
; cbar.c    382		0
; cbar.c    383	};
; cbar.c    384	
; cbar.c    385	_ROM_ UI SMPTECBarTable[] =
	DW	00000H
	SYMB	IDEN, "SMPTECBarTable", _SMPTECBarTable, #481, 129, 0
	SYMB	ALAB, _SMPTECBarTable, #481
	PUBLIC	_SMPTECBarTable
	ALIGN	1
_SMPTECBarTable:
	DW	00301H,01000H,0A412H,01316H,03D1AH,00200H,01101H,0A313H
; cbar.c    386	{
; cbar.c    387		3*256 	+							SyncLineA,
; cbar.c    388		16*256	+							SyncLineB,
; cbar.c    389		164*256	+	SRAMBank1 + SyncLineC,
; cbar.c    390		19*256	+	SRAMBank2 + SyncLineC,
; cbar.c    391		61*256	+	SRAMBank3 + SyncLineC,
; cbar.c    392	
; cbar.c    393		2*256		+							SyncLineB,
; cbar.c    394		17*256 	+							SyncLineA,
; cbar.c    395		163*256	+	SRAMBank1 + SyncLineD,
; cbar.c    396		19*256	+	SRAMBank2 + SyncLineD,
; cbar.c    397		61*256	+	SRAMBank3 + SyncLineD,
; cbar.c    398		0
; cbar.c    399	};
; cbar.c    400	
; cbar.c    401	_ROM_ UI NTSCWindowTable[] =
	DW	01317H,03D1BH,00000H
	SYMB	IDEN, "NTSCWindowTable", _NTSCWindowTable, #481, 129, 0
	SYMB	ALAB, _NTSCWindowTable, #481
	PUBLIC	_NTSCWindowTable
	ALIGN	1
_NTSCWindowTable:
	DW	00301H,01000H,01E02H,00112H,00116H,00102H,0011AH,01D02H
	DW	0771EH,03E02H,00200H,01101H,01D03H,00113H,00117H,00103H
; cbar.c    402	{
; cbar.c    403		3*256 	+							SyncLineA,
; cbar.c    404		16*256	+							SyncLineB,
; cbar.c    405		30*256	+	        		SyncLineC,
; cbar.c    406		1*256		+	SRAMBank1 + SyncLineC,
; cbar.c    407		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    408		1*256		+	    		    SyncLineC,
; cbar.c    409		1*256		+	SRAMBank3 + SyncLineC,
; cbar.c    410		29*256	+	 			    	SyncLineC,
; cbar.c    411		119*256	+	SRAMBank4 + SyncLineC,
; cbar.c    412		62*256	+			        SyncLineC,
; cbar.c    413	
; cbar.c    414		2*256		+							SyncLineB,
; cbar.c    415		17*256 	+							SyncLineA,
; cbar.c    416		29*256	+	       			SyncLineD,
; cbar.c    417		1*256		+	SRAMBank1 + SyncLineD,
; cbar.c    418		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    419		1*256		+	  		      SyncLineD,
; cbar.c    420		1*256		+	SRAMBank3 + SyncLineD,
; cbar.c    421		29*256	+	      		  SyncLineD,
; cbar.c    422		119*256	+	SRAMBank4 + SyncLineD,
; cbar.c    423		62*256	+	    		    SyncLineD,
; cbar.c    424		0
; cbar.c    425	};
; cbar.c    426	
; cbar.c    427	_ROM_ UI NTSCCheckfieldTable[] =
	DW	0011BH,01D03H,0771FH,03E03H,00000H
	SYMB	IDEN, "NTSCCheckfieldTable", _NTSCCheckfieldTable, #481, 129, 0
	SYMB	ALAB, _NTSCCheckfieldTable, #481
	PUBLIC	_NTSCCheckfieldTable
	ALIGN	1
_NTSCCheckfieldTable:
	DW	00301H,01000H,00112H,07916H,07A1AH,00200H,01101H,07A17H
; cbar.c    428	{
; cbar.c    429		3*256 	+							SyncLineA,
; cbar.c    430		16*256	+							SyncLineB,
; cbar.c    431		1*256		+	SRAMBank1 + SyncLineC,
; cbar.c    432		121*256	+	SRAMBank2 + SyncLineC,
; cbar.c    433		122*256	+	SRAMBank3 + SyncLineC,
; cbar.c    434	
; cbar.c    435		2*256		+							SyncLineB,
; cbar.c    436		17*256 	+							SyncLineA,
; cbar.c    437		122*256	+	SRAMBank2 + SyncLineD,
; cbar.c    438		121*256	+	SRAMBank3 + SyncLineD,
; cbar.c    439		0
; cbar.c    440	};
; cbar.c    441	
; cbar.c    442	_ROM_ UI NTSCCrosshatchTable[] =
	DW	0791BH,00000H
	SYMB	IDEN, "NTSCCrosshatchTable", _NTSCCrosshatchTable, #481, 129, 0
	SYMB	ALAB, _NTSCCrosshatchTable, #481
	PUBLIC	_NTSCCrosshatchTable
	ALIGN	1
_NTSCCrosshatchTable:
	DW	00301H,01000H,00912H,00116H,01012H,00116H,01112H,00116H
	DW	01012H,00116H,01112H,00116H,01012H,00116H,01112H,00116H
	DW	01012H,00116H,01112H,00116H,01012H,00116H,01112H,00116H
	DW	01012H,00116H,01112H,00116H,01012H,00116H,00712H,00200H
	DW	01101H,00813H,00117H,01113H,00117H,01013H,00117H,01113H
	DW	00117H,01013H,00117H,01113H,00117H,01013H,00117H,01113H
	DW	00117H,01013H,00117H,01113H,00117H,01013H,00117H,01113H
; cbar.c    443	{
; cbar.c    444		3*256 	+							SyncLineA,
; cbar.c    445		16*256	+							SyncLineB,
; cbar.c    446		9*256		+	SRAMBank1 + SyncLineC,
; cbar.c    447		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    448		16*256	+	SRAMBank1 + SyncLineC,
; cbar.c    449		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    450		17*256	+	SRAMBank1 + SyncLineC,
; cbar.c    451		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    452		16*256	+	SRAMBank1 + SyncLineC,
; cbar.c    453		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    454		17*256	+	SRAMBank1 + SyncLineC,
; cbar.c    455		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    456		16*256	+	SRAMBank1 + SyncLineC,
; cbar.c    457		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    458		17*256	+	SRAMBank1 + SyncLineC,
; cbar.c    459		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    460		16*256	+	SRAMBank1 + SyncLineC,
; cbar.c    461		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    462		17*256	+	SRAMBank1 + SyncLineC,
; cbar.c    463		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    464		16*256	+	SRAMBank1 + SyncLineC,
; cbar.c    465		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    466		17*256	+	SRAMBank1 + SyncLineC,
; cbar.c    467		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    468		16*256	+	SRAMBank1 + SyncLineC,
; cbar.c    469		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    470		17*256	+	SRAMBank1 + SyncLineC,
; cbar.c    471		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    472		16*256	+	SRAMBank1 + SyncLineC,
; cbar.c    473		1*256		+	SRAMBank2 + SyncLineC,
; cbar.c    474		7*256		+	SRAMBank1 + SyncLineC,
; cbar.c    475	
; cbar.c    476		2*256		+							SyncLineB,
; cbar.c    477		17*256 	+							SyncLineA,
; cbar.c    478		8*256		+	SRAMBank1 + SyncLineD,
; cbar.c    479		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    480		17*256	+	SRAMBank1 + SyncLineD,
; cbar.c    481		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    482		16*256	+	SRAMBank1 + SyncLineD,
; cbar.c    483		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    484		17*256	+	SRAMBank1 + SyncLineD,
; cbar.c    485		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    486		16*256	+	SRAMBank1 + SyncLineD,
; cbar.c    487		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    488		17*256	+	SRAMBank1 + SyncLineD,
; cbar.c    489		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    490		16*256	+	SRAMBank1 + SyncLineD,
; cbar.c    491		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    492		17*256	+	SRAMBank1 + SyncLineD,
; cbar.c    493		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    494		16*256	+	SRAMBank1 + SyncLineD,
; cbar.c    495		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    496		17*256	+	SRAMBank1 + SyncLineD,
; cbar.c    497		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    498		16*256	+	SRAMBank1 + SyncLineD,
; cbar.c    499		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    500		17*256	+	SRAMBank1 + SyncLineD,
; cbar.c    501		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    502		16*256	+	SRAMBank1 + SyncLineD,
; cbar.c    503		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    504		17*256	+	SRAMBank1 + SyncLineD,
; cbar.c    505		1*256		+	SRAMBank2 + SyncLineD,
; cbar.c    506		6*256		+	SRAMBank1 + SyncLineD,
; cbar.c    507		0
; cbar.c    508	};
; cbar.c    509	
; cbar.c    510	_ROM_ UI NTSCPLUGETable[] =
	DW	00117H,01013H,00117H,01113H,00117H,00613H,00000H
	SYMB	IDEN, "NTSCPLUGETable", _NTSCPLUGETable, #481, 129, 0
	SYMB	ALAB, _NTSCPLUGETable, #481
	PUBLIC	_NTSCPLUGETable
	ALIGN	1
_NTSCPLUGETable:
	DW	00301H,01000H,03502H,03812H,01316H,0131AH,0131EH,04E02H
	DW	00200H,01101H,03403H,03813H,01317H,0131BH,0131FH,04E03H
; cbar.c    511	{
; cbar.c    512		3*256 	+							SyncLineA,
; cbar.c    513		16*256	+							SyncLineB,
; cbar.c    514		53*256	+	 		       	SyncLineC,
; cbar.c    515		56*256	+	SRAMBank1 + SyncLineC,
; cbar.c    516		19*256	+	SRAMBank2 + SyncLineC,
; cbar.c    517		19*256	+	SRAMBank3 + SyncLineC,
; cbar.c    518		19*256	+	SRAMBank4 + SyncLineC,
; cbar.c    519		78*256	+	    		    SyncLineC,
; cbar.c    520	
; cbar.c    521		2*256		+							SyncLineB,
; cbar.c    522		17*256 	+							SyncLineA,
; cbar.c    523		52*256	+	    		    SyncLineD,
; cbar.c    524		56*256	+	SRAMBank1 + SyncLineD,
; cbar.c    525		19*256	+	SRAMBank2 + SyncLineD,
; cbar.c    526		19*256	+	SRAMBank3 + SyncLineD,
; cbar.c    527		19*256	+	SRAMBank4 + SyncLineD,
; cbar.c    528		78*256	+	       		 	SyncLineD,
; cbar.c    529		0
; cbar.c    530	};
; cbar.c    531																								// Signal array defined in ROM
; cbar.c    532																								//  (size/start is specified in BYTES
; cbar.c    533																								//  in config.h)
; cbar.c    534	_ROM_ int VideoSignalArray[SizeOfCBVideoCode/2] _at( StartOfCBVideoCode);
; cbar.c    535	_ROM_ int SoundSignalArray[SizeOfEmbAudioCode/2] _at( StartOfEmbAudioCode);
; cbar.c    536	
; cbar.c    537	volatile int SRAMVideoPort _at( 0x44000); 			// Port defined in PLD
; cbar.c    538	volatile int SRAMSoundPort _at( 0x40000); 			// Port defined in PLD
; cbar.c    539	volatile int StatusPort _at( 0x6a000); 				// Port defined in PLD
; cbar.c    540	volatile int HOffsetPort _at( 0x6a004); 			// Port defined in PLD
; cbar.c    541	volatile int ChromaGainPort _at( 0x6a008);  	// Port defined in PLD
; cbar.c    542	
; cbar.c    543	volatile _near UI TimeTickCounter;
; cbar.c    544	volatile _near int LineOffset;
; cbar.c    545	
; cbar.c    546	volatile int PhaseOffset;
; cbar.c    547	
; cbar.c    548	CBObject CBSetup;
; cbar.c    549	
; cbar.c    550	static _near UI Status _at( 0x120);
; cbar.c    551	
; cbar.c    552	static _ROM_  UI * _near TablePtr _at( 0x122);
; cbar.c    553	static _ROM_  UI *newTablePtr;
; cbar.c    554	
; cbar.c    555	static _near UI LineCnt _at( 0x126);
; cbar.c    556	static _near UC FrameCnt _at( 0x128);
; cbar.c    557	
; cbar.c    558	static _near UC SyncLineCnt _at( 0x129);
; cbar.c    559	static _near UC SyncLinePtr _at( 0x12A);
; cbar.c    560																	 
; cbar.c    561	static _near UC SoundFrameCnt _at( 0x12B);
; cbar.c    562	static _near UC SoundCnt _at( 0x12C);
; cbar.c    563	static _near UC SoundPtr _at( 0x12D);
; cbar.c    564	static _near UC SoundPtrMax _at( 0x12E);
; cbar.c    565	
; cbar.c    566	static char Blanking, NewPattern, SoundEnable;
; cbar.c    567	
; cbar.c    568	/**************************************************************************/
; cbar.c    569	/* WriteCBGain		 																						 	   CBAR.C */
; cbar.c    570	/*																																				*/
; cbar.c    571	/* Author:	 Kim Engedahl, DEV, 000504																		*/
; cbar.c    572	/* Revised:	 000606, KEn, DEV     																				*/
; cbar.c    573	/*																																				*/
; cbar.c    574	/* Function:   																														*/
; cbar.c    575	/* Remarks:	 																															*/
; cbar.c    576	/* Returns:																																*/
; cbar.c    577	/* Updates:																																*/
; cbar.c    578	/**************************************************************************/
; cbar.c    579	int WriteCBGain( UC gain)
; cbar.c    580	{
	DW	00000H
CBAR_PR	SEGMENT	HCODE
	RSEG	CBAR_PR
	ALIGN	1
	SYMB	LINE, 580
	PUBLIC	_WriteCBGain
_WriteCBGain:
	SYMB	TYPE, 483, 'X', 12, #16, 30, 1, #3
	SYMB	GFUN, "WriteCBGain", _WriteCBGain, #483, 0, 0, 0
	SYMB	ALAB, _WriteCBGain, #483
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	LTIM, "gain", 0, 0, 2253
	SYMB	IDEN, "gain", 0, #3, 0, 2061
; cbar.c    581		return( Write_AD8402( CBPotMeter, 0, gain));
	SYMB	LINE, 581
	MOV.B	R0H,#00H
	MOV.B	R1L,R0H
	MOV.B	[R7],R0L
	SYMB	LTIM, "gain", 0, 0, 2125
	SYMB	LTIM, "gain", -2, 130, 2245
	MOV.B	R0L,R1L
	MOV.B	R1L,[R7]
	CALL	_Write_AD8402
	SYMB	LTIM, "gain", -2, 130, 2117
	SYMB	LTIM, "gain", 4, 0, 2253
	SYMB	LTIM, "gain", 4, 0, 2125
; cbar.c    582	}
	SYMB	LINE, 582
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; cbar.c    583	
; cbar.c    584	/**************************************************************************/
; cbar.c    585	/* WriteCBChromaGain		 																			 	   CBAR.C */
; cbar.c    586	/*																																				*/
; cbar.c    587	/* Author:	 Kim Engedahl, DEV, 000504																		*/
; cbar.c    588	/* Revised:	 000603, KEn, DEV     																				*/
; cbar.c    589	/*																																				*/
; cbar.c    590	/* Function:   																														*/
; cbar.c    591	/* Remarks:	 The resistor at V118 has been swapped ie. bit 0 is bit 3 etc.*/
; cbar.c    592	/*					 The conversion is done in SW instead of correcting the parts	*/
; cbar.c    593	/*					 list.																												*/
; cbar.c    594	/* Returns:																																*/
; cbar.c    595	/* Updates:																																*/
; cbar.c    596	/**************************************************************************/
; cbar.c    597	int WriteCBChromaGain( UC gain)
; cbar.c    598	{
	ALIGN	1
	SYMB	LINE, 598
	PUBLIC	_WriteCBChromaGain
_WriteCBChromaGain:
	SYMB	TYPE, 484, 'X', 12, #16, 30, 1, #3
	SYMB	GFUN, "WriteCBChromaGain", _WriteCBChromaGain, #484, 0, 0, 0
	SYMB	ALAB, _WriteCBChromaGain, #484
	SYMB	LTIM, "gain", 0, 0, 2253
	SYMB	IDEN, "gain", 0, #3, 0, 2061
	SYMB	IDEN, "tmp", -1, #3, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; cbar.c    599		UC tmp = 0;
	SYMB	LINE, 599
	MOV.B	R0H,#00H
	SYMB	LTIM, "tmp", 1, 0, 205
; cbar.c    600	
; cbar.c    601		// gain bit 1 = bit4
; cbar.c    602		// gain bit 2 = bit3
; cbar.c    603		// gain bit 3 = bit2
; cbar.c    604		// gain bit 4 = bit1
; cbar.c    605	
; cbar.c    606		if ( gain & 0x01)
	SYMB	LINE, 606
	MOV.B	R1L,R0L
	AND.B	R1L,#01H
	BEQ	_3
; cbar.c    607			tmp += 0x08;
	SYMB	LINE, 607
	MOV.B	R0H,#08H
	SYMB	LTIM, "tmp", 1, 0, 77
	SYMB	LTIM, "tmp", 1, 0, 205
_3:
; cbar.c    608	
; cbar.c    609		if ( gain & 0x02)
	SYMB	LINE, 609
	MOV.B	R1L,R0L
	AND.B	R1L,#02H
	BEQ	_4
; cbar.c    610			tmp += 0x04;
	SYMB	LINE, 610
	ADDS.B	R0H,#04H
	SYMB	LTIM, "tmp", 1, 0, 77
	SYMB	LTIM, "tmp", 1, 0, 205
_4:
; cbar.c    611	
; cbar.c    612		if ( gain & 0x04)
	SYMB	LINE, 612
	MOV.B	R1L,#04H
	AND.B	R1L,R0L
	BEQ	_5
; cbar.c    613			tmp += 0x02;
	SYMB	LINE, 613
	ADDS.B	R0H,#02H
	SYMB	LTIM, "tmp", 1, 0, 77
	SYMB	LTIM, "tmp", 1, 0, 205
_5:
; cbar.c    614	
; cbar.c    615		if ( gain & 0x08)
	SYMB	LINE, 615
	AND.B	R0L,#08H
	SYMB	LTIM, "gain", 0, 0, 2125
	BEQ	_6
; cbar.c    616			tmp += 0x01;
	SYMB	LINE, 616
	ADDS.B	R0H,#01H
	SYMB	LTIM, "tmp", 1, 0, 77
	SYMB	LTIM, "tmp", 1, 0, 205
_6:
; cbar.c    617	
; cbar.c    618		ChromaGainPort = tmp;
	SYMB	LINE, 618
	MOV.B	R0L,R0H
	MOVS.B	R0H,#00H
	SYMB	LTIM, "tmp", 1, 0, 77
	MOV.B	ES,#SEG( _ChromaGainPort )
	MOV.W	R1,#SOF( _ChromaGainPort )
	MOV.W	[R1],R0
; cbar.c    619	
; cbar.c    620		return( OK);
	SYMB	LINE, 620
	MOV.W	R0,#0FFFFH
; cbar.c    621	}
	SYMB	LINE, 621
	RET
	SYMB	EFUN
; cbar.c    622	
; cbar.c    623	/**************************************************************************/
; cbar.c    624	/* SRAMVideoLoad																 	 CBAR.C */
; cbar.c    625	/*																								  */
; cbar.c    626	/* Author:	 Kim Engedahl, DEV, 000324												  */
; cbar.c    627	/* Revised:	 000603, KEn, DEV     													  */
; cbar.c    628	/*																								  */
; cbar.c    629	/* Function: Copy video data to video RAM											  */
; cbar.c    630	/* Remarks:	 S5,S4,S3 and S2 should be kept at ZERO while loading AND the */
; cbar.c    631	/*					 interrupt system should NOT clear the PS bit.				  */
; cbar.c    632	/* Returns:																					  */
; cbar.c    633	/* Updates:																					  */
; cbar.c    634	/**************************************************************************/
; cbar.c    635	int SRAMVideoLoad( UC signal, UC bank)
; cbar.c    636	{
	ALIGN	1
	SYMB	LINE, 636
	PUBLIC	_SRAMVideoLoad
_SRAMVideoLoad:
	SYMB	TYPE, 485, 'X', 12, #16, 30, 2, #3, #3
	SYMB	GFUN, "SRAMVideoLoad", _SRAMVideoLoad, #485, 0, 0, 48
	SYMB	ALAB, _SRAMVideoLoad, #485
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	LTIM, "signal", 0, 0, 2253
	SYMB	LTIM, "bank", 1, 0, 2253
	SYMB	IDEN, "signal", 0, #3, 0, 2061
	SYMB	IDEN, "bank", 1, #3, 0, 2061
	SYMB	TYPE, 486, 'n', #16, 130
	SYMB	TYPE, 487, 'P', #486
	SYMB	IDEN, "VideoDstPtr", -8, #487, 130, 5
	SYMB	TYPE, 488, 'n', #16, 129
	SYMB	TYPE, 489, 'P', #488
	SYMB	IDEN, "VideoSrcPtr", -1, #489, 130, 5
	SYMB	LTIM, "VideoSrcPtr", -1, 0, 69
	SYMB	IDEN, "i", -1, #16, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
; cbar.c    637		volatile int *VideoDstPtr;
; cbar.c    638		_ROM_  int *VideoSrcPtr;
; cbar.c    639		int i;
; cbar.c    640	
; cbar.c    641		Status |= PS;										// Set PS bit while loading
	SYMB	LINE, 641
	OR.W	_Status,#01000H
; cbar.c    642		StatusPort = Status;
	SYMB	LINE, 642
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R1,#SOF( _StatusPort )
	MOV.W	[R1],_Status
; cbar.c    643																							 		
; cbar.c    644		VideoDstPtr = &SRAMVideoPort + (( bank/4)-4) * 0x0800;
	SYMB	LINE, 644
	LSR.B	R0H,#02H
	SYMB	LTIM, "bank", 1, 0, 2125
	MOV.B	R1L,R0H
	MOVS.B	R1H,#00H
	ASL.W	R1,#0CH
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.W	R5,#SEG( _SRAMVideoPort+-16384 )
	MOV.W	R4,#SOF( _SRAMVideoPort+-16384 )
	ADD.W	R4,R2
	MOV.W	[R7+6],R5
	MOV.W	[R7+4],R4
; cbar.c    645		VideoSrcPtr = &VideoSignalArray[ 0x800 * (long)signal];
	SYMB	LINE, 645
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	SYMB	LTIM, "signal", 0, 0, 2125
	ASL.D	R0,#0CH
	MOV.W	R3,#SEG( _VideoSignalArray )
	MOV.W	R2,#SOF( _VideoSignalArray )
	ADD.W	R2,R0
	ADDC.W	R3,R1
	SYMB	LTIM, "VideoSrcPtr", 11, 0, 205
; cbar.c    646	
; cbar.c    647		for ( i = 0; i < 2048; i++)
	SYMB	LINE, 647
	MOV.W	R0,#00H
	SYMB	LTIM, "i", 2, 0, 205
_7:
; cbar.c    648			*VideoDstPtr++ = *VideoSrcPtr++;
	SYMB	LINE, 648
	MOV.W	R5,R3
	MOV.W	R4,R2
	MOV.W	[R7+2],R5
	MOV.W	[R7],R4
	MOV.B	CS,R5L
	MOVC.W	R5,[R4+]
	SYMB	LTIM, "VideoSrcPtr", 11, 0, 77
	SYMB	LTIM, "VideoSrcPtr", -12, 130, 197
	MOV.W	R3,[R7+6]
	MOV.W	R2,[R7+4]
	MOV.B	ES,R3L
	MOV.W	[R2],R5
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	ADD.W	R2,#02H
	ADDC.W	R3,#00H
	SYMB	LTIM, "VideoSrcPtr", -12, 130, 69
	SYMB	LTIM, "VideoSrcPtr", 11, 0, 205
	SYMB	LTIM, "VideoSrcPtr", 11, 0, 77
	SYMB	LTIM, "VideoSrcPtr", 11, 0, 205
	ADD.W	[R7+4],#02H
	SYMB	LINE, 647
	ADDS.W	R0,#01H
	SYMB	LTIM, "i", 2, 0, 77
	SYMB	LTIM, "i", 2, 0, 205
	CMP.W	R0,#0800H
	BLT	_7
; cbar.c    649	
; cbar.c    650		Status &= ~PS;									// Clear PS bit again
	SYMB	LINE, 650
	AND.W	_Status,#0EFFFH
; cbar.c    651		StatusPort = Status;
	SYMB	LINE, 651
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
; cbar.c    652	
; cbar.c    653		return( OK);
	SYMB	LINE, 653
	MOV.W	R0,#0FFFFH
	SYMB	LTIM, "i", 2, 0, 77
; cbar.c    654	}
	SYMB	LINE, 654
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "VideoSrcPtr", 11, 0, 77
	SYMB	EFUN
; cbar.c    655	
; cbar.c    656	/**************************************************************************/
; cbar.c    657	/* SRAMSoundLoad																    CBAR.C */
; cbar.c    658	/*																								  */
; cbar.c    659	/* Author:	 Kim Engedahl, DEV, 000410												  */
; cbar.c    660	/* Revised:	 000603, KEn, DEV     													  */
; cbar.c    661	/*																								  */
; cbar.c    662	/* Function: Copy sound data to sound RAM											  */
; cbar.c    663	/* Remarks:	 																				  */
; cbar.c    664	/* Returns:																					  */
; cbar.c    665	/* Updates:																					  */
; cbar.c    666	/**************************************************************************/
; cbar.c    667	int SRAMSoundLoad( UC signal)
; cbar.c    668	{
	ALIGN	1
	SYMB	LINE, 668
	PUBLIC	_SRAMSoundLoad
_SRAMSoundLoad:
	SYMB	TYPE, 490, 'X', 12, #16, 30, 1, #3
	SYMB	GFUN, "SRAMSoundLoad", _SRAMSoundLoad, #490, 0, 0, 48
	SYMB	ALAB, _SRAMSoundLoad, #490
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	LTIM, "signal", 0, 0, 2253
	SYMB	IDEN, "signal", 0, #3, 0, 2061
	SYMB	IDEN, "SoundDstPtr", -8, #487, 130, 5
	SYMB	IDEN, "SoundSrcPtr", -1, #489, 130, 5
	SYMB	LTIM, "SoundSrcPtr", -1, 0, 69
	SYMB	IDEN, "i", -1, #16, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
; cbar.c    669		volatile int *SoundDstPtr;
; cbar.c    670		_ROM_  int *SoundSrcPtr;
; cbar.c    671		int i;
; cbar.c    672	
; cbar.c    673		signal = ( signal == EmbAudioStereo1kHz);
	SYMB	LINE, 673
	CMP.B	R0L,#02H
	BNE	_10
	MOVS.B	R0L,#01H
	BR	_12
_10:
	MOVS.B	R0L,#00H
_12:
	SYMB	LTIM, "signal", 0, 0, 2125
	SYMB	LTIM, "signal", 0, 0, 2253
; cbar.c    674	
; cbar.c    675		Status |= PS;									// Set PS bit while loading
	SYMB	LINE, 675
	OR.W	_Status,#01000H
; cbar.c    676		StatusPort = Status;
	SYMB	LINE, 676
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R1,#SOF( _StatusPort )
	MOV.W	[R1],_Status
; cbar.c    677																							 
; cbar.c    678		SoundDstPtr = &SRAMSoundPort;
	SYMB	LINE, 678
	MOV.W	[R7+6],#SEG( _SRAMSoundPort )
	MOV.W	[R7+4],#SOF( _SRAMSoundPort )
; cbar.c    679		SoundSrcPtr = &SoundSignalArray[2304*signal];
	SYMB	LINE, 679
	MOVS.B	R0H,#00H
	SYMB	LTIM, "signal", 0, 0, 2125
	MULU.W	R0,#01200H
	MOVS.W	R1,#00H
	MOV.W	R3,#SEG( _SoundSignalArray )
	MOV.W	R2,#SOF( _SoundSignalArray )
	ADD.W	R2,R0
	ADDC.W	R3,R1
	SYMB	LTIM, "SoundSrcPtr", 11, 0, 205
; cbar.c    680	
; cbar.c    681		for ( i = 0; i < 2304; i++)
	SYMB	LINE, 681
	MOV.W	R0,#00H
	SYMB	LTIM, "i", 2, 0, 205
_9:
; cbar.c    682			*SoundDstPtr++ = *SoundSrcPtr++;
	SYMB	LINE, 682
	MOV.W	R5,R3
	MOV.W	R4,R2
	MOV.W	[R7+2],R5
	MOV.W	[R7],R4
	MOV.B	CS,R5L
	MOVC.W	R5,[R4+]
	SYMB	LTIM, "SoundSrcPtr", 11, 0, 77
	SYMB	LTIM, "SoundSrcPtr", -12, 130, 197
	MOV.W	R3,[R7+6]
	MOV.W	R2,[R7+4]
	MOV.B	ES,R3L
	MOV.W	[R2],R5
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	ADD.W	R2,#02H
	ADDC.W	R3,#00H
	SYMB	LTIM, "SoundSrcPtr", -12, 130, 69
	SYMB	LTIM, "SoundSrcPtr", 11, 0, 205
	SYMB	LTIM, "SoundSrcPtr", 11, 0, 77
	SYMB	LTIM, "SoundSrcPtr", 11, 0, 205
	ADD.W	[R7+4],#02H
	SYMB	LINE, 681
	ADDS.W	R0,#01H
	SYMB	LTIM, "i", 2, 0, 77
	SYMB	LTIM, "i", 2, 0, 205
	CMP.W	R0,#0900H
	BLT	_9
; cbar.c    683	
; cbar.c    684		Status &= ~PS;									// Clear PS bit again
	SYMB	LINE, 684
	AND.W	_Status,#0EFFFH
; cbar.c    685		StatusPort = Status;
	SYMB	LINE, 685
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
; cbar.c    686	
; cbar.c    687		return( OK);
	SYMB	LINE, 687
	MOV.W	R0,#0FFFFH
	SYMB	LTIM, "i", 2, 0, 77
; cbar.c    688	}
	SYMB	LINE, 688
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "SoundSrcPtr", 11, 0, 77
	SYMB	EFUN
; cbar.c    689	
; cbar.c    690	/**************************************************************************/
; cbar.c    691	/* CBLineInterrupt															    CBAR.C */
; cbar.c    692	/*																								  */
; cbar.c    693	/* Author:	 Kim Engedahl, DEV, 000322												  */
; cbar.c    694	/* Revised:	 000603, KEn, DEV     													  */
; cbar.c    695	/*																								  */
; cbar.c    696	/* Function: 																				  */
; cbar.c    697	/* Remarks:	 Delayed field interrupt is synchronized to line ??/??		  */
; cbar.c    698	/* Returns:																					  */
; cbar.c    699	/* Updates:																					  */
; cbar.c    700	/**************************************************************************/
; cbar.c    701	void CBLineInterrupt( void)
; cbar.c    702	{
	ALIGN	1
	SYMB	LINE, 702
CBAR_CLR_FA	SEGMENT	HDATA INSEGMENT CLEAR
	RSEG	CBAR_CLR_FA
	ALIGN	1
_14:	DS	2
	PUBLIC	_CBLineInterrupt
	RSEG	CBAR_PR
_CBLineInterrupt:
	SYMB	TYPE, 491, 'X', 12, #1, 30, 0
	SYMB	GFUN, "CBLineInterrupt", _CBLineInterrupt, #491, 0, 0, 0
	SYMB	ALAB, _CBLineInterrupt, #491
	SYMB	IDEN, "tmp", _14, #18, 130, 4
; cbar.c    703	  static UI tmp;
; cbar.c    704	
; cbar.c    705		if ( CBSetup.System < NTSC_US)
	SYMB	LINE, 705
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BCC	_24
; cbar.c    706		{
; cbar.c    707			if ( TF0)									// If delayed field interrupt...
	SYMB	LINE, 707
	MOV	C,0285H
	BCC	_15
; cbar.c    708			{
; cbar.c    709				TF0 = 0;									// Clear delayed field interrupt
	SYMB	LINE, 709
	CLR	0285H
; cbar.c    710	
; cbar.c    711				SyncLineCnt = 19;						// Next interrupt in 19 lines
	SYMB	LINE, 711
	MOV.B	_SyncLineCnt,#013H
; cbar.c    712				SyncLinePtr = 0;
	SYMB	LINE, 712
	MOV.B	_SyncLinePtr,#00H
; cbar.c    713		
; cbar.c    714				LineCnt = 3;
	SYMB	LINE, 714
	MOV.W	_LineCnt,#03H
; cbar.c    715	
; cbar.c    716				SoundCnt = 2;
	SYMB	LINE, 716
	MOV.B	_SoundCnt,#02H
; cbar.c    717				SoundPtr = 2;
	SYMB	LINE, 717
	MOV.B	_SoundPtr,#02H
; cbar.c    718	
; cbar.c    719				SoundPtrMax = 64;
	SYMB	LINE, 719
	MOV.B	_SoundPtrMax,#040H
; cbar.c    720	
; cbar.c    721				Status |= FIELD1;						// This is field 1 of 8
	SYMB	LINE, 721
	OR.W	_Status,#0200H
; cbar.c    722				Status &= ~SYSSEL;					
	SYMB	LINE, 722
	AND.W	_Status,#0FFBFH
; cbar.c    723				StatusPort = Status;
	SYMB	LINE, 723
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
; cbar.c    724	
; cbar.c    725				return;
	SYMB	LINE, 725
	RET
; cbar.c    726			}
	SYMB	LINE, 726
_15:
; cbar.c    727			else
; cbar.c    728			{
; cbar.c    729				if ( Status & FIELD1)
	SYMB	LINE, 729
	MOV.W	R0,#0200H
	AND.W	R0,_Status
	BEQ	_16
; cbar.c    730				{
; cbar.c    731					Status &= ~FIELD1;
	SYMB	LINE, 731
	AND.W	_Status,#0FDFFH
; cbar.c    732					StatusPort = Status;
	SYMB	LINE, 732
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
; cbar.c    733				}
	SYMB	LINE, 733
_16:
; cbar.c    734	
; cbar.c    735				LineCnt++;
	SYMB	LINE, 735
	ADDS.W	_LineCnt,#01H
; cbar.c    736	
; cbar.c    737				if ( CBSetup.System == PAL_PALID)
	SYMB	LINE, 737
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_19
; cbar.c    738				{
; cbar.c    739					if ( LineCnt == 6)				// Prepare for line 7
	SYMB	LINE, 739
	CMP.W	_LineCnt,#06H
	BNE	_17
; cbar.c    740					{
; cbar.c    741						Status |= LINE7PULSE;
	SYMB	LINE, 741
	OR.W	_Status,#02000H
; cbar.c    742						StatusPort = Status;			// Update status port
	SYMB	LINE, 742
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
; cbar.c    743					}
	SYMB	LINE, 743
_17:
; cbar.c    744	
; cbar.c    745					if ( LineCnt == 7)				// Prepare for line 8
	SYMB	LINE, 745
	CMP.W	_LineCnt,#07H
	BNE	_19
; cbar.c    746					{
; cbar.c    747						Status &= ~LINE7PULSE;
	SYMB	LINE, 747
	AND.W	_Status,#0DFFFH
; cbar.c    748						StatusPort = Status;			// Update status port
	SYMB	LINE, 748
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
; cbar.c    749					}
; cbar.c    750	
; cbar.c    751				}		
	SYMB	LINE, 751
_19:
; cbar.c    752	
; cbar.c    753				if ( !--SoundCnt)
	SYMB	LINE, 753
	ADDS.B	_SoundCnt,#0FH
	MOV.B	R0L,_SoundCnt
	BNE	_38
; cbar.c    754				{
; cbar.c    755					if ( SoundPtr > SoundPtrMax)
	SYMB	LINE, 755
	MOV.B	R0L,_SoundPtrMax
	CMP.B	_SoundPtr,R0L
	BL	_22
; cbar.c    756					{
; cbar.c    757						SoundPtr = 0;
	SYMB	LINE, 757
	MOV.B	_SoundPtr,#00H
; cbar.c    758	
; cbar.c    759						if ( SoundPtrMax == 63)
	SYMB	LINE, 759
	MOV.B	_SoundPtrMax,R0L
	CMP.B	_SoundPtrMax,#03FH
	BNE	_20
; cbar.c    760							SoundPtrMax = 64;
	SYMB	LINE, 760
	MOV.B	_SoundPtrMax,#040H
	BR	_22
_20:
; cbar.c    761						else
; cbar.c    762							SoundPtrMax = 63;
	SYMB	LINE, 762
	MOV.B	_SoundPtrMax,#03FH
; cbar.c    763					}
	SYMB	LINE, 763
_22:
; cbar.c    764					tmp = Sound625[SoundPtr++];	// Get sound information
	SYMB	LINE, 764
	MOV.B	R0L,_SoundPtr
	MOVS.B	R0H,#00H
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _Sound625 )
	MOV.W	R0,#SOF( _Sound625 )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R1,[R0+]
	MOV.B	ES,#SEG( _14 )
	MOV.W	R0,#SOF( _14 )
	MOV.W	[R0],R1
	ADDS.B	_SoundPtr,#01H
; cbar.c    765			
; cbar.c    766					Status &= ~SOUND;					// Clear previous sound sample
	SYMB	LINE, 766
	AND.W	_Status,#0FE7FH
; cbar.c    767	
; cbar.c    768					if ( SoundEnable) 				// If embedded audio on..
	SYMB	LINE, 768
	MOV.B	ES,#SEG( _SoundEnable )
	MOV.W	R0,#SOF( _SoundEnable )
	MOV.B	R0L,[R0]
	BEQ	_23
; cbar.c    769			 			Status |= ( tmp & SOUND);	//  set sound samples
	SYMB	LINE, 769
	MOV.W	R0,#0180H
	AND.W	R0,R1
	OR.W	_Status,R0
_23:
; cbar.c    770	
; cbar.c    771					SoundCnt = tmp & 0x0F;			// Lines to next sound update
	SYMB	LINE, 771
	AND.B	R1L,#0FH
	MOV.B	_SoundCnt,R1L
; cbar.c    772					StatusPort = Status;				// Update status port
	SYMB	LINE, 772
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
; cbar.c    773				}
; cbar.c    774			}
; cbar.c    775		}
	SYMB	LINE, 775
	BR	_38
_24:
; cbar.c    776		else
; cbar.c    777		{
; cbar.c    778			if ( TF0)									// If delayed field interrupt...
	SYMB	LINE, 778
	MOV	C,0285H
	BCC	_26
; cbar.c    779			{
; cbar.c    780				TF0 = 0;									// Clear delayed field interrupt
	SYMB	LINE, 780
	CLR	0285H
; cbar.c    781	
; cbar.c    782				if ( FrameCnt > 9)
	SYMB	LINE, 782
	CMP.B	_FrameCnt,#09H
	BL	_25
; cbar.c    783				{
; cbar.c    784					FrameCnt = 1;
	SYMB	LINE, 784
	MOV.B	_FrameCnt,#01H
; cbar.c    785					SoundFrameCnt = 1;
	SYMB	LINE, 785
	MOV.B	_SoundFrameCnt,#01H
; cbar.c    786				}
	SYMB	LINE, 786
_25:
; cbar.c    787	
; cbar.c    788				SyncLineCnt = 12;								// Next interrupt in 12 lines
	SYMB	LINE, 788
	MOV.B	_SyncLineCnt,#0CH
; cbar.c    789				SyncLinePtr = 1;
	SYMB	LINE, 789
	MOV.B	_SyncLinePtr,#01H
; cbar.c    790	
; cbar.c    791				LineCnt = 6;
	SYMB	LINE, 791
	MOV.W	_LineCnt,#06H
; cbar.c    792	
; cbar.c    793				SoundCnt = 2;
	SYMB	LINE, 793
	MOV.B	_SoundCnt,#02H
; cbar.c    794				SoundPtr = 3;
	SYMB	LINE, 794
	MOV.B	_SoundPtr,#03H
; cbar.c    795				SoundPtrMax = 47;
	SYMB	LINE, 795
	MOV.B	_SoundPtrMax,#02FH
; cbar.c    796	
; cbar.c    797				Status |= FIELD1;								// This is field 1 of 4
	SYMB	LINE, 797
	OR.W	_Status,#0200H
; cbar.c    798				Status |= SYSSEL;
	SYMB	LINE, 798
	OR.W	_Status,#040H
; cbar.c    799				StatusPort = Status;
	SYMB	LINE, 799
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
; cbar.c    800	
; cbar.c    801				return;
	SYMB	LINE, 801
	RET
; cbar.c    802			}
	SYMB	LINE, 802
_26:
; cbar.c    803			else
; cbar.c    804			{
; cbar.c    805				if ( Status & FIELD1)
	SYMB	LINE, 805
	MOV.W	R0,#0200H
	AND.W	R0,_Status
	BEQ	_27
; cbar.c    806				{
; cbar.c    807					Status &= ~FIELD1;	
	SYMB	LINE, 807
	AND.W	_Status,#0FDFFH
; cbar.c    808					StatusPort = Status;
	SYMB	LINE, 808
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
; cbar.c    809				}
	SYMB	LINE, 809
_27:
; cbar.c    810	
; cbar.c    811				if ( ++LineCnt >= 525)
	SYMB	LINE, 811
	ADDS.W	_LineCnt,#01H
	CMP.W	_LineCnt,#020DH
	BCS	_29
; cbar.c    812				{
; cbar.c    813					FrameCnt++;
	SYMB	LINE, 813
	ADDS.B	_FrameCnt,#01H
; cbar.c    814					LineCnt = 0;
	SYMB	LINE, 814
	MOV.W	_LineCnt,#00H
; cbar.c    815	
; cbar.c    816					if ( ++SoundFrameCnt > 5)
	SYMB	LINE, 816
	ADDS.B	_SoundFrameCnt,#01H
	CMP.B	_SoundFrameCnt,#05H
	BL	_29
; cbar.c    817						SoundFrameCnt = 1;
	SYMB	LINE, 817
	MOV.B	_SoundFrameCnt,#01H
; cbar.c    818				}
	SYMB	LINE, 818
_29:
; cbar.c    819	
; cbar.c    820				if ( !--SoundCnt)
	SYMB	LINE, 820
	ADDS.B	_SoundCnt,#0FH
	MOV.B	R0L,_SoundCnt
	BNE	_38
; cbar.c    821				{
; cbar.c    822					if ( SoundPtr > SoundPtrMax)
	SYMB	LINE, 822
	MOV.B	R0L,_SoundPtrMax
	CMP.B	_SoundPtr,R0L
	BL	_32
; cbar.c    823					{
; cbar.c    824						SoundPtr = 0;
	SYMB	LINE, 824
	MOV.B	_SoundPtr,#00H
; cbar.c    825	
; cbar.c    826						if ( SoundPtrMax == 46)
	SYMB	LINE, 826
	MOV.B	_SoundPtrMax,R0L
	CMP.B	_SoundPtrMax,#02EH
	BNE	_30
; cbar.c    827							SoundPtrMax = 47;
	SYMB	LINE, 827
	MOV.B	_SoundPtrMax,#02FH
	BR	_32
_30:
; cbar.c    828						else
; cbar.c    829							SoundPtrMax = 46;
	SYMB	LINE, 829
	MOV.B	_SoundPtrMax,#02EH
; cbar.c    830					}
	SYMB	LINE, 830
_32:
; cbar.c    831					tmp = Sound525[SoundPtr];			// Get sound information
	SYMB	LINE, 831
	MOV.B	R0L,_SoundPtr
	MOVS.B	R0H,#00H
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _Sound525 )
	MOV.W	R0,#SOF( _Sound525 )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R1,[R0+]
	MOV.B	ES,#SEG( _14 )
	MOV.W	R0,#SOF( _14 )
	MOV.W	[R0],R1
; cbar.c    832	
; cbar.c    833					if ( SoundPtr++ == 47)				// Prepare for line 263
	SYMB	LINE, 833
	MOV.B	R0L,_SoundPtr
	ADDS.B	_SoundPtr,#01H
	CMP.B	R0L,#02FH
	BNE	_34
; cbar.c    834						if ( SoundFrameCnt & 0x01)	// Sound frames 1,3,5 are special
	SYMB	LINE, 834
	MOV.B	R0L,_SoundFrameCnt
	AND.B	R0L,#01H
	BEQ	_34
; cbar.c    835							tmp |= S3OR4;
	SYMB	LINE, 835
	OR.W	R1,#0100H
	MOV.B	ES,#SEG( _14 )
	MOV.W	R0,#SOF( _14 )
	MOV.W	[R0],R1
; cbar.c    836	
; cbar.c    837					Status &= ~SOUND;							// Clear previous sound sample
	SYMB	LINE, 837
_34:
	AND.W	_Status,#0FE7FH
; cbar.c    838	
; cbar.c    839					if ( SoundEnable)
	SYMB	LINE, 839
	MOV.B	ES,#SEG( _SoundEnable )
	MOV.W	R0,#SOF( _SoundEnable )
	MOV.B	R0L,[R0]
	BEQ	_35
; cbar.c    840						Status |= ( tmp & SOUND);		// Sound samples
	SYMB	LINE, 840
	MOV.B	ES,#SEG( _14 )
	MOV.W	R0,#SOF( _14 )
	MOV.W	R0,[R0]
	AND.W	R0,#0180H
	OR.W	_Status,R0
_35:
; cbar.c    841	
; cbar.c    842					SoundCnt = tmp & 0x0F;	 			// Lines to next sound update
	SYMB	LINE, 842
	MOV.B	ES,#SEG( _14 )
	MOV.W	R0,#SOF( _14 )
	MOV.W	R0,[R0]
	AND.B	R0L,#0FH
	MOV.B	_SoundCnt,R0L
; cbar.c    843					StatusPort = Status;					// Update status port
	SYMB	LINE, 843
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
; cbar.c    844				}
; cbar.c    845			}
; cbar.c    846		}
	SYMB	LINE, 846
_38:
; cbar.c    847	
; cbar.c    848		if ( --SyncLineCnt == 0)
	SYMB	LINE, 848
	ADDS.B	_SyncLineCnt,#0FH
	MOV.B	R0L,_SyncLineCnt
	BNE	_44
; cbar.c    849		{
; cbar.c    850		 	tmp = TablePtr[++SyncLinePtr];
	SYMB	LINE, 850
	ADDS.B	_SyncLinePtr,#01H
	MOV.B	R0L,_SyncLinePtr
	MOVS.B	R0H,#00H
	ASL.W	R0,#01H
	MOV.W	R2,R0
	SEXT.W	R3
	MOV.W	R1,_TablePtr+2
	MOV.W	R0,_TablePtr
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R1,[R0+]
	MOV.B	ES,#SEG( _14 )
	MOV.W	R0,#SOF( _14 )
	MOV.W	[R0],R1
; cbar.c    851	
; cbar.c    852			if ( tmp == 0)
	SYMB	LINE, 852
	OR.W	R1,R1
	BNE	_40
; cbar.c    853			{
; cbar.c    854				if ( NewPattern)
	SYMB	LINE, 854
	MOV.B	ES,#SEG( _NewPattern )
	MOV.W	R0,#SOF( _NewPattern )
	MOV.B	R0L,[R0]
	BEQ	_39
; cbar.c    855				{
; cbar.c    856					NewPattern = Blanking = FALSE;
	SYMB	LINE, 856
	MOV.B	ES,#SEG( _Blanking )
	MOV.W	R0,#SOF( _Blanking )
	MOV.B	[R0],#00H
	MOV.B	ES,#SEG( _NewPattern )
	MOV.W	R0,#SOF( _NewPattern )
	MOV.B	[R0],#00H
; cbar.c    857	
; cbar.c    858					TablePtr = newTablePtr;
	SYMB	LINE, 858
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R1,#SOF( _newTablePtr )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	_TablePtr+2,R1
	MOV.W	_TablePtr,R0
; cbar.c    859				}
	SYMB	LINE, 859
_39:
; cbar.c    860	
; cbar.c    861				SyncLinePtr = 0;
	SYMB	LINE, 861
	MOV.B	_SyncLinePtr,#00H
; cbar.c    862				tmp = TablePtr[0];
	SYMB	LINE, 862
	MOV.W	R1,_TablePtr+2
	MOV.W	R0,_TablePtr
	MOV.B	CS,R1L
	MOVC.W	R1,[R0+]
	MOV.B	ES,#SEG( _14 )
	MOV.W	R0,#SOF( _14 )
	MOV.W	[R0],R1
; cbar.c    863			}
	SYMB	LINE, 863
_40:
; cbar.c    864	
; cbar.c    865			SyncLineCnt = tmp / 256;
	SYMB	LINE, 865
	MOV.B	ES,#SEG( _14 )
	MOV.W	R0,#SOF( _14 )
	MOV.W	R0,[R0]
	MOV.W	R2,R0
	LSR.W	R0,#08H
	MOV.B	_SyncLineCnt,R0L
; cbar.c    866	
; cbar.c    867			tmp %= 256;
	SYMB	LINE, 867
	XOR.W	R3,R3
	DIVU.D	R2,#0100H
	MOV.B	ES,#SEG( _14 )
	MOV.W	R0,#SOF( _14 )
	MOV.W	[R0],R3
; cbar.c    868			tmp &= 0x3F;
	SYMB	LINE, 868
	AND.W	R3,#03FH
	MOV.B	ES,#SEG( _14 )
	MOV.W	R0,#SOF( _14 )
	MOV.W	[R0],R3
; cbar.c    869	
; cbar.c    870			Status &= ~( S5S4S3S2 | S1S0);
	SYMB	LINE, 870
	AND.W	_Status,#0FFC0H
; cbar.c    871			Status |= tmp;
	SYMB	LINE, 871
	OR.W	_Status,R3
; cbar.c    872	
; cbar.c    873			if ( Blanking)										// If blanking do NOT enable any
	SYMB	LINE, 873
	MOV.B	ES,#SEG( _Blanking )
	MOV.W	R0,#SOF( _Blanking )
	MOV.B	R0L,[R0]
	BEQ	_41
; cbar.c    874				Status &= ~S5S4S3S2;						//  bank
	SYMB	LINE, 874
	AND.W	_Status,#0FFC3H
_41:
; cbar.c    875	
; cbar.c    876			StatusPort = Status;
	SYMB	LINE, 876
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
; cbar.c    877		}	
; cbar.c    878	}
	SYMB	LINE, 878
_44:
	RET
	SYMB	EFUN
; cbar.c    879	
; cbar.c    880	/**************************************************************************/
; cbar.c    881	/* CBDefaults																								     	CBAR.C	*/
; cbar.c    882	/*																																				*/
; cbar.c    883	/* Author:	 Kim Engedahl, DEV, 000526																		*/
; cbar.c    884	/* Revised:	 000617, KEn, DEV     																				*/
; cbar.c    885	/*																																				*/
; cbar.c    886	/* Function:   																														*/
; cbar.c    887	/* Remarks:																																*/
; cbar.c    888	/* Returns:																																*/
; cbar.c    889	/* Updates:																																*/
; cbar.c    890	/**************************************************************************/
; cbar.c    891	void CBDefaults( void)
; cbar.c    892	{
	ALIGN	1
	SYMB	LINE, 892
	PUBLIC	_CBDefaults
_CBDefaults:
	SYMB	TYPE, 492, 'X', 12, #1, 30, 0
	SYMB	GFUN, "CBDefaults", _CBDefaults, #492, 0, 0, 0
	SYMB	ALAB, _CBDefaults, #492
; cbar.c    893		Settings.CBSetup.System = CBSetup.System = Calibration.ResetSystem;
	SYMB	LINE, 893
	MOV.B	ES,#SEG( _Calibration+97 )
	MOV.W	R0,#SOF( _Calibration+97 )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R1,#SOF( _CBSetup )
	MOV.B	[R1],R0L
	MOV.B	ES,#SEG( _Settings+32 )
	MOV.W	R1,#SOF( _Settings+32 )
	MOV.B	[R1],R0L
; cbar.c    894	
; cbar.c    895		if ( CBSetup.System < NTSC_US)
	SYMB	LINE, 895
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BCC	_57
; cbar.c    896			Settings.CBSetup.Pattern = CBSetup.Pattern = EBUCBar;
	SYMB	LINE, 896
	MOV.B	ES,#SEG( _CBSetup+2 )
	MOV.W	R0,#SOF( _CBSetup+2 )
	MOV.W	[R0],#01H
	MOV.B	ES,#SEG( _Settings+34 )
	MOV.W	R0,#SOF( _Settings+34 )
	MOV.W	[R0],#01H
	BR	_58
_57:
; cbar.c    897		else
; cbar.c    898			Settings.CBSetup.Pattern = CBSetup.Pattern = SMPTECBar;
	SYMB	LINE, 898
	MOV.B	ES,#SEG( _CBSetup+2 )
	MOV.W	R0,#SOF( _CBSetup+2 )
	MOV.W	[R0],#00H
	MOV.B	ES,#SEG( _Settings+34 )
	MOV.W	R0,#SOF( _Settings+34 )
	MOV.W	[R0],#00H
_58:
; cbar.c    899	
; cbar.c    900		Settings.CBSetup.Delay = CBSetup.Delay = 0;
	SYMB	LINE, 900
	MOV.B	ES,#SEG( _CBSetup+4 )
	MOV.W	R0,#SOF( _CBSetup+4 )
	MOV.W	[R0+],#00H
	MOV.W	[R0],#00H
	MOV.B	ES,#SEG( _Settings+36 )
	MOV.W	R0,#SOF( _Settings+36 )
	MOV.W	[R0+],#00H
	MOV.W	[R0],#00H
; cbar.c    901		Settings.CBSetup.ScHPhase = CBSetup.ScHPhase = 0;
	SYMB	LINE, 901
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R0,#SOF( _CBSetup+8 )
	MOV.W	[R0],#00H
	MOV.B	ES,#SEG( _Settings+40 )
	MOV.W	R0,#SOF( _Settings+40 )
	MOV.W	[R0],#00H
; cbar.c    902		Settings.CBSetup.EmbAudioSignal = CBSetup.EmbAudioSignal = EmbAudioOff;
	SYMB	LINE, 902
	MOV.B	ES,#SEG( _CBSetup+10 )
	MOV.W	R0,#SOF( _CBSetup+10 )
	MOV.B	[R0],#00H
	MOV.B	ES,#SEG( _Settings+42 )
	MOV.W	R0,#SOF( _Settings+42 )
	MOV.B	[R0],#00H
; cbar.c    903	
; cbar.c    904		NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 904
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	CALL	_NV_Store
; cbar.c    905	}
	SYMB	LINE, 905
	RET
	SYMB	EFUN
; cbar.c    906	
; cbar.c    907	/**************************************************************************/
; cbar.c    908	/* CBInit																										     	CBAR.C	*/
; cbar.c    909	/*																																				*/
; cbar.c    910	/* Author:	 Kim Engedahl, DEV, 000322																		*/
; cbar.c    911	/* Revised:	 0009145, KEn, DEV     																				*/
; cbar.c    912	/*																																				*/
; cbar.c    913	/* Function:   																														*/
; cbar.c    914	/* Remarks:	 																															*/
; cbar.c    915	/* Returns:																																*/
; cbar.c    916	/* Updates:																																*/
; cbar.c    917	/**************************************************************************/
; cbar.c    918	int CBInit( void)
; cbar.c    919	{
	ALIGN	1
	SYMB	LINE, 919
	PUBLIC	_CBInit
_CBInit:
	SYMB	TYPE, 493, 'X', 12, #16, 30, 0
	SYMB	GFUN, "CBInit", _CBInit, #493, 0, 0, 0
	SYMB	ALAB, _CBInit, #493
; cbar.c    920		SyncLinePtr = 0;
	SYMB	LINE, 920
	MOV.B	_SyncLinePtr,#00H
; cbar.c    921		TablePtr = &NTSCFullFieldTable[0];
	SYMB	LINE, 921
	MOV.W	_TablePtr+2,#SEG( _NTSCFullFieldTable )
	MOV.W	_TablePtr,#SOF( _NTSCFullFieldTable )
; cbar.c    922	
; cbar.c    923		NewPattern = FALSE;
	SYMB	LINE, 923
	MOV.B	ES,#SEG( _NewPattern )
	MOV.W	R0,#SOF( _NewPattern )
	MOV.B	[R0],#00H
; cbar.c    924		Blanking = TRUE;
	SYMB	LINE, 924
	MOV.B	ES,#SEG( _Blanking )
	MOV.W	R0,#SOF( _Blanking )
	MOV.B	[R0],#0FFH
; cbar.c    925		SoundEnable = FALSE;
	SYMB	LINE, 925
	MOV.B	ES,#SEG( _SoundEnable )
	MOV.W	R0,#SOF( _SoundEnable )
	MOV.B	[R0],#00H
; cbar.c    926	
; cbar.c    927		Status |= SYSSEL;
	SYMB	LINE, 927
	OR.W	_Status,#040H
; cbar.c    928		StatusPort = Status;
	SYMB	LINE, 928
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
; cbar.c    929	
; cbar.c    930		SyncLineCnt = 1;									// Interrupt in 1 line
	SYMB	LINE, 930
	MOV.B	_SyncLineCnt,#01H
; cbar.c    931	
; cbar.c    932		CBSetup.System = Settings.CBSetup.System;
	SYMB	LINE, 932
	MOV.B	ES,#SEG( _Settings+32 )
	MOV.W	R0,#SOF( _Settings+32 )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R1,#SOF( _CBSetup )
	MOV.B	[R1],R0L
; cbar.c    933		CBSetup.Pattern = Settings.CBSetup.Pattern;
	SYMB	LINE, 933
	MOV.B	ES,#SEG( _Settings+34 )
	MOV.W	R0,#SOF( _Settings+34 )
	MOV.W	R0,[R0]
	MOV.B	ES,#SEG( _CBSetup+2 )
	MOV.W	R1,#SOF( _CBSetup+2 )
	MOV.W	[R1],R0
; cbar.c    934		CBSetup.Delay = Settings.CBSetup.Delay;
	SYMB	LINE, 934
	MOV.B	ES,#SEG( _Settings+36 )
	MOV.W	R1,#SOF( _Settings+36 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _CBSetup+4 )
	MOV.W	R2,#SOF( _CBSetup+4 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; cbar.c    935		CBSetup.ScHPhase = Settings.CBSetup.ScHPhase;
	SYMB	LINE, 935
	MOV.B	ES,#SEG( _Settings+40 )
	MOV.W	R0,#SOF( _Settings+40 )
	MOV.W	R0,[R0]
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R1,#SOF( _CBSetup+8 )
	MOV.W	[R1],R0
; cbar.c    936		CBSetup.EmbAudioSignal = Settings.CBSetup.EmbAudioSignal;
	SYMB	LINE, 936
	MOV.B	ES,#SEG( _Settings+42 )
	MOV.W	R0,#SOF( _Settings+42 )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _CBSetup+10 )
	MOV.W	R1,#SOF( _CBSetup+10 )
	MOV.B	[R1],R0L
; cbar.c    937	
; cbar.c    938		return( 0);
	SYMB	LINE, 938
	MOV.W	R0,#00H
; cbar.c    939	}
	SYMB	LINE, 939
	RET
	SYMB	EFUN
; cbar.c    940	
; cbar.c    941	/**************************************************************************/
; cbar.c    942	/* CBUpdate																									     	 CBAR.C	*/
; cbar.c    943	/*																																				*/
; cbar.c    944	/* Author:	 Kim Engedahl, DEV, 000413																		*/
; cbar.c    945	/* Revised:	 000603, KEn, DEV     																				*/
; cbar.c    946	/*																																				*/
; cbar.c    947	/* Function:   																														*/
; cbar.c    948	/* Remarks:																																*/
; cbar.c    949	/* Returns:																																*/
; cbar.c    950	/* Updates:																																*/
; cbar.c    951	/**************************************************************************/
; cbar.c    952	int CBUpdate( void)
; cbar.c    953	{
	ALIGN	1
	SYMB	LINE, 953
	PUBLIC	_CBUpdate
_CBUpdate:
	SYMB	TYPE, 494, 'X', 12, #16, 30, 0
	SYMB	GFUN, "CBUpdate", _CBUpdate, #494, 0, 0, 0
	SYMB	ALAB, _CBUpdate, #494
; cbar.c    954		SetCBSystem( CBSetup.System);			// Also updates pattern
	SYMB	LINE, 954
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	CALL	_SetCBSystem
; cbar.c    955	
; cbar.c    956		SetCBDelay( CBSetup.Delay);
	SYMB	LINE, 956
	MOV.B	ES,#SEG( _CBSetup+4 )
	MOV.W	R1,#SOF( _CBSetup+4 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	CALL	_SetCBDelay
; cbar.c    957		SetCBScHPhase( CBSetup.ScHPhase);
	SYMB	LINE, 957
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R0,#SOF( _CBSetup+8 )
	MOV.W	R0,[R0]
	CALL	_SetCBScHPhase
; cbar.c    958		SetCBEmbAudioSignal( CBSetup.EmbAudioSignal);
	SYMB	LINE, 958
	MOV.B	ES,#SEG( _CBSetup+10 )
	MOV.W	R0,#SOF( _CBSetup+10 )
	MOV.B	R0L,[R0]
	CALL	_SetCBEmbAudioSignal
; cbar.c    959	
; cbar.c    960		return( OK);
	SYMB	LINE, 960
	MOV.W	R0,#0FFFFH
; cbar.c    961	}
	SYMB	LINE, 961
	RET
	SYMB	EFUN
; cbar.c    962	
; cbar.c    963	/**************************************************************************/
; cbar.c    964	/* SetCBPattern																								     CBAR.C	*/
; cbar.c    965	/*																																				*/
; cbar.c    966	/* Author:	 Kim Engedahl, DEV, 000331																		*/
; cbar.c    967	/* Revised:	 000618, KEn, DEV     																				*/
; cbar.c    968	/*																																				*/
; cbar.c    969	/* Function:   																														*/
; cbar.c    970	/* Remarks:	 																															*/
; cbar.c    971	/* Returns:																																*/
; cbar.c    972	/* Updates:																																*/
; cbar.c    973	/**************************************************************************/
; cbar.c    974	int SetCBPattern( UI pattern)
; cbar.c    975	{
	ALIGN	1
	SYMB	LINE, 975
	PUBLIC	_SetCBPattern
_SetCBPattern:
	SYMB	TYPE, 495, 'X', 12, #16, 30, 1, #18
	SYMB	GFUN, "SetCBPattern", _SetCBPattern, #495, 0, 0, 16
	SYMB	ALAB, _SetCBPattern, #495
	PUSH.W	R4
CBAR_IR	SEGMENT	HCODE INSEGMENT ROMDATA
	RSEG	CBAR_IR
	ALIGN	1
__swtable142:
	DW	SOF _61,SEG _61
	DW	SOF _62,SEG _62
	DW	SOF _63,SEG _63
	DW	SOF _64,SEG _64
	DW	SOF _66,SEG _66
	DW	SOF _68,SEG _68
	DW	SOF _69,SEG _69
	DW	SOF _70,SEG _70
	DW	SOF _72,SEG _72
	DW	SOF _74,SEG _74
	DW	SOF _75,SEG _75
	DW	SOF _77,SEG _77
	DW	SOF _79,SEG _79
	DW	SOF _81,SEG _81
	DW	SOF _83,SEG _83
	DW	SOF _85,SEG _85
	DW	SOF _87,SEG _87
	DW	SOF _89,SEG _89
	DW	SOF _91,SEG _91
	DW	SOF _93,SEG _93
	DW	SOF _95,SEG _95
	DW	SOF _97,SEG _97
	DW	SOF _99,SEG _99
	RSEG	CBAR_PR
	SYMB	SOFF, 2
	ADDS.W	R7,#0EH
	SYMB	SOFF, 4
	SYMB	IDEN, "pattern", -1, #18, 130, 2053
	SYMB	LTIM, "pattern", -1, 0, 2117
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
; cbar.c    976		int system = CBSetup.System;
	SYMB	LINE, 976
	MOV.W	[R7],R0
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MOV.B	R4L,R0L
	MOVS.B	R4H,#00H
	SYMB	LTIM, "system", 18, 0, 205
; cbar.c    977	
; cbar.c    978		if ( ValidateCBPattern( system , &pattern) == FAIL)
	SYMB	LINE, 978
	MOV.W	R0,R4
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	CALL	_ValidateCBPattern
	OR.W	R0,R0
	BNE	_60
; cbar.c    979			return( FAIL);
	SYMB	LINE, 979
	MOV.W	R0,#00H
	BR	_141
_60:
	SYMB	LTIM, "system", 18, 0, 77
; cbar.c    980	
; cbar.c    981		Settings.ActivePreset = 0;
	SYMB	LINE, 981
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.W	[R0],#00H
; cbar.c    982	
; cbar.c    983		Settings.CBSetup.Pattern = CBSetup.Pattern = pattern;
	SYMB	LINE, 983
	MOV.W	R0,[R7]
	SYMB	LTIM, "pattern", 2, 0, 2253
	MOV.B	ES,#SEG( _CBSetup+2 )
	MOV.W	R1,#SOF( _CBSetup+2 )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Settings+34 )
	MOV.W	R1,#SOF( _Settings+34 )
	MOV.W	[R1],R0
; cbar.c    984		NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 984
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	SYMB	LTIM, "pattern", 2, 0, 2125
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	CALL	_NV_Store
; cbar.c    985	
; cbar.c    986		Blanking = TRUE;
	SYMB	LINE, 986
	MOV.B	ES,#SEG( _Blanking )
	MOV.W	R0,#SOF( _Blanking )
	MOV.B	[R0],#0FFH
; cbar.c    987	
; cbar.c    988		Status &= ~S5S4S3S2;								 				// Blank line immediately
	SYMB	LINE, 988
	AND.W	_Status,#0FFC3H
; cbar.c    989		StatusPort = Status;
	SYMB	LINE, 989
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
	SYMB	LTIM, "pattern", -4, 130, 2245
; cbar.c    990	
; cbar.c    991		switch ( pattern)
	SYMB	LINE, 991
	MOV.W	R1,[R7]
	CMP.W	R1,#016H
	BG	_140
	ASL.W	R1,#02H
	MOV.B	CS,#SEG( __swtable142 )
	ADD.W	R1,#SOF( __swtable142 )
	MOVC.W	R0,[R1+]
	PUSH.W	R0
	MOVC.W	R0,[R1+]
	PUSH.W	R0
	RET
	SYMB	LTIM, "pattern", -4, 130, 2117
	SYMB	LTIM, "pattern", 6, 0, 2253
; cbar.c    992		{
; cbar.c    993			case SMPTECBar:
	SYMB	LINE, 993
_61:
; cbar.c    994				SRAMVideoLoad( dSMPTECBar, SRAMBank1);
	SYMB	LINE, 994
	MOV.B	R0L,#02H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
	SYMB	LTIM, "pattern", 6, 0, 2125
; cbar.c    995				SRAMVideoLoad( dBlueBars, SRAMBank2);
	SYMB	LINE, 995
	MOV.B	R0L,#03H
	MOV.B	R0H,#014H
	CALL	_SRAMVideoLoad
; cbar.c    996				SRAMVideoLoad( dIWhiteQ, SRAMBank3);
	SYMB	LINE, 996
	MOV.B	R0L,#04H
	MOV.B	R0H,#018H
	CALL	_SRAMVideoLoad
; cbar.c    997	
; cbar.c    998				newTablePtr = &SMPTECBarTable[0];
	SYMB	LINE, 998
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _SMPTECBarTable )
	MOV.W	[R0],#SEG( _SMPTECBarTable )
; cbar.c    999				break;
	SYMB	LINE, 999
	BR	_140
; cbar.c   1000	
; cbar.c   1001			case EBUCBar:
	SYMB	LINE, 1001
_62:
; cbar.c   1002				SRAMVideoLoad( dEBUCBar_625, SRAMBank1);
	SYMB	LINE, 1002
	MOV.B	R0L,#01H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1003	
; cbar.c   1004				newTablePtr = &PALFullFieldTable[0];
	SYMB	LINE, 1004
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALFullFieldTable )
	MOV.W	[R0],#SEG( _PALFullFieldTable )
; cbar.c   1005				break;
	SYMB	LINE, 1005
	BR	_140
; cbar.c   1006	
; cbar.c   1007			case FCCCBar:
	SYMB	LINE, 1007
_63:
; cbar.c   1008				SRAMVideoLoad( dFCC_CBar_525, SRAMBank1);
	SYMB	LINE, 1008
	MOV.B	R0L,#029H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1009	
; cbar.c   1010				newTablePtr = &NTSCFullFieldTable[0];
	SYMB	LINE, 1010
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCFullFieldTable )
	MOV.W	[R0],#SEG( _NTSCFullFieldTable )
; cbar.c   1011				break;
	SYMB	LINE, 1011
	BR	_140
; cbar.c   1012	
; cbar.c   1013			case EBUCBarITU:
	SYMB	LINE, 1013
_64:
; cbar.c   1014				SRAMVideoLoad( dEBUCBar_8bit_625, SRAMBank1);
	SYMB	LINE, 1014
	MOV.B	R0L,#00H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1015	
; cbar.c   1016				if ( system < NTSC_US)
	SYMB	LINE, 1016
	CMP.W	R4,#02H
	BGE	_65
; cbar.c   1017					newTablePtr = &PALFullFieldTable[0];
	SYMB	LINE, 1017
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALFullFieldTable )
	MOV.W	[R0],#SEG( _PALFullFieldTable )
	BR	_140
_65:
; cbar.c   1018				else
; cbar.c   1019					newTablePtr = &NTSCFullFieldTable[0];
	SYMB	LINE, 1019
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCFullFieldTable )
	MOV.W	[R0],#SEG( _NTSCFullFieldTable )
; cbar.c   1020				break;
	SYMB	LINE, 1020
	BR	_140
; cbar.c   1021	
; cbar.c   1022			case CBar100:
	SYMB	LINE, 1022
_66:
; cbar.c   1023				if ( system < NTSC_US)
	SYMB	LINE, 1023
	CMP.W	R4,#02H
	BGE	_67
; cbar.c   1024				{
; cbar.c   1025					SRAMVideoLoad( dCBar100_625, SRAMBank1);
	SYMB	LINE, 1025
	MOV.B	R0L,#05H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1026	
; cbar.c   1027					newTablePtr = &PALFullFieldTable[0];
	SYMB	LINE, 1027
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALFullFieldTable )
	MOV.W	[R0],#SEG( _PALFullFieldTable )
; cbar.c   1028				}
	SYMB	LINE, 1028
	BR	_140
_67:
; cbar.c   1029				else
; cbar.c   1030				{
; cbar.c   1031					SRAMVideoLoad( dFCC_CBar100_525, SRAMBank1);
	SYMB	LINE, 1031
	MOV.B	R0L,#02AH
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1032	
; cbar.c   1033					newTablePtr = &NTSCFullFieldTable[0];
	SYMB	LINE, 1033
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCFullFieldTable )
	MOV.W	[R0],#SEG( _NTSCFullFieldTable )
; cbar.c   1034				}
; cbar.c   1035				break;
	SYMB	LINE, 1035
	BR	_140
; cbar.c   1036	
; cbar.c   1037			case CBarGrey75:
	SYMB	LINE, 1037
_68:
; cbar.c   1038				SRAMVideoLoad( dCBar75_STD_625, SRAMBank1);
	SYMB	LINE, 1038
	MOV.B	R0L,#028H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1039				SRAMVideoLoad( dGrey75_625, SRAMBank2);
	SYMB	LINE, 1039
	MOV.B	R0L,#06H
	MOV.B	R0H,#014H
	CALL	_SRAMVideoLoad
; cbar.c   1040		
; cbar.c   1041				newTablePtr = &PALSplitFieldTable[0];
	SYMB	LINE, 1041
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALSplitFieldTable )
	MOV.W	[R0],#SEG( _PALSplitFieldTable )
; cbar.c   1042				break;
	SYMB	LINE, 1042
	BR	_140
; cbar.c   1043	
; cbar.c   1044			case CBarRed75:
	SYMB	LINE, 1044
_69:
; cbar.c   1045				SRAMVideoLoad( dEBUCBar_625, SRAMBank1);
	SYMB	LINE, 1045
	MOV.B	R0L,#01H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1046				SRAMVideoLoad( dRed75_625, SRAMBank2);
	SYMB	LINE, 1046
	MOV.B	R0L,#07H
	MOV.B	R0H,#014H
	CALL	_SRAMVideoLoad
; cbar.c   1047	
; cbar.c   1048				newTablePtr = &PALSplitFieldTable[0];
	SYMB	LINE, 1048
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALSplitFieldTable )
	MOV.W	[R0],#SEG( _PALSplitFieldTable )
; cbar.c   1049				break;
	SYMB	LINE, 1049
	BR	_140
; cbar.c   1050				
; cbar.c   1051			case Red75:
	SYMB	LINE, 1051
_70:
; cbar.c   1052				if ( system < NTSC_US)
	SYMB	LINE, 1052
	CMP.W	R4,#02H
	BGE	_71
; cbar.c   1053				{
; cbar.c   1054					SRAMVideoLoad( dRed75_625, SRAMBank1);
	SYMB	LINE, 1054
	MOV.B	R0L,#07H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1055	
; cbar.c   1056					newTablePtr = &PALFullFieldTable[0];
	SYMB	LINE, 1056
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALFullFieldTable )
	MOV.W	[R0],#SEG( _PALFullFieldTable )
; cbar.c   1057				}
	SYMB	LINE, 1057
	BR	_140
_71:
; cbar.c   1058				else
; cbar.c   1059				{
; cbar.c   1060					SRAMVideoLoad( dRed75_525, SRAMBank1);
	SYMB	LINE, 1060
	MOV.B	R0L,#08H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1061	
; cbar.c   1062					newTablePtr = &NTSCFullFieldTable[0];
	SYMB	LINE, 1062
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCFullFieldTable )
	MOV.W	[R0],#SEG( _NTSCFullFieldTable )
; cbar.c   1063				}
; cbar.c   1064				break;
	SYMB	LINE, 1064
	BR	_140
; cbar.c   1065	
; cbar.c   1066			case Multiburst:
	SYMB	LINE, 1066
_72:
; cbar.c   1067				if ( system < NTSC_US)
	SYMB	LINE, 1067
	CMP.W	R4,#02H
	BGE	_73
; cbar.c   1068				{
; cbar.c   1069					SRAMVideoLoad( dChroma_Multiburst, SRAMBank1);
	SYMB	LINE, 1069
	MOV.B	R0L,#09H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1070	
; cbar.c   1071					newTablePtr = &PALFullFieldTable[0];
	SYMB	LINE, 1071
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALFullFieldTable )
	MOV.W	[R0],#SEG( _PALFullFieldTable )
; cbar.c   1072				}
	SYMB	LINE, 1072
	BR	_140
_73:
; cbar.c   1073				else
; cbar.c   1074				{
; cbar.c   1075					SRAMVideoLoad( dFCC_Multiburst_525, SRAMBank1);
	SYMB	LINE, 1075
	MOV.B	R0L,#0AH
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1076	
; cbar.c   1077					newTablePtr = &NTSCFullFieldTable[0];
	SYMB	LINE, 1077
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCFullFieldTable )
	MOV.W	[R0],#SEG( _NTSCFullFieldTable )
; cbar.c   1078				}
; cbar.c   1079				break;
	SYMB	LINE, 1079
	BR	_140
; cbar.c   1080	
; cbar.c   1081			case CCIR18:
	SYMB	LINE, 1081
_74:
; cbar.c   1082				SRAMVideoLoad( dCCIR18_625, SRAMBank1);
	SYMB	LINE, 1082
	MOV.B	R0L,#02FH
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1083	
; cbar.c   1084				newTablePtr = &PALFullFieldTable[0];
	SYMB	LINE, 1084
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALFullFieldTable )
	MOV.W	[R0],#SEG( _PALFullFieldTable )
; cbar.c   1085				break;
	SYMB	LINE, 1085
	BR	_140
; cbar.c   1086	
; cbar.c   1087			case Window10:
	SYMB	LINE, 1087
_75:
; cbar.c   1088				SRAMVideoLoad( dWindow50Marker, SRAMBank1);
	SYMB	LINE, 1088
	MOV.B	R0L,#01BH
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1089				SRAMVideoLoad( dMarkerLine, SRAMBank2);
	SYMB	LINE, 1089
	MOV.B	R0H,#014H
	MOV.B	R0L,#01CH
	CALL	_SRAMVideoLoad
; cbar.c   1090				SRAMVideoLoad( dMarker10, SRAMBank3);
	SYMB	LINE, 1090
	MOV.B	R0L,#02CH
	MOV.B	R0H,#018H
	CALL	_SRAMVideoLoad
; cbar.c   1091				SRAMVideoLoad( dWindow10, SRAMBank4);
	SYMB	LINE, 1091
	MOV.B	R0L,#02BH
	MOV.B	R0H,#01CH
	CALL	_SRAMVideoLoad
; cbar.c   1092	
; cbar.c   1093				if ( system < NTSC_US)
	SYMB	LINE, 1093
	CMP.W	R4,#02H
	BGE	_76
; cbar.c   1094					newTablePtr = &PALWindowTable[0];
	SYMB	LINE, 1094
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALWindowTable )
	MOV.W	[R0],#SEG( _PALWindowTable )
	BR	_140
_76:
; cbar.c   1095				else
; cbar.c   1096					newTablePtr = &NTSCWindowTable[0];
	SYMB	LINE, 1096
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCWindowTable )
	MOV.W	[R0],#SEG( _NTSCWindowTable )
; cbar.c   1097				break;
	SYMB	LINE, 1097
	BR	_140
; cbar.c   1098	
; cbar.c   1099			case Window15:
	SYMB	LINE, 1099
_77:
; cbar.c   1100				SRAMVideoLoad( dWindow50Marker, SRAMBank1);
	SYMB	LINE, 1100
	MOV.B	R0L,#01BH
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1101				SRAMVideoLoad( dMarkerLine, SRAMBank2);
	SYMB	LINE, 1101
	MOV.B	R0H,#014H
	MOV.B	R0L,#01CH
	CALL	_SRAMVideoLoad
; cbar.c   1102				SRAMVideoLoad( dMarker15, SRAMBank3);
	SYMB	LINE, 1102
	MOV.B	R0L,#01EH
	MOV.B	R0H,#018H
	CALL	_SRAMVideoLoad
; cbar.c   1103				SRAMVideoLoad( dWindow15, SRAMBank4);
	SYMB	LINE, 1103
	MOV.B	R0L,#01DH
	MOV.B	R0H,#01CH
	CALL	_SRAMVideoLoad
; cbar.c   1104	
; cbar.c   1105				if ( system < NTSC_US)												
	SYMB	LINE, 1105
	CMP.W	R4,#02H
	BGE	_78
; cbar.c   1106					newTablePtr = &PALWindowTable[0];
	SYMB	LINE, 1106
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALWindowTable )
	MOV.W	[R0],#SEG( _PALWindowTable )
	BR	_140
_78:
; cbar.c   1107				else
; cbar.c   1108					newTablePtr = &NTSCWindowTable[0];
	SYMB	LINE, 1108
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCWindowTable )
	MOV.W	[R0],#SEG( _NTSCWindowTable )
; cbar.c   1109				break;
	SYMB	LINE, 1109
	BR	_140
; cbar.c   1110	
; cbar.c   1111			case Window20:
	SYMB	LINE, 1111
_79:
; cbar.c   1112				SRAMVideoLoad( dWindow50Marker, SRAMBank1);
	SYMB	LINE, 1112
	MOV.B	R0L,#01BH
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1113				SRAMVideoLoad( dMarkerLine, SRAMBank2);
	SYMB	LINE, 1113
	MOV.B	R0H,#014H
	MOV.B	R0L,#01CH
	CALL	_SRAMVideoLoad
; cbar.c   1114				SRAMVideoLoad( dMarker20, SRAMBank3);
	SYMB	LINE, 1114
	MOV.B	R0L,#020H
	MOV.B	R0H,#018H
	CALL	_SRAMVideoLoad
; cbar.c   1115				SRAMVideoLoad( dWindow20, SRAMBank4);
	SYMB	LINE, 1115
	MOV.B	R0L,#01FH
	MOV.B	R0H,#01CH
	CALL	_SRAMVideoLoad
; cbar.c   1116	
; cbar.c   1117				if ( system < NTSC_US)
	SYMB	LINE, 1117
	CMP.W	R4,#02H
	BGE	_80
; cbar.c   1118					newTablePtr = &PALWindowTable[0];
	SYMB	LINE, 1118
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALWindowTable )
	MOV.W	[R0],#SEG( _PALWindowTable )
	BR	_140
_80:
; cbar.c   1119				else
; cbar.c   1120					newTablePtr = &NTSCWindowTable[0];
	SYMB	LINE, 1120
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCWindowTable )
	MOV.W	[R0],#SEG( _NTSCWindowTable )
; cbar.c   1121				break;
	SYMB	LINE, 1121
	BR	_140
; cbar.c   1122	
; cbar.c   1123			case Window100:
	SYMB	LINE, 1123
_81:
; cbar.c   1124				SRAMVideoLoad( dWindow50Marker, SRAMBank1);
	SYMB	LINE, 1124
	MOV.B	R0L,#01BH
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1125				SRAMVideoLoad( dMarkerLine, SRAMBank2);
	SYMB	LINE, 1125
	MOV.B	R0H,#014H
	MOV.B	R0L,#01CH
	CALL	_SRAMVideoLoad
; cbar.c   1126				SRAMVideoLoad( dMarker100, SRAMBank3);
	SYMB	LINE, 1126
	MOV.B	R0L,#022H
	MOV.B	R0H,#018H
	CALL	_SRAMVideoLoad
; cbar.c   1127				SRAMVideoLoad( dWindow100, SRAMBank4);
	SYMB	LINE, 1127
	MOV.B	R0L,#021H
	MOV.B	R0H,#01CH
	CALL	_SRAMVideoLoad
; cbar.c   1128	
; cbar.c   1129				if ( system < NTSC_US)
	SYMB	LINE, 1129
	CMP.W	R4,#02H
	BGE	_82
; cbar.c   1130					newTablePtr = &PALWindowTable[0];
	SYMB	LINE, 1130
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALWindowTable )
	MOV.W	[R0],#SEG( _PALWindowTable )
	BR	_140
_82:
; cbar.c   1131				else
; cbar.c   1132					newTablePtr = &NTSCWindowTable[0];
	SYMB	LINE, 1132
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCWindowTable )
	MOV.W	[R0],#SEG( _NTSCWindowTable )
; cbar.c   1133				break;
	SYMB	LINE, 1133
	BR	_140
; cbar.c   1134	
; cbar.c   1135			case BlWh15kHz:
	SYMB	LINE, 1135
_83:
; cbar.c   1136				if ( system < NTSC_US)												
	SYMB	LINE, 1136
	CMP.W	R4,#02H
	BGE	_84
; cbar.c   1137				{
; cbar.c   1138					SRAMVideoLoad( dkHz15BlWh_625, SRAMBank1);
	SYMB	LINE, 1138
	MOV.B	R0L,#02DH
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1139	
; cbar.c   1140					newTablePtr = &PALFullFieldTable[0];
	SYMB	LINE, 1140
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALFullFieldTable )
	MOV.W	[R0],#SEG( _PALFullFieldTable )
; cbar.c   1141				}
	SYMB	LINE, 1141
	BR	_140
_84:
; cbar.c   1142				else
; cbar.c   1143				{
; cbar.c   1144					SRAMVideoLoad( dkHz15BlWh_525, SRAMBank1);
	SYMB	LINE, 1144
	MOV.B	R0L,#02EH
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1145	
; cbar.c   1146					newTablePtr = &NTSCFullFieldTable[0];
	SYMB	LINE, 1146
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCFullFieldTable )
	MOV.W	[R0],#SEG( _NTSCFullFieldTable )
; cbar.c   1147				}
; cbar.c   1148				break;
	SYMB	LINE, 1148
	BR	_140
; cbar.c   1149	
; cbar.c   1150			case White100:
	SYMB	LINE, 1150
_85:
; cbar.c   1151				if ( system < NTSC_US)
	SYMB	LINE, 1151
	CMP.W	R4,#02H
	BGE	_86
; cbar.c   1152				{
; cbar.c   1153					SRAMVideoLoad( dWhiteLine_625, SRAMBank1);
	SYMB	LINE, 1153
	MOV.B	R0L,#0BH
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1154	
; cbar.c   1155					newTablePtr = &PALFullFieldTable[0];
	SYMB	LINE, 1155
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALFullFieldTable )
	MOV.W	[R0],#SEG( _PALFullFieldTable )
; cbar.c   1156				}
	SYMB	LINE, 1156
	BR	_140
_86:
; cbar.c   1157				else
; cbar.c   1158				{
; cbar.c   1159					SRAMVideoLoad( dWhiteLine_525, SRAMBank1);
	SYMB	LINE, 1159
	MOV.B	R0L,#0DH
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1160	
; cbar.c   1161					newTablePtr = &NTSCFullFieldTable[0];
	SYMB	LINE, 1161
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCFullFieldTable )
	MOV.W	[R0],#SEG( _NTSCFullFieldTable )
; cbar.c   1162				}
; cbar.c   1163				break;
	SYMB	LINE, 1163
	BR	_140
; cbar.c   1164	
; cbar.c   1165			case Black:
	SYMB	LINE, 1165
_87:
; cbar.c   1166				if ( system < NTSC_US)
	SYMB	LINE, 1166
	CMP.W	R4,#02H
	BGE	_88
; cbar.c   1167					newTablePtr = &PALBlackTable[0];
	SYMB	LINE, 1167
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALBlackTable )
	MOV.W	[R0],#SEG( _PALBlackTable )
	BR	_140
_88:
; cbar.c   1168				else
; cbar.c   1169					newTablePtr = &NTSCBlackTable[0];
	SYMB	LINE, 1169
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCBlackTable )
	MOV.W	[R0],#SEG( _NTSCBlackTable )
; cbar.c   1170				break;
	SYMB	LINE, 1170
	BR	_140
; cbar.c   1171	
; cbar.c   1172			case CheckField:
	SYMB	LINE, 1172
_89:
; cbar.c   1173				SRAMVideoLoad( dSDI_test_line1, SRAMBank1);
	SYMB	LINE, 1173
	MOV.B	R0L,#025H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1174				SRAMVideoLoad( dSDI_test_line2, SRAMBank2);
	SYMB	LINE, 1174
	MOV.B	R0L,#026H
	MOV.B	R0H,#014H
	CALL	_SRAMVideoLoad
; cbar.c   1175				SRAMVideoLoad( dSDI_test_line3, SRAMBank3);
	SYMB	LINE, 1175
	MOV.B	R0L,#027H
	MOV.B	R0H,#018H
	CALL	_SRAMVideoLoad
; cbar.c   1176	
; cbar.c   1177				if ( system < NTSC_US)
	SYMB	LINE, 1177
	CMP.W	R4,#02H
	BGE	_90
; cbar.c   1178					newTablePtr = &PALCheckfieldTable[0];
	SYMB	LINE, 1178
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALCheckfieldTable )
	MOV.W	[R0],#SEG( _PALCheckfieldTable )
	BR	_140
_90:
; cbar.c   1179				else
; cbar.c   1180					newTablePtr = &NTSCCheckfieldTable[0];
	SYMB	LINE, 1180
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCCheckfieldTable )
	MOV.W	[R0],#SEG( _NTSCCheckfieldTable )
; cbar.c   1181				break;
	SYMB	LINE, 1181
	BR	_140
; cbar.c   1182	
; cbar.c   1183			case DigitalGrey:
	SYMB	LINE, 1183
_91:
; cbar.c   1184				if ( system < NTSC_US)
	SYMB	LINE, 1184
	CMP.W	R4,#02H
	BGE	_92
; cbar.c   1185				{
; cbar.c   1186					SRAMVideoLoad( dDigitalGrey_625, SRAMBank1);
	SYMB	LINE, 1186
	MOV.B	R0L,#023H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1187	
; cbar.c   1188					newTablePtr = &PALFullFieldTable[0];
	SYMB	LINE, 1188
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALFullFieldTable )
	MOV.W	[R0],#SEG( _PALFullFieldTable )
; cbar.c   1189				}
	SYMB	LINE, 1189
	BR	_140
_92:
; cbar.c   1190				else
; cbar.c   1191				{
; cbar.c   1192					SRAMVideoLoad( dDigitalGrey_525, SRAMBank1);
	SYMB	LINE, 1192
	MOV.B	R0L,#024H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1193	
; cbar.c   1194					newTablePtr = &NTSCFullFieldTable[0];
	SYMB	LINE, 1194
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCFullFieldTable )
	MOV.W	[R0],#SEG( _NTSCFullFieldTable )
; cbar.c   1195				}
; cbar.c   1196				break;
	SYMB	LINE, 1196
	BR	_140
; cbar.c   1197	
; cbar.c   1198			case Stair5:
	SYMB	LINE, 1198
_93:
; cbar.c   1199				if ( system < NTSC_US)
	SYMB	LINE, 1199
	CMP.W	R4,#02H
	BGE	_94
; cbar.c   1200				{
; cbar.c   1201					SRAMVideoLoad( dGreyScale5_625, SRAMBank1);
	SYMB	LINE, 1201
	MOV.B	R0L,#017H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1202	
; cbar.c   1203					newTablePtr = &PALFullFieldTable[0];
	SYMB	LINE, 1203
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALFullFieldTable )
	MOV.W	[R0],#SEG( _PALFullFieldTable )
; cbar.c   1204				}
	SYMB	LINE, 1204
	BR	_140
_94:
; cbar.c   1205				else
; cbar.c   1206				{
; cbar.c   1207					SRAMVideoLoad( dGreyScale5_525, SRAMBank1);
	SYMB	LINE, 1207
	MOV.B	R0L,#018H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1208	
; cbar.c   1209					newTablePtr = &NTSCFullFieldTable[0];
	SYMB	LINE, 1209
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCFullFieldTable )
	MOV.W	[R0],#SEG( _NTSCFullFieldTable )
; cbar.c   1210				}
; cbar.c   1211				break;
	SYMB	LINE, 1211
	BR	_140
; cbar.c   1212	
; cbar.c   1213			case Stair10:
	SYMB	LINE, 1213
_95:
; cbar.c   1214				if ( system < NTSC_US)
	SYMB	LINE, 1214
	CMP.W	R4,#02H
	BGE	_96
; cbar.c   1215				{
; cbar.c   1216					SRAMVideoLoad( dGreyScale10_625, SRAMBank1);
	SYMB	LINE, 1216
	MOV.B	R0L,#019H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1217	
; cbar.c   1218					newTablePtr = &PALFullFieldTable[0];
	SYMB	LINE, 1218
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALFullFieldTable )
	MOV.W	[R0],#SEG( _PALFullFieldTable )
; cbar.c   1219				}
	SYMB	LINE, 1219
	BR	_140
_96:
; cbar.c   1220				else
; cbar.c   1221				{
; cbar.c   1222					SRAMVideoLoad( dGreyScale10_525, SRAMBank1);
	SYMB	LINE, 1222
	MOV.B	R0L,#01AH
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1223	
; cbar.c   1224					newTablePtr = &NTSCFullFieldTable[0];
	SYMB	LINE, 1224
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCFullFieldTable )
	MOV.W	[R0],#SEG( _NTSCFullFieldTable )
; cbar.c   1225				}
; cbar.c   1226				break;
	SYMB	LINE, 1226
	BR	_140
; cbar.c   1227	
; cbar.c   1228			case Crosshatch:
	SYMB	LINE, 1228
_97:
; cbar.c   1229				if ( system < NTSC_US)
	SYMB	LINE, 1229
	CMP.W	R4,#02H
	BGE	_98
; cbar.c   1230				{
; cbar.c   1231					SRAMVideoLoad( dCrossHatch19_625, SRAMBank1);
	SYMB	LINE, 1231
	MOV.B	R0L,#0CH
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1232					SRAMVideoLoad( dWhiteLine_625, SRAMBank2);
	SYMB	LINE, 1232
	MOV.B	R0L,#0BH
	MOV.B	R0H,#014H
	CALL	_SRAMVideoLoad
; cbar.c   1233	
; cbar.c   1234					newTablePtr = &PALCrosshatchTable[0];
	SYMB	LINE, 1234
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALCrosshatchTable )
	MOV.W	[R0],#SEG( _PALCrosshatchTable )
; cbar.c   1235				}
	SYMB	LINE, 1235
	BR	_140
_98:
; cbar.c   1236				else
; cbar.c   1237				{
; cbar.c   1238					SRAMVideoLoad( dCrossHatch17_525, SRAMBank1);
	SYMB	LINE, 1238
	MOV.B	R0L,#0EH
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1239					SRAMVideoLoad( dWhiteLine_525, SRAMBank2);
	SYMB	LINE, 1239
	MOV.B	R0L,#0DH
	MOV.B	R0H,#014H
	CALL	_SRAMVideoLoad
; cbar.c   1240	
; cbar.c   1241					newTablePtr = &NTSCCrosshatchTable[0];
	SYMB	LINE, 1241
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCCrosshatchTable )
	MOV.W	[R0],#SEG( _NTSCCrosshatchTable )
; cbar.c   1242				}
; cbar.c   1243				break;
	SYMB	LINE, 1243
	BR	_140
; cbar.c   1244	
; cbar.c   1245			case PLUGE:
	SYMB	LINE, 1245
_99:
; cbar.c   1246				if ( system < NTSC_US)
	SYMB	LINE, 1246
	CMP.W	R4,#02H
	BGE	_100
; cbar.c   1247				{
; cbar.c   1248					SRAMVideoLoad( dPlugeWhite_625, SRAMBank1);
	SYMB	LINE, 1248
	MOV.B	R0L,#0FH
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1249					SRAMVideoLoad( dPlugeGreyC_625, SRAMBank2);
	SYMB	LINE, 1249
	MOV.B	R0H,#014H
	MOV.B	R0L,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1250					SRAMVideoLoad( dPlugeGreyD_625, SRAMBank3);
	SYMB	LINE, 1250
	MOV.B	R0L,#011H
	MOV.B	R0H,#018H
	CALL	_SRAMVideoLoad
; cbar.c   1251					SRAMVideoLoad( dPlugeGreyE_625, SRAMBank4);
	SYMB	LINE, 1251
	MOV.B	R0L,#012H
	MOV.B	R0H,#01CH
	CALL	_SRAMVideoLoad
; cbar.c   1252	
; cbar.c   1253					newTablePtr = &PALPLUGETable[0];
	SYMB	LINE, 1253
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _PALPLUGETable )
	MOV.W	[R0],#SEG( _PALPLUGETable )
; cbar.c   1254				}
	SYMB	LINE, 1254
	BR	_140
_100:
; cbar.c   1255				else
; cbar.c   1256				{
; cbar.c   1257					SRAMVideoLoad( dPlugeWhite_525, SRAMBank1);
	SYMB	LINE, 1257
	MOV.B	R0L,#013H
	MOV.B	R0H,#010H
	CALL	_SRAMVideoLoad
; cbar.c   1258					SRAMVideoLoad( dPlugeGreyC_525, SRAMBank2);
	SYMB	LINE, 1258
	MOV.B	R0H,#014H
	MOV.B	R0L,R0H
	CALL	_SRAMVideoLoad
; cbar.c   1259					SRAMVideoLoad( dPlugeGreyD_525, SRAMBank3);
	SYMB	LINE, 1259
	MOV.B	R0L,#015H
	MOV.B	R0H,#018H
	CALL	_SRAMVideoLoad
; cbar.c   1260					SRAMVideoLoad( dPlugeGreyE_525, SRAMBank4);
	SYMB	LINE, 1260
	MOV.B	R0L,#016H
	MOV.B	R0H,#01CH
	CALL	_SRAMVideoLoad
; cbar.c   1261	
; cbar.c   1262					newTablePtr = &NTSCPLUGETable[0];
	SYMB	LINE, 1262
	MOV.B	ES,#SEG( _newTablePtr )
	MOV.W	R0,#SOF( _newTablePtr )
	MOV.W	[R0+],#SOF( _NTSCPLUGETable )
	MOV.W	[R0],#SEG( _NTSCPLUGETable )
; cbar.c   1263				}
; cbar.c   1264				break;
; cbar.c   1265		}
	SYMB	LINE, 1265
_140:
; cbar.c   1266	
; cbar.c   1267		NewPattern = TRUE;
	SYMB	LINE, 1267
	MOV.B	ES,#SEG( _NewPattern )
	MOV.W	R0,#SOF( _NewPattern )
	MOV.B	[R0],#0FFH
; cbar.c   1268	
; cbar.c   1269		return( OK);
	SYMB	LINE, 1269
	MOV.W	R0,#0FFFFH
; cbar.c   1270	}
	SYMB	LINE, 1270
_141:
	ADDS.W	R7,#02H
	SYMB	SOFF, 2
	POP.W	R4
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; cbar.c   1271	
; cbar.c   1272	/**************************************************************************/
; cbar.c   1273	/* SetCBSystem																	   CBAR.C  */
; cbar.c   1274	/*																								  */
; cbar.c   1275	/* Author:	 Kim Engedahl, DEV, 000331												  */
; cbar.c   1276	/* Revised:	 000705, KEn, DEV     													  */
; cbar.c   1277	/*																								  */
; cbar.c   1278	/* Function:   																			  */
; cbar.c   1279	/* Remarks:																					  */
; cbar.c   1280	/* Returns:																					  */
; cbar.c   1281	/* Updates:			  																		  */
; cbar.c   1282	/**************************************************************************/
; cbar.c   1283	int SetCBSystem( UC system)
; cbar.c   1284	{
	ALIGN	1
	SYMB	LINE, 1284
	PUBLIC	_SetCBSystem
_SetCBSystem:
	SYMB	TYPE, 496, 'X', 12, #16, 30, 1, #3
	SYMB	GFUN, "SetCBSystem", _SetCBSystem, #496, 0, 0, 16
	SYMB	ALAB, _SetCBSystem, #496
	PUSH.W	R4
	SYMB	SOFF, 2
	SYMB	LTIM, "system", 0, 0, 2253
	SYMB	IDEN, "system", 0, #3, 0, 2061
; cbar.c   1285		Settings.ActivePreset = 0;
	SYMB	LINE, 1285
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R1,#SOF( _Settings )
	MOV.W	[R1],#00H
; cbar.c   1286	
; cbar.c   1287		Settings.CBSetup.System = CBSetup.System = system;
	SYMB	LINE, 1287
	MOV.B	R4L,R0L
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	[R0],R4L
	SYMB	LTIM, "system", 0, 0, 2125
	SYMB	LTIM, "system", 16, 0, 2253
	MOV.B	ES,#SEG( _Settings+32 )
	MOV.W	R0,#SOF( _Settings+32 )
	MOV.B	[R0],R4L
; cbar.c   1288		NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 1288
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	CALL	_NV_Store
; cbar.c   1289	
; cbar.c   1290		if ( system < NTSC_US)
	SYMB	LINE, 1290
	CMP.B	R4L,#02H
	BCC	_160
; cbar.c   1291		{
; cbar.c   1292			Status &= ~SYSSEL;
	SYMB	LINE, 1292
	AND.W	_Status,#0FFBFH
; cbar.c   1293			StatusPort = Status;		// Select new (SDI) system
	SYMB	LINE, 1293
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
; cbar.c   1294	
; cbar.c   1295			WriteCBGain( Calibration.CBCalibration.GainG);
	SYMB	LINE, 1295
	MOV.B	ES,#SEG( _Calibration+213 )
	MOV.W	R0,#SOF( _Calibration+213 )
	MOV.B	R0L,[R0]
	CALL	_WriteCBGain
; cbar.c   1296			WriteCBChromaGain( Calibration.CBCalibration.ChromaGainG);
	SYMB	LINE, 1296
	MOV.B	ES,#SEG( _Calibration+214 )
	MOV.W	R0,#SOF( _Calibration+214 )
	MOV.B	R0L,[R0]
	CALL	_WriteCBChromaGain
; cbar.c   1297		}
	SYMB	LINE, 1297
	BR	_161
_160:
; cbar.c   1298		else
; cbar.c   1299		{
; cbar.c   1300			Status |= SYSSEL;
	SYMB	LINE, 1300
	OR.W	_Status,#040H
; cbar.c   1301			StatusPort = Status;		// Select new (SDI) system
	SYMB	LINE, 1301
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
; cbar.c   1302	
; cbar.c   1303			WriteCBGain( Calibration.CBCalibration.GainM);
	SYMB	LINE, 1303
	MOV.B	ES,#SEG( _Calibration+215 )
	MOV.W	R0,#SOF( _Calibration+215 )
	MOV.B	R0L,[R0]
	CALL	_WriteCBGain
; cbar.c   1304			WriteCBChromaGain( Calibration.CBCalibration.ChromaGainM);
	SYMB	LINE, 1304
	MOV.B	ES,#SEG( _Calibration+216 )
	MOV.W	R0,#SOF( _Calibration+216 )
	MOV.B	R0L,[R0]
	CALL	_WriteCBChromaGain
; cbar.c   1305		}
	SYMB	LINE, 1305
_161:
; cbar.c   1306	
; cbar.c   1307	
; cbar.c   1308		tvp6k_system( system);	// Initialise the composite output
	SYMB	LINE, 1308
	MOV.B	R0L,R4L
	MOVS.B	R0H,#00H
	CALL	_tvp6k_system
; cbar.c   1309	
; cbar.c   1310														// Validate pattern and change if invalid in new system																		
; cbar.c   1311		ValidateCBPattern( system , &CBSetup.Pattern);
	SYMB	LINE, 1311
	MOV.W	R3,#SEG( _CBSetup+2 )
	MOV.W	R2,#SOF( _CBSetup+2 )
	MOV.B	R0L,R4L
	SYMB	LTIM, "system", 16, 0, 2125
	SYMB	LTIM, "system", 0, 0, 2253
	CALL	_ValidateCBPattern
	SYMB	LTIM, "system", 0, 0, 2125
	SYMB	LTIM, "system", 16, 0, 2253
; cbar.c   1312	
; cbar.c   1313														// This one initialises TablePtr;
; cbar.c   1314		SetCBPattern( CBSetup.Pattern);
	SYMB	LINE, 1314
	MOV.B	ES,#SEG( _CBSetup+2 )
	MOV.W	R0,#SOF( _CBSetup+2 )
	MOV.W	R0,[R0]
	CALL	_SetCBPattern
; cbar.c   1315	
; cbar.c   1316		SetCBScHPhase( CBSetup.ScHPhase);
	SYMB	LINE, 1316
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R0,#SOF( _CBSetup+8 )
	MOV.W	R0,[R0]
	CALL	_SetCBScHPhase
; cbar.c   1317	
; cbar.c   1318		LEDSet( CBPALLED, system < NTSC_US);
	SYMB	LINE, 1318
	MOV.W	R0,#040H
	CMP.B	R4L,#02H
	BCC	_163
	MOVS.W	R1,#01H
	BR	_165
_163:
	MOVS.W	R1,#00H
_165:
	CALL	_LEDSet
; cbar.c   1319		LEDSet( CBNTSCLED, system >= NTSC_US);
	SYMB	LINE, 1319
	MOV.W	R0,#080H
	CMP.B	R4L,#02H
	BCS	_166
	MOVS.W	R1,#01H
	BR	_168
_166:
	MOVS.W	R1,#00H
_168:
	CALL	_LEDSet
; cbar.c   1320	
; cbar.c   1321		return( OK);
	SYMB	LINE, 1321
	MOV.W	R0,#0FFFFH
; cbar.c   1322	}
	SYMB	LINE, 1322
	POP.W	R4
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "system", 16, 0, 2125
	SYMB	EFUN
; cbar.c   1323	
; cbar.c   1324	/**************************************************************************/
; cbar.c   1325	/* SetCBDelay																										   CBAR.C	*/
; cbar.c   1326	/*																																				*/
; cbar.c   1327	/* Author:	 Kim Engedahl, DEV, 000331																		*/
; cbar.c   1328	/* Revised:	 001009, KEn, DEV     																				*/
; cbar.c   1329	/*																																				*/
; cbar.c   1330	/* Function:   																														*/
; cbar.c   1331	/* Remarks:	 CB Delay resolution is 37ns																	*/
; cbar.c   1332	/* Returns:																																*/
; cbar.c   1333	/* Updates:																																*/
; cbar.c   1334	/**************************************************************************/
; cbar.c   1335	int SetCBDelay( UL delay)
; cbar.c   1336	{
	ALIGN	1
	SYMB	LINE, 1336
	PUBLIC	_SetCBDelay
_SetCBDelay:
	SYMB	TYPE, 497, 'X', 12, #16, 30, 1, #7
	SYMB	GFUN, "SetCBDelay", _SetCBDelay, #497, 0, 0, 48
	SYMB	ALAB, _SetCBDelay, #497
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	LTIM, "delay", 3, 0, 2253
	SYMB	IDEN, "delay", 3, #7, 0, 2061
	SYMB	IDEN, "tmpOffset", -1, #7, 130, 5
	SYMB	LTIM, "tmpOffset", -1, 0, 69
; cbar.c   1337		UL tmpOffset;
; cbar.c   1338	
; cbar.c   1339		Settings.ActivePreset = 0;
	SYMB	LINE, 1339
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R2,#SOF( _Settings )
	MOV.W	[R2],#00H
; cbar.c   1340	
; cbar.c   1341		Settings.CBSetup.Delay = CBSetup.Delay = delay;
	SYMB	LINE, 1341
	MOV.W	R5,R1
	MOV.W	R4,R0
	MOV.B	ES,#SEG( _CBSetup+4 )
	MOV.W	R0,#SOF( _CBSetup+4 )
	MOV.W	[R0+],R4
	MOV.W	[R0],R5
	SYMB	LTIM, "delay", 3, 0, 2125
	SYMB	LTIM, "delay", 19, 0, 2253
	MOV.B	ES,#SEG( _Settings+36 )
	MOV.W	R0,#SOF( _Settings+36 )
	MOV.W	[R0+],R4
	MOV.W	[R0],R5
; cbar.c   1342		NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 1342
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	CALL	_NV_Store
; cbar.c   1343	
; cbar.c   1344		// Divide GenlockSetup.Delay with 256 as the resulotion is 27ns/256 whereas the
; cbar.c   1345		//  resolution of the TSG is 37ns.
; cbar.c   1346		tmpOffset = delay + GenlockSetup.Delay/256;
	SYMB	LINE, 1346
	MOV.B	ES,#SEG( _GenlockSetup+2 )
	MOV.W	R1,#SOF( _GenlockSetup+2 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	LSR.D	R0,#08H
	ADD.W	R4,R0
	ADDC.W	R5,R1
	SYMB	LTIM, "delay", 19, 0, 2125
	MOV.W	R3,R5
	MOV.W	R2,R4
	SYMB	LTIM, "tmpOffset", 11, 0, 205
; cbar.c   1347	
; cbar.c   1348		if ( CBSetup.System < NTSC_US)
	SYMB	LINE, 1348
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BCC	_169
; cbar.c   1349		{
; cbar.c   1350			tmpOffset += Calibration.CBCalibration.PhaseG;
	SYMB	LINE, 1350
	MOV.B	ES,#SEG( _Calibration+202 )
	MOV.W	R3,#SOF( _Calibration+202 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	SYMB	LTIM, "tmpOffset", 11, 0, 77
	ADD.W	R4,R2
	ADDC.W	R5,R3
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "tmpOffset", 3, 0, 205
; cbar.c   1351	
; cbar.c   1352			tmpOffset %= 4320000L;						// 4*625*1728
	SYMB	LINE, 1352
	MOV.W	R3,#041H
	MOV.W	R2,#0EB00H
	FCALL	__UMODL
	SYMB	LTIM, "tmpOffset", 3, 0, 77
	SYMB	LTIM, "tmpOffset", 3, 0, 205
; cbar.c   1353	
; cbar.c   1354			LineOffset = 0xFFFF - ( tmpOffset / 1728L);				
	SYMB	LINE, 1354
	MOV.W	R3,#00H
	MOV.W	R2,#06C0H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__UDIVL
	SYMB	LTIM, "tmpOffset", 3, 0, 77
	SYMB	LTIM, "tmpOffset", 19, 0, 205
	MOV.W	R1,#0FFFFH
	SUB.W	R1,R0
	MOV.W	_LineOffset,R1
; cbar.c   1355			PhaseOffset = 1727 - ( tmpOffset % 1728L);
	SYMB	LINE, 1355
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#00H
	MOV.W	R2,#06C0H
	FCALL	__UMODL
	SYMB	LTIM, "tmpOffset", 19, 0, 77
	SYMB	LTIM, "tmpOffset", 3, 0, 205
	SYMB	LTIM, "tmpOffset", 3, 0, 77
	MOV.W	R1,#06BFH
	SUB.W	R1,R0
	MOV.B	ES,#SEG( _PhaseOffset )
	MOV.W	R0,#SOF( _PhaseOffset )
	MOV.W	[R0],R1
; cbar.c   1356		}
	SYMB	LINE, 1356
	BR	_171
_169:
	SYMB	LTIM, "tmpOffset", 11, 0, 205
; cbar.c   1357		else 
; cbar.c   1358		{
; cbar.c   1359			tmpOffset += Calibration.CBCalibration.PhaseM;
	SYMB	LINE, 1359
	MOV.B	ES,#SEG( _Calibration+208 )
	MOV.W	R1,#SOF( _Calibration+208 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	ADD.W	R0,R2
	ADDC.W	R1,R3
	SYMB	LTIM, "tmpOffset", 11, 0, 77
	SYMB	LTIM, "tmpOffset", 3, 0, 205
; cbar.c   1360	
; cbar.c   1361			tmpOffset %= 1801800L;						// 2*525*1716
	SYMB	LINE, 1361
	MOV.W	R3,#01BH
	MOV.W	R2,#07E48H
	FCALL	__UMODL
	SYMB	LTIM, "tmpOffset", 3, 0, 77
	SYMB	LTIM, "tmpOffset", 3, 0, 205
; cbar.c   1362	
; cbar.c   1363			LineOffset = 0xFFFF - ( tmpOffset / 1716L);				
	SYMB	LINE, 1363
	MOV.W	R3,#00H
	MOV.W	R2,#06B4H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__UDIVL
	SYMB	LTIM, "tmpOffset", 3, 0, 77
	SYMB	LTIM, "tmpOffset", 19, 0, 205
	MOV.W	R1,#0FFFFH
	SUB.W	R1,R0
	MOV.W	_LineOffset,R1
; cbar.c   1364			PhaseOffset = 1715 - ( tmpOffset % 1716L);
	SYMB	LINE, 1364
	MOV.W	R3,#00H
	MOV.W	R2,#06B4H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__UMODL
	SYMB	LTIM, "tmpOffset", 19, 0, 77
	SYMB	LTIM, "tmpOffset", 3, 0, 205
	SYMB	LTIM, "tmpOffset", 3, 0, 77
	MOV.W	R1,#06B3H
	SUB.W	R1,R0
	MOV.B	ES,#SEG( _PhaseOffset )
	MOV.W	R0,#SOF( _PhaseOffset )
	MOV.W	[R0],R1
; cbar.c   1365	
; cbar.c   1366			if ( PhaseOffset > 1687)
	SYMB	LINE, 1366
	MOV.B	ES,#SEG( _PhaseOffset )
	MOV.W	R0,#SOF( _PhaseOffset )
	MOV.W	R0,[R0]
	CMP.W	R0,#0697H
	BLE	_171
; cbar.c   1367				PhaseOffset += 12;
	SYMB	LINE, 1367
	MOV.B	ES,#SEG( _PhaseOffset )
	MOV.W	R0,#SOF( _PhaseOffset )
	MOV.W	R0,[R0]
	ADD.W	R0,#0CH
	MOV.B	ES,#SEG( _PhaseOffset )
	MOV.W	R1,#SOF( _PhaseOffset )
	MOV.W	[R1],R0
; cbar.c   1368		}
	SYMB	LINE, 1368
_171:
; cbar.c   1369	
; cbar.c   1370		if ( PhaseOffset >= 1443)
	SYMB	LINE, 1370
	MOV.B	ES,#SEG( _PhaseOffset )
	MOV.W	R0,#SOF( _PhaseOffset )
	MOV.W	R0,[R0]
	CMP.W	R0,#05A3H
	BLT	_172
; cbar.c   1371			Status |= PHASEREGSEL;				// Set Phase Register Select
	SYMB	LINE, 1371
	OR.W	_Status,#04000H
	BR	_173
_172:
; cbar.c   1372		else		
; cbar.c   1373			Status &= ~PHASEREGSEL;				// Clear Phase Register Select
	SYMB	LINE, 1373
	AND.W	_Status,#0BFFFH
_173:
; cbar.c   1374			
; cbar.c   1375		StatusPort = Status;
	SYMB	LINE, 1375
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
; cbar.c   1376	
; cbar.c   1377		HOffsetPort = PhaseOffset;
	SYMB	LINE, 1377
	MOV.B	ES,#SEG( _PhaseOffset )
	MOV.W	R0,#SOF( _PhaseOffset )
	MOV.W	R0,[R0]
	MOV.B	ES,#SEG( _HOffsetPort )
	MOV.W	R1,#SOF( _HOffsetPort )
	MOV.W	[R1],R0
; cbar.c   1378	
; cbar.c   1379		return( OK);
	SYMB	LINE, 1379
	MOV.W	R0,#0FFFFH
; cbar.c   1380	}
	SYMB	LINE, 1380
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; cbar.c   1381	
; cbar.c   1382	/**************************************************************************/
; cbar.c   1383	/* SetCBScHPhase																								   CBAR.C	*/
; cbar.c   1384	/*																																				*/
; cbar.c   1385	/* Author:	 Kim Engedahl, DEV, 000331																		*/
; cbar.c   1386	/* Revised:	 000618, KEn, DEV     																				*/
; cbar.c   1387	/*																																				*/
; cbar.c   1388	/* Function:   																														*/
; cbar.c   1389	/* Remarks:	 Note that the resolution is different from BlackBurst, (1.4).*/
; cbar.c   1390	/* Returns:																																*/
; cbar.c   1391	/* Updates:																																*/
; cbar.c   1392	/**************************************************************************/
; cbar.c   1393	int SetCBScHPhase( int schphase)
; cbar.c   1394	{
	ALIGN	1
	SYMB	LINE, 1394
	PUBLIC	_SetCBScHPhase
_SetCBScHPhase:
	SYMB	TYPE, 498, 'X', 12, #16, 30, 1, #16
	SYMB	GFUN, "SetCBScHPhase", _SetCBScHPhase, #498, 0, 0, 16
	SYMB	ALAB, _SetCBScHPhase, #498
	PUSH.W	R4
	SYMB	SOFF, 2
	ADDS.W	R7,#0EH
	SYMB	SOFF, 4
	SYMB	LTIM, "schphase", 2, 0, 2253
	SYMB	IDEN, "schphase", 2, #16, 0, 2061
	SYMB	IDEN, "tmp", -1, #6, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
	SYMB	TYPE, 499, 'Z', #3, 1
	SYMB	IDEN, "buffer", -4, #499, 130, 5
; cbar.c   1395		long tmp;
; cbar.c   1396		UC buffer[2];
; cbar.c   1397	
; cbar.c   1398		Settings.ActivePreset = 0;
	SYMB	LINE, 1398
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R1,#SOF( _Settings )
	MOV.W	[R1],#00H
; cbar.c   1399	
; cbar.c   1400		Settings.CBSetup.ScHPhase = CBSetup.ScHPhase = schphase;
	SYMB	LINE, 1400
	MOV.W	R4,R0
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R0,#SOF( _CBSetup+8 )
	MOV.W	[R0],R4
	SYMB	LTIM, "schphase", 2, 0, 2125
	SYMB	LTIM, "schphase", 18, 0, 2253
	MOV.B	ES,#SEG( _Settings+40 )
	MOV.W	R0,#SOF( _Settings+40 )
	MOV.W	[R0],R4
; cbar.c   1401		NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 1401
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	CALL	_NV_Store
; cbar.c   1402	  
; cbar.c   1403		if ( CBSetup.System < NTSC_US)
	SYMB	LINE, 1403
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BCC	_177
; cbar.c   1404			tmp = (long) Calibration.CBCalibration.ScHPhaseG;
	SYMB	LINE, 1404
	MOV.B	ES,#SEG( _Calibration+206 )
	MOV.W	R0,#SOF( _Calibration+206 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	SYMB	LTIM, "tmp", 3, 0, 205
	BR	_178
_177:
; cbar.c   1405		else 
; cbar.c   1406			tmp = (long) Calibration.CBCalibration.ScHPhaseM;
	SYMB	LINE, 1406
	MOV.B	ES,#SEG( _Calibration+212 )
	MOV.W	R0,#SOF( _Calibration+212 )
	MOV.B	R0L,[R0]
	SYMB	LTIM, "tmp", 3, 0, 77
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	SYMB	LTIM, "tmp", 3, 0, 205
_178:
; cbar.c   1407	
; cbar.c   1408		tmp += (long) schphase;
	SYMB	LINE, 1408
	MOV.W	R2,R4
	SEXT.W	R3
	ADD.W	R0,R2
	ADDC.W	R1,R3
	SYMB	LTIM, "tmp", 3, 0, 77
	SYMB	LTIM, "tmp", 3, 0, 205
; cbar.c   1409	
; cbar.c   1410		if ( tmp < 0)											// -1 deg equ. 359 deg a.s.f.
	SYMB	LINE, 1410
	CMP.W	R1,#00H
	BGT	_179
	BLT	_181
	CMP.W	R0,#00H
	BCC	_179
_181:
; cbar.c   1411			tmp += 360;
	SYMB	LINE, 1411
	ADD.W	R0,#0168H
	ADDC.W	R1,#00H
	SYMB	LTIM, "tmp", 3, 0, 77
	SYMB	LTIM, "tmp", 3, 0, 205
_179:
; cbar.c   1412	
; cbar.c   1413		tmp *= 256;
	SYMB	LINE, 1413
	ASL.D	R0,#08H
	SYMB	LTIM, "tmp", 3, 0, 77
	SYMB	LTIM, "tmp", 3, 0, 205
; cbar.c   1414		tmp /= 360;												// tmp = ( ScHPhase*256)/360;
	SYMB	LINE, 1414
	MOV.W	R3,#00H
	MOV.W	R2,#0168H
	FCALL	__SDIVL
	SYMB	LTIM, "tmp", 3, 0, 77
	SYMB	LTIM, "tmp", 3, 0, 205
; cbar.c   1415	
; cbar.c   1416		buffer[0] = C_PHASE_address;
	SYMB	LINE, 1416
	MOV.B	[R7],#05AH
	SYMB	LTIM, "tmp", 3, 0, 77
; cbar.c   1417		buffer[1] = tmp & 0xFF;
	SYMB	LINE, 1417
	AND.B	R0L,#0FFH
	MOV.B	[R7+1],R0L
; cbar.c   1418		
; cbar.c   1419		return( TransmitIIC( TVP6K_IIC_address, 2, buffer, IIC_PTV));
	SYMB	LINE, 1419
	MOV.B	R0L,#040H
	MOV.B	R0H,#02H
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R1L,#00H
	CALL	_TransmitIIC
; cbar.c   1420	}
	SYMB	LINE, 1420
	ADDS.W	R7,#02H
	SYMB	SOFF, 2
	POP.W	R4
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "schphase", 18, 0, 2125
	SYMB	EFUN
; cbar.c   1421	
; cbar.c   1422	/**************************************************************************/
; cbar.c   1423	/* SetCBEmbAudioSignal																					   CBAR.C	*/
; cbar.c   1424	/*																																				*/
; cbar.c   1425	/* Author:	 Kim Engedahl, DEV, 000331																		*/
; cbar.c   1426	/* Revised:	 000618, KEn, DEV     																				*/
; cbar.c   1427	/*																																				*/
; cbar.c   1428	/* Function:   																														*/
; cbar.c   1429	/* Remarks:																																*/
; cbar.c   1430	/* Returns:																																*/
; cbar.c   1431	/* Updates:																																*/
; cbar.c   1432	/**************************************************************************/
; cbar.c   1433	int SetCBEmbAudioSignal( UC signal)
; cbar.c   1434	{
	ALIGN	1
	SYMB	LINE, 1434
	PUBLIC	_SetCBEmbAudioSignal
_SetCBEmbAudioSignal:
	SYMB	TYPE, 501, 'X', 12, #16, 30, 1, #3
	SYMB	GFUN, "SetCBEmbAudioSignal", _SetCBEmbAudioSignal, #501, 0, 0, 16
	SYMB	ALAB, _SetCBEmbAudioSignal, #501
	PUSH.W	R4
	SYMB	SOFF, 2
	SYMB	LTIM, "signal", 0, 0, 2253
	SYMB	IDEN, "signal", 0, #3, 0, 2061
; cbar.c   1435		Settings.ActivePreset = 0;
	SYMB	LINE, 1435
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R1,#SOF( _Settings )
	MOV.W	[R1],#00H
; cbar.c   1436	
; cbar.c   1437		Settings.CBSetup.EmbAudioSignal = CBSetup.EmbAudioSignal = signal;
	SYMB	LINE, 1437
	MOV.B	R4L,R0L
	MOV.B	ES,#SEG( _CBSetup+10 )
	MOV.W	R0,#SOF( _CBSetup+10 )
	MOV.B	[R0],R4L
	SYMB	LTIM, "signal", 0, 0, 2125
	SYMB	LTIM, "signal", 16, 0, 2253
	MOV.B	ES,#SEG( _Settings+42 )
	MOV.W	R0,#SOF( _Settings+42 )
	MOV.B	[R0],R4L
; cbar.c   1438		NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 1438
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	CALL	_NV_Store
; cbar.c   1439	
; cbar.c   1440		if ( signal == EmbAudioOff)
	SYMB	LINE, 1440
	OR.B	R4L,R4L
	BNE	_182
; cbar.c   1441			SoundEnable = FALSE;
	SYMB	LINE, 1441
	MOV.B	ES,#SEG( _SoundEnable )
	MOV.W	R0,#SOF( _SoundEnable )
	MOV.B	[R0],#00H
	BR	_183
_182:
	SYMB	LTIM, "signal", 16, 0, 2125
	SYMB	LTIM, "signal", 16, 0, 2253
; cbar.c   1442		else
; cbar.c   1443		{
; cbar.c   1444			SoundEnable = TRUE;
	SYMB	LINE, 1444
	MOV.B	ES,#SEG( _SoundEnable )
	MOV.W	R0,#SOF( _SoundEnable )
	MOV.B	[R0],#0FFH
; cbar.c   1445	
; cbar.c   1446			Blanking = TRUE;	 				 			// Blank line while loading SRAM
	SYMB	LINE, 1446
	MOV.B	ES,#SEG( _Blanking )
	MOV.W	R0,#SOF( _Blanking )
	MOV.B	[R0],#0FFH
; cbar.c   1447	
; cbar.c   1448			Status &= ~S5S4S3S2;			 			// Blank the line immediately
	SYMB	LINE, 1448
	AND.W	_Status,#0FFC3H
; cbar.c   1449			StatusPort = Status;
	SYMB	LINE, 1449
	MOV.B	ES,#SEG( _StatusPort )
	MOV.W	R0,#SOF( _StatusPort )
	MOV.W	[R0],_Status
; cbar.c   1450	
; cbar.c   1451			SRAMSoundLoad( signal);		 			// Download sound information
	SYMB	LINE, 1451
	MOV.B	R0L,R4L
	CALL	_SRAMSoundLoad
	SYMB	LTIM, "signal", 16, 0, 2125
	SYMB	LTIM, "signal", 0, 0, 2253
	SYMB	LTIM, "signal", 0, 0, 2125
; cbar.c   1452	
; cbar.c   1453			Blanking = FALSE;
	SYMB	LINE, 1453
	MOV.B	ES,#SEG( _Blanking )
	MOV.W	R0,#SOF( _Blanking )
	MOV.B	[R0],#00H
; cbar.c   1454		}
	SYMB	LINE, 1454
_183:
; cbar.c   1455	
; cbar.c   1456		return( OK);
	SYMB	LINE, 1456
	MOV.W	R0,#0FFFFH
; cbar.c   1457	}
	SYMB	LINE, 1457
	POP.W	R4
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; cbar.c   1458	
; cbar.c   1459	/**************************************************************************/
; cbar.c   1460	/* ValidateCBPattern	 																				     CBAR.C	*/
; cbar.c   1461	/*																																				*/
; cbar.c   1462	/* Author:	 Kim Engedahl, DEV, 000405																		*/
; cbar.c   1463	/* Revised:	 000603, KEn, DEV     																				*/
; cbar.c   1464	/*																																				*/
; cbar.c   1465	/* Function:   																														*/
; cbar.c   1466	/* Remarks:	 																															*/
; cbar.c   1467	/* Returns:																																*/
; cbar.c   1468	/* Updates:																																*/
; cbar.c   1469	/**************************************************************************/
; cbar.c   1470	int ValidateCBPattern( UC system, UI *pattern)
; cbar.c   1471	{
	ALIGN	1
	SYMB	LINE, 1471
	PUBLIC	_ValidateCBPattern
_ValidateCBPattern:
	SYMB	TYPE, 503, 'n', #18, 130
	SYMB	TYPE, 504, 'P', #503
	SYMB	TYPE, 502, 'X', 12, #16, 30, 2, #3, #504
	SYMB	GFUN, "ValidateCBPattern", _ValidateCBPattern, #502, 0, 0, 0
	SYMB	ALAB, _ValidateCBPattern, #502
	SYMB	LTIM, "system", 0, 0, 2253
	SYMB	LTIM, "pattern", 11, 0, 2253
	SYMB	IDEN, "system", 0, #3, 0, 2061
	SYMB	IDEN, "pattern", 11, #504, 0, 2061
; cbar.c   1472		if ( system < NTSC_US)
	SYMB	LINE, 1472
	CMP.B	R0L,#02H
	BCC	_187
; cbar.c   1473		{
; cbar.c   1474			switch ( *pattern)
	SYMB	LINE, 1474
	MOV.B	ES,R3L
	MOV.W	R0,[R2]
	SYMB	LTIM, "system", 0, 0, 2125
	CMP.W	R0,#00H
	BEQ	_186
	CMP.W	R0,#02H
	BEQ	_186
	BR	_184
; cbar.c   1475			{
; cbar.c   1476				case SMPTECBar:
; cbar.c   1477				case FCCCBar:
; cbar.c   1478					*pattern = EBUCBar;
; cbar.c   1479					break;
; cbar.c   1480	
; cbar.c   1481				default:
	SYMB	LINE, 1481
_184:
; cbar.c   1482					return( OK);
	SYMB	LINE, 1482
	MOV.W	R0,#0FFFFH
	RET
	SYMB	LINE, 1477
_186:
	SYMB	LTIM, "pattern", 11, 0, 2125
	SYMB	LTIM, "pattern", 11, 0, 2253
	SYMB	LINE, 1478
	MOV.B	ES,R3L
	MOV.W	[R2],#01H
; cbar.c   1483			}
; cbar.c   1484		}
	SYMB	LINE, 1484
	BR	_194
_187:
	SYMB	LTIM, "pattern", 11, 0, 2125
	SYMB	LTIM, "pattern", 11, 0, 2253
; cbar.c   1485		else
; cbar.c   1486		{
; cbar.c   1487			switch ( *pattern)
	SYMB	LINE, 1487
	MOV.B	ES,R3L
	MOV.W	R0,[R2]
	CMP.W	R0,#01H
	BEQ	_192
	CMP.W	R0,#05H
	BEQ	_192
	CMP.W	R0,#06H
	BEQ	_192
	CMP.W	R0,#09H
	BEQ	_188
	BR	_189
; cbar.c   1488			{
; cbar.c   1489				case EBUCBar:
; cbar.c   1490				case CBarGrey75:
; cbar.c   1491				case CBarRed75:
; cbar.c   1492					*pattern = SMPTECBar;
; cbar.c   1493					break;
; cbar.c   1494	
; cbar.c   1495				case CCIR18:
	SYMB	LINE, 1495
_188:
; cbar.c   1496					*pattern = Multiburst;
	SYMB	LINE, 1496
	MOV.B	ES,R3L
	MOV.W	[R2],#08H
; cbar.c   1497					break;
	SYMB	LINE, 1497
	BR	_194
; cbar.c   1498	
; cbar.c   1499				default:
	SYMB	LINE, 1499
_189:
; cbar.c   1500					return( OK);
	SYMB	LINE, 1500
	MOV.W	R0,#0FFFFH
	RET
	SYMB	LINE, 1491
_192:
	SYMB	LTIM, "pattern", 11, 0, 2125
	SYMB	LTIM, "pattern", 11, 0, 2253
	SYMB	LINE, 1492
	MOV.B	ES,R3L
	MOV.W	[R2],#00H
; cbar.c   1501			}
; cbar.c   1502		}
	SYMB	LINE, 1502
_194:
; cbar.c   1503	
; cbar.c   1504		return( FAIL);
	SYMB	LINE, 1504
	MOV.W	R0,#00H
; cbar.c   1505	}
	SYMB	LINE, 1505
_196:
	RET
	SYMB	LTIM, "pattern", 11, 0, 2125
	SYMB	EFUN
	SYMB	ENDF

	SYMB	TYPE, 505, 'n', #18, 129
	SYMB	TYPE, 506, 'P', #505
	SYMB	IDEN, "TablePtr", _TablePtr, #506, 130, 4
	DSEG AT 0122H
	ALIGN	1
_TablePtr:	DS	4
	SYMB	IDEN, "newTablePtr", _newTablePtr, #506, 130, 4
	RSEG	CBAR_CLR_FA
	ALIGN	1
_newTablePtr:	DS	4
	EXTRN	HCODE(__UMODL)
	SYMB	IDEN, "SoundEnable", _SoundEnable, #2, 130, 4
_SoundEnable:	DS	1
	SYMB	IDEN, "SoundCnt", _SoundCnt, #3, 130, 4
	DSEG AT 012CH
_SoundCnt:	DS	1
	SYMB	TYPE, 508, 'n', #3, 130
	SYMB	TYPE, 509, 'P', #508
	SYMB	TYPE, 507, 'X', 12, #16, 30, 4, #3, #3, #509, #3
	SYMB	ALAB, _TransmitIIC, #507
	EXTRN	HCODE(_TransmitIIC)
	SYMB	IDEN, "StatusPort", _StatusPort, #16, 130, 0
	SYMB	ALAB, _StatusPort, #16
	HSEG AT 06A000H
	PUBLIC	_StatusPort
	ALIGN	1
_StatusPort:	DS	2
	SYMB	IDEN, "FrameCnt", _FrameCnt, #3, 130, 4
	DSEG AT 0128H
_FrameCnt:	DS	1
	SYMB	IDEN, "HOffsetPort", _HOffsetPort, #16, 130, 0
	SYMB	ALAB, _HOffsetPort, #16
	HSEG AT 06A004H
	PUBLIC	_HOffsetPort
	ALIGN	1
_HOffsetPort:	DS	2
	SYMB	TYPE, 510, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _tvp6k_system, #510
	EXTRN	HCODE(_tvp6k_system)
	SYMB	IDEN, "CBSetup", _CBSetup, #445, 130, 0
	SYMB	ALAB, _CBSetup, #445
	RSEG	CBAR_CLR_FA
	PUBLIC	_CBSetup
	ALIGN	1
_CBSetup:	DS	12
	SYMB	IDEN, "SoundFrameCnt", _SoundFrameCnt, #3, 130, 4
	DSEG AT 012BH
_SoundFrameCnt:	DS	1
	SYMB	TYPE, 511, 'X', 12, #16, 30, 2, #18, #447
	SYMB	ALAB, _LEDSet, #511
	EXTRN	HCODE(_LEDSet)
	SYMB	IDEN, "SoundPtr", _SoundPtr, #3, 130, 4
	DSEG AT 012DH
_SoundPtr:	DS	1
	SYMB	IDEN, "Blanking", _Blanking, #2, 130, 4
	RSEG	CBAR_CLR_FA
_Blanking:	DS	1
	SYMB	IDEN, "SRAMVideoPort", _SRAMVideoPort, #16, 130, 0
	SYMB	ALAB, _SRAMVideoPort, #16
	HSEG AT 044000H
	PUBLIC	_SRAMVideoPort
	ALIGN	1
_SRAMVideoPort:	DS	2
	SYMB	TYPE, 512, 'Z', #16, 4607
	SYMB	IDEN, "SoundSignalArray", _SoundSignalArray, #512, 129, 0
	SYMB	ALAB, _SoundSignalArray, #512
	HCSEG AT 04A000H
	PUBLIC	_SoundSignalArray
	ALIGN	1
_SoundSignalArray:	DS	9216
	SYMB	TYPE, 514, 'X', 12, #16, 30, 3, #3, #3, #3
	SYMB	ALAB, _Write_AD8402, #514
	EXTRN	HCODE(_Write_AD8402)
	SYMB	ALAB, _SettingsPtr, #448
	EXTRN	HDATA(_SettingsPtr)
	SYMB	IDEN, "PhaseOffset", _PhaseOffset, #16, 130, 0
	SYMB	ALAB, _PhaseOffset, #16
	RSEG	CBAR_CLR_FA
	PUBLIC	_PhaseOffset
	ALIGN	1
_PhaseOffset:	DS	2
	SYMB	ALAB, _GenlockSetup, #450
	EXTRN	HDATA(_GenlockSetup)
	SYMB	ALAB, _Settings, #466
	EXTRN	HDATA(_Settings)
	SYMB	IDEN, "LineCnt", _LineCnt, #18, 130, 4
	DSEG AT 0126H
	ALIGN	1
_LineCnt:	DS	2
	SYMB	IDEN, "SyncLinePtr", _SyncLinePtr, #3, 130, 4
	DSEG AT 012AH
_SyncLinePtr:	DS	1
	SYMB	TYPE, 515, 'X', 12, #16, 30, 3, #284, #448, #16
	SYMB	ALAB, _NV_Store, #515
	EXTRN	HCODE(_NV_Store)
	SYMB	ALAB, _Calibration, #476
	EXTRN	HDATA(_Calibration)
	SYMB	IDEN, "SyncLineCnt", _SyncLineCnt, #3, 130, 4
	DSEG AT 0129H
_SyncLineCnt:	DS	1
	SYMB	TYPE, 516, 'Z', #16, 98303
	SYMB	IDEN, "VideoSignalArray", _VideoSignalArray, #516, 129, 0
	SYMB	ALAB, _VideoSignalArray, #516
	HCSEG AT 050000H
	PUBLIC	_VideoSignalArray
	ALIGN	1
_VideoSignalArray:	DS	196608
	SYMB	IDEN, "SoundPtrMax", _SoundPtrMax, #3, 130, 4
	DSEG AT 012EH
_SoundPtrMax:	DS	1
	EXTRN	IDATA(__lc_bs)
	SYMB	IDEN, "Status", _Status, #18, 130, 4
	DSEG AT 0120H
	ALIGN	1
_Status:	DS	2
	EXTRN	HCODE(__SDIVL)
	SYMB	IDEN, "SRAMSoundPort", _SRAMSoundPort, #16, 130, 0
	SYMB	ALAB, _SRAMSoundPort, #16
	HSEG AT 040000H
	PUBLIC	_SRAMSoundPort
	ALIGN	1
_SRAMSoundPort:	DS	2
	SYMB	IDEN, "NewPattern", _NewPattern, #2, 130, 4
	RSEG	CBAR_CLR_FA
_NewPattern:	DS	1
	SYMB	IDEN, "TimeTickCounter", _TimeTickCounter, #18, 130, 0
	SYMB	ALAB, _TimeTickCounter, #18
CBAR_CLR_NE@DS	SEGMENT	DATA JOIN CLEAR
	RSEG	CBAR_CLR_NE@DS
	PUBLIC	_TimeTickCounter
	ALIGN	1
_TimeTickCounter:	DS	2
	EXTRN	HCODE(__UDIVL)
	SYMB	IDEN, "ChromaGainPort", _ChromaGainPort, #16, 130, 0
	SYMB	ALAB, _ChromaGainPort, #16
	HSEG AT 06A008H
	PUBLIC	_ChromaGainPort
	ALIGN	1
_ChromaGainPort:	DS	2
	SYMB	IDEN, "LineOffset", _LineOffset, #16, 130, 0
	SYMB	ALAB, _LineOffset, #16
	RSEG	CBAR_CLR_NE@DS
	PUBLIC	_LineOffset
	ALIGN	1
_LineOffset:	DS	2
	EXTRN	DATA(__lc_ub_xvwbuffer)
	EXTRN	DATA(__lc_ue_xvwbuffer)
	CALLS	'WriteCBGain', 'Write_AD8402'
	CALLS	'CBDefaults', 'NV_Store'
	CALLS	'CBUpdate', 'SetCBSystem'
	CALLS	'CBUpdate', 'SetCBDelay'
	CALLS	'CBUpdate', 'SetCBScHPhase'
	CALLS	'CBUpdate', 'SetCBEmbAudioSignal'
	CALLS	'SetCBPattern', 'ValidateCBPattern'
	CALLS	'SetCBPattern', 'NV_Store'
	CALLS	'SetCBPattern', 'SRAMVideoLoad'
	CALLS	'SetCBSystem', 'NV_Store'
	CALLS	'SetCBSystem', 'WriteCBGain'
	CALLS	'SetCBSystem', 'WriteCBChromaGain'
	CALLS	'SetCBSystem', 'WriteCBGain'
	CALLS	'SetCBSystem', 'WriteCBChromaGain'
	CALLS	'SetCBSystem', 'tvp6k_system'
	CALLS	'SetCBSystem', 'ValidateCBPattern'
	CALLS	'SetCBSystem', 'SetCBPattern'
	CALLS	'SetCBSystem', 'SetCBScHPhase'
	CALLS	'SetCBSystem', 'LEDSet'
	CALLS	'SetCBDelay', 'NV_Store'
	CALLS	'SetCBScHPhase', 'NV_Store'
	CALLS	'SetCBScHPhase', 'TransmitIIC'
	CALLS	'SetCBEmbAudioSignal', 'NV_Store'
	CALLS	'SetCBEmbAudioSignal', 'SRAMSoundLoad'
	END
