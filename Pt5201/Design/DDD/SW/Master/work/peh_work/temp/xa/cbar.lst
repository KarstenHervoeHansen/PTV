XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   1
F:\PTV\Pt5201\Design\DDD\SW\Master\work\peh_work\temp\xa\cbar.src
ADDR   CODE            LINE SOURCELINE
                          1 ; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
                          2 ; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -Ic:\cxa\rtxc\xa\include -I. -Ml
                          3 ;          -O2 -s
                          5 $NOZPAGE
                          6         NAME    CBAR
                         10 ; cbar.c      1 /****************************************************************************/
                         11 ; cbar.c      2 /* MODULE:                                                                  */
                         12 ; cbar.c      3 /*  cbar.c - ColorBar generator                                             */
                         13 ; cbar.c      4 /****************************************************************************/
                         14 ; cbar.c      5 /* FUNCTIONS:                                                               */
                         15 ; cbar.c      6 /*                                                                          */
                         16 ; cbar.c      7 /*      int WriteCBGain( UC gain)                                                
                                                            */
                         17 ; cbar.c      8 /*      int WriteCBChromaGain( UC gain)                                          
                                            */
                         18 ; cbar.c      9 /*      int SRAMVideoLoad( UC signal, UC bank)                                   
                                        */
                         19 ; cbar.c     10 /*      int SRAMSoundLoad( UC signal)                                            
                                                                */
                         20 ; cbar.c     11 /*      void CBLineInterrupt( void)                                              
                                                                */
                         21 ; cbar.c     12 /*      void CBDefaults( void)                                                   
                                                                */
                         22 ; cbar.c     13 /*      int CBInit( void)                                                        
                                                                                    */
                         23 ; cbar.c     14 /*      int CBUpdate( void)                                                      
                                                                            */
                         24 ; cbar.c     15 /*      int SetCBPattern( UI pattern)                                            
                                                                                                                             
                                    */
                         25 ; cbar.c     16 /*      int SetCBSystem( UC system)                                              
                                                    */
                         26 ; cbar.c     17 /*      int SetCBDelay( UL delay)                                                
                                                            */
                         27 ; cbar.c     18 /*      int SetCBScHPhase( int schphase)                                         
                                    */
                         28 ; cbar.c     19 /*      int SetCBEmbAudioSignal( UC signal)                                     *
                            /
                         29 ; cbar.c     20 /*      int ValidateCBPattern( UC system, UI *pattern)                           
                                                                                                    */      
                         30 ; cbar.c     21 /*                                                                          */
                         31 ; cbar.c     22 /* TASKS:                                                                   */
                         32 ; cbar.c     23 /*                                                                          */
                         33 ; cbar.c     24 /* NOTES:                                                                   */
                         34 ; cbar.c     25 /*                                                                          */
                         35 ; cbar.c     26 /****************************************************************************/
                         36 ; cbar.c     27 /*
                         37 ; cbar.c     28  *   PTV software for PT5201    
                         38 ; cbar.c     29  *   Copyright (c) 
                         39 ; cbar.c     30  *   ProTeleVision Technologies A/S.
                         40 ; cbar.c     31  *   ALL RIGHTS RESERVED
                         41 ; cbar.c     32 */
                         42 ; cbar.c     33 /****************************************************************************/
                         43 ; cbar.c     34 
                         44 ; cbar.c     35 #include "reg8051.h"
                         47 ; cbar.c     36 #include "define.h"        // Standard PTV defines
                         50 ; cbar.c     37 #include "rtxcobj.h"
                        380 ; cbar.c     38 #include "config.h" 
                        383 ; cbar.c     39 #include "audio.h"
                        394 ; cbar.c     40 #include "cbar.h"
                        404 ; cbar.c     41 #include "tables.h"
                        407 ; cbar.c     42 #include "led_hw.h"
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   2

ADDR   CODE            LINE SOURCELINE
                        414 ; cbar.c     43 #include "tvp6kdrv.h"
                        417 ; cbar.c     44 #include "i2c_drv.h"
                        420 ; cbar.c     45 #include "instru.h"
                        508 ; cbar.c     46 
                        509 ; cbar.c     47 #define SRAMBank0                       0x00
                        510 ; cbar.c     48 #define SRAMBank1                       0x10
                        511 ; cbar.c     49 #define SRAMBank2                       0x14
                        512 ; cbar.c     50 #define SRAMBank3                       0x18
                        513 ; cbar.c     51 #define SRAMBank4                       0x1C
                        514 ; cbar.c     52 #define SRAMBank5                       0x20
                        515 ; cbar.c     53 #define SRAMBank6                       0x24
                        516 ; cbar.c     54 #define SRAMBank7                       0x28
                        517 ; cbar.c     55 #define SRAMBank8                       0x2C
                        518 ; cbar.c     56 #define SRAMBank9                       0x30
                        519 ; cbar.c     57 #define SRAMBank10              0x34
                        520 ; cbar.c     58 #define SRAMBank11              0x38
                        521 ; cbar.c     59 #define SRAMBank12              0x3C
                        522 ; cbar.c     60 
                        523 ; cbar.c     61 #define dEBUCBar_8bit_625                                       0
                        524 ; cbar.c     62 #define dEBUCBar_625                                                    1
                        525 ; cbar.c     63 #define dSMPTECBar                                                              2
                            
                        526 ; cbar.c     64 #define dBlueBars                                                                
                                    3
                        527 ; cbar.c     65 #define dIWhiteQ                                                                 
                                    4
                        528 ; cbar.c     66 #define dCBar100_625                                                    5
                        529 ; cbar.c     67 #define dGrey75_625                                                             6
                            
                        530 ; cbar.c     68 #define dRed75_625                                                              7
                            
                        531 ; cbar.c     69 #define dRed75_525                                                              8
                            
                        532 ; cbar.c     70 #define dChroma_Multiburst                              9
                        533 ; cbar.c     71 #define d_CCIR18_625                                                    9
                        534 ; cbar.c     72 #define dFCC_Multiburst_525                             10
                        535 ; cbar.c     73 #define dChroma_Multiburst_525          11
                        536 ; cbar.c     74 #define dWhiteLine_625                                          11
                        537 ; cbar.c     75 #define dCrossHatch19_625                                       12
                        538 ; cbar.c     76 #define dWhiteLine_525                                          13
                        539 ; cbar.c     77 #define dCrossHatch17_525                                       14
                        540 ; cbar.c     78 #define dPlugeWhite_625                                         15
                        541 ; cbar.c     79 #define dPlugeGreyC_625                                         16
                        542 ; cbar.c     80 #define dPlugeGreyD_625                                         17
                        543 ; cbar.c     81 #define dPlugeGreyE_625                                         18
                        544 ; cbar.c     82 #define dPlugeWhite_525                                         19
                        545 ; cbar.c     83 #define dPlugeGreyC_525                                         20
                        546 ; cbar.c     84 #define dPlugeGreyD_525                                         21
                        547 ; cbar.c     85 #define dPlugeGreyE_525                                         22
                        548 ; cbar.c     86 #define dGreyScale5_625                                         23
                        549 ; cbar.c     87 #define dGreyScale5_525                                         24
                        550 ; cbar.c     88 #define dGreyScale10_625                                        25
                        551 ; cbar.c     89 #define dGreyScale10_525                                        26
                        552 ; cbar.c     90 #define dWindow50Marker                                         27
                        553 ; cbar.c     91 #define dMarkerLine                                                     28
                        554 ; cbar.c     92 #define dWindow15                                                               2
                            9
                        555 ; cbar.c     93 #define dMarker15                                                               3
                            0
                        556 ; cbar.c     94 #define dWindow20                                                               3
                            1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   3

ADDR   CODE            LINE SOURCELINE
                        557 ; cbar.c     95 #define dMarker20                                                               3
                            2
                        558 ; cbar.c     96 #define dWindow100                                                      33
                        559 ; cbar.c     97 #define dMarker100                                                      34
                        560 ; cbar.c     98 #define dDigitalGrey_625                                        35
                        561 ; cbar.c     99 #define dDigitalGrey_525                                        36
                        562 ; cbar.c    100 #define dSDI_test_line1                                         37
                        563 ; cbar.c    101 #define dSDI_test_line2                                         38
                        564 ; cbar.c    102 #define dSDI_test_line3                                         39
                        565 ; cbar.c    103 #define dCBar75_STD_625                                         40
                        566 ; cbar.c    104 #define dFCC_CBar_525                                           41
                        567 ; cbar.c    105 #define dFCC_CBar100_525                                        42
                        568 ; cbar.c    106 #define dWindow10                                                               4
                            3
                        569 ; cbar.c    107 #define dMarker10                                                               4
                            4
                        570 ; cbar.c    108 #define dkHz15BlWh_625                                          45
                        571 ; cbar.c    109 #define dkHz15BlWh_525                                          46
                        572 ; cbar.c    110 #define dCCIR18_625                                                     47
                        573 ; cbar.c    111 
                        574 ; cbar.c    112 /****************************************************************************/
                        575 ; cbar.c    113 /*
                        576 ; cbar.c    114 The statusport is defined in the PLD as:
                        577 ; cbar.c    115 
                        578 ; cbar.c    116         bit 0:  S0                              Background system
                        579 ; cbar.c    117         bit 1:  S1
                        580 ; cbar.c    118 
                        581 ; cbar.c    119         bit 2:  S2                              Linetype
                        582 ; cbar.c    120         bit 3:  S3
                        583 ; cbar.c    121         bit 4:  S4
                        584 ; cbar.c    122         bit 5:  S5
                        585 ; cbar.c    123 
                        586 ; cbar.c    124         bit 6:  SYSSEL          System select ( 0:G, 1:M)
                        587 ; cbar.c    125         bit 7:  SOUND                   Sound ( 0:off, 1:on)
                        588 ; cbar.c    126 
                        589 ; cbar.c    127         bit 8:  3OR4                    Samples in sound ( 0:3 samples, 1:4 sampl
                            es)
                        590 ; cbar.c    128         bit 9:  FIELD1          Field one bit ( 1 in Field 1/line 1 (out of 8/4) 
                            otherwise 0)
                        591 ; cbar.c    129         bit 10: CB      
                        592 ; cbar.c    130         bit 11: EDHON                   EDH bit for future use ( 0:off, 1:on)
                        593 ; cbar.c    131 
                        594 ; cbar.c    132         bit 12: PS                              PS ( 0:disable writing in SRAM, 1
                            : enable writing in SRAM)
                        595 ; cbar.c    133         bit 13: Line7                   Line 7 pulse in PAL w/PAL_ID
                        596 ; cbar.c    134         bit 14: PhaseReg        Phase offset register select
                        597 ; cbar.c    135         bit 15: -                                       Not used
                        598 ; cbar.c    136 */
                        599 ; cbar.c    137 /****************************************************************************/
                        600 ; cbar.c    138                                                                                 
                        601 ; cbar.c    139 #define S1S0                    0x0003
                        602 ; cbar.c    140 #define S5S4S3S2                0x003C
                        603 ; cbar.c    141 #define SYSSEL                  0x0040
                        604 ; cbar.c    142 #define SOUNDON         0x0080
                        605 ; cbar.c    143 #define S3OR4                   0x0100
                        606 ; cbar.c    144 #define FIELD1                  0x0200
                        607 ; cbar.c    145 #define CB                              0x0400
                        608 ; cbar.c    146 #define EDHON                   0x0800
                        609 ; cbar.c    147 #define PS                              0x1000
                        610 ; cbar.c    148 #define LINE7PULSE      0x2000
                        611 ; cbar.c    149 #define PHASEREGSEL     0x4000
                        612 ; cbar.c    150 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   4

ADDR   CODE            LINE SOURCELINE
                        613 ; cbar.c    151 #define SOUND                   (int)(SOUNDON + S3OR4)
                        614 ; cbar.c    152 
                        615 ; cbar.c    153 #define SyncLineA               1
                        616 ; cbar.c    154 #define SyncLineB       0
                        617 ; cbar.c    155 #define SyncLineC       2
                        618 ; cbar.c    156 #define SyncLineD       3
                        619 ; cbar.c    157 
                        620 ; cbar.c    158 /****************************************************************************/
                        621 ; cbar.c    159 // Prototypes internal functions
                        622 ; cbar.c    160 
                        623 ; cbar.c    161 int ValidateCBPattern( UC system, UI *pattern);
                        624 ; cbar.c    162 
                        625 ; cbar.c    163         _ROM_ UI Sound525[48] = {
000000                  626 CBAR_RO SEGMENT HCODE ROMDATA
000000                  627         RSEG    CBAR_RO
                        631         PUBLIC  _Sound525
                        632         ALIGN   1
000000                  633 _Sound525:
000000 83008101850003   634         DW      00083H,00181H,00085H,00003H,00086H,00181H,0008BH,00181H
       00860081018B00       
       8101                 
000010 8B0081018B0081   635         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
       018B0081018B00       
       8101                 
000020 8B0081018B0081   636         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
       018B0081018B00       
       8101                 
000030 8B0081018B0081   637         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
       018B0081018B00       
       8101                 
000040 8B0081018B0081   638         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
       018B0081018B00       
       8101                 
                        639 ; cbar.c    164         0x083, 0x181, 0x085, 0x003, 0x086, 0x181, 0x08B, 0x181,
                        640 ; cbar.c    165         0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181,
                        641 ; cbar.c    166         0x08B, 0x181,   0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181,
                        642 ; cbar.c    167         0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181,
                        643 ; cbar.c    168         0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181,
                        644 ; cbar.c    169         0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x083, 0x081
                        645 ; cbar.c    170 };
                        646 ; cbar.c    171 
                        647 ; cbar.c    172         _ROM_ UI Sound625[65] = {
000050 8B0081018B0081   648         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,00083H,00081H
       018B0081018300       
       8100                 
                        652         PUBLIC  _Sound625
                        653         ALIGN   1
000060                  654 _Sound625:
000060 81018400030085   655         DW      00181H,00084H,00003H,00085H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000070 81018900810189   656         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000080 81018900810189   657         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000090 81018900810189   658         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   5

ADDR   CODE            LINE SOURCELINE
0000A0 81018900810189   659         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
0000B0 81018900810189   660         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
0000C0 81018900810189   661         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
0000D0 81018900810189   662         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00088H
       00810189008101       
       8800                 
                        663 ; cbar.c    173         0x181,  0x084,  0x003,  0x085,  0x181,  0x089,  0x181,  0x089,
                        664 ; cbar.c    174         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                        665 ; cbar.c    175         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                        666 ; cbar.c    176         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                        667 ; cbar.c    177         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                        668 ; cbar.c    178         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                        669 ; cbar.c    179         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                        670 ; cbar.c    180         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x088,
                        671 ; cbar.c    181         0x181
                        672 ; cbar.c    182 };
                        673 ; cbar.c    183 
                        674 ; cbar.c    184 _ROM_   UI PALBlackTable[] =
0000E0 8101             675         DW      00181H
                        679         PUBLIC  _PALBlackTable
                        680         ALIGN   1
0000E2                  681 _PALBlackTable:
0000E2 00160290029000   682         DW      01600H,09002H,09002H,00200H,01701H,09003H,09003H,00201H
       02011703900390       
       0102                 
                        683 ; cbar.c    185 {
                        684 ; cbar.c    186         22*256  +                                                       SyncLineB
                            ,
                        685 ; cbar.c    187         144*256 +                                                       SyncLineC
                            ,
                        686 ; cbar.c    188         144*256 +                                                       SyncLineC
                            ,
                        687 ; cbar.c    189         2*256           +                                                       S
                            yncLineB,
                        688 ; cbar.c    190 
                        689 ; cbar.c    191         23*256  +                                                       SyncLineA
                            ,
                        690 ; cbar.c    192         144*256 +                                                       SyncLineD
                            ,
                        691 ; cbar.c    193         144*256 +                                                       SyncLineD
                            ,
                        692 ; cbar.c    194         2*256           +                                                       S
                            yncLineA,
                        693 ; cbar.c    195         0
                        694 ; cbar.c    196 };
                        695 ; cbar.c    197 
                        696 ; cbar.c    198 _ROM_ UI PALFullFieldTable[] =
0000F2 0000             697         DW      00000H
                        700         PUBLIC  _PALFullFieldTable
                        701         ALIGN   1
0000F4                  702 _PALFullFieldTable:
0000F4 00161290129000   703         DW      01600H,09012H,09012H,00200H,01701H,09013H,09013H,00201H
       02011713901390       
       0102                 
                        704 ; cbar.c    199 {
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   6

ADDR   CODE            LINE SOURCELINE
                        705 ; cbar.c    200         22*256  +                                                       SyncLineB
                            ,
                        706 ; cbar.c    201         144*256 +       SRAMBank1 + SyncLineC,
                        707 ; cbar.c    202         144*256 +       SRAMBank1 + SyncLineC,
                        708 ; cbar.c    203         2*256           +                                                       S
                            yncLineB,
                        709 ; cbar.c    204 
                        710 ; cbar.c    205         23*256  +                                                       SyncLineA
                            ,
                        711 ; cbar.c    206         144*256 +       SRAMBank1 + SyncLineD,
                        712 ; cbar.c    207         144*256 +       SRAMBank1 + SyncLineD,
                        713 ; cbar.c    208         2*256           +                                                       S
                            yncLineA,
                        714 ; cbar.c    209         0
                        715 ; cbar.c    210 };
                        716 ; cbar.c    211 
                        717 ; cbar.c    212 _ROM_ UI PALSplitFieldTable[] =
000104 0000             718         DW      00000H
                        721         PUBLIC  _PALSplitFieldTable
                        722         ALIGN   1
000106                  723 _PALSplitFieldTable:
000106 001612C0166000   724         DW      01600H,0C012H,06016H,00200H,01701H,0C013H,06017H,00201H
       02011713C01760       
       0102                 
                        725 ; cbar.c    213 {
                        726 ; cbar.c    214         22*256  +                                                       SyncLineB
                            ,
                        727 ; cbar.c    215         192*256 +       SRAMBank1 + SyncLineC,
                        728 ; cbar.c    216         96*256  +       SRAMBank2 + SyncLineC,
                        729 ; cbar.c    217         2*256           +                                                       S
                            yncLineB,
                        730 ; cbar.c    218 
                        731 ; cbar.c    219         23*256  +                                                       SyncLineA
                            ,
                        732 ; cbar.c    220         192*256 +       SRAMBank1 + SyncLineD,
                        733 ; cbar.c    221         96*256  +       SRAMBank2 + SyncLineD,
                        734 ; cbar.c    222         2*256           +                                                       S
                            yncLineA,
                        735 ; cbar.c    223         0
                        736 ; cbar.c    224 };
                        737 ; cbar.c    225 
                        738 ; cbar.c    226 _ROM_ UI PALWindowTable[] =
000116 0000             739         DW      00000H
                        742         PUBLIC  _PALWindowTable
                        743         ALIGN   1
000118                  744 _PALWindowTable:
000118 00160218120116   745         DW      01600H,01802H,00112H,00116H,00102H,0011AH,02C02H,0901EH
       0102011A01022C       
       1E90                 
000128 02480002011703   746         DW      04802H,00200H,01701H,01803H,00113H,00117H,00103H,0011BH
       18130117010301       
       1B01                 
                        747 ; cbar.c    227 {
                        748 ; cbar.c    228         22*256  +                                                       SyncLineB
                            ,
                        749 ; cbar.c    229         24*256  +                       SyncLineC,
                        750 ; cbar.c    230         1*256           +       SRAMBank1 + SyncLineC,
                        751 ; cbar.c    231         1*256           +       SRAMBank2 + SyncLineC,
                        752 ; cbar.c    232         1*256           +                             SyncLineC,
                        753 ; cbar.c    233         1*256           +       SRAMBank3 + SyncLineC,
                        754 ; cbar.c    234         44*256  +                         SyncLineC,
                        755 ; cbar.c    235         144*256 +       SRAMBank4 + SyncLineC,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   7

ADDR   CODE            LINE SOURCELINE
                        756 ; cbar.c    236         72*256  +                           SyncLineC,
                        757 ; cbar.c    237         2*256           +                                                       S
                            yncLineB,
                        758 ; cbar.c    238 
                        759 ; cbar.c    239         23*256  +                                                       SyncLineA
                            ,
                        760 ; cbar.c    240         24*256  +                       SyncLineD,
                        761 ; cbar.c    241         1*256           +       SRAMBank1 + SyncLineD,
                        762 ; cbar.c    242         1*256           +       SRAMBank2 + SyncLineD,
                        763 ; cbar.c    243         1*256           +                         SyncLineD,
                        764 ; cbar.c    244         1*256           +       SRAMBank3 + SyncLineD,
                        765 ; cbar.c    245         44*256  +                                     SyncLineD,
                        766 ; cbar.c    246         144*256 +       SRAMBank4 + SyncLineD,
                        767 ; cbar.c    247         72*256  +                         SyncLineD,
                        768 ; cbar.c    248         2*256           +                                                       S
                            yncLineA,
                        769 ; cbar.c    249         0
                        770 ; cbar.c    250 };
                        771 ; cbar.c    251 
                        772 ; cbar.c    252 _ROM_ UI PALCheckfieldTable[] =
000138 032C1F90034801   773         DW      02C03H,0901FH,04803H,00201H,00000H
       020000               
                        776         PUBLIC  _PALCheckfieldTable
                        777         ALIGN   1
000142                  778 _PALCheckfieldTable:
000142 00161201168F1A   779         DW      01600H,00112H,08F16H,0901AH,00200H,01701H,09017H,0901BH
       90000201171790       
       1B90                 
                        780 ; cbar.c    253 {
                        781 ; cbar.c    254         22*256  +                                                       SyncLineB
                            ,
                        782 ; cbar.c    255         1*256           +       SRAMBank1 + SyncLineC,
                        783 ; cbar.c    256         143*256 +       SRAMBank2 + SyncLineC,
                        784 ; cbar.c    257         144*256 +       SRAMBank3 + SyncLineC,
                        785 ; cbar.c    258         2*256           +                                                       S
                            yncLineB,
                        786 ; cbar.c    259 
                        787 ; cbar.c    260         23*256  +                                                       SyncLineA
                            ,
                        788 ; cbar.c    261         144*256 +       SRAMBank2 + SyncLineD,
                        789 ; cbar.c    262         144*256 +       SRAMBank3 + SyncLineD,
                        790 ; cbar.c    263         2*256           +                                                       S
                            yncLineA,
                        791 ; cbar.c    264         0
                        792 ; cbar.c    265 };
                        793 ; cbar.c    266 
                        794 ; cbar.c    267 _ROM_ UI PALCrosshatchTable[] =
000152 01020000         795         DW      00201H,00000H
                        798         PUBLIC  _PALCrosshatchTable
                        799         ALIGN   1
000156                  800 _PALCrosshatchTable:
000156 00161207160112   801         DW      01600H,00712H,00116H,01412H,00116H,01412H,00116H,01412H
       14160112141601       
       1214                 
000166 16011214160112   802         DW      00116H,01412H,00116H,01412H,00116H,01412H,00116H,01412H
       14160112141601       
       1214                 
000176 16011214160112   803         DW      00116H,01412H,00116H,01412H,00116H,01412H,00116H,01412H
       14160112141601       
       1214                 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   8

ADDR   CODE            LINE SOURCELINE
000186 16011214160112   804         DW      00116H,01412H,00116H,01412H,00116H,00712H,00200H,01701H
       14160112070002       
       0117                 
000196 13071701131417   805         DW      00713H,00117H,01413H,00117H,01413H,00117H,01413H,00117H
       01131417011314       
       1701                 
0001A6 13141701131417   806         DW      01413H,00117H,01413H,00117H,01413H,00117H,01413H,00117H
       01131417011314       
       1701                 
0001B6 13141701131417   807         DW      01413H,00117H,01413H,00117H,01413H,00117H,01413H,00117H
       01131417011314       
       1701                 
                        808 ; cbar.c    268 {
                        809 ; cbar.c    269         22*256  +                                                       SyncLineB
                            ,
                        810 ; cbar.c    270         7*256           + SRAMBank1 + SyncLineC,
                        811 ; cbar.c    271         1*256           +       SRAMBank2 + SyncLineC,
                        812 ; cbar.c    272         20*256  +       SRAMBank1 + SyncLineC,
                        813 ; cbar.c    273         1*256           +       SRAMBank2 + SyncLineC,
                        814 ; cbar.c    274         20*256  +       SRAMBank1 + SyncLineC,
                        815 ; cbar.c    275         1*256           +       SRAMBank2 + SyncLineC,
                        816 ; cbar.c    276         20*256  +       SRAMBank1 + SyncLineC,
                        817 ; cbar.c    277         1*256           +       SRAMBank2 + SyncLineC,
                        818 ; cbar.c    278         20*256  +       SRAMBank1 + SyncLineC,
                        819 ; cbar.c    279         1*256           +       SRAMBank2 + SyncLineC,
                        820 ; cbar.c    280         20*256  +       SRAMBank1 + SyncLineC,
                        821 ; cbar.c    281         1*256           +       SRAMBank2 + SyncLineC,
                        822 ; cbar.c    282         20*256  +       SRAMBank1 + SyncLineC,
                        823 ; cbar.c    283         1*256           +       SRAMBank2 + SyncLineC,
                        824 ; cbar.c    284         20*256  +       SRAMBank1 + SyncLineC,
                        825 ; cbar.c    285         1*256           +       SRAMBank2 + SyncLineC,
                        826 ; cbar.c    286         20*256  +       SRAMBank1 + SyncLineC,
                        827 ; cbar.c    287         1*256           +       SRAMBank2 + SyncLineC,
                        828 ; cbar.c    288         20*256  +       SRAMBank1 + SyncLineC,
                        829 ; cbar.c    289         1*256           +       SRAMBank2 + SyncLineC,
                        830 ; cbar.c    290         20*256  +       SRAMBank1 + SyncLineC,
                        831 ; cbar.c    291         1*256           +       SRAMBank2 + SyncLineC,
                        832 ; cbar.c    292         20*256  +       SRAMBank1 + SyncLineC,
                        833 ; cbar.c    293         1*256           +       SRAMBank2 + SyncLineC,
                        834 ; cbar.c    294         20*256  +       SRAMBank1 + SyncLineC,
                        835 ; cbar.c    295         1*256           +       SRAMBank2 + SyncLineC,
                        836 ; cbar.c    296         20*256  +       SRAMBank1 + SyncLineC,
                        837 ; cbar.c    297         1*256           +       SRAMBank2 + SyncLineC,
                        838 ; cbar.c    298         7*256     +     SRAMBank1 + SyncLineC,
                        839 ; cbar.c    299         2*256           +                                                       S
                            yncLineB,
                        840 ; cbar.c    300 
                        841 ; cbar.c    301         23*256  +                                                       SyncLineA
                            ,
                        842 ; cbar.c    302         7*256           + SRAMBank1 + SyncLineD,
                        843 ; cbar.c    303         1*256           +       SRAMBank2 + SyncLineD,
                        844 ; cbar.c    304         20*256  +       SRAMBank1 + SyncLineD,
                        845 ; cbar.c    305         1*256           +       SRAMBank2 + SyncLineD,
                        846 ; cbar.c    306         20*256  +       SRAMBank1 + SyncLineD,
                        847 ; cbar.c    307         1*256           +       SRAMBank2 + SyncLineD,
                        848 ; cbar.c    308         20*256  +       SRAMBank1 + SyncLineD,
                        849 ; cbar.c    309         1*256           +       SRAMBank2 + SyncLineD,
                        850 ; cbar.c    310         20*256  +       SRAMBank1 + SyncLineD,
                        851 ; cbar.c    311         1*256           +       SRAMBank2 + SyncLineD,
                        852 ; cbar.c    312         20*256  +       SRAMBank1 + SyncLineD,
                        853 ; cbar.c    313         1*256           +       SRAMBank2 + SyncLineD,
                        854 ; cbar.c    314         20*256  +       SRAMBank1 + SyncLineD,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   9

ADDR   CODE            LINE SOURCELINE
                        855 ; cbar.c    315         1*256           +       SRAMBank2 + SyncLineD,
                        856 ; cbar.c    316         20*256  +       SRAMBank1 + SyncLineD,
                        857 ; cbar.c    317         1*256           +       SRAMBank2 + SyncLineD,
                        858 ; cbar.c    318         20*256  +       SRAMBank1 + SyncLineD,
                        859 ; cbar.c    319         1*256           +       SRAMBank2 + SyncLineD,
                        860 ; cbar.c    320         20*256  +       SRAMBank1 + SyncLineD,
                        861 ; cbar.c    321         1*256           +       SRAMBank2 + SyncLineD,
                        862 ; cbar.c    322         20*256  +       SRAMBank1 + SyncLineD,
                        863 ; cbar.c    323         1*256           +       SRAMBank2 + SyncLineD,
                        864 ; cbar.c    324         20*256  +       SRAMBank1 + SyncLineD,
                        865 ; cbar.c    325         1*256           +       SRAMBank2 + SyncLineD,
                        866 ; cbar.c    326         20*256  +       SRAMBank1 + SyncLineD,
                        867 ; cbar.c    327         1*256           +       SRAMBank2 + SyncLineD,
                        868 ; cbar.c    328         20*256  +       SRAMBank1 + SyncLineD,
                        869 ; cbar.c    329         1*256           +       SRAMBank2 + SyncLineD,
                        870 ; cbar.c    330         7*256     +     SRAMBank1 + SyncLineD,
                        871 ; cbar.c    331         2*256           +                                                       S
                            yncLineA,
                        872 ; cbar.c    332         0
                        873 ; cbar.c    333 };
                        874 ; cbar.c    334 
                        875 ; cbar.c    335 _ROM_ UI PALPLUGETable[] =
0001C6 13141701131417   876         DW      01413H,00117H,01413H,00117H,00713H,00201H,00000H
       01130701020000       
                        879         PUBLIC  _PALPLUGETable
                        880         ALIGN   1
0001D4                  881 _PALPLUGETable:
0001D4 00160226123516   882         DW      01600H,02602H,03512H,03516H,0351AH,0351EH,02602H,00200H
       351A351E350226       
       0002                 
0001E4 01170326133517   883         DW      01701H,02603H,03513H,03517H,0351BH,0351FH,02603H,00201H
       351B351F350326       
       0102                 
                        884 ; cbar.c    336 {
                        885 ; cbar.c    337         22*256  +                                                       SyncLineB
                            ,
                        886 ; cbar.c    338         38*256  +                         SyncLineC,
                        887 ; cbar.c    339         53*256  +       SRAMBank1 + SyncLineC,
                        888 ; cbar.c    340         53*256  +       SRAMBank2 + SyncLineC,
                        889 ; cbar.c    341         53*256  +       SRAMBank3 + SyncLineC,
                        890 ; cbar.c    342         53*256  +       SRAMBank4 + SyncLineC,
                        891 ; cbar.c    343         38*256  +                             SyncLineC,
                        892 ; cbar.c    344         2*256           +                                                       S
                            yncLineB,
                        893 ; cbar.c    345 
                        894 ; cbar.c    346         23*256  +                                                       SyncLineA
                            ,
                        895 ; cbar.c    347         38*256  +                   SyncLineD,
                        896 ; cbar.c    348         53*256  +       SRAMBank1 + SyncLineD,
                        897 ; cbar.c    349         53*256  +       SRAMBank2 + SyncLineD,
                        898 ; cbar.c    350         53*256  +       SRAMBank3 + SyncLineD,
                        899 ; cbar.c    351         53*256  +       SRAMBank4 + SyncLineD,
                        900 ; cbar.c    352         38*256  +                                 SyncLineD,
                        901 ; cbar.c    353         2*256           +                                                       S
                            yncLineA,
                        902 ; cbar.c    354         0
                        903 ; cbar.c    355 };
                        904 ; cbar.c    356 
                        905 ; cbar.c    357 _ROM_ UI NTSCBlackTable[] =
0001F4 0000             906         DW      00000H
                        909         PUBLIC  _NTSCBlackTable
                        910         ALIGN   1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  10

ADDR   CODE            LINE SOURCELINE
0001F6                  911 _NTSCBlackTable:
0001F6 01030010027A02   912         DW      00301H,01000H,07A02H,07A02H,00200H,01101H,07A03H,07903H
       7A00020111037A       
       0379                 
                        913 ; cbar.c    358 {
                        914 ; cbar.c    359         3*256   +                                                       SyncLineA
                            ,
                        915 ; cbar.c    360         16*256  +                                                       SyncLineB
                            ,
                        916 ; cbar.c    361         122*256 +                                                       SyncLineC
                            ,
                        917 ; cbar.c    362         122*256 +                                                       SyncLineC
                            ,
                        918 ; cbar.c    363 
                        919 ; cbar.c    364         2*256           +                                                       S
                            yncLineB,
                        920 ; cbar.c    365         17*256  +                                                       SyncLineA
                            ,
                        921 ; cbar.c    366         122*256 +                                                       SyncLineD
                            ,
                        922 ; cbar.c    367         121*256 +                                                       SyncLineD
                            ,
                        923 ; cbar.c    368         0
                        924 ; cbar.c    369 };
                        925 ; cbar.c    370 
                        926 ; cbar.c    371 _ROM_ UI NTSCFullFieldTable[] =
000206 0000             927         DW      00000H
                        930         PUBLIC  _NTSCFullFieldTable
                        931         ALIGN   1
000208                  932 _NTSCFullFieldTable:
000208 01030010127A12   933         DW      00301H,01000H,07A12H,07A12H,00200H,01101H,07A13H,07913H
       7A00020111137A       
       1379                 
                        934 ; cbar.c    372 {
                        935 ; cbar.c    373         3*256   +                                                       SyncLineA
                            ,
                        936 ; cbar.c    374         16*256  +                                                       SyncLineB
                            ,
                        937 ; cbar.c    375         122*256 +       SRAMBank1       +       SyncLineC,
                        938 ; cbar.c    376         122*256 +       SRAMBank1 + SyncLineC,
                        939 ; cbar.c    377 
                        940 ; cbar.c    378         2*256           +                                                       S
                            yncLineB,
                        941 ; cbar.c    379         17*256  +                                                       SyncLineA
                            ,
                        942 ; cbar.c    380         122*256 +       SRAMBank1 + SyncLineD,
                        943 ; cbar.c    381         121*256 +       SRAMBank1 + SyncLineD,
                        944 ; cbar.c    382         0
                        945 ; cbar.c    383 };
                        946 ; cbar.c    384 
                        947 ; cbar.c    385 _ROM_ UI SMPTECBarTable[] =
000218 0000             948         DW      00000H
                        951         PUBLIC  _SMPTECBarTable
                        952         ALIGN   1
00021A                  953 _SMPTECBarTable:
00021A 0103001012A416   954         DW      00301H,01000H,0A412H,01316H,03D1AH,00200H,01101H,0A313H
       131A3D00020111       
       13A3                 
                        955 ; cbar.c    386 {
                        956 ; cbar.c    387         3*256   +                                                       SyncLineA
                            ,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  11

ADDR   CODE            LINE SOURCELINE
                        957 ; cbar.c    388         16*256  +                                                       SyncLineB
                            ,
                        958 ; cbar.c    389         164*256 +       SRAMBank1 + SyncLineC,
                        959 ; cbar.c    390         19*256  +       SRAMBank2 + SyncLineC,
                        960 ; cbar.c    391         61*256  +       SRAMBank3 + SyncLineC,
                        961 ; cbar.c    392 
                        962 ; cbar.c    393         2*256           +                                                       S
                            yncLineB,
                        963 ; cbar.c    394         17*256  +                                                       SyncLineA
                            ,
                        964 ; cbar.c    395         163*256 +       SRAMBank1 + SyncLineD,
                        965 ; cbar.c    396         19*256  +       SRAMBank2 + SyncLineD,
                        966 ; cbar.c    397         61*256  +       SRAMBank3 + SyncLineD,
                        967 ; cbar.c    398         0
                        968 ; cbar.c    399 };
                        969 ; cbar.c    400 
                        970 ; cbar.c    401 _ROM_ UI NTSCWindowTable[] =
00022A 17131B3D0000     971         DW      01317H,03D1BH,00000H
                        974         PUBLIC  _NTSCWindowTable
                        975         ALIGN   1
000230                  976 _NTSCWindowTable:
000230 01030010021E12   977         DW      00301H,01000H,01E02H,00112H,00116H,00102H,0011AH,01D02H
       01160102011A01       
       021D                 
000240 1E77023E000201   978         DW      0771EH,03E02H,00200H,01101H,01D03H,00113H,00117H,00103H
       11031D13011701       
       0301                 
                        979 ; cbar.c    402 {
                        980 ; cbar.c    403         3*256   +                                                       SyncLineA
                            ,
                        981 ; cbar.c    404         16*256  +                                                       SyncLineB
                            ,
                        982 ; cbar.c    405         30*256  +                               SyncLineC,
                        983 ; cbar.c    406         1*256           +       SRAMBank1 + SyncLineC,
                        984 ; cbar.c    407         1*256           +       SRAMBank2 + SyncLineC,
                        985 ; cbar.c    408         1*256           +                           SyncLineC,
                        986 ; cbar.c    409         1*256           +       SRAMBank3 + SyncLineC,
                        987 ; cbar.c    410         29*256  +                                       SyncLineC,
                        988 ; cbar.c    411         119*256 +       SRAMBank4 + SyncLineC,
                        989 ; cbar.c    412         62*256  +                               SyncLineC,
                        990 ; cbar.c    413 
                        991 ; cbar.c    414         2*256           +                                                       S
                            yncLineB,
                        992 ; cbar.c    415         17*256  +                                                       SyncLineA
                            ,
                        993 ; cbar.c    416         29*256  +                               SyncLineD,
                        994 ; cbar.c    417         1*256           +       SRAMBank1 + SyncLineD,
                        995 ; cbar.c    418         1*256           +       SRAMBank2 + SyncLineD,
                        996 ; cbar.c    419         1*256           +                             SyncLineD,
                        997 ; cbar.c    420         1*256           +       SRAMBank3 + SyncLineD,
                        998 ; cbar.c    421         29*256  +                         SyncLineD,
                        999 ; cbar.c    422         119*256 +       SRAMBank4 + SyncLineD,
                       1000 ; cbar.c    423         62*256  +                           SyncLineD,
                       1001 ; cbar.c    424         0
                       1002 ; cbar.c    425 };
                       1003 ; cbar.c    426 
                       1004 ; cbar.c    427 _ROM_ UI NTSCCheckfieldTable[] =
000250 1B01031D1F7703  1005         DW      0011BH,01D03H,0771FH,03E03H,00000H
       3E0000               
                       1008         PUBLIC  _NTSCCheckfieldTable
                       1009         ALIGN   1
00025A                 1010 _NTSCCheckfieldTable:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  12

ADDR   CODE            LINE SOURCELINE
00025A 01030010120116  1011         DW      00301H,01000H,00112H,07916H,07A1AH,00200H,01101H,07A17H
       791A7A00020111       
       177A                 
                       1012 ; cbar.c    428 {
                       1013 ; cbar.c    429         3*256   +                                                       SyncLineA
                            ,
                       1014 ; cbar.c    430         16*256  +                                                       SyncLineB
                            ,
                       1015 ; cbar.c    431         1*256           +       SRAMBank1 + SyncLineC,
                       1016 ; cbar.c    432         121*256 +       SRAMBank2 + SyncLineC,
                       1017 ; cbar.c    433         122*256 +       SRAMBank3 + SyncLineC,
                       1018 ; cbar.c    434 
                       1019 ; cbar.c    435         2*256           +                                                       S
                            yncLineB,
                       1020 ; cbar.c    436         17*256  +                                                       SyncLineA
                            ,
                       1021 ; cbar.c    437         122*256 +       SRAMBank2 + SyncLineD,
                       1022 ; cbar.c    438         121*256 +       SRAMBank3 + SyncLineD,
                       1023 ; cbar.c    439         0
                       1024 ; cbar.c    440 };
                       1025 ; cbar.c    441 
                       1026 ; cbar.c    442 _ROM_ UI NTSCCrosshatchTable[] =
00026A 1B790000        1027         DW      0791BH,00000H
                       1030         PUBLIC  _NTSCCrosshatchTable
                       1031         ALIGN   1
00026E                 1032 _NTSCCrosshatchTable:
00026E 01030010120916  1033         DW      00301H,01000H,00912H,00116H,01012H,00116H,01112H,00116H
       01121016011211       
       1601                 
00027E 12101601121116  1034         DW      01012H,00116H,01112H,00116H,01012H,00116H,01112H,00116H
       01121016011211       
       1601                 
00028E 12101601121116  1035         DW      01012H,00116H,01112H,00116H,01012H,00116H,01112H,00116H
       01121016011211       
       1601                 
00029E 12101601121116  1036         DW      01012H,00116H,01112H,00116H,01012H,00116H,00712H,00200H
       01121016011207       
       0002                 
0002AE 01111308170113  1037         DW      01101H,00813H,00117H,01113H,00117H,01013H,00117H,01113H
       11170113101701       
       1311                 
0002BE 17011310170113  1038         DW      00117H,01013H,00117H,01113H,00117H,01013H,00117H,01113H
       11170113101701       
       1311                 
0002CE 17011310170113  1039         DW      00117H,01013H,00117H,01113H,00117H,01013H,00117H,01113H
       11170113101701       
       1311                 
                       1040 ; cbar.c    443 {
                       1041 ; cbar.c    444         3*256   +                                                       SyncLineA
                            ,
                       1042 ; cbar.c    445         16*256  +                                                       SyncLineB
                            ,
                       1043 ; cbar.c    446         9*256           +       SRAMBank1 + SyncLineC,
                       1044 ; cbar.c    447         1*256           +       SRAMBank2 + SyncLineC,
                       1045 ; cbar.c    448         16*256  +       SRAMBank1 + SyncLineC,
                       1046 ; cbar.c    449         1*256           +       SRAMBank2 + SyncLineC,
                       1047 ; cbar.c    450         17*256  +       SRAMBank1 + SyncLineC,
                       1048 ; cbar.c    451         1*256           +       SRAMBank2 + SyncLineC,
                       1049 ; cbar.c    452         16*256  +       SRAMBank1 + SyncLineC,
                       1050 ; cbar.c    453         1*256           +       SRAMBank2 + SyncLineC,
                       1051 ; cbar.c    454         17*256  +       SRAMBank1 + SyncLineC,
                       1052 ; cbar.c    455         1*256           +       SRAMBank2 + SyncLineC,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  13

ADDR   CODE            LINE SOURCELINE
                       1053 ; cbar.c    456         16*256  +       SRAMBank1 + SyncLineC,
                       1054 ; cbar.c    457         1*256           +       SRAMBank2 + SyncLineC,
                       1055 ; cbar.c    458         17*256  +       SRAMBank1 + SyncLineC,
                       1056 ; cbar.c    459         1*256           +       SRAMBank2 + SyncLineC,
                       1057 ; cbar.c    460         16*256  +       SRAMBank1 + SyncLineC,
                       1058 ; cbar.c    461         1*256           +       SRAMBank2 + SyncLineC,
                       1059 ; cbar.c    462         17*256  +       SRAMBank1 + SyncLineC,
                       1060 ; cbar.c    463         1*256           +       SRAMBank2 + SyncLineC,
                       1061 ; cbar.c    464         16*256  +       SRAMBank1 + SyncLineC,
                       1062 ; cbar.c    465         1*256           +       SRAMBank2 + SyncLineC,
                       1063 ; cbar.c    466         17*256  +       SRAMBank1 + SyncLineC,
                       1064 ; cbar.c    467         1*256           +       SRAMBank2 + SyncLineC,
                       1065 ; cbar.c    468         16*256  +       SRAMBank1 + SyncLineC,
                       1066 ; cbar.c    469         1*256           +       SRAMBank2 + SyncLineC,
                       1067 ; cbar.c    470         17*256  +       SRAMBank1 + SyncLineC,
                       1068 ; cbar.c    471         1*256           +       SRAMBank2 + SyncLineC,
                       1069 ; cbar.c    472         16*256  +       SRAMBank1 + SyncLineC,
                       1070 ; cbar.c    473         1*256           +       SRAMBank2 + SyncLineC,
                       1071 ; cbar.c    474         7*256           +       SRAMBank1 + SyncLineC,
                       1072 ; cbar.c    475 
                       1073 ; cbar.c    476         2*256           +                                                       S
                            yncLineB,
                       1074 ; cbar.c    477         17*256  +                                                       SyncLineA
                            ,
                       1075 ; cbar.c    478         8*256           +       SRAMBank1 + SyncLineD,
                       1076 ; cbar.c    479         1*256           +       SRAMBank2 + SyncLineD,
                       1077 ; cbar.c    480         17*256  +       SRAMBank1 + SyncLineD,
                       1078 ; cbar.c    481         1*256           +       SRAMBank2 + SyncLineD,
                       1079 ; cbar.c    482         16*256  +       SRAMBank1 + SyncLineD,
                       1080 ; cbar.c    483         1*256           +       SRAMBank2 + SyncLineD,
                       1081 ; cbar.c    484         17*256  +       SRAMBank1 + SyncLineD,
                       1082 ; cbar.c    485         1*256           +       SRAMBank2 + SyncLineD,
                       1083 ; cbar.c    486         16*256  +       SRAMBank1 + SyncLineD,
                       1084 ; cbar.c    487         1*256           +       SRAMBank2 + SyncLineD,
                       1085 ; cbar.c    488         17*256  +       SRAMBank1 + SyncLineD,
                       1086 ; cbar.c    489         1*256           +       SRAMBank2 + SyncLineD,
                       1087 ; cbar.c    490         16*256  +       SRAMBank1 + SyncLineD,
                       1088 ; cbar.c    491         1*256           +       SRAMBank2 + SyncLineD,
                       1089 ; cbar.c    492         17*256  +       SRAMBank1 + SyncLineD,
                       1090 ; cbar.c    493         1*256           +       SRAMBank2 + SyncLineD,
                       1091 ; cbar.c    494         16*256  +       SRAMBank1 + SyncLineD,
                       1092 ; cbar.c    495         1*256           +       SRAMBank2 + SyncLineD,
                       1093 ; cbar.c    496         17*256  +       SRAMBank1 + SyncLineD,
                       1094 ; cbar.c    497         1*256           +       SRAMBank2 + SyncLineD,
                       1095 ; cbar.c    498         16*256  +       SRAMBank1 + SyncLineD,
                       1096 ; cbar.c    499         1*256           +       SRAMBank2 + SyncLineD,
                       1097 ; cbar.c    500         17*256  +       SRAMBank1 + SyncLineD,
                       1098 ; cbar.c    501         1*256           +       SRAMBank2 + SyncLineD,
                       1099 ; cbar.c    502         16*256  +       SRAMBank1 + SyncLineD,
                       1100 ; cbar.c    503         1*256           +       SRAMBank2 + SyncLineD,
                       1101 ; cbar.c    504         17*256  +       SRAMBank1 + SyncLineD,
                       1102 ; cbar.c    505         1*256           +       SRAMBank2 + SyncLineD,
                       1103 ; cbar.c    506         6*256           +       SRAMBank1 + SyncLineD,
                       1104 ; cbar.c    507         0
                       1105 ; cbar.c    508 };
                       1106 ; cbar.c    509 
                       1107 ; cbar.c    510 _ROM_ UI NTSCPLUGETable[] =
0002DE 17011310170113  1108         DW      00117H,01013H,00117H,01113H,00117H,00613H,00000H
       11170113060000       
                       1111         PUBLIC  _NTSCPLUGETable
                       1112         ALIGN   1
0002EC                 1113 _NTSCPLUGETable:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  14

ADDR   CODE            LINE SOURCELINE
0002EC 01030010023512  1114         DW      00301H,01000H,03502H,03812H,01316H,0131AH,0131EH,04E02H
       3816131A131E13       
       024E                 
0002FC 00020111033413  1115         DW      00200H,01101H,03403H,03813H,01317H,0131BH,0131FH,04E03H
       3817131B131F13       
       034E                 
                       1116 ; cbar.c    511 {
                       1117 ; cbar.c    512         3*256   +                                                       SyncLineA
                            ,
                       1118 ; cbar.c    513         16*256  +                                                       SyncLineB
                            ,
                       1119 ; cbar.c    514         53*256  +                               SyncLineC,
                       1120 ; cbar.c    515         56*256  +       SRAMBank1 + SyncLineC,
                       1121 ; cbar.c    516         19*256  +       SRAMBank2 + SyncLineC,
                       1122 ; cbar.c    517         19*256  +       SRAMBank3 + SyncLineC,
                       1123 ; cbar.c    518         19*256  +       SRAMBank4 + SyncLineC,
                       1124 ; cbar.c    519         78*256  +                           SyncLineC,
                       1125 ; cbar.c    520 
                       1126 ; cbar.c    521         2*256           +                                                       S
                            yncLineB,
                       1127 ; cbar.c    522         17*256  +                                                       SyncLineA
                            ,
                       1128 ; cbar.c    523         52*256  +                           SyncLineD,
                       1129 ; cbar.c    524         56*256  +       SRAMBank1 + SyncLineD,
                       1130 ; cbar.c    525         19*256  +       SRAMBank2 + SyncLineD,
                       1131 ; cbar.c    526         19*256  +       SRAMBank3 + SyncLineD,
                       1132 ; cbar.c    527         19*256  +       SRAMBank4 + SyncLineD,
                       1133 ; cbar.c    528         78*256  +                               SyncLineD,
                       1134 ; cbar.c    529         0
                       1135 ; cbar.c    530 };
                       1136 ; cbar.c    531                                                                                  
                                                                                                                             
                                    // Signal array defined in ROM
                       1137 ; cbar.c    532                                                                                  
                                                                                                                             
                                    //  (size/start is specified in BYTES
                       1138 ; cbar.c    533                                                                                  
                                                                                                                             
                                    //  in config.h)
                       1139 ; cbar.c    534 _ROM_ int VideoSignalArray[SizeOfCBVideoCode/2] _at( StartOfCBVideoCode);
                       1140 ; cbar.c    535 _ROM_ int SoundSignalArray[SizeOfEmbAudioCode/2] _at( StartOfEmbAudioCode);
                       1141 ; cbar.c    536 
                       1142 ; cbar.c    537 volatile int SRAMVideoPort _at( 0x44000);                       // Port defined i
                            n PLD
                       1143 ; cbar.c    538 volatile int SRAMSoundPort _at( 0x40000);                       // Port defined i
                            n PLD
                       1144 ; cbar.c    539 volatile int StatusPort _at( 0x6a000);                          // Port defined i
                            n PLD
                       1145 ; cbar.c    540 volatile int HOffsetPort _at( 0x6a004);                         // Port defined i
                            n PLD
                       1146 ; cbar.c    541 volatile int ChromaGainPort _at( 0x6a008);      // Port defined in PLD
                       1147 ; cbar.c    542 
                       1148 ; cbar.c    543 volatile _near UI TimeTickCounter;
                       1149 ; cbar.c    544 volatile _near int LineOffset;
                       1150 ; cbar.c    545 
                       1151 ; cbar.c    546 volatile int PhaseOffset;
                       1152 ; cbar.c    547 
                       1153 ; cbar.c    548 CBObject CBSetup;
                       1154 ; cbar.c    549 
                       1155 ; cbar.c    550 static _near UI Status _at( 0x120);
                       1156 ; cbar.c    551 
                       1157 ; cbar.c    552 static _ROM_  UI * _near TablePtr _at( 0x122);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  15

ADDR   CODE            LINE SOURCELINE
                       1158 ; cbar.c    553 static _ROM_  UI *newTablePtr;
                       1159 ; cbar.c    554 
                       1160 ; cbar.c    555 static _near UI LineCnt _at( 0x126);
                       1161 ; cbar.c    556 static _near UC FrameCnt _at( 0x128);
                       1162 ; cbar.c    557 
                       1163 ; cbar.c    558 static _near UC SyncLineCnt _at( 0x129);
                       1164 ; cbar.c    559 static _near UC SyncLinePtr _at( 0x12A);
                       1165 ; cbar.c    560                                                                                  
                                                                             
                       1166 ; cbar.c    561 static _near UC SoundFrameCnt _at( 0x12B);
                       1167 ; cbar.c    562 static _near UC SoundCnt _at( 0x12C);
                       1168 ; cbar.c    563 static _near UC SoundPtr _at( 0x12D);
                       1169 ; cbar.c    564 static _near UC SoundPtrMax _at( 0x12E);
                       1170 ; cbar.c    565 
                       1171 ; cbar.c    566 static char Blanking, NewPattern, SoundEnable;
                       1172 ; cbar.c    567 
                       1173 ; cbar.c    568 /**************************************************************************/
                       1174 ; cbar.c    569 /* WriteCBGain                                                                   
                                                                                                                             
                                                               CBAR.C */
                       1175 ; cbar.c    570 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1176 ; cbar.c    571 /* Author:       Kim Engedahl, DEV, 000504                                       
                                                                                                                             
                                    */
                       1177 ; cbar.c    572 /* Revised:      000606, KEn, DEV                                                
                                                                                                                             
                                            */
                       1178 ; cbar.c    573 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1179 ; cbar.c    574 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       1180 ; cbar.c    575 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       1181 ; cbar.c    576 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       1182 ; cbar.c    577 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       1183 ; cbar.c    578 /**************************************************************************/
                       1184 ; cbar.c    579 int WriteCBGain( UC gain)
                       1185 ; cbar.c    580 {
00030C 0000            1186         DW      00000H
000000                 1187 CBAR_PR SEGMENT HCODE
000000                 1188         RSEG    CBAR_PR
                       1189         ALIGN   1
                       1191         PUBLIC  _WriteCBGain
000000                 1192 _WriteCBGain:
000000 A97E            1196         ADDS.W  R7,#0EH
                       1200 ; cbar.c    581         return( Write_AD8402( CBPotMeter, 0, gain));
000002 911800          1202         MOV.B   R0H,#00H
000005 8121            1203         MOV.B   R1L,R0H
000007 820F            1204         MOV.B   [R7],R0L
000009 8102            1207         MOV.B   R0L,R1L
00000B 8227            1208         MOV.B   R1L,[R7]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  16

ADDR   CODE            LINE SOURCELINE
                       1209         CALL    _Write_AD8402
00000D C4rrrrrr       +1209 ;       FCALL   _Write_AD8402
                       1213 ; cbar.c    582 }
000011 A972            1215         ADDS.W  R7,#02H
000013 D680            1217         RET
                       1219 ; cbar.c    583 
                       1220 ; cbar.c    584 /**************************************************************************/
                       1221 ; cbar.c    585 /* WriteCBChromaGain                                                             
                                                                                                                             
                                               CBAR.C */
                       1222 ; cbar.c    586 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1223 ; cbar.c    587 /* Author:       Kim Engedahl, DEV, 000504                                       
                                                                                                                             
                                    */
                       1224 ; cbar.c    588 /* Revised:      000603, KEn, DEV                                                
                                                                                                                             
                                            */
                       1225 ; cbar.c    589 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1226 ; cbar.c    590 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       1227 ; cbar.c    591 /* Remarks:      The resistor at V118 has been swapped ie. bit 0 is bit 3 etc.*/
                       1228 ; cbar.c    592 /*                                       The conversion is done in SW instead of 
                            correcting the parts    */
                       1229 ; cbar.c    593 /*                                       list.                                   
                                                                                                                             
                                                                                                                    */
                       1230 ; cbar.c    594 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       1231 ; cbar.c    595 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       1232 ; cbar.c    596 /**************************************************************************/
                       1233 ; cbar.c    597 int WriteCBChromaGain( UC gain)
                       1234 ; cbar.c    598 {
000015 00              1235         ALIGN   1
                       1237         PUBLIC  _WriteCBChromaGain
000016                 1238 _WriteCBChromaGain:
                       1246 ; cbar.c    599         UC tmp = 0;
000016 911800          1248         MOV.B   R0H,#00H
                       1250 ; cbar.c    600 
                       1251 ; cbar.c    601         // gain bit 1 = bit4
                       1252 ; cbar.c    602         // gain bit 2 = bit3
                       1253 ; cbar.c    603         // gain bit 3 = bit2
                       1254 ; cbar.c    604         // gain bit 4 = bit1
                       1255 ; cbar.c    605 
                       1256 ; cbar.c    606         if ( gain & 0x01)
000019 8120            1258         MOV.B   R1L,R0L
00001B 912501          1259         AND.B   R1L,#01H
00001E F302            1260         BEQ     _3
                       1261 ; cbar.c    607                 tmp += 0x08;
000020 911808          1263         MOV.B   R0H,#08H
000024                 1266 _3:
                       1267 ; cbar.c    608 
                       1268 ; cbar.c    609         if ( gain & 0x02)
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  17

ADDR   CODE            LINE SOURCELINE
000024 8120            1270         MOV.B   R1L,R0L
000026 912502          1271         AND.B   R1L,#02H
000029 F302            1272         BEQ     _4
                       1273 ; cbar.c    610                 tmp += 0x04;
00002B A114            1275         ADDS.B  R0H,#04H
00002E                 1278 _4:
                       1279 ; cbar.c    611 
                       1280 ; cbar.c    612         if ( gain & 0x04)
00002E 912804          1282         MOV.B   R1L,#04H
000031 5120            1283         AND.B   R1L,R0L
000033 F302            1284         BEQ     _5
                       1285 ; cbar.c    613                 tmp += 0x02;
000035 A112            1287         ADDS.B  R0H,#02H
000038                 1290 _5:
                       1291 ; cbar.c    614 
                       1292 ; cbar.c    615         if ( gain & 0x08)
000038 910508          1294         AND.B   R0L,#08H
00003B F302            1296         BEQ     _6
                       1297 ; cbar.c    616                 tmp += 0x01;
00003D A111            1299         ADDS.B  R0H,#01H
000040                 1302 _6:
                       1303 ; cbar.c    617 
                       1304 ; cbar.c    618         ChromaGainPort = tmp;
000040 8101            1306         MOV.B   R0L,R0H
000042 B110            1307         MOVS.B  R0H,#00H
000044 96484206        1309         MOV.B   ES,#SEG( _ChromaGainPort )
000048 9918A008        1310         MOV.W   R1,#SOF( _ChromaGainPort )
00004C 8A09            1311         MOV.W   [R1],R0
                       1312 ; cbar.c    619 
                       1313 ; cbar.c    620         return( OK);
00004E 9908FFFF        1315         MOV.W   R0,#0FFFFH
                       1316 ; cbar.c    621 }
000052 D680            1318         RET
                       1320 ; cbar.c    622 
                       1321 ; cbar.c    623 /**************************************************************************/
                       1322 ; cbar.c    624 /* SRAMVideoLoad                                                                 
                                                                                                     CBAR.C */
                       1323 ; cbar.c    625 /*                                                                               
                                                                                                                             
                                              */
                       1324 ; cbar.c    626 /* Author:       Kim Engedahl, DEV, 000324                                       
                                                                                      */
                       1325 ; cbar.c    627 /* Revised:      000603, KEn, DEV                                                
                                                                                      */
                       1326 ; cbar.c    628 /*                                                                               
                                                                                                                             
                                              */
                       1327 ; cbar.c    629 /* Function: Copy video data to video RAM                                        
                                                                              */
                       1328 ; cbar.c    630 /* Remarks:      S5,S4,S3 and S2 should be kept at ZERO while loading AND the */
                       1329 ; cbar.c    631 /*                                       interrupt system should NOT clear the PS
                             bit.                             */
                       1330 ; cbar.c    632 /* Returns:                                                                      
                                                                                                                             
                             */
                       1331 ; cbar.c    633 /* Updates:                                                                      
                                                                                                                             
                             */
                       1332 ; cbar.c    634 /**************************************************************************/
                       1333 ; cbar.c    635 int SRAMVideoLoad( UC signal, UC bank)
                       1334 ; cbar.c    636 {
                       1335         ALIGN   1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  18

ADDR   CODE            LINE SOURCELINE
                       1337         PUBLIC  _SRAMVideoLoad
000054                 1338 _SRAMVideoLoad:
000054 0F30            1342         PUSH.W  R4, R5
000056 A978            1344         ADDS.W  R7,#08H
                       1359 ; cbar.c    637         volatile int *VideoDstPtr;
                       1360 ; cbar.c    638         _ROM_  int *VideoSrcPtr;
                       1361 ; cbar.c    639         int i;
                       1362 ; cbar.c    640 
                       1363 ; cbar.c    641         Status |= PS;                                                            
                                            // Set PS bit while loading
000058 9E16201000      1365         OR.W    _Status,#01000H
                       1366 ; cbar.c    642         StatusPort = Status;
00005D 96484206        1368         MOV.B   ES,#SEG( _StatusPort )
000061 9918A000        1369         MOV.W   R1,#SOF( _StatusPort )
000065 A81120          1370         MOV.W   [R1],_Status
                       1371 ; cbar.c    643                                                                                  
                                                                                                                             
                                            
                       1372 ; cbar.c    644         VideoDstPtr = &SRAMVideoPort + (( bank/4)-4) * 0x0800;
000068 D012            1374         LSR.B   R0H,#02H
00006A 8121            1376         MOV.B   R1L,R0H
00006C B130            1377         MOVS.B  R1H,#00H
00006E D91C            1378         ASL.W   R1,#0CH
000070 8921            1379         MOV.W   R2,R1
000072 B930            1380         MOVS.W  R3,#00H
000074 99580004        1381         MOV.W   R5,#SEG( _SRAMVideoPort+-16384 )
000078 99480000        1382         MOV.W   R4,#SOF( _SRAMVideoPort+-16384 )
00007C 0942            1383         ADD.W   R4,R2
00007E 8C5F06          1384         MOV.W   [R7+6],R5
000081 8C4F04          1385         MOV.W   [R7+4],R4
                       1386 ; cbar.c    645         VideoSrcPtr = &VideoSignalArray[ 0x800 * (long)signal];
000084 B110            1388         MOVS.B  R0H,#00H
000086 B910            1389         MOVS.W  R1,#00H
000088 DD0C            1391         ASL.D   R0,#0CH
00008A 99380005        1392         MOV.W   R3,#SEG( _VideoSignalArray )
00008E 99280000        1393         MOV.W   R2,#SOF( _VideoSignalArray )
000092 0920            1394         ADD.W   R2,R0
000094 1931            1395         ADDC.W  R3,R1
                       1397 ; cbar.c    646 
                       1398 ; cbar.c    647         for ( i = 0; i < 2048; i++)
000096 B900            1400         MOV.W   R0,#00H
000098                 1402 _7:
                       1403 ; cbar.c    648                 *VideoDstPtr++ = *VideoSrcPtr++;
000098 8953            1405         MOV.W   R5,R3
00009A 8942            1406         MOV.W   R4,R2
00009C 8C5F02          1407         MOV.W   [R7+2],R5
00009F 8A4F            1408         MOV.W   [R7],R4
0000A1 86AC43          1409         MOV.B   CS,R5L
0000A4 8854            1410         MOVC.W  R5,[R4+]
0000A6 8C3706          1413         MOV.W   R3,[R7+6]
0000A9 8C2704          1414         MOV.W   R2,[R7+4]
0000AC 866C42          1415         MOV.B   ES,R3L
0000AF 8A5A            1416         MOV.W   [R2],R5
0000B1 8C3702          1417         MOV.W   R3,[R7+2]
0000B4 8A27            1418         MOV.W   R2,[R7]
0000B6 99200002        1419         ADD.W   R2,#02H
0000BA 99310000        1420         ADDC.W  R3,#00H
0000BE 9C70040002      1425         ADD.W   [R7+4],#02H
0000C3 A901            1427         ADDS.W  R0,#01H
0000C5 99040800        1430         CMP.W   R0,#0800H
0000C9 FBE7            1431         BLT     _7
                       1432 ; cbar.c    649 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  19

ADDR   CODE            LINE SOURCELINE
                       1433 ; cbar.c    650         Status &= ~PS;                                                           
                                    // Clear PS bit again
0000CB 9E1520EFFF      1435         AND.W   _Status,#0EFFFH
                       1436 ; cbar.c    651         StatusPort = Status;
0000D0 96484206        1438         MOV.B   ES,#SEG( _StatusPort )
0000D4 9908A000        1439         MOV.W   R0,#SOF( _StatusPort )
0000D8 A80120          1440         MOV.W   [R0],_Status
                       1441 ; cbar.c    652 
                       1442 ; cbar.c    653         return( OK);
0000DB 9908FFFF        1444         MOV.W   R0,#0FFFFH
                       1446 ; cbar.c    654 }
0000DF 99700008        1448         ADD.W   R7,#08H
0000E3 2F30            1450         POP.W   R4, R5
0000E5 D680            1452         RET
                       1455 ; cbar.c    655 
                       1456 ; cbar.c    656 /**************************************************************************/
                       1457 ; cbar.c    657 /* SRAMSoundLoad                                                                 
                                                                                                CBAR.C */
                       1458 ; cbar.c    658 /*                                                                               
                                                                                                                             
                                              */
                       1459 ; cbar.c    659 /* Author:       Kim Engedahl, DEV, 000410                                       
                                                                                      */
                       1460 ; cbar.c    660 /* Revised:      000603, KEn, DEV                                                
                                                                                      */
                       1461 ; cbar.c    661 /*                                                                               
                                                                                                                             
                                              */
                       1462 ; cbar.c    662 /* Function: Copy sound data to sound RAM                                        
                                                                              */
                       1463 ; cbar.c    663 /* Remarks:                                                                      
                                                                                                                             
                             */
                       1464 ; cbar.c    664 /* Returns:                                                                      
                                                                                                                             
                             */
                       1465 ; cbar.c    665 /* Updates:                                                                      
                                                                                                                             
                             */
                       1466 ; cbar.c    666 /**************************************************************************/
                       1467 ; cbar.c    667 int SRAMSoundLoad( UC signal)
                       1468 ; cbar.c    668 {
0000E7 00              1469         ALIGN   1
                       1471         PUBLIC  _SRAMSoundLoad
0000E8                 1472 _SRAMSoundLoad:
0000E8 0F30            1476         PUSH.W  R4, R5
0000EA A978            1478         ADDS.W  R7,#08H
                       1487 ; cbar.c    669         volatile int *SoundDstPtr;
                       1488 ; cbar.c    670         _ROM_  int *SoundSrcPtr;
                       1489 ; cbar.c    671         int i;
                       1490 ; cbar.c    672 
                       1491 ; cbar.c    673         signal = ( signal == EmbAudioStereo1kHz);
0000EC 910402          1493         CMP.B   R0L,#02H
0000EF F203            1494         BNE     _10
0000F1 B101            1495         MOVS.B  R0L,#01H
0000F3 FE02            1496         BR      _12
0000F3 FE0200          1496         BR      _12
0000F6                 1497 _10:
0000F6 B100            1498         MOVS.B  R0L,#00H
0000F6 B100            1498         MOVS.B  R0L,#00H
0000F8                 1499 _12:
                       1502 ; cbar.c    674 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  20

ADDR   CODE            LINE SOURCELINE
                       1503 ; cbar.c    675         Status |= PS;                                                            
                                    // Set PS bit while loading
0000F8 9E16201000      1505         OR.W    _Status,#01000H
                       1506 ; cbar.c    676         StatusPort = Status;
0000FD 96484206        1508         MOV.B   ES,#SEG( _StatusPort )
000101 9918A000        1509         MOV.W   R1,#SOF( _StatusPort )
000105 A81120          1510         MOV.W   [R1],_Status
                       1511 ; cbar.c    677                                                                                  
                                                                                                                             
                            
                       1512 ; cbar.c    678         SoundDstPtr = &SRAMSoundPort;
000108 9D7800060004    1514         MOV.W   [R7+6],#SEG( _SRAMSoundPort )
00010E 9C78040000      1515         MOV.W   [R7+4],#SOF( _SRAMSoundPort )
                       1516 ; cbar.c    679         SoundSrcPtr = &SoundSignalArray[2304*signal];
000113 B110            1518         MOVS.B  R0H,#00H
000115 E9001200        1520         MULU.W  R0,#01200H
000119 B910            1521         MOVS.W  R1,#00H
00011B 99380004        1522         MOV.W   R3,#SEG( _SoundSignalArray )
00011F 9928A000        1523         MOV.W   R2,#SOF( _SoundSignalArray )
000123 0920            1524         ADD.W   R2,R0
000125 1931            1525         ADDC.W  R3,R1
                       1527 ; cbar.c    680 
                       1528 ; cbar.c    681         for ( i = 0; i < 2304; i++)
000127 B900            1530         MOV.W   R0,#00H
00012A                 1532 _9:
                       1533 ; cbar.c    682                 *SoundDstPtr++ = *SoundSrcPtr++;
00012A 8953            1535         MOV.W   R5,R3
00012C 8942            1536         MOV.W   R4,R2
00012E 8C5F02          1537         MOV.W   [R7+2],R5
000131 8A4F            1538         MOV.W   [R7],R4
000133 86AC43          1539         MOV.B   CS,R5L
000136 8854            1540         MOVC.W  R5,[R4+]
000138 8C3706          1543         MOV.W   R3,[R7+6]
00013B 8C2704          1544         MOV.W   R2,[R7+4]
00013E 866C42          1545         MOV.B   ES,R3L
000141 8A5A            1546         MOV.W   [R2],R5
000143 8C3702          1547         MOV.W   R3,[R7+2]
000146 8A27            1548         MOV.W   R2,[R7]
000148 99200002        1549         ADD.W   R2,#02H
00014C 99310000        1550         ADDC.W  R3,#00H
000150 9C70040002      1555         ADD.W   [R7+4],#02H
000155 A901            1557         ADDS.W  R0,#01H
000157 99040900        1560         CMP.W   R0,#0900H
00015B FBE7            1561         BLT     _9
                       1562 ; cbar.c    683 
                       1563 ; cbar.c    684         Status &= ~PS;                                                           
                                    // Clear PS bit again
00015D 9E1520EFFF      1565         AND.W   _Status,#0EFFFH
                       1566 ; cbar.c    685         StatusPort = Status;
000162 96484206        1568         MOV.B   ES,#SEG( _StatusPort )
000166 9908A000        1569         MOV.W   R0,#SOF( _StatusPort )
00016A A80120          1570         MOV.W   [R0],_Status
                       1571 ; cbar.c    686 
                       1572 ; cbar.c    687         return( OK);
00016D 9908FFFF        1574         MOV.W   R0,#0FFFFH
                       1576 ; cbar.c    688 }
000171 99700008        1578         ADD.W   R7,#08H
000175 2F30            1580         POP.W   R4, R5
000177 D680            1582         RET
                       1585 ; cbar.c    689 
                       1586 ; cbar.c    690 /**************************************************************************/
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  21

ADDR   CODE            LINE SOURCELINE
                       1587 ; cbar.c    691 /* CBLineInterrupt                                                               
                                                                                        CBAR.C */
                       1588 ; cbar.c    692 /*                                                                               
                                                                                                                             
                                              */
                       1589 ; cbar.c    693 /* Author:       Kim Engedahl, DEV, 000322                                       
                                                                                      */
                       1590 ; cbar.c    694 /* Revised:      000603, KEn, DEV                                                
                                                                                      */
                       1591 ; cbar.c    695 /*                                                                               
                                                                                                                             
                                              */
                       1592 ; cbar.c    696 /* Function:                                                                     
                                                                                                                      */
                       1593 ; cbar.c    697 /* Remarks:      Delayed field interrupt is synchronized to line ??/??           
                             */
                       1594 ; cbar.c    698 /* Returns:                                                                      
                                                                                                                             
                             */
                       1595 ; cbar.c    699 /* Updates:                                                                      
                                                                                                                             
                             */
                       1596 ; cbar.c    700 /**************************************************************************/
                       1597 ; cbar.c    701 void CBLineInterrupt( void)
                       1598 ; cbar.c    702 {
000179 00              1599         ALIGN   1
000000                 1601 CBAR_CLR_FA     SEGMENT HDATA INSEGMENT CLEAR
000000                 1602         RSEG    CBAR_CLR_FA
                       1603         ALIGN   1
000000                 1604 _14:    DS      2
   |  RESERVED             
000001
                       1605         PUBLIC  _CBLineInterrupt
00017A                 1606         RSEG    CBAR_PR
00017A                 1606         RSEG    CBAR_PR
00017A                 1607 _CBLineInterrupt:
                       1612 ; cbar.c    703   static UI tmp;
                       1613 ; cbar.c    704 
                       1614 ; cbar.c    705         if ( CBSetup.System < NTSC_US)
00017A 964842rr        1616         MOV.B   ES,#SEG( _CBSetup )
00017E 9908rrrr        1617         MOV.W   R0,#SOF( _CBSetup )
000182 8200            1618         MOV.B   R0L,[R0]
000184 910402          1619         CMP.B   R0L,#02H
                       1620         BCC     _24
000187 F102           +1620 ;       BCS     _LG_14
000189 D50089         +1620 ;       JMP.L   _24
000189 D50089         +1620 ;       JMP.L   _24
00018C                +1620 _LG_14:
                       1621 ; cbar.c    706         {
                       1622 ; cbar.c    707                 if ( TF0)                                                        
                                            // If delayed field interrupt...
00018C 082285          1624         MOV     C,0285H
00018F F018            1625         BCC     _15
                       1626 ; cbar.c    708                 {
                       1627 ; cbar.c    709                         TF0 = 0;                                                 
                                                    // Clear delayed field interrupt
000191 080285          1629         CLR     0285H
                       1630 ; cbar.c    710 
                       1631 ; cbar.c    711                         SyncLineCnt = 19;                                        
                                    // Next interrupt in 19 lines
000194 96182913        1633         MOV.B   _SyncLineCnt,#013H
                       1634 ; cbar.c    712                         SyncLinePtr = 0;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  22

ADDR   CODE            LINE SOURCELINE
000198 B6102A          1636         MOV.B   _SyncLinePtr,#00H
                       1637 ; cbar.c    713         
                       1638 ; cbar.c    714                         LineCnt = 3;
00019B BE1326          1640         MOV.W   _LineCnt,#03H
                       1641 ; cbar.c    715 
                       1642 ; cbar.c    716                         SoundCnt = 2;
00019E B6122C          1644         MOV.B   _SoundCnt,#02H
                       1645 ; cbar.c    717                         SoundPtr = 2;
0001A1 B6122D          1647         MOV.B   _SoundPtr,#02H
                       1648 ; cbar.c    718 
                       1649 ; cbar.c    719                         SoundPtrMax = 64;
0001A4 96182E40        1651         MOV.B   _SoundPtrMax,#040H
                       1652 ; cbar.c    720 
                       1653 ; cbar.c    721                         Status |= FIELD1;                                        
                                    // This is field 1 of 8
0001A8 9E16200200      1655         OR.W    _Status,#0200H
                       1656 ; cbar.c    722                         Status &= ~SYSSEL;                                      
0001AD 9E1520FFBF      1658         AND.W   _Status,#0FFBFH
                       1659 ; cbar.c    723                         StatusPort = Status;
0001B2 96484206        1661         MOV.B   ES,#SEG( _StatusPort )
0001B6 9908A000        1662         MOV.W   R0,#SOF( _StatusPort )
0001BA A80120          1663         MOV.W   [R0],_Status
                       1664 ; cbar.c    724 
                       1665 ; cbar.c    725                         return;
0001BD D680            1667         RET
                       1668 ; cbar.c    726                 }
0001C0                 1670 _15:
                       1671 ; cbar.c    727                 else
                       1672 ; cbar.c    728                 {
                       1673 ; cbar.c    729                         if ( Status & FIELD1)
0001C0 99080200        1675         MOV.W   R0,#0200H
0001C4 5E0120          1676         AND.W   R0,_Status
0001C7 F309            1677         BEQ     _16
                       1678 ; cbar.c    730                         {
                       1679 ; cbar.c    731                                 Status &= ~FIELD1;
0001C9 9E1520FDFF      1681         AND.W   _Status,#0FDFFH
                       1682 ; cbar.c    732                                 StatusPort = Status;
0001CE 96484206        1684         MOV.B   ES,#SEG( _StatusPort )
0001D2 9908A000        1685         MOV.W   R0,#SOF( _StatusPort )
0001D6 A80120          1686         MOV.W   [R0],_Status
                       1687 ; cbar.c    733                         }
0001DA                 1689 _16:
                       1690 ; cbar.c    734 
                       1691 ; cbar.c    735                         LineCnt++;
0001DA AE1126          1693         ADDS.W  _LineCnt,#01H
                       1694 ; cbar.c    736 
                       1695 ; cbar.c    737                         if ( CBSetup.System == PAL_PALID)
0001DD 964842rr        1697         MOV.B   ES,#SEG( _CBSetup )
0001E1 9908rrrr        1698         MOV.W   R0,#SOF( _CBSetup )
0001E5 8200            1699         MOV.B   R0L,[R0]
0001E7 910401          1700         CMP.B   R0L,#01H
0001EA F218            1701         BNE     _19
                       1702 ; cbar.c    738                         {
                       1703 ; cbar.c    739                                 if ( LineCnt == 6)                              /
                            / Prepare for line 7
0001EC 9E14260006      1705         CMP.W   _LineCnt,#06H
0001F1 F209            1706         BNE     _17
                       1707 ; cbar.c    740                                 {
                       1708 ; cbar.c    741                                         Status |= LINE7PULSE;
0001F3 9E16202000      1710         OR.W    _Status,#02000H
                       1711 ; cbar.c    742                                         StatusPort = Status;                    /
                            / Update status port
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  23

ADDR   CODE            LINE SOURCELINE
0001F8 96484206        1713         MOV.B   ES,#SEG( _StatusPort )
0001FC 9908A000        1714         MOV.W   R0,#SOF( _StatusPort )
000200 A80120          1715         MOV.W   [R0],_Status
                       1716 ; cbar.c    743                                 }
000204                 1718 _17:
                       1719 ; cbar.c    744 
                       1720 ; cbar.c    745                                 if ( LineCnt == 7)                              /
                            / Prepare for line 8
000204 9E14260007      1722         CMP.W   _LineCnt,#07H
000209 F209            1723         BNE     _19
                       1724 ; cbar.c    746                                 {
                       1725 ; cbar.c    747                                         Status &= ~LINE7PULSE;
00020B 9E1520DFFF      1727         AND.W   _Status,#0DFFFH
                       1728 ; cbar.c    748                                         StatusPort = Status;                    /
                            / Update status port
000210 96484206        1730         MOV.B   ES,#SEG( _StatusPort )
000214 9908A000        1731         MOV.W   R0,#SOF( _StatusPort )
000218 A80120          1732         MOV.W   [R0],_Status
                       1733 ; cbar.c    749                                 }
                       1734 ; cbar.c    750 
                       1735 ; cbar.c    751                         }               
00021C                 1737 _19:
                       1738 ; cbar.c    752 
                       1739 ; cbar.c    753                         if ( !--SoundCnt)
00021C A61F2C          1741         ADDS.B  _SoundCnt,#0FH
00021F 86012C          1742         MOV.B   R0L,_SoundCnt
                       1743         BNE     _38
000222 F302           +1743 ;       BEQ     _LG_26
000224 D500CD         +1743 ;       JMP.L   _38
000224 D500CD00       +1743 ;       JMP.L   _38
000228                +1743 _LG_26:
                       1744 ; cbar.c    754                         {
                       1745 ; cbar.c    755                                 if ( SoundPtr > SoundPtrMax)
000228 86012E          1747         MOV.B   R0L,_SoundPtrMax
00022B 46092D          1748         CMP.B   _SoundPtr,R0L
00022E F90B            1749         BL      _22
                       1750 ; cbar.c    756                                 {
                       1751 ; cbar.c    757                                         SoundPtr = 0;
000230 B6102D          1753         MOV.B   _SoundPtr,#00H
                       1754 ; cbar.c    758 
                       1755 ; cbar.c    759                                         if ( SoundPtrMax == 63)
000233 86092E          1757         MOV.B   _SoundPtrMax,R0L
000236 96142E3F        1758         CMP.B   _SoundPtrMax,#03FH
00023A F203            1759         BNE     _20
                       1760 ; cbar.c    760                                                 SoundPtrMax = 64;
00023C 96182E40        1762         MOV.B   _SoundPtrMax,#040H
000240 FE02            1763         BR      _22
000240 FE02            1763         BR      _22
000242                 1764 _20:
                       1765 ; cbar.c    761                                         else
                       1766 ; cbar.c    762                                                 SoundPtrMax = 63;
000242 96182E3F        1768         MOV.B   _SoundPtrMax,#03FH
                       1769 ; cbar.c    763                                 }
000246                 1771 _22:
                       1772 ; cbar.c    764                                 tmp = Sound625[SoundPtr++];     // Get sound info
                            rmation
000246 86012D          1774         MOV.B   R0L,_SoundPtr
000249 B110            1775         MOVS.B  R0H,#00H
00024B D901            1776         ASL.W   R0,#01H
00024D 8920            1777         MOV.W   R2,R0
00024F B930            1778         MOVS.W  R3,#00H
000251 9918rrrr        1779         MOV.W   R1,#SEG( _Sound625 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  24

ADDR   CODE            LINE SOURCELINE
000255 9908rrrr        1780         MOV.W   R0,#SOF( _Sound625 )
000259 0902            1781         ADD.W   R0,R2
00025B 1913            1782         ADDC.W  R1,R3
00025D 862C43          1783         MOV.B   CS,R1L
000260 8810            1784         MOVC.W  R1,[R0+]
000262 964842rr        1785         MOV.B   ES,#SEG( _14 )
000266 9908rrrr        1786         MOV.W   R0,#SOF( _14 )
00026A 8A18            1787         MOV.W   [R0],R1
00026C A6112D          1788         ADDS.B  _SoundPtr,#01H
                       1789 ; cbar.c    765                 
                       1790 ; cbar.c    766                                 Status &= ~SOUND;                                
                                    // Clear previous sound sample
00026F 9E1520FE7F      1792         AND.W   _Status,#0FE7FH
                       1793 ; cbar.c    767 
                       1794 ; cbar.c    768                                 if ( SoundEnable)                               /
                            / If embedded audio on..
000274 964842rr        1796         MOV.B   ES,#SEG( _SoundEnable )
000278 9908rrrr        1797         MOV.W   R0,#SOF( _SoundEnable )
00027C 8200            1798         MOV.B   R0L,[R0]
00027E F305            1799         BEQ     _23
                       1800 ; cbar.c    769                                         Status |= ( tmp & SOUND);       //  set s
                            ound samples
000280 99080180        1802         MOV.W   R0,#0180H
000284 5901            1803         AND.W   R0,R1
000286 6E0920          1804         OR.W    _Status,R0
000286 6E092000        1804         OR.W    _Status,R0
00028A                 1805 _23:
                       1806 ; cbar.c    770 
                       1807 ; cbar.c    771                                 SoundCnt = tmp & 0x0F;                  // Lines 
                            to next sound update
00028A 91250F          1809         AND.B   R1L,#0FH
00028D 86292C          1810         MOV.B   _SoundCnt,R1L
                       1811 ; cbar.c    772                                 StatusPort = Status;                            /
                            / Update status port
000290 96484206        1813         MOV.B   ES,#SEG( _StatusPort )
000294 9908A000        1814         MOV.W   R0,#SOF( _StatusPort )
000298 A80120          1815         MOV.W   [R0],_Status
                       1816 ; cbar.c    773                         }
                       1817 ; cbar.c    774                 }
                       1818 ; cbar.c    775         }
                       1820         BR      _38
00029B D50091         +1820         JMP.L   _38
00029B D50091         +1820         JMP.L   _38
00029E                 1821 _24:
                       1822 ; cbar.c    776         else
                       1823 ; cbar.c    777         {
                       1824 ; cbar.c    778                 if ( TF0)                                                        
                                            // If delayed field interrupt...
00029E 082285          1826         MOV     C,0285H
0002A1 F01E            1827         BCC     _26
                       1828 ; cbar.c    779                 {
                       1829 ; cbar.c    780                         TF0 = 0;                                                 
                                                    // Clear delayed field interrupt
0002A3 080285          1831         CLR     0285H
                       1832 ; cbar.c    781 
                       1833 ; cbar.c    782                         if ( FrameCnt > 9)
0002A6 96142809        1835         CMP.B   _FrameCnt,#09H
0002AA F903            1836         BL      _25
                       1837 ; cbar.c    783                         {
                       1838 ; cbar.c    784                                 FrameCnt = 1;
0002AC B61128          1840         MOV.B   _FrameCnt,#01H
                       1841 ; cbar.c    785                                 SoundFrameCnt = 1;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  25

ADDR   CODE            LINE SOURCELINE
0002AF B6112B          1843         MOV.B   _SoundFrameCnt,#01H
                       1844 ; cbar.c    786                         }
0002B2                 1846 _25:
                       1847 ; cbar.c    787 
                       1848 ; cbar.c    788                         SyncLineCnt = 12;                                        
                                                    // Next interrupt in 12 lines
0002B2 9618290C        1850         MOV.B   _SyncLineCnt,#0CH
                       1851 ; cbar.c    789                         SyncLinePtr = 1;
0002B6 B6112A          1853         MOV.B   _SyncLinePtr,#01H
                       1854 ; cbar.c    790 
                       1855 ; cbar.c    791                         LineCnt = 6;
0002B9 BE1626          1857         MOV.W   _LineCnt,#06H
                       1858 ; cbar.c    792 
                       1859 ; cbar.c    793                         SoundCnt = 2;
0002BC B6122C          1861         MOV.B   _SoundCnt,#02H
                       1862 ; cbar.c    794                         SoundPtr = 3;
0002BF B6132D          1864         MOV.B   _SoundPtr,#03H
                       1865 ; cbar.c    795                         SoundPtrMax = 47;
0002C2 96182E2F        1867         MOV.B   _SoundPtrMax,#02FH
                       1868 ; cbar.c    796 
                       1869 ; cbar.c    797                         Status |= FIELD1;                                        
                                                    // This is field 1 of 4
0002C6 9E16200200      1871         OR.W    _Status,#0200H
                       1872 ; cbar.c    798                         Status |= SYSSEL;
0002CB 9E16200040      1874         OR.W    _Status,#040H
                       1875 ; cbar.c    799                         StatusPort = Status;
0002D0 96484206        1877         MOV.B   ES,#SEG( _StatusPort )
0002D4 9908A000        1878         MOV.W   R0,#SOF( _StatusPort )
0002D8 A80120          1879         MOV.W   [R0],_Status
                       1880 ; cbar.c    800 
                       1881 ; cbar.c    801                         return;
0002DB D680            1883         RET
                       1884 ; cbar.c    802                 }
0002DE                 1886 _26:
                       1887 ; cbar.c    803                 else
                       1888 ; cbar.c    804                 {
                       1889 ; cbar.c    805                         if ( Status & FIELD1)
0002DE 99080200        1891         MOV.W   R0,#0200H
0002E2 5E0120          1892         AND.W   R0,_Status
0002E5 F309            1893         BEQ     _27
                       1894 ; cbar.c    806                         {
                       1895 ; cbar.c    807                                 Status &= ~FIELD1;      
0002E7 9E1520FDFF      1897         AND.W   _Status,#0FDFFH
                       1898 ; cbar.c    808                                 StatusPort = Status;
0002EC 96484206        1900         MOV.B   ES,#SEG( _StatusPort )
0002F0 9908A000        1901         MOV.W   R0,#SOF( _StatusPort )
0002F4 A80120          1902         MOV.W   [R0],_Status
                       1903 ; cbar.c    809                         }
0002F8                 1905 _27:
                       1906 ; cbar.c    810 
                       1907 ; cbar.c    811                         if ( ++LineCnt >= 525)
0002F8 AE1126          1909         ADDS.W  _LineCnt,#01H
0002FB 9E1426020D      1910         CMP.W   _LineCnt,#020DH
000300 F109            1911         BCS     _29
                       1912 ; cbar.c    812                         {
                       1913 ; cbar.c    813                                 FrameCnt++;
000302 A61128          1915         ADDS.B  _FrameCnt,#01H
                       1916 ; cbar.c    814                                 LineCnt = 0;
000305 BE1026          1918         MOV.W   _LineCnt,#00H
                       1919 ; cbar.c    815 
                       1920 ; cbar.c    816                                 if ( ++SoundFrameCnt > 5)
000308 A6112B          1922         ADDS.B  _SoundFrameCnt,#01H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  26

ADDR   CODE            LINE SOURCELINE
00030B 96142B05        1923         CMP.B   _SoundFrameCnt,#05H
00030F F902            1924         BL      _29
                       1925 ; cbar.c    817                                         SoundFrameCnt = 1;
000311 B6112B          1927         MOV.B   _SoundFrameCnt,#01H
                       1928 ; cbar.c    818                         }
000314                 1930 _29:
                       1931 ; cbar.c    819 
                       1932 ; cbar.c    820                         if ( !--SoundCnt)
000314 A61F2C          1934         ADDS.B  _SoundCnt,#0FH
000317 86012C          1935         MOV.B   R0L,_SoundCnt
00031A F252            1936         BNE     _38
                       1937 ; cbar.c    821                         {
                       1938 ; cbar.c    822                                 if ( SoundPtr > SoundPtrMax)
00031C 86012E          1940         MOV.B   R0L,_SoundPtrMax
00031F 46092D          1941         CMP.B   _SoundPtr,R0L
000322 F90B            1942         BL      _32
                       1943 ; cbar.c    823                                 {
                       1944 ; cbar.c    824                                         SoundPtr = 0;
000324 B6102D          1946         MOV.B   _SoundPtr,#00H
                       1947 ; cbar.c    825 
                       1948 ; cbar.c    826                                         if ( SoundPtrMax == 46)
000327 86092E          1950         MOV.B   _SoundPtrMax,R0L
00032A 96142E2E        1951         CMP.B   _SoundPtrMax,#02EH
00032E F203            1952         BNE     _30
                       1953 ; cbar.c    827                                                 SoundPtrMax = 47;
000330 96182E2F        1955         MOV.B   _SoundPtrMax,#02FH
000334 FE02            1956         BR      _32
000334 FE02            1956         BR      _32
000336                 1957 _30:
                       1958 ; cbar.c    828                                         else
                       1959 ; cbar.c    829                                                 SoundPtrMax = 46;
000336 96182E2E        1961         MOV.B   _SoundPtrMax,#02EH
                       1962 ; cbar.c    830                                 }
00033A                 1964 _32:
                       1965 ; cbar.c    831                                 tmp = Sound525[SoundPtr];                       /
                            / Get sound information
00033A 86012D          1967         MOV.B   R0L,_SoundPtr
00033D B110            1968         MOVS.B  R0H,#00H
00033F D901            1969         ASL.W   R0,#01H
000341 8920            1970         MOV.W   R2,R0
000343 B930            1971         MOVS.W  R3,#00H
000345 9918rrrr        1972         MOV.W   R1,#SEG( _Sound525 )
000349 9908rrrr        1973         MOV.W   R0,#SOF( _Sound525 )
00034D 0902            1974         ADD.W   R0,R2
00034F 1913            1975         ADDC.W  R1,R3
000351 862C43          1976         MOV.B   CS,R1L
000354 8810            1977         MOVC.W  R1,[R0+]
000356 964842rr        1978         MOV.B   ES,#SEG( _14 )
00035A 9908rrrr        1979         MOV.W   R0,#SOF( _14 )
00035E 8A18            1980         MOV.W   [R0],R1
                       1981 ; cbar.c    832 
                       1982 ; cbar.c    833                                 if ( SoundPtr++ == 47)                          /
                            / Prepare for line 263
000360 86012D          1984         MOV.B   R0L,_SoundPtr
000363 A6112D          1985         ADDS.B  _SoundPtr,#01H
000366 91042F          1986         CMP.B   R0L,#02FH
000369 F20C            1987         BNE     _34
                       1988 ; cbar.c    834                                         if ( SoundFrameCnt & 0x01)      // Sound 
                            frames 1,3,5 are special
00036B 86012B          1990         MOV.B   R0L,_SoundFrameCnt
00036E 910501          1991         AND.B   R0L,#01H
000371 F308            1992         BEQ     _34
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  27

ADDR   CODE            LINE SOURCELINE
                       1993 ; cbar.c    835                                                 tmp |= S3OR4;
000373 99160100        1995         OR.W    R1,#0100H
000377 964842rr        1996         MOV.B   ES,#SEG( _14 )
00037B 9908rrrr        1997         MOV.W   R0,#SOF( _14 )
00037F 8A18            1998         MOV.W   [R0],R1
                       1999 ; cbar.c    836 
                       2000 ; cbar.c    837                                 Status &= ~SOUND;                                
                                                    // Clear previous sound sample
000382                 2002 _34:
000382 9E1520FE7F      2003         AND.W   _Status,#0FE7FH
                       2004 ; cbar.c    838 
                       2005 ; cbar.c    839                                 if ( SoundEnable)
000387 964842rr        2007         MOV.B   ES,#SEG( _SoundEnable )
00038B 9908rrrr        2008         MOV.W   R0,#SOF( _SoundEnable )
00038F 8200            2009         MOV.B   R0L,[R0]
000391 F309            2010         BEQ     _35
                       2011 ; cbar.c    840                                         Status |= ( tmp & SOUND);               /
                            / Sound samples
000393 964842rr        2013         MOV.B   ES,#SEG( _14 )
000397 9908rrrr        2014         MOV.W   R0,#SOF( _14 )
00039B 8A00            2015         MOV.W   R0,[R0]
00039D 99050180        2016         AND.W   R0,#0180H
0003A1 6E0920          2017         OR.W    _Status,R0
0003A1 6E0920          2017         OR.W    _Status,R0
0003A4                 2018 _35:
                       2019 ; cbar.c    841 
                       2020 ; cbar.c    842                                 SoundCnt = tmp & 0x0F;                          /
                            / Lines to next sound update
0003A4 964842rr        2022         MOV.B   ES,#SEG( _14 )
0003A8 9908rrrr        2023         MOV.W   R0,#SOF( _14 )
0003AC 8A00            2024         MOV.W   R0,[R0]
0003AE 91050F          2025         AND.B   R0L,#0FH
0003B1 86092C          2026         MOV.B   _SoundCnt,R0L
                       2027 ; cbar.c    843                                 StatusPort = Status;                             
                                    // Update status port
0003B4 96484206        2029         MOV.B   ES,#SEG( _StatusPort )
0003B8 9908A000        2030         MOV.W   R0,#SOF( _StatusPort )
0003BC A80120          2031         MOV.W   [R0],_Status
                       2032 ; cbar.c    844                         }
                       2033 ; cbar.c    845                 }
                       2034 ; cbar.c    846         }
0003C0                 2036 _38:
                       2037 ; cbar.c    847 
                       2038 ; cbar.c    848         if ( --SyncLineCnt == 0)
0003C0 A61F29          2040         ADDS.B  _SyncLineCnt,#0FH
0003C3 860129          2041         MOV.B   R0L,_SyncLineCnt
0003C6 F265            2042         BNE     _44
                       2043 ; cbar.c    849         {
                       2044 ; cbar.c    850                 tmp = TablePtr[++SyncLinePtr];
0003C8 A6112A          2046         ADDS.B  _SyncLinePtr,#01H
0003CB 86012A          2047         MOV.B   R0L,_SyncLinePtr
0003CE B110            2048         MOVS.B  R0H,#00H
0003D0 D901            2049         ASL.W   R0,#01H
0003D2 8920            2050         MOV.W   R2,R0
0003D4 9839            2051         SEXT.W  R3
0003D6 8E1124          2052         MOV.W   R1,_TablePtr+2
0003D9 8E0122          2053         MOV.W   R0,_TablePtr
0003DC 0902            2054         ADD.W   R0,R2
0003DE 1913            2055         ADDC.W  R1,R3
0003E0 862C43          2056         MOV.B   CS,R1L
0003E3 8810            2057         MOVC.W  R1,[R0+]
0003E5 964842rr        2058         MOV.B   ES,#SEG( _14 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  28

ADDR   CODE            LINE SOURCELINE
0003E9 9908rrrr        2059         MOV.W   R0,#SOF( _14 )
0003ED 8A18            2060         MOV.W   [R0],R1
                       2061 ; cbar.c    851 
                       2062 ; cbar.c    852                 if ( tmp == 0)
0003EF 6911            2064         OR.W    R1,R1
0003F1 F226            2065         BNE     _40
                       2066 ; cbar.c    853                 {
                       2067 ; cbar.c    854                         if ( NewPattern)
0003F3 964842rr        2069         MOV.B   ES,#SEG( _NewPattern )
0003F7 9908rrrr        2070         MOV.W   R0,#SOF( _NewPattern )
0003FB 8200            2071         MOV.B   R0L,[R0]
0003FD F314            2072         BEQ     _39
                       2073 ; cbar.c    855                         {
                       2074 ; cbar.c    856                                 NewPattern = Blanking = FALSE;
0003FF 964842rr        2076         MOV.B   ES,#SEG( _Blanking )
000403 9908rrrr        2077         MOV.W   R0,#SOF( _Blanking )
000407 B200            2078         MOV.B   [R0],#00H
000409 964842rr        2079         MOV.B   ES,#SEG( _NewPattern )
00040D 9908rrrr        2080         MOV.W   R0,#SOF( _NewPattern )
000411 B200            2081         MOV.B   [R0],#00H
                       2082 ; cbar.c    857 
                       2083 ; cbar.c    858                                 TablePtr = newTablePtr;
000413 964842rr        2085         MOV.B   ES,#SEG( _newTablePtr )
000417 9918rrrr        2086         MOV.W   R1,#SOF( _newTablePtr )
00041B 8B01            2087         MOV.W   R0,[R1+]
00041D 8A11            2088         MOV.W   R1,[R1]
00041F 8E1924          2089         MOV.W   _TablePtr+2,R1
000422 8E0922          2090         MOV.W   _TablePtr,R0
                       2091 ; cbar.c    859                         }
000426                 2093 _39:
                       2094 ; cbar.c    860 
                       2095 ; cbar.c    861                         SyncLinePtr = 0;
000426 B6102A          2097         MOV.B   _SyncLinePtr,#00H
                       2098 ; cbar.c    862                         tmp = TablePtr[0];
000429 8E1124          2100         MOV.W   R1,_TablePtr+2
00042C 8E0122          2101         MOV.W   R0,_TablePtr
00042F 862C43          2102         MOV.B   CS,R1L
000432 8810            2103         MOVC.W  R1,[R0+]
000434 964842rr        2104         MOV.B   ES,#SEG( _14 )
000438 9908rrrr        2105         MOV.W   R0,#SOF( _14 )
00043C 8A18            2106         MOV.W   [R0],R1
                       2107 ; cbar.c    863                 }
00043E                 2109 _40:
                       2110 ; cbar.c    864 
                       2111 ; cbar.c    865                 SyncLineCnt = tmp / 256;
00043E 964842rr        2113         MOV.B   ES,#SEG( _14 )
000442 9908rrrr        2114         MOV.W   R0,#SOF( _14 )
000446 8A00            2115         MOV.W   R0,[R0]
000448 8920            2116         MOV.W   R2,R0
00044A D808            2117         LSR.W   R0,#08H
00044C 860929          2118         MOV.B   _SyncLineCnt,R0L
                       2119 ; cbar.c    866 
                       2120 ; cbar.c    867                 tmp %= 256;
00044F 7933            2122         XOR.W   R3,R3
000451 E9210100        2123         DIVU.D  R2,#0100H
000455 964842rr        2124         MOV.B   ES,#SEG( _14 )
000459 9908rrrr        2125         MOV.W   R0,#SOF( _14 )
00045D 8A38            2126         MOV.W   [R0],R3
                       2127 ; cbar.c    868                 tmp &= 0x3F;
00045F 9935003F        2129         AND.W   R3,#03FH
000463 964842rr        2130         MOV.B   ES,#SEG( _14 )
000467 9908rrrr        2131         MOV.W   R0,#SOF( _14 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  29

ADDR   CODE            LINE SOURCELINE
00046B 8A38            2132         MOV.W   [R0],R3
                       2133 ; cbar.c    869 
                       2134 ; cbar.c    870                 Status &= ~( S5S4S3S2 | S1S0);
00046D 9E1520FFC0      2136         AND.W   _Status,#0FFC0H
                       2137 ; cbar.c    871                 Status |= tmp;
000472 6E3920          2139         OR.W    _Status,R3
                       2140 ; cbar.c    872 
                       2141 ; cbar.c    873                 if ( Blanking)                                                   
                                                    // If blanking do NOT enable any
000475 964842rr        2143         MOV.B   ES,#SEG( _Blanking )
000479 9908rrrr        2144         MOV.W   R0,#SOF( _Blanking )
00047D 8200            2145         MOV.B   R0L,[R0]
00047F F303            2146         BEQ     _41
                       2147 ; cbar.c    874                         Status &= ~S5S4S3S2;                                     
                                    //  bank
000481 9E1520FFC3      2149         AND.W   _Status,#0FFC3H
000481 9E1520FFC3      2149         AND.W   _Status,#0FFC3H
000486                 2150 _41:
                       2151 ; cbar.c    875 
                       2152 ; cbar.c    876                 StatusPort = Status;
000486 96484206        2154         MOV.B   ES,#SEG( _StatusPort )
00048A 9908A000        2155         MOV.W   R0,#SOF( _StatusPort )
00048E A80120          2156         MOV.W   [R0],_Status
                       2157 ; cbar.c    877         }       
                       2158 ; cbar.c    878 }
000492                 2160 _44:
000492 D680            2161         RET
                       2163 ; cbar.c    879 
                       2164 ; cbar.c    880 /**************************************************************************/
                       2165 ; cbar.c    881 /* CBDefaults                                                                    
                                                                                                                             
                                                            CBAR.C  */
                       2166 ; cbar.c    882 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       2167 ; cbar.c    883 /* Author:       Kim Engedahl, DEV, 000526                                       
                                                                                                                             
                                    */
                       2168 ; cbar.c    884 /* Revised:      000617, KEn, DEV                                                
                                                                                                                             
                                            */
                       2169 ; cbar.c    885 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       2170 ; cbar.c    886 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       2171 ; cbar.c    887 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       2172 ; cbar.c    888 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       2173 ; cbar.c    889 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       2174 ; cbar.c    890 /**************************************************************************/
                       2175 ; cbar.c    891 void CBDefaults( void)
                       2176 ; cbar.c    892 {
                       2177         ALIGN   1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  30

ADDR   CODE            LINE SOURCELINE
                       2179         PUBLIC  _CBDefaults
000494                 2180 _CBDefaults:
                       2184 ; cbar.c    893         Settings.CBSetup.System = CBSetup.System = Calibration.ResetSystem;
000494 964842rr        2186         MOV.B   ES,#SEG( _Calibration+97 )
000498 9908rrrr        2187         MOV.W   R0,#SOF( _Calibration+97 )
00049C 8200            2188         MOV.B   R0L,[R0]
00049E 964842rr        2189         MOV.B   ES,#SEG( _CBSetup )
0004A2 9918rrrr        2190         MOV.W   R1,#SOF( _CBSetup )
0004A6 8209            2191         MOV.B   [R1],R0L
0004A8 964842rr        2192         MOV.B   ES,#SEG( _Settings+32 )
0004AC 9918rrrr        2193         MOV.W   R1,#SOF( _Settings+32 )
0004B0 8209            2194         MOV.B   [R1],R0L
                       2195 ; cbar.c    894 
                       2196 ; cbar.c    895         if ( CBSetup.System < NTSC_US)
0004B2 964842rr        2198         MOV.B   ES,#SEG( _CBSetup )
0004B6 9908rrrr        2199         MOV.W   R0,#SOF( _CBSetup )
0004BA 8200            2200         MOV.B   R0L,[R0]
0004BC 910402          2201         CMP.B   R0L,#02H
0004BF F00C            2202         BCC     _57
                       2203 ; cbar.c    896                 Settings.CBSetup.Pattern = CBSetup.Pattern = EBUCBar;
0004C1 964842rr        2205         MOV.B   ES,#SEG( _CBSetup+2 )
0004C5 9908rrrr        2206         MOV.W   R0,#SOF( _CBSetup+2 )
0004C9 BA01            2207         MOV.W   [R0],#01H
0004CB 964842rr        2208         MOV.B   ES,#SEG( _Settings+34 )
0004CF 9908rrrr        2209         MOV.W   R0,#SOF( _Settings+34 )
0004D3 BA01            2210         MOV.W   [R0],#01H
0004D5 FE0B            2211         BR      _58
0004D5 FE0B00          2211         BR      _58
0004D8                 2212 _57:
                       2213 ; cbar.c    897         else
                       2214 ; cbar.c    898                 Settings.CBSetup.Pattern = CBSetup.Pattern = SMPTECBar;
0004D8 964842rr        2216         MOV.B   ES,#SEG( _CBSetup+2 )
0004DC 9908rrrr        2217         MOV.W   R0,#SOF( _CBSetup+2 )
0004E0 BA00            2218         MOV.W   [R0],#00H
0004E2 964842rr        2219         MOV.B   ES,#SEG( _Settings+34 )
0004E6 9908rrrr        2220         MOV.W   R0,#SOF( _Settings+34 )
0004EA BA00            2221         MOV.W   [R0],#00H
0004EA BA00            2221         MOV.W   [R0],#00H
0004EC                 2222 _58:
                       2223 ; cbar.c    899 
                       2224 ; cbar.c    900         Settings.CBSetup.Delay = CBSetup.Delay = 0;
0004EC 964842rr        2226         MOV.B   ES,#SEG( _CBSetup+4 )
0004F0 9908rrrr        2227         MOV.W   R0,#SOF( _CBSetup+4 )
0004F4 BB00            2228         MOV.W   [R0+],#00H
0004F6 BA00            2229         MOV.W   [R0],#00H
0004F8 964842rr        2230         MOV.B   ES,#SEG( _Settings+36 )
0004FC 9908rrrr        2231         MOV.W   R0,#SOF( _Settings+36 )
000500 BB00            2232         MOV.W   [R0+],#00H
000502 BA00            2233         MOV.W   [R0],#00H
                       2234 ; cbar.c    901         Settings.CBSetup.ScHPhase = CBSetup.ScHPhase = 0;
000504 964842rr        2236         MOV.B   ES,#SEG( _CBSetup+8 )
000508 9908rrrr        2237         MOV.W   R0,#SOF( _CBSetup+8 )
00050C BA00            2238         MOV.W   [R0],#00H
00050E 964842rr        2239         MOV.B   ES,#SEG( _Settings+40 )
000512 9908rrrr        2240         MOV.W   R0,#SOF( _Settings+40 )
000516 BA00            2241         MOV.W   [R0],#00H
                       2242 ; cbar.c    902         Settings.CBSetup.EmbAudioSignal = CBSetup.EmbAudioSignal = EmbAudioOff;
000518 964842rr        2244         MOV.B   ES,#SEG( _CBSetup+10 )
00051C 9908rrrr        2245         MOV.W   R0,#SOF( _CBSetup+10 )
000520 B200            2246         MOV.B   [R0],#00H
000522 964842rr        2247         MOV.B   ES,#SEG( _Settings+42 )
000526 9908rrrr        2248         MOV.W   R0,#SOF( _Settings+42 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  31

ADDR   CODE            LINE SOURCELINE
00052A B200            2249         MOV.B   [R0],#00H
                       2250 ; cbar.c    903 
                       2251 ; cbar.c    904         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
00052C 9918rrrr        2253         MOV.W   R1,#SEG( _Settings )
000530 9908rrrr        2254         MOV.W   R0,#SOF( _Settings )
000534 964842rr        2255         MOV.B   ES,#SEG( _SettingsPtr )
000538 9928rrrr        2256         MOV.W   R2,#SOF( _SettingsPtr )
00053C 8A22            2257         MOV.W   R2,[R2]
00053E 9938004A        2258         MOV.W   R3,#04AH
                       2259         CALL    _NV_Store
000542 C4rrrrrr       +2259 ;       FCALL   _NV_Store
                       2260 ; cbar.c    905 }
000546 D680            2262         RET
                       2264 ; cbar.c    906 
                       2265 ; cbar.c    907 /**************************************************************************/
                       2266 ; cbar.c    908 /* CBInit                                                                        
                                                                                                                             
                                                                            CBAR.C  */
                       2267 ; cbar.c    909 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       2268 ; cbar.c    910 /* Author:       Kim Engedahl, DEV, 000322                                       
                                                                                                                             
                                    */
                       2269 ; cbar.c    911 /* Revised:      0009145, KEn, DEV                                               
                                                                                                                             
                                            */
                       2270 ; cbar.c    912 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       2271 ; cbar.c    913 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       2272 ; cbar.c    914 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       2273 ; cbar.c    915 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       2274 ; cbar.c    916 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       2275 ; cbar.c    917 /**************************************************************************/
                       2276 ; cbar.c    918 int CBInit( void)
                       2277 ; cbar.c    919 {
                       2278         ALIGN   1
                       2280         PUBLIC  _CBInit
000548                 2281 _CBInit:
                       2285 ; cbar.c    920         SyncLinePtr = 0;
000548 B6102A          2287         MOV.B   _SyncLinePtr,#00H
                       2288 ; cbar.c    921         TablePtr = &NTSCFullFieldTable[0];
00054B 9E1824rrrr      2290         MOV.W   _TablePtr+2,#SEG( _NTSCFullFieldTable )
000550 9E1822rrrr      2291         MOV.W   _TablePtr,#SOF( _NTSCFullFieldTable )
                       2292 ; cbar.c    922 
                       2293 ; cbar.c    923         NewPattern = FALSE;
000555 964842rr        2295         MOV.B   ES,#SEG( _NewPattern )
000559 9908rrrr        2296         MOV.W   R0,#SOF( _NewPattern )
00055D B200            2297         MOV.B   [R0],#00H
                       2298 ; cbar.c    924         Blanking = TRUE;
00055F 964842rr        2300         MOV.B   ES,#SEG( _Blanking )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  32

ADDR   CODE            LINE SOURCELINE
000563 9908rrrr        2301         MOV.W   R0,#SOF( _Blanking )
000567 9208FF          2302         MOV.B   [R0],#0FFH
                       2303 ; cbar.c    925         SoundEnable = FALSE;
00056A 964842rr        2305         MOV.B   ES,#SEG( _SoundEnable )
00056E 9908rrrr        2306         MOV.W   R0,#SOF( _SoundEnable )
000572 B200            2307         MOV.B   [R0],#00H
                       2308 ; cbar.c    926 
                       2309 ; cbar.c    927         Status |= SYSSEL;
000574 9E16200040      2311         OR.W    _Status,#040H
                       2312 ; cbar.c    928         StatusPort = Status;
000579 96484206        2314         MOV.B   ES,#SEG( _StatusPort )
00057D 9908A000        2315         MOV.W   R0,#SOF( _StatusPort )
000581 A80120          2316         MOV.W   [R0],_Status
                       2317 ; cbar.c    929 
                       2318 ; cbar.c    930         SyncLineCnt = 1;                                                         
                                            // Interrupt in 1 line
000584 B61129          2320         MOV.B   _SyncLineCnt,#01H
                       2321 ; cbar.c    931 
                       2322 ; cbar.c    932         CBSetup.System = Settings.CBSetup.System;
000587 964842rr        2324         MOV.B   ES,#SEG( _Settings+32 )
00058B 9908rrrr        2325         MOV.W   R0,#SOF( _Settings+32 )
00058F 8200            2326         MOV.B   R0L,[R0]
000591 964842rr        2327         MOV.B   ES,#SEG( _CBSetup )
000595 9918rrrr        2328         MOV.W   R1,#SOF( _CBSetup )
000599 8209            2329         MOV.B   [R1],R0L
                       2330 ; cbar.c    933         CBSetup.Pattern = Settings.CBSetup.Pattern;
00059B 964842rr        2332         MOV.B   ES,#SEG( _Settings+34 )
00059F 9908rrrr        2333         MOV.W   R0,#SOF( _Settings+34 )
0005A3 8A00            2334         MOV.W   R0,[R0]
0005A5 964842rr        2335         MOV.B   ES,#SEG( _CBSetup+2 )
0005A9 9918rrrr        2336         MOV.W   R1,#SOF( _CBSetup+2 )
0005AD 8A09            2337         MOV.W   [R1],R0
                       2338 ; cbar.c    934         CBSetup.Delay = Settings.CBSetup.Delay;
0005AF 964842rr        2340         MOV.B   ES,#SEG( _Settings+36 )
0005B3 9918rrrr        2341         MOV.W   R1,#SOF( _Settings+36 )
0005B7 8B01            2342         MOV.W   R0,[R1+]
0005B9 8A11            2343         MOV.W   R1,[R1]
0005BB 964842rr        2344         MOV.B   ES,#SEG( _CBSetup+4 )
0005BF 9928rrrr        2345         MOV.W   R2,#SOF( _CBSetup+4 )
0005C3 8B0A            2346         MOV.W   [R2+],R0
0005C5 8A1A            2347         MOV.W   [R2],R1
                       2348 ; cbar.c    935         CBSetup.ScHPhase = Settings.CBSetup.ScHPhase;
0005C7 964842rr        2350         MOV.B   ES,#SEG( _Settings+40 )
0005CB 9908rrrr        2351         MOV.W   R0,#SOF( _Settings+40 )
0005CF 8A00            2352         MOV.W   R0,[R0]
0005D1 964842rr        2353         MOV.B   ES,#SEG( _CBSetup+8 )
0005D5 9918rrrr        2354         MOV.W   R1,#SOF( _CBSetup+8 )
0005D9 8A09            2355         MOV.W   [R1],R0
                       2356 ; cbar.c    936         CBSetup.EmbAudioSignal = Settings.CBSetup.EmbAudioSignal;
0005DB 964842rr        2358         MOV.B   ES,#SEG( _Settings+42 )
0005DF 9908rrrr        2359         MOV.W   R0,#SOF( _Settings+42 )
0005E3 8200            2360         MOV.B   R0L,[R0]
0005E5 964842rr        2361         MOV.B   ES,#SEG( _CBSetup+10 )
0005E9 9918rrrr        2362         MOV.W   R1,#SOF( _CBSetup+10 )
0005ED 8209            2363         MOV.B   [R1],R0L
                       2364 ; cbar.c    937 
                       2365 ; cbar.c    938         return( 0);
0005EF B900            2367         MOV.W   R0,#00H
                       2368 ; cbar.c    939 }
0005F1 D680            2370         RET
                       2372 ; cbar.c    940 
                       2373 ; cbar.c    941 /**************************************************************************/
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  33

ADDR   CODE            LINE SOURCELINE
                       2374 ; cbar.c    942 /* CBUpdate                                                                      
                                                                                                                             
                                                                     CBAR.C */
                       2375 ; cbar.c    943 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       2376 ; cbar.c    944 /* Author:       Kim Engedahl, DEV, 000413                                       
                                                                                                                             
                                    */
                       2377 ; cbar.c    945 /* Revised:      000603, KEn, DEV                                                
                                                                                                                             
                                            */
                       2378 ; cbar.c    946 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       2379 ; cbar.c    947 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       2380 ; cbar.c    948 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       2381 ; cbar.c    949 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       2382 ; cbar.c    950 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       2383 ; cbar.c    951 /**************************************************************************/
                       2384 ; cbar.c    952 int CBUpdate( void)
                       2385 ; cbar.c    953 {
0005F3 00              2386         ALIGN   1
                       2388         PUBLIC  _CBUpdate
0005F4                 2389 _CBUpdate:
                       2393 ; cbar.c    954         SetCBSystem( CBSetup.System);                   // Also updates pattern
0005F4 964842rr        2395         MOV.B   ES,#SEG( _CBSetup )
0005F8 9908rrrr        2396         MOV.W   R0,#SOF( _CBSetup )
0005FC 8200            2397         MOV.B   R0L,[R0]
0005FE C5032A          2398         CALL    _SetCBSystem
                       2399 ; cbar.c    955 
                       2400 ; cbar.c    956         SetCBDelay( CBSetup.Delay);
000601 964842rr        2402         MOV.B   ES,#SEG( _CBSetup+4 )
000605 9918rrrr        2403         MOV.W   R1,#SOF( _CBSetup+4 )
000609 8B01            2404         MOV.W   R0,[R1+]
00060B 8A11            2405         MOV.W   R1,[R1]
00060D C5039D          2406         CALL    _SetCBDelay
                       2407 ; cbar.c    957         SetCBScHPhase( CBSetup.ScHPhase);
000610 964842rr        2409         MOV.B   ES,#SEG( _CBSetup+8 )
000614 9908rrrr        2410         MOV.W   R0,#SOF( _CBSetup+8 )
000618 8A00            2411         MOV.W   R0,[R0]
00061A C50456          2412         CALL    _SetCBScHPhase
                       2413 ; cbar.c    958         SetCBEmbAudioSignal( CBSetup.EmbAudioSignal);
00061D 964842rr        2415         MOV.B   ES,#SEG( _CBSetup+10 )
000621 9908rrrr        2416         MOV.W   R0,#SOF( _CBSetup+10 )
000625 8200            2417         MOV.B   R0L,[R0]
000627 C504AC          2418         CALL    _SetCBEmbAudioSignal
                       2419 ; cbar.c    959 
                       2420 ; cbar.c    960         return( OK);
00062A 9908FFFF        2422         MOV.W   R0,#0FFFFH
                       2423 ; cbar.c    961 }
00062E D680            2425         RET
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  34

ADDR   CODE            LINE SOURCELINE
                       2427 ; cbar.c    962 
                       2428 ; cbar.c    963 /**************************************************************************/
                       2429 ; cbar.c    964 /* SetCBPattern                                                                  
                                                                                                                             
                                                         CBAR.C     */
                       2430 ; cbar.c    965 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       2431 ; cbar.c    966 /* Author:       Kim Engedahl, DEV, 000331                                       
                                                                                                                             
                                    */
                       2432 ; cbar.c    967 /* Revised:      000618, KEn, DEV                                                
                                                                                                                             
                                            */
                       2433 ; cbar.c    968 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       2434 ; cbar.c    969 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       2435 ; cbar.c    970 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       2436 ; cbar.c    971 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       2437 ; cbar.c    972 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       2438 ; cbar.c    973 /**************************************************************************/
                       2439 ; cbar.c    974 int SetCBPattern( UI pattern)
                       2440 ; cbar.c    975 {
                       2441         ALIGN   1
                       2443         PUBLIC  _SetCBPattern
000630                 2444 _SetCBPattern:
000630 0F10            2448         PUSH.W  R4
000000                 2449 CBAR_IR SEGMENT HCODE INSEGMENT ROMDATA
000000                 2450         RSEG    CBAR_IR
                       2451         ALIGN   1
000000                 2452 __swtable142:
000000 rrrrrrrrrrrrrr  2453         DW      SOF _61,SEG _61
       rrrrrrrrrrrrrr       
       rrrr                 
000004 rrrrrrrrrrrrrr  2454         DW      SOF _62,SEG _62
       rrrrrrrrrrrrrr       
       rrrr                 
000008 rrrrrrrrrrrrrr  2455         DW      SOF _63,SEG _63
       rrrrrrrrrrrrrr       
       rrrr                 
00000C rrrrrrrrrrrrrr  2456         DW      SOF _64,SEG _64
       rrrrrrrrrrrrrr       
       rrrr                 
000010 rrrrrrrrrrrrrr  2457         DW      SOF _66,SEG _66
       rrrrrrrrrrrrrr       
       rrrr                 
000014 rrrrrrrrrrrrrr  2458         DW      SOF _68,SEG _68
       rrrrrrrrrrrrrr       
       rrrr                 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  35

ADDR   CODE            LINE SOURCELINE
000018 rrrrrrrrrrrrrr  2459         DW      SOF _69,SEG _69
       rrrrrrrrrrrrrr       
       rrrr                 
00001C rrrrrrrrrrrrrr  2460         DW      SOF _70,SEG _70
       rrrrrrrrrrrrrr       
       rrrr                 
000020 rrrrrrrrrrrrrr  2461         DW      SOF _72,SEG _72
       rrrrrrrrrrrrrr       
       rrrr                 
000024 rrrrrrrrrrrrrr  2462         DW      SOF _74,SEG _74
       rrrrrrrrrrrrrr       
       rrrr                 
000028 rrrrrrrrrrrrrr  2463         DW      SOF _75,SEG _75
       rrrrrrrrrrrrrr       
       rrrr                 
00002C rrrrrrrrrrrrrr  2464         DW      SOF _77,SEG _77
       rrrrrrrrrrrrrr       
       rrrr                 
000030 rrrrrrrrrrrrrr  2465         DW      SOF _79,SEG _79
       rrrrrrrrrrrrrr       
       rrrr                 
000034 rrrrrrrrrrrrrr  2466         DW      SOF _81,SEG _81
       rrrrrrrrrrrrrr       
       rrrr                 
000038 rrrrrrrrrrrrrr  2467         DW      SOF _83,SEG _83
       rrrrrrrrrrrrrr       
       rrrr                 
00003C rrrrrrrrrrrrrr  2468         DW      SOF _85,SEG _85
       rrrrrrrrrrrrrr       
       rrrr                 
000040 rrrrrrrrrrrrrr  2469         DW      SOF _87,SEG _87
       rrrrrrrrrrrrrr       
       rrrr                 
000044 rrrrrrrrrrrrrr  2470         DW      SOF _89,SEG _89
       rrrrrrrrrrrrrr       
       rrrr                 
000048 rrrrrrrrrrrrrr  2471         DW      SOF _91,SEG _91
       rrrrrrrrrrrrrr       
       rrrr                 
00004C rrrrrrrrrrrrrr  2472         DW      SOF _93,SEG _93
       rrrrrrrrrrrrrr       
       rrrr                 
000050 rrrrrrrrrrrrrr  2473         DW      SOF _95,SEG _95
       rrrrrrrrrrrrrr       
       rrrr                 
000054 rrrrrrrrrrrrrr  2474         DW      SOF _97,SEG _97
       rrrrrrrrrrrrrr       
       rrrr                 
000058 rrrrrrrrrrrrrr  2475         DW      SOF _99,SEG _99
       rrrrrrrrrrrrrr       
       rrrr                 
000632                 2476         RSEG    CBAR_PR
000632 A97E            2478         ADDS.W  R7,#0EH
                       2484 ; cbar.c    976         int system = CBSetup.System;
000634 8A0F            2486         MOV.W   [R7],R0
000636 964842rr        2487         MOV.B   ES,#SEG( _CBSetup )
00063A 9908rrrr        2488         MOV.W   R0,#SOF( _CBSetup )
00063E 8200            2489         MOV.B   R0L,[R0]
000640 8180            2490         MOV.B   R4L,R0L
000642 B190            2491         MOVS.B  R4H,#00H
                       2493 ; cbar.c    977 
                       2494 ; cbar.c    978         if ( ValidateCBPattern( system , &pattern) == FAIL)
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  36

ADDR   CODE            LINE SOURCELINE
000644 8904            2496         MOV.W   R0,R4
000646 9168rr          2497         MOV.B   R3L,#SEG( __lc_bs )
000649 7177            2498         XOR.B   R3H,R3H
00064B 8927            2499         MOV.W   R2,R7
00064D C504DE          2500         CALL    _ValidateCBPattern
000650 6900            2501         OR.W    R0,R0
000652 F203            2502         BNE     _60
                       2503 ; cbar.c    979                 return( FAIL);
000654 B900            2505         MOV.W   R0,#00H
                       2506         BR      _141
000656 D502FB         +2506         JMP.L   _141
000656 D502FB00       +2506         JMP.L   _141
00065A                 2507 _60:
                       2509 ; cbar.c    980 
                       2510 ; cbar.c    981         Settings.ActivePreset = 0;
00065A 964842rr        2512         MOV.B   ES,#SEG( _Settings )
00065E 9908rrrr        2513         MOV.W   R0,#SOF( _Settings )
000662 BA00            2514         MOV.W   [R0],#00H
                       2515 ; cbar.c    982 
                       2516 ; cbar.c    983         Settings.CBSetup.Pattern = CBSetup.Pattern = pattern;
000664 8A07            2518         MOV.W   R0,[R7]
000666 964842rr        2520         MOV.B   ES,#SEG( _CBSetup+2 )
00066A 9918rrrr        2521         MOV.W   R1,#SOF( _CBSetup+2 )
00066E 8A09            2522         MOV.W   [R1],R0
000670 964842rr        2523         MOV.B   ES,#SEG( _Settings+34 )
000674 9918rrrr        2524         MOV.W   R1,#SOF( _Settings+34 )
000678 8A09            2525         MOV.W   [R1],R0
                       2526 ; cbar.c    984         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
00067A 9918rrrr        2528         MOV.W   R1,#SEG( _Settings )
00067E 9908rrrr        2529         MOV.W   R0,#SOF( _Settings )
000682 964842rr        2531         MOV.B   ES,#SEG( _SettingsPtr )
000686 9928rrrr        2532         MOV.W   R2,#SOF( _SettingsPtr )
00068A 8A22            2533         MOV.W   R2,[R2]
00068C 9938004A        2534         MOV.W   R3,#04AH
                       2535         CALL    _NV_Store
000690 C4rrrrrr       +2535 ;       FCALL   _NV_Store
                       2536 ; cbar.c    985 
                       2537 ; cbar.c    986         Blanking = TRUE;
000694 964842rr        2539         MOV.B   ES,#SEG( _Blanking )
000698 9908rrrr        2540         MOV.W   R0,#SOF( _Blanking )
00069C 9208FF          2541         MOV.B   [R0],#0FFH
                       2542 ; cbar.c    987 
                       2543 ; cbar.c    988         Status &= ~S5S4S3S2;                                                     
                                                                    // Blank line immediately
00069F 9E1520FFC3      2545         AND.W   _Status,#0FFC3H
                       2546 ; cbar.c    989         StatusPort = Status;
0006A4 96484206        2548         MOV.B   ES,#SEG( _StatusPort )
0006A8 9908A000        2549         MOV.W   R0,#SOF( _StatusPort )
0006AC A80120          2550         MOV.W   [R0],_Status
                       2552 ; cbar.c    990 
                       2553 ; cbar.c    991         switch ( pattern)
0006AF 8A17            2555         MOV.W   R1,[R7]
0006B1 99140016        2556         CMP.W   R1,#016H
                       2557         BG      _140
0006B5 F902           +2557 ;       BL      _LG_68
0006B7 D502C2         +2557 ;       JMP.L   _140
0006B7 D502C2         +2557 ;       JMP.L   _140
0006BA                +2557 _LG_68:
0006BA D912            2558         ASL.W   R1,#02H
0006BC 964843rr        2559         MOV.B   CS,#SEG( __swtable142 )
0006C0 9910rrrr        2560         ADD.W   R1,#SOF( __swtable142 )
0006C4 8801            2561         MOVC.W  R0,[R1+]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  37

ADDR   CODE            LINE SOURCELINE
0006C6 0F01            2562         PUSH.W  R0
0006C8 8801            2563         MOVC.W  R0,[R1+]
0006CA 0F01            2564         PUSH.W  R0
0006CC D680            2565         RET
                       2568 ; cbar.c    992         {
                       2569 ; cbar.c    993                 case SMPTECBar:
0006CE                 2571 _61:
                       2572 ; cbar.c    994                         SRAMVideoLoad( dSMPTECBar, SRAMBank1);
0006CE 910802          2574         MOV.B   R0L,#02H
0006D1 911810          2575         MOV.B   R0H,#010H
0006D4 C5FCBF          2576         CALL    _SRAMVideoLoad
                       2578 ; cbar.c    995                         SRAMVideoLoad( dBlueBars, SRAMBank2);
0006D7 910803          2580         MOV.B   R0L,#03H
0006DA 911814          2581         MOV.B   R0H,#014H
0006DD C5FCBA          2582         CALL    _SRAMVideoLoad
                       2583 ; cbar.c    996                         SRAMVideoLoad( dIWhiteQ, SRAMBank3);
0006E0 910804          2585         MOV.B   R0L,#04H
0006E3 911818          2586         MOV.B   R0H,#018H
0006E6 C5FCB6          2587         CALL    _SRAMVideoLoad
                       2588 ; cbar.c    997 
                       2589 ; cbar.c    998                         newTablePtr = &SMPTECBarTable[0];
0006E9 964842rr        2591         MOV.B   ES,#SEG( _newTablePtr )
0006ED 9908rrrr        2592         MOV.W   R0,#SOF( _newTablePtr )
0006F1 9B08rrrr        2593         MOV.W   [R0+],#SOF( _SMPTECBarTable )
0006F5 9A08rrrr        2594         MOV.W   [R0],#SEG( _SMPTECBarTable )
                       2595 ; cbar.c    999                         break;
                       2597         BR      _140
0006F9 D502A1         +2597         JMP.L   _140
                       2598 ; cbar.c   1000 
                       2599 ; cbar.c   1001                 case EBUCBar:
0006FC                 2601 _62:
                       2602 ; cbar.c   1002                         SRAMVideoLoad( dEBUCBar_625, SRAMBank1);
0006FC 910801          2604         MOV.B   R0L,#01H
0006FF 911810          2605         MOV.B   R0H,#010H
000702 C5FCA8          2606         CALL    _SRAMVideoLoad
                       2607 ; cbar.c   1003 
                       2608 ; cbar.c   1004                         newTablePtr = &PALFullFieldTable[0];
000705 964842rr        2610         MOV.B   ES,#SEG( _newTablePtr )
000709 9908rrrr        2611         MOV.W   R0,#SOF( _newTablePtr )
00070D 9B08rrrr        2612         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000711 9A08rrrr        2613         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2614 ; cbar.c   1005                         break;
                       2616         BR      _140
000715 D50293         +2616         JMP.L   _140
                       2617 ; cbar.c   1006 
                       2618 ; cbar.c   1007                 case FCCCBar:
000718                 2620 _63:
                       2621 ; cbar.c   1008                         SRAMVideoLoad( dFCC_CBar_525, SRAMBank1);
000718 910829          2623         MOV.B   R0L,#029H
00071B 911810          2624         MOV.B   R0H,#010H
00071E C5FC9A          2625         CALL    _SRAMVideoLoad
                       2626 ; cbar.c   1009 
                       2627 ; cbar.c   1010                         newTablePtr = &NTSCFullFieldTable[0];
000721 964842rr        2629         MOV.B   ES,#SEG( _newTablePtr )
000725 9908rrrr        2630         MOV.W   R0,#SOF( _newTablePtr )
000729 9B08rrrr        2631         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
00072D 9A08rrrr        2632         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2633 ; cbar.c   1011                         break;
                       2635         BR      _140
000731 D50285         +2635         JMP.L   _140
                       2636 ; cbar.c   1012 
                       2637 ; cbar.c   1013                 case EBUCBarITU:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  38

ADDR   CODE            LINE SOURCELINE
000734                 2639 _64:
                       2640 ; cbar.c   1014                         SRAMVideoLoad( dEBUCBar_8bit_625, SRAMBank1);
000734 910800          2642         MOV.B   R0L,#00H
000737 911810          2643         MOV.B   R0H,#010H
00073A C5FC8C          2644         CALL    _SRAMVideoLoad
                       2645 ; cbar.c   1015 
                       2646 ; cbar.c   1016                         if ( system < NTSC_US)
00073D 99440002        2648         CMP.W   R4,#02H
000741 FA0A            2649         BGE     _65
                       2650 ; cbar.c   1017                                 newTablePtr = &PALFullFieldTable[0];
000743 964842rr        2652         MOV.B   ES,#SEG( _newTablePtr )
000747 9908rrrr        2653         MOV.W   R0,#SOF( _newTablePtr )
00074B 9B08rrrr        2654         MOV.W   [R0+],#SOF( _PALFullFieldTable )
00074F 9A08rrrr        2655         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2656         BR      _140
000753 D50274         +2656         JMP.L   _140
000753 D50274         +2656         JMP.L   _140
000756                 2657 _65:
                       2658 ; cbar.c   1018                         else
                       2659 ; cbar.c   1019                                 newTablePtr = &NTSCFullFieldTable[0];
000756 964842rr        2661         MOV.B   ES,#SEG( _newTablePtr )
00075A 9908rrrr        2662         MOV.W   R0,#SOF( _newTablePtr )
00075E 9B08rrrr        2663         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000762 9A08rrrr        2664         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2665 ; cbar.c   1020                         break;
                       2667         BR      _140
000766 D5026B         +2667         JMP.L   _140
                       2668 ; cbar.c   1021 
                       2669 ; cbar.c   1022                 case CBar100:
00076A                 2671 _66:
                       2672 ; cbar.c   1023                         if ( system < NTSC_US)
00076A 99440002        2674         CMP.W   R4,#02H
00076E FA0E            2675         BGE     _67
                       2676 ; cbar.c   1024                         {
                       2677 ; cbar.c   1025                                 SRAMVideoLoad( dCBar100_625, SRAMBank1);
000770 910805          2679         MOV.B   R0L,#05H
000773 911810          2680         MOV.B   R0H,#010H
000776 C5FC6E          2681         CALL    _SRAMVideoLoad
                       2682 ; cbar.c   1026 
                       2683 ; cbar.c   1027                                 newTablePtr = &PALFullFieldTable[0];
000779 964842rr        2685         MOV.B   ES,#SEG( _newTablePtr )
00077D 9908rrrr        2686         MOV.W   R0,#SOF( _newTablePtr )
000781 9B08rrrr        2687         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000785 9A08rrrr        2688         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2689 ; cbar.c   1028                         }
                       2691         BR      _140
000789 D50259         +2691         JMP.L   _140
000789 D50259         +2691         JMP.L   _140
00078C                 2692 _67:
                       2693 ; cbar.c   1029                         else
                       2694 ; cbar.c   1030                         {
                       2695 ; cbar.c   1031                                 SRAMVideoLoad( dFCC_CBar100_525, SRAMBank1);
00078C 91082A          2697         MOV.B   R0L,#02AH
00078F 911810          2698         MOV.B   R0H,#010H
000792 C5FC60          2699         CALL    _SRAMVideoLoad
                       2700 ; cbar.c   1032 
                       2701 ; cbar.c   1033                                 newTablePtr = &NTSCFullFieldTable[0];
000795 964842rr        2703         MOV.B   ES,#SEG( _newTablePtr )
000799 9908rrrr        2704         MOV.W   R0,#SOF( _newTablePtr )
00079D 9B08rrrr        2705         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
0007A1 9A08rrrr        2706         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2707 ; cbar.c   1034                         }
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  39

ADDR   CODE            LINE SOURCELINE
                       2708 ; cbar.c   1035                         break;
                       2710         BR      _140
0007A5 D5024B         +2710         JMP.L   _140
                       2711 ; cbar.c   1036 
                       2712 ; cbar.c   1037                 case CBarGrey75:
0007A8                 2714 _68:
                       2715 ; cbar.c   1038                         SRAMVideoLoad( dCBar75_STD_625, SRAMBank1);
0007A8 910828          2717         MOV.B   R0L,#028H
0007AB 911810          2718         MOV.B   R0H,#010H
0007AE C5FC52          2719         CALL    _SRAMVideoLoad
                       2720 ; cbar.c   1039                         SRAMVideoLoad( dGrey75_625, SRAMBank2);
0007B1 910806          2722         MOV.B   R0L,#06H
0007B4 911814          2723         MOV.B   R0H,#014H
0007B7 C5FC4D          2724         CALL    _SRAMVideoLoad
                       2725 ; cbar.c   1040         
                       2726 ; cbar.c   1041                         newTablePtr = &PALSplitFieldTable[0];
0007BA 964842rr        2728         MOV.B   ES,#SEG( _newTablePtr )
0007BE 9908rrrr        2729         MOV.W   R0,#SOF( _newTablePtr )
0007C2 9B08rrrr        2730         MOV.W   [R0+],#SOF( _PALSplitFieldTable )
0007C6 9A08rrrr        2731         MOV.W   [R0],#SEG( _PALSplitFieldTable )
                       2732 ; cbar.c   1042                         break;
                       2734         BR      _140
0007CA D50239         +2734         JMP.L   _140
                       2735 ; cbar.c   1043 
                       2736 ; cbar.c   1044                 case CBarRed75:
0007CE                 2738 _69:
                       2739 ; cbar.c   1045                         SRAMVideoLoad( dEBUCBar_625, SRAMBank1);
0007CE 910801          2741         MOV.B   R0L,#01H
0007D1 911810          2742         MOV.B   R0H,#010H
0007D4 C5FC3F          2743         CALL    _SRAMVideoLoad
                       2744 ; cbar.c   1046                         SRAMVideoLoad( dRed75_625, SRAMBank2);
0007D7 910807          2746         MOV.B   R0L,#07H
0007DA 911814          2747         MOV.B   R0H,#014H
0007DD C5FC3A          2748         CALL    _SRAMVideoLoad
                       2749 ; cbar.c   1047 
                       2750 ; cbar.c   1048                         newTablePtr = &PALSplitFieldTable[0];
0007E0 964842rr        2752         MOV.B   ES,#SEG( _newTablePtr )
0007E4 9908rrrr        2753         MOV.W   R0,#SOF( _newTablePtr )
0007E8 9B08rrrr        2754         MOV.W   [R0+],#SOF( _PALSplitFieldTable )
0007EC 9A08rrrr        2755         MOV.W   [R0],#SEG( _PALSplitFieldTable )
                       2756 ; cbar.c   1049                         break;
                       2758         BR      _140
0007F0 D50226         +2758         JMP.L   _140
                       2759 ; cbar.c   1050                         
                       2760 ; cbar.c   1051                 case Red75:
0007F4                 2762 _70:
                       2763 ; cbar.c   1052                         if ( system < NTSC_US)
0007F4 99440002        2765         CMP.W   R4,#02H
0007F8 FA0E            2766         BGE     _71
                       2767 ; cbar.c   1053                         {
                       2768 ; cbar.c   1054                                 SRAMVideoLoad( dRed75_625, SRAMBank1);
0007FA 910807          2770         MOV.B   R0L,#07H
0007FD 911810          2771         MOV.B   R0H,#010H
000800 C5FC29          2772         CALL    _SRAMVideoLoad
                       2773 ; cbar.c   1055 
                       2774 ; cbar.c   1056                                 newTablePtr = &PALFullFieldTable[0];
000803 964842rr        2776         MOV.B   ES,#SEG( _newTablePtr )
000807 9908rrrr        2777         MOV.W   R0,#SOF( _newTablePtr )
00080B 9B08rrrr        2778         MOV.W   [R0+],#SOF( _PALFullFieldTable )
00080F 9A08rrrr        2779         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2780 ; cbar.c   1057                         }
                       2782         BR      _140
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  40

ADDR   CODE            LINE SOURCELINE
000813 D50214         +2782         JMP.L   _140
000813 D50214         +2782         JMP.L   _140
000816                 2783 _71:
                       2784 ; cbar.c   1058                         else
                       2785 ; cbar.c   1059                         {
                       2786 ; cbar.c   1060                                 SRAMVideoLoad( dRed75_525, SRAMBank1);
000816 910808          2788         MOV.B   R0L,#08H
000819 911810          2789         MOV.B   R0H,#010H
00081C C5FC1B          2790         CALL    _SRAMVideoLoad
                       2791 ; cbar.c   1061 
                       2792 ; cbar.c   1062                                 newTablePtr = &NTSCFullFieldTable[0];
00081F 964842rr        2794         MOV.B   ES,#SEG( _newTablePtr )
000823 9908rrrr        2795         MOV.W   R0,#SOF( _newTablePtr )
000827 9B08rrrr        2796         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
00082B 9A08rrrr        2797         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2798 ; cbar.c   1063                         }
                       2799 ; cbar.c   1064                         break;
                       2801         BR      _140
00082F D50206         +2801         JMP.L   _140
                       2802 ; cbar.c   1065 
                       2803 ; cbar.c   1066                 case Multiburst:
000832                 2805 _72:
                       2806 ; cbar.c   1067                         if ( system < NTSC_US)
000832 99440002        2808         CMP.W   R4,#02H
000836 FA0E            2809         BGE     _73
                       2810 ; cbar.c   1068                         {
                       2811 ; cbar.c   1069                                 SRAMVideoLoad( dChroma_Multiburst, SRAMBank1);
000838 910809          2813         MOV.B   R0L,#09H
00083B 911810          2814         MOV.B   R0H,#010H
00083E C5FC0A          2815         CALL    _SRAMVideoLoad
                       2816 ; cbar.c   1070 
                       2817 ; cbar.c   1071                                 newTablePtr = &PALFullFieldTable[0];
000841 964842rr        2819         MOV.B   ES,#SEG( _newTablePtr )
000845 9908rrrr        2820         MOV.W   R0,#SOF( _newTablePtr )
000849 9B08rrrr        2821         MOV.W   [R0+],#SOF( _PALFullFieldTable )
00084D 9A08rrrr        2822         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2823 ; cbar.c   1072                         }
                       2825         BR      _140
000851 D501F5         +2825         JMP.L   _140
000851 D501F5         +2825         JMP.L   _140
000854                 2826 _73:
                       2827 ; cbar.c   1073                         else
                       2828 ; cbar.c   1074                         {
                       2829 ; cbar.c   1075                                 SRAMVideoLoad( dFCC_Multiburst_525, SRAMBank1);
000854 91080A          2831         MOV.B   R0L,#0AH
000857 911810          2832         MOV.B   R0H,#010H
00085A C5FBFC          2833         CALL    _SRAMVideoLoad
                       2834 ; cbar.c   1076 
                       2835 ; cbar.c   1077                                 newTablePtr = &NTSCFullFieldTable[0];
00085D 964842rr        2837         MOV.B   ES,#SEG( _newTablePtr )
000861 9908rrrr        2838         MOV.W   R0,#SOF( _newTablePtr )
000865 9B08rrrr        2839         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000869 9A08rrrr        2840         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2841 ; cbar.c   1078                         }
                       2842 ; cbar.c   1079                         break;
                       2844         BR      _140
00086D D501E7         +2844         JMP.L   _140
                       2845 ; cbar.c   1080 
                       2846 ; cbar.c   1081                 case CCIR18:
000870                 2848 _74:
                       2849 ; cbar.c   1082                         SRAMVideoLoad( dCCIR18_625, SRAMBank1);
000870 91082F          2851         MOV.B   R0L,#02FH
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  41

ADDR   CODE            LINE SOURCELINE
000873 911810          2852         MOV.B   R0H,#010H
000876 C5FBEE          2853         CALL    _SRAMVideoLoad
                       2854 ; cbar.c   1083 
                       2855 ; cbar.c   1084                         newTablePtr = &PALFullFieldTable[0];
000879 964842rr        2857         MOV.B   ES,#SEG( _newTablePtr )
00087D 9908rrrr        2858         MOV.W   R0,#SOF( _newTablePtr )
000881 9B08rrrr        2859         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000885 9A08rrrr        2860         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2861 ; cbar.c   1085                         break;
                       2863         BR      _140
000889 D501D9         +2863         JMP.L   _140
                       2864 ; cbar.c   1086 
                       2865 ; cbar.c   1087                 case Window10:
00088C                 2867 _75:
                       2868 ; cbar.c   1088                         SRAMVideoLoad( dWindow50Marker, SRAMBank1);
00088C 91081B          2870         MOV.B   R0L,#01BH
00088F 911810          2871         MOV.B   R0H,#010H
000892 C5FBE0          2872         CALL    _SRAMVideoLoad
                       2873 ; cbar.c   1089                         SRAMVideoLoad( dMarkerLine, SRAMBank2);
000895 911814          2875         MOV.B   R0H,#014H
000898 91081C          2876         MOV.B   R0L,#01CH
00089B C5FBDB          2877         CALL    _SRAMVideoLoad
                       2878 ; cbar.c   1090                         SRAMVideoLoad( dMarker10, SRAMBank3);
00089E 91082C          2880         MOV.B   R0L,#02CH
0008A1 911818          2881         MOV.B   R0H,#018H
0008A4 C5FBD7          2882         CALL    _SRAMVideoLoad
                       2883 ; cbar.c   1091                         SRAMVideoLoad( dWindow10, SRAMBank4);
0008A7 91082B          2885         MOV.B   R0L,#02BH
0008AA 91181C          2886         MOV.B   R0H,#01CH
0008AD C5FBD2          2887         CALL    _SRAMVideoLoad
                       2888 ; cbar.c   1092 
                       2889 ; cbar.c   1093                         if ( system < NTSC_US)
0008B0 99440002        2891         CMP.W   R4,#02H
0008B4 FA0A            2892         BGE     _76
                       2893 ; cbar.c   1094                                 newTablePtr = &PALWindowTable[0];
0008B6 964842rr        2895         MOV.B   ES,#SEG( _newTablePtr )
0008BA 9908rrrr        2896         MOV.W   R0,#SOF( _newTablePtr )
0008BE 9B08rrrr        2897         MOV.W   [R0+],#SOF( _PALWindowTable )
0008C2 9A08rrrr        2898         MOV.W   [R0],#SEG( _PALWindowTable )
                       2899         BR      _140
0008C6 D501BB         +2899         JMP.L   _140
0008C6 D501BB00       +2899         JMP.L   _140
0008CA                 2900 _76:
                       2901 ; cbar.c   1095                         else
                       2902 ; cbar.c   1096                                 newTablePtr = &NTSCWindowTable[0];
0008CA 964842rr        2904         MOV.B   ES,#SEG( _newTablePtr )
0008CE 9908rrrr        2905         MOV.W   R0,#SOF( _newTablePtr )
0008D2 9B08rrrr        2906         MOV.W   [R0+],#SOF( _NTSCWindowTable )
0008D6 9A08rrrr        2907         MOV.W   [R0],#SEG( _NTSCWindowTable )
                       2908 ; cbar.c   1097                         break;
                       2910         BR      _140
0008DA D501B1         +2910         JMP.L   _140
                       2911 ; cbar.c   1098 
                       2912 ; cbar.c   1099                 case Window15:
0008DE                 2914 _77:
                       2915 ; cbar.c   1100                         SRAMVideoLoad( dWindow50Marker, SRAMBank1);
0008DE 91081B          2917         MOV.B   R0L,#01BH
0008E1 911810          2918         MOV.B   R0H,#010H
0008E4 C5FBB7          2919         CALL    _SRAMVideoLoad
                       2920 ; cbar.c   1101                         SRAMVideoLoad( dMarkerLine, SRAMBank2);
0008E7 911814          2922         MOV.B   R0H,#014H
0008EA 91081C          2923         MOV.B   R0L,#01CH
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  42

ADDR   CODE            LINE SOURCELINE
0008ED C5FBB2          2924         CALL    _SRAMVideoLoad
                       2925 ; cbar.c   1102                         SRAMVideoLoad( dMarker15, SRAMBank3);
0008F0 91081E          2927         MOV.B   R0L,#01EH
0008F3 911818          2928         MOV.B   R0H,#018H
0008F6 C5FBAE          2929         CALL    _SRAMVideoLoad
                       2930 ; cbar.c   1103                         SRAMVideoLoad( dWindow15, SRAMBank4);
0008F9 91081D          2932         MOV.B   R0L,#01DH
0008FC 91181C          2933         MOV.B   R0H,#01CH
0008FF C5FBA9          2934         CALL    _SRAMVideoLoad
                       2935 ; cbar.c   1104 
                       2936 ; cbar.c   1105                         if ( system < NTSC_US)                                   
                                                                                    
000902 99440002        2938         CMP.W   R4,#02H
000906 FA0A            2939         BGE     _78
                       2940 ; cbar.c   1106                                 newTablePtr = &PALWindowTable[0];
000908 964842rr        2942         MOV.B   ES,#SEG( _newTablePtr )
00090C 9908rrrr        2943         MOV.W   R0,#SOF( _newTablePtr )
000910 9B08rrrr        2944         MOV.W   [R0+],#SOF( _PALWindowTable )
000914 9A08rrrr        2945         MOV.W   [R0],#SEG( _PALWindowTable )
                       2946         BR      _140
000918 D50192         +2946         JMP.L   _140
000918 D5019200       +2946         JMP.L   _140
00091C                 2947 _78:
                       2948 ; cbar.c   1107                         else
                       2949 ; cbar.c   1108                                 newTablePtr = &NTSCWindowTable[0];
00091C 964842rr        2951         MOV.B   ES,#SEG( _newTablePtr )
000920 9908rrrr        2952         MOV.W   R0,#SOF( _newTablePtr )
000924 9B08rrrr        2953         MOV.W   [R0+],#SOF( _NTSCWindowTable )
000928 9A08rrrr        2954         MOV.W   [R0],#SEG( _NTSCWindowTable )
                       2955 ; cbar.c   1109                         break;
                       2957         BR      _140
00092C D50188         +2957         JMP.L   _140
                       2958 ; cbar.c   1110 
                       2959 ; cbar.c   1111                 case Window20:
000930                 2961 _79:
                       2962 ; cbar.c   1112                         SRAMVideoLoad( dWindow50Marker, SRAMBank1);
000930 91081B          2964         MOV.B   R0L,#01BH
000933 911810          2965         MOV.B   R0H,#010H
000936 C5FB8E          2966         CALL    _SRAMVideoLoad
                       2967 ; cbar.c   1113                         SRAMVideoLoad( dMarkerLine, SRAMBank2);
000939 911814          2969         MOV.B   R0H,#014H
00093C 91081C          2970         MOV.B   R0L,#01CH
00093F C5FB89          2971         CALL    _SRAMVideoLoad
                       2972 ; cbar.c   1114                         SRAMVideoLoad( dMarker20, SRAMBank3);
000942 910820          2974         MOV.B   R0L,#020H
000945 911818          2975         MOV.B   R0H,#018H
000948 C5FB85          2976         CALL    _SRAMVideoLoad
                       2977 ; cbar.c   1115                         SRAMVideoLoad( dWindow20, SRAMBank4);
00094B 91081F          2979         MOV.B   R0L,#01FH
00094E 91181C          2980         MOV.B   R0H,#01CH
000951 C5FB80          2981         CALL    _SRAMVideoLoad
                       2982 ; cbar.c   1116 
                       2983 ; cbar.c   1117                         if ( system < NTSC_US)
000954 99440002        2985         CMP.W   R4,#02H
000958 FA0A            2986         BGE     _80
                       2987 ; cbar.c   1118                                 newTablePtr = &PALWindowTable[0];
00095A 964842rr        2989         MOV.B   ES,#SEG( _newTablePtr )
00095E 9908rrrr        2990         MOV.W   R0,#SOF( _newTablePtr )
000962 9B08rrrr        2991         MOV.W   [R0+],#SOF( _PALWindowTable )
000966 9A08rrrr        2992         MOV.W   [R0],#SEG( _PALWindowTable )
                       2993         BR      _140
00096A D50169         +2993         JMP.L   _140
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  43

ADDR   CODE            LINE SOURCELINE
00096A D5016900       +2993         JMP.L   _140
00096E                 2994 _80:
                       2995 ; cbar.c   1119                         else
                       2996 ; cbar.c   1120                                 newTablePtr = &NTSCWindowTable[0];
00096E 964842rr        2998         MOV.B   ES,#SEG( _newTablePtr )
000972 9908rrrr        2999         MOV.W   R0,#SOF( _newTablePtr )
000976 9B08rrrr        3000         MOV.W   [R0+],#SOF( _NTSCWindowTable )
00097A 9A08rrrr        3001         MOV.W   [R0],#SEG( _NTSCWindowTable )
                       3002 ; cbar.c   1121                         break;
                       3004         BR      _140
00097E D5015F         +3004         JMP.L   _140
                       3005 ; cbar.c   1122 
                       3006 ; cbar.c   1123                 case Window100:
000982                 3008 _81:
                       3009 ; cbar.c   1124                         SRAMVideoLoad( dWindow50Marker, SRAMBank1);
000982 91081B          3011         MOV.B   R0L,#01BH
000985 911810          3012         MOV.B   R0H,#010H
000988 C5FB65          3013         CALL    _SRAMVideoLoad
                       3014 ; cbar.c   1125                         SRAMVideoLoad( dMarkerLine, SRAMBank2);
00098B 911814          3016         MOV.B   R0H,#014H
00098E 91081C          3017         MOV.B   R0L,#01CH
000991 C5FB60          3018         CALL    _SRAMVideoLoad
                       3019 ; cbar.c   1126                         SRAMVideoLoad( dMarker100, SRAMBank3);
000994 910822          3021         MOV.B   R0L,#022H
000997 911818          3022         MOV.B   R0H,#018H
00099A C5FB5C          3023         CALL    _SRAMVideoLoad
                       3024 ; cbar.c   1127                         SRAMVideoLoad( dWindow100, SRAMBank4);
00099D 910821          3026         MOV.B   R0L,#021H
0009A0 91181C          3027         MOV.B   R0H,#01CH
0009A3 C5FB57          3028         CALL    _SRAMVideoLoad
                       3029 ; cbar.c   1128 
                       3030 ; cbar.c   1129                         if ( system < NTSC_US)
0009A6 99440002        3032         CMP.W   R4,#02H
0009AA FA0A            3033         BGE     _82
                       3034 ; cbar.c   1130                                 newTablePtr = &PALWindowTable[0];
0009AC 964842rr        3036         MOV.B   ES,#SEG( _newTablePtr )
0009B0 9908rrrr        3037         MOV.W   R0,#SOF( _newTablePtr )
0009B4 9B08rrrr        3038         MOV.W   [R0+],#SOF( _PALWindowTable )
0009B8 9A08rrrr        3039         MOV.W   [R0],#SEG( _PALWindowTable )
                       3040         BR      _140
0009BC D50140         +3040         JMP.L   _140
0009BC D5014000       +3040         JMP.L   _140
0009C0                 3041 _82:
                       3042 ; cbar.c   1131                         else
                       3043 ; cbar.c   1132                                 newTablePtr = &NTSCWindowTable[0];
0009C0 964842rr        3045         MOV.B   ES,#SEG( _newTablePtr )
0009C4 9908rrrr        3046         MOV.W   R0,#SOF( _newTablePtr )
0009C8 9B08rrrr        3047         MOV.W   [R0+],#SOF( _NTSCWindowTable )
0009CC 9A08rrrr        3048         MOV.W   [R0],#SEG( _NTSCWindowTable )
                       3049 ; cbar.c   1133                         break;
                       3051         BR      _140
0009D0 D50136         +3051         JMP.L   _140
                       3052 ; cbar.c   1134 
                       3053 ; cbar.c   1135                 case BlWh15kHz:
0009D4                 3055 _83:
                       3056 ; cbar.c   1136                         if ( system < NTSC_US)                                   
                                                                                    
0009D4 99440002        3058         CMP.W   R4,#02H
0009D8 FA0E            3059         BGE     _84
                       3060 ; cbar.c   1137                         {
                       3061 ; cbar.c   1138                                 SRAMVideoLoad( dkHz15BlWh_625, SRAMBank1);
0009DA 91082D          3063         MOV.B   R0L,#02DH
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  44

ADDR   CODE            LINE SOURCELINE
0009DD 911810          3064         MOV.B   R0H,#010H
0009E0 C5FB39          3065         CALL    _SRAMVideoLoad
                       3066 ; cbar.c   1139 
                       3067 ; cbar.c   1140                                 newTablePtr = &PALFullFieldTable[0];
0009E3 964842rr        3069         MOV.B   ES,#SEG( _newTablePtr )
0009E7 9908rrrr        3070         MOV.W   R0,#SOF( _newTablePtr )
0009EB 9B08rrrr        3071         MOV.W   [R0+],#SOF( _PALFullFieldTable )
0009EF 9A08rrrr        3072         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       3073 ; cbar.c   1141                         }
                       3075         BR      _140
0009F3 D50124         +3075         JMP.L   _140
0009F3 D50124         +3075         JMP.L   _140
0009F6                 3076 _84:
                       3077 ; cbar.c   1142                         else
                       3078 ; cbar.c   1143                         {
                       3079 ; cbar.c   1144                                 SRAMVideoLoad( dkHz15BlWh_525, SRAMBank1);
0009F6 91082E          3081         MOV.B   R0L,#02EH
0009F9 911810          3082         MOV.B   R0H,#010H
0009FC C5FB2B          3083         CALL    _SRAMVideoLoad
                       3084 ; cbar.c   1145 
                       3085 ; cbar.c   1146                                 newTablePtr = &NTSCFullFieldTable[0];
0009FF 964842rr        3087         MOV.B   ES,#SEG( _newTablePtr )
000A03 9908rrrr        3088         MOV.W   R0,#SOF( _newTablePtr )
000A07 9B08rrrr        3089         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000A0B 9A08rrrr        3090         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3091 ; cbar.c   1147                         }
                       3092 ; cbar.c   1148                         break;
                       3094         BR      _140
000A0F D50116         +3094         JMP.L   _140
                       3095 ; cbar.c   1149 
                       3096 ; cbar.c   1150                 case White100:
000A12                 3098 _85:
                       3099 ; cbar.c   1151                         if ( system < NTSC_US)
000A12 99440002        3101         CMP.W   R4,#02H
000A16 FA0E            3102         BGE     _86
                       3103 ; cbar.c   1152                         {
                       3104 ; cbar.c   1153                                 SRAMVideoLoad( dWhiteLine_625, SRAMBank1);
000A18 91080B          3106         MOV.B   R0L,#0BH
000A1B 911810          3107         MOV.B   R0H,#010H
000A1E C5FB1A          3108         CALL    _SRAMVideoLoad
                       3109 ; cbar.c   1154 
                       3110 ; cbar.c   1155                                 newTablePtr = &PALFullFieldTable[0];
000A21 964842rr        3112         MOV.B   ES,#SEG( _newTablePtr )
000A25 9908rrrr        3113         MOV.W   R0,#SOF( _newTablePtr )
000A29 9B08rrrr        3114         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000A2D 9A08rrrr        3115         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       3116 ; cbar.c   1156                         }
                       3118         BR      _140
000A31 D50105         +3118         JMP.L   _140
000A31 D50105         +3118         JMP.L   _140
000A34                 3119 _86:
                       3120 ; cbar.c   1157                         else
                       3121 ; cbar.c   1158                         {
                       3122 ; cbar.c   1159                                 SRAMVideoLoad( dWhiteLine_525, SRAMBank1);
000A34 91080D          3124         MOV.B   R0L,#0DH
000A37 911810          3125         MOV.B   R0H,#010H
000A3A C5FB0C          3126         CALL    _SRAMVideoLoad
                       3127 ; cbar.c   1160 
                       3128 ; cbar.c   1161                                 newTablePtr = &NTSCFullFieldTable[0];
000A3D 964842rr        3130         MOV.B   ES,#SEG( _newTablePtr )
000A41 9908rrrr        3131         MOV.W   R0,#SOF( _newTablePtr )
000A45 9B08rrrr        3132         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  45

ADDR   CODE            LINE SOURCELINE
000A49 9A08rrrr        3133         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3134 ; cbar.c   1162                         }
                       3135 ; cbar.c   1163                         break;
                       3137         BR      _140
000A4D D500F7         +3137         JMP.L   _140
                       3138 ; cbar.c   1164 
                       3139 ; cbar.c   1165                 case Black:
000A50                 3141 _87:
                       3142 ; cbar.c   1166                         if ( system < NTSC_US)
000A50 99440002        3144         CMP.W   R4,#02H
000A54 FA0A            3145         BGE     _88
                       3146 ; cbar.c   1167                                 newTablePtr = &PALBlackTable[0];
000A56 964842rr        3148         MOV.B   ES,#SEG( _newTablePtr )
000A5A 9908rrrr        3149         MOV.W   R0,#SOF( _newTablePtr )
000A5E 9B08rrrr        3150         MOV.W   [R0+],#SOF( _PALBlackTable )
000A62 9A08rrrr        3151         MOV.W   [R0],#SEG( _PALBlackTable )
                       3152         BR      _140
000A66 D500EB         +3152         JMP.L   _140
000A66 D500EB00       +3152         JMP.L   _140
000A6A                 3153 _88:
                       3154 ; cbar.c   1168                         else
                       3155 ; cbar.c   1169                                 newTablePtr = &NTSCBlackTable[0];
000A6A 964842rr        3157         MOV.B   ES,#SEG( _newTablePtr )
000A6E 9908rrrr        3158         MOV.W   R0,#SOF( _newTablePtr )
000A72 9B08rrrr        3159         MOV.W   [R0+],#SOF( _NTSCBlackTable )
000A76 9A08rrrr        3160         MOV.W   [R0],#SEG( _NTSCBlackTable )
                       3161 ; cbar.c   1170                         break;
                       3163         BR      _140
000A7A D500E1         +3163         JMP.L   _140
                       3164 ; cbar.c   1171 
                       3165 ; cbar.c   1172                 case CheckField:
000A7E                 3167 _89:
                       3168 ; cbar.c   1173                         SRAMVideoLoad( dSDI_test_line1, SRAMBank1);
000A7E 910825          3170         MOV.B   R0L,#025H
000A81 911810          3171         MOV.B   R0H,#010H
000A84 C5FAE7          3172         CALL    _SRAMVideoLoad
                       3173 ; cbar.c   1174                         SRAMVideoLoad( dSDI_test_line2, SRAMBank2);
000A87 910826          3175         MOV.B   R0L,#026H
000A8A 911814          3176         MOV.B   R0H,#014H
000A8D C5FAE2          3177         CALL    _SRAMVideoLoad
                       3178 ; cbar.c   1175                         SRAMVideoLoad( dSDI_test_line3, SRAMBank3);
000A90 910827          3180         MOV.B   R0L,#027H
000A93 911818          3181         MOV.B   R0H,#018H
000A96 C5FADE          3182         CALL    _SRAMVideoLoad
                       3183 ; cbar.c   1176 
                       3184 ; cbar.c   1177                         if ( system < NTSC_US)
000A99 99440002        3186         CMP.W   R4,#02H
000A9D FA0A            3187         BGE     _90
                       3188 ; cbar.c   1178                                 newTablePtr = &PALCheckfieldTable[0];
000A9F 964842rr        3190         MOV.B   ES,#SEG( _newTablePtr )
000AA3 9908rrrr        3191         MOV.W   R0,#SOF( _newTablePtr )
000AA7 9B08rrrr        3192         MOV.W   [R0+],#SOF( _PALCheckfieldTable )
000AAB 9A08rrrr        3193         MOV.W   [R0],#SEG( _PALCheckfieldTable )
                       3194         BR      _140
000AAF D500C6         +3194         JMP.L   _140
000AAF D500C6         +3194         JMP.L   _140
000AB2                 3195 _90:
                       3196 ; cbar.c   1179                         else
                       3197 ; cbar.c   1180                                 newTablePtr = &NTSCCheckfieldTable[0];
000AB2 964842rr        3199         MOV.B   ES,#SEG( _newTablePtr )
000AB6 9908rrrr        3200         MOV.W   R0,#SOF( _newTablePtr )
000ABA 9B08rrrr        3201         MOV.W   [R0+],#SOF( _NTSCCheckfieldTable )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  46

ADDR   CODE            LINE SOURCELINE
000ABE 9A08rrrr        3202         MOV.W   [R0],#SEG( _NTSCCheckfieldTable )
                       3203 ; cbar.c   1181                         break;
                       3205         BR      _140
000AC2 D500BD         +3205         JMP.L   _140
                       3206 ; cbar.c   1182 
                       3207 ; cbar.c   1183                 case DigitalGrey:
000AC6                 3209 _91:
                       3210 ; cbar.c   1184                         if ( system < NTSC_US)
000AC6 99440002        3212         CMP.W   R4,#02H
000ACA FA0E            3213         BGE     _92
                       3214 ; cbar.c   1185                         {
                       3215 ; cbar.c   1186                                 SRAMVideoLoad( dDigitalGrey_625, SRAMBank1);
000ACC 910823          3217         MOV.B   R0L,#023H
000ACF 911810          3218         MOV.B   R0H,#010H
000AD2 C5FAC0          3219         CALL    _SRAMVideoLoad
                       3220 ; cbar.c   1187 
                       3221 ; cbar.c   1188                                 newTablePtr = &PALFullFieldTable[0];
000AD5 964842rr        3223         MOV.B   ES,#SEG( _newTablePtr )
000AD9 9908rrrr        3224         MOV.W   R0,#SOF( _newTablePtr )
000ADD 9B08rrrr        3225         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000AE1 9A08rrrr        3226         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       3227 ; cbar.c   1189                         }
                       3229         BR      _140
000AE5 D500AB         +3229         JMP.L   _140
000AE5 D500AB         +3229         JMP.L   _140
000AE8                 3230 _92:
                       3231 ; cbar.c   1190                         else
                       3232 ; cbar.c   1191                         {
                       3233 ; cbar.c   1192                                 SRAMVideoLoad( dDigitalGrey_525, SRAMBank1);
000AE8 910824          3235         MOV.B   R0L,#024H
000AEB 911810          3236         MOV.B   R0H,#010H
000AEE C5FAB2          3237         CALL    _SRAMVideoLoad
                       3238 ; cbar.c   1193 
                       3239 ; cbar.c   1194                                 newTablePtr = &NTSCFullFieldTable[0];
000AF1 964842rr        3241         MOV.B   ES,#SEG( _newTablePtr )
000AF5 9908rrrr        3242         MOV.W   R0,#SOF( _newTablePtr )
000AF9 9B08rrrr        3243         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000AFD 9A08rrrr        3244         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3245 ; cbar.c   1195                         }
                       3246 ; cbar.c   1196                         break;
                       3248         BR      _140
000B01 D5009D         +3248         JMP.L   _140
                       3249 ; cbar.c   1197 
                       3250 ; cbar.c   1198                 case Stair5:
000B04                 3252 _93:
                       3253 ; cbar.c   1199                         if ( system < NTSC_US)
000B04 99440002        3255         CMP.W   R4,#02H
000B08 FA0E            3256         BGE     _94
                       3257 ; cbar.c   1200                         {
                       3258 ; cbar.c   1201                                 SRAMVideoLoad( dGreyScale5_625, SRAMBank1);
000B0A 910817          3260         MOV.B   R0L,#017H
000B0D 911810          3261         MOV.B   R0H,#010H
000B10 C5FAA1          3262         CALL    _SRAMVideoLoad
                       3263 ; cbar.c   1202 
                       3264 ; cbar.c   1203                                 newTablePtr = &PALFullFieldTable[0];
000B13 964842rr        3266         MOV.B   ES,#SEG( _newTablePtr )
000B17 9908rrrr        3267         MOV.W   R0,#SOF( _newTablePtr )
000B1B 9B08rrrr        3268         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000B1F 9A08rrrr        3269         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       3270 ; cbar.c   1204                         }
                       3272         BR      _140
000B23 D5008C         +3272         JMP.L   _140
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  47

ADDR   CODE            LINE SOURCELINE
000B23 D5008C         +3272         JMP.L   _140
000B26                 3273 _94:
                       3274 ; cbar.c   1205                         else
                       3275 ; cbar.c   1206                         {
                       3276 ; cbar.c   1207                                 SRAMVideoLoad( dGreyScale5_525, SRAMBank1);
000B26 910818          3278         MOV.B   R0L,#018H
000B29 911810          3279         MOV.B   R0H,#010H
000B2C C5FA93          3280         CALL    _SRAMVideoLoad
                       3281 ; cbar.c   1208 
                       3282 ; cbar.c   1209                                 newTablePtr = &NTSCFullFieldTable[0];
000B2F 964842rr        3284         MOV.B   ES,#SEG( _newTablePtr )
000B33 9908rrrr        3285         MOV.W   R0,#SOF( _newTablePtr )
000B37 9B08rrrr        3286         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000B3B 9A08rrrr        3287         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3288 ; cbar.c   1210                         }
                       3289 ; cbar.c   1211                         break;
000B3F FE7F            3291         BR      _140
                       3292 ; cbar.c   1212 
                       3293 ; cbar.c   1213                 case Stair10:
000B42                 3295 _95:
                       3296 ; cbar.c   1214                         if ( system < NTSC_US)
000B42 99440002        3298         CMP.W   R4,#02H
000B46 FA0E            3299         BGE     _96
                       3300 ; cbar.c   1215                         {
                       3301 ; cbar.c   1216                                 SRAMVideoLoad( dGreyScale10_625, SRAMBank1);
000B48 910819          3303         MOV.B   R0L,#019H
000B4B 911810          3304         MOV.B   R0H,#010H
000B4E C5FA82          3305         CALL    _SRAMVideoLoad
                       3306 ; cbar.c   1217 
                       3307 ; cbar.c   1218                                 newTablePtr = &PALFullFieldTable[0];
000B51 964842rr        3309         MOV.B   ES,#SEG( _newTablePtr )
000B55 9908rrrr        3310         MOV.W   R0,#SOF( _newTablePtr )
000B59 9B08rrrr        3311         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000B5D 9A08rrrr        3312         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       3313 ; cbar.c   1219                         }
000B61 FE6E            3315         BR      _140
000B61 FE6E00          3315         BR      _140
000B64                 3316 _96:
                       3317 ; cbar.c   1220                         else
                       3318 ; cbar.c   1221                         {
                       3319 ; cbar.c   1222                                 SRAMVideoLoad( dGreyScale10_525, SRAMBank1);
000B64 91081A          3321         MOV.B   R0L,#01AH
000B67 911810          3322         MOV.B   R0H,#010H
000B6A C5FA74          3323         CALL    _SRAMVideoLoad
                       3324 ; cbar.c   1223 
                       3325 ; cbar.c   1224                                 newTablePtr = &NTSCFullFieldTable[0];
000B6D 964842rr        3327         MOV.B   ES,#SEG( _newTablePtr )
000B71 9908rrrr        3328         MOV.W   R0,#SOF( _newTablePtr )
000B75 9B08rrrr        3329         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000B79 9A08rrrr        3330         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3331 ; cbar.c   1225                         }
                       3332 ; cbar.c   1226                         break;
000B7D FE60            3334         BR      _140
                       3335 ; cbar.c   1227 
                       3336 ; cbar.c   1228                 case Crosshatch:
000B80                 3338 _97:
                       3339 ; cbar.c   1229                         if ( system < NTSC_US)
000B80 99440002        3341         CMP.W   R4,#02H
000B84 FA12            3342         BGE     _98
                       3343 ; cbar.c   1230                         {
                       3344 ; cbar.c   1231                                 SRAMVideoLoad( dCrossHatch19_625, SRAMBank1);
000B86 91080C          3346         MOV.B   R0L,#0CH
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  48

ADDR   CODE            LINE SOURCELINE
000B89 911810          3347         MOV.B   R0H,#010H
000B8C C5FA63          3348         CALL    _SRAMVideoLoad
                       3349 ; cbar.c   1232                                 SRAMVideoLoad( dWhiteLine_625, SRAMBank2);
000B8F 91080B          3351         MOV.B   R0L,#0BH
000B92 911814          3352         MOV.B   R0H,#014H
000B95 C5FA5E          3353         CALL    _SRAMVideoLoad
                       3354 ; cbar.c   1233 
                       3355 ; cbar.c   1234                                 newTablePtr = &PALCrosshatchTable[0];
000B98 964842rr        3357         MOV.B   ES,#SEG( _newTablePtr )
000B9C 9908rrrr        3358         MOV.W   R0,#SOF( _newTablePtr )
000BA0 9B08rrrr        3359         MOV.W   [R0+],#SOF( _PALCrosshatchTable )
000BA4 9A08rrrr        3360         MOV.W   [R0],#SEG( _PALCrosshatchTable )
                       3361 ; cbar.c   1235                         }
000BA8 FE4A            3363         BR      _140
000BA8 FE4A            3363         BR      _140
000BAA                 3364 _98:
                       3365 ; cbar.c   1236                         else
                       3366 ; cbar.c   1237                         {
                       3367 ; cbar.c   1238                                 SRAMVideoLoad( dCrossHatch17_525, SRAMBank1);
000BAA 91080E          3369         MOV.B   R0L,#0EH
000BAD 911810          3370         MOV.B   R0H,#010H
000BB0 C5FA51          3371         CALL    _SRAMVideoLoad
                       3372 ; cbar.c   1239                                 SRAMVideoLoad( dWhiteLine_525, SRAMBank2);
000BB3 91080D          3374         MOV.B   R0L,#0DH
000BB6 911814          3375         MOV.B   R0H,#014H
000BB9 C5FA4C          3376         CALL    _SRAMVideoLoad
                       3377 ; cbar.c   1240 
                       3378 ; cbar.c   1241                                 newTablePtr = &NTSCCrosshatchTable[0];
000BBC 964842rr        3380         MOV.B   ES,#SEG( _newTablePtr )
000BC0 9908rrrr        3381         MOV.W   R0,#SOF( _newTablePtr )
000BC4 9B08rrrr        3382         MOV.W   [R0+],#SOF( _NTSCCrosshatchTable )
000BC8 9A08rrrr        3383         MOV.W   [R0],#SEG( _NTSCCrosshatchTable )
                       3384 ; cbar.c   1242                         }
                       3385 ; cbar.c   1243                         break;
000BCC FE38            3387         BR      _140
                       3388 ; cbar.c   1244 
                       3389 ; cbar.c   1245                 case PLUGE:
000BCE                 3391 _99:
                       3392 ; cbar.c   1246                         if ( system < NTSC_US)
000BCE 99440002        3394         CMP.W   R4,#02H
000BD2 FA1B            3395         BGE     _100
                       3396 ; cbar.c   1247                         {
                       3397 ; cbar.c   1248                                 SRAMVideoLoad( dPlugeWhite_625, SRAMBank1);
000BD4 91080F          3399         MOV.B   R0L,#0FH
000BD7 911810          3400         MOV.B   R0H,#010H
000BDA C5FA3C          3401         CALL    _SRAMVideoLoad
                       3402 ; cbar.c   1249                                 SRAMVideoLoad( dPlugeGreyC_625, SRAMBank2);
000BDD 911814          3404         MOV.B   R0H,#014H
000BE0 910810          3405         MOV.B   R0L,#010H
000BE3 C5FA37          3406         CALL    _SRAMVideoLoad
                       3407 ; cbar.c   1250                                 SRAMVideoLoad( dPlugeGreyD_625, SRAMBank3);
000BE6 910811          3409         MOV.B   R0L,#011H
000BE9 911818          3410         MOV.B   R0H,#018H
000BEC C5FA33          3411         CALL    _SRAMVideoLoad
                       3412 ; cbar.c   1251                                 SRAMVideoLoad( dPlugeGreyE_625, SRAMBank4);
000BEF 910812          3414         MOV.B   R0L,#012H
000BF2 91181C          3415         MOV.B   R0H,#01CH
000BF5 C5FA2E          3416         CALL    _SRAMVideoLoad
                       3417 ; cbar.c   1252 
                       3418 ; cbar.c   1253                                 newTablePtr = &PALPLUGETable[0];
000BF8 964842rr        3420         MOV.B   ES,#SEG( _newTablePtr )
000BFC 9908rrrr        3421         MOV.W   R0,#SOF( _newTablePtr )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  49

ADDR   CODE            LINE SOURCELINE
000C00 9B08rrrr        3422         MOV.W   [R0+],#SOF( _PALPLUGETable )
000C04 9A08rrrr        3423         MOV.W   [R0],#SEG( _PALPLUGETable )
                       3424 ; cbar.c   1254                         }
000C08 FE1A            3426         BR      _140
000C08 FE1A            3426         BR      _140
000C0A                 3427 _100:
                       3428 ; cbar.c   1255                         else
                       3429 ; cbar.c   1256                         {
                       3430 ; cbar.c   1257                                 SRAMVideoLoad( dPlugeWhite_525, SRAMBank1);
000C0A 910813          3432         MOV.B   R0L,#013H
000C0D 911810          3433         MOV.B   R0H,#010H
000C10 C5FA21          3434         CALL    _SRAMVideoLoad
                       3435 ; cbar.c   1258                                 SRAMVideoLoad( dPlugeGreyC_525, SRAMBank2);
000C13 911814          3437         MOV.B   R0H,#014H
000C16 8101            3438         MOV.B   R0L,R0H
000C18 C5FA1D          3439         CALL    _SRAMVideoLoad
                       3440 ; cbar.c   1259                                 SRAMVideoLoad( dPlugeGreyD_525, SRAMBank3);
000C1B 910815          3442         MOV.B   R0L,#015H
000C1E 911818          3443         MOV.B   R0H,#018H
000C21 C5FA18          3444         CALL    _SRAMVideoLoad
                       3445 ; cbar.c   1260                                 SRAMVideoLoad( dPlugeGreyE_525, SRAMBank4);
000C24 910816          3447         MOV.B   R0L,#016H
000C27 91181C          3448         MOV.B   R0H,#01CH
000C2A C5FA14          3449         CALL    _SRAMVideoLoad
                       3450 ; cbar.c   1261 
                       3451 ; cbar.c   1262                                 newTablePtr = &NTSCPLUGETable[0];
000C2D 964842rr        3453         MOV.B   ES,#SEG( _newTablePtr )
000C31 9908rrrr        3454         MOV.W   R0,#SOF( _newTablePtr )
000C35 9B08rrrr        3455         MOV.W   [R0+],#SOF( _NTSCPLUGETable )
000C39 9A08rrrr        3456         MOV.W   [R0],#SEG( _NTSCPLUGETable )
                       3457 ; cbar.c   1263                         }
                       3458 ; cbar.c   1264                         break;
                       3459 ; cbar.c   1265         }
000C3E                 3461 _140:
                       3462 ; cbar.c   1266 
                       3463 ; cbar.c   1267         NewPattern = TRUE;
000C3E 964842rr        3465         MOV.B   ES,#SEG( _NewPattern )
000C42 9908rrrr        3466         MOV.W   R0,#SOF( _NewPattern )
000C46 9208FF          3467         MOV.B   [R0],#0FFH
                       3468 ; cbar.c   1268 
                       3469 ; cbar.c   1269         return( OK);
000C49 9908FFFF        3471         MOV.W   R0,#0FFFFH
                       3472 ; cbar.c   1270 }
000C4E                 3474 _141:
000C4E A972            3475         ADDS.W  R7,#02H
000C50 2F10            3477         POP.W   R4
000C52 D680            3479         RET
                       3481 ; cbar.c   1271 
                       3482 ; cbar.c   1272 /**************************************************************************/
                       3483 ; cbar.c   1273 /* SetCBSystem                                                                   
                                                                                               CBAR.C  */
                       3484 ; cbar.c   1274 /*                                                                               
                                                                                                                             
                                              */
                       3485 ; cbar.c   1275 /* Author:       Kim Engedahl, DEV, 000331                                       
                                                                                      */
                       3486 ; cbar.c   1276 /* Revised:      000705, KEn, DEV                                                
                                                                                      */
                       3487 ; cbar.c   1277 /*                                                                               
                                                                                                                             
                                              */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  50

ADDR   CODE            LINE SOURCELINE
                       3488 ; cbar.c   1278 /* Function:                                                                     
                                                                                                              */
                       3489 ; cbar.c   1279 /* Remarks:                                                                      
                                                                                                                             
                             */
                       3490 ; cbar.c   1280 /* Returns:                                                                      
                                                                                                                             
                             */
                       3491 ; cbar.c   1281 /* Updates:                                                                      
                                                                                                                             
                             */
                       3492 ; cbar.c   1282 /**************************************************************************/
                       3493 ; cbar.c   1283 int SetCBSystem( UC system)
                       3494 ; cbar.c   1284 {
                       3495         ALIGN   1
                       3497         PUBLIC  _SetCBSystem
000C54                 3498 _SetCBSystem:
000C54 0F10            3502         PUSH.W  R4
                       3506 ; cbar.c   1285         Settings.ActivePreset = 0;
000C56 964842rr        3508         MOV.B   ES,#SEG( _Settings )
000C5A 9918rrrr        3509         MOV.W   R1,#SOF( _Settings )
000C5E BA10            3510         MOV.W   [R1],#00H
                       3511 ; cbar.c   1286 
                       3512 ; cbar.c   1287         Settings.CBSetup.System = CBSetup.System = system;
000C60 8180            3514         MOV.B   R4L,R0L
000C62 964842rr        3515         MOV.B   ES,#SEG( _CBSetup )
000C66 9908rrrr        3516         MOV.W   R0,#SOF( _CBSetup )
000C6A 8288            3517         MOV.B   [R0],R4L
000C6C 964842rr        3520         MOV.B   ES,#SEG( _Settings+32 )
000C70 9908rrrr        3521         MOV.W   R0,#SOF( _Settings+32 )
000C74 8288            3522         MOV.B   [R0],R4L
                       3523 ; cbar.c   1288         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
000C76 9918rrrr        3525         MOV.W   R1,#SEG( _Settings )
000C7A 9908rrrr        3526         MOV.W   R0,#SOF( _Settings )
000C7E 964842rr        3527         MOV.B   ES,#SEG( _SettingsPtr )
000C82 9928rrrr        3528         MOV.W   R2,#SOF( _SettingsPtr )
000C86 8A22            3529         MOV.W   R2,[R2]
000C88 9938004A        3530         MOV.W   R3,#04AH
                       3531         CALL    _NV_Store
000C8C C4rrrrrr       +3531 ;       FCALL   _NV_Store
                       3532 ; cbar.c   1289 
                       3533 ; cbar.c   1290         if ( system < NTSC_US)
000C90 918402          3535         CMP.B   R4L,#02H
000C93 F017            3536         BCC     _160
                       3537 ; cbar.c   1291         {
                       3538 ; cbar.c   1292                 Status &= ~SYSSEL;
000C95 9E1520FFBF      3540         AND.W   _Status,#0FFBFH
                       3541 ; cbar.c   1293                 StatusPort = Status;            // Select new (SDI) system
000C9A 96484206        3543         MOV.B   ES,#SEG( _StatusPort )
000C9E 9908A000        3544         MOV.W   R0,#SOF( _StatusPort )
000CA2 A80120          3545         MOV.W   [R0],_Status
                       3546 ; cbar.c   1294 
                       3547 ; cbar.c   1295                 WriteCBGain( Calibration.CBCalibration.GainG);
000CA5 964842rr        3549         MOV.B   ES,#SEG( _Calibration+213 )
000CA9 9908rrrr        3550         MOV.W   R0,#SOF( _Calibration+213 )
000CAD 8200            3551         MOV.B   R0L,[R0]
000CAF C5F9A7          3552         CALL    _WriteCBGain
                       3553 ; cbar.c   1296                 WriteCBChromaGain( Calibration.CBCalibration.ChromaGainG);
000CB2 964842rr        3555         MOV.B   ES,#SEG( _Calibration+214 )
000CB6 9908rrrr        3556         MOV.W   R0,#SOF( _Calibration+214 )
000CBA 8200            3557         MOV.B   R0L,[R0]
000CBC C5F9AC          3558         CALL    _WriteCBChromaGain
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  51

ADDR   CODE            LINE SOURCELINE
                       3559 ; cbar.c   1297         }
000CBF FE16            3561         BR      _161
000CBF FE1600          3561         BR      _161
000CC2                 3562 _160:
                       3563 ; cbar.c   1298         else
                       3564 ; cbar.c   1299         {
                       3565 ; cbar.c   1300                 Status |= SYSSEL;
000CC2 9E16200040      3567         OR.W    _Status,#040H
                       3568 ; cbar.c   1301                 StatusPort = Status;            // Select new (SDI) system
000CC7 96484206        3570         MOV.B   ES,#SEG( _StatusPort )
000CCB 9908A000        3571         MOV.W   R0,#SOF( _StatusPort )
000CCF A80120          3572         MOV.W   [R0],_Status
                       3573 ; cbar.c   1302 
                       3574 ; cbar.c   1303                 WriteCBGain( Calibration.CBCalibration.GainM);
000CD2 964842rr        3576         MOV.B   ES,#SEG( _Calibration+215 )
000CD6 9908rrrr        3577         MOV.W   R0,#SOF( _Calibration+215 )
000CDA 8200            3578         MOV.B   R0L,[R0]
000CDC C5F991          3579         CALL    _WriteCBGain
                       3580 ; cbar.c   1304                 WriteCBChromaGain( Calibration.CBCalibration.ChromaGainM);
000CDF 964842rr        3582         MOV.B   ES,#SEG( _Calibration+216 )
000CE3 9908rrrr        3583         MOV.W   R0,#SOF( _Calibration+216 )
000CE7 8200            3584         MOV.B   R0L,[R0]
000CE9 C5F995          3585         CALL    _WriteCBChromaGain
                       3586 ; cbar.c   1305         }
000CEC                 3588 _161:
                       3589 ; cbar.c   1306 
                       3590 ; cbar.c   1307 
                       3591 ; cbar.c   1308         tvp6k_system( system);  // Initialise the composite output
000CEC 8108            3593         MOV.B   R0L,R4L
000CEE B110            3594         MOVS.B  R0H,#00H
                       3595         CALL    _tvp6k_system
000CF0 C4rrrrrr       +3595 ;       FCALL   _tvp6k_system
                       3596 ; cbar.c   1309 
                       3597 ; cbar.c   1310                                                                                  
                                                    // Validate pattern and change if invalid in new system                  
                                                                                                                             
                                                    
                       3598 ; cbar.c   1311         ValidateCBPattern( system , &CBSetup.Pattern);
000CF4 9938rrrr        3600         MOV.W   R3,#SEG( _CBSetup+2 )
000CF8 9928rrrr        3601         MOV.W   R2,#SOF( _CBSetup+2 )
000CFC 8108            3602         MOV.B   R0L,R4L
000CFE C50186          3605         CALL    _ValidateCBPattern
                       3608 ; cbar.c   1312 
                       3609 ; cbar.c   1313                                                                                  
                                                    // This one initialises TablePtr;
                       3610 ; cbar.c   1314         SetCBPattern( CBSetup.Pattern);
000D01 964842rr        3612         MOV.B   ES,#SEG( _CBSetup+2 )
000D05 9908rrrr        3613         MOV.W   R0,#SOF( _CBSetup+2 )
000D09 8A00            3614         MOV.W   R0,[R0]
000D0B C5FC91          3615         CALL    _SetCBPattern
                       3616 ; cbar.c   1315 
                       3617 ; cbar.c   1316         SetCBScHPhase( CBSetup.ScHPhase);
000D0E 964842rr        3619         MOV.B   ES,#SEG( _CBSetup+8 )
000D12 9908rrrr        3620         MOV.W   R0,#SOF( _CBSetup+8 )
000D16 8A00            3621         MOV.W   R0,[R0]
000D18 C500D7          3622         CALL    _SetCBScHPhase
                       3623 ; cbar.c   1317 
                       3624 ; cbar.c   1318         LEDSet( CBPALLED, system < NTSC_US);
000D1B 99080040        3626         MOV.W   R0,#040H
000D1F 918402          3627         CMP.B   R4L,#02H
000D22 F002            3628         BCC     _163
000D24 B911            3629         MOVS.W  R1,#01H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  52

ADDR   CODE            LINE SOURCELINE
000D26 FE01            3630         BR      _165
000D26 FE01            3630         BR      _165
000D28                 3631 _163:
000D28 B910            3632         MOVS.W  R1,#00H
000D28 B910            3632         MOVS.W  R1,#00H
000D2A                 3633 _165:
                       3634         CALL    _LEDSet
000D2A C4rrrrrr       +3634 ;       FCALL   _LEDSet
                       3635 ; cbar.c   1319         LEDSet( CBNTSCLED, system >= NTSC_US);
000D2E 99080080        3637         MOV.W   R0,#080H
000D32 918402          3638         CMP.B   R4L,#02H
000D35 F103            3639         BCS     _166
000D37 B911            3640         MOVS.W  R1,#01H
000D39 FE02            3641         BR      _168
000D39 FE0200          3641         BR      _168
000D3C                 3642 _166:
000D3C B910            3643         MOVS.W  R1,#00H
000D3C B910            3643         MOVS.W  R1,#00H
000D3E                 3644 _168:
                       3645         CALL    _LEDSet
000D3E C4rrrrrr       +3645 ;       FCALL   _LEDSet
                       3646 ; cbar.c   1320 
                       3647 ; cbar.c   1321         return( OK);
000D42 9908FFFF        3649         MOV.W   R0,#0FFFFH
                       3650 ; cbar.c   1322 }
000D46 2F10            3652         POP.W   R4
000D48 D680            3654         RET
                       3657 ; cbar.c   1323 
                       3658 ; cbar.c   1324 /**************************************************************************/
                       3659 ; cbar.c   1325 /* SetCBDelay                                                                    
                                                                                                                             
                                                                       CBAR.C       */
                       3660 ; cbar.c   1326 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       3661 ; cbar.c   1327 /* Author:       Kim Engedahl, DEV, 000331                                       
                                                                                                                             
                                    */
                       3662 ; cbar.c   1328 /* Revised:      001009, KEn, DEV                                                
                                                                                                                             
                                            */
                       3663 ; cbar.c   1329 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       3664 ; cbar.c   1330 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       3665 ; cbar.c   1331 /* Remarks:      CB Delay resolution is 37ns                                     
                                                                                                                            *
                            /
                       3666 ; cbar.c   1332 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       3667 ; cbar.c   1333 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       3668 ; cbar.c   1334 /**************************************************************************/
                       3669 ; cbar.c   1335 int SetCBDelay( UL delay)
                       3670 ; cbar.c   1336 {
                       3671         ALIGN   1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  53

ADDR   CODE            LINE SOURCELINE
                       3673         PUBLIC  _SetCBDelay
000D4A                 3674 _SetCBDelay:
000D4A 0F30            3678         PUSH.W  R4, R5
                       3684 ; cbar.c   1337         UL tmpOffset;
                       3685 ; cbar.c   1338 
                       3686 ; cbar.c   1339         Settings.ActivePreset = 0;
000D4C 964842rr        3688         MOV.B   ES,#SEG( _Settings )
000D50 9928rrrr        3689         MOV.W   R2,#SOF( _Settings )
000D54 BA20            3690         MOV.W   [R2],#00H
                       3691 ; cbar.c   1340 
                       3692 ; cbar.c   1341         Settings.CBSetup.Delay = CBSetup.Delay = delay;
000D56 8951            3694         MOV.W   R5,R1
000D58 8940            3695         MOV.W   R4,R0
000D5A 964842rr        3696         MOV.B   ES,#SEG( _CBSetup+4 )
000D5E 9908rrrr        3697         MOV.W   R0,#SOF( _CBSetup+4 )
000D62 8B48            3698         MOV.W   [R0+],R4
000D64 8A58            3699         MOV.W   [R0],R5
000D66 964842rr        3702         MOV.B   ES,#SEG( _Settings+36 )
000D6A 9908rrrr        3703         MOV.W   R0,#SOF( _Settings+36 )
000D6E 8B48            3704         MOV.W   [R0+],R4
000D70 8A58            3705         MOV.W   [R0],R5
                       3706 ; cbar.c   1342         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
000D72 9918rrrr        3708         MOV.W   R1,#SEG( _Settings )
000D76 9908rrrr        3709         MOV.W   R0,#SOF( _Settings )
000D7A 964842rr        3710         MOV.B   ES,#SEG( _SettingsPtr )
000D7E 9928rrrr        3711         MOV.W   R2,#SOF( _SettingsPtr )
000D82 8A22            3712         MOV.W   R2,[R2]
000D84 9938004A        3713         MOV.W   R3,#04AH
                       3714         CALL    _NV_Store
000D88 C4rrrrrr       +3714 ;       FCALL   _NV_Store
                       3715 ; cbar.c   1343 
                       3716 ; cbar.c   1344         // Divide GenlockSetup.Delay with 256 as the resulotion is 27ns/256 where
                            as the
                       3717 ; cbar.c   1345         //  resolution of the TSG is 37ns.
                       3718 ; cbar.c   1346         tmpOffset = delay + GenlockSetup.Delay/256;
000D8C 964842rr        3720         MOV.B   ES,#SEG( _GenlockSetup+2 )
000D90 9918rrrr        3721         MOV.W   R1,#SOF( _GenlockSetup+2 )
000D94 8B01            3722         MOV.W   R0,[R1+]
000D96 8A11            3723         MOV.W   R1,[R1]
000D98 DC08            3724         LSR.D   R0,#08H
000D9A 0940            3725         ADD.W   R4,R0
000D9C 1951            3726         ADDC.W  R5,R1
000D9E 8935            3728         MOV.W   R3,R5
000DA0 8924            3729         MOV.W   R2,R4
                       3731 ; cbar.c   1347 
                       3732 ; cbar.c   1348         if ( CBSetup.System < NTSC_US)
000DA2 964842rr        3734         MOV.B   ES,#SEG( _CBSetup )
000DA6 9908rrrr        3735         MOV.W   R0,#SOF( _CBSetup )
000DAA 8200            3736         MOV.B   R0L,[R0]
000DAC 910402          3737         CMP.B   R0L,#02H
000DAF F02C            3738         BCC     _169
                       3739 ; cbar.c   1349         {
                       3740 ; cbar.c   1350                 tmpOffset += Calibration.CBCalibration.PhaseG;
000DB1 964842rr        3742         MOV.B   ES,#SEG( _Calibration+202 )
000DB5 9938rrrr        3743         MOV.W   R3,#SOF( _Calibration+202 )
000DB9 8B23            3744         MOV.W   R2,[R3+]
000DBB 8A33            3745         MOV.W   R3,[R3]
000DBD 0942            3747         ADD.W   R4,R2
000DBF 1953            3748         ADDC.W  R5,R3
000DC1 8915            3749         MOV.W   R1,R5
000DC3 8904            3750         MOV.W   R0,R4
                       3752 ; cbar.c   1351 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  54

ADDR   CODE            LINE SOURCELINE
                       3753 ; cbar.c   1352                 tmpOffset %= 4320000L;                                          /
                            / 4*625*1728
000DC5 99380041        3755         MOV.W   R3,#041H
000DC9 9928EB00        3756         MOV.W   R2,#0EB00H
000DCD C4rrrrrr        3757         FCALL   __UMODL
                       3760 ; cbar.c   1353 
                       3761 ; cbar.c   1354                 LineOffset = 0xFFFF - ( tmpOffset / 1728L);                      
                                    
000DD1 B930            3763         MOV.W   R3,#00H
000DD3 992806C0        3764         MOV.W   R2,#06C0H
000DD7 8951            3765         MOV.W   R5,R1
000DD9 8940            3766         MOV.W   R4,R0
000DDB C4rrrrrr        3767         FCALL   __UDIVL
000DDF 9918FFFF        3770         MOV.W   R1,#0FFFFH
000DE3 2910            3771         SUB.W   R1,R0
000DE5 8E1rrr          3772         MOV.W   _LineOffset,R1
                       3773 ; cbar.c   1355                 PhaseOffset = 1727 - ( tmpOffset % 1728L);
000DE8 8915            3775         MOV.W   R1,R5
000DEA 8904            3776         MOV.W   R0,R4
000DEC B930            3777         MOV.W   R3,#00H
000DEE 992806C0        3778         MOV.W   R2,#06C0H
000DF2 C4rrrrrr        3779         FCALL   __UMODL
000DF6 991806BF        3783         MOV.W   R1,#06BFH
000DFA 2910            3784         SUB.W   R1,R0
000DFC 964842rr        3785         MOV.B   ES,#SEG( _PhaseOffset )
000E00 9908rrrr        3786         MOV.W   R0,#SOF( _PhaseOffset )
000E04 8A18            3787         MOV.W   [R0],R1
                       3788 ; cbar.c   1356         }
000E06 FE3D            3790         BR      _171
000E06 FE3D            3790         BR      _171
000E08                 3791 _169:
                       3793 ; cbar.c   1357         else 
                       3794 ; cbar.c   1358         {
                       3795 ; cbar.c   1359                 tmpOffset += Calibration.CBCalibration.PhaseM;
000E08 964842rr        3797         MOV.B   ES,#SEG( _Calibration+208 )
000E0C 9918rrrr        3798         MOV.W   R1,#SOF( _Calibration+208 )
000E10 8B01            3799         MOV.W   R0,[R1+]
000E12 8A11            3800         MOV.W   R1,[R1]
000E14 0902            3801         ADD.W   R0,R2
000E16 1913            3802         ADDC.W  R1,R3
                       3805 ; cbar.c   1360 
                       3806 ; cbar.c   1361                 tmpOffset %= 1801800L;                                          /
                            / 2*525*1716
000E18 9938001B        3808         MOV.W   R3,#01BH
000E1C 99287E48        3809         MOV.W   R2,#07E48H
000E20 C4rrrrrr        3810         FCALL   __UMODL
                       3813 ; cbar.c   1362 
                       3814 ; cbar.c   1363                 LineOffset = 0xFFFF - ( tmpOffset / 1716L);                      
                                    
000E24 B930            3816         MOV.W   R3,#00H
000E26 992806B4        3817         MOV.W   R2,#06B4H
000E2A 8951            3818         MOV.W   R5,R1
000E2C 8940            3819         MOV.W   R4,R0
000E2E C4rrrrrr        3820         FCALL   __UDIVL
000E32 9918FFFF        3823         MOV.W   R1,#0FFFFH
000E36 2910            3824         SUB.W   R1,R0
000E38 8E1rrr          3825         MOV.W   _LineOffset,R1
                       3826 ; cbar.c   1364                 PhaseOffset = 1715 - ( tmpOffset % 1716L);
000E3B B930            3828         MOV.W   R3,#00H
000E3D 992806B4        3829         MOV.W   R2,#06B4H
000E41 8915            3830         MOV.W   R1,R5
000E43 8904            3831         MOV.W   R0,R4
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  55

ADDR   CODE            LINE SOURCELINE
000E45 C4rrrrrr        3832         FCALL   __UMODL
000E49 991806B3        3836         MOV.W   R1,#06B3H
000E4D 2910            3837         SUB.W   R1,R0
000E4F 964842rr        3838         MOV.B   ES,#SEG( _PhaseOffset )
000E53 9908rrrr        3839         MOV.W   R0,#SOF( _PhaseOffset )
000E57 8A18            3840         MOV.W   [R0],R1
                       3841 ; cbar.c   1365 
                       3842 ; cbar.c   1366                 if ( PhaseOffset > 1687)
000E59 964842rr        3844         MOV.B   ES,#SEG( _PhaseOffset )
000E5D 9908rrrr        3845         MOV.W   R0,#SOF( _PhaseOffset )
000E61 8A00            3846         MOV.W   R0,[R0]
000E63 99040697        3847         CMP.W   R0,#0697H
000E67 FD0D            3848         BLE     _171
                       3849 ; cbar.c   1367                         PhaseOffset += 12;
000E69 964842rr        3851         MOV.B   ES,#SEG( _PhaseOffset )
000E6D 9908rrrr        3852         MOV.W   R0,#SOF( _PhaseOffset )
000E71 8A00            3853         MOV.W   R0,[R0]
000E73 9900000C        3854         ADD.W   R0,#0CH
000E77 964842rr        3855         MOV.B   ES,#SEG( _PhaseOffset )
000E7B 9918rrrr        3856         MOV.W   R1,#SOF( _PhaseOffset )
000E7F 8A09            3857         MOV.W   [R1],R0
                       3858 ; cbar.c   1368         }
000E82                 3860 _171:
                       3861 ; cbar.c   1369 
                       3862 ; cbar.c   1370         if ( PhaseOffset >= 1443)
000E82 964842rr        3864         MOV.B   ES,#SEG( _PhaseOffset )
000E86 9908rrrr        3865         MOV.W   R0,#SOF( _PhaseOffset )
000E8A 8A00            3866         MOV.W   R0,[R0]
000E8C 990405A3        3867         CMP.W   R0,#05A3H
000E90 FB04            3868         BLT     _172
                       3869 ; cbar.c   1371                 Status |= PHASEREGSEL;                          // Set Phase Regi
                            ster Select
000E92 9E16204000      3871         OR.W    _Status,#04000H
000E97 FE04            3872         BR      _173
000E97 FE0400          3872         BR      _173
000E9A                 3873 _172:
                       3874 ; cbar.c   1372         else            
                       3875 ; cbar.c   1373                 Status &= ~PHASEREGSEL;                         // Clear Phase Re
                            gister Select
000E9A 9E1520BFFF      3877         AND.W   _Status,#0BFFFH
000E9A 9E1520BFFF00    3877         AND.W   _Status,#0BFFFH
000EA0                 3878 _173:
                       3879 ; cbar.c   1374                 
                       3880 ; cbar.c   1375         StatusPort = Status;
000EA0 96484206        3882         MOV.B   ES,#SEG( _StatusPort )
000EA4 9908A000        3883         MOV.W   R0,#SOF( _StatusPort )
000EA8 A80120          3884         MOV.W   [R0],_Status
                       3885 ; cbar.c   1376 
                       3886 ; cbar.c   1377         HOffsetPort = PhaseOffset;
000EAB 964842rr        3888         MOV.B   ES,#SEG( _PhaseOffset )
000EAF 9908rrrr        3889         MOV.W   R0,#SOF( _PhaseOffset )
000EB3 8A00            3890         MOV.W   R0,[R0]
000EB5 96484206        3891         MOV.B   ES,#SEG( _HOffsetPort )
000EB9 9918A004        3892         MOV.W   R1,#SOF( _HOffsetPort )
000EBD 8A09            3893         MOV.W   [R1],R0
                       3894 ; cbar.c   1378 
                       3895 ; cbar.c   1379         return( OK);
000EBF 9908FFFF        3897         MOV.W   R0,#0FFFFH
                       3898 ; cbar.c   1380 }
000EC3 2F30            3900         POP.W   R4, R5
000EC5 D680            3902         RET
                       3904 ; cbar.c   1381 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  56

ADDR   CODE            LINE SOURCELINE
                       3905 ; cbar.c   1382 /**************************************************************************/
                       3906 ; cbar.c   1383 /* SetCBScHPhase                                                                 
                                                                                                                             
                                                               CBAR.C       */
                       3907 ; cbar.c   1384 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       3908 ; cbar.c   1385 /* Author:       Kim Engedahl, DEV, 000331                                       
                                                                                                                             
                                    */
                       3909 ; cbar.c   1386 /* Revised:      000618, KEn, DEV                                                
                                                                                                                             
                                            */
                       3910 ; cbar.c   1387 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       3911 ; cbar.c   1388 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       3912 ; cbar.c   1389 /* Remarks:      Note that the resolution is different from BlackBurst, (1.4).*/
                       3913 ; cbar.c   1390 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       3914 ; cbar.c   1391 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       3915 ; cbar.c   1392 /**************************************************************************/
                       3916 ; cbar.c   1393 int SetCBScHPhase( int schphase)
                       3917 ; cbar.c   1394 {
000EC7 00              3918         ALIGN   1
                       3920         PUBLIC  _SetCBScHPhase
000EC8                 3921 _SetCBScHPhase:
000EC8 0F10            3925         PUSH.W  R4
000ECA A97E            3927         ADDS.W  R7,#0EH
                       3935 ; cbar.c   1395         long tmp;
                       3936 ; cbar.c   1396         UC buffer[2];
                       3937 ; cbar.c   1397 
                       3938 ; cbar.c   1398         Settings.ActivePreset = 0;
000ECC 964842rr        3940         MOV.B   ES,#SEG( _Settings )
000ED0 9918rrrr        3941         MOV.W   R1,#SOF( _Settings )
000ED4 BA10            3942         MOV.W   [R1],#00H
                       3943 ; cbar.c   1399 
                       3944 ; cbar.c   1400         Settings.CBSetup.ScHPhase = CBSetup.ScHPhase = schphase;
000ED6 8940            3946         MOV.W   R4,R0
000ED8 964842rr        3947         MOV.B   ES,#SEG( _CBSetup+8 )
000EDC 9908rrrr        3948         MOV.W   R0,#SOF( _CBSetup+8 )
000EE0 8A48            3949         MOV.W   [R0],R4
000EE2 964842rr        3952         MOV.B   ES,#SEG( _Settings+40 )
000EE6 9908rrrr        3953         MOV.W   R0,#SOF( _Settings+40 )
000EEA 8A48            3954         MOV.W   [R0],R4
                       3955 ; cbar.c   1401         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
000EEC 9918rrrr        3957         MOV.W   R1,#SEG( _Settings )
000EF0 9908rrrr        3958         MOV.W   R0,#SOF( _Settings )
000EF4 964842rr        3959         MOV.B   ES,#SEG( _SettingsPtr )
000EF8 9928rrrr        3960         MOV.W   R2,#SOF( _SettingsPtr )
000EFC 8A22            3961         MOV.W   R2,[R2]
000EFE 9938004A        3962         MOV.W   R3,#04AH
                       3963         CALL    _NV_Store
000F02 C4rrrrrr       +3963 ;       FCALL   _NV_Store
                       3964 ; cbar.c   1402   
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  57

ADDR   CODE            LINE SOURCELINE
                       3965 ; cbar.c   1403         if ( CBSetup.System < NTSC_US)
000F06 964842rr        3967         MOV.B   ES,#SEG( _CBSetup )
000F0A 9908rrrr        3968         MOV.W   R0,#SOF( _CBSetup )
000F0E 8200            3969         MOV.B   R0L,[R0]
000F10 910402          3970         CMP.B   R0L,#02H
000F13 F009            3971         BCC     _177
                       3972 ; cbar.c   1404                 tmp = (long) Calibration.CBCalibration.ScHPhaseG;
000F15 964842rr        3974         MOV.B   ES,#SEG( _Calibration+206 )
000F19 9908rrrr        3975         MOV.W   R0,#SOF( _Calibration+206 )
000F1D 8200            3976         MOV.B   R0L,[R0]
000F1F B110            3977         MOVS.B  R0H,#00H
000F21 B910            3978         MOVS.W  R1,#00H
000F23 FE08            3980         BR      _178
000F23 FE0800          3980         BR      _178
000F26                 3981 _177:
                       3982 ; cbar.c   1405         else 
                       3983 ; cbar.c   1406                 tmp = (long) Calibration.CBCalibration.ScHPhaseM;
000F26 964842rr        3985         MOV.B   ES,#SEG( _Calibration+212 )
000F2A 9908rrrr        3986         MOV.W   R0,#SOF( _Calibration+212 )
000F2E 8200            3987         MOV.B   R0L,[R0]
000F30 B110            3989         MOVS.B  R0H,#00H
000F32 B910            3990         MOVS.W  R1,#00H
000F34                 3992 _178:
                       3993 ; cbar.c   1407 
                       3994 ; cbar.c   1408         tmp += (long) schphase;
000F34 8924            3996         MOV.W   R2,R4
000F36 9839            3997         SEXT.W  R3
000F38 0902            3998         ADD.W   R0,R2
000F3A 1913            3999         ADDC.W  R1,R3
                       4002 ; cbar.c   1409 
                       4003 ; cbar.c   1410         if ( tmp < 0)                                                            
                                                    // -1 deg equ. 359 deg a.s.f.
000F3C 99140000        4005         CMP.W   R1,#00H
000F40 FC08            4006         BGT     _179
000F42 FB03            4007         BLT     _181
000F44 99040000        4008         CMP.W   R0,#00H
000F48 F004            4009         BCC     _179
000F48 F004            4009         BCC     _179
000F4A                 4010 _181:
                       4011 ; cbar.c   1411                 tmp += 360;
000F4A 99000168        4013         ADD.W   R0,#0168H
000F4E 99110000        4014         ADDC.W  R1,#00H
000F52                 4017 _179:
                       4018 ; cbar.c   1412 
                       4019 ; cbar.c   1413         tmp *= 256;
000F52 DD08            4021         ASL.D   R0,#08H
                       4024 ; cbar.c   1414         tmp /= 360;                                                              
                                                            // tmp = ( ScHPhase*256)/360;
000F54 B930            4026         MOV.W   R3,#00H
000F56 99280168        4027         MOV.W   R2,#0168H
000F5A C4rrrrrr        4028         FCALL   __SDIVL
                       4031 ; cbar.c   1415 
                       4032 ; cbar.c   1416         buffer[0] = C_PHASE_address;
000F5E 92785A          4034         MOV.B   [R7],#05AH
                       4036 ; cbar.c   1417         buffer[1] = tmp & 0xFF;
000F61 9105FF          4038         AND.B   R0L,#0FFH
000F64 840F01          4039         MOV.B   [R7+1],R0L
                       4040 ; cbar.c   1418         
                       4041 ; cbar.c   1419         return( TransmitIIC( TVP6K_IIC_address, 2, buffer, IIC_PTV));
000F67 910840          4043         MOV.B   R0L,#040H
000F6A 911802          4044         MOV.B   R0H,#02H
000F6D 9168rr          4045         MOV.B   R3L,#SEG( __lc_bs )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  58

ADDR   CODE            LINE SOURCELINE
000F70 7177            4046         XOR.B   R3H,R3H
000F72 8927            4047         MOV.W   R2,R7
000F74 912800          4048         MOV.B   R1L,#00H
                       4049         CALL    _TransmitIIC
000F77 C4rrrrrr       +4049 ;       FCALL   _TransmitIIC
                       4050 ; cbar.c   1420 }
000F7B A972            4052         ADDS.W  R7,#02H
000F7D 2F10            4054         POP.W   R4
000F7F D680            4056         RET
                       4059 ; cbar.c   1421 
                       4060 ; cbar.c   1422 /**************************************************************************/
                       4061 ; cbar.c   1423 /* SetCBEmbAudioSignal                                                           
                                                                                                                             
                                       CBAR.C       */
                       4062 ; cbar.c   1424 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       4063 ; cbar.c   1425 /* Author:       Kim Engedahl, DEV, 000331                                       
                                                                                                                             
                                    */
                       4064 ; cbar.c   1426 /* Revised:      000618, KEn, DEV                                                
                                                                                                                             
                                            */
                       4065 ; cbar.c   1427 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       4066 ; cbar.c   1428 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       4067 ; cbar.c   1429 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       4068 ; cbar.c   1430 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       4069 ; cbar.c   1431 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       4070 ; cbar.c   1432 /**************************************************************************/
                       4071 ; cbar.c   1433 int SetCBEmbAudioSignal( UC signal)
                       4072 ; cbar.c   1434 {
000F81 00              4073         ALIGN   1
                       4075         PUBLIC  _SetCBEmbAudioSignal
000F82                 4076 _SetCBEmbAudioSignal:
000F82 0F10            4080         PUSH.W  R4
                       4084 ; cbar.c   1435         Settings.ActivePreset = 0;
000F84 964842rr        4086         MOV.B   ES,#SEG( _Settings )
000F88 9918rrrr        4087         MOV.W   R1,#SOF( _Settings )
000F8C BA10            4088         MOV.W   [R1],#00H
                       4089 ; cbar.c   1436 
                       4090 ; cbar.c   1437         Settings.CBSetup.EmbAudioSignal = CBSetup.EmbAudioSignal = signal;
000F8E 8180            4092         MOV.B   R4L,R0L
000F90 964842rr        4093         MOV.B   ES,#SEG( _CBSetup+10 )
000F94 9908rrrr        4094         MOV.W   R0,#SOF( _CBSetup+10 )
000F98 8288            4095         MOV.B   [R0],R4L
000F9A 964842rr        4098         MOV.B   ES,#SEG( _Settings+42 )
000F9E 9908rrrr        4099         MOV.W   R0,#SOF( _Settings+42 )
000FA2 8288            4100         MOV.B   [R0],R4L
                       4101 ; cbar.c   1438         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
000FA4 9918rrrr        4103         MOV.W   R1,#SEG( _Settings )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  59

ADDR   CODE            LINE SOURCELINE
000FA8 9908rrrr        4104         MOV.W   R0,#SOF( _Settings )
000FAC 964842rr        4105         MOV.B   ES,#SEG( _SettingsPtr )
000FB0 9928rrrr        4106         MOV.W   R2,#SOF( _SettingsPtr )
000FB4 8A22            4107         MOV.W   R2,[R2]
000FB6 9938004A        4108         MOV.W   R3,#04AH
                       4109         CALL    _NV_Store
000FBA C4rrrrrr       +4109 ;       FCALL   _NV_Store
                       4110 ; cbar.c   1439 
                       4111 ; cbar.c   1440         if ( signal == EmbAudioOff)
000FBE 6188            4113         OR.B    R4L,R4L
000FC0 F206            4114         BNE     _182
                       4115 ; cbar.c   1441                 SoundEnable = FALSE;
000FC2 964842rr        4117         MOV.B   ES,#SEG( _SoundEnable )
000FC6 9908rrrr        4118         MOV.W   R0,#SOF( _SoundEnable )
000FCA B200            4119         MOV.B   [R0],#00H
000FCC FE1B            4120         BR      _183
000FCC FE1B            4120         BR      _183
000FCE                 4121 _182:
                       4124 ; cbar.c   1442         else
                       4125 ; cbar.c   1443         {
                       4126 ; cbar.c   1444                 SoundEnable = TRUE;
000FCE 964842rr        4128         MOV.B   ES,#SEG( _SoundEnable )
000FD2 9908rrrr        4129         MOV.W   R0,#SOF( _SoundEnable )
000FD6 9208FF          4130         MOV.B   [R0],#0FFH
                       4131 ; cbar.c   1445 
                       4132 ; cbar.c   1446                 Blanking = TRUE;                                                 
                                            // Blank line while loading SRAM
000FD9 964842rr        4134         MOV.B   ES,#SEG( _Blanking )
000FDD 9908rrrr        4135         MOV.W   R0,#SOF( _Blanking )
000FE1 9208FF          4136         MOV.B   [R0],#0FFH
                       4137 ; cbar.c   1447 
                       4138 ; cbar.c   1448                 Status &= ~S5S4S3S2;                                            /
                            / Blank the line immediately
000FE4 9E1520FFC3      4140         AND.W   _Status,#0FFC3H
                       4141 ; cbar.c   1449                 StatusPort = Status;
000FE9 96484206        4143         MOV.B   ES,#SEG( _StatusPort )
000FED 9908A000        4144         MOV.W   R0,#SOF( _StatusPort )
000FF1 A80120          4145         MOV.W   [R0],_Status
                       4146 ; cbar.c   1450 
                       4147 ; cbar.c   1451                 SRAMSoundLoad( signal);                                 // Downlo
                            ad sound information
000FF4 8108            4149         MOV.B   R0L,R4L
000FF6 C5F878          4150         CALL    _SRAMSoundLoad
                       4154 ; cbar.c   1452 
                       4155 ; cbar.c   1453                 Blanking = FALSE;
000FF9 964842rr        4157         MOV.B   ES,#SEG( _Blanking )
000FFD 9908rrrr        4158         MOV.W   R0,#SOF( _Blanking )
001001 B200            4159         MOV.B   [R0],#00H
                       4160 ; cbar.c   1454         }
001004                 4162 _183:
                       4163 ; cbar.c   1455 
                       4164 ; cbar.c   1456         return( OK);
001004 9908FFFF        4166         MOV.W   R0,#0FFFFH
                       4167 ; cbar.c   1457 }
001008 2F10            4169         POP.W   R4
00100A D680            4171         RET
                       4173 ; cbar.c   1458 
                       4174 ; cbar.c   1459 /**************************************************************************/
                       4175 ; cbar.c   1460 /* ValidateCBPattern                                                             
                                                                                                                             
                                         CBAR.C     */
                       4176 ; cbar.c   1461 /*                                                                               
                                                                                                                             
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  60

ADDR   CODE            LINE SOURCELINE
                                                                                                                             
                                            */
                       4177 ; cbar.c   1462 /* Author:       Kim Engedahl, DEV, 000405                                       
                                                                                                                             
                                    */
                       4178 ; cbar.c   1463 /* Revised:      000603, KEn, DEV                                                
                                                                                                                             
                                            */
                       4179 ; cbar.c   1464 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       4180 ; cbar.c   1465 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       4181 ; cbar.c   1466 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       4182 ; cbar.c   1467 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       4183 ; cbar.c   1468 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       4184 ; cbar.c   1469 /**************************************************************************/
                       4185 ; cbar.c   1470 int ValidateCBPattern( UC system, UI *pattern)
                       4186 ; cbar.c   1471 {
                       4187         ALIGN   1
                       4189         PUBLIC  _ValidateCBPattern
00100C                 4190 _ValidateCBPattern:
                       4200 ; cbar.c   1472         if ( system < NTSC_US)
00100C 910402          4202         CMP.B   R0L,#02H
00100F F011            4203         BCC     _187
                       4204 ; cbar.c   1473         {
                       4205 ; cbar.c   1474                 switch ( *pattern)
001011 866C42          4207         MOV.B   ES,R3L
001014 8A02            4208         MOV.W   R0,[R2]
001016 99040000        4210         CMP.W   R0,#00H
00101A F307            4211         BEQ     _186
00101C 99040002        4212         CMP.W   R0,#02H
001020 F304            4213         BEQ     _186
001022 FE00            4214         BR      _184
                       4215 ; cbar.c   1475                 {
                       4216 ; cbar.c   1476                         case SMPTECBar:
                       4217 ; cbar.c   1477                         case FCCCBar:
                       4218 ; cbar.c   1478                                 *pattern = EBUCBar;
                       4219 ; cbar.c   1479                                 break;
                       4220 ; cbar.c   1480 
                       4221 ; cbar.c   1481                         default:
001024                 4223 _184:
                       4224 ; cbar.c   1482                                 return( OK);
001024 9908FFFF        4226         MOV.W   R0,#0FFFFH
001028 D680            4227         RET
00102A                 4229 _186:
00102A 866C42          4233         MOV.B   ES,R3L
00102D BA21            4234         MOV.W   [R2],#01H
                       4235 ; cbar.c   1483                 }
                       4236 ; cbar.c   1484         }
00102F FE1C            4238         BR      _194
00102F FE1C00          4238         BR      _194
001032                 4239 _187:
                       4242 ; cbar.c   1485         else
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  61

ADDR   CODE            LINE SOURCELINE
                       4243 ; cbar.c   1486         {
                       4244 ; cbar.c   1487                 switch ( *pattern)
001032 866C42          4246         MOV.B   ES,R3L
001035 8A02            4247         MOV.W   R0,[R2]
001037 99040001        4248         CMP.W   R0,#01H
00103B F313            4249         BEQ     _192
00103D 99040005        4250         CMP.W   R0,#05H
001041 F310            4251         BEQ     _192
001043 99040006        4252         CMP.W   R0,#06H
001047 F30D            4253         BEQ     _192
001049 99040009        4254         CMP.W   R0,#09H
00104D F302            4255         BEQ     _188
00104F FE06            4256         BR      _189
                       4257 ; cbar.c   1488                 {
                       4258 ; cbar.c   1489                         case EBUCBar:
                       4259 ; cbar.c   1490                         case CBarGrey75:
                       4260 ; cbar.c   1491                         case CBarRed75:
                       4261 ; cbar.c   1492                                 *pattern = SMPTECBar;
                       4262 ; cbar.c   1493                                 break;
                       4263 ; cbar.c   1494 
                       4264 ; cbar.c   1495                         case CCIR18:
001052                 4266 _188:
                       4267 ; cbar.c   1496                                 *pattern = Multiburst;
001052 866C42          4269         MOV.B   ES,R3L
001055 9A280008        4270         MOV.W   [R2],#08H
                       4271 ; cbar.c   1497                                 break;
001059 FE07            4273         BR      _194
                       4274 ; cbar.c   1498 
                       4275 ; cbar.c   1499                         default:
00105C                 4277 _189:
                       4278 ; cbar.c   1500                                 return( OK);
00105C 9908FFFF        4280         MOV.W   R0,#0FFFFH
001060 D680            4281         RET
001062                 4283 _192:
001062 866C42          4287         MOV.B   ES,R3L
001065 BA20            4288         MOV.W   [R2],#00H
                       4289 ; cbar.c   1501                 }
                       4290 ; cbar.c   1502         }
001068                 4292 _194:
                       4293 ; cbar.c   1503 
                       4294 ; cbar.c   1504         return( FAIL);
001068 B900            4296         MOV.W   R0,#00H
                       4297 ; cbar.c   1505 }
00106A                 4299 _196:
00106A D680            4300         RET
000122                 4308         DSEG AT 0122H
                       4309         ALIGN   1
000122                 4310 _TablePtr:      DS      4
   |  RESERVED             
000125
000002                 4312         RSEG    CBAR_CLR_FA
                       4313         ALIGN   1
000002                 4314 _newTablePtr:   DS      4
   |  RESERVED             
000005
                       4315         EXTRN   HCODE(__UMODL)
000006 RESERVED        4317 _SoundEnable:   DS      1
000006
00012C                 4319         DSEG AT 012CH
00012C RESERVED        4320 _SoundCnt:      DS      1
00012C
                       4325         EXTRN   HCODE(_TransmitIIC)
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  62

ADDR   CODE            LINE SOURCELINE
06A000                 4328         HSEG AT 06A000H
                       4329         PUBLIC  _StatusPort
                       4330         ALIGN   1
06A000                 4331 _StatusPort:    DS      2
   |  RESERVED             
06A001
000128                 4333         DSEG AT 0128H
000128 RESERVED        4334 _FrameCnt:      DS      1
000128
06A004                 4337         HSEG AT 06A004H
                       4338         PUBLIC  _HOffsetPort
                       4339         ALIGN   1
06A004                 4340 _HOffsetPort:   DS      2
   |  RESERVED             
06A005
                       4343         EXTRN   HCODE(_tvp6k_system)
000007                 4346         RSEG    CBAR_CLR_FA
                       4347         PUBLIC  _CBSetup
000007 RESERVED        4348         ALIGN   1
000007
000008                 4349 _CBSetup:       DS      12
   |  RESERVED             
000013
00012B                 4351         DSEG AT 012BH
00012B RESERVED        4352 _SoundFrameCnt: DS      1
00012B
                       4355         EXTRN   HCODE(_LEDSet)
00012D                 4357         DSEG AT 012DH
00012D RESERVED        4358 _SoundPtr:      DS      1
00012D
000014                 4360         RSEG    CBAR_CLR_FA
000014 RESERVED        4361 _Blanking:      DS      1
000014
044000                 4364         HSEG AT 044000H
                       4365         PUBLIC  _SRAMVideoPort
                       4366         ALIGN   1
044000                 4367 _SRAMVideoPort: DS      2
   |  RESERVED             
044001
04A000                 4371         HCSEG AT 04A000H
                       4372         PUBLIC  _SoundSignalArray
                       4373         ALIGN   1
                       4373         ALIGN   1
04A000                 4374 _SoundSignalArray:      DS      9216
   |  RESERVED             
04C3FF
                       4377         EXTRN   HCODE(_Write_AD8402)
                       4379         EXTRN   HDATA(_SettingsPtr)
000015                 4382         RSEG    CBAR_CLR_FA
                       4383         PUBLIC  _PhaseOffset
000015 RESERVED        4384         ALIGN   1
000015
000016                 4385 _PhaseOffset:   DS      2
   |  RESERVED             
000017
                       4387         EXTRN   HDATA(_GenlockSetup)
                       4389         EXTRN   HDATA(_Settings)
000126                 4391         DSEG AT 0126H
                       4392         ALIGN   1
000126                 4393 _LineCnt:       DS      2
   |  RESERVED             
000127
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  63

ADDR   CODE            LINE SOURCELINE
00012A                 4395         DSEG AT 012AH
00012A RESERVED        4396 _SyncLinePtr:   DS      1
00012A
                       4399         EXTRN   HCODE(_NV_Store)
                       4401         EXTRN   HDATA(_Calibration)
000129                 4403         DSEG AT 0129H
000129 RESERVED        4404 _SyncLineCnt:   DS      1
000129
050000                 4408         HCSEG AT 050000H
                       4409         PUBLIC  _VideoSignalArray
                       4410         ALIGN   1
                       4410         ALIGN   1
050000                 4411 _VideoSignalArray:      DS      196608
   |  RESERVED             
07FFFF
00012E                 4413         DSEG AT 012EH
00012E RESERVED        4414 _SoundPtrMax:   DS      1
00012E
                       4415         EXTRN   IDATA(__lc_bs)
000120                 4417         DSEG AT 0120H
                       4418         ALIGN   1
000120                 4419 _Status:        DS      2
   |  RESERVED             
000121
                       4420         EXTRN   HCODE(__SDIVL)
040000                 4423         HSEG AT 040000H
                       4424         PUBLIC  _SRAMSoundPort
                       4425         ALIGN   1
040000                 4426 _SRAMSoundPort: DS      2
   |  RESERVED             
040001
000018                 4428         RSEG    CBAR_CLR_FA
000018 RESERVED        4429 _NewPattern:    DS      1
000018
000000                 4432 CBAR_CLR_NE@DS  SEGMENT DATA JOIN CLEAR
000000                 4433         RSEG    CBAR_CLR_NE@DS
                       4434         PUBLIC  _TimeTickCounter
                       4435         ALIGN   1
000000                 4436 _TimeTickCounter:       DS      2
   |  RESERVED             
000001
                       4437         EXTRN   HCODE(__UDIVL)
06A008                 4440         HSEG AT 06A008H
                       4441         PUBLIC  _ChromaGainPort
                       4442         ALIGN   1
06A008                 4443 _ChromaGainPort:        DS      2
   |  RESERVED             
06A009
000002                 4446         RSEG    CBAR_CLR_NE@DS
                       4447         PUBLIC  _LineOffset
                       4448         ALIGN   1
000002                 4449 _LineOffset:    DS      2
   |  RESERVED             
000003
                       4450         EXTRN   DATA(__lc_ub_xvwbuffer)
                       4451         EXTRN   DATA(__lc_ue_xvwbuffer)
                       4452         CALLS   'WriteCBGain', 'Write_AD8402'
                       4453         CALLS   'CBDefaults', 'NV_Store'
                       4454         CALLS   'CBUpdate', 'SetCBSystem'
                       4455         CALLS   'CBUpdate', 'SetCBDelay'
                       4456         CALLS   'CBUpdate', 'SetCBScHPhase'
                       4457         CALLS   'CBUpdate', 'SetCBEmbAudioSignal'
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  64

ADDR   CODE            LINE SOURCELINE
                       4458         CALLS   'SetCBPattern', 'ValidateCBPattern'
                       4459         CALLS   'SetCBPattern', 'NV_Store'
                       4460         CALLS   'SetCBPattern', 'SRAMVideoLoad'
                       4461         CALLS   'SetCBSystem', 'NV_Store'
                       4462         CALLS   'SetCBSystem', 'WriteCBGain'
                       4463         CALLS   'SetCBSystem', 'WriteCBChromaGain'
                       4464         CALLS   'SetCBSystem', 'WriteCBGain'
                       4465         CALLS   'SetCBSystem', 'WriteCBChromaGain'
                       4466         CALLS   'SetCBSystem', 'tvp6k_system'
                       4467         CALLS   'SetCBSystem', 'ValidateCBPattern'
                       4468         CALLS   'SetCBSystem', 'SetCBPattern'
                       4469         CALLS   'SetCBSystem', 'SetCBScHPhase'
                       4470         CALLS   'SetCBSystem', 'LEDSet'
                       4471         CALLS   'SetCBDelay', 'NV_Store'
                       4472         CALLS   'SetCBScHPhase', 'NV_Store'
                       4473         CALLS   'SetCBScHPhase', 'TransmitIIC'
                       4474         CALLS   'SetCBEmbAudioSignal', 'NV_Store'
                       4475         CALLS   'SetCBEmbAudioSignal', 'SRAMSoundLoad'
