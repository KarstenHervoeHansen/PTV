; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -Ic:\cxa\rtxc\xa\include -I. -Ml
;          -O2 -s
$CASE
$NOZPAGE
	NAME	RS232CMD
	SYMB	TOOL, "XA C compiler v2.0", 1
	SYMB	TYPE, 256, "bit", 'g', 0, 1
	SYMB	FILE, "rs232cmd.c"
; rs232cmd.c    1	/* MODULE:                                                                  */
; rs232cmd.c    2	/*   r232cmd.c - RS232 remote commands.                            			 */
; rs232cmd.c    3	/****************************************************************************/
; rs232cmd.c    4	/* FUNCTIONS:                                                               */
; rs232cmd.c    5	/*                                                                          */
; rs232cmd.c    6	/* TASKS:                                                                   */
; rs232cmd.c    7	/*                                                                          */
; rs232cmd.c    8	/* NOTES:                                                                   */
; rs232cmd.c    9	/*                                                                          */
; rs232cmd.c   10	/****************************************************************************/
; rs232cmd.c   11	/*
; rs232cmd.c   12	 *   PTV software for PT5201
; rs232cmd.c   13	 *   Copyright (c) 
; rs232cmd.c   14	 *   ProTeleVision Technologies A/S.
; rs232cmd.c   15	 *   ALL RIGHTS RESERVED
; rs232cmd.c   16	*/
; rs232cmd.c   17	/****************************************************************************/
; rs232cmd.c   18	
; rs232cmd.c   19	/****************************************************************************/
; rs232cmd.c   20	/* Include files:							  													 */
; rs232cmd.c   21	
; rs232cmd.c   22	#include <string.h>
	SYMB	FILE, "c:\\cxa\\include\\string.h"
	SYMB	TYPE, 257, "size_t", 'T', #18
	SYMB	ENDF
; rs232cmd.c   23	#include <ctype.h>
	SYMB	FILE, "c:\\cxa\\include\\ctype.h"
	SYMB	ENDF
; rs232cmd.c   24	#include <stdio.h>
	SYMB	FILE, "c:\\cxa\\include\\stdio.h"
	SYMB	FILE, "c:\\cxa\\include\\stdarg.h"
	SYMB	ENDF
	SYMB	TYPE, 258, 'n', #2, 130
	SYMB	TYPE, 259, 'P', #258
	SYMB	TYPE, 260, "_iobuf", 'S', 14,\
		 "_ptr", #259, 0,\
		 "_cnt", #16, 4,\
		 "_base", #259, 6,\
		 "_flag", #2, 10,\
		 "_file", #2, 11,\
		 "_bufsiz", #16, 12
	SYMB	TYPE, 261, "FILE", 'T', #260
	SYMB	TYPE, 262, 'n', #1, 130
	SYMB	TYPE, 263, 'P', #262
	SYMB	TYPE, 264, 'Z', #263, 0
	SYMB	TYPE, 266, "va_list", 'T', #264
	SYMB	TYPE, 267, "fpos_t", 'T', #7
	SYMB	ENDF
; rs232cmd.c   25	#include <stdlib.h>
	SYMB	FILE, "c:\\cxa\\include\\stdlib.h"
	SYMB	FILE, "c:\\cxa\\include\\limits.h"
	SYMB	ENDF
	SYMB	TYPE, 268, 'S', 4,\
		 "quot", #16, 0,\
		 "rem", #16, 2
	SYMB	TYPE, 269, "div_t", 'T', #268
	SYMB	TYPE, 270, 'S', 8,\
		 "quot", #6, 0,\
		 "rem", #6, 4
	SYMB	TYPE, 271, "ldiv_t", 'T', #270
	SYMB	TYPE, 272, "wchar_t", 'T', #5
	SYMB	ENDF
; rs232cmd.c   26	#include <math.h>
	SYMB	FILE, "c:\\cxa\\include\\math.h"
	SYMB	ENDF
; rs232cmd.c   27	
; rs232cmd.c   28	#include "config.h"
	SYMB	FILE, "config.h"
	SYMB	ENDF
; rs232cmd.c   29	#include "define.h"
	SYMB	FILE, "define.h"
	SYMB	ENDF
; rs232cmd.c   30	#include "rtxcobj.h"
	SYMB	FILE, "rtxcobj.h"
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\rtxcapi.h"
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\typedef.h"
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 273, "KOBJNUM", 'T', #3
	SYMB	TYPE, 274, "TASK", 'T', #2
	SYMB	ENDF
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\rtxstruc.h"
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 275, "KSNUM", 'T', #3
	SYMB	TYPE, 276, "PRIORITY", 'T', #274
	SYMB	TYPE, 277, "TSTATE", 'T', #5
	SYMB	TYPE, 278, "TSLICE", 'T', #3
	SYMB	TYPE, 280, 'n', #279, 130
	SYMB	TYPE, 281, 'P', #280
	SYMB	TYPE, 283, 'n', #282, 130
	SYMB	TYPE, 284, 'P', #283
	SYMB	TYPE, 285, 'n', #275, 130
	SYMB	TYPE, 286, 'P', #285
	SYMB	TYPE, 287, 'X', 12, #1, 30, 0
	SYMB	TYPE, 288, 'n', #287, 129
	SYMB	TYPE, 289, 'P', #288
	SYMB	TYPE, 290, "frame", 'S', 24,\
		 "es", #3, 0,\
		 "cs", #3, 1,\
		 "ssel", #3, 2,\
		 "ds", #3, 3,\
		 "pksnum", #286, 4,\
		 "R2", #18, 8,\
		 "R3", #18, 10,\
		 "R4", #18, 12,\
		 "R5", #18, 14,\
		 "R6", #18, 16,\
		 "psw", #18, 18,\
		 "pc", #289, 20
	SYMB	TYPE, 291, 'n', #290, 130
	SYMB	TYPE, 292, 'P', #291
	SYMB	TYPE, 293, 'X', 12, #1, 30, 0
	SYMB	TYPE, 294, 'n', #293, 129
	SYMB	TYPE, 295, 'P', #294
	SYMB	TYPE, 279, "tcb", 'S', 36,\
		 "flink", #281, 0,\
		 "blink", #281, 4,\
		 "pclkblk", #284, 8,\
		 "task", #274, 12,\
		 "priority", #276, 13,\
		 "sp", #292, 14,\
		 "status", #277, 18,\
		 "pc_t0", #295, 20,\
		 "stackbase", #259, 24,\
		 "stacksize", #257, 28,\
		 "tslice", #278, 30,\
		 "newslice", #278, 31,\
		 "arg", #263, 32
	SYMB	TYPE, 296, "TCB", 'T', #279
	SYMB	TYPE, 297, "SEMA", 'T', #273
	SYMB	TYPE, 298, "MAP", 'T', #273
	SYMB	TYPE, 300, 'n', #299, 130
	SYMB	TYPE, 301, 'P', #300
	SYMB	TYPE, 299, "rtxcmsg", 'S', 8,\
		 "link", #301, 0,\
		 "task", #274, 4,\
		 "priority", #276, 5,\
		 "sema", #297, 6
	SYMB	TYPE, 302, "RTXCMSG", 'T', #299
	SYMB	TYPE, 303, "TICKS", 'T', #16
	SYMB	TYPE, 304, 'N',\
		 "DELAY_OBJ", 0,\
		 "SEMAPHORE_OBJ", 1,\
		 "PARTITION_OBJ", 2,\
		 "QUEUE_OBJ", 3,\
		 "RESOURCE_OBJ", 4,\
		 "MAILBOX_OBJ", 5,\
		 "TIMER_OBJ", 6
	SYMB	TYPE, 305, "OBJTYPE", 'T', #304
	SYMB	TYPE, 282, "clkblk", 'S', 18,\
		 "flink", #284, 0,\
		 "blink", #284, 4,\
		 "remain", #303, 8,\
		 "recycle", #303, 10,\
		 "task", #274, 12,\
		 "state", #2, 13,\
		 "objtype", #305, 14,\
		 "objid", #273, 16
	SYMB	TYPE, 306, 'N',\
		 "PRIORITY_INVERSION_OFF", 0,\
		 "PRIORITY_INVERSION_ON", 1
	SYMB	TYPE, 307, "RESATTR", 'T', #306
	SYMB	ENDF
	SYMB	TYPE, 308, 'N',\
		 "RC_GOOD", 0,\
		 "RC_WAIT_CONFLICT", 1,\
		 "RC_NO_TIMERS", 2,\
		 "RC_TIMER_INACTIVE", 3,\
		 "RC_TIMER_ILLEGAL", 4,\
		 "RC_TIMEOUT", 5,\
		 "RC_QUEUE_FULL", 6,\
		 "RC_QUEUE_EMPTY", 7,\
		 "RC_ILLEGAL_QUEUE_SIZE", 8,\
		 "RC_BUSY", 9,\
		 "RC_NESTED", 10,\
		 "RC_ILLEGAL_TASK", 11,\
		 "RC_ACTIVE_TASK", 12,\
		 "RC_NO_YIELD", 13,\
		 "RC_MISSED_EVENT", 14
	SYMB	TYPE, 309, "KSRC", 'T', #308
	SYMB	TYPE, 310, "SSTATE", 'T', #274
	SYMB	TYPE, 311, "MBOX", 'T', #273
	SYMB	TYPE, 312, "QUEUE", 'T', #273
	SYMB	TYPE, 313, 'N',\
		 "QNE", 0,\
		 "QNF", 1,\
		 "QF", 2,\
		 "QE", 3
	SYMB	TYPE, 314, "QCOND", 'T', #313
	SYMB	TYPE, 315, "RESOURCE", 'T', #273
	SYMB	TYPE, 316, "CLKBLK", 'T', #282
	SYMB	TYPE, 317, "time_t", 'T', #6
	SYMB	TYPE, 318, "FRAME", 'T', #290
	SYMB	ENDF
	SYMB	FILE, "ctask.h"
	SYMB	ENDF
	SYMB	FILE, "csema.h"
	SYMB	ENDF
	SYMB	FILE, "cres.h"
	SYMB	ENDF
	SYMB	FILE, "cqueue.h"
	SYMB	ENDF
	SYMB	FILE, "cpart.h"
	SYMB	ENDF
	SYMB	FILE, "cmbox.h"
	SYMB	ENDF
	SYMB	FILE, "cclock.h"
	SYMB	ENDF
	SYMB	TYPE, 320, 'n', #319, 130
	SYMB	TYPE, 321, 'P', #320
	SYMB	TYPE, 319, 'X', 12, #1, 30, 2, #321, #259
	SYMB	TYPE, 323, 'n', #322, 129
	SYMB	TYPE, 324, 'P', #323
	SYMB	TYPE, 325, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 326, 'n', #325, 129
	SYMB	TYPE, 327, 'P', #326
	SYMB	TYPE, 328, 'n', #6, 130
	SYMB	TYPE, 329, 'P', #328
	SYMB	TYPE, 328, 'X', 12, #16, 30, 2, #321, #329
	SYMB	TYPE, 331, 'n', #330, 129
	SYMB	TYPE, 332, 'P', #331
	SYMB	TYPE, 333, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 334, 'n', #333, 129
	SYMB	TYPE, 335, 'P', #334
	SYMB	TYPE, 336, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 337, 'n', #336, 129
	SYMB	TYPE, 338, 'P', #337
	SYMB	TYPE, 339, 'X', 12, #16, 30, 1, #321
	SYMB	TYPE, 340, 'n', #339, 129
	SYMB	TYPE, 341, 'P', #340
	SYMB	TYPE, 319, "TEvent", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TEvent", #324, 2,\
		 "_TEvent", #327, 6,\
		 "Wait", #332, 10,\
		 "Set", #335, 14,\
		 "Clear", #338, 18,\
		 "IsSet", #341, 22,\
		 "ID", #297, 26,\
		 "Name", #259, 28
	SYMB	TYPE, 342, "TEvent", 'T', #319
	SYMB	TYPE, 344, 'n', #343, 130
	SYMB	TYPE, 345, 'P', #344
	SYMB	TYPE, 343, 'X', 12, #1, 30, 1, #345
	SYMB	TYPE, 347, 'n', #346, 129
	SYMB	TYPE, 348, 'P', #347
	SYMB	TYPE, 349, 'X', 12, #1, 30, 1, #345
	SYMB	TYPE, 350, 'n', #349, 129
	SYMB	TYPE, 351, 'P', #350
	SYMB	TYPE, 352, 'n', #342, 130
	SYMB	TYPE, 353, 'P', #352
	SYMB	TYPE, 352, 'X', 12, #16, 30, 2, #345, #353
	SYMB	TYPE, 355, 'n', #354, 129
	SYMB	TYPE, 356, 'P', #355
	SYMB	TYPE, 357, 'X', 12, #1, 30, 2, #345, #353
	SYMB	TYPE, 358, 'n', #357, 129
	SYMB	TYPE, 359, 'P', #358
	SYMB	TYPE, 360, 'X', 12, #16, 30, 2, #345, #353
	SYMB	TYPE, 361, 'n', #360, 129
	SYMB	TYPE, 362, 'P', #361
	SYMB	TYPE, 363, 'X', 12, #353, 30, 2, #345, #329
	SYMB	TYPE, 364, 'n', #363, 129
	SYMB	TYPE, 365, 'P', #364
	SYMB	TYPE, 366, 'Z', #2, 95
	SYMB	TYPE, 343, "TEventList", 'S', 122,\
		 "ObjectID", #16, 0,\
		 "TEventList", #348, 2,\
		 "_TEventList", #351, 6,\
		 "Append", #356, 10,\
		 "Clear", #359, 14,\
		 "InList", #362, 18,\
		 "Wait", #365, 22,\
		 "Align", #366, 26
	SYMB	TYPE, 368, "TEventList", 'T', #343
	SYMB	TYPE, 370, 'n', #369, 130
	SYMB	TYPE, 371, 'P', #370
	SYMB	TYPE, 369, 'X', 12, #1, 30, 2, #371, #259
	SYMB	TYPE, 373, 'n', #372, 129
	SYMB	TYPE, 374, 'P', #373
	SYMB	TYPE, 375, 'X', 12, #1, 30, 1, #371
	SYMB	TYPE, 376, 'n', #375, 129
	SYMB	TYPE, 377, 'P', #376
	SYMB	TYPE, 378, 'X', 12, #1, 30, 1, #371
	SYMB	TYPE, 379, 'n', #378, 129
	SYMB	TYPE, 380, 'P', #379
	SYMB	TYPE, 381, 'X', 12, #1, 30, 1, #371
	SYMB	TYPE, 382, 'n', #381, 129
	SYMB	TYPE, 383, 'P', #382
	SYMB	TYPE, 384, 'X', 12, #16, 30, 1, #371
	SYMB	TYPE, 385, 'n', #384, 129
	SYMB	TYPE, 386, 'P', #385
	SYMB	TYPE, 369, "TResource", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TResource", #374, 2,\
		 "_TResource", #377, 6,\
		 "Lock", #380, 10,\
		 "Unlock", #383, 14,\
		 "Owner", #386, 18,\
		 "ID", #315, 22,\
		 "Name", #259, 24
	SYMB	TYPE, 387, "TResource", 'T', #369
	SYMB	TYPE, 388, 'X', 12, #1, 30, 0
	SYMB	TYPE, 389, 'n', #388, 129
	SYMB	TYPE, 390, 'P', #389
	SYMB	TYPE, 392, 'n', #391, 130
	SYMB	TYPE, 393, 'P', #392
	SYMB	TYPE, 388, 'X', 12, #1, 30, 3, #393, #16, #390
	SYMB	TYPE, 395, 'n', #394, 129
	SYMB	TYPE, 396, 'P', #395
	SYMB	TYPE, 397, 'X', 12, #1, 30, 1, #393
	SYMB	TYPE, 398, 'n', #397, 129
	SYMB	TYPE, 399, 'P', #398
	SYMB	TYPE, 400, 'X', 12, #1, 30, 1, #393
	SYMB	TYPE, 401, 'n', #400, 129
	SYMB	TYPE, 402, 'P', #401
	SYMB	TYPE, 403, 'X', 12, #1, 30, 2, #393, #16
	SYMB	TYPE, 404, 'n', #403, 129
	SYMB	TYPE, 405, 'P', #404
	SYMB	TYPE, 406, 'X', 12, #1, 30, 1, #393
	SYMB	TYPE, 407, 'n', #406, 129
	SYMB	TYPE, 408, 'P', #407
	SYMB	TYPE, 409, 'X', 12, #16, 30, 1, #393
	SYMB	TYPE, 410, 'n', #409, 129
	SYMB	TYPE, 411, 'P', #410
	SYMB	TYPE, 412, 'X', 12, #1, 30, 2, #393, #16
	SYMB	TYPE, 413, 'n', #412, 129
	SYMB	TYPE, 414, 'P', #413
	SYMB	TYPE, 391, "TThread", 'S', 36,\
		 "ObjectID", #16, 0,\
		 "TThread", #396, 2,\
		 "Execute", #399, 6,\
		 "Terminate", #402, 10,\
		 "Suspend", #405, 14,\
		 "Resume", #408, 18,\
		 "GetPriority", #411, 22,\
		 "SetPriority", #414, 26,\
		 "ID", #274, 30,\
		 "Status", #2, 31,\
		 "Stack", #259, 32
	SYMB	TYPE, 415, "TThread", 'T', #391
	SYMB	TYPE, 417, 'n', #416, 130
	SYMB	TYPE, 418, 'P', #417
	SYMB	TYPE, 416, 'X', 12, #1, 30, 1, #418
	SYMB	TYPE, 420, 'n', #419, 129
	SYMB	TYPE, 421, 'P', #420
	SYMB	TYPE, 422, 'X', 12, #1, 30, 1, #418
	SYMB	TYPE, 423, 'n', #422, 129
	SYMB	TYPE, 424, 'P', #423
	SYMB	TYPE, 425, 'X', 12, #1, 30, 2, #418, #16
	SYMB	TYPE, 426, 'n', #425, 129
	SYMB	TYPE, 427, 'P', #426
	SYMB	TYPE, 428, 'X', 12, #16, 30, 1, #418
	SYMB	TYPE, 429, 'n', #428, 129
	SYMB	TYPE, 430, 'P', #429
	SYMB	TYPE, 431, 'X', 12, #1, 30, 2, #418, #16
	SYMB	TYPE, 432, 'n', #431, 129
	SYMB	TYPE, 433, 'P', #432
	SYMB	TYPE, 434, 'n', #316, 130
	SYMB	TYPE, 435, 'P', #434
	SYMB	TYPE, 416, "TTimer", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TTimer", #421, 2,\
		 "_TTimer", #424, 6,\
		 "SetPeriod", #427, 10,\
		 "GetPeriod", #430, 14,\
		 "Tick", #433, 18,\
		 "TimeOut", #353, 22,\
		 "Period", #4, 26,\
		 "Handle", #435, 28
	SYMB	TYPE, 436, "TTimer", 'T', #416
	SYMB	TYPE, 438, 'n', #437, 130
	SYMB	TYPE, 439, 'P', #438
	SYMB	TYPE, 437, 'X', 12, #1, 30, 3, #439, #16, #16
	SYMB	TYPE, 441, 'n', #440, 129
	SYMB	TYPE, 442, 'P', #441
	SYMB	TYPE, 443, 'X', 12, #1, 30, 1, #439
	SYMB	TYPE, 444, 'n', #443, 129
	SYMB	TYPE, 445, 'P', #444
	SYMB	TYPE, 446, 'X', 12, #259, 30, 2, #439, #263
	SYMB	TYPE, 447, 'n', #446, 129
	SYMB	TYPE, 448, 'P', #447
	SYMB	TYPE, 449, 'X', 12, #1, 30, 2, #439, #263
	SYMB	TYPE, 450, 'n', #449, 129
	SYMB	TYPE, 451, 'P', #450
	SYMB	TYPE, 437, "TStream", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TStream", #442, 2,\
		 "_TStream", #445, 6,\
		 "Get", #448, 10,\
		 "Put", #451, 14,\
		 "ID", #312, 18,\
		 "Width", #16, 20,\
		 "Depth", #16, 22,\
		 "Handle", #259, 24
	SYMB	TYPE, 452, "TStream", 'T', #437
	SYMB	ENDF
; rs232cmd.c   31	#include "rs232par.h"
	SYMB	FILE, "rs232par.h"
	SYMB	ENDF
; rs232cmd.c   32	#include "rs232err.h"
	SYMB	FILE, "rs232err.h"
	SYMB	ENDF
; rs232cmd.c   33	#include "rs232cmd.h"
	SYMB	FILE, "rs232cmd.h"
	SYMB	FILE, "define.h"
	SYMB	ENDF
	SYMB	ENDF
; rs232cmd.c   34	#include "util.h"
	SYMB	FILE, "util.h"
	SYMB	ENDF
; rs232cmd.c   35	#include "rs232.h"
	SYMB	FILE, "rs232.h"
	SYMB	FILE, "define.h"
	SYMB	ENDF
	SYMB	FILE, "rtxcobj.h"
	SYMB	ENDF
	SYMB	ENDF
; rs232cmd.c   36	#include "i2c_drv.h"
	SYMB	FILE, "i2c_drv.h"
	SYMB	ENDF
; rs232cmd.c   37	#include "sio0drv.h"
	SYMB	FILE, "sio0drv.h"
	SYMB	FILE, "define.h"
	SYMB	ENDF
	SYMB	FILE, "rtxcobj.h"
	SYMB	ENDF
	SYMB	ENDF
; rs232cmd.c   38	#include "instru.h"
	SYMB	FILE, "instru.h"
	SYMB	FILE, "nv_drv.h"
	SYMB	TYPE, 453, "NvPointer", 'T', #18
	SYMB	ENDF
	SYMB	FILE, "genlock.h"
	SYMB	TYPE, 454, 'S', 6,\
		 "System", #3, 0,\
		 "Delay", #7, 2
	SYMB	TYPE, 455, "GenlockObject", 'T', #454
	SYMB	ENDF
	SYMB	FILE, "bb.h"
	SYMB	TYPE, 456, 'S', 8,\
		 "System", #3, 0,\
		 "Delay", #7, 2,\
		 "ScHPhase", #16, 6
	SYMB	TYPE, 457, "BBObject", 'T', #456
	SYMB	ENDF
	SYMB	FILE, "cbar.h"
	SYMB	TYPE, 458, 'S', 12,\
		 "System", #3, 0,\
		 "Pattern", #18, 2,\
		 "Delay", #7, 4,\
		 "ScHPhase", #16, 8,\
		 "EmbAudioSignal", #3, 10
	SYMB	TYPE, 459, "CBObject", 'T', #458
	SYMB	ENDF
	SYMB	FILE, "audio.h"
	SYMB	TYPE, 460, 'S', 14,\
		 "System", #16, 0,\
		 "Signal", #16, 2,\
		 "Level", #16, 4,\
		 "Timing", #10, 6,\
		 "Frequency", #16, 10,\
		 "Click", #16, 12
	SYMB	TYPE, 461, "AudioObject", 'T', #460
	SYMB	ENDF
	SYMB	TYPE, 462, 'S', 32,\
		 "Date", #7, 0,\
		 "DACFactDate", #7, 4,\
		 "DACUserDate", #7, 8,\
		 "DACFactValue", #18, 12,\
		 "DACUserValue", #18, 14,\
		 "HPHZeroG", #7, 16,\
		 "PhaseG", #7, 20,\
		 "HPHZeroM", #7, 24,\
		 "PhaseM", #7, 28
	SYMB	TYPE, 463, "GenlockCalibrationObject", 'T', #462
	SYMB	TYPE, 464, 'S', 20,\
		 "Date", #7, 0,\
		 "PhaseG", #7, 4,\
		 "ScHPhaseG", #18, 8,\
		 "PhaseM", #7, 10,\
		 "ScHPhaseM", #18, 14,\
		 "DACGain", #3, 16,\
		 "DACOffset", #3, 17,\
		 "DACLevel", #3, 18
	SYMB	TYPE, 465, "BBCalibrationObject", 'T', #464
	SYMB	TYPE, 466, 'S', 20,\
		 "Date", #7, 0,\
		 "PhaseG", #7, 4,\
		 "ScHPhaseG", #3, 8,\
		 "PhaseM", #7, 10,\
		 "ScHPhaseM", #3, 14,\
		 "GainG", #3, 15,\
		 "ChromaGainG", #3, 16,\
		 "GainM", #3, 17,\
		 "ChromaGainM", #3, 18
	SYMB	TYPE, 467, "CBCalibrationObject", 'T', #466
	SYMB	TYPE, 468, 'S', 6,\
		 "Date", #7, 0,\
		 "AnalogLeftChannel", #3, 4,\
		 "AnalogRightChannel", #3, 5
	SYMB	TYPE, 469, "AudioCalibrationObject", 'T', #468
	SYMB	TYPE, 470, 'Z', #457, 2
	SYMB	TYPE, 472, 'Z', #461, 1
	SYMB	TYPE, 474, 'S', 74,\
		 "ActivePreset", #16, 0,\
		 "GenlockSetup", #455, 2,\
		 "BBSetup", #470, 8,\
		 "CBSetup", #459, 32,\
		 "AudioOutput", #16, 44,\
		 "AudioSetup", #472, 46
	SYMB	TYPE, 475, "SettingsObject", 'T', #474
	SYMB	TYPE, 476, 'Z', #2, 32
	SYMB	TYPE, 478, 'Z', #2, 8
	SYMB	TYPE, 480, 'Z', #2, 12
	SYMB	TYPE, 482, 'Z', #465, 2
	SYMB	TYPE, 484, 'S', 224,\
		 "Company", #476, 0,\
		 "Type", #476, 33,\
		 "KUNumber", #478, 66,\
		 "SWRevision", #478, 75,\
		 "NC12", #480, 84,\
		 "ResetSystem", #3, 97,\
		 "ProdDate", #7, 98,\
		 "UpdateDate", #7, 102,\
		 "GenlockCalibration", #463, 106,\
		 "BBCalibration", #482, 138,\
		 "CBCalibration", #467, 198,\
		 "AudioCalibration", #469, 218
	SYMB	TYPE, 485, "CalibrationObject", 'T', #484
	SYMB	ENDF
; rs232cmd.c   39	#include "tables.h"
	SYMB	FILE, "tables.h"
	SYMB	ENDF
; rs232cmd.c   40	#include "genlock.h"
	SYMB	FILE, "genlock.h"
	SYMB	ENDF
; rs232cmd.c   41	#include "bb.h"
	SYMB	FILE, "bb.h"
	SYMB	ENDF
; rs232cmd.c   42	#include "cbar.h"
	SYMB	FILE, "cbar.h"
	SYMB	ENDF
; rs232cmd.c   43	#include "audio.h"
	SYMB	FILE, "audio.h"
	SYMB	ENDF
; rs232cmd.c   44	#include "plddrv.h"
	SYMB	FILE, "plddrv.h"
	SYMB	ENDF
; rs232cmd.c   45	#include "unitprg.h"
	SYMB	FILE, "unitprg.h"
	SYMB	TYPE, 486, 'N',\
		 "true", -1,\
		 "false", 0
	SYMB	TYPE, 487, "bool", 'T', #486
	SYMB	ENDF
; rs232cmd.c   46	
; rs232cmd.c   47	
; rs232cmd.c   48	UC code MasterSWVersion				 	= 23;
RS232CMD_RO	SEGMENT	HCODE ROMDATA
	RSEG	RS232CMD_RO
	SYMB	IDEN, "MasterSWVersion", _MasterSWVersion, #3, 129, 0
	SYMB	ALAB, _MasterSWVersion, #3
	PUBLIC	_MasterSWVersion
_MasterSWVersion:
; rs232cmd.c   49	
; rs232cmd.c   50	char code SystemVersionTxt[] 			= "1995.0";
	DB	017H
	SYMB	TYPE, 488, 'Z', #2, -1
	SYMB	IDEN, "SystemVersionTxt", _SystemVersionTxt, #488, 129, 0
	SYMB	ALAB, _SystemVersionTxt, #488
	PUBLIC	_SystemVersionTxt
_SystemVersionTxt:
; rs232cmd.c   51	char code PasswordText[] 				= "PASS5201";
	DB	031H,039H,039H,035H,02EH,030H,000H
	SYMB	IDEN, "PasswordText", _PasswordText, #488, 129, 0
	SYMB	ALAB, _PasswordText, #488
	PUBLIC	_PasswordText
_PasswordText:
; rs232cmd.c   52	
; rs232cmd.c   53	char code CLSCmdTxt[] 	      		= "CLS";
	DB	050H,041H,053H,053H,035H,032H,030H,031H,000H
	SYMB	IDEN, "CLSCmdTxt", _CLSCmdTxt, #488, 129, 0
	SYMB	ALAB, _CLSCmdTxt, #488
	PUBLIC	_CLSCmdTxt
_CLSCmdTxt:
; rs232cmd.c   54	char code ESECmdTxt[] 	      		= "ESE";
	DB	043H,04CH,053H,000H
	SYMB	IDEN, "ESECmdTxt", _ESECmdTxt, #488, 129, 0
	SYMB	ALAB, _ESECmdTxt, #488
	PUBLIC	_ESECmdTxt
_ESECmdTxt:
; rs232cmd.c   55	char code ESRCmdTxt[] 	      		= "ESR";
	DB	045H,053H,045H,000H
	SYMB	IDEN, "ESRCmdTxt", _ESRCmdTxt, #488, 129, 0
	SYMB	ALAB, _ESRCmdTxt, #488
	PUBLIC	_ESRCmdTxt
_ESRCmdTxt:
; rs232cmd.c   56	char code OPCCmdTxt[] 	      		= "OPC";
	DB	045H,053H,052H,000H
	SYMB	IDEN, "OPCCmdTxt", _OPCCmdTxt, #488, 129, 0
	SYMB	ALAB, _OPCCmdTxt, #488
	PUBLIC	_OPCCmdTxt
_OPCCmdTxt:
; rs232cmd.c   57	char code SRECmdTxt[] 	      		= "SRE";
	DB	04FH,050H,043H,000H
	SYMB	IDEN, "SRECmdTxt", _SRECmdTxt, #488, 129, 0
	SYMB	ALAB, _SRECmdTxt, #488
	PUBLIC	_SRECmdTxt
_SRECmdTxt:
; rs232cmd.c   58	char code STBCmdTxt[] 	      		= "STB";
	DB	053H,052H,045H,000H
	SYMB	IDEN, "STBCmdTxt", _STBCmdTxt, #488, 129, 0
	SYMB	ALAB, _STBCmdTxt, #488
	PUBLIC	_STBCmdTxt
_STBCmdTxt:
; rs232cmd.c   59	char code TSTCmdTxt[] 	      		= "TST";
	DB	053H,054H,042H,000H
	SYMB	IDEN, "TSTCmdTxt", _TSTCmdTxt, #488, 129, 0
	SYMB	ALAB, _TSTCmdTxt, #488
	PUBLIC	_TSTCmdTxt
_TSTCmdTxt:
; rs232cmd.c   60	char code WAICmdTxt[] 	      		= "WAI";
	DB	054H,053H,054H,000H
	SYMB	IDEN, "WAICmdTxt", _WAICmdTxt, #488, 129, 0
	SYMB	ALAB, _WAICmdTxt, #488
	PUBLIC	_WAICmdTxt
_WAICmdTxt:
; rs232cmd.c   61	char code RSTCmdTxt[] 	      		= "RST";
	DB	057H,041H,049H,000H
	SYMB	IDEN, "RSTCmdTxt", _RSTCmdTxt, #488, 129, 0
	SYMB	ALAB, _RSTCmdTxt, #488
	PUBLIC	_RSTCmdTxt
_RSTCmdTxt:
; rs232cmd.c   62	char code IDNCmdTxt[] 	      		= "IDN";
	DB	052H,053H,054H,000H
	SYMB	IDEN, "IDNCmdTxt", _IDNCmdTxt, #488, 129, 0
	SYMB	ALAB, _IDNCmdTxt, #488
	PUBLIC	_IDNCmdTxt
_IDNCmdTxt:
; rs232cmd.c   63	char code RCLCmdTxt[] 	      		= "RCL";
	DB	049H,044H,04EH,000H
	SYMB	IDEN, "RCLCmdTxt", _RCLCmdTxt, #488, 129, 0
	SYMB	ALAB, _RCLCmdTxt, #488
	PUBLIC	_RCLCmdTxt
_RCLCmdTxt:
; rs232cmd.c   64	char code SAVCmdTxt[] 	      		= "SAV";
	DB	052H,043H,04CH,000H
	SYMB	IDEN, "SAVCmdTxt", _SAVCmdTxt, #488, 129, 0
	SYMB	ALAB, _SAVCmdTxt, #488
	PUBLIC	_SAVCmdTxt
_SAVCmdTxt:
; rs232cmd.c   65	
; rs232cmd.c   66	char code SYSTEMCmdTxt[] 	   	  	= "SYSTEM";
	DB	053H,041H,056H,000H
	SYMB	IDEN, "SYSTEMCmdTxt", _SYSTEMCmdTxt, #488, 129, 0
	SYMB	ALAB, _SYSTEMCmdTxt, #488
	PUBLIC	_SYSTEMCmdTxt
_SYSTEMCmdTxt:
; rs232cmd.c   67	char code SYSTCmdTxt[] 		    	 	= "SYST";
	DB	053H,059H,053H,054H,045H,04DH,000H
	SYMB	IDEN, "SYSTCmdTxt", _SYSTCmdTxt, #488, 129, 0
	SYMB	ALAB, _SYSTCmdTxt, #488
	PUBLIC	_SYSTCmdTxt
_SYSTCmdTxt:
; rs232cmd.c   68	char code STATUSCmdTxt[] 			  	= "STATUS";
	DB	053H,059H,053H,054H,000H
	SYMB	IDEN, "STATUSCmdTxt", _STATUSCmdTxt, #488, 129, 0
	SYMB	ALAB, _STATUSCmdTxt, #488
	PUBLIC	_STATUSCmdTxt
_STATUSCmdTxt:
; rs232cmd.c   69	char code STATCmdTxt[] 	 			  	= "STAT";
	DB	053H,054H,041H,054H,055H,053H,000H
	SYMB	IDEN, "STATCmdTxt", _STATCmdTxt, #488, 129, 0
	SYMB	ALAB, _STATCmdTxt, #488
	PUBLIC	_STATCmdTxt
_STATCmdTxt:
; rs232cmd.c   70	char code DIAGNOSTICCmdTxt[]			= "DIAGNOSTIC";
	DB	053H,054H,041H,054H,000H
	SYMB	IDEN, "DIAGNOSTICCmdTxt", _DIAGNOSTICCmdTxt, #488, 129, 0
	SYMB	ALAB, _DIAGNOSTICCmdTxt, #488
	PUBLIC	_DIAGNOSTICCmdTxt
_DIAGNOSTICCmdTxt:
; rs232cmd.c   71	char code DIAGCmdTxt[] 	    			= "DIAG";
	DB	044H,049H,041H,047H,04EH,04FH,053H,054H,049H,043H,000H
	SYMB	IDEN, "DIAGCmdTxt", _DIAGCmdTxt, #488, 129, 0
	SYMB	ALAB, _DIAGCmdTxt, #488
	PUBLIC	_DIAGCmdTxt
_DIAGCmdTxt:
; rs232cmd.c   72	char code MONITORCmdTxt[]			  	= "MONITOR";
	DB	044H,049H,041H,047H,000H
	SYMB	IDEN, "MONITORCmdTxt", _MONITORCmdTxt, #488, 129, 0
	SYMB	ALAB, _MONITORCmdTxt, #488
	PUBLIC	_MONITORCmdTxt
_MONITORCmdTxt:
; rs232cmd.c   73	char code MONCmdTxt[] 	    			= "MON";
	DB	04DH,04FH,04EH,049H,054H,04FH,052H,000H
	SYMB	IDEN, "MONCmdTxt", _MONCmdTxt, #488, 129, 0
	SYMB	ALAB, _MONCmdTxt, #488
	PUBLIC	_MONCmdTxt
_MONCmdTxt:
; rs232cmd.c   74	char code INPUTCmdTxt[] 	 		  	= "INPUT";
	DB	04DH,04FH,04EH,000H
	SYMB	IDEN, "INPUTCmdTxt", _INPUTCmdTxt, #488, 129, 0
	SYMB	ALAB, _INPUTCmdTxt, #488
	PUBLIC	_INPUTCmdTxt
_INPUTCmdTxt:
; rs232cmd.c   75	char code INPCmdTxt[] 	 			  	= "INP";
	DB	049H,04EH,050H,055H,054H,000H
	SYMB	IDEN, "INPCmdTxt", _INPCmdTxt, #488, 129, 0
	SYMB	ALAB, _INPCmdTxt, #488
	PUBLIC	_INPCmdTxt
_INPCmdTxt:
; rs232cmd.c   76	char code OUTPUTCmdTxt[] 			  	= "OUTPUT";
	DB	049H,04EH,050H,000H
	SYMB	IDEN, "OUTPUTCmdTxt", _OUTPUTCmdTxt, #488, 129, 0
	SYMB	ALAB, _OUTPUTCmdTxt, #488
	PUBLIC	_OUTPUTCmdTxt
_OUTPUTCmdTxt:
; rs232cmd.c   77	char code OUTPCmdTxt[] 				  	= "OUTP";
	DB	04FH,055H,054H,050H,055H,054H,000H
	SYMB	IDEN, "OUTPCmdTxt", _OUTPCmdTxt, #488, 129, 0
	SYMB	ALAB, _OUTPCmdTxt, #488
	PUBLIC	_OUTPCmdTxt
_OUTPCmdTxt:
; rs232cmd.c   78	char code USERCmdTxt[]				  	= "USER";
	DB	04FH,055H,054H,050H,000H
	SYMB	IDEN, "USERCmdTxt", _USERCmdTxt, #488, 129, 0
	SYMB	ALAB, _USERCmdTxt, #488
	PUBLIC	_USERCmdTxt
_USERCmdTxt:
; rs232cmd.c   79	char code MEASURECmdTxt[]			  	= "MEASURE";
	DB	055H,053H,045H,052H,000H
	SYMB	IDEN, "MEASURECmdTxt", _MEASURECmdTxt, #488, 129, 0
	SYMB	ALAB, _MEASURECmdTxt, #488
	PUBLIC	_MEASURECmdTxt
_MEASURECmdTxt:
; rs232cmd.c   80	char code MEASCmdTxt[] 	    			= "MEAS";
	DB	04DH,045H,041H,053H,055H,052H,045H,000H
	SYMB	IDEN, "MEASCmdTxt", _MEASCmdTxt, #488, 129, 0
	SYMB	ALAB, _MEASCmdTxt, #488
	PUBLIC	_MEASCmdTxt
_MEASCmdTxt:
; rs232cmd.c   81	char code FACTORYCmdTxt[]			  	= "FACTORY";
	DB	04DH,045H,041H,053H,000H
	SYMB	IDEN, "FACTORYCmdTxt", _FACTORYCmdTxt, #488, 129, 0
	SYMB	ALAB, _FACTORYCmdTxt, #488
	PUBLIC	_FACTORYCmdTxt
_FACTORYCmdTxt:
; rs232cmd.c   82	char code FACTCmdTxt[] 	    			= "FACT";
	DB	046H,041H,043H,054H,04FH,052H,059H,000H
	SYMB	IDEN, "FACTCmdTxt", _FACTCmdTxt, #488, 129, 0
	SYMB	ALAB, _FACTCmdTxt, #488
	PUBLIC	_FACTCmdTxt
_FACTCmdTxt:
; rs232cmd.c   83	
; rs232cmd.c   84	char code ERRORCmdTxt[] 	     		= "ERROR";
	DB	046H,041H,043H,054H,000H
	SYMB	IDEN, "ERRORCmdTxt", _ERRORCmdTxt, #488, 129, 0
	SYMB	ALAB, _ERRORCmdTxt, #488
	PUBLIC	_ERRORCmdTxt
_ERRORCmdTxt:
; rs232cmd.c   85	char code ERRCmdTxt[] 		     		= "ERR";
	DB	045H,052H,052H,04FH,052H,000H
	SYMB	IDEN, "ERRCmdTxt", _ERRCmdTxt, #488, 129, 0
	SYMB	ALAB, _ERRCmdTxt, #488
	PUBLIC	_ERRCmdTxt
_ERRCmdTxt:
; rs232cmd.c   86	char code VERSIONCmdTxt[] 	    		= "VERSION";
	DB	045H,052H,052H,000H
	SYMB	IDEN, "VERSIONCmdTxt", _VERSIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _VERSIONCmdTxt, #488
	PUBLIC	_VERSIONCmdTxt
_VERSIONCmdTxt:
; rs232cmd.c   87	char code VERSCmdTxt[] 	      		= "VERS";
	DB	056H,045H,052H,053H,049H,04FH,04EH,000H
	SYMB	IDEN, "VERSCmdTxt", _VERSCmdTxt, #488, 129, 0
	SYMB	ALAB, _VERSCmdTxt, #488
	PUBLIC	_VERSCmdTxt
_VERSCmdTxt:
; rs232cmd.c   88	char code PRESETCmdTxt[] 				= "PRESET";
	DB	056H,045H,052H,053H,000H
	SYMB	IDEN, "PRESETCmdTxt", _PRESETCmdTxt, #488, 129, 0
	SYMB	ALAB, _PRESETCmdTxt, #488
	PUBLIC	_PRESETCmdTxt
_PRESETCmdTxt:
; rs232cmd.c   89	char code PRESCmdTxt[] 					= "PRES";
	DB	050H,052H,045H,053H,045H,054H,000H
	SYMB	IDEN, "PRESCmdTxt", _PRESCmdTxt, #488, 129, 0
	SYMB	ALAB, _PRESCmdTxt, #488
	PUBLIC	_PRESCmdTxt
_PRESCmdTxt:
; rs232cmd.c   90	char code EVENTLOGCmdTxt[]				= "EVENTLOG";
	DB	050H,052H,045H,053H,000H
	SYMB	IDEN, "EVENTLOGCmdTxt", _EVENTLOGCmdTxt, #488, 129, 0
	SYMB	ALAB, _EVENTLOGCmdTxt, #488
	PUBLIC	_EVENTLOGCmdTxt
_EVENTLOGCmdTxt:
; rs232cmd.c   91	char code DATECmdTxt[]					= "DATE";
	DB	045H,056H,045H,04EH,054H,04CH,04FH,047H,000H
	SYMB	IDEN, "DATECmdTxt", _DATECmdTxt, #488, 129, 0
	SYMB	ALAB, _DATECmdTxt, #488
	PUBLIC	_DATECmdTxt
_DATECmdTxt:
; rs232cmd.c   92	char code TIMECmdTxt[]					= "TIME";
	DB	044H,041H,054H,045H,000H
	SYMB	IDEN, "TIMECmdTxt", _TIMECmdTxt, #488, 129, 0
	SYMB	ALAB, _TIMECmdTxt, #488
	PUBLIC	_TIMECmdTxt
_TIMECmdTxt:
; rs232cmd.c   93	
; rs232cmd.c   94	char code RECALLCmdTxt[] 				= "RECALL";
	DB	054H,049H,04DH,045H,000H
	SYMB	IDEN, "RECALLCmdTxt", _RECALLCmdTxt, #488, 129, 0
	SYMB	ALAB, _RECALLCmdTxt, #488
	PUBLIC	_RECALLCmdTxt
_RECALLCmdTxt:
; rs232cmd.c   95	char code RECCmdTxt[] 					= "REC";
	DB	052H,045H,043H,041H,04CH,04CH,000H
	SYMB	IDEN, "RECCmdTxt", _RECCmdTxt, #488, 129, 0
	SYMB	ALAB, _RECCmdTxt, #488
	PUBLIC	_RECCmdTxt
_RECCmdTxt:
; rs232cmd.c   96	char code STORECmdTxt[] 				= "STORE";
	DB	052H,045H,043H,000H
	SYMB	IDEN, "STORECmdTxt", _STORECmdTxt, #488, 129, 0
	SYMB	ALAB, _STORECmdTxt, #488
	PUBLIC	_STORECmdTxt
_STORECmdTxt:
; rs232cmd.c   97	char code STORCmdTxt[] 					= "STOR";
	DB	053H,054H,04FH,052H,045H,000H
	SYMB	IDEN, "STORCmdTxt", _STORCmdTxt, #488, 129, 0
	SYMB	ALAB, _STORCmdTxt, #488
	PUBLIC	_STORCmdTxt
_STORCmdTxt:
; rs232cmd.c   98	char code NAMECmdTxt[] 					= "NAME";
	DB	053H,054H,04FH,052H,000H
	SYMB	IDEN, "NAMECmdTxt", _NAMECmdTxt, #488, 129, 0
	SYMB	ALAB, _NAMECmdTxt, #488
	PUBLIC	_NAMECmdTxt
_NAMECmdTxt:
; rs232cmd.c   99	char code AUTHORCmdTxt[] 				= "AUTHOR";
	DB	04EH,041H,04DH,045H,000H
	SYMB	IDEN, "AUTHORCmdTxt", _AUTHORCmdTxt, #488, 129, 0
	SYMB	ALAB, _AUTHORCmdTxt, #488
	PUBLIC	_AUTHORCmdTxt
_AUTHORCmdTxt:
; rs232cmd.c  100	char code AUTHCmdTxt[] 					= "AUTH";
	DB	041H,055H,054H,048H,04FH,052H,000H
	SYMB	IDEN, "AUTHCmdTxt", _AUTHCmdTxt, #488, 129, 0
	SYMB	ALAB, _AUTHCmdTxt, #488
	PUBLIC	_AUTHCmdTxt
_AUTHCmdTxt:
; rs232cmd.c  101	char code DOWNLOADCmdTxt[] 			= "DOWNLOAD";
	DB	041H,055H,054H,048H,000H
	SYMB	IDEN, "DOWNLOADCmdTxt", _DOWNLOADCmdTxt, #488, 129, 0
	SYMB	ALAB, _DOWNLOADCmdTxt, #488
	PUBLIC	_DOWNLOADCmdTxt
_DOWNLOADCmdTxt:
; rs232cmd.c  102	char code DOWNCmdTxt[] 					= "DOWN";
	DB	044H,04FH,057H,04EH,04CH,04FH,041H,044H,000H
	SYMB	IDEN, "DOWNCmdTxt", _DOWNCmdTxt, #488, 129, 0
	SYMB	ALAB, _DOWNCmdTxt, #488
	PUBLIC	_DOWNCmdTxt
_DOWNCmdTxt:
; rs232cmd.c  103	char code UPLOADCmdTxt[] 				= "UPLOAd";
	DB	044H,04FH,057H,04EH,000H
	SYMB	IDEN, "UPLOADCmdTxt", _UPLOADCmdTxt, #488, 129, 0
	SYMB	ALAB, _UPLOADCmdTxt, #488
	PUBLIC	_UPLOADCmdTxt
_UPLOADCmdTxt:
; rs232cmd.c  104	char code UPLCmdTxt[] 					= "UPL";
	DB	055H,050H,04CH,04FH,041H,064H,000H
	SYMB	IDEN, "UPLCmdTxt", _UPLCmdTxt, #488, 129, 0
	SYMB	ALAB, _UPLCmdTxt, #488
	PUBLIC	_UPLCmdTxt
_UPLCmdTxt:
; rs232cmd.c  105	
; rs232cmd.c  106	char code OPERATIONCmdTxt[] 			= "OPERATION";
	DB	055H,050H,04CH,000H
	SYMB	IDEN, "OPERATIONCmdTxt", _OPERATIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _OPERATIONCmdTxt, #488
	PUBLIC	_OPERATIONCmdTxt
_OPERATIONCmdTxt:
; rs232cmd.c  107	char code OPERCmdTxt[] 	    			= "OPER";
	DB	04FH,050H,045H,052H,041H,054H,049H,04FH,04EH,000H
	SYMB	IDEN, "OPERCmdTxt", _OPERCmdTxt, #488, 129, 0
	SYMB	ALAB, _OPERCmdTxt, #488
	PUBLIC	_OPERCmdTxt
_OPERCmdTxt:
; rs232cmd.c  108	char code QUESTIONABLECmdTxt[]	 	= "QUESTIONABLE";
	DB	04FH,050H,045H,052H,000H
	SYMB	IDEN, "QUESTIONABLECmdTxt", _QUESTIONABLECmdTxt, #488, 129, 0
	SYMB	ALAB, _QUESTIONABLECmdTxt, #488
	PUBLIC	_QUESTIONABLECmdTxt
_QUESTIONABLECmdTxt:
	DB	051H,055H,045H,053H,054H,049H,04FH,04EH,041H,042H,04CH,045H
; rs232cmd.c  109	char code QUESCmdTxt[]		 			= "QUES";
	DB	000H
	SYMB	IDEN, "QUESCmdTxt", _QUESCmdTxt, #488, 129, 0
	SYMB	ALAB, _QUESCmdTxt, #488
	PUBLIC	_QUESCmdTxt
_QUESCmdTxt:
; rs232cmd.c  110	
; rs232cmd.c  111	char code EVENTCmdTxt[] 				= "EVENT";
	DB	051H,055H,045H,053H,000H
	SYMB	IDEN, "EVENTCmdTxt", _EVENTCmdTxt, #488, 129, 0
	SYMB	ALAB, _EVENTCmdTxt, #488
	PUBLIC	_EVENTCmdTxt
_EVENTCmdTxt:
; rs232cmd.c  112	char code EVENCmdTxt[]					= "EVEN";
	DB	045H,056H,045H,04EH,054H,000H
	SYMB	IDEN, "EVENCmdTxt", _EVENCmdTxt, #488, 129, 0
	SYMB	ALAB, _EVENCmdTxt, #488
	PUBLIC	_EVENCmdTxt
_EVENCmdTxt:
; rs232cmd.c  113	char code CONDITIONCmdTxt[]	 		= "CONDITION";
	DB	045H,056H,045H,04EH,000H
	SYMB	IDEN, "CONDITIONCmdTxt", _CONDITIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _CONDITIONCmdTxt, #488
	PUBLIC	_CONDITIONCmdTxt
_CONDITIONCmdTxt:
; rs232cmd.c  114	char code CONDCmdTxt[] 					= "COND";
	DB	043H,04FH,04EH,044H,049H,054H,049H,04FH,04EH,000H
	SYMB	IDEN, "CONDCmdTxt", _CONDCmdTxt, #488, 129, 0
	SYMB	ALAB, _CONDCmdTxt, #488
	PUBLIC	_CONDCmdTxt
_CONDCmdTxt:
; rs232cmd.c  115	char code ENABLECmdTxt[] 				= "ENABLE";
	DB	043H,04FH,04EH,044H,000H
	SYMB	IDEN, "ENABLECmdTxt", _ENABLECmdTxt, #488, 129, 0
	SYMB	ALAB, _ENABLECmdTxt, #488
	PUBLIC	_ENABLECmdTxt
_ENABLECmdTxt:
; rs232cmd.c  116	char code ENABCmdTxt[] 					= "ENAB";
	DB	045H,04EH,041H,042H,04CH,045H,000H
	SYMB	IDEN, "ENABCmdTxt", _ENABCmdTxt, #488, 129, 0
	SYMB	ALAB, _ENABCmdTxt, #488
	PUBLIC	_ENABCmdTxt
_ENABCmdTxt:
; rs232cmd.c  117	
; rs232cmd.c  118	char code DISPLAYCmdTxt[] 				= "DISPLAY";
	DB	045H,04EH,041H,042H,000H
	SYMB	IDEN, "DISPLAYCmdTxt", _DISPLAYCmdTxt, #488, 129, 0
	SYMB	ALAB, _DISPLAYCmdTxt, #488
	PUBLIC	_DISPLAYCmdTxt
_DISPLAYCmdTxt:
; rs232cmd.c  119	char code DISPCmdTxt[] 					= "DISP";
	DB	044H,049H,053H,050H,04CH,041H,059H,000H
	SYMB	IDEN, "DISPCmdTxt", _DISPCmdTxt, #488, 129, 0
	SYMB	ALAB, _DISPCmdTxt, #488
	PUBLIC	_DISPCmdTxt
_DISPCmdTxt:
; rs232cmd.c  120	char code ERRORQUEUECmdTxt[]  		= "ERRORQUEUE";
	DB	044H,049H,053H,050H,000H
	SYMB	IDEN, "ERRORQUEUECmdTxt", _ERRORQUEUECmdTxt, #488, 129, 0
	SYMB	ALAB, _ERRORQUEUECmdTxt, #488
	PUBLIC	_ERRORQUEUECmdTxt
_ERRORQUEUECmdTxt:
; rs232cmd.c  121	char code RESETCmdTxt[] 				= "RESET";
	DB	045H,052H,052H,04FH,052H,051H,055H,045H,055H,045H,000H
	SYMB	IDEN, "RESETCmdTxt", _RESETCmdTxt, #488, 129, 0
	SYMB	ALAB, _RESETCmdTxt, #488
	PUBLIC	_RESETCmdTxt
_RESETCmdTxt:
; rs232cmd.c  122	char code RESCmdTxt[] 					= "RES";
	DB	052H,045H,053H,045H,054H,000H
	SYMB	IDEN, "RESCmdTxt", _RESCmdTxt, #488, 129, 0
	SYMB	ALAB, _RESCmdTxt, #488
	PUBLIC	_RESCmdTxt
_RESCmdTxt:
; rs232cmd.c  123	
; rs232cmd.c  124	char code DEFAULTCmdTxt[] 			 	= "DEFAULT";
	DB	052H,045H,053H,000H
	SYMB	IDEN, "DEFAULTCmdTxt", _DEFAULTCmdTxt, #488, 129, 0
	SYMB	ALAB, _DEFAULTCmdTxt, #488
	PUBLIC	_DEFAULTCmdTxt
_DEFAULTCmdTxt:
; rs232cmd.c  125	char code DEFCmdTxt[] 					= "DEF";
	DB	044H,045H,046H,041H,055H,04CH,054H,000H
	SYMB	IDEN, "DEFCmdTxt", _DEFCmdTxt, #488, 129, 0
	SYMB	ALAB, _DEFCmdTxt, #488
	PUBLIC	_DEFCmdTxt
_DEFCmdTxt:
; rs232cmd.c  126	
; rs232cmd.c  127	char code GENLOCKCmdTxt[] 				= "GENLOCK";
	DB	044H,045H,046H,000H
	SYMB	IDEN, "GENLOCKCmdTxt", _GENLOCKCmdTxt, #488, 129, 0
	SYMB	ALAB, _GENLOCKCmdTxt, #488
	PUBLIC	_GENLOCKCmdTxt
_GENLOCKCmdTxt:
; rs232cmd.c  128	char code GENLCmdTxt[]			 		= "GENL";
	DB	047H,045H,04EH,04CH,04FH,043H,04BH,000H
	SYMB	IDEN, "GENLCmdTxt", _GENLCmdTxt, #488, 129, 0
	SYMB	ALAB, _GENLCmdTxt, #488
	PUBLIC	_GENLCmdTxt
_GENLCmdTxt:
; rs232cmd.c  129	
; rs232cmd.c  130	char code DELAYCmdTxt[] 				= "DELAY";
	DB	047H,045H,04EH,04CH,000H
	SYMB	IDEN, "DELAYCmdTxt", _DELAYCmdTxt, #488, 129, 0
	SYMB	ALAB, _DELAYCmdTxt, #488
	PUBLIC	_DELAYCmdTxt
_DELAYCmdTxt:
; rs232cmd.c  131	char code DELCmdTxt[] 					= "DEL";
	DB	044H,045H,04CH,041H,059H,000H
	SYMB	IDEN, "DELCmdTxt", _DELCmdTxt, #488, 129, 0
	SYMB	ALAB, _DELCmdTxt, #488
	PUBLIC	_DELCmdTxt
_DELCmdTxt:
; rs232cmd.c  132	
; rs232cmd.c  133	char code CALIBRATECmdTxt[] 		 	= "CALIBRATE";
	DB	044H,045H,04CH,000H
	SYMB	IDEN, "CALIBRATECmdTxt", _CALIBRATECmdTxt, #488, 129, 0
	SYMB	ALAB, _CALIBRATECmdTxt, #488
	PUBLIC	_CALIBRATECmdTxt
_CALIBRATECmdTxt:
; rs232cmd.c  134	char code CALCmdTxt[] 					= "CAL";
	DB	043H,041H,04CH,049H,042H,052H,041H,054H,045H,000H
	SYMB	IDEN, "CALCmdTxt", _CALCmdTxt, #488, 129, 0
	SYMB	ALAB, _CALCmdTxt, #488
	PUBLIC	_CALCmdTxt
_CALCmdTxt:
; rs232cmd.c  135	
; rs232cmd.c  136	char code ADJUSTCmdTxt[] 				= "ADJUST";
	DB	043H,041H,04CH,000H
	SYMB	IDEN, "ADJUSTCmdTxt", _ADJUSTCmdTxt, #488, 129, 0
	SYMB	ALAB, _ADJUSTCmdTxt, #488
	PUBLIC	_ADJUSTCmdTxt
_ADJUSTCmdTxt:
; rs232cmd.c  137	char code ADJCmdTxt[] 					= "ADJ";
	DB	041H,044H,04AH,055H,053H,054H,000H
	SYMB	IDEN, "ADJCmdTxt", _ADJCmdTxt, #488, 129, 0
	SYMB	ALAB, _ADJCmdTxt, #488
	PUBLIC	_ADJCmdTxt
_ADJCmdTxt:
; rs232cmd.c  138	
; rs232cmd.c  139	char code BBCmdTxt[] 					= "BB";
	DB	041H,044H,04AH,000H
	SYMB	IDEN, "BBCmdTxt", _BBCmdTxt, #488, 129, 0
	SYMB	ALAB, _BBCmdTxt, #488
	PUBLIC	_BBCmdTxt
_BBCmdTxt:
; rs232cmd.c  140	char code TSGENERATORCmdTxt[] 		= "TSGENERATOR";
	DB	042H,042H,000H
	SYMB	IDEN, "TSGENERATORCmdTxt", _TSGENERATORCmdTxt, #488, 129, 0
	SYMB	ALAB, _TSGENERATORCmdTxt, #488
	PUBLIC	_TSGENERATORCmdTxt
_TSGENERATORCmdTxt:
; rs232cmd.c  141	char code TSGCmdTxt[] 					= "TSG";
	DB	054H,053H,047H,045H,04EH,045H,052H,041H,054H,04FH,052H,000H
	SYMB	IDEN, "TSGCmdTxt", _TSGCmdTxt, #488, 129, 0
	SYMB	ALAB, _TSGCmdTxt, #488
	PUBLIC	_TSGCmdTxt
_TSGCmdTxt:
; rs232cmd.c  142	char code AUDIOCmdTxt[] 				= "AUDIO";
	DB	054H,053H,047H,000H
	SYMB	IDEN, "AUDIOCmdTxt", _AUDIOCmdTxt, #488, 129, 0
	SYMB	ALAB, _AUDIOCmdTxt, #488
	PUBLIC	_AUDIOCmdTxt
_AUDIOCmdTxt:
; rs232cmd.c  143	char code AUDCmdTxt[] 					= "AUD";
	DB	041H,055H,044H,049H,04FH,000H
	SYMB	IDEN, "AUDCmdTxt", _AUDCmdTxt, #488, 129, 0
	SYMB	ALAB, _AUDCmdTxt, #488
	PUBLIC	_AUDCmdTxt
_AUDCmdTxt:
; rs232cmd.c  144	
; rs232cmd.c  145	char code ANALOGCmdTxt[]				= "ANALOG";
	DB	041H,055H,044H,000H
	SYMB	IDEN, "ANALOGCmdTxt", _ANALOGCmdTxt, #488, 129, 0
	SYMB	ALAB, _ANALOGCmdTxt, #488
	PUBLIC	_ANALOGCmdTxt
_ANALOGCmdTxt:
; rs232cmd.c  146	char code ANALCmdTxt[]					= "ANAL";
	DB	041H,04EH,041H,04CH,04FH,047H,000H
	SYMB	IDEN, "ANALCmdTxt", _ANALCmdTxt, #488, 129, 0
	SYMB	ALAB, _ANALCmdTxt, #488
	PUBLIC	_ANALCmdTxt
_ANALCmdTxt:
; rs232cmd.c  147	
; rs232cmd.c  148	char code PATTERNCmdTxt[] 				= "PATTERN";
	DB	041H,04EH,041H,04CH,000H
	SYMB	IDEN, "PATTERNCmdTxt", _PATTERNCmdTxt, #488, 129, 0
	SYMB	ALAB, _PATTERNCmdTxt, #488
	PUBLIC	_PATTERNCmdTxt
_PATTERNCmdTxt:
; rs232cmd.c  149	char code PATTCmdTxt[] 					= "PATT";
	DB	050H,041H,054H,054H,045H,052H,04EH,000H
	SYMB	IDEN, "PATTCmdTxt", _PATTCmdTxt, #488, 129, 0
	SYMB	ALAB, _PATTCmdTxt, #488
	PUBLIC	_PATTCmdTxt
_PATTCmdTxt:
; rs232cmd.c  150	char code EMBAUDIOCmdTxt[] 			= "EMBAUDIO";
	DB	050H,041H,054H,054H,000H
	SYMB	IDEN, "EMBAUDIOCmdTxt", _EMBAUDIOCmdTxt, #488, 129, 0
	SYMB	ALAB, _EMBAUDIOCmdTxt, #488
	PUBLIC	_EMBAUDIOCmdTxt
_EMBAUDIOCmdTxt:
; rs232cmd.c  151	char code EMBCmdTxt[] 					= "EMB";
	DB	045H,04DH,042H,041H,055H,044H,049H,04FH,000H
	SYMB	IDEN, "EMBCmdTxt", _EMBCmdTxt, #488, 129, 0
	SYMB	ALAB, _EMBCmdTxt, #488
	PUBLIC	_EMBCmdTxt
_EMBCmdTxt:
; rs232cmd.c  152	
; rs232cmd.c  153	char code AESEBUCmdTxt[]				= "AESEBU";
	DB	045H,04DH,042H,000H
	SYMB	IDEN, "AESEBUCmdTxt", _AESEBUCmdTxt, #488, 129, 0
	SYMB	ALAB, _AESEBUCmdTxt, #488
	PUBLIC	_AESEBUCmdTxt
_AESEBUCmdTxt:
; rs232cmd.c  154	char code AESCmdTxt[]					= "AES";
	DB	041H,045H,053H,045H,042H,055H,000H
	SYMB	IDEN, "AESCmdTxt", _AESCmdTxt, #488, 129, 0
	SYMB	ALAB, _AESCmdTxt, #488
	PUBLIC	_AESCmdTxt
_AESCmdTxt:
; rs232cmd.c  155	
; rs232cmd.c  156	char code SCHPHASECmdTxt[] 			= "SCHPHASE";
	DB	041H,045H,053H,000H
	SYMB	IDEN, "SCHPHASECmdTxt", _SCHPHASECmdTxt, #488, 129, 0
	SYMB	ALAB, _SCHPHASECmdTxt, #488
	PUBLIC	_SCHPHASECmdTxt
_SCHPHASECmdTxt:
; rs232cmd.c  157	char code SCHPCmdTxt[] 					= "SCHP";
	DB	053H,043H,048H,050H,048H,041H,053H,045H,000H
	SYMB	IDEN, "SCHPCmdTxt", _SCHPCmdTxt, #488, 129, 0
	SYMB	ALAB, _SCHPCmdTxt, #488
	PUBLIC	_SCHPCmdTxt
_SCHPCmdTxt:
; rs232cmd.c  158	
; rs232cmd.c  159	char code SIGNALCmdTxt[] 				= "SIGNAL";
	DB	053H,043H,048H,050H,000H
	SYMB	IDEN, "SIGNALCmdTxt", _SIGNALCmdTxt, #488, 129, 0
	SYMB	ALAB, _SIGNALCmdTxt, #488
	PUBLIC	_SIGNALCmdTxt
_SIGNALCmdTxt:
; rs232cmd.c  160	char code SIGNCmdTxt[] 					= "SIGN";
	DB	053H,049H,047H,04EH,041H,04CH,000H
	SYMB	IDEN, "SIGNCmdTxt", _SIGNCmdTxt, #488, 129, 0
	SYMB	ALAB, _SIGNCmdTxt, #488
	PUBLIC	_SIGNCmdTxt
_SIGNCmdTxt:
; rs232cmd.c  161	char code LEVELCmdTxt[] 				= "LEVEL";
	DB	053H,049H,047H,04EH,000H
	SYMB	IDEN, "LEVELCmdTxt", _LEVELCmdTxt, #488, 129, 0
	SYMB	ALAB, _LEVELCmdTxt, #488
	PUBLIC	_LEVELCmdTxt
_LEVELCmdTxt:
; rs232cmd.c  162	char code LEVCmdTxt[] 					= "LEV";
	DB	04CH,045H,056H,045H,04CH,000H
	SYMB	IDEN, "LEVCmdTxt", _LEVCmdTxt, #488, 129, 0
	SYMB	ALAB, _LEVCmdTxt, #488
	PUBLIC	_LEVCmdTxt
_LEVCmdTxt:
; rs232cmd.c  163	char code EDHINSERTCmdTxt[] 			= "EDHINSERT";
	DB	04CH,045H,056H,000H
	SYMB	IDEN, "EDHINSERTCmdTxt", _EDHINSERTCmdTxt, #488, 129, 0
	SYMB	ALAB, _EDHINSERTCmdTxt, #488
	PUBLIC	_EDHINSERTCmdTxt
_EDHINSERTCmdTxt:
; rs232cmd.c  164	char code EDHCmdTxt[] 					= "EDH";
	DB	045H,044H,048H,049H,04EH,053H,045H,052H,054H,000H
	SYMB	IDEN, "EDHCmdTxt", _EDHCmdTxt, #488, 129, 0
	SYMB	ALAB, _EDHCmdTxt, #488
	PUBLIC	_EDHCmdTxt
_EDHCmdTxt:
; rs232cmd.c  165	
; rs232cmd.c  166	char code TIMINGCmdTxt[] 				= "TIMING";
	DB	045H,044H,048H,000H
	SYMB	IDEN, "TIMINGCmdTxt", _TIMINGCmdTxt, #488, 129, 0
	SYMB	ALAB, _TIMINGCmdTxt, #488
	PUBLIC	_TIMINGCmdTxt
_TIMINGCmdTxt:
; rs232cmd.c  167	char code TIMCmdTxt[] 					= "TIM";
	DB	054H,049H,04DH,049H,04EH,047H,000H
	SYMB	IDEN, "TIMCmdTxt", _TIMCmdTxt, #488, 129, 0
	SYMB	ALAB, _TIMCmdTxt, #488
	PUBLIC	_TIMCmdTxt
_TIMCmdTxt:
; rs232cmd.c  168	
; rs232cmd.c  169	char code WORDCLOCKCmdTxt[] 			= "WORDCLOCK";
	DB	054H,049H,04DH,000H
	SYMB	IDEN, "WORDCLOCKCmdTxt", _WORDCLOCKCmdTxt, #488, 129, 0
	SYMB	ALAB, _WORDCLOCKCmdTxt, #488
	PUBLIC	_WORDCLOCKCmdTxt
_WORDCLOCKCmdTxt:
; rs232cmd.c  170	char code WORDCmdTxt[] 					= "WORD";
	DB	057H,04FH,052H,044H,043H,04CH,04FH,043H,04BH,000H
	SYMB	IDEN, "WORDCmdTxt", _WORDCmdTxt, #488, 129, 0
	SYMB	ALAB, _WORDCmdTxt, #488
	PUBLIC	_WORDCmdTxt
_WORDCmdTxt:
; rs232cmd.c  171	
; rs232cmd.c  172	char code CLICKCmdTxt[] 				= "CLICK";
	DB	057H,04FH,052H,044H,000H
	SYMB	IDEN, "CLICKCmdTxt", _CLICKCmdTxt, #488, 129, 0
	SYMB	ALAB, _CLICKCmdTxt, #488
	PUBLIC	_CLICKCmdTxt
_CLICKCmdTxt:
; rs232cmd.c  173	char code CLICCmdTxt[] 					= "CLIC";
	DB	043H,04CH,049H,043H,04BH,000H
	SYMB	IDEN, "CLICCmdTxt", _CLICCmdTxt, #488, 129, 0
	SYMB	ALAB, _CLICCmdTxt, #488
	PUBLIC	_CLICCmdTxt
_CLICCmdTxt:
; rs232cmd.c  174	
; rs232cmd.c  175	char code PASSWORDCmdTxt[] 			= "PASSWORD";
	DB	043H,04CH,049H,043H,000H
	SYMB	IDEN, "PASSWORDCmdTxt", _PASSWORDCmdTxt, #488, 129, 0
	SYMB	ALAB, _PASSWORDCmdTxt, #488
	PUBLIC	_PASSWORDCmdTxt
_PASSWORDCmdTxt:
; rs232cmd.c  176	char code PASSCmdTxt[] 					= "PASS";
	DB	050H,041H,053H,053H,057H,04FH,052H,044H,000H
	SYMB	IDEN, "PASSCmdTxt", _PASSCmdTxt, #488, 129, 0
	SYMB	ALAB, _PASSCmdTxt, #488
	PUBLIC	_PASSCmdTxt
_PASSCmdTxt:
; rs232cmd.c  177	char code V24CIRCUITCmdTxt[] 			= "V24CIRCUIT";
	DB	050H,041H,053H,053H,000H
	SYMB	IDEN, "V24CIRCUITCmdTxt", _V24CIRCUITCmdTxt, #488, 129, 0
	SYMB	ALAB, _V24CIRCUITCmdTxt, #488
	PUBLIC	_V24CIRCUITCmdTxt
_V24CIRCUITCmdTxt:
; rs232cmd.c  178	char code V24CCmdTxt[] 					= "V24C";
	DB	056H,032H,034H,043H,049H,052H,043H,055H,049H,054H,000H
	SYMB	IDEN, "V24CCmdTxt", _V24CCmdTxt, #488, 129, 0
	SYMB	ALAB, _V24CCmdTxt, #488
	PUBLIC	_V24CCmdTxt
_V24CCmdTxt:
; rs232cmd.c  179	char code CHECKSUMCmdTxt[] 	 		= "CHECKSUM";
	DB	056H,032H,034H,043H,000H
	SYMB	IDEN, "CHECKSUMCmdTxt", _CHECKSUMCmdTxt, #488, 129, 0
	SYMB	ALAB, _CHECKSUMCmdTxt, #488
	PUBLIC	_CHECKSUMCmdTxt
_CHECKSUMCmdTxt:
; rs232cmd.c  180	char code CHECCmdTxt[] 	 				= "CHEC";
	DB	043H,048H,045H,043H,04BH,053H,055H,04DH,000H
	SYMB	IDEN, "CHECCmdTxt", _CHECCmdTxt, #488, 129, 0
	SYMB	ALAB, _CHECCmdTxt, #488
	PUBLIC	_CHECCmdTxt
_CHECCmdTxt:
; rs232cmd.c  181	
; rs232cmd.c  182	char code CODECmdTxt[] 	 				= "CODE";
	DB	043H,048H,045H,043H,000H
	SYMB	IDEN, "CODECmdTxt", _CODECmdTxt, #488, 129, 0
	SYMB	ALAB, _CODECmdTxt, #488
	PUBLIC	_CODECmdTxt
_CODECmdTxt:
; rs232cmd.c  183	char code RANGECmdTxt[] 		 		= "RANGE";
	DB	043H,04FH,044H,045H,000H
	SYMB	IDEN, "RANGECmdTxt", _RANGECmdTxt, #488, 129, 0
	SYMB	ALAB, _RANGECmdTxt, #488
	PUBLIC	_RANGECmdTxt
_RANGECmdTxt:
; rs232cmd.c  184	char code RANGCmdTxt[] 	 				= "RANG";
	DB	052H,041H,04EH,047H,045H,000H
	SYMB	IDEN, "RANGCmdTxt", _RANGCmdTxt, #488, 129, 0
	SYMB	ALAB, _RANGCmdTxt, #488
	PUBLIC	_RANGCmdTxt
_RANGCmdTxt:
; rs232cmd.c  185	char code COMMANDCmdTxt[] 				= "COMMAND";
	DB	052H,041H,04EH,047H,000H
	SYMB	IDEN, "COMMANDCmdTxt", _COMMANDCmdTxt, #488, 129, 0
	SYMB	ALAB, _COMMANDCmdTxt, #488
	PUBLIC	_COMMANDCmdTxt
_COMMANDCmdTxt:
; rs232cmd.c  186	char code COMMCmdTxt[] 					= "COMM";
	DB	043H,04FH,04DH,04DH,041H,04EH,044H,000H
	SYMB	IDEN, "COMMCmdTxt", _COMMCmdTxt, #488, 129, 0
	SYMB	ALAB, _COMMCmdTxt, #488
	PUBLIC	_COMMCmdTxt
_COMMCmdTxt:
; rs232cmd.c  187	char code TRANSPARENTCmdTxt[]  		= "TRANSPARENT";
	DB	043H,04FH,04DH,04DH,000H
	SYMB	IDEN, "TRANSPARENTCmdTxt", _TRANSPARENTCmdTxt, #488, 129, 0
	SYMB	ALAB, _TRANSPARENTCmdTxt, #488
	PUBLIC	_TRANSPARENTCmdTxt
_TRANSPARENTCmdTxt:
; rs232cmd.c  188	char code TRANCmdTxt[] 				 	= "TRAN";
	DB	054H,052H,041H,04EH,053H,050H,041H,052H,045H,04EH,054H,000H
	SYMB	IDEN, "TRANCmdTxt", _TRANCmdTxt, #488, 129, 0
	SYMB	ALAB, _TRANCmdTxt, #488
	PUBLIC	_TRANCmdTxt
_TRANCmdTxt:
; rs232cmd.c  189	
; rs232cmd.c  190	char code MAINBOARDCmdTxt[] 			= "MAINBOARD";
	DB	054H,052H,041H,04EH,000H
	SYMB	IDEN, "MAINBOARDCmdTxt", _MAINBOARDCmdTxt, #488, 129, 0
	SYMB	ALAB, _MAINBOARDCmdTxt, #488
	PUBLIC	_MAINBOARDCmdTxt
_MAINBOARDCmdTxt:
; rs232cmd.c  191	char code MAINCmdTxt[] 					= "MAIN";
	DB	04DH,041H,049H,04EH,042H,04FH,041H,052H,044H,000H
	SYMB	IDEN, "MAINCmdTxt", _MAINCmdTxt, #488, 129, 0
	SYMB	ALAB, _MAINCmdTxt, #488
	PUBLIC	_MAINCmdTxt
_MAINCmdTxt:
; rs232cmd.c  192	char code COMPANYCmdTxt[] 				= "COMPANY";
	DB	04DH,041H,049H,04EH,000H
	SYMB	IDEN, "COMPANYCmdTxt", _COMPANYCmdTxt, #488, 129, 0
	SYMB	ALAB, _COMPANYCmdTxt, #488
	PUBLIC	_COMPANYCmdTxt
_COMPANYCmdTxt:
; rs232cmd.c  193	char code COMPCmdTxt[] 					= "COMP";
	DB	043H,04FH,04DH,050H,041H,04EH,059H,000H
	SYMB	IDEN, "COMPCmdTxt", _COMPCmdTxt, #488, 129, 0
	SYMB	ALAB, _COMPCmdTxt, #488
	PUBLIC	_COMPCmdTxt
_COMPCmdTxt:
; rs232cmd.c  194	char code TYPECmdTxt[] 					= "TYPE";
	DB	043H,04FH,04DH,050H,000H
	SYMB	IDEN, "TYPECmdTxt", _TYPECmdTxt, #488, 129, 0
	SYMB	ALAB, _TYPECmdTxt, #488
	PUBLIC	_TYPECmdTxt
_TYPECmdTxt:
; rs232cmd.c  195	char code KUNUMBERCmdTxt[] 			= "KUNUMBER";
	DB	054H,059H,050H,045H,000H
	SYMB	IDEN, "KUNUMBERCmdTxt", _KUNUMBERCmdTxt, #488, 129, 0
	SYMB	ALAB, _KUNUMBERCmdTxt, #488
	PUBLIC	_KUNUMBERCmdTxt
_KUNUMBERCmdTxt:
; rs232cmd.c  196	char code KUNCmdTxt[] 					= "KUN";
	DB	04BH,055H,04EH,055H,04DH,042H,045H,052H,000H
	SYMB	IDEN, "KUNCmdTxt", _KUNCmdTxt, #488, 129, 0
	SYMB	ALAB, _KUNCmdTxt, #488
	PUBLIC	_KUNCmdTxt
_KUNCmdTxt:
; rs232cmd.c  197	char code SWREVISIONCmdTxt[] 			= "SWREVISION";
	DB	04BH,055H,04EH,000H
	SYMB	IDEN, "SWREVISIONCmdTxt", _SWREVISIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _SWREVISIONCmdTxt, #488
	PUBLIC	_SWREVISIONCmdTxt
_SWREVISIONCmdTxt:
; rs232cmd.c  198	char code SWRCmdTxt[] 					= "SWR";
	DB	053H,057H,052H,045H,056H,049H,053H,049H,04FH,04EH,000H
	SYMB	IDEN, "SWRCmdTxt", _SWRCmdTxt, #488, 129, 0
	SYMB	ALAB, _SWRCmdTxt, #488
	PUBLIC	_SWRCmdTxt
_SWRCmdTxt:
; rs232cmd.c  199	
; rs232cmd.c  200	char code NCCmdTxt[] 					= "NC";
	DB	053H,057H,052H,000H
	SYMB	IDEN, "NCCmdTxt", _NCCmdTxt, #488, 129, 0
	SYMB	ALAB, _NCCmdTxt, #488
	PUBLIC	_NCCmdTxt
_NCCmdTxt:
; rs232cmd.c  201	char code FMSDATECmdTxt[] 				= "FMSDATE";
	DB	04EH,043H,000H
	SYMB	IDEN, "FMSDATECmdTxt", _FMSDATECmdTxt, #488, 129, 0
	SYMB	ALAB, _FMSDATECmdTxt, #488
	PUBLIC	_FMSDATECmdTxt
_FMSDATECmdTxt:
; rs232cmd.c  202	char code FMSDCmdTxt[] 					= "FMSD";
	DB	046H,04DH,053H,044H,041H,054H,045H,000H
	SYMB	IDEN, "FMSDCmdTxt", _FMSDCmdTxt, #488, 129, 0
	SYMB	ALAB, _FMSDCmdTxt, #488
	PUBLIC	_FMSDCmdTxt
_FMSDCmdTxt:
; rs232cmd.c  203	char code PRODUCTIONCmdTxt[] 			= "PRODUCTION";
	DB	046H,04DH,053H,044H,000H
	SYMB	IDEN, "PRODUCTIONCmdTxt", _PRODUCTIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _PRODUCTIONCmdTxt, #488
	PUBLIC	_PRODUCTIONCmdTxt
_PRODUCTIONCmdTxt:
; rs232cmd.c  204	char code PRODCmdTxt[] 					= "PROD";
	DB	050H,052H,04FH,044H,055H,043H,054H,049H,04FH,04EH,000H
	SYMB	IDEN, "PRODCmdTxt", _PRODCmdTxt, #488, 129, 0
	SYMB	ALAB, _PRODCmdTxt, #488
	PUBLIC	_PRODCmdTxt
_PRODCmdTxt:
; rs232cmd.c  205	char code UPDATECmdTxt[] 				= "UPDATE";
	DB	050H,052H,04FH,044H,000H
	SYMB	IDEN, "UPDATECmdTxt", _UPDATECmdTxt, #488, 129, 0
	SYMB	ALAB, _UPDATECmdTxt, #488
	PUBLIC	_UPDATECmdTxt
_UPDATECmdTxt:
; rs232cmd.c  206	char code UPDCmdTxt[] 					= "UPD";
	DB	055H,050H,044H,041H,054H,045H,000H
	SYMB	IDEN, "UPDCmdTxt", _UPDCmdTxt, #488, 129, 0
	SYMB	ALAB, _UPDCmdTxt, #488
	PUBLIC	_UPDCmdTxt
_UPDCmdTxt:
; rs232cmd.c  207	
; rs232cmd.c  208	char code FREFERENCECmdTxt[] 		 	= "FREFERENCE";
	DB	055H,050H,044H,000H
	SYMB	IDEN, "FREFERENCECmdTxt", _FREFERENCECmdTxt, #488, 129, 0
	SYMB	ALAB, _FREFERENCECmdTxt, #488
	PUBLIC	_FREFERENCECmdTxt
_FREFERENCECmdTxt:
; rs232cmd.c  209	char code FREFCmdTxt[] 					= "FREF";
	DB	046H,052H,045H,046H,045H,052H,045H,04EH,043H,045H,000H
	SYMB	IDEN, "FREFCmdTxt", _FREFCmdTxt, #488, 129, 0
	SYMB	ALAB, _FREFCmdTxt, #488
	PUBLIC	_FREFCmdTxt
_FREFCmdTxt:
; rs232cmd.c  210	char code DACCmdTxt[] 					= "DAC";
	DB	046H,052H,045H,046H,000H
	SYMB	IDEN, "DACCmdTxt", _DACCmdTxt, #488, 129, 0
	SYMB	ALAB, _DACCmdTxt, #488
	PUBLIC	_DACCmdTxt
_DACCmdTxt:
; rs232cmd.c  211	char code UREFERENCECmdTxt[] 			= "UREFERENCE";
	DB	044H,041H,043H,000H
	SYMB	IDEN, "UREFERENCECmdTxt", _UREFERENCECmdTxt, #488, 129, 0
	SYMB	ALAB, _UREFERENCECmdTxt, #488
	PUBLIC	_UREFERENCECmdTxt
_UREFERENCECmdTxt:
; rs232cmd.c  212	char code UREFCmdTxt[] 					= "UREF";
	DB	055H,052H,045H,046H,045H,052H,045H,04EH,043H,045H,000H
	SYMB	IDEN, "UREFCmdTxt", _UREFCmdTxt, #488, 129, 0
	SYMB	ALAB, _UREFCmdTxt, #488
	PUBLIC	_UREFCmdTxt
_UREFCmdTxt:
; rs232cmd.c  213	char code HPHZEROCmdTxt[] 				= "HPHZERO";
	DB	055H,052H,045H,046H,000H
	SYMB	IDEN, "HPHZEROCmdTxt", _HPHZEROCmdTxt, #488, 129, 0
	SYMB	ALAB, _HPHZEROCmdTxt, #488
	PUBLIC	_HPHZEROCmdTxt
_HPHZEROCmdTxt:
; rs232cmd.c  214	char code HPHZCmdTxt[] 					= "HPHZ";
	DB	048H,050H,048H,05AH,045H,052H,04FH,000H
	SYMB	IDEN, "HPHZCmdTxt", _HPHZCmdTxt, #488, 129, 0
	SYMB	ALAB, _HPHZCmdTxt, #488
	PUBLIC	_HPHZCmdTxt
_HPHZCmdTxt:
; rs232cmd.c  215	char code PHASECmdTxt[] 				= "PHASE";
	DB	048H,050H,048H,05AH,000H
	SYMB	IDEN, "PHASECmdTxt", _PHASECmdTxt, #488, 129, 0
	SYMB	ALAB, _PHASECmdTxt, #488
	PUBLIC	_PHASECmdTxt
_PHASECmdTxt:
; rs232cmd.c  216	char code PHASCmdTxt[] 					= "PHAS";
	DB	050H,048H,041H,053H,045H,000H
	SYMB	IDEN, "PHASCmdTxt", _PHASCmdTxt, #488, 129, 0
	SYMB	ALAB, _PHASCmdTxt, #488
	PUBLIC	_PHASCmdTxt
_PHASCmdTxt:
; rs232cmd.c  217	
; rs232cmd.c  218	char code AGAINCmdTxt[] 				= "AGAIN";
	DB	050H,048H,041H,053H,000H
	SYMB	IDEN, "AGAINCmdTxt", _AGAINCmdTxt, #488, 129, 0
	SYMB	ALAB, _AGAINCmdTxt, #488
	PUBLIC	_AGAINCmdTxt
_AGAINCmdTxt:
; rs232cmd.c  219	char code AGACmdTxt[] 					= "AGA";
	DB	041H,047H,041H,049H,04EH,000H
	SYMB	IDEN, "AGACmdTxt", _AGACmdTxt, #488, 129, 0
	SYMB	ALAB, _AGACmdTxt, #488
	PUBLIC	_AGACmdTxt
_AGACmdTxt:
; rs232cmd.c  220	char code CGAINCmdTxt[] 				= "CGAIN";
	DB	041H,047H,041H,000H
	SYMB	IDEN, "CGAINCmdTxt", _CGAINCmdTxt, #488, 129, 0
	SYMB	ALAB, _CGAINCmdTxt, #488
	PUBLIC	_CGAINCmdTxt
_CGAINCmdTxt:
; rs232cmd.c  221	char code CGACmdTxt[] 					= "CGA";
	DB	043H,047H,041H,049H,04EH,000H
	SYMB	IDEN, "CGACmdTxt", _CGACmdTxt, #488, 129, 0
	SYMB	ALAB, _CGACmdTxt, #488
	PUBLIC	_CGACmdTxt
_CGACmdTxt:
; rs232cmd.c  222	char code ALEVELCmdTxt[] 				= "ALEVEL";
	DB	043H,047H,041H,000H
	SYMB	IDEN, "ALEVELCmdTxt", _ALEVELCmdTxt, #488, 129, 0
	SYMB	ALAB, _ALEVELCmdTxt, #488
	PUBLIC	_ALEVELCmdTxt
_ALEVELCmdTxt:
; rs232cmd.c  223	char code ALEVCmdTxt[] 					= "ALEV";
	DB	041H,04CH,045H,056H,045H,04CH,000H
	SYMB	IDEN, "ALEVCmdTxt", _ALEVCmdTxt, #488, 129, 0
	SYMB	ALAB, _ALEVCmdTxt, #488
	PUBLIC	_ALEVCmdTxt
_ALEVCmdTxt:
; rs232cmd.c  224	
; rs232cmd.c  225	char code PLDCmdTxt[] 					= "PLD";
	DB	041H,04CH,045H,056H,000H
	SYMB	IDEN, "PLDCmdTxt", _PLDCmdTxt, #488, 129, 0
	SYMB	ALAB, _PLDCmdTxt, #488
	PUBLIC	_PLDCmdTxt
_PLDCmdTxt:
; rs232cmd.c  226	char code TCXOCmdTxt[] 					= "TCXO";
	DB	050H,04CH,044H,000H
	SYMB	IDEN, "TCXOCmdTxt", _TCXOCmdTxt, #488, 129, 0
	SYMB	ALAB, _TCXOCmdTxt, #488
	PUBLIC	_TCXOCmdTxt
_TCXOCmdTxt:
; rs232cmd.c  227	char code MMCHIPCmdTxt[] 				= "MMCHIP";
	DB	054H,043H,058H,04FH,000H
	SYMB	IDEN, "MMCHIPCmdTxt", _MMCHIPCmdTxt, #488, 129, 0
	SYMB	ALAB, _MMCHIPCmdTxt, #488
	PUBLIC	_MMCHIPCmdTxt
_MMCHIPCmdTxt:
; rs232cmd.c  228	char code MMCHCmdTxt[] 					= "MMCH";
	DB	04DH,04DH,043H,048H,049H,050H,000H
	SYMB	IDEN, "MMCHCmdTxt", _MMCHCmdTxt, #488, 129, 0
	SYMB	ALAB, _MMCHCmdTxt, #488
	PUBLIC	_MMCHCmdTxt
_MMCHCmdTxt:
; rs232cmd.c  229	
; rs232cmd.c  230	char code SAVEParTxt[] 					= "SAVE";
	DB	04DH,04DH,043H,048H,000H
	SYMB	IDEN, "SAVEParTxt", _SAVEParTxt, #488, 129, 0
	SYMB	ALAB, _SAVEParTxt, #488
	PUBLIC	_SAVEParTxt
_SAVEParTxt:
; rs232cmd.c  231	
; rs232cmd.c  232	char code INTERNALParTxt[] 			= "INTERNAL";
	DB	053H,041H,056H,045H,000H
	SYMB	IDEN, "INTERNALParTxt", _INTERNALParTxt, #488, 129, 0
	SYMB	ALAB, _INTERNALParTxt, #488
	PUBLIC	_INTERNALParTxt
_INTERNALParTxt:
; rs232cmd.c  233	char code INTParTxt[] 					= "INT";
	DB	049H,04EH,054H,045H,052H,04EH,041H,04CH,000H
	SYMB	IDEN, "INTParTxt", _INTParTxt, #488, 129, 0
	SYMB	ALAB, _INTParTxt, #488
	PUBLIC	_INTParTxt
_INTParTxt:
; rs232cmd.c  234	char code PALBURSTParTxt[] 			= "PALBURST";
	DB	049H,04EH,054H,000H
	SYMB	IDEN, "PALBURSTParTxt", _PALBURSTParTxt, #488, 129, 0
	SYMB	ALAB, _PALBURSTParTxt, #488
	PUBLIC	_PALBURSTParTxt
_PALBURSTParTxt:
; rs232cmd.c  235	char code PALBParTxt[] 					= "PALB";
	DB	050H,041H,04CH,042H,055H,052H,053H,054H,000H
	SYMB	IDEN, "PALBParTxt", _PALBParTxt, #488, 129, 0
	SYMB	ALAB, _PALBParTxt, #488
	PUBLIC	_PALBParTxt
_PALBParTxt:
; rs232cmd.c  236	char code NTSCBURSTParTxt[] 			= "NTSCBURST";
	DB	050H,041H,04CH,042H,000H
	SYMB	IDEN, "NTSCBURSTParTxt", _NTSCBURSTParTxt, #488, 129, 0
	SYMB	ALAB, _NTSCBURSTParTxt, #488
	PUBLIC	_NTSCBURSTParTxt
_NTSCBURSTParTxt:
; rs232cmd.c  237	char code NTSCParTxt[] 					= "NTSC";
	DB	04EH,054H,053H,043H,042H,055H,052H,053H,054H,000H
	SYMB	IDEN, "NTSCParTxt", _NTSCParTxt, #488, 129, 0
	SYMB	ALAB, _NTSCParTxt, #488
	PUBLIC	_NTSCParTxt
_NTSCParTxt:
; rs232cmd.c  238	char code JNTSCParTxt[]					= "JNTS";
	DB	04EH,054H,053H,043H,000H
	SYMB	IDEN, "JNTSCParTxt", _JNTSCParTxt, #488, 129, 0
	SYMB	ALAB, _JNTSCParTxt, #488
	PUBLIC	_JNTSCParTxt
_JNTSCParTxt:
; rs232cmd.c  239	
; rs232cmd.c  240	char code F10MHzParTxt[] 				= "F10MHZ";
	DB	04AH,04EH,054H,053H,000H
	SYMB	IDEN, "F10MHzParTxt", _F10MHzParTxt, #488, 129, 0
	SYMB	ALAB, _F10MHzParTxt, #488
	PUBLIC	_F10MHzParTxt
_F10MHzParTxt:
; rs232cmd.c  241	
; rs232cmd.c  242	char code PALParTxt[] 					= "PAL";
	DB	046H,031H,030H,04DH,048H,05AH,000H
	SYMB	IDEN, "PALParTxt", _PALParTxt, #488, 129, 0
	SYMB	ALAB, _PALParTxt, #488
	PUBLIC	_PALParTxt
_PALParTxt:
; rs232cmd.c  243	char code PAL_IDParTxt[] 				= "PAL_ID";
	DB	050H,041H,04CH,000H
	SYMB	IDEN, "PAL_IDParTxt", _PAL_IDParTxt, #488, 129, 0
	SYMB	ALAB, _PAL_IDParTxt, #488
	PUBLIC	_PAL_IDParTxt
_PAL_IDParTxt:
; rs232cmd.c  244	
; rs232cmd.c  245	char code CBSMPTEParTxt[]				= "CBSMPTE";			// SMPTE Colorbar
	DB	050H,041H,04CH,05FH,049H,044H,000H
	SYMB	IDEN, "CBSMPTEParTxt", _CBSMPTEParTxt, #488, 129, 0
	SYMB	ALAB, _CBSMPTEParTxt, #488
	PUBLIC	_CBSMPTEParTxt
_CBSMPTEParTxt:
; rs232cmd.c  246	char code CBSMParTxt[] 					= "CBSM";					
	DB	043H,042H,053H,04DH,050H,054H,045H,000H
	SYMB	IDEN, "CBSMParTxt", _CBSMParTxt, #488, 129, 0
	SYMB	ALAB, _CBSMParTxt, #488
	PUBLIC	_CBSMParTxt
_CBSMParTxt:
; rs232cmd.c  247	char code CBEBUParTxt[] 				= "CBEBU";  	    	// EBU Colorbar
	DB	043H,042H,053H,04DH,000H
	SYMB	IDEN, "CBEBUParTxt", _CBEBUParTxt, #488, 129, 0
	SYMB	ALAB, _CBEBUParTxt, #488
	PUBLIC	_CBEBUParTxt
_CBEBUParTxt:
; rs232cmd.c  248	char code CBEBParTxt[] 					= "CBEB";
	DB	043H,042H,045H,042H,055H,000H
	SYMB	IDEN, "CBEBParTxt", _CBEBParTxt, #488, 129, 0
	SYMB	ALAB, _CBEBParTxt, #488
	PUBLIC	_CBEBParTxt
_CBEBParTxt:
; rs232cmd.c  249	char code CBFCCParTxt[] 			  	= "CBFCC";				// FCC Colorbar
	DB	043H,042H,045H,042H,000H
	SYMB	IDEN, "CBFCCParTxt", _CBFCCParTxt, #488, 129, 0
	SYMB	ALAB, _CBFCCParTxt, #488
	PUBLIC	_CBFCCParTxt
_CBFCCParTxt:
; rs232cmd.c  250	char code CBFCParTxt[] 				  	= "CBFC";
	DB	043H,042H,046H,043H,043H,000H
	SYMB	IDEN, "CBFCParTxt", _CBFCParTxt, #488, 129, 0
	SYMB	ALAB, _CBFCParTxt, #488
	PUBLIC	_CBFCParTxt
_CBFCParTxt:
; rs232cmd.c  251	char code CBEBU8ParTxt[] 			  	= "CBEBU8";				// Colorbar ITU801
	DB	043H,042H,046H,043H,000H
	SYMB	IDEN, "CBEBU8ParTxt", _CBEBU8ParTxt, #488, 129, 0
	SYMB	ALAB, _CBEBU8ParTxt, #488
	PUBLIC	_CBEBU8ParTxt
_CBEBU8ParTxt:
; rs232cmd.c  252	char code CBEB8ParTxt[] 			  	= "CBEB8";
	DB	043H,042H,045H,042H,055H,038H,000H
	SYMB	IDEN, "CBEB8ParTxt", _CBEB8ParTxt, #488, 129, 0
	SYMB	ALAB, _CBEB8ParTxt, #488
	PUBLIC	_CBEB8ParTxt
_CBEB8ParTxt:
; rs232cmd.c  253	char code CB100ParTxt[]		 		  	= "CB100";				// 100% Colorbar
	DB	043H,042H,045H,042H,038H,000H
	SYMB	IDEN, "CB100ParTxt", _CB100ParTxt, #488, 129, 0
	SYMB	ALAB, _CB100ParTxt, #488
	PUBLIC	_CB100ParTxt
_CB100ParTxt:
; rs232cmd.c  254	char code CBGREY75ParTxt[] 		  	= "CBGREY75";			// Colorbar + 75% Grey
	DB	043H,042H,031H,030H,030H,000H
	SYMB	IDEN, "CBGREY75ParTxt", _CBGREY75ParTxt, #488, 129, 0
	SYMB	ALAB, _CBGREY75ParTxt, #488
	PUBLIC	_CBGREY75ParTxt
_CBGREY75ParTxt:
; rs232cmd.c  255	char code CBGR75ParTxt[]			  	= "CBGR75";
	DB	043H,042H,047H,052H,045H,059H,037H,035H,000H
	SYMB	IDEN, "CBGR75ParTxt", _CBGR75ParTxt, #488, 129, 0
	SYMB	ALAB, _CBGR75ParTxt, #488
	PUBLIC	_CBGR75ParTxt
_CBGR75ParTxt:
; rs232cmd.c  256	char code CBRED75ParTxt[]  		  	= "CBRED75";			// Colorbar + 75% Red
	DB	043H,042H,047H,052H,037H,035H,000H
	SYMB	IDEN, "CBRED75ParTxt", _CBRED75ParTxt, #488, 129, 0
	SYMB	ALAB, _CBRED75ParTxt, #488
	PUBLIC	_CBRED75ParTxt
_CBRED75ParTxt:
; rs232cmd.c  257	char code CBR75ParTxt[] 			  	= "CBR75";
	DB	043H,042H,052H,045H,044H,037H,035H,000H
	SYMB	IDEN, "CBR75ParTxt", _CBR75ParTxt, #488, 129, 0
	SYMB	ALAB, _CBR75ParTxt, #488
	PUBLIC	_CBR75ParTxt
_CBR75ParTxt:
; rs232cmd.c  258	char code RED75ParTxt[] 			  	= "RED75";				// 75% Red
	DB	043H,042H,052H,037H,035H,000H
	SYMB	IDEN, "RED75ParTxt", _RED75ParTxt, #488, 129, 0
	SYMB	ALAB, _RED75ParTxt, #488
	PUBLIC	_RED75ParTxt
_RED75ParTxt:
; rs232cmd.c  259	
; rs232cmd.c  260	char code MULTIBURSTParTxt[] 			= "MULTIBURST";		// Multi burst
	DB	052H,045H,044H,037H,035H,000H
	SYMB	IDEN, "MULTIBURSTParTxt", _MULTIBURSTParTxt, #488, 129, 0
	SYMB	ALAB, _MULTIBURSTParTxt, #488
	PUBLIC	_MULTIBURSTParTxt
_MULTIBURSTParTxt:
; rs232cmd.c  261	char code MULTParTxt[] 				 	= "MULT";
	DB	04DH,055H,04CH,054H,049H,042H,055H,052H,053H,054H,000H
	SYMB	IDEN, "MULTParTxt", _MULTParTxt, #488, 129, 0
	SYMB	ALAB, _MULTParTxt, #488
	PUBLIC	_MULTParTxt
_MULTParTxt:
; rs232cmd.c  262	char code CCIR18ParTxt[] 	 		 	= "CCIR18";
	DB	04DH,055H,04CH,054H,000H
	SYMB	IDEN, "CCIR18ParTxt", _CCIR18ParTxt, #488, 129, 0
	SYMB	ALAB, _CCIR18ParTxt, #488
	PUBLIC	_CCIR18ParTxt
_CCIR18ParTxt:
; rs232cmd.c  263	char code WIN10ParTxt[] 			 	= "WIN10";				// Window 10%
	DB	043H,043H,049H,052H,031H,038H,000H
	SYMB	IDEN, "WIN10ParTxt", _WIN10ParTxt, #488, 129, 0
	SYMB	ALAB, _WIN10ParTxt, #488
	PUBLIC	_WIN10ParTxt
_WIN10ParTxt:
; rs232cmd.c  264	char code WIN15ParTxt[] 			 	= "WIN15";				// Window 15%
	DB	057H,049H,04EH,031H,030H,000H
	SYMB	IDEN, "WIN15ParTxt", _WIN15ParTxt, #488, 129, 0
	SYMB	ALAB, _WIN15ParTxt, #488
	PUBLIC	_WIN15ParTxt
_WIN15ParTxt:
; rs232cmd.c  265	char code WIN20ParTxt[] 			 	= "WIN20";				// Window 20%
	DB	057H,049H,04EH,031H,035H,000H
	SYMB	IDEN, "WIN20ParTxt", _WIN20ParTxt, #488, 129, 0
	SYMB	ALAB, _WIN20ParTxt, #488
	PUBLIC	_WIN20ParTxt
_WIN20ParTxt:
; rs232cmd.c  266	char code WIN100ParTxt[] 			 	= "WIN100";				// Window 100%
	DB	057H,049H,04EH,032H,030H,000H
	SYMB	IDEN, "WIN100ParTxt", _WIN100ParTxt, #488, 129, 0
	SYMB	ALAB, _WIN100ParTxt, #488
	PUBLIC	_WIN100ParTxt
_WIN100ParTxt:
; rs232cmd.c  267	char code BLWH15ParTxt[] 			 	= "BLWH15KHZ";			// 15kHz Bl/Wh
	DB	057H,049H,04EH,031H,030H,030H,000H
	SYMB	IDEN, "BLWH15ParTxt", _BLWH15ParTxt, #488, 129, 0
	SYMB	ALAB, _BLWH15ParTxt, #488
	PUBLIC	_BLWH15ParTxt
_BLWH15ParTxt:
; rs232cmd.c  268	char code WHITE100ParTxt[] 		 	= "WHITE100";			// White 100%
	DB	042H,04CH,057H,048H,031H,035H,04BH,048H,05AH,000H
	SYMB	IDEN, "WHITE100ParTxt", _WHITE100ParTxt, #488, 129, 0
	SYMB	ALAB, _WHITE100ParTxt, #488
	PUBLIC	_WHITE100ParTxt
_WHITE100ParTxt:
; rs232cmd.c  269	char code WHIT100ParTxt[] 				= "WHIT100";
	DB	057H,048H,049H,054H,045H,031H,030H,030H,000H
	SYMB	IDEN, "WHIT100ParTxt", _WHIT100ParTxt, #488, 129, 0
	SYMB	ALAB, _WHIT100ParTxt, #488
	PUBLIC	_WHIT100ParTxt
_WHIT100ParTxt:
; rs232cmd.c  270	char code BLACKParTxt[] 		  		= "BLACK";				// Black
	DB	057H,048H,049H,054H,031H,030H,030H,000H
	SYMB	IDEN, "BLACKParTxt", _BLACKParTxt, #488, 129, 0
	SYMB	ALAB, _BLACKParTxt, #488
	PUBLIC	_BLACKParTxt
_BLACKParTxt:
; rs232cmd.c  271	char code BLACParTxt[]		 	  		= "BLAC";
	DB	042H,04CH,041H,043H,04BH,000H
	SYMB	IDEN, "BLACParTxt", _BLACParTxt, #488, 129, 0
	SYMB	ALAB, _BLACParTxt, #488
	PUBLIC	_BLACParTxt
_BLACParTxt:
; rs232cmd.c  272	
; rs232cmd.c  273	char code SDICHECKParTxt[] 	  		= "SDICHECK";			// Check field
	DB	042H,04CH,041H,043H,000H
	SYMB	IDEN, "SDICHECKParTxt", _SDICHECKParTxt, #488, 129, 0
	SYMB	ALAB, _SDICHECKParTxt, #488
	PUBLIC	_SDICHECKParTxt
_SDICHECKParTxt:
; rs232cmd.c  274	char code SDICParTxt[] 			  		= "SDIC";
	DB	053H,044H,049H,043H,048H,045H,043H,04BH,000H
	SYMB	IDEN, "SDICParTxt", _SDICParTxt, #488, 129, 0
	SYMB	ALAB, _SDICParTxt, #488
	PUBLIC	_SDICParTxt
_SDICParTxt:
; rs232cmd.c  275	char code DGREYParTxt[] 		  		= "DGREY";				// Digital grey
	DB	053H,044H,049H,043H,000H
	SYMB	IDEN, "DGREYParTxt", _DGREYParTxt, #488, 129, 0
	SYMB	ALAB, _DGREYParTxt, #488
	PUBLIC	_DGREYParTxt
_DGREYParTxt:
; rs232cmd.c  276	char code DGRParTxt[] 			  		= "DGR";
	DB	044H,047H,052H,045H,059H,000H
	SYMB	IDEN, "DGRParTxt", _DGRParTxt, #488, 129, 0
	SYMB	ALAB, _DGRParTxt, #488
	PUBLIC	_DGRParTxt
_DGRParTxt:
; rs232cmd.c  277	char code STAIRCASE5ParTxt[]			= "STAIRCASE5";	 	// 5-step staircase
	DB	044H,047H,052H,000H
	SYMB	IDEN, "STAIRCASE5ParTxt", _STAIRCASE5ParTxt, #488, 129, 0
	SYMB	ALAB, _STAIRCASE5ParTxt, #488
	PUBLIC	_STAIRCASE5ParTxt
_STAIRCASE5ParTxt:
; rs232cmd.c  278	char code STA5ParTxt[] 			  		= "STA5";
	DB	053H,054H,041H,049H,052H,043H,041H,053H,045H,035H,000H
	SYMB	IDEN, "STA5ParTxt", _STA5ParTxt, #488, 129, 0
	SYMB	ALAB, _STA5ParTxt, #488
	PUBLIC	_STA5ParTxt
_STA5ParTxt:
; rs232cmd.c  279	char code STAIRCASE10ParTxt[] 		= "STAIRCASE10";		// 10-step staircase
	DB	053H,054H,041H,035H,000H
	SYMB	IDEN, "STAIRCASE10ParTxt", _STAIRCASE10ParTxt, #488, 129, 0
	SYMB	ALAB, _STAIRCASE10ParTxt, #488
	PUBLIC	_STAIRCASE10ParTxt
_STAIRCASE10ParTxt:
; rs232cmd.c  280	char code STA10ParTxt[] 		  		= "STA10";
	DB	053H,054H,041H,049H,052H,043H,041H,053H,045H,031H,030H,000H
	SYMB	IDEN, "STA10ParTxt", _STA10ParTxt, #488, 129, 0
	SYMB	ALAB, _STA10ParTxt, #488
	PUBLIC	_STA10ParTxt
_STA10ParTxt:
; rs232cmd.c  281	char code CROSSHATCHParTxt[] 			= "CROSSHATCH";		// Cross hatch
	DB	053H,054H,041H,031H,030H,000H
	SYMB	IDEN, "CROSSHATCHParTxt", _CROSSHATCHParTxt, #488, 129, 0
	SYMB	ALAB, _CROSSHATCHParTxt, #488
	PUBLIC	_CROSSHATCHParTxt
_CROSSHATCHParTxt:
; rs232cmd.c  282	char code CROSParTxt[] 			  		= "CROS";
	DB	043H,052H,04FH,053H,053H,048H,041H,054H,043H,048H,000H
	SYMB	IDEN, "CROSParTxt", _CROSParTxt, #488, 129, 0
	SYMB	ALAB, _CROSParTxt, #488
	PUBLIC	_CROSParTxt
_CROSParTxt:
; rs232cmd.c  283	char code PLUGEParTxt[] 		  		= "PLUGE";				// PLUGE
	DB	043H,052H,04FH,053H,000H
	SYMB	IDEN, "PLUGEParTxt", _PLUGEParTxt, #488, 129, 0
	SYMB	ALAB, _PLUGEParTxt, #488
	PUBLIC	_PLUGEParTxt
_PLUGEParTxt:
; rs232cmd.c  284	char code PLUGParTxt[] 			  		= "PLUG";
	DB	050H,04CH,055H,047H,045H,000H
	SYMB	IDEN, "PLUGParTxt", _PLUGParTxt, #488, 129, 0
	SYMB	ALAB, _PLUGParTxt, #488
	PUBLIC	_PLUGParTxt
_PLUGParTxt:
; rs232cmd.c  285	
; rs232cmd.c  286	char code ANALOGParTxt[]		  		= "ANALOG";
	DB	050H,04CH,055H,047H,000H
	SYMB	IDEN, "ANALOGParTxt", _ANALOGParTxt, #488, 129, 0
	SYMB	ALAB, _ANALOGParTxt, #488
	PUBLIC	_ANALOGParTxt
_ANALOGParTxt:
; rs232cmd.c  287	char code ANALParTxt[]			  		= "ANAL";
	DB	041H,04EH,041H,04CH,04FH,047H,000H
	SYMB	IDEN, "ANALParTxt", _ANALParTxt, #488, 129, 0
	SYMB	ALAB, _ANALParTxt, #488
	PUBLIC	_ANALParTxt
_ANALParTxt:
; rs232cmd.c  288	char code AESEBUParTxt[]		  		= "AESEBU";
	DB	041H,04EH,041H,04CH,000H
	SYMB	IDEN, "AESEBUParTxt", _AESEBUParTxt, #488, 129, 0
	SYMB	ALAB, _AESEBUParTxt, #488
	PUBLIC	_AESEBUParTxt
_AESEBUParTxt:
; rs232cmd.c  289	char code AESParTxt[]			  		= "AES";
	DB	041H,045H,053H,045H,042H,055H,000H
	SYMB	IDEN, "AESParTxt", _AESParTxt, #488, 129, 0
	SYMB	ALAB, _AESParTxt, #488
	PUBLIC	_AESParTxt
_AESParTxt:
; rs232cmd.c  290	
; rs232cmd.c  291	char code F441KHZParTxt[]		 		= "F441KHZ";
	DB	041H,045H,053H,000H
	SYMB	IDEN, "F441KHZParTxt", _F441KHZParTxt, #488, 129, 0
	SYMB	ALAB, _F441KHZParTxt, #488
	PUBLIC	_F441KHZParTxt
_F441KHZParTxt:
; rs232cmd.c  292	char code F48KHZParTxt[] 				= "F48KHZ";
	DB	046H,034H,034H,031H,04BH,048H,05AH,000H
	SYMB	IDEN, "F48KHZParTxt", _F48KHZParTxt, #488, 129, 0
	SYMB	ALAB, _F48KHZParTxt, #488
	PUBLIC	_F48KHZParTxt
_F48KHZParTxt:
; rs232cmd.c  293	char code F45MHZParTxt[] 				= "F45MHZ";
	DB	046H,034H,038H,04BH,048H,05AH,000H
	SYMB	IDEN, "F45MHZParTxt", _F45MHZParTxt, #488, 129, 0
	SYMB	ALAB, _F45MHZParTxt, #488
	PUBLIC	_F45MHZParTxt
_F45MHZParTxt:
; rs232cmd.c  294	
; rs232cmd.c  295	char code S500HZParTxt[] 				= "S500HZ";				// Stereo 500 Hz
	DB	046H,034H,035H,04DH,048H,05AH,000H
	SYMB	IDEN, "S500HZParTxt", _S500HZParTxt, #488, 129, 0
	SYMB	ALAB, _S500HZParTxt, #488
	PUBLIC	_S500HZParTxt
_S500HZParTxt:
; rs232cmd.c  296	char code S1KHZParTxt[] 				= "S1KHZ";   			// Stereo 1 kHz
	DB	053H,035H,030H,030H,048H,05AH,000H
	SYMB	IDEN, "S1KHZParTxt", _S1KHZParTxt, #488, 129, 0
	SYMB	ALAB, _S1KHZParTxt, #488
	PUBLIC	_S1KHZParTxt
_S1KHZParTxt:
; rs232cmd.c  297	char code SEBU1KHZParTxt[]		 		= "SEBU1KHZ";			// Stereo EBU 1 kHz
	DB	053H,031H,04BH,048H,05AH,000H
	SYMB	IDEN, "SEBU1KHZParTxt", _SEBU1KHZParTxt, #488, 129, 0
	SYMB	ALAB, _SEBU1KHZParTxt, #488
	PUBLIC	_SEBU1KHZParTxt
_SEBU1KHZParTxt:
; rs232cmd.c  298	char code S8KHZParTxt[] 				= "S8KHZ";				// Stereo 8 kHz
	DB	053H,045H,042H,055H,031H,04BH,048H,05AH,000H
	SYMB	IDEN, "S8KHZParTxt", _S8KHZParTxt, #488, 129, 0
	SYMB	ALAB, _S8KHZParTxt, #488
	PUBLIC	_S8KHZParTxt
_S8KHZParTxt:
; rs232cmd.c  299	
; rs232cmd.c  300	char code SILENCEParTxt[] 				= "SILENCE";
	DB	053H,038H,04BH,048H,05AH,000H
	SYMB	IDEN, "SILENCEParTxt", _SILENCEParTxt, #488, 129, 0
	SYMB	ALAB, _SILENCEParTxt, #488
	PUBLIC	_SILENCEParTxt
_SILENCEParTxt:
; rs232cmd.c  301	char code SILParTxt[] 					= "SIL";
	DB	053H,049H,04CH,045H,04EH,043H,045H,000H
	SYMB	IDEN, "SILParTxt", _SILParTxt, #488, 129, 0
	SYMB	ALAB, _SILParTxt, #488
	PUBLIC	_SILParTxt
_SILParTxt:
; rs232cmd.c  302	
; rs232cmd.c  303	char code DMYParTxt[]					= "DMY";
	DB	053H,049H,04CH,000H
	SYMB	IDEN, "DMYParTxt", _DMYParTxt, #488, 129, 0
	SYMB	ALAB, _DMYParTxt, #488
	PUBLIC	_DMYParTxt
_DMYParTxt:
; rs232cmd.c  304	char code MDYParTxt[]					= "MDY";
	DB	044H,04DH,059H,000H
	SYMB	IDEN, "MDYParTxt", _MDYParTxt, #488, 129, 0
	SYMB	ALAB, _MDYParTxt, #488
	PUBLIC	_MDYParTxt
_MDYParTxt:
; rs232cmd.c  305	char code YMDParTxt[]					= "YMD";
	DB	04DH,044H,059H,000H
	SYMB	IDEN, "YMDParTxt", _YMDParTxt, #488, 129, 0
	SYMB	ALAB, _YMDParTxt, #488
	PUBLIC	_YMDParTxt
_YMDParTxt:
; rs232cmd.c  306	
; rs232cmd.c  307	char code BBParTxt[] 					= "BB";
	DB	059H,04DH,044H,000H
	SYMB	IDEN, "BBParTxt", _BBParTxt, #488, 129, 0
	SYMB	ALAB, _BBParTxt, #488
	PUBLIC	_BBParTxt
_BBParTxt:
; rs232cmd.c  308	char code SPGParTxt[]  					= "SPG";
	DB	042H,042H,000H
	SYMB	IDEN, "SPGParTxt", _SPGParTxt, #488, 129, 0
	SYMB	ALAB, _SPGParTxt, #488
	PUBLIC	_SPGParTxt
_SPGParTxt:
; rs232cmd.c  309	
; rs232cmd.c  310	char code OFFParTxt[] 					= "OFF";
	DB	053H,050H,047H,000H
	SYMB	IDEN, "OFFParTxt", _OFFParTxt, #488, 129, 0
	SYMB	ALAB, _OFFParTxt, #488
	PUBLIC	_OFFParTxt
_OFFParTxt:
; rs232cmd.c  311	char code ONParTxt[] 					= "ON";
	DB	04FH,046H,046H,000H
	SYMB	IDEN, "ONParTxt", _ONParTxt, #488, 129, 0
	SYMB	ALAB, _ONParTxt, #488
	PUBLIC	_ONParTxt
_ONParTxt:
; rs232cmd.c  312	
; rs232cmd.c  313	char code UPParTxt[] 					= "UP";
	DB	04FH,04EH,000H
	SYMB	IDEN, "UPParTxt", _UPParTxt, #488, 129, 0
	SYMB	ALAB, _UPParTxt, #488
	PUBLIC	_UPParTxt
_UPParTxt:
; rs232cmd.c  314	char code DOWNParTxt[] 				 	= "DOWN";
	DB	055H,050H,000H
	SYMB	IDEN, "DOWNParTxt", _DOWNParTxt, #488, 129, 0
	SYMB	ALAB, _DOWNParTxt, #488
	PUBLIC	_DOWNParTxt
_DOWNParTxt:
; rs232cmd.c  315	
; rs232cmd.c  316	char code NORMALParTxt[] 				= "NORMAL";
	DB	044H,04FH,057H,04EH,000H
	SYMB	IDEN, "NORMALParTxt", _NORMALParTxt, #488, 129, 0
	SYMB	ALAB, _NORMALParTxt, #488
	PUBLIC	_NORMALParTxt
_NORMALParTxt:
; rs232cmd.c  317	char code NORMParTxt[] 					= "NORM";
	DB	04EH,04FH,052H,04DH,041H,04CH,000H
	SYMB	IDEN, "NORMParTxt", _NORMParTxt, #488, 129, 0
	SYMB	ALAB, _NORMParTxt, #488
	PUBLIC	_NORMParTxt
_NORMParTxt:
; rs232cmd.c  318	
; rs232cmd.c  319	char code MINParTxt[] 					= "MIN";
	DB	04EH,04FH,052H,04DH,000H
	SYMB	IDEN, "MINParTxt", _MINParTxt, #488, 129, 0
	SYMB	ALAB, _MINParTxt, #488
	PUBLIC	_MINParTxt
_MINParTxt:
; rs232cmd.c  320	char code MAXParTxt[] 					= "MAX";
	DB	04DH,049H,04EH,000H
	SYMB	IDEN, "MAXParTxt", _MAXParTxt, #488, 129, 0
	SYMB	ALAB, _MAXParTxt, #488
	PUBLIC	_MAXParTxt
_MAXParTxt:
; rs232cmd.c  321	
; rs232cmd.c  322	char code UNLOCKEDParTxt[] 	 		= "UNLOCKED";
	DB	04DH,041H,058H,000H
	SYMB	IDEN, "UNLOCKEDParTxt", _UNLOCKEDParTxt, #488, 129, 0
	SYMB	ALAB, _UNLOCKEDParTxt, #488
	PUBLIC	_UNLOCKEDParTxt
_UNLOCKEDParTxt:
; rs232cmd.c  323	char code GENLOCKEDParTxt[] 	 		= "GENLOCKED";
	DB	055H,04EH,04CH,04FH,043H,04BH,045H,044H,000H
	SYMB	IDEN, "GENLOCKEDParTxt", _GENLOCKEDParTxt, #488, 129, 0
	SYMB	ALAB, _GENLOCKEDParTxt, #488
	PUBLIC	_GENLOCKEDParTxt
_GENLOCKEDParTxt:
; rs232cmd.c  324	
; rs232cmd.c  325	
; rs232cmd.c  326	void CLSCommand( void);
; rs232cmd.c  327	void ESECommand( void);
; rs232cmd.c  328	void ESRCommand( void);
; rs232cmd.c  329	void OPCCommand( void);
; rs232cmd.c  330	void SRECommand( void);
; rs232cmd.c  331	void STBCommand( void);
; rs232cmd.c  332	void TSTCommand( void);
; rs232cmd.c  333	void WAICommand( void);
; rs232cmd.c  334	void RSTCommand( void);
; rs232cmd.c  335	void IDNCommand( void);
; rs232cmd.c  336	void RCLCommand( void);
; rs232cmd.c  337	void SAVCommand( void);
; rs232cmd.c  338	
; rs232cmd.c  339	void SystemError( void);
; rs232cmd.c  340	void SystemVersion( void);
; rs232cmd.c  341	void SystemTime( void);
; rs232cmd.c  342	void SystemDate( void);
; rs232cmd.c  343	
; rs232cmd.c  344	void SystemPresetName( void);
; rs232cmd.c  345	void SystemPresetAuthor( void);
; rs232cmd.c  346	void SystemPresetDate( void);
; rs232cmd.c  347	void SystemPresetDownload( void);
; rs232cmd.c  348	void SystemPresetUpload( void);
; rs232cmd.c  349	
; rs232cmd.c  350	void StatusOperEvent( void);
; rs232cmd.c  351	void StatusOperCondition( void);
; rs232cmd.c  352	void StatusOperEnable( void);
; rs232cmd.c  353	void StatusQuestEvent( void);
; rs232cmd.c  354	void StatusQuestCondition( void);
; rs232cmd.c  355	void StatusQuestEnable( void);
; rs232cmd.c  356	void StatusPreset( void);
; rs232cmd.c  357	
; rs232cmd.c  358	void GenlockGen( void);
; rs232cmd.c  359	void GenlockGenSystem( void);
; rs232cmd.c  360	void GenlockGenDelay( void);
; rs232cmd.c  361	void GenlockGenCalibrateEnable( void);
; rs232cmd.c  362	void GenlockGenCalibrateAdjust( void);
; rs232cmd.c  363	void GenlockGenCalibrateStore( void);
; rs232cmd.c  364	
; rs232cmd.c  365	void BBGenSuffix( void);
; rs232cmd.c  366	void BBGen( void);
; rs232cmd.c  367	void BBGenSystem( void);
; rs232cmd.c  368	void BBGenDelay( void);
; rs232cmd.c  369	void BBGenScHPhase( void);
; rs232cmd.c  370	
; rs232cmd.c  371	void TSGen( void);
; rs232cmd.c  372	void TSGenPattern( void);
; rs232cmd.c  373	void TSGenSystem( void);
; rs232cmd.c  374	void TSGenDelay( void);
; rs232cmd.c  375	void TSGenScHPhase( void);
; rs232cmd.c  376	void TSGenEmbAudioSignal( void);
; rs232cmd.c  377	
; rs232cmd.c  378	void AudioGenOutput( void);
; rs232cmd.c  379	
; rs232cmd.c  380	void AudioGenAnalog( void);
; rs232cmd.c  381	void AudioGenAnalogSignal( void);
; rs232cmd.c  382	void AudioGenAnalogLevel( void);
; rs232cmd.c  383	void AudioGenAnalogClick( void);
; rs232cmd.c  384	
; rs232cmd.c  385	void AudioGenAESEBU( void);
; rs232cmd.c  386	void AudioGenAESEBUSystem( void);
; rs232cmd.c  387	void AudioGenAESEBUSignal( void);
; rs232cmd.c  388	void AudioGenAESEBULevel( void);
; rs232cmd.c  389	void AudioGenAESEBUTiming( void);
; rs232cmd.c  390	void AudioGenAESEBUWordClock( void);
; rs232cmd.c  391	void AudioGenAESEBUClick( void);
; rs232cmd.c  392	
; rs232cmd.c  393	void FactPassword( void);
; rs232cmd.c  394	void FactReset( void);
; rs232cmd.c  395	void FactV24Command( void);
; rs232cmd.c  396	void FactV24Transparent( void);
; rs232cmd.c  397	
; rs232cmd.c  398	void FactChecksumCode( void);
; rs232cmd.c  399	void FactChecksumPLD( void);
; rs232cmd.c  400	void FactChecksumEmbAudio( void);
; rs232cmd.c  401	void FactChecksumPattern( void);
; rs232cmd.c  402	void FactChecksumRange( void);
; rs232cmd.c  403	
; rs232cmd.c  404	void FactMainVersion( void);
; rs232cmd.c  405	void FactMainIDNCompany( void);
; rs232cmd.c  406	void FactMainIDNType( void);
; rs232cmd.c  407	void FactMainIDNKUNumber( void);
; rs232cmd.c  408	void FactMainIDNSWRevision( void);
; rs232cmd.c  409	
; rs232cmd.c  410	void FactMainSystem( void);
; rs232cmd.c  411	void FactMainFMSDateProd( void);
; rs232cmd.c  412	void FactMainFMSDateUpd( void);
; rs232cmd.c  413	
; rs232cmd.c  414	void FactGenlockGenDate( void);
; rs232cmd.c  415	void FactGenlockGenVersion( void);
; rs232cmd.c  416	void FactGenlockGenFRefDate( void);
; rs232cmd.c  417	void FactGenlockGenFRefDAC( void);
; rs232cmd.c  418	void FactGenlockGenURefDate( void);
; rs232cmd.c  419	void FactGenlockGenURefDAC( void);
; rs232cmd.c  420	void FactGenlockGenHPHZero( void);
; rs232cmd.c  421	void FactGenlockGenPhase( void);
; rs232cmd.c  422	
; rs232cmd.c  423	void FactBBGenDate( void);
; rs232cmd.c  424	void FactBBGenVersion( void);
; rs232cmd.c  425	void FactBBGenSignal( void);
; rs232cmd.c  426	void FactBBGenPhase( void);
; rs232cmd.c  427	void FactBBGenScHPhase( void);
; rs232cmd.c  428	void FactBBGenDAC( void);
; rs232cmd.c  429	
; rs232cmd.c  430	void FactTSGenDate( void);
; rs232cmd.c  431	void FactTSGenAGain( void);
; rs232cmd.c  432	void FactTSGenCGain( void);
; rs232cmd.c  433	void FactTSGenPhase( void);
; rs232cmd.c  434	void FactTSGenScHPhase( void);
; rs232cmd.c  435	
; rs232cmd.c  436	void FactAudioGenStatus( void);
; rs232cmd.c  437	void FactAudioGenDate( void);
; rs232cmd.c  438	void FactAudioGenLevel( void);
; rs232cmd.c  439	
; rs232cmd.c  440	void FactPLDVersion( void);
; rs232cmd.c  441	void FactTCXOStatus( void);
; rs232cmd.c  442	void FactMultiMediaChip( void);
; rs232cmd.c  443	
; rs232cmd.c  444	int FindParameter( char* par, struct PAR_STRUCT code* TmpPtr);
; rs232cmd.c  445	
; rs232cmd.c  446	long FLTToSamples( UC system, int F, int L, float T);
; rs232cmd.c  447	void PrintSamplesToFLT( UC system, long samples);
; rs232cmd.c  448	
; rs232cmd.c  449	// **************************************************************************
; rs232cmd.c  450	struct CMD_STRUCT code Mandated[12] = {
	DB	047H,045H,04EH,04CH,04FH,043H,04BH,045H,044H,000H
	SYMB	TYPE, 490, 'n', #2, 129
	SYMB	TYPE, 491, 'P', #490
	SYMB	TYPE, 493, 'n', #492, 129
	SYMB	TYPE, 494, 'P', #493
	SYMB	TYPE, 495, 'X', 12, #1, 30, 0
	SYMB	TYPE, 496, 'n', #495, 129
	SYMB	TYPE, 497, 'P', #496
	SYMB	TYPE, 498, 'X', 12, #1, 30, 0
	SYMB	TYPE, 499, 'n', #498, 129
	SYMB	TYPE, 500, 'P', #499
	SYMB	TYPE, 492, "CMD_STRUCT", 'S', 24,\
		 "LongName", #491, 0,\
		 "ShortName", #491, 4,\
		 "SameLevel", #494, 8,\
		 "NextLevel", #494, 12,\
		 "Suffix", #497, 16,\
		 "Function", #500, 20
	SYMB	TYPE, 501, 'Z', #492, 11
	SYMB	IDEN, "Mandated", _Mandated, #501, 129, 0
	SYMB	ALAB, _Mandated, #501
	PUBLIC	_Mandated
	ALIGN	1
_Mandated:
	DD	_CLSCmdTxt
	DD	000000000H
	DD	_Mandated+24
	DD	000000000H,000000000H
	DD	_CLSCommand,_ESECmdTxt
	DD	000000000H
	DD	_Mandated+48
	DD	000000000H,000000000H
	DD	_ESECommand,_ESRCmdTxt
	DD	000000000H
	DD	_Mandated+72
	DD	000000000H,000000000H
	DD	_ESRCommand,_IDNCmdTxt
	DD	000000000H
	DD	_Mandated+96
	DD	000000000H,000000000H
	DD	_IDNCommand,_OPCCmdTxt
	DD	000000000H
	DD	_Mandated+120
	DD	000000000H,000000000H
	DD	_OPCCommand,_RSTCmdTxt
	DD	000000000H
	DD	_Mandated+144
	DD	000000000H,000000000H
	DD	_RSTCommand,_SRECmdTxt
	DD	000000000H
	DD	_Mandated+168
	DD	000000000H,000000000H
	DD	_SRECommand,_STBCmdTxt
	DD	000000000H
	DD	_Mandated+192
	DD	000000000H,000000000H
	DD	_STBCommand,_TSTCmdTxt
	DD	000000000H
	DD	_Mandated+216
	DD	000000000H,000000000H
	DD	_TSTCommand,_RCLCmdTxt
	DD	000000000H
	DD	_Mandated+240
	DD	000000000H,000000000H
	DD	_RCLCommand,_SAVCmdTxt
	DD	000000000H
	DD	_Mandated+264
	DD	000000000H,000000000H
	DD	_SAVCommand,_WAICmdTxt
	DD	000000000H,000000000H,000000000H,000000000H
; rs232cmd.c  451		{ CLSCmdTxt, NULL, &Mandated[1],  NULL, NONE, CLSCommand},
; rs232cmd.c  452		{ ESECmdTxt, NULL, &Mandated[2],  NULL, NONE, ESECommand},
; rs232cmd.c  453		{ ESRCmdTxt, NULL, &Mandated[3],  NULL, NONE, ESRCommand},
; rs232cmd.c  454		{ IDNCmdTxt, NULL, &Mandated[4],  NULL, NONE, IDNCommand},
; rs232cmd.c  455		{ OPCCmdTxt, NULL, &Mandated[5],  NULL, NONE, OPCCommand},
; rs232cmd.c  456		{ RSTCmdTxt, NULL, &Mandated[6],  NULL, NONE, RSTCommand},
; rs232cmd.c  457		{ SRECmdTxt, NULL, &Mandated[7],  NULL, NONE, SRECommand},
; rs232cmd.c  458		{ STBCmdTxt, NULL, &Mandated[8],  NULL, NONE, STBCommand},
; rs232cmd.c  459		{ TSTCmdTxt, NULL, &Mandated[9],  NULL, NONE, TSTCommand},
; rs232cmd.c  460		{ RCLCmdTxt, NULL, &Mandated[10], NULL, NONE, RCLCommand},
; rs232cmd.c  461		{ SAVCmdTxt, NULL, &Mandated[11], NULL, NONE, SAVCommand},
; rs232cmd.c  462		{ WAICmdTxt, NULL, NULL         , NULL, NONE, WAICommand}
; rs232cmd.c  463	};
; rs232cmd.c  464	
; rs232cmd.c  465	struct CMD_STRUCT code Subsystem[9] = {
	DD	_WAICommand
	SYMB	TYPE, 503, 'Z', #492, 8
	SYMB	IDEN, "Subsystem", _Subsystem, #503, 129, 0
	SYMB	ALAB, _Subsystem, #503
	PUBLIC	_Subsystem
	ALIGN	1
_Subsystem:
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_Subsystem+24
	DD	_System
	DD	000000000H,000000000H
	DD	_STATUSCmdTxt,_STATCmdTxt
	DD	_Subsystem+48
	DD	_Status
	DD	000000000H,000000000H
	DD	_DIAGNOSTICCmdTxt,_DIAGCmdTxt
	DD	_Subsystem+72
	DD	000000000H,000000000H,000000000H
	DD	_MONITORCmdTxt,_MONCmdTxt
	DD	_Subsystem+96
	DD	000000000H,000000000H,000000000H
	DD	_INPUTCmdTxt,_INPCmdTxt
	DD	_Subsystem+120
	DD	_Input
	DD	000000000H,000000000H
	DD	_OUTPUTCmdTxt,_OUTPCmdTxt
	DD	_Subsystem+144
	DD	_Output
	DD	000000000H,000000000H
	DD	_USERCmdTxt,_USERCmdTxt
	DD	_Subsystem+168
	DD	000000000H,000000000H,000000000H
	DD	_MEASURECmdTxt,_MEASCmdTxt
	DD	_Subsystem+192
	DD	000000000H,000000000H,000000000H
	DD	_FACTORYCmdTxt,_FACTCmdTxt
	DD	000000000H
	DD	_Factory
; rs232cmd.c  466		{ SYSTEMCmdTxt,	  SYSTCmdTxt, &Subsystem[1], &System[0],  NONE, NONE},
; rs232cmd.c  467		{ STATUSCmdTxt, 	  STATCmdTxt, &Subsystem[2], &Status[0],  NONE, NONE},
; rs232cmd.c  468		{ DIAGNOSTICCmdTxt, DIAGCmdTxt, &Subsystem[3], NULL,		   NONE, NONE},
; rs232cmd.c  469		{ MONITORCmdTxt, 	  MONCmdTxt,  &Subsystem[4], NULL, 		   NONE, NONE},
; rs232cmd.c  470		{ INPUTCmdTxt, 	  INPCmdTxt,  &Subsystem[5], &Input[0],   NONE, NONE},
; rs232cmd.c  471		{ OUTPUTCmdTxt, 	  OUTPCmdTxt, &Subsystem[6], &Output[0],  NONE, NONE},
; rs232cmd.c  472		{ USERCmdTxt, 		  USERCmdTxt, &Subsystem[7], NULL, 		   NONE, NONE},
; rs232cmd.c  473		{ MEASURECmdTxt, 	  MEASCmdTxt, &Subsystem[8], NULL, 		   NONE, NONE},
; rs232cmd.c  474		{ FACTORYCmdTxt, 	  FACTCmdTxt, NULL, 			  &Factory[0], NONE, NONE},
; rs232cmd.c  475	};
; rs232cmd.c  476	
; rs232cmd.c  477	// **************************************************************************
; rs232cmd.c  478	/*	CMD:	SUB1:	SUB2:	SUB3:	PARM:
; rs232cmd.c  479			SYSTem
; rs232cmd.c  480				:ERRor?
; rs232cmd.c  481	    	:VERSion?
; rs232cmd.c  482		    :PRESet<?>
; rs232cmd.c  483	  	  	[:ACTIVE?]
; rs232cmd.c  484	  	  	:RECall<?>	1 .. 4
; rs232cmd.c  485	    	  :STORe			1 .. 4
; rs232cmd.c  486	      	:NAMe<?>		1 .. 4 , <name>
; rs232cmd.c  487	      	:AUTHor<?> 	1 .. 4 , <author name>
; rs232cmd.c  488		      :DATE<?>		1 .. 4[, <year>,<month>,<date>]
; rs232cmd.c  489					:DOWNload		1 .. 4
; rs232cmd.c  490					:UPLoad			1 .. 4
; rs232cmd.c  491	    	:EVENtlog
; rs232cmd.c  492	    	:DATE
; rs232cmd.c  493	    	:TIME
; rs232cmd.c  494	*/
; rs232cmd.c  495	struct CMD_STRUCT code System[6] = {
	DD	000000000H,000000000H
	SYMB	TYPE, 505, 'Z', #492, 5
	SYMB	IDEN, "System", _System, #505, 129, 0
	SYMB	ALAB, _System, #505
	PUBLIC	_System
	ALIGN	1
_System:
	DD	_ERRORCmdTxt,_ERRCmdTxt
	DD	_System+24
	DD	000000000H,000000000H
	DD	_SystemError,_VERSIONCmdTxt,_VERSCmdTxt
	DD	_System+48
	DD	000000000H,000000000H
	DD	_SystemVersion,_PRESETCmdTxt,_PRESCmdTxt
	DD	_System+72
	DD	_SystemLevel1
	DD	000000000H
	DD	_RCLCommand,_EVENTLOGCmdTxt,_EVENCmdTxt
	DD	_System+96
	DD	000000000H,000000000H,000000000H
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_System+120
	DD	000000000H,000000000H,000000000H
	DD	_TIMECmdTxt,_TIMECmdTxt
; rs232cmd.c  496		{ ERRORCmdTxt, 	ERRCmdTxt, 	&System[1], NULL, 				NONE, SystemError},
; rs232cmd.c  497		{ VERSIONCmdTxt,	VERSCmdTxt, &System[2], NULL, 				NONE, SystemVersion},
; rs232cmd.c  498		{ PRESETCmdTxt, 	PRESCmdTxt, &System[3], &SystemLevel1[0], NONE, RCLCommand},
; rs232cmd.c  499		{ EVENTLOGCmdTxt, EVENCmdTxt, &System[4], NULL, 				NONE, NONE},
; rs232cmd.c  500		{ DATECmdTxt, 		DATECmdTxt, &System[5], NULL, 				NONE, NONE},
; rs232cmd.c  501		{ TIMECmdTxt, 		TIMECmdTxt, NULL, 		NULL, 				NONE, NONE}
; rs232cmd.c  502	};
; rs232cmd.c  503	
; rs232cmd.c  504	struct CMD_STRUCT code SystemLevel1[7] = {
	DD	000000000H,000000000H,000000000H,000000000H
	SYMB	TYPE, 507, 'Z', #492, 6
	SYMB	IDEN, "SystemLevel1", _SystemLevel1, #507, 129, 0
	SYMB	ALAB, _SystemLevel1, #507
	PUBLIC	_SystemLevel1
	ALIGN	1
_SystemLevel1:
	DD	_RECALLCmdTxt,_RECCmdTxt
	DD	_SystemLevel1+24
	DD	000000000H,000000000H
	DD	_RCLCommand,_STORECmdTxt,_STORCmdTxt
	DD	_SystemLevel1+48
	DD	000000000H,000000000H
	DD	_SAVCommand,_NAMECmdTxt,_NAMECmdTxt
	DD	_SystemLevel1+72
	DD	000000000H,000000000H
	DD	_SystemPresetName,_AUTHORCmdTxt,_AUTHCmdTxt
	DD	_SystemLevel1+96
	DD	000000000H,000000000H
	DD	_SystemPresetAuthor,_DATECmdTxt,_DATECmdTxt
	DD	_SystemLevel1+120
	DD	000000000H,000000000H
	DD	_SystemPresetDate,_DOWNLOADCmdTxt,_DOWNCmdTxt
	DD	_SystemLevel1+144
	DD	000000000H,000000000H
	DD	_SystemPresetDownload,_UPLOADCmdTxt,_UPLCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  505		{ RECALLCmdTxt,   RECCmdTxt, 	&SystemLevel1[1], NULL, NONE, RCLCommand},
; rs232cmd.c  506		{ STORECmdTxt,    STORCmdTxt, &SystemLevel1[2], NULL, NONE, SAVCommand},
; rs232cmd.c  507		{ NAMECmdTxt, 	   NAMECmdTxt, &SystemLevel1[3],	NULL, NONE, SystemPresetName},
; rs232cmd.c  508		{ AUTHORCmdTxt,   AUTHCmdTxt, &SystemLevel1[4],	NULL, NONE, SystemPresetAuthor},
; rs232cmd.c  509		{ DATECmdTxt, 	   DATECmdTxt, &SystemLevel1[5],	NULL, NONE, SystemPresetDate},
; rs232cmd.c  510		{ DOWNLOADCmdTxt, DOWNCmdTxt,	&SystemLevel1[6],	NULL, NONE, SystemPresetDownload},
; rs232cmd.c  511		{ UPLOADCmdTxt, 	UPLCmdTxt,	NULL, 				NULL, NONE, SystemPresetUpload},
; rs232cmd.c  512	};
; rs232cmd.c  513	
; rs232cmd.c  514	// **************************************************************************
; rs232cmd.c  515	/*	CMD:	SUB1:	SUB2:	SUB3:	PARM:
; rs232cmd.c  516			STATus
; rs232cmd.c  517		 		:OPERation
; rs232cmd.c  518	  	 		:EVENt?
; rs232cmd.c  519		      :CONDition?
; rs232cmd.c  520	  	    :ENABle<?>	0 .. 65535
; rs232cmd.c  521	   		:QUEStionable
; rs232cmd.c  522	     		:EVENt?
; rs232cmd.c  523		      :CONDition?
; rs232cmd.c  524	  	    :ENABle<?>	0 .. 65535
; rs232cmd.c  525				:PRESet				TBD
; rs232cmd.c  526		    :PT5201?
; rs232cmd.c  527	*/
; rs232cmd.c  528	struct CMD_STRUCT code Status[3] = {
	DD	_SystemPresetUpload
	SYMB	TYPE, 509, 'Z', #492, 2
	SYMB	IDEN, "Status", _Status, #509, 129, 0
	SYMB	ALAB, _Status, #509
	PUBLIC	_Status
	ALIGN	1
_Status:
	DD	_OPERATIONCmdTxt,_OPERCmdTxt
	DD	_Status+24
	DD	_StatusLevel1_1
	DD	000000000H
	DD	_StatusOperEvent,_QUESTIONABLECmdTxt,_QUESCmdTxt
	DD	_Status+48
	DD	_StatusLevel1_2
	DD	000000000H
	DD	_StatusQuestEvent,_PRESETCmdTxt,_PRESCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  529		{ OPERATIONCmdTxt, 	 OPERCmdTxt, &Status[1], &StatusLevel1_1[0], NONE, StatusOperEvent},
; rs232cmd.c  530		{ QUESTIONABLECmdTxt, QUESCmdTxt, &Status[2], &StatusLevel1_2[0], NONE, StatusQuestEvent},
; rs232cmd.c  531		{ PRESETCmdTxt, 		 PRESCmdTxt, NULL, 		 NULL, 					NONE, StatusPreset},
; rs232cmd.c  532	};
; rs232cmd.c  533	
; rs232cmd.c  534	struct CMD_STRUCT code StatusLevel1_1[3] = {
	DD	_StatusPreset
	SYMB	IDEN, "StatusLevel1_1", _StatusLevel1_1, #509, 129, 0
	SYMB	ALAB, _StatusLevel1_1, #509
	PUBLIC	_StatusLevel1_1
	ALIGN	1
_StatusLevel1_1:
	DD	_EVENTCmdTxt,_EVENCmdTxt
	DD	_StatusLevel1_1+24
	DD	000000000H,000000000H
	DD	_StatusOperEvent,_CONDITIONCmdTxt,_CONDCmdTxt
	DD	_StatusLevel1_1+48
	DD	000000000H,000000000H
	DD	_StatusOperCondition,_ENABLECmdTxt,_ENABCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  535		{ EVENTCmdTxt, 	 EVENCmdTxt, &StatusLevel1_1[1], NULL, NONE, StatusOperEvent},
; rs232cmd.c  536		{ CONDITIONCmdTxt, CONDCmdTxt, &StatusLevel1_1[2], NULL, NONE, StatusOperCondition},
; rs232cmd.c  537		{ ENABLECmdTxt, 	 ENABCmdTxt, NULL, 				   NULL, NONE, StatusOperEnable},
; rs232cmd.c  538	};
; rs232cmd.c  539	
; rs232cmd.c  540	struct CMD_STRUCT code StatusLevel1_2[3] = {
	DD	_StatusOperEnable
	SYMB	IDEN, "StatusLevel1_2", _StatusLevel1_2, #509, 129, 0
	SYMB	ALAB, _StatusLevel1_2, #509
	PUBLIC	_StatusLevel1_2
	ALIGN	1
_StatusLevel1_2:
	DD	_EVENTCmdTxt,_EVENCmdTxt
	DD	_StatusLevel1_2+24
	DD	000000000H,000000000H
	DD	_StatusQuestEvent,_CONDITIONCmdTxt,_CONDCmdTxt
	DD	_StatusLevel1_2+48
	DD	000000000H,000000000H
	DD	_StatusQuestCondition,_ENABLECmdTxt,_ENABCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  541		{ EVENTCmdTxt,		 EVENCmdTxt, &StatusLevel1_2[1], NULL, NONE, StatusQuestEvent},
; rs232cmd.c  542		{ CONDITIONCmdTxt, CONDCmdTxt, &StatusLevel1_2[2], NULL, NONE, StatusQuestCondition},
; rs232cmd.c  543		{ ENABLECmdTxt, 	 ENABCmdTxt, NULL, 					NULL, NONE, StatusQuestEnable},
; rs232cmd.c  544	};
; rs232cmd.c  545	
; rs232cmd.c  546	
; rs232cmd.c  547	// **************************************************************************
; rs232cmd.c  548	/*	CMD:	SUB1:	SUB2:		PARM:
; rs232cmd.c  549			INPut
; rs232cmd.c  550				:GENLOCK<?>
; rs232cmd.c  551					:SYSTem			INTernal | PALBurst | NTSCburst |F10MHZ
; rs232cmd.c  552					:DELay			<Field>,<Line>,<Time>
; rs232cmd.c  553					:CALibrate
; rs232cmd.c  554						:ENABle		OFF|ON
; rs232cmd.c  555						:ADJust		UP|DOWN|MIN|MAX
; rs232cmd.c  556						:STORe
; rs232cmd.c  557											
; rs232cmd.c  558	*/
; rs232cmd.c  559	//**************************************************************************
; rs232cmd.c  560	struct CMD_STRUCT code Input[1] = {
	DD	_StatusQuestEnable
	SYMB	TYPE, 511, 'Z', #492, 0
	SYMB	IDEN, "Input", _Input, #511, 129, 0
	SYMB	ALAB, _Input, #511
	PUBLIC	_Input
	ALIGN	1
_Input:	DD	_GENLOCKCmdTxt,_GENLCmdTxt
	DD	000000000H
	DD	_GenlockLevel1
	DD	000000000H
; rs232cmd.c  561		{ GENLOCKCmdTxt, GENLCmdTxt, NULL, &GenlockLevel1[0], NONE, GenlockGen},
; rs232cmd.c  562	};
; rs232cmd.c  563	
; rs232cmd.c  564	struct CMD_STRUCT code GenlockLevel1[3] = {
	DD	_GenlockGen
	SYMB	IDEN, "GenlockLevel1", _GenlockLevel1, #509, 129, 0
	SYMB	ALAB, _GenlockLevel1, #509
	PUBLIC	_GenlockLevel1
	ALIGN	1
_GenlockLevel1:
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_GenlockLevel1+24
	DD	000000000H,000000000H
	DD	_GenlockGenSystem,_DELAYCmdTxt,_DELCmdTxt
	DD	_GenlockLevel1+48
	DD	000000000H,000000000H
	DD	_GenlockGenDelay,_CALIBRATECmdTxt,_CALCmdTxt
	DD	000000000H
	DD	_GenlockLevel1_1
; rs232cmd.c  565		{ SYSTEMCmdTxt, 	 SYSTCmdTxt, &GenlockLevel1[1], NULL, 					  NONE, GenlockGenSystem},
; rs232cmd.c  566		{ DELAYCmdTxt, 	 DELCmdTxt,  &GenlockLevel1[2], NULL, 					  NONE, GenlockGenDelay},
; rs232cmd.c  567		{ CALIBRATECmdTxt, CALCmdTxt,  NULL, 				  &GenlockLevel1_1[0], NONE, NONE},
; rs232cmd.c  568	};
; rs232cmd.c  569	
; rs232cmd.c  570	struct CMD_STRUCT code GenlockLevel1_1[3] = {
	DD	000000000H,000000000H
	SYMB	IDEN, "GenlockLevel1_1", _GenlockLevel1_1, #509, 129, 0
	SYMB	ALAB, _GenlockLevel1_1, #509
	PUBLIC	_GenlockLevel1_1
	ALIGN	1
_GenlockLevel1_1:
	DD	_ENABLECmdTxt,_ENABCmdTxt
	DD	_GenlockLevel1_1+24
	DD	000000000H,000000000H
	DD	_GenlockGenCalibrateEnable,_ADJUSTCmdTxt,_ADJCmdTxt
	DD	_GenlockLevel1_1+48
	DD	000000000H,000000000H
	DD	_GenlockGenCalibrateAdjust,_STORECmdTxt,_STORCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  571		{ ENABLECmdTxt, ENABCmdTxt, &GenlockLevel1_1[1], NULL, NONE, GenlockGenCalibrateEnable},
; rs232cmd.c  572		{ ADJUSTCmdTxt, ADJCmdTxt,  &GenlockLevel1_1[2], NULL, NONE, GenlockGenCalibrateAdjust},
; rs232cmd.c  573		{ STORECmdTxt,  STORCmdTxt, NULL, 					 NULL, NONE, GenlockGenCalibrateStore},
; rs232cmd.c  574	};
; rs232cmd.c  575	// **************************************************************************
; rs232cmd.c  576	/*	CMD:	SUB1:	SUB2:		PARM:
; rs232cmd.c  577			OUTPut
; rs232cmd.c  578				:BB1-3<?>
; rs232cmd.c  579					:SYSTem			INTernal | PALBurst | NTSCburst |F10MHZ
; rs232cmd.c  580					:DELay			<Field>,<Line>,<Time>
; rs232cmd.c  581					:SCHPhase		<-179to 180>
; rs232cmd.c  582	
; rs232cmd.c  583				:TSGenerator<?>
; rs232cmd.c  584					:PATTern 	  <pattern name>
; rs232cmd.c  585					:SYSTem			PAL|NTSC
; rs232cmd.c  586					:DELay			<Field>,<Line>,<Time>
; rs232cmd.c  587					:SCHPhase		<-179to 180>
; rs232cmd.c  588					:EMBaudio<?>
; rs232cmd.c  589						[:SIGNal]	OFF | SILence | F1KHZ
; rs232cmd.c  590						:LEVel
; rs232cmd.c  591	
; rs232cmd.c  592				:AUDio
; rs232cmd.c  593					:OUTPut
; rs232cmd.c  594					:ANALog<?>
; rs232cmd.c  595						:SIGNal
; rs232cmd.c  596						:LEVel
; rs232cmd.c  597						:CLICk
; rs232cmd.c  598					:AESebu<?>
; rs232cmd.c  599						:SYSTem
; rs232cmd.c  600						:SIGNal
; rs232cmd.c  601						:LEVel
; rs232cmd.c  602						:TIMing
; rs232cmd.c  603						:WORDclock
; rs232cmd.c  604						:CLICkperiod
; rs232cmd.c  605	*/
; rs232cmd.c  606	struct CMD_STRUCT code Output[3] = {
	DD	_GenlockGenCalibrateStore
	SYMB	IDEN, "Output", _Output, #509, 129, 0
	SYMB	ALAB, _Output, #509
	PUBLIC	_Output
	ALIGN	1
_Output:
	DD	_BBCmdTxt,_BBCmdTxt
	DD	_Output+24
	DD	_BBGenLevel1,_BBGenSuffix,_BBGen,_TSGENERATORCmdTxt
	DD	_TSGCmdTxt
	DD	_Output+48
	DD	_TSGenLevel1
	DD	000000000H
	DD	_TSGen,_AUDIOCmdTxt,_AUDCmdTxt
	DD	000000000H
	DD	_AudioGenLevel1
	DD	000000000H
; rs232cmd.c  607		{ BBCmdTxt, 			BBCmdTxt,  &Output[1], &BBGenLevel1[0],	 BBGenSuffix, BBGen},
; rs232cmd.c  608		{ TSGENERATORCmdTxt, TSGCmdTxt, &Output[2], &TSGenLevel1[0], 	 NONE,		  TSGen},
; rs232cmd.c  609		{ AUDIOCmdTxt, 		AUDCmdTxt, NULL,		  &AudioGenLevel1[0], NONE,		  AudioGenOutput},
; rs232cmd.c  610	};
; rs232cmd.c  611	
; rs232cmd.c  612	struct CMD_STRUCT code BBGenLevel1[3] = {
	DD	_AudioGenOutput
	SYMB	IDEN, "BBGenLevel1", _BBGenLevel1, #509, 129, 0
	SYMB	ALAB, _BBGenLevel1, #509
	PUBLIC	_BBGenLevel1
	ALIGN	1
_BBGenLevel1:
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_BBGenLevel1+24
	DD	000000000H,000000000H
	DD	_BBGenSystem,_DELAYCmdTxt,_DELCmdTxt
	DD	_BBGenLevel1+48
	DD	000000000H,000000000H
	DD	_BBGenDelay,_SCHPHASECmdTxt,_SCHPCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  613		{ SYSTEMCmdTxt, 	SYSTCmdTxt, &BBGenLevel1[1], NULL, NONE, BBGenSystem},
; rs232cmd.c  614		{ DELAYCmdTxt,	   DELCmdTxt,  &BBGenLevel1[2], NULL, NONE, BBGenDelay},
; rs232cmd.c  615		{ SCHPHASECmdTxt, SCHPCmdTxt, NULL, 			  NULL, NONE, BBGenScHPhase},
; rs232cmd.c  616	};
; rs232cmd.c  617	
; rs232cmd.c  618	struct CMD_STRUCT code TSGenLevel1[5] = {
	DD	_BBGenScHPhase
	SYMB	TYPE, 513, 'Z', #492, 4
	SYMB	IDEN, "TSGenLevel1", _TSGenLevel1, #513, 129, 0
	SYMB	ALAB, _TSGenLevel1, #513
	PUBLIC	_TSGenLevel1
	ALIGN	1
_TSGenLevel1:
	DD	_PATTERNCmdTxt,_PATTCmdTxt
	DD	_TSGenLevel1+24
	DD	000000000H,000000000H
	DD	_TSGenPattern,_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_TSGenLevel1+48
	DD	000000000H,000000000H
	DD	_TSGenSystem,_DELAYCmdTxt,_DELCmdTxt
	DD	_TSGenLevel1+72
	DD	000000000H,000000000H
	DD	_TSGenDelay,_SCHPHASECmdTxt,_SCHPCmdTxt
	DD	_TSGenLevel1+96
	DD	000000000H,000000000H
	DD	_TSGenScHPhase,_EMBAUDIOCmdTxt,_EMBCmdTxt
	DD	000000000H
	DD	_TSGenLevel1_1
	DD	000000000H
; rs232cmd.c  619		{ PATTERNCmdTxt, 	PATTCmdTxt, &TSGenLevel1[1], NULL, 					NONE, TSGenPattern},
; rs232cmd.c  620		{ SYSTEMCmdTxt, 	SYSTCmdTxt, &TSGenLevel1[2], NULL, 					NONE, TSGenSystem},
; rs232cmd.c  621		{ DELAYCmdTxt,	   DELCmdTxt,  &TSGenLevel1[3], NULL, 					NONE, TSGenDelay},
; rs232cmd.c  622		{ SCHPHASECmdTxt, SCHPCmdTxt, &TSGenLevel1[4], NULL, 					NONE, TSGenScHPhase},
; rs232cmd.c  623		{ EMBAUDIOCmdTxt, EMBCmdTxt, 	NULL, 			  &TSGenLevel1_1[0], NONE, TSGenEmbAudioSignal},
; rs232cmd.c  624	};
; rs232cmd.c  625	
; rs232cmd.c  626	struct CMD_STRUCT code TSGenLevel1_1[2] = {
	DD	_TSGenEmbAudioSignal
	SYMB	TYPE, 515, 'Z', #492, 1
	SYMB	IDEN, "TSGenLevel1_1", _TSGenLevel1_1, #515, 129, 0
	SYMB	ALAB, _TSGenLevel1_1, #515
	PUBLIC	_TSGenLevel1_1
	ALIGN	1
_TSGenLevel1_1:
	DD	_SIGNALCmdTxt,_SIGNCmdTxt
	DD	_TSGenLevel1_1+24
	DD	000000000H,000000000H
	DD	_TSGenEmbAudioSignal,_LEVELCmdTxt,_LEVCmdTxt
; rs232cmd.c  627		{ SIGNALCmdTxt, SIGNCmdTxt, &TSGenLevel1_1[1], NULL, NONE, TSGenEmbAudioSignal},
; rs232cmd.c  628		{ LEVELCmdTxt,  LEVCmdTxt,  NULL,				  NULL, NONE, NONE},
; rs232cmd.c  629	};
; rs232cmd.c  630	
; rs232cmd.c  631	struct CMD_STRUCT code AudioGenLevel1[3] = {
	DD	000000000H,000000000H,000000000H,000000000H
	SYMB	IDEN, "AudioGenLevel1", _AudioGenLevel1, #509, 129, 0
	SYMB	ALAB, _AudioGenLevel1, #509
	PUBLIC	_AudioGenLevel1
	ALIGN	1
_AudioGenLevel1:
	DD	_OUTPUTCmdTxt,_OUTPCmdTxt
	DD	_AudioGenLevel1+24
	DD	000000000H,000000000H
	DD	_AudioGenOutput,_ANALOGCmdTxt,_ANALCmdTxt
	DD	_AudioGenLevel1+48
	DD	_AudioGenLevel1_1
	DD	000000000H
	DD	_AudioGenAnalog,_AESEBUCmdTxt,_AESCmdTxt
	DD	000000000H
	DD	_AudioGenLevel1_2
	DD	000000000H
; rs232cmd.c  632		{ OUTPUTCmdTxt, OUTPCmdTxt, &AudioGenLevel1[1], NULL, 					 NONE, AudioGenOutput},
; rs232cmd.c  633		{ ANALOGCmdTxt, ANALCmdTxt, &AudioGenLevel1[2], &AudioGenLevel1_1[0], NONE, AudioGenAnalog},
; rs232cmd.c  634		{ AESEBUCmdTxt, AESCmdTxt,  NULL, 				   &AudioGenLevel1_2[0], NONE, AudioGenAESEBU},
; rs232cmd.c  635	};
; rs232cmd.c  636	
; rs232cmd.c  637	struct CMD_STRUCT code AudioGenLevel1_1[3] = {
	DD	_AudioGenAESEBU
	SYMB	IDEN, "AudioGenLevel1_1", _AudioGenLevel1_1, #509, 129, 0
	SYMB	ALAB, _AudioGenLevel1_1, #509
	PUBLIC	_AudioGenLevel1_1
	ALIGN	1
_AudioGenLevel1_1:
	DD	_SIGNALCmdTxt,_SIGNCmdTxt
	DD	_AudioGenLevel1_1+24
	DD	000000000H,000000000H
	DD	_AudioGenAnalogSignal,_LEVELCmdTxt,_LEVCmdTxt
	DD	_AudioGenLevel1_1+48
	DD	000000000H,000000000H
	DD	_AudioGenAnalogLevel,_CLICKCmdTxt,_CLICCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  638		{ SIGNALCmdTxt, SIGNCmdTxt, &AudioGenLevel1_1[1], NULL, NONE, AudioGenAnalogSignal},
; rs232cmd.c  639		{ LEVELCmdTxt,  LEVCmdTxt,  &AudioGenLevel1_1[2], NULL, NONE, AudioGenAnalogLevel},
; rs232cmd.c  640		{ CLICKCmdTxt,  CLICCmdTxt, NULL, 					  NULL, NONE, AudioGenAnalogClick},
; rs232cmd.c  641	};
; rs232cmd.c  642	
; rs232cmd.c  643	struct CMD_STRUCT code AudioGenLevel1_2[6] = {
	DD	_AudioGenAnalogClick
	SYMB	IDEN, "AudioGenLevel1_2", _AudioGenLevel1_2, #505, 129, 0
	SYMB	ALAB, _AudioGenLevel1_2, #505
	PUBLIC	_AudioGenLevel1_2
	ALIGN	1
_AudioGenLevel1_2:
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_AudioGenLevel1_2+24
	DD	000000000H,000000000H
	DD	_AudioGenAESEBUSystem,_SIGNALCmdTxt,_SIGNCmdTxt
	DD	_AudioGenLevel1_2+48
	DD	000000000H,000000000H
	DD	_AudioGenAESEBUSignal,_LEVELCmdTxt,_LEVCmdTxt
	DD	_AudioGenLevel1_2+72
	DD	000000000H,000000000H
	DD	_AudioGenAESEBULevel,_TIMINGCmdTxt,_TIMCmdTxt
	DD	_AudioGenLevel1_2+96
	DD	000000000H,000000000H
	DD	_AudioGenAESEBUTiming,_WORDCLOCKCmdTxt,_WORDCmdTxt
	DD	_AudioGenLevel1_2+120
	DD	000000000H,000000000H
	DD	_AudioGenAESEBUWordClock,_CLICKCmdTxt,_CLICCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  644		{ SYSTEMCmdTxt, 	 SYSTCmdTxt, &AudioGenLevel1_2[1], NULL, NONE, AudioGenAESEBUSystem},
; rs232cmd.c  645		{ SIGNALCmdTxt, 	 SIGNCmdTxt, &AudioGenLevel1_2[2], NULL, NONE, AudioGenAESEBUSignal},
; rs232cmd.c  646		{ LEVELCmdTxt, 	 LEVCmdTxt,  &AudioGenLevel1_2[3], NULL, NONE, AudioGenAESEBULevel},
; rs232cmd.c  647		{ TIMINGCmdTxt,	 TIMCmdTxt,  &AudioGenLevel1_2[4], NULL, NONE, AudioGenAESEBUTiming},
; rs232cmd.c  648		{ WORDCLOCKCmdTxt, WORDCmdTxt, &AudioGenLevel1_2[5], NULL, NONE, AudioGenAESEBUWordClock},
; rs232cmd.c  649		{ CLICKCmdTxt, 	 CLICCmdTxt, NULL, 					  NULL, NONE, AudioGenAESEBUClick},
; rs232cmd.c  650	};
; rs232cmd.c  651	
; rs232cmd.c  652	// **************************************************************************
; rs232cmd.c  653	/*	CMD:	SUB1:	SUB2:		PARM:
; rs232cmd.c  654			FACTORY
; rs232cmd.c  655				:PASSword
; rs232cmd.c  656	
; rs232cmd.c  657				:RESet
; rs232cmd.c  658	
; rs232cmd.c  659				:V24Circuit
; rs232cmd.c  660					:COMMand
; rs232cmd.c  661					:TRANsparent
; rs232cmd.c  662	
; rs232cmd.c  663				:CHECksum
; rs232cmd.c  664					:CODE
; rs232cmd.c  665					:PLD
; rs232cmd.c  666					:EMBaudio
; rs232cmd.c  667					:PATTern
; rs232cmd.c  668	
; rs232cmd.c  669				:MAINboard
; rs232cmd.c  670					:VERSion
; rs232cmd.c  671					:IDN
; rs232cmd.c  672						:COMPany
; rs232cmd.c  673						:TYPE
; rs232cmd.c  674						:KUNumber
; rs232cmd.c  675						:SWRevision
; rs232cmd.c  676					:SYSTem				PAL|NTSC
; rs232cmd.c  677					:FMSDate
; rs232cmd.c  678						:PRODuction	<year>,<month>,<day>
; rs232cmd.c  679						:UPDate			<year>,<month>,<day>
; rs232cmd.c  680	
; rs232cmd.c  681				:GENLock
; rs232cmd.c  682					[:DATE]				<year>,<month>,<day>
; rs232cmd.c  683					:VERSion
; rs232cmd.c  684					:FREFerence
; rs232cmd.c  685						[:DATE]			<year>,<month>,<day>
; rs232cmd.c  686						:DAC
; rs232cmd.c  687					:UREFerence
; rs232cmd.c  688						[:DATE]	 		<year>,<month>,<day>
; rs232cmd.c  689						:DAC
; rs232cmd.c  690					:HPHZero			<pal>,<ntsc>
; rs232cmd.c  691					:PHASe				<pal>,<ntsc>
; rs232cmd.c  692	
; rs232cmd.c  693				:BB 1
; rs232cmd.c  694					[:DATE]				<year>,<month>,<day>
; rs232cmd.c  695					:VERSion
; rs232cmd.c  696					:SIGNAL				NORMAL|F45MHZ
; rs232cmd.c  697					:PHASe				<pal>,<ntsc>
; rs232cmd.c  698					:SCHPhase			<pal>,<ntsc>
; rs232cmd.c  699					:DAC					<gain>,<offset>,<level>
; rs232cmd.c  700	
; rs232cmd.c  701				:BB 2-3
; rs232cmd.c  702					[:DATE]				<year>,<month>,<day>
; rs232cmd.c  703					:PHASe				<pal>,<ntsc>
; rs232cmd.c  704					:SCHPhase			<pal>,<ntsc>
; rs232cmd.c  705					:DAC					<gain>,<offset>,<level>
; rs232cmd.c  706	
; rs232cmd.c  707				:TSGenerator
; rs232cmd.c  708					[:DATE]				<year>,<month>,<day>
; rs232cmd.c  709					:AGAin				<pal>,<ntsc>
; rs232cmd.c  710					:CGAin				<pal>,<ntsc>
; rs232cmd.c  711					:PHASE				<pal>,<ntsc>
; rs232cmd.c  712					:SCHPhase			<pal>,<ntsc>
; rs232cmd.c  713	
; rs232cmd.c  714				:AUDio
; rs232cmd.c  715					[:STATus]
; rs232cmd.c  716					:DATE					<year>,<month>,<day>
; rs232cmd.c  717					:ALEVel				<left>,<right>
; rs232cmd.c  718	
; rs232cmd.c  719				:PLD
; rs232cmd.c  720					:VERSion			<video>,<audio>
; rs232cmd.c  721	
; rs232cmd.c  722				:TCXO
; rs232cmd.c  723					[:STATus]
; rs232cmd.c  724	
; rs232cmd.c  725				:MMCH						<subaddress>[,<data>]
; rs232cmd.c  726	
; rs232cmd.c  727	*/									
; rs232cmd.c  728	
; rs232cmd.c  729	struct CMD_STRUCT code Factory[12] = {
	DD	_AudioGenAESEBUClick
	SYMB	IDEN, "Factory", _Factory, #501, 129, 0
	SYMB	ALAB, _Factory, #501
	PUBLIC	_Factory
	ALIGN	1
_Factory:
	DD	_PASSWORDCmdTxt,_PASSCmdTxt
	DD	_Factory+24
	DD	000000000H,000000000H
	DD	_FactPassword,_RESETCmdTxt,_RESCmdTxt
	DD	_Factory+48
	DD	000000000H,000000000H
	DD	_FactReset,_V24CIRCUITCmdTxt,_V24CCmdTxt
	DD	_Factory+72
	DD	_FactoryLevel1
	DD	000000000H,000000000H
	DD	_CHECKSUMCmdTxt,_CHECCmdTxt
	DD	_Factory+96
	DD	_FactoryLevel9
	DD	000000000H,000000000H
	DD	_MAINBOARDCmdTxt,_MAINCmdTxt
	DD	_Factory+120
	DD	_FactoryLevel2
	DD	000000000H,000000000H
	DD	_GENLOCKCmdTxt,_GENLCmdTxt
	DD	_Factory+144
	DD	_FactoryLevel3
	DD	000000000H
	DD	_FactGenlockGenDate,_BBCmdTxt,_BBCmdTxt
	DD	_Factory+168
	DD	_FactoryLevel4,_BBGenSuffix,_FactBBGenDate
	DD	_TSGENERATORCmdTxt,_TSGCmdTxt
	DD	_Factory+192
	DD	_FactoryLevel5
	DD	000000000H
	DD	_FactTSGenDate,_AUDIOCmdTxt,_AUDCmdTxt
	DD	_Factory+216
	DD	_FactoryLevel6
	DD	000000000H
	DD	_FactAudioGenStatus,_PLDCmdTxt,_PLDCmdTxt
	DD	_Factory+240
	DD	_FactoryLevel7
	DD	000000000H
	DD	_FactPLDVersion,_TCXOCmdTxt,_TCXOCmdTxt
	DD	_Factory+264
	DD	_FactoryLevel8
	DD	000000000H
	DD	_FactTCXOStatus,_MMCHIPCmdTxt,_MMCHCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  730		{ PASSWORDCmdTxt, 	PASSCmdTxt, &Factory[1],  NULL,					NONE, 		 FactPassword},
; rs232cmd.c  731		{ RESETCmdTxt, 		RESCmdTxt,  &Factory[2],  NULL,					NONE, 		 FactReset},
; rs232cmd.c  732		{ V24CIRCUITCmdTxt, 	V24CCmdTxt, &Factory[3],  &FactoryLevel1[0], NONE, 		 NONE},
; rs232cmd.c  733		{ CHECKSUMCmdTxt, 	CHECCmdTxt, &Factory[4],  &FactoryLevel9[0], NONE,		  	 NONE},
; rs232cmd.c  734		{ MAINBOARDCmdTxt, 	MAINCmdTxt, &Factory[5],  &FactoryLevel2[0], NONE,		  	 NONE},
; rs232cmd.c  735		{ GENLOCKCmdTxt, 		GENLCmdTxt,	&Factory[6],  &FactoryLevel3[0], NONE,		  	 FactGenlockGenDate},
; rs232cmd.c  736		{ BBCmdTxt, 			BBCmdTxt, 	&Factory[7],  &FactoryLevel4[0], BBGenSuffix, FactBBGenDate},
; rs232cmd.c  737		{ TSGENERATORCmdTxt, TSGCmdTxt, 	&Factory[8],  &FactoryLevel5[0], NONE,		  	 FactTSGenDate},
; rs232cmd.c  738		{ AUDIOCmdTxt, 		AUDCmdTxt, 	&Factory[9],  &FactoryLevel6[0], NONE,		  	 FactAudioGenStatus},
; rs232cmd.c  739		{ PLDCmdTxt, 			PLDCmdTxt, 	&Factory[10], &FactoryLevel7[0], NONE,			 FactPLDVersion},
; rs232cmd.c  740		{ TCXOCmdTxt, 			TCXOCmdTxt,	&Factory[11], &FactoryLevel8[0], NONE,			 FactTCXOStatus},
; rs232cmd.c  741		{ MMCHIPCmdTxt, 		MMCHCmdTxt, NULL,			  NULL,					NONE,			 FactMultiMediaChip},
; rs232cmd.c  742	};
; rs232cmd.c  743	
; rs232cmd.c  744	struct CMD_STRUCT code FactoryLevel1[2] = {
	DD	_FactMultiMediaChip
	SYMB	IDEN, "FactoryLevel1", _FactoryLevel1, #515, 129, 0
	SYMB	ALAB, _FactoryLevel1, #515
	PUBLIC	_FactoryLevel1
	ALIGN	1
_FactoryLevel1:
	DD	_COMMANDCmdTxt,_COMMCmdTxt
	DD	_FactoryLevel1+24
	DD	000000000H,000000000H
	DD	_FactV24Command,_TRANSPARENTCmdTxt,_TRANCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  745		{ COMMANDCmdTxt, 		 COMMCmdTxt, &FactoryLevel1[1], NULL, NONE, FactV24Command},
; rs232cmd.c  746		{ TRANSPARENTCmdTxt, TRANCmdTxt, NULL,						  NULL, NONE, FactV24Transparent},
; rs232cmd.c  747	};
; rs232cmd.c  748	
; rs232cmd.c  749	struct CMD_STRUCT code FactoryLevel9[5] = {
	DD	_FactV24Transparent
	SYMB	IDEN, "FactoryLevel9", _FactoryLevel9, #513, 129, 0
	SYMB	ALAB, _FactoryLevel9, #513
	PUBLIC	_FactoryLevel9
	ALIGN	1
_FactoryLevel9:
	DD	_CODECmdTxt,_CODECmdTxt
	DD	_FactoryLevel9+24
	DD	000000000H,000000000H
	DD	_FactChecksumCode,_PLDCmdTxt,_PLDCmdTxt
	DD	_FactoryLevel9+48
	DD	000000000H,000000000H
	DD	_FactChecksumPLD,_EMBAUDIOCmdTxt,_EMBCmdTxt
	DD	_FactoryLevel9+72
	DD	000000000H,000000000H
	DD	_FactChecksumEmbAudio,_PATTERNCmdTxt,_PATTCmdTxt
	DD	_FactoryLevel9+96
	DD	000000000H,000000000H
	DD	_FactChecksumPattern,_RANGECmdTxt,_RANGCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  750		{ CODECmdTxt, 		CODECmdTxt, &FactoryLevel9[1], NULL, NONE, FactChecksumCode},
; rs232cmd.c  751		{ PLDCmdTxt,  	 	PLDCmdTxt,  &FactoryLevel9[2], NULL, NONE, FactChecksumPLD},
; rs232cmd.c  752		{ EMBAUDIOCmdTxt, EMBCmdTxt,  &FactoryLevel9[3], NULL, NONE, FactChecksumEmbAudio},
; rs232cmd.c  753		{ PATTERNCmdTxt, 	PATTCmdTxt, &FactoryLevel9[4], NULL, NONE, FactChecksumPattern},
; rs232cmd.c  754		{ RANGECmdTxt, 	RANGCmdTxt, NULL, 				 NULL, NONE, FactChecksumRange},
; rs232cmd.c  755	};
; rs232cmd.c  756	
; rs232cmd.c  757	struct CMD_STRUCT code FactoryLevel2[4] = {
	DD	_FactChecksumRange
	SYMB	TYPE, 517, 'Z', #492, 3
	SYMB	IDEN, "FactoryLevel2", _FactoryLevel2, #517, 129, 0
	SYMB	ALAB, _FactoryLevel2, #517
	PUBLIC	_FactoryLevel2
	ALIGN	1
_FactoryLevel2:
	DD	_VERSIONCmdTxt,_VERSCmdTxt
	DD	_FactoryLevel2+24
	DD	000000000H,000000000H
	DD	_FactMainVersion,_IDNCmdTxt,_IDNCmdTxt
	DD	_FactoryLevel2+48
	DD	_FactoryLevel2_2
	DD	000000000H,000000000H
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_FactoryLevel2+72
	DD	000000000H,000000000H
	DD	_FactMainSystem,_FMSDATECmdTxt,_FMSDCmdTxt
	DD	000000000H
	DD	_FactoryLevel2_1
; rs232cmd.c  758		{ VERSIONCmdTxt, 	VERSCmdTxt, &FactoryLevel2[1], NULL, 					 NONE, FactMainVersion},
; rs232cmd.c  759		{ IDNCmdTxt,  	 	IDNCmdTxt,  &FactoryLevel2[2], &FactoryLevel2_2[0], NONE, NONE},
; rs232cmd.c  760		{ SYSTEMCmdTxt, 	SYSTCmdTxt, &FactoryLevel2[3], NULL, 					 NONE, FactMainSystem},
; rs232cmd.c  761		{ FMSDATECmdTxt, 	FMSDCmdTxt, NULL, 				 &FactoryLevel2_1[0], NONE, NONE},
; rs232cmd.c  762	};
; rs232cmd.c  763	
; rs232cmd.c  764	struct CMD_STRUCT code FactoryLevel2_1[2] = {
	DD	000000000H,000000000H
	SYMB	IDEN, "FactoryLevel2_1", _FactoryLevel2_1, #515, 129, 0
	SYMB	ALAB, _FactoryLevel2_1, #515
	PUBLIC	_FactoryLevel2_1
	ALIGN	1
_FactoryLevel2_1:
	DD	_PRODUCTIONCmdTxt,_PRODCmdTxt
	DD	_FactoryLevel2_1+24
	DD	000000000H,000000000H
	DD	_FactMainFMSDateProd,_UPDATECmdTxt,_UPDCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  765		{ PRODUCTIONCmdTxt, PRODCmdTxt, &FactoryLevel2_1[1], NULL, NONE, FactMainFMSDateProd},
; rs232cmd.c  766		{ UPDATECmdTxt, 	  UPDCmdTxt,  NULL, 					  NULL, NONE, FactMainFMSDateUpd},
; rs232cmd.c  767	};
; rs232cmd.c  768	
; rs232cmd.c  769	struct CMD_STRUCT code FactoryLevel2_2[4] = {
	DD	_FactMainFMSDateUpd
	SYMB	IDEN, "FactoryLevel2_2", _FactoryLevel2_2, #517, 129, 0
	SYMB	ALAB, _FactoryLevel2_2, #517
	PUBLIC	_FactoryLevel2_2
	ALIGN	1
_FactoryLevel2_2:
	DD	_COMPANYCmdTxt,_COMPCmdTxt
	DD	_FactoryLevel2_2+24
	DD	000000000H,000000000H
	DD	_FactMainIDNCompany,_TYPECmdTxt,_TYPECmdTxt
	DD	_FactoryLevel2_2+48
	DD	000000000H,000000000H
	DD	_FactMainIDNType,_KUNUMBERCmdTxt,_KUNCmdTxt
	DD	_FactoryLevel2_2+72
	DD	000000000H,000000000H
	DD	_FactMainIDNKUNumber,_SWREVISIONCmdTxt,_SWRCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  770		{ COMPANYCmdTxt,    COMPCmdTxt, &FactoryLevel2_2[1], NULL, NONE, FactMainIDNCompany},
; rs232cmd.c  771		{ TYPECmdTxt,  	  TYPECmdTxt, &FactoryLevel2_2[2], NULL, NONE, FactMainIDNType},
; rs232cmd.c  772		{ KUNUMBERCmdTxt,   KUNCmdTxt,  &FactoryLevel2_2[3], NULL, NONE, FactMainIDNKUNumber},
; rs232cmd.c  773		{ SWREVISIONCmdTxt, SWRCmdTxt,  NULL, 					  NULL, NONE, FactMainIDNSWRevision},
; rs232cmd.c  774	};
; rs232cmd.c  775	
; rs232cmd.c  776	struct CMD_STRUCT code FactoryLevel3[6] = {
	DD	_FactMainIDNSWRevision
	SYMB	IDEN, "FactoryLevel3", _FactoryLevel3, #505, 129, 0
	SYMB	ALAB, _FactoryLevel3, #505
	PUBLIC	_FactoryLevel3
	ALIGN	1
_FactoryLevel3:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel3+24
	DD	000000000H,000000000H
	DD	_FactGenlockGenDate,_VERSIONCmdTxt,_VERSCmdTxt
	DD	_FactoryLevel3+48
	DD	000000000H,000000000H
	DD	_FactGenlockGenVersion,_FREFERENCECmdTxt,_FREFCmdTxt
	DD	_FactoryLevel3+72
	DD	_FactoryLevel3_1
	DD	000000000H
	DD	_FactGenlockGenFRefDate,_UREFERENCECmdTxt,_UREFCmdTxt
	DD	_FactoryLevel3+96
	DD	_FactoryLevel3_2
	DD	000000000H
	DD	_FactGenlockGenURefDate,_HPHZEROCmdTxt,_HPHZCmdTxt
	DD	_FactoryLevel3+120
	DD	000000000H,000000000H
	DD	_FactGenlockGenHPHZero,_PHASECmdTxt,_PHASCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  777		{ DATECmdTxt,  	  DATECmdTxt, &FactoryLevel3[1], NULL, 					NONE, FactGenlockGenDate},
; rs232cmd.c  778		{ VERSIONCmdTxt,    VERSCmdTxt, &FactoryLevel3[2], NULL, 					NONE, FactGenlockGenVersion},
; rs232cmd.c  779		{ FREFERENCECmdTxt, FREFCmdTxt, &FactoryLevel3[3], &FactoryLevel3_1[0], NONE, FactGenlockGenFRefDate},
; rs232cmd.c  780		{ UREFERENCECmdTxt, UREFCmdTxt, &FactoryLevel3[4], &FactoryLevel3_2[0], NONE, FactGenlockGenURefDate},
; rs232cmd.c  781		{ HPHZEROCmdTxt,    HPHZCmdTxt, &FactoryLevel3[5], NULL,						NONE, FactGenlockGenHPHZero},
; rs232cmd.c  782		{ PHASECmdTxt,  	  PHASCmdTxt, NULL, 					NULL,						NONE, FactGenlockGenPhase},
; rs232cmd.c  783	};
; rs232cmd.c  784	
; rs232cmd.c  785	struct CMD_STRUCT code FactoryLevel3_1[2] = {
	DD	_FactGenlockGenPhase
	SYMB	IDEN, "FactoryLevel3_1", _FactoryLevel3_1, #515, 129, 0
	SYMB	ALAB, _FactoryLevel3_1, #515
	PUBLIC	_FactoryLevel3_1
	ALIGN	1
_FactoryLevel3_1:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel3_1+24
	DD	000000000H,000000000H
	DD	_FactGenlockGenFRefDate,_DACCmdTxt,_DACCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  786		{ DATECmdTxt, DATECmdTxt, &FactoryLevel3_1[1], NULL, NONE, FactGenlockGenFRefDate},
; rs232cmd.c  787		{ DACCmdTxt,  DACCmdTxt,  NULL, 					  NULL, NONE, FactGenlockGenFRefDAC},
; rs232cmd.c  788	};
; rs232cmd.c  789	
; rs232cmd.c  790	struct CMD_STRUCT code FactoryLevel3_2[2] = {
	DD	_FactGenlockGenFRefDAC
	SYMB	IDEN, "FactoryLevel3_2", _FactoryLevel3_2, #515, 129, 0
	SYMB	ALAB, _FactoryLevel3_2, #515
	PUBLIC	_FactoryLevel3_2
	ALIGN	1
_FactoryLevel3_2:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel3_2+24
	DD	000000000H,000000000H
	DD	_FactGenlockGenURefDate,_DACCmdTxt,_DACCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  791		{ DATECmdTxt, DATECmdTxt, &FactoryLevel3_2[1], NULL, NONE, FactGenlockGenURefDate},
; rs232cmd.c  792		{ DACCmdTxt,  DACCmdTxt,  NULL, 					  NULL, NONE, FactGenlockGenURefDAC},
; rs232cmd.c  793	};
; rs232cmd.c  794	
; rs232cmd.c  795	struct CMD_STRUCT code FactoryLevel4[6] = {
	DD	_FactGenlockGenURefDAC
	SYMB	IDEN, "FactoryLevel4", _FactoryLevel4, #505, 129, 0
	SYMB	ALAB, _FactoryLevel4, #505
	PUBLIC	_FactoryLevel4
	ALIGN	1
_FactoryLevel4:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel4+24
	DD	000000000H,000000000H
	DD	_FactBBGenDate,_VERSIONCmdTxt,_VERSCmdTxt
	DD	_FactoryLevel4+48
	DD	000000000H,000000000H
	DD	_FactBBGenVersion,_SIGNALCmdTxt,_SIGNCmdTxt
	DD	_FactoryLevel4+72
	DD	000000000H,000000000H
	DD	_FactBBGenSignal,_PHASECmdTxt,_PHASCmdTxt
	DD	_FactoryLevel4+96
	DD	000000000H,000000000H
	DD	_FactBBGenPhase,_SCHPHASECmdTxt,_SCHPCmdTxt
	DD	_FactoryLevel4+120
	DD	000000000H,000000000H
	DD	_FactBBGenScHPhase,_DACCmdTxt,_DACCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  796		{ DATECmdTxt,  	DATECmdTxt, &FactoryLevel4[1], NULL, NONE, FactBBGenDate},
; rs232cmd.c  797		{ VERSIONCmdTxt, 	VERSCmdTxt, &FactoryLevel4[2], NULL, NONE, FactBBGenVersion},
; rs232cmd.c  798		{ SIGNALCmdTxt, 	SIGNCmdTxt, &FactoryLevel4[3], NULL, NONE, FactBBGenSignal},
; rs232cmd.c  799		{ PHASECmdTxt, 	PHASCmdTxt, &FactoryLevel4[4], NULL, NONE, FactBBGenPhase},
; rs232cmd.c  800		{ SCHPHASECmdTxt,	SCHPCmdTxt, &FactoryLevel4[5], NULL, NONE, FactBBGenScHPhase},
; rs232cmd.c  801		{ DACCmdTxt,  		DACCmdTxt,  NULL, 				 NULL, NONE, FactBBGenDAC},
; rs232cmd.c  802	};
; rs232cmd.c  803	
; rs232cmd.c  804	struct CMD_STRUCT code FactoryLevel5[5] = {
	DD	_FactBBGenDAC
	SYMB	IDEN, "FactoryLevel5", _FactoryLevel5, #513, 129, 0
	SYMB	ALAB, _FactoryLevel5, #513
	PUBLIC	_FactoryLevel5
	ALIGN	1
_FactoryLevel5:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel5+24
	DD	000000000H,000000000H
	DD	_FactTSGenDate,_AGAINCmdTxt,_AGACmdTxt
	DD	_FactoryLevel5+48
	DD	000000000H,000000000H
	DD	_FactTSGenAGain,_CGAINCmdTxt,_CGACmdTxt
	DD	_FactoryLevel5+72
	DD	000000000H,000000000H
	DD	_FactTSGenCGain,_PHASECmdTxt,_PHASCmdTxt
	DD	_FactoryLevel5+96
	DD	000000000H,000000000H
	DD	_FactTSGenPhase,_SCHPHASECmdTxt,_SCHPCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  805		{ DATECmdTxt,  	DATECmdTxt, &FactoryLevel5[1], NULL, NONE, FactTSGenDate},
; rs232cmd.c  806		{ AGAINCmdTxt, 	AGACmdTxt, 	&FactoryLevel5[2], NULL, NONE, FactTSGenAGain},
; rs232cmd.c  807		{ CGAINCmdTxt, 	CGACmdTxt, 	&FactoryLevel5[3], NULL, NONE, FactTSGenCGain},
; rs232cmd.c  808		{ PHASECmdTxt, 	PHASCmdTxt, &FactoryLevel5[4], NULL, NONE, FactTSGenPhase},
; rs232cmd.c  809		{ SCHPHASECmdTxt,	SCHPCmdTxt, NULL, 				 NULL, NONE, FactTSGenScHPhase},
; rs232cmd.c  810	};
; rs232cmd.c  811	
; rs232cmd.c  812	struct CMD_STRUCT code FactoryLevel6[3] = {
	DD	_FactTSGenScHPhase
	SYMB	IDEN, "FactoryLevel6", _FactoryLevel6, #509, 129, 0
	SYMB	ALAB, _FactoryLevel6, #509
	PUBLIC	_FactoryLevel6
	ALIGN	1
_FactoryLevel6:
	DD	_STATUSCmdTxt,_STATCmdTxt
	DD	_FactoryLevel6+24
	DD	000000000H,000000000H
	DD	_FactAudioGenStatus,_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel6+48
	DD	000000000H,000000000H
	DD	_FactAudioGenDate,_ALEVELCmdTxt,_ALEVCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  813		{ STATUSCmdTxt, STATCmdTxt, &FactoryLevel6[1], NULL, NONE, FactAudioGenStatus},
; rs232cmd.c  814		{ DATECmdTxt,   DATECmdTxt, &FactoryLevel6[2], NULL, NONE, FactAudioGenDate},
; rs232cmd.c  815		{ ALEVELCmdTxt, ALEVCmdTxt, NULL, 				  NULL, NONE, FactAudioGenLevel},
; rs232cmd.c  816	};
; rs232cmd.c  817	
; rs232cmd.c  818	struct CMD_STRUCT code FactoryLevel7[1] = {
	DD	_FactAudioGenLevel
	SYMB	IDEN, "FactoryLevel7", _FactoryLevel7, #511, 129, 0
	SYMB	ALAB, _FactoryLevel7, #511
	PUBLIC	_FactoryLevel7
	ALIGN	1
_FactoryLevel7:
	DD	_VERSIONCmdTxt,_VERSCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  819		{ VERSIONCmdTxt, 	VERSCmdTxt, NULL, NULL, NONE, FactPLDVersion},
; rs232cmd.c  820	};
; rs232cmd.c  821	
; rs232cmd.c  822	struct CMD_STRUCT code FactoryLevel8[1] = {
	DD	_FactPLDVersion
	SYMB	IDEN, "FactoryLevel8", _FactoryLevel8, #511, 129, 0
	SYMB	ALAB, _FactoryLevel8, #511
	PUBLIC	_FactoryLevel8
	ALIGN	1
_FactoryLevel8:
	DD	_STATUSCmdTxt,_STATCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  823		{ STATUSCmdTxt, STATCmdTxt, NULL, NULL, NONE, FactTCXOStatus},
; rs232cmd.c  824	};
; rs232cmd.c  825	
; rs232cmd.c  826	//**************************************************************************
; rs232cmd.c  827	// The following parameter structures are based on the enumerated types
; rs232cmd.c  828	//  defined in TABLES.H, ie. DO NOT change the order of these names. If
; rs232cmd.c  829	//  the order is changed in TABLES.H it must also be changed here.
; rs232cmd.c  830	
; rs232cmd.c  831	struct PAR_STRUCT code SAVEPar[1] = {
	DD	_FactTCXOStatus
	SYMB	TYPE, 520, 'n', #519, 129
	SYMB	TYPE, 521, 'P', #520
	SYMB	TYPE, 519, "PAR_STRUCT", 'S', 12,\
		 "LongName", #491, 0,\
		 "ShortName", #491, 4,\
		 "SameLevel", #521, 8
	SYMB	TYPE, 522, 'Z', #519, 0
	SYMB	IDEN, "SAVEPar", _SAVEPar, #522, 129, 0
	SYMB	ALAB, _SAVEPar, #522
	PUBLIC	_SAVEPar
	ALIGN	1
_SAVEPar:
	DD	_SAVEParTxt,_SAVEParTxt
; rs232cmd.c  832		{ SAVEParTxt, SAVEParTxt, NULL}
; rs232cmd.c  833	};
; rs232cmd.c  834	
; rs232cmd.c  835	struct PAR_STRUCT code GenlockSystemPar[4] = {
	DD	000000000H
	SYMB	TYPE, 524, 'Z', #519, 3
	SYMB	IDEN, "GenlockSystemPar", _GenlockSystemPar, #524, 129, 0
	SYMB	ALAB, _GenlockSystemPar, #524
	PUBLIC	_GenlockSystemPar
	ALIGN	1
_GenlockSystemPar:
	DD	_INTERNALParTxt,_INTParTxt
	DD	_GenlockSystemPar+12
	DD	_PALBURSTParTxt,_PALBParTxt
	DD	_GenlockSystemPar+24
	DD	_NTSCBURSTParTxt,_NTSCParTxt
	DD	_GenlockSystemPar+36
	DD	_F10MHzParTxt,_F10MHzParTxt
; rs232cmd.c  836		{ INTERNALParTxt,  INTParTxt, 	&GenlockSystemPar[1]},
; rs232cmd.c  837		{ PALBURSTParTxt,  PALBParTxt, 	&GenlockSystemPar[2]},
; rs232cmd.c  838		{ NTSCBURSTParTxt, NTSCParTxt, 	&GenlockSystemPar[3]},
; rs232cmd.c  839		{ F10MHzParTxt, 	 F10MHzParTxt, NULL},
; rs232cmd.c  840	};
; rs232cmd.c  841	
; rs232cmd.c  842	struct PAR_STRUCT code SystemPar[4] = {
	DD	000000000H
	SYMB	IDEN, "SystemPar", _SystemPar, #524, 129, 0
	SYMB	ALAB, _SystemPar, #524
	PUBLIC	_SystemPar
	ALIGN	1
_SystemPar:
	DD	_PALParTxt,_PALParTxt
	DD	_SystemPar+12
	DD	_PAL_IDParTxt,_PAL_IDParTxt
	DD	_SystemPar+24
	DD	_NTSCParTxt,_NTSCParTxt
	DD	_SystemPar+36
	DD	_JNTSCParTxt,_JNTSCParTxt
; rs232cmd.c  843		{ PALParTxt, 	 PALParTxt, &SystemPar[1]},
; rs232cmd.c  844		{ PAL_IDParTxt, PAL_IDParTxt, &SystemPar[2]},
; rs232cmd.c  845		{ NTSCParTxt, 	 NTSCParTxt, &SystemPar[3]},
; rs232cmd.c  846		{ JNTSCParTxt,  JNTSCParTxt, 	 NULL},
; rs232cmd.c  847	};
; rs232cmd.c  848	
; rs232cmd.c  849	struct PAR_STRUCT code CBPatternPar[23] = {
	DD	000000000H
	SYMB	TYPE, 526, 'Z', #519, 22
	SYMB	IDEN, "CBPatternPar", _CBPatternPar, #526, 129, 0
	SYMB	ALAB, _CBPatternPar, #526
	PUBLIC	_CBPatternPar
	ALIGN	1
_CBPatternPar:
	DD	_CBSMPTEParTxt,_CBSMParTxt
	DD	_CBPatternPar+12
	DD	_CBEBUParTxt,_CBEBParTxt
	DD	_CBPatternPar+24
	DD	_CBFCCParTxt,_CBFCParTxt
	DD	_CBPatternPar+36
	DD	_CBEBU8ParTxt,_CBEB8ParTxt
	DD	_CBPatternPar+48
	DD	_CB100ParTxt,_CB100ParTxt
	DD	_CBPatternPar+60
	DD	_CBGREY75ParTxt,_CBGR75ParTxt
	DD	_CBPatternPar+72
	DD	_CBRED75ParTxt,_CBR75ParTxt
	DD	_CBPatternPar+84
	DD	_RED75ParTxt,_RED75ParTxt
	DD	_CBPatternPar+96
	DD	_MULTIBURSTParTxt,_MULTParTxt
	DD	_CBPatternPar+108
	DD	_CCIR18ParTxt,_CCIR18ParTxt
	DD	_CBPatternPar+120
	DD	_WIN10ParTxt,_WIN10ParTxt
	DD	_CBPatternPar+132
	DD	_WIN15ParTxt,_WIN15ParTxt
	DD	_CBPatternPar+144
	DD	_WIN20ParTxt,_WIN20ParTxt
	DD	_CBPatternPar+156
	DD	_WIN100ParTxt,_WIN100ParTxt
	DD	_CBPatternPar+168
	DD	_BLWH15ParTxt,_BLWH15ParTxt
	DD	_CBPatternPar+180
	DD	_WHITE100ParTxt,_WHIT100ParTxt
	DD	_CBPatternPar+192
	DD	_BLACKParTxt,_BLACParTxt
	DD	_CBPatternPar+204
	DD	_SDICHECKParTxt,_SDICParTxt
	DD	_CBPatternPar+216
	DD	_DGREYParTxt,_DGRParTxt
	DD	_CBPatternPar+228
	DD	_STAIRCASE5ParTxt,_STA5ParTxt
	DD	_CBPatternPar+240
	DD	_STAIRCASE10ParTxt,_STA10ParTxt
	DD	_CBPatternPar+252
	DD	_CROSSHATCHParTxt,_CROSParTxt
	DD	_CBPatternPar+264
	DD	_PLUGEParTxt,_PLUGParTxt
; rs232cmd.c  850		{ CBSMPTEParTxt, 		CBSMParTxt, 	&CBPatternPar[1]},
; rs232cmd.c  851		{ CBEBUParTxt, 	 	CBEBParTxt, 	&CBPatternPar[2]},
; rs232cmd.c  852		{ CBFCCParTxt, 	 	CBFCParTxt, 	&CBPatternPar[3]},
; rs232cmd.c  853		{ CBEBU8ParTxt,  		CBEB8ParTxt, 	&CBPatternPar[4]},
; rs232cmd.c  854		{ CB100ParTxt, 	 	CB100ParTxt, 	&CBPatternPar[5]},
; rs232cmd.c  855		{ CBGREY75ParTxt, 	CBGR75ParTxt, 	&CBPatternPar[6]},
; rs232cmd.c  856		{ CBRED75ParTxt, 		CBR75ParTxt, 	&CBPatternPar[7]},
; rs232cmd.c  857		{ RED75ParTxt, 		RED75ParTxt, 	&CBPatternPar[8]},
; rs232cmd.c  858	
; rs232cmd.c  859		{ MULTIBURSTParTxt,	MULTParTxt, 	&CBPatternPar[9]},
; rs232cmd.c  860		{ CCIR18ParTxt,	 	CCIR18ParTxt,	&CBPatternPar[10]},
; rs232cmd.c  861																				
; rs232cmd.c  862		{ WIN10ParTxt, 		WIN10ParTxt, 	&CBPatternPar[11]},
; rs232cmd.c  863		{ WIN15ParTxt, 		WIN15ParTxt,	&CBPatternPar[12]},
; rs232cmd.c  864		{ WIN20ParTxt, 		WIN20ParTxt, 	&CBPatternPar[13]},
; rs232cmd.c  865		{ WIN100ParTxt, 		WIN100ParTxt, 	&CBPatternPar[14]},
; rs232cmd.c  866		{ BLWH15ParTxt, 		BLWH15ParTxt, 	&CBPatternPar[15]},
; rs232cmd.c  867		{ WHITE100ParTxt, 	WHIT100ParTxt, &CBPatternPar[16]},
; rs232cmd.c  868		{ BLACKParTxt, 		BLACParTxt, 	&CBPatternPar[17]},
; rs232cmd.c  869	
; rs232cmd.c  870		{ SDICHECKParTxt, 	SDICParTxt, 	&CBPatternPar[18]},
; rs232cmd.c  871		{ DGREYParTxt, 		DGRParTxt, 		&CBPatternPar[19]},
; rs232cmd.c  872	
; rs232cmd.c  873		{ STAIRCASE5ParTxt, 	STA5ParTxt, 	&CBPatternPar[20]},
; rs232cmd.c  874		{ STAIRCASE10ParTxt, STA10ParTxt, 	&CBPatternPar[21]},
; rs232cmd.c  875	
; rs232cmd.c  876		{ CROSSHATCHParTxt, 	CROSParTxt, 	&CBPatternPar[22]},
; rs232cmd.c  877		{ PLUGEParTxt, 		PLUGParTxt, 	NULL},
; rs232cmd.c  878	};
; rs232cmd.c  879	
; rs232cmd.c  880	struct PAR_STRUCT code EmbAudioSignalPar[3] = {
	DD	000000000H
	SYMB	TYPE, 528, 'Z', #519, 2
	SYMB	IDEN, "EmbAudioSignalPar", _EmbAudioSignalPar, #528, 129, 0
	SYMB	ALAB, _EmbAudioSignalPar, #528
	PUBLIC	_EmbAudioSignalPar
	ALIGN	1
_EmbAudioSignalPar:
	DD	_OFFParTxt,_OFFParTxt
	DD	_EmbAudioSignalPar+12
	DD	_SILENCEParTxt,_SILParTxt
	DD	_EmbAudioSignalPar+24
	DD	_S1KHZParTxt,_S1KHZParTxt
; rs232cmd.c  881		{ OFFParTxt, 	  	OFFParTxt, 		&EmbAudioSignalPar[1]},
; rs232cmd.c  882		{ SILENCEParTxt, 	SILParTxt, 		&EmbAudioSignalPar[2]},
; rs232cmd.c  883		{ S1KHZParTxt,   	S1KHZParTxt, 	NULL},
; rs232cmd.c  884	};
; rs232cmd.c  885	
; rs232cmd.c  886	struct PAR_STRUCT code AudioOutputPar[2] = {
	DD	000000000H
	SYMB	TYPE, 530, 'Z', #519, 1
	SYMB	IDEN, "AudioOutputPar", _AudioOutputPar, #530, 129, 0
	SYMB	ALAB, _AudioOutputPar, #530
	PUBLIC	_AudioOutputPar
	ALIGN	1
_AudioOutputPar:
	DD	_ANALOGParTxt,_ANALParTxt
	DD	_AudioOutputPar+12
	DD	_AESEBUParTxt,_AESParTxt
; rs232cmd.c  887		{ ANALOGParTxt, ANALParTxt, &AudioOutputPar[1]},
; rs232cmd.c  888		{ AESEBUParTxt, AESParTxt,  NULL},
; rs232cmd.c  889	};
; rs232cmd.c  890	
; rs232cmd.c  891	struct PAR_STRUCT code AESEBUSystemPar[2] = {
	DD	000000000H
	SYMB	IDEN, "AESEBUSystemPar", _AESEBUSystemPar, #530, 129, 0
	SYMB	ALAB, _AESEBUSystemPar, #530
	PUBLIC	_AESEBUSystemPar
	ALIGN	1
_AESEBUSystemPar:
	DD	_PALParTxt,_PALParTxt
	DD	_AESEBUSystemPar+12
	DD	_NTSCParTxt,_NTSCParTxt
; rs232cmd.c  892		{ PALParTxt,  PALParTxt,  &AESEBUSystemPar[1]},
; rs232cmd.c  893		{ NTSCParTxt, NTSCParTxt, NULL},
; rs232cmd.c  894	};
; rs232cmd.c  895	
; rs232cmd.c  896	struct PAR_STRUCT code AudioSignalPar[4] = {
	DD	000000000H
	SYMB	IDEN, "AudioSignalPar", _AudioSignalPar, #524, 129, 0
	SYMB	ALAB, _AudioSignalPar, #524
	PUBLIC	_AudioSignalPar
	ALIGN	1
_AudioSignalPar:
	DD	_S500HZParTxt,_S500HZParTxt
	DD	_AudioSignalPar+12
	DD	_S1KHZParTxt,_S1KHZParTxt
	DD	_AudioSignalPar+24
	DD	_SEBU1KHZParTxt,_SEBU1KHZParTxt
	DD	_AudioSignalPar+36
	DD	_S8KHZParTxt,_S8KHZParTxt
; rs232cmd.c  897		{ S500HZParTxt, 	S500HZParTxt, 	 &AudioSignalPar[1]},
; rs232cmd.c  898		{ S1KHZParTxt, 	S1KHZParTxt, 	 &AudioSignalPar[2]},
; rs232cmd.c  899		{ SEBU1KHZParTxt, SEBU1KHZParTxt, &AudioSignalPar[3]},
; rs232cmd.c  900		{ S8KHZParTxt, 	S8KHZParTxt, 	 NULL},
; rs232cmd.c  901	};
; rs232cmd.c  902	
; rs232cmd.c  903	struct PAR_STRUCT code AnalogLevelPar[1] = {
	DD	000000000H
	SYMB	IDEN, "AnalogLevelPar", _AnalogLevelPar, #522, 129, 0
	SYMB	ALAB, _AnalogLevelPar, #522
	PUBLIC	_AnalogLevelPar
	ALIGN	1
_AnalogLevelPar:
	DD	_SILENCEParTxt,_SILParTxt
; rs232cmd.c  904		{ SILENCEParTxt, SILParTxt, NULL},
; rs232cmd.c  905	};
; rs232cmd.c  906	
; rs232cmd.c  907	struct PAR_STRUCT code AESEBULevelPar[1] = {
	DD	000000000H
	SYMB	IDEN, "AESEBULevelPar", _AESEBULevelPar, #522, 129, 0
	SYMB	ALAB, _AESEBULevelPar, #522
	PUBLIC	_AESEBULevelPar
	ALIGN	1
_AESEBULevelPar:
	DD	_SILENCEParTxt,_SILParTxt
; rs232cmd.c  908		{ SILENCEParTxt, SILParTxt, NULL},
; rs232cmd.c  909	};
; rs232cmd.c  910	
; rs232cmd.c  911	struct PAR_STRUCT code AudioFrequencyPar[2] = {
	DD	000000000H
	SYMB	IDEN, "AudioFrequencyPar", _AudioFrequencyPar, #530, 129, 0
	SYMB	ALAB, _AudioFrequencyPar, #530
	PUBLIC	_AudioFrequencyPar
	ALIGN	1
_AudioFrequencyPar:
	DD	_F441KHZParTxt,_F441KHZParTxt
	DD	_AudioFrequencyPar+12
	DD	_F48KHZParTxt,_F48KHZParTxt
; rs232cmd.c  912		{ F441KHZParTxt, F441KHZParTxt, &AudioFrequencyPar[1]},
; rs232cmd.c  913		{ F48KHZParTxt,  F48KHZParTxt,  NULL},
; rs232cmd.c  914	};
; rs232cmd.c  915	
; rs232cmd.c  916	struct PAR_STRUCT code UnitPar[2] = {
	DD	000000000H
	SYMB	IDEN, "UnitPar", _UnitPar, #530, 129, 0
	SYMB	ALAB, _UnitPar, #530
	PUBLIC	_UnitPar
	ALIGN	1
_UnitPar:
	DD	_BBParTxt,_BBParTxt
	DD	_UnitPar+12
	DD	_SPGParTxt,_SPGParTxt
; rs232cmd.c  917		{ BBParTxt,  BBParTxt,  &UnitPar[1]},
; rs232cmd.c  918		{ SPGParTxt, SPGParTxt, NULL},
; rs232cmd.c  919	};
; rs232cmd.c  920	
; rs232cmd.c  921	struct PAR_STRUCT code OffOnPar[2] = {
	DD	000000000H
	SYMB	IDEN, "OffOnPar", _OffOnPar, #530, 129, 0
	SYMB	ALAB, _OffOnPar, #530
	PUBLIC	_OffOnPar
	ALIGN	1
_OffOnPar:
	DD	_OFFParTxt,_OFFParTxt
	DD	_OffOnPar+12
	DD	_ONParTxt,_ONParTxt
; rs232cmd.c  922		{ OFFParTxt, OFFParTxt, &OffOnPar[1]},
; rs232cmd.c  923		{ ONParTxt,  ONParTxt,  NULL},
; rs232cmd.c  924	};
; rs232cmd.c  925	
; rs232cmd.c  926	struct PAR_STRUCT code FactBBGenSignalPar[2] = {
	DD	000000000H
	SYMB	IDEN, "FactBBGenSignalPar", _FactBBGenSignalPar, #530, 129, 0
	SYMB	ALAB, _FactBBGenSignalPar, #530
	PUBLIC	_FactBBGenSignalPar
	ALIGN	1
_FactBBGenSignalPar:
	DD	_NORMALParTxt,_NORMParTxt
	DD	_FactBBGenSignalPar+12
	DD	_F45MHZParTxt,_F45MHZParTxt
; rs232cmd.c  927		{ NORMALParTxt, NORMParTxt, 	&FactBBGenSignalPar[1]},
; rs232cmd.c  928		{ F45MHZParTxt, F45MHZParTxt, NULL},
; rs232cmd.c  929	};
; rs232cmd.c  930	
; rs232cmd.c  931	struct PAR_STRUCT code MinMaxPar[2] = {
	DD	000000000H
	SYMB	IDEN, "MinMaxPar", _MinMaxPar, #530, 129, 0
	SYMB	ALAB, _MinMaxPar, #530
	PUBLIC	_MinMaxPar
	ALIGN	1
_MinMaxPar:
	DD	_MINParTxt,_MINParTxt
	DD	_MinMaxPar+12
	DD	_MAXParTxt,_MAXParTxt
; rs232cmd.c  932		{ MINParTxt, MINParTxt, &MinMaxPar[1]},
; rs232cmd.c  933		{ MAXParTxt, MAXParTxt, NULL},
; rs232cmd.c  934	};
; rs232cmd.c  935	
; rs232cmd.c  936	struct PAR_STRUCT code UpDownPar[2] = {
	DD	000000000H
	SYMB	IDEN, "UpDownPar", _UpDownPar, #530, 129, 0
	SYMB	ALAB, _UpDownPar, #530
	PUBLIC	_UpDownPar
	ALIGN	1
_UpDownPar:
	DD	_UPParTxt,_UPParTxt
	DD	_UpDownPar+12
	DD	_DOWNParTxt,_DOWNParTxt
; rs232cmd.c  937		{ UPParTxt,   UPParTxt,   &UpDownPar[1]},
; rs232cmd.c  938		{ DOWNParTxt, DOWNParTxt, NULL},
; rs232cmd.c  939	};
; rs232cmd.c  940	
; rs232cmd.c  941	/***************************************************************************/
; rs232cmd.c  942	// Temporary variables PRIVATE NOT overlayable
; rs232cmd.c  943	
; rs232cmd.c  944	static unsigned int Suffix[4]=
	DD	000000000H
RS232CMD_INI_FA	SEGMENT	HDATA INSEGMENT INIT
	RSEG	RS232CMD_INI_FA
	SYMB	TYPE, 532, 'Z', #18, 3
	SYMB	IDEN, "Suffix", _Suffix, #532, 130, 4
	ALIGN	1
_Suffix:
; rs232cmd.c  945	{
; rs232cmd.c  946		1,1,1,1
; rs232cmd.c  947	};
; rs232cmd.c  948	
; rs232cmd.c  949	static bool PasswordProtected = true;
	DW	00001H,00001H,00001H,00001H
	SYMB	IDEN, "PasswordProtected", _PasswordProtected, #487, 130, 4
	ALIGN	1
_PasswordProtected:
; rs232cmd.c  950	static UC GenlockCalEnable = 0;
	DW	0FFFFH
	SYMB	IDEN, "GenlockCalEnable", _GenlockCalEnable, #3, 130, 4
_GenlockCalEnable:
; rs232cmd.c  951	static int GenlockCalValue = 0;
	DB	000H
	SYMB	IDEN, "GenlockCalValue", _GenlockCalValue, #16, 130, 4
	ALIGN	1
_GenlockCalValue:
; rs232cmd.c  952	
; rs232cmd.c  953	/**************************************************************************/
; rs232cmd.c  954	/* CLSCommand																	 								 RS232CMD.C */
; rs232cmd.c  955	/*																																				*/
; rs232cmd.c  956	/* Author: 		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c  957	/* Revised:		000413				     																					*/
; rs232cmd.c  958	/*																																				*/
; rs232cmd.c  959	/* Function:  Clear status command																				*/
; rs232cmd.c  960	/* Remarks:		No parameters																								*/
; rs232cmd.c  961	/* Returns:		-																														*/
; rs232cmd.c  962	/* Updates:																																*/
; rs232cmd.c  963	/**************************************************************************/
; rs232cmd.c  964	void CLSCommand( void)
; rs232cmd.c  965	{
	DW	00000H
RS232CMD_PR	SEGMENT	HCODE
	RSEG	RS232CMD_PR
	ALIGN	1
	SYMB	LINE, 965
	PUBLIC	_CLSCommand
_CLSCommand:
	SYMB	TYPE, 534, 'X', 12, #1, 30, 0
	SYMB	GFUN, "CLSCommand", _CLSCommand, #534, 0, 0, 0
	SYMB	ALAB, _CLSCommand, #534
; rs232cmd.c  966		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 966
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_8
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_8
; rs232cmd.c  967		{
; rs232cmd.c  968			if ( CmdRequest)
	SYMB	LINE, 968
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_3
; rs232cmd.c  969				SCPIError = SyntaxErr;
	SYMB	LINE, 969
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_3:
; rs232cmd.c  970			else
; rs232cmd.c  971			{
; rs232cmd.c  972				if ( ParCnt)
	SYMB	LINE, 972
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_4
; rs232cmd.c  973					SCPIError = ParNotAllowed;
	SYMB	LINE, 973
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_4:
; rs232cmd.c  974				else
; rs232cmd.c  975					ResetErrorEventQueue();
	SYMB	LINE, 975
	CALL	_ResetErrorEventQueue
; rs232cmd.c  976			}
; rs232cmd.c  977		}
	SYMB	LINE, 977
_8:
; rs232cmd.c  978	}
	SYMB	LINE, 978
	RET
	SYMB	EFUN
; rs232cmd.c  979	
; rs232cmd.c  980	/**************************************************************************/
; rs232cmd.c  981	/* ESECommand																	 								 RS232CMD.C */
; rs232cmd.c  982	/*																																				*/
; rs232cmd.c  983	/* Author:		Kim Engedahl, DEV, 970627	    															*/
; rs232cmd.c  984	/* Revised:		000413				     																					*/
; rs232cmd.c  985	/*																																				*/
; rs232cmd.c  986	/* Function:	Set/read the Standard Event Status Enable Register					*/
; rs232cmd.c  987	/* Remarks:		--																													*/
; rs232cmd.c  988	/* Returns:		-																														*/
; rs232cmd.c  989	/* Updates:																																*/
; rs232cmd.c  990	/**************************************************************************/
; rs232cmd.c  991	void ESECommand( void)
; rs232cmd.c  992	{
	ALIGN	1
	SYMB	LINE, 992
	PUBLIC	_ESECommand
_ESECommand:
	SYMB	TYPE, 535, 'X', 12, #1, 30, 0
	SYMB	GFUN, "ESECommand", _ESECommand, #535, 0, 0, 0
	SYMB	ALAB, _ESECommand, #535
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "Reg", -2, #16, 130, 5
; rs232cmd.c  993		int Reg;
; rs232cmd.c  994	
; rs232cmd.c  995		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 995
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_21
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_21
; rs232cmd.c  996		{
; rs232cmd.c  997			if ( CmdRequest)
	SYMB	LINE, 997
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_12
; rs232cmd.c  998			{
; rs232cmd.c  999				if ( ParCnt)
	SYMB	LINE, 999
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_11
; rs232cmd.c 1000					SCPIError = ParNotAllowed;
	SYMB	LINE, 1000
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_21
_11:
; rs232cmd.c 1001				else
; rs232cmd.c 1002					rs232printf( 12, "%d\n", ESEReg);
	SYMB	LINE, 1002
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _ESEReg )
	MOV.W	R1,#SOF( _ESEReg )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 1003			}
	SYMB	LINE, 1003
	BR	_21
_12:
; rs232cmd.c 1004			else
; rs232cmd.c 1005			{
; rs232cmd.c 1006				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1006
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_13
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_14
_13:
; rs232cmd.c 1007				{
; rs232cmd.c 1008					SCPIError = SyntaxErr;	
	SYMB	LINE, 1008
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1009					return;
	SYMB	LINE, 1009
	BR	_21
; rs232cmd.c 1010				}
	SYMB	LINE, 1010
_14:
; rs232cmd.c 1011	
; rs232cmd.c 1012				if ( Reg > 255)
	SYMB	LINE, 1012
	CMP.W	[R7],#0FFH
	BLE	_15
; rs232cmd.c 1013				{
; rs232cmd.c 1014					SCPIError = DataOutOfRange;
	SYMB	LINE, 1014
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1015					return;
	SYMB	LINE, 1015
	BR	_21
; rs232cmd.c 1016				}
	SYMB	LINE, 1016
_15:
; rs232cmd.c 1017	
; rs232cmd.c 1018				ESEReg = Reg & 0xFF;
	SYMB	LINE, 1018
	MOV.W	R0,[R7]
	AND.B	R0L,#0FFH
	MOV.B	ES,#SEG( _ESEReg )
	MOV.W	R1,#SOF( _ESEReg )
	MOV.B	[R1],R0L
; rs232cmd.c 1019			}
; rs232cmd.c 1020		}
; rs232cmd.c 1021	}
	SYMB	LINE, 1021
_21:
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1022	
; rs232cmd.c 1023	/**************************************************************************/
; rs232cmd.c 1024	/* ESRCommand																									 RS232CMD.C */
; rs232cmd.c 1025	/*																																				*/
; rs232cmd.c 1026	/* Author:		Kim Engedahl, DEV, 970627	    															*/
; rs232cmd.c 1027	/* Revised:		000413				     																					*/
; rs232cmd.c 1028	/*																																				*/
; rs232cmd.c 1029	/* Function:	Read and clear the Standard Event Status Register						*/
; rs232cmd.c 1030	/* Remarks:		No parameters																								*/
; rs232cmd.c 1031	/*						The register will reset to zero.														*/
; rs232cmd.c 1032	/* Returns:		-																														*/
; rs232cmd.c 1033	/* Updates:																																*/
; rs232cmd.c 1034	/**************************************************************************/
; rs232cmd.c 1035	void ESRCommand( void)
; rs232cmd.c 1036	{
	ALIGN	1
	SYMB	LINE, 1036
	PUBLIC	_ESRCommand
_ESRCommand:
	SYMB	TYPE, 536, 'X', 12, #1, 30, 0
	SYMB	GFUN, "ESRCommand", _ESRCommand, #536, 0, 0, 0
	SYMB	ALAB, _ESRCommand, #536
	SYMB	IDEN, "Reg", -1, #16, 130, 5
	SYMB	LTIM, "Reg", -1, 0, 69
; rs232cmd.c 1037		int Reg;
; rs232cmd.c 1038	
; rs232cmd.c 1039		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1039
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_30
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_30
; rs232cmd.c 1040		{
; rs232cmd.c 1041			if ( CmdRequest)
	SYMB	LINE, 1041
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_26
; rs232cmd.c 1042			{
; rs232cmd.c 1043				if ( ParCnt)
	SYMB	LINE, 1043
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_25
; rs232cmd.c 1044					SCPIError = ParNotAllowed;
	SYMB	LINE, 1044
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_25:
; rs232cmd.c 1045				else
; rs232cmd.c 1046				{
; rs232cmd.c 1047					rs232printf( 12, "%d\n", UpdateESRRegister());
	SYMB	LINE, 1047
	CALL	_UpdateESRRegister
	MOV.B	R1L,R0L
	MOVS.B	R1H,#00H
	MOV.W	R0,#0CH
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
; rs232cmd.c 1048	
; rs232cmd.c 1049					ESRReg = 0;
	SYMB	LINE, 1049
	MOV.B	ES,#SEG( _ESRReg )
	MOV.W	R0,#SOF( _ESRReg )
	MOV.B	[R0],#00H
; rs232cmd.c 1050				}
; rs232cmd.c 1051			}
	SYMB	LINE, 1051
	RET
_26:
; rs232cmd.c 1052			else
; rs232cmd.c 1053				SCPIError = SyntaxErr;
	SYMB	LINE, 1053
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1054		}
	SYMB	LINE, 1054
_30:
; rs232cmd.c 1055	}
	SYMB	LINE, 1055
	RET
	SYMB	EFUN
; rs232cmd.c 1056	
; rs232cmd.c 1057	/**************************************************************************/
; rs232cmd.c 1058	/* OPCCommand																	 								 RS232CMD.C */
; rs232cmd.c 1059	/*																																				*/
; rs232cmd.c 1060	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 1061	/* Revised:		000413				     																					*/
; rs232cmd.c 1062	/*																																				*/
; rs232cmd.c 1063	/* Function:	Operation Complete Command/Query														*/
; rs232cmd.c 1064	/* Remarks:		No parameters																								*/
; rs232cmd.c 1065	/* Returns:		-																														*/
; rs232cmd.c 1066	/* Updates:																																*/
; rs232cmd.c 1067	/**************************************************************************/
; rs232cmd.c 1068	void OPCCommand( void)
; rs232cmd.c 1069	{
	ALIGN	1
	SYMB	LINE, 1069
	PUBLIC	_OPCCommand
_OPCCommand:
	SYMB	TYPE, 537, 'X', 12, #1, 30, 0
	SYMB	GFUN, "OPCCommand", _OPCCommand, #537, 0, 0, 0
	SYMB	ALAB, _OPCCommand, #537
; rs232cmd.c 1070		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1070
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_36
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_36
; rs232cmd.c 1071		{
; rs232cmd.c 1072			if ( CmdRequest)
	SYMB	LINE, 1072
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_31
; rs232cmd.c 1073			{
; rs232cmd.c 1074				if ( ParCnt)
	SYMB	LINE, 1074
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_36
; rs232cmd.c 1075					SCPIError = ParNotAllowed;
	SYMB	LINE, 1075
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
; rs232cmd.c 1076			}
	SYMB	LINE, 1076
	RET
_31:
; rs232cmd.c 1077			else
; rs232cmd.c 1078			{
; rs232cmd.c 1079				if ( ParCnt)
	SYMB	LINE, 1079
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_36
; rs232cmd.c 1080					SCPIError = ParNotAllowed;
	SYMB	LINE, 1080
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
; rs232cmd.c 1081			}
; rs232cmd.c 1082		}
	SYMB	LINE, 1082
_36:
; rs232cmd.c 1083	}
	SYMB	LINE, 1083
	RET
	SYMB	EFUN
; rs232cmd.c 1084	
; rs232cmd.c 1085	/**************************************************************************/
; rs232cmd.c 1086	/* SRECommand															 		 								 RS232CMD.C */
; rs232cmd.c 1087	/*																																				*/
; rs232cmd.c 1088	/* Author:		Kim Engedahl, DEV, 970627	    															*/
; rs232cmd.c 1089	/* Revised:		000413				     																					*/
; rs232cmd.c 1090	/*																																				*/
; rs232cmd.c 1091	/* Function:	Set/read the Service Request Enable Register								*/
; rs232cmd.c 1092	/* Remarks:		Bit 6 in *SRE? register is always ZERO											*/
; rs232cmd.c 1093	/*						Bit 6 in *SRE register is ignored														*/
; rs232cmd.c 1094	/* Returns:		-																														*/
; rs232cmd.c 1095	/* Updates:																																*/
; rs232cmd.c 1096	/**************************************************************************/
; rs232cmd.c 1097	void SRECommand( void)
; rs232cmd.c 1098	{
	ALIGN	1
	SYMB	LINE, 1098
	PUBLIC	_SRECommand
_SRECommand:
	SYMB	TYPE, 538, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SRECommand", _SRECommand, #538, 0, 0, 0
	SYMB	ALAB, _SRECommand, #538
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "Reg", -2, #16, 130, 5
; rs232cmd.c 1099		int Reg;
; rs232cmd.c 1100	
; rs232cmd.c 1101		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1101
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_47
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_47
; rs232cmd.c 1102		{
; rs232cmd.c 1103			if ( CmdRequest)
	SYMB	LINE, 1103
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_38
; rs232cmd.c 1104			{
; rs232cmd.c 1105				if ( ParCnt)
	SYMB	LINE, 1105
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_37
; rs232cmd.c 1106					SCPIError = ParNotAllowed;
	SYMB	LINE, 1106
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_47
_37:
; rs232cmd.c 1107				else
; rs232cmd.c 1108					rs232printf( 12, "%d\n", SREReg);
	SYMB	LINE, 1108
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _SREReg )
	MOV.W	R1,#SOF( _SREReg )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 1109			}
	SYMB	LINE, 1109
	BR	_47
_38:
; rs232cmd.c 1110			else
; rs232cmd.c 1111			{
; rs232cmd.c 1112				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1112
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_39
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_40
_39:
; rs232cmd.c 1113				{
; rs232cmd.c 1114					SCPIError = SyntaxErr;	
	SYMB	LINE, 1114
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1115					return;
	SYMB	LINE, 1115
	BR	_47
; rs232cmd.c 1116				}
	SYMB	LINE, 1116
_40:
; rs232cmd.c 1117	
; rs232cmd.c 1118				if ( Reg > 255)
	SYMB	LINE, 1118
	CMP.W	[R7],#0FFH
	BLE	_41
; rs232cmd.c 1119				{
; rs232cmd.c 1120					SCPIError = DataOutOfRange;
	SYMB	LINE, 1120
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1121					return;
	SYMB	LINE, 1121
	BR	_47
; rs232cmd.c 1122				}
	SYMB	LINE, 1122
_41:
; rs232cmd.c 1123	
; rs232cmd.c 1124				SREReg = Reg & 0xBF;
	SYMB	LINE, 1124
	MOV.W	R0,[R7]
	AND.B	R0L,#0BFH
	MOV.B	ES,#SEG( _SREReg )
	MOV.W	R1,#SOF( _SREReg )
	MOV.B	[R1],R0L
; rs232cmd.c 1125			}
; rs232cmd.c 1126		}
; rs232cmd.c 1127	}
	SYMB	LINE, 1127
_47:
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1128	
; rs232cmd.c 1129	/**************************************************************************/
; rs232cmd.c 1130	/* STBCommand																									 RS232CMD.C */
; rs232cmd.c 1131	/*																																				*/
; rs232cmd.c 1132	/* Author:		Kim Engedahl, DEV, 970627	    															*/
; rs232cmd.c 1133	/* Revised:		000413				     																					*/
; rs232cmd.c 1134	/*																																				*/
; rs232cmd.c 1135	/* Function:	Read the Status Byte Register																*/
; rs232cmd.c 1136	/* Remarks:		No parameters																								*/
; rs232cmd.c 1137	/* Returns:																																*/
; rs232cmd.c 1138	/* Updates:																																*/
; rs232cmd.c 1139	/**************************************************************************/
; rs232cmd.c 1140	void STBCommand( void)
; rs232cmd.c 1141	{
	ALIGN	1
	SYMB	LINE, 1141
	PUBLIC	_STBCommand
_STBCommand:
	SYMB	TYPE, 539, 'X', 12, #1, 30, 0
	SYMB	GFUN, "STBCommand", _STBCommand, #539, 0, 0, 0
	SYMB	ALAB, _STBCommand, #539
; rs232cmd.c 1142		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1142
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_56
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_56
; rs232cmd.c 1143		{
; rs232cmd.c 1144			if ( CmdRequest)
	SYMB	LINE, 1144
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_52
; rs232cmd.c 1145			{
; rs232cmd.c 1146				if ( ParCnt)
	SYMB	LINE, 1146
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_51
; rs232cmd.c 1147					SCPIError = ParNotAllowed;
	SYMB	LINE, 1147
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_51:
; rs232cmd.c 1148				else
; rs232cmd.c 1149				{
; rs232cmd.c 1150					UpdateSTBRegister();
	SYMB	LINE, 1150
	CALL	_UpdateSTBRegister
; rs232cmd.c 1151	
; rs232cmd.c 1152					rs232printf( 12, "%d\n", STBReg);
	SYMB	LINE, 1152
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _STBReg )
	MOV.W	R1,#SOF( _STBReg )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
; rs232cmd.c 1153				}
; rs232cmd.c 1154			}
	SYMB	LINE, 1154
	RET
_52:
; rs232cmd.c 1155			else
; rs232cmd.c 1156				SCPIError = SyntaxErr;
	SYMB	LINE, 1156
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1157		}
	SYMB	LINE, 1157
_56:
; rs232cmd.c 1158	}
	SYMB	LINE, 1158
	RET
	SYMB	EFUN
; rs232cmd.c 1159	
; rs232cmd.c 1160	/**************************************************************************/
; rs232cmd.c 1161	/* TSTCommand																									 RS232CMD.C */
; rs232cmd.c 1162	/*																																				*/
; rs232cmd.c 1163	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1164	/* Revised:		000505				     																					*/
; rs232cmd.c 1165	/*																																				*/
; rs232cmd.c 1166	/* Function:	Selftest query																							*/
; rs232cmd.c 1167	/* Remarks:		No parameters																								*/
; rs232cmd.c 1168	/* Returns:		-																														*/
; rs232cmd.c 1169	/* Updates:																																*/
; rs232cmd.c 1170	/**************************************************************************/
; rs232cmd.c 1171	void TSTCommand( void)
; rs232cmd.c 1172	{
	ALIGN	1
	SYMB	LINE, 1172
	PUBLIC	_TSTCommand
_TSTCommand:
	SYMB	TYPE, 540, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSTCommand", _TSTCommand, #540, 0, 0, 0
	SYMB	ALAB, _TSTCommand, #540
; rs232cmd.c 1173		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1173
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_61
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_61
; rs232cmd.c 1174		{
; rs232cmd.c 1175			if ( CmdRequest)
	SYMB	LINE, 1175
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_57
; rs232cmd.c 1176			{
; rs232cmd.c 1177				if ( ParCnt)
	SYMB	LINE, 1177
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_61
; rs232cmd.c 1178					SCPIError = ParNotAllowed;
	SYMB	LINE, 1178
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
; rs232cmd.c 1179				else
; rs232cmd.c 1180				{
; rs232cmd.c 1181					;
; rs232cmd.c 1182				}
; rs232cmd.c 1183			}
	SYMB	LINE, 1183
	RET
_57:
; rs232cmd.c 1184			else
; rs232cmd.c 1185				SCPIError = SyntaxErr;
	SYMB	LINE, 1185
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1186		}
	SYMB	LINE, 1186
_61:
; rs232cmd.c 1187	}
	SYMB	LINE, 1187
	RET
	SYMB	EFUN
; rs232cmd.c 1188	
; rs232cmd.c 1189	/**************************************************************************/
; rs232cmd.c 1190	/* WAICommand																									 RS232CMD.C */
; rs232cmd.c 1191	/*																																				*/
; rs232cmd.c 1192	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1193	/* Revised:		000505				     																					*/
; rs232cmd.c 1194	/*																																				*/
; rs232cmd.c 1195	/* Function:	Wait-to-continue command																		*/
; rs232cmd.c 1196	/* Remarks:		No parameters																								*/
; rs232cmd.c 1197	/* Returns:		-																														*/
; rs232cmd.c 1198	/* Updates:																																*/
; rs232cmd.c 1199	/**************************************************************************/
; rs232cmd.c 1200	void WAICommand( void)
; rs232cmd.c 1201	{
	ALIGN	1
	SYMB	LINE, 1201
	PUBLIC	_WAICommand
_WAICommand:
	SYMB	TYPE, 541, 'X', 12, #1, 30, 0
	SYMB	GFUN, "WAICommand", _WAICommand, #541, 0, 0, 0
	SYMB	ALAB, _WAICommand, #541
; rs232cmd.c 1202		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1202
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_66
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_66
; rs232cmd.c 1203		{
; rs232cmd.c 1204			if ( CmdRequest)
	SYMB	LINE, 1204
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_62
; rs232cmd.c 1205				SCPIError = SyntaxErr;
	SYMB	LINE, 1205
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_62:
; rs232cmd.c 1206			else
; rs232cmd.c 1207			{
; rs232cmd.c 1208				if ( ParCnt)
	SYMB	LINE, 1208
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_66
; rs232cmd.c 1209					SCPIError = ParNotAllowed;
	SYMB	LINE, 1209
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
; rs232cmd.c 1210				else
; rs232cmd.c 1211				{
; rs232cmd.c 1212					;
; rs232cmd.c 1213				}
; rs232cmd.c 1214			}
; rs232cmd.c 1215		}
	SYMB	LINE, 1215
_66:
; rs232cmd.c 1216	}
	SYMB	LINE, 1216
	RET
	SYMB	EFUN
; rs232cmd.c 1217	
; rs232cmd.c 1218	/**************************************************************************/
; rs232cmd.c 1219	/* RSTCommand																									 RS232CMD.C */
; rs232cmd.c 1220	/*																																				*/
; rs232cmd.c 1221	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 1222	/* Revised:		000617				     																					*/
; rs232cmd.c 1223	/*																																				*/
; rs232cmd.c 1224	/* Function:	Reset comamnd																								*/
; rs232cmd.c 1225	/* Remarks:		No parameters																								*/
; rs232cmd.c 1226	/* Returns:																																*/
; rs232cmd.c 1227	/* Updates:																																*/
; rs232cmd.c 1228	/**************************************************************************/
; rs232cmd.c 1229	void RSTCommand( void)
; rs232cmd.c 1230	{
	ALIGN	1
	SYMB	LINE, 1230
	PUBLIC	_RSTCommand
_RSTCommand:
	SYMB	TYPE, 542, 'X', 12, #1, 30, 0
	SYMB	GFUN, "RSTCommand", _RSTCommand, #542, 0, 0, 0
	SYMB	ALAB, _RSTCommand, #542
; rs232cmd.c 1231		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1231
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_72
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_72
; rs232cmd.c 1232		{
; rs232cmd.c 1233			if ( CmdRequest)
	SYMB	LINE, 1233
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_67
; rs232cmd.c 1234				SCPIError = SyntaxErr;
	SYMB	LINE, 1234
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_67:
; rs232cmd.c 1235			else
; rs232cmd.c 1236			{
; rs232cmd.c 1237				if ( ParCnt)
	SYMB	LINE, 1237
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_68
; rs232cmd.c 1238					SCPIError = ParNotAllowed;
	SYMB	LINE, 1238
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_68:
; rs232cmd.c 1239				else
; rs232cmd.c 1240					ResetInstrument();
	SYMB	LINE, 1240
	CALL	_ResetInstrument
; rs232cmd.c 1241			}
; rs232cmd.c 1242		}
	SYMB	LINE, 1242
_72:
; rs232cmd.c 1243	}
	SYMB	LINE, 1243
	RET
	SYMB	EFUN
; rs232cmd.c 1244	
; rs232cmd.c 1245	/**************************************************************************/
; rs232cmd.c 1246	/* IDNCommand																								   RS232CMD.C */
; rs232cmd.c 1247	/*																																				*/
; rs232cmd.c 1248	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 1249	/* Revised:		000614				     																					*/
; rs232cmd.c 1250	/*																																				*/
; rs232cmd.c 1251	/* Function:	Identification query																				*/
; rs232cmd.c 1252	/* Remarks:		No parameter, Query only																		*/
; rs232cmd.c 1253	/* Returns:		-																														*/
; rs232cmd.c 1254	/* Updates:		-																														*/
; rs232cmd.c 1255	/**************************************************************************/
; rs232cmd.c 1256	void IDNCommand( void)
; rs232cmd.c 1257	{
	ALIGN	1
	SYMB	LINE, 1257
	PUBLIC	_IDNCommand
_IDNCommand:
	SYMB	TYPE, 543, 'X', 12, #1, 30, 0
	SYMB	GFUN, "IDNCommand", _IDNCommand, #543, 0, 0, 0
	SYMB	ALAB, _IDNCommand, #543
; rs232cmd.c 1258		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1258
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_78
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_78
; rs232cmd.c 1259		{
; rs232cmd.c 1260			if ( CmdRequest)
	SYMB	LINE, 1260
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_74
; rs232cmd.c 1261			{
; rs232cmd.c 1262				if ( ParCnt)
	SYMB	LINE, 1262
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_73
; rs232cmd.c 1263					SCPIError = ParNotAllowed;
	SYMB	LINE, 1263
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_73:
; rs232cmd.c 1264				else
; rs232cmd.c 1265				{
; rs232cmd.c 1266					rs232puts( Calibration.Company);
	SYMB	LINE, 1266
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	CALL	_rs232puts
; rs232cmd.c 1267	
; rs232cmd.c 1268					rs232putchar( ',');
	SYMB	LINE, 1268
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 1269	
; rs232cmd.c 1270					rs232puts( Calibration.Type);
	SYMB	LINE, 1270
	MOV.W	R1,#SEG( _Calibration+33 )
	MOV.W	R0,#SOF( _Calibration+33 )
	CALL	_rs232puts
	MOV.B	R0L,#02CH
; rs232cmd.c 1271	
; rs232cmd.c 1272					rs232putchar( ',');
	SYMB	LINE, 1272
	CALL	_rs232putchar
; rs232cmd.c 1273	
; rs232cmd.c 1274					rs232puts( Calibration.KUNumber);
	SYMB	LINE, 1274
	MOV.W	R1,#SEG( _Calibration+66 )
	MOV.W	R0,#SOF( _Calibration+66 )
	CALL	_rs232puts
; rs232cmd.c 1275	
; rs232cmd.c 1276					rs232putchar( ',');
	SYMB	LINE, 1276
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 1277	
; rs232cmd.c 1278					rs232puts( Calibration.SWRevision);
	SYMB	LINE, 1278
	MOV.W	R1,#SEG( _Calibration+75 )
	MOV.W	R0,#SOF( _Calibration+75 )
	CALL	_rs232puts
; rs232cmd.c 1279	
; rs232cmd.c 1280					rs232putchar( '\n');
	SYMB	LINE, 1280
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1281				}
; rs232cmd.c 1282			}
	SYMB	LINE, 1282
	RET
_74:
; rs232cmd.c 1283			else
; rs232cmd.c 1284				SCPIError = SyntaxErr;
	SYMB	LINE, 1284
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1285		}
	SYMB	LINE, 1285
_78:
; rs232cmd.c 1286	}
	SYMB	LINE, 1286
	RET
	SYMB	EFUN
; rs232cmd.c 1287	
; rs232cmd.c 1288	/**************************************************************************/
; rs232cmd.c 1289	/* RCLCommand																									 RS232CMD.C */
; rs232cmd.c 1290	/*																																				*/
; rs232cmd.c 1291	/* Author:		Sten A. Andersen/Thomas Kappelgaard, DEV, xxxxxx 						*/
; rs232cmd.c 1292	/* Revised:		Kim Engedahl, DEV, 000617																		*/
; rs232cmd.c 1293	/*																																				*/
; rs232cmd.c 1294	/* Function:																															*/
; rs232cmd.c 1295	/* Remarks:																																*/
; rs232cmd.c 1296	/* Returns:		-																														*/
; rs232cmd.c 1297	/* Updates:		-																														*/
; rs232cmd.c 1298	/**************************************************************************/
; rs232cmd.c 1299	void RCLCommand(void) 
; rs232cmd.c 1300	{
	ALIGN	1
	SYMB	LINE, 1300
	PUBLIC	_RCLCommand
_RCLCommand:
	SYMB	TYPE, 544, 'X', 12, #1, 30, 0
	SYMB	GFUN, "RCLCommand", _RCLCommand, #544, 0, 0, 0
	SYMB	ALAB, _RCLCommand, #544
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "Reg", -2, #16, 130, 5
; rs232cmd.c 1301		int	Reg = 0;
	SYMB	LINE, 1301
	MOV.W	[R7],#00H
; rs232cmd.c 1302	
; rs232cmd.c 1303		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1303
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_89
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_89
; rs232cmd.c 1304		{
; rs232cmd.c 1305			if ( CmdRequest)
	SYMB	LINE, 1305
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_79
; rs232cmd.c 1306			{
; rs232cmd.c 1307				SCPIError = SyntaxErr;
	SYMB	LINE, 1307
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1308			}
	SYMB	LINE, 1308
	BR	_89
_79:
; rs232cmd.c 1309			else
; rs232cmd.c 1310			{
; rs232cmd.c 1311				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1311
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_80
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_81
_80:
; rs232cmd.c 1312				{
; rs232cmd.c 1313					SCPIError = SyntaxErr;	
	SYMB	LINE, 1313
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1314					return;
	SYMB	LINE, 1314
	BR	_89
; rs232cmd.c 1315				}
	SYMB	LINE, 1315
_81:
; rs232cmd.c 1316	
; rs232cmd.c 1317				if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1317
	MOV.W	R0,[R7]
	BEQ	_82
	CMP.W	[R7],#04H
	BLE	_83
_82:
; rs232cmd.c 1318					SCPIError = DataOutOfRange;
	SYMB	LINE, 1318
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_89
_83:
; rs232cmd.c 1319				else
; rs232cmd.c 1320				{
; rs232cmd.c 1321					if ( RecallPreset( Reg) != OK)
	SYMB	LINE, 1321
	MOV.W	R0,[R7]
	CALL	_RecallPreset
	CMP.W	R0,#0FFFFH
	BEQ	_89
; rs232cmd.c 1322						SCPIError = ExecErr;
	SYMB	LINE, 1322
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 1323				}
; rs232cmd.c 1324			}
; rs232cmd.c 1325		}
; rs232cmd.c 1326	}
	SYMB	LINE, 1326
_89:
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1327	
; rs232cmd.c 1328	/**************************************************************************/
; rs232cmd.c 1329	/* SAVCommand																									 RS232CMD.C */
; rs232cmd.c 1330	/*																																				*/
; rs232cmd.c 1331	/* Author:		Sten A. Andersen/Thomas Kappelgaard, DEV, xxxxxx 						*/
; rs232cmd.c 1332	/* Revised:		Kim Engedahl, DEV, 000502																		*/
; rs232cmd.c 1333	/*																																				*/
; rs232cmd.c 1334	/* Function:																															*/
; rs232cmd.c 1335	/* Remarks:																																*/
; rs232cmd.c 1336	/* Returns:		-																														*/
; rs232cmd.c 1337	/* Updates:		-																														*/
; rs232cmd.c 1338	/**************************************************************************/
; rs232cmd.c 1339	void SAVCommand(void) 
; rs232cmd.c 1340	{
	ALIGN	1
	SYMB	LINE, 1340
	PUBLIC	_SAVCommand
_SAVCommand:
	SYMB	TYPE, 545, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SAVCommand", _SAVCommand, #545, 0, 0, 0
	SYMB	ALAB, _SAVCommand, #545
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "Reg", -2, #16, 130, 5
; rs232cmd.c 1341		int	Reg = 0;
	SYMB	LINE, 1341
	MOV.W	[R7],#00H
; rs232cmd.c 1342	
; rs232cmd.c 1343		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1343
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_104
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_104
; rs232cmd.c 1344		{
; rs232cmd.c 1345			if ( CmdRequest)
	SYMB	LINE, 1345
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_94
; rs232cmd.c 1346				SCPIError = SyntaxErr;
	SYMB	LINE, 1346
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_104
_94:
; rs232cmd.c 1347			else
; rs232cmd.c 1348			{
; rs232cmd.c 1349				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1349
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_95
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_96
_95:
; rs232cmd.c 1350				{
; rs232cmd.c 1351					SCPIError = SyntaxErr;	
	SYMB	LINE, 1351
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1352					return;
	SYMB	LINE, 1352
	BR	_104
; rs232cmd.c 1353				}
	SYMB	LINE, 1353
_96:
; rs232cmd.c 1354	
; rs232cmd.c 1355				if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1355
	MOV.W	R0,[R7]
	BEQ	_97
	CMP.W	[R7],#04H
	BLE	_98
_97:
; rs232cmd.c 1356					SCPIError = DataOutOfRange;
	SYMB	LINE, 1356
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_104
_98:
; rs232cmd.c 1357				else
; rs232cmd.c 1358				{
; rs232cmd.c 1359					if ( StorePreset( Reg) != OK)
	SYMB	LINE, 1359
	MOV.W	R0,[R7]
	CALL	_StorePreset
	CMP.W	R0,#0FFFFH
	BEQ	_104
; rs232cmd.c 1360						SCPIError = ExecErr;
	SYMB	LINE, 1360
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 1361				}
; rs232cmd.c 1362			}
; rs232cmd.c 1363		}
; rs232cmd.c 1364	}
	SYMB	LINE, 1364
_104:
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1365	
; rs232cmd.c 1366	/**************************************************************************/
; rs232cmd.c 1367	/* SystemError																								 RS232CMD.C */
; rs232cmd.c 1368	/*																																				*/
; rs232cmd.c 1369	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 1370	/* Revised:		000401				     																					*/
; rs232cmd.c 1371	/*																																				*/
; rs232cmd.c 1372	/* Function:	Write the next entry in the error queue (FIFO) to RS232 		*/
; rs232cmd.c 1373	/* Remarks:		No parameters, Query only																		*/
; rs232cmd.c 1374	/* Returns:		-																														*/
; rs232cmd.c 1375	/* Updates:		-																														*/
; rs232cmd.c 1376	/**************************************************************************/
; rs232cmd.c 1377	void SystemError( void)
; rs232cmd.c 1378	{
	ALIGN	1
	SYMB	LINE, 1378
	PUBLIC	_SystemError
_SystemError:
	SYMB	TYPE, 546, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemError", _SystemError, #546, 0, 0, 48
	SYMB	ALAB, _SystemError, #546
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#0CH
	SYMB	SOFF, 16
	SYMB	IDEN, "i", -1, #16, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
	SYMB	IDEN, "ptr", -1, #491, 130, 5
	SYMB	LTIM, "ptr", -1, 0, 69
	SYMB	TYPE, 547, 'Z', #2, 11
	SYMB	IDEN, "buf", -16, #547, 130, 5
; rs232cmd.c 1379		int i;
; rs232cmd.c 1380		code char *ptr;
; rs232cmd.c 1381		char buf[12];
; rs232cmd.c 1382	
; rs232cmd.c 1383		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1383
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_119
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_119
; rs232cmd.c 1384		{
; rs232cmd.c 1385			if ( CmdRequest)
	SYMB	LINE, 1385
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_114
; rs232cmd.c 1386			{
; rs232cmd.c 1387				if ( ParCnt > 0)
	SYMB	LINE, 1387
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#00H
	BL	_111
; rs232cmd.c 1388					SCPIError = ParNotAllowed;
	SYMB	LINE, 1388
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_119
_111:
; rs232cmd.c 1389				else
; rs232cmd.c 1390				{
; rs232cmd.c 1391					if (( i = ReadErrorEventQueue()) >= 0)
	SYMB	LINE, 1391
	CALL	_ReadErrorEventQueue
	MOV.W	R4,R0
	MOV.W	R1,R0
	CMP.W	R1,#00H
	BLT	_119
; rs232cmd.c 1392					{
; rs232cmd.c 1393						sprintf( buf, "%d,\"", ErrorTxt_Array[i].ErrorNo);
	SYMB	LINE, 1393
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	MOV.W	R0,R7
	MULU.W	R4,#06H
	MOV.W	R2,R4
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _ErrorTxt_Array )
	MOV.W	R0,#SOF( _ErrorTxt_Array )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	SYMB	SOFF, 18
	MOV.W	R1,#SEG( _109 )
	MOV.W	R0,#SOF( _109 )
	PUSH.W	R0, R1
	SYMB	SOFF, 22
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+6
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 16
; rs232cmd.c 1394						rs232puts( buf);
	SYMB	LINE, 1394
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	MOV.W	R0,R7
	CALL	_rs232puts
; rs232cmd.c 1395	
; rs232cmd.c 1396						ptr = ErrorTxt_Array[i].ErrorTxt;
	SYMB	LINE, 1396
	MOV.W	R2,R4
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _ErrorTxt_Array+2 )
	MOV.W	R0,#SOF( _ErrorTxt_Array+2 )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_122
	ADDS.B	CS,#01H
_122:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "ptr", 19, 0, 205
; rs232cmd.c 1397	
; rs232cmd.c 1398						while ( *ptr)
	SYMB	LINE, 1398
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_113
_112:
; rs232cmd.c 1399							rs232putchar( *ptr++);
	SYMB	LINE, 1399
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "ptr", 19, 0, 77
	SYMB	LTIM, "ptr", 19, 0, 205
	SYMB	LINE, 1398
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_112
	SYMB	LINE, 1399
_113:
; rs232cmd.c 1400	
; rs232cmd.c 1401						 rs232puts( "\"\n");
	SYMB	LINE, 1401
	MOV.W	R1,#SEG( _110 )
	MOV.W	R0,#SOF( _110 )
	CALL	_rs232puts
; rs232cmd.c 1402					}
; rs232cmd.c 1403				}
; rs232cmd.c 1404			}
	SYMB	LINE, 1404
	BR	_119
_114:
; rs232cmd.c 1405			else
; rs232cmd.c 1406				SCPIError = SyntaxErr;
	SYMB	LINE, 1406
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1407		}
	SYMB	LINE, 1407
_119:
; rs232cmd.c 1408	}
	SYMB	LINE, 1408
	ADD.W	R7,#0CH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "ptr", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 1409	
; rs232cmd.c 1410	/**************************************************************************/
; rs232cmd.c 1411	/* SystemVersion																							 RS232CMD.C */
; rs232cmd.c 1412	/*																																				*/
; rs232cmd.c 1413	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 1414	/* Revised:		000401				     																					*/
; rs232cmd.c 1415	/*																																				*/
; rs232cmd.c 1416	/* Function:	Write the SCPI version to RS232															*/
; rs232cmd.c 1417	/* Remarks:		No parameter, Query only																		*/
; rs232cmd.c 1418	/* Returns:		-																														*/
; rs232cmd.c 1419	/* Updates:		-																														*/
; rs232cmd.c 1420	/**************************************************************************/
; rs232cmd.c 1421	void SystemVersion( void)
; rs232cmd.c 1422	{
	ALIGN	1
	SYMB	LINE, 1422
	PUBLIC	_SystemVersion
_SystemVersion:
	SYMB	TYPE, 549, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemVersion", _SystemVersion, #549, 0, 0, 48
	SYMB	ALAB, _SystemVersion, #549
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 1423		char code *str;
; rs232cmd.c 1424	
; rs232cmd.c 1425		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1425
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_130
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_130
; rs232cmd.c 1426		{
; rs232cmd.c 1427			if ( CmdRequest)
	SYMB	LINE, 1427
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_126
; rs232cmd.c 1428			{
; rs232cmd.c 1429				if ( ParCnt)
	SYMB	LINE, 1429
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_123
; rs232cmd.c 1430					SCPIError = ParNotAllowed;
	SYMB	LINE, 1430
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_130
_123:
; rs232cmd.c 1431				else
; rs232cmd.c 1432				{
; rs232cmd.c 1433					str = SystemVersionTxt;
	SYMB	LINE, 1433
	MOV.W	R5,#SEG( _SystemVersionTxt )
	MOV.W	R4,#SOF( _SystemVersionTxt )
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 1434	
; rs232cmd.c 1435					while ( *str)
	SYMB	LINE, 1435
	MOV.B	CS,#SEG( _SystemVersionTxt )
	MOV.W	R0,#SOF( _SystemVersionTxt )
	MOVC.B	R1L,[R0+]
	BEQ	_125
_124:
; rs232cmd.c 1436						rs232putchar( *str++);
	SYMB	LINE, 1436
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 1435
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_124
	SYMB	LINE, 1436
_125:
; rs232cmd.c 1437	
; rs232cmd.c 1438					rs232putchar( '\n');
	SYMB	LINE, 1438
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1439				}
; rs232cmd.c 1440			}
	SYMB	LINE, 1440
	BR	_130
_126:
; rs232cmd.c 1441			else
; rs232cmd.c 1442				SCPIError = SyntaxErr;
	SYMB	LINE, 1442
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1443		}
	SYMB	LINE, 1443
_130:
; rs232cmd.c 1444	}
	SYMB	LINE, 1444
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 1445	
; rs232cmd.c 1446	/**************************************************************************/
; rs232cmd.c 1447	/* SystemPresetName																						 RS232CMD.C */
; rs232cmd.c 1448	/*																																				*/
; rs232cmd.c 1449	/* Author:		Kim Engedahl, DEV, 970206	    															*/
; rs232cmd.c 1450	/* Revised:		000503					     																				*/
; rs232cmd.c 1451	/*																																				*/								
; rs232cmd.c 1452	/* Function:	Name a specific preset number.															*/
; rs232cmd.c 1453	/* Remarks:		the scanf function can not used MaxPresetNameLength, i.e.		*/
; rs232cmd.c 1454	/*						this define should be inserted as a value. The value is			*/
; rs232cmd.c 1455	/*						defined	in INSTRU.H								 													*/
; rs232cmd.c 1456	/* Returns:		-																														*/
; rs232cmd.c 1457	/* Updates:		-																														*/
; rs232cmd.c 1458	/**************************************************************************/
; rs232cmd.c 1459	void SystemPresetName( void)
; rs232cmd.c 1460	{
	ALIGN	1
	SYMB	LINE, 1460
	SYMB	TYPE, 550, 'Z', #2, 16
	SYMB	TYPE, 552, 'Z', #2, 6
	SYMB	TYPE, 554, 'Z', #457, 2
	SYMB	TYPE, 556, 'Z', #461, 1
	SYMB	TYPE, 558, 'S', 100,\
		 "Name", #550, 0,\
		 "Author", #552, 17,\
		 "Date", #7, 24,\
		 "GenlockSetup", #455, 28,\
		 "BBSetup", #554, 34,\
		 "CBSetup", #459, 58,\
		 "AudioOutput", #16, 70,\
		 "AudioSetup", #556, 72
	SYMB	TYPE, 559, "PresetObject", 'T', #558
	PUBLIC	_SystemPresetName
_SystemPresetName:
	SYMB	TYPE, 560, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetName", _SystemPresetName, #560, 0, 0, 48
	SYMB	ALAB, _SystemPresetName, #560
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#078H
	SYMB	SOFF, 124
	SYMB	IDEN, "Reg", -124, #16, 130, 5
	SYMB	IDEN, "Name", -122, #550, 130, 5
	SYMB	IDEN, "Preset", -104, #559, 130, 5
; rs232cmd.c 1461		int Reg;
; rs232cmd.c 1462		char Name[MaxPresetNameLength];
; rs232cmd.c 1463		PresetObject Preset;
; rs232cmd.c 1464	
; rs232cmd.c 1465		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1465
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_149
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_149
; rs232cmd.c 1466		{
; rs232cmd.c 1467			if ( CmdRequest)
	SYMB	LINE, 1467
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_136
; rs232cmd.c 1468			{
; rs232cmd.c 1469				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1469
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_132
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 128
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 132
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 124
	CMP.W	R0,#01H
	BEQ	_133
_132:
; rs232cmd.c 1470					SCPIError = SyntaxErr;
	SYMB	LINE, 1470
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_149
_133:
; rs232cmd.c 1471				else
; rs232cmd.c 1472				{
; rs232cmd.c 1473					if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1473
	MOV.W	R0,[R7]
	BEQ	_134
	CMP.W	[R7],#04H
	BLE	_135
_134:
; rs232cmd.c 1474						SCPIError = DataOutOfRange;
	SYMB	LINE, 1474
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_149
_135:
; rs232cmd.c 1475					else
; rs232cmd.c 1476					{
; rs232cmd.c 1477						NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1477
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+20
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_NV_Recall
; rs232cmd.c 1478	
; rs232cmd.c 1479						rs232puts( Preset.Name);
	SYMB	LINE, 1479
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 1480						rs232putchar( '\n');
	SYMB	LINE, 1480
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1481					}
; rs232cmd.c 1482				}
; rs232cmd.c 1483			}
	SYMB	LINE, 1483
	BR	_149
_136:
; rs232cmd.c 1484			else
; rs232cmd.c 1485			{
; rs232cmd.c 1486																	// The second parameter, the string, in scanf
; rs232cmd.c 1487																	// should be limited to the definition of
; rs232cmd.c 1488																	// MaxPresetNameLength
; rs232cmd.c 1489				if (( ParCnt != 2) || (( sscanf( Cmd, "%d,%17s", &Reg, Name)) != 2))
	SYMB	LINE, 1489
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_137
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 128
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+4
	PUSH.W	R2, R3
	SYMB	SOFF, 132
	MOV.W	R3,#SEG( _131 )
	MOV.W	R2,#SOF( _131 )
	PUSH.W	R2, R3
	SYMB	SOFF, 136
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 124
	CMP.W	R0,#02H
	BEQ	_138
_137:
; rs232cmd.c 1490					SCPIError = SyntaxErr;
	SYMB	LINE, 1490
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_149
_138:
	MOV.W	R1,R5
	MOV.W	R0,R4
; rs232cmd.c 1491				else
; rs232cmd.c 1492				{
; rs232cmd.c 1493					if ( strlen( Name) == MaxPresetNameLength)
	SYMB	LINE, 1493
	CALL	_strlen
	CMP.W	R0,#011H
	BNE	_139
; rs232cmd.c 1494						SCPIError = SyntaxErr;
	SYMB	LINE, 1494
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_149
_139:
; rs232cmd.c 1495					else
; rs232cmd.c 1496					{
; rs232cmd.c 1497						if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1497
	MOV.W	R0,[R7]
	BEQ	_140
	CMP.W	[R7],#04H
	BLE	_141
_140:
; rs232cmd.c 1498							SCPIError = DataOutOfRange;
	SYMB	LINE, 1498
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_149
_141:
; rs232cmd.c 1499						else
; rs232cmd.c 1500						{
; rs232cmd.c 1501							NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1501
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+20
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_NV_Recall
	MOV.W	R1,R5
	MOV.W	R0,R4
; rs232cmd.c 1502							strcpy( Preset.Name, Name);
	SYMB	LINE, 1502
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+2
	CALL	_strcpy
; rs232cmd.c 1503							NV_Store( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1503
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#064H
	CALL	_NV_Store
; rs232cmd.c 1504						}
; rs232cmd.c 1505					}
; rs232cmd.c 1506				}
; rs232cmd.c 1507			}
; rs232cmd.c 1508		}
	SYMB	LINE, 1508
_149:
; rs232cmd.c 1509	}
	SYMB	LINE, 1509
	ADD.W	R7,#078H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1510	
; rs232cmd.c 1511	/**************************************************************************/
; rs232cmd.c 1512	/* SystemPresetAuthor																					 RS232CMD.C */
; rs232cmd.c 1513	/*																																				*/
; rs232cmd.c 1514	/* Author:		Kim Engedahl, DEV, 000502	    															*/
; rs232cmd.c 1515	/* Revised:		000503					     																				*/
; rs232cmd.c 1516	/*																																				*/								
; rs232cmd.c 1517	/* Function:	Name the author of a specific preset number. 								*/
; rs232cmd.c 1518	/* Remarks:		the scanf function can not used MaxPresetAuthorLength, i.e.	*/
; rs232cmd.c 1519	/*						this define should be inserted as a value. The value is			*/
; rs232cmd.c 1520	/*						defined	in INSTRU.H								 													*/
; rs232cmd.c 1521	/* Returns:		-																														*/
; rs232cmd.c 1522	/* Updates:		-																														*/
; rs232cmd.c 1523	/**************************************************************************/
; rs232cmd.c 1524	void SystemPresetAuthor( void)
; rs232cmd.c 1525	{
	ALIGN	1
	SYMB	LINE, 1525
	PUBLIC	_SystemPresetAuthor
_SystemPresetAuthor:
	SYMB	TYPE, 561, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetAuthor", _SystemPresetAuthor, #561, 0, 0, 48
	SYMB	ALAB, _SystemPresetAuthor, #561
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#06EH
	SYMB	SOFF, 114
	SYMB	IDEN, "Reg", -114, #16, 130, 5
	SYMB	IDEN, "Author", -112, #552, 130, 5
	SYMB	IDEN, "Preset", -104, #559, 130, 5
; rs232cmd.c 1526		int Reg;
; rs232cmd.c 1527		char Author[MaxPresetAuthorLength];
; rs232cmd.c 1528		PresetObject Preset;
; rs232cmd.c 1529	
; rs232cmd.c 1530		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1530
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_175
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_175
; rs232cmd.c 1531		{
; rs232cmd.c 1532			if ( CmdRequest)
	SYMB	LINE, 1532
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_162
; rs232cmd.c 1533			{
; rs232cmd.c 1534				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1534
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_158
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 118
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 122
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 114
	CMP.W	R0,#01H
	BEQ	_159
_158:
; rs232cmd.c 1535					SCPIError = SyntaxErr;
	SYMB	LINE, 1535
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_175
_159:
; rs232cmd.c 1536				else
; rs232cmd.c 1537				{
; rs232cmd.c 1538					if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1538
	MOV.W	R0,[R7]
	BEQ	_160
	CMP.W	[R7],#04H
	BLE	_161
_160:
; rs232cmd.c 1539						SCPIError = DataOutOfRange;
	SYMB	LINE, 1539
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_175
_161:
; rs232cmd.c 1540					else
; rs232cmd.c 1541					{
; rs232cmd.c 1542						NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1542
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+10
	MOV.W	R2,[R7]
	ASL.W	R2,#01H
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	CALL	_NV_Recall
; rs232cmd.c 1543	
; rs232cmd.c 1544						rs232puts( Preset.Author);
	SYMB	LINE, 1544
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+27
	CALL	_rs232puts
; rs232cmd.c 1545						rs232putchar( '\n');
	SYMB	LINE, 1545
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1546					}
; rs232cmd.c 1547				}
; rs232cmd.c 1548			}
	SYMB	LINE, 1548
	BR	_175
_162:
; rs232cmd.c 1549			else
; rs232cmd.c 1550			{
; rs232cmd.c 1551																	// The second parameter, the string, in scanf
; rs232cmd.c 1552																	// should be limited to the definition of
; rs232cmd.c 1553																	// MaxPresetAuthorLength
; rs232cmd.c 1554				if (( ParCnt != 2) || (( sscanf( Cmd, "%d,%7s", &Reg, Author)) != 2))
	SYMB	LINE, 1554
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_163
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 118
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+4
	PUSH.W	R2, R3
	SYMB	SOFF, 122
	MOV.W	R3,#SEG( _157 )
	MOV.W	R2,#SOF( _157 )
	PUSH.W	R2, R3
	SYMB	SOFF, 126
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 114
	CMP.W	R0,#02H
	BEQ	_164
_163:
; rs232cmd.c 1555					SCPIError = SyntaxErr;
	SYMB	LINE, 1555
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_175
_164:
	MOV.W	R1,R5
	MOV.W	R0,R4
; rs232cmd.c 1556				else
; rs232cmd.c 1557				{
; rs232cmd.c 1558					if ( strlen( Author) == MaxPresetAuthorLength)
	SYMB	LINE, 1558
	CALL	_strlen
	CMP.W	R0,#07H
	BNE	_165
; rs232cmd.c 1559						SCPIError = SyntaxErr;
	SYMB	LINE, 1559
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_175
_165:
; rs232cmd.c 1560					else
; rs232cmd.c 1561					{
; rs232cmd.c 1562						if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1562
	MOV.W	R0,[R7]
	BEQ	_166
	CMP.W	[R7],#04H
	BLE	_167
_166:
; rs232cmd.c 1563							SCPIError = DataOutOfRange;
	SYMB	LINE, 1563
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_175
_167:
; rs232cmd.c 1564						else
; rs232cmd.c 1565						{
; rs232cmd.c 1566							NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1566
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+10
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_NV_Recall
; rs232cmd.c 1567							strcpy( Preset.Author, Author);
	SYMB	LINE, 1567
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+27
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+2
	CALL	_strcpy
; rs232cmd.c 1568							NV_Store( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1568
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#064H
	CALL	_NV_Store
; rs232cmd.c 1569						}
; rs232cmd.c 1570					}
; rs232cmd.c 1571				}
; rs232cmd.c 1572			}
; rs232cmd.c 1573		}
	SYMB	LINE, 1573
_175:
; rs232cmd.c 1574	}
	SYMB	LINE, 1574
	ADD.W	R7,#06EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1575	
; rs232cmd.c 1576	/**************************************************************************/
; rs232cmd.c 1577	/* SystemPresetDate																						 RS232CMD.C */
; rs232cmd.c 1578	/*																																				*/
; rs232cmd.c 1579	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 1580	/* Revised:		001016					     																				*/
; rs232cmd.c 1581	/*																																				*/								
; rs232cmd.c 1582	/* Function:	-																														*/
; rs232cmd.c 1583	/* Remarks:		-																														*/
; rs232cmd.c 1584	/* Returns:		-																														*/
; rs232cmd.c 1585	/* Updates:		-																														*/
; rs232cmd.c 1586	/**************************************************************************/
; rs232cmd.c 1587	void SystemPresetDate( void)
; rs232cmd.c 1588	{
	ALIGN	1
	SYMB	LINE, 1588
	PUBLIC	_SystemPresetDate
_SystemPresetDate:
	SYMB	TYPE, 562, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetDate", _SystemPresetDate, #562, 0, 0, 48
	SYMB	ALAB, _SystemPresetDate, #562
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#080H
	SYMB	SOFF, 132
	SYMB	IDEN, "Reg", -132, #16, 130, 5
	SYMB	IDEN, "Preset", -130, #559, 130, 5
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	TYPE, 563, 'Z', #2, 19
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 1589		int Reg;
; rs232cmd.c 1590		PresetObject Preset;
; rs232cmd.c 1591		UI year, month, day;
; rs232cmd.c 1592		char buffer[20];
; rs232cmd.c 1593	
; rs232cmd.c 1594		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1594
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_202
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_202
; rs232cmd.c 1595		{
; rs232cmd.c 1596			if ( CmdRequest)
	SYMB	LINE, 1596
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_189
; rs232cmd.c 1597			{
; rs232cmd.c 1598				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1598
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_185
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 136
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 140
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 132
	CMP.W	R0,#01H
	BEQ	_186
_185:
; rs232cmd.c 1599					SCPIError = SyntaxErr;
	SYMB	LINE, 1599
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_202
_186:
; rs232cmd.c 1600				else
; rs232cmd.c 1601				{
; rs232cmd.c 1602					if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1602
	MOV.W	R0,[R7]
	BEQ	_187
	CMP.W	[R7],#04H
	BLE	_188
_187:
; rs232cmd.c 1603						SCPIError = DataOutOfRange;
	SYMB	LINE, 1603
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_202
_188:
; rs232cmd.c 1604					else
; rs232cmd.c 1605					{
; rs232cmd.c 1606						NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1606
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+2
	MOV.W	R2,[R7]
	ASL.W	R2,#01H
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	CALL	_NV_Recall
; rs232cmd.c 1607	
; rs232cmd.c 1608						day = Preset.Date % 100;
	SYMB	LINE, 1608
	MOV.W	R1,[R7+28]
	MOV.W	R0,[R7+26]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	[R7+28],R1
	MOV.W	[R7+26],R0
	FCALL	__UMODL
	MOV.W	[R7+106],R0
; rs232cmd.c 1609						month = ( Preset.Date / 100) % 100;
	SYMB	LINE, 1609
	MOV.W	R1,[R7+28]
	MOV.W	R0,[R7+26]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+104],R0
; rs232cmd.c 1610						year = ( Preset.Date / 10000);
	SYMB	LINE, 1610
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.W	R1,[R7+28]
	MOV.W	R0,[R7+26]
	FCALL	__UDIVL
	MOV.W	[R7+102],R0
; rs232cmd.c 1611	
; rs232cmd.c 1612						sprintf( buffer, "%d,%d,%d\n", year, month, day);
	SYMB	LINE, 1612
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+108
	MOV.W	R0,[R7+106]
	PUSH.W	R0
	SYMB	SOFF, 134
	MOV.W	R0,[R7+106]
	PUSH.W	R0
	SYMB	SOFF, 136
	MOV.W	R0,[R7+106]
	PUSH.W	R0
	SYMB	SOFF, 138
	MOV.W	R1,#SEG( _183 )
	MOV.W	R0,#SOF( _183 )
	PUSH.W	R0, R1
	SYMB	SOFF, 142
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 132
; rs232cmd.c 1613	
; rs232cmd.c 1614						rs232puts( buffer);
	SYMB	LINE, 1614
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 1615					}
; rs232cmd.c 1616				}
; rs232cmd.c 1617			}
	SYMB	LINE, 1617
	BR	_202
_189:
; rs232cmd.c 1618			else
; rs232cmd.c 1619			{
; rs232cmd.c 1620				if (( ParCnt != 4) || (( sscanf( Cmd, "%d,%d,%d,%d", &Reg, &year, &month, &day)) != 4))
	SYMB	LINE, 1620
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#04H
	BNE	_190
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+102
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+104
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+106
	PUSH.W	R0, R1
	SYMB	SOFF, 136
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+108
	PUSH.W	R0, R1
	SYMB	SOFF, 140
	PUSH.W	R4, R5
	SYMB	SOFF, 144
	PUSH.W	R2, R3
	SYMB	SOFF, 148
	MOV.W	R3,#SEG( _184 )
	MOV.W	R2,#SOF( _184 )
	PUSH.W	R2, R3
	SYMB	SOFF, 152
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#014H
	SYMB	SOFF, 132
	CMP.W	R0,#04H
	BEQ	_191
_190:
; rs232cmd.c 1621					SCPIError = SyntaxErr;
	SYMB	LINE, 1621
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_202
_191:
; rs232cmd.c 1622				else
; rs232cmd.c 1623				{
; rs232cmd.c 1624					if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 1624
	MOV.W	R0,[R7+102]
	MOV.W	R1,[R7+104]
	MOV.W	R2,[R7+106]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_192
; rs232cmd.c 1625						SCPIError = ExecErr;
	SYMB	LINE, 1625
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_202
_192:
; rs232cmd.c 1626					else
; rs232cmd.c 1627					{
; rs232cmd.c 1628						if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1628
	MOV.W	R0,[R7]
	BEQ	_193
	CMP.W	[R7],#04H
	BLE	_194
_193:
; rs232cmd.c 1629							SCPIError = DataOutOfRange;
	SYMB	LINE, 1629
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_202
_194:
; rs232cmd.c 1630						else
; rs232cmd.c 1631						{
; rs232cmd.c 1632							NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1632
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_NV_Recall
; rs232cmd.c 1633							Preset.Date = day + 100*month + 10000*year;
	SYMB	LINE, 1633
	MOV.W	R0,[R7+104]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+106]
	MOV.W	R2,[R7+102]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.W	[R7+28],R1
	MOV.W	[R7+26],R0
; rs232cmd.c 1634							NV_Store( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1634
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#064H
	CALL	_NV_Store
; rs232cmd.c 1635						}
; rs232cmd.c 1636					}				
; rs232cmd.c 1637				}
; rs232cmd.c 1638			}
; rs232cmd.c 1639		}
	SYMB	LINE, 1639
_202:
; rs232cmd.c 1640	}
	SYMB	LINE, 1640
	ADD.W	R7,#080H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1641	
; rs232cmd.c 1642	/**************************************************************************/
; rs232cmd.c 1643	/* SystemPresetDownload																				 RS232CMD.C */
; rs232cmd.c 1644	/*																																				*/
; rs232cmd.c 1645	/* Author:		Kim Engedahl, DEV, 000413	    															*/
; rs232cmd.c 1646	/* Revised:		000413					     																				*/
; rs232cmd.c 1647	/*																																				*/								
; rs232cmd.c 1648	/* Function:	Download a setup to a specific preset withouth disturbing		*/
; rs232cmd.c 1649	/*						the setting/function of the PT5201.										 			*/
; rs232cmd.c 1650	/* Remarks:		--																													*/
; rs232cmd.c 1651	/* Returns:		-																														*/
; rs232cmd.c 1652	/* Updates:		-																														*/
; rs232cmd.c 1653	/**************************************************************************/
; rs232cmd.c 1654	void SystemPresetDownload( void)
; rs232cmd.c 1655	{
	ALIGN	1
	SYMB	LINE, 1655
	PUBLIC	_SystemPresetDownload
_SystemPresetDownload:
	SYMB	TYPE, 565, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetDownload", _SystemPresetDownload, #565, 0, 0, 0
	SYMB	ALAB, _SystemPresetDownload, #565
; rs232cmd.c 1656		;
; rs232cmd.c 1657	}
	SYMB	LINE, 1657
	RET
	SYMB	EFUN
; rs232cmd.c 1658	
; rs232cmd.c 1659	/**************************************************************************/
; rs232cmd.c 1660	/* SystemPresetUpload																					 RS232CMD.C */
; rs232cmd.c 1661	/*																																				*/
; rs232cmd.c 1662	/* Author:		Kim Engedahl, DEV, 000413	    															*/
; rs232cmd.c 1663	/* Revised:		000413					     																				*/
; rs232cmd.c 1664	/*																																				*/								
; rs232cmd.c 1665	/* Function:	Upload a setup from a specific preset withouth disturbing		*/
; rs232cmd.c 1666	/*						the setting/function of the PT5201.											 		*/
; rs232cmd.c 1667	/* Remarks:		--																													*/
; rs232cmd.c 1668	/* Returns:		-																														*/
; rs232cmd.c 1669	/* Updates:		-																														*/
; rs232cmd.c 1670	/**************************************************************************/
; rs232cmd.c 1671	void SystemPresetUpload( void)
; rs232cmd.c 1672	{
	ALIGN	1
	SYMB	LINE, 1672
	PUBLIC	_SystemPresetUpload
_SystemPresetUpload:
	SYMB	TYPE, 566, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetUpload", _SystemPresetUpload, #566, 0, 0, 0
	SYMB	ALAB, _SystemPresetUpload, #566
; rs232cmd.c 1673		;
; rs232cmd.c 1674	}
	SYMB	LINE, 1674
	RET
	SYMB	EFUN
; rs232cmd.c 1675	
; rs232cmd.c 1676	/**************************************************************************/
; rs232cmd.c 1677	/* StatusOperEvent																						 RS232CMD.C */
; rs232cmd.c 1678	/*																																				*/
; rs232cmd.c 1679	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1680	/* Revised:		000402				     																					*/
; rs232cmd.c 1681	/*																																				*/
; rs232cmd.c 1682	/* Function:	Set/read the status operation event register								*/
; rs232cmd.c 1683	/* Remarks:		Reading the event register clears it												*/
; rs232cmd.c 1684	/* Returns:		-																														*/
; rs232cmd.c 1685	/* Updates:		OperEventReg																								*/
; rs232cmd.c 1686	/**************************************************************************/
; rs232cmd.c 1687	void StatusOperEvent( void)
; rs232cmd.c 1688	{
	ALIGN	1
	SYMB	LINE, 1688
	PUBLIC	_StatusOperEvent
_StatusOperEvent:
	SYMB	TYPE, 567, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusOperEvent", _StatusOperEvent, #567, 0, 0, 0
	SYMB	ALAB, _StatusOperEvent, #567
; rs232cmd.c 1689		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1689
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_214
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_214
; rs232cmd.c 1690		{
; rs232cmd.c 1691			if ( ParCnt)
	SYMB	LINE, 1691
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_209
; rs232cmd.c 1692				SCPIError = ParNotAllowed;
	SYMB	LINE, 1692
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_209:
; rs232cmd.c 1693			else
; rs232cmd.c 1694			{
; rs232cmd.c 1695				if ( CmdRequest) {
	SYMB	LINE, 1695
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_210
; rs232cmd.c 1696					rs232printf( 12, "%d\n", OperEventReg);
	SYMB	LINE, 1696
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _OperEventReg )
	MOV.W	R1,#SOF( _OperEventReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
; rs232cmd.c 1697	
; rs232cmd.c 1698					OperEventReg = 0;
	SYMB	LINE, 1698
	MOV.B	ES,#SEG( _OperEventReg )
	MOV.W	R0,#SOF( _OperEventReg )
	MOV.W	[R0],#00H
; rs232cmd.c 1699				}
	SYMB	LINE, 1699
	RET
_210:
; rs232cmd.c 1700				else
; rs232cmd.c 1701					SCPIError = SyntaxErr;
	SYMB	LINE, 1701
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1702			}
; rs232cmd.c 1703		}
	SYMB	LINE, 1703
_214:
; rs232cmd.c 1704	}
	SYMB	LINE, 1704
	RET
	SYMB	EFUN
; rs232cmd.c 1705	
; rs232cmd.c 1706	/**************************************************************************/
; rs232cmd.c 1707	/* StatusOperCondition																				 RS232CMD.C */
; rs232cmd.c 1708	/*																																				*/
; rs232cmd.c 1709	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1710	/* Revised:		000413				     																					*/
; rs232cmd.c 1711	/*																																				*/
; rs232cmd.c 1712	/* Function:	Read the status questionable condition register							*/
; rs232cmd.c 1713	/* Remarks:		No parameters																								*/
; rs232cmd.c 1714	/* Returns:																																*/
; rs232cmd.c 1715	/* Updates:																																*/
; rs232cmd.c 1716	/**************************************************************************/
; rs232cmd.c 1717	void StatusOperCondition( void)
; rs232cmd.c 1718	{
	ALIGN	1
	SYMB	LINE, 1718
	PUBLIC	_StatusOperCondition
_StatusOperCondition:
	SYMB	TYPE, 568, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusOperCondition", _StatusOperCondition, #568, 0, 0, 0
	SYMB	ALAB, _StatusOperCondition, #568
; rs232cmd.c 1719		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1719
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_220
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_220
; rs232cmd.c 1720		{
; rs232cmd.c 1721			if ( ParCnt)
	SYMB	LINE, 1721
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_215
; rs232cmd.c 1722				SCPIError = ParNotAllowed;
	SYMB	LINE, 1722
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_215:
; rs232cmd.c 1723			else
; rs232cmd.c 1724			{
; rs232cmd.c 1725				if ( CmdRequest)
	SYMB	LINE, 1725
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_216
; rs232cmd.c 1726					rs232printf( 12, "%d\n", OperConditionReg);
	SYMB	LINE, 1726
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _OperConditionReg )
	MOV.W	R1,#SOF( _OperConditionReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
	RET
_216:
; rs232cmd.c 1727				else
; rs232cmd.c 1728					SCPIError = SyntaxErr;
	SYMB	LINE, 1728
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1729			}
; rs232cmd.c 1730		}
	SYMB	LINE, 1730
_220:
; rs232cmd.c 1731	}
	SYMB	LINE, 1731
	RET
	SYMB	EFUN
; rs232cmd.c 1732	
; rs232cmd.c 1733	/**************************************************************************/
; rs232cmd.c 1734	/* StatusOperEnable																						 RS232CMD.C */
; rs232cmd.c 1735	/*																																				*/
; rs232cmd.c 1736	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1737	/* Revised:		000413				     																					*/
; rs232cmd.c 1738	/*																																				*/
; rs232cmd.c 1739	/* Function:	Set/read the status operaion enable register								*/
; rs232cmd.c 1740	/* Remarks:		--																													*/
; rs232cmd.c 1741	/* Returns:		-																														*/
; rs232cmd.c 1742	/* Updates:		-																														*/
; rs232cmd.c 1743	/**************************************************************************/
; rs232cmd.c 1744	void StatusOperEnable( void)
; rs232cmd.c 1745	{
	ALIGN	1
	SYMB	LINE, 1745
	PUBLIC	_StatusOperEnable
_StatusOperEnable:
	SYMB	TYPE, 569, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusOperEnable", _StatusOperEnable, #569, 0, 0, 0
	SYMB	ALAB, _StatusOperEnable, #569
	ADDS.W	R7,#0CH
	SYMB	SOFF, 4
	SYMB	IDEN, "Reg", -4, #6, 130, 5
; rs232cmd.c 1746		long	Reg;
; rs232cmd.c 1747	
; rs232cmd.c 1748		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1748
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_232
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_232
; rs232cmd.c 1749		{
; rs232cmd.c 1750			if ( CmdRequest)
	SYMB	LINE, 1750
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_223
; rs232cmd.c 1751			{
; rs232cmd.c 1752				if ( ParCnt)
	SYMB	LINE, 1752
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_222
; rs232cmd.c 1753					SCPIError = ParNotAllowed;
	SYMB	LINE, 1753
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_232
_222:
; rs232cmd.c 1754				else
; rs232cmd.c 1755					rs232printf( 12, "%d\n", OperEnableReg);
	SYMB	LINE, 1755
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _OperEnableReg )
	MOV.W	R1,#SOF( _OperEnableReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 1756			}
	SYMB	LINE, 1756
	BR	_232
_223:
; rs232cmd.c 1757			else
; rs232cmd.c 1758			{
; rs232cmd.c 1759				if (( ParCnt != 1) || ( sscanf( Cmd, "%l", &Reg) != 1))
	SYMB	LINE, 1759
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_224
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _221 )
	MOV.W	R2,#SOF( _221 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	CMP.W	R0,#01H
	BEQ	_225
_224:
; rs232cmd.c 1760				{
; rs232cmd.c 1761					SCPIError = SyntaxErr;	
	SYMB	LINE, 1761
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1762					return;
	SYMB	LINE, 1762
	BR	_232
; rs232cmd.c 1763				}
	SYMB	LINE, 1763
_225:
; rs232cmd.c 1764	
; rs232cmd.c 1765				if ( Reg > 65535)
	SYMB	LINE, 1765
	CMP.W	[R7+2],#00H
	BLT	_226
	BGT	_235
	CMP.W	[R7],#0FFFFH
	BL	_226
_235:
; rs232cmd.c 1766				{
; rs232cmd.c 1767					SCPIError = DataOutOfRange;
	SYMB	LINE, 1767
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1768					return;
	SYMB	LINE, 1768
	BR	_232
; rs232cmd.c 1769				}
	SYMB	LINE, 1769
_226:
; rs232cmd.c 1770	
; rs232cmd.c 1771				OperEnableReg = Reg & 0xEFFF;
	SYMB	LINE, 1771
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	AND.W	R0,#0EFFFH
	MOV.B	ES,#SEG( _OperEnableReg )
	MOV.W	R1,#SOF( _OperEnableReg )
	MOV.W	[R1],R0
; rs232cmd.c 1772			}
; rs232cmd.c 1773		}
; rs232cmd.c 1774	}
	SYMB	LINE, 1774
_232:
	ADDS.W	R7,#04H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1775	
; rs232cmd.c 1776	/***************************************************************************/
; rs232cmd.c 1777	/* StatusQuestEvent																			 			 RS232CMD.C */
; rs232cmd.c 1778	/*																																				*/
; rs232cmd.c 1779	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1780	/* Revised:		000413				     																					*/
; rs232cmd.c 1781	/*																																				*/
; rs232cmd.c 1782	/* Function:	Set/read the status questionablen event register						*/
; rs232cmd.c 1783	/* Remarks:		Reading the event register clears it												*/
; rs232cmd.c 1784	/* Returns:		-																														*/
; rs232cmd.c 1785	/* Updates:		QuestEventReg																								*/
; rs232cmd.c 1786	/***************************************************************************/
; rs232cmd.c 1787	void StatusQuestEvent( void)
; rs232cmd.c 1788	{
	ALIGN	1
	SYMB	LINE, 1788
	PUBLIC	_StatusQuestEvent
_StatusQuestEvent:
	SYMB	TYPE, 570, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusQuestEvent", _StatusQuestEvent, #570, 0, 0, 0
	SYMB	ALAB, _StatusQuestEvent, #570
; rs232cmd.c 1789		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1789
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_241
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_241
; rs232cmd.c 1790		{
; rs232cmd.c 1791			if ( ParCnt)
	SYMB	LINE, 1791
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_236
; rs232cmd.c 1792				SCPIError = ParNotAllowed;
	SYMB	LINE, 1792
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_236:
; rs232cmd.c 1793			else
; rs232cmd.c 1794			{
; rs232cmd.c 1795				if ( CmdRequest)
	SYMB	LINE, 1795
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_237
; rs232cmd.c 1796				{
; rs232cmd.c 1797					rs232printf( 12, "%d\n", QuestEventReg);
	SYMB	LINE, 1797
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _QuestEventReg )
	MOV.W	R1,#SOF( _QuestEventReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
; rs232cmd.c 1798	
; rs232cmd.c 1799					QuestEventReg = 0;
	SYMB	LINE, 1799
	MOV.B	ES,#SEG( _QuestEventReg )
	MOV.W	R0,#SOF( _QuestEventReg )
	MOV.W	[R0],#00H
; rs232cmd.c 1800				}
	SYMB	LINE, 1800
	RET
_237:
; rs232cmd.c 1801				else
; rs232cmd.c 1802					SCPIError = SyntaxErr;
	SYMB	LINE, 1802
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1803			}
; rs232cmd.c 1804		}
	SYMB	LINE, 1804
_241:
; rs232cmd.c 1805	}
	SYMB	LINE, 1805
	RET
	SYMB	EFUN
; rs232cmd.c 1806	
; rs232cmd.c 1807	/**************************************************************************/
; rs232cmd.c 1808	/* StatusQuestCondition																		 		 RS232CMD.C */
; rs232cmd.c 1809	/*																																				*/
; rs232cmd.c 1810	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1811	/* Revised:		000413				     																					*/
; rs232cmd.c 1812	/*																																				*/
; rs232cmd.c 1813	/* Function:	Read the status operation condition register								*/
; rs232cmd.c 1814	/* Remarks:		No parameters																								*/
; rs232cmd.c 1815	/* Returns:		-																														*/
; rs232cmd.c 1816	/* Updates:		-																														*/
; rs232cmd.c 1817	/**************************************************************************/
; rs232cmd.c 1818	void StatusQuestCondition( void)
; rs232cmd.c 1819	{
	ALIGN	1
	SYMB	LINE, 1819
	PUBLIC	_StatusQuestCondition
_StatusQuestCondition:
	SYMB	TYPE, 571, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusQuestCondition", _StatusQuestCondition, #571, 0, 0, 0
	SYMB	ALAB, _StatusQuestCondition, #571
; rs232cmd.c 1820		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1820
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_247
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_247
; rs232cmd.c 1821		{
; rs232cmd.c 1822			if ( ParCnt)
	SYMB	LINE, 1822
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_242
; rs232cmd.c 1823				SCPIError = ParNotAllowed;
	SYMB	LINE, 1823
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_242:
; rs232cmd.c 1824			else
; rs232cmd.c 1825			{
; rs232cmd.c 1826				if ( CmdRequest)
	SYMB	LINE, 1826
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_243
; rs232cmd.c 1827				rs232printf( 12, "%d\n", QuestConditionReg);
	SYMB	LINE, 1827
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _QuestConditionReg )
	MOV.W	R1,#SOF( _QuestConditionReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
	RET
_243:
; rs232cmd.c 1828				else
; rs232cmd.c 1829					SCPIError = SyntaxErr;
	SYMB	LINE, 1829
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1830			}
; rs232cmd.c 1831		}
	SYMB	LINE, 1831
_247:
; rs232cmd.c 1832	}
	SYMB	LINE, 1832
	RET
	SYMB	EFUN
; rs232cmd.c 1833	
; rs232cmd.c 1834	/**************************************************************************/
; rs232cmd.c 1835	/* StatusQuestEnable																					 RS232CMD.C */
; rs232cmd.c 1836	/*																																				*/
; rs232cmd.c 1837	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1838	/* Revised:		000413				     																					*/
; rs232cmd.c 1839	/*																																				*/
; rs232cmd.c 1840	/* Function:	Set/read the status questionable enable register						*/
; rs232cmd.c 1841	/* Remarks:		--																													*/
; rs232cmd.c 1842	/* Returns:																																*/
; rs232cmd.c 1843	/* Updates:																																*/
; rs232cmd.c 1844	/**************************************************************************/
; rs232cmd.c 1845	void StatusQuestEnable( void)
; rs232cmd.c 1846	{
	ALIGN	1
	SYMB	LINE, 1846
	PUBLIC	_StatusQuestEnable
_StatusQuestEnable:
	SYMB	TYPE, 572, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusQuestEnable", _StatusQuestEnable, #572, 0, 0, 0
	SYMB	ALAB, _StatusQuestEnable, #572
	ADDS.W	R7,#0CH
	SYMB	SOFF, 4
	SYMB	IDEN, "Reg", -4, #6, 130, 5
; rs232cmd.c 1847		long	Reg;
; rs232cmd.c 1848	
; rs232cmd.c 1849		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1849
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_258
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_258
; rs232cmd.c 1850		{
; rs232cmd.c 1851			if ( CmdRequest)
	SYMB	LINE, 1851
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_249
; rs232cmd.c 1852			{
; rs232cmd.c 1853				if ( ParCnt)
	SYMB	LINE, 1853
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_248
; rs232cmd.c 1854					SCPIError = ParNotAllowed;
	SYMB	LINE, 1854
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_258
_248:
; rs232cmd.c 1855				else
; rs232cmd.c 1856					rs232printf( 12, "%d\n", QuestEnableReg);
	SYMB	LINE, 1856
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _QuestEnableReg )
	MOV.W	R1,#SOF( _QuestEnableReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 1857			}
	SYMB	LINE, 1857
	BR	_258
_249:
; rs232cmd.c 1858			else
; rs232cmd.c 1859			{
; rs232cmd.c 1860				if (( ParCnt != 1) || ( sscanf( Cmd, "%l", &Reg) != 1))
	SYMB	LINE, 1860
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_250
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _221 )
	MOV.W	R2,#SOF( _221 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	CMP.W	R0,#01H
	BEQ	_251
_250:
; rs232cmd.c 1861				{
; rs232cmd.c 1862					SCPIError = SyntaxErr;	
	SYMB	LINE, 1862
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1863					return;
	SYMB	LINE, 1863
	BR	_258
; rs232cmd.c 1864				}
	SYMB	LINE, 1864
_251:
; rs232cmd.c 1865	
; rs232cmd.c 1866				if ( Reg > 65535)
	SYMB	LINE, 1866
	CMP.W	[R7+2],#00H
	BLT	_252
	BGT	_261
	CMP.W	[R7],#0FFFFH
	BL	_252
_261:
; rs232cmd.c 1867				{
; rs232cmd.c 1868					SCPIError = DataOutOfRange;
	SYMB	LINE, 1868
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1869					return;
	SYMB	LINE, 1869
	BR	_258
; rs232cmd.c 1870				}
	SYMB	LINE, 1870
_252:
; rs232cmd.c 1871	
; rs232cmd.c 1872				QuestEnableReg = Reg & 0xEFFF;
	SYMB	LINE, 1872
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	AND.W	R0,#0EFFFH
	MOV.B	ES,#SEG( _QuestEnableReg )
	MOV.W	R1,#SOF( _QuestEnableReg )
	MOV.W	[R1],R0
; rs232cmd.c 1873			}
; rs232cmd.c 1874		}
; rs232cmd.c 1875	}
	SYMB	LINE, 1875
_258:
	ADDS.W	R7,#04H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1876	
; rs232cmd.c 1877	/**************************************************************************/
; rs232cmd.c 1878	/* StatusPreset																								 RS232CMD.C */
; rs232cmd.c 1879	/*																																				*/
; rs232cmd.c 1880	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 1881	/* Revised:		000617				     																					*/
; rs232cmd.c 1882	/*																																				*/
; rs232cmd.c 1883	/* Function:																															*/
; rs232cmd.c 1884	/* Remarks:																																*/
; rs232cmd.c 1885	/* Returns:																																*/
; rs232cmd.c 1886	/* Updates:																																*/
; rs232cmd.c 1887	/**************************************************************************/
; rs232cmd.c 1888	void StatusPreset( void)
; rs232cmd.c 1889	{
	ALIGN	1
	SYMB	LINE, 1889
	PUBLIC	_StatusPreset
_StatusPreset:
	SYMB	TYPE, 573, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusPreset", _StatusPreset, #573, 0, 0, 0
	SYMB	ALAB, _StatusPreset, #573
; rs232cmd.c 1890		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1890
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_270
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_270
; rs232cmd.c 1891		{
; rs232cmd.c 1892			if ( CmdRequest)
	SYMB	LINE, 1892
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_266
; rs232cmd.c 1893			{
; rs232cmd.c 1894				if ( ParCnt)
	SYMB	LINE, 1894
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_263
; rs232cmd.c 1895					SCPIError = SyntaxErr;
	SYMB	LINE, 1895
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_263:
; rs232cmd.c 1896				else
; rs232cmd.c 1897				{
; rs232cmd.c 1898					if ( Settings.ActivePreset)
	SYMB	LINE, 1898
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.W	R0,[R0]
	BEQ	_264
; rs232cmd.c 1899						rs232putchar( '0' + Settings.ActivePreset);
	SYMB	LINE, 1899
	ADD.B	R0L,#030H
	CALL	_rs232putchar
	BR	_265
_264:
; rs232cmd.c 1900					else
; rs232cmd.c 1901						rs232puts( "OFF");
	SYMB	LINE, 1901
	MOV.W	R1,#SEG( _262 )
	MOV.W	R0,#SOF( _262 )
	CALL	_rs232puts
_265:
; rs232cmd.c 1902	
; rs232cmd.c 1903					rs232putchar( '\n');
	SYMB	LINE, 1903
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1904				}
; rs232cmd.c 1905			}
	SYMB	LINE, 1905
	RET
_266:
; rs232cmd.c 1906			else
; rs232cmd.c 1907				SCPIError = SyntaxErr;
	SYMB	LINE, 1907
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1908		}
	SYMB	LINE, 1908
_270:
; rs232cmd.c 1909	}
	SYMB	LINE, 1909
	RET
	SYMB	EFUN
; rs232cmd.c 1910	
; rs232cmd.c 1911	/**************************************************************************/
; rs232cmd.c 1912	/* GenlockGen															 	   								 RS232CMD.C	*/
; rs232cmd.c 1913	/*																																				*/
; rs232cmd.c 1914	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 1915	/* Revised:		001219				     																					*/
; rs232cmd.c 1916	/*																																				*/
; rs232cmd.c 1917	/* Function:	Return the Genlock Configuration.														*/
; rs232cmd.c 1918	/* Remarks:		Request only																								*/
; rs232cmd.c 1919	/* Returns:		--																													*/
; rs232cmd.c 1920	/* Updates:	  --																													*/
; rs232cmd.c 1921	/**************************************************************************/
; rs232cmd.c 1922	void GenlockGen( void)
; rs232cmd.c 1923	{
	ALIGN	1
	SYMB	LINE, 1923
	PUBLIC	_GenlockGen
_GenlockGen:
	SYMB	TYPE, 574, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGen", _GenlockGen, #574, 0, 0, 48
	SYMB	ALAB, _GenlockGen, #574
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 1924		char code *str;
; rs232cmd.c 1925	
; rs232cmd.c 1926		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1926
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_282
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_282
; rs232cmd.c 1927		{
; rs232cmd.c 1928			if ( !CmdRequest)
	SYMB	LINE, 1928
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_271
; rs232cmd.c 1929					SCPIError = SyntaxErr;
	SYMB	LINE, 1929
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_282
_271:
; rs232cmd.c 1930			else
; rs232cmd.c 1931			{
; rs232cmd.c 1932				if ( ParCnt)
	SYMB	LINE, 1932
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_272
; rs232cmd.c 1933					SCPIError = ParNotAllowed;
	SYMB	LINE, 1933
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_282
_272:
; rs232cmd.c 1934				else
; rs232cmd.c 1935				{
; rs232cmd.c 1936	            if ( GenlockStatus)
	SYMB	LINE, 1936
	MOV.B	ES,#SEG( _GenlockStatus )
	MOV.W	R0,#SOF( _GenlockStatus )
	MOV.B	R0L,[R0]
	BEQ	_273
; rs232cmd.c 1937	   				str = GENLOCKEDParTxt;
	SYMB	LINE, 1937
	MOV.W	R5,#SEG( _GENLOCKEDParTxt )
	MOV.W	R4,#SOF( _GENLOCKEDParTxt )
	SYMB	LTIM, "str", 19, 0, 205
	BR	_274
_273:
; rs232cmd.c 1938	            else
; rs232cmd.c 1939	   				str = UNLOCKEDParTxt;
	SYMB	LINE, 1939
	MOV.W	R5,#SEG( _UNLOCKEDParTxt )
	MOV.W	R4,#SOF( _UNLOCKEDParTxt )
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
_274:
; rs232cmd.c 1940	
; rs232cmd.c 1941	     			while ( *str)
	SYMB	LINE, 1941
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_276
_275:
; rs232cmd.c 1942	      			rs232putchar( *str++);
	SYMB	LINE, 1942
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 1941
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_275
	SYMB	LINE, 1942
_276:
; rs232cmd.c 1943	
; rs232cmd.c 1944	   			rs232putchar(',');
	SYMB	LINE, 1944
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 1945	
; rs232cmd.c 1946					str = GenlockSystemPar[GenlockSetup.System].LongName;
	SYMB	LINE, 1946
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _GenlockSystemPar )
	MOV.W	R0,#SOF( _GenlockSystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_283
	ADDS.B	CS,#01H
_283:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 1947	
; rs232cmd.c 1948					while ( *str)
	SYMB	LINE, 1948
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_278
_277:
; rs232cmd.c 1949						rs232putchar( *str++);
	SYMB	LINE, 1949
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 1948
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_277
	SYMB	LINE, 1949
_278:
; rs232cmd.c 1950	
; rs232cmd.c 1951					rs232putchar(',');
	SYMB	LINE, 1951
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 1952	
; rs232cmd.c 1953					PrintSamplesToFLT( GenlockSetup.System, GenlockSetup.Delay);
	SYMB	LINE, 1953
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _GenlockSetup+2 )
	MOV.W	R3,#SOF( _GenlockSetup+2 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	CALL	_PrintSamplesToFLT
; rs232cmd.c 1954	
; rs232cmd.c 1955					rs232putchar ( '\n');
	SYMB	LINE, 1955
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1956				}
; rs232cmd.c 1957			}
; rs232cmd.c 1958		}
	SYMB	LINE, 1958
_282:
; rs232cmd.c 1959	}
	SYMB	LINE, 1959
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 1960	
; rs232cmd.c 1961	/**************************************************************************/
; rs232cmd.c 1962	/* GenlockGenSystem																		 	   		 RS232CMD.C	*/
; rs232cmd.c 1963	/*																																				*/
; rs232cmd.c 1964	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 1965	/* Revised:		000525				     																					*/
; rs232cmd.c 1966	/*																																				*/
; rs232cmd.c 1967	/* Function:	Handle the genlock system command														*/
; rs232cmd.c 1968	/* Remarks:		--																													*/
; rs232cmd.c 1969	/* Returns:		--																													*/
; rs232cmd.c 1970	/* Updates:		--																													*/
; rs232cmd.c 1971	/**************************************************************************/
; rs232cmd.c 1972	void GenlockGenSystem( void)
; rs232cmd.c 1973	{
	ALIGN	1
	SYMB	LINE, 1973
	PUBLIC	_GenlockGenSystem
_GenlockGenSystem:
	SYMB	TYPE, 575, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenSystem", _GenlockGenSystem, #575, 0, 0, 48
	SYMB	ALAB, _GenlockGenSystem, #575
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 1974		int system;
; rs232cmd.c 1975		char code *str;
; rs232cmd.c 1976	
; rs232cmd.c 1977		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1977
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_295
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_295
; rs232cmd.c 1978		{
; rs232cmd.c 1979			if ( CmdRequest)
	SYMB	LINE, 1979
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_287
; rs232cmd.c 1980			{
; rs232cmd.c 1981				if ( ParCnt)
	SYMB	LINE, 1981
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_284
; rs232cmd.c 1982					SCPIError = ParNotAllowed;
	SYMB	LINE, 1982
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_295
_284:
; rs232cmd.c 1983				else
; rs232cmd.c 1984				{
; rs232cmd.c 1985					str = GenlockSystemPar[GenlockSetup.System].LongName;
	SYMB	LINE, 1985
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _GenlockSystemPar )
	MOV.W	R0,#SOF( _GenlockSystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_296
	ADDS.B	CS,#01H
_296:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 1986	
; rs232cmd.c 1987					while ( *str)
	SYMB	LINE, 1987
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_286
_285:
; rs232cmd.c 1988						rs232putchar( *str++);
	SYMB	LINE, 1988
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 1987
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_285
	SYMB	LINE, 1988
_286:
; rs232cmd.c 1989	
; rs232cmd.c 1990					rs232putchar('\n');
	SYMB	LINE, 1990
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1991				}
; rs232cmd.c 1992			}
	SYMB	LINE, 1992
	BR	_295
_287:
; rs232cmd.c 1993			else
; rs232cmd.c 1994			{
; rs232cmd.c 1995				if ( ParCnt != 1)
	SYMB	LINE, 1995
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_288
; rs232cmd.c 1996					SCPIError = SyntaxErr;
	SYMB	LINE, 1996
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_295
_288:
; rs232cmd.c 1997				else
; rs232cmd.c 1998				{
; rs232cmd.c 1999					system = FindParameter( Cmd, GenlockSystemPar);
	SYMB	LINE, 1999
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _GenlockSystemPar )
	MOV.W	R2,#SOF( _GenlockSystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 2000		
; rs232cmd.c 2001					if ( system > -1)
	SYMB	LINE, 2001
	CMP.W	R0,#0FFFFH
	BLE	_289
; rs232cmd.c 2002						SetGenlockSystem( system);
	SYMB	LINE, 2002
	CALL	_SetGenlockSystem
	SYMB	LTIM, "system", 2, 0, 77
	BR	_295
_289:
; rs232cmd.c 2003					else
; rs232cmd.c 2004						SCPIError = DataOutOfRange;
	SYMB	LINE, 2004
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2005				}
; rs232cmd.c 2006			}
; rs232cmd.c 2007		}
	SYMB	LINE, 2007
_295:
; rs232cmd.c 2008	}
	SYMB	LINE, 2008
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2009	
; rs232cmd.c 2010	/**************************************************************************/
; rs232cmd.c 2011	/* GenlockGenDelay		 								  		 								   RS232CMD.C */
; rs232cmd.c 2012	/*																																				*/
; rs232cmd.c 2013	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 2014	/* Revised:		000525				     																					*/
; rs232cmd.c 2015	/*																																				*/
; rs232cmd.c 2016	/* Function:	Handle the genlock timing command														*/
; rs232cmd.c 2017	/* Remarks:		--																													*/
; rs232cmd.c 2018	/* Returns:		--																													*/
; rs232cmd.c 2019	/* Updates:		--																													*/
; rs232cmd.c 2020	/**************************************************************************/
; rs232cmd.c 2021	void GenlockGenDelay( void)
; rs232cmd.c 2022	{
	ALIGN	1
	SYMB	LINE, 2022
	PUBLIC	_GenlockGenDelay
_GenlockGenDelay:
	SYMB	TYPE, 576, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenDelay", _GenlockGenDelay, #576, 0, 0, 48
	SYMB	ALAB, _GenlockGenDelay, #576
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	IDEN, "field", -12, #16, 130, 5
	SYMB	IDEN, "line", -10, #16, 130, 5
	SYMB	IDEN, "offset", -8, #10, 130, 5
	SYMB	IDEN, "samples", -1, #6, 130, 5
	SYMB	LTIM, "samples", -1, 0, 69
; rs232cmd.c 2023		int field, line;
; rs232cmd.c 2024		float offset;
; rs232cmd.c 2025		long samples;
; rs232cmd.c 2026	
; rs232cmd.c 2027		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2027
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_310
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_310
; rs232cmd.c 2028		{
; rs232cmd.c 2029			if ( CmdRequest)
	SYMB	LINE, 2029
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_301
; rs232cmd.c 2030			{
; rs232cmd.c 2031				if ( ParCnt)
	SYMB	LINE, 2031
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_300
; rs232cmd.c 2032					SCPIError = ParNotAllowed;
	SYMB	LINE, 2032
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_310
_300:
; rs232cmd.c 2033				else
; rs232cmd.c 2034				{
; rs232cmd.c 2035					PrintSamplesToFLT( GenlockSetup.System, GenlockSetup.Delay);
	SYMB	LINE, 2035
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _GenlockSetup+2 )
	MOV.W	R3,#SOF( _GenlockSetup+2 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2036	
; rs232cmd.c 2037					rs232putchar ( '\n');
	SYMB	LINE, 2037
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2038				}
; rs232cmd.c 2039			}
	SYMB	LINE, 2039
	BR	_310
_301:
; rs232cmd.c 2040			else
; rs232cmd.c 2041			{
; rs232cmd.c 2042				if (( ParCnt != 3) || ( sscanf( Cmd, "%d,%d,%f", &field, &line, &offset) != 3))
	SYMB	LINE, 2042
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_302
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 16
	PUSH.W	R4, R5
	SYMB	SOFF, 20
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	MOV.W	R3,#SEG( _299 )
	MOV.W	R2,#SOF( _299 )
	PUSH.W	R2, R3
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 12
	CMP.W	R0,#03H
	BEQ	_303
_302:
; rs232cmd.c 2043					SCPIError = SyntaxErr;
	SYMB	LINE, 2043
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_310
_303:
; rs232cmd.c 2044				else
; rs232cmd.c 2045				{
; rs232cmd.c 2046					if (( samples = FLTToSamples( GenlockSetup.System, field, line, offset)) == -1)
	SYMB	LINE, 2046
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MOV.W	R1,[R7]
	MOV.W	R2,[R7+2]
	MOV.W	R5,[R7+6]
	MOV.W	R4,[R7+4]
	PUSH.W	R4, R5
	SYMB	SOFF, 16
	CALL	_FLTToSamples
	ADDS.W	R7,#04H
	SYMB	SOFF, 12
	MOV.W	R3,R1
	MOV.W	R2,R0
	CMP.W	R3,#0FFFFH
	BNE	_313
	CMP.W	R2,#0FFFFH
_313:
	BNE	_304
; rs232cmd.c 2047						SCPIError = ExecErr;
	SYMB	LINE, 2047
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_310
_304:
; rs232cmd.c 2048					else
; rs232cmd.c 2049						SetGenlockDelay( samples);
	SYMB	LINE, 2049
	CALL	_SetGenlockDelay
; rs232cmd.c 2050				}
; rs232cmd.c 2051			}
; rs232cmd.c 2052		}
	SYMB	LINE, 2052
_310:
; rs232cmd.c 2053	}
	SYMB	LINE, 2053
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2054	
; rs232cmd.c 2055	/**************************************************************************/
; rs232cmd.c 2056	/* GenlockGenCalibrateEnable	 				  		 								   RS232CMD.C */
; rs232cmd.c 2057	/*																																				*/
; rs232cmd.c 2058	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 2059	/* Revised:		000622				     																					*/
; rs232cmd.c 2060	/*																																				*/
; rs232cmd.c 2061	/* Function:	Handle the genlock calibration															*/
; rs232cmd.c 2062	/* Remarks:		--																													*/
; rs232cmd.c 2063	/* Returns:		--																													*/
; rs232cmd.c 2064	/* Updates:		--																													*/
; rs232cmd.c 2065	/**************************************************************************/
; rs232cmd.c 2066	void GenlockGenCalibrateEnable( void)
; rs232cmd.c 2067	{
	ALIGN	1
	SYMB	LINE, 2067
	PUBLIC	_GenlockGenCalibrateEnable
_GenlockGenCalibrateEnable:
	SYMB	TYPE, 577, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenCalibrateEnable", _GenlockGenCalibrateEnable, #577, 0, 0, 48
	SYMB	ALAB, _GenlockGenCalibrateEnable, #577
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; rs232cmd.c 2068		char code *str;
; rs232cmd.c 2069		int tmp;
; rs232cmd.c 2070	
; rs232cmd.c 2071		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2071
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_330
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_330
; rs232cmd.c 2072		{
; rs232cmd.c 2073			if ( CmdRequest)
	SYMB	LINE, 2073
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_320
; rs232cmd.c 2074			{
; rs232cmd.c 2075				if ( ParCnt)
	SYMB	LINE, 2075
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_317
; rs232cmd.c 2076					SCPIError = SyntaxErr;
	SYMB	LINE, 2076
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_330
_317:
; rs232cmd.c 2077				else
; rs232cmd.c 2078				{
; rs232cmd.c 2079					str = OffOnPar[GenlockCalEnable].LongName;
	SYMB	LINE, 2079
	MOV.B	ES,#SEG( _GenlockCalEnable )
	MOV.W	R0,#SOF( _GenlockCalEnable )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _OffOnPar )
	MOV.W	R0,#SOF( _OffOnPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_331
	ADDS.B	CS,#01H
_331:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2080	
; rs232cmd.c 2081					while ( *str)
	SYMB	LINE, 2081
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_319
_318:
; rs232cmd.c 2082						rs232putchar( *str++);
	SYMB	LINE, 2082
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2081
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_318
	SYMB	LINE, 2082
_319:
; rs232cmd.c 2083	
; rs232cmd.c 2084					rs232putchar('\n');
	SYMB	LINE, 2084
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2085				}
; rs232cmd.c 2086			}
	SYMB	LINE, 2086
	BR	_330
_320:
; rs232cmd.c 2087			else
; rs232cmd.c 2088			{
; rs232cmd.c 2089				if ( ParCnt != 1)
	SYMB	LINE, 2089
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_321
; rs232cmd.c 2090					SCPIError = SyntaxErr;
	SYMB	LINE, 2090
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_330
_321:
; rs232cmd.c 2091				else
; rs232cmd.c 2092				{
; rs232cmd.c 2093					tmp = FindParameter( Cmd, OffOnPar);
	SYMB	LINE, 2093
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _OffOnPar )
	MOV.W	R2,#SOF( _OffOnPar )
	CALL	_FindParameter
	SYMB	LTIM, "tmp", 2, 0, 205
; rs232cmd.c 2094		
; rs232cmd.c 2095					if ( tmp > -1)
	SYMB	LINE, 2095
	CMP.W	R0,#0FFFFH
	BLE	_323
; rs232cmd.c 2096					{
; rs232cmd.c 2097						GenlockCalEnable = tmp;
	SYMB	LINE, 2097
	MOV.W	R1,R0
	MOV.B	ES,#SEG( _GenlockCalEnable )
	MOV.W	R2,#SOF( _GenlockCalEnable )
	MOV.B	[R2],R1L
; rs232cmd.c 2098	
; rs232cmd.c 2099						if ( tmp == 0)
	SYMB	LINE, 2099
	OR.W	R0,R0
	BNE	_322
; rs232cmd.c 2100						{
; rs232cmd.c 2101							SetGenlockSystem( GenlockSetup.System);
	SYMB	LINE, 2101
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	SYMB	LTIM, "tmp", 2, 0, 77
	MOVS.B	R0H,#00H
	CALL	_SetGenlockSystem
; rs232cmd.c 2102	
; rs232cmd.c 2103							SetBBSystem( BBOutput1, BBSetup[BBOutput1].System);
	SYMB	LINE, 2103
	MOV.B	ES,#SEG( _BBSetup )
	MOV.W	R0,#SOF( _BBSetup )
	MOV.B	R0L,[R0]
	MOV.B	R1L,R0L
	MOVS.B	R1H,#00H
	MOV.W	R0,#00H
	CALL	_SetBBSystem
; rs232cmd.c 2104	
; rs232cmd.c 2105							BBControlPort = 0;
	SYMB	LINE, 2105
	MOV.B	ES,#SEG( _BBControlPort )
	MOV.W	R0,#SOF( _BBControlPort )
	MOV.W	[R0],#00H
; rs232cmd.c 2106						}
	SYMB	LINE, 2106
	BR	_330
_322:
; rs232cmd.c 2107						else
; rs232cmd.c 2108						{
; rs232cmd.c 2109																								// Force genlock internal mode
; rs232cmd.c 2110							sio0SndCommand( 12, SPG_V24_address, "GM0");
	SYMB	LINE, 2110
	MOV.W	R0,#0CH
	MOV.W	R3,#SEG( _314 )
	MOV.W	R2,#SOF( _314 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	MOV.W	R1,#015H
	CALL	_sio0SndCommand
	ADDS.W	R7,#04H
	SYMB	SOFF, 4
; rs232cmd.c 2111	
; rs232cmd.c 2112																								// Force BB1 PAL mode
; rs232cmd.c 2113							sio0SndCommand( 20, BB_V24_address, "HG%ld;", BBSetup[BBOutput1].Delay);
	SYMB	LINE, 2113
	MOV.W	R1,#034H
	MOV.B	ES,#SEG( _BBSetup+2 )
	MOV.W	R3,#SOF( _BBSetup+2 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _315 )
	MOV.W	R2,#SOF( _315 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	MOV.W	R0,#014H
	CALL	_sio0SndCommand
	ADD.W	R7,#08H
	SYMB	SOFF, 4
; rs232cmd.c 2114	
; rs232cmd.c 2115							BBControlPort = 1;								// Set BB1 to F45MHz
	SYMB	LINE, 2115
	MOV.B	ES,#SEG( _BBControlPort )
	MOV.W	R0,#SOF( _BBControlPort )
	MOV.W	[R0],#01H
; rs232cmd.c 2116	
; rs232cmd.c 2117							GenlockCalValue = Calibration.GenlockCalibration.DACUserValue;
	SYMB	LINE, 2117
	MOV.B	ES,#SEG( _Calibration+120 )
	MOV.W	R0,#SOF( _Calibration+120 )
	MOV.W	R0,[R0]
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R1,#SOF( _GenlockCalValue )
	MOV.W	[R1],R0
; rs232cmd.c 2118	
; rs232cmd.c 2119							sio0SndCommand( 20, SPG_V24_address, "GX%d;", GenlockCalValue);
	SYMB	LINE, 2119
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	R0,[R0]
	PUSH.W	R0
	SYMB	SOFF, 6
	MOV.W	R1,#SEG( _316 )
	MOV.W	R0,#SOF( _316 )
	PUSH.W	R0, R1
	SYMB	SOFF, 10
	MOV.W	R0,#014H
	MOV.W	R1,#015H
	CALL	_sio0SndCommand
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2120						}
; rs232cmd.c 2121					}
	SYMB	LINE, 2121
	BR	_330
_323:
; rs232cmd.c 2122					else
; rs232cmd.c 2123						SCPIError = DataOutOfRange;
	SYMB	LINE, 2123
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2124				}
; rs232cmd.c 2125			}
; rs232cmd.c 2126		}
	SYMB	LINE, 2126
_330:
; rs232cmd.c 2127	}
	SYMB	LINE, 2127
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2128	
; rs232cmd.c 2129	/**************************************************************************/
; rs232cmd.c 2130	/* GenlockGenCalibrateAdjust 	 				  		 								   RS232CMD.C */
; rs232cmd.c 2131	/*																																				*/
; rs232cmd.c 2132	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 2133	/* Revised:		001016				     																					*/
; rs232cmd.c 2134	/*																																				*/
; rs232cmd.c 2135	/* Function:	Handle the genlock calibration															*/
; rs232cmd.c 2136	/* Remarks:		--																													*/
; rs232cmd.c 2137	/* Returns:		--																													*/
; rs232cmd.c 2138	/* Updates:		--																													*/
; rs232cmd.c 2139	/**************************************************************************/
; rs232cmd.c 2140	void GenlockGenCalibrateAdjust( void)
; rs232cmd.c 2141	{
	ALIGN	1
	SYMB	LINE, 2141
	PUBLIC	_GenlockGenCalibrateAdjust
_GenlockGenCalibrateAdjust:
	SYMB	TYPE, 578, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenCalibrateAdjust", _GenlockGenCalibrateAdjust, #578, 0, 0, 48
	SYMB	ALAB, _GenlockGenCalibrateAdjust, #578
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
	SYMB	IDEN, "MinVal", -1, #18, 130, 5
	SYMB	LTIM, "MinVal", -1, 0, 69
	SYMB	IDEN, "MaxVal", -1, #18, 130, 5
	SYMB	LTIM, "MaxVal", -1, 0, 69
; rs232cmd.c 2142		int tmp;
; rs232cmd.c 2143		UI MinVal, MaxVal;
; rs232cmd.c 2144	
; rs232cmd.c 2145		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2145
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_350
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_350
; rs232cmd.c 2146		{
; rs232cmd.c 2147			if ( CmdRequest)
	SYMB	LINE, 2147
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_335
; rs232cmd.c 2148				SCPIError = SyntaxErr;
	SYMB	LINE, 2148
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_350
_335:
; rs232cmd.c 2149			else
; rs232cmd.c 2150			{
; rs232cmd.c 2151				if ( ParCnt == 0)
	SYMB	LINE, 2151
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BNE	_336
; rs232cmd.c 2152					SCPIError = SyntaxErr;
	SYMB	LINE, 2152
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_350
_336:
; rs232cmd.c 2153				else
; rs232cmd.c 2154				{
; rs232cmd.c 2155					MinVal = Calibration.GenlockCalibration.DACFactValue - 150;
	SYMB	LINE, 2155
	MOV.B	ES,#SEG( _Calibration+118 )
	MOV.W	R0,#SOF( _Calibration+118 )
	MOV.W	R0,[R0]
	MOV.W	R5,R0
	MOV.W	R4,R5
	SUB.W	R5,#096H
	SYMB	LTIM, "MinVal", 22, 0, 205
; rs232cmd.c 2156					MaxVal = Calibration.GenlockCalibration.DACFactValue + 150;
	SYMB	LINE, 2156
	ADD.W	R4,#096H
	SYMB	LTIM, "MaxVal", 18, 0, 205
; rs232cmd.c 2157	
; rs232cmd.c 2158					tmp = FindParameter( Cmd, MinMaxPar);
	SYMB	LINE, 2158
	MOV.W	R3,#SEG( _MinMaxPar )
	MOV.W	R2,#SOF( _MinMaxPar )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_FindParameter
	SYMB	LTIM, "tmp", 2, 0, 205
; rs232cmd.c 2159		
; rs232cmd.c 2160					if ( tmp > -1)
	SYMB	LINE, 2160
	CMP.W	R0,#0FFFFH
	BLE	_339
; rs232cmd.c 2161					{
; rs232cmd.c 2162						if ( tmp == 0)
	SYMB	LINE, 2162
	OR.W	R0,R0
	BNE	_337
; rs232cmd.c 2163							GenlockCalValue = MaxVal;
	SYMB	LINE, 2163
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	[R0],R4
	BR	_338
_337:
	SYMB	LTIM, "MinVal", 22, 0, 77
; rs232cmd.c 2164						else
; rs232cmd.c 2165							GenlockCalValue = MinVal;
	SYMB	LINE, 2165
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	[R0],R5
_338:
; rs232cmd.c 2166	
; rs232cmd.c 2167						sio0SndCommand( 20, SPG_V24_address, "GX%u;", GenlockCalValue);	
	SYMB	LINE, 2167
	MOV.W	R0,#014H
	SYMB	LTIM, "tmp", 2, 0, 77
	MOV.W	R1,#015H
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R2,#SOF( _GenlockCalValue )
	MOV.W	R2,[R2]
	PUSH.W	R2
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _334 )
	MOV.W	R2,#SOF( _334 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sio0SndCommand
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2168					}
	SYMB	LINE, 2168
	BR	_350
_339:
	SYMB	LTIM, "MaxVal", 18, 0, 77
; rs232cmd.c 2169					else
; rs232cmd.c 2170					{
; rs232cmd.c 2171						tmp = FindParameter( Cmd, UpDownPar);
	SYMB	LINE, 2171
	MOV.W	R3,#SEG( _UpDownPar )
	MOV.W	R2,#SOF( _UpDownPar )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_FindParameter
	SYMB	LTIM, "tmp", 2, 0, 205
; rs232cmd.c 2172	
; rs232cmd.c 2173						if ( tmp > -1)
	SYMB	LINE, 2173
	CMP.W	R0,#0FFFFH
	BLE	_344
; rs232cmd.c 2174						{
; rs232cmd.c 2175							if ( tmp == 0)
	SYMB	LINE, 2175
	OR.W	R0,R0
	BNE	_340
; rs232cmd.c 2176							{
; rs232cmd.c 2177								if ( GenlockCalValue > MinVal)
	SYMB	LINE, 2177
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	R0,[R0]
	SYMB	LTIM, "tmp", 2, 0, 77
	CMP.W	R0,R5
	BL	_343
; rs232cmd.c 2178									GenlockCalValue--;
	SYMB	LINE, 2178
	ADDS.W	R0,#0FH
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R1,#SOF( _GenlockCalValue )
	MOV.W	[R1],R0
; rs232cmd.c 2179							}
	SYMB	LINE, 2179
	BR	_343
_340:
; rs232cmd.c 2180							else
; rs232cmd.c 2181							{
; rs232cmd.c 2182								if ( GenlockCalValue < MaxVal)
	SYMB	LINE, 2182
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	R0,[R0]
	CMP.W	R0,R4
	BCC	_343
; rs232cmd.c 2183									GenlockCalValue++;
	SYMB	LINE, 2183
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R1,#SOF( _GenlockCalValue )
	MOV.W	[R1],R0
; rs232cmd.c 2184							}
	SYMB	LINE, 2184
_343:
; rs232cmd.c 2185	
; rs232cmd.c 2186							sio0SndCommand( 20, SPG_V24_address, "GX%u;", GenlockCalValue);
	SYMB	LINE, 2186
	MOV.W	R0,#014H
	MOV.W	R1,#015H
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R2,#SOF( _GenlockCalValue )
	MOV.W	R2,[R2]
	PUSH.W	R2
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _334 )
	MOV.W	R2,#SOF( _334 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sio0SndCommand
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2187						}
	SYMB	LINE, 2187
	BR	_350
_344:
; rs232cmd.c 2188						else
; rs232cmd.c 2189							SCPIError = DataOutOfRange;
	SYMB	LINE, 2189
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2190					}	
; rs232cmd.c 2191				}
; rs232cmd.c 2192			}
; rs232cmd.c 2193		}
	SYMB	LINE, 2193
_350:
; rs232cmd.c 2194	}
	SYMB	LINE, 2194
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2195	
; rs232cmd.c 2196	/**************************************************************************/
; rs232cmd.c 2197	/* GenlockGenCalibrateStore 	 				  		 								   RS232CMD.C */
; rs232cmd.c 2198	/*																																				*/
; rs232cmd.c 2199	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 2200	/* Revised:		000622				     																					*/
; rs232cmd.c 2201	/*																																				*/
; rs232cmd.c 2202	/* Function:	Handle the genlock calibration															*/
; rs232cmd.c 2203	/* Remarks:		--																													*/
; rs232cmd.c 2204	/* Returns:		--																													*/
; rs232cmd.c 2205	/* Updates:		--																													*/
; rs232cmd.c 2206	/**************************************************************************/
; rs232cmd.c 2207	void GenlockGenCalibrateStore( void)
; rs232cmd.c 2208	{
	ALIGN	1
	SYMB	LINE, 2208
	PUBLIC	_GenlockGenCalibrateStore
_GenlockGenCalibrateStore:
	SYMB	TYPE, 579, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenCalibrateStore", _GenlockGenCalibrateStore, #579, 0, 0, 0
	SYMB	ALAB, _GenlockGenCalibrateStore, #579
; rs232cmd.c 2209		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2209
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_362
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_362
; rs232cmd.c 2210		{
; rs232cmd.c 2211			if ( CmdRequest)
	SYMB	LINE, 2211
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_355
; rs232cmd.c 2212					SCPIError = SyntaxErr;
	SYMB	LINE, 2212
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_355:
; rs232cmd.c 2213			else
; rs232cmd.c 2214			{
; rs232cmd.c 2215				if ( ParCnt)
	SYMB	LINE, 2215
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_356
; rs232cmd.c 2216					SCPIError = ParNotAllowed;
	SYMB	LINE, 2216
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_356:
; rs232cmd.c 2217				else
; rs232cmd.c 2218				{
; rs232cmd.c 2219					if ( GenlockCalEnable)
	SYMB	LINE, 2219
	MOV.B	ES,#SEG( _GenlockCalEnable )
	MOV.W	R0,#SOF( _GenlockCalEnable )
	MOV.B	R0L,[R0]
	BEQ	_357
; rs232cmd.c 2220					{
; rs232cmd.c 2221						Calibration.GenlockCalibration.DACUserValue = GenlockCalValue;
	SYMB	LINE, 2221
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	R0,[R0]
	MOV.B	ES,#SEG( _Calibration+120 )
	MOV.W	R1,#SOF( _Calibration+120 )
	MOV.W	[R1],R0
; rs232cmd.c 2222								
; rs232cmd.c 2223						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 2223
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 2224					}
	SYMB	LINE, 2224
	RET
_357:
; rs232cmd.c 2225					else
; rs232cmd.c 2226						SCPIError = ExecErr;					
	SYMB	LINE, 2226
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 2227				}
; rs232cmd.c 2228			}
; rs232cmd.c 2229		}
	SYMB	LINE, 2229
_362:
; rs232cmd.c 2230	}
	SYMB	LINE, 2230
	RET
	SYMB	EFUN
; rs232cmd.c 2231	
; rs232cmd.c 2232	/**************************************************************************/
; rs232cmd.c 2233	/* BBSuffix																 	  						 	   RS232CMD.C	*/
; rs232cmd.c 2234	/*																																				*/
; rs232cmd.c 2235	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 2236	/* Revised:		000604				     																					*/
; rs232cmd.c 2237	/*																																				*/
; rs232cmd.c 2238	/* Function:	Get suffix of the Black Burst generator											*/
; rs232cmd.c 2239	/* Remarks:		--																													*/
; rs232cmd.c 2240	/* Returns:		--																													*/
; rs232cmd.c 2241	/* Updates:		Suffix																									 		*/
; rs232cmd.c 2242	/**************************************************************************/
; rs232cmd.c 2243	void BBGenSuffix( void)
; rs232cmd.c 2244	{
	ALIGN	1
	SYMB	LINE, 2244
	PUBLIC	_BBGenSuffix
_BBGenSuffix:
	SYMB	TYPE, 580, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGenSuffix", _BBGenSuffix, #580, 0, 0, 0
	SYMB	ALAB, _BBGenSuffix, #580
; rs232cmd.c 2245		if ( NumSuffix > 3)
	SYMB	LINE, 2245
	MOV.B	ES,#SEG( _NumSuffix )
	MOV.W	R0,#SOF( _NumSuffix )
	MOV.W	R0,[R0]
	CMP.W	R0,#03H
	BL	_363
; rs232cmd.c 2246			SCPIError = HdrSuffixOutOfRange;
	SYMB	LINE, 2246
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#0CH
	RET
_363:
; rs232cmd.c 2247		else
; rs232cmd.c 2248			Suffix[0] = NumSuffix-1;
	SYMB	LINE, 2248
	ADDS.W	R0,#0FH
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R1,#SOF( _Suffix )
	MOV.W	[R1],R0
_364:
; rs232cmd.c 2249	
; rs232cmd.c 2250	}
	SYMB	LINE, 2250
	RET
	SYMB	EFUN
; rs232cmd.c 2251	
; rs232cmd.c 2252	/**************************************************************************/
; rs232cmd.c 2253	/* BBGen																								 	     RS232CMD.C	*/
; rs232cmd.c 2254	/*																																				*/
; rs232cmd.c 2255	/* Author:		Kim Engedahl, DEV, 000524	    															*/
; rs232cmd.c 2256	/* Revised:		000604				     																					*/
; rs232cmd.c 2257	/*																																				*/
; rs232cmd.c 2258	/* Function:	Handle the Black Burst command.															*/
; rs232cmd.c 2259	/* Remarks:		Request only																								*/
; rs232cmd.c 2260	/* Returns:		--																													*/
; rs232cmd.c 2261	/* Updates:		--																												 	*/
; rs232cmd.c 2262	/**************************************************************************/
; rs232cmd.c 2263	void BBGen( void)
; rs232cmd.c 2264	{
	ALIGN	1
	SYMB	LINE, 2264
	PUBLIC	_BBGen
_BBGen:
	SYMB	TYPE, 581, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGen", _BBGen, #581, 0, 0, 48
	SYMB	ALAB, _BBGen, #581
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2265		char code *str;
; rs232cmd.c 2266	
; rs232cmd.c 2267		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2267
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_374
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_374
; rs232cmd.c 2268		{
; rs232cmd.c 2269			if ( !CmdRequest)
	SYMB	LINE, 2269
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_367
; rs232cmd.c 2270					SCPIError = SyntaxErr;
	SYMB	LINE, 2270
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_374
_367:
; rs232cmd.c 2271			else
; rs232cmd.c 2272			{
; rs232cmd.c 2273				if ( ParCnt)
	SYMB	LINE, 2273
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_368
; rs232cmd.c 2274					SCPIError = ParNotAllowed;
	SYMB	LINE, 2274
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_374
_368:
; rs232cmd.c 2275				else
; rs232cmd.c 2276				{
; rs232cmd.c 2277					str = SystemPar[BBSetup[Suffix[0]].System].LongName;
	SYMB	LINE, 2277
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	ASL.W	R0,#03H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_375
	ADDS.B	CS,#01H
_375:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2278	
; rs232cmd.c 2279					while ( *str)
	SYMB	LINE, 2279
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_370
_369:
; rs232cmd.c 2280						rs232putchar( *str++);
	SYMB	LINE, 2280
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2279
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_369
	SYMB	LINE, 2280
_370:
; rs232cmd.c 2281	
; rs232cmd.c 2282					rs232putchar( ',');
	SYMB	LINE, 2282
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2283	
; rs232cmd.c 2284					PrintSamplesToFLT( BBSetup[Suffix[0]].System, BBSetup[Suffix[0]].Delay);
	SYMB	LINE, 2284
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R2,#SOF( _Suffix )
	MOV.W	R2,[R2]
	ASL.W	R2,#03H
	MOV.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup+2 )
	MOV.W	R3,[R2+SOF( _BBSetup+4 )]
	MOV.W	R2,[R2+SOF( _BBSetup+2 )]
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2285	
; rs232cmd.c 2286					rs232printf( 6, ",%d\n", BBSetup[Suffix[0]].ScHPhase);
	SYMB	LINE, 2286
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R1,#SOF( _Suffix )
	MOV.W	R1,[R1]
	ASL.W	R1,#03H
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup+6 )
	MOV.W	R1,[R2+SOF( _BBSetup+6 )]
	PUSH.W	R1
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _366 )
	MOV.W	R2,#SOF( _366 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2287				}
; rs232cmd.c 2288			}
; rs232cmd.c 2289		}
	SYMB	LINE, 2289
_374:
; rs232cmd.c 2290	}
	SYMB	LINE, 2290
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2291	
; rs232cmd.c 2292	/**************************************************************************/
; rs232cmd.c 2293	/* BBGenSystem		 												 	    							 RS232CMD.C	*/
; rs232cmd.c 2294	/*																																				*/
; rs232cmd.c 2295	/* Author:		Kim Engedahl, DEV, 000524	    															*/
; rs232cmd.c 2296	/* Revised:		000604				     																					*/
; rs232cmd.c 2297	/*																																				*/
; rs232cmd.c 2298	/* Function:	Handle the Black Burst system-command.											*/
; rs232cmd.c 2299	/* Remarks:		--																													*/
; rs232cmd.c 2300	/* Returns:		--																													*/
; rs232cmd.c 2301	/* Updates:		--																													*/
; rs232cmd.c 2302	/**************************************************************************/
; rs232cmd.c 2303	void BBGenSystem( void)
; rs232cmd.c 2304	{
	ALIGN	1
	SYMB	LINE, 2304
	PUBLIC	_BBGenSystem
_BBGenSystem:
	SYMB	TYPE, 582, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGenSystem", _BBGenSystem, #582, 0, 0, 48
	SYMB	ALAB, _BBGenSystem, #582
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2305		int system;
; rs232cmd.c 2306		char code *str;
; rs232cmd.c 2307	
; rs232cmd.c 2308		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2308
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_387
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_387
; rs232cmd.c 2309		{
; rs232cmd.c 2310			if ( CmdRequest)
	SYMB	LINE, 2310
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_379
; rs232cmd.c 2311			{
; rs232cmd.c 2312				if ( ParCnt)
	SYMB	LINE, 2312
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_376
; rs232cmd.c 2313					SCPIError = ParNotAllowed;
	SYMB	LINE, 2313
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_387
_376:
; rs232cmd.c 2314				else
; rs232cmd.c 2315				{
; rs232cmd.c 2316					str = SystemPar[BBSetup[Suffix[0]].System].LongName;
	SYMB	LINE, 2316
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	ASL.W	R0,#03H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_388
	ADDS.B	CS,#01H
_388:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2317	
; rs232cmd.c 2318					while ( *str)
	SYMB	LINE, 2318
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_378
_377:
; rs232cmd.c 2319						rs232putchar( *str++);
	SYMB	LINE, 2319
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2318
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_377
	SYMB	LINE, 2319
_378:
; rs232cmd.c 2320	
; rs232cmd.c 2321					rs232putchar('\n');
	SYMB	LINE, 2321
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2322				}
; rs232cmd.c 2323			}
	SYMB	LINE, 2323
	BR	_387
_379:
; rs232cmd.c 2324			else
; rs232cmd.c 2325			{
; rs232cmd.c 2326				if ( ParCnt != 1)
	SYMB	LINE, 2326
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_380
; rs232cmd.c 2327					SCPIError = SyntaxErr;
	SYMB	LINE, 2327
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_387
_380:
; rs232cmd.c 2328				else
; rs232cmd.c 2329				{
; rs232cmd.c 2330					system = FindParameter( Cmd, SystemPar);
	SYMB	LINE, 2330
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _SystemPar )
	MOV.W	R2,#SOF( _SystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 2331	
; rs232cmd.c 2332					if ( system > -1)
	SYMB	LINE, 2332
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "system", 2, 0, 77
	SYMB	LTIM, "system", 6, 0, 205
	BLE	_381
; rs232cmd.c 2333						SetBBSystem( Suffix[0], system);
	SYMB	LINE, 2333
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	CALL	_SetBBSystem
	SYMB	LTIM, "system", 6, 0, 77
	BR	_387
_381:
; rs232cmd.c 2334					else
; rs232cmd.c 2335						SCPIError = DataOutOfRange;
	SYMB	LINE, 2335
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2336				}
; rs232cmd.c 2337			}
; rs232cmd.c 2338		}
	SYMB	LINE, 2338
_387:
; rs232cmd.c 2339	}
	SYMB	LINE, 2339
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2340	
; rs232cmd.c 2341	/**************************************************************************/
; rs232cmd.c 2342	/* BBGenDelay	 														 	    							 RS232CMD.C	*/
; rs232cmd.c 2343	/*																																				*/
; rs232cmd.c 2344	/* Author:		Kim Engedahl, DEV, 000524	    															*/
; rs232cmd.c 2345	/* Revised:		000604				     																					*/				
; rs232cmd.c 2346	/*																																				*/
; rs232cmd.c 2347	/* Function:	Handle the Black Burst timing command.											*/
; rs232cmd.c 2348	/* Remarks:		--																													*/
; rs232cmd.c 2349	/* Returns:		--																													*/
; rs232cmd.c 2350	/* Updates:		--																													*/
; rs232cmd.c 2351	/**************************************************************************/
; rs232cmd.c 2352	void BBGenDelay( void)
; rs232cmd.c 2353	{
	ALIGN	1
	SYMB	LINE, 2353
	PUBLIC	_BBGenDelay
_BBGenDelay:
	SYMB	TYPE, 583, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGenDelay", _BBGenDelay, #583, 0, 0, 48
	SYMB	ALAB, _BBGenDelay, #583
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	IDEN, "field", -12, #16, 130, 5
	SYMB	IDEN, "line", -10, #16, 130, 5
	SYMB	IDEN, "offset", -8, #10, 130, 5
	SYMB	IDEN, "samples", -1, #6, 130, 5
	SYMB	LTIM, "samples", -1, 0, 69
; rs232cmd.c 2354		int field, line;
; rs232cmd.c 2355		float offset;
; rs232cmd.c 2356		long samples;
; rs232cmd.c 2357	
; rs232cmd.c 2358		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2358
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_401
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_401
; rs232cmd.c 2359		{
; rs232cmd.c 2360			if ( CmdRequest)
	SYMB	LINE, 2360
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_392
; rs232cmd.c 2361			{
; rs232cmd.c 2362				if ( ParCnt)
	SYMB	LINE, 2362
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_391
; rs232cmd.c 2363					SCPIError = ParNotAllowed;
	SYMB	LINE, 2363
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_401
_391:
; rs232cmd.c 2364				else
; rs232cmd.c 2365				{
; rs232cmd.c 2366					PrintSamplesToFLT( BBSetup[Suffix[0]].System, BBSetup[Suffix[0]].Delay);
	SYMB	LINE, 2366
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MOV.W	R1,R0
	ASL.W	R1,#03H
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R2+SOF( _BBSetup )]
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup+2 )
	MOV.W	R3,[R2+SOF( _BBSetup+4 )]
	MOV.W	R2,[R2+SOF( _BBSetup+2 )]
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2367	
; rs232cmd.c 2368					rs232putchar ( '\n');
	SYMB	LINE, 2368
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2369				}
; rs232cmd.c 2370			}
	SYMB	LINE, 2370
	BR	_401
_392:
; rs232cmd.c 2371			else
; rs232cmd.c 2372			{
; rs232cmd.c 2373				if (( ParCnt != 3) || ( sscanf( Cmd, "%d,%d,%f", &field, &line, &offset) != 3))
	SYMB	LINE, 2373
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_393
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 16
	PUSH.W	R4, R5
	SYMB	SOFF, 20
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	MOV.W	R3,#SEG( _299 )
	MOV.W	R2,#SOF( _299 )
	PUSH.W	R2, R3
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 12
	CMP.W	R0,#03H
	BEQ	_394
_393:
; rs232cmd.c 2374					SCPIError = SyntaxErr;
	SYMB	LINE, 2374
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_401
_394:
; rs232cmd.c 2375				else
; rs232cmd.c 2376				{
; rs232cmd.c 2377					if (( samples = FLTToSamples( BBSetup[Suffix[0]].System, field, line, offset)) == -1)
	SYMB	LINE, 2377
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	ASL.W	R0,#03H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MOV.W	R1,[R7]
	MOV.W	R2,[R7+2]
	MOV.W	R5,[R7+6]
	MOV.W	R4,[R7+4]
	PUSH.W	R4, R5
	SYMB	SOFF, 16
	CALL	_FLTToSamples
	ADDS.W	R7,#04H
	SYMB	SOFF, 12
	MOV.W	R3,R1
	MOV.W	R2,R0
	MOV.W	R1,R3
	MOV.W	R0,R2
	CMP.W	R1,#0FFFFH
	BNE	_404
	CMP.W	R0,#0FFFFH
_404:
	BNE	_395
; rs232cmd.c 2378						SCPIError = ExecErr;
	SYMB	LINE, 2378
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_401
_395:
; rs232cmd.c 2379					else
; rs232cmd.c 2380						SetBBDelay( Suffix[0], (UL) samples);
	SYMB	LINE, 2380
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	CALL	_SetBBDelay
; rs232cmd.c 2381				}
; rs232cmd.c 2382			}
; rs232cmd.c 2383		}
	SYMB	LINE, 2383
_401:
; rs232cmd.c 2384	}
	SYMB	LINE, 2384
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2385	
; rs232cmd.c 2386	/**************************************************************************/
; rs232cmd.c 2387	/* BBGenScHPhase													 	   								 RS232CMD.C	*/
; rs232cmd.c 2388	/*																																				*/
; rs232cmd.c 2389	/* Author:		Kim Engedahl, DEV, 000524	    															*/			
; rs232cmd.c 2390	/* Revised:		000604				     																					*/
; rs232cmd.c 2391	/*																																				*/
; rs232cmd.c 2392	/* Function:	Handle the Black Burst ScH-Phase command.										*/
; rs232cmd.c 2393	/* Remarks:		--																													*/
; rs232cmd.c 2394	/* Returns:		--																													*/
; rs232cmd.c 2395	/* Updates:		--																													*/
; rs232cmd.c 2396	/**************************************************************************/
; rs232cmd.c 2397	void BBGenScHPhase( void)
; rs232cmd.c 2398	{
	ALIGN	1
	SYMB	LINE, 2398
	PUBLIC	_BBGenScHPhase
_BBGenScHPhase:
	SYMB	TYPE, 584, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGenScHPhase", _BBGenScHPhase, #584, 0, 0, 0
	SYMB	ALAB, _BBGenScHPhase, #584
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "schphase", -2, #16, 130, 5
; rs232cmd.c 2399		int schphase;
; rs232cmd.c 2400	
; rs232cmd.c 2401		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2401
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_416
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_416
; rs232cmd.c 2402		{
; rs232cmd.c 2403			if ( CmdRequest)
	SYMB	LINE, 2403
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_406
; rs232cmd.c 2404			{
; rs232cmd.c 2405				if ( ParCnt)
	SYMB	LINE, 2405
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_405
; rs232cmd.c 2406					SCPIError = ParNotAllowed;
	SYMB	LINE, 2406
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_416
_405:
; rs232cmd.c 2407				else
; rs232cmd.c 2408					rs232printf( 6, "%d\n", BBSetup[Suffix[0]].ScHPhase);
	SYMB	LINE, 2408
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R1,#SOF( _Suffix )
	MOV.W	R1,[R1]
	ASL.W	R1,#03H
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup+6 )
	MOV.W	R1,[R2+SOF( _BBSetup+6 )]
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 2409			}
	SYMB	LINE, 2409
	BR	_416
_406:
; rs232cmd.c 2410			else
; rs232cmd.c 2411			{
; rs232cmd.c 2412				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &schphase) != 1))
	SYMB	LINE, 2412
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_407
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_408
_407:
; rs232cmd.c 2413					SCPIError = SyntaxErr;
	SYMB	LINE, 2413
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_416
_408:
; rs232cmd.c 2414				else
; rs232cmd.c 2415				{
; rs232cmd.c 2416					if (( schphase < ScHPhaseLow) || ( schphase > ScHPhaseHigh))
	SYMB	LINE, 2416
	CMP.W	[R7],#0FF4DH
	BLT	_409
	CMP.W	[R7],#0B4H
	BLE	_410
_409:
; rs232cmd.c 2417						SCPIError = DataOutOfRange;
	SYMB	LINE, 2417
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_416
_410:
; rs232cmd.c 2418					else
; rs232cmd.c 2419						SetBBScHPhase( Suffix[0], schphase);
	SYMB	LINE, 2419
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MOV.W	R1,[R7]
	CALL	_SetBBScHPhase
; rs232cmd.c 2420				}
; rs232cmd.c 2421			}
; rs232cmd.c 2422		}
	SYMB	LINE, 2422
_416:
; rs232cmd.c 2423	}
	SYMB	LINE, 2423
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2424	
; rs232cmd.c 2425	/**************************************************************************/
; rs232cmd.c 2426	/* TSGen																									 	   RS232CMD.C */
; rs232cmd.c 2427	/*																																				*/
; rs232cmd.c 2428	/* Author:		Kim Engedahl, DEV, 000524	    															*/
; rs232cmd.c 2429	/* Revised:		000727				     																					*/
; rs232cmd.c 2430	/*																																				*/
; rs232cmd.c 2431	/* Function:	Return the setting of a Analog-TPG.													*/
; rs232cmd.c 2432	/* Remarks:		Request only.																								*/
; rs232cmd.c 2433	/* Returns:		--																													*/
; rs232cmd.c 2434	/* Updates:		--																													*/
; rs232cmd.c 2435	/***************************************************************************/
; rs232cmd.c 2436	void TSGen( void)
; rs232cmd.c 2437	{
	ALIGN	1
	SYMB	LINE, 2437
	PUBLIC	_TSGen
_TSGen:
	SYMB	TYPE, 585, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGen", _TSGen, #585, 0, 0, 48
	SYMB	ALAB, _TSGen, #585
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2438		char code *str;
; rs232cmd.c 2439	
; rs232cmd.c 2440		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2440
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_433
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_433
; rs232cmd.c 2441		{
; rs232cmd.c 2442			if ( !CmdRequest)
	SYMB	LINE, 2442
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_422
; rs232cmd.c 2443					SCPIError = SyntaxErr;
	SYMB	LINE, 2443
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_433
_422:
; rs232cmd.c 2444			else
; rs232cmd.c 2445			{
; rs232cmd.c 2446				if ( ParCnt)
	SYMB	LINE, 2446
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_423
; rs232cmd.c 2447					SCPIError = ParNotAllowed;
	SYMB	LINE, 2447
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_433
_423:
; rs232cmd.c 2448				else
; rs232cmd.c 2449				{
; rs232cmd.c 2450					str = CBPatternPar[CBSetup.Pattern].LongName;
	SYMB	LINE, 2450
	MOV.B	ES,#SEG( _CBSetup+2 )
	MOV.W	R0,#SOF( _CBSetup+2 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _CBPatternPar )
	MOV.W	R0,#SOF( _CBPatternPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_434
	ADDS.B	CS,#01H
_434:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2451	
; rs232cmd.c 2452					while ( *str)
	SYMB	LINE, 2452
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_425
_424:
; rs232cmd.c 2453						rs232putchar( *str++);
	SYMB	LINE, 2453
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2452
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_424
	SYMB	LINE, 2453
_425:
; rs232cmd.c 2454	
; rs232cmd.c 2455					rs232putchar( ',');
	SYMB	LINE, 2455
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2456	
; rs232cmd.c 2457	
; rs232cmd.c 2458					str = SystemPar[CBSetup.System].LongName;
	SYMB	LINE, 2458
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_435
	ADDS.B	CS,#01H
_435:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2459	
; rs232cmd.c 2460					while ( *str)
	SYMB	LINE, 2460
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_427
_426:
; rs232cmd.c 2461						rs232putchar( *str++);
	SYMB	LINE, 2461
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2460
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_426
	SYMB	LINE, 2461
_427:
; rs232cmd.c 2462	
; rs232cmd.c 2463					rs232putchar( ',');
	SYMB	LINE, 2463
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2464	
; rs232cmd.c 2465	
; rs232cmd.c 2466					PrintSamplesToFLT( CBSetup.System, CBSetup.Delay*256);
	SYMB	LINE, 2466
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _CBSetup+4 )
	MOV.W	R3,#SOF( _CBSetup+4 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	ASL.D	R2,#08H
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2467	
; rs232cmd.c 2468	
; rs232cmd.c 2469					rs232printf( 6, ",%d,", CBSetup.ScHPhase);
	SYMB	LINE, 2469
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R1,#SOF( _CBSetup+8 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _421 )
	MOV.W	R2,#SOF( _421 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2470	
; rs232cmd.c 2471	
; rs232cmd.c 2472					str = EmbAudioSignalPar[CBSetup.EmbAudioSignal].LongName;
	SYMB	LINE, 2472
	MOV.B	ES,#SEG( _CBSetup+10 )
	MOV.W	R0,#SOF( _CBSetup+10 )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _EmbAudioSignalPar )
	MOV.W	R0,#SOF( _EmbAudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_436
	ADDS.B	CS,#01H
_436:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2473	
; rs232cmd.c 2474					while ( *str)
	SYMB	LINE, 2474
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_429
_428:
; rs232cmd.c 2475						rs232putchar( *str++);
	SYMB	LINE, 2475
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2474
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_428
	SYMB	LINE, 2475
_429:
; rs232cmd.c 2476	
; rs232cmd.c 2477					rs232putchar( '\n');
	SYMB	LINE, 2477
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2478				}
; rs232cmd.c 2479			}
; rs232cmd.c 2480		}
	SYMB	LINE, 2480
_433:
; rs232cmd.c 2481	}
	SYMB	LINE, 2481
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2482	
; rs232cmd.c 2483	/**************************************************************************/
; rs232cmd.c 2484	/* TSGenPattern																					 	     RS232CMD.C	*/
; rs232cmd.c 2485	/*																																				*/
; rs232cmd.c 2486	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 2487	/* Revised:		000727				     																					*/
; rs232cmd.c 2488	/*																																				*/
; rs232cmd.c 2489	/* Function:	Handle the Colorbar pattern command.												*/
; rs232cmd.c 2490	/* Remarks:		--																													*/
; rs232cmd.c 2491	/* Returns:		--																													*/
; rs232cmd.c 2492	/* Updates:		--																													*/
; rs232cmd.c 2493	/**************************************************************************/
; rs232cmd.c 2494	void TSGenPattern( void)
; rs232cmd.c 2495	{
	ALIGN	1
	SYMB	LINE, 2495
	PUBLIC	_TSGenPattern
_TSGenPattern:
	SYMB	TYPE, 586, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGenPattern", _TSGenPattern, #586, 0, 0, 48
	SYMB	ALAB, _TSGenPattern, #586
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "pattern", -1, #16, 130, 5
	SYMB	LTIM, "pattern", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2496		int pattern;
; rs232cmd.c 2497		char code *str;
; rs232cmd.c 2498	
; rs232cmd.c 2499		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2499
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_449
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_449
; rs232cmd.c 2500		{
; rs232cmd.c 2501			if ( CmdRequest)
	SYMB	LINE, 2501
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_440
; rs232cmd.c 2502			{
; rs232cmd.c 2503				if ( ParCnt)
	SYMB	LINE, 2503
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_437
; rs232cmd.c 2504					SCPIError = ParNotAllowed;
	SYMB	LINE, 2504
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_449
_437:
; rs232cmd.c 2505				else
; rs232cmd.c 2506				{
; rs232cmd.c 2507					str = CBPatternPar[CBSetup.Pattern].LongName;
	SYMB	LINE, 2507
	MOV.B	ES,#SEG( _CBSetup+2 )
	MOV.W	R0,#SOF( _CBSetup+2 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _CBPatternPar )
	MOV.W	R0,#SOF( _CBPatternPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_450
	ADDS.B	CS,#01H
_450:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2508	
; rs232cmd.c 2509					while ( *str)
	SYMB	LINE, 2509
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_439
_438:
; rs232cmd.c 2510						rs232putchar( *str++);
	SYMB	LINE, 2510
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2509
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_438
	SYMB	LINE, 2510
_439:
; rs232cmd.c 2511	
; rs232cmd.c 2512					rs232putchar('\n');
	SYMB	LINE, 2512
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2513				}
; rs232cmd.c 2514			}
	SYMB	LINE, 2514
	BR	_449
_440:
; rs232cmd.c 2515			else
; rs232cmd.c 2516			{
; rs232cmd.c 2517				pattern = FindParameter( Cmd, CBPatternPar);
	SYMB	LINE, 2517
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _CBPatternPar )
	MOV.W	R2,#SOF( _CBPatternPar )
	CALL	_FindParameter
	SYMB	LTIM, "pattern", 2, 0, 205
; rs232cmd.c 2518	
; rs232cmd.c 2519				if ( ParCnt != 1)
	SYMB	LINE, 2519
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	R1L,[R1]
	CMP.B	R1L,#01H
	BEQ	_441
; rs232cmd.c 2520					SCPIError = SyntaxErr;
	SYMB	LINE, 2520
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_449
_441:
	SYMB	LTIM, "pattern", 2, 0, 77
; rs232cmd.c 2521				else
; rs232cmd.c 2522				{
; rs232cmd.c 2523					if ( pattern > -1)
	SYMB	LINE, 2523
	CMP.W	R0,#0FFFFH
	BLE	_442
; rs232cmd.c 2524					{
; rs232cmd.c 2525						if ( SetCBPattern( pattern) != OK)
	SYMB	LINE, 2525
	CALL	_SetCBPattern
	CMP.W	R0,#0FFFFH
	BEQ	_449
; rs232cmd.c 2526							SCPIError = ExecErr;
	SYMB	LINE, 2526
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 2527					}
	SYMB	LINE, 2527
	BR	_449
_442:
; rs232cmd.c 2528					else
; rs232cmd.c 2529						SCPIError = DataOutOfRange;
	SYMB	LINE, 2529
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2530				}
; rs232cmd.c 2531			}
; rs232cmd.c 2532		}
	SYMB	LINE, 2532
_449:
; rs232cmd.c 2533	}
	SYMB	LINE, 2533
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2534	
; rs232cmd.c 2535	/**************************************************************************/
; rs232cmd.c 2536	/* TSGenSystem														 	    							 RS232CMD.C	*/
; rs232cmd.c 2537	/*																																				*/
; rs232cmd.c 2538	/* Author:		Kim Engedahl, DEV, 98021	    															*/
; rs232cmd.c 2539	/* Revised:		000727				     																					*/
; rs232cmd.c 2540	/*																																				*/
; rs232cmd.c 2541	/* Function:	Handle the Colobar system-command.													*/
; rs232cmd.c 2542	/* Remarks:		This command will possibly change pattern and/or delay if	 	*/
; rs232cmd.c 2543	/*            these are not valid in the selected system									*/
; rs232cmd.c 2544	/* Returns:		--																													*/
; rs232cmd.c 2545	/* Updates:	   --																													*/
; rs232cmd.c 2546	/**************************************************************************/
; rs232cmd.c 2547	void TSGenSystem( void)
; rs232cmd.c 2548	{
	ALIGN	1
	SYMB	LINE, 2548
	PUBLIC	_TSGenSystem
_TSGenSystem:
	SYMB	TYPE, 587, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGenSystem", _TSGenSystem, #587, 0, 0, 48
	SYMB	ALAB, _TSGenSystem, #587
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2549		int system;
; rs232cmd.c 2550		char code *str;
; rs232cmd.c 2551	
; rs232cmd.c 2552		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2552
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_467
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_467
; rs232cmd.c 2553		{
; rs232cmd.c 2554			if ( CmdRequest)
	SYMB	LINE, 2554
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_457
; rs232cmd.c 2555			{
; rs232cmd.c 2556				if ( ParCnt)
	SYMB	LINE, 2556
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_454
; rs232cmd.c 2557					SCPIError = ParNotAllowed;
	SYMB	LINE, 2557
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_467
_454:
; rs232cmd.c 2558				else
; rs232cmd.c 2559				{
; rs232cmd.c 2560					str = SystemPar[CBSetup.System].LongName;
	SYMB	LINE, 2560
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_468
	ADDS.B	CS,#01H
_468:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2561	
; rs232cmd.c 2562					while ( *str)										 
	SYMB	LINE, 2562
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_456
_455:
; rs232cmd.c 2563						rs232putchar( *str++);
	SYMB	LINE, 2563
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2562
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_455
	SYMB	LINE, 2563
_456:
; rs232cmd.c 2564	
; rs232cmd.c 2565					rs232putchar('\n');
	SYMB	LINE, 2565
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2566				}
; rs232cmd.c 2567			}
	SYMB	LINE, 2567
	BR	_467
_457:
; rs232cmd.c 2568			else
; rs232cmd.c 2569			{
; rs232cmd.c 2570				if ( ParCnt != 1)
	SYMB	LINE, 2570
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_458
; rs232cmd.c 2571					SCPIError = SyntaxErr;
	SYMB	LINE, 2571
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_467
_458:
; rs232cmd.c 2572				else
; rs232cmd.c 2573				{
; rs232cmd.c 2574					system = FindParameter( Cmd, SystemPar);
	SYMB	LINE, 2574
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _SystemPar )
	MOV.W	R2,#SOF( _SystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 2575	
; rs232cmd.c 2576					if ( system == PAL_PALID)						// If line7, (PAL w/ID) ever should
	SYMB	LINE, 2576
	CMP.W	R0,#01H
	BNE	_459
; rs232cmd.c 2577						SCPIError = DataOutOfRange;				//  be supported remove this exception
	SYMB	LINE, 2577
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_467
_459:
	SYMB	LTIM, "system", 2, 0, 77
; rs232cmd.c 2578					else						
; rs232cmd.c 2579					{
; rs232cmd.c 2580						if ( system > -1)
	SYMB	LINE, 2580
	CMP.W	R0,#0FFFFH
	BLE	_460
; rs232cmd.c 2581							SetCBSystem( system);
	SYMB	LINE, 2581
	CALL	_SetCBSystem
	BR	_467
_460:
; rs232cmd.c 2582						else
; rs232cmd.c 2583							SCPIError = DataOutOfRange;
	SYMB	LINE, 2583
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2584					}
; rs232cmd.c 2585				}
; rs232cmd.c 2586			}
; rs232cmd.c 2587		}
	SYMB	LINE, 2587
_467:
; rs232cmd.c 2588	}
	SYMB	LINE, 2588
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2589	
; rs232cmd.c 2590	/**************************************************************************/
; rs232cmd.c 2591	/* TSGenDelay															 	    							 RS232CMD.C */
; rs232cmd.c 2592	/*																																				*/
; rs232cmd.c 2593	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 2594	/* Revised:		000604				     																					*/
; rs232cmd.c 2595	/*																																				*/
; rs232cmd.c 2596	/* Function:	Handle the Colorbar delay command.													*/
; rs232cmd.c 2597	/* Remarks:		Delay should be multiplied/divided with/by 256 to conform		*/
; rs232cmd.c 2598	/*						with the black burst timing as the functions								*/
; rs232cmd.c 2599	/*						PrintSamplesToFLT/FLTToSamples are common to both the CBar	*/
; rs232cmd.c 2600	/*						and BB timing. The CBar timing equals 1728/1716 samples			*/
; rs232cmd.c 2601	/*						(app. 37ns/sample), while the BB timing equals 1728*256/		*/
; rs232cmd.c 2602	/*						1716*256 samples (app. 0.14 ns/sample).											*/
; rs232cmd.c 2603	/* Returns:		--																													*/
; rs232cmd.c 2604	/* Updates:		--																													*/
; rs232cmd.c 2605	/**************************************************************************/
; rs232cmd.c 2606	void TSGenDelay( void)
; rs232cmd.c 2607	{
	ALIGN	1
	SYMB	LINE, 2607
	PUBLIC	_TSGenDelay
_TSGenDelay:
	SYMB	TYPE, 588, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGenDelay", _TSGenDelay, #588, 0, 0, 48
	SYMB	ALAB, _TSGenDelay, #588
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	IDEN, "field", -12, #16, 130, 5
	SYMB	IDEN, "line", -10, #16, 130, 5
	SYMB	IDEN, "offset", -8, #10, 130, 5
	SYMB	IDEN, "samples", -1, #6, 130, 5
	SYMB	LTIM, "samples", -1, 0, 69
; rs232cmd.c 2608		int field, line;
; rs232cmd.c 2609		float offset;
; rs232cmd.c 2610		long samples;
; rs232cmd.c 2611	
; rs232cmd.c 2612		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2612
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_482
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_482
; rs232cmd.c 2613		{
; rs232cmd.c 2614			if ( CmdRequest)
	SYMB	LINE, 2614
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_473
; rs232cmd.c 2615			{
; rs232cmd.c 2616				if ( ParCnt)
	SYMB	LINE, 2616
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_472
; rs232cmd.c 2617					SCPIError = ParNotAllowed;
	SYMB	LINE, 2617
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_482
_472:
; rs232cmd.c 2618				else
; rs232cmd.c 2619				{
; rs232cmd.c 2620					PrintSamplesToFLT( CBSetup.System, CBSetup.Delay*256);
	SYMB	LINE, 2620
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _CBSetup+4 )
	MOV.W	R3,#SOF( _CBSetup+4 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	ASL.D	R2,#08H
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2621	
; rs232cmd.c 2622					rs232putchar ( '\n');
	SYMB	LINE, 2622
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2623				}
; rs232cmd.c 2624			}
	SYMB	LINE, 2624
	BR	_482
_473:
; rs232cmd.c 2625			else
; rs232cmd.c 2626			{
; rs232cmd.c 2627				if (( ParCnt != 3) || ( sscanf( Cmd, "%d,%d,%f", &field, &line, &offset) != 3))
	SYMB	LINE, 2627
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_474
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 16
	PUSH.W	R4, R5
	SYMB	SOFF, 20
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	MOV.W	R3,#SEG( _299 )
	MOV.W	R2,#SOF( _299 )
	PUSH.W	R2, R3
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 12
	CMP.W	R0,#03H
	BEQ	_475
_474:
; rs232cmd.c 2628					SCPIError = SyntaxErr;
	SYMB	LINE, 2628
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_482
_475:
; rs232cmd.c 2629				else
; rs232cmd.c 2630				{
; rs232cmd.c 2631					if (( samples = FLTToSamples( CBSetup.System, field, line, offset)) == -1)
	SYMB	LINE, 2631
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MOV.W	R1,[R7]
	MOV.W	R2,[R7+2]
	MOV.W	R5,[R7+6]
	MOV.W	R4,[R7+4]
	PUSH.W	R4, R5
	SYMB	SOFF, 16
	CALL	_FLTToSamples
	ADDS.W	R7,#04H
	SYMB	SOFF, 12
	MOV.W	R3,R1
	MOV.W	R2,R0
	CMP.W	R3,#0FFFFH
	BNE	_485
	CMP.W	R2,#0FFFFH
_485:
	BNE	_476
; rs232cmd.c 2632						SCPIError = ExecErr;
	SYMB	LINE, 2632
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_482
_476:
; rs232cmd.c 2633					else		
; rs232cmd.c 2634						SetCBDelay( samples/256);
	SYMB	LINE, 2634
	MOV.W	R3,#00H
	MOV.W	R2,#0100H
	FCALL	__SDIVL
	CALL	_SetCBDelay
; rs232cmd.c 2635				}
; rs232cmd.c 2636			}
; rs232cmd.c 2637		}
	SYMB	LINE, 2637
_482:
; rs232cmd.c 2638	}
	SYMB	LINE, 2638
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2639	
; rs232cmd.c 2640	/**************************************************************************/
; rs232cmd.c 2641	/* TSGenScHPhase														 	   							 RS232CMD.C	*/
; rs232cmd.c 2642	/*																																				*/
; rs232cmd.c 2643	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 2644	/* Revised:		000727				     																					*/
; rs232cmd.c 2645	/*																																				*/
; rs232cmd.c 2646	/* Function:	Handle the Colorbar ScH-Phase-command.											*/
; rs232cmd.c 2647	/* Remarks:		--																													*/
; rs232cmd.c 2648	/* Returns:		--																													*/
; rs232cmd.c 2649	/* Updates:		--																													*/
; rs232cmd.c 2650	/**************************************************************************/
; rs232cmd.c 2651	void TSGenScHPhase( void)
; rs232cmd.c 2652	{
	ALIGN	1
	SYMB	LINE, 2652
	PUBLIC	_TSGenScHPhase
_TSGenScHPhase:
	SYMB	TYPE, 589, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGenScHPhase", _TSGenScHPhase, #589, 0, 0, 0
	SYMB	ALAB, _TSGenScHPhase, #589
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "schphase", -2, #16, 130, 5
; rs232cmd.c 2653		int schphase;
; rs232cmd.c 2654	
; rs232cmd.c 2655		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2655
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_497
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_497
; rs232cmd.c 2656		{
; rs232cmd.c 2657			if ( CmdRequest)
	SYMB	LINE, 2657
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_487
; rs232cmd.c 2658			{
; rs232cmd.c 2659				if ( ParCnt)
	SYMB	LINE, 2659
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_486
; rs232cmd.c 2660					SCPIError = ParNotAllowed;
	SYMB	LINE, 2660
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_497
_486:
; rs232cmd.c 2661				else
; rs232cmd.c 2662					rs232printf( 6, "%d\n", CBSetup.ScHPhase);
	SYMB	LINE, 2662
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R1,#SOF( _CBSetup+8 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 2663			}
	SYMB	LINE, 2663
	BR	_497
_487:
; rs232cmd.c 2664			else
; rs232cmd.c 2665			{
; rs232cmd.c 2666				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &schphase) != 1))
	SYMB	LINE, 2666
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_488
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_489
_488:
; rs232cmd.c 2667					SCPIError = SyntaxErr;
	SYMB	LINE, 2667
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_497
_489:
; rs232cmd.c 2668				else
; rs232cmd.c 2669				{
; rs232cmd.c 2670					if (( schphase < ScHPhaseLow) || ( schphase > ScHPhaseHigh))
	SYMB	LINE, 2670
	CMP.W	[R7],#0FF4DH
	BLT	_490
	CMP.W	[R7],#0B4H
	BLE	_491
_490:
; rs232cmd.c 2671						SCPIError = DataOutOfRange;
	SYMB	LINE, 2671
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_497
_491:
; rs232cmd.c 2672					else
; rs232cmd.c 2673						SetCBScHPhase( schphase);
	SYMB	LINE, 2673
	MOV.W	R0,[R7]
	CALL	_SetCBScHPhase
; rs232cmd.c 2674				}
; rs232cmd.c 2675			}
; rs232cmd.c 2676		}
	SYMB	LINE, 2676
_497:
; rs232cmd.c 2677	}
	SYMB	LINE, 2677
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2678	
; rs232cmd.c 2679	/**************************************************************************/
; rs232cmd.c 2680	/* TSGenEmbAudioSignal											 	   							 RS232CMD.C	*/
; rs232cmd.c 2681	/*																																				*/
; rs232cmd.c 2682	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 2683	/* Revised:		000727				     																					*/
; rs232cmd.c 2684	/*																																				*/
; rs232cmd.c 2685	/* Function:	Handle the Colorbar embedded audio signal										*/
; rs232cmd.c 2686	/* Remarks:		--																													*/
; rs232cmd.c 2687	/* Returns:		--																													*/
; rs232cmd.c 2688	/* Updates:		--																													*/
; rs232cmd.c 2689	/**************************************************************************/
; rs232cmd.c 2690	void TSGenEmbAudioSignal( void)
; rs232cmd.c 2691	{
	ALIGN	1
	SYMB	LINE, 2691
	PUBLIC	_TSGenEmbAudioSignal
_TSGenEmbAudioSignal:
	SYMB	TYPE, 590, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGenEmbAudioSignal", _TSGenEmbAudioSignal, #590, 0, 0, 48
	SYMB	ALAB, _TSGenEmbAudioSignal, #590
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "signal", -1, #16, 130, 5
	SYMB	LTIM, "signal", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2692		int signal;
; rs232cmd.c 2693		char code *str;
; rs232cmd.c 2694	
; rs232cmd.c 2695		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2695
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_513
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_513
; rs232cmd.c 2696		{
; rs232cmd.c 2697			if ( CmdRequest)
	SYMB	LINE, 2697
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_505
; rs232cmd.c 2698			{
; rs232cmd.c 2699				if ( ParCnt)
	SYMB	LINE, 2699
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_502
; rs232cmd.c 2700					SCPIError = ParNotAllowed;
	SYMB	LINE, 2700
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_513
_502:
; rs232cmd.c 2701				else
; rs232cmd.c 2702				{
; rs232cmd.c 2703					str = EmbAudioSignalPar[CBSetup.EmbAudioSignal].LongName;
	SYMB	LINE, 2703
	MOV.B	ES,#SEG( _CBSetup+10 )
	MOV.W	R0,#SOF( _CBSetup+10 )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _EmbAudioSignalPar )
	MOV.W	R0,#SOF( _EmbAudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_514
	ADDS.B	CS,#01H
_514:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2704	
; rs232cmd.c 2705					while ( *str)
	SYMB	LINE, 2705
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_504
_503:
; rs232cmd.c 2706						rs232putchar( *str++);
	SYMB	LINE, 2706
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2705
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_503
	SYMB	LINE, 2706
_504:
; rs232cmd.c 2707	
; rs232cmd.c 2708					rs232putchar('\n');
	SYMB	LINE, 2708
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2709				}
; rs232cmd.c 2710			}
	SYMB	LINE, 2710
	BR	_513
_505:
; rs232cmd.c 2711			else
; rs232cmd.c 2712			{
; rs232cmd.c 2713				if ( ParCnt != 1)
	SYMB	LINE, 2713
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_506
; rs232cmd.c 2714					SCPIError = SyntaxErr;
	SYMB	LINE, 2714
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_513
_506:
; rs232cmd.c 2715				else
; rs232cmd.c 2716				{
; rs232cmd.c 2717					signal = FindParameter( Cmd, EmbAudioSignalPar);
	SYMB	LINE, 2717
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _EmbAudioSignalPar )
	MOV.W	R2,#SOF( _EmbAudioSignalPar )
	CALL	_FindParameter
	SYMB	LTIM, "signal", 2, 0, 205
; rs232cmd.c 2718		
; rs232cmd.c 2719					if ( signal > -1)
	SYMB	LINE, 2719
	CMP.W	R0,#0FFFFH
	BLE	_507
	SYMB	LTIM, "signal", 2, 0, 77
; rs232cmd.c 2720						SetCBEmbAudioSignal( signal);
	SYMB	LINE, 2720
	CALL	_SetCBEmbAudioSignal
	BR	_513
_507:
; rs232cmd.c 2721					else
; rs232cmd.c 2722						SCPIError = DataOutOfRange;
	SYMB	LINE, 2722
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2723				}
; rs232cmd.c 2724			}
; rs232cmd.c 2725		}
	SYMB	LINE, 2725
_513:
; rs232cmd.c 2726	}
	SYMB	LINE, 2726
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2727	
; rs232cmd.c 2728	/**************************************************************************/
; rs232cmd.c 2729	/* AudioGenOutput																				 	     RS232CMD.C	*/
; rs232cmd.c 2730	/*																																				*/
; rs232cmd.c 2731	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 2732	/* Revised:		000603				     																					*/
; rs232cmd.c 2733	/*																																				*/
; rs232cmd.c 2734	/* Function:	--																													*/
; rs232cmd.c 2735	/* Remarks:		--																													*/
; rs232cmd.c 2736	/* Returns:		--																													*/
; rs232cmd.c 2737	/* Updates:		--																													*/
; rs232cmd.c 2738	/**************************************************************************/
; rs232cmd.c 2739	void AudioGenOutput( void)
; rs232cmd.c 2740	{
	ALIGN	1
	SYMB	LINE, 2740
	PUBLIC	_AudioGenOutput
_AudioGenOutput:
	SYMB	TYPE, 591, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenOutput", _AudioGenOutput, #591, 0, 0, 48
	SYMB	ALAB, _AudioGenOutput, #591
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "output", -1, #16, 130, 5
	SYMB	LTIM, "output", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2741		int output;
; rs232cmd.c 2742		char code *str;
; rs232cmd.c 2743	
; rs232cmd.c 2744		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2744
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_529
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_529
; rs232cmd.c 2745		{
; rs232cmd.c 2746			if ( CmdRequest)
	SYMB	LINE, 2746
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_520
; rs232cmd.c 2747			{
; rs232cmd.c 2748				if ( ParCnt)
	SYMB	LINE, 2748
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_517
; rs232cmd.c 2749					SCPIError = ParNotAllowed;
	SYMB	LINE, 2749
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_529
_517:
; rs232cmd.c 2750				else
; rs232cmd.c 2751				{
; rs232cmd.c 2752					str = AudioOutputPar[AudioOutput].LongName;
	SYMB	LINE, 2752
	MOV.B	ES,#SEG( _AudioOutput )
	MOV.W	R0,#SOF( _AudioOutput )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioOutputPar )
	MOV.W	R0,#SOF( _AudioOutputPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_530
	ADDS.B	CS,#01H
_530:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2753	
; rs232cmd.c 2754					while ( *str)
	SYMB	LINE, 2754
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_519
_518:
; rs232cmd.c 2755						rs232putchar( *str++);
	SYMB	LINE, 2755
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2754
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_518
	SYMB	LINE, 2755
_519:
; rs232cmd.c 2756	
; rs232cmd.c 2757					rs232putchar('\n');
	SYMB	LINE, 2757
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2758				}
; rs232cmd.c 2759			}
	SYMB	LINE, 2759
	BR	_529
_520:
; rs232cmd.c 2760			else
; rs232cmd.c 2761			{
; rs232cmd.c 2762				if ( ParCnt != 1)
	SYMB	LINE, 2762
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_521
; rs232cmd.c 2763					SCPIError = SyntaxErr;
	SYMB	LINE, 2763
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_529
_521:
; rs232cmd.c 2764				else
; rs232cmd.c 2765				{
; rs232cmd.c 2766					output = FindParameter( Cmd, AudioOutputPar);
	SYMB	LINE, 2766
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AudioOutputPar )
	MOV.W	R2,#SOF( _AudioOutputPar )
	CALL	_FindParameter
	SYMB	LTIM, "output", 2, 0, 205
; rs232cmd.c 2767		
; rs232cmd.c 2768					if ( output > -1)
	SYMB	LINE, 2768
	CMP.W	R0,#0FFFFH
	BLE	_522
; rs232cmd.c 2769					{
; rs232cmd.c 2770						if ( SetAudioOutput( output) == FAIL)
	SYMB	LINE, 2770
	CALL	_SetAudioOutput
	SYMB	LTIM, "output", 2, 0, 77
	OR.W	R0,R0
	BNE	_529
; rs232cmd.c 2771							SCPIError = ExecErr;
	SYMB	LINE, 2771
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 2772					}
	SYMB	LINE, 2772
	BR	_529
_522:
; rs232cmd.c 2773					else
; rs232cmd.c 2774						SCPIError = DataOutOfRange;
	SYMB	LINE, 2774
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2775				}
; rs232cmd.c 2776			}
; rs232cmd.c 2777		}
	SYMB	LINE, 2777
_529:
; rs232cmd.c 2778	}
	SYMB	LINE, 2778
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2779	
; rs232cmd.c 2780	/**************************************************************************/
; rs232cmd.c 2781	/* AudioGenAnalog																				 	     RS232CMD.C	*/
; rs232cmd.c 2782	/*																																				*/
; rs232cmd.c 2783	/* Author:		Kim Engedahl, DEV, 000526	    															*/
; rs232cmd.c 2784	/* Revised:		000705				     																					*/
; rs232cmd.c 2785	/*																																				*/
; rs232cmd.c 2786	/* Function:	--																													*/
; rs232cmd.c 2787	/* Remarks:		Request only.																								*/
; rs232cmd.c 2788	/* Returns:	  --																													*/
; rs232cmd.c 2789	/* Updates:		--																													*/
; rs232cmd.c 2790	/**************************************************************************/
; rs232cmd.c 2791	void AudioGenAnalog( void)
; rs232cmd.c 2792	{
	ALIGN	1
	SYMB	LINE, 2792
	PUBLIC	_AudioGenAnalog
_AudioGenAnalog:
	SYMB	TYPE, 592, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAnalog", _AudioGenAnalog, #592, 0, 0, 112
	SYMB	ALAB, _AudioGenAnalog, #592
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "level", -1, #16, 130, 5
	SYMB	LTIM, "level", -1, 0, 69
; rs232cmd.c 2793		char code *str;
; rs232cmd.c 2794		int level;
; rs232cmd.c 2795	
; rs232cmd.c 2796		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2796
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_605
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_605
; rs232cmd.c 2797		{
; rs232cmd.c 2798			if ( !CmdRequest)
	SYMB	LINE, 2798
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_534
; rs232cmd.c 2799					SCPIError = SyntaxErr;
	SYMB	LINE, 2799
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_605
_534:
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2800			else
; rs232cmd.c 2801			{
; rs232cmd.c 2802				if ( ParCnt)
	SYMB	LINE, 2802
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_535
; rs232cmd.c 2803					SCPIError = ParNotAllowed;
	SYMB	LINE, 2803
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_605
_535:
	SYMB	LTIM, "level", 26, 0, 77
RS232CMD_IR	SEGMENT	HCODE INSEGMENT ROMDATA
	RSEG	RS232CMD_IR
	ALIGN	1
__swtable607:
	DW	SOF _538,SEG _538
	DW	SOF _539,SEG _539
	DW	SOF _540,SEG _540
	DW	SOF _541,SEG _541
	DW	SOF _542,SEG _542
	DW	SOF _543,SEG _543
	DW	SOF _544,SEG _544
	DW	SOF _545,SEG _545
	DW	SOF _546,SEG _546
	DW	SOF _547,SEG _547
	DW	SOF _548,SEG _548
	DW	SOF _549,SEG _549
	DW	SOF _550,SEG _550
	DW	SOF _551,SEG _551
	DW	SOF _552,SEG _552
	DW	SOF _553,SEG _553
	DW	SOF _554,SEG _554
	DW	SOF _555,SEG _555
	DW	SOF _556,SEG _556
	DW	SOF _557,SEG _557
	DW	SOF _558,SEG _558
	DW	SOF _559,SEG _559
	DW	SOF _560,SEG _560
	DW	SOF _561,SEG _561
	DW	SOF _562,SEG _562
	DW	SOF _563,SEG _563
	DW	SOF _564,SEG _564
	DW	SOF _565,SEG _565
	DW	SOF _566,SEG _566
	DW	SOF _567,SEG _567
	RSEG	RS232CMD_PR
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2804				else
; rs232cmd.c 2805				{
; rs232cmd.c 2806					str = AudioSignalPar[AudioSetup[AnalogAudio].Signal].LongName;
	SYMB	LINE, 2806
	MOV.B	ES,#SEG( _AudioSetup+2 )
	MOV.W	R0,#SOF( _AudioSetup+2 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioSignalPar )
	MOV.W	R0,#SOF( _AudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_606
	ADDS.B	CS,#01H
_606:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2807	
; rs232cmd.c 2808					while ( *str)
	SYMB	LINE, 2808
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_537
_536:
; rs232cmd.c 2809						rs232putchar( *str++);
	SYMB	LINE, 2809
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2808
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_536
	SYMB	LINE, 2809
_537:
; rs232cmd.c 2810	
; rs232cmd.c 2811					rs232putchar(',');
	SYMB	LINE, 2811
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2812	
; rs232cmd.c 2813					str = NULL;
	SYMB	LINE, 2813
	MOV.W	R5,#00H
	MOV.W	R4,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2814	
; rs232cmd.c 2815					switch ( AudioSetup[AnalogAudio].Level)
	SYMB	LINE, 2815
	MOV.B	ES,#SEG( _AudioSetup+4 )
	MOV.W	R0,#SOF( _AudioSetup+4 )
	MOV.W	R0,[R0]
	ADDS.W	R0,#0FH
	CMP.W	R0,#01DH
	BG	_568
	ASL.W	R0,#02H
	MOV.B	CS,#SEG( __swtable607 )
	ADD.W	R0,#SOF( __swtable607 )
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	RET
; rs232cmd.c 2816					{
; rs232cmd.c 2817					 	case P10dBm:
	SYMB	LINE, 2817
_538:
; rs232cmd.c 2818							level = 10;
	SYMB	LINE, 2818
	MOV.W	R6,#0AH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2819							break;
	SYMB	LINE, 2819
	BR	_600
; rs232cmd.c 2820	
; rs232cmd.c 2821					 	case P8dBm:
	SYMB	LINE, 2821
_539:
; rs232cmd.c 2822							level = 8;
	SYMB	LINE, 2822
	MOV.W	R6,#08H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2823							break;
	SYMB	LINE, 2823
	BR	_600
; rs232cmd.c 2824	
; rs232cmd.c 2825					 	case P7dBm:
	SYMB	LINE, 2825
_540:
; rs232cmd.c 2826							level = 7;
	SYMB	LINE, 2826
	MOV.W	R6,#07H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2827							break;
	SYMB	LINE, 2827
	BR	_600
; rs232cmd.c 2828	
; rs232cmd.c 2829					 	case P6dBm:
	SYMB	LINE, 2829
_541:
; rs232cmd.c 2830							level = 6;
	SYMB	LINE, 2830
	MOV.W	R6,#06H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2831							break;
	SYMB	LINE, 2831
	BR	_600
; rs232cmd.c 2832	
; rs232cmd.c 2833					 	case P5dBm:
	SYMB	LINE, 2833
_542:
; rs232cmd.c 2834							level = 5;
	SYMB	LINE, 2834
	MOV.W	R6,#05H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2835							break;
	SYMB	LINE, 2835
	BR	_600
; rs232cmd.c 2836	
; rs232cmd.c 2837					 	case P4dBm:
	SYMB	LINE, 2837
_543:
; rs232cmd.c 2838							level = 4;
	SYMB	LINE, 2838
	MOV.W	R6,#04H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2839							break;
	SYMB	LINE, 2839
	BR	_600
; rs232cmd.c 2840	
; rs232cmd.c 2841					 	case P3dBm:
	SYMB	LINE, 2841
_544:
; rs232cmd.c 2842							level = 3;
	SYMB	LINE, 2842
	MOV.W	R6,#03H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2843							break;
	SYMB	LINE, 2843
	BR	_600
; rs232cmd.c 2844	
; rs232cmd.c 2845					 	case P2dBm:
	SYMB	LINE, 2845
_545:
; rs232cmd.c 2846							level = 2;
	SYMB	LINE, 2846
	MOV.W	R6,#02H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2847							break;
	SYMB	LINE, 2847
	BR	_600
; rs232cmd.c 2848	
; rs232cmd.c 2849					 	case P1dBm:
	SYMB	LINE, 2849
_546:
; rs232cmd.c 2850							level = 1;
	SYMB	LINE, 2850
	MOV.W	R6,#01H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2851							break;
	SYMB	LINE, 2851
	BR	_600
; rs232cmd.c 2852	
; rs232cmd.c 2853					 	case M0dBm:
	SYMB	LINE, 2853
_547:
; rs232cmd.c 2854							level = 0;
	SYMB	LINE, 2854
	MOV.W	R6,#00H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2855							break;
	SYMB	LINE, 2855
	BR	_600
; rs232cmd.c 2856	
; rs232cmd.c 2857					 	case M1dBm:
	SYMB	LINE, 2857
_548:
; rs232cmd.c 2858							level = -1;
	SYMB	LINE, 2858
	MOV.W	R6,#0FFFFH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2859							break;
	SYMB	LINE, 2859
	BR	_600
; rs232cmd.c 2860	
; rs232cmd.c 2861					 	case M2dBm:
	SYMB	LINE, 2861
_549:
; rs232cmd.c 2862							level = -2;
	SYMB	LINE, 2862
	MOV.W	R6,#0FFFEH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2863							break;
	SYMB	LINE, 2863
	BR	_600
; rs232cmd.c 2864	
; rs232cmd.c 2865					 	case M3dBm:
	SYMB	LINE, 2865
_550:
; rs232cmd.c 2866							level = -3;
	SYMB	LINE, 2866
	MOV.W	R6,#0FFFDH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2867							break;
	SYMB	LINE, 2867
	BR	_600
; rs232cmd.c 2868	
; rs232cmd.c 2869					 	case M4dBm:
	SYMB	LINE, 2869
_551:
; rs232cmd.c 2870							level = -4;
	SYMB	LINE, 2870
	MOV.W	R6,#0FFFCH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2871							break;
	SYMB	LINE, 2871
	BR	_600
; rs232cmd.c 2872	
; rs232cmd.c 2873					 	case M5dBm:
	SYMB	LINE, 2873
_552:
; rs232cmd.c 2874							level = -5;
	SYMB	LINE, 2874
	MOV.W	R6,#0FFFBH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2875							break;
	SYMB	LINE, 2875
	BR	_600
; rs232cmd.c 2876	
; rs232cmd.c 2877					 	case M6dBm:
	SYMB	LINE, 2877
_553:
; rs232cmd.c 2878							level = -6;
	SYMB	LINE, 2878
	MOV.W	R6,#0FFFAH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2879							break;
	SYMB	LINE, 2879
	BR	_600
; rs232cmd.c 2880	
; rs232cmd.c 2881					 	case M7dBm:
	SYMB	LINE, 2881
_554:
; rs232cmd.c 2882							level = -7;
	SYMB	LINE, 2882
	MOV.W	R6,#0FFF9H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2883							break;
	SYMB	LINE, 2883
	BR	_600
; rs232cmd.c 2884	
; rs232cmd.c 2885					 	case M8dBm:
	SYMB	LINE, 2885
_555:
; rs232cmd.c 2886							level = -8;
	SYMB	LINE, 2886
	MOV.W	R6,#0FFF8H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2887							break;
	SYMB	LINE, 2887
	BR	_600
; rs232cmd.c 2888	
; rs232cmd.c 2889					 	case M9dBm:
	SYMB	LINE, 2889
_556:
; rs232cmd.c 2890							level = -9;
	SYMB	LINE, 2890
	MOV.W	R6,#0FFF7H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2891							break;
	SYMB	LINE, 2891
	BR	_600
; rs232cmd.c 2892	
; rs232cmd.c 2893					 	case M10dBm:
	SYMB	LINE, 2893
_557:
; rs232cmd.c 2894							level = -10;
	SYMB	LINE, 2894
	MOV.W	R6,#0FFF6H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2895							break;
	SYMB	LINE, 2895
	BR	_600
; rs232cmd.c 2896	
; rs232cmd.c 2897					 	case M11dBm:
	SYMB	LINE, 2897
_558:
; rs232cmd.c 2898							level = -11;
	SYMB	LINE, 2898
	MOV.W	R6,#0FFF5H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2899							break;
	SYMB	LINE, 2899
	BR	_600
; rs232cmd.c 2900	
; rs232cmd.c 2901					 	case M12dBm:
	SYMB	LINE, 2901
_559:
; rs232cmd.c 2902							level = -12;
	SYMB	LINE, 2902
	MOV.W	R6,#0FFF4H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2903							break;
	SYMB	LINE, 2903
	BR	_600
; rs232cmd.c 2904	
; rs232cmd.c 2905					 	case M15dBm:
	SYMB	LINE, 2905
_560:
; rs232cmd.c 2906							level = -15;
	SYMB	LINE, 2906
	MOV.W	R6,#0FFF1H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2907							break;
	SYMB	LINE, 2907
	BR	_600
; rs232cmd.c 2908	
; rs232cmd.c 2909					 	case M18dBm:
	SYMB	LINE, 2909
_561:
; rs232cmd.c 2910							level = -18;
	SYMB	LINE, 2910
	MOV.W	R6,#0FFEEH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2911							break;
	SYMB	LINE, 2911
	BR	_600
; rs232cmd.c 2912	
; rs232cmd.c 2913						case M21dBm:
	SYMB	LINE, 2913
_562:
; rs232cmd.c 2914							level = -21;
	SYMB	LINE, 2914
	MOV.W	R6,#0FFEBH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2915							break;
	SYMB	LINE, 2915
	BR	_600
; rs232cmd.c 2916	
; rs232cmd.c 2917					 	case M24dBm:
	SYMB	LINE, 2917
_563:
; rs232cmd.c 2918							level = -24;
	SYMB	LINE, 2918
	MOV.W	R6,#0FFE8H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2919							break;
	SYMB	LINE, 2919
	BR	_600
; rs232cmd.c 2920	
; rs232cmd.c 2921					 	case M27dBm:
	SYMB	LINE, 2921
_564:
; rs232cmd.c 2922							level = -27;
	SYMB	LINE, 2922
	MOV.W	R6,#0FFE5H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2923							break;
	SYMB	LINE, 2923
	BR	_600
; rs232cmd.c 2924	
; rs232cmd.c 2925					 	case M30dBm:
	SYMB	LINE, 2925
_565:
; rs232cmd.c 2926							level = -30;
	SYMB	LINE, 2926
	MOV.W	R6,#0FFE2H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2927							break;
	SYMB	LINE, 2927
	BR	_600
; rs232cmd.c 2928	
; rs232cmd.c 2929					 	case M33dBm:
	SYMB	LINE, 2929
_566:
; rs232cmd.c 2930							level = -33;
	SYMB	LINE, 2930
	MOV.W	R6,#0FFDFH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2931							break;
	SYMB	LINE, 2931
	BR	_600
; rs232cmd.c 2932	
; rs232cmd.c 2933						case M36dBm:
	SYMB	LINE, 2933
_567:
; rs232cmd.c 2934							level = -36;
	SYMB	LINE, 2934
	MOV.W	R6,#0FFDCH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2935							break;
	SYMB	LINE, 2935
	BR	_600
; rs232cmd.c 2936	
; rs232cmd.c 2937						default:
	SYMB	LINE, 2937
_568:
; rs232cmd.c 2938							str = SILENCEParTxt;
	SYMB	LINE, 2938
	MOV.W	R5,#SEG( _SILENCEParTxt )
	MOV.W	R4,#SOF( _SILENCEParTxt )
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2939	
; rs232cmd.c 2940							while ( *str)
	SYMB	LINE, 2940
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_570
_569:
; rs232cmd.c 2941								rs232putchar( *str++);
	SYMB	LINE, 2941
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2940
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_569
	SYMB	LINE, 2941
_570:
; rs232cmd.c 2942	
; rs232cmd.c 2943							rs232putchar(',');
	SYMB	LINE, 2943
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2944							break;
; rs232cmd.c 2945						}
	SYMB	LINE, 2945
_600:
; rs232cmd.c 2946	
; rs232cmd.c 2947					if ( str == NULL)
	SYMB	LINE, 2947
	OR.W	R5,R4
	BNE	_601
; rs232cmd.c 2948						rs232printf( 6, "%d,", level);
	SYMB	LINE, 2948
	MOV.W	R0,#06H
	PUSH.W	R6
	SYMB	SOFF, 8
	SYMB	LTIM, "level", 26, 0, 77
	MOV.W	R3,#SEG( _533 )
	MOV.W	R2,#SOF( _533 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
_601:
; rs232cmd.c 2949	
; rs232cmd.c 2950					rs232printf( 6, "%d\n", AudioSetup[AnalogAudio].Click);			
	SYMB	LINE, 2950
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _AudioSetup+12 )
	MOV.W	R1,#SOF( _AudioSetup+12 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
; rs232cmd.c 2951				}
; rs232cmd.c 2952			}
; rs232cmd.c 2953		}
	SYMB	LINE, 2953
_605:
; rs232cmd.c 2954	}
	SYMB	LINE, 2954
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2955	
; rs232cmd.c 2956	/**************************************************************************/
; rs232cmd.c 2957	/* AudioGenAnalogSignal		 															 	     RS232CMD.C	*/
; rs232cmd.c 2958	/*																																				*/
; rs232cmd.c 2959	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 2960	/* Revised:		000603				     																					*/
; rs232cmd.c 2961	/*																																				*/
; rs232cmd.c 2962	/* Function:	--																													*/
; rs232cmd.c 2963	/* Remarks:		--																													*/
; rs232cmd.c 2964	/* Returns:		--																													*/
; rs232cmd.c 2965	/* Updates:		--																													*/
; rs232cmd.c 2966	/**************************************************************************/
; rs232cmd.c 2967	void AudioGenAnalogSignal( void)
; rs232cmd.c 2968	{
	ALIGN	1
	SYMB	LINE, 2968
	PUBLIC	_AudioGenAnalogSignal
_AudioGenAnalogSignal:
	SYMB	TYPE, 593, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAnalogSignal", _AudioGenAnalogSignal, #593, 0, 0, 48
	SYMB	ALAB, _AudioGenAnalogSignal, #593
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "signal", -1, #16, 130, 5
	SYMB	LTIM, "signal", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2969		int signal;
; rs232cmd.c 2970		char code *str;
; rs232cmd.c 2971	
; rs232cmd.c 2972		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2972
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_620
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_620
; rs232cmd.c 2973		{
; rs232cmd.c 2974			if ( CmdRequest)
	SYMB	LINE, 2974
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_611
; rs232cmd.c 2975			{
; rs232cmd.c 2976				if ( ParCnt)
	SYMB	LINE, 2976
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_608
; rs232cmd.c 2977					SCPIError = ParNotAllowed;
	SYMB	LINE, 2977
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_620
_608:
; rs232cmd.c 2978				else
; rs232cmd.c 2979				{
; rs232cmd.c 2980					str = AudioSignalPar[AudioSetup[AnalogAudio].Signal].LongName;
	SYMB	LINE, 2980
	MOV.B	ES,#SEG( _AudioSetup+2 )
	MOV.W	R0,#SOF( _AudioSetup+2 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioSignalPar )
	MOV.W	R0,#SOF( _AudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_621
	ADDS.B	CS,#01H
_621:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2981	
; rs232cmd.c 2982					while ( *str)
	SYMB	LINE, 2982
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_610
_609:
; rs232cmd.c 2983						rs232putchar( *str++);
	SYMB	LINE, 2983
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2982
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_609
	SYMB	LINE, 2983
_610:
; rs232cmd.c 2984	
; rs232cmd.c 2985					rs232putchar('\n');
	SYMB	LINE, 2985
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2986				}
; rs232cmd.c 2987			}
	SYMB	LINE, 2987
	BR	_620
_611:
; rs232cmd.c 2988			else
; rs232cmd.c 2989			{
; rs232cmd.c 2990				if ( ParCnt != 1)
	SYMB	LINE, 2990
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_612
; rs232cmd.c 2991					SCPIError = SyntaxErr;
	SYMB	LINE, 2991
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_620
_612:
; rs232cmd.c 2992				else
; rs232cmd.c 2993				{
; rs232cmd.c 2994					signal = FindParameter( Cmd, AudioSignalPar);
	SYMB	LINE, 2994
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AudioSignalPar )
	MOV.W	R2,#SOF( _AudioSignalPar )
	CALL	_FindParameter
	SYMB	LTIM, "signal", 2, 0, 205
; rs232cmd.c 2995		
; rs232cmd.c 2996					if ( signal > -1)
	SYMB	LINE, 2996
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "signal", 2, 0, 77
	SYMB	LTIM, "signal", 6, 0, 205
	BLE	_613
; rs232cmd.c 2997					{
; rs232cmd.c 2998						if ( SetAudioSignal( AnalogAudio, signal) == FAIL)
	SYMB	LINE, 2998
	MOV.W	R0,#00H
	CALL	_SetAudioSignal
	SYMB	LTIM, "signal", 6, 0, 77
	OR.W	R0,R0
	BNE	_620
; rs232cmd.c 2999								SCPIError = ExecErr;
	SYMB	LINE, 2999
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3000					}
	SYMB	LINE, 3000
	BR	_620
_613:
; rs232cmd.c 3001					else
; rs232cmd.c 3002						SCPIError = DataOutOfRange;
	SYMB	LINE, 3002
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3003				}
; rs232cmd.c 3004			}
; rs232cmd.c 3005		}
	SYMB	LINE, 3005
_620:
; rs232cmd.c 3006	}
	SYMB	LINE, 3006
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3007	
; rs232cmd.c 3008	/**************************************************************************/
; rs232cmd.c 3009	/* AudioGenAnalogLevel																	 	     RS232CMD.C	*/
; rs232cmd.c 3010	/*																																				*/
; rs232cmd.c 3011	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3012	/* Revised:		000705				     																					*/
; rs232cmd.c 3013	/*																																				*/
; rs232cmd.c 3014	/* Function:	--																													*/
; rs232cmd.c 3015	/* Remarks:		--																													*/
; rs232cmd.c 3016	/* Returns:		--																													*/
; rs232cmd.c 3017	/* Updates:		--																													*/
; rs232cmd.c 3018	/**************************************************************************/
; rs232cmd.c 3019	void AudioGenAnalogLevel( void)
; rs232cmd.c 3020	{
	ALIGN	1
	SYMB	LINE, 3020
	PUBLIC	_AudioGenAnalogLevel
_AudioGenAnalogLevel:
	SYMB	TYPE, 594, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAnalogLevel", _AudioGenAnalogLevel, #594, 0, 0, 48
	SYMB	ALAB, _AudioGenAnalogLevel, #594
	RSEG	RS232CMD_IR
	ALIGN	1
__swtable762:
	DW	SOF _657,SEG _657
	DW	SOF _625,SEG _625
	DW	SOF _626,SEG _626
	DW	SOF _627,SEG _627
	DW	SOF _628,SEG _628
	DW	SOF _629,SEG _629
	DW	SOF _630,SEG _630
	DW	SOF _631,SEG _631
	DW	SOF _632,SEG _632
	DW	SOF _633,SEG _633
	DW	SOF _634,SEG _634
	DW	SOF _635,SEG _635
	DW	SOF _636,SEG _636
	DW	SOF _637,SEG _637
	DW	SOF _638,SEG _638
	DW	SOF _639,SEG _639
	DW	SOF _640,SEG _640
	DW	SOF _641,SEG _641
	DW	SOF _642,SEG _642
	DW	SOF _643,SEG _643
	DW	SOF _644,SEG _644
	DW	SOF _645,SEG _645
	DW	SOF _646,SEG _646
	DW	SOF _647,SEG _647
	DW	SOF _648,SEG _648
	DW	SOF _649,SEG _649
	DW	SOF _650,SEG _650
	DW	SOF _651,SEG _651
	DW	SOF _652,SEG _652
	DW	SOF _653,SEG _653
	RSEG	RS232CMD_PR
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0EH
	SYMB	SOFF, 6
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "level", -6, #16, 130, 5
; rs232cmd.c 3021		code char *str;
; rs232cmd.c 3022		int level;
; rs232cmd.c 3023	
; rs232cmd.c 3024		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3024
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_761
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_761
; rs232cmd.c 3025		{
; rs232cmd.c 3026			if ( CmdRequest)
	SYMB	LINE, 3026
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_687
; rs232cmd.c 3027			{
; rs232cmd.c 3028				if ( ParCnt)
	SYMB	LINE, 3028
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_624
; rs232cmd.c 3029					SCPIError = ParNotAllowed;
	SYMB	LINE, 3029
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_761
_624:
; rs232cmd.c 3030				else
; rs232cmd.c 3031				{
; rs232cmd.c 3032					switch ( AudioSetup[AnalogAudio].Level)
	SYMB	LINE, 3032
	MOV.B	ES,#SEG( _AudioSetup+4 )
	MOV.W	R0,#SOF( _AudioSetup+4 )
	MOV.W	R0,[R0]
	ADDS.W	R0,#0FH
	CMP.W	R0,#01DH
	BG	_654
	ASL.W	R0,#02H
	MOV.B	CS,#SEG( __swtable762 )
	ADD.W	R0,#SOF( __swtable762 )
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	RET
; rs232cmd.c 3033					{
; rs232cmd.c 3034					 	case P10dBm:
; rs232cmd.c 3035							level = 10;
; rs232cmd.c 3036							break;
; rs232cmd.c 3037	
; rs232cmd.c 3038					 	case P8dBm:
	SYMB	LINE, 3038
_625:
; rs232cmd.c 3039							level = 8;
	SYMB	LINE, 3039
	MOV.W	[R7],#08H
; rs232cmd.c 3040							break;
	SYMB	LINE, 3040
	BR	_686
; rs232cmd.c 3041	
; rs232cmd.c 3042					 	case P7dBm:
	SYMB	LINE, 3042
_626:
; rs232cmd.c 3043							level = 7;
	SYMB	LINE, 3043
	MOV.W	[R7],#07H
; rs232cmd.c 3044							break;
	SYMB	LINE, 3044
	BR	_686
; rs232cmd.c 3045	
; rs232cmd.c 3046					 	case P6dBm:
	SYMB	LINE, 3046
_627:
; rs232cmd.c 3047							level = 6;
	SYMB	LINE, 3047
	MOV.W	[R7],#06H
; rs232cmd.c 3048							break;
	SYMB	LINE, 3048
	BR	_686
; rs232cmd.c 3049	
; rs232cmd.c 3050					 	case P5dBm:
	SYMB	LINE, 3050
_628:
; rs232cmd.c 3051							level = 5;
	SYMB	LINE, 3051
	MOV.W	[R7],#05H
; rs232cmd.c 3052							break;
	SYMB	LINE, 3052
	BR	_686
; rs232cmd.c 3053	
; rs232cmd.c 3054					 	case P4dBm:
	SYMB	LINE, 3054
_629:
; rs232cmd.c 3055							level = 4;
	SYMB	LINE, 3055
	MOV.W	[R7],#04H
; rs232cmd.c 3056							break;
	SYMB	LINE, 3056
	BR	_686
; rs232cmd.c 3057	
; rs232cmd.c 3058					 	case P3dBm:
	SYMB	LINE, 3058
_630:
; rs232cmd.c 3059							level = 3;
	SYMB	LINE, 3059
	MOV.W	[R7],#03H
; rs232cmd.c 3060							break;
	SYMB	LINE, 3060
	BR	_686
; rs232cmd.c 3061	
; rs232cmd.c 3062					 	case P2dBm:
	SYMB	LINE, 3062
_631:
; rs232cmd.c 3063							level = 2;
	SYMB	LINE, 3063
	MOV.W	[R7],#02H
; rs232cmd.c 3064							break;
	SYMB	LINE, 3064
	BR	_686
; rs232cmd.c 3065	
; rs232cmd.c 3066					 	case P1dBm:
	SYMB	LINE, 3066
_632:
; rs232cmd.c 3067							level = 1;
	SYMB	LINE, 3067
	MOV.W	[R7],#01H
; rs232cmd.c 3068							break;
	SYMB	LINE, 3068
	BR	_686
; rs232cmd.c 3069	
; rs232cmd.c 3070					 	case M0dBm:
	SYMB	LINE, 3070
_633:
; rs232cmd.c 3071							level = 0;
	SYMB	LINE, 3071
	MOV.W	[R7],#00H
; rs232cmd.c 3072							break;
	SYMB	LINE, 3072
	BR	_686
; rs232cmd.c 3073	
; rs232cmd.c 3074					 	case M1dBm:
	SYMB	LINE, 3074
_634:
; rs232cmd.c 3075							level = -1;
	SYMB	LINE, 3075
	MOV.W	[R7],#0FFFFH
; rs232cmd.c 3076							break;
	SYMB	LINE, 3076
	BR	_686
; rs232cmd.c 3077	
; rs232cmd.c 3078					 	case M2dBm:
	SYMB	LINE, 3078
_635:
; rs232cmd.c 3079							level = -2;
	SYMB	LINE, 3079
	MOV.W	[R7],#0FFFEH
; rs232cmd.c 3080							break;
	SYMB	LINE, 3080
	BR	_686
; rs232cmd.c 3081	
; rs232cmd.c 3082					 	case M3dBm:
	SYMB	LINE, 3082
_636:
; rs232cmd.c 3083							level = -3;
	SYMB	LINE, 3083
	MOV.W	[R7],#0FFFDH
; rs232cmd.c 3084							break;
	SYMB	LINE, 3084
	BR	_686
; rs232cmd.c 3085	
; rs232cmd.c 3086					 	case M4dBm:
	SYMB	LINE, 3086
_637:
; rs232cmd.c 3087							level = -4;
	SYMB	LINE, 3087
	MOV.W	[R7],#0FFFCH
; rs232cmd.c 3088							break;
	SYMB	LINE, 3088
	BR	_686
; rs232cmd.c 3089	
; rs232cmd.c 3090					 	case M5dBm:
	SYMB	LINE, 3090
_638:
; rs232cmd.c 3091							level = -5;
	SYMB	LINE, 3091
	MOV.W	[R7],#0FFFBH
; rs232cmd.c 3092							break;
	SYMB	LINE, 3092
	BR	_686
; rs232cmd.c 3093	
; rs232cmd.c 3094					 	case M6dBm:
	SYMB	LINE, 3094
_639:
; rs232cmd.c 3095							level = -6;
	SYMB	LINE, 3095
	MOV.W	[R7],#0FFFAH
; rs232cmd.c 3096							break;
	SYMB	LINE, 3096
	BR	_686
; rs232cmd.c 3097	
; rs232cmd.c 3098					 	case M7dBm:
	SYMB	LINE, 3098
_640:
; rs232cmd.c 3099							level = -7;
	SYMB	LINE, 3099
	MOV.W	[R7],#0FFF9H
; rs232cmd.c 3100							break;
	SYMB	LINE, 3100
	BR	_686
; rs232cmd.c 3101	
; rs232cmd.c 3102					 	case M8dBm:
	SYMB	LINE, 3102
_641:
; rs232cmd.c 3103							level = -8;
	SYMB	LINE, 3103
	MOV.W	[R7],#0FFF8H
; rs232cmd.c 3104							break;
	SYMB	LINE, 3104
	BR	_686
; rs232cmd.c 3105	
; rs232cmd.c 3106					 	case M9dBm:
	SYMB	LINE, 3106
_642:
; rs232cmd.c 3107							level = -9;
	SYMB	LINE, 3107
	MOV.W	[R7],#0FFF7H
; rs232cmd.c 3108							break;
	SYMB	LINE, 3108
	BR	_686
; rs232cmd.c 3109	
; rs232cmd.c 3110					 	case M10dBm:
	SYMB	LINE, 3110
_643:
; rs232cmd.c 3111							level = -10;
	SYMB	LINE, 3111
	MOV.W	[R7],#0FFF6H
; rs232cmd.c 3112							break;
	SYMB	LINE, 3112
	BR	_686
; rs232cmd.c 3113	
; rs232cmd.c 3114					 	case M11dBm:
	SYMB	LINE, 3114
_644:
; rs232cmd.c 3115							level = -11;
	SYMB	LINE, 3115
	MOV.W	[R7],#0FFF5H
; rs232cmd.c 3116							break;
	SYMB	LINE, 3116
	BR	_686
; rs232cmd.c 3117	
; rs232cmd.c 3118					 	case M12dBm:
	SYMB	LINE, 3118
_645:
; rs232cmd.c 3119							level = -12;
	SYMB	LINE, 3119
	MOV.W	[R7],#0FFF4H
; rs232cmd.c 3120							break;
	SYMB	LINE, 3120
	BR	_686
; rs232cmd.c 3121	
; rs232cmd.c 3122					 	case M15dBm:
	SYMB	LINE, 3122
_646:
; rs232cmd.c 3123							level = -15;
	SYMB	LINE, 3123
	MOV.W	[R7],#0FFF1H
; rs232cmd.c 3124							break;
	SYMB	LINE, 3124
	BR	_686
; rs232cmd.c 3125	
; rs232cmd.c 3126					 	case M18dBm:
	SYMB	LINE, 3126
_647:
; rs232cmd.c 3127							level = -18;
	SYMB	LINE, 3127
	MOV.W	[R7],#0FFEEH
; rs232cmd.c 3128							break;
	SYMB	LINE, 3128
	BR	_686
; rs232cmd.c 3129	
; rs232cmd.c 3130						case M21dBm:
	SYMB	LINE, 3130
_648:
; rs232cmd.c 3131							level = -21;
	SYMB	LINE, 3131
	MOV.W	[R7],#0FFEBH
; rs232cmd.c 3132							break;
	SYMB	LINE, 3132
	BR	_686
; rs232cmd.c 3133	
; rs232cmd.c 3134					 	case M24dBm:
	SYMB	LINE, 3134
_649:
; rs232cmd.c 3135							level = -24;
	SYMB	LINE, 3135
	MOV.W	[R7],#0FFE8H
; rs232cmd.c 3136							break;
	SYMB	LINE, 3136
	BR	_686
; rs232cmd.c 3137	
; rs232cmd.c 3138					 	case M27dBm:
	SYMB	LINE, 3138
_650:
; rs232cmd.c 3139							level = -27;
	SYMB	LINE, 3139
	MOV.W	[R7],#0FFE5H
; rs232cmd.c 3140							break;
	SYMB	LINE, 3140
	BR	_686
; rs232cmd.c 3141	
; rs232cmd.c 3142					 	case M30dBm:
	SYMB	LINE, 3142
_651:
; rs232cmd.c 3143							level = -30;
	SYMB	LINE, 3143
	MOV.W	[R7],#0FFE2H
; rs232cmd.c 3144							break;
	SYMB	LINE, 3144
	BR	_686
; rs232cmd.c 3145	
; rs232cmd.c 3146					 	case M33dBm:
	SYMB	LINE, 3146
_652:
; rs232cmd.c 3147							level = -33;
	SYMB	LINE, 3147
	MOV.W	[R7],#0FFDFH
; rs232cmd.c 3148							break;
	SYMB	LINE, 3148
	BR	_686
; rs232cmd.c 3149	
; rs232cmd.c 3150						case M36dBm:
	SYMB	LINE, 3150
_653:
; rs232cmd.c 3151							level = -36;
	SYMB	LINE, 3151
	MOV.W	[R7],#0FFDCH
; rs232cmd.c 3152							break;
	SYMB	LINE, 3152
	BR	_686
; rs232cmd.c 3153	
; rs232cmd.c 3154						default:
	SYMB	LINE, 3154
_654:
; rs232cmd.c 3155							str = SILENCEParTxt;
	SYMB	LINE, 3155
	MOV.W	R5,#SEG( _SILENCEParTxt )
	MOV.W	R4,#SOF( _SILENCEParTxt )
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3156	
; rs232cmd.c 3157							while ( *str)
	SYMB	LINE, 3157
	MOV.B	CS,#SEG( _SILENCEParTxt )
	MOV.W	R0,#SOF( _SILENCEParTxt )
	MOVC.B	R1L,[R0+]
	BEQ	_656
_655:
; rs232cmd.c 3158								rs232putchar( *str++);
	SYMB	LINE, 3158
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3157
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_655
	SYMB	LINE, 3158
_656:
; rs232cmd.c 3159	
; rs232cmd.c 3160							rs232putchar('\n');
	SYMB	LINE, 3160
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3161							return;
	SYMB	LINE, 3161
	BR	_761
	SYMB	LINE, 3034
_657:
	SYMB	LINE, 3035
	MOV.W	[R7],#0AH
; rs232cmd.c 3162						}
	SYMB	LINE, 3162
_686:
; rs232cmd.c 3163	
; rs232cmd.c 3164					rs232printf( 6, "%d\n", level);
	SYMB	LINE, 3164
	MOV.W	R0,#06H
	MOV.W	R1,[R7]
	PUSH.W	R1
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	RSEG	RS232CMD_IR
	ALIGN	1
__swtable767:
	DW	SOF _720,SEG _720
	DW	SOF _721,SEG _721
	DW	SOF _721,SEG _721
	DW	SOF _719,SEG _719
	DW	SOF _721,SEG _721
	DW	SOF _721,SEG _721
	DW	SOF _718,SEG _718
	DW	SOF _721,SEG _721
	DW	SOF _721,SEG _721
	DW	SOF _717,SEG _717
	DW	SOF _721,SEG _721
	DW	SOF _721,SEG _721
	DW	SOF _716,SEG _716
	DW	SOF _721,SEG _721
	DW	SOF _721,SEG _721
	DW	SOF _715,SEG _715
	DW	SOF _721,SEG _721
	DW	SOF _721,SEG _721
	DW	SOF _714,SEG _714
	DW	SOF _721,SEG _721
	DW	SOF _721,SEG _721
	DW	SOF _713,SEG _713
	DW	SOF _721,SEG _721
	DW	SOF _721,SEG _721
	DW	SOF _712,SEG _712
	DW	SOF _711,SEG _711
	DW	SOF _710,SEG _710
	DW	SOF _709,SEG _709
	DW	SOF _708,SEG _708
	DW	SOF _707,SEG _707
	DW	SOF _706,SEG _706
	DW	SOF _705,SEG _705
	DW	SOF _704,SEG _704
	DW	SOF _703,SEG _703
	DW	SOF _702,SEG _702
	DW	SOF _701,SEG _701
	DW	SOF _700,SEG _700
	DW	SOF _699,SEG _699
	DW	SOF _698,SEG _698
	DW	SOF _697,SEG _697
	DW	SOF _696,SEG _696
	DW	SOF _695,SEG _695
	DW	SOF _694,SEG _694
	DW	SOF _693,SEG _693
	DW	SOF _692,SEG _692
	DW	SOF _721,SEG _721
	DW	SOF _722,SEG _722
	RSEG	RS232CMD_PR
	SYMB	SOFF, 6
; rs232cmd.c 3165				}
; rs232cmd.c 3166			}
	SYMB	LINE, 3166
	BR	_761
_687:
; rs232cmd.c 3167			else
; rs232cmd.c 3168			{
; rs232cmd.c 3169				if ( ParCnt != 1)
	SYMB	LINE, 3169
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_688
; rs232cmd.c 3170					SCPIError = SyntaxErr;
	SYMB	LINE, 3170
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_761
_688:
; rs232cmd.c 3171				else
; rs232cmd.c 3172				{
; rs232cmd.c 3173					level = FindParameter( Cmd, AnalogLevelPar);
	SYMB	LINE, 3173
	MOV.W	R3,#SEG( _AnalogLevelPar )
	MOV.W	R2,#SOF( _AnalogLevelPar )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_FindParameter
	MOV.W	[R7],R0
; rs232cmd.c 3174		
; rs232cmd.c 3175					if ( level > -1)
	SYMB	LINE, 3175
	CMP.W	[R7],#0FFFFH
	BLE	_689
; rs232cmd.c 3176						level = AnalogSilence;
	SYMB	LINE, 3176
	MOV.W	[R7],#01FH
	BR	_753
_689:
; rs232cmd.c 3177					else
; rs232cmd.c 3178					{
; rs232cmd.c 3179						if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &level) != 1))
	SYMB	LINE, 3179
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_690
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	MOV.W	R0,R7
	PUSH.W	R0, R1
	SYMB	SOFF, 10
	MOV.W	R1,#SEG( _10 )
	MOV.W	R0,#SOF( _10 )
	PUSH.W	R0, R1
	SYMB	SOFF, 14
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 6
	CMP.W	R0,#01H
	BEQ	_691
_690:
; rs232cmd.c 3180							SCPIError = SyntaxErr;
	SYMB	LINE, 3180
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_753
_691:
; rs232cmd.c 3181						else
; rs232cmd.c 3182						{
; rs232cmd.c 3183							switch ( level)
	SYMB	LINE, 3183
	MOV.W	R1,[R7]
	ADD.W	R1,#024H
	CMP.W	R1,#02EH
	BG	_721
	ASL.W	R1,#02H
	MOV.B	CS,#SEG( __swtable767 )
	ADD.W	R1,#SOF( __swtable767 )
	MOVC.W	R0,[R1+]
	PUSH.W	R0
	MOVC.W	R0,[R1+]
	PUSH.W	R0
	RET
; rs232cmd.c 3184							{
; rs232cmd.c 3185							 	case 10:
; rs232cmd.c 3186									level = P10dBm;
; rs232cmd.c 3187									break;
; rs232cmd.c 3188	
; rs232cmd.c 3189							 	case 8:
	SYMB	LINE, 3189
_692:
; rs232cmd.c 3190									level = P8dBm;
	SYMB	LINE, 3190
	MOV.W	[R7],#02H
; rs232cmd.c 3191									break;
	SYMB	LINE, 3191
	BR	_753
; rs232cmd.c 3192	
; rs232cmd.c 3193							 	case 7:
	SYMB	LINE, 3193
_693:
; rs232cmd.c 3194									level = P7dBm;
	SYMB	LINE, 3194
	MOV.W	[R7],#03H
; rs232cmd.c 3195									break;
	SYMB	LINE, 3195
	BR	_753
; rs232cmd.c 3196	
; rs232cmd.c 3197							 	case 6:
	SYMB	LINE, 3197
_694:
; rs232cmd.c 3198									level = P6dBm;
	SYMB	LINE, 3198
	MOV.W	[R7],#04H
; rs232cmd.c 3199									break;
	SYMB	LINE, 3199
	BR	_753
; rs232cmd.c 3200	
; rs232cmd.c 3201							 	case 5:
	SYMB	LINE, 3201
_695:
; rs232cmd.c 3202									level = P5dBm;
	SYMB	LINE, 3202
	MOV.W	[R7],#05H
; rs232cmd.c 3203									break;
	SYMB	LINE, 3203
	BR	_753
; rs232cmd.c 3204	
; rs232cmd.c 3205							 	case 4:
	SYMB	LINE, 3205
_696:
; rs232cmd.c 3206									level = P4dBm;
	SYMB	LINE, 3206
	MOV.W	[R7],#06H
; rs232cmd.c 3207									break;
	SYMB	LINE, 3207
	BR	_753
; rs232cmd.c 3208	
; rs232cmd.c 3209							 	case 3:
	SYMB	LINE, 3209
_697:
; rs232cmd.c 3210									level = P3dBm;
	SYMB	LINE, 3210
	MOV.W	[R7],#07H
; rs232cmd.c 3211									break;
	SYMB	LINE, 3211
	BR	_753
; rs232cmd.c 3212	
; rs232cmd.c 3213							 	case 2:
	SYMB	LINE, 3213
_698:
; rs232cmd.c 3214									level = P2dBm;
	SYMB	LINE, 3214
	MOV.W	[R7],#08H
; rs232cmd.c 3215									break;
	SYMB	LINE, 3215
	BR	_753
; rs232cmd.c 3216	
; rs232cmd.c 3217							 	case 1:
	SYMB	LINE, 3217
_699:
; rs232cmd.c 3218									level = P1dBm;
	SYMB	LINE, 3218
	MOV.W	[R7],#09H
; rs232cmd.c 3219									break;
	SYMB	LINE, 3219
	BR	_753
; rs232cmd.c 3220	
; rs232cmd.c 3221							 	case 0:
	SYMB	LINE, 3221
_700:
; rs232cmd.c 3222									level = M0dBm;
	SYMB	LINE, 3222
	MOV.W	[R7],#0AH
; rs232cmd.c 3223									break;
	SYMB	LINE, 3223
	BR	_753
; rs232cmd.c 3224	
; rs232cmd.c 3225							 	case -1:
	SYMB	LINE, 3225
_701:
; rs232cmd.c 3226									level = M1dBm;
	SYMB	LINE, 3226
	MOV.W	[R7],#0BH
; rs232cmd.c 3227									break;
	SYMB	LINE, 3227
	BR	_753
; rs232cmd.c 3228	
; rs232cmd.c 3229							 	case -2:
	SYMB	LINE, 3229
_702:
; rs232cmd.c 3230									level = M2dBm;
	SYMB	LINE, 3230
	MOV.W	[R7],#0CH
; rs232cmd.c 3231									break;
	SYMB	LINE, 3231
	BR	_753
; rs232cmd.c 3232	
; rs232cmd.c 3233							 	case -3:
	SYMB	LINE, 3233
_703:
; rs232cmd.c 3234									level = M3dBm;
	SYMB	LINE, 3234
	MOV.W	[R7],#0DH
; rs232cmd.c 3235									break;
	SYMB	LINE, 3235
	BR	_753
; rs232cmd.c 3236	
; rs232cmd.c 3237							 	case -4:
	SYMB	LINE, 3237
_704:
; rs232cmd.c 3238									level = M4dBm;
	SYMB	LINE, 3238
	MOV.W	[R7],#0EH
; rs232cmd.c 3239									break;
	SYMB	LINE, 3239
	BR	_753
; rs232cmd.c 3240	
; rs232cmd.c 3241							 	case -5:
	SYMB	LINE, 3241
_705:
; rs232cmd.c 3242									level = M5dBm;
	SYMB	LINE, 3242
	MOV.W	[R7],#0FH
; rs232cmd.c 3243									break;
	SYMB	LINE, 3243
	BR	_753
; rs232cmd.c 3244	
; rs232cmd.c 3245							 	case -6:
	SYMB	LINE, 3245
_706:
; rs232cmd.c 3246									level = M6dBm;
	SYMB	LINE, 3246
	MOV.W	[R7],#010H
; rs232cmd.c 3247									break;
	SYMB	LINE, 3247
	BR	_753
; rs232cmd.c 3248	
; rs232cmd.c 3249							 	case -7:
	SYMB	LINE, 3249
_707:
; rs232cmd.c 3250									level = M7dBm;
	SYMB	LINE, 3250
	MOV.W	[R7],#011H
; rs232cmd.c 3251									break;
	SYMB	LINE, 3251
	BR	_753
; rs232cmd.c 3252	
; rs232cmd.c 3253							 	case -8:
	SYMB	LINE, 3253
_708:
; rs232cmd.c 3254									level = M8dBm;
	SYMB	LINE, 3254
	MOV.W	[R7],#012H
; rs232cmd.c 3255									break;
	SYMB	LINE, 3255
	BR	_753
; rs232cmd.c 3256	
; rs232cmd.c 3257							 	case -9:
	SYMB	LINE, 3257
_709:
; rs232cmd.c 3258									level = M9dBm;
	SYMB	LINE, 3258
	MOV.W	[R7],#013H
; rs232cmd.c 3259									break;
	SYMB	LINE, 3259
	BR	_753
; rs232cmd.c 3260	
; rs232cmd.c 3261							 	case -10:
	SYMB	LINE, 3261
_710:
; rs232cmd.c 3262									level = M10dBm;
	SYMB	LINE, 3262
	MOV.W	[R7],#014H
; rs232cmd.c 3263									break;
	SYMB	LINE, 3263
	BR	_753
; rs232cmd.c 3264	
; rs232cmd.c 3265							 	case -11:
	SYMB	LINE, 3265
_711:
; rs232cmd.c 3266									level = M11dBm;
	SYMB	LINE, 3266
	MOV.W	[R7],#015H
; rs232cmd.c 3267									break;
	SYMB	LINE, 3267
	BR	_753
; rs232cmd.c 3268	
; rs232cmd.c 3269							 	case -12:
	SYMB	LINE, 3269
_712:
; rs232cmd.c 3270									level = M12dBm;
	SYMB	LINE, 3270
	MOV.W	[R7],#016H
; rs232cmd.c 3271									break;
	SYMB	LINE, 3271
	BR	_753
; rs232cmd.c 3272	
; rs232cmd.c 3273							 	case -15:
	SYMB	LINE, 3273
_713:
; rs232cmd.c 3274									level = M15dBm;
	SYMB	LINE, 3274
	MOV.W	[R7],#017H
; rs232cmd.c 3275									break;
	SYMB	LINE, 3275
	BR	_753
; rs232cmd.c 3276	
; rs232cmd.c 3277							 	case -18:
	SYMB	LINE, 3277
_714:
; rs232cmd.c 3278									level = M18dBm;
	SYMB	LINE, 3278
	MOV.W	[R7],#018H
; rs232cmd.c 3279									break;
	SYMB	LINE, 3279
	BR	_753
; rs232cmd.c 3280	
; rs232cmd.c 3281								case -21:
	SYMB	LINE, 3281
_715:
; rs232cmd.c 3282									level = M21dBm;
	SYMB	LINE, 3282
	MOV.W	[R7],#019H
; rs232cmd.c 3283									break;
	SYMB	LINE, 3283
	BR	_753
; rs232cmd.c 3284	
; rs232cmd.c 3285							 	case -24:
	SYMB	LINE, 3285
_716:
; rs232cmd.c 3286									level = M24dBm;
	SYMB	LINE, 3286
	MOV.W	[R7],#01AH
; rs232cmd.c 3287									break;
	SYMB	LINE, 3287
	BR	_753
; rs232cmd.c 3288	
; rs232cmd.c 3289							 	case -27:
	SYMB	LINE, 3289
_717:
; rs232cmd.c 3290									level = M27dBm;
	SYMB	LINE, 3290
	MOV.W	[R7],#01BH
; rs232cmd.c 3291									break;
	SYMB	LINE, 3291
	BR	_753
; rs232cmd.c 3292	
; rs232cmd.c 3293							 	case -30:
	SYMB	LINE, 3293
_718:
; rs232cmd.c 3294									level = M30dBm;
	SYMB	LINE, 3294
	MOV.W	[R7],#01CH
; rs232cmd.c 3295									break;
	SYMB	LINE, 3295
	BR	_753
; rs232cmd.c 3296	
; rs232cmd.c 3297							 	case -33:
	SYMB	LINE, 3297
_719:
; rs232cmd.c 3298									level = M33dBm;
	SYMB	LINE, 3298
	MOV.W	[R7],#01DH
; rs232cmd.c 3299									break;
	SYMB	LINE, 3299
	BR	_753
; rs232cmd.c 3300	
; rs232cmd.c 3301								case -36:
	SYMB	LINE, 3301
_720:
; rs232cmd.c 3302									level = M36dBm;
	SYMB	LINE, 3302
	MOV.W	[R7],#01EH
; rs232cmd.c 3303									break;
	SYMB	LINE, 3303
	BR	_753
; rs232cmd.c 3304	
; rs232cmd.c 3305								default:
	SYMB	LINE, 3305
_721:
; rs232cmd.c 3306									SCPIError = DataOutOfRange;
	SYMB	LINE, 3306
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3307									return;
	SYMB	LINE, 3307
	BR	_761
	SYMB	LINE, 3185
_722:
	SYMB	LINE, 3186
	MOV.W	[R7],#01H
; rs232cmd.c 3308							}
; rs232cmd.c 3309						}
; rs232cmd.c 3310					}
	SYMB	LINE, 3310
_753:
; rs232cmd.c 3311	
; rs232cmd.c 3312					if ( SetAudioLevel( AnalogAudio, level) == FAIL)
	SYMB	LINE, 3312
	MOV.W	R0,#00H
	MOV.W	R1,[R7]
	CALL	_SetAudioLevel
	OR.W	R0,R0
	BNE	_761
; rs232cmd.c 3313						SCPIError = ExecErr;
	SYMB	LINE, 3313
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3314				}
; rs232cmd.c 3315			}
; rs232cmd.c 3316		}
; rs232cmd.c 3317	}
	SYMB	LINE, 3317
_761:
	ADDS.W	R7,#02H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3318	
; rs232cmd.c 3319	/**************************************************************************/
; rs232cmd.c 3320	/* AudioGenAnalogClick 																	 	     RS232CMD.C	*/
; rs232cmd.c 3321	/*																																				*/
; rs232cmd.c 3322	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3323	/* Revised:		000603				     																					*/
; rs232cmd.c 3324	/*																																				*/
; rs232cmd.c 3325	/* Function:	--																													*/
; rs232cmd.c 3326	/* Remarks:		--																													*/
; rs232cmd.c 3327	/* Returns:		--																													*/
; rs232cmd.c 3328	/* Updates:		--																													*/
; rs232cmd.c 3329	/**************************************************************************/
; rs232cmd.c 3330	void AudioGenAnalogClick( void)
; rs232cmd.c 3331	{
	ALIGN	1
	SYMB	LINE, 3331
	PUBLIC	_AudioGenAnalogClick
_AudioGenAnalogClick:
	SYMB	TYPE, 595, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAnalogClick", _AudioGenAnalogClick, #595, 0, 0, 0
	SYMB	ALAB, _AudioGenAnalogClick, #595
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "click", -2, #16, 130, 5
; rs232cmd.c 3332		int click;
; rs232cmd.c 3333	
; rs232cmd.c 3334		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3334
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_780
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_780
; rs232cmd.c 3335		{
; rs232cmd.c 3336			if ( CmdRequest)
	SYMB	LINE, 3336
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_769
; rs232cmd.c 3337			{
; rs232cmd.c 3338				if ( ParCnt)
	SYMB	LINE, 3338
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_768
; rs232cmd.c 3339					SCPIError = ParNotAllowed;
	SYMB	LINE, 3339
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_780
_768:
; rs232cmd.c 3340				else
; rs232cmd.c 3341					rs232printf( 6, "%d\n", AudioSetup[AnalogAudio].Click);
	SYMB	LINE, 3341
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _AudioSetup+12 )
	MOV.W	R1,#SOF( _AudioSetup+12 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 3342			}
	SYMB	LINE, 3342
	BR	_780
_769:
; rs232cmd.c 3343			else
; rs232cmd.c 3344			{
; rs232cmd.c 3345				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &click) != 1))
	SYMB	LINE, 3345
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_770
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_771
_770:
; rs232cmd.c 3346					SCPIError = SyntaxErr;
	SYMB	LINE, 3346
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_780
_771:
; rs232cmd.c 3347				else {
; rs232cmd.c 3348					if (( click != click1s) && ( click != click3s))
	SYMB	LINE, 3348
	CMP.W	[R7],#01H
	BEQ	_773
	CMP.W	[R7],#03H
	BEQ	_773
; rs232cmd.c 3349						SCPIError = DataOutOfRange;
	SYMB	LINE, 3349
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_780
_773:
; rs232cmd.c 3350					else
; rs232cmd.c 3351					{
; rs232cmd.c 3352						if ( SetAudioClick( AnalogAudio, click) == FAIL)
	SYMB	LINE, 3352
	MOV.W	R0,#00H
	MOV.W	R1,[R7]
	CALL	_SetAudioClick
	OR.W	R0,R0
	BNE	_780
; rs232cmd.c 3353							SCPIError = ExecErr;
	SYMB	LINE, 3353
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3354					}
; rs232cmd.c 3355				}
; rs232cmd.c 3356			}
; rs232cmd.c 3357		}
	SYMB	LINE, 3357
_780:
; rs232cmd.c 3358	}
	SYMB	LINE, 3358
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 3359	
; rs232cmd.c 3360	
; rs232cmd.c 3361	/**************************************************************************/
; rs232cmd.c 3362	/* AudioGenAESEBU																				 	     RS232CMD.C	*/
; rs232cmd.c 3363	/*																																				*/
; rs232cmd.c 3364	/* Author:		Kim Engedahl, DEV, 000526	    															*/
; rs232cmd.c 3365	/* Revised:		000617				     																					*/
; rs232cmd.c 3366	/*																																				*/
; rs232cmd.c 3367	/* Function:	--																													*/
; rs232cmd.c 3368	/* Remarks:		Request only.																								*/
; rs232cmd.c 3369	/* Returns:	  --																													*/
; rs232cmd.c 3370	/* Updates:		--																													*/
; rs232cmd.c 3371	/**************************************************************************/
; rs232cmd.c 3372	void AudioGenAESEBU( void)
; rs232cmd.c 3373	{
	ALIGN	1
	SYMB	LINE, 3373
	PUBLIC	_AudioGenAESEBU
_AudioGenAESEBU:
	SYMB	TYPE, 596, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBU", _AudioGenAESEBU, #596, 0, 0, 112
	SYMB	ALAB, _AudioGenAESEBU, #596
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "level", -1, #16, 130, 5
	SYMB	LTIM, "level", -1, 0, 69
; rs232cmd.c 3374		char code *str;
; rs232cmd.c 3375		int level;
; rs232cmd.c 3376	
; rs232cmd.c 3377		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3377
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_815
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_815
; rs232cmd.c 3378		{
; rs232cmd.c 3379			if ( !CmdRequest)
	SYMB	LINE, 3379
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_786
; rs232cmd.c 3380					SCPIError = SyntaxErr;
	SYMB	LINE, 3380
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_815
_786:
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3381			else
; rs232cmd.c 3382			{
; rs232cmd.c 3383				if ( ParCnt)
	SYMB	LINE, 3383
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_787
; rs232cmd.c 3384					SCPIError = ParNotAllowed;
	SYMB	LINE, 3384
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_815
_787:
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3385				else
; rs232cmd.c 3386				{
; rs232cmd.c 3387					str = AESEBUSystemPar[AudioSetup[AESEBUAudio].System].LongName;
	SYMB	LINE, 3387
	MOV.B	ES,#SEG( _AudioSetup+14 )
	MOV.W	R0,#SOF( _AudioSetup+14 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AESEBUSystemPar )
	MOV.W	R0,#SOF( _AESEBUSystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_816
	ADDS.B	CS,#01H
_816:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3388	
; rs232cmd.c 3389					while ( *str)
	SYMB	LINE, 3389
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_789
_788:
; rs232cmd.c 3390						rs232putchar( *str++);
	SYMB	LINE, 3390
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3389
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_788
	SYMB	LINE, 3390
_789:
; rs232cmd.c 3391	
; rs232cmd.c 3392					rs232putchar( ',');
	SYMB	LINE, 3392
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 3393	
; rs232cmd.c 3394					str = AudioSignalPar[AudioSetup[AESEBUAudio].Signal].LongName;
	SYMB	LINE, 3394
	MOV.B	ES,#SEG( _AudioSetup+16 )
	MOV.W	R0,#SOF( _AudioSetup+16 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOVS.W	R1,#00H
	MOV.W	R5,#SEG( _AudioSignalPar )
	MOV.W	R4,#SOF( _AudioSignalPar )
	SYMB	LTIM, "str", 19, 0, 77
	ADD.W	R4,R0
	ADDC.W	R5,R1
	MOV.B	CS,R5L
	MOVC.W	R0,[R4+]
	CMP.W	R4,#00H
	BNE	_817
	ADDS.B	CS,#01H
_817:
	MOVC.W	R1,[R4+]
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3395	
; rs232cmd.c 3396					while ( *str)
	SYMB	LINE, 3396
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_791
_790:
; rs232cmd.c 3397						rs232putchar( *str++);
	SYMB	LINE, 3397
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3396
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_790
	SYMB	LINE, 3397
_791:
	MOV.B	R0L,#02CH
; rs232cmd.c 3398	
; rs232cmd.c 3399					rs232putchar( ',');
	SYMB	LINE, 3399
	CALL	_rs232putchar
; rs232cmd.c 3400	
; rs232cmd.c 3401					str = NULL;
	SYMB	LINE, 3401
	MOV.W	R5,#00H
	MOV.W	R4,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3402	
; rs232cmd.c 3403					switch ( AudioSetup[AESEBUAudio].Level)
	SYMB	LINE, 3403
	MOV.B	ES,#SEG( _AudioSetup+18 )
	MOV.W	R0,#SOF( _AudioSetup+18 )
	MOV.W	R0,[R0]
	CMP.W	R0,#00H
	BEQ	_792
	CMP.W	R0,#01H
	BEQ	_793
	CMP.W	R0,#02H
	BEQ	_794
	CMP.W	R0,#03H
	BEQ	_795
	CMP.W	R0,#04H
	BEQ	_796
	CMP.W	R0,#05H
	BEQ	_797
	CMP.W	R0,#06H
	BEQ	_798
	BR	_799
; rs232cmd.c 3404					{
; rs232cmd.c 3405						case M0dBFS:
	SYMB	LINE, 3405
_792:
; rs232cmd.c 3406							level = 0;
	SYMB	LINE, 3406
	MOV.W	R6,#00H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3407							break;
	SYMB	LINE, 3407
	BR	_808
; rs232cmd.c 3408	
; rs232cmd.c 3409						case M9dBFS:
	SYMB	LINE, 3409
_793:
; rs232cmd.c 3410							level = -9;
	SYMB	LINE, 3410
	MOV.W	R6,#0FFF7H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3411							break;
	SYMB	LINE, 3411
	BR	_808
; rs232cmd.c 3412	
; rs232cmd.c 3413						case M12dBFS:
	SYMB	LINE, 3413
_794:
; rs232cmd.c 3414							level = -12;
	SYMB	LINE, 3414
	MOV.W	R6,#0FFF4H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3415							break;
	SYMB	LINE, 3415
	BR	_808
; rs232cmd.c 3416	
; rs232cmd.c 3417						case M15dBFS:
	SYMB	LINE, 3417
_795:
; rs232cmd.c 3418							level = -15;
	SYMB	LINE, 3418
	MOV.W	R6,#0FFF1H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3419							break;
	SYMB	LINE, 3419
	BR	_808
; rs232cmd.c 3420	
; rs232cmd.c 3421						case M16dBFS:
	SYMB	LINE, 3421
_796:
; rs232cmd.c 3422							level = -16;
	SYMB	LINE, 3422
	MOV.W	R6,#0FFF0H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3423							break;
	SYMB	LINE, 3423
	BR	_808
; rs232cmd.c 3424	
; rs232cmd.c 3425						case M18dBFS:
	SYMB	LINE, 3425
_797:
; rs232cmd.c 3426							level = -18;
	SYMB	LINE, 3426
	MOV.W	R6,#0FFEEH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3427							break;
	SYMB	LINE, 3427
	BR	_808
; rs232cmd.c 3428	
; rs232cmd.c 3429						case M21dBFS:
	SYMB	LINE, 3429
_798:
; rs232cmd.c 3430							level = -21;
	SYMB	LINE, 3430
	MOV.W	R6,#0FFEBH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3431							break;
	SYMB	LINE, 3431
	BR	_808
; rs232cmd.c 3432	
; rs232cmd.c 3433						default:
	SYMB	LINE, 3433
_799:
; rs232cmd.c 3434							str = SILENCEParTxt;
	SYMB	LINE, 3434
	MOV.W	R5,#SEG( _SILENCEParTxt )
	MOV.W	R4,#SOF( _SILENCEParTxt )
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3435	
; rs232cmd.c 3436							while ( *str)
	SYMB	LINE, 3436
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_801
_800:
; rs232cmd.c 3437								rs232putchar( *str++);
	SYMB	LINE, 3437
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3436
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_800
	SYMB	LINE, 3437
_801:
	MOV.B	R0L,#02CH
; rs232cmd.c 3438	
; rs232cmd.c 3439							rs232putchar( ',');
	SYMB	LINE, 3439
	CALL	_rs232putchar
; rs232cmd.c 3440							break;
; rs232cmd.c 3441						}
	SYMB	LINE, 3441
_808:
; rs232cmd.c 3442	
; rs232cmd.c 3443					if ( str == NULL)
	SYMB	LINE, 3443
	OR.W	R5,R4
	BNE	_809
; rs232cmd.c 3444						rs232printf( 6, "%d,", level);
	SYMB	LINE, 3444
	MOV.W	R0,#06H
	PUSH.W	R6
	SYMB	SOFF, 8
	SYMB	LTIM, "level", 26, 0, 77
	MOV.W	R3,#SEG( _533 )
	MOV.W	R2,#SOF( _533 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
_809:
; rs232cmd.c 3445	
; rs232cmd.c 3446					rs232printf( 6, "%.1f,", AudioSetup[AESEBUAudio].Timing);
	SYMB	LINE, 3446
	MOV.B	ES,#SEG( _AudioSetup+20 )
	MOV.W	R1,#SOF( _AudioSetup+20 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__SPF2DPF
	PUSH.W	R0, R1, R2, R3
	SYMB	SOFF, 14
	MOV.W	R1,#SEG( _785 )
	MOV.W	R0,#SOF( _785 )
	PUSH.W	R0, R1
	SYMB	SOFF, 18
	MOV.W	R0,#06H
	CALL	_rs232printf
	ADD.W	R7,#0CH
	SYMB	SOFF, 6
; rs232cmd.c 3447	
; rs232cmd.c 3448					str = AudioFrequencyPar[AudioSetup[AESEBUAudio].Frequency].LongName;
	SYMB	LINE, 3448
	MOV.B	ES,#SEG( _AudioSetup+24 )
	MOV.W	R0,#SOF( _AudioSetup+24 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioFrequencyPar )
	MOV.W	R0,#SOF( _AudioFrequencyPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R4,[R0+]
	CMP.W	R0,#00H
	BNE	_818
	ADDS.B	CS,#01H
_818:
	MOVC.W	R5,[R0+]
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3449	
; rs232cmd.c 3450					while ( *str)
	SYMB	LINE, 3450
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_811
_810:
; rs232cmd.c 3451						rs232putchar( *str++);
	SYMB	LINE, 3451
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3450
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_810
	SYMB	LINE, 3451
_811:
; rs232cmd.c 3452	
; rs232cmd.c 3453					rs232putchar( ',');
	SYMB	LINE, 3453
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 3454	
; rs232cmd.c 3455					rs232printf( 6, "%d\n", AudioSetup[AESEBUAudio].Click);
	SYMB	LINE, 3455
	MOV.B	ES,#SEG( _AudioSetup+26 )
	MOV.W	R0,#SOF( _AudioSetup+26 )
	MOV.W	R0,[R0]
	PUSH.W	R0
	SYMB	SOFF, 8
	MOV.W	R1,#SEG( _9 )
	MOV.W	R0,#SOF( _9 )
	PUSH.W	R0, R1
	SYMB	SOFF, 12
	MOV.W	R0,#06H
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
; rs232cmd.c 3456				}
; rs232cmd.c 3457			}
; rs232cmd.c 3458		}
	SYMB	LINE, 3458
_815:
; rs232cmd.c 3459	}
	SYMB	LINE, 3459
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3460	
; rs232cmd.c 3461	/**************************************************************************/
; rs232cmd.c 3462	/* AudioGenAESEBUSystem																	 	     RS232CMD.C	*/
; rs232cmd.c 3463	/*																																				*/
; rs232cmd.c 3464	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3465	/* Revised:		000603				     																					*/
; rs232cmd.c 3466	/*																																				*/
; rs232cmd.c 3467	/* Function:	--																													*/
; rs232cmd.c 3468	/* Remarks:		--																													*/
; rs232cmd.c 3469	/* Returns:		--																													*/
; rs232cmd.c 3470	/* Updates:		--																													*/
; rs232cmd.c 3471	/**************************************************************************/
; rs232cmd.c 3472	void AudioGenAESEBUSystem( void)
; rs232cmd.c 3473	{
	ALIGN	1
	SYMB	LINE, 3473
	PUBLIC	_AudioGenAESEBUSystem
_AudioGenAESEBUSystem:
	SYMB	TYPE, 597, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUSystem", _AudioGenAESEBUSystem, #597, 0, 0, 48
	SYMB	ALAB, _AudioGenAESEBUSystem, #597
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 3474		int system;
; rs232cmd.c 3475		char code *str;
; rs232cmd.c 3476	
; rs232cmd.c 3477		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3477
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_831
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_831
; rs232cmd.c 3478		{
; rs232cmd.c 3479			if ( CmdRequest)
	SYMB	LINE, 3479
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_822
; rs232cmd.c 3480			{
; rs232cmd.c 3481				if ( ParCnt)
	SYMB	LINE, 3481
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_819
; rs232cmd.c 3482					SCPIError = ParNotAllowed;
	SYMB	LINE, 3482
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_831
_819:
; rs232cmd.c 3483				else
; rs232cmd.c 3484				{
; rs232cmd.c 3485					str = AESEBUSystemPar[AudioSetup[AESEBUAudio].System].LongName;
	SYMB	LINE, 3485
	MOV.B	ES,#SEG( _AudioSetup+14 )
	MOV.W	R0,#SOF( _AudioSetup+14 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AESEBUSystemPar )
	MOV.W	R0,#SOF( _AESEBUSystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_832
	ADDS.B	CS,#01H
_832:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3486	
; rs232cmd.c 3487					while ( *str)
	SYMB	LINE, 3487
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_821
_820:
; rs232cmd.c 3488						rs232putchar( *str++);
	SYMB	LINE, 3488
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3487
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_820
	SYMB	LINE, 3488
_821:
; rs232cmd.c 3489	
; rs232cmd.c 3490					rs232putchar('\n');
	SYMB	LINE, 3490
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3491				}
; rs232cmd.c 3492			}
	SYMB	LINE, 3492
	BR	_831
_822:
; rs232cmd.c 3493			else
; rs232cmd.c 3494			{
; rs232cmd.c 3495				if ( ParCnt != 1)
	SYMB	LINE, 3495
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_823
; rs232cmd.c 3496					SCPIError = SyntaxErr;
	SYMB	LINE, 3496
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_831
_823:
; rs232cmd.c 3497				else
; rs232cmd.c 3498				{
; rs232cmd.c 3499					system = FindParameter( Cmd, AESEBUSystemPar);
	SYMB	LINE, 3499
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AESEBUSystemPar )
	MOV.W	R2,#SOF( _AESEBUSystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 3500		
; rs232cmd.c 3501					if ( system > -1)
	SYMB	LINE, 3501
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "system", 2, 0, 77
	SYMB	LTIM, "system", 6, 0, 205
	BLE	_824
; rs232cmd.c 3502					{
; rs232cmd.c 3503						if ( SetAudioSystem( AESEBUAudio, system) == FAIL)
	SYMB	LINE, 3503
	MOV.W	R0,#01H
	CALL	_SetAudioSystem
	SYMB	LTIM, "system", 6, 0, 77
	OR.W	R0,R0
	BNE	_831
; rs232cmd.c 3504							SCPIError = ExecErr;
	SYMB	LINE, 3504
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3505					}
	SYMB	LINE, 3505
	BR	_831
_824:
; rs232cmd.c 3506					else
; rs232cmd.c 3507						SCPIError = DataOutOfRange;
	SYMB	LINE, 3507
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3508				}
; rs232cmd.c 3509			}
; rs232cmd.c 3510		}
	SYMB	LINE, 3510
_831:
; rs232cmd.c 3511	}
	SYMB	LINE, 3511
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3512	
; rs232cmd.c 3513	/**************************************************************************/
; rs232cmd.c 3514	/* AudioGenAESEBUSignal		 															 	     RS232CMD.C	*/
; rs232cmd.c 3515	/*																																				*/
; rs232cmd.c 3516	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3517	/* Revised:		000603				     																					*/
; rs232cmd.c 3518	/*																																				*/
; rs232cmd.c 3519	/* Function:	--																													*/
; rs232cmd.c 3520	/* Remarks:		--																													*/
; rs232cmd.c 3521	/* Returns:		--																													*/
; rs232cmd.c 3522	/* Updates:		--																													*/
; rs232cmd.c 3523	/**************************************************************************/
; rs232cmd.c 3524	void AudioGenAESEBUSignal( void)
; rs232cmd.c 3525	{
	ALIGN	1
	SYMB	LINE, 3525
	PUBLIC	_AudioGenAESEBUSignal
_AudioGenAESEBUSignal:
	SYMB	TYPE, 598, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUSignal", _AudioGenAESEBUSignal, #598, 0, 0, 48
	SYMB	ALAB, _AudioGenAESEBUSignal, #598
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "signal", -1, #16, 130, 5
	SYMB	LTIM, "signal", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 3526		int signal;
; rs232cmd.c 3527		char code *str;
; rs232cmd.c 3528	
; rs232cmd.c 3529		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3529
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_847
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_847
; rs232cmd.c 3530		{
; rs232cmd.c 3531			if ( CmdRequest)
	SYMB	LINE, 3531
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_838
; rs232cmd.c 3532			{
; rs232cmd.c 3533				if ( ParCnt)
	SYMB	LINE, 3533
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_835
; rs232cmd.c 3534					SCPIError = ParNotAllowed;
	SYMB	LINE, 3534
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_847
_835:
; rs232cmd.c 3535				else
; rs232cmd.c 3536				{
; rs232cmd.c 3537					str = AudioSignalPar[AudioSetup[AESEBUAudio].Signal].LongName;
	SYMB	LINE, 3537
	MOV.B	ES,#SEG( _AudioSetup+16 )
	MOV.W	R0,#SOF( _AudioSetup+16 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioSignalPar )
	MOV.W	R0,#SOF( _AudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_848
	ADDS.B	CS,#01H
_848:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3538	
; rs232cmd.c 3539					while ( *str)
	SYMB	LINE, 3539
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_837
_836:
; rs232cmd.c 3540						rs232putchar( *str++);
	SYMB	LINE, 3540
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3539
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_836
	SYMB	LINE, 3540
_837:
; rs232cmd.c 3541	
; rs232cmd.c 3542					rs232putchar('\n');
	SYMB	LINE, 3542
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3543				}
; rs232cmd.c 3544			}
	SYMB	LINE, 3544
	BR	_847
_838:
; rs232cmd.c 3545			else
; rs232cmd.c 3546			{
; rs232cmd.c 3547				if ( ParCnt != 1)
	SYMB	LINE, 3547
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_839
; rs232cmd.c 3548					SCPIError = SyntaxErr;
	SYMB	LINE, 3548
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_847
_839:
; rs232cmd.c 3549				else
; rs232cmd.c 3550				{
; rs232cmd.c 3551					signal = FindParameter( Cmd, AudioSignalPar);
	SYMB	LINE, 3551
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AudioSignalPar )
	MOV.W	R2,#SOF( _AudioSignalPar )
	CALL	_FindParameter
	SYMB	LTIM, "signal", 2, 0, 205
; rs232cmd.c 3552		
; rs232cmd.c 3553					if ( signal > -1)
	SYMB	LINE, 3553
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "signal", 2, 0, 77
	SYMB	LTIM, "signal", 6, 0, 205
	BLE	_840
; rs232cmd.c 3554					{
; rs232cmd.c 3555						if ( SetAudioSignal( AESEBUAudio, signal) == FAIL)
	SYMB	LINE, 3555
	MOV.W	R0,#01H
	CALL	_SetAudioSignal
	SYMB	LTIM, "signal", 6, 0, 77
	OR.W	R0,R0
	BNE	_847
; rs232cmd.c 3556							SCPIError = ExecErr;
	SYMB	LINE, 3556
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3557					}
	SYMB	LINE, 3557
	BR	_847
_840:
; rs232cmd.c 3558					else
; rs232cmd.c 3559						SCPIError = DataOutOfRange;
	SYMB	LINE, 3559
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3560				}
; rs232cmd.c 3561			}
; rs232cmd.c 3562		}
	SYMB	LINE, 3562
_847:
; rs232cmd.c 3563	}
	SYMB	LINE, 3563
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3564	
; rs232cmd.c 3565	/**************************************************************************/
; rs232cmd.c 3566	/* AudioGenAESEBULevel 																	 	     RS232CMD.C	*/
; rs232cmd.c 3567	/*																																				*/
; rs232cmd.c 3568	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3569	/* Revised:		0000628				     																					*/
; rs232cmd.c 3570	/*																																				*/
; rs232cmd.c 3571	/* Function:	--																													*/
; rs232cmd.c 3572	/* Remarks:		--																													*/
; rs232cmd.c 3573	/* Returns:		--																													*/
; rs232cmd.c 3574	/* Updates:		--																													*/
; rs232cmd.c 3575	/**************************************************************************/
; rs232cmd.c 3576	void AudioGenAESEBULevel( void)
; rs232cmd.c 3577	{
	ALIGN	1
	SYMB	LINE, 3577
	PUBLIC	_AudioGenAESEBULevel
_AudioGenAESEBULevel:
	SYMB	TYPE, 599, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBULevel", _AudioGenAESEBULevel, #599, 0, 0, 48
	SYMB	ALAB, _AudioGenAESEBULevel, #599
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0EH
	SYMB	SOFF, 6
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "level", -6, #16, 130, 5
; rs232cmd.c 3578		code char *str;
; rs232cmd.c 3579		int level;
; rs232cmd.c 3580	
; rs232cmd.c 3581		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3581
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_896
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_896
; rs232cmd.c 3582		{
; rs232cmd.c 3583			if ( CmdRequest)
	SYMB	LINE, 3583
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_868
; rs232cmd.c 3584			{
; rs232cmd.c 3585				if ( ParCnt)
	SYMB	LINE, 3585
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_851
; rs232cmd.c 3586					SCPIError = ParNotAllowed;
	SYMB	LINE, 3586
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_896
_851:
; rs232cmd.c 3587				else
; rs232cmd.c 3588				{
; rs232cmd.c 3589					switch ( AudioSetup[AESEBUAudio].Level)
	SYMB	LINE, 3589
	MOV.B	ES,#SEG( _AudioSetup+18 )
	MOV.W	R0,#SOF( _AudioSetup+18 )
	MOV.W	R0,[R0]
	CMP.W	R0,#00H
	BEQ	_861
	CMP.W	R0,#01H
	BEQ	_852
	CMP.W	R0,#02H
	BEQ	_853
	CMP.W	R0,#03H
	BEQ	_854
	CMP.W	R0,#04H
	BEQ	_855
	CMP.W	R0,#05H
	BEQ	_856
	CMP.W	R0,#06H
	BEQ	_857
	BR	_858
; rs232cmd.c 3590					{
; rs232cmd.c 3591						case M0dBFS:
; rs232cmd.c 3592							level = 0;
; rs232cmd.c 3593							break;
; rs232cmd.c 3594	
; rs232cmd.c 3595						case M9dBFS:
	SYMB	LINE, 3595
_852:
; rs232cmd.c 3596							level = -9;
	SYMB	LINE, 3596
	MOV.W	[R7],#0FFF7H
; rs232cmd.c 3597							break;
	SYMB	LINE, 3597
	BR	_867
; rs232cmd.c 3598	
; rs232cmd.c 3599						case M12dBFS:
	SYMB	LINE, 3599
_853:
; rs232cmd.c 3600							level = -12;
	SYMB	LINE, 3600
	MOV.W	[R7],#0FFF4H
; rs232cmd.c 3601							break;
	SYMB	LINE, 3601
	BR	_867
; rs232cmd.c 3602	
; rs232cmd.c 3603						case M15dBFS:
	SYMB	LINE, 3603
_854:
; rs232cmd.c 3604							level = -15;
	SYMB	LINE, 3604
	MOV.W	[R7],#0FFF1H
; rs232cmd.c 3605							break;
	SYMB	LINE, 3605
	BR	_867
; rs232cmd.c 3606	
; rs232cmd.c 3607						case M16dBFS:
	SYMB	LINE, 3607
_855:
; rs232cmd.c 3608							level = -16;
	SYMB	LINE, 3608
	MOV.W	[R7],#0FFF0H
; rs232cmd.c 3609							break;
	SYMB	LINE, 3609
	BR	_867
; rs232cmd.c 3610	
; rs232cmd.c 3611						case M18dBFS:
	SYMB	LINE, 3611
_856:
; rs232cmd.c 3612							level = -18;
	SYMB	LINE, 3612
	MOV.W	[R7],#0FFEEH
; rs232cmd.c 3613							break;
	SYMB	LINE, 3613
	BR	_867
; rs232cmd.c 3614	
; rs232cmd.c 3615						case M21dBFS:
	SYMB	LINE, 3615
_857:
; rs232cmd.c 3616							level = -21;
	SYMB	LINE, 3616
	MOV.W	[R7],#0FFEBH
; rs232cmd.c 3617							break;
	SYMB	LINE, 3617
	BR	_867
; rs232cmd.c 3618	
; rs232cmd.c 3619						default:
	SYMB	LINE, 3619
_858:
; rs232cmd.c 3620							str = SILENCEParTxt;
	SYMB	LINE, 3620
	MOV.W	R5,#SEG( _SILENCEParTxt )
	MOV.W	R4,#SOF( _SILENCEParTxt )
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3621	
; rs232cmd.c 3622							while ( *str)
	SYMB	LINE, 3622
	MOV.B	CS,#SEG( _SILENCEParTxt )
	MOV.W	R0,#SOF( _SILENCEParTxt )
	MOVC.B	R1L,[R0+]
	BEQ	_860
_859:
; rs232cmd.c 3623								rs232putchar( *str++);
	SYMB	LINE, 3623
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3622
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_859
	SYMB	LINE, 3623
_860:
; rs232cmd.c 3624	
; rs232cmd.c 3625							rs232putchar('\n');
	SYMB	LINE, 3625
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3626							return;
	SYMB	LINE, 3626
	BR	_896
	SYMB	LINE, 3591
_861:
	SYMB	LINE, 3592
	MOV.W	[R7],#00H
; rs232cmd.c 3627						}
	SYMB	LINE, 3627
_867:
; rs232cmd.c 3628	
; rs232cmd.c 3629					rs232printf( 6, "%d\n", level);
	SYMB	LINE, 3629
	MOV.W	R0,#06H
	MOV.W	R1,[R7]
	PUSH.W	R1
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
; rs232cmd.c 3630				}
; rs232cmd.c 3631			}
	SYMB	LINE, 3631
	BR	_896
_868:
; rs232cmd.c 3632			else
; rs232cmd.c 3633			{
; rs232cmd.c 3634				if ( ParCnt != 1)
	SYMB	LINE, 3634
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_869
; rs232cmd.c 3635					SCPIError = SyntaxErr;
	SYMB	LINE, 3635
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_896
_869:
; rs232cmd.c 3636				else
; rs232cmd.c 3637				{
; rs232cmd.c 3638					level = FindParameter( Cmd, AESEBULevelPar);
	SYMB	LINE, 3638
	MOV.W	R3,#SEG( _AESEBULevelPar )
	MOV.W	R2,#SOF( _AESEBULevelPar )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_FindParameter
	MOV.W	[R7],R0
; rs232cmd.c 3639		
; rs232cmd.c 3640					if ( level > -1)
	SYMB	LINE, 3640
	CMP.W	[R7],#0FFFFH
	BLE	_870
; rs232cmd.c 3641						level = AESEBUSilence;
	SYMB	LINE, 3641
	MOV.W	[R7],#07H
	BR	_888
_870:
; rs232cmd.c 3642					else
; rs232cmd.c 3643					{
; rs232cmd.c 3644						if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &level) != 1))
	SYMB	LINE, 3644
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_871
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	MOV.W	R0,R7
	PUSH.W	R0, R1
	SYMB	SOFF, 10
	MOV.W	R1,#SEG( _10 )
	MOV.W	R0,#SOF( _10 )
	PUSH.W	R0, R1
	SYMB	SOFF, 14
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 6
	CMP.W	R0,#01H
	BEQ	_872
_871:
; rs232cmd.c 3645							SCPIError = SyntaxErr;
	SYMB	LINE, 3645
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_888
_872:
; rs232cmd.c 3646						else {
; rs232cmd.c 3647							switch ( level)
	SYMB	LINE, 3647
	CMP.W	[R7],#00H
	BEQ	_880
	CMP.W	[R7],#0FFF7H
	BEQ	_873
	CMP.W	[R7],#0FFF4H
	BEQ	_874
	CMP.W	[R7],#0FFF1H
	BEQ	_875
	CMP.W	[R7],#0FFF0H
	BEQ	_876
	CMP.W	[R7],#0FFEEH
	BEQ	_877
	CMP.W	[R7],#0FFEBH
	BEQ	_878
	BR	_879
; rs232cmd.c 3648							{
; rs232cmd.c 3649								case 0:
; rs232cmd.c 3650									level = M0dBFS;
; rs232cmd.c 3651									break;
; rs232cmd.c 3652	
; rs232cmd.c 3653							 	case -9:
	SYMB	LINE, 3653
_873:
; rs232cmd.c 3654									level = M9dBFS;
	SYMB	LINE, 3654
	MOV.W	[R7],#01H
; rs232cmd.c 3655									break;
	SYMB	LINE, 3655
	BR	_888
; rs232cmd.c 3656	
; rs232cmd.c 3657							 	case -12:
	SYMB	LINE, 3657
_874:
; rs232cmd.c 3658									level = M12dBFS;
	SYMB	LINE, 3658
	MOV.W	[R7],#02H
; rs232cmd.c 3659									break;
	SYMB	LINE, 3659
	BR	_888
; rs232cmd.c 3660	
; rs232cmd.c 3661							 	case -15:
	SYMB	LINE, 3661
_875:
; rs232cmd.c 3662									level = M15dBFS;
	SYMB	LINE, 3662
	MOV.W	[R7],#03H
; rs232cmd.c 3663									break;
	SYMB	LINE, 3663
	BR	_888
; rs232cmd.c 3664	
; rs232cmd.c 3665							 	case -16:
	SYMB	LINE, 3665
_876:
; rs232cmd.c 3666									level = M16dBFS;
	SYMB	LINE, 3666
	MOV.W	[R7],#04H
; rs232cmd.c 3667									break;
	SYMB	LINE, 3667
	BR	_888
; rs232cmd.c 3668	
; rs232cmd.c 3669							 	case -18:
	SYMB	LINE, 3669
_877:
; rs232cmd.c 3670									level = M18dBFS;
	SYMB	LINE, 3670
	MOV.W	[R7],#05H
; rs232cmd.c 3671									break;
	SYMB	LINE, 3671
	BR	_888
; rs232cmd.c 3672	
; rs232cmd.c 3673							 	case -21:
	SYMB	LINE, 3673
_878:
; rs232cmd.c 3674									level = M21dBFS;
	SYMB	LINE, 3674
	MOV.W	[R7],#06H
; rs232cmd.c 3675									break;
	SYMB	LINE, 3675
	BR	_888
; rs232cmd.c 3676	
; rs232cmd.c 3677								default:
	SYMB	LINE, 3677
_879:
; rs232cmd.c 3678									SCPIError = DataOutOfRange;
	SYMB	LINE, 3678
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3679									return;
	SYMB	LINE, 3679
	BR	_896
	SYMB	LINE, 3649
_880:
	SYMB	LINE, 3650
	MOV.W	[R7],#00H
; rs232cmd.c 3680							}
; rs232cmd.c 3681						}
; rs232cmd.c 3682					}
	SYMB	LINE, 3682
_888:
; rs232cmd.c 3683	
; rs232cmd.c 3684					if ( SetAudioLevel( AESEBUAudio, level) == FAIL)
	SYMB	LINE, 3684
	MOV.W	R0,#01H
	MOV.W	R1,[R7]
	CALL	_SetAudioLevel
	OR.W	R0,R0
	BNE	_896
; rs232cmd.c 3685						SCPIError = ExecErr;
	SYMB	LINE, 3685
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3686				}
; rs232cmd.c 3687			}
; rs232cmd.c 3688		}
; rs232cmd.c 3689	}
	SYMB	LINE, 3689
_896:
	ADDS.W	R7,#02H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3690	
; rs232cmd.c 3691	/**************************************************************************/
; rs232cmd.c 3692	/* AudioGenAESEBUTiming	 																 	     RS232CMD.C	*/
; rs232cmd.c 3693	/*																																				*/
; rs232cmd.c 3694	/* Author:		Kim Engedahl, DEV, 000616	    															*/
; rs232cmd.c 3695	/* Revised:		000616				     																					*/
; rs232cmd.c 3696	/*																																				*/
; rs232cmd.c 3697	/* Function:	--																													*/
; rs232cmd.c 3698	/* Remarks:		--																													*/
; rs232cmd.c 3699	/* Returns:		--																													*/
; rs232cmd.c 3700	/* Updates:		--																													*/
; rs232cmd.c 3701	/**************************************************************************/
; rs232cmd.c 3702	void AudioGenAESEBUTiming( void)
; rs232cmd.c 3703	{
	ALIGN	1
	SYMB	LINE, 3703
	PUBLIC	_AudioGenAESEBUTiming
_AudioGenAESEBUTiming:
	SYMB	TYPE, 600, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUTiming", _AudioGenAESEBUTiming, #600, 0, 0, 112
	SYMB	ALAB, _AudioGenAESEBUTiming, #600
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#014H
	SYMB	SOFF, 26
	SYMB	IDEN, "timing", -10, #10, 130, 5
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; rs232cmd.c 3704		float timing;
; rs232cmd.c 3705		int tmp;
; rs232cmd.c 3706	
; rs232cmd.c 3707		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3707
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_918
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_918
; rs232cmd.c 3708		{
; rs232cmd.c 3709			if ( CmdRequest)
	SYMB	LINE, 3709
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_907
; rs232cmd.c 3710			{
; rs232cmd.c 3711				if ( ParCnt)
	SYMB	LINE, 3711
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_906
; rs232cmd.c 3712					SCPIError = ParNotAllowed;
	SYMB	LINE, 3712
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_918
_906:
; rs232cmd.c 3713				else
; rs232cmd.c 3714					rs232printf( 6, "%.1f\n", AudioSetup[AESEBUAudio].Timing);
	SYMB	LINE, 3714
	MOV.B	ES,#SEG( _AudioSetup+20 )
	MOV.W	R1,#SOF( _AudioSetup+20 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__SPF2DPF
	PUSH.W	R0, R1, R2, R3
	SYMB	SOFF, 34
	MOV.W	R1,#SEG( _901 )
	MOV.W	R0,#SOF( _901 )
	PUSH.W	R0, R1
	SYMB	SOFF, 38
	MOV.W	R0,#06H
	CALL	_rs232printf
	ADD.W	R7,#0CH
	SYMB	SOFF, 26
; rs232cmd.c 3715			}
	SYMB	LINE, 3715
	BR	_918
_907:
; rs232cmd.c 3716			else
; rs232cmd.c 3717			{
; rs232cmd.c 3718				if (( ParCnt != 1) || ( sscanf( Cmd, "%f", &timing) != 1))
	SYMB	LINE, 3718
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_908
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+16
	PUSH.W	R2, R3
	SYMB	SOFF, 30
	MOV.W	R3,#SEG( _902 )
	MOV.W	R2,#SOF( _902 )
	PUSH.W	R2, R3
	SYMB	SOFF, 34
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 26
	CMP.W	R0,#01H
	BEQ	_909
_908:
; rs232cmd.c 3719					SCPIError = SyntaxErr;
	SYMB	LINE, 3719
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_918
_909:
; rs232cmd.c 3720				else
; rs232cmd.c 3721				{
; rs232cmd.c 3722					tmp = (int)(( timing / 0.8) + 0.5 - ( 1*( timing < 0)));
	SYMB	LINE, 3722
	MOV.W	R1,[R7+18]
	MOV.W	R0,[R7+16]
	FCALL	__SPF2DPF
	MOV.W	[R7+14],#03FE9H
	MOV.W	[R7+12],#09999H
	MOV.W	[R7+10],#09999H
	MOV.W	[R7+8],#0999AH
	LEA	R6,R7+8
	FCALL	__DIV_DPF
	MOV.W	[R7+14],#03FE0H
	MOV.W	[R7+12],#00H
	MOV.W	[R7+10],#00H
	MOV.W	[R7+8],#00H
	LEA	R6,R7+8
	FCALL	__ADD_DPF
	MOV.W	[R7+6],R3
	MOV.W	[R7+4],R2
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.W	R1,[R7+18]
	MOV.W	R0,[R7+16]
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	FCALL	__CMP_SPF
	CMP.B	R0L,#0FFH
	BNE	_921
	MOVS.W	R0,#00H
	MOVS.W	R1,#00H
	MOVS.W	R2,#00H
	MOV.W	R3,#03FF0H
	BR	_922
_921:
	MOVS.W	R0,#00H
	MOVS.W	R1,#00H
	MOVS.W	R2,#00H
	MOVS.W	R3,#00H
_922:
	MOV.W	R6,R7
	FCALL	__SUBR_DPF
	FCALL	__DPF2S
	SYMB	LTIM, "tmp", 2, 0, 205
; rs232cmd.c 3723	
; rs232cmd.c 3724					if (( tmp < -12) || ( tmp > 13))
	SYMB	LINE, 3724
	CMP.W	R0,#0FFF4H
	BLT	_910
	CMP.W	R0,#0DH
	BLE	_911
_910:
; rs232cmd.c 3725						SCPIError = DataOutOfRange;
	SYMB	LINE, 3725
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_918
_911:
; rs232cmd.c 3726					else
; rs232cmd.c 3727					{
; rs232cmd.c 3728						if ( SetAudioTiming( AESEBUAudio, timing) == FAIL)
	SYMB	LINE, 3728
	MOV.W	R0,#01H
	SYMB	LTIM, "tmp", 2, 0, 77
	MOV.W	R3,[R7+18]
	MOV.W	R2,[R7+16]
	CALL	_SetAudioTiming
	OR.W	R0,R0
	BNE	_918
; rs232cmd.c 3729							SCPIError = ExecErr;
	SYMB	LINE, 3729
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3730					}
; rs232cmd.c 3731				}
; rs232cmd.c 3732			}
; rs232cmd.c 3733		}
	SYMB	LINE, 3733
_918:
; rs232cmd.c 3734	}
	SYMB	LINE, 3734
	ADD.W	R7,#014H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 3735	
; rs232cmd.c 3736	/**************************************************************************/
; rs232cmd.c 3737	/* AudioGenAESEBUWordClock	 														 	     RS232CMD.C	*/
; rs232cmd.c 3738	/*																																				*/
; rs232cmd.c 3739	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3740	/* Revised:		000603				     																					*/
; rs232cmd.c 3741	/*																																				*/
; rs232cmd.c 3742	/* Function:	--																													*/
; rs232cmd.c 3743	/* Remarks:		--																													*/
; rs232cmd.c 3744	/* Returns:		--																													*/
; rs232cmd.c 3745	/* Updates:		--																													*/
; rs232cmd.c 3746	/**************************************************************************/
; rs232cmd.c 3747	void AudioGenAESEBUWordClock( void)
; rs232cmd.c 3748	{
	ALIGN	1
	SYMB	LINE, 3748
	PUBLIC	_AudioGenAESEBUWordClock
_AudioGenAESEBUWordClock:
	SYMB	TYPE, 601, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUWordClock", _AudioGenAESEBUWordClock, #601, 0, 0, 48
	SYMB	ALAB, _AudioGenAESEBUWordClock, #601
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "frequency", -1, #16, 130, 5
	SYMB	LTIM, "frequency", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 3749		int frequency;
; rs232cmd.c 3750		char code *str;
; rs232cmd.c 3751	
; rs232cmd.c 3752		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3752
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_937
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_937
; rs232cmd.c 3753		{
; rs232cmd.c 3754			if ( CmdRequest)
	SYMB	LINE, 3754
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_928
; rs232cmd.c 3755			{
; rs232cmd.c 3756				if ( ParCnt)
	SYMB	LINE, 3756
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_925
; rs232cmd.c 3757					SCPIError = ParNotAllowed;
	SYMB	LINE, 3757
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_937
_925:
; rs232cmd.c 3758				else
; rs232cmd.c 3759				{
; rs232cmd.c 3760					str = AudioFrequencyPar[AudioSetup[AESEBUAudio].Frequency].LongName;
	SYMB	LINE, 3760
	MOV.B	ES,#SEG( _AudioSetup+24 )
	MOV.W	R0,#SOF( _AudioSetup+24 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioFrequencyPar )
	MOV.W	R0,#SOF( _AudioFrequencyPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_938
	ADDS.B	CS,#01H
_938:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3761	
; rs232cmd.c 3762					while ( *str)
	SYMB	LINE, 3762
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_927
_926:
; rs232cmd.c 3763						rs232putchar( *str++);
	SYMB	LINE, 3763
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3762
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_926
	SYMB	LINE, 3763
_927:
; rs232cmd.c 3764	
; rs232cmd.c 3765					rs232putchar('\n');
	SYMB	LINE, 3765
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3766				}
; rs232cmd.c 3767			}
	SYMB	LINE, 3767
	BR	_937
_928:
; rs232cmd.c 3768			else
; rs232cmd.c 3769			{
; rs232cmd.c 3770				if ( ParCnt != 1)
	SYMB	LINE, 3770
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_929
; rs232cmd.c 3771					SCPIError = SyntaxErr;
	SYMB	LINE, 3771
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_937
_929:
; rs232cmd.c 3772				else
; rs232cmd.c 3773				{
; rs232cmd.c 3774					frequency = FindParameter( Cmd, AudioFrequencyPar);
	SYMB	LINE, 3774
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AudioFrequencyPar )
	MOV.W	R2,#SOF( _AudioFrequencyPar )
	CALL	_FindParameter
	SYMB	LTIM, "frequency", 2, 0, 205
; rs232cmd.c 3775		
; rs232cmd.c 3776					if ( frequency > -1)
	SYMB	LINE, 3776
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "frequency", 2, 0, 77
	SYMB	LTIM, "frequency", 6, 0, 205
	BLE	_930
; rs232cmd.c 3777					{
; rs232cmd.c 3778						if ( SetAudioWordClock( AESEBUAudio, frequency) == FAIL)
	SYMB	LINE, 3778
	MOV.W	R0,#01H
	CALL	_SetAudioWordClock
	SYMB	LTIM, "frequency", 6, 0, 77
	OR.W	R0,R0
	BNE	_937
; rs232cmd.c 3779							SCPIError = ExecErr;
	SYMB	LINE, 3779
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3780					}
	SYMB	LINE, 3780
	BR	_937
_930:
; rs232cmd.c 3781					else
; rs232cmd.c 3782						SCPIError = DataOutOfRange;
	SYMB	LINE, 3782
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3783				}
; rs232cmd.c 3784			}
; rs232cmd.c 3785		}
	SYMB	LINE, 3785
_937:
; rs232cmd.c 3786	}
	SYMB	LINE, 3786
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3787	
; rs232cmd.c 3788	/**************************************************************************/
; rs232cmd.c 3789	/* AudioGenAESEBUClick	 																 	     RS232CMD.C	*/
; rs232cmd.c 3790	/*																																				*/
; rs232cmd.c 3791	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3792	/* Revised:		000603				     																					*/
; rs232cmd.c 3793	/*																																				*/
; rs232cmd.c 3794	/* Function:	--																													*/
; rs232cmd.c 3795	/* Remarks:		--																													*/
; rs232cmd.c 3796	/* Returns:		--																													*/
; rs232cmd.c 3797	/* Updates:		--																													*/
; rs232cmd.c 3798	/**************************************************************************/
; rs232cmd.c 3799	void AudioGenAESEBUClick( void)
; rs232cmd.c 3800	{
	ALIGN	1
	SYMB	LINE, 3800
	PUBLIC	_AudioGenAESEBUClick
_AudioGenAESEBUClick:
	SYMB	TYPE, 602, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUClick", _AudioGenAESEBUClick, #602, 0, 0, 0
	SYMB	ALAB, _AudioGenAESEBUClick, #602
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "click", -2, #16, 130, 5
; rs232cmd.c 3801		int click;
; rs232cmd.c 3802	
; rs232cmd.c 3803		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3803
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_953
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_953
; rs232cmd.c 3804		{
; rs232cmd.c 3805			if ( CmdRequest)
	SYMB	LINE, 3805
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_942
; rs232cmd.c 3806			{
; rs232cmd.c 3807				if ( ParCnt)
	SYMB	LINE, 3807
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_941
; rs232cmd.c 3808					SCPIError = ParNotAllowed;
	SYMB	LINE, 3808
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_953
_941:
; rs232cmd.c 3809				else
; rs232cmd.c 3810					rs232printf( 6, "%d\n", AudioSetup[AESEBUAudio].Click);
	SYMB	LINE, 3810
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _AudioSetup+26 )
	MOV.W	R1,#SOF( _AudioSetup+26 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 3811			}
	SYMB	LINE, 3811
	BR	_953
_942:
; rs232cmd.c 3812			else
; rs232cmd.c 3813			{
; rs232cmd.c 3814				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &click) != 1))
	SYMB	LINE, 3814
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_943
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_944
_943:
; rs232cmd.c 3815					SCPIError = SyntaxErr;
	SYMB	LINE, 3815
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_953
_944:
; rs232cmd.c 3816				else
; rs232cmd.c 3817				{
; rs232cmd.c 3818					if (( click != click1s) && ( click != click3s))
	SYMB	LINE, 3818
	CMP.W	[R7],#01H
	BEQ	_946
	CMP.W	[R7],#03H
	BEQ	_946
; rs232cmd.c 3819						SCPIError = DataOutOfRange;
	SYMB	LINE, 3819
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_953
_946:
; rs232cmd.c 3820					else
; rs232cmd.c 3821					{
; rs232cmd.c 3822						if ( SetAudioClick( AESEBUAudio, click) == FAIL)
	SYMB	LINE, 3822
	MOV.W	R0,#01H
	MOV.W	R1,[R7]
	CALL	_SetAudioClick
	OR.W	R0,R0
	BNE	_953
; rs232cmd.c 3823							SCPIError = ExecErr;
	SYMB	LINE, 3823
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3824					}
; rs232cmd.c 3825				}
; rs232cmd.c 3826			}
; rs232cmd.c 3827		}
	SYMB	LINE, 3827
_953:
; rs232cmd.c 3828	}
	SYMB	LINE, 3828
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 3829	
; rs232cmd.c 3830	/**************************************************************************/
; rs232cmd.c 3831	/* FactPassword																					 	     RS232CMD.C	*/
; rs232cmd.c 3832	/*																																				*/
; rs232cmd.c 3833	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3834	/* Revised:	  000614				     																					*/
; rs232cmd.c 3835	/*																																				*/
; rs232cmd.c 3836	/* Function:	--																													*/
; rs232cmd.c 3837	/* Remarks:		--																													*/
; rs232cmd.c 3838	/* Returns:		--																													*/
; rs232cmd.c 3839	/* Updates:		--																													*/
; rs232cmd.c 3840	/**************************************************************************/
; rs232cmd.c 3841	void FactPassword( void)
; rs232cmd.c 3842	{
	ALIGN	1
	SYMB	LINE, 3842
	PUBLIC	_FactPassword
_FactPassword:
	SYMB	TYPE, 603, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactPassword", _FactPassword, #603, 0, 0, 0
	SYMB	ALAB, _FactPassword, #603
; rs232cmd.c 3843		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3843
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_974
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_974
; rs232cmd.c 3844		{
; rs232cmd.c 3845			if ( CmdRequest)
	SYMB	LINE, 3845
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_963
; rs232cmd.c 3846			{
; rs232cmd.c 3847				if ( ParCnt)
	SYMB	LINE, 3847
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_961
; rs232cmd.c 3848					SCPIError = ParNotAllowed;
	SYMB	LINE, 3848
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_961:
; rs232cmd.c 3849				else
; rs232cmd.c 3850				{
; rs232cmd.c 3851					if ( PasswordProtected)
	SYMB	LINE, 3851
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BEQ	_962
; rs232cmd.c 3852						rs232puts( "ON\n");
	SYMB	LINE, 3852
	MOV.W	R1,#SEG( _958 )
	MOV.W	R0,#SOF( _958 )
	CALL	_rs232puts
	RET
_962:
; rs232cmd.c 3853					else
; rs232cmd.c 3854						rs232puts( "OFF\n");
	SYMB	LINE, 3854
	MOV.W	R1,#SEG( _959 )
	MOV.W	R0,#SOF( _959 )
	CALL	_rs232puts
; rs232cmd.c 3855				}
; rs232cmd.c 3856			}
	SYMB	LINE, 3856
	RET
_963:
; rs232cmd.c 3857			else
; rs232cmd.c 3858			{
; rs232cmd.c 3859				if ( ParCnt != 1)
	SYMB	LINE, 3859
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_964
; rs232cmd.c 3860					SCPIError = SyntaxErr;
	SYMB	LINE, 3860
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_964:
; rs232cmd.c 3861				else
; rs232cmd.c 3862				{
; rs232cmd.c 3863					if ( !strcmp( Cmd, "ON"))
	SYMB	LINE, 3863
	MOV.W	R3,#SEG( _960 )
	MOV.W	R2,#SOF( _960 )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_strcmp
	OR.W	R0,R0
	BNE	_965
; rs232cmd.c 3864						PasswordProtected = true;
	SYMB	LINE, 3864
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	[R0],#0FFFFH
	RET
_965:
; rs232cmd.c 3865					else
; rs232cmd.c 3866						if ( !Cstrcmp( Cmd, PasswordText))
	SYMB	LINE, 3866
	MOV.W	R3,#SEG( _PasswordText )
	MOV.W	R2,#SOF( _PasswordText )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_Cstrcmp
	OR.W	R0,R0
	BNE	_966
; rs232cmd.c 3867							PasswordProtected = false;
	SYMB	LINE, 3867
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	[R0],#00H
	RET
_966:
; rs232cmd.c 3868					else
; rs232cmd.c 3869						SCPIError = IllegalParValue;
	SYMB	LINE, 3869
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#023H
; rs232cmd.c 3870				}
; rs232cmd.c 3871			}
; rs232cmd.c 3872		}
	SYMB	LINE, 3872
_974:
; rs232cmd.c 3873	}
	SYMB	LINE, 3873
	RET
	SYMB	EFUN
; rs232cmd.c 3874	
; rs232cmd.c 3875	/**************************************************************************/
; rs232cmd.c 3876	/* FactReset																						 	     RS232CMD.C	*/
; rs232cmd.c 3877	/*																																				*/
; rs232cmd.c 3878	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 3879	/* Revised:	  000914				     																					*/
; rs232cmd.c 3880	/*																																				*/
; rs232cmd.c 3881	/* Function:	--																													*/
; rs232cmd.c 3882	/* Remarks:		--																													*/
; rs232cmd.c 3883	/* Returns:		--																													*/
; rs232cmd.c 3884	/* Updates:		--																													*/
; rs232cmd.c 3885	/**************************************************************************/
; rs232cmd.c 3886	void FactReset( void)
; rs232cmd.c 3887	{
	ALIGN	1
	SYMB	LINE, 3887
	PUBLIC	_FactReset
_FactReset:
	SYMB	TYPE, 604, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactReset", _FactReset, #604, 0, 0, 16
	SYMB	ALAB, _FactReset, #604
	PUSH.W	R4
	SYMB	SOFF, 2
	SYMB	IDEN, "i", -1, #16, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
; rs232cmd.c 3888		int i;
; rs232cmd.c 3889	
; rs232cmd.c 3890		if ( !PasswordProtected)
	SYMB	LINE, 3890
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_983
; rs232cmd.c 3891		{
; rs232cmd.c 3892			if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3892
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_983
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_983
; rs232cmd.c 3893			{
; rs232cmd.c 3894				if ( CmdRequest)
	SYMB	LINE, 3894
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_976
; rs232cmd.c 3895						SCPIError = SyntaxErr;
	SYMB	LINE, 3895
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_983
_976:
; rs232cmd.c 3896				else
; rs232cmd.c 3897				{
; rs232cmd.c 3898					if ( ParCnt)
	SYMB	LINE, 3898
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_977
; rs232cmd.c 3899						SCPIError = SyntaxErr;
	SYMB	LINE, 3899
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_983
_977:
; rs232cmd.c 3900					else
; rs232cmd.c 3901					{
; rs232cmd.c 3902						GenlockDefaults();				// 
	SYMB	LINE, 3902
	CALL	_GenlockDefaults
; rs232cmd.c 3903						BBDefaults();				 			// 
	SYMB	LINE, 3903
	CALL	_BBDefaults
; rs232cmd.c 3904						CBDefaults();				 			//
	SYMB	LINE, 3904
	CALL	_CBDefaults
; rs232cmd.c 3905						AudioDefaults();				 	//
	SYMB	LINE, 3905
	CALL	_AudioDefaults
; rs232cmd.c 3906	
; rs232cmd.c 3907						GenlockInit();	 		 			// init the genlock setup
	SYMB	LINE, 3907
	CALL	_GenlockInit
; rs232cmd.c 3908						BBInit();						 			// init the black burst setups
	SYMB	LINE, 3908
	CALL	_BBInit
; rs232cmd.c 3909						CBInit();						 			// init the colorbar generator (PAL,EBU ColorBar)
	SYMB	LINE, 3909
	CALL	_CBInit
; rs232cmd.c 3910						AudioInit();				 			// init the audio setup, (this includes an AudioTimer)				
	SYMB	LINE, 3910
	CALL	_AudioInit
; rs232cmd.c 3911	
; rs232cmd.c 3912						GenlockUpdate();	 			 	// update the genlock setup.
	SYMB	LINE, 3912
	CALL	_GenlockUpdate
; rs232cmd.c 3913						CBUpdate();							 	// update the colorbar generator (PAL,EBU ColorBar)
	SYMB	LINE, 3913
	CALL	_CBUpdate
; rs232cmd.c 3914						BBUpdate();							 	// update the black burst setups
	SYMB	LINE, 3914
	CALL	_BBUpdate
; rs232cmd.c 3915						AudioUpdate();					 	// update the audio setup
	SYMB	LINE, 3915
	CALL	_AudioUpdate
; rs232cmd.c 3916	
; rs232cmd.c 3917						for ( i = 1; i <= NoOfPresets; i++)
	SYMB	LINE, 3917
	MOV.W	R4,#01H
	SYMB	LTIM, "i", 18, 0, 205
_978:
; rs232cmd.c 3918							StorePreset( i);
	SYMB	LINE, 3918
	MOV.W	R0,R4
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 2, 0, 205
	CALL	_StorePreset
	SYMB	LTIM, "i", 2, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
	SYMB	LINE, 3917
	ADDS.W	R4,#01H
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
	CMP.W	R4,#04H
	BLE	_978
; rs232cmd.c 3919	
; rs232cmd.c 3920						Settings.ActivePreset = 0;
	SYMB	LINE, 3920
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.W	[R0],#00H
; rs232cmd.c 3921						NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 3921
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	CALL	_NV_Store
; rs232cmd.c 3922					}
; rs232cmd.c 3923				}
; rs232cmd.c 3924			}
; rs232cmd.c 3925		}
	SYMB	LINE, 3925
_983:
; rs232cmd.c 3926	}
	SYMB	LINE, 3926
	POP.W	R4
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	EFUN
; rs232cmd.c 3927	
; rs232cmd.c 3928	/**************************************************************************/
; rs232cmd.c 3929	/* FactV24Command																				 	     RS232CMD.C	*/
; rs232cmd.c 3930	/*																																				*/
; rs232cmd.c 3931	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3932	/* Revised:	  000614				     																					*/
; rs232cmd.c 3933	/*																																				*/
; rs232cmd.c 3934	/* Function:	--																													*/
; rs232cmd.c 3935	/* Remarks:		--																													*/
; rs232cmd.c 3936	/* Returns:		--																													*/
; rs232cmd.c 3937	/* Updates:		--																													*/
; rs232cmd.c 3938	/**************************************************************************/
; rs232cmd.c 3939	void FactV24Command( void)
; rs232cmd.c 3940	{
	ALIGN	1
	SYMB	LINE, 3940
	PUBLIC	_FactV24Command
_FactV24Command:
	SYMB	TYPE, 605, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactV24Command", _FactV24Command, #605, 0, 0, 48
	SYMB	ALAB, _FactV24Command, #605
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#03EH
	SYMB	SOFF, 66
	SYMB	IDEN, "address", -66, #3, 130, 5
	SYMB	TYPE, 606, 'Z', #2, 29
	SYMB	IDEN, "command", -64, #606, 130, 5
	SYMB	IDEN, "result", -34, #606, 130, 5
; rs232cmd.c 3941		UC address;
; rs232cmd.c 3942		char command[30], result[30];;
; rs232cmd.c 3943	
; rs232cmd.c 3944		if ( !PasswordProtected)
	SYMB	LINE, 3944
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1000
; rs232cmd.c 3945		{
; rs232cmd.c 3946			if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3946
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1000
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1000
; rs232cmd.c 3947			{
; rs232cmd.c 3948				if ( CmdRequest)
	SYMB	LINE, 3948
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_988
; rs232cmd.c 3949					SCPIError = SyntaxErr;
	SYMB	LINE, 3949
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1000
_988:
; rs232cmd.c 3950				else
; rs232cmd.c 3951				{
; rs232cmd.c 3952					if (( ParCnt != 2) || ( sscanf( Cmd, "%d,%s", &address, command) != 2))
	SYMB	LINE, 3952
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_989
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	PUSH.W	R4, R5
	SYMB	SOFF, 70
	PUSH.W	R2, R3
	SYMB	SOFF, 74
	MOV.W	R3,#SEG( _985 )
	MOV.W	R2,#SOF( _985 )
	PUSH.W	R2, R3
	SYMB	SOFF, 78
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 66
	CMP.W	R0,#02H
	BEQ	_990
_989:
; rs232cmd.c 3953						SCPIError = SyntaxErr;
	SYMB	LINE, 3953
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1000
_990:
; rs232cmd.c 3954					else
; rs232cmd.c 3955					{
; rs232cmd.c 3956						if ( command[2] == '?')
	SYMB	LINE, 3956
	CMP.B	[R7+4],#03FH
	BNE	_992
; rs232cmd.c 3957						{
; rs232cmd.c 3958							if ( sio0SndRequest( 12, address, result, "%s", command) == OK)
	SYMB	LINE, 3958
	MOV.W	R0,#0CH
	MOV.B	R1L,[R7]
	MOVS.B	R1H,#00H
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+32
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+2
	PUSH.W	R2, R3
	SYMB	SOFF, 70
	MOV.W	R3,#SEG( _986 )
	MOV.W	R2,#SOF( _986 )
	PUSH.W	R2, R3
	SYMB	SOFF, 74
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_sio0SndRequest
	ADD.W	R7,#08H
	SYMB	SOFF, 66
	CMP.W	R0,#0FFFFH
	BNE	_991
; rs232cmd.c 3959								rs232puts( result);
	SYMB	LINE, 3959
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
	BR	_1000
_991:
; rs232cmd.c 3960							else
; rs232cmd.c 3961								SCPIError = ExecErr;
	SYMB	LINE, 3961
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3962						}
	SYMB	LINE, 3962
	BR	_1000
_992:
; rs232cmd.c 3963						else
; rs232cmd.c 3964						{
; rs232cmd.c 3965							if ( sio0SndCommand( 20, address, "%s;", command) == FAIL)
	SYMB	LINE, 3965
	MOV.W	R0,#014H
	MOV.B	R1L,[R7]
	MOVS.B	R1H,#00H
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+2
	PUSH.W	R2, R3
	SYMB	SOFF, 70
	MOV.W	R3,#SEG( _987 )
	MOV.W	R2,#SOF( _987 )
	PUSH.W	R2, R3
	SYMB	SOFF, 74
	CALL	_sio0SndCommand
	ADD.W	R7,#08H
	SYMB	SOFF, 66
	OR.W	R0,R0
	BNE	_1000
; rs232cmd.c 3966								SCPIError = ExecErr;
	SYMB	LINE, 3966
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3967						}
; rs232cmd.c 3968					}
; rs232cmd.c 3969				}
; rs232cmd.c 3970			}
; rs232cmd.c 3971		}
	SYMB	LINE, 3971
_1000:
; rs232cmd.c 3972	}
	SYMB	LINE, 3972
	ADD.W	R7,#03EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 3973	
; rs232cmd.c 3974	/**************************************************************************/
; rs232cmd.c 3975	/* FactV24Transparent																		 	     RS232CMD.C	*/
; rs232cmd.c 3976	/*																																				*/
; rs232cmd.c 3977	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 3978	/* Revised:	  000614				     																					*/
; rs232cmd.c 3979	/*																																				*/
; rs232cmd.c 3980	/* Function:	--																													*/
; rs232cmd.c 3981	/* Remarks:		--																													*/
; rs232cmd.c 3982	/* Returns:		--																													*/
; rs232cmd.c 3983	/* Updates:		--																													*/
; rs232cmd.c 3984	/**************************************************************************/
; rs232cmd.c 3985	void FactV24Transparent( void)
; rs232cmd.c 3986	{
	ALIGN	1
	SYMB	LINE, 3986
	PUBLIC	_FactV24Transparent
_FactV24Transparent:
	SYMB	TYPE, 608, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactV24Transparent", _FactV24Transparent, #608, 0, 0, 0
	SYMB	ALAB, _FactV24Transparent, #608
	SYMB	IDEN, "unit", -1, #16, 130, 5
	SYMB	LTIM, "unit", -1, 0, 69
; rs232cmd.c 3987		int unit;
; rs232cmd.c 3988	
; rs232cmd.c 3989		if ( !PasswordProtected)
	SYMB	LINE, 3989
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1011
; rs232cmd.c 3990		{
; rs232cmd.c 3991			if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3991
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1011
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1011
; rs232cmd.c 3992			{
; rs232cmd.c 3993				if ( CmdRequest)
	SYMB	LINE, 3993
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1005
; rs232cmd.c 3994					SCPIError = SyntaxErr;
	SYMB	LINE, 3994
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_1005:
; rs232cmd.c 3995				else
; rs232cmd.c 3996				{
; rs232cmd.c 3997					unit = FindParameter( Cmd, UnitPar);
	SYMB	LINE, 3997
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _UnitPar )
	MOV.W	R2,#SOF( _UnitPar )
	CALL	_FindParameter
	SYMB	LTIM, "unit", 2, 0, 205
; rs232cmd.c 3998		
; rs232cmd.c 3999					if ( unit > -1)
	SYMB	LINE, 3999
	CMP.W	R0,#0FFFFH
	BLE	_1006
; rs232cmd.c 4000						BBSPGCommunication( unit);
	SYMB	LINE, 4000
	CALL	_BBSPGCommunication
	SYMB	LTIM, "unit", 2, 0, 77
	RET
_1006:
; rs232cmd.c 4001					else
; rs232cmd.c 4002						SCPIError = DataOutOfRange;
	SYMB	LINE, 4002
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 4003				}
; rs232cmd.c 4004			}
; rs232cmd.c 4005		}
	SYMB	LINE, 4005
_1011:
; rs232cmd.c 4006	}
	SYMB	LINE, 4006
	RET
	SYMB	EFUN
; rs232cmd.c 4007	
; rs232cmd.c 4008	/**************************************************************************/
; rs232cmd.c 4009	/* FactChecksumCode																			 	     RS232CMD.C	*/
; rs232cmd.c 4010	/*																																				*/
; rs232cmd.c 4011	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4012	/* Revised:	  000705			     																						*/
; rs232cmd.c 4013	/*																																				*/
; rs232cmd.c 4014	/* Function:	--																													*/
; rs232cmd.c 4015	/* Remarks:		--																													*/
; rs232cmd.c 4016	/* Returns:		--																													*/
; rs232cmd.c 4017	/* Updates:		--																													*/
; rs232cmd.c 4018	/**************************************************************************/
; rs232cmd.c 4019	void FactChecksumCode( void)
; rs232cmd.c 4020	{
	ALIGN	1
	SYMB	LINE, 4020
	PUBLIC	_FactChecksumCode
_FactChecksumCode:
	SYMB	TYPE, 609, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumCode", _FactChecksumCode, #609, 0, 0, 48
	SYMB	ALAB, _FactChecksumCode, #609
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4021		char buffer[30];
; rs232cmd.c 4022	
; rs232cmd.c 4023		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4023
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1019
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1019
; rs232cmd.c 4024		{
; rs232cmd.c 4025			if ( CmdRequest)
	SYMB	LINE, 4025
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1015
; rs232cmd.c 4026			{
; rs232cmd.c 4027				if ( ParCnt)
	SYMB	LINE, 4027
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1014
; rs232cmd.c 4028					SCPIError = SyntaxErr;
	SYMB	LINE, 4028
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1019
_1014:
; rs232cmd.c 4029				else
; rs232cmd.c 4030				{		
; rs232cmd.c 4031					sprintf( buffer, "%u\n", ROMChecksum( StartOfPROMCode, StartOfPROMCode+SizeOfPROMCode-1));
	SYMB	LINE, 4031
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	MOV.W	R3,#03H
	MOV.W	R2,#0FFFFH
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 34
; rs232cmd.c 4032					rs232puts( buffer);
	SYMB	LINE, 4032
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4033				}
; rs232cmd.c 4034			}
	SYMB	LINE, 4034
	BR	_1019
_1015:
; rs232cmd.c 4035			else
; rs232cmd.c 4036				SCPIError = SyntaxErr;
	SYMB	LINE, 4036
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4037		}
	SYMB	LINE, 4037
_1019:
; rs232cmd.c 4038	}
	SYMB	LINE, 4038
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4039	
; rs232cmd.c 4040	/**************************************************************************/
; rs232cmd.c 4041	/* FactChecksumPLD																			 	     RS232CMD.C	*/
; rs232cmd.c 4042	/*																																				*/
; rs232cmd.c 4043	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4044	/* Revised:	  000705			     																						*/
; rs232cmd.c 4045	/*																																				*/
; rs232cmd.c 4046	/* Function:	--																													*/
; rs232cmd.c 4047	/* Remarks:		--																													*/
; rs232cmd.c 4048	/* Returns:		--																													*/
; rs232cmd.c 4049	/* Updates:		--																													*/
; rs232cmd.c 4050	/**************************************************************************/
; rs232cmd.c 4051	void FactChecksumPLD( void)
; rs232cmd.c 4052	{
	ALIGN	1
	SYMB	LINE, 4052
	PUBLIC	_FactChecksumPLD
_FactChecksumPLD:
	SYMB	TYPE, 610, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumPLD", _FactChecksumPLD, #610, 0, 0, 48
	SYMB	ALAB, _FactChecksumPLD, #610
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4053		char buffer[30];
; rs232cmd.c 4054	
; rs232cmd.c 4055		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4055
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1025
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1025
; rs232cmd.c 4056		{
; rs232cmd.c 4057			if ( CmdRequest)
	SYMB	LINE, 4057
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1021
; rs232cmd.c 4058			{
; rs232cmd.c 4059				if ( ParCnt)
	SYMB	LINE, 4059
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1020
; rs232cmd.c 4060					SCPIError = SyntaxErr;
	SYMB	LINE, 4060
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1025
_1020:
; rs232cmd.c 4061				else
; rs232cmd.c 4062				{		
; rs232cmd.c 4063					sprintf( buffer, "%u\n", ROMChecksum( StartOfPLDCode, StartOfPLDCode+SizeOfPLDCode-1));
	SYMB	LINE, 4063
	MOV.W	R1,#04H
	MOV.W	R0,#00H
	MOV.W	R3,#04H
	MOV.W	R2,#09FFFH
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 34
; rs232cmd.c 4064					rs232puts( buffer);
	SYMB	LINE, 4064
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4065				}
; rs232cmd.c 4066			}
	SYMB	LINE, 4066
	BR	_1025
_1021:
; rs232cmd.c 4067			else
; rs232cmd.c 4068				SCPIError = SyntaxErr;
	SYMB	LINE, 4068
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4069		}
	SYMB	LINE, 4069
_1025:
; rs232cmd.c 4070	}
	SYMB	LINE, 4070
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4071	
; rs232cmd.c 4072	/**************************************************************************/
; rs232cmd.c 4073	/* FactChecksumEmbAudio																	 	     RS232CMD.C	*/
; rs232cmd.c 4074	/*																																				*/
; rs232cmd.c 4075	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4076	/* Revised:	  000705			     																						*/
; rs232cmd.c 4077	/*																																				*/
; rs232cmd.c 4078	/* Function:	--																													*/
; rs232cmd.c 4079	/* Remarks:		--																													*/
; rs232cmd.c 4080	/* Returns:		--																													*/
; rs232cmd.c 4081	/* Updates:		--																													*/
; rs232cmd.c 4082	/**************************************************************************/
; rs232cmd.c 4083	void FactChecksumEmbAudio( void)
; rs232cmd.c 4084	{
	ALIGN	1
	SYMB	LINE, 4084
	PUBLIC	_FactChecksumEmbAudio
_FactChecksumEmbAudio:
	SYMB	TYPE, 611, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumEmbAudio", _FactChecksumEmbAudio, #611, 0, 0, 48
	SYMB	ALAB, _FactChecksumEmbAudio, #611
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4085		char buffer[30];
; rs232cmd.c 4086	
; rs232cmd.c 4087		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4087
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1031
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1031
; rs232cmd.c 4088		{
; rs232cmd.c 4089			if ( CmdRequest)
	SYMB	LINE, 4089
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1027
; rs232cmd.c 4090			{
; rs232cmd.c 4091				if ( ParCnt)
	SYMB	LINE, 4091
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1026
; rs232cmd.c 4092					SCPIError = SyntaxErr;
	SYMB	LINE, 4092
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1031
_1026:
; rs232cmd.c 4093				else
; rs232cmd.c 4094				{		
; rs232cmd.c 4095					sprintf( buffer, "%u\n", ROMChecksum( StartOfEmbAudioCode, StartOfEmbAudioCode+SizeOfEmbAudioCode-1));
	SYMB	LINE, 4095
	MOV.W	R1,#04H
	MOV.W	R0,#0A000H
	MOV.W	R3,#04H
	MOV.W	R2,#0C3FFH
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 34
; rs232cmd.c 4096					rs232puts( buffer);
	SYMB	LINE, 4096
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4097				}
; rs232cmd.c 4098			}
	SYMB	LINE, 4098
	BR	_1031
_1027:
; rs232cmd.c 4099			else
; rs232cmd.c 4100				SCPIError = SyntaxErr;
	SYMB	LINE, 4100
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4101		}
	SYMB	LINE, 4101
_1031:
; rs232cmd.c 4102	}
	SYMB	LINE, 4102
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4103	
; rs232cmd.c 4104	/**************************************************************************/
; rs232cmd.c 4105	/* FactChecksumPattern																	 	     RS232CMD.C	*/
; rs232cmd.c 4106	/*																																				*/
; rs232cmd.c 4107	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4108	/* Revised:	  000705			     																						*/
; rs232cmd.c 4109	/*																																				*/
; rs232cmd.c 4110	/* Function:	--																													*/
; rs232cmd.c 4111	/* Remarks:		--																													*/
; rs232cmd.c 4112	/* Returns:		--																													*/
; rs232cmd.c 4113	/* Updates:		--																													*/
; rs232cmd.c 4114	/**************************************************************************/
; rs232cmd.c 4115	void FactChecksumPattern( void)
; rs232cmd.c 4116	{
	ALIGN	1
	SYMB	LINE, 4116
	PUBLIC	_FactChecksumPattern
_FactChecksumPattern:
	SYMB	TYPE, 612, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumPattern", _FactChecksumPattern, #612, 0, 0, 48
	SYMB	ALAB, _FactChecksumPattern, #612
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4117		char buffer[30];
; rs232cmd.c 4118	
; rs232cmd.c 4119		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4119
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1037
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1037
; rs232cmd.c 4120		{
; rs232cmd.c 4121			if ( CmdRequest)
	SYMB	LINE, 4121
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1033
; rs232cmd.c 4122			{
; rs232cmd.c 4123				if ( ParCnt)
	SYMB	LINE, 4123
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1032
; rs232cmd.c 4124					SCPIError = SyntaxErr;
	SYMB	LINE, 4124
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1037
_1032:
; rs232cmd.c 4125				else
; rs232cmd.c 4126				{		
; rs232cmd.c 4127					sprintf( buffer, "%u\n", ROMChecksum( StartOfCBVideoCode, StartOfCBVideoCode+SizeOfCBVideoCode-1));
	SYMB	LINE, 4127
	MOV.W	R1,#05H
	MOV.W	R0,#00H
	MOV.W	R3,#07H
	MOV.W	R2,#0FFFFH
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 34
; rs232cmd.c 4128					rs232puts( buffer);
	SYMB	LINE, 4128
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4129				}
; rs232cmd.c 4130			}
	SYMB	LINE, 4130
	BR	_1037
_1033:
; rs232cmd.c 4131			else
; rs232cmd.c 4132				SCPIError = SyntaxErr;
	SYMB	LINE, 4132
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4133		}
	SYMB	LINE, 4133
_1037:
; rs232cmd.c 4134	}
	SYMB	LINE, 4134
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4135	
; rs232cmd.c 4136	/**************************************************************************/
; rs232cmd.c 4137	/* FactChecksumRange																		 	     RS232CMD.C	*/
; rs232cmd.c 4138	/*																																				*/
; rs232cmd.c 4139	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4140	/* Revised:	  000705			     																						*/
; rs232cmd.c 4141	/*																																				*/
; rs232cmd.c 4142	/* Function:	--																													*/
; rs232cmd.c 4143	/* Remarks:		--																													*/
; rs232cmd.c 4144	/* Returns:		--																													*/
; rs232cmd.c 4145	/* Updates:		--																													*/
; rs232cmd.c 4146	/**************************************************************************/
; rs232cmd.c 4147	void FactChecksumRange( void)
; rs232cmd.c 4148	{
	ALIGN	1
	SYMB	LINE, 4148
	PUBLIC	_FactChecksumRange
_FactChecksumRange:
	SYMB	TYPE, 613, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumRange", _FactChecksumRange, #613, 0, 0, 48
	SYMB	ALAB, _FactChecksumRange, #613
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "StartAddr", -42, #7, 130, 5
	SYMB	IDEN, "EndAddr", -38, #7, 130, 5
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4149		UL StartAddr, EndAddr;
; rs232cmd.c 4150	
; rs232cmd.c 4151		char buffer[30];
; rs232cmd.c 4152	
; rs232cmd.c 4153		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4153
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1045
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1045
; rs232cmd.c 4154		{
; rs232cmd.c 4155			if ( CmdRequest)
	SYMB	LINE, 4155
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1041
; rs232cmd.c 4156			{
; rs232cmd.c 4157				if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &StartAddr, &EndAddr)) != 2))
	SYMB	LINE, 4157
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1039
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+4
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1038 )
	MOV.W	R2,#SOF( _1038 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1040
_1039:
; rs232cmd.c 4158					SCPIError = SyntaxErr;
	SYMB	LINE, 4158
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1045
_1040:
; rs232cmd.c 4159				else
; rs232cmd.c 4160				{
; rs232cmd.c 4161					sprintf( buffer, "%u\n", ROMChecksum( StartAddr, EndAddr));
	SYMB	LINE, 4161
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	MOV.W	R3,[R7+6]
	MOV.W	R2,[R7+4]
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+8
	PUSH.W	R0
	SYMB	SOFF, 44
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 48
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 42
; rs232cmd.c 4162					rs232puts( buffer);
	SYMB	LINE, 4162
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4163				}
; rs232cmd.c 4164			}
	SYMB	LINE, 4164
	BR	_1045
_1041:
; rs232cmd.c 4165			else
; rs232cmd.c 4166				SCPIError = SyntaxErr;
	SYMB	LINE, 4166
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4167		}
	SYMB	LINE, 4167
_1045:
; rs232cmd.c 4168	}
	SYMB	LINE, 4168
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4169	
; rs232cmd.c 4170	/**************************************************************************/
; rs232cmd.c 4171	/* FactMainVersion																			 	     RS232CMD.C	*/
; rs232cmd.c 4172	/*																																				*/
; rs232cmd.c 4173	/* Author:		Kim Engedahl, DEV, 000620	    															*/
; rs232cmd.c 4174	/* Revised:	  000620				     																					*/
; rs232cmd.c 4175	/*																																				*/
; rs232cmd.c 4176	/* Function:	--																													*/
; rs232cmd.c 4177	/* Remarks:		--																													*/
; rs232cmd.c 4178	/* Returns:		--																													*/
; rs232cmd.c 4179	/* Updates:		--																													*/
; rs232cmd.c 4180	/**************************************************************************/
; rs232cmd.c 4181	void FactMainVersion( void)
; rs232cmd.c 4182	{
	ALIGN	1
	SYMB	LINE, 4182
	PUBLIC	_FactMainVersion
_FactMainVersion:
	SYMB	TYPE, 614, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainVersion", _FactMainVersion, #614, 0, 0, 48
	SYMB	ALAB, _FactMainVersion, #614
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#014H
	SYMB	SOFF, 24
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4183		char buffer[20];
; rs232cmd.c 4184	
; rs232cmd.c 4185		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4185
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1053
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1053
; rs232cmd.c 4186		{
; rs232cmd.c 4187			if ( CmdRequest)
	SYMB	LINE, 4187
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1049
; rs232cmd.c 4188			{
; rs232cmd.c 4189				if ( ParCnt)
	SYMB	LINE, 4189
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1048
; rs232cmd.c 4190					SCPIError = SyntaxErr;
	SYMB	LINE, 4190
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1053
_1048:
; rs232cmd.c 4191				else
; rs232cmd.c 4192				{
; rs232cmd.c 4193					sprintf( buffer, "%u\n", MasterSWVersion);
	SYMB	LINE, 4193
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R0,#017H
	PUSH.W	R0
	SYMB	SOFF, 26
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 30
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 24
; rs232cmd.c 4194					rs232puts( buffer);
	SYMB	LINE, 4194
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4195				}
; rs232cmd.c 4196			}
	SYMB	LINE, 4196
	BR	_1053
_1049:
; rs232cmd.c 4197			else
; rs232cmd.c 4198				SCPIError = SyntaxErr;
	SYMB	LINE, 4198
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4199		}
	SYMB	LINE, 4199
_1053:
; rs232cmd.c 4200	}
	SYMB	LINE, 4200
	ADD.W	R7,#014H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4201	
; rs232cmd.c 4202	/**************************************************************************/
; rs232cmd.c 4203	/* FactMainIDNCompany																		 	     RS232CMD.C	*/
; rs232cmd.c 4204	/*																																				*/
; rs232cmd.c 4205	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4206	/* Revised:	  000616				     																					*/
; rs232cmd.c 4207	/*																																				*/
; rs232cmd.c 4208	/* Function:	--																													*/
; rs232cmd.c 4209	/* Remarks:		--																													*/
; rs232cmd.c 4210	/* Returns:		--																													*/
; rs232cmd.c 4211	/* Updates:		--																													*/
; rs232cmd.c 4212	/**************************************************************************/
; rs232cmd.c 4213	void FactMainIDNCompany( void)
; rs232cmd.c 4214	{
	ALIGN	1
	SYMB	LINE, 4214
	PUBLIC	_FactMainIDNCompany
_FactMainIDNCompany:
	SYMB	TYPE, 615, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainIDNCompany", _FactMainIDNCompany, #615, 0, 0, 112
	SYMB	ALAB, _FactMainIDNCompany, #615
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#022H
	SYMB	SOFF, 40
	SYMB	IDEN, "Company", -40, #476, 130, 5
; rs232cmd.c 4215		char Company[33];
; rs232cmd.c 4216	
; rs232cmd.c 4217		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4217
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1064
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1064
; rs232cmd.c 4218		{
; rs232cmd.c 4219			if ( CmdRequest)
	SYMB	LINE, 4219
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1056
; rs232cmd.c 4220			{
; rs232cmd.c 4221				if ( ParCnt)
	SYMB	LINE, 4221
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1055
; rs232cmd.c 4222					SCPIError = SyntaxErr;
	SYMB	LINE, 4222
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1064
_1055:
; rs232cmd.c 4223				else
; rs232cmd.c 4224				{
; rs232cmd.c 4225					rs232puts( Calibration.Company);
	SYMB	LINE, 4225
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	CALL	_rs232puts
; rs232cmd.c 4226					rs232putchar( '\n');
	SYMB	LINE, 4226
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4227				}
; rs232cmd.c 4228			}
	SYMB	LINE, 4228
	BR	_1064
_1056:
; rs232cmd.c 4229			else
; rs232cmd.c 4230			{
; rs232cmd.c 4231				if ( !PasswordProtected)
	SYMB	LINE, 4231
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1064
; rs232cmd.c 4232				{
; rs232cmd.c 4233					if (( ParCnt != 1) || ( sscanf( Cmd, "%32s", Company) != 1))
	SYMB	LINE, 4233
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1057
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 44
	MOV.W	R3,#SEG( _1054 )
	MOV.W	R2,#SOF( _1054 )
	PUSH.W	R2, R3
	SYMB	SOFF, 48
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 40
	CMP.W	R0,#01H
	BEQ	_1058
_1057:
; rs232cmd.c 4234						SCPIError = SyntaxErr;
	SYMB	LINE, 4234
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1064
_1058:
; rs232cmd.c 4235					else
; rs232cmd.c 4236					{
; rs232cmd.c 4237						strncpy( Calibration.Company, Company, 32);
	SYMB	LINE, 4237
	MOV.W	R6,#020H
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_strncpy
; rs232cmd.c 4238	
; rs232cmd.c 4239					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4239
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	CALL	_NV_Store
; rs232cmd.c 4240					}
; rs232cmd.c 4241				}
; rs232cmd.c 4242			}
; rs232cmd.c 4243		}
	SYMB	LINE, 4243
_1064:
; rs232cmd.c 4244	}
	SYMB	LINE, 4244
	ADD.W	R7,#022H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4245	
; rs232cmd.c 4246	/**************************************************************************/
; rs232cmd.c 4247	/* FactMainIDNType																			 	     RS232CMD.C	*/
; rs232cmd.c 4248	/*																																				*/
; rs232cmd.c 4249	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4250	/* Revised:	  000616				     																					*/
; rs232cmd.c 4251	/*																																				*/
; rs232cmd.c 4252	/* Function:	--																													*/
; rs232cmd.c 4253	/* Remarks:		--																													*/
; rs232cmd.c 4254	/* Returns:		--																													*/
; rs232cmd.c 4255	/* Updates:		--																													*/
; rs232cmd.c 4256	/**************************************************************************/
; rs232cmd.c 4257	void FactMainIDNType( void)
; rs232cmd.c 4258	{
	ALIGN	1
	SYMB	LINE, 4258
	PUBLIC	_FactMainIDNType
_FactMainIDNType:
	SYMB	TYPE, 616, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainIDNType", _FactMainIDNType, #616, 0, 0, 112
	SYMB	ALAB, _FactMainIDNType, #616
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#022H
	SYMB	SOFF, 40
	SYMB	IDEN, "Type", -40, #476, 130, 5
; rs232cmd.c 4259		char Type[33];
; rs232cmd.c 4260	
; rs232cmd.c 4261		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4261
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1076
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1076
; rs232cmd.c 4262		{
; rs232cmd.c 4263			if ( CmdRequest)
	SYMB	LINE, 4263
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1068
; rs232cmd.c 4264			{
; rs232cmd.c 4265				if ( ParCnt)
	SYMB	LINE, 4265
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1067
; rs232cmd.c 4266					SCPIError = SyntaxErr;
	SYMB	LINE, 4266
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1076
_1067:
; rs232cmd.c 4267				else
; rs232cmd.c 4268				{
; rs232cmd.c 4269					rs232puts( Calibration.Type);
	SYMB	LINE, 4269
	MOV.W	R1,#SEG( _Calibration+33 )
	MOV.W	R0,#SOF( _Calibration+33 )
	CALL	_rs232puts
; rs232cmd.c 4270					rs232putchar( '\n');
	SYMB	LINE, 4270
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4271				}
; rs232cmd.c 4272			}
	SYMB	LINE, 4272
	BR	_1076
_1068:
; rs232cmd.c 4273			else
; rs232cmd.c 4274			{
; rs232cmd.c 4275				if ( !PasswordProtected)
	SYMB	LINE, 4275
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1076
; rs232cmd.c 4276				{
; rs232cmd.c 4277					if (( ParCnt != 1) || ( sscanf( Cmd, "%32s", Type) != 1))
	SYMB	LINE, 4277
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1069
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 44
	MOV.W	R3,#SEG( _1054 )
	MOV.W	R2,#SOF( _1054 )
	PUSH.W	R2, R3
	SYMB	SOFF, 48
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 40
	CMP.W	R0,#01H
	BEQ	_1070
_1069:
; rs232cmd.c 4278						SCPIError = SyntaxErr;
	SYMB	LINE, 4278
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1076
_1070:
; rs232cmd.c 4279					else
; rs232cmd.c 4280					{
; rs232cmd.c 4281						strncpy( Calibration.Type, Type, 32);
	SYMB	LINE, 4281
	MOV.W	R1,#SEG( _Calibration+33 )
	MOV.W	R0,#SOF( _Calibration+33 )
	MOV.W	R6,#020H
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_strncpy
; rs232cmd.c 4282	
; rs232cmd.c 4283					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4283
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4284					}
; rs232cmd.c 4285				}
; rs232cmd.c 4286			}
; rs232cmd.c 4287		}
	SYMB	LINE, 4287
_1076:
; rs232cmd.c 4288	}
	SYMB	LINE, 4288
	ADD.W	R7,#022H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4289	
; rs232cmd.c 4290	/**************************************************************************/
; rs232cmd.c 4291	/* FactMainIDNNumber																	 	     RS232CMD.C	*/
; rs232cmd.c 4292	/*																																				*/
; rs232cmd.c 4293	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4294	/* Revised:	  000614				     																					*/
; rs232cmd.c 4295	/*																																				*/
; rs232cmd.c 4296	/* Function:	--																													*/
; rs232cmd.c 4297	/* Remarks:		--																													*/
; rs232cmd.c 4298	/* Returns:		--																													*/
; rs232cmd.c 4299	/* Updates:		--																													*/
; rs232cmd.c 4300	/**************************************************************************/
; rs232cmd.c 4301	void FactMainIDNKUNumber( void)
; rs232cmd.c 4302	{
	ALIGN	1
	SYMB	LINE, 4302
	PUBLIC	_FactMainIDNKUNumber
_FactMainIDNKUNumber:
	SYMB	TYPE, 617, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainIDNKUNumber", _FactMainIDNKUNumber, #617, 0, 0, 112
	SYMB	ALAB, _FactMainIDNKUNumber, #617
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#0AH
	SYMB	SOFF, 16
	SYMB	TYPE, 618, 'Z', #2, 8
	SYMB	IDEN, "KUNumber", -16, #618, 130, 5
; rs232cmd.c 4303		char KUNumber[9];
; rs232cmd.c 4304	
; rs232cmd.c 4305		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4305
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1089
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1089
; rs232cmd.c 4306		{
; rs232cmd.c 4307			if ( CmdRequest)
	SYMB	LINE, 4307
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1081
; rs232cmd.c 4308			{
; rs232cmd.c 4309				if ( ParCnt)
	SYMB	LINE, 4309
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1080
; rs232cmd.c 4310					SCPIError = SyntaxErr;
	SYMB	LINE, 4310
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1089
_1080:
; rs232cmd.c 4311				else
; rs232cmd.c 4312				{
; rs232cmd.c 4313					rs232puts( Calibration.KUNumber);
	SYMB	LINE, 4313
	MOV.W	R1,#SEG( _Calibration+66 )
	MOV.W	R0,#SOF( _Calibration+66 )
	CALL	_rs232puts
; rs232cmd.c 4314					rs232putchar( '\n');
	SYMB	LINE, 4314
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4315				}
; rs232cmd.c 4316			}
	SYMB	LINE, 4316
	BR	_1089
_1081:
; rs232cmd.c 4317			else
; rs232cmd.c 4318			{
; rs232cmd.c 4319				if ( !PasswordProtected)
	SYMB	LINE, 4319
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1089
; rs232cmd.c 4320				{
; rs232cmd.c 4321					if (( ParCnt != 1) || ( sscanf( Cmd, "%8s", KUNumber) != 1))
	SYMB	LINE, 4321
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1082
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 20
	MOV.W	R3,#SEG( _1079 )
	MOV.W	R2,#SOF( _1079 )
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 16
	CMP.W	R0,#01H
	BEQ	_1083
_1082:
; rs232cmd.c 4322						SCPIError = SyntaxErr;
	SYMB	LINE, 4322
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1089
_1083:
; rs232cmd.c 4323					else
; rs232cmd.c 4324					{
; rs232cmd.c 4325						strncpy( Calibration.KUNumber, KUNumber, 9);
	SYMB	LINE, 4325
	MOV.W	R1,#SEG( _Calibration+66 )
	MOV.W	R0,#SOF( _Calibration+66 )
	MOV.W	R6,#09H
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_strncpy
; rs232cmd.c 4326	
; rs232cmd.c 4327					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4327
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4328					}
; rs232cmd.c 4329				}
; rs232cmd.c 4330			}
; rs232cmd.c 4331		}
	SYMB	LINE, 4331
_1089:
; rs232cmd.c 4332	}
	SYMB	LINE, 4332
	ADD.W	R7,#0AH
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4333	
; rs232cmd.c 4334	/**************************************************************************/
; rs232cmd.c 4335	/* FactMainIDNSWRevision																 	     RS232CMD.C	*/
; rs232cmd.c 4336	/*																																				*/
; rs232cmd.c 4337	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4338	/* Revised:	  000616				     																					*/
; rs232cmd.c 4339	/*																																				*/
; rs232cmd.c 4340	/* Function:	--																													*/
; rs232cmd.c 4341	/* Remarks:		--																													*/
; rs232cmd.c 4342	/* Returns:		--																													*/
; rs232cmd.c 4343	/* Updates:		--																													*/
; rs232cmd.c 4344	/**************************************************************************/
; rs232cmd.c 4345	void FactMainIDNSWRevision( void)
; rs232cmd.c 4346	{
	ALIGN	1
	SYMB	LINE, 4346
	PUBLIC	_FactMainIDNSWRevision
_FactMainIDNSWRevision:
	SYMB	TYPE, 620, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainIDNSWRevision", _FactMainIDNSWRevision, #620, 0, 0, 112
	SYMB	ALAB, _FactMainIDNSWRevision, #620
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#0AH
	SYMB	SOFF, 16
	SYMB	IDEN, "SWRevision", -16, #618, 130, 5
; rs232cmd.c 4347		char SWRevision[9];
; rs232cmd.c 4348	
; rs232cmd.c 4349		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4349
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1101
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1101
; rs232cmd.c 4350		{
; rs232cmd.c 4351			if ( CmdRequest)
	SYMB	LINE, 4351
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1093
; rs232cmd.c 4352			{
; rs232cmd.c 4353				if ( ParCnt)
	SYMB	LINE, 4353
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1092
; rs232cmd.c 4354					SCPIError = SyntaxErr;
	SYMB	LINE, 4354
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1101
_1092:
; rs232cmd.c 4355				else
; rs232cmd.c 4356				{
; rs232cmd.c 4357					rs232puts( Calibration.SWRevision);
	SYMB	LINE, 4357
	MOV.W	R1,#SEG( _Calibration+75 )
	MOV.W	R0,#SOF( _Calibration+75 )
	CALL	_rs232puts
; rs232cmd.c 4358					rs232putchar( '\n');
	SYMB	LINE, 4358
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4359				}
; rs232cmd.c 4360			}
	SYMB	LINE, 4360
	BR	_1101
_1093:
; rs232cmd.c 4361			else
; rs232cmd.c 4362			{
; rs232cmd.c 4363				if ( !PasswordProtected)
	SYMB	LINE, 4363
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1101
; rs232cmd.c 4364				{
; rs232cmd.c 4365					if (( ParCnt != 1) || ( sscanf( Cmd, "%8s", SWRevision) != 1))
	SYMB	LINE, 4365
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1094
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 20
	MOV.W	R3,#SEG( _1079 )
	MOV.W	R2,#SOF( _1079 )
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 16
	CMP.W	R0,#01H
	BEQ	_1095
_1094:
; rs232cmd.c 4366						SCPIError = SyntaxErr;
	SYMB	LINE, 4366
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1101
_1095:
; rs232cmd.c 4367					else
; rs232cmd.c 4368					{
; rs232cmd.c 4369						strncpy( Calibration.SWRevision, SWRevision, 8);
	SYMB	LINE, 4369
	MOV.W	R1,#SEG( _Calibration+75 )
	MOV.W	R0,#SOF( _Calibration+75 )
	MOV.W	R6,#08H
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_strncpy
; rs232cmd.c 4370	
; rs232cmd.c 4371					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4371
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4372					}
; rs232cmd.c 4373				}
; rs232cmd.c 4374			}
; rs232cmd.c 4375		}
	SYMB	LINE, 4375
_1101:
; rs232cmd.c 4376	}
	SYMB	LINE, 4376
	ADD.W	R7,#0AH
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4377	
; rs232cmd.c 4378	/**************************************************************************/
; rs232cmd.c 4379	/* FactMainSystem	 																			 	     RS232CMD.C	*/
; rs232cmd.c 4380	/*																																				*/
; rs232cmd.c 4381	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 4382	/* Revised:	  000617				     																					*/
; rs232cmd.c 4383	/*																																				*/
; rs232cmd.c 4384	/* Function:	--																													*/
; rs232cmd.c 4385	/* Remarks:		--																													*/
; rs232cmd.c 4386	/* Returns:		--																													*/
; rs232cmd.c 4387	/* Updates:		--																													*/
; rs232cmd.c 4388	/**************************************************************************/
; rs232cmd.c 4389	void FactMainSystem( void)
; rs232cmd.c 4390	{
	ALIGN	1
	SYMB	LINE, 4390
	PUBLIC	_FactMainSystem
_FactMainSystem:
	SYMB	TYPE, 621, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainSystem", _FactMainSystem, #621, 0, 0, 48
	SYMB	ALAB, _FactMainSystem, #621
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 4391		int system;
; rs232cmd.c 4392		char code *str;
; rs232cmd.c 4393	
; rs232cmd.c 4394		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4394
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1117
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1117
; rs232cmd.c 4395		{
; rs232cmd.c 4396			if ( CmdRequest)
	SYMB	LINE, 4396
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1107
; rs232cmd.c 4397			{
; rs232cmd.c 4398				if ( ParCnt)
	SYMB	LINE, 4398
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1104
; rs232cmd.c 4399					SCPIError = ParNotAllowed;
	SYMB	LINE, 4399
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_1117
_1104:
; rs232cmd.c 4400				else
; rs232cmd.c 4401				{
; rs232cmd.c 4402					str = SystemPar[Calibration.ResetSystem].LongName;
	SYMB	LINE, 4402
	MOV.B	ES,#SEG( _Calibration+97 )
	MOV.W	R0,#SOF( _Calibration+97 )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_1118
	ADDS.B	CS,#01H
_1118:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 4403	
; rs232cmd.c 4404					while ( *str)
	SYMB	LINE, 4404
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_1106
_1105:
; rs232cmd.c 4405						rs232putchar( *str++);
	SYMB	LINE, 4405
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 4404
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_1105
	SYMB	LINE, 4405
_1106:
; rs232cmd.c 4406	
; rs232cmd.c 4407					rs232putchar('\n');
	SYMB	LINE, 4407
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4408				}
; rs232cmd.c 4409			}
	SYMB	LINE, 4409
	BR	_1117
_1107:
; rs232cmd.c 4410			else
; rs232cmd.c 4411			{
; rs232cmd.c 4412				if ( ParCnt != 1)
	SYMB	LINE, 4412
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_1108
; rs232cmd.c 4413					SCPIError = SyntaxErr;
	SYMB	LINE, 4413
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1117
_1108:
; rs232cmd.c 4414				else
; rs232cmd.c 4415				{
; rs232cmd.c 4416					system = FindParameter( Cmd, SystemPar);
	SYMB	LINE, 4416
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _SystemPar )
	MOV.W	R2,#SOF( _SystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 4417	
; rs232cmd.c 4418					if ( system == PAL_PALID)						// If line7, (PAL w/ID), ever should
	SYMB	LINE, 4418
	CMP.W	R0,#01H
	BNE	_1109
; rs232cmd.c 4419						SCPIError = DataOutOfRange;				//  be supported remove this exception
	SYMB	LINE, 4419
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_1117
_1109:
	SYMB	LTIM, "system", 2, 0, 77
; rs232cmd.c 4420					else						
; rs232cmd.c 4421					{	
; rs232cmd.c 4422						if ( system > -1)
	SYMB	LINE, 4422
	CMP.W	R0,#0FFFFH
	BLE	_1110
; rs232cmd.c 4423						{
; rs232cmd.c 4424							Calibration.ResetSystem = system;
	SYMB	LINE, 4424
	MOV.B	ES,#SEG( _Calibration+97 )
	MOV.W	R1,#SOF( _Calibration+97 )
	MOV.B	[R1],R0L
; rs232cmd.c 4425	
; rs232cmd.c 4426						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4426
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4427						}
	SYMB	LINE, 4427
	BR	_1117
_1110:
; rs232cmd.c 4428						else
; rs232cmd.c 4429							SCPIError = DataOutOfRange;
	SYMB	LINE, 4429
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 4430					}
; rs232cmd.c 4431				}
; rs232cmd.c 4432			}
; rs232cmd.c 4433		}
	SYMB	LINE, 4433
_1117:
; rs232cmd.c 4434	}
	SYMB	LINE, 4434
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 4435	
; rs232cmd.c 4436	/**************************************************************************/
; rs232cmd.c 4437	/* FactMainFMSDateProd																	 	     RS232CMD.C	*/
; rs232cmd.c 4438	/*																																				*/
; rs232cmd.c 4439	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4440	/* Revised:	  0006014				     																					*/
; rs232cmd.c 4441	/*																																				*/
; rs232cmd.c 4442	/* Function:	--																													*/
; rs232cmd.c 4443	/* Remarks:		--																													*/
; rs232cmd.c 4444	/* Returns:		--																													*/
; rs232cmd.c 4445	/* Updates:		--																													*/
; rs232cmd.c 4446	/**************************************************************************/
; rs232cmd.c 4447	void FactMainFMSDateProd( void)
; rs232cmd.c 4448	{
	ALIGN	1
	SYMB	LINE, 4448
	PUBLIC	_FactMainFMSDateProd
_FactMainFMSDateProd:
	SYMB	TYPE, 622, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainFMSDateProd", _FactMainFMSDateProd, #622, 0, 0, 48
	SYMB	ALAB, _FactMainFMSDateProd, #622
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4449		UI year, month, day;
; rs232cmd.c 4450		char buffer[20];
; rs232cmd.c 4451	
; rs232cmd.c 4452		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4452
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1134
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1134
; rs232cmd.c 4453		{
; rs232cmd.c 4454			if ( CmdRequest)
	SYMB	LINE, 4454
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1124
; rs232cmd.c 4455			{
; rs232cmd.c 4456				if ( ParCnt)
	SYMB	LINE, 4456
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1123
; rs232cmd.c 4457					SCPIError = SyntaxErr;
	SYMB	LINE, 4457
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1134
_1123:
; rs232cmd.c 4458				else
; rs232cmd.c 4459				{
; rs232cmd.c 4460					day = Calibration.ProdDate % 100;
	SYMB	LINE, 4460
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R1,#SOF( _Calibration+98 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R4,#SOF( _Calibration+98 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R1,#SOF( _Calibration+98 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4461					month = ( Calibration.ProdDate / 100) % 100;
	SYMB	LINE, 4461
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4462					year = ( Calibration.ProdDate / 10000);
	SYMB	LINE, 4462
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R1,#SOF( _Calibration+98 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4463	
; rs232cmd.c 4464					sprintf( buffer, "%d,%d,%d\n", year, month, day);
	SYMB	LINE, 4464
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _183 )
	MOV.W	R0,#SOF( _183 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4465	
; rs232cmd.c 4466					rs232puts( buffer);
	SYMB	LINE, 4466
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4467				}
; rs232cmd.c 4468			}
	SYMB	LINE, 4468
	BR	_1134
_1124:
; rs232cmd.c 4469			else
; rs232cmd.c 4470			{
; rs232cmd.c 4471				if ( !PasswordProtected)
	SYMB	LINE, 4471
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1134
; rs232cmd.c 4472				{
; rs232cmd.c 4473					if (( ParCnt != 3) || (( sscanf( Cmd, "%d,%d,%d", &year, &month, &day)) != 3))
	SYMB	LINE, 4473
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1125
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1122 )
	MOV.W	R2,#SOF( _1122 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1126
_1125:
; rs232cmd.c 4474						SCPIError = SyntaxErr;
	SYMB	LINE, 4474
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1134
_1126:
; rs232cmd.c 4475					else
; rs232cmd.c 4476					{
; rs232cmd.c 4477						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4477
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1127
; rs232cmd.c 4478							SCPIError = ExecErr;
	SYMB	LINE, 4478
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1134
_1127:
; rs232cmd.c 4479						else
; rs232cmd.c 4480						{
; rs232cmd.c 4481							Calibration.ProdDate = day + 100*month + 10000*year;
	SYMB	LINE, 4481
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R2,#SOF( _Calibration+98 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4482						
; rs232cmd.c 4483						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4483
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4484						}
; rs232cmd.c 4485					}				
; rs232cmd.c 4486				}
; rs232cmd.c 4487			}
; rs232cmd.c 4488		}
	SYMB	LINE, 4488
_1134:
; rs232cmd.c 4489	}
	SYMB	LINE, 4489
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4490	
; rs232cmd.c 4491	/**************************************************************************/
; rs232cmd.c 4492	/* FactMainFMSDateUpd																		 	     RS232CMD.C	*/
; rs232cmd.c 4493	/*																																				*/
; rs232cmd.c 4494	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4495	/* Revised:	  000614				     																					*/
; rs232cmd.c 4496	/*																																				*/
; rs232cmd.c 4497	/* Function:	--																													*/
; rs232cmd.c 4498	/* Remarks:		--																													*/
; rs232cmd.c 4499	/* Returns:		--																													*/
; rs232cmd.c 4500	/* Updates:		--																													*/
; rs232cmd.c 4501	/**************************************************************************/
; rs232cmd.c 4502	void FactMainFMSDateUpd( void)
; rs232cmd.c 4503	{
	ALIGN	1
	SYMB	LINE, 4503
	PUBLIC	_FactMainFMSDateUpd
_FactMainFMSDateUpd:
	SYMB	TYPE, 623, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainFMSDateUpd", _FactMainFMSDateUpd, #623, 0, 0, 48
	SYMB	ALAB, _FactMainFMSDateUpd, #623
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4504		UI year, month, day;
; rs232cmd.c 4505		char buffer[20];
; rs232cmd.c 4506	
; rs232cmd.c 4507		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4507
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1148
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1148
; rs232cmd.c 4508		{
; rs232cmd.c 4509			if ( CmdRequest)
	SYMB	LINE, 4509
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1138
; rs232cmd.c 4510			{
; rs232cmd.c 4511				if ( ParCnt)
	SYMB	LINE, 4511
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1137
; rs232cmd.c 4512					SCPIError = SyntaxErr;
	SYMB	LINE, 4512
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1148
_1137:
; rs232cmd.c 4513				else
; rs232cmd.c 4514				{
; rs232cmd.c 4515					day = Calibration.UpdateDate % 100;
	SYMB	LINE, 4515
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R1,#SOF( _Calibration+102 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R4,#SOF( _Calibration+102 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R1,#SOF( _Calibration+102 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4516					month = ( Calibration.UpdateDate / 100) % 100;
	SYMB	LINE, 4516
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4517					year = ( Calibration.UpdateDate / 10000);
	SYMB	LINE, 4517
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R1,#SOF( _Calibration+102 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4518	
; rs232cmd.c 4519					sprintf( buffer, "%d,%d,%d\n", year, month, day);
	SYMB	LINE, 4519
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _183 )
	MOV.W	R0,#SOF( _183 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4520	
; rs232cmd.c 4521					rs232puts( buffer);
	SYMB	LINE, 4521
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4522				}
; rs232cmd.c 4523			}
	SYMB	LINE, 4523
	BR	_1148
_1138:
; rs232cmd.c 4524			else
; rs232cmd.c 4525			{
; rs232cmd.c 4526				if ( !PasswordProtected)
	SYMB	LINE, 4526
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1148
; rs232cmd.c 4527				{
; rs232cmd.c 4528					if (( ParCnt != 3) || (( sscanf( Cmd, "%d,%d,%d", &year, &month, &day)) != 3))
	SYMB	LINE, 4528
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1139
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1122 )
	MOV.W	R2,#SOF( _1122 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1140
_1139:
; rs232cmd.c 4529						SCPIError = SyntaxErr;
	SYMB	LINE, 4529
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1148
_1140:
; rs232cmd.c 4530					else
; rs232cmd.c 4531					{
; rs232cmd.c 4532						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4532
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1141
; rs232cmd.c 4533							SCPIError = ExecErr;
	SYMB	LINE, 4533
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1148
_1141:
; rs232cmd.c 4534						else
; rs232cmd.c 4535						{
; rs232cmd.c 4536							Calibration.UpdateDate = day + 100*month + 10000*year;
	SYMB	LINE, 4536
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R2,#SOF( _Calibration+102 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4537						
; rs232cmd.c 4538						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4538
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4539						}
; rs232cmd.c 4540					}				
; rs232cmd.c 4541				}
; rs232cmd.c 4542			}
; rs232cmd.c 4543		}
	SYMB	LINE, 4543
_1148:
; rs232cmd.c 4544	}
	SYMB	LINE, 4544
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4545	
; rs232cmd.c 4546	/**************************************************************************/
; rs232cmd.c 4547	/* FactGenlockGenDate		 																 	     RS232CMD.C	*/
; rs232cmd.c 4548	/*																																				*/
; rs232cmd.c 4549	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 4550	/* Revised:	  000614				     																					*/
; rs232cmd.c 4551	/*																																				*/
; rs232cmd.c 4552	/* Function:	--																													*/
; rs232cmd.c 4553	/* Remarks:		--																													*/
; rs232cmd.c 4554	/* Returns:		--																													*/
; rs232cmd.c 4555	/* Updates:		--																													*/
; rs232cmd.c 4556	/**************************************************************************/
; rs232cmd.c 4557	void FactGenlockGenDate( void)
; rs232cmd.c 4558	{
	ALIGN	1
	SYMB	LINE, 4558
	PUBLIC	_FactGenlockGenDate
_FactGenlockGenDate:
	SYMB	TYPE, 624, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenDate", _FactGenlockGenDate, #624, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenDate, #624
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4559		UI year, month, day;
; rs232cmd.c 4560		char buffer[20];
; rs232cmd.c 4561	
; rs232cmd.c 4562		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4562
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1162
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1162
; rs232cmd.c 4563		{
; rs232cmd.c 4564			if ( CmdRequest)
	SYMB	LINE, 4564
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1152
; rs232cmd.c 4565			{
; rs232cmd.c 4566				if ( ParCnt)
	SYMB	LINE, 4566
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1151
; rs232cmd.c 4567					SCPIError = SyntaxErr;
	SYMB	LINE, 4567
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1162
_1151:
; rs232cmd.c 4568				else
; rs232cmd.c 4569				{
; rs232cmd.c 4570					day = Calibration.GenlockCalibration.Date % 100;
	SYMB	LINE, 4570
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R1,#SOF( _Calibration+106 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R4,#SOF( _Calibration+106 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R1,#SOF( _Calibration+106 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4571					month = ( Calibration.GenlockCalibration.Date / 100) % 100;
	SYMB	LINE, 4571
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4572					year = ( Calibration.GenlockCalibration.Date / 10000);
	SYMB	LINE, 4572
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R1,#SOF( _Calibration+106 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4573	
; rs232cmd.c 4574					sprintf( buffer, "%d,%d,%d\n", year, month, day);
	SYMB	LINE, 4574
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _183 )
	MOV.W	R0,#SOF( _183 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4575	
; rs232cmd.c 4576					rs232puts( buffer);
	SYMB	LINE, 4576
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4577				}
; rs232cmd.c 4578			}
	SYMB	LINE, 4578
	BR	_1162
_1152:
; rs232cmd.c 4579			else
; rs232cmd.c 4580			{
; rs232cmd.c 4581				if ( !PasswordProtected)
	SYMB	LINE, 4581
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1162
; rs232cmd.c 4582				{
; rs232cmd.c 4583					if (( ParCnt != 3) || (( sscanf( Cmd, "%d,%d,%d", &year, &month, &day)) != 3))
	SYMB	LINE, 4583
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1153
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1122 )
	MOV.W	R2,#SOF( _1122 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1154
_1153:
; rs232cmd.c 4584						SCPIError = SyntaxErr;
	SYMB	LINE, 4584
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1162
_1154:
; rs232cmd.c 4585					else
; rs232cmd.c 4586					{
; rs232cmd.c 4587						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4587
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1155
; rs232cmd.c 4588							SCPIError = ExecErr;
	SYMB	LINE, 4588
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1162
_1155:
; rs232cmd.c 4589						else
; rs232cmd.c 4590						{
; rs232cmd.c 4591							Calibration.GenlockCalibration.Date = day + 100*month + 10000*year;
	SYMB	LINE, 4591
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R2,#SOF( _Calibration+106 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4592						
; rs232cmd.c 4593						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4593
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4594						}
; rs232cmd.c 4595					}				
; rs232cmd.c 4596				}
; rs232cmd.c 4597			}
; rs232cmd.c 4598		}
	SYMB	LINE, 4598
_1162:
; rs232cmd.c 4599	}
	SYMB	LINE, 4599
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4600	
; rs232cmd.c 4601	/**************************************************************************/
; rs232cmd.c 4602	/* FactGenlockGenVersion 																 	     RS232CMD.C	*/
; rs232cmd.c 4603	/*																																				*/
; rs232cmd.c 4604	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4605	/* Revised:	  000614				     																					*/
; rs232cmd.c 4606	/*																																				*/
; rs232cmd.c 4607	/* Function:	--																													*/
; rs232cmd.c 4608	/* Remarks:		--																													*/
; rs232cmd.c 4609	/* Returns:		--																													*/
; rs232cmd.c 4610	/* Updates:		--																													*/
; rs232cmd.c 4611	/**************************************************************************/
; rs232cmd.c 4612	void FactGenlockGenVersion( void)
; rs232cmd.c 4613	{
	ALIGN	1
	SYMB	LINE, 4613
	PUBLIC	_FactGenlockGenVersion
_FactGenlockGenVersion:
	SYMB	TYPE, 625, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenVersion", _FactGenlockGenVersion, #625, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenVersion, #625
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#0AH
	SYMB	SOFF, 14
	SYMB	TYPE, 626, 'Z', #2, 9
	SYMB	IDEN, "result", -14, #626, 130, 5
; rs232cmd.c 4614		char result[10];
; rs232cmd.c 4615	
; rs232cmd.c 4616		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4616
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1172
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1172
; rs232cmd.c 4617		{
; rs232cmd.c 4618			if ( CmdRequest)
	SYMB	LINE, 4618
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1167
; rs232cmd.c 4619			{
; rs232cmd.c 4620				if ( ParCnt)
	SYMB	LINE, 4620
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1165
; rs232cmd.c 4621					SCPIError = SyntaxErr;
	SYMB	LINE, 4621
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1172
_1165:
; rs232cmd.c 4622				else
; rs232cmd.c 4623				{
; rs232cmd.c 4624					if ( GenlockVersion( result) == OK)
	SYMB	LINE, 4624
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_GenlockVersion
	CMP.W	R0,#0FFFFH
	BNE	_1166
; rs232cmd.c 4625					{
; rs232cmd.c 4626						rs232puts( result);
	SYMB	LINE, 4626
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4627						rs232putchar( '\n');
	SYMB	LINE, 4627
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4628					}
	SYMB	LINE, 4628
	BR	_1172
_1166:
; rs232cmd.c 4629					else
; rs232cmd.c 4630						SCPIError = ExecErr;			
	SYMB	LINE, 4630
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 4631				}
; rs232cmd.c 4632			}
	SYMB	LINE, 4632
	BR	_1172
_1167:
; rs232cmd.c 4633			else
; rs232cmd.c 4634				SCPIError = SyntaxErr;
	SYMB	LINE, 4634
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4635		}
	SYMB	LINE, 4635
_1172:
; rs232cmd.c 4636	}
	SYMB	LINE, 4636
	ADD.W	R7,#0AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4637	
; rs232cmd.c 4638	/**************************************************************************/
; rs232cmd.c 4639	/* FactGenlockGenFRefDate																 	     RS232CMD.C	*/
; rs232cmd.c 4640	/*																																				*/
; rs232cmd.c 4641	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4642	/* Revised:	  000622				     																					*/
; rs232cmd.c 4643	/*																																				*/
; rs232cmd.c 4644	/* Function:	--																													*/
; rs232cmd.c 4645	/* Remarks:		--																													*/
; rs232cmd.c 4646	/* Returns:		--																													*/
; rs232cmd.c 4647	/* Updates:		--																													*/
; rs232cmd.c 4648	/**************************************************************************/
; rs232cmd.c 4649	void FactGenlockGenFRefDate( void)
; rs232cmd.c 4650	{
	ALIGN	1
	SYMB	LINE, 4650
	PUBLIC	_FactGenlockGenFRefDate
_FactGenlockGenFRefDate:
	SYMB	TYPE, 628, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenFRefDate", _FactGenlockGenFRefDate, #628, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenFRefDate, #628
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4651		UI year, month, day;
; rs232cmd.c 4652		char buffer[20];
; rs232cmd.c 4653	
; rs232cmd.c 4654		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4654
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1187
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1187
; rs232cmd.c 4655		{
; rs232cmd.c 4656			if ( CmdRequest)
	SYMB	LINE, 4656
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1177
; rs232cmd.c 4657			{
; rs232cmd.c 4658				if ( ParCnt)
	SYMB	LINE, 4658
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1176
; rs232cmd.c 4659					SCPIError = SyntaxErr;
	SYMB	LINE, 4659
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1187
_1176:
; rs232cmd.c 4660				else
; rs232cmd.c 4661				{
; rs232cmd.c 4662					day = Calibration.GenlockCalibration.DACFactDate % 100;
	SYMB	LINE, 4662
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R1,#SOF( _Calibration+110 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R4,#SOF( _Calibration+110 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R1,#SOF( _Calibration+110 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4663					month = ( Calibration.GenlockCalibration.DACFactDate / 100) % 100;
	SYMB	LINE, 4663
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4664					year = ( Calibration.GenlockCalibration.DACFactDate / 10000);
	SYMB	LINE, 4664
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R1,#SOF( _Calibration+110 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4665	
; rs232cmd.c 4666					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 4666
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1174 )
	MOV.W	R0,#SOF( _1174 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4667	
; rs232cmd.c 4668					rs232puts( buffer);
	SYMB	LINE, 4668
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4669				}
; rs232cmd.c 4670			}
	SYMB	LINE, 4670
	BR	_1187
_1177:
; rs232cmd.c 4671			else
; rs232cmd.c 4672			{
; rs232cmd.c 4673				if ( !PasswordProtected)
	SYMB	LINE, 4673
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1187
; rs232cmd.c 4674				{
; rs232cmd.c 4675					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 4675
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1178
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1175 )
	MOV.W	R2,#SOF( _1175 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1179
_1178:
; rs232cmd.c 4676						SCPIError = SyntaxErr;
	SYMB	LINE, 4676
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1187
_1179:
; rs232cmd.c 4677					else
; rs232cmd.c 4678					{
; rs232cmd.c 4679						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4679
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1180
; rs232cmd.c 4680							SCPIError = ExecErr;
	SYMB	LINE, 4680
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1187
_1180:
; rs232cmd.c 4681						else
; rs232cmd.c 4682						{
; rs232cmd.c 4683							Calibration.GenlockCalibration.DACFactDate = day + 100*month + 10000*year;
	SYMB	LINE, 4683
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R2,#SOF( _Calibration+110 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4684						
; rs232cmd.c 4685						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4685
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4686						}
; rs232cmd.c 4687					}				
; rs232cmd.c 4688				}
; rs232cmd.c 4689			}
; rs232cmd.c 4690		}
	SYMB	LINE, 4690
_1187:
; rs232cmd.c 4691	}
	SYMB	LINE, 4691
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4692	
; rs232cmd.c 4693	/**************************************************************************/
; rs232cmd.c 4694	/* FactGenlockGenFRefDAC 																 	     RS232CMD.C	*/
; rs232cmd.c 4695	/*																																				*/
; rs232cmd.c 4696	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4697	/* Revised:	  000622				     																					*/
; rs232cmd.c 4698	/*																																				*/
; rs232cmd.c 4699	/* Function:	--																													*/
; rs232cmd.c 4700	/* Remarks:		--																													*/
; rs232cmd.c 4701	/* Returns:		--																													*/
; rs232cmd.c 4702	/* Updates:		--																													*/
; rs232cmd.c 4703	/**************************************************************************/
; rs232cmd.c 4704	void FactGenlockGenFRefDAC( void)
; rs232cmd.c 4705	{
	ALIGN	1
	SYMB	LINE, 4705
	PUBLIC	_FactGenlockGenFRefDAC
_FactGenlockGenFRefDAC:
	SYMB	TYPE, 629, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenFRefDAC", _FactGenlockGenFRefDAC, #629, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenFRefDAC, #629
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#016H
	SYMB	SOFF, 26
	SYMB	IDEN, "buffer", -26, #563, 130, 5
	SYMB	IDEN, "DACValue", -6, #18, 130, 5
; rs232cmd.c 4706		char buffer[20];
; rs232cmd.c 4707		UI DACValue;
; rs232cmd.c 4708	
; rs232cmd.c 4709		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4709
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1200
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1200
; rs232cmd.c 4710		{
; rs232cmd.c 4711			if ( CmdRequest)
	SYMB	LINE, 4711
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1192
; rs232cmd.c 4712			{
; rs232cmd.c 4713				if ( ParCnt)
	SYMB	LINE, 4713
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1191
; rs232cmd.c 4714					SCPIError = SyntaxErr;
	SYMB	LINE, 4714
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1200
_1191:
; rs232cmd.c 4715				else
; rs232cmd.c 4716				{
; rs232cmd.c 4717					sprintf( buffer, "%u\n", Calibration.GenlockCalibration.DACFactValue);
	SYMB	LINE, 4717
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+118 )
	MOV.W	R0,#SOF( _Calibration+118 )
	MOV.W	R0,[R0]
	PUSH.W	R0
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 32
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 26
; rs232cmd.c 4718	
; rs232cmd.c 4719					rs232puts( buffer);
	SYMB	LINE, 4719
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4720				}
; rs232cmd.c 4721			}
	SYMB	LINE, 4721
	BR	_1200
_1192:
; rs232cmd.c 4722			else
; rs232cmd.c 4723			{
; rs232cmd.c 4724				if ( !PasswordProtected)
	SYMB	LINE, 4724
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1200
; rs232cmd.c 4725				{
; rs232cmd.c 4726					if (( ParCnt != 1) || (( sscanf( Cmd, "%u", &DACValue)) != 1))
	SYMB	LINE, 4726
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1193
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	PUSH.W	R2, R3
	SYMB	SOFF, 30
	MOV.W	R3,#SEG( _1190 )
	MOV.W	R2,#SOF( _1190 )
	PUSH.W	R2, R3
	SYMB	SOFF, 34
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 26
	CMP.W	R0,#01H
	BEQ	_1194
_1193:
; rs232cmd.c 4727						SCPIError = SyntaxErr;
	SYMB	LINE, 4727
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1200
_1194:
; rs232cmd.c 4728					else
; rs232cmd.c 4729					{
; rs232cmd.c 4730						Calibration.GenlockCalibration.DACFactValue = DACValue;
	SYMB	LINE, 4730
	MOV.W	R0,[R7+20]
	MOV.B	ES,#SEG( _Calibration+118 )
	MOV.W	R1,#SOF( _Calibration+118 )
	MOV.W	[R1],R0
; rs232cmd.c 4731								
; rs232cmd.c 4732						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4732
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4733					}
; rs232cmd.c 4734				}
; rs232cmd.c 4735			}
; rs232cmd.c 4736		}
	SYMB	LINE, 4736
_1200:
; rs232cmd.c 4737	}
	SYMB	LINE, 4737
	ADD.W	R7,#016H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4738	
; rs232cmd.c 4739	/**************************************************************************/
; rs232cmd.c 4740	/* FactGenlockGenURefDate																 	     RS232CMD.C	*/
; rs232cmd.c 4741	/*																																				*/
; rs232cmd.c 4742	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4743	/* Revised:	  000622				     																					*/
; rs232cmd.c 4744	/*																																				*/
; rs232cmd.c 4745	/* Function:	--																													*/
; rs232cmd.c 4746	/* Remarks:		--																													*/
; rs232cmd.c 4747	/* Returns:		--																													*/
; rs232cmd.c 4748	/* Updates:		--																													*/
; rs232cmd.c 4749	/**************************************************************************/
; rs232cmd.c 4750	void FactGenlockGenURefDate( void)
; rs232cmd.c 4751	{
	ALIGN	1
	SYMB	LINE, 4751
	PUBLIC	_FactGenlockGenURefDate
_FactGenlockGenURefDate:
	SYMB	TYPE, 630, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenURefDate", _FactGenlockGenURefDate, #630, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenURefDate, #630
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4752		UI year, month, day;
; rs232cmd.c 4753		char buffer[20];
; rs232cmd.c 4754	
; rs232cmd.c 4755		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4755
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1213
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1213
; rs232cmd.c 4756		{
; rs232cmd.c 4757			if ( CmdRequest)
	SYMB	LINE, 4757
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1204
; rs232cmd.c 4758			{
; rs232cmd.c 4759				if ( ParCnt)
	SYMB	LINE, 4759
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1203
; rs232cmd.c 4760					SCPIError = SyntaxErr;
	SYMB	LINE, 4760
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1213
_1203:
; rs232cmd.c 4761				else
; rs232cmd.c 4762				{
; rs232cmd.c 4763					day = Calibration.GenlockCalibration.DACUserDate % 100;
	SYMB	LINE, 4763
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R1,#SOF( _Calibration+114 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R4,#SOF( _Calibration+114 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R1,#SOF( _Calibration+114 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4764					month = ( Calibration.GenlockCalibration.DACUserDate / 100) % 100;
	SYMB	LINE, 4764
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4765					year = ( Calibration.GenlockCalibration.DACUserDate / 10000);
	SYMB	LINE, 4765
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R1,#SOF( _Calibration+114 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4766	
; rs232cmd.c 4767					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 4767
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1174 )
	MOV.W	R0,#SOF( _1174 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4768	
; rs232cmd.c 4769					rs232puts( buffer);
	SYMB	LINE, 4769
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4770				}
; rs232cmd.c 4771			}
	SYMB	LINE, 4771
	BR	_1213
_1204:
; rs232cmd.c 4772			else
; rs232cmd.c 4773			{
; rs232cmd.c 4774				if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 4774
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1205
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1175 )
	MOV.W	R2,#SOF( _1175 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1206
_1205:
; rs232cmd.c 4775					SCPIError = SyntaxErr;
	SYMB	LINE, 4775
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1213
_1206:
; rs232cmd.c 4776				else
; rs232cmd.c 4777				{
; rs232cmd.c 4778					if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4778
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1207
; rs232cmd.c 4779						SCPIError = ExecErr;
	SYMB	LINE, 4779
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1213
_1207:
; rs232cmd.c 4780					else
; rs232cmd.c 4781					{
; rs232cmd.c 4782						Calibration.GenlockCalibration.DACUserDate = day + 100*month + 10000*year;
	SYMB	LINE, 4782
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R2,#SOF( _Calibration+114 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4783						
; rs232cmd.c 4784					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4784
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4785					}				
; rs232cmd.c 4786				}
; rs232cmd.c 4787			}
; rs232cmd.c 4788		}
	SYMB	LINE, 4788
_1213:
; rs232cmd.c 4789	}
	SYMB	LINE, 4789
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4790	
; rs232cmd.c 4791	/**************************************************************************/
; rs232cmd.c 4792	/* FactGenlockGenURefDAC																 	     RS232CMD.C	*/
; rs232cmd.c 4793	/*																																				*/
; rs232cmd.c 4794	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4795	/* Revised:	  000622				     																					*/
; rs232cmd.c 4796	/*																																				*/
; rs232cmd.c 4797	/* Function:	--																													*/
; rs232cmd.c 4798	/* Remarks:		--																													*/
; rs232cmd.c 4799	/* Returns:		--																													*/
; rs232cmd.c 4800	/* Updates:		--																													*/
; rs232cmd.c 4801	/**************************************************************************/
; rs232cmd.c 4802	void FactGenlockGenURefDAC( void)
; rs232cmd.c 4803	{
	ALIGN	1
	SYMB	LINE, 4803
	PUBLIC	_FactGenlockGenURefDAC
_FactGenlockGenURefDAC:
	SYMB	TYPE, 631, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenURefDAC", _FactGenlockGenURefDAC, #631, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenURefDAC, #631
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#016H
	SYMB	SOFF, 26
	SYMB	IDEN, "buffer", -26, #563, 130, 5
	SYMB	IDEN, "DACValue", -6, #18, 130, 5
; rs232cmd.c 4804		char buffer[20];
; rs232cmd.c 4805		UI DACValue;
; rs232cmd.c 4806	
; rs232cmd.c 4807		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4807
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1224
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1224
; rs232cmd.c 4808		{
; rs232cmd.c 4809			if ( CmdRequest)
	SYMB	LINE, 4809
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1217
; rs232cmd.c 4810			{
; rs232cmd.c 4811				if ( ParCnt)
	SYMB	LINE, 4811
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1216
; rs232cmd.c 4812					SCPIError = SyntaxErr;
	SYMB	LINE, 4812
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1224
_1216:
; rs232cmd.c 4813				else
; rs232cmd.c 4814				{
; rs232cmd.c 4815					sprintf( buffer, "%u\n", Calibration.GenlockCalibration.DACUserValue);
	SYMB	LINE, 4815
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+120 )
	MOV.W	R0,#SOF( _Calibration+120 )
	MOV.W	R0,[R0]
	PUSH.W	R0
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 32
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 26
; rs232cmd.c 4816	
; rs232cmd.c 4817					rs232puts( buffer);
	SYMB	LINE, 4817
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4818				}
; rs232cmd.c 4819			}
	SYMB	LINE, 4819
	BR	_1224
_1217:
; rs232cmd.c 4820			else
; rs232cmd.c 4821			{
; rs232cmd.c 4822				if (( ParCnt != 1) || (( sscanf( Cmd, "%u", &DACValue)) != 1))
	SYMB	LINE, 4822
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1218
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	PUSH.W	R2, R3
	SYMB	SOFF, 30
	MOV.W	R3,#SEG( _1190 )
	MOV.W	R2,#SOF( _1190 )
	PUSH.W	R2, R3
	SYMB	SOFF, 34
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 26
	CMP.W	R0,#01H
	BEQ	_1219
_1218:
; rs232cmd.c 4823					SCPIError = SyntaxErr;
	SYMB	LINE, 4823
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1224
_1219:
; rs232cmd.c 4824				else
; rs232cmd.c 4825				{
; rs232cmd.c 4826					Calibration.GenlockCalibration.DACUserValue = DACValue;
	SYMB	LINE, 4826
	MOV.W	R0,[R7+20]
	MOV.B	ES,#SEG( _Calibration+120 )
	MOV.W	R1,#SOF( _Calibration+120 )
	MOV.W	[R1],R0
; rs232cmd.c 4827								
; rs232cmd.c 4828					NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4828
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4829				}
; rs232cmd.c 4830			}
; rs232cmd.c 4831		}
	SYMB	LINE, 4831
_1224:
; rs232cmd.c 4832	}
	SYMB	LINE, 4832
	ADD.W	R7,#016H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4833	
; rs232cmd.c 4834	/**************************************************************************/
; rs232cmd.c 4835	/* FactGenlockGenHPHZero 																 	     RS232CMD.C	*/
; rs232cmd.c 4836	/*																																				*/
; rs232cmd.c 4837	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 4838	/* Revised:	  000622				     																					*/
; rs232cmd.c 4839	/*																																				*/
; rs232cmd.c 4840	/* Function:	--																													*/
; rs232cmd.c 4841	/* Remarks:		--																													*/
; rs232cmd.c 4842	/* Returns:		--																													*/
; rs232cmd.c 4843	/* Updates:		--																													*/
; rs232cmd.c 4844	/**************************************************************************/
; rs232cmd.c 4845	void FactGenlockGenHPHZero( void)
; rs232cmd.c 4846	{
	ALIGN	1
	SYMB	LINE, 4846
	PUBLIC	_FactGenlockGenHPHZero
_FactGenlockGenHPHZero:
	SYMB	TYPE, 632, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenHPHZero", _FactGenlockGenHPHZero, #632, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenHPHZero, #632
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "buffer", -42, #606, 130, 5
	SYMB	IDEN, "HPHZeroG", -12, #7, 130, 5
	SYMB	IDEN, "HPHZeroM", -8, #7, 130, 5
; rs232cmd.c 4847		char buffer[30];
; rs232cmd.c 4848		UL HPHZeroG, HPHZeroM;
; rs232cmd.c 4849	
; rs232cmd.c 4850		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4850
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1237
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1237
; rs232cmd.c 4851		{
; rs232cmd.c 4852			if ( CmdRequest)
	SYMB	LINE, 4852
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1229
; rs232cmd.c 4853			{
; rs232cmd.c 4854				if ( ParCnt)
	SYMB	LINE, 4854
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1228
; rs232cmd.c 4855					SCPIError = SyntaxErr;
	SYMB	LINE, 4855
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1237
_1228:
; rs232cmd.c 4856				else
; rs232cmd.c 4857				{
; rs232cmd.c 4858					sprintf( buffer, "%lu,%lu\n", Calibration.GenlockCalibration.HPHZeroG, 
; rs232cmd.c 4859																		    Calibration.GenlockCalibration.HPHZeroM);
	SYMB	LINE, 4859
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+122 )
	MOV.W	R1,#SOF( _Calibration+122 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _Calibration+130 )
	MOV.W	R3,#SOF( _Calibration+130 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	PUSH.W	R0, R1
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _1227 )
	MOV.W	R0,#SOF( _1227 )
	PUSH.W	R0, R1
	SYMB	SOFF, 54
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
; rs232cmd.c 4860					rs232puts( buffer);
	SYMB	LINE, 4860
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4861				}
; rs232cmd.c 4862			}
	SYMB	LINE, 4862
	BR	_1237
_1229:
; rs232cmd.c 4863			else
; rs232cmd.c 4864			{
; rs232cmd.c 4865				if ( !PasswordProtected)
	SYMB	LINE, 4865
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1237
; rs232cmd.c 4866				{
; rs232cmd.c 4867					if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &HPHZeroG, &HPHZeroM)) != 2))
	SYMB	LINE, 4867
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1230
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+34
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1038 )
	MOV.W	R2,#SOF( _1038 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1231
_1230:
; rs232cmd.c 4868						SCPIError = SyntaxErr;
	SYMB	LINE, 4868
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1237
_1231:
; rs232cmd.c 4869					else
; rs232cmd.c 4870					{
; rs232cmd.c 4871						Calibration.GenlockCalibration.HPHZeroG = HPHZeroG;
	SYMB	LINE, 4871
	MOV.W	R1,[R7+32]
	MOV.W	R0,[R7+30]
	MOV.B	ES,#SEG( _Calibration+122 )
	MOV.W	R2,#SOF( _Calibration+122 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4872						Calibration.GenlockCalibration.HPHZeroM = HPHZeroM;
	SYMB	LINE, 4872
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	MOV.B	ES,#SEG( _Calibration+130 )
	MOV.W	R2,#SOF( _Calibration+130 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4873					
; rs232cmd.c 4874						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4874
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4875					}
; rs232cmd.c 4876				}
; rs232cmd.c 4877			}
; rs232cmd.c 4878		}
	SYMB	LINE, 4878
_1237:
; rs232cmd.c 4879	}
	SYMB	LINE, 4879
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4880	
; rs232cmd.c 4881	/**************************************************************************/
; rs232cmd.c 4882	/* FactGenlockGenPhase	 																 	     RS232CMD.C	*/
; rs232cmd.c 4883	/*																																				*/
; rs232cmd.c 4884	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 4885	/* Revised:	  000622				     																					*/
; rs232cmd.c 4886	/*																																				*/
; rs232cmd.c 4887	/* Function:	--																													*/
; rs232cmd.c 4888	/* Remarks:		--																													*/
; rs232cmd.c 4889	/* Returns:		--																													*/
; rs232cmd.c 4890	/* Updates:		--																													*/
; rs232cmd.c 4891	/**************************************************************************/
; rs232cmd.c 4892	void FactGenlockGenPhase( void)
; rs232cmd.c 4893	{
	ALIGN	1
	SYMB	LINE, 4893
	PUBLIC	_FactGenlockGenPhase
_FactGenlockGenPhase:
	SYMB	TYPE, 633, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenPhase", _FactGenlockGenPhase, #633, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenPhase, #633
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "buffer", -42, #606, 130, 5
	SYMB	IDEN, "PhaseG", -12, #7, 130, 5
	SYMB	IDEN, "PhaseM", -8, #7, 130, 5
; rs232cmd.c 4894		char buffer[30];
; rs232cmd.c 4895		UL PhaseG, PhaseM;
; rs232cmd.c 4896	
; rs232cmd.c 4897		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4897
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1249
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1249
; rs232cmd.c 4898		{
; rs232cmd.c 4899			if ( CmdRequest)
	SYMB	LINE, 4899
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1241
; rs232cmd.c 4900			{
; rs232cmd.c 4901				if ( ParCnt)
	SYMB	LINE, 4901
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1240
; rs232cmd.c 4902					SCPIError = SyntaxErr;
	SYMB	LINE, 4902
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1249
_1240:
; rs232cmd.c 4903				else
; rs232cmd.c 4904				{
; rs232cmd.c 4905					sprintf( buffer, "%lu,%lu\n", Calibration.GenlockCalibration.PhaseG, 
; rs232cmd.c 4906																		    Calibration.GenlockCalibration.PhaseM);
	SYMB	LINE, 4906
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+126 )
	MOV.W	R1,#SOF( _Calibration+126 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _Calibration+134 )
	MOV.W	R3,#SOF( _Calibration+134 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	PUSH.W	R0, R1
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _1227 )
	MOV.W	R0,#SOF( _1227 )
	PUSH.W	R0, R1
	SYMB	SOFF, 54
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
; rs232cmd.c 4907					rs232puts( buffer);
	SYMB	LINE, 4907
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4908				}
; rs232cmd.c 4909			}
	SYMB	LINE, 4909
	BR	_1249
_1241:
; rs232cmd.c 4910			else
; rs232cmd.c 4911			{
; rs232cmd.c 4912				if ( !PasswordProtected)
	SYMB	LINE, 4912
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1249
; rs232cmd.c 4913				{
; rs232cmd.c 4914					if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &PhaseG, &PhaseM)) != 2))
	SYMB	LINE, 4914
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1242
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+34
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1038 )
	MOV.W	R2,#SOF( _1038 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1243
_1242:
; rs232cmd.c 4915						SCPIError = SyntaxErr;
	SYMB	LINE, 4915
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1249
_1243:
; rs232cmd.c 4916					else
; rs232cmd.c 4917					{
; rs232cmd.c 4918						Calibration.GenlockCalibration.PhaseG = PhaseG;
	SYMB	LINE, 4918
	MOV.W	R1,[R7+32]
	MOV.W	R0,[R7+30]
	MOV.B	ES,#SEG( _Calibration+126 )
	MOV.W	R2,#SOF( _Calibration+126 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4919						Calibration.GenlockCalibration.PhaseM = PhaseM;
	SYMB	LINE, 4919
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	MOV.B	ES,#SEG( _Calibration+134 )
	MOV.W	R2,#SOF( _Calibration+134 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4920					
; rs232cmd.c 4921						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4921
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4922					}
; rs232cmd.c 4923				}
; rs232cmd.c 4924			}
; rs232cmd.c 4925		}
	SYMB	LINE, 4925
_1249:
; rs232cmd.c 4926	}
	SYMB	LINE, 4926
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4927	
; rs232cmd.c 4928	/**************************************************************************/
; rs232cmd.c 4929	/* FactBBGenDate	 																			 	     RS232CMD.C	*/
; rs232cmd.c 4930	/*																																				*/
; rs232cmd.c 4931	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 4932	/* Revised:	  000622				     																					*/
; rs232cmd.c 4933	/*																																				*/
; rs232cmd.c 4934	/* Function:	--																													*/
; rs232cmd.c 4935	/* Remarks:		--																													*/
; rs232cmd.c 4936	/* Returns:		--																													*/
; rs232cmd.c 4937	/* Updates:		--																													*/
; rs232cmd.c 4938	/**************************************************************************/
; rs232cmd.c 4939	void FactBBGenDate( void)
; rs232cmd.c 4940	{
	ALIGN	1
	SYMB	LINE, 4940
	PUBLIC	_FactBBGenDate
_FactBBGenDate:
	SYMB	TYPE, 634, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenDate", _FactBBGenDate, #634, 0, 0, 48
	SYMB	ALAB, _FactBBGenDate, #634
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4941		UI year, month, day;
; rs232cmd.c 4942		char buffer[20];
; rs232cmd.c 4943	
; rs232cmd.c 4944		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4944
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1263
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1263
; rs232cmd.c 4945		{
; rs232cmd.c 4946			if ( CmdRequest)
	SYMB	LINE, 4946
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1253
; rs232cmd.c 4947			{
; rs232cmd.c 4948				if ( ParCnt)
	SYMB	LINE, 4948
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1252
; rs232cmd.c 4949					SCPIError = SyntaxErr;
	SYMB	LINE, 4949
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1263
_1252:
; rs232cmd.c 4950				else
; rs232cmd.c 4951				{
; rs232cmd.c 4952					day = Calibration.BBCalibration[Suffix[0]].Date % 100;
	SYMB	LINE, 4952
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+138 )
	MOV.W	R1,[R0+SOF( _Calibration+140 )]
	MOV.W	R0,[R0+SOF( _Calibration+138 )]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	FCALL	__UMODL
	MOV.W	[R7+8],R0
; rs232cmd.c 4953					month = ( Calibration.BBCalibration[Suffix[0]].Date / 100) % 100;
	SYMB	LINE, 4953
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+6],R0
; rs232cmd.c 4954					year = ( Calibration.BBCalibration[Suffix[0]].Date / 10000);
	SYMB	LINE, 4954
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	FCALL	__UDIVL
	MOV.W	[R7+4],R0
; rs232cmd.c 4955	
; rs232cmd.c 4956					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 4956
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+10
	MOV.W	R0,[R7+8]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R0,[R7+8]
	PUSH.W	R0
	SYMB	SOFF, 38
	MOV.W	R0,[R7+8]
	PUSH.W	R0
	SYMB	SOFF, 40
	MOV.W	R1,#SEG( _1174 )
	MOV.W	R0,#SOF( _1174 )
	PUSH.W	R0, R1
	SYMB	SOFF, 44
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 34
; rs232cmd.c 4957	
; rs232cmd.c 4958					rs232puts( buffer);
	SYMB	LINE, 4958
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4959				}
; rs232cmd.c 4960			}
	SYMB	LINE, 4960
	BR	_1263
_1253:
; rs232cmd.c 4961			else
; rs232cmd.c 4962			{
; rs232cmd.c 4963				if ( !PasswordProtected)
	SYMB	LINE, 4963
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1263
; rs232cmd.c 4964				{
; rs232cmd.c 4965					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 4965
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1254
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+4
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+8
	PUSH.W	R0, R1
	SYMB	SOFF, 38
	PUSH.W	R4, R5
	SYMB	SOFF, 42
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R3,#SEG( _1175 )
	MOV.W	R2,#SOF( _1175 )
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 34
	CMP.W	R0,#03H
	BEQ	_1255
_1254:
; rs232cmd.c 4966						SCPIError = SyntaxErr;
	SYMB	LINE, 4966
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1263
_1255:
; rs232cmd.c 4967					else
; rs232cmd.c 4968					{
; rs232cmd.c 4969						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4969
	MOV.W	R0,[R7+4]
	MOV.W	R1,[R7+6]
	MOV.W	R2,[R7+8]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1256
; rs232cmd.c 4970							SCPIError = ExecErr;
	SYMB	LINE, 4970
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1263
_1256:
; rs232cmd.c 4971						else
; rs232cmd.c 4972						{
; rs232cmd.c 4973							Calibration.BBCalibration[Suffix[0]].Date = day + 100*month + 10000*year;
	SYMB	LINE, 4973
	MOV.W	R0,[R7+6]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+8]
	MOV.W	R2,[R7+4]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R2,#SOF( _Suffix )
	MOV.W	R2,[R2]
	MULU.W	R2,#014H
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _Calibration+138 )
	MOV.W	[R2+SOF( _Calibration+138 )],R0
	MOV.W	[R2+SOF( _Calibration+140 )],R1
; rs232cmd.c 4974						
; rs232cmd.c 4975						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4975
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4976						}
; rs232cmd.c 4977					}				
; rs232cmd.c 4978				}
; rs232cmd.c 4979			}
; rs232cmd.c 4980		}
	SYMB	LINE, 4980
_1263:
; rs232cmd.c 4981	}
	SYMB	LINE, 4981
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4982	
; rs232cmd.c 4983	/**************************************************************************/
; rs232cmd.c 4984	/* FactBBGenVersion																			 	     RS232CMD.C	*/
; rs232cmd.c 4985	/*																																				*/
; rs232cmd.c 4986	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4987	/* Revised:	  000614				     																					*/
; rs232cmd.c 4988	/*																																				*/
; rs232cmd.c 4989	/* Function:	--																													*/
; rs232cmd.c 4990	/* Remarks:		--																													*/
; rs232cmd.c 4991	/* Returns:		--																													*/
; rs232cmd.c 4992	/* Updates:		--																													*/
; rs232cmd.c 4993	/**************************************************************************/
; rs232cmd.c 4994	void FactBBGenVersion( void)
; rs232cmd.c 4995	{
	ALIGN	1
	SYMB	LINE, 4995
	PUBLIC	_FactBBGenVersion
_FactBBGenVersion:
	SYMB	TYPE, 635, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenVersion", _FactBBGenVersion, #635, 0, 0, 48
	SYMB	ALAB, _FactBBGenVersion, #635
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#0AH
	SYMB	SOFF, 14
	SYMB	IDEN, "result", -14, #626, 130, 5
; rs232cmd.c 4996		char result[10];
; rs232cmd.c 4997	
; rs232cmd.c 4998		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4998
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1274
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1274
; rs232cmd.c 4999		{
; rs232cmd.c 5000			if ( CmdRequest)
	SYMB	LINE, 5000
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1269
; rs232cmd.c 5001			{
; rs232cmd.c 5002				if ( ParCnt || Suffix[0])
	SYMB	LINE, 5002
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BNE	_1266
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	BEQ	_1267
_1266:
; rs232cmd.c 5003					SCPIError = SyntaxErr;
	SYMB	LINE, 5003
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1274
_1267:
; rs232cmd.c 5004				else
; rs232cmd.c 5005				{
; rs232cmd.c 5006					if ( BBVersion( result) == OK)
	SYMB	LINE, 5006
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_BBVersion
	CMP.W	R0,#0FFFFH
	BNE	_1268
; rs232cmd.c 5007					{
; rs232cmd.c 5008						rs232puts( result);
	SYMB	LINE, 5008
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5009						rs232putchar( '\n');
	SYMB	LINE, 5009
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 5010					}
	SYMB	LINE, 5010
	BR	_1274
_1268:
; rs232cmd.c 5011					else
; rs232cmd.c 5012						SCPIError = ExecErr;			
	SYMB	LINE, 5012
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 5013				}
; rs232cmd.c 5014			}
	SYMB	LINE, 5014
	BR	_1274
_1269:
; rs232cmd.c 5015			else
; rs232cmd.c 5016				SCPIError = SyntaxErr;
	SYMB	LINE, 5016
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 5017		}
	SYMB	LINE, 5017
_1274:
; rs232cmd.c 5018	}
	SYMB	LINE, 5018
	ADD.W	R7,#0AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5019	
; rs232cmd.c 5020	/**************************************************************************/
; rs232cmd.c 5021	/* FactBBGenSignal																			 	     RS232CMD.C	*/
; rs232cmd.c 5022	/*																																				*/
; rs232cmd.c 5023	/* Author:		Kim Engedahl, DEV, 000503	    															*/
; rs232cmd.c 5024	/* Revised:	  000614			     																						*/
; rs232cmd.c 5025	/*																																				*/
; rs232cmd.c 5026	/* Function:	--																													*/
; rs232cmd.c 5027	/* Remarks:		--																													*/
; rs232cmd.c 5028	/* Returns:		--																													*/
; rs232cmd.c 5029	/* Updates:		--																													*/
; rs232cmd.c 5030	/**************************************************************************/
; rs232cmd.c 5031	void FactBBGenSignal( void)
; rs232cmd.c 5032	{
	ALIGN	1
	SYMB	LINE, 5032
	PUBLIC	_FactBBGenSignal
_FactBBGenSignal:
	SYMB	TYPE, 636, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenSignal", _FactBBGenSignal, #636, 0, 0, 0
	SYMB	ALAB, _FactBBGenSignal, #636
	SYMB	IDEN, "signal", -1, #16, 130, 5
	SYMB	LTIM, "signal", -1, 0, 69
; rs232cmd.c 5033		int signal;
; rs232cmd.c 5034	
; rs232cmd.c 5035		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5035
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1287
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1287
; rs232cmd.c 5036		{
; rs232cmd.c 5037			if ( CmdRequest)
	SYMB	LINE, 5037
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1276
; rs232cmd.c 5038				SCPIError = SyntaxErr;
	SYMB	LINE, 5038
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_1276:
; rs232cmd.c 5039			else
; rs232cmd.c 5040			{
; rs232cmd.c 5041				if ( !PasswordProtected)
	SYMB	LINE, 5041
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1287
; rs232cmd.c 5042				{
; rs232cmd.c 5043					if ( ParCnt != 1)
	SYMB	LINE, 5043
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_1277
; rs232cmd.c 5044						SCPIError = SyntaxErr;
	SYMB	LINE, 5044
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_1277:
; rs232cmd.c 5045					else
; rs232cmd.c 5046					{
; rs232cmd.c 5047						signal = FindParameter( Cmd, FactBBGenSignalPar);
	SYMB	LINE, 5047
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _FactBBGenSignalPar )
	MOV.W	R2,#SOF( _FactBBGenSignalPar )
	CALL	_FindParameter
	SYMB	LTIM, "signal", 2, 0, 205
; rs232cmd.c 5048		
; rs232cmd.c 5049						switch ( signal)
	SYMB	LINE, 5049
	CMP.W	R0,#00H
	BEQ	_1278
	CMP.W	R0,#01H
	BEQ	_1279
	BR	_1280
; rs232cmd.c 5050						{
; rs232cmd.c 5051							case 0:
	SYMB	LINE, 5051
_1278:
; rs232cmd.c 5052								BBControlPort = 0;
	SYMB	LINE, 5052
	MOV.B	ES,#SEG( _BBControlPort )
	MOV.W	R0,#SOF( _BBControlPort )
	MOV.W	[R0],#00H
; rs232cmd.c 5053								break;
	SYMB	LINE, 5053
	RET
; rs232cmd.c 5054	
; rs232cmd.c 5055							case 1:
	SYMB	LINE, 5055
_1279:
; rs232cmd.c 5056								BBControlPort = 1;
	SYMB	LINE, 5056
	MOV.B	ES,#SEG( _BBControlPort )
	MOV.W	R0,#SOF( _BBControlPort )
	MOV.W	[R0],#01H
; rs232cmd.c 5057								break;
	SYMB	LINE, 5057
	RET
; rs232cmd.c 5058	
; rs232cmd.c 5059							default:
	SYMB	LINE, 5059
_1280:
; rs232cmd.c 5060								SCPIError = DataOutOfRange;
	SYMB	LINE, 5060
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 5061								break;
; rs232cmd.c 5062						}
; rs232cmd.c 5063					}
; rs232cmd.c 5064				}
; rs232cmd.c 5065			}
; rs232cmd.c 5066		}
	SYMB	LINE, 5066
_1287:
; rs232cmd.c 5067	}
	SYMB	LINE, 5067
	RET
	SYMB	LTIM, "signal", 2, 0, 77
	SYMB	EFUN
; rs232cmd.c 5068	
; rs232cmd.c 5069	/**************************************************************************/
; rs232cmd.c 5070	/* FactBBGenPhase																				 	     RS232CMD.C	*/
; rs232cmd.c 5071	/*																																				*/
; rs232cmd.c 5072	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5073	/* Revised:	  000622				     																					*/
; rs232cmd.c 5074	/*																																				*/
; rs232cmd.c 5075	/* Function:	--																													*/
; rs232cmd.c 5076	/* Remarks:		--																													*/
; rs232cmd.c 5077	/* Returns:		--																													*/
; rs232cmd.c 5078	/* Updates:		--																													*/
; rs232cmd.c 5079	/**************************************************************************/
; rs232cmd.c 5080	void FactBBGenPhase( void)
; rs232cmd.c 5081	{
	ALIGN	1
	SYMB	LINE, 5081
	PUBLIC	_FactBBGenPhase
_FactBBGenPhase:
	SYMB	TYPE, 637, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenPhase", _FactBBGenPhase, #637, 0, 0, 48
	SYMB	ALAB, _FactBBGenPhase, #637
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "buffer", -42, #606, 130, 5
	SYMB	IDEN, "PhaseG", -12, #7, 130, 5
	SYMB	IDEN, "PhaseM", -8, #7, 130, 5
; rs232cmd.c 5082		char buffer[30];
; rs232cmd.c 5083		UL PhaseG, PhaseM;
; rs232cmd.c 5084	
; rs232cmd.c 5085		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5085
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1298
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1298
; rs232cmd.c 5086		{
; rs232cmd.c 5087			if ( CmdRequest)
	SYMB	LINE, 5087
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1290
; rs232cmd.c 5088			{
; rs232cmd.c 5089				if ( ParCnt)
	SYMB	LINE, 5089
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1289
; rs232cmd.c 5090					SCPIError = SyntaxErr;
	SYMB	LINE, 5090
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1298
_1289:
; rs232cmd.c 5091				else
; rs232cmd.c 5092				{
; rs232cmd.c 5093					sprintf( buffer, "%lu,%lu\n", Calibration.BBCalibration[Suffix[0]].PhaseG, 
; rs232cmd.c 5094																		    Calibration.BBCalibration[Suffix[0]].PhaseM);
	SYMB	LINE, 5094
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+142 )
	MOV.W	R2,[R0+SOF( _Calibration+142 )]
	MOV.W	R3,[R0+SOF( _Calibration+144 )]
	MOV.B	ES,#SEG( _Calibration+148 )
	MOV.W	R1,[R0+SOF( _Calibration+150 )]
	MOV.W	R0,[R0+SOF( _Calibration+148 )]
	PUSH.W	R0, R1
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _1227 )
	MOV.W	R0,#SOF( _1227 )
	PUSH.W	R0, R1
	SYMB	SOFF, 54
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
; rs232cmd.c 5095					rs232puts( buffer);
	SYMB	LINE, 5095
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5096				}
; rs232cmd.c 5097			}
	SYMB	LINE, 5097
	BR	_1298
_1290:
; rs232cmd.c 5098			else
; rs232cmd.c 5099			{
; rs232cmd.c 5100				if ( !PasswordProtected)
	SYMB	LINE, 5100
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1298
; rs232cmd.c 5101				{
; rs232cmd.c 5102					if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &PhaseG, &PhaseM)) != 2))
	SYMB	LINE, 5102
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1291
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+34
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1038 )
	MOV.W	R2,#SOF( _1038 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1292
_1291:
; rs232cmd.c 5103						SCPIError = SyntaxErr;
	SYMB	LINE, 5103
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1298
_1292:
; rs232cmd.c 5104					else
; rs232cmd.c 5105					{
; rs232cmd.c 5106						Calibration.BBCalibration[Suffix[0]].PhaseG = PhaseG;
	SYMB	LINE, 5106
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.W	R3,[R7+32]
	MOV.W	R2,[R7+30]
	MOV.B	ES,#SEG( _Calibration+142 )
	MOV.W	[R0+SOF( _Calibration+142 )],R2
	MOV.W	[R0+SOF( _Calibration+144 )],R3
; rs232cmd.c 5107						Calibration.BBCalibration[Suffix[0]].PhaseM = PhaseM;
	SYMB	LINE, 5107
	MOV.W	R3,[R7+36]
	MOV.W	R2,[R7+34]
	MOV.B	ES,#SEG( _Calibration+148 )
	MOV.W	[R0+SOF( _Calibration+148 )],R2
	MOV.W	[R0+SOF( _Calibration+150 )],R3
; rs232cmd.c 5108					
; rs232cmd.c 5109						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5109
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5110					}
; rs232cmd.c 5111				}
; rs232cmd.c 5112			}
; rs232cmd.c 5113		}
	SYMB	LINE, 5113
_1298:
; rs232cmd.c 5114	}
	SYMB	LINE, 5114
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5115	
; rs232cmd.c 5116	/**************************************************************************/
; rs232cmd.c 5117	/* FactBBGenScHPhase																		 	     RS232CMD.C	*/
; rs232cmd.c 5118	/*																																				*/
; rs232cmd.c 5119	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5120	/* Revised:	  000622				     																					*/
; rs232cmd.c 5121	/*																																				*/
; rs232cmd.c 5122	/* Function:	--																													*/
; rs232cmd.c 5123	/* Remarks:		--																													*/
; rs232cmd.c 5124	/* Returns:		--																													*/
; rs232cmd.c 5125	/* Updates:		--																													*/
; rs232cmd.c 5126	/**************************************************************************/
; rs232cmd.c 5127	void FactBBGenScHPhase( void)
; rs232cmd.c 5128	{
	ALIGN	1
	SYMB	LINE, 5128
	PUBLIC	_FactBBGenScHPhase
_FactBBGenScHPhase:
	SYMB	TYPE, 638, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenScHPhase", _FactBBGenScHPhase, #638, 0, 0, 48
	SYMB	ALAB, _FactBBGenScHPhase, #638
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#022H
	SYMB	SOFF, 38
	SYMB	IDEN, "buffer", -38, #606, 130, 5
	SYMB	IDEN, "ScHPhaseG", -8, #18, 130, 5
	SYMB	IDEN, "ScHPhaseM", -6, #18, 130, 5
; rs232cmd.c 5129		char buffer[30];
; rs232cmd.c 5130		UI ScHPhaseG, ScHPhaseM;
; rs232cmd.c 5131	
; rs232cmd.c 5132		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5132
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1312
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1312
; rs232cmd.c 5133		{
; rs232cmd.c 5134			if ( CmdRequest)
	SYMB	LINE, 5134
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1304
; rs232cmd.c 5135			{
; rs232cmd.c 5136				if ( ParCnt)
	SYMB	LINE, 5136
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1303
; rs232cmd.c 5137					SCPIError = SyntaxErr;
	SYMB	LINE, 5137
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1312
_1303:
; rs232cmd.c 5138				else
; rs232cmd.c 5139				{
; rs232cmd.c 5140					sprintf( buffer, "%u,%u\n", Calibration.BBCalibration[Suffix[0]].ScHPhaseG, 
; rs232cmd.c 5141																	    Calibration.BBCalibration[Suffix[0]].ScHPhaseM);
	SYMB	LINE, 5141
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+146 )
	MOV.W	R2,[R0+SOF( _Calibration+146 )]
	MOV.B	ES,#SEG( _Calibration+152 )
	MOV.W	R0,[R0+SOF( _Calibration+152 )]
	PUSH.W	R0
	SYMB	SOFF, 40
	PUSH.W	R2
	SYMB	SOFF, 42
	MOV.W	R1,#SEG( _1301 )
	MOV.W	R0,#SOF( _1301 )
	PUSH.W	R0, R1
	SYMB	SOFF, 46
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 38
; rs232cmd.c 5142					rs232puts( buffer);
	SYMB	LINE, 5142
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5143				}
; rs232cmd.c 5144			}
	SYMB	LINE, 5144
	BR	_1312
_1304:
; rs232cmd.c 5145			else
; rs232cmd.c 5146			{
; rs232cmd.c 5147				if ( !PasswordProtected)
	SYMB	LINE, 5147
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1312
; rs232cmd.c 5148				{
; rs232cmd.c 5149					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &ScHPhaseG, &ScHPhaseM)) != 2))
	SYMB	LINE, 5149
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1305
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+32
	PUSH.W	R4, R5
	SYMB	SOFF, 42
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R3,#SEG( _1302 )
	MOV.W	R2,#SOF( _1302 )
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 38
	CMP.W	R0,#02H
	BEQ	_1306
_1305:
; rs232cmd.c 5150						SCPIError = SyntaxErr;
	SYMB	LINE, 5150
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1312
_1306:
; rs232cmd.c 5151					else
; rs232cmd.c 5152					{
; rs232cmd.c 5153						Calibration.BBCalibration[Suffix[0]].ScHPhaseG = ScHPhaseG;
	SYMB	LINE, 5153
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.W	R2,[R7+30]
	MOV.B	ES,#SEG( _Calibration+146 )
	MOV.W	[R0+SOF( _Calibration+146 )],R2
; rs232cmd.c 5154						Calibration.BBCalibration[Suffix[0]].ScHPhaseM = ScHPhaseM;
	SYMB	LINE, 5154
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.W	R2,[R7+32]
	MOV.B	ES,#SEG( _Calibration+152 )
	MOV.W	[R0+SOF( _Calibration+152 )],R2
; rs232cmd.c 5155					
; rs232cmd.c 5156						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5156
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5157					}
; rs232cmd.c 5158				}
; rs232cmd.c 5159			}
; rs232cmd.c 5160		}
	SYMB	LINE, 5160
_1312:
; rs232cmd.c 5161	}
	SYMB	LINE, 5161
	ADD.W	R7,#022H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5162	
; rs232cmd.c 5163	/**************************************************************************/
; rs232cmd.c 5164	/* FactBBGenDAC																					 	     RS232CMD.C	*/
; rs232cmd.c 5165	/*																																				*/
; rs232cmd.c 5166	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5167	/* Revised:	  000622				     																					*/
; rs232cmd.c 5168	/*																																				*/
; rs232cmd.c 5169	/* Function:	--																													*/
; rs232cmd.c 5170	/* Remarks:		--																													*/
; rs232cmd.c 5171	/* Returns:		--																													*/
; rs232cmd.c 5172	/* Updates:		--																													*/
; rs232cmd.c 5173	/**************************************************************************/
; rs232cmd.c 5174	void FactBBGenDAC( void)
; rs232cmd.c 5175	{
	ALIGN	1
	SYMB	LINE, 5175
	PUBLIC	_FactBBGenDAC
_FactBBGenDAC:
	SYMB	TYPE, 639, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenDAC", _FactBBGenDAC, #639, 0, 0, 48
	SYMB	ALAB, _FactBBGenDAC, #639
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#024H
	SYMB	SOFF, 40
	SYMB	IDEN, "buffer", -40, #606, 130, 5
	SYMB	IDEN, "DACGain", -10, #18, 130, 5
	SYMB	IDEN, "DACOffset", -8, #18, 130, 5
	SYMB	IDEN, "DACLevel", -6, #18, 130, 5
; rs232cmd.c 5176		char buffer[30];
; rs232cmd.c 5177		UI DACGain, DACOffset, DACLevel;
; rs232cmd.c 5178	
; rs232cmd.c 5179		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5179
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1324
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1324
; rs232cmd.c 5180		{
; rs232cmd.c 5181			if ( CmdRequest)
	SYMB	LINE, 5181
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1316
; rs232cmd.c 5182			{
; rs232cmd.c 5183				if ( ParCnt)
	SYMB	LINE, 5183
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1315
; rs232cmd.c 5184					SCPIError = SyntaxErr;
	SYMB	LINE, 5184
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1324
_1315:
; rs232cmd.c 5185				else
; rs232cmd.c 5186				{
; rs232cmd.c 5187					sprintf( buffer, "%u,%u,%u\n", Calibration.BBCalibration[Suffix[0]].DACGain, 
; rs232cmd.c 5188																		     Calibration.BBCalibration[Suffix[0]].DACOffset,
; rs232cmd.c 5189																		     Calibration.BBCalibration[Suffix[0]].DACLevel);
	SYMB	LINE, 5189
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+154 )
	MOV.B	R2L,[R0+SOF( _Calibration+154 )]
	MOVS.B	R2H,#00H
	MOV.B	ES,#SEG( _Calibration+155 )
	MOV.B	R3L,[R0+SOF( _Calibration+155 )]
	MOVS.B	R3H,#00H
	MOV.B	ES,#SEG( _Calibration+156 )
	MOV.B	R0L,[R0+SOF( _Calibration+156 )]
	MOVS.B	R0H,#00H
	PUSH.W	R0
	SYMB	SOFF, 42
	PUSH.W	R3
	SYMB	SOFF, 44
	PUSH.W	R2
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _1174 )
	MOV.W	R0,#SOF( _1174 )
	PUSH.W	R0, R1
	SYMB	SOFF, 50
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 40
; rs232cmd.c 5190					rs232puts( buffer);
	SYMB	LINE, 5190
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5191				}
; rs232cmd.c 5192			}
	SYMB	LINE, 5192
	BR	_1324
_1316:
; rs232cmd.c 5193			else
; rs232cmd.c 5194			{
; rs232cmd.c 5195				if ( !PasswordProtected)
	SYMB	LINE, 5195
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1324
; rs232cmd.c 5196				{
; rs232cmd.c 5197					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &DACGain, &DACOffset, &DACLevel)) != 3))
	SYMB	LINE, 5197
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1317
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+32
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+34
	PUSH.W	R0, R1
	SYMB	SOFF, 44
	PUSH.W	R4, R5
	SYMB	SOFF, 48
	PUSH.W	R2, R3
	SYMB	SOFF, 52
	MOV.W	R3,#SEG( _1175 )
	MOV.W	R2,#SOF( _1175 )
	PUSH.W	R2, R3
	SYMB	SOFF, 56
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 40
	CMP.W	R0,#03H
	BEQ	_1318
_1317:
; rs232cmd.c 5198						SCPIError = SyntaxErr;
	SYMB	LINE, 5198
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1324
_1318:
; rs232cmd.c 5199					else
; rs232cmd.c 5200					{
; rs232cmd.c 5201						Calibration.BBCalibration[Suffix[0]].DACGain = DACGain;
	SYMB	LINE, 5201
	MOV.W	R2,[R7+30]
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+154 )
	MOV.B	[R0+SOF( _Calibration+154 )],R2L
; rs232cmd.c 5202						Calibration.BBCalibration[Suffix[0]].DACOffset = DACOffset;
	SYMB	LINE, 5202
	MOV.W	R2,[R7+32]
	MOV.B	ES,#SEG( _Calibration+155 )
	MOV.B	[R0+SOF( _Calibration+155 )],R2L
; rs232cmd.c 5203						Calibration.BBCalibration[Suffix[0]].DACLevel = DACLevel;	
	SYMB	LINE, 5203
	MOV.W	R2,[R7+34]
	MOV.B	ES,#SEG( _Calibration+156 )
	MOV.B	[R0+SOF( _Calibration+156 )],R2L
; rs232cmd.c 5204								
; rs232cmd.c 5205						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5205
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5206					}
; rs232cmd.c 5207				}
; rs232cmd.c 5208			}
; rs232cmd.c 5209		}
	SYMB	LINE, 5209
_1324:
; rs232cmd.c 5210	}
	SYMB	LINE, 5210
	ADD.W	R7,#024H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5211	
; rs232cmd.c 5212	/**************************************************************************/
; rs232cmd.c 5213	/* FactTSGenDate																				 	     RS232CMD.C	*/
; rs232cmd.c 5214	/*																																				*/
; rs232cmd.c 5215	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5216	/* Revised:	  000727				     																					*/
; rs232cmd.c 5217	/*																																				*/
; rs232cmd.c 5218	/* Function:	--																													*/
; rs232cmd.c 5219	/* Remarks:		--																													*/
; rs232cmd.c 5220	/* Returns:		--																													*/
; rs232cmd.c 5221	/* Updates:		--																													*/
; rs232cmd.c 5222	/**************************************************************************/
; rs232cmd.c 5223	void FactTSGenDate( void)
; rs232cmd.c 5224	{
	ALIGN	1
	SYMB	LINE, 5224
	PUBLIC	_FactTSGenDate
_FactTSGenDate:
	SYMB	TYPE, 640, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTSGenDate", _FactTSGenDate, #640, 0, 0, 48
	SYMB	ALAB, _FactTSGenDate, #640
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5225		UI year, month, day;
; rs232cmd.c 5226		char buffer[20];
; rs232cmd.c 5227	
; rs232cmd.c 5228		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5228
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1338
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1338
; rs232cmd.c 5229		{
; rs232cmd.c 5230			if ( CmdRequest)
	SYMB	LINE, 5230
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1328
; rs232cmd.c 5231			{
; rs232cmd.c 5232				if ( ParCnt)
	SYMB	LINE, 5232
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1327
; rs232cmd.c 5233					SCPIError = SyntaxErr;
	SYMB	LINE, 5233
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1338
_1327:
; rs232cmd.c 5234				else
; rs232cmd.c 5235				{
; rs232cmd.c 5236					day = Calibration.CBCalibration.Date % 100;
	SYMB	LINE, 5236
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R1,#SOF( _Calibration+198 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R4,#SOF( _Calibration+198 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R1,#SOF( _Calibration+198 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 5237					month = ( Calibration.CBCalibration.Date / 100) % 100;
	SYMB	LINE, 5237
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 5238					year = ( Calibration.CBCalibration.Date / 10000);
	SYMB	LINE, 5238
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R1,#SOF( _Calibration+198 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 5239	
; rs232cmd.c 5240					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 5240
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1174 )
	MOV.W	R0,#SOF( _1174 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 5241	
; rs232cmd.c 5242					rs232puts( buffer);
	SYMB	LINE, 5242
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5243				}
; rs232cmd.c 5244			}
	SYMB	LINE, 5244
	BR	_1338
_1328:
; rs232cmd.c 5245			else
; rs232cmd.c 5246			{
; rs232cmd.c 5247				if ( !PasswordProtected)
	SYMB	LINE, 5247
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1338
; rs232cmd.c 5248				{
; rs232cmd.c 5249					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 5249
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1329
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1175 )
	MOV.W	R2,#SOF( _1175 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1330
_1329:
; rs232cmd.c 5250						SCPIError = SyntaxErr;
	SYMB	LINE, 5250
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1338
_1330:
; rs232cmd.c 5251					else
; rs232cmd.c 5252					{
; rs232cmd.c 5253						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 5253
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1331
; rs232cmd.c 5254							SCPIError = ExecErr;
	SYMB	LINE, 5254
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1338
_1331:
; rs232cmd.c 5255						else
; rs232cmd.c 5256						{
; rs232cmd.c 5257							Calibration.CBCalibration.Date = day + 100*month + 10000*year;
	SYMB	LINE, 5257
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R2,#SOF( _Calibration+198 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 5258						
; rs232cmd.c 5259						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5259
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5260						}
; rs232cmd.c 5261					}				
; rs232cmd.c 5262				}
; rs232cmd.c 5263			}
; rs232cmd.c 5264		}
	SYMB	LINE, 5264
_1338:
; rs232cmd.c 5265	}
	SYMB	LINE, 5265
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5266	
; rs232cmd.c 5267	/**************************************************************************/
; rs232cmd.c 5268	/* FactTSGenAGain																				 	     RS232CMD.C	*/
; rs232cmd.c 5269	/*																																				*/
; rs232cmd.c 5270	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5271	/* Revised:	  000727,				     																					*/
; rs232cmd.c 5272	/*																																				*/
; rs232cmd.c 5273	/* Function:	--																													*/
; rs232cmd.c 5274	/* Remarks:		--																													*/
; rs232cmd.c 5275	/* Returns:		--																													*/
; rs232cmd.c 5276	/* Updates:		--																													*/
; rs232cmd.c 5277	/**************************************************************************/
; rs232cmd.c 5278	void FactTSGenAGain( void)
; rs232cmd.c 5279	{
	ALIGN	1
	SYMB	LINE, 5279
	PUBLIC	_FactTSGenAGain
_FactTSGenAGain:
	SYMB	TYPE, 641, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTSGenAGain", _FactTSGenAGain, #641, 0, 0, 48
	SYMB	ALAB, _FactTSGenAGain, #641
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#018H
	SYMB	SOFF, 28
	SYMB	IDEN, "buffer", -28, #563, 130, 5
	SYMB	IDEN, "GainG", -8, #3, 130, 5
	SYMB	IDEN, "GainM", -6, #3, 130, 5
; rs232cmd.c 5280		char buffer[20];
; rs232cmd.c 5281		UC GainG, GainM;
; rs232cmd.c 5282	
; rs232cmd.c 5283		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5283
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1352
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1352
; rs232cmd.c 5284		{
; rs232cmd.c 5285			if ( CmdRequest)
	SYMB	LINE, 5285
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1342
; rs232cmd.c 5286			{
; rs232cmd.c 5287				if ( ParCnt)
	SYMB	LINE, 5287
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1341
; rs232cmd.c 5288					SCPIError = SyntaxErr;
	SYMB	LINE, 5288
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1352
_1341:
; rs232cmd.c 5289				else
; rs232cmd.c 5290				{
; rs232cmd.c 5291					sprintf( buffer, "%u,%u\n", Calibration.CBCalibration.GainG, 
; rs232cmd.c 5292																	    Calibration.CBCalibration.GainM);
	SYMB	LINE, 5292
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+213 )
	MOV.W	R0,#SOF( _Calibration+213 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOV.B	ES,#SEG( _Calibration+215 )
	MOV.W	R1,#SOF( _Calibration+215 )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 30
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R1,#SEG( _1301 )
	MOV.W	R0,#SOF( _1301 )
	PUSH.W	R0, R1
	SYMB	SOFF, 36
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 28
; rs232cmd.c 5293					rs232puts( buffer);
	SYMB	LINE, 5293
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5294				}
; rs232cmd.c 5295			}
	SYMB	LINE, 5295
	BR	_1352
_1342:
; rs232cmd.c 5296			else
; rs232cmd.c 5297			{
; rs232cmd.c 5298				if ( !PasswordProtected)
	SYMB	LINE, 5298
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1352
; rs232cmd.c 5299				{
; rs232cmd.c 5300					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &GainG, &GainM)) != 2))
	SYMB	LINE, 5300
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1343
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+22
	PUSH.W	R4, R5
	SYMB	SOFF, 32
	PUSH.W	R2, R3
	SYMB	SOFF, 36
	MOV.W	R3,#SEG( _1302 )
	MOV.W	R2,#SOF( _1302 )
	PUSH.W	R2, R3
	SYMB	SOFF, 40
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 28
	CMP.W	R0,#02H
	BEQ	_1344
_1343:
; rs232cmd.c 5301						SCPIError = SyntaxErr;
	SYMB	LINE, 5301
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1352
_1344:
; rs232cmd.c 5302					else
; rs232cmd.c 5303					{
; rs232cmd.c 5304						Calibration.CBCalibration.GainG = GainG;
	SYMB	LINE, 5304
	MOV.B	R0L,[R7+20]
	MOV.B	ES,#SEG( _Calibration+213 )
	MOV.W	R1,#SOF( _Calibration+213 )
	MOV.B	[R1],R0L
; rs232cmd.c 5305						Calibration.CBCalibration.GainM = GainM;
	SYMB	LINE, 5305
	MOV.B	R0L,[R7+22]
	MOV.B	ES,#SEG( _Calibration+215 )
	MOV.W	R1,#SOF( _Calibration+215 )
	MOV.B	[R1],R0L
; rs232cmd.c 5306																																		
; rs232cmd.c 5307						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5307
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5308	
; rs232cmd.c 5309						if ( CBSetup.System < NTSC_US)
	SYMB	LINE, 5309
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BCC	_1345
; rs232cmd.c 5310							WriteCBGain( GainG);
	SYMB	LINE, 5310
	MOV.B	R0L,[R7+20]
	CALL	_WriteCBGain
	BR	_1352
_1345:
; rs232cmd.c 5311						else
; rs232cmd.c 5312							WriteCBGain( GainM);
	SYMB	LINE, 5312
	MOV.B	R0L,[R7+22]
	CALL	_WriteCBGain
; rs232cmd.c 5313					}
; rs232cmd.c 5314				}
; rs232cmd.c 5315			}
; rs232cmd.c 5316		}
	SYMB	LINE, 5316
_1352:
; rs232cmd.c 5317	}
	SYMB	LINE, 5317
	ADD.W	R7,#018H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5318	
; rs232cmd.c 5319	/**************************************************************************/
; rs232cmd.c 5320	/* FactTSGenCGain																				 	     RS232CMD.C	*/
; rs232cmd.c 5321	/*																																				*/
; rs232cmd.c 5322	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5323	/* Revised:	  000727,				     																					*/
; rs232cmd.c 5324	/*																																				*/
; rs232cmd.c 5325	/* Function:	--																													*/
; rs232cmd.c 5326	/* Remarks:		--																													*/
; rs232cmd.c 5327	/* Returns:		--																													*/
; rs232cmd.c 5328	/* Updates:		--																													*/
; rs232cmd.c 5329	/**************************************************************************/
; rs232cmd.c 5330	void FactTSGenCGain( void)
; rs232cmd.c 5331	{
	ALIGN	1
	SYMB	LINE, 5331
	PUBLIC	_FactTSGenCGain
_FactTSGenCGain:
	SYMB	TYPE, 642, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTSGenCGain", _FactTSGenCGain, #642, 0, 0, 48
	SYMB	ALAB, _FactTSGenCGain, #642
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#018H
	SYMB	SOFF, 28
	SYMB	IDEN, "buffer", -28, #563, 130, 5
	SYMB	IDEN, "ChromaGainG", -8, #3, 130, 5
	SYMB	IDEN, "ChromaGainM", -6, #3, 130, 5
; rs232cmd.c 5332		char buffer[20];
; rs232cmd.c 5333		UC ChromaGainG, ChromaGainM;
; rs232cmd.c 5334	
; rs232cmd.c 5335		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5335
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1367
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1367
; rs232cmd.c 5336		{
; rs232cmd.c 5337			if ( CmdRequest)
	SYMB	LINE, 5337
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1357
; rs232cmd.c 5338			{
; rs232cmd.c 5339				if ( ParCnt)
	SYMB	LINE, 5339
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1356
; rs232cmd.c 5340					SCPIError = SyntaxErr;
	SYMB	LINE, 5340
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1367
_1356:
; rs232cmd.c 5341				else
; rs232cmd.c 5342				{
; rs232cmd.c 5343					sprintf( buffer, "%u,%u\n", Calibration.CBCalibration.ChromaGainG, 
; rs232cmd.c 5344																	    Calibration.CBCalibration.ChromaGainM);
	SYMB	LINE, 5344
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+214 )
	MOV.W	R0,#SOF( _Calibration+214 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOV.B	ES,#SEG( _Calibration+216 )
	MOV.W	R1,#SOF( _Calibration+216 )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 30
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R1,#SEG( _1301 )
	MOV.W	R0,#SOF( _1301 )
	PUSH.W	R0, R1
	SYMB	SOFF, 36
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 28
; rs232cmd.c 5345					rs232puts( buffer);
	SYMB	LINE, 5345
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5346				}
; rs232cmd.c 5347			}
	SYMB	LINE, 5347
	BR	_1367
_1357:
; rs232cmd.c 5348			else
; rs232cmd.c 5349			{
; rs232cmd.c 5350				if ( !PasswordProtected)
	SYMB	LINE, 5350
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1367
; rs232cmd.c 5351				{
; rs232cmd.c 5352					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &ChromaGainG, &ChromaGainM)) != 2))
	SYMB	LINE, 5352
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1358
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+22
	PUSH.W	R4, R5
	SYMB	SOFF, 32
	PUSH.W	R2, R3
	SYMB	SOFF, 36
	MOV.W	R3,#SEG( _1302 )
	MOV.W	R2,#SOF( _1302 )
	PUSH.W	R2, R3
	SYMB	SOFF, 40
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 28
	CMP.W	R0,#02H
	BEQ	_1359
_1358:
; rs232cmd.c 5353						SCPIError = SyntaxErr;
	SYMB	LINE, 5353
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1367
_1359:
; rs232cmd.c 5354					else
; rs232cmd.c 5355					{
; rs232cmd.c 5356						Calibration.CBCalibration.ChromaGainG = ChromaGainG;
	SYMB	LINE, 5356
	MOV.B	R0L,[R7+20]
	MOV.B	ES,#SEG( _Calibration+214 )
	MOV.W	R1,#SOF( _Calibration+214 )
	MOV.B	[R1],R0L
; rs232cmd.c 5357						Calibration.CBCalibration.ChromaGainM = ChromaGainM;
	SYMB	LINE, 5357
	MOV.B	R0L,[R7+22]
	MOV.B	ES,#SEG( _Calibration+216 )
	MOV.W	R1,#SOF( _Calibration+216 )
	MOV.B	[R1],R0L
; rs232cmd.c 5358																																		
; rs232cmd.c 5359						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5359
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5360	
; rs232cmd.c 5361						if ( CBSetup.System < NTSC_US )
	SYMB	LINE, 5361
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BCC	_1360
; rs232cmd.c 5362							WriteCBChromaGain( ChromaGainG);
	SYMB	LINE, 5362
	MOV.B	R0L,[R7+20]
	CALL	_WriteCBChromaGain
	BR	_1367
_1360:
; rs232cmd.c 5363						else
; rs232cmd.c 5364							WriteCBChromaGain( ChromaGainM);
	SYMB	LINE, 5364
	MOV.B	R0L,[R7+22]
	CALL	_WriteCBChromaGain
; rs232cmd.c 5365					}
; rs232cmd.c 5366				}
; rs232cmd.c 5367			}
; rs232cmd.c 5368		}
	SYMB	LINE, 5368
_1367:
; rs232cmd.c 5369	}
	SYMB	LINE, 5369
	ADD.W	R7,#018H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5370	
; rs232cmd.c 5371	/**************************************************************************/
; rs232cmd.c 5372	/* FactTSGenPhase																				 	     RS232CMD.C	*/
; rs232cmd.c 5373	/*																																				*/
; rs232cmd.c 5374	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5375	/* Revised:	  000727				     																					*/
; rs232cmd.c 5376	/*																																				*/
; rs232cmd.c 5377	/* Function:	--																													*/
; rs232cmd.c 5378	/* Remarks:		PAL range: 0-4*625*1728, NTSC range: 0-2*525*1716						*/
; rs232cmd.c 5379	/* Returns:		--																													*/
; rs232cmd.c 5380	/* Updates:		--																													*/
; rs232cmd.c 5381	/**************************************************************************/
; rs232cmd.c 5382	void FactTSGenPhase( void)
; rs232cmd.c 5383	{
	ALIGN	1
	SYMB	LINE, 5383
	PUBLIC	_FactTSGenPhase
_FactTSGenPhase:
	SYMB	TYPE, 643, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTSGenPhase", _FactTSGenPhase, #643, 0, 0, 48
	SYMB	ALAB, _FactTSGenPhase, #643
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "buffer", -42, #606, 130, 5
	SYMB	IDEN, "PhaseG", -12, #7, 130, 5
	SYMB	IDEN, "PhaseM", -8, #7, 130, 5
; rs232cmd.c 5384		char buffer[30];
; rs232cmd.c 5385		UL PhaseG, PhaseM;
; rs232cmd.c 5386	
; rs232cmd.c 5387		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5387
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1380
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1380
; rs232cmd.c 5388		{
; rs232cmd.c 5389			if ( CmdRequest)
	SYMB	LINE, 5389
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1372
; rs232cmd.c 5390			{
; rs232cmd.c 5391				if ( ParCnt)
	SYMB	LINE, 5391
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1371
; rs232cmd.c 5392					SCPIError = SyntaxErr;
	SYMB	LINE, 5392
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1380
_1371:
; rs232cmd.c 5393				else
; rs232cmd.c 5394				{
; rs232cmd.c 5395					sprintf( buffer, "%lu,%lu\n", Calibration.CBCalibration.PhaseG, 
; rs232cmd.c 5396																		    Calibration.CBCalibration.PhaseM);
	SYMB	LINE, 5396
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+202 )
	MOV.W	R1,#SOF( _Calibration+202 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _Calibration+208 )
	MOV.W	R3,#SOF( _Calibration+208 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	PUSH.W	R0, R1
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _1227 )
	MOV.W	R0,#SOF( _1227 )
	PUSH.W	R0, R1
	SYMB	SOFF, 54
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
; rs232cmd.c 5397					rs232puts( buffer);
	SYMB	LINE, 5397
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5398				}
; rs232cmd.c 5399			}
	SYMB	LINE, 5399
	BR	_1380
_1372:
; rs232cmd.c 5400			else
; rs232cmd.c 5401			{
; rs232cmd.c 5402				if ( !PasswordProtected)
	SYMB	LINE, 5402
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1380
; rs232cmd.c 5403				{
; rs232cmd.c 5404					if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &PhaseG, &PhaseM)) != 2))
	SYMB	LINE, 5404
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1373
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+34
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1038 )
	MOV.W	R2,#SOF( _1038 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1374
_1373:
; rs232cmd.c 5405						SCPIError = SyntaxErr;
	SYMB	LINE, 5405
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1380
_1374:
; rs232cmd.c 5406					else
; rs232cmd.c 5407					{
; rs232cmd.c 5408						Calibration.CBCalibration.PhaseG = PhaseG;
	SYMB	LINE, 5408
	MOV.W	R1,[R7+32]
	MOV.W	R0,[R7+30]
	MOV.B	ES,#SEG( _Calibration+202 )
	MOV.W	R2,#SOF( _Calibration+202 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 5409						Calibration.CBCalibration.PhaseM = PhaseM;
	SYMB	LINE, 5409
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	MOV.B	ES,#SEG( _Calibration+208 )
	MOV.W	R2,#SOF( _Calibration+208 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 5410					
; rs232cmd.c 5411						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5411
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5412	
; rs232cmd.c 5413						SetCBDelay( CBSetup.Delay);
	SYMB	LINE, 5413
	MOV.B	ES,#SEG( _CBSetup+4 )
	MOV.W	R1,#SOF( _CBSetup+4 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	CALL	_SetCBDelay
; rs232cmd.c 5414					}
; rs232cmd.c 5415				}
; rs232cmd.c 5416			}
; rs232cmd.c 5417		}
	SYMB	LINE, 5417
_1380:
; rs232cmd.c 5418	}
	SYMB	LINE, 5418
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5419	
; rs232cmd.c 5420	/**************************************************************************/
; rs232cmd.c 5421	/* FactTSGenScHPhase																		 	     RS232CMD.C	*/
; rs232cmd.c 5422	/*																																				*/
; rs232cmd.c 5423	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5424	/* Revised:	  000727				     																					*/
; rs232cmd.c 5425	/*																																				*/
; rs232cmd.c 5426	/* Function:	--																													*/
; rs232cmd.c 5427	/* Remarks:		--																													*/
; rs232cmd.c 5428	/* Returns:		--																													*/
; rs232cmd.c 5429	/* Updates:		--																													*/
; rs232cmd.c 5430	/**************************************************************************/
; rs232cmd.c 5431	void FactTSGenScHPhase( void)
; rs232cmd.c 5432	{
	ALIGN	1
	SYMB	LINE, 5432
	PUBLIC	_FactTSGenScHPhase
_FactTSGenScHPhase:
	SYMB	TYPE, 644, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTSGenScHPhase", _FactTSGenScHPhase, #644, 0, 0, 48
	SYMB	ALAB, _FactTSGenScHPhase, #644
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#022H
	SYMB	SOFF, 38
	SYMB	IDEN, "buffer", -38, #606, 130, 5
	SYMB	IDEN, "ScHPhaseG", -8, #3, 130, 5
	SYMB	IDEN, "ScHPhaseM", -6, #3, 130, 5
; rs232cmd.c 5433		char buffer[30];
; rs232cmd.c 5434		UC ScHPhaseG, ScHPhaseM;
; rs232cmd.c 5435	
; rs232cmd.c 5436		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5436
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1392
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1392
; rs232cmd.c 5437		{
; rs232cmd.c 5438			if ( CmdRequest)
	SYMB	LINE, 5438
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1384
; rs232cmd.c 5439			{
; rs232cmd.c 5440				if ( ParCnt)
	SYMB	LINE, 5440
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1383
; rs232cmd.c 5441					SCPIError = SyntaxErr;
	SYMB	LINE, 5441
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1392
_1383:
; rs232cmd.c 5442				else
; rs232cmd.c 5443				{
; rs232cmd.c 5444					sprintf( buffer, "%u,%u\n", Calibration.CBCalibration.ScHPhaseG, 
; rs232cmd.c 5445																	    Calibration.CBCalibration.ScHPhaseM);
	SYMB	LINE, 5445
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+206 )
	MOV.W	R0,#SOF( _Calibration+206 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOV.B	ES,#SEG( _Calibration+212 )
	MOV.W	R1,#SOF( _Calibration+212 )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 40
	PUSH.W	R0
	SYMB	SOFF, 42
	MOV.W	R1,#SEG( _1301 )
	MOV.W	R0,#SOF( _1301 )
	PUSH.W	R0, R1
	SYMB	SOFF, 46
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 38
; rs232cmd.c 5446					rs232puts( buffer);
	SYMB	LINE, 5446
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5447				}
; rs232cmd.c 5448			}
	SYMB	LINE, 5448
	BR	_1392
_1384:
; rs232cmd.c 5449			else
; rs232cmd.c 5450			{
; rs232cmd.c 5451				if ( !PasswordProtected)
	SYMB	LINE, 5451
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1392
; rs232cmd.c 5452				{
; rs232cmd.c 5453					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &ScHPhaseG, &ScHPhaseM)) != 2))
	SYMB	LINE, 5453
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1385
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+32
	PUSH.W	R4, R5
	SYMB	SOFF, 42
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R3,#SEG( _1302 )
	MOV.W	R2,#SOF( _1302 )
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 38
	CMP.W	R0,#02H
	BEQ	_1386
_1385:
; rs232cmd.c 5454						SCPIError = SyntaxErr;
	SYMB	LINE, 5454
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1392
_1386:
; rs232cmd.c 5455					else
; rs232cmd.c 5456					{
; rs232cmd.c 5457						Calibration.CBCalibration.ScHPhaseG = ScHPhaseG;
	SYMB	LINE, 5457
	MOV.B	R0L,[R7+30]
	MOV.B	ES,#SEG( _Calibration+206 )
	MOV.W	R1,#SOF( _Calibration+206 )
	MOV.B	[R1],R0L
; rs232cmd.c 5458						Calibration.CBCalibration.ScHPhaseM = ScHPhaseM;
	SYMB	LINE, 5458
	MOV.B	R0L,[R7+32]
	MOV.B	ES,#SEG( _Calibration+212 )
	MOV.W	R1,#SOF( _Calibration+212 )
	MOV.B	[R1],R0L
; rs232cmd.c 5459					
; rs232cmd.c 5460						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5460
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5461	
; rs232cmd.c 5462						SetCBScHPhase( CBSetup.ScHPhase);
	SYMB	LINE, 5462
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R0,#SOF( _CBSetup+8 )
	MOV.W	R0,[R0]
	CALL	_SetCBScHPhase
; rs232cmd.c 5463					}
; rs232cmd.c 5464				}
; rs232cmd.c 5465			}
; rs232cmd.c 5466		}
	SYMB	LINE, 5466
_1392:
; rs232cmd.c 5467	}
	SYMB	LINE, 5467
	ADD.W	R7,#022H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5468	
; rs232cmd.c 5469	/**************************************************************************/
; rs232cmd.c 5470	/* FactAudioGenStatus																		 	     RS232CMD.C	*/
; rs232cmd.c 5471	/*																																				*/
; rs232cmd.c 5472	/* Author:		Kim Engedahl, DEV, 000505	    															*/
; rs232cmd.c 5473	/* Revised:	  000625				     																					*/
; rs232cmd.c 5474	/*																																				*/
; rs232cmd.c 5475	/* Function:	--																													*/
; rs232cmd.c 5476	/* Remarks:																																*/
; rs232cmd.c 5477	/* Returns:		--																													*/
; rs232cmd.c 5478	/* Updates:		--																													*/
; rs232cmd.c 5479	/**************************************************************************/
; rs232cmd.c 5480	void FactAudioGenStatus( void)
; rs232cmd.c 5481	{
	ALIGN	1
	SYMB	LINE, 5481
	PUBLIC	_FactAudioGenStatus
_FactAudioGenStatus:
	SYMB	TYPE, 645, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactAudioGenStatus", _FactAudioGenStatus, #645, 0, 0, 48
	SYMB	ALAB, _FactAudioGenStatus, #645
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#014H
	SYMB	SOFF, 24
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5482		char buffer[20];
; rs232cmd.c 5483	
; rs232cmd.c 5484		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5484
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1400
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1400
; rs232cmd.c 5485		{
; rs232cmd.c 5486			if ( CmdRequest)
	SYMB	LINE, 5486
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1396
; rs232cmd.c 5487			{
; rs232cmd.c 5488				if ( ParCnt)
	SYMB	LINE, 5488
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1395
; rs232cmd.c 5489					SCPIError = SyntaxErr;
	SYMB	LINE, 5489
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1400
_1395:
; rs232cmd.c 5490				else
; rs232cmd.c 5491				{
; rs232cmd.c 5492					sprintf( buffer, "%u\n", 0, AudioStatus());
	SYMB	LINE, 5492
	CALL	_AudioStatus
	MOVS.B	R0H,#00H
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 26
	MOV.W	R0,#00H
	PUSH.W	R0
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 32
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 24
; rs232cmd.c 5493					rs232puts( buffer);
	SYMB	LINE, 5493
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5494				}
; rs232cmd.c 5495			}
	SYMB	LINE, 5495
	BR	_1400
_1396:
; rs232cmd.c 5496			else
; rs232cmd.c 5497				SCPIError = SyntaxErr;
	SYMB	LINE, 5497
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 5498		}
	SYMB	LINE, 5498
_1400:
; rs232cmd.c 5499	}
	SYMB	LINE, 5499
	ADD.W	R7,#014H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5500	
; rs232cmd.c 5501	/**************************************************************************/
; rs232cmd.c 5502	/* FactAudioGenDate																			 	     RS232CMD.C	*/
; rs232cmd.c 5503	/*																																				*/
; rs232cmd.c 5504	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5505	/* Revised:	  000622				     																					*/
; rs232cmd.c 5506	/*																																				*/
; rs232cmd.c 5507	/* Function:	--																													*/
; rs232cmd.c 5508	/* Remarks:		--																													*/
; rs232cmd.c 5509	/* Returns:		--																													*/
; rs232cmd.c 5510	/* Updates:		--																													*/
; rs232cmd.c 5511	/**************************************************************************/
; rs232cmd.c 5512	void FactAudioGenDate( void)
; rs232cmd.c 5513	{
	ALIGN	1
	SYMB	LINE, 5513
	PUBLIC	_FactAudioGenDate
_FactAudioGenDate:
	SYMB	TYPE, 646, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactAudioGenDate", _FactAudioGenDate, #646, 0, 0, 48
	SYMB	ALAB, _FactAudioGenDate, #646
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5514		UI year, month, day;
; rs232cmd.c 5515		char buffer[20];
; rs232cmd.c 5516	
; rs232cmd.c 5517		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5517
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1412
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1412
; rs232cmd.c 5518		{
; rs232cmd.c 5519			if ( CmdRequest)
	SYMB	LINE, 5519
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1402
; rs232cmd.c 5520			{
; rs232cmd.c 5521				if ( ParCnt)
	SYMB	LINE, 5521
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1401
; rs232cmd.c 5522					SCPIError = SyntaxErr;
	SYMB	LINE, 5522
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1412
_1401:
; rs232cmd.c 5523				else
; rs232cmd.c 5524				{
; rs232cmd.c 5525					day = Calibration.AudioCalibration.Date % 100;
	SYMB	LINE, 5525
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R1,#SOF( _Calibration+218 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R4,#SOF( _Calibration+218 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R1,#SOF( _Calibration+218 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 5526					month = ( Calibration.AudioCalibration.Date / 100) % 100;
	SYMB	LINE, 5526
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 5527					year = ( Calibration.AudioCalibration.Date / 10000);
	SYMB	LINE, 5527
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R1,#SOF( _Calibration+218 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 5528	
; rs232cmd.c 5529					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 5529
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1174 )
	MOV.W	R0,#SOF( _1174 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 5530	
; rs232cmd.c 5531					rs232puts( buffer);
	SYMB	LINE, 5531
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5532				}
; rs232cmd.c 5533			}
	SYMB	LINE, 5533
	BR	_1412
_1402:
; rs232cmd.c 5534			else
; rs232cmd.c 5535			{
; rs232cmd.c 5536				if ( !PasswordProtected)
	SYMB	LINE, 5536
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1412
; rs232cmd.c 5537				{
; rs232cmd.c 5538					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 5538
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1403
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1175 )
	MOV.W	R2,#SOF( _1175 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1404
_1403:
; rs232cmd.c 5539						SCPIError = SyntaxErr;
	SYMB	LINE, 5539
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1412
_1404:
; rs232cmd.c 5540					else
; rs232cmd.c 5541					{
; rs232cmd.c 5542						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 5542
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1405
; rs232cmd.c 5543							SCPIError = ExecErr;
	SYMB	LINE, 5543
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1412
_1405:
; rs232cmd.c 5544						else
; rs232cmd.c 5545						{
; rs232cmd.c 5546							Calibration.AudioCalibration.Date = day + 100*month + 10000*year;
	SYMB	LINE, 5546
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R2,#SOF( _Calibration+218 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 5547						
; rs232cmd.c 5548						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5548
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5549						}
; rs232cmd.c 5550					}				
; rs232cmd.c 5551				}
; rs232cmd.c 5552			}
; rs232cmd.c 5553		}
	SYMB	LINE, 5553
_1412:
; rs232cmd.c 5554	}
	SYMB	LINE, 5554
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5555	
; rs232cmd.c 5556	/**************************************************************************/
; rs232cmd.c 5557	/* FactAudioGenLevel																		 	     RS232CMD.C	*/
; rs232cmd.c 5558	/*																																				*/
; rs232cmd.c 5559	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5560	/* Revised:	  000622				     																					*/
; rs232cmd.c 5561	/*																																				*/
; rs232cmd.c 5562	/* Function:	--																													*/
; rs232cmd.c 5563	/* Remarks:		--																													*/
; rs232cmd.c 5564	/* Returns:		--																													*/
; rs232cmd.c 5565	/* Updates:		--																													*/
; rs232cmd.c 5566	/**************************************************************************/
; rs232cmd.c 5567	void FactAudioGenLevel( void)
; rs232cmd.c 5568	{
	ALIGN	1
	SYMB	LINE, 5568
	PUBLIC	_FactAudioGenLevel
_FactAudioGenLevel:
	SYMB	TYPE, 647, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactAudioGenLevel", _FactAudioGenLevel, #647, 0, 0, 48
	SYMB	ALAB, _FactAudioGenLevel, #647
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#018H
	SYMB	SOFF, 28
	SYMB	IDEN, "buffer", -28, #563, 130, 5
	SYMB	IDEN, "AnalogLeft", -8, #3, 130, 5
	SYMB	IDEN, "AnalogRight", -6, #3, 130, 5
; rs232cmd.c 5569		char buffer[20];
; rs232cmd.c 5570		UC AnalogLeft, AnalogRight;
; rs232cmd.c 5571	
; rs232cmd.c 5572		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5572
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1424
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1424
; rs232cmd.c 5573		{
; rs232cmd.c 5574			if ( CmdRequest)
	SYMB	LINE, 5574
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1416
; rs232cmd.c 5575			{
; rs232cmd.c 5576				if ( ParCnt)
	SYMB	LINE, 5576
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1415
; rs232cmd.c 5577					SCPIError = SyntaxErr;
	SYMB	LINE, 5577
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1424
_1415:
; rs232cmd.c 5578				else
; rs232cmd.c 5579				{
; rs232cmd.c 5580					sprintf( buffer, "%u,%u\n", Calibration.AudioCalibration.AnalogLeftChannel, 
; rs232cmd.c 5581																	    Calibration.AudioCalibration.AnalogRightChannel);
	SYMB	LINE, 5581
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+222 )
	MOV.W	R0,#SOF( _Calibration+222 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOV.B	ES,#SEG( _Calibration+223 )
	MOV.W	R1,#SOF( _Calibration+223 )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 30
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R1,#SEG( _1301 )
	MOV.W	R0,#SOF( _1301 )
	PUSH.W	R0, R1
	SYMB	SOFF, 36
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 28
; rs232cmd.c 5582					rs232puts( buffer);
	SYMB	LINE, 5582
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5583				}
; rs232cmd.c 5584			}
	SYMB	LINE, 5584
	BR	_1424
_1416:
; rs232cmd.c 5585			else
; rs232cmd.c 5586			{
; rs232cmd.c 5587				if ( !PasswordProtected)
	SYMB	LINE, 5587
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1424
; rs232cmd.c 5588				{
; rs232cmd.c 5589					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &AnalogLeft, &AnalogRight)) != 2))
	SYMB	LINE, 5589
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1417
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+22
	PUSH.W	R4, R5
	SYMB	SOFF, 32
	PUSH.W	R2, R3
	SYMB	SOFF, 36
	MOV.W	R3,#SEG( _1302 )
	MOV.W	R2,#SOF( _1302 )
	PUSH.W	R2, R3
	SYMB	SOFF, 40
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 28
	CMP.W	R0,#02H
	BEQ	_1418
_1417:
; rs232cmd.c 5590						SCPIError = SyntaxErr;
	SYMB	LINE, 5590
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1424
_1418:
; rs232cmd.c 5591					else
; rs232cmd.c 5592					{
; rs232cmd.c 5593						Calibration.AudioCalibration.AnalogLeftChannel = AnalogLeft;
	SYMB	LINE, 5593
	MOV.B	R0L,[R7+20]
	MOV.B	ES,#SEG( _Calibration+222 )
	MOV.W	R1,#SOF( _Calibration+222 )
	MOV.B	[R1],R0L
; rs232cmd.c 5594						Calibration.AudioCalibration.AnalogRightChannel = AnalogRight;
	SYMB	LINE, 5594
	MOV.B	R0L,[R7+22]
	MOV.B	ES,#SEG( _Calibration+223 )
	MOV.W	R1,#SOF( _Calibration+223 )
	MOV.B	[R1],R0L
; rs232cmd.c 5595								
; rs232cmd.c 5596						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5596
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5597	
; rs232cmd.c 5598						WriteAnlAudioDACLevel( AnalogLeft, AnalogRight);
	SYMB	LINE, 5598
	MOV.B	R0L,[R7+20]
	MOV.B	R0H,[R7+22]
	CALL	_WriteAnlAudioDACLevel
; rs232cmd.c 5599					}
; rs232cmd.c 5600				}
; rs232cmd.c 5601			}
; rs232cmd.c 5602		}
	SYMB	LINE, 5602
_1424:
; rs232cmd.c 5603	}
	SYMB	LINE, 5603
	ADD.W	R7,#018H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5604	
; rs232cmd.c 5605	/**************************************************************************/
; rs232cmd.c 5606	/* FactPLDVersion																				 	     RS232CMD.C	*/
; rs232cmd.c 5607	/*																																				*/
; rs232cmd.c 5608	/* Author:		Kim Engedahl, DEV, 000505	    															*/
; rs232cmd.c 5609	/* Revised:	  000625				     																					*/
; rs232cmd.c 5610	/*																																				*/
; rs232cmd.c 5611	/* Function:	--																													*/
; rs232cmd.c 5612	/* Remarks:		NOTE! The video PLD version has not been implemented at this*/
; rs232cmd.c 5613	/*						this time, hence the return value of 0 does NOT reflect the	*/
; rs232cmd.c 5614	/*						video PLD version.																					*/
; rs232cmd.c 5615	/* Returns:		--																													*/
; rs232cmd.c 5616	/* Updates:		--																													*/
; rs232cmd.c 5617	/**************************************************************************/
; rs232cmd.c 5618	void FactPLDVersion( void)
; rs232cmd.c 5619	{
	ALIGN	1
	SYMB	LINE, 5619
	PUBLIC	_FactPLDVersion
_FactPLDVersion:
	SYMB	TYPE, 648, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactPLDVersion", _FactPLDVersion, #648, 0, 0, 48
	SYMB	ALAB, _FactPLDVersion, #648
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#014H
	SYMB	SOFF, 24
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5620		char buffer[20];
; rs232cmd.c 5621	
; rs232cmd.c 5622		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5622
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1432
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1432
; rs232cmd.c 5623		{
; rs232cmd.c 5624			if ( CmdRequest)
	SYMB	LINE, 5624
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1428
; rs232cmd.c 5625			{
; rs232cmd.c 5626				if ( ParCnt)
	SYMB	LINE, 5626
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1427
; rs232cmd.c 5627					SCPIError = SyntaxErr;
	SYMB	LINE, 5627
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1432
_1427:
; rs232cmd.c 5628				else
; rs232cmd.c 5629				{
; rs232cmd.c 5630					sprintf( buffer, "%u,%u\n", 0, pld_version());
	SYMB	LINE, 5630
	CALL	_pld_version
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 26
	MOV.W	R0,#00H
	PUSH.W	R0
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _1301 )
	MOV.W	R0,#SOF( _1301 )
	PUSH.W	R0, R1
	SYMB	SOFF, 32
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 24
; rs232cmd.c 5631					rs232puts( buffer);
	SYMB	LINE, 5631
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5632				}
; rs232cmd.c 5633			}
	SYMB	LINE, 5633
	BR	_1432
_1428:
; rs232cmd.c 5634			else
; rs232cmd.c 5635				SCPIError = SyntaxErr;
	SYMB	LINE, 5635
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 5636		}
	SYMB	LINE, 5636
_1432:
; rs232cmd.c 5637	}
	SYMB	LINE, 5637
	ADD.W	R7,#014H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5638	
; rs232cmd.c 5639	/**************************************************************************/
; rs232cmd.c 5640	/* FactTCXOStatus																				 	     RS232CMD.C	*/
; rs232cmd.c 5641	/*																																				*/
; rs232cmd.c 5642	/* Author:		Kim Engedahl, DEV, 000628	    															*/
; rs232cmd.c 5643	/* Revised:	  000628				     																					*/
; rs232cmd.c 5644	/*																																				*/
; rs232cmd.c 5645	/* Function:	--																													*/
; rs232cmd.c 5646	/* Remarks:																																*/
; rs232cmd.c 5647	/* Returns:		--																													*/
; rs232cmd.c 5648	/* Updates:		--																													*/
; rs232cmd.c 5649	/**************************************************************************/
; rs232cmd.c 5650	void FactTCXOStatus( void)
; rs232cmd.c 5651	{
	ALIGN	1
	SYMB	LINE, 5651
	PUBLIC	_FactTCXOStatus
_FactTCXOStatus:
	SYMB	TYPE, 649, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTCXOStatus", _FactTCXOStatus, #649, 0, 0, 48
	SYMB	ALAB, _FactTCXOStatus, #649
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#014H
	SYMB	SOFF, 24
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5652		char buffer[20];
; rs232cmd.c 5653	
; rs232cmd.c 5654		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5654
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1438
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1438
; rs232cmd.c 5655		{
; rs232cmd.c 5656			if ( CmdRequest)
	SYMB	LINE, 5656
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1434
; rs232cmd.c 5657			{
; rs232cmd.c 5658				if ( ParCnt)
	SYMB	LINE, 5658
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1433
; rs232cmd.c 5659					SCPIError = SyntaxErr;
	SYMB	LINE, 5659
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1438
_1433:
; rs232cmd.c 5660				else
; rs232cmd.c 5661				{
; rs232cmd.c 5662					sprintf( buffer, "%u\n", tcxo_status());
	SYMB	LINE, 5662
	CALL	_tcxo_status
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 26
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 30
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 24
; rs232cmd.c 5663					rs232puts( buffer);
	SYMB	LINE, 5663
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5664				}
; rs232cmd.c 5665			}
	SYMB	LINE, 5665
	BR	_1438
_1434:
; rs232cmd.c 5666			else
; rs232cmd.c 5667				SCPIError = SyntaxErr;
	SYMB	LINE, 5667
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 5668		}
	SYMB	LINE, 5668
_1438:
; rs232cmd.c 5669	}
	SYMB	LINE, 5669
	ADD.W	R7,#014H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5670	
; rs232cmd.c 5671	/**************************************************************************/
; rs232cmd.c 5672	/* FactMultiMediaChip																		 	     RS232CMD.C	*/
; rs232cmd.c 5673	/*																																				*/
; rs232cmd.c 5674	/* Author:		Kim Engedahl, DEV, 000505	    															*/
; rs232cmd.c 5675	/* Revised:	  000614				     																					*/
; rs232cmd.c 5676	/*																																				*/
; rs232cmd.c 5677	/* Function:	--																													*/
; rs232cmd.c 5678	/* Remarks:		--																													*/
; rs232cmd.c 5679	/* Returns:		--																													*/
; rs232cmd.c 5680	/* Updates:		--																													*/
; rs232cmd.c 5681	/**************************************************************************/
; rs232cmd.c 5682	void FactMultiMediaChip( void)
; rs232cmd.c 5683	{
	ALIGN	1
	SYMB	LINE, 5683
	PUBLIC	_FactMultiMediaChip
_FactMultiMediaChip:
	SYMB	TYPE, 650, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMultiMediaChip", _FactMultiMediaChip, #650, 0, 0, 48
	SYMB	ALAB, _FactMultiMediaChip, #650
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0AH
	SYMB	SOFF, 10
	SYMB	TYPE, 651, 'Z', #18, 1
	SYMB	IDEN, "test", -10, #651, 130, 5
	SYMB	TYPE, 653, 'Z', #3, 1
	SYMB	IDEN, "tmp", -6, #653, 130, 5
; rs232cmd.c 5684		UI test[2];
; rs232cmd.c 5685		UC tmp[2];
; rs232cmd.c 5686	
; rs232cmd.c 5687		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5687
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1449
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1449
; rs232cmd.c 5688		{
; rs232cmd.c 5689			if ( CmdRequest)
	SYMB	LINE, 5689
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1442
; rs232cmd.c 5690			{
; rs232cmd.c 5691				if ( ParCnt != 1)
	SYMB	LINE, 5691
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_1441
; rs232cmd.c 5692					SCPIError = SyntaxErr;
	SYMB	LINE, 5692
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1449
_1441:
; rs232cmd.c 5693				else
; rs232cmd.c 5694				{
; rs232cmd.c 5695					sscanf( Cmd, "%d", &test[0]);
	SYMB	LINE, 5695
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 14
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 18
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 10
; rs232cmd.c 5696	
; rs232cmd.c 5697					tmp[0] = test[0] & 0x0FF;
	SYMB	LINE, 5697
	MOV.W	R0,[R7]
	AND.B	R0L,#0FFH
	MOV.B	[R7+4],R0L
; rs232cmd.c 5698	
; rs232cmd.c 5699					TransmitIIC( 0x40, 1, tmp, IIC_PTV);
	SYMB	LINE, 5699
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+4
	MOV.B	R1L,#00H
	MOV.B	R0H,#01H
	MOV.B	R0L,#040H
	CALL	_TransmitIIC
; rs232cmd.c 5700					ReceiveIIC( 0x40, 1, &tmp[1], IIC_PTV);
	SYMB	LINE, 5700
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+5
	MOV.B	R0L,#040H
	MOV.B	R0H,#01H
	MOV.B	R1L,#00H
	CALL	_ReceiveIIC
; rs232cmd.c 5701	
; rs232cmd.c 5702					rs232printf( 12,"%03d,%03d\n", ( int) tmp[0], ( int) tmp[1]);
	SYMB	LINE, 5702
	MOV.W	R0,#0CH
	MOV.B	R1L,[R7+4]
	MOVS.B	R1H,#00H
	MOV.B	R2L,[R7+5]
	MOVS.B	R2H,#00H
	PUSH.W	R2
	SYMB	SOFF, 12
	PUSH.W	R1
	SYMB	SOFF, 14
	MOV.W	R3,#SEG( _1439 )
	MOV.W	R2,#SOF( _1439 )
	PUSH.W	R2, R3
	SYMB	SOFF, 18
	CALL	_rs232printf
	ADD.W	R7,#08H
	SYMB	SOFF, 10
; rs232cmd.c 5703				}
; rs232cmd.c 5704			}
	SYMB	LINE, 5704
	BR	_1449
_1442:
; rs232cmd.c 5705			else
; rs232cmd.c 5706			{
; rs232cmd.c 5707				if ( !PasswordProtected)
	SYMB	LINE, 5707
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1449
; rs232cmd.c 5708				{
; rs232cmd.c 5709					if ( ParCnt != 2)
	SYMB	LINE, 5709
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BEQ	_1443
; rs232cmd.c 5710						SCPIError = SyntaxErr;	
	SYMB	LINE, 5710
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1449
_1443:
; rs232cmd.c 5711					else
; rs232cmd.c 5712					{
; rs232cmd.c 5713						sscanf( Cmd, "%d,%d", &test[0], &test[1]);
	SYMB	LINE, 5713
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	PUSH.W	R4, R5
	SYMB	SOFF, 14
	PUSH.W	R2, R3
	SYMB	SOFF, 18
	MOV.W	R3,#SEG( _1440 )
	MOV.W	R2,#SOF( _1440 )
	PUSH.W	R2, R3
	SYMB	SOFF, 22
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 10
; rs232cmd.c 5714	
; rs232cmd.c 5715						tmp[0] = test[0] & 0x0FF;
	SYMB	LINE, 5715
	MOV.W	R0,[R7]
	AND.B	R0L,#0FFH
	MOV.B	[R7+4],R0L
; rs232cmd.c 5716						tmp[1] = test[1] & 0x0FF;
	SYMB	LINE, 5716
	MOV.W	R0,[R7+2]
	AND.B	R0L,#0FFH
	MOV.B	[R7+5],R0L
; rs232cmd.c 5717	
; rs232cmd.c 5718						TransmitIIC( 0x40, 2, tmp, IIC_PTV);
	SYMB	LINE, 5718
	MOV.B	R0H,#02H
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+4
	MOV.B	R1L,#00H
	MOV.W	R3,R5
	MOV.W	R2,R4
	MOV.B	R0L,#040H
	CALL	_TransmitIIC
; rs232cmd.c 5719	
; rs232cmd.c 5720						TransmitIIC( 0x40, 1, tmp, IIC_PTV);
	SYMB	LINE, 5720
	MOV.B	R1L,#00H
	MOV.B	R0H,#01H
	MOV.B	R0L,#040H
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_TransmitIIC
; rs232cmd.c 5721						ReceiveIIC( 0x40, 1, &tmp[1], IIC_PTV);
	SYMB	LINE, 5721
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+5
	MOV.B	R0L,#040H
	MOV.B	R0H,#01H
	MOV.B	R1L,#00H
	CALL	_ReceiveIIC
; rs232cmd.c 5722	
; rs232cmd.c 5723						rs232printf( 12,"%03d,%03d\n", ( int) tmp[0], ( int) tmp[1]);
	SYMB	LINE, 5723
	MOV.W	R0,#0CH
	MOV.B	R1L,[R7+4]
	MOVS.B	R1H,#00H
	MOV.B	R2L,[R7+5]
	MOVS.B	R2H,#00H
	PUSH.W	R2
	SYMB	SOFF, 12
	PUSH.W	R1
	SYMB	SOFF, 14
	MOV.W	R3,#SEG( _1439 )
	MOV.W	R2,#SOF( _1439 )
	PUSH.W	R2, R3
	SYMB	SOFF, 18
	CALL	_rs232printf
	ADD.W	R7,#08H
	SYMB	SOFF, 10
; rs232cmd.c 5724					}
; rs232cmd.c 5725				}
; rs232cmd.c 5726			}
; rs232cmd.c 5727		}
	SYMB	LINE, 5727
_1449:
; rs232cmd.c 5728	}
	SYMB	LINE, 5728
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5729	
; rs232cmd.c 5730	/**************************************************************************/
; rs232cmd.c 5731	/* FindParameter														 							     RS232CMD.C	*/
; rs232cmd.c 5732	/*																																				*/
; rs232cmd.c 5733	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 5734	/* Revised:		000603				     																					*/
; rs232cmd.c 5735	/*																																				*/
; rs232cmd.c 5736	/* Function:	Find the character defined parameter												*/
; rs232cmd.c 5737	/* Remarks:		--																													*/
; rs232cmd.c 5738	/* Returns:		The array number containing the parameter or max. array+1		*/
; rs232cmd.c 5739	/* Updates:		--																													*/
; rs232cmd.c 5740	/**************************************************************************/
; rs232cmd.c 5741	int FindParameter( char* par, struct PAR_STRUCT code* ParPtr)
; rs232cmd.c 5742	{
	ALIGN	1
	SYMB	LINE, 5742
	PUBLIC	_FindParameter
_FindParameter:
	SYMB	TYPE, 655, 'X', 12, #16, 30, 2, #259, #521
	SYMB	GFUN, "FindParameter", _FindParameter, #655, 0, 0, 112
	SYMB	ALAB, _FindParameter, #655
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#0CH
	SYMB	SOFF, 10
	SYMB	LTIM, "par", 3, 0, 2253
	SYMB	LTIM, "ParPtr", 11, 0, 2253
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "par", 3, 0, 2125
	SYMB	LTIM, "par", 19, 0, 2253
	SYMB	IDEN, "par", 19, #259, 0, 2061
	SYMB	IDEN, "ParPtr", 11, #521, 0, 2061
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; rs232cmd.c 5743		int tmp = 0;
	SYMB	LINE, 5743
	MOV.W	R6,#00H
	SYMB	LTIM, "tmp", 26, 0, 205
; rs232cmd.c 5744	
; rs232cmd.c 5745		while ( ParPtr)
	SYMB	LINE, 5745
	MOV.W	R1,R3
	MOV.W	R0,R2
	OR.W	R3,R2
	SYMB	LTIM, "ParPtr", 11, 0, 2125
	SYMB	LTIM, "ParPtr", 3, 0, 2253
	BEQ	_1456
_1452:
; rs232cmd.c 5746		{
; rs232cmd.c 5747			if (( !Cstrcmp( par, ParPtr->LongName)) || ( !Cstrcmp( par, ParPtr->ShortName)))
	SYMB	LINE, 5747
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_1458
	ADDS.B	CS,#01H
_1458:
	MOVC.W	R3,[R0+]
	SYMB	LTIM, "ParPtr", 3, 0, 2125
	SYMB	LTIM, "ParPtr", -10, 130, 2245
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "par", 19, 0, 2125
	SYMB	LTIM, "par", 3, 0, 2253
	CALL	_Cstrcmp
	SYMB	LTIM, "par", 3, 0, 2125
	SYMB	LTIM, "par", 19, 0, 2253
	OR.W	R0,R0
	BEQ	_1453
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	ADD.W	R0,#04H
	ADDC.W	R1,#00H
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_1459
	ADDS.B	CS,#01H
_1459:
	MOVC.W	R3,[R0+]
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "par", 19, 0, 2125
	SYMB	LTIM, "par", 3, 0, 2253
	CALL	_Cstrcmp
	SYMB	LTIM, "par", 3, 0, 2125
	SYMB	LTIM, "par", 19, 0, 2253
	OR.W	R0,R0
	BNE	_1454
_1453:
; rs232cmd.c 5748				return( tmp);
	SYMB	LINE, 5748
	MOV.W	R0,R6
	SYMB	LTIM, "tmp", 26, 0, 77
	SYMB	LTIM, "tmp", 2, 0, 205
	BR	_1457
_1454:
	SYMB	LTIM, "par", 19, 0, 2125
	SYMB	LTIM, "par", 19, 0, 2253
	SYMB	LTIM, "ParPtr", -10, 130, 2117
	SYMB	LTIM, "ParPtr", -10, 130, 2245
	SYMB	LTIM, "tmp", 2, 0, 77
	SYMB	LTIM, "tmp", 26, 0, 205
; rs232cmd.c 5749	
; rs232cmd.c 5750			ParPtr = ParPtr->SameLevel;
	SYMB	LINE, 5750
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	ADD.W	R0,#08H
	ADDC.W	R1,#00H
	SYMB	LTIM, "ParPtr", -10, 130, 2117
	SYMB	LTIM, "ParPtr", 3, 0, 2253
	SYMB	LTIM, "ParPtr", 3, 0, 2125
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_1460
	ADDS.B	CS,#01H
_1460:
	MOVC.W	R3,[R0+]
	SYMB	LTIM, "ParPtr", 11, 0, 2253
; rs232cmd.c 5751	
; rs232cmd.c 5752			if ( tmp < 255)
	SYMB	LINE, 5752
	CMP.W	R6,#0FFH
	BGE	_1456
; rs232cmd.c 5753				tmp++;
	SYMB	LINE, 5753
	ADDS.W	R6,#01H
	SYMB	LTIM, "tmp", 26, 0, 77
	SYMB	LTIM, "tmp", 26, 0, 205
	SYMB	LINE, 5745
	MOV.W	R1,R3
	MOV.W	R0,R2
	OR.W	R3,R2
	SYMB	LTIM, "ParPtr", 11, 0, 2125
	SYMB	LTIM, "ParPtr", 3, 0, 2253
	BNE	_1452
; rs232cmd.c 5754			else
; rs232cmd.c 5755				break;
; rs232cmd.c 5756		}
	SYMB	LINE, 5756
_1456:
; rs232cmd.c 5757	
; rs232cmd.c 5758		return( -1);
	SYMB	LINE, 5758
	MOV.W	R0,#0FFFFH
	SYMB	LTIM, "ParPtr", 3, 0, 2125
; rs232cmd.c 5759	}
	SYMB	LINE, 5759
_1457:
	ADDS.W	R7,#04H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "tmp", 26, 0, 77
	SYMB	LTIM, "par", 19, 0, 2125
	SYMB	EFUN
; rs232cmd.c 5760	
; rs232cmd.c 5761	
; rs232cmd.c 5762	/**************************************************************************/
; rs232cmd.c 5763	/* FLTToSamples															  								 RS232CMD.C */
; rs232cmd.c 5764	/*																																				*/
; rs232cmd.c 5765	/* Author:		Kim Engedahl, DEV, 970211	    															*/
; rs232cmd.c 5766	/* Revised:		000530				     																					*/
; rs232cmd.c 5767	/*																																				*/	
; rs232cmd.c 5768	/* Function:	--																													*/
; rs232cmd.c 5769	/* Remarks:		PAL Range: 1728*256, NTSC Range: 1716*256										*/
; rs232cmd.c 5770	/* Returns:		FLT in samples, or -1 if illegal														*/
; rs232cmd.c 5771	/* Updates:		--																													*/
; rs232cmd.c 5772	/***************************************************************************/
; rs232cmd.c 5773	long FLTToSamples( UC system, int F, int L, float T) {
	ALIGN	1
	SYMB	LINE, 5773
	PUBLIC	_FLTToSamples
_FLTToSamples:
	SYMB	TYPE, 656, 'X', 12, #6, 30, 4, #3, #16, #16, #10
	SYMB	GFUN, "FLTToSamples", _FLTToSamples, #656, 0, 0, 112
	SYMB	ALAB, _FLTToSamples, #656
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#018H
	SYMB	SOFF, 30
	SYMB	LTIM, "system", 0, 0, 2253
	MOV.B	[R7+18],R0L
	SYMB	LTIM, "system", 0, 0, 2125
	SYMB	LTIM, "system", -12, 130, 2245
	MOV.W	[R7+14],R2
	SYMB	IDEN, "system", -7, #3, 130, 2053
	SYMB	IDEN, "F", -1, #16, 130, 2053
	SYMB	LTIM, "F", -1, 0, 2117
	SYMB	IDEN, "L", -1, #16, 130, 2053
	SYMB	LTIM, "L", -1, 0, 2117
	SYMB	IDEN, "T", 4, #10, 130, 2053
	SYMB	IDEN, "samples", -10, #6, 130, 5
	SYMB	IDEN, "minus", -1, #2, 130, 5
	SYMB	LTIM, "minus", -1, 0, 69
; rs232cmd.c 5774	
; rs232cmd.c 5775		long samples;
; rs232cmd.c 5776		char minus;
; rs232cmd.c 5777	
; rs232cmd.c 5778		if (( F == 0) && ( L == 0) && ( T == 0))
	SYMB	LINE, 5778
	MOV.W	[R7+16],R1
	OR.W	R1,R1
	BNE	_1467
	MOV.W	R0,[R7+14]
	BNE	_1467
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BNE	_1467
; rs232cmd.c 5779			return( 0);
	SYMB	LINE, 5779
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_1534
_1467:
	SYMB	LTIM, "system", -12, 130, 2117
	SYMB	LTIM, "system", -12, 130, 2245
; rs232cmd.c 5780	
; rs232cmd.c 5781		if (( F <= 0) && ( L <= 0) && ( T <= 0))
	SYMB	LINE, 5781
	CMP.W	[R7+16],#00H
	BGT	_1470
	CMP.W	[R7+14],#00H
	BGT	_1470
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BGT	_1470
; rs232cmd.c 5782		{
; rs232cmd.c 5783			minus = 1;
	SYMB	LINE, 5783
	MOV.B	[R7+12],#01H
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5784		}
	SYMB	LINE, 5784
	BR	_1474
_1470:
; rs232cmd.c 5785		else
; rs232cmd.c 5786		{
; rs232cmd.c 5787			if (( F >= 0) && ( L >= 0) && ( T >= 0))
	SYMB	LINE, 5787
	CMP.W	[R7+16],#00H
	BLT	_1472
	CMP.W	[R7+14],#00H
	BLT	_1472
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BGE	_1473
; rs232cmd.c 5788				minus = 0;
	SYMB	LINE, 5788
_1472:
; rs232cmd.c 5789			else
; rs232cmd.c 5790				return( -1);
	SYMB	LINE, 5790
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
	SYMB	LINE, 5788
_1473:
	SYMB	LTIM, "system", -12, 130, 2117
	SYMB	LTIM, "system", -12, 130, 2245
	MOV.B	[R7+12],#00H
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5791		}
	SYMB	LINE, 5791
_1474:
; rs232cmd.c 5792	
; rs232cmd.c 5793																				// 1 sample = (1/27MHz)/256
; rs232cmd.c 5794		samples = ( long)(( T*6912L)/1000L + 0.5);	
	SYMB	LINE, 5794
	MOV.W	R1,#045D8H
	MOV.W	R0,#00H
	MOV.W	R3,[R7+36]
	MOV.W	R2,[R7+34]
	FCALL	__MUL_SPF
	MOV.W	R3,#0447AH
	MOV.W	R2,#00H
	FCALL	__DIV_SPF
	FCALL	__SPF2DPF
	MOV.W	[R7+10],#03FE0H
	MOV.W	[R7+8],#00H
	MOV.W	[R7+6],#00H
	MOV.W	[R7+4],#00H
	LEA	R6,R7+4
	FCALL	__ADD_DPF
	FCALL	__DPF2L
	MOV.W	[R7+22],R1
	MOV.W	[R7+20],R0
; rs232cmd.c 5795	
; rs232cmd.c 5796		if ( system < NTSC_US)									// If selected system is PAL..
	SYMB	LINE, 5796
	MOV.B	R2L,[R7+18]
	CMP.B	R2L,#02H
	SYMB	LTIM, "system", -12, 130, 2117
	SYMB	LTIM, "system", 8, 0, 2253
	BCC	_1499
	MOV.W	[R7+10],R1
	MOV.W	[R7+8],R0
; rs232cmd.c 5797		{
; rs232cmd.c 5798	
; rs232cmd.c 5799			if ( labs( samples) > 442367L)	 	// Test for illegal time var
	SYMB	LINE, 5799
	CALL	_labs
	SYMB	LTIM, "system", 8, 0, 2125
	CMP.W	R1,#06H
	BLT	_1475
	BGT	_1540
	CMP.W	R0,#0BFFFH
	BL	_1475
_1540:
; rs232cmd.c 5800				return( -1);
	SYMB	LINE, 5800
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
_1475:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5801	
; rs232cmd.c 5802			switch ( F)												// Test for illegal field & line
	SYMB	LINE, 5802
	CMP.W	[R7+16],#00H
	BEQ	_1476
	CMP.W	[R7+16],#0FFFFH
	BEQ	_1481
	CMP.W	[R7+16],#0FFFDH
	BEQ	_1481
	CMP.W	[R7+16],#02H
	BEQ	_1481
	CMP.W	[R7+16],#0FFFEH
	BEQ	_1484
	CMP.W	[R7+16],#01H
	BEQ	_1484
	CMP.W	[R7+16],#03H
	BEQ	_1484
	CMP.W	[R7+16],#04H
	BEQ	_1485
	BR	_1487
; rs232cmd.c 5803			{
; rs232cmd.c 5804				case 0:
	SYMB	LINE, 5804
_1476:
; rs232cmd.c 5805					if (( minus && ( L < -311)) || ( !minus && ( L > 312)))
	SYMB	LINE, 5805
	MOV.B	R0L,[R7+12]
	BEQ	_1477
	CMP.W	[R7+14],#0FEC9H
	BLT	_1478
_1477:
	MOV.B	R0L,[R7+12]
	BNE	_1492
	CMP.W	[R7+14],#0138H
	BLE	_1492
_1478:
; rs232cmd.c 5806						return( -1);
	SYMB	LINE, 5806
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5807					break;
; rs232cmd.c 5808	
; rs232cmd.c 5809				case -1:
; rs232cmd.c 5810				case -3:
; rs232cmd.c 5811				case 2:
	SYMB	LINE, 5811
_1481:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5812					if ( abs( L) > 312)
	SYMB	LINE, 5812
	MOV.W	R0,[R7+14]
	CALL	_abs
	CMP.W	R0,#0138H
	BLE	_1492
; rs232cmd.c 5813						return( -1);
	SYMB	LINE, 5813
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5814					break;
; rs232cmd.c 5815	
; rs232cmd.c 5816				case -2:
; rs232cmd.c 5817				case 1:
; rs232cmd.c 5818				case 3:
	SYMB	LINE, 5818
_1484:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5819					if ( abs( L) > 311)
	SYMB	LINE, 5819
	MOV.W	R0,[R7+14]
	CALL	_abs
	CMP.W	R0,#0137H
	BLE	_1492
; rs232cmd.c 5820						return( -1);
	SYMB	LINE, 5820
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5821					break;
; rs232cmd.c 5822	
; rs232cmd.c 5823				case 4:
	SYMB	LINE, 5823
_1485:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5824					if (( L > 0) || ( T > 0.0))
	SYMB	LINE, 5824
	CMP.W	[R7+14],#00H
	BGT	_1486
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__SPF2DPF
	MOV.W	[R7+6],#00H
	MOV.W	[R7+4],#00H
	MOV.W	[R7+2],#00H
	MOV.W	[R7],#00H
	MOV.W	R6,R7
	FCALL	__CMP_DPF
	CMP.B	R0L,#01H
	BNE	_1492
_1486:
; rs232cmd.c 5825						return( -1);
	SYMB	LINE, 5825
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5826					break;
; rs232cmd.c 5827	
; rs232cmd.c 5828				default:
	SYMB	LINE, 5828
_1487:
; rs232cmd.c 5829					return( -1);
	SYMB	LINE, 5829
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5830			}
	SYMB	LINE, 5830
_1492:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5831	
; rs232cmd.c 5832			if ( !minus)											// if posistive delay..
	SYMB	LINE, 5832
	MOV.B	R0L,[R7+12]
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", 0, 0, 205
	BNE	_1493
; rs232cmd.c 5833			{
; rs232cmd.c 5834				if ( F % 2)
	SYMB	LINE, 5834
	MOV.W	R0,[R7+16]
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#02H
	OR.W	R1,R1
	BEQ	_1498
; rs232cmd.c 5835				{
; rs232cmd.c 5836					L += 313;
	SYMB	LINE, 5836
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0139H
	SYMB	LTIM, "minus", 0, 0, 77
	MOV.W	[R7+14],R0
; rs232cmd.c 5837					F--;
	SYMB	LINE, 5837
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#0FH
	MOV.W	[R7+16],R0
; rs232cmd.c 5838				}
; rs232cmd.c 5839			}
	SYMB	LINE, 5839
	BR	_1498
_1493:
; rs232cmd.c 5840			else															// ..else delay is negative
; rs232cmd.c 5841			{
; rs232cmd.c 5842				F += 7;
	SYMB	LINE, 5842
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#07H
; rs232cmd.c 5843	
; rs232cmd.c 5844				samples += 442367L;
	SYMB	LINE, 5844
	MOV.W	R3,[R7+10]
	MOV.W	R2,[R7+8]
	ADD.W	R2,#0BFFFH
	ADDC.W	R3,#06H
	MOV.W	[R7+22],R3
	MOV.W	[R7+20],R2
; rs232cmd.c 5845	
; rs232cmd.c 5846				if ( F % 2) {
	SYMB	LINE, 5846
	MOV.W	[R7+16],R0
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#02H
	OR.W	R1,R1
	BEQ	_1494
; rs232cmd.c 5847					L += 624;
	SYMB	LINE, 5847
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0270H
	MOV.W	[R7+14],R0
; rs232cmd.c 5848					F--;
	SYMB	LINE, 5848
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#0FH
	MOV.W	[R7+16],R0
; rs232cmd.c 5849				}
	SYMB	LINE, 5849
	BR	_1495
_1494:
; rs232cmd.c 5850				else
; rs232cmd.c 5851					L += 312;
	SYMB	LINE, 5851
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0138H
	MOV.W	[R7+14],R0
_1495:
; rs232cmd.c 5852	
; rs232cmd.c 5853				if ( T == 0)
	SYMB	LINE, 5853
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BNE	_1498
; rs232cmd.c 5854					samples++;
	SYMB	LINE, 5854
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,#01H
	ADDC.W	R1,#00H
	MOV.W	[R7+22],R1
	MOV.W	[R7+20],R0
; rs232cmd.c 5855			}
	SYMB	LINE, 5855
_1498:
; rs232cmd.c 5856	
; rs232cmd.c 5857			samples += F*138240000L + L*442368L;
	SYMB	LINE, 5857
	MOV.W	R0,[R7+16]
	SEXT.W	R1
	MOV.W	R3,R1
	MOV.W	R2,R0
	ASL.D	R2,#05H
	ADD.W	R2,R0
	ADDC.W	R3,R1
	ASL.D	R2,#05H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#02H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#02H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#0DH
	MOV.W	R0,[R7+14]
	MOV.W	R4,R0
	SEXT.W	R5
	MOV.W	R1,R5
	MOV.W	R0,R4
	ASL.D	R0,#03H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#0EH
	ADD.W	R2,R0
	ADDC.W	R3,R1
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,R2
	ADDC.W	R1,R3
; rs232cmd.c 5858		}
	SYMB	LINE, 5858
	BR	_1520
_1499:
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5859		else																// ..else system is NTSC
; rs232cmd.c 5860		{
; rs232cmd.c 5861	
; rs232cmd.c 5862			if ( labs( samples) > 439295L)		// Test for illegal time var
	SYMB	LINE, 5862
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	CALL	_labs
	CMP.W	R1,#06H
	BLT	_1500
	BGT	_1546
	CMP.W	R0,#0B3FFH
	BL	_1500
_1546:
; rs232cmd.c 5863				return( -1);
	SYMB	LINE, 5863
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
_1500:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5864	
; rs232cmd.c 5865			switch ( F)												// Test for illegal field & line
	SYMB	LINE, 5865
	CMP.W	[R7+16],#00H
	BEQ	_1501
	CMP.W	[R7+16],#0FFFFH
	BEQ	_1504
	CMP.W	[R7+16],#01H
	BEQ	_1505
	CMP.W	[R7+16],#02H
	BEQ	_1506
	BR	_1508
; rs232cmd.c 5866			{
; rs232cmd.c 5867				case 0:
	SYMB	LINE, 5867
_1501:
; rs232cmd.c 5868					if (( minus && ( L < -261)) || ( !minus && ( L > 262)))
	SYMB	LINE, 5868
	MOV.B	R0L,[R7+12]
	BEQ	_1502
	CMP.W	[R7+14],#0FEFBH
	BLT	_1503
_1502:
	MOV.B	R0L,[R7+12]
	BNE	_1513
	CMP.W	[R7+14],#0106H
	BLE	_1513
_1503:
; rs232cmd.c 5869						return( -1);
	SYMB	LINE, 5869
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5870					break;
; rs232cmd.c 5871	
; rs232cmd.c 5872				case -1:
	SYMB	LINE, 5872
_1504:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5873					if ( abs( L) > 262)
	SYMB	LINE, 5873
	MOV.W	R0,[R7+14]
	CALL	_abs
	CMP.W	R0,#0106H
	BLE	_1513
; rs232cmd.c 5874						return( -1);
	SYMB	LINE, 5874
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5875					break;
; rs232cmd.c 5876	
; rs232cmd.c 5877				case 1:
	SYMB	LINE, 5877
_1505:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5878					if ( abs( L) > 261)
	SYMB	LINE, 5878
	MOV.W	R0,[R7+14]
	CALL	_abs
	CMP.W	R0,#0105H
	BLE	_1513
; rs232cmd.c 5879						return( -1);
	SYMB	LINE, 5879
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5880					break;
; rs232cmd.c 5881	
; rs232cmd.c 5882				case 2:
	SYMB	LINE, 5882
_1506:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5883					if (( L > 0) || ( T > 0.0))
	SYMB	LINE, 5883
	CMP.W	[R7+14],#00H
	BGT	_1507
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__SPF2DPF
	MOV.W	[R7+10],#00H
	MOV.W	[R7+8],#00H
	MOV.W	[R7+6],#00H
	MOV.W	[R7+4],#00H
	LEA	R6,R7+4
	FCALL	__CMP_DPF
	CMP.B	R0L,#01H
	BNE	_1513
_1507:
; rs232cmd.c 5884						return( -1);
	SYMB	LINE, 5884
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5885					break;
; rs232cmd.c 5886	
; rs232cmd.c 5887				default:
	SYMB	LINE, 5887
_1508:
; rs232cmd.c 5888					return( -1);
	SYMB	LINE, 5888
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5889			}
	SYMB	LINE, 5889
_1513:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5890	
; rs232cmd.c 5891			if ( !minus)										// if posistive delay..
	SYMB	LINE, 5891
	MOV.B	R0L,[R7+12]
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", 0, 0, 205
	BNE	_1514
; rs232cmd.c 5892			{						
; rs232cmd.c 5893	
; rs232cmd.c 5894				if ( F % 2)
	SYMB	LINE, 5894
	MOV.W	R0,[R7+16]
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#02H
	OR.W	R1,R1
	BEQ	_1519
; rs232cmd.c 5895				{
; rs232cmd.c 5896					L += 263;
	SYMB	LINE, 5896
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0107H
	SYMB	LTIM, "minus", 0, 0, 77
	MOV.W	[R7+14],R0
; rs232cmd.c 5897					F--;
	SYMB	LINE, 5897
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#0FH
	MOV.W	[R7+16],R0
; rs232cmd.c 5898				}
; rs232cmd.c 5899			}
	SYMB	LINE, 5899
	BR	_1519
_1514:
; rs232cmd.c 5900			else															// ..else delay is negative
; rs232cmd.c 5901			{																	
; rs232cmd.c 5902				F += 3;
	SYMB	LINE, 5902
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#03H
; rs232cmd.c 5903	
; rs232cmd.c 5904				samples += 439295;
	SYMB	LINE, 5904
	MOV.W	R3,[R7+22]
	MOV.W	R2,[R7+20]
	ADD.W	R2,#0B3FFH
	ADDC.W	R3,#06H
	MOV.W	[R7+22],R3
	MOV.W	[R7+20],R2
; rs232cmd.c 5905	
; rs232cmd.c 5906				if ( F % 2)
	SYMB	LINE, 5906
	MOV.W	[R7+16],R0
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#02H
	OR.W	R1,R1
	BEQ	_1515
; rs232cmd.c 5907				{
; rs232cmd.c 5908					L += 524;
	SYMB	LINE, 5908
	MOV.W	R0,[R7+14]
	ADD.W	R0,#020CH
	MOV.W	[R7+14],R0
; rs232cmd.c 5909					F--;
	SYMB	LINE, 5909
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#0FH
	MOV.W	[R7+16],R0
; rs232cmd.c 5910				}
	SYMB	LINE, 5910
	BR	_1516
_1515:
; rs232cmd.c 5911				else
; rs232cmd.c 5912					L += 262;
	SYMB	LINE, 5912
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0106H
	MOV.W	[R7+14],R0
_1516:
; rs232cmd.c 5913	
; rs232cmd.c 5914				if ( T == 0)
	SYMB	LINE, 5914
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BNE	_1519
; rs232cmd.c 5915					samples++;
	SYMB	LINE, 5915
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,#01H
	ADDC.W	R1,#00H
	MOV.W	[R7+22],R1
	MOV.W	[R7+20],R0
; rs232cmd.c 5916			}
	SYMB	LINE, 5916
_1519:
; rs232cmd.c 5917	
; rs232cmd.c 5918			samples += F*115315200L + L*439296L;
	SYMB	LINE, 5918
	MOV.W	R0,[R7+16]
	SEXT.W	R1
	MOV.W	R3,R1
	MOV.W	R2,R0
	ASL.D	R2,#03H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#03H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#06H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#03H
	ADD.W	R2,R0
	ADDC.W	R3,R1
	ASL.D	R2,#03H
	ADD.W	R2,R0
	ADDC.W	R3,R1
	ASL.D	R2,#09H
	MOV.W	R0,[R7+14]
	MOV.W	R4,R0
	SEXT.W	R5
	MOV.W	R1,R5
	MOV.W	R0,R4
	ASL.D	R0,#03H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	ADD.W	R0,R4
	ADDC.W	R1,R5
	ASL.D	R0,#0AH
	ADD.W	R2,R0
	ADDC.W	R3,R1
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,R2
	ADDC.W	R1,R3
; rs232cmd.c 5919		}
	SYMB	LINE, 5919
_1520:
; rs232cmd.c 5920	
; rs232cmd.c 5921		return( samples);
; rs232cmd.c 5922	}
	SYMB	LINE, 5922
_1534:
	ADD.W	R7,#018H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5923	
; rs232cmd.c 5924	/**************************************************************************/
; rs232cmd.c 5925	/* PrintSamplesToFLT												  								 RS232CMD.C */
; rs232cmd.c 5926	/*																																				*/
; rs232cmd.c 5927	/* Author:		Kim Engedahl, DEV, 970211	    															*/
; rs232cmd.c 5928	/* Revised:		000530												     													*/
; rs232cmd.c 5929	/*																																				*/
; rs232cmd.c 5930	/* Function:	--																													*/
; rs232cmd.c 5931	/* Remarks:		PAL Range: 1728*256, NTSC Range: 1716*256										*/
; rs232cmd.c 5932	/* Returns:		--																													*/
; rs232cmd.c 5933	/* Updates:		--																													*/
; rs232cmd.c 5934	/**************************************************************************/
; rs232cmd.c 5935	void PrintSamplesToFLT( UC system, long samples) {
	ALIGN	1
	SYMB	LINE, 5935
	PUBLIC	_PrintSamplesToFLT
_PrintSamplesToFLT:
	SYMB	TYPE, 657, 'X', 12, #1, 30, 2, #3, #6
	SYMB	GFUN, "PrintSamplesToFLT", _PrintSamplesToFLT, #657, 0, 0, 112
	SYMB	ALAB, _PrintSamplesToFLT, #657
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#0AH
	SYMB	SOFF, 12
	SYMB	LTIM, "system", 0, 0, 2253
	SYMB	IDEN, "system", 0, #3, 0, 2061
	SYMB	IDEN, "samples", -1, #6, 130, 2053
	SYMB	LTIM, "samples", -1, 0, 2117
	SYMB	IDEN, "sign", -1, #2, 130, 5
	SYMB	LTIM, "sign", -1, 0, 69
	SYMB	IDEN, "frame", -1, #16, 130, 5
	SYMB	LTIM, "frame", -1, 0, 69
	SYMB	IDEN, "field", -1, #16, 130, 5
	SYMB	LTIM, "field", -1, 0, 69
	SYMB	IDEN, "line", -8, #16, 130, 5
; rs232cmd.c 5936	
; rs232cmd.c 5937		char sign;
; rs232cmd.c 5938		int frame, field, line;
; rs232cmd.c 5939	
; rs232cmd.c 5940		sign = '+';
	SYMB	LINE, 5940
	MOV.B	[R7+2],#02BH
	SYMB	LTIM, "sign", -10, 130, 197
; rs232cmd.c 5941	
; rs232cmd.c 5942		if ( system < NTSC_US)							// If system selected is PAL..
	SYMB	LINE, 5942
	CMP.B	R0L,#02H
	BCC	_1557
; rs232cmd.c 5943		{
; rs232cmd.c 5944			// 552960000 = 2*625*1728*256
; rs232cmd.c 5945			// 276480000 = 625*1728*256
; rs232cmd.c 5946			// 442368    = 1728*256
; rs232cmd.c 5947	
; rs232cmd.c 5948			if ( samples >= 552960000L)
	SYMB	LINE, 5948
	MOV.W	R5,R3
	MOV.W	R4,R2
	CMP.W	R3,#020F5H
	BLT	_1556
	BGT	_1569
	CMP.W	R2,#08000H
	BCS	_1556
_1569:
; rs232cmd.c 5949			{
; rs232cmd.c 5950				samples--;
	SYMB	LINE, 5950
	SUB.W	R4,#01H
	SUBB.W	R5,#00H
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "system", 0, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
; rs232cmd.c 5951	
; rs232cmd.c 5952				frame = samples / 276480000L;
	SYMB	LINE, 5952
	MOV.W	R3,#0107AH
	MOV.W	R2,#0C000H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	SYMB	LTIM, "samples", 3, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
	MOV.W	[R7],R0
	SYMB	LTIM, "frame", -12, 130, 197
; rs232cmd.c 5953				line = ( samples % 276480000L) /  442368L;
	SYMB	LINE, 5953
	MOV.W	R3,#0107AH
	MOV.W	R2,#0C000H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
	SYMB	LTIM, "samples", 3, 0, 2125
	MOV.W	R3,#06H
	MOV.W	R2,#0C000H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	MOV.W	R6,R0
	MOV.W	[R7+4],R6
; rs232cmd.c 5954				samples = ( samples % 276480000L) %  442368L;
	SYMB	LINE, 5954
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#06H
	MOV.W	R2,#0C000H
	FCALL	__SMODL
	SYMB	LTIM, "samples", 3, 0, 2253
; rs232cmd.c 5955				field = 2*frame;
	SYMB	LINE, 5955
	MOV.W	R2,[R7]
	ASL.W	R2,#01H
	SYMB	LTIM, "frame", -12, 130, 69
	SYMB	LTIM, "frame", 10, 0, 205
	SYMB	LTIM, "frame", 10, 0, 77
	MOV.W	R3,R2
	SYMB	LTIM, "field", 14, 0, 205
; rs232cmd.c 5956	
; rs232cmd.c 5957				if ( line > 312)
	SYMB	LINE, 5957
	MOV.W	R4,#0138H
	CMP.W	R6,#0138H
	BLE	_1554
; rs232cmd.c 5958				{
; rs232cmd.c 5959					field++;
	SYMB	LINE, 5959
	ADDS.W	R2,#01H
	MOV.W	R3,R2
	SYMB	LTIM, "field", 14, 0, 77
	SYMB	LTIM, "field", 14, 0, 205
; rs232cmd.c 5960					line = 624-line;
	SYMB	LINE, 5960
	MOV.W	R2,#0270H
	SUB.W	R2,R6
	MOV.W	[R7+4],R2
; rs232cmd.c 5961				}
	SYMB	LINE, 5961
	BR	_1555
_1554:
; rs232cmd.c 5962				else
; rs232cmd.c 5963					line = 312-line;
	SYMB	LINE, 5963
	MOV.W	R2,[R7+4]
	SUB.W	R4,R2
	MOV.W	[R7+4],R4
_1555:
; rs232cmd.c 5964	
; rs232cmd.c 5965				samples = 442368L - 1 - samples;
	SYMB	LINE, 5965
	MOV.W	R5,#06H
	MOV.W	R4,#0BFFFH
	SUB.W	R4,R0
	SUBB.W	R5,R1
	SYMB	LTIM, "samples", 3, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 5966				field = 7-field;
	SYMB	LINE, 5966
	MOV.W	R1,#07H
	SUB.W	R1,R3
	MOV.W	R0,R1
	SYMB	LTIM, "field", 14, 0, 77
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 5967	
; rs232cmd.c 5968				if ( field != 4)
	SYMB	LINE, 5968
	CMP.W	R1,#04H
	BEQ	_1567
; rs232cmd.c 5969					sign = '-';
	SYMB	LINE, 5969
	MOV.B	[R7+2],#02DH
	SYMB	LTIM, "sign", -10, 130, 69
	SYMB	LTIM, "sign", -10, 130, 197
; rs232cmd.c 5970			}
	SYMB	LINE, 5970
	BR	_1567
_1556:
; rs232cmd.c 5971			else
; rs232cmd.c 5972			{
; rs232cmd.c 5973				frame = samples / 276480000L;
	SYMB	LINE, 5973
	MOV.W	R3,#0107AH
	MOV.W	R2,#0C000H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SDIVL
	SYMB	LTIM, "field", 2, 0, 77
	MOV.W	[R7],R0
	SYMB	LTIM, "frame", -12, 130, 197
; rs232cmd.c 5974				line = ( samples % 276480000L) / 442368L;
	SYMB	LINE, 5974
	MOV.W	R3,#0107AH
	MOV.W	R2,#0C000H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
	SYMB	LTIM, "samples", 3, 0, 2125
	MOV.W	R3,#06H
	MOV.W	R2,#0C000H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	MOV.W	R6,R0
	MOV.W	[R7+4],R6
; rs232cmd.c 5975				samples = ( samples % 276480000L) % 442368L;
	SYMB	LINE, 5975
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#06H
	MOV.W	R2,#0C000H
	FCALL	__SMODL
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 5976				field = 2*frame;
	SYMB	LINE, 5976
	MOV.W	R1,[R7]
	ASL.W	R1,#01H
	SYMB	LTIM, "frame", -12, 130, 69
	SYMB	LTIM, "frame", 6, 0, 205
	SYMB	LTIM, "frame", 6, 0, 77
	MOV.W	R0,R1
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 5977	
; rs232cmd.c 5978				if ( line > 312)
	SYMB	LINE, 5978
	CMP.W	R6,#0138H
	BLE	_1567
; rs232cmd.c 5979				{
; rs232cmd.c 5980					field++;
	SYMB	LINE, 5980
	ADDS.W	R1,#01H
	MOV.W	R0,R1
	SYMB	LTIM, "field", 2, 0, 77
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 5981					line -= 313;
	SYMB	LINE, 5981
	SUB.W	R6,#0139H
	MOV.W	[R7+4],R6
; rs232cmd.c 5982				}
; rs232cmd.c 5983			}
; rs232cmd.c 5984		}
	SYMB	LINE, 5984
	BR	_1567
_1557:
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 11, 0, 2253
; rs232cmd.c 5985		else {                  									// ..system selected is NTSC
; rs232cmd.c 5986			if ( samples >= 230630400L)
	SYMB	LINE, 5986
	MOV.W	R5,R3
	MOV.W	R4,R2
	CMP.W	R3,#0DBFH
	BLT	_1560
	BGT	_1573
	CMP.W	R2,#02400H
	BCS	_1560
_1573:
	SYMB	LTIM, "samples", 11, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 5987			{
; rs232cmd.c 5988				// 230630400 = 525*1716*256
; rs232cmd.c 5989				// 439296    = 1716*256
; rs232cmd.c 5990	
; rs232cmd.c 5991				samples--;
	SYMB	LINE, 5991
	SUB.W	R4,#01H
	SUBB.W	R5,#00H
	SYMB	LTIM, "samples", 19, 0, 2125
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "field", 2, 0, 77
	SYMB	LTIM, "samples", 3, 0, 2253
; rs232cmd.c 5992	
; rs232cmd.c 5993				frame = samples / 230630400L;
	SYMB	LINE, 5993
	MOV.W	R3,#0DBFH
	MOV.W	R2,#02400H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	SYMB	LTIM, "samples", 3, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
	MOV.W	[R7],R0
	SYMB	LTIM, "frame", -12, 130, 197
; rs232cmd.c 5994				line = ( samples % 230630400L) / 439296L;
	SYMB	LINE, 5994
	MOV.W	R3,#0DBFH
	MOV.W	R2,#02400H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
	SYMB	LTIM, "samples", 3, 0, 2125
	MOV.W	R3,#06H
	MOV.W	R2,#0B400H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	MOV.W	R6,R0
	MOV.W	[R7+4],R6
; rs232cmd.c 5995				samples = ( samples % 230630400L) % 439296L;
	SYMB	LINE, 5995
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#06H
	MOV.W	R2,#0B400H
	FCALL	__SMODL
	SYMB	LTIM, "samples", 3, 0, 2253
; rs232cmd.c 5996	
; rs232cmd.c 5997				field = 2*frame;
	SYMB	LINE, 5997
	MOV.W	R2,[R7]
	ASL.W	R2,#01H
	SYMB	LTIM, "frame", -12, 130, 69
	SYMB	LTIM, "frame", 10, 0, 205
	SYMB	LTIM, "frame", 10, 0, 77
	MOV.W	R3,R2
	SYMB	LTIM, "field", 14, 0, 205
; rs232cmd.c 5998	
; rs232cmd.c 5999				if ( line > 262)
	SYMB	LINE, 5999
	MOV.W	R4,#0106H
	CMP.W	R6,#0106H
	BLE	_1558
; rs232cmd.c 6000				{
; rs232cmd.c 6001					field++;
	SYMB	LINE, 6001
	ADDS.W	R2,#01H
	MOV.W	R3,R2
	SYMB	LTIM, "field", 14, 0, 77
	SYMB	LTIM, "field", 14, 0, 205
; rs232cmd.c 6002					line = 524-line;
	SYMB	LINE, 6002
	MOV.W	R2,#020CH
	SUB.W	R2,R6
	MOV.W	[R7+4],R2
; rs232cmd.c 6003				}
	SYMB	LINE, 6003
	BR	_1559
_1558:
; rs232cmd.c 6004				else
; rs232cmd.c 6005					line = 262-line;
	SYMB	LINE, 6005
	MOV.W	R2,[R7+4]
	SUB.W	R4,R2
	MOV.W	[R7+4],R4
_1559:
; rs232cmd.c 6006	
; rs232cmd.c 6007				samples = 439296L - 1 - samples;
	SYMB	LINE, 6007
	MOV.W	R5,#06H
	MOV.W	R4,#0B3FFH
	SUB.W	R4,R0
	SUBB.W	R5,R1
	SYMB	LTIM, "samples", 3, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 6008				field = 3 - field;
	SYMB	LINE, 6008
	MOV.W	R1,#03H
	SUB.W	R1,R3
	MOV.W	R0,R1
	SYMB	LTIM, "field", 14, 0, 77
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 6009	
; rs232cmd.c 6010				if ( field != 2)
	SYMB	LINE, 6010
	CMP.W	R1,#02H
	BEQ	_1567
; rs232cmd.c 6011					sign = '-';
	SYMB	LINE, 6011
	MOV.B	[R7+2],#02DH
	SYMB	LTIM, "sign", -10, 130, 69
	SYMB	LTIM, "sign", -10, 130, 197
; rs232cmd.c 6012			}
	SYMB	LINE, 6012
	BR	_1567
_1560:
; rs232cmd.c 6013			else
; rs232cmd.c 6014			{
; rs232cmd.c 6015				frame = samples / 230630400L;
	SYMB	LINE, 6015
	MOV.W	R3,#0DBFH
	MOV.W	R2,#02400H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SDIVL
	SYMB	LTIM, "field", 2, 0, 77
	MOV.W	[R7],R0
	SYMB	LTIM, "frame", -12, 130, 197
; rs232cmd.c 6016				line = ( samples % 230630400L) / 439296L;
	SYMB	LINE, 6016
	MOV.W	R3,#0DBFH
	MOV.W	R2,#02400H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
	SYMB	LTIM, "samples", 3, 0, 2125
	MOV.W	R3,#06H
	MOV.W	R2,#0B400H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	MOV.W	R6,R0
	MOV.W	[R7+4],R6
; rs232cmd.c 6017				samples = ( samples % 230630400L) % 439296L;
	SYMB	LINE, 6017
	MOV.W	R3,#06H
	MOV.W	R2,#0B400H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 6018				field = 2*frame;
	SYMB	LINE, 6018
	MOV.W	R1,[R7]
	ASL.W	R1,#01H
	SYMB	LTIM, "frame", -12, 130, 69
	SYMB	LTIM, "frame", 6, 0, 205
	SYMB	LTIM, "frame", 6, 0, 77
	MOV.W	R0,R1
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 6019	
; rs232cmd.c 6020				if ( line > 262)
	SYMB	LINE, 6020
	CMP.W	R6,#0106H
	BLE	_1567
; rs232cmd.c 6021				{
; rs232cmd.c 6022					field++;
	SYMB	LINE, 6022
	ADDS.W	R1,#01H
	MOV.W	R0,R1
	SYMB	LTIM, "field", 2, 0, 77
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 6023					line -= 263;
	SYMB	LINE, 6023
	SUB.W	R6,#0107H
	MOV.W	[R7+4],R6
; rs232cmd.c 6024				}
; rs232cmd.c 6025			}
; rs232cmd.c 6026		}
	SYMB	LINE, 6026
_1567:
; rs232cmd.c 6027	
; rs232cmd.c 6028		rs232printf( 12, "%c%d,", sign, abs( field));
	SYMB	LINE, 6028
	CALL	_abs
	SYMB	LTIM, "field", 2, 0, 77
	MOV.B	R1L,[R7+2]
	SEXT.B	R1H
	SYMB	LTIM, "sign", -10, 130, 69
	SYMB	LTIM, "sign", 4, 0, 205
	SYMB	LTIM, "sign", 4, 0, 77
	PUSH.W	R0
	SYMB	SOFF, 14
	MOV.W	R6,R1
	PUSH.W	R1
	SYMB	SOFF, 16
	MOV.W	R1,#SEG( _1552 )
	MOV.W	R0,#SOF( _1552 )
	PUSH.W	R0, R1
	SYMB	SOFF, 20
	MOV.W	R0,#0CH
	CALL	_rs232printf
	ADD.W	R7,#08H
	SYMB	SOFF, 12
; rs232cmd.c 6029		rs232printf( 12, "%c%d,", sign, abs( line));
	SYMB	LINE, 6029
	MOV.W	R0,[R7+4]
	CALL	_abs
	PUSH.W	R0
	SYMB	SOFF, 14
	MOV.W	[R7+2],R6
	PUSH.W	R6
	SYMB	SOFF, 16
	MOV.W	R1,#SEG( _1552 )
	MOV.W	R0,#SOF( _1552 )
	PUSH.W	R0, R1
	SYMB	SOFF, 20
	MOV.W	R0,#0CH
	CALL	_rs232printf
	ADD.W	R7,#08H
	SYMB	SOFF, 12
; rs232cmd.c 6030		rs232printf( 12, "%c%.1f", sign, fabs((float) ( samples*1000L)/6912L));
	SYMB	LINE, 6030
	MOV.W	R1,R5
	MOV.W	R0,R4
	ASL.D	R0,#05H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	ADD.W	R0,R4
	ADDC.W	R1,R5
	ASL.D	R0,#03H
	FCALL	__L2SPF
	MOV.W	R3,#045D8H
	MOV.W	R2,#00H
	FCALL	__DIV_SPF
	FCALL	__SPF2DPF
	CALL	_fabs
	PUSH.W	R0, R1, R2, R3
	SYMB	SOFF, 20
	MOV.W	R0,[R7+8]
	PUSH.W	R0
	SYMB	SOFF, 22
	MOV.W	R1,#SEG( _1553 )
	MOV.W	R0,#SOF( _1553 )
	PUSH.W	R0, R1
	SYMB	SOFF, 26
	MOV.W	R0,#0CH
	CALL	_rs232printf
	ADD.W	R7,#0EH
	SYMB	SOFF, 12
; rs232cmd.c 6031	}
	SYMB	LINE, 6031
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	EFUN
; rs232cmd.c 6032	
	SYMB	ENDF

	RSEG	RS232CMD_INI_FA
_366:	DB	02CH,025H,064H,00AH,000H
	SYMB	TYPE, 658, 'Z', #453, 3
	SYMB	ALAB, _PresetPtr, #658
	EXTRN	HDATA(_PresetPtr)
	SYMB	ALAB, _CmdExecute, #2
	EXTRN	HDATA(_CmdExecute)
_1227:	DB	025H,06CH,075H,02CH,025H,06CH,075H,00AH,000H
	SYMB	TYPE, 660, 'X', 12, #16, 30, 3, #18, #18, #18
	SYMB	ALAB, _ValidateDate, #660
	EXTRN	HCODE(_ValidateDate)
	SYMB	TYPE, 661, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _SetGenlockSystem, #661
	EXTRN	HCODE(_SetGenlockSystem)
	SYMB	TYPE, 662, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _StorePreset, #662
	EXTRN	HCODE(_StorePreset)
	SYMB	TYPE, 663, 'X', 12, #1, 30, 0
	SYMB	ALAB, _UpdateSTBRegister, #663
	EXTRN	HCODE(_UpdateSTBRegister)
_987:	DB	025H,073H,03BH,000H
_9:	DB	025H,064H,00AH,000H
	SYMB	TYPE, 664, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetBBSystem, #664
	EXTRN	HCODE(_SetBBSystem)
_110:	DB	022H,00AH,000H
	SYMB	TYPE, 665, 'X', 12, #16, 30, 2, #16, #7
	SYMB	ALAB, _SetBBDelay, #665
	EXTRN	HCODE(_SetBBDelay)
	SYMB	TYPE, 666, 'X', 12, #257, 30, 1, #259
	SYMB	ALAB, _strlen, #666
	EXTRN	HCODE(_strlen)
_1174:	DB	025H,075H,02CH,025H,075H,02CH,025H,075H,00AH,000H
	SYMB	TYPE, 667, 'X', 12, #16, 30, 1, #7
	SYMB	ALAB, _SetCBDelay, #667
	EXTRN	HCODE(_SetCBDelay)
_1552:	DB	025H,063H,025H,064H,02CH,000H
	SYMB	TYPE, 668, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetBBScHPhase, #668
	EXTRN	HCODE(_SetBBScHPhase)
	SYMB	TYPE, 669, 'X', 12, #16, 30, 0
	SYMB	ALAB, _BBUpdate, #669
	EXTRN	HCODE(_BBUpdate)
	EXTRN	HCODE(__UMODL)
	SYMB	TYPE, 670, 'X', 12, #1, 30, 0
	SYMB	ALAB, _ResetErrorEventQueue, #670
	EXTRN	HCODE(_ResetErrorEventQueue)
	SYMB	TYPE, 671, 'X', 12, #16, 30, 1, #259
	SYMB	ALAB, _GenlockVersion, #671
	EXTRN	HCODE(_GenlockVersion)
	SYMB	TYPE, 672, 'X', 12, #16, 30, 2, #259, #491
	SYMB	ALAB, _Cstrcmp, #672
	EXTRN	HCODE(_Cstrcmp)
	SYMB	TYPE, 673, 'X', 12, #16, 30, 2, #16, #10
	SYMB	ALAB, _SetAudioTiming, #673
	EXTRN	HCODE(_SetAudioTiming)
_1175:	DB	025H,075H,02CH,025H,075H,02CH,025H,075H,000H
	SYMB	TYPE, 674, 'X', 12, #259, 30, 3, #259, #259, #257
	SYMB	ALAB, _strncpy, #674
	EXTRN	HCODE(_strncpy)
	SYMB	ALAB, _AudioOutput, #16
	EXTRN	HDATA(_AudioOutput)
	SYMB	TYPE, 675, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioWordClock, #675
	EXTRN	HCODE(_SetAudioWordClock)
	EXTRN	HCODE(__DIV_DPF)
_785:	DB	025H,02EH,031H,066H,02CH,000H
	SYMB	TYPE, 676, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _abs, #676
	EXTRN	HCODE(_abs)
_1013:	DB	025H,075H,00AH,000H
	SYMB	TYPE, 677, 'X', 12, #16, 30, 0
	SYMB	ALAB, _ReadErrorEventQueue, #677
	EXTRN	HCODE(_ReadErrorEventQueue)
	SYMB	TYPE, 679, 'n', #3, 130
	SYMB	TYPE, 680, 'P', #679
	SYMB	TYPE, 678, 'X', 12, #16, 30, 4, #3, #3, #680, #3
	SYMB	ALAB, _TransmitIIC, #678
	EXTRN	HCODE(_TransmitIIC)
	SYMB	TYPE, 681, 'X', 12, #16, 30, 0
	SYMB	ALAB, _CBUpdate, #681
	EXTRN	HCODE(_CBUpdate)
	SYMB	TYPE, 682, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioSystem, #682
	EXTRN	HCODE(_SetAudioSystem)
	SYMB	TYPE, 683, 'X', 12, #16, 30, 4, #16, #16, #259, #1
	SYMB	ALAB, _sio0SndCommand, #683
	EXTRN	HCODE(_sio0SndCommand)
	SYMB	TYPE, 684, 'X', 12, #16, 30, 2, #259, #259
	SYMB	ALAB, _strcmp, #684
	EXTRN	HCODE(_strcmp)
	SYMB	TYPE, 685, 'X', 12, #3, 30, 0
	SYMB	ALAB, _AudioStatus, #685
	EXTRN	HCODE(_AudioStatus)
_1301:	DB	025H,075H,02CH,025H,075H,00AH,000H
	SYMB	TYPE, 686, 'X', 12, #16, 30, 3, #259, #259, #1
	SYMB	ALAB, _sscanf, #686
	EXTRN	HCODE(_sscanf)
_1439:	DB	025H,030H,033H,064H,02CH,025H,030H,033H,064H,00AH,000H
_1302:	DB	025H,075H,02CH,025H,075H,000H
_10:	DB	025H,064H,000H
_902:	DB	025H,066H,000H
	EXTRN	HCODE(__MUL_SPF)
	SYMB	TYPE, 687, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _SetCBSystem, #687
	EXTRN	HCODE(_SetCBSystem)
	SYMB	ALAB, _CBSetup, #459
	EXTRN	HDATA(_CBSetup)
	SYMB	ALAB, _BBSetup, #554
	EXTRN	HDATA(_BBSetup)
_221:	DB	025H,06CH,000H
	SYMB	ALAB, _OperEnableReg, #18
	EXTRN	HDATA(_OperEnableReg)
_316:	DB	047H,058H,025H,064H,03BH,000H
	EXTRN	HCODE(__SUBR_DPF)
_986:	DB	025H,073H,000H
	SYMB	TYPE, 688, 'X', 12, #16, 30, 0
	SYMB	ALAB, _GenlockInit, #688
	EXTRN	HCODE(_GenlockInit)
	SYMB	TYPE, 689, 'Z', #2, 511
	SYMB	ALAB, _Cmd, #689
	EXTRN	HDATA(_Cmd)
	SYMB	TYPE, 691, 'X', 12, #16, 30, 0
	SYMB	ALAB, _GenlockUpdate, #691
	EXTRN	HCODE(_GenlockUpdate)
_960:	DB	04FH,04EH,000H
_1190:	DB	025H,075H,000H
	SYMB	TYPE, 692, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioSignal, #692
	EXTRN	HCODE(_SetAudioSignal)
	EXTRN	HCODE(__SPF2DPF)
	SYMB	TYPE, 693, 'X', 12, #16, 30, 0
	SYMB	ALAB, _CBInit, #693
	EXTRN	HCODE(_CBInit)
	SYMB	TYPE, 694, 'X', 12, #259, 30, 2, #259, #259
	SYMB	ALAB, _strcpy, #694
	EXTRN	HCODE(_strcpy)
_901:	DB	025H,02EH,031H,066H,00AH,000H
	SYMB	TYPE, 695, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _WriteCBChromaGain, #695
	EXTRN	HCODE(_WriteCBChromaGain)
	SYMB	TYPE, 696, 'X', 12, #11, 30, 1, #11
	SYMB	ALAB, _fabs, #696
	EXTRN	HCODE(_fabs)
	SYMB	ALAB, _ParCnt, #3
	EXTRN	HDATA(_ParCnt)
	SYMB	TYPE, 697, 'X', 12, #16, 30, 3, #263, #453, #16
	SYMB	ALAB, _NV_Recall, #697
	EXTRN	HCODE(_NV_Recall)
	SYMB	TYPE, 698, 'X', 12, #6, 30, 1, #6
	SYMB	ALAB, _labs, #698
	EXTRN	HCODE(_labs)
_262:	DB	04FH,046H,046H,000H
	SYMB	ALAB, _GenlockStatus, #3
	EXTRN	HDATA(_GenlockStatus)
	SYMB	TYPE, 699, 'X', 12, #16, 30, 4, #3, #3, #680, #3
	SYMB	ALAB, _ReceiveIIC, #699
	EXTRN	HCODE(_ReceiveIIC)
	SYMB	TYPE, 700, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _SetAudioOutput, #700
	EXTRN	HCODE(_SetAudioOutput)
	SYMB	ALAB, _NumSuffix, #18
	EXTRN	HDATA(_NumSuffix)
	SYMB	TYPE, 701, 'X', 12, #16, 30, 1, #259
	SYMB	ALAB, _rs232puts, #701
	EXTRN	HCODE(_rs232puts)
	SYMB	ALAB, _CalibrationPtr, #453
	EXTRN	HDATA(_CalibrationPtr)
	SYMB	ALAB, _CmdRequest, #2
	EXTRN	HDATA(_CmdRequest)
	SYMB	ALAB, _ESRReg, #3
	EXTRN	HDATA(_ESRReg)
	SYMB	ALAB, _STBReg, #3
	EXTRN	HDATA(_STBReg)
	SYMB	ALAB, _AudioSetup, #556
	EXTRN	HDATA(_AudioSetup)
_1038:	DB	025H,06CH,075H,02CH,025H,06CH,075H,000H
	SYMB	TYPE, 702, "ERROR_STRUCT", 'S', 6,\
		 "ErrorNo", #16, 0,\
		 "ErrorTxt", #491, 2
	SYMB	TYPE, 703, 'Z', #702, 47
	SYMB	ALAB, _ErrorTxt_Array, #703
	EXTRN	HCODE(_ErrorTxt_Array)
	SYMB	TYPE, 705, 'X', 12, #16, 30, 1, #7
	SYMB	ALAB, _SetGenlockDelay, #705
	EXTRN	HCODE(_SetGenlockDelay)
	SYMB	TYPE, 706, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _WriteCBGain, #706
	EXTRN	HCODE(_WriteCBGain)
_1440:	DB	025H,064H,02CH,025H,064H,000H
_1553:	DB	025H,063H,025H,02EH,031H,066H,000H
	SYMB	ALAB, _BBControlPort, #16
	EXTRN	HDATA(_BBControlPort)
_315:	DB	048H,047H,025H,06CH,064H,03BH,000H
	SYMB	TYPE, 707, 'X', 12, #1, 30, 0
	SYMB	ALAB, _BBDefaults, #707
	EXTRN	HCODE(_BBDefaults)
	SYMB	ALAB, _SettingsPtr, #453
	EXTRN	HDATA(_SettingsPtr)
_314:	DB	047H,04DH,030H,000H
	EXTRN	HCODE(__L2SPF)
	SYMB	ALAB, _ESEReg, #3
	EXTRN	HDATA(_ESEReg)
	SYMB	TYPE, 708, 'X', 12, #16, 30, 1, #259
	SYMB	ALAB, _BBVersion, #708
	EXTRN	HCODE(_BBVersion)
_959:	DB	04FH,046H,046H,00AH,000H
	SYMB	TYPE, 709, 'X', 12, #16, 30, 0
	SYMB	ALAB, _BBInit, #709
	EXTRN	HCODE(_BBInit)
	SYMB	TYPE, 710, 'X', 12, #1, 30, 0
	SYMB	ALAB, _CBDefaults, #710
	EXTRN	HCODE(_CBDefaults)
_985:	DB	025H,064H,02CH,025H,073H,000H
_334:	DB	047H,058H,025H,075H,03BH,000H
	SYMB	ALAB, _GenlockSetup, #455
	EXTRN	HDATA(_GenlockSetup)
	SYMB	TYPE, 711, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _SetCBEmbAudioSignal, #711
	EXTRN	HCODE(_SetCBEmbAudioSignal)
	SYMB	TYPE, 712, 'X', 12, #16, 30, 3, #16, #259, #1
	SYMB	ALAB, _rs232printf, #712
	EXTRN	HCODE(_rs232printf)
	SYMB	TYPE, 713, 'X', 12, #16, 30, 0
	SYMB	ALAB, _AudioUpdate, #713
	EXTRN	HCODE(_AudioUpdate)
	SYMB	ALAB, _Settings, #475
	EXTRN	HDATA(_Settings)
	SYMB	TYPE, 714, 'X', 12, #16, 30, 3, #259, #259, #1
	SYMB	ALAB, _sprintf, #714
	EXTRN	HCODE(_sprintf)
	SYMB	ALAB, _OperEventReg, #18
	EXTRN	HDATA(_OperEventReg)
	EXTRN	HCODE(__CMP_SPF)
	EXTRN	HCODE(__DIV_SPF)
	SYMB	ALAB, _SREReg, #3
	EXTRN	HDATA(_SREReg)
	SYMB	TYPE, 715, 'X', 12, #16, 30, 3, #263, #453, #16
	SYMB	ALAB, _NV_Store, #715
	EXTRN	HCODE(_NV_Store)
_184:	DB	025H,064H,02CH,025H,064H,02CH,025H,064H,02CH,025H,064H,000H
	SYMB	TYPE, 716, 'X', 12, #16, 30, 0
	SYMB	ALAB, _pld_version, #716
	EXTRN	HCODE(_pld_version)
	SYMB	TYPE, 717, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _RecallPreset, #717
	EXTRN	HCODE(_RecallPreset)
	SYMB	TYPE, 718, 'X', 12, #16, 30, 0
	SYMB	ALAB, _AudioInit, #718
	EXTRN	HCODE(_AudioInit)
	SYMB	ALAB, _Calibration, #485
	EXTRN	HDATA(_Calibration)
	SYMB	TYPE, 719, 'X', 12, #1, 30, 1, #16
	SYMB	ALAB, _BBSPGCommunication, #719
	EXTRN	HCODE(_BBSPGCommunication)
_1122:	DB	025H,064H,02CH,025H,064H,02CH,025H,064H,000H
_299:	DB	025H,064H,02CH,025H,064H,02CH,025H,066H,000H
	EXTRN	HCODE(__ADD_DPF)
	EXTRN	HCODE(__SMODL)
	SYMB	TYPE, 720, 'X', 12, #16, 30, 0
	SYMB	ALAB, _tcxo_status, #720
	EXTRN	HCODE(_tcxo_status)
_157:	DB	025H,064H,02CH,025H,037H,073H,000H
	SYMB	ALAB, _QuestEnableReg, #18
	EXTRN	HDATA(_QuestEnableReg)
	EXTRN	IDATA(__lc_bs)
	SYMB	TYPE, 721, 'X', 12, #16, 30, 0
	SYMB	ALAB, _ResetInstrument, #721
	EXTRN	HCODE(_ResetInstrument)
	SYMB	ALAB, _QuestConditionReg, #18
	EXTRN	HDATA(_QuestConditionReg)
	SYMB	TYPE, 722, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioClick, #722
	EXTRN	HCODE(_SetAudioClick)
_1079:	DB	025H,038H,073H,000H
	SYMB	TYPE, 723, 'X', 12, #16, 30, 1, #18
	SYMB	ALAB, _SetCBPattern, #723
	EXTRN	HCODE(_SetCBPattern)
	EXTRN	HCODE(__SDIVL)
_1054:	DB	025H,033H,032H,073H,000H
	SYMB	TYPE, 724, 'X', 12, #1, 30, 0
	SYMB	ALAB, _GenlockDefaults, #724
	EXTRN	HCODE(_GenlockDefaults)
_533:	DB	025H,064H,02CH,000H
	SYMB	TYPE, 725, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _rs232putchar, #725
	EXTRN	HCODE(_rs232putchar)
	EXTRN	HCODE(__DPF2L)
	EXTRN	HCODE(__CMP_DPF)
	SYMB	ALAB, _OperConditionReg, #18
	EXTRN	HDATA(_OperConditionReg)
	SYMB	TYPE, 726, 'X', 12, #1, 30, 0
	SYMB	ALAB, _AudioDefaults, #726
	EXTRN	HCODE(_AudioDefaults)
_183:	DB	025H,064H,02CH,025H,064H,02CH,025H,064H,00AH,000H
_131:	DB	025H,064H,02CH,025H,031H,037H,073H,000H
	SYMB	ALAB, _SCPIError, #16
	EXTRN	HDATA(_SCPIError)
	EXTRN	HCODE(__UDIVL)
	SYMB	TYPE, 727, 'X', 12, #18, 30, 2, #7, #7
	SYMB	ALAB, _ROMChecksum, #727
	EXTRN	HCODE(_ROMChecksum)
	SYMB	TYPE, 728, 'X', 12, #16, 30, 2, #3, #3
	SYMB	ALAB, _WriteAnlAudioDACLevel, #728
	EXTRN	HCODE(_WriteAnlAudioDACLevel)
_109:	DB	025H,064H,02CH,022H,000H
_958:	DB	04FH,04EH,00AH,000H
	SYMB	TYPE, 729, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioLevel, #729
	EXTRN	HCODE(_SetAudioLevel)
_421:	DB	02CH,025H,064H,02CH,000H
	EXTRN	HCODE(__DPF2S)
	SYMB	TYPE, 730, 'X', 12, #16, 30, 5, #16, #16, #259, #259, #1
	SYMB	ALAB, _sio0SndRequest, #730
	EXTRN	HCODE(_sio0SndRequest)
	SYMB	TYPE, 731, 'X', 12, #3, 30, 0
	SYMB	ALAB, _UpdateESRRegister, #731
	EXTRN	HCODE(_UpdateESRRegister)
	SYMB	ALAB, _QuestEventReg, #18
	EXTRN	HDATA(_QuestEventReg)
	SYMB	TYPE, 732, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _SetCBScHPhase, #732
	EXTRN	HCODE(_SetCBScHPhase)
	EXTRN	DATA(__lc_ub_xvwbuffer)
	EXTRN	DATA(__lc_ue_xvwbuffer)
	CALLS	'CLSCommand', 'ResetErrorEventQueue'
	CALLS	'ESECommand', 'rs232printf'
	CALLS	'ESECommand', 'sscanf'
	CALLS	'ESRCommand', 'UpdateESRRegister'
	CALLS	'ESRCommand', 'rs232printf'
	CALLS	'SRECommand', 'rs232printf'
	CALLS	'SRECommand', 'sscanf'
	CALLS	'STBCommand', 'UpdateSTBRegister'
	CALLS	'STBCommand', 'rs232printf'
	CALLS	'RSTCommand', 'ResetInstrument'
	CALLS	'IDNCommand', 'rs232puts'
	CALLS	'IDNCommand', 'rs232putchar'
	CALLS	'IDNCommand', 'rs232puts'
	CALLS	'IDNCommand', 'rs232putchar'
	CALLS	'IDNCommand', 'rs232puts'
	CALLS	'IDNCommand', 'rs232putchar'
	CALLS	'IDNCommand', 'rs232puts'
	CALLS	'IDNCommand', 'rs232putchar'
	CALLS	'RCLCommand', 'sscanf'
	CALLS	'RCLCommand', 'RecallPreset'
	CALLS	'SAVCommand', 'sscanf'
	CALLS	'SAVCommand', 'StorePreset'
	CALLS	'SystemError', 'ReadErrorEventQueue'
	CALLS	'SystemError', 'sprintf'
	CALLS	'SystemError', 'rs232puts'
	CALLS	'SystemError', 'rs232putchar'
	CALLS	'SystemError', 'rs232puts'
	CALLS	'SystemVersion', 'rs232putchar'
	CALLS	'SystemPresetName', 'sscanf'
	CALLS	'SystemPresetName', 'NV_Recall'
	CALLS	'SystemPresetName', 'rs232puts'
	CALLS	'SystemPresetName', 'rs232putchar'
	CALLS	'SystemPresetName', 'sscanf'
	CALLS	'SystemPresetName', 'strlen'
	CALLS	'SystemPresetName', 'NV_Recall'
	CALLS	'SystemPresetName', 'strcpy'
	CALLS	'SystemPresetName', 'NV_Store'
	CALLS	'SystemPresetAuthor', 'sscanf'
	CALLS	'SystemPresetAuthor', 'NV_Recall'
	CALLS	'SystemPresetAuthor', 'rs232puts'
	CALLS	'SystemPresetAuthor', 'rs232putchar'
	CALLS	'SystemPresetAuthor', 'sscanf'
	CALLS	'SystemPresetAuthor', 'strlen'
	CALLS	'SystemPresetAuthor', 'NV_Recall'
	CALLS	'SystemPresetAuthor', 'strcpy'
	CALLS	'SystemPresetAuthor', 'NV_Store'
	CALLS	'SystemPresetDate', 'sscanf'
	CALLS	'SystemPresetDate', 'NV_Recall'
	CALLS	'SystemPresetDate', 'sprintf'
	CALLS	'SystemPresetDate', 'rs232puts'
	CALLS	'SystemPresetDate', 'sscanf'
	CALLS	'SystemPresetDate', 'ValidateDate'
	CALLS	'SystemPresetDate', 'NV_Recall'
	CALLS	'SystemPresetDate', 'NV_Store'
	CALLS	'StatusOperEvent', 'rs232printf'
	CALLS	'StatusOperCondition', 'rs232printf'
	CALLS	'StatusOperEnable', 'rs232printf'
	CALLS	'StatusOperEnable', 'sscanf'
	CALLS	'StatusQuestEvent', 'rs232printf'
	CALLS	'StatusQuestCondition', 'rs232printf'
	CALLS	'StatusQuestEnable', 'rs232printf'
	CALLS	'StatusQuestEnable', 'sscanf'
	CALLS	'StatusPreset', 'rs232putchar'
	CALLS	'StatusPreset', 'rs232puts'
	CALLS	'StatusPreset', 'rs232putchar'
	CALLS	'GenlockGen', 'rs232putchar'
	CALLS	'GenlockGen', 'PrintSamplesToFLT'
	CALLS	'GenlockGen', 'rs232putchar'
	CALLS	'GenlockGenSystem', 'rs232putchar'
	CALLS	'GenlockGenSystem', 'FindParameter'
	CALLS	'GenlockGenSystem', 'SetGenlockSystem'
	CALLS	'GenlockGenDelay', 'PrintSamplesToFLT'
	CALLS	'GenlockGenDelay', 'rs232putchar'
	CALLS	'GenlockGenDelay', 'sscanf'
	CALLS	'GenlockGenDelay', 'FLTToSamples'
	CALLS	'GenlockGenDelay', 'SetGenlockDelay'
	CALLS	'GenlockGenCalibrateEnable', 'rs232putchar'
	CALLS	'GenlockGenCalibrateEnable', 'FindParameter'
	CALLS	'GenlockGenCalibrateEnable', 'SetGenlockSystem'
	CALLS	'GenlockGenCalibrateEnable', 'SetBBSystem'
	CALLS	'GenlockGenCalibrateEnable', 'sio0SndCommand'
	CALLS	'GenlockGenCalibrateAdjust', 'FindParameter'
	CALLS	'GenlockGenCalibrateAdjust', 'sio0SndCommand'
	CALLS	'GenlockGenCalibrateAdjust', 'FindParameter'
	CALLS	'GenlockGenCalibrateAdjust', 'sio0SndCommand'
	CALLS	'GenlockGenCalibrateStore', 'NV_Store'
	CALLS	'BBGen', 'rs232putchar'
	CALLS	'BBGen', 'PrintSamplesToFLT'
	CALLS	'BBGen', 'rs232printf'
	CALLS	'BBGenSystem', 'rs232putchar'
	CALLS	'BBGenSystem', 'FindParameter'
	CALLS	'BBGenSystem', 'SetBBSystem'
	CALLS	'BBGenDelay', 'PrintSamplesToFLT'
	CALLS	'BBGenDelay', 'rs232putchar'
	CALLS	'BBGenDelay', 'sscanf'
	CALLS	'BBGenDelay', 'FLTToSamples'
	CALLS	'BBGenDelay', 'SetBBDelay'
	CALLS	'BBGenScHPhase', 'rs232printf'
	CALLS	'BBGenScHPhase', 'sscanf'
	CALLS	'BBGenScHPhase', 'SetBBScHPhase'
	CALLS	'TSGen', 'rs232putchar'
	CALLS	'TSGen', 'PrintSamplesToFLT'
	CALLS	'TSGen', 'rs232printf'
	CALLS	'TSGen', 'rs232putchar'
	CALLS	'TSGenPattern', 'rs232putchar'
	CALLS	'TSGenPattern', 'FindParameter'
	CALLS	'TSGenPattern', 'SetCBPattern'
	CALLS	'TSGenSystem', 'rs232putchar'
	CALLS	'TSGenSystem', 'FindParameter'
	CALLS	'TSGenSystem', 'SetCBSystem'
	CALLS	'TSGenDelay', 'PrintSamplesToFLT'
	CALLS	'TSGenDelay', 'rs232putchar'
	CALLS	'TSGenDelay', 'sscanf'
	CALLS	'TSGenDelay', 'FLTToSamples'
	CALLS	'TSGenDelay', 'SetCBDelay'
	CALLS	'TSGenScHPhase', 'rs232printf'
	CALLS	'TSGenScHPhase', 'sscanf'
	CALLS	'TSGenScHPhase', 'SetCBScHPhase'
	CALLS	'TSGenEmbAudioSignal', 'rs232putchar'
	CALLS	'TSGenEmbAudioSignal', 'FindParameter'
	CALLS	'TSGenEmbAudioSignal', 'SetCBEmbAudioSignal'
	CALLS	'AudioGenOutput', 'rs232putchar'
	CALLS	'AudioGenOutput', 'FindParameter'
	CALLS	'AudioGenOutput', 'SetAudioOutput'
	CALLS	'AudioGenAnalog', 'rs232putchar'
	CALLS	'AudioGenAnalog', 'rs232printf'
	CALLS	'AudioGenAnalogSignal', 'rs232putchar'
	CALLS	'AudioGenAnalogSignal', 'FindParameter'
	CALLS	'AudioGenAnalogSignal', 'SetAudioSignal'
	CALLS	'AudioGenAnalogLevel', 'rs232putchar'
	CALLS	'AudioGenAnalogLevel', 'rs232printf'
	CALLS	'AudioGenAnalogLevel', 'FindParameter'
	CALLS	'AudioGenAnalogLevel', 'sscanf'
	CALLS	'AudioGenAnalogLevel', 'SetAudioLevel'
	CALLS	'AudioGenAnalogClick', 'rs232printf'
	CALLS	'AudioGenAnalogClick', 'sscanf'
	CALLS	'AudioGenAnalogClick', 'SetAudioClick'
	CALLS	'AudioGenAESEBU', 'rs232putchar'
	CALLS	'AudioGenAESEBU', 'rs232printf'
	CALLS	'AudioGenAESEBU', 'rs232putchar'
	CALLS	'AudioGenAESEBU', 'rs232printf'
	CALLS	'AudioGenAESEBUSystem', 'rs232putchar'
	CALLS	'AudioGenAESEBUSystem', 'FindParameter'
	CALLS	'AudioGenAESEBUSystem', 'SetAudioSystem'
	CALLS	'AudioGenAESEBUSignal', 'rs232putchar'
	CALLS	'AudioGenAESEBUSignal', 'FindParameter'
	CALLS	'AudioGenAESEBUSignal', 'SetAudioSignal'
	CALLS	'AudioGenAESEBULevel', 'rs232putchar'
	CALLS	'AudioGenAESEBULevel', 'rs232printf'
	CALLS	'AudioGenAESEBULevel', 'FindParameter'
	CALLS	'AudioGenAESEBULevel', 'sscanf'
	CALLS	'AudioGenAESEBULevel', 'SetAudioLevel'
	CALLS	'AudioGenAESEBUTiming', 'rs232printf'
	CALLS	'AudioGenAESEBUTiming', 'sscanf'
	CALLS	'AudioGenAESEBUTiming', 'SetAudioTiming'
	CALLS	'AudioGenAESEBUWordClock', 'rs232putchar'
	CALLS	'AudioGenAESEBUWordClock', 'FindParameter'
	CALLS	'AudioGenAESEBUWordClock', 'SetAudioWordClock'
	CALLS	'AudioGenAESEBUClick', 'rs232printf'
	CALLS	'AudioGenAESEBUClick', 'sscanf'
	CALLS	'AudioGenAESEBUClick', 'SetAudioClick'
	CALLS	'FactPassword', 'rs232puts'
	CALLS	'FactPassword', 'strcmp'
	CALLS	'FactPassword', 'Cstrcmp'
	CALLS	'FactReset', 'GenlockDefaults'
	CALLS	'FactReset', 'BBDefaults'
	CALLS	'FactReset', 'CBDefaults'
	CALLS	'FactReset', 'AudioDefaults'
	CALLS	'FactReset', 'GenlockInit'
	CALLS	'FactReset', 'BBInit'
	CALLS	'FactReset', 'CBInit'
	CALLS	'FactReset', 'AudioInit'
	CALLS	'FactReset', 'GenlockUpdate'
	CALLS	'FactReset', 'CBUpdate'
	CALLS	'FactReset', 'BBUpdate'
	CALLS	'FactReset', 'AudioUpdate'
	CALLS	'FactReset', 'StorePreset'
	CALLS	'FactReset', 'NV_Store'
	CALLS	'FactV24Command', 'sscanf'
	CALLS	'FactV24Command', 'sio0SndRequest'
	CALLS	'FactV24Command', 'rs232puts'
	CALLS	'FactV24Command', 'sio0SndCommand'
	CALLS	'FactV24Transparent', 'FindParameter'
	CALLS	'FactV24Transparent', 'BBSPGCommunication'
	CALLS	'FactChecksumCode', 'ROMChecksum'
	CALLS	'FactChecksumCode', 'sprintf'
	CALLS	'FactChecksumCode', 'rs232puts'
	CALLS	'FactChecksumPLD', 'ROMChecksum'
	CALLS	'FactChecksumPLD', 'sprintf'
	CALLS	'FactChecksumPLD', 'rs232puts'
	CALLS	'FactChecksumEmbAudio', 'ROMChecksum'
	CALLS	'FactChecksumEmbAudio', 'sprintf'
	CALLS	'FactChecksumEmbAudio', 'rs232puts'
	CALLS	'FactChecksumPattern', 'ROMChecksum'
	CALLS	'FactChecksumPattern', 'sprintf'
	CALLS	'FactChecksumPattern', 'rs232puts'
	CALLS	'FactChecksumRange', 'sscanf'
	CALLS	'FactChecksumRange', 'ROMChecksum'
	CALLS	'FactChecksumRange', 'sprintf'
	CALLS	'FactChecksumRange', 'rs232puts'
	CALLS	'FactMainVersion', 'sprintf'
	CALLS	'FactMainVersion', 'rs232puts'
	CALLS	'FactMainIDNCompany', 'rs232puts'
	CALLS	'FactMainIDNCompany', 'rs232putchar'
	CALLS	'FactMainIDNCompany', 'sscanf'
	CALLS	'FactMainIDNCompany', 'strncpy'
	CALLS	'FactMainIDNCompany', 'NV_Store'
	CALLS	'FactMainIDNType', 'rs232puts'
	CALLS	'FactMainIDNType', 'rs232putchar'
	CALLS	'FactMainIDNType', 'sscanf'
	CALLS	'FactMainIDNType', 'strncpy'
	CALLS	'FactMainIDNType', 'NV_Store'
	CALLS	'FactMainIDNKUNumber', 'rs232puts'
	CALLS	'FactMainIDNKUNumber', 'rs232putchar'
	CALLS	'FactMainIDNKUNumber', 'sscanf'
	CALLS	'FactMainIDNKUNumber', 'strncpy'
	CALLS	'FactMainIDNKUNumber', 'NV_Store'
	CALLS	'FactMainIDNSWRevision', 'rs232puts'
	CALLS	'FactMainIDNSWRevision', 'rs232putchar'
	CALLS	'FactMainIDNSWRevision', 'sscanf'
	CALLS	'FactMainIDNSWRevision', 'strncpy'
	CALLS	'FactMainIDNSWRevision', 'NV_Store'
	CALLS	'FactMainSystem', 'rs232putchar'
	CALLS	'FactMainSystem', 'FindParameter'
	CALLS	'FactMainSystem', 'NV_Store'
	CALLS	'FactMainFMSDateProd', 'sprintf'
	CALLS	'FactMainFMSDateProd', 'rs232puts'
	CALLS	'FactMainFMSDateProd', 'sscanf'
	CALLS	'FactMainFMSDateProd', 'ValidateDate'
	CALLS	'FactMainFMSDateProd', 'NV_Store'
	CALLS	'FactMainFMSDateUpd', 'sprintf'
	CALLS	'FactMainFMSDateUpd', 'rs232puts'
	CALLS	'FactMainFMSDateUpd', 'sscanf'
	CALLS	'FactMainFMSDateUpd', 'ValidateDate'
	CALLS	'FactMainFMSDateUpd', 'NV_Store'
	CALLS	'FactGenlockGenDate', 'sprintf'
	CALLS	'FactGenlockGenDate', 'rs232puts'
	CALLS	'FactGenlockGenDate', 'sscanf'
	CALLS	'FactGenlockGenDate', 'ValidateDate'
	CALLS	'FactGenlockGenDate', 'NV_Store'
	CALLS	'FactGenlockGenVersion', 'GenlockVersion'
	CALLS	'FactGenlockGenVersion', 'rs232puts'
	CALLS	'FactGenlockGenVersion', 'rs232putchar'
	CALLS	'FactGenlockGenFRefDate', 'sprintf'
	CALLS	'FactGenlockGenFRefDate', 'rs232puts'
	CALLS	'FactGenlockGenFRefDate', 'sscanf'
	CALLS	'FactGenlockGenFRefDate', 'ValidateDate'
	CALLS	'FactGenlockGenFRefDate', 'NV_Store'
	CALLS	'FactGenlockGenFRefDAC', 'sprintf'
	CALLS	'FactGenlockGenFRefDAC', 'rs232puts'
	CALLS	'FactGenlockGenFRefDAC', 'sscanf'
	CALLS	'FactGenlockGenFRefDAC', 'NV_Store'
	CALLS	'FactGenlockGenURefDate', 'sprintf'
	CALLS	'FactGenlockGenURefDate', 'rs232puts'
	CALLS	'FactGenlockGenURefDate', 'sscanf'
	CALLS	'FactGenlockGenURefDate', 'ValidateDate'
	CALLS	'FactGenlockGenURefDate', 'NV_Store'
	CALLS	'FactGenlockGenURefDAC', 'sprintf'
	CALLS	'FactGenlockGenURefDAC', 'rs232puts'
	CALLS	'FactGenlockGenURefDAC', 'sscanf'
	CALLS	'FactGenlockGenURefDAC', 'NV_Store'
	CALLS	'FactGenlockGenHPHZero', 'sprintf'
	CALLS	'FactGenlockGenHPHZero', 'rs232puts'
	CALLS	'FactGenlockGenHPHZero', 'sscanf'
	CALLS	'FactGenlockGenHPHZero', 'NV_Store'
	CALLS	'FactGenlockGenPhase', 'sprintf'
	CALLS	'FactGenlockGenPhase', 'rs232puts'
	CALLS	'FactGenlockGenPhase', 'sscanf'
	CALLS	'FactGenlockGenPhase', 'NV_Store'
	CALLS	'FactBBGenDate', 'sprintf'
	CALLS	'FactBBGenDate', 'rs232puts'
	CALLS	'FactBBGenDate', 'sscanf'
	CALLS	'FactBBGenDate', 'ValidateDate'
	CALLS	'FactBBGenDate', 'NV_Store'
	CALLS	'FactBBGenVersion', 'BBVersion'
	CALLS	'FactBBGenVersion', 'rs232puts'
	CALLS	'FactBBGenVersion', 'rs232putchar'
	CALLS	'FactBBGenSignal', 'FindParameter'
	CALLS	'FactBBGenPhase', 'sprintf'
	CALLS	'FactBBGenPhase', 'rs232puts'
	CALLS	'FactBBGenPhase', 'sscanf'
	CALLS	'FactBBGenPhase', 'NV_Store'
	CALLS	'FactBBGenScHPhase', 'sprintf'
	CALLS	'FactBBGenScHPhase', 'rs232puts'
	CALLS	'FactBBGenScHPhase', 'sscanf'
	CALLS	'FactBBGenScHPhase', 'NV_Store'
	CALLS	'FactBBGenDAC', 'sprintf'
	CALLS	'FactBBGenDAC', 'rs232puts'
	CALLS	'FactBBGenDAC', 'sscanf'
	CALLS	'FactBBGenDAC', 'NV_Store'
	CALLS	'FactTSGenDate', 'sprintf'
	CALLS	'FactTSGenDate', 'rs232puts'
	CALLS	'FactTSGenDate', 'sscanf'
	CALLS	'FactTSGenDate', 'ValidateDate'
	CALLS	'FactTSGenDate', 'NV_Store'
	CALLS	'FactTSGenAGain', 'sprintf'
	CALLS	'FactTSGenAGain', 'rs232puts'
	CALLS	'FactTSGenAGain', 'sscanf'
	CALLS	'FactTSGenAGain', 'NV_Store'
	CALLS	'FactTSGenAGain', 'WriteCBGain'
	CALLS	'FactTSGenCGain', 'sprintf'
	CALLS	'FactTSGenCGain', 'rs232puts'
	CALLS	'FactTSGenCGain', 'sscanf'
	CALLS	'FactTSGenCGain', 'NV_Store'
	CALLS	'FactTSGenCGain', 'WriteCBChromaGain'
	CALLS	'FactTSGenPhase', 'sprintf'
	CALLS	'FactTSGenPhase', 'rs232puts'
	CALLS	'FactTSGenPhase', 'sscanf'
	CALLS	'FactTSGenPhase', 'NV_Store'
	CALLS	'FactTSGenPhase', 'SetCBDelay'
	CALLS	'FactTSGenScHPhase', 'sprintf'
	CALLS	'FactTSGenScHPhase', 'rs232puts'
	CALLS	'FactTSGenScHPhase', 'sscanf'
	CALLS	'FactTSGenScHPhase', 'NV_Store'
	CALLS	'FactTSGenScHPhase', 'SetCBScHPhase'
	CALLS	'FactAudioGenStatus', 'AudioStatus'
	CALLS	'FactAudioGenStatus', 'sprintf'
	CALLS	'FactAudioGenStatus', 'rs232puts'
	CALLS	'FactAudioGenDate', 'sprintf'
	CALLS	'FactAudioGenDate', 'rs232puts'
	CALLS	'FactAudioGenDate', 'sscanf'
	CALLS	'FactAudioGenDate', 'ValidateDate'
	CALLS	'FactAudioGenDate', 'NV_Store'
	CALLS	'FactAudioGenLevel', 'sprintf'
	CALLS	'FactAudioGenLevel', 'rs232puts'
	CALLS	'FactAudioGenLevel', 'sscanf'
	CALLS	'FactAudioGenLevel', 'NV_Store'
	CALLS	'FactAudioGenLevel', 'WriteAnlAudioDACLevel'
	CALLS	'FactPLDVersion', 'pld_version'
	CALLS	'FactPLDVersion', 'sprintf'
	CALLS	'FactPLDVersion', 'rs232puts'
	CALLS	'FactTCXOStatus', 'tcxo_status'
	CALLS	'FactTCXOStatus', 'sprintf'
	CALLS	'FactTCXOStatus', 'rs232puts'
	CALLS	'FactMultiMediaChip', 'sscanf'
	CALLS	'FactMultiMediaChip', 'TransmitIIC'
	CALLS	'FactMultiMediaChip', 'ReceiveIIC'
	CALLS	'FactMultiMediaChip', 'rs232printf'
	CALLS	'FactMultiMediaChip', 'sscanf'
	CALLS	'FactMultiMediaChip', 'TransmitIIC'
	CALLS	'FactMultiMediaChip', 'ReceiveIIC'
	CALLS	'FactMultiMediaChip', 'rs232printf'
	CALLS	'FindParameter', 'Cstrcmp'
	CALLS	'FLTToSamples', 'labs'
	CALLS	'FLTToSamples', 'abs'
	CALLS	'FLTToSamples', 'labs'
	CALLS	'FLTToSamples', 'abs'
	CALLS	'PrintSamplesToFLT', 'abs'
	CALLS	'PrintSamplesToFLT', 'rs232printf'
	CALLS	'PrintSamplesToFLT', 'abs'
	CALLS	'PrintSamplesToFLT', 'rs232printf'
	CALLS	'PrintSamplesToFLT', 'fabs'
	CALLS	'PrintSamplesToFLT', 'rs232printf'
	END
