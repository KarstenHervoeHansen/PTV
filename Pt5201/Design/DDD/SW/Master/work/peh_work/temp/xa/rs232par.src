; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -Ic:\cxa\rtxc\xa\include -I. -Ml
;          -O2 -s
$CASE
$NOZPAGE
	NAME	RS232PAR
	SYMB	TOOL, "XA C compiler v2.0", 1
	SYMB	TYPE, 256, "bit", 'g', 0, 1
	SYMB	FILE, "rs232par.c"
; rs232par.c    1	/* MODULE:                                                                  */
; rs232par.c    2	/*   r232par.c - RS232 command interpreter																	*/
; rs232par.c    3	/****************************************************************************/
; rs232par.c    4	/* FUNCTIONS:                                                               */
; rs232par.c    5	/*                                                                          */
; rs232par.c    6	/* TASKS:                                                                   */
; rs232par.c    7	/*                                                                          */
; rs232par.c    8	/* NOTES:                                                                   */
; rs232par.c    9	/*                                                                          */
; rs232par.c   10	/****************************************************************************/
; rs232par.c   11	/*
; rs232par.c   12	 *   PTV software for PT5201
; rs232par.c   13	 *   Copyright (c) 
; rs232par.c   14	 *   ProTeleVision Technologies A/S.
; rs232par.c   15	 *   ALL RIGHTS RESERVED
; rs232par.c   16	*/
; rs232par.c   17	/****************************************************************************/
; rs232par.c   18	
; rs232par.c   19	/**************************************************************************/
; rs232par.c   20	/* Include files:																													*/
; rs232par.c   21	
; rs232par.c   22	#include <ctype.h>
	SYMB	FILE, "c:\\cxa\\include\\ctype.h"
	SYMB	ENDF
; rs232par.c   23	#include <stdio.h>
	SYMB	FILE, "c:\\cxa\\include\\stdio.h"
	SYMB	FILE, "c:\\cxa\\include\\stdarg.h"
	SYMB	ENDF
	SYMB	TYPE, 257, 'n', #2, 130
	SYMB	TYPE, 258, 'P', #257
	SYMB	TYPE, 259, "_iobuf", 'S', 14,\
		 "_ptr", #258, 0,\
		 "_cnt", #16, 4,\
		 "_base", #258, 6,\
		 "_flag", #2, 10,\
		 "_file", #2, 11,\
		 "_bufsiz", #16, 12
	SYMB	TYPE, 260, "FILE", 'T', #259
	SYMB	TYPE, 261, 'n', #1, 130
	SYMB	TYPE, 262, 'P', #261
	SYMB	TYPE, 263, 'Z', #262, 0
	SYMB	TYPE, 265, "va_list", 'T', #263
	SYMB	TYPE, 266, "size_t", 'T', #18
	SYMB	TYPE, 267, "fpos_t", 'T', #7
	SYMB	ENDF
; rs232par.c   24	#include <math.h>
	SYMB	FILE, "c:\\cxa\\include\\math.h"
	SYMB	ENDF
; rs232par.c   25	#include <string.h>
	SYMB	FILE, "c:\\cxa\\include\\string.h"
	SYMB	ENDF
; rs232par.c   26	
; rs232par.c   27	#include "define.h"
	SYMB	FILE, "define.h"
	SYMB	ENDF
; rs232par.c   28	#include "util.h"
	SYMB	FILE, "util.h"
	SYMB	ENDF
; rs232par.c   29	#include "rs232par.h"
	SYMB	FILE, "rs232par.h"
	SYMB	ENDF
; rs232par.c   30	#include "rs232err.h"
	SYMB	FILE, "rs232err.h"
	SYMB	ENDF
; rs232par.c   31	#include "rs232cmd.h"
	SYMB	FILE, "rs232cmd.h"
	SYMB	FILE, "define.h"
	SYMB	ENDF
	SYMB	ENDF
; rs232par.c   32	#include "rs232.h"
	SYMB	FILE, "rs232.h"
	SYMB	FILE, "define.h"
	SYMB	ENDF
	SYMB	FILE, "rtxcobj.h"
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\rtxcapi.h"
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\typedef.h"
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 268, "KOBJNUM", 'T', #3
	SYMB	TYPE, 269, "TASK", 'T', #2
	SYMB	ENDF
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\rtxstruc.h"
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 270, "KSNUM", 'T', #3
	SYMB	TYPE, 271, "PRIORITY", 'T', #269
	SYMB	TYPE, 272, "TSTATE", 'T', #5
	SYMB	TYPE, 273, "TSLICE", 'T', #3
	SYMB	TYPE, 275, 'n', #274, 130
	SYMB	TYPE, 276, 'P', #275
	SYMB	TYPE, 278, 'n', #277, 130
	SYMB	TYPE, 279, 'P', #278
	SYMB	TYPE, 280, 'n', #270, 130
	SYMB	TYPE, 281, 'P', #280
	SYMB	TYPE, 282, 'X', 12, #1, 30, 0
	SYMB	TYPE, 283, 'n', #282, 129
	SYMB	TYPE, 284, 'P', #283
	SYMB	TYPE, 285, "frame", 'S', 24,\
		 "es", #3, 0,\
		 "cs", #3, 1,\
		 "ssel", #3, 2,\
		 "ds", #3, 3,\
		 "pksnum", #281, 4,\
		 "R2", #18, 8,\
		 "R3", #18, 10,\
		 "R4", #18, 12,\
		 "R5", #18, 14,\
		 "R6", #18, 16,\
		 "psw", #18, 18,\
		 "pc", #284, 20
	SYMB	TYPE, 286, 'n', #285, 130
	SYMB	TYPE, 287, 'P', #286
	SYMB	TYPE, 288, 'X', 12, #1, 30, 0
	SYMB	TYPE, 289, 'n', #288, 129
	SYMB	TYPE, 290, 'P', #289
	SYMB	TYPE, 274, "tcb", 'S', 36,\
		 "flink", #276, 0,\
		 "blink", #276, 4,\
		 "pclkblk", #279, 8,\
		 "task", #269, 12,\
		 "priority", #271, 13,\
		 "sp", #287, 14,\
		 "status", #272, 18,\
		 "pc_t0", #290, 20,\
		 "stackbase", #258, 24,\
		 "stacksize", #266, 28,\
		 "tslice", #273, 30,\
		 "newslice", #273, 31,\
		 "arg", #262, 32
	SYMB	TYPE, 291, "TCB", 'T', #274
	SYMB	TYPE, 292, "SEMA", 'T', #268
	SYMB	TYPE, 293, "MAP", 'T', #268
	SYMB	TYPE, 295, 'n', #294, 130
	SYMB	TYPE, 296, 'P', #295
	SYMB	TYPE, 294, "rtxcmsg", 'S', 8,\
		 "link", #296, 0,\
		 "task", #269, 4,\
		 "priority", #271, 5,\
		 "sema", #292, 6
	SYMB	TYPE, 297, "RTXCMSG", 'T', #294
	SYMB	TYPE, 298, "TICKS", 'T', #16
	SYMB	TYPE, 299, 'N',\
		 "DELAY_OBJ", 0,\
		 "SEMAPHORE_OBJ", 1,\
		 "PARTITION_OBJ", 2,\
		 "QUEUE_OBJ", 3,\
		 "RESOURCE_OBJ", 4,\
		 "MAILBOX_OBJ", 5,\
		 "TIMER_OBJ", 6
	SYMB	TYPE, 300, "OBJTYPE", 'T', #299
	SYMB	TYPE, 277, "clkblk", 'S', 18,\
		 "flink", #279, 0,\
		 "blink", #279, 4,\
		 "remain", #298, 8,\
		 "recycle", #298, 10,\
		 "task", #269, 12,\
		 "state", #2, 13,\
		 "objtype", #300, 14,\
		 "objid", #268, 16
	SYMB	TYPE, 301, 'N',\
		 "PRIORITY_INVERSION_OFF", 0,\
		 "PRIORITY_INVERSION_ON", 1
	SYMB	TYPE, 302, "RESATTR", 'T', #301
	SYMB	ENDF
	SYMB	TYPE, 303, 'N',\
		 "RC_GOOD", 0,\
		 "RC_WAIT_CONFLICT", 1,\
		 "RC_NO_TIMERS", 2,\
		 "RC_TIMER_INACTIVE", 3,\
		 "RC_TIMER_ILLEGAL", 4,\
		 "RC_TIMEOUT", 5,\
		 "RC_QUEUE_FULL", 6,\
		 "RC_QUEUE_EMPTY", 7,\
		 "RC_ILLEGAL_QUEUE_SIZE", 8,\
		 "RC_BUSY", 9,\
		 "RC_NESTED", 10,\
		 "RC_ILLEGAL_TASK", 11,\
		 "RC_ACTIVE_TASK", 12,\
		 "RC_NO_YIELD", 13,\
		 "RC_MISSED_EVENT", 14
	SYMB	TYPE, 304, "KSRC", 'T', #303
	SYMB	TYPE, 305, "SSTATE", 'T', #269
	SYMB	TYPE, 306, "MBOX", 'T', #268
	SYMB	TYPE, 307, "QUEUE", 'T', #268
	SYMB	TYPE, 308, 'N',\
		 "QNE", 0,\
		 "QNF", 1,\
		 "QF", 2,\
		 "QE", 3
	SYMB	TYPE, 309, "QCOND", 'T', #308
	SYMB	TYPE, 310, "RESOURCE", 'T', #268
	SYMB	TYPE, 311, "CLKBLK", 'T', #277
	SYMB	TYPE, 312, "time_t", 'T', #6
	SYMB	TYPE, 313, "FRAME", 'T', #285
	SYMB	ENDF
	SYMB	FILE, "ctask.h"
	SYMB	ENDF
	SYMB	FILE, "csema.h"
	SYMB	ENDF
	SYMB	FILE, "cres.h"
	SYMB	ENDF
	SYMB	FILE, "cqueue.h"
	SYMB	ENDF
	SYMB	FILE, "cpart.h"
	SYMB	ENDF
	SYMB	FILE, "cmbox.h"
	SYMB	ENDF
	SYMB	FILE, "cclock.h"
	SYMB	ENDF
	SYMB	TYPE, 315, 'n', #314, 130
	SYMB	TYPE, 316, 'P', #315
	SYMB	TYPE, 314, 'X', 12, #1, 30, 2, #316, #258
	SYMB	TYPE, 318, 'n', #317, 129
	SYMB	TYPE, 319, 'P', #318
	SYMB	TYPE, 320, 'X', 12, #1, 30, 1, #316
	SYMB	TYPE, 321, 'n', #320, 129
	SYMB	TYPE, 322, 'P', #321
	SYMB	TYPE, 323, 'n', #6, 130
	SYMB	TYPE, 324, 'P', #323
	SYMB	TYPE, 323, 'X', 12, #16, 30, 2, #316, #324
	SYMB	TYPE, 326, 'n', #325, 129
	SYMB	TYPE, 327, 'P', #326
	SYMB	TYPE, 328, 'X', 12, #1, 30, 1, #316
	SYMB	TYPE, 329, 'n', #328, 129
	SYMB	TYPE, 330, 'P', #329
	SYMB	TYPE, 331, 'X', 12, #1, 30, 1, #316
	SYMB	TYPE, 332, 'n', #331, 129
	SYMB	TYPE, 333, 'P', #332
	SYMB	TYPE, 334, 'X', 12, #16, 30, 1, #316
	SYMB	TYPE, 335, 'n', #334, 129
	SYMB	TYPE, 336, 'P', #335
	SYMB	TYPE, 314, "TEvent", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TEvent", #319, 2,\
		 "_TEvent", #322, 6,\
		 "Wait", #327, 10,\
		 "Set", #330, 14,\
		 "Clear", #333, 18,\
		 "IsSet", #336, 22,\
		 "ID", #292, 26,\
		 "Name", #258, 28
	SYMB	TYPE, 337, "TEvent", 'T', #314
	SYMB	TYPE, 339, 'n', #338, 130
	SYMB	TYPE, 340, 'P', #339
	SYMB	TYPE, 338, 'X', 12, #1, 30, 1, #340
	SYMB	TYPE, 342, 'n', #341, 129
	SYMB	TYPE, 343, 'P', #342
	SYMB	TYPE, 344, 'X', 12, #1, 30, 1, #340
	SYMB	TYPE, 345, 'n', #344, 129
	SYMB	TYPE, 346, 'P', #345
	SYMB	TYPE, 347, 'n', #337, 130
	SYMB	TYPE, 348, 'P', #347
	SYMB	TYPE, 347, 'X', 12, #16, 30, 2, #340, #348
	SYMB	TYPE, 350, 'n', #349, 129
	SYMB	TYPE, 351, 'P', #350
	SYMB	TYPE, 352, 'X', 12, #1, 30, 2, #340, #348
	SYMB	TYPE, 353, 'n', #352, 129
	SYMB	TYPE, 354, 'P', #353
	SYMB	TYPE, 355, 'X', 12, #16, 30, 2, #340, #348
	SYMB	TYPE, 356, 'n', #355, 129
	SYMB	TYPE, 357, 'P', #356
	SYMB	TYPE, 358, 'X', 12, #348, 30, 2, #340, #324
	SYMB	TYPE, 359, 'n', #358, 129
	SYMB	TYPE, 360, 'P', #359
	SYMB	TYPE, 361, 'Z', #2, 95
	SYMB	TYPE, 338, "TEventList", 'S', 122,\
		 "ObjectID", #16, 0,\
		 "TEventList", #343, 2,\
		 "_TEventList", #346, 6,\
		 "Append", #351, 10,\
		 "Clear", #354, 14,\
		 "InList", #357, 18,\
		 "Wait", #360, 22,\
		 "Align", #361, 26
	SYMB	TYPE, 363, "TEventList", 'T', #338
	SYMB	TYPE, 365, 'n', #364, 130
	SYMB	TYPE, 366, 'P', #365
	SYMB	TYPE, 364, 'X', 12, #1, 30, 2, #366, #258
	SYMB	TYPE, 368, 'n', #367, 129
	SYMB	TYPE, 369, 'P', #368
	SYMB	TYPE, 370, 'X', 12, #1, 30, 1, #366
	SYMB	TYPE, 371, 'n', #370, 129
	SYMB	TYPE, 372, 'P', #371
	SYMB	TYPE, 373, 'X', 12, #1, 30, 1, #366
	SYMB	TYPE, 374, 'n', #373, 129
	SYMB	TYPE, 375, 'P', #374
	SYMB	TYPE, 376, 'X', 12, #1, 30, 1, #366
	SYMB	TYPE, 377, 'n', #376, 129
	SYMB	TYPE, 378, 'P', #377
	SYMB	TYPE, 379, 'X', 12, #16, 30, 1, #366
	SYMB	TYPE, 380, 'n', #379, 129
	SYMB	TYPE, 381, 'P', #380
	SYMB	TYPE, 364, "TResource", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TResource", #369, 2,\
		 "_TResource", #372, 6,\
		 "Lock", #375, 10,\
		 "Unlock", #378, 14,\
		 "Owner", #381, 18,\
		 "ID", #310, 22,\
		 "Name", #258, 24
	SYMB	TYPE, 382, "TResource", 'T', #364
	SYMB	TYPE, 383, 'X', 12, #1, 30, 0
	SYMB	TYPE, 384, 'n', #383, 129
	SYMB	TYPE, 385, 'P', #384
	SYMB	TYPE, 387, 'n', #386, 130
	SYMB	TYPE, 388, 'P', #387
	SYMB	TYPE, 383, 'X', 12, #1, 30, 3, #388, #16, #385
	SYMB	TYPE, 390, 'n', #389, 129
	SYMB	TYPE, 391, 'P', #390
	SYMB	TYPE, 392, 'X', 12, #1, 30, 1, #388
	SYMB	TYPE, 393, 'n', #392, 129
	SYMB	TYPE, 394, 'P', #393
	SYMB	TYPE, 395, 'X', 12, #1, 30, 1, #388
	SYMB	TYPE, 396, 'n', #395, 129
	SYMB	TYPE, 397, 'P', #396
	SYMB	TYPE, 398, 'X', 12, #1, 30, 2, #388, #16
	SYMB	TYPE, 399, 'n', #398, 129
	SYMB	TYPE, 400, 'P', #399
	SYMB	TYPE, 401, 'X', 12, #1, 30, 1, #388
	SYMB	TYPE, 402, 'n', #401, 129
	SYMB	TYPE, 403, 'P', #402
	SYMB	TYPE, 404, 'X', 12, #16, 30, 1, #388
	SYMB	TYPE, 405, 'n', #404, 129
	SYMB	TYPE, 406, 'P', #405
	SYMB	TYPE, 407, 'X', 12, #1, 30, 2, #388, #16
	SYMB	TYPE, 408, 'n', #407, 129
	SYMB	TYPE, 409, 'P', #408
	SYMB	TYPE, 386, "TThread", 'S', 36,\
		 "ObjectID", #16, 0,\
		 "TThread", #391, 2,\
		 "Execute", #394, 6,\
		 "Terminate", #397, 10,\
		 "Suspend", #400, 14,\
		 "Resume", #403, 18,\
		 "GetPriority", #406, 22,\
		 "SetPriority", #409, 26,\
		 "ID", #269, 30,\
		 "Status", #2, 31,\
		 "Stack", #258, 32
	SYMB	TYPE, 410, "TThread", 'T', #386
	SYMB	TYPE, 412, 'n', #411, 130
	SYMB	TYPE, 413, 'P', #412
	SYMB	TYPE, 411, 'X', 12, #1, 30, 1, #413
	SYMB	TYPE, 415, 'n', #414, 129
	SYMB	TYPE, 416, 'P', #415
	SYMB	TYPE, 417, 'X', 12, #1, 30, 1, #413
	SYMB	TYPE, 418, 'n', #417, 129
	SYMB	TYPE, 419, 'P', #418
	SYMB	TYPE, 420, 'X', 12, #1, 30, 2, #413, #16
	SYMB	TYPE, 421, 'n', #420, 129
	SYMB	TYPE, 422, 'P', #421
	SYMB	TYPE, 423, 'X', 12, #16, 30, 1, #413
	SYMB	TYPE, 424, 'n', #423, 129
	SYMB	TYPE, 425, 'P', #424
	SYMB	TYPE, 426, 'X', 12, #1, 30, 2, #413, #16
	SYMB	TYPE, 427, 'n', #426, 129
	SYMB	TYPE, 428, 'P', #427
	SYMB	TYPE, 429, 'n', #311, 130
	SYMB	TYPE, 430, 'P', #429
	SYMB	TYPE, 411, "TTimer", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TTimer", #416, 2,\
		 "_TTimer", #419, 6,\
		 "SetPeriod", #422, 10,\
		 "GetPeriod", #425, 14,\
		 "Tick", #428, 18,\
		 "TimeOut", #348, 22,\
		 "Period", #4, 26,\
		 "Handle", #430, 28
	SYMB	TYPE, 431, "TTimer", 'T', #411
	SYMB	TYPE, 433, 'n', #432, 130
	SYMB	TYPE, 434, 'P', #433
	SYMB	TYPE, 432, 'X', 12, #1, 30, 3, #434, #16, #16
	SYMB	TYPE, 436, 'n', #435, 129
	SYMB	TYPE, 437, 'P', #436
	SYMB	TYPE, 438, 'X', 12, #1, 30, 1, #434
	SYMB	TYPE, 439, 'n', #438, 129
	SYMB	TYPE, 440, 'P', #439
	SYMB	TYPE, 441, 'X', 12, #258, 30, 2, #434, #262
	SYMB	TYPE, 442, 'n', #441, 129
	SYMB	TYPE, 443, 'P', #442
	SYMB	TYPE, 444, 'X', 12, #1, 30, 2, #434, #262
	SYMB	TYPE, 445, 'n', #444, 129
	SYMB	TYPE, 446, 'P', #445
	SYMB	TYPE, 432, "TStream", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TStream", #437, 2,\
		 "_TStream", #440, 6,\
		 "Get", #443, 10,\
		 "Put", #446, 14,\
		 "ID", #307, 18,\
		 "Width", #16, 20,\
		 "Depth", #16, 22,\
		 "Handle", #258, 24
	SYMB	TYPE, 447, "TStream", 'T', #432
	SYMB	ENDF
	SYMB	ENDF
; rs232par.c   33	
; rs232par.c   34	#define StateP0			0
; rs232par.c   35	#define StateP1			StateP0+1
; rs232par.c   36	#define StateP2			StateP1+1
; rs232par.c   37	#define StateP3			StateP2+1
; rs232par.c   38	#define StateP4			StateP3+1
; rs232par.c   39	#define StateP5			StateP4+1
; rs232par.c   40	#define StateP6			StateP5+1
; rs232par.c   41	#define StateP7			StateP6+1
; rs232par.c   42	#define StateP8			StateP7+1
; rs232par.c   43	
; rs232par.c   44	#define StateC0			StateP8+1
; rs232par.c   45	
; rs232par.c   46	#define StateD0			StateC0+1
; rs232par.c   47	#define StateD1			StateD0+1
; rs232par.c   48	#define StateD2			StateD1+1
; rs232par.c   49	#define StateD3			StateD2+1
; rs232par.c   50	#define StateD4			StateD3+1
; rs232par.c   51	#define StateD5			StateD4+1
; rs232par.c   52	#define StateD6			StateD5+1
; rs232par.c   53	#define StateD7			StateD6+1
; rs232par.c   54	
; rs232par.c   55	#define StateS0			StateD7+1
; rs232par.c   56	#define StateS1			StateS0+1
; rs232par.c   57	#define StateS2			StateS1+1
; rs232par.c   58	#define StateS3			StateS2+1
; rs232par.c   59	
; rs232par.c   60	#define StateDA0 		StateS3+1
; rs232par.c   61	#define StateDA1 		StateDA0+1
; rs232par.c   62	#define StateDA2 		StateDA1+1
; rs232par.c   63	#define StateDA3 		StateDA2+1
; rs232par.c   64	#define StateDA4 		StateDA3+1
; rs232par.c   65	#define StateDA5 		StateDA4+1
; rs232par.c   66	
; rs232par.c   67	#define StateA0			StateDA5+1
; rs232par.c   68	
; rs232par.c   69	#define StateE0			StateA0+1
; rs232par.c   70	
; rs232par.c   71	#define StateERROR	StateE0+1
; rs232par.c   72	
; rs232par.c   73	#define iswhitespace(c)		(((c) != 0x0A) && ((c) <= 0x20))
; rs232par.c   74	#define isoctaldigit(c)		(((c) >= '0') && ((c) <= '7'))
; rs232par.c   75	#define isbinarydigit(c)	(((c) == '0') || ((c) == '1'))
; rs232par.c   76	#define iscolon(c)				((c) == ':')
; rs232par.c   77	#define isasterix(c)			((c) == '*')
; rs232par.c   78	#define issemicolon(c)		((c) == ';')
; rs232par.c   79	#define isquestionmark(c)	((c) == '?')
; rs232par.c   80	#define isunderscore(c)		((c) == '_')
; rs232par.c   81	#define isplussign(c)			((c) == '+')
; rs232par.c   82	#define isminussign(c)		((c) == '-')
; rs232par.c   83	#define isslash(c)				((c) == '/')
; rs232par.c   84	#define isdoubledagger(c)	((c) == '#')
; rs232par.c   85	#define isdot(c)					((c) == '.')
; rs232par.c   86	#define iscomma(c)				((c) == ',')
; rs232par.c   87	#define isquote(c)				((c) == '\'')
; rs232par.c   88	#define isdoublequote(c)	((c) == '\"')
; rs232par.c   89	#define isnewline(c)			((c) == 0x0A)		// Newline is Linefeed
; rs232par.c   90	
; rs232par.c   91	enum CmdStates	{ Idle = 0, NextLevel, Ready, PMUS, PMT, Error };
; rs232par.c   92	
; rs232par.c   93	bit NewCmdExecuted;
; rs232par.c   94	bit CmdRequest, CmdExecute;
; rs232par.c   95	
; rs232par.c   96	UC ResponseReceived;
; rs232par.c   97	
; rs232par.c   98	char Cmd[512];
; rs232par.c   99	UI CmdNdx;
; rs232par.c  100	
; rs232par.c  101	UI NumSuffix;
; rs232par.c  102	
; rs232par.c  103	UC ParCnt;
; rs232par.c  104	UC ParType[10];
; rs232par.c  105	
; rs232par.c  106	static struct CMD_STRUCT code* CmdPtr = &Subsystem[0];
RS232PAR_INI_FA	SEGMENT	HDATA INSEGMENT INIT
	RSEG	RS232PAR_INI_FA
	SYMB	TYPE, 448, 'n', #2, 129
	SYMB	TYPE, 449, 'P', #448
	SYMB	TYPE, 451, 'n', #450, 129
	SYMB	TYPE, 452, 'P', #451
	SYMB	TYPE, 453, 'X', 12, #1, 30, 0
	SYMB	TYPE, 454, 'n', #453, 129
	SYMB	TYPE, 455, 'P', #454
	SYMB	TYPE, 456, 'X', 12, #1, 30, 0
	SYMB	TYPE, 457, 'n', #456, 129
	SYMB	TYPE, 458, 'P', #457
	SYMB	TYPE, 450, "CMD_STRUCT", 'S', 24,\
		 "LongName", #449, 0,\
		 "ShortName", #449, 4,\
		 "SameLevel", #452, 8,\
		 "NextLevel", #452, 12,\
		 "Suffix", #455, 16,\
		 "Function", #458, 20
	SYMB	IDEN, "CmdPtr", _CmdPtr, #452, 130, 4
	ALIGN	1
_CmdPtr:
; rs232par.c  107	static struct CMD_STRUCT code* CmdLevelPtr = &Subsystem[0];
	DD	_Subsystem
	SYMB	IDEN, "CmdLevelPtr", _CmdLevelPtr, #452, 130, 4
	ALIGN	1
_CmdLevelPtr:
; rs232par.c  108	
; rs232par.c  109	static UC State = StateP0;
	DD	_Subsystem
	SYMB	IDEN, "State", _State, #3, 130, 4
; rs232par.c  110	
; rs232par.c  111	static UI NoOfBytes;
; rs232par.c  112	static UC NoOfDigits;
; rs232par.c  113	
; rs232par.c  114	/**************************************************************************/
; rs232par.c  115	/* CmdSyntax															 	   								 RS232PAR.C	*/
; rs232par.c  116	/*																																				*/
; rs232par.c  117	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232par.c  118	/* Revised:		000414				     																					*/
; rs232par.c  119	/*																																				*/
; rs232par.c  120	/* Function:	--																													*/
; rs232par.c  121	/* Remarks:		--																													*/
; rs232par.c  122	/* Returns:		Command state																								*/
; rs232par.c  123	/* Updates:		--																													*/
; rs232par.c  124	/**************************************************************************/
; rs232par.c  125	char CmdSyntax( char c)
; rs232par.c  126	{
_State:	DB	000H
RS232PAR_PR	SEGMENT	HCODE
	RSEG	RS232PAR_PR
	ALIGN	1
	SYMB	LINE, 126
	PUBLIC	_CmdSyntax
_CmdSyntax:
	SYMB	TYPE, 459, 'X', 12, #2, 30, 1, #2
	SYMB	GFUN, "CmdSyntax", _CmdSyntax, #459, 0, 0, 48
	SYMB	ALAB, _CmdSyntax, #459
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0CH
	SYMB	SOFF, 8
	SYMB	LTIM, "c", 0, 0, 2253
	SYMB	IDEN, "c", 0, #2, 0, 2061
	SYMB	IDEN, "c_str", -1, #2, 130, 5
	SYMB	LTIM, "c_str", -1, 0, 69
	SYMB	LTIM, "c_str", 0, 0, 205
; rs232par.c  127		char c_str;
; rs232par.c  128	
; rs232par.c  129		c_str = c;
; rs232par.c  130		c = toupper( c);
	SYMB	LINE, 130
	MOV.B	R4H,R0L
	MOV.B	R0L,R4H
	SEXT.B	R0H
	SYMB	LTIM, "c_str", 0, 0, 77
	SYMB	LTIM, "c_str", 17, 0, 205
	SYMB	LTIM, "c", 0, 0, 2125
	SYMB	LTIM, "c", 17, 0, 2253
RS232PAR_IR	SEGMENT	HCODE INSEGMENT ROMDATA
	RSEG	RS232PAR_IR
	ALIGN	1
__swtable385:
	DW	SOF _11,SEG _11
	DW	SOF _17,SEG _17
	DW	SOF _19,SEG _19
	DW	SOF _31,SEG _31
	DW	SOF _33,SEG _33
	DW	SOF _43,SEG _43
	DW	SOF _48,SEG _48
	DW	SOF _62,SEG _62
	DW	SOF _68,SEG _68
	DW	SOF _80,SEG _80
	DW	SOF _90,SEG _90
	DW	SOF _93,SEG _93
	DW	SOF _96,SEG _96
	DW	SOF _108,SEG _108
	DW	SOF _118,SEG _118
	DW	SOF _126,SEG _126
	DW	SOF _134,SEG _134
	DW	SOF _137,SEG _137
	DW	SOF _145,SEG _145
	DW	SOF _147,SEG _147
	DW	SOF _154,SEG _154
	DW	SOF _156,SEG _156
	DW	SOF _163,SEG _163
	DW	SOF _169,SEG _169
	DW	SOF _176,SEG _176
	DW	SOF _184,SEG _184
	DW	SOF _192,SEG _192
	DW	SOF _201,SEG _201
	DW	SOF _203,SEG _203
	DW	SOF _205,SEG _205
	DW	SOF _206,SEG _206
	RSEG	RS232PAR_PR
	CALL	_toupper
	MOV.W	R5,R0
	SYMB	LTIM, "c_str", 17, 0, 77
	SYMB	LTIM, "c", 17, 0, 2125
	SYMB	LTIM, "c", 17, 0, 2253
	SYMB	LTIM, "c", 17, 0, 2125
	SYMB	LTIM, "c", 20, 0, 2253
; rs232par.c  131	
; rs232par.c  132		switch ( rs232GetLastError())
	SYMB	LINE, 132
	CALL	_rs232GetLastError
	CMP.W	R0,#00H
	BEQ	_10
	CMP.W	R0,#02H
	BEQ	_3
	CMP.W	R0,#01H
	BEQ	_4
	CMP.W	R0,#08H
	BEQ	_5
	BR	_6
; rs232par.c  133		{
; rs232par.c  134			case ERR_NONE:
; rs232par.c  135				break;
; rs232par.c  136	
; rs232par.c  137			case ERR_OVERFLOW:
	SYMB	LINE, 137
_3:
; rs232par.c  138				SCPIError = InputBufferOverrun;
	SYMB	LINE, 138
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02BH
; rs232par.c  139				State = StateERROR;
	SYMB	LINE, 139
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  140				break;
	SYMB	LINE, 140
	BR	_10
; rs232par.c  141	
; rs232par.c  142			case ERR_PARITY:
	SYMB	LINE, 142
_4:
; rs232par.c  143				SCPIError = ParityErrInMessage;
	SYMB	LINE, 143
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#029H
; rs232par.c  144				State = StateERROR;
	SYMB	LINE, 144
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  145				break;
	SYMB	LINE, 145
	BR	_10
; rs232par.c  146	
; rs232par.c  147			case ERR_FRAMING:
	SYMB	LINE, 147
_5:
; rs232par.c  148				SCPIError = FramingErrInMessage;
	SYMB	LINE, 148
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02AH
; rs232par.c  149				State = StateERROR;
	SYMB	LINE, 149
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  150				break;
	SYMB	LINE, 150
	BR	_10
; rs232par.c  151	
; rs232par.c  152			default:
	SYMB	LINE, 152
_6:
; rs232par.c  153				SCPIError = CommunicationErr;
	SYMB	LINE, 153
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#028H
; rs232par.c  154				State = StateERROR;
	SYMB	LINE, 154
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  155				break;
; rs232par.c  156		}
	SYMB	LINE, 156
_10:
; rs232par.c  157	
; rs232par.c  158		switch ( State)
	SYMB	LINE, 158
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	R1L,[R0]
	CMP.B	R1L,#01EH
	BG	_329
	XOR.B	R1H,R1H
	ASL.W	R1,#02H
	MOV.B	CS,#SEG( __swtable385 )
	ADD.W	R1,#SOF( __swtable385 )
	MOVC.W	R0,[R1+]
	PUSH.W	R0
	MOVC.W	R0,[R1+]
	PUSH.W	R0
	RET
; rs232par.c  159		{
; rs232par.c  160			case StateP0:							 // COMMAND PROGRAM DATA
	SYMB	LINE, 160
_11:
; rs232par.c  161				SCPIError = NoErr;
	SYMB	LINE, 161
	MOV.W	R4,#00H
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#00H
; rs232par.c  162				CmdExecute = CmdRequest = FALSE;
	SYMB	LINE, 162
	MOV.B	R1L,#00H
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	[R0],#00H
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	[R0],R1L
; rs232par.c  163				ParType[ParCnt = 0] = P_NoParameter;
	SYMB	LINE, 163
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	[R0],R1L
	MOV.B	R2L,R1L
	SEXT.B	R2H
	SEXT.W	R3
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R2+SOF( _ParType )],R1L
; rs232par.c  164	
; rs232par.c  165				if ( iswhitespace(c) || issemicolon(c))
	SYMB	LINE, 165
	CMP.B	R5L,#0AH
	BEQ	_12
	CMP.B	R5L,#020H
	BLE	_329
_12:
	CMP.B	R5L,#03BH
	BEQ	_329
; rs232par.c  166					break;
; rs232par.c  167	
; rs232par.c  168				if ( isalpha(c))
	SYMB	LINE, 168
	MOV.B	R2L,R5L
	SEXT.B	R2H
	SEXT.W	R3
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R0L,[R2+SOF( __ctype_+1 )]
	SEXT.B	R0H
	AND.W	R0,#03H
	BEQ	_13
; rs232par.c  169				{
; rs232par.c  170					Cmd[CmdNdx = 0] = c;
	SYMB	LINE, 170
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	[R0],R4
	MOV.W	R0,R4
	SEXT.W	R1
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],R5L
; rs232par.c  171					NumSuffix = 0;
	SYMB	LINE, 171
	MOV.B	ES,#SEG( _NumSuffix )
	MOV.W	R0,#SOF( _NumSuffix )
	MOV.W	[R0],#00H
; rs232par.c  172					State = StateP2;
	SYMB	LINE, 172
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#02H
; rs232par.c  173					CmdPtr = CmdLevelPtr;
	SYMB	LINE, 173
	MOV.B	ES,#SEG( _CmdLevelPtr )
	MOV.W	R1,#SOF( _CmdLevelPtr )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _CmdPtr )
	MOV.W	R2,#SOF( _CmdPtr )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232par.c  174					break;
	SYMB	LINE, 174
	BR	_329
; rs232par.c  175				}
	SYMB	LINE, 175
_13:
	SYMB	LTIM, "c", 20, 0, 2125
; rs232par.c  176	
; rs232par.c  177				if ( iscolon(c))
	SYMB	LINE, 177
	CMP.B	R5L,#03AH
	BNE	_14
; rs232par.c  178				{
; rs232par.c  179					State = StateP1;
	SYMB	LINE, 179
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01H
; rs232par.c  180					CmdPtr = CmdLevelPtr = &Subsystem[0];
	SYMB	LINE, 180
	MOV.B	ES,#SEG( _CmdLevelPtr )
	MOV.W	R0,#SOF( _CmdLevelPtr )
	MOV.W	[R0+],#SOF( _Subsystem )
	MOV.W	[R0],#SEG( _Subsystem )
	MOV.B	ES,#SEG( _CmdPtr )
	MOV.W	R0,#SOF( _CmdPtr )
	MOV.W	[R0+],#SOF( _Subsystem )
	MOV.W	[R0],#SEG( _Subsystem )
; rs232par.c  181					break;
	SYMB	LINE, 181
	BR	_329
; rs232par.c  182				}
	SYMB	LINE, 182
_14:
; rs232par.c  183	
; rs232par.c  184				if ( isasterix(c))
	SYMB	LINE, 184
	CMP.B	R5L,#02AH
	BNE	_15
; rs232par.c  185				{
; rs232par.c  186					Cmd[CmdNdx = 0] = c;
	SYMB	LINE, 186
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	[R0],R4
	MOV.W	R0,R4
	SEXT.W	R1
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],R5L
; rs232par.c  187					State = StateP3;
	SYMB	LINE, 187
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#03H
; rs232par.c  188					CmdLevelPtr = CmdPtr;
	SYMB	LINE, 188
	MOV.B	ES,#SEG( _CmdPtr )
	MOV.W	R1,#SOF( _CmdPtr )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _CmdLevelPtr )
	MOV.W	R2,#SOF( _CmdLevelPtr )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232par.c  189					CmdPtr = &Mandated[0];
	SYMB	LINE, 189
	MOV.B	ES,#SEG( _CmdPtr )
	MOV.W	R0,#SOF( _CmdPtr )
	MOV.W	[R0+],#SOF( _Mandated )
	MOV.W	[R0],#SEG( _Mandated )
; rs232par.c  190					break;
	SYMB	LINE, 190
	BR	_329
; rs232par.c  191				}
	SYMB	LINE, 191
_15:
; rs232par.c  192	
; rs232par.c  193				if ( isnewline(c))
	SYMB	LINE, 193
	CMP.B	R5L,#0AH
	BNE	_16
; rs232par.c  194				{
; rs232par.c  195					Cmd[CmdNdx = 0] = 0;
	SYMB	LINE, 195
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	[R0],R4
	MOV.W	R4,R4
	SEXT.W	R5
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R4+SOF( _Cmd )],R1L
; rs232par.c  196					State = StateP0;
	SYMB	LINE, 196
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  197					CmdPtr = CmdLevelPtr = &Subsystem[0];
	SYMB	LINE, 197
	MOV.B	ES,#SEG( _CmdLevelPtr )
	MOV.W	R0,#SOF( _CmdLevelPtr )
	MOV.W	[R0+],#SOF( _Subsystem )
	MOV.W	[R0],#SEG( _Subsystem )
	MOV.B	ES,#SEG( _CmdPtr )
	MOV.W	R0,#SOF( _CmdPtr )
	MOV.W	[R0+],#SOF( _Subsystem )
	MOV.W	[R0],#SEG( _Subsystem )
; rs232par.c  198					return( PMT);
	SYMB	LINE, 198
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c  199				}
	SYMB	LINE, 199
_16:
; rs232par.c  200	
; rs232par.c  201				SCPIError = InvalidChar;
	SYMB	LINE, 201
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  202				State = StateERROR;
	SYMB	LINE, 202
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  203				break;
	SYMB	LINE, 203
	BR	_329
; rs232par.c  204	
; rs232par.c  205			case StateP1:
	SYMB	LINE, 205
_17:
; rs232par.c  206				if ( isalpha(c))
	SYMB	LINE, 206
	MOV.B	R0L,R5L
	SEXT.B	R0H
	SEXT.W	R1
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R0L,[R0+SOF( __ctype_+1 )]
	SEXT.B	R0H
	AND.W	R0,#03H
	BEQ	_18
; rs232par.c  207				{
; rs232par.c  208					Cmd[CmdNdx = 0] = c;
	SYMB	LINE, 208
	MOV.W	R1,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	[R0],#00H
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  209					NumSuffix = 0;
	SYMB	LINE, 209
	MOV.B	ES,#SEG( _NumSuffix )
	MOV.W	R0,#SOF( _NumSuffix )
	MOV.W	[R0],#00H
; rs232par.c  210					State = StateP2;
	SYMB	LINE, 210
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#02H
; rs232par.c  211					break;
	SYMB	LINE, 211
	BR	_329
; rs232par.c  212				}
	SYMB	LINE, 212
_18:
; rs232par.c  213	
; rs232par.c  214				SCPIError = InvalidChar;
	SYMB	LINE, 214
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  215				State = StateERROR;
	SYMB	LINE, 215
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  216				break;
	SYMB	LINE, 216
	BR	_329
; rs232par.c  217	
; rs232par.c  218			case StateP2:
	SYMB	LINE, 218
_19:
; rs232par.c  219				if ( iswhitespace( c))
	SYMB	LINE, 219
	CMP.B	R5L,#0AH
	BEQ	_21
	CMP.B	R5L,#020H
	BGT	_21
; rs232par.c  220				{
; rs232par.c  221					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 221
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  222					State = StateP6;
	SYMB	LINE, 222
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#06H
; rs232par.c  223					return( Ready);
	SYMB	LINE, 223
	MOV.B	R0L,#02H
	BR	_384
; rs232par.c  224				}
	SYMB	LINE, 224
_21:
; rs232par.c  225	
; rs232par.c  226				if ( isalpha(c) || isunderscore(c) || isdigit(c))
	SYMB	LINE, 226
	MOV.B	R0L,R5L
	SEXT.B	R0H
	SEXT.W	R1
	MOV.W	R3,#SEG( __ctype_+1 )
	MOV.W	R2,#SOF( __ctype_+1 )
	ADD.W	R2,R0
	MOV.W	[R7+2],R3
	MOV.W	[R7],R2
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R0L,[R0+SOF( __ctype_+1 )]
	MOV.B	R0H,#03H
	AND.B	R0H,R0L
	BNE	_23
	CMP.B	R5L,#05FH
	BEQ	_23
	AND.B	R0L,#04H
	BEQ	_26
_23:
; rs232par.c  227				{
; rs232par.c  228					CmdLevelPtr = CmdPtr;
	SYMB	LINE, 228
	MOV.B	ES,#SEG( _CmdPtr )
	MOV.W	R1,#SOF( _CmdPtr )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _CmdLevelPtr )
	MOV.W	R4,#SOF( _CmdLevelPtr )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
; rs232par.c  229	
; rs232par.c  230					if ( CmdNdx < 11)
	SYMB	LINE, 230
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	CMP.W	R0,#0BH
	BCC	_25
; rs232par.c  231					{
; rs232par.c  232						Cmd[++CmdNdx] = c;
	SYMB	LINE, 232
	ADDS.W	R0,#01H
	MOV.W	R1,R0
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R4,#SOF( _CmdNdx )
	MOV.W	[R4],R1
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  233						if ( isdigit(c))
	SYMB	LINE, 233
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	MOV.B	ES,R3L
	MOV.B	R1L,[R2]
	SEXT.B	R1H
	AND.W	R1,#04H
	BEQ	_24
; rs232par.c  234						{
; rs232par.c  235							NumSuffix = 10*NumSuffix + ( c-'0');
	SYMB	LINE, 235
	MOV.B	ES,#SEG( _NumSuffix )
	MOV.W	R0,#SOF( _NumSuffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#0AH
	MOV.B	R5L,R5L
	SEXT.B	R5H
	SUB.W	R5,#030H
	ADD.W	R0,R5
	MOV.B	ES,#SEG( _NumSuffix )
	MOV.W	R1,#SOF( _NumSuffix )
	MOV.W	[R1],R0
; rs232par.c  236							break;
	SYMB	LINE, 236
	BR	_329
; rs232par.c  237						}
	SYMB	LINE, 237
_24:
; rs232par.c  238						NumSuffix = 0;
	SYMB	LINE, 238
	MOV.B	ES,#SEG( _NumSuffix )
	MOV.W	R1,#SOF( _NumSuffix )
	MOV.W	[R1],#00H
; rs232par.c  239						NoOfDigits = CmdNdx + 1;
	SYMB	LINE, 239
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _NoOfDigits )
	MOV.W	R1,#SOF( _NoOfDigits )
	MOV.B	[R1],R0L
; rs232par.c  240						break;
	SYMB	LINE, 240
	BR	_329
; rs232par.c  241					}
	SYMB	LINE, 241
_25:
; rs232par.c  242	
; rs232par.c  243					SCPIError = PrgmMnemonicTooLong;
	SYMB	LINE, 243
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#0AH
; rs232par.c  244					State = StateERROR;
	SYMB	LINE, 244
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  245					break;
	SYMB	LINE, 245
	BR	_329
; rs232par.c  246				}
	SYMB	LINE, 246
_26:
; rs232par.c  247	
; rs232par.c  248				if ( isquestionmark(c))
	SYMB	LINE, 248
	CMP.B	R5L,#03FH
	BNE	_27
; rs232par.c  249				{
; rs232par.c  250					State = StateP5;
	SYMB	LINE, 250
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#05H
; rs232par.c  251					CmdRequest = TRUE;
	SYMB	LINE, 251
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	[R0],#0FFH
; rs232par.c  252					break;
	SYMB	LINE, 252
	BR	_329
; rs232par.c  253				}
	SYMB	LINE, 253
_27:
; rs232par.c  254	
; rs232par.c  255				if ( issemicolon(c))
	SYMB	LINE, 255
	CMP.B	R5L,#03BH
	BNE	_28
; rs232par.c  256				{
; rs232par.c  257					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 257
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  258					State = StateP0;
	SYMB	LINE, 258
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  259					return( PMUS);
	SYMB	LINE, 259
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c  260				}
	SYMB	LINE, 260
_28:
; rs232par.c  261	
; rs232par.c  262				if ( iscolon(c))
	SYMB	LINE, 262
	CMP.B	R5L,#03AH
	BNE	_29
; rs232par.c  263				{
; rs232par.c  264					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 264
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  265					State = StateP1;
	SYMB	LINE, 265
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01H
; rs232par.c  266					return( NextLevel);
	SYMB	LINE, 266
	MOV.B	R0L,#01H
	BR	_384
; rs232par.c  267				}
	SYMB	LINE, 267
_29:
; rs232par.c  268	
; rs232par.c  269				if ( isnewline(c))
	SYMB	LINE, 269
	CMP.B	R5L,#0AH
	BNE	_30
; rs232par.c  270				{
; rs232par.c  271					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 271
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  272					State = StateP0;
	SYMB	LINE, 272
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  273					return( PMT);
	SYMB	LINE, 273
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c  274				}
	SYMB	LINE, 274
_30:
; rs232par.c  275	
; rs232par.c  276				SCPIError = InvalidChar;
	SYMB	LINE, 276
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  277				State = StateERROR;
	SYMB	LINE, 277
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  278				break;
	SYMB	LINE, 278
	BR	_329
; rs232par.c  279	
; rs232par.c  280			case StateP3:
	SYMB	LINE, 280
_31:
; rs232par.c  281				if ( isalpha(c))
	SYMB	LINE, 281
	MOV.B	R0L,R5L
	SEXT.B	R0H
	SEXT.W	R1
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R0L,[R0+SOF( __ctype_+1 )]
	SEXT.B	R0H
	AND.W	R0,#03H
	BEQ	_32
; rs232par.c  282				{
; rs232par.c  283					Cmd[CmdNdx = 0] = c;
	SYMB	LINE, 283
	MOV.W	R1,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	[R0],#00H
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  284					NumSuffix = 0;
	SYMB	LINE, 284
	MOV.B	ES,#SEG( _NumSuffix )
	MOV.W	R0,#SOF( _NumSuffix )
	MOV.W	[R0],#00H
; rs232par.c  285					State = StateP4;
	SYMB	LINE, 285
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#04H
; rs232par.c  286					break;
	SYMB	LINE, 286
	BR	_329
; rs232par.c  287				}
	SYMB	LINE, 287
_32:
; rs232par.c  288	
; rs232par.c  289				SCPIError = InvalidChar;
	SYMB	LINE, 289
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  290				State = StateERROR;
	SYMB	LINE, 290
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  291				break;
	SYMB	LINE, 291
	BR	_329
; rs232par.c  292	
; rs232par.c  293			case StateP4:
	SYMB	LINE, 293
_33:
; rs232par.c  294				if ( iswhitespace(c))
	SYMB	LINE, 294
	CMP.B	R5L,#0AH
	BEQ	_35
	CMP.B	R5L,#020H
	BGT	_35
; rs232par.c  295				{
; rs232par.c  296					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 296
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  297					State = StateP6;
	SYMB	LINE, 297
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#06H
; rs232par.c  298					return( Ready);
	SYMB	LINE, 298
	MOV.B	R0L,#02H
	BR	_384
; rs232par.c  299				}
	SYMB	LINE, 299
_35:
; rs232par.c  300	
; rs232par.c  301				if ( isalpha(c) || isunderscore(c) || isdigit(c))
	SYMB	LINE, 301
	MOV.B	R0L,R5L
	SEXT.B	R0H
	SEXT.W	R1
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R0L,[R0+SOF( __ctype_+1 )]
	MOV.B	R0H,#03H
	AND.B	R0H,R0L
	BNE	_37
	CMP.B	R5L,#05FH
	BEQ	_37
	AND.B	R0L,#04H
	BEQ	_39
_37:
; rs232par.c  302				{
; rs232par.c  303					if ( CmdNdx < 11)
	SYMB	LINE, 303
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	CMP.W	R0,#0BH
	BCC	_38
; rs232par.c  304					{
; rs232par.c  305						Cmd[++CmdNdx] = c;
	SYMB	LINE, 305
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  306						break;
	SYMB	LINE, 306
	BR	_329
; rs232par.c  307					}
	SYMB	LINE, 307
_38:
; rs232par.c  308					SCPIError = PrgmMnemonicTooLong;
	SYMB	LINE, 308
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#0AH
; rs232par.c  309					State = StateERROR;
	SYMB	LINE, 309
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  310					break;
	SYMB	LINE, 310
	BR	_329
; rs232par.c  311				}
	SYMB	LINE, 311
_39:
; rs232par.c  312	
; rs232par.c  313				if ( isquestionmark(c))
	SYMB	LINE, 313
	CMP.B	R5L,#03FH
	BNE	_40
; rs232par.c  314				{
; rs232par.c  315					State = StateP5;
	SYMB	LINE, 315
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#05H
; rs232par.c  316					CmdRequest = TRUE;
	SYMB	LINE, 316
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	[R0],#0FFH
; rs232par.c  317					break;
	SYMB	LINE, 317
	BR	_329
; rs232par.c  318				}
	SYMB	LINE, 318
_40:
; rs232par.c  319	
; rs232par.c  320				if ( issemicolon(c))
	SYMB	LINE, 320
	CMP.B	R5L,#03BH
	BNE	_41
; rs232par.c  321				{
; rs232par.c  322					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 322
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  323					State = StateP0;
	SYMB	LINE, 323
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  324					return( PMUS);
	SYMB	LINE, 324
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c  325				}
	SYMB	LINE, 325
_41:
; rs232par.c  326	
; rs232par.c  327				if ( isnewline(c))
	SYMB	LINE, 327
	CMP.B	R5L,#0AH
	BNE	_42
; rs232par.c  328				{
; rs232par.c  329					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 329
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  330					State = StateP0;
	SYMB	LINE, 330
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  331					return( PMT);
	SYMB	LINE, 331
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c  332				}
	SYMB	LINE, 332
_42:
; rs232par.c  333	
; rs232par.c  334				SCPIError = InvalidChar;
	SYMB	LINE, 334
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  335				State = StateERROR;
	SYMB	LINE, 335
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  336				break;
	SYMB	LINE, 336
	BR	_329
; rs232par.c  337	
; rs232par.c  338			case StateP5:
	SYMB	LINE, 338
_43:
; rs232par.c  339				if ( iswhitespace(c))
	SYMB	LINE, 339
	CMP.B	R5L,#0AH
	BEQ	_45
	CMP.B	R5L,#020H
	BGT	_45
; rs232par.c  340				{
; rs232par.c  341					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 341
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  342					State = StateP6;
	SYMB	LINE, 342
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#06H
; rs232par.c  343					return( Ready);
	SYMB	LINE, 343
	MOV.B	R0L,#02H
	BR	_384
; rs232par.c  344				}
	SYMB	LINE, 344
_45:
; rs232par.c  345	
; rs232par.c  346				if ( issemicolon(c))
	SYMB	LINE, 346
	CMP.B	R5L,#03BH
	BNE	_46
; rs232par.c  347				{
; rs232par.c  348					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 348
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  349					State = StateP0;
	SYMB	LINE, 349
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  350					return( PMUS);
	SYMB	LINE, 350
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c  351				}
	SYMB	LINE, 351
_46:
; rs232par.c  352	
; rs232par.c  353				if ( isnewline(c))
	SYMB	LINE, 353
	CMP.B	R5L,#0AH
	BNE	_47
; rs232par.c  354				{
; rs232par.c  355					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 355
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  356					State = StateP0;
	SYMB	LINE, 356
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  357					return( PMT);
	SYMB	LINE, 357
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c  358				}
	SYMB	LINE, 358
_47:
; rs232par.c  359	
; rs232par.c  360				SCPIError = InvalidChar;
	SYMB	LINE, 360
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  361				State = StateERROR;
	SYMB	LINE, 361
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  362				break;
	SYMB	LINE, 362
	BR	_329
; rs232par.c  363	
; rs232par.c  364			case StateP6:
	SYMB	LINE, 364
_48:
; rs232par.c  365				if ( iswhitespace(c))
	SYMB	LINE, 365
	CMP.B	R5L,#0AH
	BEQ	_50
	CMP.B	R5L,#020H
	BGT	_50
; rs232par.c  366				{
; rs232par.c  367					State = StateP6;
	SYMB	LINE, 367
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#06H
; rs232par.c  368					break;
	SYMB	LINE, 368
	BR	_329
; rs232par.c  369				}
	SYMB	LINE, 369
_50:
; rs232par.c  370	
; rs232par.c  371				if ( isalpha(c)) {
	SYMB	LINE, 371
	MOV.B	R2L,R5L
	SEXT.B	R2H
	SEXT.W	R3
	MOV.W	R1,#SEG( __ctype_+1 )
	MOV.W	R0,#SOF( __ctype_+1 )
	ADD.W	R0,R2
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R2L,[R2+SOF( __ctype_+1 )]
	SEXT.B	R2H
	AND.W	R2,#03H
	BEQ	_51
; rs232par.c  372					Cmd[CmdNdx = 0] = c;
	SYMB	LINE, 372
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	[R0],#00H
	MOV.W	R0,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],R5L
; rs232par.c  373					State = StateC0;
	SYMB	LINE, 373
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#09H
; rs232par.c  374					ParCnt++;
	SYMB	LINE, 374
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  375					break;
	SYMB	LINE, 375
	BR	_329
; rs232par.c  376				}
	SYMB	LINE, 376
_51:
; rs232par.c  377	
; rs232par.c  378				if ( isdigit(c)) {
	SYMB	LINE, 378
	MOV.B	ES,R1L
	MOV.B	R0L,[R0]
	SEXT.B	R0H
	AND.W	R0,#04H
	BEQ	_52
; rs232par.c  379					Cmd[CmdNdx = 0] = c;
	SYMB	LINE, 379
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	[R0],#00H
	MOV.W	R0,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],R5L
; rs232par.c  380					State = StateD2;
	SYMB	LINE, 380
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0CH
; rs232par.c  381					ParCnt++;
	SYMB	LINE, 381
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  382					break;
	SYMB	LINE, 382
	BR	_329
; rs232par.c  383				}
	SYMB	LINE, 383
_52:
; rs232par.c  384	
; rs232par.c  385				if ( issemicolon(c)) {
	SYMB	LINE, 385
	CMP.B	R5L,#03BH
	BNE	_53
; rs232par.c  386					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 386
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  387					State = StateP0;
	SYMB	LINE, 387
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  388					return( PMUS);
	SYMB	LINE, 388
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c  389				}
	SYMB	LINE, 389
_53:
; rs232par.c  390	
; rs232par.c  391				if ( isplussign(c) || isminussign(c)) {
	SYMB	LINE, 391
	CMP.B	R5L,#02BH
	BEQ	_54
	CMP.B	R5L,#02DH
	BNE	_55
_54:
; rs232par.c  392					Cmd[CmdNdx = 0] = c;
	SYMB	LINE, 392
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	[R0],#00H
	MOV.W	R0,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],R5L
; rs232par.c  393					State = StateD0;
	SYMB	LINE, 393
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0AH
; rs232par.c  394					ParCnt++;
	SYMB	LINE, 394
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  395					break;
	SYMB	LINE, 395
	BR	_329
; rs232par.c  396				}
	SYMB	LINE, 396
_55:
; rs232par.c  397	
; rs232par.c  398				if ( isdot(c)) {
	SYMB	LINE, 398
	CMP.B	R5L,#02EH
	BNE	_56
; rs232par.c  399					Cmd[CmdNdx = 0] = c;
	SYMB	LINE, 399
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	[R0],#00H
	MOV.W	R0,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],R5L
; rs232par.c  400					State = StateD1;
	SYMB	LINE, 400
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0BH
; rs232par.c  401					ParCnt++;
	SYMB	LINE, 401
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  402					break;
	SYMB	LINE, 402
	BR	_329
; rs232par.c  403				}
	SYMB	LINE, 403
_56:
; rs232par.c  404	
; rs232par.c  405				if ( isdoubledagger(c)) {
	SYMB	LINE, 405
	CMP.B	R5L,#023H
	BNE	_57
; rs232par.c  406					State = StateDA0;
	SYMB	LINE, 406
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#016H
; rs232par.c  407					ParCnt++;
	SYMB	LINE, 407
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  408					break;
	SYMB	LINE, 408
	BR	_329
; rs232par.c  409				}
	SYMB	LINE, 409
_57:
; rs232par.c  410	
; rs232par.c  411				if ( isdoublequote(c)) {
	SYMB	LINE, 411
	CMP.B	R5L,#022H
	BNE	_58
; rs232par.c  412					CmdNdx = 0;
	SYMB	LINE, 412
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	[R0],#00H
; rs232par.c  413					State = StateS2;
	SYMB	LINE, 413
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#014H
; rs232par.c  414					ParCnt++;
	SYMB	LINE, 414
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  415					break;
	SYMB	LINE, 415
	BR	_329
; rs232par.c  416				}
	SYMB	LINE, 416
_58:
; rs232par.c  417	
; rs232par.c  418				if ( isquote(c)) {
	SYMB	LINE, 418
	CMP.B	R5L,#027H
	BNE	_59
; rs232par.c  419					CmdNdx = 0;
	SYMB	LINE, 419
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	[R0],#00H
; rs232par.c  420					State = StateS0;
	SYMB	LINE, 420
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#012H
; rs232par.c  421					ParCnt++;
	SYMB	LINE, 421
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  422					break;
	SYMB	LINE, 422
	BR	_329
; rs232par.c  423				}
	SYMB	LINE, 423
_59:
; rs232par.c  424	
; rs232par.c  425				if ((c) == '(') {
	SYMB	LINE, 425
	CMP.B	R5L,#028H
	BNE	_60
; rs232par.c  426					State = StateE0;
	SYMB	LINE, 426
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01DH
; rs232par.c  427					ParCnt++;
	SYMB	LINE, 427
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  428					break;
	SYMB	LINE, 428
	BR	_329
; rs232par.c  429				}
	SYMB	LINE, 429
_60:
; rs232par.c  430	
; rs232par.c  431				if ( isnewline(c)) {
	SYMB	LINE, 431
	CMP.B	R5L,#0AH
	BNE	_61
; rs232par.c  432					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 432
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  433					State = StateP0;
	SYMB	LINE, 433
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  434					return( PMT);
	SYMB	LINE, 434
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c  435				}
	SYMB	LINE, 435
_61:
; rs232par.c  436	
; rs232par.c  437				SCPIError = InvalidChar;
	SYMB	LINE, 437
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  438				State = StateERROR;
	SYMB	LINE, 438
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  439				break;
	SYMB	LINE, 439
	BR	_329
; rs232par.c  440	
; rs232par.c  441			case StateP7:
	SYMB	LINE, 441
_62:
; rs232par.c  442				if ( iswhitespace(c))
	SYMB	LINE, 442
	CMP.B	R5L,#0AH
	BEQ	_64
	CMP.B	R5L,#020H
	BGT	_64
; rs232par.c  443				{
; rs232par.c  444					State = StateP7;
	SYMB	LINE, 444
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#07H
; rs232par.c  445					break;
	SYMB	LINE, 445
	BR	_329
; rs232par.c  446				}
	SYMB	LINE, 446
_64:
; rs232par.c  447	
; rs232par.c  448				if ( issemicolon(c))
	SYMB	LINE, 448
	CMP.B	R5L,#03BH
	BNE	_65
; rs232par.c  449				{
; rs232par.c  450					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 450
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  451					State = StateP0;
	SYMB	LINE, 451
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  452					return( PMUS);
	SYMB	LINE, 452
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c  453				}
	SYMB	LINE, 453
_65:
; rs232par.c  454	
; rs232par.c  455				if ( iscomma(c))
	SYMB	LINE, 455
	CMP.B	R5L,#02CH
	BNE	_66
; rs232par.c  456				{
; rs232par.c  457					Cmd[++CmdNdx] = c;
	SYMB	LINE, 457
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  458					State = StateP8;
	SYMB	LINE, 458
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#08H
; rs232par.c  459					return( Ready);
	SYMB	LINE, 459
	MOV.B	R0L,#02H
	BR	_384
; rs232par.c  460				}
	SYMB	LINE, 460
_66:
; rs232par.c  461	
; rs232par.c  462				if ( isnewline(c))
	SYMB	LINE, 462
	CMP.B	R5L,#0AH
	BNE	_67
; rs232par.c  463				{
; rs232par.c  464					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 464
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  465					State = StateP0;
	SYMB	LINE, 465
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  466					return( PMT);
	SYMB	LINE, 466
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c  467				}
	SYMB	LINE, 467
_67:
; rs232par.c  468	
; rs232par.c  469				SCPIError = InvalidChar;
	SYMB	LINE, 469
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  470				State = StateERROR;
	SYMB	LINE, 470
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  471				break;
	SYMB	LINE, 471
	BR	_329
; rs232par.c  472	
; rs232par.c  473			case StateP8:
	SYMB	LINE, 473
_68:
; rs232par.c  474				if ( iswhitespace(c))
	SYMB	LINE, 474
	CMP.B	R5L,#0AH
	BEQ	_70
	CMP.B	R5L,#020H
	BGT	_70
; rs232par.c  475				{
; rs232par.c  476					State = StateP8;
	SYMB	LINE, 476
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#08H
; rs232par.c  477					break;
	SYMB	LINE, 477
	BR	_329
; rs232par.c  478				}
	SYMB	LINE, 478
_70:
; rs232par.c  479	
; rs232par.c  480				if ( isalpha(c))
	SYMB	LINE, 480
	MOV.B	R2L,R5L
	SEXT.B	R2H
	SEXT.W	R3
	MOV.W	R1,#SEG( __ctype_+1 )
	MOV.W	R0,#SOF( __ctype_+1 )
	ADD.W	R0,R2
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R2L,[R2+SOF( __ctype_+1 )]
	SEXT.B	R2H
	AND.W	R2,#03H
	BEQ	_71
; rs232par.c  481				{
; rs232par.c  482					Cmd[++CmdNdx] = c;
	SYMB	LINE, 482
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  483					State = StateC0;
	SYMB	LINE, 483
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#09H
; rs232par.c  484					ParCnt++;
	SYMB	LINE, 484
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  485					break;
	SYMB	LINE, 485
	BR	_329
; rs232par.c  486				}
	SYMB	LINE, 486
_71:
; rs232par.c  487	
; rs232par.c  488				if ( isdigit(c))
	SYMB	LINE, 488
	MOV.B	ES,R1L
	MOV.B	R0L,[R0]
	SEXT.B	R0H
	AND.W	R0,#04H
	BEQ	_72
; rs232par.c  489				{
; rs232par.c  490					Cmd[++CmdNdx] = c;
	SYMB	LINE, 490
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  491					State = StateD2;
	SYMB	LINE, 491
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0CH
; rs232par.c  492					ParCnt++;
	SYMB	LINE, 492
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  493					break;
	SYMB	LINE, 493
	BR	_329
; rs232par.c  494				}
	SYMB	LINE, 494
_72:
; rs232par.c  495	
; rs232par.c  496				if ( isplussign(c) || isminussign(c))
	SYMB	LINE, 496
	CMP.B	R5L,#02BH
	BEQ	_73
	CMP.B	R5L,#02DH
	BNE	_74
_73:
; rs232par.c  497				{
; rs232par.c  498					Cmd[++CmdNdx] = c;
	SYMB	LINE, 498
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  499					State = StateD0;
	SYMB	LINE, 499
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0AH
; rs232par.c  500					ParCnt++;
	SYMB	LINE, 500
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  501					break;
	SYMB	LINE, 501
	BR	_329
; rs232par.c  502				}
	SYMB	LINE, 502
_74:
; rs232par.c  503	
; rs232par.c  504				if ( isdot(c))
	SYMB	LINE, 504
	CMP.B	R5L,#02EH
	BNE	_75
; rs232par.c  505				{
; rs232par.c  506					Cmd[++CmdNdx] = c;
	SYMB	LINE, 506
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  507					State = StateD1;
	SYMB	LINE, 507
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0BH
; rs232par.c  508					ParCnt++;
	SYMB	LINE, 508
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  509					break;
	SYMB	LINE, 509
	BR	_329
; rs232par.c  510				}
	SYMB	LINE, 510
_75:
; rs232par.c  511	
; rs232par.c  512				if ( isdoubledagger(c))
	SYMB	LINE, 512
	CMP.B	R5L,#023H
	BNE	_76
; rs232par.c  513				{
; rs232par.c  514					State = StateDA0;
	SYMB	LINE, 514
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#016H
; rs232par.c  515					ParCnt++;
	SYMB	LINE, 515
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  516					break;
	SYMB	LINE, 516
	BR	_329
; rs232par.c  517				}
	SYMB	LINE, 517
_76:
; rs232par.c  518	
; rs232par.c  519				if ( isdoublequote(c))
	SYMB	LINE, 519
	CMP.B	R5L,#022H
	BNE	_77
; rs232par.c  520				{													
; rs232par.c  521					CmdNdx++;
	SYMB	LINE, 521
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
; rs232par.c  522					State = StateS2;
	SYMB	LINE, 522
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#014H
; rs232par.c  523					ParCnt++;
	SYMB	LINE, 523
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  524					break;
	SYMB	LINE, 524
	BR	_329
; rs232par.c  525				}
	SYMB	LINE, 525
_77:
; rs232par.c  526	
; rs232par.c  527				if ( isquote(c)) {
	SYMB	LINE, 527
	CMP.B	R5L,#027H
	BNE	_78
; rs232par.c  528					CmdNdx++;
	SYMB	LINE, 528
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
; rs232par.c  529					State = StateS0;
	SYMB	LINE, 529
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#012H
; rs232par.c  530					ParCnt++;
	SYMB	LINE, 530
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  531					break;
	SYMB	LINE, 531
	BR	_329
; rs232par.c  532				}
	SYMB	LINE, 532
_78:
; rs232par.c  533	
; rs232par.c  534				if ( (c) == '(')
	SYMB	LINE, 534
	CMP.B	R5L,#028H
	BNE	_79
; rs232par.c  535				{
; rs232par.c  536					State = StateE0;
	SYMB	LINE, 536
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01DH
; rs232par.c  537					ParCnt++;
	SYMB	LINE, 537
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  538					break;
	SYMB	LINE, 538
	BR	_329
; rs232par.c  539				}
	SYMB	LINE, 539
_79:
; rs232par.c  540	
; rs232par.c  541				SCPIError = InvalidChar;
	SYMB	LINE, 541
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  542				State = StateERROR;
	SYMB	LINE, 542
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  543				break;
	SYMB	LINE, 543
	BR	_329
; rs232par.c  544	
; rs232par.c  545			case StateC0:							 // CHARACTER PROGRAM DATA
	SYMB	LINE, 545
_80:
; rs232par.c  546				if ( iswhitespace(c)) {
	SYMB	LINE, 546
	CMP.B	R5L,#0AH
	BEQ	_82
	CMP.B	R5L,#020H
	BGT	_82
; rs232par.c  547					State = StateP7;
	SYMB	LINE, 547
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#07H
; rs232par.c  548					
; rs232par.c  549					ParType[ParCnt] = P_Char;
	SYMB	LINE, 549
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#01H
; rs232par.c  550					break;
	SYMB	LINE, 550
	BR	_329
; rs232par.c  551				}
	SYMB	LINE, 551
_82:
; rs232par.c  552	
; rs232par.c  553				if ( isalpha(c) || isunderscore(c) || isdigit(c)) {
	SYMB	LINE, 553
	MOV.B	R0L,R5L
	SEXT.B	R0H
	SEXT.W	R1
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R0L,[R0+SOF( __ctype_+1 )]
	MOV.B	R0H,#03H
	AND.B	R0H,R0L
	BNE	_84
	CMP.B	R5L,#05FH
	BEQ	_84
	AND.B	R0L,#04H
	BEQ	_86
_84:
; rs232par.c  554					if ( CmdNdx < 11) {
	SYMB	LINE, 554
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	CMP.W	R0,#0BH
	BCC	_85
; rs232par.c  555						Cmd[++CmdNdx] = c;
	SYMB	LINE, 555
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  556						break;
	SYMB	LINE, 556
	BR	_329
; rs232par.c  557					}
	SYMB	LINE, 557
_85:
; rs232par.c  558					SCPIError = PrgmMnemonicTooLong;
	SYMB	LINE, 558
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#0AH
; rs232par.c  559					State = StateERROR;
	SYMB	LINE, 559
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  560					break;
	SYMB	LINE, 560
	BR	_329
; rs232par.c  561				}
	SYMB	LINE, 561
_86:
; rs232par.c  562	
; rs232par.c  563				if ( issemicolon(c))
	SYMB	LINE, 563
	CMP.B	R5L,#03BH
	BNE	_87
; rs232par.c  564				{
; rs232par.c  565					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 565
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  566					State = StateP0;
	SYMB	LINE, 566
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  567					ParType[ParCnt] = P_Char;
	SYMB	LINE, 567
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#01H
; rs232par.c  568					return( PMUS);
	SYMB	LINE, 568
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c  569				}
	SYMB	LINE, 569
_87:
; rs232par.c  570	
; rs232par.c  571				if ( iscomma(c))
	SYMB	LINE, 571
	CMP.B	R5L,#02CH
	BNE	_88
; rs232par.c  572				{
; rs232par.c  573					Cmd[++CmdNdx] = c;
	SYMB	LINE, 573
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  574					State = StateP8;
	SYMB	LINE, 574
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#08H
; rs232par.c  575					ParType[ParCnt] = P_Char;
	SYMB	LINE, 575
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#01H
; rs232par.c  576					return( Ready);
	SYMB	LINE, 576
	MOV.B	R0L,#02H
	BR	_384
; rs232par.c  577				}
	SYMB	LINE, 577
_88:
; rs232par.c  578	
; rs232par.c  579				if ( isnewline(c))
	SYMB	LINE, 579
	CMP.B	R5L,#0AH
	BNE	_89
; rs232par.c  580				{
; rs232par.c  581					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 581
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  582					State = StateP0;
	SYMB	LINE, 582
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  583					ParType[ParCnt] = P_Char;
	SYMB	LINE, 583
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#01H
; rs232par.c  584					return( PMT);
	SYMB	LINE, 584
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c  585				}
	SYMB	LINE, 585
_89:
; rs232par.c  586	
; rs232par.c  587				SCPIError = InvalidChar;
	SYMB	LINE, 587
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  588				State = StateERROR;
	SYMB	LINE, 588
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  589				break;
	SYMB	LINE, 589
	BR	_329
; rs232par.c  590	
; rs232par.c  591			case StateD0:							 // NUMERIC DECIMAL PROGRAM DATA
	SYMB	LINE, 591
_90:
; rs232par.c  592				if ( isdigit(c))
	SYMB	LINE, 592
	MOV.B	R0L,R5L
	SEXT.B	R0H
	SEXT.W	R1
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R0L,[R0+SOF( __ctype_+1 )]
	SEXT.B	R0H
	AND.W	R0,#04H
	BEQ	_91
; rs232par.c  593				{
; rs232par.c  594					Cmd[++CmdNdx] = c;
	SYMB	LINE, 594
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  595					State = StateD2;
	SYMB	LINE, 595
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0CH
; rs232par.c  596					break;
	SYMB	LINE, 596
	BR	_329
; rs232par.c  597				}
	SYMB	LINE, 597
_91:
; rs232par.c  598	
; rs232par.c  599				if ( isdot(c))
	SYMB	LINE, 599
	CMP.B	R5L,#02EH
	BNE	_92
; rs232par.c  600				{
; rs232par.c  601					Cmd[++CmdNdx] = c;
	SYMB	LINE, 601
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  602					State = StateD1;
	SYMB	LINE, 602
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0BH
; rs232par.c  603					break;
	SYMB	LINE, 603
	BR	_329
; rs232par.c  604				}
	SYMB	LINE, 604
_92:
; rs232par.c  605	
; rs232par.c  606				SCPIError = InvalidCharInNumber;
	SYMB	LINE, 606
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#0EH
; rs232par.c  607				State = StateERROR;
	SYMB	LINE, 607
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  608				break;
	SYMB	LINE, 608
	BR	_329
; rs232par.c  609	
; rs232par.c  610			case StateD1:
	SYMB	LINE, 610
_93:
; rs232par.c  611				if ( isdigit(c))
	SYMB	LINE, 611
	MOV.B	R0L,R5L
	SEXT.B	R0H
	SEXT.W	R1
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R0L,[R0+SOF( __ctype_+1 )]
	SEXT.B	R0H
	AND.W	R0,#04H
	BEQ	_95
; rs232par.c  612				{
; rs232par.c  613					if ( CmdNdx < 255)
	SYMB	LINE, 613
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	CMP.W	R0,#0FFH
	BCC	_94
; rs232par.c  614					{
; rs232par.c  615						Cmd[++CmdNdx] = c;
	SYMB	LINE, 615
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  616						State = StateD3;
	SYMB	LINE, 616
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0DH
; rs232par.c  617						break;
	SYMB	LINE, 617
	BR	_329
; rs232par.c  618					}
	SYMB	LINE, 618
_94:
; rs232par.c  619					SCPIError = TooManyDigits;
	SYMB	LINE, 619
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#010H
; rs232par.c  620					State = StateERROR;
	SYMB	LINE, 620
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  621					break;
	SYMB	LINE, 621
	BR	_329
; rs232par.c  622				}
	SYMB	LINE, 622
_95:
; rs232par.c  623	
; rs232par.c  624				SCPIError = InvalidCharInNumber;
	SYMB	LINE, 624
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#0EH
; rs232par.c  625				State = StateERROR;
	SYMB	LINE, 625
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  626				break;
	SYMB	LINE, 626
	BR	_329
; rs232par.c  627	
; rs232par.c  628			case StateD2:
	SYMB	LINE, 628
_96:
; rs232par.c  629				if ( iswhitespace(c))
	SYMB	LINE, 629
	CMP.B	R5L,#0AH
	BEQ	_98
	CMP.B	R5L,#020H
	BGT	_98
; rs232par.c  630				{
; rs232par.c  631					State = StateD4;
	SYMB	LINE, 631
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0EH
; rs232par.c  632					ParType[ParCnt] = P_DecNum;
	SYMB	LINE, 632
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#02H
; rs232par.c  633					break;
	SYMB	LINE, 633
	BR	_329
; rs232par.c  634				}
	SYMB	LINE, 634
_98:
; rs232par.c  635	
; rs232par.c  636				if ( isdigit(c))
	SYMB	LINE, 636
	MOV.B	R0L,R5L
	SEXT.B	R0H
	SEXT.W	R1
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R0L,[R0+SOF( __ctype_+1 )]
	SEXT.B	R0H
	AND.W	R0,#04H
	BEQ	_100
; rs232par.c  637				{
; rs232par.c  638					if ( CmdNdx < 255)
	SYMB	LINE, 638
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	CMP.W	R0,#0FFH
	BCC	_99
; rs232par.c  639					{
; rs232par.c  640						Cmd[++CmdNdx] = c;
	SYMB	LINE, 640
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  641						break;
	SYMB	LINE, 641
	BR	_329
; rs232par.c  642					}
	SYMB	LINE, 642
_99:
; rs232par.c  643					SCPIError = TooManyDigits;
	SYMB	LINE, 643
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#010H
; rs232par.c  644					State = StateERROR;
	SYMB	LINE, 644
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  645					break;
	SYMB	LINE, 645
	BR	_329
; rs232par.c  646				}
	SYMB	LINE, 646
_100:
; rs232par.c  647	
; rs232par.c  648				if ( issemicolon(c))
	SYMB	LINE, 648
	CMP.B	R5L,#03BH
	BNE	_101
; rs232par.c  649				{
; rs232par.c  650					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 650
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  651					State = StateP0;
	SYMB	LINE, 651
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  652					ParType[ParCnt] = P_DecNum;
	SYMB	LINE, 652
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#02H
; rs232par.c  653					return( PMUS);
	SYMB	LINE, 653
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c  654				}
	SYMB	LINE, 654
_101:
; rs232par.c  655	
; rs232par.c  656				if ( isdot(c))
	SYMB	LINE, 656
	CMP.B	R5L,#02EH
	BNE	_103
; rs232par.c  657				{
; rs232par.c  658					if ( ++CmdNdx < 255)
	SYMB	LINE, 658
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R1,R0
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R2,#SOF( _CmdNdx )
	MOV.W	[R2],R1
	CMP.W	R1,#0FFH
	BCC	_102
; rs232par.c  659					{
; rs232par.c  660						Cmd[CmdNdx] = c;
	SYMB	LINE, 660
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],R5L
; rs232par.c  661						State = StateD3;
	SYMB	LINE, 661
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0DH
; rs232par.c  662						break;
	SYMB	LINE, 662
	BR	_329
; rs232par.c  663					}
	SYMB	LINE, 663
_102:
; rs232par.c  664					SCPIError = TooManyDigits;
	SYMB	LINE, 664
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#010H
; rs232par.c  665					State = StateERROR;
	SYMB	LINE, 665
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  666					break;
	SYMB	LINE, 666
	BR	_329
; rs232par.c  667				}
	SYMB	LINE, 667
_103:
; rs232par.c  668	
; rs232par.c  669				if ( iscomma(c))
	SYMB	LINE, 669
	CMP.B	R5L,#02CH
	BNE	_104
; rs232par.c  670				{
; rs232par.c  671					Cmd[++CmdNdx] = c;
	SYMB	LINE, 671
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  672					State = StateP8;
	SYMB	LINE, 672
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#08H
; rs232par.c  673					ParType[ParCnt] = P_DecNum;
	SYMB	LINE, 673
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#02H
; rs232par.c  674					return( Ready);
	SYMB	LINE, 674
	MOV.B	R0L,#02H
	BR	_384
; rs232par.c  675				}
	SYMB	LINE, 675
_104:
; rs232par.c  676	
; rs232par.c  677				if ( (c) == 'E')
	SYMB	LINE, 677
	CMP.B	R5L,#045H
	BNE	_106
; rs232par.c  678				{
; rs232par.c  679					if ( CmdNdx < 255)
	SYMB	LINE, 679
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	CMP.W	R0,#0FFH
	BCC	_105
; rs232par.c  680					{
; rs232par.c  681						Cmd[++CmdNdx] = c;
	SYMB	LINE, 681
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  682						State = StateD5;
	SYMB	LINE, 682
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0FH
; rs232par.c  683						break;
	SYMB	LINE, 683
	BR	_329
; rs232par.c  684					}
	SYMB	LINE, 684
_105:
; rs232par.c  685					SCPIError = TooManyDigits;					// TBD
	SYMB	LINE, 685
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#010H
; rs232par.c  686					State = StateERROR;
	SYMB	LINE, 686
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  687					break;
	SYMB	LINE, 687
	BR	_329
; rs232par.c  688				}
	SYMB	LINE, 688
_106:
; rs232par.c  689	
; rs232par.c  690				if ( isnewline(c))
	SYMB	LINE, 690
	CMP.B	R5L,#0AH
	BNE	_107
; rs232par.c  691				{
; rs232par.c  692					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 692
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  693					State = StateP0;
	SYMB	LINE, 693
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  694					ParType[ParCnt] = P_DecNum;
	SYMB	LINE, 694
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#02H
; rs232par.c  695					return( PMT);
	SYMB	LINE, 695
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c  696				}
	SYMB	LINE, 696
_107:
; rs232par.c  697	
; rs232par.c  698				SCPIError = InvalidChar;
	SYMB	LINE, 698
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  699				State = StateERROR;
	SYMB	LINE, 699
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  700				break;
	SYMB	LINE, 700
	BR	_329
; rs232par.c  701	
; rs232par.c  702			case StateD3:
	SYMB	LINE, 702
_108:
; rs232par.c  703				if ( iswhitespace(c))
	SYMB	LINE, 703
	CMP.B	R5L,#0AH
	BEQ	_110
	CMP.B	R5L,#020H
	BGT	_110
; rs232par.c  704				{
; rs232par.c  705					State = StateD4;
	SYMB	LINE, 705
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0EH
; rs232par.c  706					ParType[ParCnt] = P_DecNum;
	SYMB	LINE, 706
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#02H
; rs232par.c  707					break;
	SYMB	LINE, 707
	BR	_329
; rs232par.c  708				}
	SYMB	LINE, 708
_110:
; rs232par.c  709	
; rs232par.c  710				if ( isdigit(c))
	SYMB	LINE, 710
	MOV.B	R0L,R5L
	SEXT.B	R0H
	SEXT.W	R1
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R0L,[R0+SOF( __ctype_+1 )]
	SEXT.B	R0H
	AND.W	R0,#04H
	BEQ	_112
; rs232par.c  711				{
; rs232par.c  712					if ( CmdNdx < 255)
	SYMB	LINE, 712
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	CMP.W	R0,#0FFH
	BCC	_111
; rs232par.c  713					{
; rs232par.c  714						Cmd[++CmdNdx] = c;
	SYMB	LINE, 714
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  715						State = StateD3;
	SYMB	LINE, 715
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0DH
; rs232par.c  716						break;
	SYMB	LINE, 716
	BR	_329
; rs232par.c  717					}
	SYMB	LINE, 717
_111:
; rs232par.c  718					SCPIError = TooManyDigits;
	SYMB	LINE, 718
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#010H
; rs232par.c  719					State = StateERROR;
	SYMB	LINE, 719
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  720					break;
	SYMB	LINE, 720
	BR	_329
; rs232par.c  721				}
	SYMB	LINE, 721
_112:
; rs232par.c  722	
; rs232par.c  723				if ( issemicolon(c))
	SYMB	LINE, 723
	CMP.B	R5L,#03BH
	BNE	_113
; rs232par.c  724				{
; rs232par.c  725					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 725
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  726					State = StateP0;
	SYMB	LINE, 726
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  727					ParType[ParCnt] = P_DecNum;
	SYMB	LINE, 727
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#02H
; rs232par.c  728					return( PMUS);
	SYMB	LINE, 728
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c  729				}
	SYMB	LINE, 729
_113:
; rs232par.c  730	
; rs232par.c  731				if ( iscomma(c))
	SYMB	LINE, 731
	CMP.B	R5L,#02CH
	BNE	_114
; rs232par.c  732				{
; rs232par.c  733					Cmd[++CmdNdx] = c;
	SYMB	LINE, 733
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  734					State = StateP8;
	SYMB	LINE, 734
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#08H
; rs232par.c  735					ParType[ParCnt] = P_DecNum;
	SYMB	LINE, 735
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#02H
; rs232par.c  736					return( Ready);
	SYMB	LINE, 736
	MOV.B	R0L,#02H
	BR	_384
; rs232par.c  737				}
	SYMB	LINE, 737
_114:
; rs232par.c  738	
; rs232par.c  739				if ( (c) == 'E')
	SYMB	LINE, 739
	CMP.B	R5L,#045H
	BNE	_116
; rs232par.c  740				{
; rs232par.c  741					if ( CmdNdx < 255)
	SYMB	LINE, 741
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	CMP.W	R0,#0FFH
	BCC	_115
; rs232par.c  742					{
; rs232par.c  743						Cmd[++CmdNdx] = c;
	SYMB	LINE, 743
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  744						State = StateD5;
	SYMB	LINE, 744
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0FH
; rs232par.c  745						break;
	SYMB	LINE, 745
	BR	_329
; rs232par.c  746					}
	SYMB	LINE, 746
_115:
; rs232par.c  747					SCPIError = TooManyDigits;			// TBD
	SYMB	LINE, 747
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#010H
; rs232par.c  748					State = StateERROR;
	SYMB	LINE, 748
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  749					break;
	SYMB	LINE, 749
	BR	_329
; rs232par.c  750				}
	SYMB	LINE, 750
_116:
; rs232par.c  751	
; rs232par.c  752				if ( isnewline(c))
	SYMB	LINE, 752
	CMP.B	R5L,#0AH
	BNE	_117
; rs232par.c  753				{
; rs232par.c  754					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 754
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  755					State = StateP0;
	SYMB	LINE, 755
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  756					ParType[ParCnt] = P_DecNum;
	SYMB	LINE, 756
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#02H
; rs232par.c  757					return( PMT);
	SYMB	LINE, 757
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c  758				}
	SYMB	LINE, 758
_117:
; rs232par.c  759	
; rs232par.c  760				SCPIError = InvalidChar;
	SYMB	LINE, 760
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  761				State = StateERROR;
	SYMB	LINE, 761
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  762				break;
	SYMB	LINE, 762
	BR	_329
; rs232par.c  763	
; rs232par.c  764			case StateD4:
	SYMB	LINE, 764
_118:
; rs232par.c  765				if ( iswhitespace(c))
	SYMB	LINE, 765
	CMP.B	R5L,#0AH
	BEQ	_120
	CMP.B	R5L,#020H
	BGT	_120
; rs232par.c  766				{
; rs232par.c  767					State = StateD4;
	SYMB	LINE, 767
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0EH
; rs232par.c  768					break;
	SYMB	LINE, 768
	BR	_329
; rs232par.c  769				}
	SYMB	LINE, 769
_120:
; rs232par.c  770	
; rs232par.c  771				if ( issemicolon(c))
	SYMB	LINE, 771
	CMP.B	R5L,#03BH
	BNE	_121
; rs232par.c  772				{
; rs232par.c  773					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 773
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  774					State = StateP0;
	SYMB	LINE, 774
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  775					ParType[ParCnt] = P_DecNum;
	SYMB	LINE, 775
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#02H
; rs232par.c  776					return( PMUS);
	SYMB	LINE, 776
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c  777				}
	SYMB	LINE, 777
_121:
; rs232par.c  778	
; rs232par.c  779				if ( iscomma(c))
	SYMB	LINE, 779
	CMP.B	R5L,#02CH
	BNE	_122
; rs232par.c  780				{
; rs232par.c  781					Cmd[++CmdNdx] = c;
	SYMB	LINE, 781
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  782					State = StateP8;
	SYMB	LINE, 782
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#08H
; rs232par.c  783					ParType[ParCnt] = P_DecNum;
	SYMB	LINE, 783
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#02H
; rs232par.c  784					return( Ready);
	SYMB	LINE, 784
	MOV.B	R0L,#02H
	BR	_384
; rs232par.c  785				}
	SYMB	LINE, 785
_122:
; rs232par.c  786	
; rs232par.c  787				if ( (c) == 'E')
	SYMB	LINE, 787
	CMP.B	R5L,#045H
	BNE	_124
; rs232par.c  788				{
; rs232par.c  789					if ( CmdNdx < 255)
	SYMB	LINE, 789
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	CMP.W	R0,#0FFH
	BCC	_123
; rs232par.c  790					{
; rs232par.c  791						Cmd[++CmdNdx] = c;
	SYMB	LINE, 791
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  792						State = StateD5;
	SYMB	LINE, 792
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0FH
; rs232par.c  793						break;
	SYMB	LINE, 793
	BR	_329
; rs232par.c  794					}
	SYMB	LINE, 794
_123:
; rs232par.c  795					SCPIError = TooManyDigits;			// TBD
	SYMB	LINE, 795
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#010H
; rs232par.c  796					State = StateERROR;
	SYMB	LINE, 796
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  797					break;
	SYMB	LINE, 797
	BR	_329
; rs232par.c  798				}
	SYMB	LINE, 798
_124:
; rs232par.c  799	
; rs232par.c  800				if ( isnewline(c))
	SYMB	LINE, 800
	CMP.B	R5L,#0AH
	BNE	_125
; rs232par.c  801				{
; rs232par.c  802					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 802
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  803					State = StateP0;
	SYMB	LINE, 803
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  804					ParType[ParCnt] = P_DecNum;
	SYMB	LINE, 804
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#02H
; rs232par.c  805					return( PMT);
	SYMB	LINE, 805
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c  806				}
	SYMB	LINE, 806
_125:
; rs232par.c  807	
; rs232par.c  808				SCPIError = InvalidChar;
	SYMB	LINE, 808
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  809				State = StateERROR;
	SYMB	LINE, 809
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  810				break;
	SYMB	LINE, 810
	BR	_329
; rs232par.c  811	
; rs232par.c  812			case StateD5:
	SYMB	LINE, 812
_126:
; rs232par.c  813				if ( iswhitespace(c))
	SYMB	LINE, 813
	CMP.B	R5L,#0AH
	BEQ	_128
	CMP.B	R5L,#020H
	BGT	_128
; rs232par.c  814				{
; rs232par.c  815					State = StateD5;
	SYMB	LINE, 815
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#0FH
; rs232par.c  816					break;
	SYMB	LINE, 816
	BR	_329
; rs232par.c  817				}
	SYMB	LINE, 817
_128:
; rs232par.c  818	
; rs232par.c  819				if ( isdigit(c))
	SYMB	LINE, 819
	MOV.B	R0L,R5L
	SEXT.B	R0H
	SEXT.W	R1
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R0L,[R0+SOF( __ctype_+1 )]
	SEXT.B	R0H
	AND.W	R0,#04H
	BEQ	_130
; rs232par.c  820				{
; rs232par.c  821					if ( CmdNdx < 255)
	SYMB	LINE, 821
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	CMP.W	R0,#0FFH
	BCC	_129
; rs232par.c  822					{
; rs232par.c  823						Cmd[++CmdNdx] = c;
	SYMB	LINE, 823
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  824						State = StateD7;
	SYMB	LINE, 824
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#011H
; rs232par.c  825						break;
	SYMB	LINE, 825
	BR	_329
; rs232par.c  826					}
	SYMB	LINE, 826
_129:
; rs232par.c  827					SCPIError = TooManyDigits;			// TBD
	SYMB	LINE, 827
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#010H
; rs232par.c  828					State = StateERROR;
	SYMB	LINE, 828
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  829					break;
	SYMB	LINE, 829
	BR	_329
; rs232par.c  830				}
	SYMB	LINE, 830
_130:
; rs232par.c  831	
; rs232par.c  832				if ( isplussign(c) || isminussign(c))
	SYMB	LINE, 832
	CMP.B	R5L,#02BH
	BEQ	_131
	CMP.B	R5L,#02DH
	BNE	_133
_131:
; rs232par.c  833				{
; rs232par.c  834					if ( CmdNdx < 255)
	SYMB	LINE, 834
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	CMP.W	R0,#0FFH
	BCC	_132
; rs232par.c  835					{
; rs232par.c  836						Cmd[++CmdNdx] = c;
	SYMB	LINE, 836
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  837						State = StateD6;
	SYMB	LINE, 837
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#010H
; rs232par.c  838						break;
	SYMB	LINE, 838
	BR	_329
; rs232par.c  839					}
	SYMB	LINE, 839
_132:
; rs232par.c  840					SCPIError = TooManyDigits;			// TBD
	SYMB	LINE, 840
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#010H
; rs232par.c  841					State = StateERROR;
	SYMB	LINE, 841
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  842					break;
	SYMB	LINE, 842
	BR	_329
; rs232par.c  843				}
	SYMB	LINE, 843
_133:
; rs232par.c  844	
; rs232par.c  845				SCPIError = InvalidChar;
	SYMB	LINE, 845
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  846				State = StateERROR;
	SYMB	LINE, 846
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  847				break;
	SYMB	LINE, 847
	BR	_329
; rs232par.c  848	
; rs232par.c  849			case StateD6:
	SYMB	LINE, 849
_134:
; rs232par.c  850				if ( isdigit(c))
	SYMB	LINE, 850
	MOV.B	R0L,R5L
	SEXT.B	R0H
	SEXT.W	R1
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R0L,[R0+SOF( __ctype_+1 )]
	SEXT.B	R0H
	AND.W	R0,#04H
	BEQ	_136
; rs232par.c  851				{
; rs232par.c  852					if ( CmdNdx < 255)
	SYMB	LINE, 852
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	CMP.W	R0,#0FFH
	BCC	_135
; rs232par.c  853					{
; rs232par.c  854						Cmd[++CmdNdx] = c;
	SYMB	LINE, 854
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  855						State = StateD7;
	SYMB	LINE, 855
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#011H
; rs232par.c  856						break;
	SYMB	LINE, 856
	BR	_329
; rs232par.c  857					}
	SYMB	LINE, 857
_135:
; rs232par.c  858					SCPIError = TooManyDigits;			// TBD
	SYMB	LINE, 858
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#010H
; rs232par.c  859					State = StateERROR;
	SYMB	LINE, 859
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  860					break;
	SYMB	LINE, 860
	BR	_329
; rs232par.c  861				}
	SYMB	LINE, 861
_136:
; rs232par.c  862	
; rs232par.c  863				SCPIError = InvalidChar;
	SYMB	LINE, 863
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  864				State = StateERROR;
	SYMB	LINE, 864
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  865				break;
	SYMB	LINE, 865
	BR	_329
; rs232par.c  866	
; rs232par.c  867			case StateD7:
	SYMB	LINE, 867
_137:
; rs232par.c  868				if ( iswhitespace(c))
	SYMB	LINE, 868
	CMP.B	R5L,#0AH
	BEQ	_139
	CMP.B	R5L,#020H
	BGT	_139
; rs232par.c  869				{
; rs232par.c  870					State = StateP7;
	SYMB	LINE, 870
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#07H
; rs232par.c  871					ParType[ParCnt] = P_DecNum;
	SYMB	LINE, 871
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#02H
; rs232par.c  872					break;
	SYMB	LINE, 872
	BR	_329
; rs232par.c  873				}
	SYMB	LINE, 873
_139:
; rs232par.c  874	
; rs232par.c  875				if ( isdigit(c))
	SYMB	LINE, 875
	MOV.B	R0L,R5L
	SEXT.B	R0H
	SEXT.W	R1
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R0L,[R0+SOF( __ctype_+1 )]
	SEXT.B	R0H
	AND.W	R0,#04H
	BEQ	_141
; rs232par.c  876				{
; rs232par.c  877					if ( CmdNdx < 255)
	SYMB	LINE, 877
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	CMP.W	R0,#0FFH
	BCC	_140
; rs232par.c  878					{
; rs232par.c  879						Cmd[++CmdNdx] = c;
	SYMB	LINE, 879
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  880						break;
	SYMB	LINE, 880
	BR	_329
; rs232par.c  881					}
	SYMB	LINE, 881
_140:
; rs232par.c  882					SCPIError = TooManyDigits;			// TBD
	SYMB	LINE, 882
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#010H
; rs232par.c  883					State = StateERROR;
	SYMB	LINE, 883
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  884					break;
	SYMB	LINE, 884
	BR	_329
; rs232par.c  885				}
	SYMB	LINE, 885
_141:
; rs232par.c  886	
; rs232par.c  887				if ( issemicolon(c))
	SYMB	LINE, 887
	CMP.B	R5L,#03BH
	BNE	_142
; rs232par.c  888				{
; rs232par.c  889					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 889
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  890					State = StateP0;
	SYMB	LINE, 890
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  891					ParType[ParCnt] = P_DecNum;
	SYMB	LINE, 891
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#02H
; rs232par.c  892					return( PMUS);
	SYMB	LINE, 892
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c  893				}
	SYMB	LINE, 893
_142:
; rs232par.c  894	
; rs232par.c  895				if ( iscomma(c))
	SYMB	LINE, 895
	CMP.B	R5L,#02CH
	BNE	_143
; rs232par.c  896				{
; rs232par.c  897					Cmd[++CmdNdx] = c;
	SYMB	LINE, 897
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c  898					State = StateP8;
	SYMB	LINE, 898
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#08H
; rs232par.c  899					ParType[ParCnt] = P_DecNum;
	SYMB	LINE, 899
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOV.B	R2L,R0L
	MOVS.B	R2H,#00H
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R2+SOF( _ParType )],#02H
; rs232par.c  900					ParCnt++;
	SYMB	LINE, 900
	ADDS.B	R0L,#01H
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	[R1],R0L
; rs232par.c  901					return( Ready);
	SYMB	LINE, 901
	MOV.B	R0L,#02H
	BR	_384
; rs232par.c  902				}
	SYMB	LINE, 902
_143:
; rs232par.c  903	
; rs232par.c  904				if ( isnewline(c))
	SYMB	LINE, 904
	CMP.B	R5L,#0AH
	BNE	_144
; rs232par.c  905				{
; rs232par.c  906					Cmd[++CmdNdx] = 0;
	SYMB	LINE, 906
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],#00H
; rs232par.c  907					State = StateP0;
	SYMB	LINE, 907
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  908					ParType[ParCnt] = P_DecNum;
	SYMB	LINE, 908
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#02H
; rs232par.c  909					return( PMT);
	SYMB	LINE, 909
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c  910				}
	SYMB	LINE, 910
_144:
; rs232par.c  911	
; rs232par.c  912				SCPIError = InvalidChar;
	SYMB	LINE, 912
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  913				State = StateERROR;
	SYMB	LINE, 913
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  914				break;
	SYMB	LINE, 914
	BR	_329
; rs232par.c  915	
; rs232par.c  916			case StateS0:							 // STRING PROGRAM DATA
	SYMB	LINE, 916
_145:
	SYMB	LTIM, "c", 17, 0, 2253
; rs232par.c  917				if ( isquote(c))
	SYMB	LINE, 917
	CMP.B	R5L,#027H
	BNE	_146
; rs232par.c  918				{
; rs232par.c  919					State = StateS1;
	SYMB	LINE, 919
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#013H
; rs232par.c  920					break;
	SYMB	LINE, 920
	BR	_329
; rs232par.c  921				}
	SYMB	LINE, 921
_146:
	SYMB	LTIM, "c", 17, 0, 2125
	SYMB	LTIM, "c", 17, 0, 2253
; rs232par.c  922	
; rs232par.c  923				Cmd[CmdNdx++] = c_str;
	SYMB	LINE, 923
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R4H
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
; rs232par.c  924				break;
	SYMB	LINE, 924
	BR	_329
; rs232par.c  925	
; rs232par.c  926			case StateS1:
	SYMB	LINE, 926
_147:
; rs232par.c  927				if ( iswhitespace(c))
	SYMB	LINE, 927
	CMP.B	R5L,#0AH
	BEQ	_149
	CMP.B	R5L,#020H
	BGT	_149
; rs232par.c  928				{
; rs232par.c  929					Cmd[CmdNdx] = 0;
	SYMB	LINE, 929
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
; rs232par.c  930					State = StateP7;
	SYMB	LINE, 930
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#07H
; rs232par.c  931					ParType[ParCnt] = P_String;
	SYMB	LINE, 931
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#06H
; rs232par.c  932					break;
	SYMB	LINE, 932
	BR	_329
; rs232par.c  933				}
	SYMB	LINE, 933
_149:
; rs232par.c  934	
; rs232par.c  935				if ( issemicolon(c))
	SYMB	LINE, 935
	CMP.B	R5L,#03BH
	BNE	_150
; rs232par.c  936				{
; rs232par.c  937					Cmd[CmdNdx] = 0;
	SYMB	LINE, 937
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
; rs232par.c  938					State = StateP0;
	SYMB	LINE, 938
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  939					ParType[ParCnt] = P_String;
	SYMB	LINE, 939
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#06H
; rs232par.c  940					return( PMUS);
	SYMB	LINE, 940
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c  941				}
	SYMB	LINE, 941
_150:
; rs232par.c  942	
; rs232par.c  943				if ( isquote(c))
	SYMB	LINE, 943
	CMP.B	R5L,#027H
	BNE	_151
; rs232par.c  944				{
; rs232par.c  945					Cmd[CmdNdx++] = c;
	SYMB	LINE, 945
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
; rs232par.c  946					State = StateS0;
	SYMB	LINE, 946
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#012H
; rs232par.c  947					break;
	SYMB	LINE, 947
	BR	_329
; rs232par.c  948				}
	SYMB	LINE, 948
_151:
; rs232par.c  949	
; rs232par.c  950				if ( iscomma(c))
	SYMB	LINE, 950
	CMP.B	R5L,#02CH
	BNE	_152
; rs232par.c  951				{
; rs232par.c  952	//				Cmd[++CmdNdx] = c;
; rs232par.c  953					Cmd[CmdNdx] = c;								// Chang. KEn 000615
	SYMB	LINE, 953
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],R5L
; rs232par.c  954					State = StateP8;
	SYMB	LINE, 954
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#08H
; rs232par.c  955					ParType[ParCnt] = P_String;
	SYMB	LINE, 955
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#06H
; rs232par.c  956					return( Ready);
	SYMB	LINE, 956
	MOV.B	R0L,#02H
	BR	_384
; rs232par.c  957				}
	SYMB	LINE, 957
_152:
; rs232par.c  958	
; rs232par.c  959				if ( isnewline(c))
	SYMB	LINE, 959
	CMP.B	R5L,#0AH
	BNE	_153
; rs232par.c  960				{
; rs232par.c  961					Cmd[CmdNdx] = 0;
	SYMB	LINE, 961
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
; rs232par.c  962					State = StateP0;
	SYMB	LINE, 962
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  963					ParType[ParCnt] = P_String;
	SYMB	LINE, 963
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#06H
; rs232par.c  964					return( PMT);
	SYMB	LINE, 964
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c  965				}
	SYMB	LINE, 965
_153:
; rs232par.c  966	
; rs232par.c  967				SCPIError = InvalidChar;
	SYMB	LINE, 967
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c  968				State = StateERROR;
	SYMB	LINE, 968
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c  969				break;
	SYMB	LINE, 969
	BR	_329
; rs232par.c  970	
; rs232par.c  971			case StateS2:
	SYMB	LINE, 971
_154:
	SYMB	LTIM, "c", 17, 0, 2125
	SYMB	LTIM, "c", 17, 0, 2253
; rs232par.c  972				if ( isdoublequote(c))
	SYMB	LINE, 972
	CMP.B	R5L,#022H
	BNE	_155
; rs232par.c  973				{
; rs232par.c  974					State = StateS3;
	SYMB	LINE, 974
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#015H
; rs232par.c  975					break;
	SYMB	LINE, 975
	BR	_329
; rs232par.c  976				}
	SYMB	LINE, 976
_155:
	SYMB	LTIM, "c", 17, 0, 2125
	SYMB	LTIM, "c", 17, 0, 2253
; rs232par.c  977	
; rs232par.c  978				Cmd[CmdNdx++] = c_str;
	SYMB	LINE, 978
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R4H
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
; rs232par.c  979				break;
	SYMB	LINE, 979
	BR	_329
; rs232par.c  980	
; rs232par.c  981			case StateS3:
	SYMB	LINE, 981
_156:
; rs232par.c  982				if ( iswhitespace(c))
	SYMB	LINE, 982
	CMP.B	R5L,#0AH
	BEQ	_158
	CMP.B	R5L,#020H
	BGT	_158
; rs232par.c  983				{
; rs232par.c  984					Cmd[CmdNdx] = 0;
	SYMB	LINE, 984
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
; rs232par.c  985					State = StateP7;
	SYMB	LINE, 985
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#07H
; rs232par.c  986					ParType[ParCnt] = P_String;
	SYMB	LINE, 986
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#06H
; rs232par.c  987					break;
	SYMB	LINE, 987
	BR	_329
; rs232par.c  988				}
	SYMB	LINE, 988
_158:
; rs232par.c  989	
; rs232par.c  990				if ( issemicolon(c))
	SYMB	LINE, 990
	CMP.B	R5L,#03BH
	BNE	_159
; rs232par.c  991				{
; rs232par.c  992					Cmd[CmdNdx] = 0;
	SYMB	LINE, 992
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
; rs232par.c  993					State = StateP0;
	SYMB	LINE, 993
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c  994					ParType[ParCnt] = P_String;
	SYMB	LINE, 994
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#06H
; rs232par.c  995					return( PMUS);
	SYMB	LINE, 995
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c  996				}
	SYMB	LINE, 996
_159:
; rs232par.c  997	
; rs232par.c  998				if ( isdoublequote(c))
	SYMB	LINE, 998
	CMP.B	R5L,#022H
	BNE	_160
; rs232par.c  999				{
; rs232par.c 1000					Cmd[CmdNdx++] = c;
	SYMB	LINE, 1000
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
; rs232par.c 1001					State = StateS2;
	SYMB	LINE, 1001
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#014H
; rs232par.c 1002					break;
	SYMB	LINE, 1002
	BR	_329
; rs232par.c 1003				}
	SYMB	LINE, 1003
_160:
; rs232par.c 1004	
; rs232par.c 1005				if ( iscomma(c))
	SYMB	LINE, 1005
	CMP.B	R5L,#02CH
	BNE	_161
; rs232par.c 1006				{
; rs232par.c 1007	//				Cmd[++CmdNdx] = c;
; rs232par.c 1008					Cmd[CmdNdx] = c;								// Chang. KEn 000615
	SYMB	LINE, 1008
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],R5L
; rs232par.c 1009					State = StateP8;
	SYMB	LINE, 1009
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#08H
; rs232par.c 1010					ParType[ParCnt] = P_String;
	SYMB	LINE, 1010
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#06H
; rs232par.c 1011					return( Ready);
	SYMB	LINE, 1011
	MOV.B	R0L,#02H
	BR	_384
; rs232par.c 1012				}
	SYMB	LINE, 1012
_161:
; rs232par.c 1013	
; rs232par.c 1014				if ( isnewline(c))
	SYMB	LINE, 1014
	CMP.B	R5L,#0AH
	BNE	_162
; rs232par.c 1015				{
; rs232par.c 1016					Cmd[CmdNdx] = 0;
	SYMB	LINE, 1016
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
; rs232par.c 1017					State = StateP0;
	SYMB	LINE, 1017
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c 1018					ParType[ParCnt] = P_String;
	SYMB	LINE, 1018
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#06H
; rs232par.c 1019					return( PMT);
	SYMB	LINE, 1019
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c 1020				}
	SYMB	LINE, 1020
_162:
; rs232par.c 1021	
; rs232par.c 1022				SCPIError = InvalidChar;
	SYMB	LINE, 1022
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c 1023				State = StateERROR;
	SYMB	LINE, 1023
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c 1024				break;
	SYMB	LINE, 1024
	BR	_329
; rs232par.c 1025	
; rs232par.c 1026			case StateDA0:							 // NON-DECIMAL/ARBITRARY PROGRAM DATA
	SYMB	LINE, 1026
_163:
; rs232par.c 1027				if ( (c) == 'B')
	SYMB	LINE, 1027
	CMP.B	R5L,#042H
	BNE	_164
; rs232par.c 1028				{
; rs232par.c 1029					CmdNdx = 0;
	SYMB	LINE, 1029
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	[R0],#00H
; rs232par.c 1030					State = StateDA3;
	SYMB	LINE, 1030
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#019H
; rs232par.c 1031					break;
	SYMB	LINE, 1031
	BR	_329
; rs232par.c 1032				}
	SYMB	LINE, 1032
_164:
; rs232par.c 1033	
; rs232par.c 1034				if ( (c) == 'Q')
	SYMB	LINE, 1034
	CMP.B	R5L,#051H
	BNE	_165
; rs232par.c 1035				{
; rs232par.c 1036					CmdNdx = 0;
	SYMB	LINE, 1036
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	[R0],#00H
; rs232par.c 1037					State = StateDA2;
	SYMB	LINE, 1037
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#018H
; rs232par.c 1038					break;
	SYMB	LINE, 1038
	BR	_329
; rs232par.c 1039				}
	SYMB	LINE, 1039
_165:
; rs232par.c 1040	
; rs232par.c 1041				if ( (c) == 'H')
	SYMB	LINE, 1041
	CMP.B	R5L,#048H
	BNE	_166
; rs232par.c 1042				{
; rs232par.c 1043					CmdNdx = 0;
	SYMB	LINE, 1043
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	[R0],#00H
; rs232par.c 1044					State = StateDA1;
	SYMB	LINE, 1044
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#017H
; rs232par.c 1045					break;
	SYMB	LINE, 1045
	BR	_329
; rs232par.c 1046				}
	SYMB	LINE, 1046
_166:
; rs232par.c 1047	
; rs232par.c 1048				if ( (c) == '0')
	SYMB	LINE, 1048
	CMP.B	R5L,#030H
	BNE	_167
; rs232par.c 1049				{
; rs232par.c 1050					CmdNdx = 0;
	SYMB	LINE, 1050
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	[R0],#00H
; rs232par.c 1051					State = StateDA5;
	SYMB	LINE, 1051
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01BH
; rs232par.c 1052					break;
	SYMB	LINE, 1052
	BR	_329
; rs232par.c 1053				}
	SYMB	LINE, 1053
_167:
; rs232par.c 1054	
; rs232par.c 1055				if ( isdigit(c))
	SYMB	LINE, 1055
	MOV.B	R0L,R5L
	SEXT.B	R0H
	SEXT.W	R1
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R0L,[R0+SOF( __ctype_+1 )]
	SEXT.B	R0H
	AND.W	R0,#04H
	BEQ	_168
; rs232par.c 1056				{
; rs232par.c 1057					NoOfDigits = c - '0';
	SYMB	LINE, 1057
	SUB.B	R5L,#030H
	MOV.B	ES,#SEG( _NoOfDigits )
	MOV.W	R0,#SOF( _NoOfDigits )
	MOV.B	[R0],R5L
; rs232par.c 1058					NoOfBytes = 0;
	SYMB	LINE, 1058
	MOV.B	ES,#SEG( _NoOfBytes )
	MOV.W	R0,#SOF( _NoOfBytes )
	MOV.W	[R0],#00H
; rs232par.c 1059					CmdNdx = 0;
	SYMB	LINE, 1059
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	[R0],#00H
; rs232par.c 1060					State = StateDA4;
	SYMB	LINE, 1060
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01AH
; rs232par.c 1061					break;
	SYMB	LINE, 1061
	BR	_329
; rs232par.c 1062				}
	SYMB	LINE, 1062
_168:
; rs232par.c 1063	
; rs232par.c 1064				SCPIError = InvalidChar;
	SYMB	LINE, 1064
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#02H
; rs232par.c 1065				State = StateERROR;
	SYMB	LINE, 1065
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c 1066				break;
	SYMB	LINE, 1066
	BR	_329
; rs232par.c 1067	
; rs232par.c 1068			case StateDA1:
	SYMB	LINE, 1068
_169:
; rs232par.c 1069				if ( isxdigit(c))
	SYMB	LINE, 1069
	MOV.B	R0L,R5L
	SEXT.B	R0H
	SEXT.W	R1
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R0L,[R0+SOF( __ctype_+1 )]
	SEXT.B	R0H
	AND.W	R0,#044H
	BEQ	_170
; rs232par.c 1070				{
; rs232par.c 1071					if ( CmdNdx < 255)						// TBD SHOULD NOT GENERATE AN ERR
	SYMB	LINE, 1071
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	CMP.W	R0,#0FFH
	BCC	_329
; rs232par.c 1072					{										
; rs232par.c 1073						Cmd[CmdNdx++] = c;
	SYMB	LINE, 1073
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
; rs232par.c 1074						break;
	SYMB	LINE, 1074
	BR	_329
; rs232par.c 1075					}
; rs232par.c 1076	//				SCPIError = TooManyDigits;
; rs232par.c 1077	//				State = StateERROR;
; rs232par.c 1078					break;
; rs232par.c 1079				}
	SYMB	LINE, 1079
_170:
; rs232par.c 1080	
; rs232par.c 1081				if ( issemicolon(c))
	SYMB	LINE, 1081
	CMP.B	R5L,#03BH
	BNE	_171
; rs232par.c 1082				{
; rs232par.c 1083					Cmd[CmdNdx] = 0;
	SYMB	LINE, 1083
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
; rs232par.c 1084					State = StateP0;
	SYMB	LINE, 1084
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c 1085					ParType[ParCnt] = P_HexDecNum;
	SYMB	LINE, 1085
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#03H
; rs232par.c 1086					return( PMUS);
	SYMB	LINE, 1086
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c 1087				}
	SYMB	LINE, 1087
_171:
; rs232par.c 1088	
; rs232par.c 1089				if ( iswhitespace(c))
	SYMB	LINE, 1089
	CMP.B	R5L,#0AH
	BEQ	_173
	CMP.B	R5L,#020H
	BGT	_173
; rs232par.c 1090				{
; rs232par.c 1091					State = StateP7;
	SYMB	LINE, 1091
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#07H
; rs232par.c 1092					ParType[ParCnt] = P_HexDecNum;
	SYMB	LINE, 1092
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#03H
; rs232par.c 1093					break;
	SYMB	LINE, 1093
	BR	_329
; rs232par.c 1094				}
	SYMB	LINE, 1094
_173:
; rs232par.c 1095	
; rs232par.c 1096				if ( iscomma(c))
	SYMB	LINE, 1096
	CMP.B	R5L,#02CH
	BNE	_174
; rs232par.c 1097				{
; rs232par.c 1098					Cmd[++CmdNdx] = c;
	SYMB	LINE, 1098
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c 1099					State = StateP8;
	SYMB	LINE, 1099
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#08H
; rs232par.c 1100					ParType[ParCnt] = P_HexDecNum;
	SYMB	LINE, 1100
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#03H
; rs232par.c 1101					return( Ready);
	SYMB	LINE, 1101
	MOV.B	R0L,#02H
	BR	_384
; rs232par.c 1102				}
	SYMB	LINE, 1102
_174:
; rs232par.c 1103	
; rs232par.c 1104				if ( isnewline(c))
	SYMB	LINE, 1104
	CMP.B	R5L,#0AH
	BNE	_175
; rs232par.c 1105				{
; rs232par.c 1106					Cmd[CmdNdx] = 0;
	SYMB	LINE, 1106
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
; rs232par.c 1107					State = StateP0;
	SYMB	LINE, 1107
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c 1108					ParType[ParCnt] = P_HexDecNum;
	SYMB	LINE, 1108
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#03H
; rs232par.c 1109					return( PMT);
	SYMB	LINE, 1109
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c 1110				}
	SYMB	LINE, 1110
_175:
; rs232par.c 1111	
; rs232par.c 1112				SCPIError = InvalidCharInNumber;
	SYMB	LINE, 1112
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#0EH
; rs232par.c 1113				State = StateERROR;
	SYMB	LINE, 1113
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c 1114				break;
	SYMB	LINE, 1114
	BR	_329
; rs232par.c 1115	
; rs232par.c 1116			case StateDA2:
	SYMB	LINE, 1116
_176:
; rs232par.c 1117				if ( isoctaldigit(c))
	SYMB	LINE, 1117
	CMP.B	R5L,#030H
	BLT	_178
	CMP.B	R5L,#037H
	BGT	_178
; rs232par.c 1118				{
; rs232par.c 1119					if ( CmdNdx < 255)					// TBD NOT ERROR CODES
	SYMB	LINE, 1119
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	CMP.W	R0,#0FFH
	BCC	_329
; rs232par.c 1120					{
; rs232par.c 1121						Cmd[CmdNdx++] = c;
	SYMB	LINE, 1121
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
; rs232par.c 1122						break;
	SYMB	LINE, 1122
	BR	_329
; rs232par.c 1123					}
; rs232par.c 1124	//				SCPIError = ParameterOverflowErr;
; rs232par.c 1125	  //				State = StateERROR;
; rs232par.c 1126					break;
; rs232par.c 1127				}
	SYMB	LINE, 1127
_178:
; rs232par.c 1128	
; rs232par.c 1129				if ( issemicolon(c))
	SYMB	LINE, 1129
	CMP.B	R5L,#03BH
	BNE	_179
; rs232par.c 1130				{
; rs232par.c 1131					Cmd[CmdNdx] = 0;
	SYMB	LINE, 1131
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
; rs232par.c 1132					State = StateP0;
	SYMB	LINE, 1132
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c 1133					ParType[ParCnt] = P_OctDecNum;
	SYMB	LINE, 1133
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#04H
; rs232par.c 1134					return( PMUS);
	SYMB	LINE, 1134
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c 1135				}
	SYMB	LINE, 1135
_179:
; rs232par.c 1136	
; rs232par.c 1137				if ( iswhitespace(c))
	SYMB	LINE, 1137
	CMP.B	R5L,#0AH
	BEQ	_181
	CMP.B	R5L,#020H
	BGT	_181
; rs232par.c 1138				{
; rs232par.c 1139					State = StateP7;
	SYMB	LINE, 1139
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#07H
; rs232par.c 1140					ParType[ParCnt] = P_OctDecNum;
	SYMB	LINE, 1140
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#04H
; rs232par.c 1141					break;
	SYMB	LINE, 1141
	BR	_329
; rs232par.c 1142				}
	SYMB	LINE, 1142
_181:
; rs232par.c 1143	
; rs232par.c 1144				if ( iscomma(c))
	SYMB	LINE, 1144
	CMP.B	R5L,#02CH
	BNE	_182
; rs232par.c 1145				{
; rs232par.c 1146					Cmd[++CmdNdx] = c;
	SYMB	LINE, 1146
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c 1147					State = StateP8;
	SYMB	LINE, 1147
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#08H
; rs232par.c 1148					ParType[ParCnt] = P_OctDecNum;
	SYMB	LINE, 1148
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#04H
; rs232par.c 1149					return( Ready);
	SYMB	LINE, 1149
	MOV.B	R0L,#02H
	BR	_384
; rs232par.c 1150				}
	SYMB	LINE, 1150
_182:
; rs232par.c 1151	
; rs232par.c 1152				if ( isnewline(c))
	SYMB	LINE, 1152
	CMP.B	R5L,#0AH
	BNE	_183
; rs232par.c 1153				{
; rs232par.c 1154					Cmd[CmdNdx] = 0;
	SYMB	LINE, 1154
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
; rs232par.c 1155					State = StateP0;
	SYMB	LINE, 1155
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c 1156					ParType[ParCnt] = P_OctDecNum;
	SYMB	LINE, 1156
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#04H
; rs232par.c 1157					return( PMT);
	SYMB	LINE, 1157
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c 1158				}
	SYMB	LINE, 1158
_183:
; rs232par.c 1159	
; rs232par.c 1160				SCPIError = InvalidCharInNumber;
	SYMB	LINE, 1160
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#0EH
; rs232par.c 1161				State = StateERROR;
	SYMB	LINE, 1161
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c 1162				break;
	SYMB	LINE, 1162
	BR	_329
; rs232par.c 1163	
; rs232par.c 1164			case StateDA3:
	SYMB	LINE, 1164
_184:
; rs232par.c 1165				if ( isbinarydigit(c))
	SYMB	LINE, 1165
	CMP.B	R5L,#030H
	BEQ	_185
	CMP.B	R5L,#031H
	BNE	_186
_185:
; rs232par.c 1166				{
; rs232par.c 1167					if ( CmdNdx < 255)							// TBD NOT ERROR CODES
	SYMB	LINE, 1167
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	CMP.W	R0,#0FFH
	BCC	_329
; rs232par.c 1168					{
; rs232par.c 1169						Cmd[CmdNdx++] = c;
	SYMB	LINE, 1169
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
; rs232par.c 1170						break;
	SYMB	LINE, 1170
	BR	_329
; rs232par.c 1171					}
; rs232par.c 1172	//				SCPIError = ParameterOverflowErr;
; rs232par.c 1173	//				State = StateERROR;
; rs232par.c 1174					break;
; rs232par.c 1175				}
	SYMB	LINE, 1175
_186:
; rs232par.c 1176	
; rs232par.c 1177				if ( issemicolon(c))
	SYMB	LINE, 1177
	CMP.B	R5L,#03BH
	BNE	_187
; rs232par.c 1178				{
; rs232par.c 1179					Cmd[CmdNdx] = 0;
	SYMB	LINE, 1179
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
; rs232par.c 1180					State = StateP0;
	SYMB	LINE, 1180
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c 1181					ParType[ParCnt] = P_BinDecNum;
	SYMB	LINE, 1181
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#05H
; rs232par.c 1182					return( PMUS);
	SYMB	LINE, 1182
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c 1183				}
	SYMB	LINE, 1183
_187:
; rs232par.c 1184	
; rs232par.c 1185				if ( iswhitespace(c))
	SYMB	LINE, 1185
	CMP.B	R5L,#0AH
	BEQ	_189
	CMP.B	R5L,#020H
	BGT	_189
; rs232par.c 1186				{
; rs232par.c 1187					State = StateP7;
	SYMB	LINE, 1187
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#07H
; rs232par.c 1188					ParType[ParCnt] = P_BinDecNum;
	SYMB	LINE, 1188
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#05H
; rs232par.c 1189					break;
	SYMB	LINE, 1189
	BR	_329
; rs232par.c 1190				}
	SYMB	LINE, 1190
_189:
; rs232par.c 1191	
; rs232par.c 1192				if ( iscomma(c))
	SYMB	LINE, 1192
	CMP.B	R5L,#02CH
	BNE	_190
; rs232par.c 1193				{
; rs232par.c 1194					Cmd[++CmdNdx] = c;
	SYMB	LINE, 1194
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c 1195					State = StateP8;
	SYMB	LINE, 1195
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#08H
; rs232par.c 1196					ParType[ParCnt] = P_BinDecNum;
	SYMB	LINE, 1196
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#05H
; rs232par.c 1197					return( Ready);
	SYMB	LINE, 1197
	MOV.B	R0L,#02H
	BR	_384
; rs232par.c 1198				}
	SYMB	LINE, 1198
_190:
; rs232par.c 1199	
; rs232par.c 1200				if ( isnewline(c))
	SYMB	LINE, 1200
	CMP.B	R5L,#0AH
	BNE	_191
; rs232par.c 1201				{
; rs232par.c 1202					Cmd[CmdNdx] = 0;
	SYMB	LINE, 1202
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
; rs232par.c 1203					State = StateP0;
	SYMB	LINE, 1203
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c 1204					ParType[ParCnt] = P_BinDecNum;
	SYMB	LINE, 1204
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#05H
; rs232par.c 1205					return( PMT);
	SYMB	LINE, 1205
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c 1206				}
	SYMB	LINE, 1206
_191:
; rs232par.c 1207	
; rs232par.c 1208				SCPIError = InvalidCharInNumber;
	SYMB	LINE, 1208
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#0EH
; rs232par.c 1209				State = StateERROR;
	SYMB	LINE, 1209
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c 1210				break;
	SYMB	LINE, 1210
	BR	_329
; rs232par.c 1211	
; rs232par.c 1212			case StateDA4:
	SYMB	LINE, 1212
_192:
	SYMB	LTIM, "c", 17, 0, 2125
	SYMB	LTIM, "c", 17, 0, 2253
; rs232par.c 1213				if ( NoOfDigits)
	SYMB	LINE, 1213
	MOV.B	ES,#SEG( _NoOfDigits )
	MOV.W	R0,#SOF( _NoOfDigits )
	MOV.B	R0L,[R0]
	BEQ	_194
; rs232par.c 1214				{
; rs232par.c 1215					if ( isdigit(c))
	SYMB	LINE, 1215
	MOV.B	R2L,R5L
	SEXT.B	R2H
	SEXT.W	R3
	MOV.B	ES,#SEG( __ctype_+1 )
	MOV.B	R0H,[R2+SOF( __ctype_+1 )]
	MOV.B	R1L,R0H
	SEXT.B	R1H
	AND.W	R1,#04H
	BEQ	_193
; rs232par.c 1216					{
; rs232par.c 1217						NoOfDigits--;
	SYMB	LINE, 1217
	ADDS.B	R0L,#0FH
	MOV.B	ES,#SEG( _NoOfDigits )
	MOV.W	R1,#SOF( _NoOfDigits )
	MOV.B	[R1],R0L
; rs232par.c 1218						NoOfBytes = 10*NoOfBytes + ( c - '0');
	SYMB	LINE, 1218
	MOV.B	ES,#SEG( _NoOfBytes )
	MOV.W	R0,#SOF( _NoOfBytes )
	MOV.W	R0,[R0]
	MULU.W	R0,#0AH
	MOV.B	R5L,R5L
	SEXT.B	R5H
	SUB.W	R5,#030H
	ADD.W	R0,R5
	MOV.B	ES,#SEG( _NoOfBytes )
	MOV.W	R1,#SOF( _NoOfBytes )
	MOV.W	[R1],R0
; rs232par.c 1219						break;
	SYMB	LINE, 1219
	BR	_329
; rs232par.c 1220					}
	SYMB	LINE, 1220
_193:
; rs232par.c 1221					SCPIError = InvalidBlockData;
	SYMB	LINE, 1221
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01BH
; rs232par.c 1222					State = StateERROR;
	SYMB	LINE, 1222
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c 1223					break;
	SYMB	LINE, 1223
	BR	_329
; rs232par.c 1224				}
	SYMB	LINE, 1224
_194:
	SYMB	LTIM, "c", 17, 0, 2125
	SYMB	LTIM, "c", 17, 0, 2253
; rs232par.c 1225	
; rs232par.c 1226				if ( CmdNdx < NoOfBytes)
	SYMB	LINE, 1226
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOV.B	ES,#SEG( _NoOfBytes )
	MOV.W	R1,#SOF( _NoOfBytes )
	MOV.W	R1,[R1]
	CMP.W	R0,R1
	BCS	_200
; rs232par.c 1227				{
; rs232par.c 1228					Cmd[CmdNdx++] = c_str;
; rs232par.c 1229				}
; rs232par.c 1230				else {
; rs232par.c 1231					if ( issemicolon(c))
	SYMB	LINE, 1231
	CMP.B	R5L,#03BH
	BNE	_195
; rs232par.c 1232					{
; rs232par.c 1233						Cmd[CmdNdx] = 0;
	SYMB	LINE, 1233
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
; rs232par.c 1234						State = StateP0;
	SYMB	LINE, 1234
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c 1235						ParType[ParCnt] = P_Blockn;
	SYMB	LINE, 1235
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#08H
; rs232par.c 1236						return( PMUS);
	SYMB	LINE, 1236
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c 1237					}
	SYMB	LINE, 1237
_195:
; rs232par.c 1238	
; rs232par.c 1239					if ( iswhitespace(c))
	SYMB	LINE, 1239
	CMP.B	R5L,#0AH
	BEQ	_197
	CMP.B	R5L,#020H
	BGT	_197
; rs232par.c 1240					{
; rs232par.c 1241						State = StateP7;
	SYMB	LINE, 1241
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#07H
; rs232par.c 1242						ParType[ParCnt] = P_Blockn;
	SYMB	LINE, 1242
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#08H
; rs232par.c 1243						break;
	SYMB	LINE, 1243
	BR	_329
; rs232par.c 1244					}
	SYMB	LINE, 1244
_197:
; rs232par.c 1245	
; rs232par.c 1246					if ( iscomma(c))
	SYMB	LINE, 1246
	CMP.B	R5L,#02CH
	BNE	_198
; rs232par.c 1247					{
; rs232par.c 1248						Cmd[++CmdNdx] = c;
	SYMB	LINE, 1248
	ADDS.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R5L
; rs232par.c 1249						State = StateP8;
	SYMB	LINE, 1249
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#08H
; rs232par.c 1250						ParType[ParCnt] = P_Blockn;
	SYMB	LINE, 1250
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#08H
; rs232par.c 1251						return( Ready);
	SYMB	LINE, 1251
	MOV.B	R0L,#02H
	BR	_384
; rs232par.c 1252					}
	SYMB	LINE, 1252
_198:
; rs232par.c 1253	
; rs232par.c 1254					if ( isnewline(c))
	SYMB	LINE, 1254
	CMP.B	R5L,#0AH
	BNE	_199
; rs232par.c 1255					{
; rs232par.c 1256						Cmd[CmdNdx] = 0;
	SYMB	LINE, 1256
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
; rs232par.c 1257						State = StateP0;
	SYMB	LINE, 1257
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c 1258						ParType[ParCnt] = P_Blockn;
	SYMB	LINE, 1258
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#08H
; rs232par.c 1259						return( PMT);
	SYMB	LINE, 1259
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c 1260					}
	SYMB	LINE, 1260
_199:
; rs232par.c 1261	
; rs232par.c 1262					SCPIError = InvalidBlockData;
	SYMB	LINE, 1262
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01BH
; rs232par.c 1263					State = StateERROR;
	SYMB	LINE, 1263
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#01EH
; rs232par.c 1264					break;
	SYMB	LINE, 1264
	BR	_329
	SYMB	LINE, 1228
_200:
	SYMB	LTIM, "c", 17, 0, 2125
	SYMB	LTIM, "c", 17, 0, 2253
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R4H
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
; rs232par.c 1265				}
; rs232par.c 1266				break;
	SYMB	LINE, 1266
	BR	_329
; rs232par.c 1267	
; rs232par.c 1268			case StateDA5:
	SYMB	LINE, 1268
_201:
	SYMB	LTIM, "c", 17, 0, 2125
	SYMB	LTIM, "c", 17, 0, 2253
; rs232par.c 1269				if ( isnewline(c))
	SYMB	LINE, 1269
	CMP.B	R5L,#0AH
	BNE	_202
; rs232par.c 1270				{
; rs232par.c 1271					Cmd[CmdNdx] = 0;
	SYMB	LINE, 1271
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
; rs232par.c 1272					State = StateP0;
	SYMB	LINE, 1272
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c 1273					ParType[ParCnt] = P_Block0;
	SYMB	LINE, 1273
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#07H
; rs232par.c 1274					return( PMT);
	SYMB	LINE, 1274
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c 1275				}
	SYMB	LINE, 1275
_202:
	SYMB	LTIM, "c", 17, 0, 2125
	SYMB	LTIM, "c", 17, 0, 2253
; rs232par.c 1276	
; rs232par.c 1277				Cmd[CmdNdx++] = c_str;
	SYMB	LINE, 1277
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R4H
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
; rs232par.c 1278				break;
	SYMB	LINE, 1278
	BR	_329
; rs232par.c 1279	
; rs232par.c 1280			case StateA0:							 // ASCII DATA ONLY FOR A RESPONSE
	SYMB	LINE, 1280
_203:
	SYMB	LTIM, "c", 17, 0, 2125
	SYMB	LTIM, "c", 17, 0, 2253
; rs232par.c 1281				if ( isnewline( c))
	SYMB	LINE, 1281
	CMP.B	R5L,#0AH
	BNE	_204
; rs232par.c 1282				{
; rs232par.c 1283					Cmd[CmdNdx] = 0;
	SYMB	LINE, 1283
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
; rs232par.c 1284					State = StateP0;
	SYMB	LINE, 1284
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c 1285					return( PMT);
	SYMB	LINE, 1285
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c 1286				}
	SYMB	LINE, 1286
_204:
	SYMB	LTIM, "c", 17, 0, 2125
	SYMB	LTIM, "c", 17, 0, 2253
; rs232par.c 1287	
; rs232par.c 1288				Cmd[CmdNdx++] = c_str;
	SYMB	LINE, 1288
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R0,#SOF( _CmdNdx )
	MOV.W	R0,[R0]
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R2+SOF( _Cmd )],R4H
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _CmdNdx )
	MOV.W	R1,#SOF( _CmdNdx )
	MOV.W	[R1],R0
; rs232par.c 1289				ParType[ParCnt] = P_ASCII;
	SYMB	LINE, 1289
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#0AH
; rs232par.c 1290				break;
	SYMB	LINE, 1290
	BR	_329
; rs232par.c 1291	
; rs232par.c 1292			case StateE0:
	SYMB	LINE, 1292
_205:
; rs232par.c 1293				if ( (c) == ')')
	SYMB	LINE, 1293
	CMP.B	R5L,#029H
	BNE	_329
; rs232par.c 1294				{
; rs232par.c 1295					State = StateP7;
	SYMB	LINE, 1295
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#07H
; rs232par.c 1296					ParType[ParCnt] = P_Block0;
	SYMB	LINE, 1296
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	[R0+SOF( _ParType )],#07H
; rs232par.c 1297				}
; rs232par.c 1298				break;
	SYMB	LINE, 1298
	BR	_329
; rs232par.c 1299	
; rs232par.c 1300			case StateERROR:						 // ERROR
	SYMB	LINE, 1300
_206:
; rs232par.c 1301				if ( issemicolon(c))
	SYMB	LINE, 1301
	CMP.B	R5L,#03BH
	BNE	_207
; rs232par.c 1302				{
; rs232par.c 1303					State = StateP0;
	SYMB	LINE, 1303
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c 1304					return( PMUS);
	SYMB	LINE, 1304
	MOV.B	R0L,#03H
	BR	_384
; rs232par.c 1305				}
	SYMB	LINE, 1305
_207:
; rs232par.c 1306	
; rs232par.c 1307				if ( isnewline(c))
	SYMB	LINE, 1307
	CMP.B	R5L,#0AH
	BNE	_329
; rs232par.c 1308				{
; rs232par.c 1309					State = StateP0;
	SYMB	LINE, 1309
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	[R0],#00H
; rs232par.c 1310					return( PMT);
	SYMB	LINE, 1310
	MOV.B	R0L,#04H
	BR	_384
; rs232par.c 1311				}
; rs232par.c 1312				break;
; rs232par.c 1313		}
	SYMB	LINE, 1313
_329:
; rs232par.c 1314	
; rs232par.c 1315		if ( State == StateERROR)
	SYMB	LINE, 1315
	MOV.B	ES,#SEG( _State )
	MOV.W	R0,#SOF( _State )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01EH
	BNE	_330
; rs232par.c 1316			return( Error);
	SYMB	LINE, 1316
	MOV.B	R0L,#05H
	BR	_384
_330:
; rs232par.c 1317	
; rs232par.c 1318		return( Idle);
	SYMB	LINE, 1318
	MOV.B	R0L,#00H
; rs232par.c 1319	}
	SYMB	LINE, 1319
_384:
	ADDS.W	R7,#04H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "c", 17, 0, 2125
	SYMB	EFUN
; rs232par.c 1320	
; rs232par.c 1321	/**************************************************************************/
; rs232par.c 1322	/* CmdHandler																						 	     RS232PAR.C	*/
; rs232par.c 1323	/*																																				*/
; rs232par.c 1324	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232par.c 1325	/* Revised:		000414												     													*/
; rs232par.c 1326	/*																																				*/
; rs232par.c 1327	/* Function:																															*/
; rs232par.c 1328	/* Remarks:																																*/
; rs232par.c 1329	/* Returns:		--																													*/
; rs232par.c 1330	/* Updates:		TBD																													*/
; rs232par.c 1331	/**************************************************************************/
; rs232par.c 1332	void CmdHandler( char c)
; rs232par.c 1333	{
	ALIGN	1
	SYMB	LINE, 1333
	PUBLIC	_CmdHandler
_CmdHandler:
	SYMB	TYPE, 460, 'X', 12, #1, 30, 1, #2
	SYMB	GFUN, "CmdHandler", _CmdHandler, #460, 0, 0, 112
	SYMB	ALAB, _CmdHandler, #460
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SYMB	LTIM, "c", 0, 0, 2253
	SYMB	IDEN, "c", 0, #2, 0, 2061
	SYMB	IDEN, "CmdState", -1, #3, 130, 5
	SYMB	LTIM, "CmdState", -1, 0, 69
; rs232par.c 1334	
; rs232par.c 1335		UC CmdState;
; rs232par.c 1336	//	UL DecVar;
; rs232par.c 1337	
; rs232par.c 1338		switch ( CmdState = CmdSyntax( c))
	SYMB	LINE, 1338
	CALL	_CmdSyntax
	SYMB	LTIM, "c", 0, 0, 2125
	MOV.B	R6L,R0L
	SYMB	LTIM, "CmdState", 24, 0, 205
	CMP.B	R6L,#00H
	BEQ	_562
	CMP.B	R6L,#05H
	BEQ	_562
	BR	_535
; rs232par.c 1339		{
; rs232par.c 1340			case Idle:
; rs232par.c 1341				break;
; rs232par.c 1342	
; rs232par.c 1343			case Error:
; rs232par.c 1344				break;
; rs232par.c 1345	
; rs232par.c 1346			default:									// ie. NextLevel, Ready, PMUS and PMT
	SYMB	LINE, 1346
_535:
; rs232par.c 1347				if ( ParType[ParCnt] == P_NoParameter)
	SYMB	LINE, 1347
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _ParType )
	MOV.B	R0L,[R0+SOF( _ParType )]
	BNE	_548
; rs232par.c 1348				{
; rs232par.c 1349					if ( NumSuffix)
	SYMB	LINE, 1349
	MOV.B	ES,#SEG( _NumSuffix )
	MOV.W	R0,#SOF( _NumSuffix )
	MOV.W	R0,[R0]
	BEQ	_536
; rs232par.c 1350						Cmd[NoOfDigits] = 0;
	SYMB	LINE, 1350
	MOV.B	ES,#SEG( _NoOfDigits )
	MOV.W	R0,#SOF( _NoOfDigits )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Cmd )
	MOV.B	[R0+SOF( _Cmd )],#00H
	BR	_537
_536:
; rs232par.c 1351					else
; rs232par.c 1352						NumSuffix = 1;
	SYMB	LINE, 1352
	MOV.B	ES,#SEG( _NumSuffix )
	MOV.W	R0,#SOF( _NumSuffix )
	MOV.W	[R0],#01H
_537:
; rs232par.c 1353	
; rs232par.c 1354					while ( CmdPtr)
	SYMB	LINE, 1354
	MOV.B	ES,#SEG( _CmdPtr )
	MOV.W	R1,#SOF( _CmdPtr )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	OR.W	R1,R0
	BEQ	_548
_538:
; rs232par.c 1355					{
; rs232par.c 1356						if (( !Cstrcmp( Cmd, CmdPtr->LongName)) ||
; rs232par.c 1357							 ( !Cstrcmp( Cmd, CmdPtr->ShortName)))
	SYMB	LINE, 1357
	MOV.B	ES,#SEG( _CmdPtr )
	MOV.W	R1,#SOF( _CmdPtr )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_563
	ADDS.B	CS,#01H
_563:
	MOVC.W	R3,[R0+]
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_Cstrcmp
	OR.W	R0,R0
	BEQ	_539
	MOV.B	ES,#SEG( _CmdPtr )
	MOV.W	R1,#SOF( _CmdPtr )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	ADD.W	R0,#04H
	ADDC.W	R1,#00H
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_564
	ADDS.B	CS,#01H
_564:
	MOVC.W	R3,[R0+]
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_Cstrcmp
	OR.W	R0,R0
	BNE	_543
_539:
; rs232par.c 1358						{
; rs232par.c 1359	
; rs232par.c 1360							if ( CmdPtr->Suffix != NONE)
	SYMB	LINE, 1360
	MOV.B	ES,#SEG( _CmdPtr )
	MOV.W	R1,#SOF( _CmdPtr )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	ADD.W	R0,#010H
	ADDC.W	R1,#00H
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_565
	ADDS.B	CS,#01H
_565:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	OR.W	R3,R2
	BEQ	_540
; rs232par.c 1361								CmdPtr->Suffix();
	SYMB	LINE, 1361
	FCALL	__ICALL
	BR	_542
_540:
; rs232par.c 1362							else
; rs232par.c 1363							{
; rs232par.c 1364								if ( NumSuffix > 1)
	SYMB	LINE, 1364
	MOV.B	ES,#SEG( _NumSuffix )
	MOV.W	R0,#SOF( _NumSuffix )
	MOV.W	R0,[R0]
	CMP.W	R0,#01H
	BL	_542
; rs232par.c 1365									SCPIError = HdrSuffixOutOfRange;
	SYMB	LINE, 1365
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#0CH
; rs232par.c 1366							}
	SYMB	LINE, 1366
_542:
; rs232par.c 1367	
; rs232par.c 1368							if ( CmdState == NextLevel)
	SYMB	LINE, 1368
	CMP.B	R6L,#01H
	BNE	_548
; rs232par.c 1369								CmdPtr = CmdPtr->NextLevel;
; rs232par.c 1370							break;
	SYMB	LINE, 1370
	BR	_544
; rs232par.c 1371						}
	SYMB	LINE, 1371
_543:
; rs232par.c 1372						CmdPtr = CmdPtr->SameLevel;
	SYMB	LINE, 1372
	MOV.B	ES,#SEG( _CmdPtr )
	MOV.W	R3,#SOF( _CmdPtr )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	ADD.W	R2,#08H
	ADDC.W	R3,#00H
	MOV.B	CS,R3L
	MOVC.W	R0,[R2+]
	CMP.W	R2,#00H
	BNE	_568
	ADDS.B	CS,#01H
_568:
	MOVC.W	R1,[R2+]
	MOV.B	ES,#SEG( _CmdPtr )
	MOV.W	R2,#SOF( _CmdPtr )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
	SYMB	LINE, 1354
	OR.W	R1,R0
	BNE	_538
; rs232par.c 1373					}
; rs232par.c 1374				}
	SYMB	LINE, 1374
	BR	_548
	SYMB	LINE, 1369
_544:
	MOV.B	ES,#SEG( _CmdPtr )
	MOV.W	R1,#SOF( _CmdPtr )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	ADD.W	R0,#0CH
	ADDC.W	R1,#00H
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_569
	ADDS.B	CS,#01H
_569:
	MOVC.W	R3,[R0+]
	MOV.B	ES,#SEG( _CmdPtr )
	MOV.W	R0,#SOF( _CmdPtr )
	MOV.W	[R0+],R2
	MOV.W	[R0],R3
; rs232par.c 1375				else
; rs232par.c 1376				{
; rs232par.c 1377	
; rs232par.c 1378	/*				switch ( ParameterType) {
; rs232par.c 1379						case P_BinDecNum:
; rs232par.c 1380							btol( Cmd, &DecVar);
; rs232par.c 1381							_ultoa( DecVar, Cmd);
; rs232par.c 1382							ParameterType = P_DecNum;
; rs232par.c 1383							break;
; rs232par.c 1384	
; rs232par.c 1385						case P_OctDecNum:
; rs232par.c 1386							otol( Cmd, &DecVar);
; rs232par.c 1387							_ultoa( DecVar, Cmd);
; rs232par.c 1388							ParameterType = P_DecNum;
; rs232par.c 1389							break;
; rs232par.c 1390	
; rs232par.c 1391						case P_HexDecNum:
; rs232par.c 1392							htol( Cmd, &DecVar);
; rs232par.c 1393							_ultoa( DecVar, Cmd);
; rs232par.c 1394							ParameterType = P_DecNum;
; rs232par.c 1395							break;
; rs232par.c 1396					}
; rs232par.c 1397	*/			}
	SYMB	LINE, 1397
_548:
; rs232par.c 1398	
; rs232par.c 1399				if ( CmdState != NextLevel)						// ie. Ready, PMUS and PMT
	SYMB	LINE, 1399
	CMP.B	R6L,#01H
	BEQ	_562
; rs232par.c 1400				{
; rs232par.c 1401	
; rs232par.c 1402	/*				if ( SCPIError == NoErr) {
; rs232par.c 1403	
; rs232par.c 1404						if ( CmdState != Ready)
; rs232par.c 1405							CmdExecute = TRUE;
; rs232par.c 1406						else
; rs232par.c 1407							CmdExecute = FALSE;
; rs232par.c 1408	
; rs232par.c 1409						if (( CmdPtr->Function != NONE) && CmdPtr)
; rs232par.c 1410							CmdPtr->Function();
; rs232par.c 1411						else {
; rs232par.c 1412							if ( Cmd[0] != '\x0')
; rs232par.c 1413								SCPIError = SyntaxErr;
; rs232par.c 1414						}
; rs232par.c 1415					}*/
; rs232par.c 1416	
; rs232par.c 1417	// Rewritten by TK 991110 to not execute function before delimiter.
; rs232par.c 1418	
; rs232par.c 1419					if ( SCPIError == NoErr)
	SYMB	LINE, 1419
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_555
; rs232par.c 1420					{
; rs232par.c 1421						if ( CmdState != Ready)
	SYMB	LINE, 1421
	CMP.B	R6L,#02H
	BEQ	_551
; rs232par.c 1422						{
; rs232par.c 1423							CmdExecute = TRUE;	
	SYMB	LINE, 1423
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	[R0],#0FFH
; rs232par.c 1424	
; rs232par.c 1425							if (( CmdPtr->Function != NONE) && CmdPtr)
	SYMB	LINE, 1425
	MOV.B	ES,#SEG( _CmdPtr )
	MOV.W	R3,#SOF( _CmdPtr )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#014H
	ADDC.W	R5,#00H
	MOV.B	CS,R5L
	MOVC.W	R0,[R4+]
	CMP.W	R4,#00H
	BNE	_572
	ADDS.B	CS,#01H
_572:
	MOVC.W	R1,[R4+]
	MOV.W	R5,R1
	MOV.W	R4,R0
	OR.W	R1,R0
	BEQ	_550
	OR.W	R3,R2
	BEQ	_550
; rs232par.c 1426								CmdPtr->Function();
	SYMB	LINE, 1426
	FCALL	__ICALL
	BR	_555
_550:
; rs232par.c 1427							else
; rs232par.c 1428							{
; rs232par.c 1429								if ( Cmd[0] != '\x0')
	SYMB	LINE, 1429
	MOV.B	ES,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R0L,[R0]
	BEQ	_555
; rs232par.c 1430									SCPIError = SyntaxErr;
	SYMB	LINE, 1430
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232par.c 1431							}
; rs232par.c 1432						}
	SYMB	LINE, 1432
	BR	_555
_551:
; rs232par.c 1433						else
; rs232par.c 1434							CmdExecute = FALSE;
	SYMB	LINE, 1434
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	[R0],#00H
; rs232par.c 1435	
; rs232par.c 1436					}
	SYMB	LINE, 1436
_555:
; rs232par.c 1437	
; rs232par.c 1438					if ( CmdState == PMT)
	SYMB	LINE, 1438
	CMP.B	R6L,#04H
	BNE	_556
; rs232par.c 1439						CmdPtr = CmdLevelPtr = &Subsystem[0];	// Reset level pointers
	SYMB	LINE, 1439
	MOV.B	ES,#SEG( _CmdLevelPtr )
	MOV.W	R0,#SOF( _CmdLevelPtr )
	MOV.W	[R0+],#SOF( _Subsystem )
	MOV.W	[R0],#SEG( _Subsystem )
	MOV.B	ES,#SEG( _CmdPtr )
	MOV.W	R0,#SOF( _CmdPtr )
	MOV.W	[R0+],#SOF( _Subsystem )
	MOV.W	[R0],#SEG( _Subsystem )
_556:
; rs232par.c 1440	
; rs232par.c 1441					if ( CmdState != Ready)									// ie. PMUS and PMT
	SYMB	LINE, 1441
	CMP.B	R6L,#02H
	BEQ	_562
; rs232par.c 1442					{
; rs232par.c 1443						if ( SCPIError)												// If any errors has occured
	SYMB	LINE, 1443
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BEQ	_557
; rs232par.c 1444						{
; rs232par.c 1445							SaveErrorEventQueue( SCPIError);		//  save the error
	SYMB	LINE, 1445
	CALL	_SaveErrorEventQueue
; rs232par.c 1446							SCPIError = NoErr;
	SYMB	LINE, 1446
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#00H
; rs232par.c 1447						}
	SYMB	LINE, 1447
	BR	_562
_557:
; rs232par.c 1448						else
; rs232par.c 1449							NewCmdExecuted = TRUE;				// Command has succesfully
	SYMB	LINE, 1449
	MOV.B	ES,#SEG( _NewCmdExecuted )
	MOV.W	R0,#SOF( _NewCmdExecuted )
	MOV.B	[R0],#0FFH
; rs232par.c 1450					}													//  been executed
; rs232par.c 1451				}
; rs232par.c 1452				break;
; rs232par.c 1453		}
	SYMB	LINE, 1453
_562:
; rs232par.c 1454	}
	SYMB	LINE, 1454
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "CmdState", 24, 0, 77
	SYMB	EFUN
	SYMB	ENDF

	SYMB	IDEN, "CmdExecute", _CmdExecute, #2, 130, 0
	SYMB	ALAB, _CmdExecute, #2
RS232PAR_CLR_FA	SEGMENT	HDATA INSEGMENT CLEAR
	RSEG	RS232PAR_CLR_FA
	PUBLIC	_CmdExecute
_CmdExecute:	DS	1
	SYMB	IDEN, "NewCmdExecuted", _NewCmdExecuted, #2, 130, 0
	SYMB	ALAB, _NewCmdExecuted, #2
	PUBLIC	_NewCmdExecuted
_NewCmdExecuted:	DS	1
	SYMB	TYPE, 461, 'Z', #3, 9
	SYMB	IDEN, "ParType", _ParType, #461, 130, 0
	SYMB	ALAB, _ParType, #461
	PUBLIC	_ParType
_ParType:	DS	10
	SYMB	TYPE, 463, 'X', 12, #16, 30, 2, #258, #449
	SYMB	ALAB, _Cstrcmp, #463
	EXTRN	HCODE(_Cstrcmp)
	SYMB	TYPE, 464, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _toupper, #464
	EXTRN	HCODE(_toupper)
	SYMB	TYPE, 465, 'X', 12, #1, 30, 1, #16
	SYMB	ALAB, _SaveErrorEventQueue, #465
	EXTRN	HCODE(_SaveErrorEventQueue)
	SYMB	IDEN, "CmdNdx", _CmdNdx, #18, 130, 0
	SYMB	ALAB, _CmdNdx, #18
	PUBLIC	_CmdNdx
	ALIGN	1
_CmdNdx:	DS	2
	SYMB	IDEN, "NoOfBytes", _NoOfBytes, #18, 130, 4
	ALIGN	1
_NoOfBytes:	DS	2
	SYMB	TYPE, 466, 'Z', #2, 511
	SYMB	IDEN, "Cmd", _Cmd, #466, 130, 0
	SYMB	ALAB, _Cmd, #466
	PUBLIC	_Cmd
_Cmd:	DS	512
	SYMB	IDEN, "ParCnt", _ParCnt, #3, 130, 0
	SYMB	ALAB, _ParCnt, #3
	PUBLIC	_ParCnt
_ParCnt:	DS	1
	SYMB	IDEN, "NumSuffix", _NumSuffix, #18, 130, 0
	SYMB	ALAB, _NumSuffix, #18
	PUBLIC	_NumSuffix
	ALIGN	1
_NumSuffix:	DS	2
	SYMB	IDEN, "CmdRequest", _CmdRequest, #2, 130, 0
	SYMB	ALAB, _CmdRequest, #2
	PUBLIC	_CmdRequest
_CmdRequest:	DS	1
	SYMB	TYPE, 468, 'X', 12, #16, 30, 0
	SYMB	ALAB, _rs232GetLastError, #468
	EXTRN	HCODE(_rs232GetLastError)
	SYMB	TYPE, 469, 'Z', #2, -1
	SYMB	ALAB, __ctype_, #469
	EXTRN	HDATA(__ctype_)
	SYMB	TYPE, 471, 'Z', #450, 11
	SYMB	ALAB, _Mandated, #471
	EXTRN	HCODE(_Mandated)
	SYMB	IDEN, "NoOfDigits", _NoOfDigits, #3, 130, 4
_NoOfDigits:	DS	1
	EXTRN	HCODE(__ICALL)
	SYMB	TYPE, 473, 'Z', #450, 8
	SYMB	ALAB, _Subsystem, #473
	EXTRN	HCODE(_Subsystem)
	SYMB	IDEN, "ResponseReceived", _ResponseReceived, #3, 130, 0
	SYMB	ALAB, _ResponseReceived, #3
	PUBLIC	_ResponseReceived
_ResponseReceived:	DS	1
	SYMB	ALAB, _SCPIError, #16
	EXTRN	HDATA(_SCPIError)
	EXTRN	DATA(__lc_ub_xvwbuffer)
	EXTRN	DATA(__lc_ue_xvwbuffer)
	CALLS	'CmdSyntax', 'toupper'
	CALLS	'CmdSyntax', 'rs232GetLastError'
	CALLS	'CmdHandler', 'CmdSyntax'
	CALLS	'CmdHandler', 'Cstrcmp'
	CALLS	'CmdHandler', 'SaveErrorEventQueue'
	END
