; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -Ic:\cxa\rtxc\xa\include -I. -Ml
;          -O2 -s
$CASE
$NOZPAGE
	NAME	BB
	SYMB	TOOL, "XA C compiler v2.0", 1
	SYMB	TYPE, 256, "bit", 'g', 0, 1
	SYMB	FILE, "bb.c"
; bb.c        1	/****************************************************************************/
; bb.c        2	/* MODULE:                                                                  */
; bb.c        3	/*  bb.c - Black burst generators                                           */
; bb.c        4	/****************************************************************************/
; bb.c        5	/* FUNCTIONS:                                                               */
; bb.c        6	/*                                                                          */
; bb.c        7	/*	void BBDefaults( void)																									*/	
; bb.c        8	/*	int BBInit( void)																												*/	
; bb.c        9	/*	int BBVersion( char *result)																						*/	
; bb.c       10	/*	int BBUpdate( void)																											*/
; bb.c       11	/*	int SetBBSystem( int output, int system)																*/
; bb.c       12	/*	int SetBBDelay( int output, UL delay)																		*/
; bb.c       13	/*	int SetBBScHPhase( int output, int schphase)														*/
; bb.c       14	/*                                                                          */
; bb.c       15	/* TASKS:                                                                   */
; bb.c       16	/*                                                                          */
; bb.c       17	/* NOTES:                                                                   */
; bb.c       18	/*                                                                          */
; bb.c       19	/****************************************************************************/
; bb.c       20	/*
; bb.c       21	 *   PTV software for PT5201    
; bb.c       22	 *   Copyright (c) 
; bb.c       23	 *   ProTeleVision Technologies A/S.
; bb.c       24	 *   ALL RIGHTS RESERVED
; bb.c       25	*/
; bb.c       26	/****************************************************************************/
; bb.c       27	#include <string.h>
	SYMB	FILE, "c:\\cxa\\include\\string.h"
	SYMB	TYPE, 257, "size_t", 'T', #18
	SYMB	ENDF
; bb.c       28	
; bb.c       29	#include "reg8051.h"
	SYMB	FILE, "reg8051.h"
	SYMB	ENDF
; bb.c       30	#include "define.h"        // Standard PTV defines
	SYMB	FILE, "define.h"
	SYMB	ENDF
; bb.c       31	#include "bb.h"
	SYMB	FILE, "bb.h"
	SYMB	TYPE, 258, 'S', 8,\
		 "System", #3, 0,\
		 "Delay", #7, 2,\
		 "ScHPhase", #16, 6
	SYMB	TYPE, 259, "BBObject", 'T', #258
	SYMB	ENDF
; bb.c       32	#include "tables.h"
	SYMB	FILE, "tables.h"
	SYMB	ENDF
; bb.c       33	#include "led_hw.h"
	SYMB	FILE, "led_hw.h"
	SYMB	TYPE, 260, 'N',\
		 "true", -1,\
		 "false", 0
	SYMB	TYPE, 261, "bool", 'T', #260
	SYMB	ENDF
; bb.c       34	#include "sio0drv.h"
	SYMB	FILE, "sio0drv.h"
	SYMB	FILE, "define.h"
	SYMB	ENDF
	SYMB	FILE, "rtxcobj.h"
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\rtxcapi.h"
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\typedef.h"
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 262, "KOBJNUM", 'T', #3
	SYMB	TYPE, 263, "TASK", 'T', #2
	SYMB	ENDF
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\rtxstruc.h"
	SYMB	FILE, "c:\\cxa\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 264, "KSNUM", 'T', #3
	SYMB	TYPE, 265, "PRIORITY", 'T', #263
	SYMB	TYPE, 266, "TSTATE", 'T', #5
	SYMB	TYPE, 267, "TSLICE", 'T', #3
	SYMB	TYPE, 269, 'n', #268, 130
	SYMB	TYPE, 270, 'P', #269
	SYMB	TYPE, 272, 'n', #271, 130
	SYMB	TYPE, 273, 'P', #272
	SYMB	TYPE, 274, 'n', #264, 130
	SYMB	TYPE, 275, 'P', #274
	SYMB	TYPE, 276, 'X', 12, #1, 30, 0
	SYMB	TYPE, 277, 'n', #276, 129
	SYMB	TYPE, 278, 'P', #277
	SYMB	TYPE, 279, "frame", 'S', 24,\
		 "es", #3, 0,\
		 "cs", #3, 1,\
		 "ssel", #3, 2,\
		 "ds", #3, 3,\
		 "pksnum", #275, 4,\
		 "R2", #18, 8,\
		 "R3", #18, 10,\
		 "R4", #18, 12,\
		 "R5", #18, 14,\
		 "R6", #18, 16,\
		 "psw", #18, 18,\
		 "pc", #278, 20
	SYMB	TYPE, 280, 'n', #279, 130
	SYMB	TYPE, 281, 'P', #280
	SYMB	TYPE, 282, 'X', 12, #1, 30, 0
	SYMB	TYPE, 283, 'n', #282, 129
	SYMB	TYPE, 284, 'P', #283
	SYMB	TYPE, 285, 'n', #2, 130
	SYMB	TYPE, 286, 'P', #285
	SYMB	TYPE, 287, 'n', #1, 130
	SYMB	TYPE, 288, 'P', #287
	SYMB	TYPE, 268, "tcb", 'S', 36,\
		 "flink", #270, 0,\
		 "blink", #270, 4,\
		 "pclkblk", #273, 8,\
		 "task", #263, 12,\
		 "priority", #265, 13,\
		 "sp", #281, 14,\
		 "status", #266, 18,\
		 "pc_t0", #284, 20,\
		 "stackbase", #286, 24,\
		 "stacksize", #257, 28,\
		 "tslice", #267, 30,\
		 "newslice", #267, 31,\
		 "arg", #288, 32
	SYMB	TYPE, 289, "TCB", 'T', #268
	SYMB	TYPE, 290, "SEMA", 'T', #262
	SYMB	TYPE, 291, "MAP", 'T', #262
	SYMB	TYPE, 293, 'n', #292, 130
	SYMB	TYPE, 294, 'P', #293
	SYMB	TYPE, 292, "rtxcmsg", 'S', 8,\
		 "link", #294, 0,\
		 "task", #263, 4,\
		 "priority", #265, 5,\
		 "sema", #290, 6
	SYMB	TYPE, 295, "RTXCMSG", 'T', #292
	SYMB	TYPE, 296, "TICKS", 'T', #16
	SYMB	TYPE, 297, 'N',\
		 "DELAY_OBJ", 0,\
		 "SEMAPHORE_OBJ", 1,\
		 "PARTITION_OBJ", 2,\
		 "QUEUE_OBJ", 3,\
		 "RESOURCE_OBJ", 4,\
		 "MAILBOX_OBJ", 5,\
		 "TIMER_OBJ", 6
	SYMB	TYPE, 298, "OBJTYPE", 'T', #297
	SYMB	TYPE, 271, "clkblk", 'S', 18,\
		 "flink", #273, 0,\
		 "blink", #273, 4,\
		 "remain", #296, 8,\
		 "recycle", #296, 10,\
		 "task", #263, 12,\
		 "state", #2, 13,\
		 "objtype", #298, 14,\
		 "objid", #262, 16
	SYMB	TYPE, 299, 'N',\
		 "PRIORITY_INVERSION_OFF", 0,\
		 "PRIORITY_INVERSION_ON", 1
	SYMB	TYPE, 300, "RESATTR", 'T', #299
	SYMB	ENDF
	SYMB	TYPE, 301, 'N',\
		 "RC_GOOD", 0,\
		 "RC_WAIT_CONFLICT", 1,\
		 "RC_NO_TIMERS", 2,\
		 "RC_TIMER_INACTIVE", 3,\
		 "RC_TIMER_ILLEGAL", 4,\
		 "RC_TIMEOUT", 5,\
		 "RC_QUEUE_FULL", 6,\
		 "RC_QUEUE_EMPTY", 7,\
		 "RC_ILLEGAL_QUEUE_SIZE", 8,\
		 "RC_BUSY", 9,\
		 "RC_NESTED", 10,\
		 "RC_ILLEGAL_TASK", 11,\
		 "RC_ACTIVE_TASK", 12,\
		 "RC_NO_YIELD", 13,\
		 "RC_MISSED_EVENT", 14
	SYMB	TYPE, 302, "KSRC", 'T', #301
	SYMB	TYPE, 303, "SSTATE", 'T', #263
	SYMB	TYPE, 304, "MBOX", 'T', #262
	SYMB	TYPE, 305, "QUEUE", 'T', #262
	SYMB	TYPE, 306, 'N',\
		 "QNE", 0,\
		 "QNF", 1,\
		 "QF", 2,\
		 "QE", 3
	SYMB	TYPE, 307, "QCOND", 'T', #306
	SYMB	TYPE, 308, "RESOURCE", 'T', #262
	SYMB	TYPE, 309, "CLKBLK", 'T', #271
	SYMB	TYPE, 310, "time_t", 'T', #6
	SYMB	TYPE, 311, "FRAME", 'T', #279
	SYMB	ENDF
	SYMB	FILE, "ctask.h"
	SYMB	ENDF
	SYMB	FILE, "csema.h"
	SYMB	ENDF
	SYMB	FILE, "cres.h"
	SYMB	ENDF
	SYMB	FILE, "cqueue.h"
	SYMB	ENDF
	SYMB	FILE, "cpart.h"
	SYMB	ENDF
	SYMB	FILE, "cmbox.h"
	SYMB	ENDF
	SYMB	FILE, "cclock.h"
	SYMB	ENDF
	SYMB	TYPE, 313, 'n', #312, 130
	SYMB	TYPE, 314, 'P', #313
	SYMB	TYPE, 312, 'X', 12, #1, 30, 2, #314, #286
	SYMB	TYPE, 316, 'n', #315, 129
	SYMB	TYPE, 317, 'P', #316
	SYMB	TYPE, 318, 'X', 12, #1, 30, 1, #314
	SYMB	TYPE, 319, 'n', #318, 129
	SYMB	TYPE, 320, 'P', #319
	SYMB	TYPE, 321, 'n', #6, 130
	SYMB	TYPE, 322, 'P', #321
	SYMB	TYPE, 321, 'X', 12, #16, 30, 2, #314, #322
	SYMB	TYPE, 324, 'n', #323, 129
	SYMB	TYPE, 325, 'P', #324
	SYMB	TYPE, 326, 'X', 12, #1, 30, 1, #314
	SYMB	TYPE, 327, 'n', #326, 129
	SYMB	TYPE, 328, 'P', #327
	SYMB	TYPE, 329, 'X', 12, #1, 30, 1, #314
	SYMB	TYPE, 330, 'n', #329, 129
	SYMB	TYPE, 331, 'P', #330
	SYMB	TYPE, 332, 'X', 12, #16, 30, 1, #314
	SYMB	TYPE, 333, 'n', #332, 129
	SYMB	TYPE, 334, 'P', #333
	SYMB	TYPE, 312, "TEvent", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TEvent", #317, 2,\
		 "_TEvent", #320, 6,\
		 "Wait", #325, 10,\
		 "Set", #328, 14,\
		 "Clear", #331, 18,\
		 "IsSet", #334, 22,\
		 "ID", #290, 26,\
		 "Name", #286, 28
	SYMB	TYPE, 335, "TEvent", 'T', #312
	SYMB	TYPE, 337, 'n', #336, 130
	SYMB	TYPE, 338, 'P', #337
	SYMB	TYPE, 336, 'X', 12, #1, 30, 1, #338
	SYMB	TYPE, 340, 'n', #339, 129
	SYMB	TYPE, 341, 'P', #340
	SYMB	TYPE, 342, 'X', 12, #1, 30, 1, #338
	SYMB	TYPE, 343, 'n', #342, 129
	SYMB	TYPE, 344, 'P', #343
	SYMB	TYPE, 345, 'n', #335, 130
	SYMB	TYPE, 346, 'P', #345
	SYMB	TYPE, 345, 'X', 12, #16, 30, 2, #338, #346
	SYMB	TYPE, 348, 'n', #347, 129
	SYMB	TYPE, 349, 'P', #348
	SYMB	TYPE, 350, 'X', 12, #1, 30, 2, #338, #346
	SYMB	TYPE, 351, 'n', #350, 129
	SYMB	TYPE, 352, 'P', #351
	SYMB	TYPE, 353, 'X', 12, #16, 30, 2, #338, #346
	SYMB	TYPE, 354, 'n', #353, 129
	SYMB	TYPE, 355, 'P', #354
	SYMB	TYPE, 356, 'X', 12, #346, 30, 2, #338, #322
	SYMB	TYPE, 357, 'n', #356, 129
	SYMB	TYPE, 358, 'P', #357
	SYMB	TYPE, 359, 'Z', #2, 95
	SYMB	TYPE, 336, "TEventList", 'S', 122,\
		 "ObjectID", #16, 0,\
		 "TEventList", #341, 2,\
		 "_TEventList", #344, 6,\
		 "Append", #349, 10,\
		 "Clear", #352, 14,\
		 "InList", #355, 18,\
		 "Wait", #358, 22,\
		 "Align", #359, 26
	SYMB	TYPE, 361, "TEventList", 'T', #336
	SYMB	TYPE, 363, 'n', #362, 130
	SYMB	TYPE, 364, 'P', #363
	SYMB	TYPE, 362, 'X', 12, #1, 30, 2, #364, #286
	SYMB	TYPE, 366, 'n', #365, 129
	SYMB	TYPE, 367, 'P', #366
	SYMB	TYPE, 368, 'X', 12, #1, 30, 1, #364
	SYMB	TYPE, 369, 'n', #368, 129
	SYMB	TYPE, 370, 'P', #369
	SYMB	TYPE, 371, 'X', 12, #1, 30, 1, #364
	SYMB	TYPE, 372, 'n', #371, 129
	SYMB	TYPE, 373, 'P', #372
	SYMB	TYPE, 374, 'X', 12, #1, 30, 1, #364
	SYMB	TYPE, 375, 'n', #374, 129
	SYMB	TYPE, 376, 'P', #375
	SYMB	TYPE, 377, 'X', 12, #16, 30, 1, #364
	SYMB	TYPE, 378, 'n', #377, 129
	SYMB	TYPE, 379, 'P', #378
	SYMB	TYPE, 362, "TResource", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TResource", #367, 2,\
		 "_TResource", #370, 6,\
		 "Lock", #373, 10,\
		 "Unlock", #376, 14,\
		 "Owner", #379, 18,\
		 "ID", #308, 22,\
		 "Name", #286, 24
	SYMB	TYPE, 380, "TResource", 'T', #362
	SYMB	TYPE, 381, 'X', 12, #1, 30, 0
	SYMB	TYPE, 382, 'n', #381, 129
	SYMB	TYPE, 383, 'P', #382
	SYMB	TYPE, 385, 'n', #384, 130
	SYMB	TYPE, 386, 'P', #385
	SYMB	TYPE, 381, 'X', 12, #1, 30, 3, #386, #16, #383
	SYMB	TYPE, 388, 'n', #387, 129
	SYMB	TYPE, 389, 'P', #388
	SYMB	TYPE, 390, 'X', 12, #1, 30, 1, #386
	SYMB	TYPE, 391, 'n', #390, 129
	SYMB	TYPE, 392, 'P', #391
	SYMB	TYPE, 393, 'X', 12, #1, 30, 1, #386
	SYMB	TYPE, 394, 'n', #393, 129
	SYMB	TYPE, 395, 'P', #394
	SYMB	TYPE, 396, 'X', 12, #1, 30, 2, #386, #16
	SYMB	TYPE, 397, 'n', #396, 129
	SYMB	TYPE, 398, 'P', #397
	SYMB	TYPE, 399, 'X', 12, #1, 30, 1, #386
	SYMB	TYPE, 400, 'n', #399, 129
	SYMB	TYPE, 401, 'P', #400
	SYMB	TYPE, 402, 'X', 12, #16, 30, 1, #386
	SYMB	TYPE, 403, 'n', #402, 129
	SYMB	TYPE, 404, 'P', #403
	SYMB	TYPE, 405, 'X', 12, #1, 30, 2, #386, #16
	SYMB	TYPE, 406, 'n', #405, 129
	SYMB	TYPE, 407, 'P', #406
	SYMB	TYPE, 384, "TThread", 'S', 36,\
		 "ObjectID", #16, 0,\
		 "TThread", #389, 2,\
		 "Execute", #392, 6,\
		 "Terminate", #395, 10,\
		 "Suspend", #398, 14,\
		 "Resume", #401, 18,\
		 "GetPriority", #404, 22,\
		 "SetPriority", #407, 26,\
		 "ID", #263, 30,\
		 "Status", #2, 31,\
		 "Stack", #286, 32
	SYMB	TYPE, 408, "TThread", 'T', #384
	SYMB	TYPE, 410, 'n', #409, 130
	SYMB	TYPE, 411, 'P', #410
	SYMB	TYPE, 409, 'X', 12, #1, 30, 1, #411
	SYMB	TYPE, 413, 'n', #412, 129
	SYMB	TYPE, 414, 'P', #413
	SYMB	TYPE, 415, 'X', 12, #1, 30, 1, #411
	SYMB	TYPE, 416, 'n', #415, 129
	SYMB	TYPE, 417, 'P', #416
	SYMB	TYPE, 418, 'X', 12, #1, 30, 2, #411, #16
	SYMB	TYPE, 419, 'n', #418, 129
	SYMB	TYPE, 420, 'P', #419
	SYMB	TYPE, 421, 'X', 12, #16, 30, 1, #411
	SYMB	TYPE, 422, 'n', #421, 129
	SYMB	TYPE, 423, 'P', #422
	SYMB	TYPE, 424, 'X', 12, #1, 30, 2, #411, #16
	SYMB	TYPE, 425, 'n', #424, 129
	SYMB	TYPE, 426, 'P', #425
	SYMB	TYPE, 427, 'n', #309, 130
	SYMB	TYPE, 428, 'P', #427
	SYMB	TYPE, 409, "TTimer", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TTimer", #414, 2,\
		 "_TTimer", #417, 6,\
		 "SetPeriod", #420, 10,\
		 "GetPeriod", #423, 14,\
		 "Tick", #426, 18,\
		 "TimeOut", #346, 22,\
		 "Period", #4, 26,\
		 "Handle", #428, 28
	SYMB	TYPE, 429, "TTimer", 'T', #409
	SYMB	TYPE, 431, 'n', #430, 130
	SYMB	TYPE, 432, 'P', #431
	SYMB	TYPE, 430, 'X', 12, #1, 30, 3, #432, #16, #16
	SYMB	TYPE, 434, 'n', #433, 129
	SYMB	TYPE, 435, 'P', #434
	SYMB	TYPE, 436, 'X', 12, #1, 30, 1, #432
	SYMB	TYPE, 437, 'n', #436, 129
	SYMB	TYPE, 438, 'P', #437
	SYMB	TYPE, 439, 'X', 12, #286, 30, 2, #432, #288
	SYMB	TYPE, 440, 'n', #439, 129
	SYMB	TYPE, 441, 'P', #440
	SYMB	TYPE, 442, 'X', 12, #1, 30, 2, #432, #288
	SYMB	TYPE, 443, 'n', #442, 129
	SYMB	TYPE, 444, 'P', #443
	SYMB	TYPE, 430, "TStream", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TStream", #435, 2,\
		 "_TStream", #438, 6,\
		 "Get", #441, 10,\
		 "Put", #444, 14,\
		 "ID", #305, 18,\
		 "Width", #16, 20,\
		 "Depth", #16, 22,\
		 "Handle", #286, 24
	SYMB	TYPE, 445, "TStream", 'T', #430
	SYMB	ENDF
	SYMB	ENDF
; bb.c       35	#include "instru.h"
	SYMB	FILE, "instru.h"
	SYMB	FILE, "nv_drv.h"
	SYMB	TYPE, 446, "NvPointer", 'T', #18
	SYMB	ENDF
	SYMB	FILE, "genlock.h"
	SYMB	TYPE, 447, 'S', 6,\
		 "System", #3, 0,\
		 "Delay", #7, 2
	SYMB	TYPE, 448, "GenlockObject", 'T', #447
	SYMB	ENDF
	SYMB	FILE, "bb.h"
	SYMB	ENDF
	SYMB	FILE, "cbar.h"
	SYMB	TYPE, 449, 'S', 12,\
		 "System", #3, 0,\
		 "Pattern", #18, 2,\
		 "Delay", #7, 4,\
		 "ScHPhase", #16, 8,\
		 "EmbAudioSignal", #3, 10
	SYMB	TYPE, 450, "CBObject", 'T', #449
	SYMB	ENDF
	SYMB	FILE, "audio.h"
	SYMB	TYPE, 451, 'S', 14,\
		 "System", #16, 0,\
		 "Signal", #16, 2,\
		 "Level", #16, 4,\
		 "Timing", #10, 6,\
		 "Frequency", #16, 10,\
		 "Click", #16, 12
	SYMB	TYPE, 452, "AudioObject", 'T', #451
	SYMB	ENDF
	SYMB	TYPE, 453, 'S', 32,\
		 "Date", #7, 0,\
		 "DACFactDate", #7, 4,\
		 "DACUserDate", #7, 8,\
		 "DACFactValue", #18, 12,\
		 "DACUserValue", #18, 14,\
		 "HPHZeroG", #7, 16,\
		 "PhaseG", #7, 20,\
		 "HPHZeroM", #7, 24,\
		 "PhaseM", #7, 28
	SYMB	TYPE, 454, "GenlockCalibrationObject", 'T', #453
	SYMB	TYPE, 455, 'S', 20,\
		 "Date", #7, 0,\
		 "PhaseG", #7, 4,\
		 "ScHPhaseG", #18, 8,\
		 "PhaseM", #7, 10,\
		 "ScHPhaseM", #18, 14,\
		 "DACGain", #3, 16,\
		 "DACOffset", #3, 17,\
		 "DACLevel", #3, 18
	SYMB	TYPE, 456, "BBCalibrationObject", 'T', #455
	SYMB	TYPE, 457, 'S', 20,\
		 "Date", #7, 0,\
		 "PhaseG", #7, 4,\
		 "ScHPhaseG", #3, 8,\
		 "PhaseM", #7, 10,\
		 "ScHPhaseM", #3, 14,\
		 "GainG", #3, 15,\
		 "ChromaGainG", #3, 16,\
		 "GainM", #3, 17,\
		 "ChromaGainM", #3, 18
	SYMB	TYPE, 458, "CBCalibrationObject", 'T', #457
	SYMB	TYPE, 459, 'S', 6,\
		 "Date", #7, 0,\
		 "AnalogLeftChannel", #3, 4,\
		 "AnalogRightChannel", #3, 5
	SYMB	TYPE, 460, "AudioCalibrationObject", 'T', #459
	SYMB	TYPE, 461, 'Z', #259, 2
	SYMB	TYPE, 463, 'Z', #452, 1
	SYMB	TYPE, 465, 'S', 74,\
		 "ActivePreset", #16, 0,\
		 "GenlockSetup", #448, 2,\
		 "BBSetup", #461, 8,\
		 "CBSetup", #450, 32,\
		 "AudioOutput", #16, 44,\
		 "AudioSetup", #463, 46
	SYMB	TYPE, 466, "SettingsObject", 'T', #465
	SYMB	TYPE, 467, 'Z', #2, 32
	SYMB	TYPE, 469, 'Z', #2, 8
	SYMB	TYPE, 471, 'Z', #2, 12
	SYMB	TYPE, 473, 'Z', #456, 2
	SYMB	TYPE, 475, 'S', 224,\
		 "Company", #467, 0,\
		 "Type", #467, 33,\
		 "KUNumber", #469, 66,\
		 "SWRevision", #469, 75,\
		 "NC12", #471, 84,\
		 "ResetSystem", #3, 97,\
		 "ProdDate", #7, 98,\
		 "UpdateDate", #7, 102,\
		 "GenlockCalibration", #454, 106,\
		 "BBCalibration", #473, 138,\
		 "CBCalibration", #458, 198,\
		 "AudioCalibration", #460, 218
	SYMB	TYPE, 476, "CalibrationObject", 'T', #475
	SYMB	ENDF
; bb.c       36	
; bb.c       37	code char BBOutputCmd[3] = { 'H', 'J', 'K' };
BB_RO	SEGMENT	HCODE ROMDATA
	RSEG	BB_RO
	SYMB	TYPE, 477, 'Z', #2, 2
	SYMB	IDEN, "BBOutputCmd", _BBOutputCmd, #477, 129, 0
	SYMB	ALAB, _BBOutputCmd, #477
	PUBLIC	_BBOutputCmd
_BBOutputCmd:
; bb.c       38	code char BBSystemCmd[4] = { 'G', 'K', 'M', 'L' };
	DB	048H,04AH,04BH
	SYMB	TYPE, 479, 'Z', #2, 3
	SYMB	IDEN, "BBSystemCmd", _BBSystemCmd, #479, 129, 0
	SYMB	ALAB, _BBSystemCmd, #479
	PUBLIC	_BBSystemCmd
_BBSystemCmd:
; bb.c       39	
; bb.c       40	BBObject BBSetup[NoOfBBOutputs];
; bb.c       41	
; bb.c       42	volatile int BBControlPort _at(0x70008); 		// Port defined in SPG/AUDIO PLD
; bb.c       43	
; bb.c       44	/**************************************************************************/
; bb.c       45	/* BBDefaults																								     	CBAR.C	*/
; bb.c       46	/*																																				*/
; bb.c       47	/* Author:	 Kim Engedahl, DEV, 000606																		*/
; bb.c       48	/* Revised:	 000617, KEn, DEV     																				*/
; bb.c       49	/*																																				*/
; bb.c       50	/* Function:   																														*/
; bb.c       51	/* Remarks:																																*/
; bb.c       52	/* Returns:																																*/
; bb.c       53	/* Updates:																																*/
; bb.c       54	/**************************************************************************/
; bb.c       55	void BBDefaults( void)
; bb.c       56	{
	DB	047H,04BH,04DH,04CH
BB_PR	SEGMENT	HCODE
	RSEG	BB_PR
	ALIGN	1
	SYMB	LINE, 56
	PUBLIC	_BBDefaults
_BBDefaults:
	SYMB	TYPE, 481, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBDefaults", _BBDefaults, #481, 0, 0, 48
	SYMB	ALAB, _BBDefaults, #481
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "i", -1, #16, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
; bb.c       57		int i;
; bb.c       58	
; bb.c       59		for ( i = BBOutput1; i <= BBOutput3; i++)
	SYMB	LINE, 59
	MOV.W	R3,#00H
	SYMB	LTIM, "i", 14, 0, 205
_3:
; bb.c       60		{
; bb.c       61			Settings.BBSetup[i].System = BBSetup[i].System = Calibration.ResetSystem;
	SYMB	LINE, 61
	MOV.B	ES,#SEG( _Calibration+97 )
	MOV.W	R0,#SOF( _Calibration+97 )
	MOV.B	R0L,[R0]
	MOV.W	R2,R3
	ASL.W	R2,#03H
	MOV.W	R4,R2
	MOVS.W	R5,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	[R4+SOF( _BBSetup )],R0L
	MOV.B	ES,#SEG( _Settings+8 )
	MOV.B	[R4+SOF( _Settings+8 )],R0L
; bb.c       62			Settings.BBSetup[i].Delay = BBSetup[i].Delay = 0;
	SYMB	LINE, 62
	MOV.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup+2 )
	MOV.W	[R0+SOF( _BBSetup+2 )],#00H
	MOV.W	[R0+SOF( _BBSetup+4 )],#00H
	MOV.B	ES,#SEG( _Settings+10 )
	MOV.W	[R0+SOF( _Settings+10 )],#00H
	MOV.W	[R0+SOF( _Settings+12 )],#00H
; bb.c       63			Settings.BBSetup[i].ScHPhase = BBSetup[i].ScHPhase = 0;
	SYMB	LINE, 63
	MOV.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup+6 )
	MOV.W	[R0+SOF( _BBSetup+6 )],#00H
	MOV.B	ES,#SEG( _Settings+14 )
	MOV.W	[R0+SOF( _Settings+14 )],#00H
	SYMB	LINE, 59
	ADDS.W	R3,#01H
	SYMB	LTIM, "i", 14, 0, 77
	SYMB	LTIM, "i", 14, 0, 205
	CMP.W	R3,#02H
	BLE	_3
; bb.c       64		}
; bb.c       65	
; bb.c       66		NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 66
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	SYMB	LTIM, "i", 14, 0, 77
	CALL	_NV_Store
; bb.c       67	}
	SYMB	LINE, 67
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; bb.c       68	
; bb.c       69	/**************************************************************************/
; bb.c       70	/* BBInit																											       BB.C	*/
; bb.c       71	/*																																				*/
; bb.c       72	/* Author:	 Kim Engedahl, DEV, 000402																		*/
; bb.c       73	/* Revised:	 000914, KEn, DEV     																				*/
; bb.c       74	/*																																				*/
; bb.c       75	/* Function:   																														*/
; bb.c       76	/* Remarks:																																*/
; bb.c       77	/* Returns:																																*/
; bb.c       78	/* Updates:																																*/
; bb.c       79	/**************************************************************************/
; bb.c       80	int BBInit( void)
; bb.c       81	{
	ALIGN	1
	SYMB	LINE, 81
	PUBLIC	_BBInit
_BBInit:
	SYMB	TYPE, 482, 'X', 12, #16, 30, 0
	SYMB	GFUN, "BBInit", _BBInit, #482, 0, 0, 112
	SYMB	ALAB, _BBInit, #482
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#0CH
	SYMB	SOFF, 18
	SYMB	IDEN, "cmd", -1, #2, 130, 5
	SYMB	LTIM, "cmd", -1, 0, 69
	SYMB	IDEN, "i", -1, #16, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
	SYMB	TYPE, 483, 'n', #2, 129
	SYMB	TYPE, 484, 'P', #483
	SYMB	IDEN, "__#STR0006S", -1, #484, 129, 5
	SYMB	LTIM, "__#STR0006S", -1, 0, 69
	SYMB	IDEN, "__#STR0007S", -1, #484, 129, 5
	SYMB	LTIM, "__#STR0007S", -1, 0, 69
; bb.c       82		char cmd;
; bb.c       83		int i;
; bb.c       84	
; bb.c       85		for ( i = BBOutput1; i <= BBOutput3; i++)
	SYMB	LINE, 85
	MOV.W	R2,#00H
	MOV.W	R1,#SEG( _BBOutputCmd )
	MOV.W	R0,#SOF( _BBOutputCmd )
	SYMB	LTIM, "__#STR0006S", 3, 0, 205
_12:
; bb.c       86		{
; bb.c       87			cmd = BBOutputCmd[i];
	SYMB	LINE, 87
	MOV.W	[R7+8],R1
	MOV.W	[R7+6],R0
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	SYMB	LTIM, "__#STR0006S", 3, 0, 77
	SYMB	LTIM, "__#STR0006S", -12, 130, 197
	SYMB	LTIM, "cmd", 4, 0, 205
; bb.c       88	
; bb.c       89			sio0SndCommand( 20, BB_V24_address, "%cX%lu;", cmd, Calibration.BBCalibration[i].PhaseG);
	SYMB	LINE, 89
	MOV.B	R6L,R1L
	SEXT.B	R6H
	MOV.W	R0,#014H
	MOV.W	[R7+10],R2
	MULU.W	R0,R2
	MOV.W	R4,R0
	MOVS.W	R1,#00H
	SYMB	LTIM, "cmd", 4, 0, 77
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.B	ES,#SEG( _Calibration+142 )
	MOV.W	R1,[R0+SOF( _Calibration+144 )]
	MOV.W	R0,[R0+SOF( _Calibration+142 )]
	PUSH.W	R0, R1
	SYMB	SOFF, 22
	MOV.W	R0,R6
	PUSH.W	R0
	SYMB	SOFF, 24
	MOV.W	R1,#SEG( _5 )
	MOV.W	R0,#SOF( _5 )
	PUSH.W	R0, R1
	SYMB	SOFF, 28
	MOV.W	R1,#034H
	MOV.W	R0,#014H
	CALL	_sio0SndCommand
	ADD.W	R7,#0AH
	SYMB	SOFF, 18
; bb.c       90			sio0SndCommand( 20, BB_V24_address, "%cT%u;", cmd, Calibration.BBCalibration[i].ScHPhaseG);
	SYMB	LINE, 90
	MOV.W	[R7+4],R4
	MOVS.W	R5,#00H
	MOV.B	ES,#SEG( _Calibration+146 )
	MOV.W	R0,[R4+SOF( _Calibration+146 )]
	PUSH.W	R0
	SYMB	SOFF, 20
	MOV.W	R0,R6
	PUSH.W	R0
	SYMB	SOFF, 22
	MOV.W	R1,#SEG( _6 )
	MOV.W	R0,#SOF( _6 )
	PUSH.W	R0, R1
	SYMB	SOFF, 26
	MOV.W	R1,#034H
	MOV.W	R0,#014H
	CALL	_sio0SndCommand
	ADD.W	R7,#08H
	SYMB	SOFF, 18
; bb.c       91	
; bb.c       92			sio0SndCommand( 20, BB_V24_address, "%cY%lu;", cmd, Calibration.BBCalibration[i].PhaseM);
	SYMB	LINE, 92
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	MOV.B	ES,#SEG( _Calibration+148 )
	MOV.W	R1,[R0+SOF( _Calibration+150 )]
	MOV.W	R0,[R0+SOF( _Calibration+148 )]
	PUSH.W	R0, R1
	SYMB	SOFF, 22
	MOV.W	R0,R6
	PUSH.W	R0
	SYMB	SOFF, 24
	MOV.W	R1,#SEG( _7 )
	MOV.W	R0,#SOF( _7 )
	PUSH.W	R0, R1
	SYMB	SOFF, 28
	MOV.W	R1,#034H
	MOV.W	R0,#014H
	CALL	_sio0SndCommand
	ADD.W	R7,#0AH
	SYMB	SOFF, 18
; bb.c       93			sio0SndCommand( 20, BB_V24_address, "%cU%u;", cmd, Calibration.BBCalibration[i].ScHPhaseM);
	SYMB	LINE, 93
	MOV.B	ES,#SEG( _Calibration+152 )
	MOV.W	R0,[R4+SOF( _Calibration+152 )]
	PUSH.W	R0
	SYMB	SOFF, 20
	MOV.W	R0,R6
	PUSH.W	R0
	SYMB	SOFF, 22
	MOV.W	R1,#SEG( _8 )
	MOV.W	R0,#SOF( _8 )
	PUSH.W	R0, R1
	SYMB	SOFF, 26
	MOV.W	R1,#034H
	MOV.W	R0,#014H
	CALL	_sio0SndCommand
	ADD.W	R7,#08H
	SYMB	SOFF, 18
; bb.c       94	
; bb.c       95			sio0SndCommand( 20, BB_V24_address, "%cE%u;", cmd, Calibration.BBCalibration[i].DACGain);
	SYMB	LINE, 95
	MOV.W	R0,[R7+4]
	MOV.W	R4,R0
	MOVS.W	R5,#00H
	MOV.B	ES,#SEG( _Calibration+154 )
	MOV.B	R0L,[R4+SOF( _Calibration+154 )]
	MOVS.B	R0H,#00H
	PUSH.W	R0
	SYMB	SOFF, 20
	MOV.W	R0,R6
	PUSH.W	R0
	SYMB	SOFF, 22
	MOV.W	R1,#SEG( _9 )
	MOV.W	R0,#SOF( _9 )
	PUSH.W	R0, R1
	SYMB	SOFF, 26
	MOV.W	R1,#034H
	MOV.W	R0,#014H
	CALL	_sio0SndCommand
	ADD.W	R7,#08H
	SYMB	SOFF, 18
; bb.c       96			sio0SndCommand( 20, BB_V24_address, "%cC%u;", cmd, Calibration.BBCalibration[i].DACOffset);
	SYMB	LINE, 96
	MOV.B	ES,#SEG( _Calibration+155 )
	MOV.B	R0L,[R4+SOF( _Calibration+155 )]
	MOVS.B	R0H,#00H
	PUSH.W	R0
	SYMB	SOFF, 20
	MOV.W	R0,R6
	PUSH.W	R0
	SYMB	SOFF, 22
	MOV.W	R1,#SEG( _10 )
	MOV.W	R0,#SOF( _10 )
	PUSH.W	R0, R1
	SYMB	SOFF, 26
	MOV.W	R1,#034H
	MOV.W	R0,#014H
	CALL	_sio0SndCommand
	ADD.W	R7,#08H
	SYMB	SOFF, 18
; bb.c       97			sio0SndCommand( 20, BB_V24_address, "%cD%u;", cmd, Calibration.BBCalibration[i].DACLevel);
	SYMB	LINE, 97
	MOV.B	ES,#SEG( _Calibration+156 )
	MOV.B	R0L,[R4+SOF( _Calibration+156 )]
	MOVS.B	R0H,#00H
	PUSH.W	R0
	SYMB	SOFF, 20
	PUSH.W	R6
	SYMB	SOFF, 22
	MOV.W	R1,#SEG( _11 )
	MOV.W	R0,#SOF( _11 )
	PUSH.W	R0, R1
	SYMB	SOFF, 26
	MOV.W	R0,#014H
	MOV.W	R1,#034H
	CALL	_sio0SndCommand
	ADD.W	R7,#08H
	SYMB	SOFF, 18
; bb.c       98	
; bb.c       99			BBSetup[i].System = Settings.BBSetup[i].System;
	SYMB	LINE, 99
	MOV.W	R2,[R7+10]
	ASL.W	R2,#03H
	MOV.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Settings+8 )
	MOV.B	R3L,[R0+SOF( _Settings+8 )]
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	[R0+SOF( _BBSetup )],R3L
; bb.c      100			BBSetup[i].Delay = Settings.BBSetup[i].Delay;
	SYMB	LINE, 100
	MOV.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Settings+10 )
	MOV.W	R4,[R0+SOF( _Settings+10 )]
	MOV.W	R5,[R0+SOF( _Settings+12 )]
	MOV.B	ES,#SEG( _BBSetup+2 )
	MOV.W	[R0+SOF( _BBSetup+2 )],R4
	MOV.W	[R0+SOF( _BBSetup+4 )],R5
; bb.c      101			BBSetup[i].ScHPhase = Settings.BBSetup[i].ScHPhase;
	SYMB	LINE, 101
	MOV.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Settings+14 )
	MOV.W	R2,[R0+SOF( _Settings+14 )]
	MOV.B	ES,#SEG( _BBSetup+6 )
	MOV.W	[R0+SOF( _BBSetup+6 )],R2
	SYMB	LINE, 85
	MOV.W	R1,[R7+8]
	MOV.W	R0,[R7+6]
	ADD.W	R0,#01H
	ADDC.W	R1,#00H
	SYMB	LTIM, "__#STR0006S", -12, 130, 69
	SYMB	LTIM, "__#STR0006S", 3, 0, 205
	SYMB	LTIM, "__#STR0006S", 3, 0, 77
	SYMB	LTIM, "__#STR0006S", 3, 0, 205
	MOV.W	R2,[R7+10]
	ADDS.W	R2,#01H
	CMP.W	R1,#SEG( _BBOutputCmd+3 )
	BNE	_14
	CMP.W	R0,#SOF( _BBOutputCmd+3 )
_14:
	BCS	_12
; bb.c      102		}
; bb.c      103	
; bb.c      104		return( 0);
	SYMB	LINE, 104
	MOV.W	R0,#00H
	SYMB	LTIM, "__#STR0006S", 3, 0, 77
; bb.c      105	}
	SYMB	LINE, 105
	ADD.W	R7,#0CH
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; bb.c      106	
; bb.c      107	/**************************************************************************/
; bb.c      108	/* BBVersion					 																				       BB.C	*/
; bb.c      109	/*																																				*/
; bb.c      110	/* Author:	 Kim Engedahl, DEV, 000504																		*/
; bb.c      111	/* Revised:	 000604, KEn, DEV     																				*/
; bb.c      112	/*																																				*/
; bb.c      113	/* Function:   																														*/
; bb.c      114	/* Remarks:																																*/
; bb.c      115	/* Returns:																																*/
; bb.c      116	/* Updates:																																*/
; bb.c      117	/**************************************************************************/
; bb.c      118	int BBVersion( char *result)
; bb.c      119	{
	ALIGN	1
	SYMB	LINE, 119
	PUBLIC	_BBVersion
_BBVersion:
	SYMB	TYPE, 485, 'X', 12, #16, 30, 1, #286
	SYMB	GFUN, "BBVersion", _BBVersion, #485, 0, 0, 0
	SYMB	ALAB, _BBVersion, #485
	SYMB	LTIM, "result", 3, 0, 2253
	SYMB	IDEN, "result", 3, #286, 0, 2061
; bb.c      120		return( sio0SndRequest( 12, BB_V24_address, result, "HI?"));
	SYMB	LINE, 120
	MOV.W	R3,#SEG( _15 )
	MOV.W	R2,#SOF( _15 )
	PUSH.W	R2, R3
	SYMB	SOFF, 4
	MOV.W	R3,R1
	MOV.W	R2,R0
	MOV.W	R0,#0CH
	MOV.W	R1,#034H
	CALL	_sio0SndRequest
	ADDS.W	R7,#04H
	SYMB	SOFF, 0
	SYMB	LTIM, "result", 3, 0, 2125
	SYMB	LTIM, "result", 11, 0, 2253
	SYMB	LTIM, "result", 11, 0, 2125
; bb.c      121	}
	SYMB	LINE, 121
	RET
	SYMB	EFUN
; bb.c      122	
; bb.c      123	/**************************************************************************/
; bb.c      124	/* BBUpdate																										       BB.C	*/
; bb.c      125	/*																																				*/
; bb.c      126	/* Author:	 Kim Engedahl, DEV, 000413																		*/
; bb.c      127	/* Revised:	 000606, KEn, DEV     																				*/
; bb.c      128	/*																																				*/
; bb.c      129	/* Function:   																														*/
; bb.c      130	/* Remarks:																																*/
; bb.c      131	/* Returns:																																*/
; bb.c      132	/* Updates:																																*/
; bb.c      133	/**************************************************************************/
; bb.c      134	int BBUpdate( void)
; bb.c      135	{
	ALIGN	1
	SYMB	LINE, 135
	PUBLIC	_BBUpdate
_BBUpdate:
	SYMB	TYPE, 486, 'X', 12, #16, 30, 0
	SYMB	GFUN, "BBUpdate", _BBUpdate, #486, 0, 0, 48
	SYMB	ALAB, _BBUpdate, #486
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "i", -1, #16, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
; bb.c      136		int i;
; bb.c      137	
; bb.c      138		for ( i = BBOutput1; i <= BBOutput3; i++)
	SYMB	LINE, 138
	MOV.W	R4,#00H
	SYMB	LTIM, "i", 18, 0, 205
_16:
; bb.c      139		{
; bb.c      140			SetBBSystem( i, BBSetup[i].System);			// SetBBSystem ALSO sets the delay
	SYMB	LINE, 140
	MOV.W	R5,R4
	ASL.W	R5,#03H
	MOV.W	R0,R5
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MOV.B	R1L,R0L
	MOVS.B	R1H,#00H
	MOV.W	R0,R4
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 2, 0, 205
	CALL	_SetBBSystem
	SYMB	LTIM, "i", 2, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
; bb.c      141			SetBBScHPhase( i, BBSetup[i].ScHPhase);
	SYMB	LINE, 141
	MOV.W	R0,R5
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup+6 )
	MOV.W	R1,[R0+SOF( _BBSetup+6 )]
	MOV.W	R0,R4
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 2, 0, 205
	CALL	_SetBBScHPhase
	SYMB	LTIM, "i", 2, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
	SYMB	LINE, 138
	ADDS.W	R4,#01H
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
	CMP.W	R4,#02H
	BLE	_16
; bb.c      142		}
; bb.c      143	
; bb.c      144		return( OK);
	SYMB	LINE, 144
	MOV.W	R0,#0FFFFH
; bb.c      145	}
	SYMB	LINE, 145
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	EFUN
; bb.c      146	
; bb.c      147	/**************************************************************************/
; bb.c      148	/* SetBBSystem																								       BB.C	*/
; bb.c      149	/*																																				*/
; bb.c      150	/* Author:	 Kim Engedahl, DEV, 000331																		*/
; bb.c      151	/* Revised:	 000731, KEn, DEV     																				*/
; bb.c      152	/*																																				*/
; bb.c      153	/* Function:   																														*/
; bb.c      154	/* Remarks:	 Due to an errorneous BB SW the ScHPhase MUST be transmitted	*/
; bb.c      155	/*					 when changing system.																				*/
; bb.c      156	/* Returns:																																*/
; bb.c      157	/* Updates:																																*/
; bb.c      158	/**************************************************************************/
; bb.c      159	int SetBBSystem( int output, int system)
; bb.c      160	{
	ALIGN	1
	SYMB	LINE, 160
	PUBLIC	_SetBBSystem
_SetBBSystem:
	SYMB	TYPE, 487, 'X', 12, #16, 30, 2, #16, #16
	SYMB	GFUN, "SetBBSystem", _SetBBSystem, #487, 0, 0, 112
	SYMB	ALAB, _SetBBSystem, #487
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#08H
	SYMB	SOFF, 14
	SYMB	LTIM, "output", 2, 0, 2253
	SYMB	LTIM, "system", 6, 0, 2253
	SYMB	IDEN, "output", 2, #16, 0, 2061
	SYMB	IDEN, "system", 6, #16, 0, 2061
	SYMB	IDEN, "PALLED", -1, #18, 130, 5
	SYMB	LTIM, "PALLED", -1, 0, 69
	SYMB	IDEN, "NTSCLED", -1, #18, 130, 5
	SYMB	LTIM, "NTSCLED", -1, 0, 69
	SYMB	IDEN, "tmp", -1, #6, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; bb.c      161		UI PALLED, NTSCLED;
; bb.c      162		long tmp;
; bb.c      163	
; bb.c      164		Settings.ActivePreset = 0;
	SYMB	LINE, 164
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R2,#SOF( _Settings )
	MOV.W	[R2],#00H
; bb.c      165	
; bb.c      166		Settings.BBSetup[output].System = BBSetup[output].System = system;
	SYMB	LINE, 166
	MOV.W	R2,R1
	MOV.W	[R7+6],R2
	SYMB	LTIM, "system", 6, 0, 2125
	SYMB	LTIM, "system", -8, 130, 2245
	MOV.W	R6,R0
	MOV.W	R5,R6
	ASL.W	R6,#03H
	SYMB	LTIM, "output", 2, 0, 2125
	SYMB	LTIM, "output", 22, 0, 2253
	MOV.W	R0,R6
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	[R0+SOF( _BBSetup )],R2L
	MOV.B	ES,#SEG( _Settings+8 )
	MOV.B	[R0+SOF( _Settings+8 )],R2L
; bb.c      167		NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 167
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	CALL	_NV_Store
; bb.c      168	
; bb.c      169		if ( output == BBOutput1)
	SYMB	LINE, 169
	OR.W	R5,R5
	BNE	_20
; bb.c      170		{
; bb.c      171			PALLED = BB1PALLED;
	SYMB	LINE, 171
	MOV.W	R0,#01H
	SYMB	LTIM, "PALLED", 2, 0, 205
; bb.c      172			NTSCLED = BB1NTSCLED;
	SYMB	LINE, 172
	MOV.W	R4,#02H
	SYMB	LTIM, "NTSCLED", 18, 0, 205
; bb.c      173		}
	SYMB	LINE, 173
	BR	_23
_20:
; bb.c      174		else
; bb.c      175		{
; bb.c      176			if ( output == BBOutput2)
	SYMB	LINE, 176
	CMP.W	R5,#01H
	BNE	_21
; bb.c      177			{
; bb.c      178				PALLED = BB2PALLED;
	SYMB	LINE, 178
	MOV.W	R0,#04H
	SYMB	LTIM, "PALLED", 2, 0, 77
	SYMB	LTIM, "PALLED", 2, 0, 205
; bb.c      179				NTSCLED = BB2NTSCLED;
	SYMB	LINE, 179
	MOV.W	R4,#08H
	SYMB	LTIM, "NTSCLED", 18, 0, 77
	SYMB	LTIM, "NTSCLED", 18, 0, 205
; bb.c      180			}
	SYMB	LINE, 180
	BR	_23
_21:
; bb.c      181			else
; bb.c      182			{
; bb.c      183				PALLED = BB3PALLED;
	SYMB	LINE, 183
	MOV.W	R0,#010H
	SYMB	LTIM, "PALLED", 2, 0, 77
	SYMB	LTIM, "PALLED", 2, 0, 205
; bb.c      184				NTSCLED = BB3NTSCLED;
	SYMB	LINE, 184
	MOV.W	R4,#020H
	SYMB	LTIM, "NTSCLED", 18, 0, 77
	SYMB	LTIM, "NTSCLED", 18, 0, 205
; bb.c      185			}
; bb.c      186		}
	SYMB	LINE, 186
_23:
; bb.c      187	
; bb.c      188		LEDSet( PALLED, system < NTSC_US);
	SYMB	LINE, 188
	CMP.W	[R7+6],#02H
	BGE	_26
	MOVS.W	R1,#01H
	BR	_28
_26:
	MOVS.W	R1,#00H
_28:
	CALL	_LEDSet
	SYMB	LTIM, "PALLED", 2, 0, 77
; bb.c      189		LEDSet( NTSCLED, system >= NTSC_US);
	SYMB	LINE, 189
	CMP.W	[R7+6],#02H
	BLT	_29
	MOVS.W	R1,#01H
	BR	_31
_29:
	MOVS.W	R1,#00H
_31:
	MOV.W	R0,R4
	CALL	_LEDSet
	SYMB	LTIM, "NTSCLED", 18, 0, 77
	SYMB	LTIM, "NTSCLED", 2, 0, 205
	SYMB	LTIM, "NTSCLED", 2, 0, 77
; bb.c      190	
; bb.c      191		sio0SndCommand( 20, BB_V24_address, "%c%c%lu;", BBOutputCmd[output],
; bb.c      192							BBSystemCmd[system], BBSetup[output].Delay);
	SYMB	LINE, 192
	MOV.W	R0,#014H
	MOV.W	R2,R5
	SEXT.W	R3
	MOV.W	R5,#SEG( _BBOutputCmd )
	MOV.W	R4,#SOF( _BBOutputCmd )
	ADD.W	R4,R2
	ADDC.W	R5,R3
	SYMB	LTIM, "output", 22, 0, 2125
	MOV.W	[R7+4],R5
	MOV.W	[R7+2],R4
	MOV.B	CS,R5L
	MOVC.B	R5L,[R4+]
	SEXT.B	R5H
	MOV.W	[R7],R5
	MOV.W	R1,[R7+6]
	MOV.W	R4,R1
	SEXT.W	R5
	SYMB	LTIM, "system", -8, 130, 2117
	SYMB	LTIM, "system", 6, 0, 2253
	MOV.W	R3,#SEG( _BBSystemCmd )
	MOV.W	R2,#SOF( _BBSystemCmd )
	ADD.W	R2,R4
	ADDC.W	R3,R5
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	SEXT.B	R3H
	MOV.W	R4,R6
	MOVS.W	R5,#00H
	MOV.B	ES,#SEG( _BBSetup+2 )
	MOV.W	R5,[R4+SOF( _BBSetup+4 )]
	MOV.W	R4,[R4+SOF( _BBSetup+2 )]
	PUSH.W	R4, R5
	SYMB	SOFF, 18
	PUSH.W	R3
	SYMB	SOFF, 20
	MOV.W	R1,[R7+6]
	SYMB	LTIM, "system", 6, 0, 2125
	PUSH.W	R1
	SYMB	SOFF, 22
	MOV.W	R3,#SEG( _18 )
	MOV.W	R2,#SOF( _18 )
	PUSH.W	R2, R3
	SYMB	SOFF, 26
	MOV.W	R1,#034H
	CALL	_sio0SndCommand
	ADD.W	R7,#0CH
	SYMB	SOFF, 14
; bb.c      193	
; bb.c      194		tmp = BBSetup[output].ScHPhase;
	SYMB	LINE, 194
	MOV.W	R0,R6
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup+6 )
	MOV.W	R0,[R0+SOF( _BBSetup+6 )]
	SEXT.W	R1
	MOV.W	R3,R1
	MOV.W	R2,R0
	SYMB	LTIM, "tmp", 11, 0, 205
; bb.c      195	
; bb.c      196		if ( tmp < 0)												// -1 deg equ. 359 deg a.s.f.
	SYMB	LINE, 196
	CMP.W	R1,#00H
	BGT	_24
	BLT	_32
	CMP.W	R0,#00H
	BCC	_24
_32:
; bb.c      197			tmp += 360;
	SYMB	LINE, 197
	ADD.W	R0,#0168H
	ADDC.W	R1,#00H
	MOV.W	R3,R1
	MOV.W	R2,R0
	SYMB	LTIM, "tmp", 11, 0, 77
	SYMB	LTIM, "tmp", 11, 0, 205
_24:
; bb.c      198	
; bb.c      199		tmp *= 2048;
	SYMB	LINE, 199
	MOV.W	R1,R3
	MOV.W	R0,R2
	ASL.D	R0,#0BH
	SYMB	LTIM, "tmp", 11, 0, 77
	SYMB	LTIM, "tmp", 3, 0, 205
	SYMB	LTIM, "tmp", 3, 0, 77
	SYMB	LTIM, "tmp", 3, 0, 205
; bb.c      200		tmp /= 360;													// tmp = ( ScHPhase*2048)/360;
	SYMB	LINE, 200
	MOV.W	R3,#00H
	MOV.W	R2,#0168H
	FCALL	__SDIVL
	SYMB	LTIM, "tmp", 3, 0, 77
	MOV.W	R3,R1
	MOV.W	R2,R0
	SYMB	LTIM, "tmp", 11, 0, 205
; bb.c      201															
; bb.c      202		return( sio0SndCommand( 12, BB_V24_address, "%cH%u;",
; bb.c      203							 BBOutputCmd[output], ( int) tmp));
	SYMB	LINE, 203
	MOV.W	R0,#0CH
	MOV.W	R5,[R7+4]
	MOV.W	R4,[R7+2]
	MOV.B	CS,R5L
	MOVC.B	R5L,[R4+]
	SEXT.B	R5H
	SYMB	LTIM, "tmp", 11, 0, 77
	PUSH.W	R2
	SYMB	SOFF, 16
	PUSH.W	R5
	SYMB	SOFF, 18
	MOV.W	R3,#SEG( _19 )
	MOV.W	R2,#SOF( _19 )
	PUSH.W	R2, R3
	SYMB	SOFF, 22
	MOV.W	R1,#034H
	CALL	_sio0SndCommand
	ADD.W	R7,#08H
	SYMB	SOFF, 14
; bb.c      204	}
	SYMB	LINE, 204
	ADD.W	R7,#08H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; bb.c      205	
; bb.c      206	/**************************************************************************/
; bb.c      207	/* SetBBDelay																										     BB.C	*/
; bb.c      208	/*																																				*/
; bb.c      209	/* Author:	 Kim Engedahl, DEV, 000331																		*/
; bb.c      210	/* Revised:	 000731, KEn, DEV     																				*/
; bb.c      211	/*																																				*/
; bb.c      212	/* Function:   																														*/
; bb.c      213	/* Remarks:																																*/
; bb.c      214	/* Returns:																																*/
; bb.c      215	/* Updates:																																*/
; bb.c      216	/**************************************************************************/
; bb.c      217	int SetBBDelay( int output, UL delay)
; bb.c      218	{
	ALIGN	1
	SYMB	LINE, 218
	PUBLIC	_SetBBDelay
_SetBBDelay:
	SYMB	TYPE, 488, 'X', 12, #16, 30, 2, #16, #7
	SYMB	GFUN, "SetBBDelay", _SetBBDelay, #488, 0, 0, 112
	SYMB	ALAB, _SetBBDelay, #488
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#0EH
	SYMB	SOFF, 8
	SYMB	LTIM, "output", 2, 0, 2253
	SYMB	LTIM, "delay", 11, 0, 2253
	SYMB	IDEN, "output", 2, #16, 0, 2061
	SYMB	IDEN, "delay", 11, #7, 0, 2061
; bb.c      219		Settings.ActivePreset = 0;
	SYMB	LINE, 219
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R1,#SOF( _Settings )
	MOV.W	[R1],#00H
; bb.c      220	
; bb.c      221		Settings.BBSetup[output].Delay = BBSetup[output].Delay = delay;
	SYMB	LINE, 221
	MOV.W	R6,R0
	MOV.W	R4,R6
	ASL.W	R6,#03H
	SYMB	LTIM, "output", 2, 0, 2125
	SYMB	LTIM, "output", 18, 0, 2253
	MOV.W	R0,R6
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup+2 )
	MOV.W	[R0+SOF( _BBSetup+2 )],R2
	MOV.W	[R0+SOF( _BBSetup+4 )],R3
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	MOV.B	ES,#SEG( _Settings+10 )
	MOV.W	[R0+SOF( _Settings+10 )],R2
	MOV.W	[R0+SOF( _Settings+12 )],R3
	SYMB	LTIM, "delay", 11, 0, 2125
; bb.c      222		NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 222
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	CALL	_NV_Store
; bb.c      223	
; bb.c      224		return( sio0SndCommand( 20, BB_V24_address, "%c%c%lu;", BBOutputCmd[output],
; bb.c      225							BBSystemCmd[BBSetup[output].System], delay));
	SYMB	LINE, 225
	MOV.W	R0,#014H
	MOV.W	R1,#034H
	MOV.W	R4,R4
	SEXT.W	R5
	SYMB	LTIM, "output", 18, 0, 2125
	MOV.W	R3,#SEG( _BBOutputCmd )
	MOV.W	R2,#SOF( _BBOutputCmd )
	ADD.W	R2,R4
	ADDC.W	R3,R5
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	SEXT.B	R3H
	MOV.W	[R7+4],R3
	MOV.W	R2,R6
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R2L,[R2+SOF( _BBSetup )]
	MOV.B	R4L,R2L
	MOVS.B	R4H,#00H
	MOVS.W	R5,#00H
	MOV.W	R3,#SEG( _BBSystemCmd )
	MOV.W	R2,#SOF( _BBSystemCmd )
	ADD.W	R2,R4
	ADDC.W	R3,R5
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	SEXT.B	R3H
	PUSH.W	R3
	SYMB	SOFF, 14
	MOV.W	R2,[R7+6]
	PUSH.W	R2
	SYMB	SOFF, 16
	MOV.W	R3,#SEG( _18 )
	MOV.W	R2,#SOF( _18 )
	PUSH.W	R2, R3
	SYMB	SOFF, 20
	CALL	_sio0SndCommand
	ADD.W	R7,#0CH
	SYMB	SOFF, 8
; bb.c      226	}
	SYMB	LINE, 226
	ADDS.W	R7,#02H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; bb.c      227	
; bb.c      228	/**************************************************************************/
; bb.c      229	/* SetBBScHPhase																									   BB.C	*/
; bb.c      230	/*																																				*/
; bb.c      231	/* Author:	 Kim Engedahl, DEV, 000331																		*/
; bb.c      232	/* Revised:	 000731, KEn, DEV     																				*/
; bb.c      233	/*																																				*/
; bb.c      234	/* Function:   																														*/
; bb.c      235	/* Remarks:																																*/
; bb.c      236	/* Returns:																																*/
; bb.c      237	/* Updates:																																*/
; bb.c      238	/**************************************************************************/
; bb.c      239	int SetBBScHPhase( int output, int schphase)
; bb.c      240	{
	ALIGN	1
	SYMB	LINE, 240
	PUBLIC	_SetBBScHPhase
_SetBBScHPhase:
	SYMB	TYPE, 489, 'X', 12, #16, 30, 2, #16, #16
	SYMB	GFUN, "SetBBScHPhase", _SetBBScHPhase, #489, 0, 0, 112
	SYMB	ALAB, _SetBBScHPhase, #489
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#0AH
	SYMB	SOFF, 12
	SYMB	LTIM, "output", 2, 0, 2253
	SYMB	LTIM, "schphase", 6, 0, 2253
	SYMB	IDEN, "output", 2, #16, 0, 2061
	SYMB	IDEN, "schphase", 6, #16, 0, 2061
	SYMB	IDEN, "tmp", -1, #6, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; bb.c      241		long tmp = ( long) schphase;
	SYMB	LINE, 241
	MOV.W	[R7+4],R1
	MOV.W	R4,R1
	SEXT.W	R5
	SYMB	LTIM, "schphase", 6, 0, 2125
	SYMB	LTIM, "schphase", -8, 130, 2245
	MOV.W	[R7+2],R5
	MOV.W	[R7],R4
	SYMB	LTIM, "tmp", -12, 130, 197
; bb.c      242	
; bb.c      243		Settings.ActivePreset = 0;
	SYMB	LINE, 243
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R1,#SOF( _Settings )
	MOV.W	[R1],#00H
; bb.c      244	
; bb.c      245		Settings.BBSetup[output].ScHPhase = BBSetup[output].ScHPhase = schphase;
	SYMB	LINE, 245
	MOV.W	R6,R0
	ASL.W	R0,#03H
	SYMB	LTIM, "output", 2, 0, 2125
	SYMB	LTIM, "output", 26, 0, 2253
	MOVS.W	R1,#00H
	MOV.W	R2,[R7+4]
	MOV.B	ES,#SEG( _BBSetup+6 )
	MOV.W	[R0+SOF( _BBSetup+6 )],R2
	MOV.W	R2,[R7+4]
	MOV.B	ES,#SEG( _Settings+14 )
	MOV.W	[R0+SOF( _Settings+14 )],R2
; bb.c      246		NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 246
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	CALL	_NV_Store
; bb.c      247	
; bb.c      248		if ( schphase < 0)								// -1 deg equ. 359 deg a.s.f.
	SYMB	LINE, 248
	MOV.W	R0,[R7+4]
	CMP.W	R0,#00H
	SYMB	LTIM, "schphase", -8, 130, 2117
	SYMB	LTIM, "schphase", 2, 0, 2253
	BGE	_33
; bb.c      249			tmp += 360;
	SYMB	LINE, 249
	ADD.W	R4,#0168H
	ADDC.W	R5,#00H
	MOV.W	[R7+2],R5
	MOV.W	[R7],R4
	SYMB	LTIM, "tmp", -12, 130, 69
	SYMB	LTIM, "tmp", -12, 130, 197
_33:
; bb.c      250	
; bb.c      251		tmp *= 2048;
	SYMB	LINE, 251
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	ASL.D	R0,#0BH
	SYMB	LTIM, "schphase", 2, 0, 2125
	SYMB	LTIM, "tmp", -12, 130, 69
	SYMB	LTIM, "tmp", 3, 0, 205
	SYMB	LTIM, "tmp", 3, 0, 77
	SYMB	LTIM, "tmp", 3, 0, 205
; bb.c      252		tmp /= 360;												// tmp = ( ScHPhase*2048)/360;
	SYMB	LINE, 252
	MOV.W	R3,#00H
	MOV.W	R2,#0168H
	FCALL	__SDIVL
	SYMB	LTIM, "tmp", 3, 0, 77
	MOV.W	[R7+4],R1
	MOV.W	[R7+2],R0
	SYMB	LTIM, "tmp", -10, 130, 197
; bb.c      253															
; bb.c      254		return( sio0SndCommand( 12, BB_V24_address, "%cH%u;",
; bb.c      255							 BBOutputCmd[output], ( int) tmp));
	SYMB	LINE, 255
	MOV.W	R0,#0CH
	MOV.W	R1,#034H
	MOV.W	R4,R6
	SEXT.W	R5
	MOV.W	R3,#SEG( _BBOutputCmd )
	MOV.W	R2,#SOF( _BBOutputCmd )
	ADD.W	R2,R4
	ADDC.W	R3,R5
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	SEXT.B	R3H
	MOV.W	R5,[R7+4]
	MOV.W	R4,[R7+2]
	SYMB	LTIM, "tmp", -10, 130, 69
	SYMB	LTIM, "tmp", 19, 0, 205
	SYMB	LTIM, "tmp", 19, 0, 77
	PUSH.W	R4
	SYMB	SOFF, 14
	PUSH.W	R3
	SYMB	SOFF, 16
	MOV.W	R3,#SEG( _19 )
	MOV.W	R2,#SOF( _19 )
	PUSH.W	R2, R3
	SYMB	SOFF, 20
	CALL	_sio0SndCommand
	ADD.W	R7,#08H
	SYMB	SOFF, 12
; bb.c      256	}
	SYMB	LINE, 256
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "output", 26, 0, 2125
	SYMB	EFUN
; bb.c      257	
	SYMB	ENDF

BB_INI_FA	SEGMENT	HDATA INSEGMENT INIT
	RSEG	BB_INI_FA
_18:	DB	025H,063H,025H,063H,025H,06CH,075H,03BH,000H
	SYMB	TYPE, 490, 'X', 12, #16, 30, 4, #16, #16, #286, #1
	SYMB	ALAB, _sio0SndCommand, #490
	EXTRN	HCODE(_sio0SndCommand)
_5:	DB	025H,063H,058H,025H,06CH,075H,03BH,000H
_8:	DB	025H,063H,055H,025H,075H,03BH,000H
_6:	DB	025H,063H,054H,025H,075H,03BH,000H
	SYMB	IDEN, "BBSetup", _BBSetup, #461, 130, 0
	SYMB	ALAB, _BBSetup, #461
BB_CLR_FA	SEGMENT	HDATA INSEGMENT CLEAR
	RSEG	BB_CLR_FA
	PUBLIC	_BBSetup
	ALIGN	1
_BBSetup:	DS	24
	SYMB	TYPE, 491, 'X', 12, #16, 30, 2, #18, #261
	SYMB	ALAB, _LEDSet, #491
	EXTRN	HCODE(_LEDSet)
	RSEG	BB_INI_FA
_9:	DB	025H,063H,045H,025H,075H,03BH,000H
_11:	DB	025H,063H,044H,025H,075H,03BH,000H
_19:	DB	025H,063H,048H,025H,075H,03BH,000H
_7:	DB	025H,063H,059H,025H,06CH,075H,03BH,000H
_10:	DB	025H,063H,043H,025H,075H,03BH,000H
_15:	DB	048H,049H,03FH,000H
	SYMB	IDEN, "BBControlPort", _BBControlPort, #16, 130, 0
	SYMB	ALAB, _BBControlPort, #16
	HSEG AT 070008H
	PUBLIC	_BBControlPort
	ALIGN	1
_BBControlPort:	DS	2
	SYMB	ALAB, _SettingsPtr, #446
	EXTRN	HDATA(_SettingsPtr)
	SYMB	ALAB, _Settings, #466
	EXTRN	HDATA(_Settings)
	SYMB	TYPE, 492, 'X', 12, #16, 30, 3, #288, #446, #16
	SYMB	ALAB, _NV_Store, #492
	EXTRN	HCODE(_NV_Store)
	SYMB	ALAB, _Calibration, #476
	EXTRN	HDATA(_Calibration)
	EXTRN	HCODE(__SDIVL)
	SYMB	TYPE, 493, 'X', 12, #16, 30, 5, #16, #16, #286, #286, #1
	SYMB	ALAB, _sio0SndRequest, #493
	EXTRN	HCODE(_sio0SndRequest)
	EXTRN	DATA(__lc_ub_xvwbuffer)
	EXTRN	DATA(__lc_ue_xvwbuffer)
	CALLS	'BBDefaults', 'NV_Store'
	CALLS	'BBInit', 'sio0SndCommand'
	CALLS	'BBVersion', 'sio0SndRequest'
	CALLS	'BBUpdate', 'SetBBSystem'
	CALLS	'BBUpdate', 'SetBBScHPhase'
	CALLS	'SetBBSystem', 'NV_Store'
	CALLS	'SetBBSystem', 'LEDSet'
	CALLS	'SetBBSystem', 'sio0SndCommand'
	CALLS	'SetBBDelay', 'NV_Store'
	CALLS	'SetBBDelay', 'sio0SndCommand'
	CALLS	'SetBBScHPhase', 'NV_Store'
	CALLS	'SetBBScHPhase', 'sio0SndCommand'
	END
