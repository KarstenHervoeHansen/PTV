XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   1
U:\Pt5201\Design\DDD\SW\Master\Source\MAKE\1_0\temp\xa\bb.src
ADDR   CODE            LINE SOURCELINE
                          1 ; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
                          2 ; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -I..\..\rtxcdef\xa
                          3 ;          -I..\..\rtxc\xa\include -I..\..\code\include\1_0 -I..\..\app_spec\xa
                          4 ;          -Ml -O2 -s
                          6 $NOZPAGE
                          7         NAME    BB
                         11 ; bb.c        1 /****************************************************************************/
                         12 ; bb.c        2 /* MODULE:                                                                  */
                         13 ; bb.c        3 /*  bb.c - Black burst generators                                           */
                         14 ; bb.c        4 /****************************************************************************/
                         15 ; bb.c        5 /* FUNCTIONS:                                                               */
                         16 ; bb.c        6 /*                                                                          */
                         17 ; bb.c        7 /*      void BBDefaults( void)                                                   
                                                                                                                             
                                                                            */      
                         18 ; bb.c        8 /*      int BBInit( void)                                                        
                                                                                                                             
                                                                                                    */      
                         19 ; bb.c        9 /*      int BBVersion( char *result)                                             
                                                                                                                             
                                                            */      
                         20 ; bb.c       10 /*      int BBUpdate( void)                                                      
                                                                                                                             
                                                                                            */
                         21 ; bb.c       11 /*      int SetBBSystem( int output, int system)                                 
                                                                                                                            *
                            /
                         22 ; bb.c       12 /*      int SetBBDelay( int output, UL delay)                                    
                                                                                                                             
                                    */
                         23 ; bb.c       13 /*      int SetBBScHPhase( int output, int schphase)                             
                                                                                                            */
                         24 ; bb.c       14 /*                                                                          */
                         25 ; bb.c       15 /* TASKS:                                                                   */
                         26 ; bb.c       16 /*                                                                          */
                         27 ; bb.c       17 /* NOTES:                                                                   */
                         28 ; bb.c       18 /*                                                                          */
                         29 ; bb.c       19 /****************************************************************************/
                         30 ; bb.c       20 /*
                         31 ; bb.c       21  *   PTV software for PT5201    
                         32 ; bb.c       22  *   Copyright (c) 
                         33 ; bb.c       23  *   ProTeleVision Technologies A/S.
                         34 ; bb.c       24  *   ALL RIGHTS RESERVED
                         35 ; bb.c       25 */
                         36 ; bb.c       26 /****************************************************************************/
                         37 ; bb.c       27 #include <string.h>
                         41 ; bb.c       28 
                         42 ; bb.c       29 #include "define.h"        // Standard PTV defines
                         45 ; bb.c       30 #include "bb.h"
                         53 ; bb.c       31 #include "tables.h"
                         56 ; bb.c       32 #include "led_hw.h"
                         63 ; bb.c       33 #include "sio0drv.h"
                        396 ; bb.c       34 #include "instru.h"
                        494 ; bb.c       35 
                        495 ; bb.c       36 code char BBOutputCmd[3] = { 'H', 'J', 'K' };
000000                  496 BB_RO   SEGMENT HCODE ROMDATA
000000                  497         RSEG    BB_RO
                        501         PUBLIC  _BBOutputCmd
000000                  502 _BBOutputCmd:
                        503 ; bb.c       37 code char BBSystemCmd[4] = { 'G', 'K', 'M', 'L' };
000000 484A4B           504         DB      048H,04AH,04BH
                        508         PUBLIC  _BBSystemCmd
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   2

ADDR   CODE            LINE SOURCELINE
000003                  509 _BBSystemCmd:
                        510 ; bb.c       38 
                        511 ; bb.c       39 BBObject BBSetup[NoOfBBOutputs];
                        512 ; bb.c       40 
                        513 ; bb.c       41 volatile int BBControlPort _at(0x70008);                // Port defined in SPG/AU
                            DIO PLD
                        514 ; bb.c       42 
                        515 ; bb.c       43 /**************************************************************************/
                        516 ; bb.c       44 /* BBDefaults                                                                    
                                                                                                                             
                                                            CBAR.C  */
                        517 ; bb.c       45 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        518 ; bb.c       46 /* Author:       Kim Engedahl, DEV, 000606                                       
                                                                                                                             
                                    */
                        519 ; bb.c       47 /* Revised:      000617, KEn, DEV                                                
                                                                                                                             
                                            */
                        520 ; bb.c       48 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        521 ; bb.c       49 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                        522 ; bb.c       50 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                        523 ; bb.c       51 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                        524 ; bb.c       52 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                        525 ; bb.c       53 /**************************************************************************/
                        526 ; bb.c       54 void BBDefaults( void)
                        527 ; bb.c       55 {
000003 474B4D4C         528         DB      047H,04BH,04DH,04CH
000000                  529 BB_PR   SEGMENT HCODE
000000                  530         RSEG    BB_PR
                        531         ALIGN   1
                        533         PUBLIC  _BBDefaults
000000                  534 _BBDefaults:
000000 0F30             538         PUSH.W  R4, R5
                        542 ; bb.c       56         int i;
                        543 ; bb.c       57 
                        544 ; bb.c       58         for ( i = BBOutput1; i <= BBOutput3; i++)
000002 B930             546         MOV.W   R3,#00H
000004                  548 _3:
                        549 ; bb.c       59         {
                        550 ; bb.c       60                 Settings.BBSetup[i].System = BBSetup[i].System = Calibration.Rese
                            tSystem;
000004 964842rr         552         MOV.B   ES,#SEG( _Calibration+97 )
000008 9908rrrr         553         MOV.W   R0,#SOF( _Calibration+97 )
00000C 8200             554         MOV.B   R0L,[R0]
00000E 8923             555         MOV.W   R2,R3
000010 D923             556         ASL.W   R2,#03H
000012 8942             557         MOV.W   R4,R2
000014 B950             558         MOVS.W  R5,#00H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   3

ADDR   CODE            LINE SOURCELINE
000016 964842rr         559         MOV.B   ES,#SEG( _BBSetup )
00001A 850Crrrr         560         MOV.B   [R4+SOF( _BBSetup )],R0L
00001E 964842rr         561         MOV.B   ES,#SEG( _Settings+8 )
000022 850Crrrr         562         MOV.B   [R4+SOF( _Settings+8 )],R0L
                        563 ; bb.c       61                 Settings.BBSetup[i].Delay = BBSetup[i].Delay = 0;
000026 8902             565         MOV.W   R0,R2
000028 B910             566         MOVS.W  R1,#00H
00002A 964842rr         567         MOV.B   ES,#SEG( _BBSetup+2 )
00002E BD00rrrr         568         MOV.W   [R0+SOF( _BBSetup+2 )],#00H
000032 BD00rrrr         569         MOV.W   [R0+SOF( _BBSetup+4 )],#00H
000036 964842rr         570         MOV.B   ES,#SEG( _Settings+10 )
00003A BD00rrrr         571         MOV.W   [R0+SOF( _Settings+10 )],#00H
00003E BD00rrrr         572         MOV.W   [R0+SOF( _Settings+12 )],#00H
                        573 ; bb.c       62                 Settings.BBSetup[i].ScHPhase = BBSetup[i].ScHPhase = 0;
000042 8902             575         MOV.W   R0,R2
000044 B910             576         MOVS.W  R1,#00H
000046 964842rr         577         MOV.B   ES,#SEG( _BBSetup+6 )
00004A BD00rrrr         578         MOV.W   [R0+SOF( _BBSetup+6 )],#00H
00004E 964842rr         579         MOV.B   ES,#SEG( _Settings+14 )
000052 BD00rrrr         580         MOV.W   [R0+SOF( _Settings+14 )],#00H
000056 A931             582         ADDS.W  R3,#01H
000058 99340002         585         CMP.W   R3,#02H
00005C FDD3             586         BLE     _3
                        587 ; bb.c       63         }
                        588 ; bb.c       64 
                        589 ; bb.c       65         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
00005E 9918rrrr         591         MOV.W   R1,#SEG( _Settings )
000062 9908rrrr         592         MOV.W   R0,#SOF( _Settings )
000066 964842rr         593         MOV.B   ES,#SEG( _SettingsPtr )
00006A 9928rrrr         594         MOV.W   R2,#SOF( _SettingsPtr )
00006E 8A22             595         MOV.W   R2,[R2]
000070 9938004A         596         MOV.W   R3,#04AH
                        598         CALL    _NV_Store
000074 C4rrrrrr        +598 ;       FCALL   _NV_Store
                        599 ; bb.c       66 }
000078 2F30             601         POP.W   R4, R5
00007A D680             603         RET
                        605 ; bb.c       67 
                        606 ; bb.c       68 /**************************************************************************/
                        607 ; bb.c       69 /* BBInit                                                                        
                                                                                                                             
                                                                                   BB.C     */
                        608 ; bb.c       70 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        609 ; bb.c       71 /* Author:       Kim Engedahl, DEV, 000402                                       
                                                                                                                             
                                    */
                        610 ; bb.c       72 /* Revised:      000606, KEn, DEV                                                
                                                                                                                             
                                            */
                        611 ; bb.c       73 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        612 ; bb.c       74 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                        613 ; bb.c       75 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   4

ADDR   CODE            LINE SOURCELINE
                        614 ; bb.c       76 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                        615 ; bb.c       77 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                        616 ; bb.c       78 /**************************************************************************/
                        617 ; bb.c       79 int BBInit( void)
                        618 ; bb.c       80 {
                        619         ALIGN   1
                        621         PUBLIC  _BBInit
00007C                  622 _BBInit:
00007C 0F70             626         PUSH.W  R4, R5, R6
00007E 9972000C         628         SUB.W   R7,#0CH
                        640 ; bb.c       81         char cmd;
                        641 ; bb.c       82         int i;
                        642 ; bb.c       83 
                        643 ; bb.c       84         for ( i = BBOutput1; i <= BBOutput3; i++)
000082 B920             645         MOV.W   R2,#00H
000084 9918rrrr         646         MOV.W   R1,#SEG( _BBOutputCmd )
000088 9908rrrr         647         MOV.W   R0,#SOF( _BBOutputCmd )
00008C                  649 _12:
                        650 ; bb.c       85         {
                        651 ; bb.c       86                 cmd = BBOutputCmd[i];
00008C 8C1F08           653         MOV.W   [R7+8],R1
00008F 8C0F06           654         MOV.W   [R7+6],R0
000092 862C43           655         MOV.B   CS,R1L
000095 8020             656         MOVC.B  R1L,[R0+]
                        660 ; bb.c       87 
                        661 ; bb.c       88                 sio0SndCommand( 20, BB_V24_address, "%cX%ld;", cmd, Calibration.B
                            BCalibration[i].PhaseG);
000097 81C2             663         MOV.B   R6L,R1L
000099 90D9             664         SEXT.B  R6H
00009B 99080014         665         MOV.W   R0,#014H
00009F 8C2F0A           666         MOV.W   [R7+10],R2
0000A2 E402             667         MULU.W  R0,R2
0000A4 8940             668         MOV.W   R4,R0
0000A6 B910             669         MOVS.W  R1,#00H
0000A8 8C1F02           671         MOV.W   [R7+2],R1
0000AB 8A0F             672         MOV.W   [R7],R0
0000AD 964842rr         673         MOV.B   ES,#SEG( _Calibration+142 )
0000B1 8D10rrrr         674         MOV.W   R1,[R0+SOF( _Calibration+144 )]
0000B5 8D00rrrr         675         MOV.W   R0,[R0+SOF( _Calibration+142 )]
0000B9 0F03             676         PUSH.W  R0, R1
0000BB 8906             678         MOV.W   R0,R6
0000BD 0F01             679         PUSH.W  R0
0000BF 9918rrrr         681         MOV.W   R1,#SEG( _5 )
0000C3 9908rrrr         682         MOV.W   R0,#SOF( _5 )
0000C7 0F03             683         PUSH.W  R0, R1
0000C9 99180034         685         MOV.W   R1,#034H
0000CD 99080014         686         MOV.W   R0,#014H
                        687         CALL    _sio0SndCommand
0000D1 C4rrrrrr        +687 ;       FCALL   _sio0SndCommand
0000D5 9970000A         688         ADD.W   R7,#0AH
                        690 ; bb.c       89                 sio0SndCommand( 20, BB_V24_address, "%cT%d;", cmd, Calibration.BB
                            Calibration[i].ScHPhaseG);
0000D9 8C4F04           692         MOV.W   [R7+4],R4
0000DC B950             693         MOVS.W  R5,#00H
0000DE 964842rr         694         MOV.B   ES,#SEG( _Calibration+146 )
0000E2 8D04rrrr         695         MOV.W   R0,[R4+SOF( _Calibration+146 )]
0000E6 0F01             696         PUSH.W  R0
0000E8 8906             698         MOV.W   R0,R6
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   5

ADDR   CODE            LINE SOURCELINE
0000EA 0F01             699         PUSH.W  R0
0000EC 9918rrrr         701         MOV.W   R1,#SEG( _6 )
0000F0 9908rrrr         702         MOV.W   R0,#SOF( _6 )
0000F4 0F03             703         PUSH.W  R0, R1
0000F6 99180034         705         MOV.W   R1,#034H
0000FA 99080014         706         MOV.W   R0,#014H
                        707         CALL    _sio0SndCommand
0000FE C4rrrrrr        +707 ;       FCALL   _sio0SndCommand
000102 99700008         708         ADD.W   R7,#08H
                        710 ; bb.c       90 
                        711 ; bb.c       91                 sio0SndCommand( 20, BB_V24_address, "%cY%ld;", cmd, Calibration.B
                            BCalibration[i].PhaseM);
000106 8C1702           713         MOV.W   R1,[R7+2]
000109 8A07             714         MOV.W   R0,[R7]
00010B 964842rr         715         MOV.B   ES,#SEG( _Calibration+148 )
00010F 8D10rrrr         716         MOV.W   R1,[R0+SOF( _Calibration+150 )]
000113 8D00rrrr         717         MOV.W   R0,[R0+SOF( _Calibration+148 )]
000117 0F03             718         PUSH.W  R0, R1
000119 8906             720         MOV.W   R0,R6
00011B 0F01             721         PUSH.W  R0
00011D 9918rrrr         723         MOV.W   R1,#SEG( _7 )
000121 9908rrrr         724         MOV.W   R0,#SOF( _7 )
000125 0F03             725         PUSH.W  R0, R1
000127 99180034         727         MOV.W   R1,#034H
00012B 99080014         728         MOV.W   R0,#014H
                        729         CALL    _sio0SndCommand
00012F C4rrrrrr        +729 ;       FCALL   _sio0SndCommand
000133 9970000A         730         ADD.W   R7,#0AH
                        732 ; bb.c       92                 sio0SndCommand( 20, BB_V24_address, "%cU%d;", cmd, Calibration.BB
                            Calibration[i].ScHPhaseM);
000137 964842rr         734         MOV.B   ES,#SEG( _Calibration+152 )
00013B 8D04rrrr         735         MOV.W   R0,[R4+SOF( _Calibration+152 )]
00013F 0F01             736         PUSH.W  R0
000141 8906             738         MOV.W   R0,R6
000143 0F01             739         PUSH.W  R0
000145 9918rrrr         741         MOV.W   R1,#SEG( _8 )
000149 9908rrrr         742         MOV.W   R0,#SOF( _8 )
00014D 0F03             743         PUSH.W  R0, R1
00014F 99180034         745         MOV.W   R1,#034H
000153 99080014         746         MOV.W   R0,#014H
                        747         CALL    _sio0SndCommand
000157 C4rrrrrr        +747 ;       FCALL   _sio0SndCommand
00015B 99700008         748         ADD.W   R7,#08H
                        750 ; bb.c       93 
                        751 ; bb.c       94                 sio0SndCommand( 20, BB_V24_address, "%cE%d;", cmd, Calibration.BB
                            Calibration[i].DACGain);
00015F 8C0704           753         MOV.W   R0,[R7+4]
000162 8940             754         MOV.W   R4,R0
000164 B950             755         MOVS.W  R5,#00H
000166 964842rr         756         MOV.B   ES,#SEG( _Calibration+154 )
00016A 8504rrrr         757         MOV.B   R0L,[R4+SOF( _Calibration+154 )]
00016E B110             758         MOVS.B  R0H,#00H
000170 0F01             759         PUSH.W  R0
000172 8906             761         MOV.W   R0,R6
000174 0F01             762         PUSH.W  R0
000176 9918rrrr         764         MOV.W   R1,#SEG( _9 )
00017A 9908rrrr         765         MOV.W   R0,#SOF( _9 )
00017E 0F03             766         PUSH.W  R0, R1
000180 99180034         768         MOV.W   R1,#034H
000184 99080014         769         MOV.W   R0,#014H
                        770         CALL    _sio0SndCommand
000188 C4rrrrrr        +770 ;       FCALL   _sio0SndCommand
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   6

ADDR   CODE            LINE SOURCELINE
00018C 99700008         771         ADD.W   R7,#08H
                        773 ; bb.c       95                 sio0SndCommand( 20, BB_V24_address, "%cC%d;", cmd, Calibration.BB
                            Calibration[i].DACOffset);
000190 964842rr         775         MOV.B   ES,#SEG( _Calibration+155 )
000194 8504rrrr         776         MOV.B   R0L,[R4+SOF( _Calibration+155 )]
000198 B110             777         MOVS.B  R0H,#00H
00019A 0F01             778         PUSH.W  R0
00019C 8906             780         MOV.W   R0,R6
00019E 0F01             781         PUSH.W  R0
0001A0 9918rrrr         783         MOV.W   R1,#SEG( _10 )
0001A4 9908rrrr         784         MOV.W   R0,#SOF( _10 )
0001A8 0F03             785         PUSH.W  R0, R1
0001AA 99180034         787         MOV.W   R1,#034H
0001AE 99080014         788         MOV.W   R0,#014H
                        789         CALL    _sio0SndCommand
0001B2 C4rrrrrr        +789 ;       FCALL   _sio0SndCommand
0001B6 99700008         790         ADD.W   R7,#08H
                        792 ; bb.c       96                 sio0SndCommand( 20, BB_V24_address, "%cD%d;", cmd, Calibration.BB
                            Calibration[i].DACLevel);
0001BA 964842rr         794         MOV.B   ES,#SEG( _Calibration+156 )
0001BE 8504rrrr         795         MOV.B   R0L,[R4+SOF( _Calibration+156 )]
0001C2 B110             796         MOVS.B  R0H,#00H
0001C4 0F01             797         PUSH.W  R0
0001C6 0F40             799         PUSH.W  R6
0001C8 9918rrrr         801         MOV.W   R1,#SEG( _11 )
0001CC 9908rrrr         802         MOV.W   R0,#SOF( _11 )
0001D0 0F03             803         PUSH.W  R0, R1
0001D2 99080014         805         MOV.W   R0,#014H
0001D6 99180034         806         MOV.W   R1,#034H
                        807         CALL    _sio0SndCommand
0001DA C4rrrrrr        +807 ;       FCALL   _sio0SndCommand
0001DE 99700008         808         ADD.W   R7,#08H
                        810 ; bb.c       97 
                        811 ; bb.c       98                 BBSetup[i].System = Settings.BBSetup[i].System;
0001E2 8C270A           813         MOV.W   R2,[R7+10]
0001E5 D923             814         ASL.W   R2,#03H
0001E7 8902             815         MOV.W   R0,R2
0001E9 B910             816         MOVS.W  R1,#00H
0001EB 964842rr         817         MOV.B   ES,#SEG( _Settings+8 )
0001EF 8560rrrr         818         MOV.B   R3L,[R0+SOF( _Settings+8 )]
0001F3 964842rr         819         MOV.B   ES,#SEG( _BBSetup )
0001F7 8568rrrr         820         MOV.B   [R0+SOF( _BBSetup )],R3L
                        821 ; bb.c       99                 BBSetup[i].Delay = Settings.BBSetup[i].Delay;
0001FB 8902             823         MOV.W   R0,R2
0001FD B910             824         MOVS.W  R1,#00H
0001FF 964842rr         825         MOV.B   ES,#SEG( _Settings+10 )
000203 8D40rrrr         826         MOV.W   R4,[R0+SOF( _Settings+10 )]
000207 8D50rrrr         827         MOV.W   R5,[R0+SOF( _Settings+12 )]
00020B 964842rr         828         MOV.B   ES,#SEG( _BBSetup+2 )
00020F 8D48rrrr         829         MOV.W   [R0+SOF( _BBSetup+2 )],R4
000213 8D58rrrr         830         MOV.W   [R0+SOF( _BBSetup+4 )],R5
                        831 ; bb.c      100                 BBSetup[i].ScHPhase = Settings.BBSetup[i].ScHPhase;
000217 8902             833         MOV.W   R0,R2
000219 B910             834         MOVS.W  R1,#00H
00021B 964842rr         835         MOV.B   ES,#SEG( _Settings+14 )
00021F 8D20rrrr         836         MOV.W   R2,[R0+SOF( _Settings+14 )]
000223 964842rr         837         MOV.B   ES,#SEG( _BBSetup+6 )
000227 8D28rrrr         838         MOV.W   [R0+SOF( _BBSetup+6 )],R2
00022B 8C1708           840         MOV.W   R1,[R7+8]
00022E 8C0706           841         MOV.W   R0,[R7+6]
000231 99000001         842         ADD.W   R0,#01H
000235 99110000         843         ADDC.W  R1,#00H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   7

ADDR   CODE            LINE SOURCELINE
000239 8C270A           848         MOV.W   R2,[R7+10]
00023C A921             849         ADDS.W  R2,#01H
00023E 9914rrrr         850         CMP.W   R1,#SEG( _BBOutputCmd+3 )
000242 F202             851         BNE     _14
000244 9904rrrr         852         CMP.W   R0,#SOF( _BBOutputCmd+3 )
000244 9904rrrr         852         CMP.W   R0,#SOF( _BBOutputCmd+3 )
000248                  853 _14:
                        854         BCS     _12
000248 F002            +854 ;       BCC     _LG_4
00024A D5FF20          +854 ;       JMP.L   _12
00024A D5FF2000        +854 ;       JMP.L   _12
00024E                 +854 _LG_4:
                        855 ; bb.c      101         }
                        856 ; bb.c      102 
                        857 ; bb.c      103         return( BBUpdate());
00024E C50014           859         CALL    _BBUpdate
                        861 ; bb.c      104 }
000251 9970000C         863         ADD.W   R7,#0CH
000255 2F70             865         POP.W   R4, R5, R6
000257 D680             867         RET
                        869 ; bb.c      105 
                        870 ; bb.c      106 /**************************************************************************/
                        871 ; bb.c      107 /* BBVersion                                                                     
                                                                                                                             
                                                                   BB.C     */
                        872 ; bb.c      108 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        873 ; bb.c      109 /* Author:       Kim Engedahl, DEV, 000504                                       
                                                                                                                             
                                    */
                        874 ; bb.c      110 /* Revised:      000604, KEn, DEV                                                
                                                                                                                             
                                            */
                        875 ; bb.c      111 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        876 ; bb.c      112 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                        877 ; bb.c      113 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                        878 ; bb.c      114 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                        879 ; bb.c      115 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                        880 ; bb.c      116 /**************************************************************************/
                        881 ; bb.c      117 int BBVersion( char *result)
                        882 ; bb.c      118 {
000259 00               883         ALIGN   1
                        885         PUBLIC  _BBVersion
00025A                  886 _BBVersion:
                        892 ; bb.c      119         return( sio0SndRequest( 12, BB_V24_address, result, "HI?"));
00025A 9938rrrr         894         MOV.W   R3,#SEG( _15 )
00025E 9928rrrr         895         MOV.W   R2,#SOF( _15 )
000262 0F0C             896         PUSH.W  R2, R3
000264 8931             898         MOV.W   R3,R1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   8

ADDR   CODE            LINE SOURCELINE
000266 8920             899         MOV.W   R2,R0
000268 9908000C         900         MOV.W   R0,#0CH
00026C 99180034         901         MOV.W   R1,#034H
                        902         CALL    _sio0SndRequest
000270 C4rrrrrr        +902 ;       FCALL   _sio0SndRequest
000274 A974             903         ADDS.W  R7,#04H
                        908 ; bb.c      120 }
000276 D680             910         RET
                        912 ; bb.c      121 
                        913 ; bb.c      122 /**************************************************************************/
                        914 ; bb.c      123 /* BBUpdate                                                                      
                                                                                                                             
                                                                           BB.C     */
                        915 ; bb.c      124 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        916 ; bb.c      125 /* Author:       Kim Engedahl, DEV, 000413                                       
                                                                                                                             
                                    */
                        917 ; bb.c      126 /* Revised:      000606, KEn, DEV                                                
                                                                                                                             
                                            */
                        918 ; bb.c      127 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        919 ; bb.c      128 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                        920 ; bb.c      129 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                        921 ; bb.c      130 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                        922 ; bb.c      131 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                        923 ; bb.c      132 /**************************************************************************/
                        924 ; bb.c      133 int BBUpdate( void)
                        925 ; bb.c      134 {
                        926         ALIGN   1
                        928         PUBLIC  _BBUpdate
000278                  929 _BBUpdate:
000278 0F30             933         PUSH.W  R4, R5
                        937 ; bb.c      135         int i;
                        938 ; bb.c      136 
                        939 ; bb.c      137         for ( i = BBOutput1; i <= BBOutput3; i++)
00027A B940             941         MOV.W   R4,#00H
00027C                  943 _16:
                        944 ; bb.c      138         {
                        945 ; bb.c      139                 SetBBSystem( i, BBSetup[i].System);                     // SetBBS
                            ystem ALSO sets the delay
00027C 8954             947         MOV.W   R5,R4
00027E D953             948         ASL.W   R5,#03H
000280 8905             949         MOV.W   R0,R5
000282 B910             950         MOVS.W  R1,#00H
000284 964842rr         951         MOV.B   ES,#SEG( _BBSetup )
000288 8500rrrr         952         MOV.B   R0L,[R0+SOF( _BBSetup )]
00028C 8120             953         MOV.B   R1L,R0L
00028E B130             954         MOVS.B  R1H,#00H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   9

ADDR   CODE            LINE SOURCELINE
000290 8904             955         MOV.W   R0,R4
000292 C50011           958         CALL    _SetBBSystem
                        961 ; bb.c      140                 SetBBScHPhase( i, BBSetup[i].ScHPhase);
000295 8905             963         MOV.W   R0,R5
000297 B910             964         MOVS.W  R1,#00H
000299 964842rr         965         MOV.B   ES,#SEG( _BBSetup+6 )
00029D 8D10rrrr         966         MOV.W   R1,[R0+SOF( _BBSetup+6 )]
0002A1 8904             967         MOV.W   R0,R4
0002A3 C50118           970         CALL    _SetBBScHPhase
0002A6 A941             974         ADDS.W  R4,#01H
0002A8 99440002         977         CMP.W   R4,#02H
0002AC FDE7             978         BLE     _16
                        979 ; bb.c      141         }
                        980 ; bb.c      142 
                        981 ; bb.c      143         return( OK);
0002AE 9908FFFF         983         MOV.W   R0,#0FFFFH
                        984 ; bb.c      144 }
0002B2 2F30             986         POP.W   R4, R5
0002B4 D680             988         RET
                        991 ; bb.c      145 
                        992 ; bb.c      146 /**************************************************************************/
                        993 ; bb.c      147 /* SetBBSystem                                                                   
                                                                                                                             
                                                           BB.C     */
                        994 ; bb.c      148 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        995 ; bb.c      149 /* Author:       Kim Engedahl, DEV, 000331                                       
                                                                                                                             
                                    */
                        996 ; bb.c      150 /* Revised:      000626, KEn, DEV                                                
                                                                                                                             
                                            */
                        997 ; bb.c      151 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        998 ; bb.c      152 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                        999 ; bb.c      153 /* Remarks:      Due to an errorneous BB SW the ScHPhase MUST be transmitted    *
                            /
                       1000 ; bb.c      154 /*                                       when changing system.                   
                                                                                                                             
                                                                    */
                       1001 ; bb.c      155 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       1002 ; bb.c      156 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       1003 ; bb.c      157 /**************************************************************************/
                       1004 ; bb.c      158 int SetBBSystem( int output, int system)
                       1005 ; bb.c      159 {
                       1006         ALIGN   1
                       1008         PUBLIC  _SetBBSystem
0002B6                 1009 _SetBBSystem:
0002B6 0F70            1013         PUSH.W  R4, R5, R6
0002B8 A978            1015         ADDS.W  R7,#08H
                       1027 ; bb.c      160         UI PALLED, NTSCLED;
                       1028 ; bb.c      161         long tmp;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  10

ADDR   CODE            LINE SOURCELINE
                       1029 ; bb.c      162 
                       1030 ; bb.c      163         Settings.ActivePreset = 0;
0002BA 964842rr        1032         MOV.B   ES,#SEG( _Settings )
0002BE 9928rrrr        1033         MOV.W   R2,#SOF( _Settings )
0002C2 BA20            1034         MOV.W   [R2],#00H
                       1035 ; bb.c      164 
                       1036 ; bb.c      165         Settings.BBSetup[output].System = BBSetup[output].System = system;
0002C4 8921            1038         MOV.W   R2,R1
0002C6 8C2F06          1039         MOV.W   [R7+6],R2
0002C9 8960            1042         MOV.W   R6,R0
0002CB 8956            1043         MOV.W   R5,R6
0002CD D963            1044         ASL.W   R6,#03H
0002CF 8906            1047         MOV.W   R0,R6
0002D1 B910            1048         MOVS.W  R1,#00H
0002D3 964842rr        1049         MOV.B   ES,#SEG( _BBSetup )
0002D7 8548rrrr        1050         MOV.B   [R0+SOF( _BBSetup )],R2L
0002DB 964842rr        1051         MOV.B   ES,#SEG( _Settings+8 )
0002DF 8548rrrr        1052         MOV.B   [R0+SOF( _Settings+8 )],R2L
                       1053 ; bb.c      166         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
0002E3 9918rrrr        1055         MOV.W   R1,#SEG( _Settings )
0002E7 9908rrrr        1056         MOV.W   R0,#SOF( _Settings )
0002EB 964842rr        1057         MOV.B   ES,#SEG( _SettingsPtr )
0002EF 9928rrrr        1058         MOV.W   R2,#SOF( _SettingsPtr )
0002F3 8A22            1059         MOV.W   R2,[R2]
0002F5 9938004A        1060         MOV.W   R3,#04AH
                       1061         CALL    _NV_Store
0002F9 C4rrrrrr       +1061 ;       FCALL   _NV_Store
                       1062 ; bb.c      167 
                       1063 ; bb.c      168         if ( output == BBOutput1)
0002FD 6955            1065         OR.W    R5,R5
0002FF F204            1066         BNE     _20
                       1067 ; bb.c      169         {
                       1068 ; bb.c      170                 PALLED = BB1PALLED;
000301 B901            1070         MOV.W   R0,#01H
                       1072 ; bb.c      171                 NTSCLED = BB1NTSCLED;
000303 B942            1074         MOV.W   R4,#02H
                       1076 ; bb.c      172         }
000305 FE0C            1078         BR      _23
000305 FE0C00          1078         BR      _23
000308                 1079 _20:
                       1080 ; bb.c      173         else
                       1081 ; bb.c      174         {
                       1082 ; bb.c      175                 if ( output == BBOutput2)
000308 99540001        1084         CMP.W   R5,#01H
00030C F204            1085         BNE     _21
                       1086 ; bb.c      176                 {
                       1087 ; bb.c      177                         PALLED = BB2PALLED;
00030E B904            1089         MOV.W   R0,#04H
                       1092 ; bb.c      178                         NTSCLED = BB2NTSCLED;
000310 99480008        1094         MOV.W   R4,#08H
                       1097 ; bb.c      179                 }
000314 FE04            1099         BR      _23
000314 FE04            1099         BR      _23
000316                 1100 _21:
                       1101 ; bb.c      180                 else
                       1102 ; bb.c      181                 {
                       1103 ; bb.c      182                         PALLED = BB3PALLED;
000316 99080010        1105         MOV.W   R0,#010H
                       1108 ; bb.c      183                         NTSCLED = BB3NTSCLED;
00031A 99480020        1110         MOV.W   R4,#020H
                       1113 ; bb.c      184                 }
                       1114 ; bb.c      185         }
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  11

ADDR   CODE            LINE SOURCELINE
00031E                 1116 _23:
                       1117 ; bb.c      186 
                       1118 ; bb.c      187         LEDSet( PALLED, system < NTSC);
00031E 9C74060002      1120         CMP.W   [R7+6],#02H
000323 FA03            1121         BGE     _26
000325 B911            1122         MOVS.W  R1,#01H
000327 FE02            1123         BR      _28
000327 FE0200          1123         BR      _28
00032A                 1124 _26:
00032A B910            1125         MOVS.W  R1,#00H
00032A B910            1125         MOVS.W  R1,#00H
00032C                 1126 _28:
                       1127         CALL    _LEDSet
00032C C4rrrrrr       +1127 ;       FCALL   _LEDSet
                       1129 ; bb.c      188         LEDSet( NTSCLED, system >= NTSC);
000330 9C74060002      1131         CMP.W   [R7+6],#02H
000335 FB03            1132         BLT     _29
000337 B911            1133         MOVS.W  R1,#01H
000339 FE02            1134         BR      _31
000339 FE0200          1134         BR      _31
00033C                 1135 _29:
00033C B910            1136         MOVS.W  R1,#00H
00033C B910            1136         MOVS.W  R1,#00H
00033E                 1137 _31:
00033E 8904            1138         MOV.W   R0,R4
                       1139         CALL    _LEDSet
000340 C4rrrrrr       +1139 ;       FCALL   _LEDSet
                       1143 ; bb.c      189 
                       1144 ; bb.c      190         sio0SndCommand( 20, BB_V24_address, "%c%c%ld;", BBOutputCmd[output],
                       1145 ; bb.c      191                                                 BBSystemCmd[system], BBSetup[outp
                            ut].Delay);
000344 99080014        1147         MOV.W   R0,#014H
000348 8925            1148         MOV.W   R2,R5
00034A 9839            1149         SEXT.W  R3
00034C 9958rrrr        1150         MOV.W   R5,#SEG( _BBOutputCmd )
000350 9948rrrr        1151         MOV.W   R4,#SOF( _BBOutputCmd )
000354 0942            1152         ADD.W   R4,R2
000356 1953            1153         ADDC.W  R5,R3
000358 8C5F04          1155         MOV.W   [R7+4],R5
00035B 8C4F02          1156         MOV.W   [R7+2],R4
00035E 86AC43          1157         MOV.B   CS,R5L
000361 80A4            1158         MOVC.B  R5L,[R4+]
000363 90B9            1159         SEXT.B  R5H
000365 8A5F            1160         MOV.W   [R7],R5
000367 8C1706          1161         MOV.W   R1,[R7+6]
00036A 8941            1162         MOV.W   R4,R1
00036C 9859            1163         SEXT.W  R5
00036E 9938rrrr        1166         MOV.W   R3,#SEG( _BBSystemCmd )
000372 9928rrrr        1167         MOV.W   R2,#SOF( _BBSystemCmd )
000376 0924            1168         ADD.W   R2,R4
000378 1935            1169         ADDC.W  R3,R5
00037A 866C43          1170         MOV.B   CS,R3L
00037D 8062            1171         MOVC.B  R3L,[R2+]
00037F 9079            1172         SEXT.B  R3H
000381 8946            1173         MOV.W   R4,R6
000383 B950            1174         MOVS.W  R5,#00H
000385 964842rr        1175         MOV.B   ES,#SEG( _BBSetup+2 )
000389 8D54rrrr        1176         MOV.W   R5,[R4+SOF( _BBSetup+4 )]
00038D 8D44rrrr        1177         MOV.W   R4,[R4+SOF( _BBSetup+2 )]
000391 0F30            1178         PUSH.W  R4, R5
000393 0F08            1180         PUSH.W  R3
000395 8C1706          1182         MOV.W   R1,[R7+6]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  12

ADDR   CODE            LINE SOURCELINE
000398 0F02            1184         PUSH.W  R1
00039A 9938rrrr        1186         MOV.W   R3,#SEG( _18 )
00039E 9928rrrr        1187         MOV.W   R2,#SOF( _18 )
0003A2 0F0C            1188         PUSH.W  R2, R3
0003A4 99180034        1190         MOV.W   R1,#034H
                       1191         CALL    _sio0SndCommand
0003A8 C4rrrrrr       +1191 ;       FCALL   _sio0SndCommand
0003AC 9970000C        1192         ADD.W   R7,#0CH
                       1194 ; bb.c      192 
                       1195 ; bb.c      193         tmp = BBSetup[output].ScHPhase;
0003B0 8906            1197         MOV.W   R0,R6
0003B2 B910            1198         MOVS.W  R1,#00H
0003B4 964842rr        1199         MOV.B   ES,#SEG( _BBSetup+6 )
0003B8 8D00rrrr        1200         MOV.W   R0,[R0+SOF( _BBSetup+6 )]
0003BC 9819            1201         SEXT.W  R1
0003BE 8931            1202         MOV.W   R3,R1
0003C0 8920            1203         MOV.W   R2,R0
                       1205 ; bb.c      194 
                       1206 ; bb.c      195         if ( tmp < 0)                                                            
                                                            // -1 deg equ. 359 deg a.s.f.
0003C2 99140000        1208         CMP.W   R1,#00H
0003C6 FC0A            1209         BGT     _24
0003C8 FB03            1210         BLT     _32
0003CA 99040000        1211         CMP.W   R0,#00H
0003CE F006            1212         BCC     _24
0003CE F006            1212         BCC     _24
0003D0                 1213 _32:
                       1214 ; bb.c      196                 tmp += 360;
0003D0 99000168        1216         ADD.W   R0,#0168H
0003D4 99110000        1217         ADDC.W  R1,#00H
0003D8 8931            1218         MOV.W   R3,R1
0003DA 8920            1219         MOV.W   R2,R0
0003DC                 1222 _24:
                       1223 ; bb.c      197 
                       1224 ; bb.c      198         tmp *= 2048;
0003DC 8913            1226         MOV.W   R1,R3
0003DE 8902            1227         MOV.W   R0,R2
0003E0 DD0B            1228         ASL.D   R0,#0BH
                       1233 ; bb.c      199         tmp /= 360;                                                              
                                                                    // tmp = ( ScHPhase*2048)/360;
0003E2 B930            1235         MOV.W   R3,#00H
0003E4 99280168        1236         MOV.W   R2,#0168H
0003E8 C4rrrrrr        1237         FCALL   __SDIVL
0003EC 8931            1239         MOV.W   R3,R1
0003EE 8920            1240         MOV.W   R2,R0
                       1242 ; bb.c      200                                                                                  
                                                            
                       1243 ; bb.c      201         return( sio0SndCommand( 12, BB_V24_address, "%cH%d;",
                       1244 ; bb.c      202                                                  BBOutputCmd[output], ( int) tmp)
                            );
0003F0 9908000C        1246         MOV.W   R0,#0CH
0003F4 8C5704          1247         MOV.W   R5,[R7+4]
0003F7 8C4702          1248         MOV.W   R4,[R7+2]
0003FA 86AC43          1249         MOV.B   CS,R5L
0003FD 80A4            1250         MOVC.B  R5L,[R4+]
0003FF 90B9            1251         SEXT.B  R5H
000401 0F04            1253         PUSH.W  R2
000403 0F20            1255         PUSH.W  R5
000405 9938rrrr        1257         MOV.W   R3,#SEG( _19 )
000409 9928rrrr        1258         MOV.W   R2,#SOF( _19 )
00040D 0F0C            1259         PUSH.W  R2, R3
00040F 99180034        1261         MOV.W   R1,#034H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  13

ADDR   CODE            LINE SOURCELINE
                       1262         CALL    _sio0SndCommand
000413 C4rrrrrr       +1262 ;       FCALL   _sio0SndCommand
000417 99700008        1263         ADD.W   R7,#08H
                       1265 ; bb.c      203 }
00041B 99700008        1267         ADD.W   R7,#08H
00041F 2F70            1269         POP.W   R4, R5, R6
000421 D680            1271         RET
                       1273 ; bb.c      204 
                       1274 ; bb.c      205 /**************************************************************************/
                       1275 ; bb.c      206 /* SetBBDelay                                                                    
                                                                                                                             
                                                                         BB.C       */
                       1276 ; bb.c      207 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1277 ; bb.c      208 /* Author:       Kim Engedahl, DEV, 000331                                       
                                                                                                                             
                                    */
                       1278 ; bb.c      209 /* Revised:      000618, KEn, DEV                                                
                                                                                                                             
                                            */
                       1279 ; bb.c      210 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1280 ; bb.c      211 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       1281 ; bb.c      212 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       1282 ; bb.c      213 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       1283 ; bb.c      214 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       1284 ; bb.c      215 /**************************************************************************/
                       1285 ; bb.c      216 int SetBBDelay( int output, UL delay)
                       1286 ; bb.c      217 {
000423 00              1287         ALIGN   1
                       1289         PUBLIC  _SetBBDelay
000424                 1290 _SetBBDelay:
000424 0F70            1294         PUSH.W  R4, R5, R6
000426 A97E            1296         ADDS.W  R7,#0EH
                       1302 ; bb.c      218         Settings.ActivePreset = 0;
000428 964842rr        1304         MOV.B   ES,#SEG( _Settings )
00042C 9918rrrr        1305         MOV.W   R1,#SOF( _Settings )
000430 BA10            1306         MOV.W   [R1],#00H
                       1307 ; bb.c      219 
                       1308 ; bb.c      220         Settings.BBSetup[output].Delay = BBSetup[output].Delay = delay;
000432 8960            1310         MOV.W   R6,R0
000434 8946            1311         MOV.W   R4,R6
000436 D963            1312         ASL.W   R6,#03H
000438 8906            1315         MOV.W   R0,R6
00043A B910            1316         MOVS.W  R1,#00H
00043C 964842rr        1317         MOV.B   ES,#SEG( _BBSetup+2 )
000440 8D28rrrr        1318         MOV.W   [R0+SOF( _BBSetup+2 )],R2
000444 8D38rrrr        1319         MOV.W   [R0+SOF( _BBSetup+4 )],R3
000448 0F0C            1320         PUSH.W  R2, R3
00044A 964842rr        1322         MOV.B   ES,#SEG( _Settings+10 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  14

ADDR   CODE            LINE SOURCELINE
00044E 8D28rrrr        1323         MOV.W   [R0+SOF( _Settings+10 )],R2
000452 8D38rrrr        1324         MOV.W   [R0+SOF( _Settings+12 )],R3
                       1326 ; bb.c      221         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
000456 9918rrrr        1328         MOV.W   R1,#SEG( _Settings )
00045A 9908rrrr        1329         MOV.W   R0,#SOF( _Settings )
00045E 964842rr        1330         MOV.B   ES,#SEG( _SettingsPtr )
000462 9928rrrr        1331         MOV.W   R2,#SOF( _SettingsPtr )
000466 8A22            1332         MOV.W   R2,[R2]
000468 9938004A        1333         MOV.W   R3,#04AH
                       1334         CALL    _NV_Store
00046C C4rrrrrr       +1334 ;       FCALL   _NV_Store
                       1335 ; bb.c      222 
                       1336 ; bb.c      223         return( sio0SndCommand( 20, BB_V24_address, "%c%c%ld;", BBOutputCmd[outpu
                            t],
                       1337 ; bb.c      224                                                 BBSystemCmd[BBSetup[output].Syste
                            m], delay));
000470 99080014        1339         MOV.W   R0,#014H
000474 99180034        1340         MOV.W   R1,#034H
000478 8944            1341         MOV.W   R4,R4
00047A 9859            1342         SEXT.W  R5
00047C 9938rrrr        1344         MOV.W   R3,#SEG( _BBOutputCmd )
000480 9928rrrr        1345         MOV.W   R2,#SOF( _BBOutputCmd )
000484 0924            1346         ADD.W   R2,R4
000486 1935            1347         ADDC.W  R3,R5
000488 866C43          1348         MOV.B   CS,R3L
00048B 8062            1349         MOVC.B  R3L,[R2+]
00048D 9079            1350         SEXT.B  R3H
00048F 8C3F04          1351         MOV.W   [R7+4],R3
000492 8926            1352         MOV.W   R2,R6
000494 B930            1353         MOVS.W  R3,#00H
000496 964842rr        1354         MOV.B   ES,#SEG( _BBSetup )
00049A 8542rrrr        1355         MOV.B   R2L,[R2+SOF( _BBSetup )]
00049E 8184            1356         MOV.B   R4L,R2L
0004A0 B190            1357         MOVS.B  R4H,#00H
0004A2 B950            1358         MOVS.W  R5,#00H
0004A4 9938rrrr        1359         MOV.W   R3,#SEG( _BBSystemCmd )
0004A8 9928rrrr        1360         MOV.W   R2,#SOF( _BBSystemCmd )
0004AC 0924            1361         ADD.W   R2,R4
0004AE 1935            1362         ADDC.W  R3,R5
0004B0 866C43          1363         MOV.B   CS,R3L
0004B3 8062            1364         MOVC.B  R3L,[R2+]
0004B5 9079            1365         SEXT.B  R3H
0004B7 0F08            1366         PUSH.W  R3
0004B9 8C2706          1368         MOV.W   R2,[R7+6]
0004BC 0F04            1369         PUSH.W  R2
0004BE 9938rrrr        1371         MOV.W   R3,#SEG( _18 )
0004C2 9928rrrr        1372         MOV.W   R2,#SOF( _18 )
0004C6 0F0C            1373         PUSH.W  R2, R3
                       1375         CALL    _sio0SndCommand
0004C8 C4rrrrrr       +1375 ;       FCALL   _sio0SndCommand
0004CC 9970000C        1376         ADD.W   R7,#0CH
                       1378 ; bb.c      225 }
0004D0 A972            1380         ADDS.W  R7,#02H
0004D2 2F70            1382         POP.W   R4, R5, R6
0004D4 D680            1384         RET
                       1386 ; bb.c      226 
                       1387 ; bb.c      227 /**************************************************************************/
                       1388 ; bb.c      228 /* SetBBScHPhase                                                                 
                                                                                                                             
                                                                       BB.C */
                       1389 ; bb.c      229 /*                                                                               
                                                                                                                             
                                                                                                                             
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  15

ADDR   CODE            LINE SOURCELINE
                                            */
                       1390 ; bb.c      230 /* Author:       Kim Engedahl, DEV, 000331                                       
                                                                                                                             
                                    */
                       1391 ; bb.c      231 /* Revised:      000618, KEn, DEV                                                
                                                                                                                             
                                            */
                       1392 ; bb.c      232 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1393 ; bb.c      233 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       1394 ; bb.c      234 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       1395 ; bb.c      235 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       1396 ; bb.c      236 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       1397 ; bb.c      237 /**************************************************************************/
                       1398 ; bb.c      238 int SetBBScHPhase( int output, int schphase)
                       1399 ; bb.c      239 {
                       1400         ALIGN   1
                       1402         PUBLIC  _SetBBScHPhase
0004D6                 1403 _SetBBScHPhase:
0004D6 0F70            1407         PUSH.W  R4, R5, R6
0004D8 A97A            1409         ADDS.W  R7,#0AH
                       1417 ; bb.c      240         long tmp = ( long) schphase;
0004DA 8C1F04          1419         MOV.W   [R7+4],R1
0004DD 8941            1420         MOV.W   R4,R1
0004DF 9859            1421         SEXT.W  R5
0004E1 8C5F02          1424         MOV.W   [R7+2],R5
0004E4 8A4F            1425         MOV.W   [R7],R4
                       1427 ; bb.c      241 
                       1428 ; bb.c      242         Settings.ActivePreset = 0;
0004E6 964842rr        1430         MOV.B   ES,#SEG( _Settings )
0004EA 9918rrrr        1431         MOV.W   R1,#SOF( _Settings )
0004EE BA10            1432         MOV.W   [R1],#00H
                       1433 ; bb.c      243 
                       1434 ; bb.c      244         Settings.BBSetup[output].ScHPhase = BBSetup[output].ScHPhase = schphase;
0004F0 8960            1436         MOV.W   R6,R0
0004F2 D903            1437         ASL.W   R0,#03H
0004F4 B910            1440         MOVS.W  R1,#00H
0004F6 8C2704          1441         MOV.W   R2,[R7+4]
0004F9 964842rr        1442         MOV.B   ES,#SEG( _BBSetup+6 )
0004FD 8D28rrrr        1443         MOV.W   [R0+SOF( _BBSetup+6 )],R2
000501 8C2704          1444         MOV.W   R2,[R7+4]
000504 964842rr        1445         MOV.B   ES,#SEG( _Settings+14 )
000508 8D28rrrr        1446         MOV.W   [R0+SOF( _Settings+14 )],R2
                       1447 ; bb.c      245         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
00050C 9918rrrr        1449         MOV.W   R1,#SEG( _Settings )
000510 9908rrrr        1450         MOV.W   R0,#SOF( _Settings )
000514 964842rr        1451         MOV.B   ES,#SEG( _SettingsPtr )
000518 9928rrrr        1452         MOV.W   R2,#SOF( _SettingsPtr )
00051C 8A22            1453         MOV.W   R2,[R2]
00051E 9938004A        1454         MOV.W   R3,#04AH
                       1455         CALL    _NV_Store
000522 C4rrrrrr       +1455 ;       FCALL   _NV_Store
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  16

ADDR   CODE            LINE SOURCELINE
                       1456 ; bb.c      246 
                       1457 ; bb.c      247         if ( schphase < 0)                                                       
                                    // -1 deg equ. 359 deg a.s.f.
000526 8C0704          1459         MOV.W   R0,[R7+4]
000529 99040000        1460         CMP.W   R0,#00H
00052D FA07            1463         BGE     _33
                       1464 ; bb.c      248                 tmp += 360;
00052F 99400168        1466         ADD.W   R4,#0168H
000533 99510000        1467         ADDC.W  R5,#00H
000537 8C5F02          1468         MOV.W   [R7+2],R5
00053A 8A4F            1469         MOV.W   [R7],R4
00053C                 1472 _33:
                       1473 ; bb.c      249 
                       1474 ; bb.c      250         tmp *= 2048;
00053C 8C1702          1476         MOV.W   R1,[R7+2]
00053F 8A07            1477         MOV.W   R0,[R7]
000541 DD0B            1478         ASL.D   R0,#0BH
                       1484 ; bb.c      251         tmp /= 360;                                                              
                                                            // tmp = ( ScHPhase*2048)/360;
000543 B930            1486         MOV.W   R3,#00H
000545 99280168        1487         MOV.W   R2,#0168H
000549 C4rrrrrr        1488         FCALL   __SDIVL
00054D 8C1F04          1490         MOV.W   [R7+4],R1
000550 8C0F02          1491         MOV.W   [R7+2],R0
                       1493 ; bb.c      252                                                                                  
                                                            
                       1494 ; bb.c      253         return( sio0SndCommand( 12, BB_V24_address, "%cH%d;",
                       1495 ; bb.c      254                                                  BBOutputCmd[output], ( int) tmp)
                            );
000553 9908000C        1497         MOV.W   R0,#0CH
000557 99180034        1498         MOV.W   R1,#034H
00055B 8946            1499         MOV.W   R4,R6
00055D 9859            1500         SEXT.W  R5
00055F 9938rrrr        1501         MOV.W   R3,#SEG( _BBOutputCmd )
000563 9928rrrr        1502         MOV.W   R2,#SOF( _BBOutputCmd )
000567 0924            1503         ADD.W   R2,R4
000569 1935            1504         ADDC.W  R3,R5
00056B 866C43          1505         MOV.B   CS,R3L
00056E 8062            1506         MOVC.B  R3L,[R2+]
000570 9079            1507         SEXT.B  R3H
000572 8C5704          1508         MOV.W   R5,[R7+4]
000575 8C4702          1509         MOV.W   R4,[R7+2]
000578 0F10            1513         PUSH.W  R4
00057A 0F08            1515         PUSH.W  R3
00057C 9938rrrr        1517         MOV.W   R3,#SEG( _19 )
000580 9928rrrr        1518         MOV.W   R2,#SOF( _19 )
000584 0F0C            1519         PUSH.W  R2, R3
                       1521         CALL    _sio0SndCommand
000586 C4rrrrrr       +1521 ;       FCALL   _sio0SndCommand
00058A 99700008        1522         ADD.W   R7,#08H
                       1524 ; bb.c      255 }
00058E A976            1526         ADDS.W  R7,#06H
000590 2F70            1528         POP.W   R4, R5, R6
000592 D680            1530         RET
                       1533 ; bb.c      256 
000000                 1536 BB_INI_FA       SEGMENT HDATA INSEGMENT INIT
000000                 1537         RSEG    BB_INI_FA
000000 25635425643B00  1538 _6:     DB      025H,063H,054H,025H,064H,03BH,000H
000007 256358256C643B  1539 _5:     DB      025H,063H,058H,025H,06CH,064H,03BH,000H
       00                   
00000F 256359256C643B  1540 _7:     DB      025H,063H,059H,025H,06CH,064H,03BH,000H
       00                   
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  17

ADDR   CODE            LINE SOURCELINE
                       1543         EXTRN   HCODE(_sio0SndCommand)
000017 25634525643B00  1544 _9:     DB      025H,063H,045H,025H,064H,03BH,000H
000000                 1547 BB_CLR_FA       SEGMENT HDATA INSEGMENT CLEAR
000000                 1548         RSEG    BB_CLR_FA
                       1549         PUBLIC  _BBSetup
                       1550         ALIGN   1
000000                 1551 _BBSetup:       DS      24
   |  RESERVED             
000017
00001E                 1552         RSEG    BB_INI_FA
00001E 25634425643B00  1553 _11:    DB      025H,063H,044H,025H,064H,03BH,000H
000025 25634825643B00  1554 _19:    DB      025H,063H,048H,025H,064H,03BH,000H
                       1557         EXTRN   HCODE(_LEDSet)
00002C 25634325643B00  1558 _10:    DB      025H,063H,043H,025H,064H,03BH,000H
000033 48493F00        1559 _15:    DB      048H,049H,03FH,000H
070008                 1562         HSEG AT 070008H
                       1563         PUBLIC  _BBControlPort
                       1564         ALIGN   1
070008                 1565 _BBControlPort: DS      2
   |  RESERVED             
070009
                       1567         EXTRN   HDATA(_SettingsPtr)
                       1569         EXTRN   HDATA(_Settings)
                       1572         EXTRN   HCODE(_NV_Store)
                       1574         EXTRN   HDATA(_Calibration)
000037                 1575         RSEG    BB_INI_FA
000037 25632563256C64  1576 _18:    DB      025H,063H,025H,063H,025H,06CH,064H,03BH,000H
       3B00                 
                       1577         EXTRN   HCODE(__SDIVL)
                       1580         EXTRN   HCODE(_sio0SndRequest)
000040 25635525643B00  1581 _8:     DB      025H,063H,055H,025H,064H,03BH,000H
                       1582         EXTRN   DATA(__lc_ub_xvwbuffer)
                       1583         EXTRN   DATA(__lc_ue_xvwbuffer)
                       1584         CALLS   'BBDefaults', 'NV_Store'
                       1585         CALLS   'BBInit', 'sio0SndCommand'
                       1586         CALLS   'BBInit', 'BBUpdate'
                       1587         CALLS   'BBVersion', 'sio0SndRequest'
                       1588         CALLS   'BBUpdate', 'SetBBSystem'
                       1589         CALLS   'BBUpdate', 'SetBBScHPhase'
                       1590         CALLS   'SetBBSystem', 'NV_Store'
                       1591         CALLS   'SetBBSystem', 'LEDSet'
                       1592         CALLS   'SetBBSystem', 'sio0SndCommand'
                       1593         CALLS   'SetBBDelay', 'NV_Store'
                       1594         CALLS   'SetBBDelay', 'sio0SndCommand'
                       1595         CALLS   'SetBBScHPhase', 'NV_Store'
                       1596         CALLS   'SetBBScHPhase', 'sio0SndCommand'
