XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   1
U:\Pt5201\Design\DDD\SW\Master\Source\MAKE\1_0\temp\xa\util.src
ADDR   CODE            LINE SOURCELINE
                          1 ; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
                          2 ; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -I..\..\rtxcdef\xa
                          3 ;          -I..\..\rtxc\xa\include -I..\..\code\include\1_0 -I..\..\app_spec\xa
                          4 ;          -Ml -O2 -s
                          6 $NOZPAGE
                          7         NAME    UTIL
                         11 ; util.c      1 /****************************************************************************/
                         12 ; util.c      2 /* MODULE:                                                                  */
                         13 ; util.c      3 /*  util.c -    General purpose utility function                                 
                                                                                                                    */
                         14 ; util.c      4 /****************************************************************************/
                         15 ; util.c      5 /* FUNCTIONS:                                                               */
                         16 ; util.c      6 /*                                                                          */
                         17 ; util.c      7 /*                                                                          */
                         18 ; util.c      8 /* TASKS:                                                                   */
                         19 ; util.c      9 /*                                                                          */
                         20 ; util.c     10 /* NOTES:                                                                   */
                         21 ; util.c     11 /*                                                                          */
                         22 ; util.c     12 /****************************************************************************/
                         23 ; util.c     13 /*
                         24 ; util.c     14  *   PTV software for PT5201    
                         25 ; util.c     15  *   Copyright (c) 
                         26 ; util.c     16  *   ProTeleVision Technologies A/S.
                         27 ; util.c     17  *   ALL RIGHTS RESERVED
                         28 ; util.c     18 */
                         29 ; util.c     19 /**************************************************************************/
                         30 ; util.c     20 /* Include files:                                                                
                                                                                                                             
                                                                                                    */
                         31 ; util.c     21 #include <stdio.h>
                         52 ; util.c     22 #include <string.h>
                         55 ; util.c     23 #include <ctype.h>
                         58 ; util.c     24 
                         59 ; util.c     25 #include "define.h"
                         62 ; util.c     26 #include "util.h"
                         65 ; util.c     27 
                         66 ; util.c     28 /*************************************************************************/
                         67 ; util.c     29 /*      NONE                                                                     
                                                                                                                             
                                                                                    UTIL.C */
                         68 ; util.c     30 /*                                                                               
                                                                                                                             
                                                                                                                             
                            */
                         69 ; util.c     31 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                     */
                         70 ; util.c     32 /* Revised:             970105                                                   
                                                                                                                             
                                                             */
                         71 ; util.c     33 /*                                                                               
                                                                                                                             
                                                                                                                             
                            */
                         72 ; util.c     34 /*      Function:       DOES ABSOLUTELY NOTHING!!!                               
                                                                                                                     */
                         73 ; util.c     35 /*      Remarks:                This one is primarily used in menu tables        
                                                                             */
                         74 ; util.c     36 /*      Returns:                --                                               
                                                                                                                             
                                                                                             */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   2

ADDR   CODE            LINE SOURCELINE
                         75 ; util.c     37 /*      Updates:                --                                               
                                                                                                                             
                                                                                             */
                         76 ; util.c     38 /*************************************************************************/
                         77 ; util.c     39 void None( void)
                         78 ; util.c     40 {
000000                   79 UTIL_PR SEGMENT HCODE
000000                   80         RSEG    UTIL_PR
                         81         ALIGN   1
                         83         PUBLIC  _None
000000                   84 _None:
                         88 ; util.c     41 }
000000 D680              90         RET
                         92 ; util.c     42 
                         93 ; util.c     43 /**************************************************************************/
                         94 ; util.c     44 /* BitPos                                                                        
                                                                                                                             
                                                                               UTIL.C */
                         95 ; util.c     45 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                         96 ; util.c     46 /* Author:              Kim Engedahl, DEV, 970919                                
                                                                                                                            *
                            /
                         97 ; util.c     47 /* Revised:             970919                                                   
                                                                                                                             
                                                                      */
                         98 ; util.c     48 /*                                                                               
                                                                                                                             
                                                                                                                             
                                      */
                         99 ; util.c     49 /* Function:    Return the bit position of a variable                            
                                                                                      */
                        100 ; util.c     50 /* Remarks:     If parameter contains more than one bit the number of the       *
                            /
                        101 ; util.c     51 /*                                              first bit is returned            
                                                                                                                             
                                                                    */
                        102 ; util.c     52 /* Returns:             --                                                       
                                                                                                                             
                                                                                                      */
                        103 ; util.c     53 /* Updates:             --                                                       
                                                                                                                             
                                                                                                    */
                        104 ; util.c     54 /**************************************************************************/
                        105 ; util.c     55 UC BitPos( UC value)
                        106 ; util.c     56 {
                        107         ALIGN   1
                        109         PUBLIC  _BitPos
000002                  110 _BitPos:
                        118 ; util.c     57 
                        119 ; util.c     58         UC cnt = 1;
000002 912801           121         MOV.B   R1L,#01H
                        123 ; util.c     59 
                        124 ; util.c     60         while ( !( value & 0x01) && ( cnt < 9))
000005 8110             126         MOV.B   R0H,R0L
000007 911501           127         AND.B   R0H,#01H
00000A F208             128         BNE     _9
00000A F208             128         BNE     _9
00000C                  129 _7:
                        130 ; util.c     61         {
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   3

ADDR   CODE            LINE SOURCELINE
                        131 ; util.c     62                 cnt++;
00000C A121             133         ADDS.B  R1L,#01H
                        136 ; util.c     63                 value >>= 1;
00000E D001             138         LSR.B   R0L,#01H
000010 8110             140         MOV.B   R0H,R0L
000012 911501           141         AND.B   R0H,#01H
000015 F203             142         BNE     _9
000017 912409           143         CMP.B   R1L,#09H
00001A F1F8             144         BCS     _7
                        145 ; util.c     64         }
00001C                  147 _9:
                        148 ; util.c     65 
                        149 ; util.c     66         return( cnt);
00001C 8102             151         MOV.B   R0L,R1L
                        154 ; util.c     67 }
00001E D680             156         RET
                        159 ; util.c     68 
                        160 ; util.c     69 /**************************************************************************/
                        161 ; util.c     70 /* HexToByte                                                                     
                                                                                                                             
                                                                       UTIL.C       */
                        162 ; util.c     71 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        163 ; util.c     72 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                        164 ; util.c     73 /* Revised:             970105                                                   
                                                                                                                             
                                                                            */
                        165 ; util.c     74 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        166 ; util.c     75 /* Function:    Converts a char defined in hex to binary                         
                                                                                    */
                        167 ; util.c     76 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                        168 ; util.c     77 /* Returns:             A byte from 0-15                                         
                                                                                                                             
                                                                    */
                        169 ; util.c     78 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                        170 ; util.c     79 /**************************************************************************/
                        171 ; util.c     80 UC HexToByte( char s) {
                        172         ALIGN   1
                        174         PUBLIC  _HexToByte
000020                  175 _HexToByte:
000020 0F10             179         PUSH.W  R4
                        183 ; util.c     81 
                        184 ; util.c     82         toupper( s);
000022 8180             186         MOV.B   R4L,R0L
000024 8108             187         MOV.B   R0L,R4L
000026 9019             188         SEXT.B  R0H
                        191         CALL    _toupper
000028 C4rrrrrr        +191 ;       FCALL   _toupper
                        192 ; util.c     83 
                        193 ; util.c     84         if (( s >= 'A') && ( s <= 'F'))
00002C 918441           195         CMP.B   R4L,#041H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   4

ADDR   CODE            LINE SOURCELINE
00002F FB07             196         BLT     _12
000031 918446           197         CMP.B   R4L,#046H
000034 FC04             198         BGT     _12
                        199 ; util.c     85                 return( s - 'A' + 10);
000036 918237           201         SUB.B   R4L,#037H
000039 8108             203         MOV.B   R0L,R4L
00003B FE04             204         BR      _13
00003B FE0400           204         BR      _13
00003E                  205 _12:
                        207 ; util.c     86 
                        208 ; util.c     87         return( s - '0');
00003E 918230           210         SUB.B   R4L,#030H
000041 8108             212         MOV.B   R0L,R4L
                        213 ; util.c     88 }
000044                  215 _13:
000044 2F10             216         POP.W   R4
000046 D680             218         RET
                        220 ; util.c     89 
                        221 ; util.c     90 /**************************************************************************/
                        222 ; util.c     91 /* htol                                                                          
                                                                                                                             
                                                                                             UTIL.C */
                        223 ; util.c     92 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        224 ; util.c     93 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                        225 ; util.c     94 /* Revised:             970105                                                   
                                                                                                                             
                                                                            */
                        226 ; util.c     95 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        227 ; util.c     96 /* Function:    Converts a string containg a hex number to an unsigned long     *
                            /
                        228 ; util.c     97 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                        229 ; util.c     98 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                        230 ; util.c     99 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                        231 ; util.c    100 /**************************************************************************/
                        232 ; util.c    101 UC htol( char* s, UL* result)
                        233 ; util.c    102 {
                        234         ALIGN   1
                        236         PUBLIC  _htol
000048                  237 _htol:
000048 0F30             243         PUSH.W  R4, R5
00004A A978             245         ADDS.W  R7,#08H
                        251 ; util.c    103         *result = 0;
00004C 866C42           253         MOV.B   ES,R3L
00004F BA20             254         MOV.W   [R2],#00H
000051 BC2002           255         MOV.W   [R2+2],#00H
000054 8C3F06           256         MOV.W   [R7+6],R3
000057 8C2F04           257         MOV.W   [R7+4],R2
                        260 ; util.c    104 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   5

ADDR   CODE            LINE SOURCELINE
                        261 ; util.c    105         while ( *s)
00005A 8951             263         MOV.W   R5,R1
00005C 8940             264         MOV.W   R4,R0
00005E 86AC42           265         MOV.B   ES,R5L
000061 8204             266         MOV.B   R0L,[R4]
000063 F323             267         BEQ     _17
000063 F32300           267         BEQ     _17
000066                  268 _16:
                        269 ; util.c    106                 *result = 16*(*result) + HexToByte( *s++);
000066 8C1706           271         MOV.W   R1,[R7+6]
000069 8C0704           272         MOV.W   R0,[R7+4]
00006C 862C42           273         MOV.B   ES,R1L
00006F 8C1002           274         MOV.W   R1,[R0+2]
000072 8A00             275         MOV.W   R0,[R0]
000074 DD04             276         ASL.D   R0,#04H
000076 8C1F02           277         MOV.W   [R7+2],R1
000079 8A0F             278         MOV.W   [R7],R0
00007B 86AC42           279         MOV.B   ES,R5L
00007E 8204             280         MOV.B   R0L,[R4]
000080 C5FFCF           281         CALL    _HexToByte
000083 B110             282         MOVS.B  R0H,#00H
000085 B910             283         MOVS.W  R1,#00H
000087 8C3702           284         MOV.W   R3,[R7+2]
00008A 8A27             285         MOV.W   R2,[R7]
00008C 0902             286         ADD.W   R0,R2
00008E 1913             287         ADDC.W  R1,R3
000090 8C3706           288         MOV.W   R3,[R7+6]
000093 8C2704           289         MOV.W   R2,[R7+4]
000096 866C42           290         MOV.B   ES,R3L
000099 8A0A             291         MOV.W   [R2],R0
00009B 8C1A02           292         MOV.W   [R2+2],R1
00009E 99400001         297         ADD.W   R4,#01H
0000A2 86AC42           299         MOV.B   ES,R5L
0000A5 8204             300         MOV.B   R0L,[R4]
0000A7 F2DF             301         BNE     _16
0000AA                  303 _17:
                        304 ; util.c    107 
                        305 ; util.c    108         return( 0);
0000AA 910800           307         MOV.B   R0L,#00H
                        308 ; util.c    109 }
0000AD 99700008         310         ADD.W   R7,#08H
0000B1 2F30             312         POP.W   R4, R5
0000B3 D680             314         RET
                        317 ; util.c    110 
                        318 ; util.c    111 /**************************************************************************/
                        319 ; util.c    112 /* otol                                                                          
                                                                                                                             
                                                                                       UTIL.C       */
                        320 ; util.c    113 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        321 ; util.c    114 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                        322 ; util.c    115 /* Revised:             970105                                                   
                                                                                                                             
                                                                            */
                        323 ; util.c    116 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   6

ADDR   CODE            LINE SOURCELINE
                        324 ; util.c    117 /* Function:    Converts a string containg an octal number to unsinged long     *
                            /
                        325 ; util.c    118 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                        326 ; util.c    119 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                        327 ; util.c    120 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                        328 ; util.c    121 /**************************************************************************/
                        329 ; util.c    122 UC otol( char* s, UL* result)
                        330 ; util.c    123 {
0000B5 00               331         ALIGN   1
                        333         PUBLIC  _otol
0000B6                  334 _otol:
0000B6 0F70             338         PUSH.W  R4, R5, R6
0000B8 A97C             340         ADDS.W  R7,#0CH
                        346 ; util.c    124         *result = 0;
0000BA 866C42           348         MOV.B   ES,R3L
0000BD BA20             349         MOV.W   [R2],#00H
0000BF BC2002           350         MOV.W   [R2+2],#00H
                        351 ; util.c    125 
                        352 ; util.c    126         while ( *s)
0000C2 862C42           354         MOV.B   ES,R1L
0000C5 8280             355         MOV.B   R4L,[R0]
0000C7 F31E             356         BEQ     _19
0000C7 F31E00           356         BEQ     _19
0000CA                  357 _18:
                        358 ; util.c    127                 *result = 8*(*result) + ( *s++ - '0');
0000CA 866C42           360         MOV.B   ES,R3L
0000CD 8A42             361         MOV.W   R4,[R2]
0000CF 8C5202           362         MOV.W   R5,[R2+2]
0000D2 DD43             363         ASL.D   R4,#03H
0000D4 8C1F02           364         MOV.W   [R7+2],R1
0000D7 8A0F             365         MOV.W   [R7],R0
0000D9 862C42           366         MOV.B   ES,R1L
0000DC 82C0             367         MOV.B   R6L,[R0]
0000DE 90D9             368         SEXT.B  R6H
0000E0 99620030         369         SUB.W   R6,#030H
0000E4 8906             370         MOV.W   R0,R6
0000E6 9819             371         SEXT.W  R1
0000E8 0940             372         ADD.W   R4,R0
0000EA 1951             373         ADDC.W  R5,R1
0000EC 866C42           374         MOV.B   ES,R3L
0000EF 8A4A             375         MOV.W   [R2],R4
0000F1 8C5A02           376         MOV.W   [R2+2],R5
0000F4 8C1702           377         MOV.W   R1,[R7+2]
0000F7 8A07             378         MOV.W   R0,[R7]
0000F9 99000001         379         ADD.W   R0,#01H
0000FD 862C42           381         MOV.B   ES,R1L
000100 8280             382         MOV.B   R4L,[R0]
000102 F2E3             383         BNE     _18
000104                  385 _19:
                        386 ; util.c    128 
                        387 ; util.c    129         return( 0);
000104 910800           389         MOV.B   R0L,#00H
                        390 ; util.c    130 }
000107 A974             392         ADDS.W  R7,#04H
000109 2F70             394         POP.W   R4, R5, R6
00010B D680             396         RET
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   7

ADDR   CODE            LINE SOURCELINE
                        399 ; util.c    131 
                        400 ; util.c    132 /**************************************************************************/
                        401 ; util.c    133 /* btol                                                                          
                                                                                                                             
                                                                                       UTIL.C       */
                        402 ; util.c    134 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        403 ; util.c    135 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                        404 ; util.c    136 /* Revised:             970105                                                   
                                                                                                                             
                                                                            */
                        405 ; util.c    137 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        406 ; util.c    138 /* Function:    Converts a string containg a binary number to unsigned long     *
                            /
                        407 ; util.c    139 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                        408 ; util.c    140 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                        409 ; util.c    141 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                        410 ; util.c    142 /**************************************************************************/
                        411 ; util.c    143 UC btol( char* s, UL* result)
                        412 ; util.c    144 {
00010D 00               413         ALIGN   1
                        415         PUBLIC  _btol
00010E                  416 _btol:
00010E 0F70             420         PUSH.W  R4, R5, R6
000110 A97C             422         ADDS.W  R7,#0CH
                        428 ; util.c    145         *result = 0;
000112 866C42           430         MOV.B   ES,R3L
000115 BA20             431         MOV.W   [R2],#00H
000117 BC2002           432         MOV.W   [R2+2],#00H
                        433 ; util.c    146 
                        434 ; util.c    147         while ( *s)
00011A 862C42           436         MOV.B   ES,R1L
00011D 8280             437         MOV.B   R4L,[R0]
00011F F31E             438         BEQ     _21
00011F F31E00           438         BEQ     _21
000122                  439 _20:
                        440 ; util.c    148                 *result = 2*(*result) + ( *s++ - '0');
000122 866C42           442         MOV.B   ES,R3L
000125 8A42             443         MOV.W   R4,[R2]
000127 8C5202           444         MOV.W   R5,[R2+2]
00012A DD41             445         ASL.D   R4,#01H
00012C 8C1F02           446         MOV.W   [R7+2],R1
00012F 8A0F             447         MOV.W   [R7],R0
000131 862C42           448         MOV.B   ES,R1L
000134 82C0             449         MOV.B   R6L,[R0]
000136 90D9             450         SEXT.B  R6H
000138 99620030         451         SUB.W   R6,#030H
00013C 8906             452         MOV.W   R0,R6
00013E 9819             453         SEXT.W  R1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   8

ADDR   CODE            LINE SOURCELINE
000140 0940             454         ADD.W   R4,R0
000142 1951             455         ADDC.W  R5,R1
000144 866C42           456         MOV.B   ES,R3L
000147 8A4A             457         MOV.W   [R2],R4
000149 8C5A02           458         MOV.W   [R2+2],R5
00014C 8C1702           459         MOV.W   R1,[R7+2]
00014F 8A07             460         MOV.W   R0,[R7]
000151 99000001         461         ADD.W   R0,#01H
000155 862C42           463         MOV.B   ES,R1L
000158 8280             464         MOV.B   R4L,[R0]
00015A F2E3             465         BNE     _20
00015C                  467 _21:
                        468 ; util.c    149 
                        469 ; util.c    150         return( 0);
00015C 910800           471         MOV.B   R0L,#00H
                        472 ; util.c    151 }
00015F A974             474         ADDS.W  R7,#04H
000161 2F70             476         POP.W   R4, R5, R6
000163 D680             478         RET
                        481 ; util.c    152 
                        482 ; util.c    153 /**************************************************************************/
                        483 ; util.c    154 /* _ultoa                                                                        
                                                                                                                             
                                                                                       UTIL.C       */
                        484 ; util.c    155 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        485 ; util.c    156 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                        486 ; util.c    157 /* Revised:             970219                                                   
                                                                                                                             
                                                                            */
                        487 ; util.c    158 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        488 ; util.c    159 /* Function:    Converts an unsigned long to a string                            
                                                                                            */
                        489 ; util.c    160 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                        490 ; util.c    161 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                        491 ; util.c    162 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                        492 ; util.c    163 /**************************************************************************/
                        493 ; util.c    164 void _ultoa( UL val, char* result)
                        494 ; util.c    165 {
000165 00               495         ALIGN   1
                        497         PUBLIC  __ultoa
000166                  498 __ultoa:
000166 0F70             502         PUSH.W  R4, R5, R6
000168 A978             504         ADDS.W  R7,#08H
00016A 8C3F06           508         MOV.W   [R7+6],R3
00016D 8C2F04           509         MOV.W   [R7+4],R2
                        518 ; util.c    166         UL tmp = val;
                        519 ; util.c    167         UC i=0, j=0, TmpChar;
000170 91C800           521         MOV.B   R6L,#00H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   9

ADDR   CODE            LINE SOURCELINE
000173 91D800           526         MOV.B   R6H,#00H
                        530 ; util.c    168 
                        531 ; util.c    169         if ( val == 0)
000176 8931             533         MOV.W   R3,R1
000178 8920             534         MOV.W   R2,R0
00017A 6910             535         OR.W    R1,R0
00017C F20A             538         BNE     _29
                        539 ; util.c    170                 strcpy( result, "0");
00017E 8C1706           541         MOV.W   R1,[R7+6]
000181 8C0704           542         MOV.W   R0,[R7+4]
000184 9938rrrr         543         MOV.W   R3,#SEG( _22 )
000188 9928rrrr         544         MOV.W   R2,#SOF( _22 )
                        545         CALL    _strcpy
00018C C4rrrrrr        +545 ;       FCALL   _strcpy
000190 FE61             550         BR      _34
000190 FE61             550         BR      _34
000192                  551 _29:
                        558 ; util.c    171         else
                        559 ; util.c    172         {
                        560 ; util.c    173                 while ( val)
000192 8953             562         MOV.W   R5,R3
000194 8942             563         MOV.W   R4,R2
000196 6932             564         OR.W    R3,R2
000198 F326             567         BEQ     _31
000198 F326             567         BEQ     _31
00019A                  568 _30:
                        569 ; util.c    174                 {
                        570 ; util.c    175                         tmp = val / 10;
00019A 8915             572         MOV.W   R1,R5
00019C 8904             573         MOV.W   R0,R4
00019E B930             574         MOV.W   R3,#00H
0001A0 9928000A         575         MOV.W   R2,#0AH
0001A4 C4rrrrrr         576         FCALL   __UDIVL
0001A8 8C1F02           577         MOV.W   [R7+2],R1
0001AB 8A0F             578         MOV.W   [R7],R0
                        580 ; util.c    176                         result[i++] = (val % 10) + '0';
0001AD 8915             582         MOV.W   R1,R5
0001AF 8904             583         MOV.W   R0,R4
0001B1 B930             584         MOV.W   R3,#00H
0001B3 9928000A         585         MOV.W   R2,#0AH
0001B7 C4rrrrrr         586         FCALL   __UMODL
0001BB 8180             590         MOV.B   R4L,R0L
0001BD 918030           591         ADD.B   R4L,#030H
0001C0 810C             592         MOV.B   R0L,R6L
0001C2 B110             593         MOVS.B  R0H,#00H
0001C4 8920             594         MOV.W   R2,R0
0001C6 B930             595         MOVS.W  R3,#00H
0001C8 8C1706           596         MOV.W   R1,[R7+6]
0001CB 8C0704           597         MOV.W   R0,[R7+4]
0001CE 0902             598         ADD.W   R0,R2
0001D0 862C42           599         MOV.B   ES,R1L
0001D3 8288             600         MOV.B   [R0],R4L
0001D5 A1C1             601         ADDS.B  R6L,#01H
                        604 ; util.c    177                         val = tmp;
0001D7 8C5702           606         MOV.W   R5,[R7+2]
0001DA 8A47             607         MOV.W   R4,[R7]
0001DC 8C1702           610         MOV.W   R1,[R7+2]
0001DF 8A07             611         MOV.W   R0,[R7]
0001E1 6910             612         OR.W    R1,R0
0001E3 F2DB             615         BNE     _30
                        616 ; util.c    178                 }
0001E6                  618 _31:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  10

ADDR   CODE            LINE SOURCELINE
                        619 ; util.c    179                 result[i--] = '\0';
0001E6 810C             621         MOV.B   R0L,R6L
0001E8 B110             622         MOVS.B  R0H,#00H
0001EA B910             624         MOVS.W  R1,#00H
0001EC 8C3706           625         MOV.W   R3,[R7+6]
0001EF 8C2704           626         MOV.W   R2,[R7+4]
0001F2 0920             627         ADD.W   R2,R0
0001F4 866C42           628         MOV.B   ES,R3L
0001F7 B220             629         MOV.B   [R2],#00H
0001F9 A1CF             630         ADDS.B  R6L,#0FH
0001FB 814C             632         MOV.B   R2L,R6L
0001FD 910800           634         MOV.B   R0L,#00H
000200 B110             635         MOVS.B  R0H,#00H
000202 B910             636         MOVS.W  R1,#00H
000204 8C5706           637         MOV.W   R5,[R7+6]
000207 8C4704           638         MOV.W   R4,[R7+4]
00020A 0940             639         ADD.W   R4,R0
00020C 8C5F02           641         MOV.W   [R7+2],R5
00020F 8A4F             642         MOV.W   [R7],R4
                        644 ; util.c    180 
                        645 ; util.c    181                 while ( i >= j)                                                 /
                            / Reverse ASCII string
000211 914400           647         CMP.B   R2L,#00H
000214 F11F             648         BCS     _34
000214 F11F             648         BCS     _34
000216                  649 _32:
                        650 ; util.c    182                 {
                        651 ; util.c    183                         TmpChar = result[i];
000216 8184             653         MOV.B   R4L,R2L
000218 B190             654         MOVS.B  R4H,#00H
00021A B950             655         MOVS.W  R5,#00H
00021C 8C1706           656         MOV.W   R1,[R7+6]
00021F 8C0704           657         MOV.W   R0,[R7+4]
000222 0904             658         ADD.W   R0,R4
000224 862C42           659         MOV.B   ES,R1L
000227 8250             660         MOV.B   R2H,[R0]
                        662 ; util.c    184                         result[i] = result[j];
000229 8C5702           664         MOV.W   R5,[R7+2]
00022C 8A47             665         MOV.W   R4,[R7]
00022E 86AC42           666         MOV.B   ES,R5L
000231 8264             667         MOV.B   R3L,[R4]
000233 862C42           668         MOV.B   ES,R1L
000236 8268             669         MOV.B   [R0],R3L
                        670 ; util.c    185                         result[j] = TmpChar;
000238 8C1702           672         MOV.W   R1,[R7+2]
00023B 8A07             673         MOV.W   R0,[R7]
00023D 862C42           674         MOV.B   ES,R1L
000240 8258             675         MOV.B   [R0],R2H
                        678 ; util.c    186                         i--;
000242 A14F             680         ADDS.B  R2L,#0FH
                        683 ; util.c    187                         j++;
000244 99000001         685         ADD.W   R0,#01H
000248 8C1F02           687         MOV.W   [R7+2],R1
00024B 8A0F             688         MOV.W   [R7],R0
00024D A1D1             690         ADDS.B  R6H,#01H
00024F 414D             694         CMP.B   R2L,R6H
000251 F0E2             695         BCC     _32
                        696 ; util.c    188                 }
                        697 ; util.c    189         }
000254                  699 _34:
                        700 ; util.c    190 }
000254 99700008         702         ADD.W   R7,#08H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  11

ADDR   CODE            LINE SOURCELINE
000258 2F70             704         POP.W   R4, R5, R6
00025A D680             706         RET
                        713 ; util.c    191 
                        714 ; util.c    192 /**************************************************************************/
                        715 ; util.c    193 /* Cstrlen                                                                       
                                                                                                                             
                                                                               UTIL.C       */
                        716 ; util.c    194 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        717 ; util.c    195 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                        718 ; util.c    196 /* Revised:             970105                                                   
                                                                                                                             
                                                                            */
                        719 ; util.c    197 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        720 ; util.c    198 /* Function:    Calculates the length of a string from code memory               
                                                    */
                        721 ; util.c    199 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                        722 ; util.c    200 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                        723 ; util.c    201 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                        724 ; util.c    202 /**************************************************************************/
                        725 ; util.c    203 size_t Cstrlen( register char code* s)
                        726 ; util.c    204 {
                        727         ALIGN   1
                        729         PUBLIC  _Cstrlen
00025C                  730 _Cstrlen:
00025C 0F30             736         PUSH.W  R4, R5
                        742 ; util.c    205         register char code *    cp;
                        743 ; util.c    206 
                        744 ; util.c    207         cp = s;
                        745 ; util.c    208         while( *cp++)
00025E 8951             747         MOV.W   R5,R1
000260 8940             748         MOV.W   R4,R0
000262 86AC43           749         MOV.B   CS,R5L
000265 80A4             750         MOVC.B  R5L,[R4+]
000267 8931             751         MOV.W   R3,R1
000269 8920             752         MOV.W   R2,R0
00026B 99200001         753         ADD.W   R2,#01H
00026F 99310000         754         ADDC.W  R3,#00H
000273 61AA             756         OR.B    R5L,R5L
000275 F30C             757         BEQ     _40
000275 F30C00           757         BEQ     _40
000278                  758 _39:
000278 8953             759         MOV.W   R5,R3
00027A 8942             760         MOV.W   R4,R2
00027C 86AC43           761         MOV.B   CS,R5L
00027F 80A4             762         MOVC.B  R5L,[R4+]
000281 99200001         763         ADD.W   R2,#01H
000285 99310000         764         ADDC.W  R3,#00H
000289 61AA             767         OR.B    R5L,R5L
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  12

ADDR   CODE            LINE SOURCELINE
00028B F2F6             768         BNE     _39
                        769 ; util.c    209                 continue;
00028E                  771 _40:
                        772 ; util.c    210 
                        773 ; util.c    211         return( cp-s-1);
00028E 2920             775         SUB.W   R2,R0
000290 3931             776         SUBB.W  R3,R1
000292 8902             778         MOV.W   R0,R2
000294 A90F             779         ADDS.W  R0,#0FH
                        781 ; util.c    212 }
000296 2F30             783         POP.W   R4, R5
000298 D680             785         RET
                        787 ; util.c    213 
                        788 ; util.c    214 /**************************************************************************/
                        789 ; util.c    215 /* Cstrcat                                                                       
                                                                                                                             
                                                                               UTIL.C       */
                        790 ; util.c    216 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        791 ; util.c    217 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                        792 ; util.c    218 /* Revised:             970105                                                   
                                                                                                                             
                                                                            */
                        793 ; util.c    219 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        794 ; util.c    220 /* Function:    Concatenate a string from code memory to data memory             
                                            */
                        795 ; util.c    221 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                        796 ; util.c    222 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                        797 ; util.c    223 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                        798 ; util.c    224 /**************************************************************************/
                        799 ; util.c    225 char* Cstrcat( register char* to, register char code* from)
                        800 ; util.c    226 {
                        801         ALIGN   1
                        803         PUBLIC  _Cstrcat
00029A                  804 _Cstrcat:
00029A 0F70             808         PUSH.W  R4, R5, R6
                        816 ; util.c    227         register char* cp;
                        817 ; util.c    228 
                        818 ; util.c    229         cp = to;
00029C 8951             820         MOV.W   R5,R1
00029E 8940             821         MOV.W   R4,R0
                        823 ; util.c    230         while( *cp)
0002A0 862C42           825         MOV.B   ES,R1L
0002A3 82C0             826         MOV.B   R6L,[R0]
0002A5 F307             827         BEQ     _42
0002A5 F30700           827         BEQ     _42
0002A8                  828 _41:
                        829 ; util.c    231                 cp++;
0002A8 99400001         831         ADD.W   R4,#01H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  13

ADDR   CODE            LINE SOURCELINE
0002AC 86AC42           835         MOV.B   ES,R5L
0002AF 82C4             836         MOV.B   R6L,[R4]
0002B1 F2FB             837         BNE     _41
0002B4                  839 _42:
                        840 ; util.c    232 
                        841 ; util.c    233         *cp = *from++;
0002B4 866C43           843         MOV.B   CS,R3L
0002B7 8062             844         MOVC.B  R3L,[R2+]
0002B9 86AC42           846         MOV.B   ES,R5L
0002BC 826C             847         MOV.B   [R4],R3L
                        848 ; util.c    234         while( *cp++)
0002BE 86AC42           850         MOV.B   ES,R5L
0002C1 82C4             851         MOV.B   R6L,[R4]
0002C3 99400001         852         ADD.W   R4,#01H
0002C7 8935             854         MOV.W   R3,R5
0002C9 8924             855         MOV.W   R2,R4
0002CB 61CC             857         OR.B    R6L,R6L
0002CD F308             858         BEQ     _44
0002CD F30800           858         BEQ     _44
0002D0                  859 _43:
0002D0 866C42           860         MOV.B   ES,R3L
0002D3 8282             861         MOV.B   R4L,[R2]
0002D5 99200001         862         ADD.W   R2,#01H
0002D9 6188             865         OR.B    R4L,R4L
0002DB F2FA             866         BNE     _43
                        867 ; util.c    235                 continue;
0002DE                  869 _44:
                        870 ; util.c    236 
                        871 ; util.c    237         return( to);
                        872 ; util.c    238 }
0002DE 2F70             874         POP.W   R4, R5, R6
0002E0 D680             876         RET
                        880 ; util.c    239 
                        881 ; util.c    240 /**************************************************************************/
                        882 ; util.c    241 /* Cmemcpy                                                                       
                                                                                                                             
                                                                               UTIL.C       */
                        883 ; util.c    242 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        884 ; util.c    243 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                        885 ; util.c    244 /* Revised:             970105                                                   
                                                                                                                             
                                                                            */
                        886 ; util.c    245 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        887 ; util.c    246 /* Function:    Copy a memory-area from code-memory to RAM-memory                
                                                            */
                        888 ; util.c    247 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                        889 ; util.c    248 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                        890 ; util.c    249 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  14

ADDR   CODE            LINE SOURCELINE
                        891 ; util.c    250 /**************************************************************************/
                        892 ; util.c    251 void* Cmemcpy( void* d1, void code* s1, register size_t n)
                        893 ; util.c    252 {
                        894         ALIGN   1
                        896         PUBLIC  _Cmemcpy
0002E2                  897 _Cmemcpy:
0002E2 0F70             903         PUSH.W  R4, R5, R6
0002E4 A97C             905         ADDS.W  R7,#0CH
                        917 ; util.c    253         register char* d;
                        918 ; util.c    254         register char code* s;
                        919 ; util.c    255 
                        920 ; util.c    256         s = s1;
0002E6 8953             922         MOV.W   R5,R3
0002E8 8942             923         MOV.W   R4,R2
                        925 ; util.c    257         d = d1;
0002EA 8C1F02           927         MOV.W   [R7+2],R1
0002ED 8A0F             928         MOV.W   [R7],R0
0002EF 8931             929         MOV.W   R3,R1
0002F1 8920             930         MOV.W   R2,R0
                        935 ; util.c    258 
                        936 ; util.c    259         while( n--)
0002F3 8906             938         MOV.W   R0,R6
0002F5 A96F             941         ADDS.W  R6,#0FH
0002F7 6900             944         OR.W    R0,R0
0002F9 F314             945         BEQ     _46
0002F9 F31400           945         BEQ     _46
0002FC                  946 _45:
                        947 ; util.c    260                 *d++ = *s++;
0002FC 8915             949         MOV.W   R1,R5
0002FE 8904             950         MOV.W   R0,R4
000300 86AC43           951         MOV.B   CS,R5L
000303 80A4             952         MOVC.B  R5L,[R4+]
000305 866C42           955         MOV.B   ES,R3L
000308 82AA             956         MOV.B   [R2],R5L
00030A 99000001         957         ADD.W   R0,#01H
00030E 99110000         958         ADDC.W  R1,#00H
000312 8951             960         MOV.W   R5,R1
000314 8940             961         MOV.W   R4,R0
000316 99200001         963         ADD.W   R2,#01H
00031A 8906             967         MOV.W   R0,R6
00031C A96F             970         ADDS.W  R6,#0FH
00031E 6900             973         OR.W    R0,R0
000320 F2ED             974         BNE     _45
000322                  976 _46:
                        977 ; util.c    261 
                        978 ; util.c    262         return( d1);
000322 8C1702           980         MOV.W   R1,[R7+2]
000325 8A07             981         MOV.W   R0,[R7]
                        984 ; util.c    263 }
000327 A974             986         ADDS.W  R7,#04H
000329 2F70             988         POP.W   R4, R5, R6
00032B D680             990         RET
                        996 ; util.c    264 
                        997 ; util.c    265 /**************************************************************************/
                        998 ; util.c    266 /* Cstrcpy                                                                       
                                                                                                                             
                                                                               UTIL.C       */
                        999 ; util.c    267 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  15

ADDR   CODE            LINE SOURCELINE
                       1000 ; util.c    268 /* Author:              Kim Engedahl, DEV, 971003                                
                                                                                                                            *
                            /
                       1001 ; util.c    269 /* Revised:             971003                                                   
                                                                                                                             
                                                                            */
                       1002 ; util.c    270 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1003 ; util.c    271 /* Function:    Copy a string in code-memory to a string in RAM-memory           
                                    */
                       1004 ; util.c    272 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                       1005 ; util.c    273 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                       1006 ; util.c    274 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                       1007 ; util.c    275 /**************************************************************************/
                       1008 ; util.c    276 char* Cstrcpy( char* to, register char code * from)
                       1009 ; util.c    277 {
00032D 00              1010         ALIGN   1
                       1012         PUBLIC  _Cstrcpy
00032E                 1013 _Cstrcpy:
00032E 0F30            1017         PUSH.W  R4, R5
000330 A97C            1019         ADDS.W  R7,#0CH
                       1027 ; util.c    278         register char*  cp;
                       1028 ; util.c    279 
                       1029 ; util.c    280         for ( cp=to; *from; *cp++ = *from++ )
000332 8951            1031         MOV.W   R5,R1
000334 8940            1032         MOV.W   R4,R0
000336 8C3F02          1034         MOV.W   [R7+2],R3
000339 8A2F            1035         MOV.W   [R7],R2
00033B 866C43          1036         MOV.B   CS,R3L
00033E 8062            1037         MOVC.B  R3L,[R2+]
000340 F316            1038         BEQ     _48
000340 F316            1038         BEQ     _48
000342                 1039 _47:
000342 8C3702          1040         MOV.W   R3,[R7+2]
000345 8A27            1041         MOV.W   R2,[R7]
000347 866C43          1042         MOV.B   CS,R3L
00034A 8062            1043         MOVC.B  R3L,[R2+]
00034C 86AC42          1044         MOV.B   ES,R5L
00034F 826C            1045         MOV.B   [R4],R3L
000351 8C3702          1046         MOV.W   R3,[R7+2]
000354 8A27            1047         MOV.W   R2,[R7]
000356 99200001        1048         ADD.W   R2,#01H
00035A 99310000        1049         ADDC.W  R3,#00H
00035E 99400001        1050         ADD.W   R4,#01H
000362 8C3F02          1053         MOV.W   [R7+2],R3
000365 8A2F            1054         MOV.W   [R7],R2
000367 866C43          1055         MOV.B   CS,R3L
00036A 8062            1056         MOVC.B  R3L,[R2+]
00036C F2EA            1057         BNE     _47
                       1058 ; util.c    281                 ;
00036E                 1060 _48:
                       1061 ; util.c    282 
                       1062 ; util.c    283         *cp = 0;
00036E 86AC42          1064         MOV.B   ES,R5L
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  16

ADDR   CODE            LINE SOURCELINE
000371 B240            1065         MOV.B   [R4],#00H
                       1066 ; util.c    284 
                       1067 ; util.c    285         return( to);
                       1068 ; util.c    286 }
000373 A974            1070         ADDS.W  R7,#04H
000375 2F30            1072         POP.W   R4, R5
000377 D680            1074         RET
                       1078 ; util.c    287 
                       1079 ; util.c    288 /**************************************************************************/
                       1080 ; util.c    289 /* Cstrcmp                                                                       
                                                                                                                             
                                                                                     UTIL.C */
                       1081 ; util.c    290 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1082 ; util.c    291 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                       1083 ; util.c    292 /* Revised:             970105                                                   
                                                                                                                             
                                                                            */
                       1084 ; util.c    293 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1085 ; util.c    294 /* Function:    Compare a string in code-memory to a string in RAM-memory        
                                    */
                       1086 ; util.c    295 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                       1087 ; util.c    296 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                       1088 ; util.c    297 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                       1089 ; util.c    298 /**************************************************************************/
                       1090 ; util.c    299 int Cstrcmp( register const char * s1, register char code * s2)
                       1091 ; util.c    300 {
000379 00              1092         ALIGN   1
                       1094         PUBLIC  _Cstrcmp
00037A                 1095 _Cstrcmp:
00037A 0F70            1099         PUSH.W  R4, R5, R6
                       1107 ; util.c    301         register signed char    r;
                       1108 ; util.c    302 
                       1109 ; util.c    303         while( !(r = *s1 - *s2++) && *s1++)
00037C 862C42          1111         MOV.B   ES,R1L
00037F 82C0            1112         MOV.B   R6L,[R0]
000381 8953            1113         MOV.W   R5,R3
000383 8942            1114         MOV.W   R4,R2
000385 86AC43          1115         MOV.B   CS,R5L
000388 80A4            1116         MOVC.B  R5L,[R4+]
00038A 818C            1117         MOV.B   R4L,R6L
00038C 218A            1118         SUB.B   R4L,R5L
00038E 99200001        1120         ADD.W   R2,#01H
000392 99310000        1121         ADDC.W  R3,#00H
000396 6188            1123         OR.B    R4L,R4L
000398 F21D            1124         BNE     _52
00039A 862C42          1125         MOV.B   ES,R1L
00039D 8290            1126         MOV.B   R4H,[R0]
00039F 99000001        1127         ADD.W   R0,#01H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  17

ADDR   CODE            LINE SOURCELINE
0003A3 6199            1129         OR.B    R4H,R4H
0003A5 F317            1130         BEQ     _52
0003A5 F31700          1130         BEQ     _52
0003A8                 1131 _49:
0003A8 862C42          1132         MOV.B   ES,R1L
0003AB 82C0            1133         MOV.B   R6L,[R0]
0003AD 8953            1134         MOV.W   R5,R3
0003AF 8942            1135         MOV.W   R4,R2
0003B1 86AC43          1136         MOV.B   CS,R5L
0003B4 80A4            1137         MOVC.B  R5L,[R4+]
0003B6 21CA            1138         SUB.B   R6L,R5L
0003B8 818C            1139         MOV.B   R4L,R6L
0003BA 99200001        1142         ADD.W   R2,#01H
0003BE 99310000        1143         ADDC.W  R3,#00H
0003C2 6188            1146         OR.B    R4L,R4L
0003C4 F207            1147         BNE     _52
0003C6 862C42          1148         MOV.B   ES,R1L
0003C9 8290            1149         MOV.B   R4H,[R0]
0003CB 99000001        1150         ADD.W   R0,#01H
0003CF 6199            1153         OR.B    R4H,R4H
0003D1 F2EB            1154         BNE     _49
                       1155 ; util.c    304                 continue;
0003D4                 1157 _52:
                       1158 ; util.c    305 
                       1159 ; util.c    306         return( r);
0003D4 8108            1161         MOV.B   R0L,R4L
0003D6 9019            1162         SEXT.B  R0H
                       1164 ; util.c    307 }
0003D8 2F70            1166         POP.W   R4, R5, R6
0003DA D680            1168         RET
                       1172 ; util.c    308 
                       1173 ; util.c    309 /**************************************************************************/
                       1174 ; util.c    310 /* Cstrncmp                                                                      
                                                                                                                             
                                                             UTIL.C */
                       1175 ; util.c    311 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1176 ; util.c    312 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                       1177 ; util.c    313 /* Revised:       970105                                                         
                                                                                                                             
                                                                            */
                       1178 ; util.c    314 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1179 ; util.c    315 /* Function:    Compare a string in code-memory to a string in RAM-memory        
                                    */
                       1180 ; util.c    316 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                       1181 ; util.c    317 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                       1182 ; util.c    318 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                       1183 ; util.c    319 /**************************************************************************/
                       1184 ; util.c    320 int Cstrncmp( register const char * s1, register char code * s2, size_t len)
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  18

ADDR   CODE            LINE SOURCELINE
                       1185 ; util.c    321 {
                       1186         ALIGN   1
                       1188         PUBLIC  _Cstrncmp
0003DC                 1189 _Cstrncmp:
0003DC 0F50            1193         PUSH.W  R4, R6
0003DE A97C            1195         ADDS.W  R7,#0CH
0003E0 8C3F02          1198         MOV.W   [R7+2],R3
0003E3 8A2F            1199         MOV.W   [R7],R2
                       1205 ; util.c    322         while( len--)
0003E5 8926            1207         MOV.W   R2,R6
0003E7 A96F            1210         ADDS.W  R6,#0FH
0003E9 6922            1213         OR.W    R2,R2
0003EB F32B            1214         BEQ     _56
0003EB F32B00          1214         BEQ     _56
0003EE                 1215 _53:
                       1216 ; util.c    323         {
                       1217 ; util.c    324                 if ( *s1 == 0 || *s1 != *s2)
0003EE 862C42          1219         MOV.B   ES,R1L
0003F1 8280            1220         MOV.B   R4L,[R0]
0003F3 F309            1221         BEQ     _54
0003F5 8C3702          1222         MOV.W   R3,[R7+2]
0003F8 8A27            1223         MOV.W   R2,[R7]
0003FA 866C43          1224         MOV.B   CS,R3L
0003FD 8062            1225         MOVC.B  R3L,[R2+]
0003FF 862C42          1226         MOV.B   ES,R1L
000402 4268            1227         CMP.B   [R0],R3L
000404 F30C            1228         BEQ     _55
000404 F30C            1228         BEQ     _55
000406                 1229 _54:
                       1230 ; util.c    325                         return( *s1 - *s2);
000406 8148            1232         MOV.B   R2L,R4L
000408 9059            1233         SEXT.B  R2H
00040A 8C1702          1234         MOV.W   R1,[R7+2]
00040D 8A07            1235         MOV.W   R0,[R7]
00040F 862C43          1236         MOV.B   CS,R1L
000412 8020            1237         MOVC.B  R1L,[R0+]
000414 8102            1238         MOV.B   R0L,R1L
000416 9019            1239         SEXT.B  R0H
000418 2920            1240         SUB.W   R2,R0
00041A 8902            1241         MOV.W   R0,R2
00041C FE13            1242         BR      _57
00041C FE13            1242         BR      _57
00041E                 1243 _55:
                       1246 ; util.c    326 
                       1247 ; util.c    327                 s1++;
00041E 99000001        1249         ADD.W   R0,#01H
                       1250 ; util.c    328                 s2++;
000422 8C3702          1252         MOV.W   R3,[R7+2]
000425 8A27            1253         MOV.W   R2,[R7]
000427 99200001        1254         ADD.W   R2,#01H
00042B 99310000        1255         ADDC.W  R3,#00H
00042F 8C3F02          1256         MOV.W   [R7+2],R3
000432 8A2F            1257         MOV.W   [R7],R2
000434 8C3702          1258         MOV.W   R3,[R7+2]
000437 8A27            1259         MOV.W   R2,[R7]
000439 8926            1261         MOV.W   R2,R6
00043B A96F            1264         ADDS.W  R6,#0FH
00043D 6922            1267         OR.W    R2,R2
00043F F2D7            1268         BNE     _53
                       1269 ; util.c    329         }
000442                 1271 _56:
                       1272 ; util.c    330 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  19

ADDR   CODE            LINE SOURCELINE
                       1273 ; util.c    331         return( 0);
000442 B900            1275         MOV.W   R0,#00H
                       1276 ; util.c    332 }
000444                 1278 _57:
000444 A974            1279         ADDS.W  R7,#04H
000446 2F50            1281         POP.W   R4, R6
000448 D680            1283         RET
                       1286 ; util.c    333 
                       1287 ; util.c    334 /**************************************************************************/
                       1288 ; util.c    335 /* ValidateDate                                                                  
                                                                                                                             
                                             UTIL.C */
                       1289 ; util.c    336 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1290 ; util.c    337 /* Author:              Kim Engedahl, DEV, 000504                                
                                                                                                                            *
                            /
                       1291 ; util.c    338 /* Revised:       000504                                                         
                                                                                                                             
                                                                            */
                       1292 ; util.c    339 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1293 ; util.c    340 /* Function:    --                                                               
                                                                                                                             
                                                                                                    */
                       1294 ; util.c    341 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                       1295 ; util.c    342 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                       1296 ; util.c    343 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                       1297 ; util.c    344 /**************************************************************************/
                       1298 ; util.c    345 int ValidateDate( UI year, UI month, UI day)
                       1299 ; util.c    346 {
                       1300         ALIGN   1
                       1302         PUBLIC  _ValidateDate
00044A                 1303 _ValidateDate:
                       1313 ; util.c    347         switch ( month)
00044A 99140001        1315         CMP.W   R1,#01H
00044E F313            1316         BEQ     _64
000450 99140003        1317         CMP.W   R1,#03H
000454 F310            1318         BEQ     _64
000456 99140005        1319         CMP.W   R1,#05H
00045A F30D            1320         BEQ     _64
00045C 99140007        1321         CMP.W   R1,#07H
000460 F30A            1322         BEQ     _64
000462 99140009        1323         CMP.W   R1,#09H
000466 F307            1324         BEQ     _64
000468 9914000B        1325         CMP.W   R1,#0BH
00046C F304            1326         BEQ     _64
00046E 99140002        1327         CMP.W   R1,#02H
000472 F306            1328         BEQ     _65
000474 FE14            1329         BR      _67
                       1330 ; util.c    348         {
                       1331 ; util.c    349                 case January:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  20

ADDR   CODE            LINE SOURCELINE
                       1332 ; util.c    350                 case March:
                       1333 ; util.c    351                 case May:
                       1334 ; util.c    352                 case July:
                       1335 ; util.c    353                 case September:
                       1336 ; util.c    354                 case November:
000476                 1338 _64:
                       1339 ; util.c    355                         if ( day > 31)
000476 9924001F        1341         CMP.W   R2,#01FH
00047A F916            1342         BL      _71
                       1343 ; util.c    356                                 return( FAIL);
00047C B900            1345         MOV.W   R0,#00H
00047E D680            1347         RET
                       1348 ; util.c    357                         break;
                       1349 ; util.c    358 
                       1350 ; util.c    359                 case February:
000480                 1352 _65:
                       1356 ; util.c    360                         if ( year % 4)
000480 7911            1358         XOR.W   R1,R1
000482 E9010004        1359         DIVU.D  R0,#04H
000486 6911            1361         OR.W    R1,R1
000488 F305            1362         BEQ     _66
                       1363 ; util.c    361                         {
                       1364 ; util.c    362                                 if ( day > 29)
00048A 9924001D        1366         CMP.W   R2,#01DH
00048E F90C            1367         BL      _71
                       1368 ; util.c    363                                         return( FAIL);
000490 B900            1370         MOV.W   R0,#00H
000492 D680            1372         RET
                       1373 ; util.c    364                         }
000494                 1375 _66:
                       1378 ; util.c    365                         else
                       1379 ; util.c    366                         {
                       1380 ; util.c    367                                 if ( day > 28)
000494 9924001C        1382         CMP.W   R2,#01CH
000498 F907            1383         BL      _71
                       1384 ; util.c    368                                         return( FAIL);
00049A B900            1386         MOV.W   R0,#00H
00049C D680            1387         RET
                       1388 ; util.c    369                         }
                       1389 ; util.c    370                         break;
                       1390 ; util.c    371 
                       1391 ; util.c    372                 default:
00049E                 1393 _67:
                       1396 ; util.c    373                         if ( day > 30)
00049E 9924001E        1398         CMP.W   R2,#01EH
0004A2 F902            1399         BL      _71
                       1400 ; util.c    374                                 return( FAIL);
0004A4 B900            1402         MOV.W   R0,#00H
0004A6 D680            1403         RET
                       1404 ; util.c    375                         break;
                       1405 ; util.c    376         }
0004A8                 1407 _71:
                       1408 ; util.c    377 
                       1409 ; util.c    378         return( OK);
0004A8 9908FFFF        1411         MOV.W   R0,#0FFFFH
                       1412 ; util.c    379 }
0004AC                 1414 _75:
0004AC D680            1415         RET
                       1418 ; util.c    380 
                       1419 ; util.c    381 /**************************************************************************/
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  21

ADDR   CODE            LINE SOURCELINE
                       1420 ; util.c    382 /* ROMChecksum                                                                   
                                                                                                                             
                                             UTIL.C */
                       1421 ; util.c    383 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1422 ; util.c    384 /* Author:              Kim Engedahl, DEV, 000705                                
                                                                                                                            *
                            /
                       1423 ; util.c    385 /* Revised:       000705                                                         
                                                                                                                             
                                                                            */
                       1424 ; util.c    386 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1425 ; util.c    387 /* Function:    --                                                               
                                                                                                                             
                                                                                                    */
                       1426 ; util.c    388 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                       1427 ; util.c    389 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                       1428 ; util.c    390 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                       1429 ; util.c    391 /**************************************************************************/
                       1430 ; util.c    392 UI ROMChecksum( UL start_addr, UL end_addr)
                       1431 ; util.c    393 {
                       1432         ALIGN   1
                       1434         PUBLIC  _ROMChecksum
0004AE                 1435 _ROMChecksum:
0004AE 0F70            1439         PUSH.W  R4, R5, R6
                       1453 ; util.c    394         _rom UC *Sptr;
                       1454 ; util.c    395         _rom UC *Eptr;
                       1455 ; util.c    396 
                       1456 ; util.c    397         UI CalcChecksum = 0;
0004B0 B960            1458         MOV.W   R6,#00H
                       1460 ; util.c    398 
                       1461 ; util.c    399         Sptr = ( _rom UC *) ( start_addr);
0004B2 8951            1463         MOV.W   R5,R1
0004B4 8940            1464         MOV.W   R4,R0
0004B6 8915            1465         MOV.W   R1,R5
0004B8 8904            1466         MOV.W   R0,R4
                       1471 ; util.c    400         Eptr = ( _rom UC *) ( end_addr);
                       1472 ; util.c    401 
                       1473 ; util.c    402         while ( Sptr <= Eptr)
0004BA 4953            1475         CMP.W   R5,R3
0004BC F201            1476         BNE     _82
0004BE 4942            1477         CMP.W   R4,R2
0004BE 4942            1477         CMP.W   R4,R2
0004C0                 1478 _82:
0004C0 F80F            1479         BG      _81
0004C0 F80F            1479         BG      _81
0004C2                 1480 _80:
                       1481 ; util.c    403                 CalcChecksum += *Sptr++;
0004C2 8951            1483         MOV.W   R5,R1
0004C4 8940            1484         MOV.W   R4,R0
0004C6 86AC43          1485         MOV.B   CS,R5L
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  22

ADDR   CODE            LINE SOURCELINE
0004C9 80A4            1486         MOVC.B  R5L,[R4+]
0004CB B1B0            1487         MOVS.B  R5H,#00H
0004CD 0965            1488         ADD.W   R6,R5
0004CF 99000001        1491         ADD.W   R0,#01H
0004D3 99110000        1492         ADDC.W  R1,#00H
0004D7 4913            1496         CMP.W   R1,R3
0004D9 F202            1497         BNE     _83
0004DB 4902            1498         CMP.W   R0,R2
0004DB 490200          1498         CMP.W   R0,R2
0004DE                 1499 _83:
0004DE F9F1            1500         BL      _80
0004E0                 1502 _81:
                       1503 ; util.c    404 
                       1504 ; util.c    405         return( CalcChecksum);
0004E0 8906            1506         MOV.W   R0,R6
                       1510 ; util.c    406 }
0004E2 2F70            1512         POP.W   R4, R5, R6
0004E4 D680            1514         RET
                       1520         EXTRN   HCODE(__UMODL)
                       1523         EXTRN   HCODE(_toupper)
000000                 1524 UTIL_INI_FA     SEGMENT HDATA INSEGMENT INIT
000000                 1525         RSEG    UTIL_INI_FA
000000 3000            1526 _22:    DB      030H,000H
                       1529         EXTRN   HCODE(_strcpy)
                       1530         EXTRN   HCODE(__UDIVL)
                       1531         EXTRN   DATA(__lc_ub_xvwbuffer)
                       1532         EXTRN   DATA(__lc_ue_xvwbuffer)
                       1533         CALLS   'HexToByte', 'toupper'
                       1534         CALLS   'htol', 'HexToByte'
                       1535         CALLS   '_ultoa', 'strcpy'
