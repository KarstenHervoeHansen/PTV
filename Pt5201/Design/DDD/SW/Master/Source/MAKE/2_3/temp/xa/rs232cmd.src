; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -I..\..\rtxcdef\xa
;          -I..\..\rtxc\xa\include -I..\..\code\include\1_1 -I..\..\app_spec\xa
;          -Ml -O2 -s
$CASE
$NOZPAGE
	NAME	RS232CMD
	SYMB	TOOL, "XA C compiler v2.0", 1
	SYMB	TYPE, 256, "bit", 'g', 0, 1
	SYMB	FILE, "..\\..\\code\\interp\\1_8\\rs232cmd.c"
; rs232cmd.c    1	/* MODULE:                                                                  */
; rs232cmd.c    2	/*   r232cmd.c - RS232 remote commands.                            			 */
; rs232cmd.c    3	/****************************************************************************/
; rs232cmd.c    4	/* FUNCTIONS:                                                               */
; rs232cmd.c    5	/*                                                                          */
; rs232cmd.c    6	/* TASKS:                                                                   */
; rs232cmd.c    7	/*                                                                          */
; rs232cmd.c    8	/* NOTES:                                                                   */
; rs232cmd.c    9	/*                                                                          */
; rs232cmd.c   10	/****************************************************************************/
; rs232cmd.c   11	/*
; rs232cmd.c   12	 *   PTV software for PT5201
; rs232cmd.c   13	 *   Copyright (c) 
; rs232cmd.c   14	 *   ProTeleVision Technologies A/S.
; rs232cmd.c   15	 *   ALL RIGHTS RESERVED
; rs232cmd.c   16	*/
; rs232cmd.c   17	/****************************************************************************/
; rs232cmd.c   18	
; rs232cmd.c   19	/****************************************************************************/
; rs232cmd.c   20	/* Include files:							  													 */
; rs232cmd.c   21	
; rs232cmd.c   22	#include <string.h>
	SYMB	FILE, "c:\\cxa\\include\\string.h"
	SYMB	TYPE, 257, "size_t", 'T', #18
	SYMB	ENDF
; rs232cmd.c   23	#include <ctype.h>
	SYMB	FILE, "c:\\cxa\\include\\ctype.h"
	SYMB	ENDF
; rs232cmd.c   24	#include <stdio.h>
	SYMB	FILE, "c:\\cxa\\include\\stdio.h"
	SYMB	FILE, "c:\\cxa\\include\\stdarg.h"
	SYMB	ENDF
	SYMB	TYPE, 258, 'n', #2, 130
	SYMB	TYPE, 259, 'P', #258
	SYMB	TYPE, 260, "_iobuf", 'S', 14,\
		 "_ptr", #259, 0,\
		 "_cnt", #16, 4,\
		 "_base", #259, 6,\
		 "_flag", #2, 10,\
		 "_file", #2, 11,\
		 "_bufsiz", #16, 12
	SYMB	TYPE, 261, "FILE", 'T', #260
	SYMB	TYPE, 262, 'n', #1, 130
	SYMB	TYPE, 263, 'P', #262
	SYMB	TYPE, 264, 'Z', #263, 0
	SYMB	TYPE, 266, "va_list", 'T', #264
	SYMB	TYPE, 267, "fpos_t", 'T', #7
	SYMB	ENDF
; rs232cmd.c   25	#include <stdlib.h>
	SYMB	FILE, "c:\\cxa\\include\\stdlib.h"
	SYMB	FILE, "c:\\cxa\\include\\limits.h"
	SYMB	ENDF
	SYMB	TYPE, 268, 'S', 4,\
		 "quot", #16, 0,\
		 "rem", #16, 2
	SYMB	TYPE, 269, "div_t", 'T', #268
	SYMB	TYPE, 270, 'S', 8,\
		 "quot", #6, 0,\
		 "rem", #6, 4
	SYMB	TYPE, 271, "ldiv_t", 'T', #270
	SYMB	TYPE, 272, "wchar_t", 'T', #5
	SYMB	ENDF
; rs232cmd.c   26	#include <math.h>
	SYMB	FILE, "c:\\cxa\\include\\math.h"
	SYMB	ENDF
; rs232cmd.c   27	
; rs232cmd.c   28	#include "config.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\config.h"
	SYMB	ENDF
; rs232cmd.c   29	#include "define.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\define.h"
	SYMB	ENDF
; rs232cmd.c   30	#include "rtxcobj.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\rtxcobj.h"
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\rtxcapi.h"
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\typedef.h"
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 273, "KOBJNUM", 'T', #3
	SYMB	TYPE, 274, "TASK", 'T', #2
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\rtxstruc.h"
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 275, "KSNUM", 'T', #3
	SYMB	TYPE, 276, "PRIORITY", 'T', #274
	SYMB	TYPE, 277, "TSTATE", 'T', #5
	SYMB	TYPE, 278, "TSLICE", 'T', #3
	SYMB	TYPE, 280, 'n', #279, 130
	SYMB	TYPE, 281, 'P', #280
	SYMB	TYPE, 283, 'n', #282, 130
	SYMB	TYPE, 284, 'P', #283
	SYMB	TYPE, 285, 'n', #275, 130
	SYMB	TYPE, 286, 'P', #285
	SYMB	TYPE, 287, 'X', 12, #1, 30, 0
	SYMB	TYPE, 288, 'n', #287, 129
	SYMB	TYPE, 289, 'P', #288
	SYMB	TYPE, 290, "frame", 'S', 24,\
		 "es", #3, 0,\
		 "cs", #3, 1,\
		 "ssel", #3, 2,\
		 "ds", #3, 3,\
		 "pksnum", #286, 4,\
		 "R2", #18, 8,\
		 "R3", #18, 10,\
		 "R4", #18, 12,\
		 "R5", #18, 14,\
		 "R6", #18, 16,\
		 "psw", #18, 18,\
		 "pc", #289, 20
	SYMB	TYPE, 291, 'n', #290, 130
	SYMB	TYPE, 292, 'P', #291
	SYMB	TYPE, 293, 'X', 12, #1, 30, 0
	SYMB	TYPE, 294, 'n', #293, 129
	SYMB	TYPE, 295, 'P', #294
	SYMB	TYPE, 279, "tcb", 'S', 36,\
		 "flink", #281, 0,\
		 "blink", #281, 4,\
		 "pclkblk", #284, 8,\
		 "task", #274, 12,\
		 "priority", #276, 13,\
		 "sp", #292, 14,\
		 "status", #277, 18,\
		 "pc_t0", #295, 20,\
		 "stackbase", #259, 24,\
		 "stacksize", #257, 28,\
		 "tslice", #278, 30,\
		 "newslice", #278, 31,\
		 "arg", #263, 32
	SYMB	TYPE, 296, "TCB", 'T', #279
	SYMB	TYPE, 297, "SEMA", 'T', #273
	SYMB	TYPE, 298, "MAP", 'T', #273
	SYMB	TYPE, 300, 'n', #299, 130
	SYMB	TYPE, 301, 'P', #300
	SYMB	TYPE, 299, "rtxcmsg", 'S', 8,\
		 "link", #301, 0,\
		 "task", #274, 4,\
		 "priority", #276, 5,\
		 "sema", #297, 6
	SYMB	TYPE, 302, "RTXCMSG", 'T', #299
	SYMB	TYPE, 303, "TICKS", 'T', #16
	SYMB	TYPE, 304, 'N',\
		 "DELAY_OBJ", 0,\
		 "SEMAPHORE_OBJ", 1,\
		 "PARTITION_OBJ", 2,\
		 "QUEUE_OBJ", 3,\
		 "RESOURCE_OBJ", 4,\
		 "MAILBOX_OBJ", 5,\
		 "TIMER_OBJ", 6
	SYMB	TYPE, 305, "OBJTYPE", 'T', #304
	SYMB	TYPE, 282, "clkblk", 'S', 18,\
		 "flink", #284, 0,\
		 "blink", #284, 4,\
		 "remain", #303, 8,\
		 "recycle", #303, 10,\
		 "task", #274, 12,\
		 "state", #2, 13,\
		 "objtype", #305, 14,\
		 "objid", #273, 16
	SYMB	TYPE, 306, 'N',\
		 "PRIORITY_INVERSION_OFF", 0,\
		 "PRIORITY_INVERSION_ON", 1
	SYMB	TYPE, 307, "RESATTR", 'T', #306
	SYMB	ENDF
	SYMB	TYPE, 308, 'N',\
		 "RC_GOOD", 0,\
		 "RC_WAIT_CONFLICT", 1,\
		 "RC_NO_TIMERS", 2,\
		 "RC_TIMER_INACTIVE", 3,\
		 "RC_TIMER_ILLEGAL", 4,\
		 "RC_TIMEOUT", 5,\
		 "RC_QUEUE_FULL", 6,\
		 "RC_QUEUE_EMPTY", 7,\
		 "RC_ILLEGAL_QUEUE_SIZE", 8,\
		 "RC_BUSY", 9,\
		 "RC_NESTED", 10,\
		 "RC_ILLEGAL_TASK", 11,\
		 "RC_ACTIVE_TASK", 12,\
		 "RC_NO_YIELD", 13,\
		 "RC_MISSED_EVENT", 14
	SYMB	TYPE, 309, "KSRC", 'T', #308
	SYMB	TYPE, 310, "SSTATE", 'T', #274
	SYMB	TYPE, 311, "MBOX", 'T', #273
	SYMB	TYPE, 312, "QUEUE", 'T', #273
	SYMB	TYPE, 313, 'N',\
		 "QNE", 0,\
		 "QNF", 1,\
		 "QF", 2,\
		 "QE", 3
	SYMB	TYPE, 314, "QCOND", 'T', #313
	SYMB	TYPE, 315, "RESOURCE", 'T', #273
	SYMB	TYPE, 316, "CLKBLK", 'T', #282
	SYMB	TYPE, 317, "time_t", 'T', #6
	SYMB	TYPE, 318, "FRAME", 'T', #290
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\ctask.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\csema.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cres.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cqueue.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cpart.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cmbox.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cclock.h"
	SYMB	ENDF
	SYMB	TYPE, 320, 'n', #319, 130
	SYMB	TYPE, 321, 'P', #320
	SYMB	TYPE, 319, 'X', 12, #1, 30, 2, #321, #259
	SYMB	TYPE, 323, 'n', #322, 129
	SYMB	TYPE, 324, 'P', #323
	SYMB	TYPE, 325, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 326, 'n', #325, 129
	SYMB	TYPE, 327, 'P', #326
	SYMB	TYPE, 328, 'n', #6, 130
	SYMB	TYPE, 329, 'P', #328
	SYMB	TYPE, 328, 'X', 12, #16, 30, 2, #321, #329
	SYMB	TYPE, 331, 'n', #330, 129
	SYMB	TYPE, 332, 'P', #331
	SYMB	TYPE, 333, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 334, 'n', #333, 129
	SYMB	TYPE, 335, 'P', #334
	SYMB	TYPE, 336, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 337, 'n', #336, 129
	SYMB	TYPE, 338, 'P', #337
	SYMB	TYPE, 339, 'X', 12, #16, 30, 1, #321
	SYMB	TYPE, 340, 'n', #339, 129
	SYMB	TYPE, 341, 'P', #340
	SYMB	TYPE, 319, "TEvent", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TEvent", #324, 2,\
		 "_TEvent", #327, 6,\
		 "Wait", #332, 10,\
		 "Set", #335, 14,\
		 "Clear", #338, 18,\
		 "IsSet", #341, 22,\
		 "ID", #297, 26,\
		 "Name", #259, 28
	SYMB	TYPE, 342, "TEvent", 'T', #319
	SYMB	TYPE, 344, 'n', #343, 130
	SYMB	TYPE, 345, 'P', #344
	SYMB	TYPE, 343, 'X', 12, #1, 30, 1, #345
	SYMB	TYPE, 347, 'n', #346, 129
	SYMB	TYPE, 348, 'P', #347
	SYMB	TYPE, 349, 'X', 12, #1, 30, 1, #345
	SYMB	TYPE, 350, 'n', #349, 129
	SYMB	TYPE, 351, 'P', #350
	SYMB	TYPE, 352, 'n', #342, 130
	SYMB	TYPE, 353, 'P', #352
	SYMB	TYPE, 352, 'X', 12, #16, 30, 2, #345, #353
	SYMB	TYPE, 355, 'n', #354, 129
	SYMB	TYPE, 356, 'P', #355
	SYMB	TYPE, 357, 'X', 12, #1, 30, 2, #345, #353
	SYMB	TYPE, 358, 'n', #357, 129
	SYMB	TYPE, 359, 'P', #358
	SYMB	TYPE, 360, 'X', 12, #16, 30, 2, #345, #353
	SYMB	TYPE, 361, 'n', #360, 129
	SYMB	TYPE, 362, 'P', #361
	SYMB	TYPE, 363, 'X', 12, #353, 30, 2, #345, #329
	SYMB	TYPE, 364, 'n', #363, 129
	SYMB	TYPE, 365, 'P', #364
	SYMB	TYPE, 366, 'Z', #2, 95
	SYMB	TYPE, 343, "TEventList", 'S', 122,\
		 "ObjectID", #16, 0,\
		 "TEventList", #348, 2,\
		 "_TEventList", #351, 6,\
		 "Append", #356, 10,\
		 "Clear", #359, 14,\
		 "InList", #362, 18,\
		 "Wait", #365, 22,\
		 "Align", #366, 26
	SYMB	TYPE, 368, "TEventList", 'T', #343
	SYMB	TYPE, 370, 'n', #369, 130
	SYMB	TYPE, 371, 'P', #370
	SYMB	TYPE, 369, 'X', 12, #1, 30, 2, #371, #259
	SYMB	TYPE, 373, 'n', #372, 129
	SYMB	TYPE, 374, 'P', #373
	SYMB	TYPE, 375, 'X', 12, #1, 30, 1, #371
	SYMB	TYPE, 376, 'n', #375, 129
	SYMB	TYPE, 377, 'P', #376
	SYMB	TYPE, 378, 'X', 12, #1, 30, 1, #371
	SYMB	TYPE, 379, 'n', #378, 129
	SYMB	TYPE, 380, 'P', #379
	SYMB	TYPE, 381, 'X', 12, #1, 30, 1, #371
	SYMB	TYPE, 382, 'n', #381, 129
	SYMB	TYPE, 383, 'P', #382
	SYMB	TYPE, 384, 'X', 12, #16, 30, 1, #371
	SYMB	TYPE, 385, 'n', #384, 129
	SYMB	TYPE, 386, 'P', #385
	SYMB	TYPE, 369, "TResource", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TResource", #374, 2,\
		 "_TResource", #377, 6,\
		 "Lock", #380, 10,\
		 "Unlock", #383, 14,\
		 "Owner", #386, 18,\
		 "ID", #315, 22,\
		 "Name", #259, 24
	SYMB	TYPE, 387, "TResource", 'T', #369
	SYMB	TYPE, 388, 'X', 12, #1, 30, 0
	SYMB	TYPE, 389, 'n', #388, 129
	SYMB	TYPE, 390, 'P', #389
	SYMB	TYPE, 392, 'n', #391, 130
	SYMB	TYPE, 393, 'P', #392
	SYMB	TYPE, 388, 'X', 12, #1, 30, 3, #393, #16, #390
	SYMB	TYPE, 395, 'n', #394, 129
	SYMB	TYPE, 396, 'P', #395
	SYMB	TYPE, 397, 'X', 12, #1, 30, 1, #393
	SYMB	TYPE, 398, 'n', #397, 129
	SYMB	TYPE, 399, 'P', #398
	SYMB	TYPE, 400, 'X', 12, #1, 30, 1, #393
	SYMB	TYPE, 401, 'n', #400, 129
	SYMB	TYPE, 402, 'P', #401
	SYMB	TYPE, 403, 'X', 12, #1, 30, 2, #393, #16
	SYMB	TYPE, 404, 'n', #403, 129
	SYMB	TYPE, 405, 'P', #404
	SYMB	TYPE, 406, 'X', 12, #1, 30, 1, #393
	SYMB	TYPE, 407, 'n', #406, 129
	SYMB	TYPE, 408, 'P', #407
	SYMB	TYPE, 409, 'X', 12, #16, 30, 1, #393
	SYMB	TYPE, 410, 'n', #409, 129
	SYMB	TYPE, 411, 'P', #410
	SYMB	TYPE, 412, 'X', 12, #1, 30, 2, #393, #16
	SYMB	TYPE, 413, 'n', #412, 129
	SYMB	TYPE, 414, 'P', #413
	SYMB	TYPE, 391, "TThread", 'S', 36,\
		 "ObjectID", #16, 0,\
		 "TThread", #396, 2,\
		 "Execute", #399, 6,\
		 "Terminate", #402, 10,\
		 "Suspend", #405, 14,\
		 "Resume", #408, 18,\
		 "GetPriority", #411, 22,\
		 "SetPriority", #414, 26,\
		 "ID", #274, 30,\
		 "Status", #2, 31,\
		 "Stack", #259, 32
	SYMB	TYPE, 415, "TThread", 'T', #391
	SYMB	TYPE, 417, 'n', #416, 130
	SYMB	TYPE, 418, 'P', #417
	SYMB	TYPE, 416, 'X', 12, #1, 30, 1, #418
	SYMB	TYPE, 420, 'n', #419, 129
	SYMB	TYPE, 421, 'P', #420
	SYMB	TYPE, 422, 'X', 12, #1, 30, 1, #418
	SYMB	TYPE, 423, 'n', #422, 129
	SYMB	TYPE, 424, 'P', #423
	SYMB	TYPE, 425, 'X', 12, #1, 30, 2, #418, #16
	SYMB	TYPE, 426, 'n', #425, 129
	SYMB	TYPE, 427, 'P', #426
	SYMB	TYPE, 428, 'X', 12, #16, 30, 1, #418
	SYMB	TYPE, 429, 'n', #428, 129
	SYMB	TYPE, 430, 'P', #429
	SYMB	TYPE, 431, 'X', 12, #1, 30, 2, #418, #16
	SYMB	TYPE, 432, 'n', #431, 129
	SYMB	TYPE, 433, 'P', #432
	SYMB	TYPE, 434, 'n', #316, 130
	SYMB	TYPE, 435, 'P', #434
	SYMB	TYPE, 416, "TTimer", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TTimer", #421, 2,\
		 "_TTimer", #424, 6,\
		 "SetPeriod", #427, 10,\
		 "GetPeriod", #430, 14,\
		 "Tick", #433, 18,\
		 "TimeOut", #353, 22,\
		 "Period", #4, 26,\
		 "Handle", #435, 28
	SYMB	TYPE, 436, "TTimer", 'T', #416
	SYMB	TYPE, 438, 'n', #437, 130
	SYMB	TYPE, 439, 'P', #438
	SYMB	TYPE, 437, 'X', 12, #1, 30, 3, #439, #16, #16
	SYMB	TYPE, 441, 'n', #440, 129
	SYMB	TYPE, 442, 'P', #441
	SYMB	TYPE, 443, 'X', 12, #1, 30, 1, #439
	SYMB	TYPE, 444, 'n', #443, 129
	SYMB	TYPE, 445, 'P', #444
	SYMB	TYPE, 446, 'X', 12, #259, 30, 2, #439, #263
	SYMB	TYPE, 447, 'n', #446, 129
	SYMB	TYPE, 448, 'P', #447
	SYMB	TYPE, 449, 'X', 12, #1, 30, 2, #439, #263
	SYMB	TYPE, 450, 'n', #449, 129
	SYMB	TYPE, 451, 'P', #450
	SYMB	TYPE, 437, "TStream", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TStream", #442, 2,\
		 "_TStream", #445, 6,\
		 "Get", #448, 10,\
		 "Put", #451, 14,\
		 "ID", #312, 18,\
		 "Width", #16, 20,\
		 "Depth", #16, 22,\
		 "Handle", #259, 24
	SYMB	TYPE, 452, "TStream", 'T', #437
	SYMB	ENDF
; rs232cmd.c   31	#include "rs232par.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\rs232par.h"
	SYMB	ENDF
; rs232cmd.c   32	#include "rs232err.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\rs232err.h"
	SYMB	ENDF
; rs232cmd.c   33	#include "rs232cmd.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\rs232cmd.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\define.h"
	SYMB	ENDF
	SYMB	ENDF
; rs232cmd.c   34	#include "util.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\util.h"
	SYMB	ENDF
; rs232cmd.c   35	#include "rs232.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\rs232.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\define.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_1\\rtxcobj.h"
	SYMB	ENDF
	SYMB	ENDF
; rs232cmd.c   36	#include "i2c_drv.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\i2c_drv.h"
	SYMB	ENDF
; rs232cmd.c   37	#include "sio0drv.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\sio0drv.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\define.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_1\\rtxcobj.h"
	SYMB	ENDF
	SYMB	ENDF
; rs232cmd.c   38	#include "instru.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\instru.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\nv_drv.h"
	SYMB	TYPE, 453, "NvPointer", 'T', #18
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_1\\genlock.h"
	SYMB	TYPE, 454, 'S', 6,\
		 "System", #3, 0,\
		 "Delay", #7, 2
	SYMB	TYPE, 455, "GenlockObject", 'T', #454
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_1\\bb.h"
	SYMB	TYPE, 456, 'S', 8,\
		 "System", #3, 0,\
		 "Delay", #7, 2,\
		 "ScHPhase", #16, 6
	SYMB	TYPE, 457, "BBObject", 'T', #456
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_1\\cbar.h"
	SYMB	TYPE, 458, 'S', 12,\
		 "System", #3, 0,\
		 "Pattern", #18, 2,\
		 "Delay", #7, 4,\
		 "ScHPhase", #16, 8,\
		 "EmbAudioSignal", #3, 10
	SYMB	TYPE, 459, "CBObject", 'T', #458
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_1\\audio.h"
	SYMB	TYPE, 460, 'S', 14,\
		 "System", #16, 0,\
		 "Signal", #16, 2,\
		 "Level", #16, 4,\
		 "Timing", #10, 6,\
		 "Frequency", #16, 10,\
		 "Click", #16, 12
	SYMB	TYPE, 461, "AudioObject", 'T', #460
	SYMB	ENDF
	SYMB	TYPE, 462, 'S', 32,\
		 "Date", #7, 0,\
		 "DACFactDate", #7, 4,\
		 "DACUserDate", #7, 8,\
		 "DACFactValue", #18, 12,\
		 "DACUserValue", #18, 14,\
		 "HPHZeroG", #7, 16,\
		 "PhaseG", #7, 20,\
		 "HPHZeroM", #7, 24,\
		 "PhaseM", #7, 28
	SYMB	TYPE, 463, "GenlockCalibrationObject", 'T', #462
	SYMB	TYPE, 464, 'S', 20,\
		 "Date", #7, 0,\
		 "PhaseG", #7, 4,\
		 "ScHPhaseG", #18, 8,\
		 "PhaseM", #7, 10,\
		 "ScHPhaseM", #18, 14,\
		 "DACGain", #3, 16,\
		 "DACOffset", #3, 17,\
		 "DACLevel", #3, 18
	SYMB	TYPE, 465, "BBCalibrationObject", 'T', #464
	SYMB	TYPE, 466, 'S', 20,\
		 "Date", #7, 0,\
		 "PhaseG", #7, 4,\
		 "ScHPhaseG", #3, 8,\
		 "PhaseM", #7, 10,\
		 "ScHPhaseM", #3, 14,\
		 "GainG", #3, 15,\
		 "ChromaGainG", #3, 16,\
		 "GainM", #3, 17,\
		 "ChromaGainM", #3, 18
	SYMB	TYPE, 467, "CBCalibrationObject", 'T', #466
	SYMB	TYPE, 468, 'S', 6,\
		 "Date", #7, 0,\
		 "AnalogLeftChannel", #3, 4,\
		 "AnalogRightChannel", #3, 5
	SYMB	TYPE, 469, "AudioCalibrationObject", 'T', #468
	SYMB	TYPE, 470, 'Z', #457, 2
	SYMB	TYPE, 472, 'Z', #461, 1
	SYMB	TYPE, 474, 'S', 74,\
		 "ActivePreset", #16, 0,\
		 "GenlockSetup", #455, 2,\
		 "BBSetup", #470, 8,\
		 "CBSetup", #459, 32,\
		 "AudioOutput", #16, 44,\
		 "AudioSetup", #472, 46
	SYMB	TYPE, 475, "SettingsObject", 'T', #474
	SYMB	TYPE, 476, 'Z', #2, 32
	SYMB	TYPE, 478, 'Z', #2, 8
	SYMB	TYPE, 480, 'Z', #2, 12
	SYMB	TYPE, 482, 'Z', #465, 2
	SYMB	TYPE, 484, 'S', 224,\
		 "Company", #476, 0,\
		 "Type", #476, 33,\
		 "KUNumber", #478, 66,\
		 "SWRevision", #478, 75,\
		 "NC12", #480, 84,\
		 "ResetSystem", #3, 97,\
		 "ProdDate", #7, 98,\
		 "UpdateDate", #7, 102,\
		 "GenlockCalibration", #463, 106,\
		 "BBCalibration", #482, 138,\
		 "CBCalibration", #467, 198,\
		 "AudioCalibration", #469, 218
	SYMB	TYPE, 485, "CalibrationObject", 'T', #484
	SYMB	ENDF
; rs232cmd.c   39	#include "tables.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\tables.h"
	SYMB	ENDF
; rs232cmd.c   40	#include "genlock.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\genlock.h"
	SYMB	ENDF
; rs232cmd.c   41	#include "bb.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\bb.h"
	SYMB	ENDF
; rs232cmd.c   42	#include "cbar.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\cbar.h"
	SYMB	ENDF
; rs232cmd.c   43	#include "audio.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\audio.h"
	SYMB	ENDF
; rs232cmd.c   44	#include "plddrv.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\plddrv.h"
	SYMB	ENDF
; rs232cmd.c   45	#include "unitprg.h"
	SYMB	FILE, "..\\..\\code\\include\\1_1\\unitprg.h"
	SYMB	TYPE, 486, 'N',\
		 "true", -1,\
		 "false", 0
	SYMB	TYPE, 487, "bool", 'T', #486
	SYMB	ENDF
; rs232cmd.c   46	
; rs232cmd.c   47	
; rs232cmd.c   48	UC code MasterSWVersion				 	= 23;
RS232CMD_RO	SEGMENT	HCODE ROMDATA
	RSEG	RS232CMD_RO
	SYMB	IDEN, "MasterSWVersion", _MasterSWVersion, #3, 129, 0
	SYMB	ALAB, _MasterSWVersion, #3
	PUBLIC	_MasterSWVersion
_MasterSWVersion:
; rs232cmd.c   49	
; rs232cmd.c   50	char code SystemVersionTxt[] 			= "1995.0";
	DB	017H
	SYMB	TYPE, 488, 'Z', #2, -1
	SYMB	IDEN, "SystemVersionTxt", _SystemVersionTxt, #488, 129, 0
	SYMB	ALAB, _SystemVersionTxt, #488
	PUBLIC	_SystemVersionTxt
_SystemVersionTxt:
; rs232cmd.c   51	char code PasswordText[] 				= "PASS5201";
	DB	031H,039H,039H,035H,02EH,030H,000H
	SYMB	IDEN, "PasswordText", _PasswordText, #488, 129, 0
	SYMB	ALAB, _PasswordText, #488
	PUBLIC	_PasswordText
_PasswordText:
; rs232cmd.c   52	
; rs232cmd.c   53	char code CLSCmdTxt[] 	      		= "CLS";
	DB	050H,041H,053H,053H,035H,032H,030H,031H,000H
	SYMB	IDEN, "CLSCmdTxt", _CLSCmdTxt, #488, 129, 0
	SYMB	ALAB, _CLSCmdTxt, #488
	PUBLIC	_CLSCmdTxt
_CLSCmdTxt:
; rs232cmd.c   54	char code ESECmdTxt[] 	      		= "ESE";
	DB	043H,04CH,053H,000H
	SYMB	IDEN, "ESECmdTxt", _ESECmdTxt, #488, 129, 0
	SYMB	ALAB, _ESECmdTxt, #488
	PUBLIC	_ESECmdTxt
_ESECmdTxt:
; rs232cmd.c   55	char code ESRCmdTxt[] 	      		= "ESR";
	DB	045H,053H,045H,000H
	SYMB	IDEN, "ESRCmdTxt", _ESRCmdTxt, #488, 129, 0
	SYMB	ALAB, _ESRCmdTxt, #488
	PUBLIC	_ESRCmdTxt
_ESRCmdTxt:
; rs232cmd.c   56	char code OPCCmdTxt[] 	      		= "OPC";
	DB	045H,053H,052H,000H
	SYMB	IDEN, "OPCCmdTxt", _OPCCmdTxt, #488, 129, 0
	SYMB	ALAB, _OPCCmdTxt, #488
	PUBLIC	_OPCCmdTxt
_OPCCmdTxt:
; rs232cmd.c   57	char code SRECmdTxt[] 	      		= "SRE";
	DB	04FH,050H,043H,000H
	SYMB	IDEN, "SRECmdTxt", _SRECmdTxt, #488, 129, 0
	SYMB	ALAB, _SRECmdTxt, #488
	PUBLIC	_SRECmdTxt
_SRECmdTxt:
; rs232cmd.c   58	char code STBCmdTxt[] 	      		= "STB";
	DB	053H,052H,045H,000H
	SYMB	IDEN, "STBCmdTxt", _STBCmdTxt, #488, 129, 0
	SYMB	ALAB, _STBCmdTxt, #488
	PUBLIC	_STBCmdTxt
_STBCmdTxt:
; rs232cmd.c   59	char code TSTCmdTxt[] 	      		= "TST";
	DB	053H,054H,042H,000H
	SYMB	IDEN, "TSTCmdTxt", _TSTCmdTxt, #488, 129, 0
	SYMB	ALAB, _TSTCmdTxt, #488
	PUBLIC	_TSTCmdTxt
_TSTCmdTxt:
; rs232cmd.c   60	char code WAICmdTxt[] 	      		= "WAI";
	DB	054H,053H,054H,000H
	SYMB	IDEN, "WAICmdTxt", _WAICmdTxt, #488, 129, 0
	SYMB	ALAB, _WAICmdTxt, #488
	PUBLIC	_WAICmdTxt
_WAICmdTxt:
; rs232cmd.c   61	char code RSTCmdTxt[] 	      		= "RST";
	DB	057H,041H,049H,000H
	SYMB	IDEN, "RSTCmdTxt", _RSTCmdTxt, #488, 129, 0
	SYMB	ALAB, _RSTCmdTxt, #488
	PUBLIC	_RSTCmdTxt
_RSTCmdTxt:
; rs232cmd.c   62	char code IDNCmdTxt[] 	      		= "IDN";
	DB	052H,053H,054H,000H
	SYMB	IDEN, "IDNCmdTxt", _IDNCmdTxt, #488, 129, 0
	SYMB	ALAB, _IDNCmdTxt, #488
	PUBLIC	_IDNCmdTxt
_IDNCmdTxt:
; rs232cmd.c   63	char code RCLCmdTxt[] 	      		= "RCL";
	DB	049H,044H,04EH,000H
	SYMB	IDEN, "RCLCmdTxt", _RCLCmdTxt, #488, 129, 0
	SYMB	ALAB, _RCLCmdTxt, #488
	PUBLIC	_RCLCmdTxt
_RCLCmdTxt:
; rs232cmd.c   64	char code SAVCmdTxt[] 	      		= "SAV";
	DB	052H,043H,04CH,000H
	SYMB	IDEN, "SAVCmdTxt", _SAVCmdTxt, #488, 129, 0
	SYMB	ALAB, _SAVCmdTxt, #488
	PUBLIC	_SAVCmdTxt
_SAVCmdTxt:
; rs232cmd.c   65	
; rs232cmd.c   66	char code SYSTEMCmdTxt[] 	   	  	= "SYSTEM";
	DB	053H,041H,056H,000H
	SYMB	IDEN, "SYSTEMCmdTxt", _SYSTEMCmdTxt, #488, 129, 0
	SYMB	ALAB, _SYSTEMCmdTxt, #488
	PUBLIC	_SYSTEMCmdTxt
_SYSTEMCmdTxt:
; rs232cmd.c   67	char code SYSTCmdTxt[] 		    	 	= "SYST";
	DB	053H,059H,053H,054H,045H,04DH,000H
	SYMB	IDEN, "SYSTCmdTxt", _SYSTCmdTxt, #488, 129, 0
	SYMB	ALAB, _SYSTCmdTxt, #488
	PUBLIC	_SYSTCmdTxt
_SYSTCmdTxt:
; rs232cmd.c   68	char code STATUSCmdTxt[] 			  	= "STATUS";
	DB	053H,059H,053H,054H,000H
	SYMB	IDEN, "STATUSCmdTxt", _STATUSCmdTxt, #488, 129, 0
	SYMB	ALAB, _STATUSCmdTxt, #488
	PUBLIC	_STATUSCmdTxt
_STATUSCmdTxt:
; rs232cmd.c   69	char code STATCmdTxt[] 	 			  	= "STAT";
	DB	053H,054H,041H,054H,055H,053H,000H
	SYMB	IDEN, "STATCmdTxt", _STATCmdTxt, #488, 129, 0
	SYMB	ALAB, _STATCmdTxt, #488
	PUBLIC	_STATCmdTxt
_STATCmdTxt:
; rs232cmd.c   70	char code DIAGNOSTICCmdTxt[]			= "DIAGNOSTIC";
	DB	053H,054H,041H,054H,000H
	SYMB	IDEN, "DIAGNOSTICCmdTxt", _DIAGNOSTICCmdTxt, #488, 129, 0
	SYMB	ALAB, _DIAGNOSTICCmdTxt, #488
	PUBLIC	_DIAGNOSTICCmdTxt
_DIAGNOSTICCmdTxt:
; rs232cmd.c   71	char code DIAGCmdTxt[] 	    			= "DIAG";
	DB	044H,049H,041H,047H,04EH,04FH,053H,054H,049H,043H,000H
	SYMB	IDEN, "DIAGCmdTxt", _DIAGCmdTxt, #488, 129, 0
	SYMB	ALAB, _DIAGCmdTxt, #488
	PUBLIC	_DIAGCmdTxt
_DIAGCmdTxt:
; rs232cmd.c   72	char code MONITORCmdTxt[]			  	= "MONITOR";
	DB	044H,049H,041H,047H,000H
	SYMB	IDEN, "MONITORCmdTxt", _MONITORCmdTxt, #488, 129, 0
	SYMB	ALAB, _MONITORCmdTxt, #488
	PUBLIC	_MONITORCmdTxt
_MONITORCmdTxt:
; rs232cmd.c   73	char code MONCmdTxt[] 	    			= "MON";
	DB	04DH,04FH,04EH,049H,054H,04FH,052H,000H
	SYMB	IDEN, "MONCmdTxt", _MONCmdTxt, #488, 129, 0
	SYMB	ALAB, _MONCmdTxt, #488
	PUBLIC	_MONCmdTxt
_MONCmdTxt:
; rs232cmd.c   74	char code INPUTCmdTxt[] 	 		  	= "INPUT";
	DB	04DH,04FH,04EH,000H
	SYMB	IDEN, "INPUTCmdTxt", _INPUTCmdTxt, #488, 129, 0
	SYMB	ALAB, _INPUTCmdTxt, #488
	PUBLIC	_INPUTCmdTxt
_INPUTCmdTxt:
; rs232cmd.c   75	char code INPCmdTxt[] 	 			  	= "INP";
	DB	049H,04EH,050H,055H,054H,000H
	SYMB	IDEN, "INPCmdTxt", _INPCmdTxt, #488, 129, 0
	SYMB	ALAB, _INPCmdTxt, #488
	PUBLIC	_INPCmdTxt
_INPCmdTxt:
; rs232cmd.c   76	char code OUTPUTCmdTxt[] 			  	= "OUTPUT";
	DB	049H,04EH,050H,000H
	SYMB	IDEN, "OUTPUTCmdTxt", _OUTPUTCmdTxt, #488, 129, 0
	SYMB	ALAB, _OUTPUTCmdTxt, #488
	PUBLIC	_OUTPUTCmdTxt
_OUTPUTCmdTxt:
; rs232cmd.c   77	char code OUTPCmdTxt[] 				  	= "OUTP";
	DB	04FH,055H,054H,050H,055H,054H,000H
	SYMB	IDEN, "OUTPCmdTxt", _OUTPCmdTxt, #488, 129, 0
	SYMB	ALAB, _OUTPCmdTxt, #488
	PUBLIC	_OUTPCmdTxt
_OUTPCmdTxt:
; rs232cmd.c   78	char code USERCmdTxt[]				  	= "USER";
	DB	04FH,055H,054H,050H,000H
	SYMB	IDEN, "USERCmdTxt", _USERCmdTxt, #488, 129, 0
	SYMB	ALAB, _USERCmdTxt, #488
	PUBLIC	_USERCmdTxt
_USERCmdTxt:
; rs232cmd.c   79	char code MEASURECmdTxt[]			  	= "MEASURE";
	DB	055H,053H,045H,052H,000H
	SYMB	IDEN, "MEASURECmdTxt", _MEASURECmdTxt, #488, 129, 0
	SYMB	ALAB, _MEASURECmdTxt, #488
	PUBLIC	_MEASURECmdTxt
_MEASURECmdTxt:
; rs232cmd.c   80	char code MEASCmdTxt[] 	    			= "MEAS";
	DB	04DH,045H,041H,053H,055H,052H,045H,000H
	SYMB	IDEN, "MEASCmdTxt", _MEASCmdTxt, #488, 129, 0
	SYMB	ALAB, _MEASCmdTxt, #488
	PUBLIC	_MEASCmdTxt
_MEASCmdTxt:
; rs232cmd.c   81	char code FACTORYCmdTxt[]			  	= "FACTORY";
	DB	04DH,045H,041H,053H,000H
	SYMB	IDEN, "FACTORYCmdTxt", _FACTORYCmdTxt, #488, 129, 0
	SYMB	ALAB, _FACTORYCmdTxt, #488
	PUBLIC	_FACTORYCmdTxt
_FACTORYCmdTxt:
; rs232cmd.c   82	char code FACTCmdTxt[] 	    			= "FACT";
	DB	046H,041H,043H,054H,04FH,052H,059H,000H
	SYMB	IDEN, "FACTCmdTxt", _FACTCmdTxt, #488, 129, 0
	SYMB	ALAB, _FACTCmdTxt, #488
	PUBLIC	_FACTCmdTxt
_FACTCmdTxt:
; rs232cmd.c   83	
; rs232cmd.c   84	char code ERRORCmdTxt[] 	     		= "ERROR";
	DB	046H,041H,043H,054H,000H
	SYMB	IDEN, "ERRORCmdTxt", _ERRORCmdTxt, #488, 129, 0
	SYMB	ALAB, _ERRORCmdTxt, #488
	PUBLIC	_ERRORCmdTxt
_ERRORCmdTxt:
; rs232cmd.c   85	char code ERRCmdTxt[] 		     		= "ERR";
	DB	045H,052H,052H,04FH,052H,000H
	SYMB	IDEN, "ERRCmdTxt", _ERRCmdTxt, #488, 129, 0
	SYMB	ALAB, _ERRCmdTxt, #488
	PUBLIC	_ERRCmdTxt
_ERRCmdTxt:
; rs232cmd.c   86	char code VERSIONCmdTxt[] 	    		= "VERSION";
	DB	045H,052H,052H,000H
	SYMB	IDEN, "VERSIONCmdTxt", _VERSIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _VERSIONCmdTxt, #488
	PUBLIC	_VERSIONCmdTxt
_VERSIONCmdTxt:
; rs232cmd.c   87	char code VERSCmdTxt[] 	      		= "VERS";
	DB	056H,045H,052H,053H,049H,04FH,04EH,000H
	SYMB	IDEN, "VERSCmdTxt", _VERSCmdTxt, #488, 129, 0
	SYMB	ALAB, _VERSCmdTxt, #488
	PUBLIC	_VERSCmdTxt
_VERSCmdTxt:
; rs232cmd.c   88	char code PRESETCmdTxt[] 				= "PRESET";
	DB	056H,045H,052H,053H,000H
	SYMB	IDEN, "PRESETCmdTxt", _PRESETCmdTxt, #488, 129, 0
	SYMB	ALAB, _PRESETCmdTxt, #488
	PUBLIC	_PRESETCmdTxt
_PRESETCmdTxt:
; rs232cmd.c   89	char code PRESCmdTxt[] 					= "PRES";
	DB	050H,052H,045H,053H,045H,054H,000H
	SYMB	IDEN, "PRESCmdTxt", _PRESCmdTxt, #488, 129, 0
	SYMB	ALAB, _PRESCmdTxt, #488
	PUBLIC	_PRESCmdTxt
_PRESCmdTxt:
; rs232cmd.c   90	char code EVENTLOGCmdTxt[]				= "EVENTLOG";
	DB	050H,052H,045H,053H,000H
	SYMB	IDEN, "EVENTLOGCmdTxt", _EVENTLOGCmdTxt, #488, 129, 0
	SYMB	ALAB, _EVENTLOGCmdTxt, #488
	PUBLIC	_EVENTLOGCmdTxt
_EVENTLOGCmdTxt:
; rs232cmd.c   91	char code DATECmdTxt[]					= "DATE";
	DB	045H,056H,045H,04EH,054H,04CH,04FH,047H,000H
	SYMB	IDEN, "DATECmdTxt", _DATECmdTxt, #488, 129, 0
	SYMB	ALAB, _DATECmdTxt, #488
	PUBLIC	_DATECmdTxt
_DATECmdTxt:
; rs232cmd.c   92	char code TIMECmdTxt[]					= "TIME";
	DB	044H,041H,054H,045H,000H
	SYMB	IDEN, "TIMECmdTxt", _TIMECmdTxt, #488, 129, 0
	SYMB	ALAB, _TIMECmdTxt, #488
	PUBLIC	_TIMECmdTxt
_TIMECmdTxt:
; rs232cmd.c   93	
; rs232cmd.c   94	char code RECALLCmdTxt[] 				= "RECALL";
	DB	054H,049H,04DH,045H,000H
	SYMB	IDEN, "RECALLCmdTxt", _RECALLCmdTxt, #488, 129, 0
	SYMB	ALAB, _RECALLCmdTxt, #488
	PUBLIC	_RECALLCmdTxt
_RECALLCmdTxt:
; rs232cmd.c   95	char code RECCmdTxt[] 					= "REC";
	DB	052H,045H,043H,041H,04CH,04CH,000H
	SYMB	IDEN, "RECCmdTxt", _RECCmdTxt, #488, 129, 0
	SYMB	ALAB, _RECCmdTxt, #488
	PUBLIC	_RECCmdTxt
_RECCmdTxt:
; rs232cmd.c   96	char code STORECmdTxt[] 				= "STORE";
	DB	052H,045H,043H,000H
	SYMB	IDEN, "STORECmdTxt", _STORECmdTxt, #488, 129, 0
	SYMB	ALAB, _STORECmdTxt, #488
	PUBLIC	_STORECmdTxt
_STORECmdTxt:
; rs232cmd.c   97	char code STORCmdTxt[] 					= "STOR";
	DB	053H,054H,04FH,052H,045H,000H
	SYMB	IDEN, "STORCmdTxt", _STORCmdTxt, #488, 129, 0
	SYMB	ALAB, _STORCmdTxt, #488
	PUBLIC	_STORCmdTxt
_STORCmdTxt:
; rs232cmd.c   98	char code NAMECmdTxt[] 					= "NAME";
	DB	053H,054H,04FH,052H,000H
	SYMB	IDEN, "NAMECmdTxt", _NAMECmdTxt, #488, 129, 0
	SYMB	ALAB, _NAMECmdTxt, #488
	PUBLIC	_NAMECmdTxt
_NAMECmdTxt:
; rs232cmd.c   99	char code AUTHORCmdTxt[] 				= "AUTHOR";
	DB	04EH,041H,04DH,045H,000H
	SYMB	IDEN, "AUTHORCmdTxt", _AUTHORCmdTxt, #488, 129, 0
	SYMB	ALAB, _AUTHORCmdTxt, #488
	PUBLIC	_AUTHORCmdTxt
_AUTHORCmdTxt:
; rs232cmd.c  100	char code AUTHCmdTxt[] 					= "AUTH";
	DB	041H,055H,054H,048H,04FH,052H,000H
	SYMB	IDEN, "AUTHCmdTxt", _AUTHCmdTxt, #488, 129, 0
	SYMB	ALAB, _AUTHCmdTxt, #488
	PUBLIC	_AUTHCmdTxt
_AUTHCmdTxt:
; rs232cmd.c  101	char code DOWNLOADCmdTxt[] 			= "DOWNLOAD";
	DB	041H,055H,054H,048H,000H
	SYMB	IDEN, "DOWNLOADCmdTxt", _DOWNLOADCmdTxt, #488, 129, 0
	SYMB	ALAB, _DOWNLOADCmdTxt, #488
	PUBLIC	_DOWNLOADCmdTxt
_DOWNLOADCmdTxt:
; rs232cmd.c  102	char code DOWNCmdTxt[] 					= "DOWN";
	DB	044H,04FH,057H,04EH,04CH,04FH,041H,044H,000H
	SYMB	IDEN, "DOWNCmdTxt", _DOWNCmdTxt, #488, 129, 0
	SYMB	ALAB, _DOWNCmdTxt, #488
	PUBLIC	_DOWNCmdTxt
_DOWNCmdTxt:
; rs232cmd.c  103	char code UPLOADCmdTxt[] 				= "UPLOAd";
	DB	044H,04FH,057H,04EH,000H
	SYMB	IDEN, "UPLOADCmdTxt", _UPLOADCmdTxt, #488, 129, 0
	SYMB	ALAB, _UPLOADCmdTxt, #488
	PUBLIC	_UPLOADCmdTxt
_UPLOADCmdTxt:
; rs232cmd.c  104	char code UPLCmdTxt[] 					= "UPL";
	DB	055H,050H,04CH,04FH,041H,064H,000H
	SYMB	IDEN, "UPLCmdTxt", _UPLCmdTxt, #488, 129, 0
	SYMB	ALAB, _UPLCmdTxt, #488
	PUBLIC	_UPLCmdTxt
_UPLCmdTxt:
; rs232cmd.c  105	
; rs232cmd.c  106	char code OPERATIONCmdTxt[] 			= "OPERATION";
	DB	055H,050H,04CH,000H
	SYMB	IDEN, "OPERATIONCmdTxt", _OPERATIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _OPERATIONCmdTxt, #488
	PUBLIC	_OPERATIONCmdTxt
_OPERATIONCmdTxt:
; rs232cmd.c  107	char code OPERCmdTxt[] 	    			= "OPER";
	DB	04FH,050H,045H,052H,041H,054H,049H,04FH,04EH,000H
	SYMB	IDEN, "OPERCmdTxt", _OPERCmdTxt, #488, 129, 0
	SYMB	ALAB, _OPERCmdTxt, #488
	PUBLIC	_OPERCmdTxt
_OPERCmdTxt:
; rs232cmd.c  108	char code QUESTIONABLECmdTxt[]	 	= "QUESTIONABLE";
	DB	04FH,050H,045H,052H,000H
	SYMB	IDEN, "QUESTIONABLECmdTxt", _QUESTIONABLECmdTxt, #488, 129, 0
	SYMB	ALAB, _QUESTIONABLECmdTxt, #488
	PUBLIC	_QUESTIONABLECmdTxt
_QUESTIONABLECmdTxt:
	DB	051H,055H,045H,053H,054H,049H,04FH,04EH,041H,042H,04CH,045H
; rs232cmd.c  109	char code QUESCmdTxt[]		 			= "QUES";
	DB	000H
	SYMB	IDEN, "QUESCmdTxt", _QUESCmdTxt, #488, 129, 0
	SYMB	ALAB, _QUESCmdTxt, #488
	PUBLIC	_QUESCmdTxt
_QUESCmdTxt:
; rs232cmd.c  110	
; rs232cmd.c  111	char code EVENTCmdTxt[] 				= "EVENT";
	DB	051H,055H,045H,053H,000H
	SYMB	IDEN, "EVENTCmdTxt", _EVENTCmdTxt, #488, 129, 0
	SYMB	ALAB, _EVENTCmdTxt, #488
	PUBLIC	_EVENTCmdTxt
_EVENTCmdTxt:
; rs232cmd.c  112	char code EVENCmdTxt[]					= "EVEN";
	DB	045H,056H,045H,04EH,054H,000H
	SYMB	IDEN, "EVENCmdTxt", _EVENCmdTxt, #488, 129, 0
	SYMB	ALAB, _EVENCmdTxt, #488
	PUBLIC	_EVENCmdTxt
_EVENCmdTxt:
; rs232cmd.c  113	char code CONDITIONCmdTxt[]	 		= "CONDITION";
	DB	045H,056H,045H,04EH,000H
	SYMB	IDEN, "CONDITIONCmdTxt", _CONDITIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _CONDITIONCmdTxt, #488
	PUBLIC	_CONDITIONCmdTxt
_CONDITIONCmdTxt:
; rs232cmd.c  114	char code CONDCmdTxt[] 					= "COND";
	DB	043H,04FH,04EH,044H,049H,054H,049H,04FH,04EH,000H
	SYMB	IDEN, "CONDCmdTxt", _CONDCmdTxt, #488, 129, 0
	SYMB	ALAB, _CONDCmdTxt, #488
	PUBLIC	_CONDCmdTxt
_CONDCmdTxt:
; rs232cmd.c  115	char code ENABLECmdTxt[] 				= "ENABLE";
	DB	043H,04FH,04EH,044H,000H
	SYMB	IDEN, "ENABLECmdTxt", _ENABLECmdTxt, #488, 129, 0
	SYMB	ALAB, _ENABLECmdTxt, #488
	PUBLIC	_ENABLECmdTxt
_ENABLECmdTxt:
; rs232cmd.c  116	char code ENABCmdTxt[] 					= "ENAB";
	DB	045H,04EH,041H,042H,04CH,045H,000H
	SYMB	IDEN, "ENABCmdTxt", _ENABCmdTxt, #488, 129, 0
	SYMB	ALAB, _ENABCmdTxt, #488
	PUBLIC	_ENABCmdTxt
_ENABCmdTxt:
; rs232cmd.c  117	
; rs232cmd.c  118	char code DISPLAYCmdTxt[] 				= "DISPLAY";
	DB	045H,04EH,041H,042H,000H
	SYMB	IDEN, "DISPLAYCmdTxt", _DISPLAYCmdTxt, #488, 129, 0
	SYMB	ALAB, _DISPLAYCmdTxt, #488
	PUBLIC	_DISPLAYCmdTxt
_DISPLAYCmdTxt:
; rs232cmd.c  119	char code DISPCmdTxt[] 					= "DISP";
	DB	044H,049H,053H,050H,04CH,041H,059H,000H
	SYMB	IDEN, "DISPCmdTxt", _DISPCmdTxt, #488, 129, 0
	SYMB	ALAB, _DISPCmdTxt, #488
	PUBLIC	_DISPCmdTxt
_DISPCmdTxt:
; rs232cmd.c  120	char code ERRORQUEUECmdTxt[]  		= "ERRORQUEUE";
	DB	044H,049H,053H,050H,000H
	SYMB	IDEN, "ERRORQUEUECmdTxt", _ERRORQUEUECmdTxt, #488, 129, 0
	SYMB	ALAB, _ERRORQUEUECmdTxt, #488
	PUBLIC	_ERRORQUEUECmdTxt
_ERRORQUEUECmdTxt:
; rs232cmd.c  121	char code RESETCmdTxt[] 				= "RESET";
	DB	045H,052H,052H,04FH,052H,051H,055H,045H,055H,045H,000H
	SYMB	IDEN, "RESETCmdTxt", _RESETCmdTxt, #488, 129, 0
	SYMB	ALAB, _RESETCmdTxt, #488
	PUBLIC	_RESETCmdTxt
_RESETCmdTxt:
; rs232cmd.c  122	char code RESCmdTxt[] 					= "RES";
	DB	052H,045H,053H,045H,054H,000H
	SYMB	IDEN, "RESCmdTxt", _RESCmdTxt, #488, 129, 0
	SYMB	ALAB, _RESCmdTxt, #488
	PUBLIC	_RESCmdTxt
_RESCmdTxt:
; rs232cmd.c  123	
; rs232cmd.c  124	char code DEFAULTCmdTxt[] 			 	= "DEFAULT";
	DB	052H,045H,053H,000H
	SYMB	IDEN, "DEFAULTCmdTxt", _DEFAULTCmdTxt, #488, 129, 0
	SYMB	ALAB, _DEFAULTCmdTxt, #488
	PUBLIC	_DEFAULTCmdTxt
_DEFAULTCmdTxt:
; rs232cmd.c  125	char code DEFCmdTxt[] 					= "DEF";
	DB	044H,045H,046H,041H,055H,04CH,054H,000H
	SYMB	IDEN, "DEFCmdTxt", _DEFCmdTxt, #488, 129, 0
	SYMB	ALAB, _DEFCmdTxt, #488
	PUBLIC	_DEFCmdTxt
_DEFCmdTxt:
; rs232cmd.c  126	
; rs232cmd.c  127	char code GENLOCKCmdTxt[] 				= "GENLOCK";
	DB	044H,045H,046H,000H
	SYMB	IDEN, "GENLOCKCmdTxt", _GENLOCKCmdTxt, #488, 129, 0
	SYMB	ALAB, _GENLOCKCmdTxt, #488
	PUBLIC	_GENLOCKCmdTxt
_GENLOCKCmdTxt:
; rs232cmd.c  128	char code GENLCmdTxt[]			 		= "GENL";
	DB	047H,045H,04EH,04CH,04FH,043H,04BH,000H
	SYMB	IDEN, "GENLCmdTxt", _GENLCmdTxt, #488, 129, 0
	SYMB	ALAB, _GENLCmdTxt, #488
	PUBLIC	_GENLCmdTxt
_GENLCmdTxt:
; rs232cmd.c  129	
; rs232cmd.c  130	char code DELAYCmdTxt[] 				= "DELAY";
	DB	047H,045H,04EH,04CH,000H
	SYMB	IDEN, "DELAYCmdTxt", _DELAYCmdTxt, #488, 129, 0
	SYMB	ALAB, _DELAYCmdTxt, #488
	PUBLIC	_DELAYCmdTxt
_DELAYCmdTxt:
; rs232cmd.c  131	char code DELCmdTxt[] 					= "DEL";
	DB	044H,045H,04CH,041H,059H,000H
	SYMB	IDEN, "DELCmdTxt", _DELCmdTxt, #488, 129, 0
	SYMB	ALAB, _DELCmdTxt, #488
	PUBLIC	_DELCmdTxt
_DELCmdTxt:
; rs232cmd.c  132	
; rs232cmd.c  133	char code CALIBRATECmdTxt[] 		 	= "CALIBRATE";
	DB	044H,045H,04CH,000H
	SYMB	IDEN, "CALIBRATECmdTxt", _CALIBRATECmdTxt, #488, 129, 0
	SYMB	ALAB, _CALIBRATECmdTxt, #488
	PUBLIC	_CALIBRATECmdTxt
_CALIBRATECmdTxt:
; rs232cmd.c  134	char code CALCmdTxt[] 					= "CAL";
	DB	043H,041H,04CH,049H,042H,052H,041H,054H,045H,000H
	SYMB	IDEN, "CALCmdTxt", _CALCmdTxt, #488, 129, 0
	SYMB	ALAB, _CALCmdTxt, #488
	PUBLIC	_CALCmdTxt
_CALCmdTxt:
; rs232cmd.c  135	
; rs232cmd.c  136	char code ADJUSTCmdTxt[] 				= "ADJUST";
	DB	043H,041H,04CH,000H
	SYMB	IDEN, "ADJUSTCmdTxt", _ADJUSTCmdTxt, #488, 129, 0
	SYMB	ALAB, _ADJUSTCmdTxt, #488
	PUBLIC	_ADJUSTCmdTxt
_ADJUSTCmdTxt:
; rs232cmd.c  137	char code ADJCmdTxt[] 					= "ADJ";
	DB	041H,044H,04AH,055H,053H,054H,000H
	SYMB	IDEN, "ADJCmdTxt", _ADJCmdTxt, #488, 129, 0
	SYMB	ALAB, _ADJCmdTxt, #488
	PUBLIC	_ADJCmdTxt
_ADJCmdTxt:
; rs232cmd.c  138	
; rs232cmd.c  139	char code BBCmdTxt[] 					= "BB";
	DB	041H,044H,04AH,000H
	SYMB	IDEN, "BBCmdTxt", _BBCmdTxt, #488, 129, 0
	SYMB	ALAB, _BBCmdTxt, #488
	PUBLIC	_BBCmdTxt
_BBCmdTxt:
; rs232cmd.c  140	char code TSGENERATORCmdTxt[] 		= "TSGENERATOR";
	DB	042H,042H,000H
	SYMB	IDEN, "TSGENERATORCmdTxt", _TSGENERATORCmdTxt, #488, 129, 0
	SYMB	ALAB, _TSGENERATORCmdTxt, #488
	PUBLIC	_TSGENERATORCmdTxt
_TSGENERATORCmdTxt:
; rs232cmd.c  141	char code TSGCmdTxt[] 					= "TSG";
	DB	054H,053H,047H,045H,04EH,045H,052H,041H,054H,04FH,052H,000H
	SYMB	IDEN, "TSGCmdTxt", _TSGCmdTxt, #488, 129, 0
	SYMB	ALAB, _TSGCmdTxt, #488
	PUBLIC	_TSGCmdTxt
_TSGCmdTxt:
; rs232cmd.c  142	char code AUDIOCmdTxt[] 				= "AUDIO";
	DB	054H,053H,047H,000H
	SYMB	IDEN, "AUDIOCmdTxt", _AUDIOCmdTxt, #488, 129, 0
	SYMB	ALAB, _AUDIOCmdTxt, #488
	PUBLIC	_AUDIOCmdTxt
_AUDIOCmdTxt:
; rs232cmd.c  143	char code AUDCmdTxt[] 					= "AUD";
	DB	041H,055H,044H,049H,04FH,000H
	SYMB	IDEN, "AUDCmdTxt", _AUDCmdTxt, #488, 129, 0
	SYMB	ALAB, _AUDCmdTxt, #488
	PUBLIC	_AUDCmdTxt
_AUDCmdTxt:
; rs232cmd.c  144	
; rs232cmd.c  145	char code ANALOGCmdTxt[]				= "ANALOG";
	DB	041H,055H,044H,000H
	SYMB	IDEN, "ANALOGCmdTxt", _ANALOGCmdTxt, #488, 129, 0
	SYMB	ALAB, _ANALOGCmdTxt, #488
	PUBLIC	_ANALOGCmdTxt
_ANALOGCmdTxt:
; rs232cmd.c  146	char code ANALCmdTxt[]					= "ANAL";
	DB	041H,04EH,041H,04CH,04FH,047H,000H
	SYMB	IDEN, "ANALCmdTxt", _ANALCmdTxt, #488, 129, 0
	SYMB	ALAB, _ANALCmdTxt, #488
	PUBLIC	_ANALCmdTxt
_ANALCmdTxt:
; rs232cmd.c  147	
; rs232cmd.c  148	char code PATTERNCmdTxt[] 				= "PATTERN";
	DB	041H,04EH,041H,04CH,000H
	SYMB	IDEN, "PATTERNCmdTxt", _PATTERNCmdTxt, #488, 129, 0
	SYMB	ALAB, _PATTERNCmdTxt, #488
	PUBLIC	_PATTERNCmdTxt
_PATTERNCmdTxt:
; rs232cmd.c  149	char code PATTCmdTxt[] 					= "PATT";
	DB	050H,041H,054H,054H,045H,052H,04EH,000H
	SYMB	IDEN, "PATTCmdTxt", _PATTCmdTxt, #488, 129, 0
	SYMB	ALAB, _PATTCmdTxt, #488
	PUBLIC	_PATTCmdTxt
_PATTCmdTxt:
; rs232cmd.c  150	char code EMBAUDIOCmdTxt[] 			= "EMBAUDIO";
	DB	050H,041H,054H,054H,000H
	SYMB	IDEN, "EMBAUDIOCmdTxt", _EMBAUDIOCmdTxt, #488, 129, 0
	SYMB	ALAB, _EMBAUDIOCmdTxt, #488
	PUBLIC	_EMBAUDIOCmdTxt
_EMBAUDIOCmdTxt:
; rs232cmd.c  151	char code EMBCmdTxt[] 					= "EMB";
	DB	045H,04DH,042H,041H,055H,044H,049H,04FH,000H
	SYMB	IDEN, "EMBCmdTxt", _EMBCmdTxt, #488, 129, 0
	SYMB	ALAB, _EMBCmdTxt, #488
	PUBLIC	_EMBCmdTxt
_EMBCmdTxt:
; rs232cmd.c  152	
; rs232cmd.c  153	char code AESEBUCmdTxt[]				= "AESEBU";
	DB	045H,04DH,042H,000H
	SYMB	IDEN, "AESEBUCmdTxt", _AESEBUCmdTxt, #488, 129, 0
	SYMB	ALAB, _AESEBUCmdTxt, #488
	PUBLIC	_AESEBUCmdTxt
_AESEBUCmdTxt:
; rs232cmd.c  154	char code AESCmdTxt[]					= "AES";
	DB	041H,045H,053H,045H,042H,055H,000H
	SYMB	IDEN, "AESCmdTxt", _AESCmdTxt, #488, 129, 0
	SYMB	ALAB, _AESCmdTxt, #488
	PUBLIC	_AESCmdTxt
_AESCmdTxt:
; rs232cmd.c  155	
; rs232cmd.c  156	char code SCHPHASECmdTxt[] 			= "SCHPHASE";
	DB	041H,045H,053H,000H
	SYMB	IDEN, "SCHPHASECmdTxt", _SCHPHASECmdTxt, #488, 129, 0
	SYMB	ALAB, _SCHPHASECmdTxt, #488
	PUBLIC	_SCHPHASECmdTxt
_SCHPHASECmdTxt:
; rs232cmd.c  157	char code SCHPCmdTxt[] 					= "SCHP";
	DB	053H,043H,048H,050H,048H,041H,053H,045H,000H
	SYMB	IDEN, "SCHPCmdTxt", _SCHPCmdTxt, #488, 129, 0
	SYMB	ALAB, _SCHPCmdTxt, #488
	PUBLIC	_SCHPCmdTxt
_SCHPCmdTxt:
; rs232cmd.c  158	
; rs232cmd.c  159	char code SIGNALCmdTxt[] 				= "SIGNAL";
	DB	053H,043H,048H,050H,000H
	SYMB	IDEN, "SIGNALCmdTxt", _SIGNALCmdTxt, #488, 129, 0
	SYMB	ALAB, _SIGNALCmdTxt, #488
	PUBLIC	_SIGNALCmdTxt
_SIGNALCmdTxt:
; rs232cmd.c  160	char code SIGNCmdTxt[] 					= "SIGN";
	DB	053H,049H,047H,04EH,041H,04CH,000H
	SYMB	IDEN, "SIGNCmdTxt", _SIGNCmdTxt, #488, 129, 0
	SYMB	ALAB, _SIGNCmdTxt, #488
	PUBLIC	_SIGNCmdTxt
_SIGNCmdTxt:
; rs232cmd.c  161	char code LEVELCmdTxt[] 				= "LEVEL";
	DB	053H,049H,047H,04EH,000H
	SYMB	IDEN, "LEVELCmdTxt", _LEVELCmdTxt, #488, 129, 0
	SYMB	ALAB, _LEVELCmdTxt, #488
	PUBLIC	_LEVELCmdTxt
_LEVELCmdTxt:
; rs232cmd.c  162	char code LEVCmdTxt[] 					= "LEV";
	DB	04CH,045H,056H,045H,04CH,000H
	SYMB	IDEN, "LEVCmdTxt", _LEVCmdTxt, #488, 129, 0
	SYMB	ALAB, _LEVCmdTxt, #488
	PUBLIC	_LEVCmdTxt
_LEVCmdTxt:
; rs232cmd.c  163	char code EDHINSERTCmdTxt[] 			= "EDHINSERT";
	DB	04CH,045H,056H,000H
	SYMB	IDEN, "EDHINSERTCmdTxt", _EDHINSERTCmdTxt, #488, 129, 0
	SYMB	ALAB, _EDHINSERTCmdTxt, #488
	PUBLIC	_EDHINSERTCmdTxt
_EDHINSERTCmdTxt:
; rs232cmd.c  164	char code EDHCmdTxt[] 					= "EDH";
	DB	045H,044H,048H,049H,04EH,053H,045H,052H,054H,000H
	SYMB	IDEN, "EDHCmdTxt", _EDHCmdTxt, #488, 129, 0
	SYMB	ALAB, _EDHCmdTxt, #488
	PUBLIC	_EDHCmdTxt
_EDHCmdTxt:
; rs232cmd.c  165	
; rs232cmd.c  166	char code TIMINGCmdTxt[] 				= "TIMING";
	DB	045H,044H,048H,000H
	SYMB	IDEN, "TIMINGCmdTxt", _TIMINGCmdTxt, #488, 129, 0
	SYMB	ALAB, _TIMINGCmdTxt, #488
	PUBLIC	_TIMINGCmdTxt
_TIMINGCmdTxt:
; rs232cmd.c  167	char code TIMCmdTxt[] 					= "TIM";
	DB	054H,049H,04DH,049H,04EH,047H,000H
	SYMB	IDEN, "TIMCmdTxt", _TIMCmdTxt, #488, 129, 0
	SYMB	ALAB, _TIMCmdTxt, #488
	PUBLIC	_TIMCmdTxt
_TIMCmdTxt:
; rs232cmd.c  168	
; rs232cmd.c  169	char code WORDCLOCKCmdTxt[] 			= "WORDCLOCK";
	DB	054H,049H,04DH,000H
	SYMB	IDEN, "WORDCLOCKCmdTxt", _WORDCLOCKCmdTxt, #488, 129, 0
	SYMB	ALAB, _WORDCLOCKCmdTxt, #488
	PUBLIC	_WORDCLOCKCmdTxt
_WORDCLOCKCmdTxt:
; rs232cmd.c  170	char code WORDCmdTxt[] 					= "WORD";
	DB	057H,04FH,052H,044H,043H,04CH,04FH,043H,04BH,000H
	SYMB	IDEN, "WORDCmdTxt", _WORDCmdTxt, #488, 129, 0
	SYMB	ALAB, _WORDCmdTxt, #488
	PUBLIC	_WORDCmdTxt
_WORDCmdTxt:
; rs232cmd.c  171	
; rs232cmd.c  172	char code CLICKCmdTxt[] 				= "CLICK";
	DB	057H,04FH,052H,044H,000H
	SYMB	IDEN, "CLICKCmdTxt", _CLICKCmdTxt, #488, 129, 0
	SYMB	ALAB, _CLICKCmdTxt, #488
	PUBLIC	_CLICKCmdTxt
_CLICKCmdTxt:
; rs232cmd.c  173	char code CLICCmdTxt[] 					= "CLIC";
	DB	043H,04CH,049H,043H,04BH,000H
	SYMB	IDEN, "CLICCmdTxt", _CLICCmdTxt, #488, 129, 0
	SYMB	ALAB, _CLICCmdTxt, #488
	PUBLIC	_CLICCmdTxt
_CLICCmdTxt:
; rs232cmd.c  174	
; rs232cmd.c  175	char code PASSWORDCmdTxt[] 			= "PASSWORD";
	DB	043H,04CH,049H,043H,000H
	SYMB	IDEN, "PASSWORDCmdTxt", _PASSWORDCmdTxt, #488, 129, 0
	SYMB	ALAB, _PASSWORDCmdTxt, #488
	PUBLIC	_PASSWORDCmdTxt
_PASSWORDCmdTxt:
; rs232cmd.c  176	char code PASSCmdTxt[] 					= "PASS";
	DB	050H,041H,053H,053H,057H,04FH,052H,044H,000H
	SYMB	IDEN, "PASSCmdTxt", _PASSCmdTxt, #488, 129, 0
	SYMB	ALAB, _PASSCmdTxt, #488
	PUBLIC	_PASSCmdTxt
_PASSCmdTxt:
; rs232cmd.c  177	char code V24CIRCUITCmdTxt[] 			= "V24CIRCUIT";
	DB	050H,041H,053H,053H,000H
	SYMB	IDEN, "V24CIRCUITCmdTxt", _V24CIRCUITCmdTxt, #488, 129, 0
	SYMB	ALAB, _V24CIRCUITCmdTxt, #488
	PUBLIC	_V24CIRCUITCmdTxt
_V24CIRCUITCmdTxt:
; rs232cmd.c  178	char code V24CCmdTxt[] 					= "V24C";
	DB	056H,032H,034H,043H,049H,052H,043H,055H,049H,054H,000H
	SYMB	IDEN, "V24CCmdTxt", _V24CCmdTxt, #488, 129, 0
	SYMB	ALAB, _V24CCmdTxt, #488
	PUBLIC	_V24CCmdTxt
_V24CCmdTxt:
; rs232cmd.c  179	char code CHECKSUMCmdTxt[] 	 		= "CHECKSUM";
	DB	056H,032H,034H,043H,000H
	SYMB	IDEN, "CHECKSUMCmdTxt", _CHECKSUMCmdTxt, #488, 129, 0
	SYMB	ALAB, _CHECKSUMCmdTxt, #488
	PUBLIC	_CHECKSUMCmdTxt
_CHECKSUMCmdTxt:
; rs232cmd.c  180	char code CHECCmdTxt[] 	 				= "CHEC";
	DB	043H,048H,045H,043H,04BH,053H,055H,04DH,000H
	SYMB	IDEN, "CHECCmdTxt", _CHECCmdTxt, #488, 129, 0
	SYMB	ALAB, _CHECCmdTxt, #488
	PUBLIC	_CHECCmdTxt
_CHECCmdTxt:
; rs232cmd.c  181	
; rs232cmd.c  182	char code CODECmdTxt[] 	 				= "CODE";
	DB	043H,048H,045H,043H,000H
	SYMB	IDEN, "CODECmdTxt", _CODECmdTxt, #488, 129, 0
	SYMB	ALAB, _CODECmdTxt, #488
	PUBLIC	_CODECmdTxt
_CODECmdTxt:
; rs232cmd.c  183	char code RANGECmdTxt[] 		 		= "RANGE";
	DB	043H,04FH,044H,045H,000H
	SYMB	IDEN, "RANGECmdTxt", _RANGECmdTxt, #488, 129, 0
	SYMB	ALAB, _RANGECmdTxt, #488
	PUBLIC	_RANGECmdTxt
_RANGECmdTxt:
; rs232cmd.c  184	char code RANGCmdTxt[] 	 				= "RANG";
	DB	052H,041H,04EH,047H,045H,000H
	SYMB	IDEN, "RANGCmdTxt", _RANGCmdTxt, #488, 129, 0
	SYMB	ALAB, _RANGCmdTxt, #488
	PUBLIC	_RANGCmdTxt
_RANGCmdTxt:
; rs232cmd.c  185	char code COMMANDCmdTxt[] 				= "COMMAND";
	DB	052H,041H,04EH,047H,000H
	SYMB	IDEN, "COMMANDCmdTxt", _COMMANDCmdTxt, #488, 129, 0
	SYMB	ALAB, _COMMANDCmdTxt, #488
	PUBLIC	_COMMANDCmdTxt
_COMMANDCmdTxt:
; rs232cmd.c  186	char code COMMCmdTxt[] 					= "COMM";
	DB	043H,04FH,04DH,04DH,041H,04EH,044H,000H
	SYMB	IDEN, "COMMCmdTxt", _COMMCmdTxt, #488, 129, 0
	SYMB	ALAB, _COMMCmdTxt, #488
	PUBLIC	_COMMCmdTxt
_COMMCmdTxt:
; rs232cmd.c  187	char code TRANSPARENTCmdTxt[]  		= "TRANSPARENT";
	DB	043H,04FH,04DH,04DH,000H
	SYMB	IDEN, "TRANSPARENTCmdTxt", _TRANSPARENTCmdTxt, #488, 129, 0
	SYMB	ALAB, _TRANSPARENTCmdTxt, #488
	PUBLIC	_TRANSPARENTCmdTxt
_TRANSPARENTCmdTxt:
; rs232cmd.c  188	char code TRANCmdTxt[] 				 	= "TRAN";
	DB	054H,052H,041H,04EH,053H,050H,041H,052H,045H,04EH,054H,000H
	SYMB	IDEN, "TRANCmdTxt", _TRANCmdTxt, #488, 129, 0
	SYMB	ALAB, _TRANCmdTxt, #488
	PUBLIC	_TRANCmdTxt
_TRANCmdTxt:
; rs232cmd.c  189	
; rs232cmd.c  190	char code MAINBOARDCmdTxt[] 			= "MAINBOARD";
	DB	054H,052H,041H,04EH,000H
	SYMB	IDEN, "MAINBOARDCmdTxt", _MAINBOARDCmdTxt, #488, 129, 0
	SYMB	ALAB, _MAINBOARDCmdTxt, #488
	PUBLIC	_MAINBOARDCmdTxt
_MAINBOARDCmdTxt:
; rs232cmd.c  191	char code MAINCmdTxt[] 					= "MAIN";
	DB	04DH,041H,049H,04EH,042H,04FH,041H,052H,044H,000H
	SYMB	IDEN, "MAINCmdTxt", _MAINCmdTxt, #488, 129, 0
	SYMB	ALAB, _MAINCmdTxt, #488
	PUBLIC	_MAINCmdTxt
_MAINCmdTxt:
; rs232cmd.c  192	char code COMPANYCmdTxt[] 				= "COMPANY";
	DB	04DH,041H,049H,04EH,000H
	SYMB	IDEN, "COMPANYCmdTxt", _COMPANYCmdTxt, #488, 129, 0
	SYMB	ALAB, _COMPANYCmdTxt, #488
	PUBLIC	_COMPANYCmdTxt
_COMPANYCmdTxt:
; rs232cmd.c  193	char code COMPCmdTxt[] 					= "COMP";
	DB	043H,04FH,04DH,050H,041H,04EH,059H,000H
	SYMB	IDEN, "COMPCmdTxt", _COMPCmdTxt, #488, 129, 0
	SYMB	ALAB, _COMPCmdTxt, #488
	PUBLIC	_COMPCmdTxt
_COMPCmdTxt:
; rs232cmd.c  194	char code TYPECmdTxt[] 					= "TYPE";
	DB	043H,04FH,04DH,050H,000H
	SYMB	IDEN, "TYPECmdTxt", _TYPECmdTxt, #488, 129, 0
	SYMB	ALAB, _TYPECmdTxt, #488
	PUBLIC	_TYPECmdTxt
_TYPECmdTxt:
; rs232cmd.c  195	char code KUNUMBERCmdTxt[] 			= "KUNUMBER";
	DB	054H,059H,050H,045H,000H
	SYMB	IDEN, "KUNUMBERCmdTxt", _KUNUMBERCmdTxt, #488, 129, 0
	SYMB	ALAB, _KUNUMBERCmdTxt, #488
	PUBLIC	_KUNUMBERCmdTxt
_KUNUMBERCmdTxt:
; rs232cmd.c  196	char code KUNCmdTxt[] 					= "KUN";
	DB	04BH,055H,04EH,055H,04DH,042H,045H,052H,000H
	SYMB	IDEN, "KUNCmdTxt", _KUNCmdTxt, #488, 129, 0
	SYMB	ALAB, _KUNCmdTxt, #488
	PUBLIC	_KUNCmdTxt
_KUNCmdTxt:
; rs232cmd.c  197	char code SWREVISIONCmdTxt[] 			= "SWREVISION";
	DB	04BH,055H,04EH,000H
	SYMB	IDEN, "SWREVISIONCmdTxt", _SWREVISIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _SWREVISIONCmdTxt, #488
	PUBLIC	_SWREVISIONCmdTxt
_SWREVISIONCmdTxt:
; rs232cmd.c  198	char code SWRCmdTxt[] 					= "SWR";
	DB	053H,057H,052H,045H,056H,049H,053H,049H,04FH,04EH,000H
	SYMB	IDEN, "SWRCmdTxt", _SWRCmdTxt, #488, 129, 0
	SYMB	ALAB, _SWRCmdTxt, #488
	PUBLIC	_SWRCmdTxt
_SWRCmdTxt:
; rs232cmd.c  199	
; rs232cmd.c  200	char code NCCmdTxt[] 					= "NC";
	DB	053H,057H,052H,000H
	SYMB	IDEN, "NCCmdTxt", _NCCmdTxt, #488, 129, 0
	SYMB	ALAB, _NCCmdTxt, #488
	PUBLIC	_NCCmdTxt
_NCCmdTxt:
; rs232cmd.c  201	char code FMSDATECmdTxt[] 				= "FMSDATE";
	DB	04EH,043H,000H
	SYMB	IDEN, "FMSDATECmdTxt", _FMSDATECmdTxt, #488, 129, 0
	SYMB	ALAB, _FMSDATECmdTxt, #488
	PUBLIC	_FMSDATECmdTxt
_FMSDATECmdTxt:
; rs232cmd.c  202	char code FMSDCmdTxt[] 					= "FMSD";
	DB	046H,04DH,053H,044H,041H,054H,045H,000H
	SYMB	IDEN, "FMSDCmdTxt", _FMSDCmdTxt, #488, 129, 0
	SYMB	ALAB, _FMSDCmdTxt, #488
	PUBLIC	_FMSDCmdTxt
_FMSDCmdTxt:
; rs232cmd.c  203	char code PRODUCTIONCmdTxt[] 			= "PRODUCTION";
	DB	046H,04DH,053H,044H,000H
	SYMB	IDEN, "PRODUCTIONCmdTxt", _PRODUCTIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _PRODUCTIONCmdTxt, #488
	PUBLIC	_PRODUCTIONCmdTxt
_PRODUCTIONCmdTxt:
; rs232cmd.c  204	char code PRODCmdTxt[] 					= "PROD";
	DB	050H,052H,04FH,044H,055H,043H,054H,049H,04FH,04EH,000H
	SYMB	IDEN, "PRODCmdTxt", _PRODCmdTxt, #488, 129, 0
	SYMB	ALAB, _PRODCmdTxt, #488
	PUBLIC	_PRODCmdTxt
_PRODCmdTxt:
; rs232cmd.c  205	char code UPDATECmdTxt[] 				= "UPDATE";
	DB	050H,052H,04FH,044H,000H
	SYMB	IDEN, "UPDATECmdTxt", _UPDATECmdTxt, #488, 129, 0
	SYMB	ALAB, _UPDATECmdTxt, #488
	PUBLIC	_UPDATECmdTxt
_UPDATECmdTxt:
; rs232cmd.c  206	char code UPDCmdTxt[] 					= "UPD";
	DB	055H,050H,044H,041H,054H,045H,000H
	SYMB	IDEN, "UPDCmdTxt", _UPDCmdTxt, #488, 129, 0
	SYMB	ALAB, _UPDCmdTxt, #488
	PUBLIC	_UPDCmdTxt
_UPDCmdTxt:
; rs232cmd.c  207	
; rs232cmd.c  208	char code FREFERENCECmdTxt[] 		 	= "FREFERENCE";
	DB	055H,050H,044H,000H
	SYMB	IDEN, "FREFERENCECmdTxt", _FREFERENCECmdTxt, #488, 129, 0
	SYMB	ALAB, _FREFERENCECmdTxt, #488
	PUBLIC	_FREFERENCECmdTxt
_FREFERENCECmdTxt:
; rs232cmd.c  209	char code FREFCmdTxt[] 					= "FREF";
	DB	046H,052H,045H,046H,045H,052H,045H,04EH,043H,045H,000H
	SYMB	IDEN, "FREFCmdTxt", _FREFCmdTxt, #488, 129, 0
	SYMB	ALAB, _FREFCmdTxt, #488
	PUBLIC	_FREFCmdTxt
_FREFCmdTxt:
; rs232cmd.c  210	char code DACCmdTxt[] 					= "DAC";
	DB	046H,052H,045H,046H,000H
	SYMB	IDEN, "DACCmdTxt", _DACCmdTxt, #488, 129, 0
	SYMB	ALAB, _DACCmdTxt, #488
	PUBLIC	_DACCmdTxt
_DACCmdTxt:
; rs232cmd.c  211	char code UREFERENCECmdTxt[] 			= "UREFERENCE";
	DB	044H,041H,043H,000H
	SYMB	IDEN, "UREFERENCECmdTxt", _UREFERENCECmdTxt, #488, 129, 0
	SYMB	ALAB, _UREFERENCECmdTxt, #488
	PUBLIC	_UREFERENCECmdTxt
_UREFERENCECmdTxt:
; rs232cmd.c  212	char code UREFCmdTxt[] 					= "UREF";
	DB	055H,052H,045H,046H,045H,052H,045H,04EH,043H,045H,000H
	SYMB	IDEN, "UREFCmdTxt", _UREFCmdTxt, #488, 129, 0
	SYMB	ALAB, _UREFCmdTxt, #488
	PUBLIC	_UREFCmdTxt
_UREFCmdTxt:
; rs232cmd.c  213	char code HPHZEROCmdTxt[] 				= "HPHZERO";
	DB	055H,052H,045H,046H,000H
	SYMB	IDEN, "HPHZEROCmdTxt", _HPHZEROCmdTxt, #488, 129, 0
	SYMB	ALAB, _HPHZEROCmdTxt, #488
	PUBLIC	_HPHZEROCmdTxt
_HPHZEROCmdTxt:
; rs232cmd.c  214	char code HPHZCmdTxt[] 					= "HPHZ";
	DB	048H,050H,048H,05AH,045H,052H,04FH,000H
	SYMB	IDEN, "HPHZCmdTxt", _HPHZCmdTxt, #488, 129, 0
	SYMB	ALAB, _HPHZCmdTxt, #488
	PUBLIC	_HPHZCmdTxt
_HPHZCmdTxt:
; rs232cmd.c  215	char code PHASECmdTxt[] 				= "PHASE";
	DB	048H,050H,048H,05AH,000H
	SYMB	IDEN, "PHASECmdTxt", _PHASECmdTxt, #488, 129, 0
	SYMB	ALAB, _PHASECmdTxt, #488
	PUBLIC	_PHASECmdTxt
_PHASECmdTxt:
; rs232cmd.c  216	char code PHASCmdTxt[] 					= "PHAS";
	DB	050H,048H,041H,053H,045H,000H
	SYMB	IDEN, "PHASCmdTxt", _PHASCmdTxt, #488, 129, 0
	SYMB	ALAB, _PHASCmdTxt, #488
	PUBLIC	_PHASCmdTxt
_PHASCmdTxt:
; rs232cmd.c  217	
; rs232cmd.c  218	char code AGAINCmdTxt[] 				= "AGAIN";
	DB	050H,048H,041H,053H,000H
	SYMB	IDEN, "AGAINCmdTxt", _AGAINCmdTxt, #488, 129, 0
	SYMB	ALAB, _AGAINCmdTxt, #488
	PUBLIC	_AGAINCmdTxt
_AGAINCmdTxt:
; rs232cmd.c  219	char code AGACmdTxt[] 					= "AGA";
	DB	041H,047H,041H,049H,04EH,000H
	SYMB	IDEN, "AGACmdTxt", _AGACmdTxt, #488, 129, 0
	SYMB	ALAB, _AGACmdTxt, #488
	PUBLIC	_AGACmdTxt
_AGACmdTxt:
; rs232cmd.c  220	char code CGAINCmdTxt[] 				= "CGAIN";
	DB	041H,047H,041H,000H
	SYMB	IDEN, "CGAINCmdTxt", _CGAINCmdTxt, #488, 129, 0
	SYMB	ALAB, _CGAINCmdTxt, #488
	PUBLIC	_CGAINCmdTxt
_CGAINCmdTxt:
; rs232cmd.c  221	char code CGACmdTxt[] 					= "CGA";
	DB	043H,047H,041H,049H,04EH,000H
	SYMB	IDEN, "CGACmdTxt", _CGACmdTxt, #488, 129, 0
	SYMB	ALAB, _CGACmdTxt, #488
	PUBLIC	_CGACmdTxt
_CGACmdTxt:
; rs232cmd.c  222	char code ALEVELCmdTxt[] 				= "ALEVEL";
	DB	043H,047H,041H,000H
	SYMB	IDEN, "ALEVELCmdTxt", _ALEVELCmdTxt, #488, 129, 0
	SYMB	ALAB, _ALEVELCmdTxt, #488
	PUBLIC	_ALEVELCmdTxt
_ALEVELCmdTxt:
; rs232cmd.c  223	char code ALEVCmdTxt[] 					= "ALEV";
	DB	041H,04CH,045H,056H,045H,04CH,000H
	SYMB	IDEN, "ALEVCmdTxt", _ALEVCmdTxt, #488, 129, 0
	SYMB	ALAB, _ALEVCmdTxt, #488
	PUBLIC	_ALEVCmdTxt
_ALEVCmdTxt:
; rs232cmd.c  224	
; rs232cmd.c  225	char code PLDCmdTxt[] 					= "PLD";
	DB	041H,04CH,045H,056H,000H
	SYMB	IDEN, "PLDCmdTxt", _PLDCmdTxt, #488, 129, 0
	SYMB	ALAB, _PLDCmdTxt, #488
	PUBLIC	_PLDCmdTxt
_PLDCmdTxt:
; rs232cmd.c  226	char code TCXOCmdTxt[] 					= "TCXO";
	DB	050H,04CH,044H,000H
	SYMB	IDEN, "TCXOCmdTxt", _TCXOCmdTxt, #488, 129, 0
	SYMB	ALAB, _TCXOCmdTxt, #488
	PUBLIC	_TCXOCmdTxt
_TCXOCmdTxt:
; rs232cmd.c  227	char code MMCHIPCmdTxt[] 				= "MMCHIP";
	DB	054H,043H,058H,04FH,000H
	SYMB	IDEN, "MMCHIPCmdTxt", _MMCHIPCmdTxt, #488, 129, 0
	SYMB	ALAB, _MMCHIPCmdTxt, #488
	PUBLIC	_MMCHIPCmdTxt
_MMCHIPCmdTxt:
; rs232cmd.c  228	char code MMCHCmdTxt[] 					= "MMCH";
	DB	04DH,04DH,043H,048H,049H,050H,000H
	SYMB	IDEN, "MMCHCmdTxt", _MMCHCmdTxt, #488, 129, 0
	SYMB	ALAB, _MMCHCmdTxt, #488
	PUBLIC	_MMCHCmdTxt
_MMCHCmdTxt:
; rs232cmd.c  229	
; rs232cmd.c  230	char code SAVEParTxt[] 					= "SAVE";
	DB	04DH,04DH,043H,048H,000H
	SYMB	IDEN, "SAVEParTxt", _SAVEParTxt, #488, 129, 0
	SYMB	ALAB, _SAVEParTxt, #488
	PUBLIC	_SAVEParTxt
_SAVEParTxt:
; rs232cmd.c  231	
; rs232cmd.c  232	char code INTERNALParTxt[] 			= "INTERNAL";
	DB	053H,041H,056H,045H,000H
	SYMB	IDEN, "INTERNALParTxt", _INTERNALParTxt, #488, 129, 0
	SYMB	ALAB, _INTERNALParTxt, #488
	PUBLIC	_INTERNALParTxt
_INTERNALParTxt:
; rs232cmd.c  233	char code INTParTxt[] 					= "INT";
	DB	049H,04EH,054H,045H,052H,04EH,041H,04CH,000H
	SYMB	IDEN, "INTParTxt", _INTParTxt, #488, 129, 0
	SYMB	ALAB, _INTParTxt, #488
	PUBLIC	_INTParTxt
_INTParTxt:
; rs232cmd.c  234	char code PALBURSTParTxt[] 			= "PALBURST";
	DB	049H,04EH,054H,000H
	SYMB	IDEN, "PALBURSTParTxt", _PALBURSTParTxt, #488, 129, 0
	SYMB	ALAB, _PALBURSTParTxt, #488
	PUBLIC	_PALBURSTParTxt
_PALBURSTParTxt:
; rs232cmd.c  235	char code PALBParTxt[] 					= "PALB";
	DB	050H,041H,04CH,042H,055H,052H,053H,054H,000H
	SYMB	IDEN, "PALBParTxt", _PALBParTxt, #488, 129, 0
	SYMB	ALAB, _PALBParTxt, #488
	PUBLIC	_PALBParTxt
_PALBParTxt:
; rs232cmd.c  236	char code NTSCBURSTParTxt[] 			= "NTSCBURST";
	DB	050H,041H,04CH,042H,000H
	SYMB	IDEN, "NTSCBURSTParTxt", _NTSCBURSTParTxt, #488, 129, 0
	SYMB	ALAB, _NTSCBURSTParTxt, #488
	PUBLIC	_NTSCBURSTParTxt
_NTSCBURSTParTxt:
; rs232cmd.c  237	char code NTSCParTxt[] 					= "NTSC";
	DB	04EH,054H,053H,043H,042H,055H,052H,053H,054H,000H
	SYMB	IDEN, "NTSCParTxt", _NTSCParTxt, #488, 129, 0
	SYMB	ALAB, _NTSCParTxt, #488
	PUBLIC	_NTSCParTxt
_NTSCParTxt:
; rs232cmd.c  238	
; rs232cmd.c  239	char code F10MHzParTxt[] 				= "F10MHZ";
	DB	04EH,054H,053H,043H,000H
	SYMB	IDEN, "F10MHzParTxt", _F10MHzParTxt, #488, 129, 0
	SYMB	ALAB, _F10MHzParTxt, #488
	PUBLIC	_F10MHzParTxt
_F10MHzParTxt:
; rs232cmd.c  240	
; rs232cmd.c  241	char code PALParTxt[] 					= "PAL";
	DB	046H,031H,030H,04DH,048H,05AH,000H
	SYMB	IDEN, "PALParTxt", _PALParTxt, #488, 129, 0
	SYMB	ALAB, _PALParTxt, #488
	PUBLIC	_PALParTxt
_PALParTxt:
; rs232cmd.c  242	char code PAL_IDParTxt[] 				= "PAL_ID";
	DB	050H,041H,04CH,000H
	SYMB	IDEN, "PAL_IDParTxt", _PAL_IDParTxt, #488, 129, 0
	SYMB	ALAB, _PAL_IDParTxt, #488
	PUBLIC	_PAL_IDParTxt
_PAL_IDParTxt:
; rs232cmd.c  243	
; rs232cmd.c  244	char code CBSMPTEParTxt[]				= "CBSMPTE";			// SMPTE Colorbar
	DB	050H,041H,04CH,05FH,049H,044H,000H
	SYMB	IDEN, "CBSMPTEParTxt", _CBSMPTEParTxt, #488, 129, 0
	SYMB	ALAB, _CBSMPTEParTxt, #488
	PUBLIC	_CBSMPTEParTxt
_CBSMPTEParTxt:
; rs232cmd.c  245	char code CBSMParTxt[] 					= "CBSM";					
	DB	043H,042H,053H,04DH,050H,054H,045H,000H
	SYMB	IDEN, "CBSMParTxt", _CBSMParTxt, #488, 129, 0
	SYMB	ALAB, _CBSMParTxt, #488
	PUBLIC	_CBSMParTxt
_CBSMParTxt:
; rs232cmd.c  246	char code CBEBUParTxt[] 				= "CBEBU";  	    	// EBU Colorbar
	DB	043H,042H,053H,04DH,000H
	SYMB	IDEN, "CBEBUParTxt", _CBEBUParTxt, #488, 129, 0
	SYMB	ALAB, _CBEBUParTxt, #488
	PUBLIC	_CBEBUParTxt
_CBEBUParTxt:
; rs232cmd.c  247	char code CBEBParTxt[] 					= "CBEB";
	DB	043H,042H,045H,042H,055H,000H
	SYMB	IDEN, "CBEBParTxt", _CBEBParTxt, #488, 129, 0
	SYMB	ALAB, _CBEBParTxt, #488
	PUBLIC	_CBEBParTxt
_CBEBParTxt:
; rs232cmd.c  248	char code CBFCCParTxt[] 			  	= "CBFCC";				// FCC Colorbar
	DB	043H,042H,045H,042H,000H
	SYMB	IDEN, "CBFCCParTxt", _CBFCCParTxt, #488, 129, 0
	SYMB	ALAB, _CBFCCParTxt, #488
	PUBLIC	_CBFCCParTxt
_CBFCCParTxt:
; rs232cmd.c  249	char code CBFCParTxt[] 				  	= "CBFC";
	DB	043H,042H,046H,043H,043H,000H
	SYMB	IDEN, "CBFCParTxt", _CBFCParTxt, #488, 129, 0
	SYMB	ALAB, _CBFCParTxt, #488
	PUBLIC	_CBFCParTxt
_CBFCParTxt:
; rs232cmd.c  250	char code CBEBU8ParTxt[] 			  	= "CBEBU8";				// Colorbar ITU801
	DB	043H,042H,046H,043H,000H
	SYMB	IDEN, "CBEBU8ParTxt", _CBEBU8ParTxt, #488, 129, 0
	SYMB	ALAB, _CBEBU8ParTxt, #488
	PUBLIC	_CBEBU8ParTxt
_CBEBU8ParTxt:
; rs232cmd.c  251	char code CBEB8ParTxt[] 			  	= "CBEB8";
	DB	043H,042H,045H,042H,055H,038H,000H
	SYMB	IDEN, "CBEB8ParTxt", _CBEB8ParTxt, #488, 129, 0
	SYMB	ALAB, _CBEB8ParTxt, #488
	PUBLIC	_CBEB8ParTxt
_CBEB8ParTxt:
; rs232cmd.c  252	char code CB100ParTxt[]		 		  	= "CB100";				// 100% Colorbar
	DB	043H,042H,045H,042H,038H,000H
	SYMB	IDEN, "CB100ParTxt", _CB100ParTxt, #488, 129, 0
	SYMB	ALAB, _CB100ParTxt, #488
	PUBLIC	_CB100ParTxt
_CB100ParTxt:
; rs232cmd.c  253	char code CBGREY75ParTxt[] 		  	= "CBGREY75";			// Colorbar + 75% Grey
	DB	043H,042H,031H,030H,030H,000H
	SYMB	IDEN, "CBGREY75ParTxt", _CBGREY75ParTxt, #488, 129, 0
	SYMB	ALAB, _CBGREY75ParTxt, #488
	PUBLIC	_CBGREY75ParTxt
_CBGREY75ParTxt:
; rs232cmd.c  254	char code CBGR75ParTxt[]			  	= "CBGR75";
	DB	043H,042H,047H,052H,045H,059H,037H,035H,000H
	SYMB	IDEN, "CBGR75ParTxt", _CBGR75ParTxt, #488, 129, 0
	SYMB	ALAB, _CBGR75ParTxt, #488
	PUBLIC	_CBGR75ParTxt
_CBGR75ParTxt:
; rs232cmd.c  255	char code CBRED75ParTxt[]  		  	= "CBRED75";			// Colorbar + 75% Red
	DB	043H,042H,047H,052H,037H,035H,000H
	SYMB	IDEN, "CBRED75ParTxt", _CBRED75ParTxt, #488, 129, 0
	SYMB	ALAB, _CBRED75ParTxt, #488
	PUBLIC	_CBRED75ParTxt
_CBRED75ParTxt:
; rs232cmd.c  256	char code CBR75ParTxt[] 			  	= "CBR75";
	DB	043H,042H,052H,045H,044H,037H,035H,000H
	SYMB	IDEN, "CBR75ParTxt", _CBR75ParTxt, #488, 129, 0
	SYMB	ALAB, _CBR75ParTxt, #488
	PUBLIC	_CBR75ParTxt
_CBR75ParTxt:
; rs232cmd.c  257	char code RED75ParTxt[] 			  	= "RED75";				// 75% Red
	DB	043H,042H,052H,037H,035H,000H
	SYMB	IDEN, "RED75ParTxt", _RED75ParTxt, #488, 129, 0
	SYMB	ALAB, _RED75ParTxt, #488
	PUBLIC	_RED75ParTxt
_RED75ParTxt:
; rs232cmd.c  258	
; rs232cmd.c  259	char code MULTIBURSTParTxt[] 			= "MULTIBURST";		// Multi burst
	DB	052H,045H,044H,037H,035H,000H
	SYMB	IDEN, "MULTIBURSTParTxt", _MULTIBURSTParTxt, #488, 129, 0
	SYMB	ALAB, _MULTIBURSTParTxt, #488
	PUBLIC	_MULTIBURSTParTxt
_MULTIBURSTParTxt:
; rs232cmd.c  260	char code MULTParTxt[] 				 	= "MULT";
	DB	04DH,055H,04CH,054H,049H,042H,055H,052H,053H,054H,000H
	SYMB	IDEN, "MULTParTxt", _MULTParTxt, #488, 129, 0
	SYMB	ALAB, _MULTParTxt, #488
	PUBLIC	_MULTParTxt
_MULTParTxt:
; rs232cmd.c  261	char code CCIR18ParTxt[] 	 		 	= "CCIR18";
	DB	04DH,055H,04CH,054H,000H
	SYMB	IDEN, "CCIR18ParTxt", _CCIR18ParTxt, #488, 129, 0
	SYMB	ALAB, _CCIR18ParTxt, #488
	PUBLIC	_CCIR18ParTxt
_CCIR18ParTxt:
; rs232cmd.c  262	char code WIN10ParTxt[] 			 	= "WIN10";				// Window 10%
	DB	043H,043H,049H,052H,031H,038H,000H
	SYMB	IDEN, "WIN10ParTxt", _WIN10ParTxt, #488, 129, 0
	SYMB	ALAB, _WIN10ParTxt, #488
	PUBLIC	_WIN10ParTxt
_WIN10ParTxt:
; rs232cmd.c  263	char code WIN15ParTxt[] 			 	= "WIN15";				// Window 15%
	DB	057H,049H,04EH,031H,030H,000H
	SYMB	IDEN, "WIN15ParTxt", _WIN15ParTxt, #488, 129, 0
	SYMB	ALAB, _WIN15ParTxt, #488
	PUBLIC	_WIN15ParTxt
_WIN15ParTxt:
; rs232cmd.c  264	char code WIN20ParTxt[] 			 	= "WIN20";				// Window 20%
	DB	057H,049H,04EH,031H,035H,000H
	SYMB	IDEN, "WIN20ParTxt", _WIN20ParTxt, #488, 129, 0
	SYMB	ALAB, _WIN20ParTxt, #488
	PUBLIC	_WIN20ParTxt
_WIN20ParTxt:
; rs232cmd.c  265	char code WIN100ParTxt[] 			 	= "WIN100";				// Window 100%
	DB	057H,049H,04EH,032H,030H,000H
	SYMB	IDEN, "WIN100ParTxt", _WIN100ParTxt, #488, 129, 0
	SYMB	ALAB, _WIN100ParTxt, #488
	PUBLIC	_WIN100ParTxt
_WIN100ParTxt:
; rs232cmd.c  266	char code BLWH15ParTxt[] 			 	= "BLWH15KHZ";			// 15kHz Bl/Wh
	DB	057H,049H,04EH,031H,030H,030H,000H
	SYMB	IDEN, "BLWH15ParTxt", _BLWH15ParTxt, #488, 129, 0
	SYMB	ALAB, _BLWH15ParTxt, #488
	PUBLIC	_BLWH15ParTxt
_BLWH15ParTxt:
; rs232cmd.c  267	char code WHITE100ParTxt[] 		 	= "WHITE100";			// White 100%
	DB	042H,04CH,057H,048H,031H,035H,04BH,048H,05AH,000H
	SYMB	IDEN, "WHITE100ParTxt", _WHITE100ParTxt, #488, 129, 0
	SYMB	ALAB, _WHITE100ParTxt, #488
	PUBLIC	_WHITE100ParTxt
_WHITE100ParTxt:
; rs232cmd.c  268	char code WHIT100ParTxt[] 				= "WHIT100";
	DB	057H,048H,049H,054H,045H,031H,030H,030H,000H
	SYMB	IDEN, "WHIT100ParTxt", _WHIT100ParTxt, #488, 129, 0
	SYMB	ALAB, _WHIT100ParTxt, #488
	PUBLIC	_WHIT100ParTxt
_WHIT100ParTxt:
; rs232cmd.c  269	char code BLACKParTxt[] 		  		= "BLACK";				// Black
	DB	057H,048H,049H,054H,031H,030H,030H,000H
	SYMB	IDEN, "BLACKParTxt", _BLACKParTxt, #488, 129, 0
	SYMB	ALAB, _BLACKParTxt, #488
	PUBLIC	_BLACKParTxt
_BLACKParTxt:
; rs232cmd.c  270	char code BLACParTxt[]		 	  		= "BLAC";
	DB	042H,04CH,041H,043H,04BH,000H
	SYMB	IDEN, "BLACParTxt", _BLACParTxt, #488, 129, 0
	SYMB	ALAB, _BLACParTxt, #488
	PUBLIC	_BLACParTxt
_BLACParTxt:
; rs232cmd.c  271	
; rs232cmd.c  272	char code SDICHECKParTxt[] 	  		= "SDICHECK";			// Check field
	DB	042H,04CH,041H,043H,000H
	SYMB	IDEN, "SDICHECKParTxt", _SDICHECKParTxt, #488, 129, 0
	SYMB	ALAB, _SDICHECKParTxt, #488
	PUBLIC	_SDICHECKParTxt
_SDICHECKParTxt:
; rs232cmd.c  273	char code SDICParTxt[] 			  		= "SDIC";
	DB	053H,044H,049H,043H,048H,045H,043H,04BH,000H
	SYMB	IDEN, "SDICParTxt", _SDICParTxt, #488, 129, 0
	SYMB	ALAB, _SDICParTxt, #488
	PUBLIC	_SDICParTxt
_SDICParTxt:
; rs232cmd.c  274	char code DGREYParTxt[] 		  		= "DGREY";				// Digital grey
	DB	053H,044H,049H,043H,000H
	SYMB	IDEN, "DGREYParTxt", _DGREYParTxt, #488, 129, 0
	SYMB	ALAB, _DGREYParTxt, #488
	PUBLIC	_DGREYParTxt
_DGREYParTxt:
; rs232cmd.c  275	char code DGRParTxt[] 			  		= "DGR";
	DB	044H,047H,052H,045H,059H,000H
	SYMB	IDEN, "DGRParTxt", _DGRParTxt, #488, 129, 0
	SYMB	ALAB, _DGRParTxt, #488
	PUBLIC	_DGRParTxt
_DGRParTxt:
; rs232cmd.c  276	char code STAIRCASE5ParTxt[]			= "STAIRCASE5";	 	// 5-step staircase
	DB	044H,047H,052H,000H
	SYMB	IDEN, "STAIRCASE5ParTxt", _STAIRCASE5ParTxt, #488, 129, 0
	SYMB	ALAB, _STAIRCASE5ParTxt, #488
	PUBLIC	_STAIRCASE5ParTxt
_STAIRCASE5ParTxt:
; rs232cmd.c  277	char code STA5ParTxt[] 			  		= "STA5";
	DB	053H,054H,041H,049H,052H,043H,041H,053H,045H,035H,000H
	SYMB	IDEN, "STA5ParTxt", _STA5ParTxt, #488, 129, 0
	SYMB	ALAB, _STA5ParTxt, #488
	PUBLIC	_STA5ParTxt
_STA5ParTxt:
; rs232cmd.c  278	char code STAIRCASE10ParTxt[] 		= "STAIRCASE10";		// 10-step staircase
	DB	053H,054H,041H,035H,000H
	SYMB	IDEN, "STAIRCASE10ParTxt", _STAIRCASE10ParTxt, #488, 129, 0
	SYMB	ALAB, _STAIRCASE10ParTxt, #488
	PUBLIC	_STAIRCASE10ParTxt
_STAIRCASE10ParTxt:
; rs232cmd.c  279	char code STA10ParTxt[] 		  		= "STA10";
	DB	053H,054H,041H,049H,052H,043H,041H,053H,045H,031H,030H,000H
	SYMB	IDEN, "STA10ParTxt", _STA10ParTxt, #488, 129, 0
	SYMB	ALAB, _STA10ParTxt, #488
	PUBLIC	_STA10ParTxt
_STA10ParTxt:
; rs232cmd.c  280	char code CROSSHATCHParTxt[] 			= "CROSSHATCH";		// Cross hatch
	DB	053H,054H,041H,031H,030H,000H
	SYMB	IDEN, "CROSSHATCHParTxt", _CROSSHATCHParTxt, #488, 129, 0
	SYMB	ALAB, _CROSSHATCHParTxt, #488
	PUBLIC	_CROSSHATCHParTxt
_CROSSHATCHParTxt:
; rs232cmd.c  281	char code CROSParTxt[] 			  		= "CROS";
	DB	043H,052H,04FH,053H,053H,048H,041H,054H,043H,048H,000H
	SYMB	IDEN, "CROSParTxt", _CROSParTxt, #488, 129, 0
	SYMB	ALAB, _CROSParTxt, #488
	PUBLIC	_CROSParTxt
_CROSParTxt:
; rs232cmd.c  282	char code PLUGEParTxt[] 		  		= "PLUGE";				// PLUGE
	DB	043H,052H,04FH,053H,000H
	SYMB	IDEN, "PLUGEParTxt", _PLUGEParTxt, #488, 129, 0
	SYMB	ALAB, _PLUGEParTxt, #488
	PUBLIC	_PLUGEParTxt
_PLUGEParTxt:
; rs232cmd.c  283	char code PLUGParTxt[] 			  		= "PLUG";
	DB	050H,04CH,055H,047H,045H,000H
	SYMB	IDEN, "PLUGParTxt", _PLUGParTxt, #488, 129, 0
	SYMB	ALAB, _PLUGParTxt, #488
	PUBLIC	_PLUGParTxt
_PLUGParTxt:
; rs232cmd.c  284	
; rs232cmd.c  285	char code ANALOGParTxt[]		  		= "ANALOG";
	DB	050H,04CH,055H,047H,000H
	SYMB	IDEN, "ANALOGParTxt", _ANALOGParTxt, #488, 129, 0
	SYMB	ALAB, _ANALOGParTxt, #488
	PUBLIC	_ANALOGParTxt
_ANALOGParTxt:
; rs232cmd.c  286	char code ANALParTxt[]			  		= "ANAL";
	DB	041H,04EH,041H,04CH,04FH,047H,000H
	SYMB	IDEN, "ANALParTxt", _ANALParTxt, #488, 129, 0
	SYMB	ALAB, _ANALParTxt, #488
	PUBLIC	_ANALParTxt
_ANALParTxt:
; rs232cmd.c  287	char code AESEBUParTxt[]		  		= "AESEBU";
	DB	041H,04EH,041H,04CH,000H
	SYMB	IDEN, "AESEBUParTxt", _AESEBUParTxt, #488, 129, 0
	SYMB	ALAB, _AESEBUParTxt, #488
	PUBLIC	_AESEBUParTxt
_AESEBUParTxt:
; rs232cmd.c  288	char code AESParTxt[]			  		= "AES";
	DB	041H,045H,053H,045H,042H,055H,000H
	SYMB	IDEN, "AESParTxt", _AESParTxt, #488, 129, 0
	SYMB	ALAB, _AESParTxt, #488
	PUBLIC	_AESParTxt
_AESParTxt:
; rs232cmd.c  289	
; rs232cmd.c  290	char code F441KHZParTxt[]		 		= "F441KHZ";
	DB	041H,045H,053H,000H
	SYMB	IDEN, "F441KHZParTxt", _F441KHZParTxt, #488, 129, 0
	SYMB	ALAB, _F441KHZParTxt, #488
	PUBLIC	_F441KHZParTxt
_F441KHZParTxt:
; rs232cmd.c  291	char code F48KHZParTxt[] 				= "F48KHZ";
	DB	046H,034H,034H,031H,04BH,048H,05AH,000H
	SYMB	IDEN, "F48KHZParTxt", _F48KHZParTxt, #488, 129, 0
	SYMB	ALAB, _F48KHZParTxt, #488
	PUBLIC	_F48KHZParTxt
_F48KHZParTxt:
; rs232cmd.c  292	char code F45MHZParTxt[] 				= "F45MHZ";
	DB	046H,034H,038H,04BH,048H,05AH,000H
	SYMB	IDEN, "F45MHZParTxt", _F45MHZParTxt, #488, 129, 0
	SYMB	ALAB, _F45MHZParTxt, #488
	PUBLIC	_F45MHZParTxt
_F45MHZParTxt:
; rs232cmd.c  293	
; rs232cmd.c  294	char code S500HZParTxt[] 				= "S500HZ";				// Stereo 500 Hz
	DB	046H,034H,035H,04DH,048H,05AH,000H
	SYMB	IDEN, "S500HZParTxt", _S500HZParTxt, #488, 129, 0
	SYMB	ALAB, _S500HZParTxt, #488
	PUBLIC	_S500HZParTxt
_S500HZParTxt:
; rs232cmd.c  295	char code S1KHZParTxt[] 				= "S1KHZ";   			// Stereo 1 kHz
	DB	053H,035H,030H,030H,048H,05AH,000H
	SYMB	IDEN, "S1KHZParTxt", _S1KHZParTxt, #488, 129, 0
	SYMB	ALAB, _S1KHZParTxt, #488
	PUBLIC	_S1KHZParTxt
_S1KHZParTxt:
; rs232cmd.c  296	char code SEBU1KHZParTxt[]		 		= "SEBU1KHZ";			// Stereo EBU 1 kHz
	DB	053H,031H,04BH,048H,05AH,000H
	SYMB	IDEN, "SEBU1KHZParTxt", _SEBU1KHZParTxt, #488, 129, 0
	SYMB	ALAB, _SEBU1KHZParTxt, #488
	PUBLIC	_SEBU1KHZParTxt
_SEBU1KHZParTxt:
; rs232cmd.c  297	char code S8KHZParTxt[] 				= "S8KHZ";				// Stereo 8 kHz
	DB	053H,045H,042H,055H,031H,04BH,048H,05AH,000H
	SYMB	IDEN, "S8KHZParTxt", _S8KHZParTxt, #488, 129, 0
	SYMB	ALAB, _S8KHZParTxt, #488
	PUBLIC	_S8KHZParTxt
_S8KHZParTxt:
; rs232cmd.c  298	
; rs232cmd.c  299	char code SILENCEParTxt[] 				= "SILENCE";
	DB	053H,038H,04BH,048H,05AH,000H
	SYMB	IDEN, "SILENCEParTxt", _SILENCEParTxt, #488, 129, 0
	SYMB	ALAB, _SILENCEParTxt, #488
	PUBLIC	_SILENCEParTxt
_SILENCEParTxt:
; rs232cmd.c  300	char code SILParTxt[] 					= "SIL";
	DB	053H,049H,04CH,045H,04EH,043H,045H,000H
	SYMB	IDEN, "SILParTxt", _SILParTxt, #488, 129, 0
	SYMB	ALAB, _SILParTxt, #488
	PUBLIC	_SILParTxt
_SILParTxt:
; rs232cmd.c  301	
; rs232cmd.c  302	char code DMYParTxt[]					= "DMY";
	DB	053H,049H,04CH,000H
	SYMB	IDEN, "DMYParTxt", _DMYParTxt, #488, 129, 0
	SYMB	ALAB, _DMYParTxt, #488
	PUBLIC	_DMYParTxt
_DMYParTxt:
; rs232cmd.c  303	char code MDYParTxt[]					= "MDY";
	DB	044H,04DH,059H,000H
	SYMB	IDEN, "MDYParTxt", _MDYParTxt, #488, 129, 0
	SYMB	ALAB, _MDYParTxt, #488
	PUBLIC	_MDYParTxt
_MDYParTxt:
; rs232cmd.c  304	char code YMDParTxt[]					= "YMD";
	DB	04DH,044H,059H,000H
	SYMB	IDEN, "YMDParTxt", _YMDParTxt, #488, 129, 0
	SYMB	ALAB, _YMDParTxt, #488
	PUBLIC	_YMDParTxt
_YMDParTxt:
; rs232cmd.c  305	
; rs232cmd.c  306	char code BBParTxt[] 					= "BB";
	DB	059H,04DH,044H,000H
	SYMB	IDEN, "BBParTxt", _BBParTxt, #488, 129, 0
	SYMB	ALAB, _BBParTxt, #488
	PUBLIC	_BBParTxt
_BBParTxt:
; rs232cmd.c  307	char code SPGParTxt[]  					= "SPG";
	DB	042H,042H,000H
	SYMB	IDEN, "SPGParTxt", _SPGParTxt, #488, 129, 0
	SYMB	ALAB, _SPGParTxt, #488
	PUBLIC	_SPGParTxt
_SPGParTxt:
; rs232cmd.c  308	
; rs232cmd.c  309	char code OFFParTxt[] 					= "OFF";
	DB	053H,050H,047H,000H
	SYMB	IDEN, "OFFParTxt", _OFFParTxt, #488, 129, 0
	SYMB	ALAB, _OFFParTxt, #488
	PUBLIC	_OFFParTxt
_OFFParTxt:
; rs232cmd.c  310	char code ONParTxt[] 					= "ON";
	DB	04FH,046H,046H,000H
	SYMB	IDEN, "ONParTxt", _ONParTxt, #488, 129, 0
	SYMB	ALAB, _ONParTxt, #488
	PUBLIC	_ONParTxt
_ONParTxt:
; rs232cmd.c  311	
; rs232cmd.c  312	char code UPParTxt[] 					= "UP";
	DB	04FH,04EH,000H
	SYMB	IDEN, "UPParTxt", _UPParTxt, #488, 129, 0
	SYMB	ALAB, _UPParTxt, #488
	PUBLIC	_UPParTxt
_UPParTxt:
; rs232cmd.c  313	char code DOWNParTxt[] 				 	= "DOWN";
	DB	055H,050H,000H
	SYMB	IDEN, "DOWNParTxt", _DOWNParTxt, #488, 129, 0
	SYMB	ALAB, _DOWNParTxt, #488
	PUBLIC	_DOWNParTxt
_DOWNParTxt:
; rs232cmd.c  314	
; rs232cmd.c  315	char code NORMALParTxt[] 				= "NORMAL";
	DB	044H,04FH,057H,04EH,000H
	SYMB	IDEN, "NORMALParTxt", _NORMALParTxt, #488, 129, 0
	SYMB	ALAB, _NORMALParTxt, #488
	PUBLIC	_NORMALParTxt
_NORMALParTxt:
; rs232cmd.c  316	char code NORMParTxt[] 					= "NORM";
	DB	04EH,04FH,052H,04DH,041H,04CH,000H
	SYMB	IDEN, "NORMParTxt", _NORMParTxt, #488, 129, 0
	SYMB	ALAB, _NORMParTxt, #488
	PUBLIC	_NORMParTxt
_NORMParTxt:
; rs232cmd.c  317	
; rs232cmd.c  318	char code MINParTxt[] 					= "MIN";
	DB	04EH,04FH,052H,04DH,000H
	SYMB	IDEN, "MINParTxt", _MINParTxt, #488, 129, 0
	SYMB	ALAB, _MINParTxt, #488
	PUBLIC	_MINParTxt
_MINParTxt:
; rs232cmd.c  319	char code MAXParTxt[] 					= "MAX";
	DB	04DH,049H,04EH,000H
	SYMB	IDEN, "MAXParTxt", _MAXParTxt, #488, 129, 0
	SYMB	ALAB, _MAXParTxt, #488
	PUBLIC	_MAXParTxt
_MAXParTxt:
; rs232cmd.c  320	
; rs232cmd.c  321	char code UNLOCKEDParTxt[] 	 		= "UNLOCKED";
	DB	04DH,041H,058H,000H
	SYMB	IDEN, "UNLOCKEDParTxt", _UNLOCKEDParTxt, #488, 129, 0
	SYMB	ALAB, _UNLOCKEDParTxt, #488
	PUBLIC	_UNLOCKEDParTxt
_UNLOCKEDParTxt:
; rs232cmd.c  322	char code GENLOCKEDParTxt[] 	 		= "GENLOCKED";
	DB	055H,04EH,04CH,04FH,043H,04BH,045H,044H,000H
	SYMB	IDEN, "GENLOCKEDParTxt", _GENLOCKEDParTxt, #488, 129, 0
	SYMB	ALAB, _GENLOCKEDParTxt, #488
	PUBLIC	_GENLOCKEDParTxt
_GENLOCKEDParTxt:
; rs232cmd.c  323	
; rs232cmd.c  324	
; rs232cmd.c  325	void CLSCommand( void);
; rs232cmd.c  326	void ESECommand( void);
; rs232cmd.c  327	void ESRCommand( void);
; rs232cmd.c  328	void OPCCommand( void);
; rs232cmd.c  329	void SRECommand( void);
; rs232cmd.c  330	void STBCommand( void);
; rs232cmd.c  331	void TSTCommand( void);
; rs232cmd.c  332	void WAICommand( void);
; rs232cmd.c  333	void RSTCommand( void);
; rs232cmd.c  334	void IDNCommand( void);
; rs232cmd.c  335	void RCLCommand( void);
; rs232cmd.c  336	void SAVCommand( void);
; rs232cmd.c  337	
; rs232cmd.c  338	void SystemError( void);
; rs232cmd.c  339	void SystemVersion( void);
; rs232cmd.c  340	void SystemTime( void);
; rs232cmd.c  341	void SystemDate( void);
; rs232cmd.c  342	
; rs232cmd.c  343	void SystemPresetName( void);
; rs232cmd.c  344	void SystemPresetAuthor( void);
; rs232cmd.c  345	void SystemPresetDate( void);
; rs232cmd.c  346	void SystemPresetDownload( void);
; rs232cmd.c  347	void SystemPresetUpload( void);
; rs232cmd.c  348	
; rs232cmd.c  349	void StatusOperEvent( void);
; rs232cmd.c  350	void StatusOperCondition( void);
; rs232cmd.c  351	void StatusOperEnable( void);
; rs232cmd.c  352	void StatusQuestEvent( void);
; rs232cmd.c  353	void StatusQuestCondition( void);
; rs232cmd.c  354	void StatusQuestEnable( void);
; rs232cmd.c  355	void StatusPreset( void);
; rs232cmd.c  356	
; rs232cmd.c  357	void GenlockGen( void);
; rs232cmd.c  358	void GenlockGenSystem( void);
; rs232cmd.c  359	void GenlockGenDelay( void);
; rs232cmd.c  360	void GenlockGenCalibrateEnable( void);
; rs232cmd.c  361	void GenlockGenCalibrateAdjust( void);
; rs232cmd.c  362	void GenlockGenCalibrateStore( void);
; rs232cmd.c  363	
; rs232cmd.c  364	void BBGenSuffix( void);
; rs232cmd.c  365	void BBGen( void);
; rs232cmd.c  366	void BBGenSystem( void);
; rs232cmd.c  367	void BBGenDelay( void);
; rs232cmd.c  368	void BBGenScHPhase( void);
; rs232cmd.c  369	
; rs232cmd.c  370	void TSGen( void);
; rs232cmd.c  371	void TSGenPattern( void);
; rs232cmd.c  372	void TSGenSystem( void);
; rs232cmd.c  373	void TSGenDelay( void);
; rs232cmd.c  374	void TSGenScHPhase( void);
; rs232cmd.c  375	void TSGenEmbAudioSignal( void);
; rs232cmd.c  376	
; rs232cmd.c  377	void AudioGenOutput( void);
; rs232cmd.c  378	
; rs232cmd.c  379	void AudioGenAnalog( void);
; rs232cmd.c  380	void AudioGenAnalogSignal( void);
; rs232cmd.c  381	void AudioGenAnalogLevel( void);
; rs232cmd.c  382	void AudioGenAnalogClick( void);
; rs232cmd.c  383	
; rs232cmd.c  384	void AudioGenAESEBU( void);
; rs232cmd.c  385	void AudioGenAESEBUSystem( void);
; rs232cmd.c  386	void AudioGenAESEBUSignal( void);
; rs232cmd.c  387	void AudioGenAESEBULevel( void);
; rs232cmd.c  388	void AudioGenAESEBUTiming( void);
; rs232cmd.c  389	void AudioGenAESEBUWordClock( void);
; rs232cmd.c  390	void AudioGenAESEBUClick( void);
; rs232cmd.c  391	
; rs232cmd.c  392	void FactPassword( void);
; rs232cmd.c  393	void FactReset( void);
; rs232cmd.c  394	void FactV24Command( void);
; rs232cmd.c  395	void FactV24Transparent( void);
; rs232cmd.c  396	
; rs232cmd.c  397	void FactChecksumCode( void);
; rs232cmd.c  398	void FactChecksumPLD( void);
; rs232cmd.c  399	void FactChecksumEmbAudio( void);
; rs232cmd.c  400	void FactChecksumPattern( void);
; rs232cmd.c  401	void FactChecksumRange( void);
; rs232cmd.c  402	
; rs232cmd.c  403	void FactMainVersion( void);
; rs232cmd.c  404	void FactMainIDNCompany( void);
; rs232cmd.c  405	void FactMainIDNType( void);
; rs232cmd.c  406	void FactMainIDNKUNumber( void);
; rs232cmd.c  407	void FactMainIDNSWRevision( void);
; rs232cmd.c  408	
; rs232cmd.c  409	void FactMainSystem( void);
; rs232cmd.c  410	void FactMainFMSDateProd( void);
; rs232cmd.c  411	void FactMainFMSDateUpd( void);
; rs232cmd.c  412	
; rs232cmd.c  413	void FactGenlockGenDate( void);
; rs232cmd.c  414	void FactGenlockGenVersion( void);
; rs232cmd.c  415	void FactGenlockGenFRefDate( void);
; rs232cmd.c  416	void FactGenlockGenFRefDAC( void);
; rs232cmd.c  417	void FactGenlockGenURefDate( void);
; rs232cmd.c  418	void FactGenlockGenURefDAC( void);
; rs232cmd.c  419	void FactGenlockGenHPHZero( void);
; rs232cmd.c  420	void FactGenlockGenPhase( void);
; rs232cmd.c  421	
; rs232cmd.c  422	void FactBBGenDate( void);
; rs232cmd.c  423	void FactBBGenVersion( void);
; rs232cmd.c  424	void FactBBGenSignal( void);
; rs232cmd.c  425	void FactBBGenPhase( void);
; rs232cmd.c  426	void FactBBGenScHPhase( void);
; rs232cmd.c  427	void FactBBGenDAC( void);
; rs232cmd.c  428	
; rs232cmd.c  429	void FactTSGenDate( void);
; rs232cmd.c  430	void FactTSGenAGain( void);
; rs232cmd.c  431	void FactTSGenCGain( void);
; rs232cmd.c  432	void FactTSGenPhase( void);
; rs232cmd.c  433	void FactTSGenScHPhase( void);
; rs232cmd.c  434	
; rs232cmd.c  435	void FactAudioGenStatus( void);
; rs232cmd.c  436	void FactAudioGenDate( void);
; rs232cmd.c  437	void FactAudioGenLevel( void);
; rs232cmd.c  438	
; rs232cmd.c  439	void FactPLDVersion( void);
; rs232cmd.c  440	void FactTCXOStatus( void);
; rs232cmd.c  441	void FactMultiMediaChip( void);
; rs232cmd.c  442	
; rs232cmd.c  443	int FindParameter( char* par, struct PAR_STRUCT code* TmpPtr);
; rs232cmd.c  444	
; rs232cmd.c  445	long FLTToSamples( UC system, int F, int L, float T);
; rs232cmd.c  446	void PrintSamplesToFLT( UC system, long samples);
; rs232cmd.c  447	
; rs232cmd.c  448	// **************************************************************************
; rs232cmd.c  449	struct CMD_STRUCT code Mandated[12] = {
	DB	047H,045H,04EH,04CH,04FH,043H,04BH,045H,044H,000H
	SYMB	TYPE, 490, 'n', #2, 129
	SYMB	TYPE, 491, 'P', #490
	SYMB	TYPE, 493, 'n', #492, 129
	SYMB	TYPE, 494, 'P', #493
	SYMB	TYPE, 495, 'X', 12, #1, 30, 0
	SYMB	TYPE, 496, 'n', #495, 129
	SYMB	TYPE, 497, 'P', #496
	SYMB	TYPE, 498, 'X', 12, #1, 30, 0
	SYMB	TYPE, 499, 'n', #498, 129
	SYMB	TYPE, 500, 'P', #499
	SYMB	TYPE, 492, "CMD_STRUCT", 'S', 24,\
		 "LongName", #491, 0,\
		 "ShortName", #491, 4,\
		 "SameLevel", #494, 8,\
		 "NextLevel", #494, 12,\
		 "Suffix", #497, 16,\
		 "Function", #500, 20
	SYMB	TYPE, 501, 'Z', #492, 11
	SYMB	IDEN, "Mandated", _Mandated, #501, 129, 0
	SYMB	ALAB, _Mandated, #501
	PUBLIC	_Mandated
	ALIGN	1
_Mandated:
	DD	_CLSCmdTxt
	DD	000000000H
	DD	_Mandated+24
	DD	000000000H,000000000H
	DD	_CLSCommand,_ESECmdTxt
	DD	000000000H
	DD	_Mandated+48
	DD	000000000H,000000000H
	DD	_ESECommand,_ESRCmdTxt
	DD	000000000H
	DD	_Mandated+72
	DD	000000000H,000000000H
	DD	_ESRCommand,_IDNCmdTxt
	DD	000000000H
	DD	_Mandated+96
	DD	000000000H,000000000H
	DD	_IDNCommand,_OPCCmdTxt
	DD	000000000H
	DD	_Mandated+120
	DD	000000000H,000000000H
	DD	_OPCCommand,_RSTCmdTxt
	DD	000000000H
	DD	_Mandated+144
	DD	000000000H,000000000H
	DD	_RSTCommand,_SRECmdTxt
	DD	000000000H
	DD	_Mandated+168
	DD	000000000H,000000000H
	DD	_SRECommand,_STBCmdTxt
	DD	000000000H
	DD	_Mandated+192
	DD	000000000H,000000000H
	DD	_STBCommand,_TSTCmdTxt
	DD	000000000H
	DD	_Mandated+216
	DD	000000000H,000000000H
	DD	_TSTCommand,_RCLCmdTxt
	DD	000000000H
	DD	_Mandated+240
	DD	000000000H,000000000H
	DD	_RCLCommand,_SAVCmdTxt
	DD	000000000H
	DD	_Mandated+264
	DD	000000000H,000000000H
	DD	_SAVCommand,_WAICmdTxt
	DD	000000000H,000000000H,000000000H,000000000H
; rs232cmd.c  450		{ CLSCmdTxt, NULL, &Mandated[1],  NULL, NONE, CLSCommand},
; rs232cmd.c  451		{ ESECmdTxt, NULL, &Mandated[2],  NULL, NONE, ESECommand},
; rs232cmd.c  452		{ ESRCmdTxt, NULL, &Mandated[3],  NULL, NONE, ESRCommand},
; rs232cmd.c  453		{ IDNCmdTxt, NULL, &Mandated[4],  NULL, NONE, IDNCommand},
; rs232cmd.c  454		{ OPCCmdTxt, NULL, &Mandated[5],  NULL, NONE, OPCCommand},
; rs232cmd.c  455		{ RSTCmdTxt, NULL, &Mandated[6],  NULL, NONE, RSTCommand},
; rs232cmd.c  456		{ SRECmdTxt, NULL, &Mandated[7],  NULL, NONE, SRECommand},
; rs232cmd.c  457		{ STBCmdTxt, NULL, &Mandated[8],  NULL, NONE, STBCommand},
; rs232cmd.c  458		{ TSTCmdTxt, NULL, &Mandated[9],  NULL, NONE, TSTCommand},
; rs232cmd.c  459		{ RCLCmdTxt, NULL, &Mandated[10], NULL, NONE, RCLCommand},
; rs232cmd.c  460		{ SAVCmdTxt, NULL, &Mandated[11], NULL, NONE, SAVCommand},
; rs232cmd.c  461		{ WAICmdTxt, NULL, NULL         , NULL, NONE, WAICommand}
; rs232cmd.c  462	};
; rs232cmd.c  463	
; rs232cmd.c  464	struct CMD_STRUCT code Subsystem[9] = {
	DD	_WAICommand
	SYMB	TYPE, 503, 'Z', #492, 8
	SYMB	IDEN, "Subsystem", _Subsystem, #503, 129, 0
	SYMB	ALAB, _Subsystem, #503
	PUBLIC	_Subsystem
	ALIGN	1
_Subsystem:
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_Subsystem+24
	DD	_System
	DD	000000000H,000000000H
	DD	_STATUSCmdTxt,_STATCmdTxt
	DD	_Subsystem+48
	DD	_Status
	DD	000000000H,000000000H
	DD	_DIAGNOSTICCmdTxt,_DIAGCmdTxt
	DD	_Subsystem+72
	DD	000000000H,000000000H,000000000H
	DD	_MONITORCmdTxt,_MONCmdTxt
	DD	_Subsystem+96
	DD	000000000H,000000000H,000000000H
	DD	_INPUTCmdTxt,_INPCmdTxt
	DD	_Subsystem+120
	DD	_Input
	DD	000000000H,000000000H
	DD	_OUTPUTCmdTxt,_OUTPCmdTxt
	DD	_Subsystem+144
	DD	_Output
	DD	000000000H,000000000H
	DD	_USERCmdTxt,_USERCmdTxt
	DD	_Subsystem+168
	DD	000000000H,000000000H,000000000H
	DD	_MEASURECmdTxt,_MEASCmdTxt
	DD	_Subsystem+192
	DD	000000000H,000000000H,000000000H
	DD	_FACTORYCmdTxt,_FACTCmdTxt
	DD	000000000H
	DD	_Factory
; rs232cmd.c  465		{ SYSTEMCmdTxt,	  SYSTCmdTxt, &Subsystem[1], &System[0],  NONE, NONE},
; rs232cmd.c  466		{ STATUSCmdTxt, 	  STATCmdTxt, &Subsystem[2], &Status[0],  NONE, NONE},
; rs232cmd.c  467		{ DIAGNOSTICCmdTxt, DIAGCmdTxt, &Subsystem[3], NULL,		   NONE, NONE},
; rs232cmd.c  468		{ MONITORCmdTxt, 	  MONCmdTxt,  &Subsystem[4], NULL, 		   NONE, NONE},
; rs232cmd.c  469		{ INPUTCmdTxt, 	  INPCmdTxt,  &Subsystem[5], &Input[0],   NONE, NONE},
; rs232cmd.c  470		{ OUTPUTCmdTxt, 	  OUTPCmdTxt, &Subsystem[6], &Output[0],  NONE, NONE},
; rs232cmd.c  471		{ USERCmdTxt, 		  USERCmdTxt, &Subsystem[7], NULL, 		   NONE, NONE},
; rs232cmd.c  472		{ MEASURECmdTxt, 	  MEASCmdTxt, &Subsystem[8], NULL, 		   NONE, NONE},
; rs232cmd.c  473		{ FACTORYCmdTxt, 	  FACTCmdTxt, NULL, 			  &Factory[0], NONE, NONE},
; rs232cmd.c  474	};
; rs232cmd.c  475	
; rs232cmd.c  476	// **************************************************************************
; rs232cmd.c  477	/*	CMD:	SUB1:	SUB2:	SUB3:	PARM:
; rs232cmd.c  478			SYSTem
; rs232cmd.c  479				:ERRor?
; rs232cmd.c  480	    	:VERSion?
; rs232cmd.c  481		    :PRESet<?>
; rs232cmd.c  482	  	  	[:ACTIVE?]
; rs232cmd.c  483	  	  	:RECall<?>	1 .. 4
; rs232cmd.c  484	    	  :STORe			1 .. 4
; rs232cmd.c  485	      	:NAMe<?>		1 .. 4 , <name>
; rs232cmd.c  486	      	:AUTHor<?> 	1 .. 4 , <author name>
; rs232cmd.c  487		      :DATE<?>		1 .. 4[, <year>,<month>,<date>]
; rs232cmd.c  488					:DOWNload		1 .. 4
; rs232cmd.c  489					:UPLoad			1 .. 4
; rs232cmd.c  490	    	:EVENtlog
; rs232cmd.c  491	    	:DATE
; rs232cmd.c  492	    	:TIME
; rs232cmd.c  493	*/
; rs232cmd.c  494	struct CMD_STRUCT code System[6] = {
	DD	000000000H,000000000H
	SYMB	TYPE, 505, 'Z', #492, 5
	SYMB	IDEN, "System", _System, #505, 129, 0
	SYMB	ALAB, _System, #505
	PUBLIC	_System
	ALIGN	1
_System:
	DD	_ERRORCmdTxt,_ERRCmdTxt
	DD	_System+24
	DD	000000000H,000000000H
	DD	_SystemError,_VERSIONCmdTxt,_VERSCmdTxt
	DD	_System+48
	DD	000000000H,000000000H
	DD	_SystemVersion,_PRESETCmdTxt,_PRESCmdTxt
	DD	_System+72
	DD	_SystemLevel1
	DD	000000000H
	DD	_RCLCommand,_EVENTLOGCmdTxt,_EVENCmdTxt
	DD	_System+96
	DD	000000000H,000000000H,000000000H
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_System+120
	DD	000000000H,000000000H,000000000H
	DD	_TIMECmdTxt,_TIMECmdTxt
; rs232cmd.c  495		{ ERRORCmdTxt, 	ERRCmdTxt, 	&System[1], NULL, 				NONE, SystemError},
; rs232cmd.c  496		{ VERSIONCmdTxt,	VERSCmdTxt, &System[2], NULL, 				NONE, SystemVersion},
; rs232cmd.c  497		{ PRESETCmdTxt, 	PRESCmdTxt, &System[3], &SystemLevel1[0], NONE, RCLCommand},
; rs232cmd.c  498		{ EVENTLOGCmdTxt, EVENCmdTxt, &System[4], NULL, 				NONE, NONE},
; rs232cmd.c  499		{ DATECmdTxt, 		DATECmdTxt, &System[5], NULL, 				NONE, NONE},
; rs232cmd.c  500		{ TIMECmdTxt, 		TIMECmdTxt, NULL, 		NULL, 				NONE, NONE}
; rs232cmd.c  501	};
; rs232cmd.c  502	
; rs232cmd.c  503	struct CMD_STRUCT code SystemLevel1[7] = {
	DD	000000000H,000000000H,000000000H,000000000H
	SYMB	TYPE, 507, 'Z', #492, 6
	SYMB	IDEN, "SystemLevel1", _SystemLevel1, #507, 129, 0
	SYMB	ALAB, _SystemLevel1, #507
	PUBLIC	_SystemLevel1
	ALIGN	1
_SystemLevel1:
	DD	_RECALLCmdTxt,_RECCmdTxt
	DD	_SystemLevel1+24
	DD	000000000H,000000000H
	DD	_RCLCommand,_STORECmdTxt,_STORCmdTxt
	DD	_SystemLevel1+48
	DD	000000000H,000000000H
	DD	_SAVCommand,_NAMECmdTxt,_NAMECmdTxt
	DD	_SystemLevel1+72
	DD	000000000H,000000000H
	DD	_SystemPresetName,_AUTHORCmdTxt,_AUTHCmdTxt
	DD	_SystemLevel1+96
	DD	000000000H,000000000H
	DD	_SystemPresetAuthor,_DATECmdTxt,_DATECmdTxt
	DD	_SystemLevel1+120
	DD	000000000H,000000000H
	DD	_SystemPresetDate,_DOWNLOADCmdTxt,_DOWNCmdTxt
	DD	_SystemLevel1+144
	DD	000000000H,000000000H
	DD	_SystemPresetDownload,_UPLOADCmdTxt,_UPLCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  504		{ RECALLCmdTxt,   RECCmdTxt, 	&SystemLevel1[1], NULL, NONE, RCLCommand},
; rs232cmd.c  505		{ STORECmdTxt,    STORCmdTxt, &SystemLevel1[2], NULL, NONE, SAVCommand},
; rs232cmd.c  506		{ NAMECmdTxt, 	   NAMECmdTxt, &SystemLevel1[3],	NULL, NONE, SystemPresetName},
; rs232cmd.c  507		{ AUTHORCmdTxt,   AUTHCmdTxt, &SystemLevel1[4],	NULL, NONE, SystemPresetAuthor},
; rs232cmd.c  508		{ DATECmdTxt, 	   DATECmdTxt, &SystemLevel1[5],	NULL, NONE, SystemPresetDate},
; rs232cmd.c  509		{ DOWNLOADCmdTxt, DOWNCmdTxt,	&SystemLevel1[6],	NULL, NONE, SystemPresetDownload},
; rs232cmd.c  510		{ UPLOADCmdTxt, 	UPLCmdTxt,	NULL, 				NULL, NONE, SystemPresetUpload},
; rs232cmd.c  511	};
; rs232cmd.c  512	
; rs232cmd.c  513	// **************************************************************************
; rs232cmd.c  514	/*	CMD:	SUB1:	SUB2:	SUB3:	PARM:
; rs232cmd.c  515			STATus
; rs232cmd.c  516		 		:OPERation
; rs232cmd.c  517	  	 		:EVENt?
; rs232cmd.c  518		      :CONDition?
; rs232cmd.c  519	  	    :ENABle<?>	0 .. 65535
; rs232cmd.c  520	   		:QUEStionable
; rs232cmd.c  521	     		:EVENt?
; rs232cmd.c  522		      :CONDition?
; rs232cmd.c  523	  	    :ENABle<?>	0 .. 65535
; rs232cmd.c  524				:PRESet				TBD
; rs232cmd.c  525		    :PT5201?
; rs232cmd.c  526	*/
; rs232cmd.c  527	struct CMD_STRUCT code Status[3] = {
	DD	_SystemPresetUpload
	SYMB	TYPE, 509, 'Z', #492, 2
	SYMB	IDEN, "Status", _Status, #509, 129, 0
	SYMB	ALAB, _Status, #509
	PUBLIC	_Status
	ALIGN	1
_Status:
	DD	_OPERATIONCmdTxt,_OPERCmdTxt
	DD	_Status+24
	DD	_StatusLevel1_1
	DD	000000000H
	DD	_StatusOperEvent,_QUESTIONABLECmdTxt,_QUESCmdTxt
	DD	_Status+48
	DD	_StatusLevel1_2
	DD	000000000H
	DD	_StatusQuestEvent,_PRESETCmdTxt,_PRESCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  528		{ OPERATIONCmdTxt, 	 OPERCmdTxt, &Status[1], &StatusLevel1_1[0], NONE, StatusOperEvent},
; rs232cmd.c  529		{ QUESTIONABLECmdTxt, QUESCmdTxt, &Status[2], &StatusLevel1_2[0], NONE, StatusQuestEvent},
; rs232cmd.c  530		{ PRESETCmdTxt, 		 PRESCmdTxt, NULL, 		 NULL, 					NONE, StatusPreset},
; rs232cmd.c  531	};
; rs232cmd.c  532	
; rs232cmd.c  533	struct CMD_STRUCT code StatusLevel1_1[3] = {
	DD	_StatusPreset
	SYMB	IDEN, "StatusLevel1_1", _StatusLevel1_1, #509, 129, 0
	SYMB	ALAB, _StatusLevel1_1, #509
	PUBLIC	_StatusLevel1_1
	ALIGN	1
_StatusLevel1_1:
	DD	_EVENTCmdTxt,_EVENCmdTxt
	DD	_StatusLevel1_1+24
	DD	000000000H,000000000H
	DD	_StatusOperEvent,_CONDITIONCmdTxt,_CONDCmdTxt
	DD	_StatusLevel1_1+48
	DD	000000000H,000000000H
	DD	_StatusOperCondition,_ENABLECmdTxt,_ENABCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  534		{ EVENTCmdTxt, 	 EVENCmdTxt, &StatusLevel1_1[1], NULL, NONE, StatusOperEvent},
; rs232cmd.c  535		{ CONDITIONCmdTxt, CONDCmdTxt, &StatusLevel1_1[2], NULL, NONE, StatusOperCondition},
; rs232cmd.c  536		{ ENABLECmdTxt, 	 ENABCmdTxt, NULL, 				   NULL, NONE, StatusOperEnable},
; rs232cmd.c  537	};
; rs232cmd.c  538	
; rs232cmd.c  539	struct CMD_STRUCT code StatusLevel1_2[3] = {
	DD	_StatusOperEnable
	SYMB	IDEN, "StatusLevel1_2", _StatusLevel1_2, #509, 129, 0
	SYMB	ALAB, _StatusLevel1_2, #509
	PUBLIC	_StatusLevel1_2
	ALIGN	1
_StatusLevel1_2:
	DD	_EVENTCmdTxt,_EVENCmdTxt
	DD	_StatusLevel1_2+24
	DD	000000000H,000000000H
	DD	_StatusQuestEvent,_CONDITIONCmdTxt,_CONDCmdTxt
	DD	_StatusLevel1_2+48
	DD	000000000H,000000000H
	DD	_StatusQuestCondition,_ENABLECmdTxt,_ENABCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  540		{ EVENTCmdTxt,		 EVENCmdTxt, &StatusLevel1_2[1], NULL, NONE, StatusQuestEvent},
; rs232cmd.c  541		{ CONDITIONCmdTxt, CONDCmdTxt, &StatusLevel1_2[2], NULL, NONE, StatusQuestCondition},
; rs232cmd.c  542		{ ENABLECmdTxt, 	 ENABCmdTxt, NULL, 					NULL, NONE, StatusQuestEnable},
; rs232cmd.c  543	};
; rs232cmd.c  544	
; rs232cmd.c  545	
; rs232cmd.c  546	// **************************************************************************
; rs232cmd.c  547	/*	CMD:	SUB1:	SUB2:		PARM:
; rs232cmd.c  548			INPut
; rs232cmd.c  549				:GENLOCK<?>
; rs232cmd.c  550					:SYSTem			INTernal | PALBurst | NTSCburst |F10MHZ
; rs232cmd.c  551					:DELay			<Field>,<Line>,<Time>
; rs232cmd.c  552					:CALibrate
; rs232cmd.c  553						:ENABle		OFF|ON
; rs232cmd.c  554						:ADJust		UP|DOWN|MIN|MAX
; rs232cmd.c  555						:STORe
; rs232cmd.c  556											
; rs232cmd.c  557	*/
; rs232cmd.c  558	//**************************************************************************
; rs232cmd.c  559	struct CMD_STRUCT code Input[1] = {
	DD	_StatusQuestEnable
	SYMB	TYPE, 511, 'Z', #492, 0
	SYMB	IDEN, "Input", _Input, #511, 129, 0
	SYMB	ALAB, _Input, #511
	PUBLIC	_Input
	ALIGN	1
_Input:	DD	_GENLOCKCmdTxt,_GENLCmdTxt
	DD	000000000H
	DD	_GenlockLevel1
	DD	000000000H
; rs232cmd.c  560		{ GENLOCKCmdTxt, GENLCmdTxt, NULL, &GenlockLevel1[0], NONE, GenlockGen},
; rs232cmd.c  561	};
; rs232cmd.c  562	
; rs232cmd.c  563	struct CMD_STRUCT code GenlockLevel1[3] = {
	DD	_GenlockGen
	SYMB	IDEN, "GenlockLevel1", _GenlockLevel1, #509, 129, 0
	SYMB	ALAB, _GenlockLevel1, #509
	PUBLIC	_GenlockLevel1
	ALIGN	1
_GenlockLevel1:
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_GenlockLevel1+24
	DD	000000000H,000000000H
	DD	_GenlockGenSystem,_DELAYCmdTxt,_DELCmdTxt
	DD	_GenlockLevel1+48
	DD	000000000H,000000000H
	DD	_GenlockGenDelay,_CALIBRATECmdTxt,_CALCmdTxt
	DD	000000000H
	DD	_GenlockLevel1_1
; rs232cmd.c  564		{ SYSTEMCmdTxt, 	 SYSTCmdTxt, &GenlockLevel1[1], NULL, 					  NONE, GenlockGenSystem},
; rs232cmd.c  565		{ DELAYCmdTxt, 	 DELCmdTxt,  &GenlockLevel1[2], NULL, 					  NONE, GenlockGenDelay},
; rs232cmd.c  566		{ CALIBRATECmdTxt, CALCmdTxt,  NULL, 				  &GenlockLevel1_1[0], NONE, NONE},
; rs232cmd.c  567	};
; rs232cmd.c  568	
; rs232cmd.c  569	struct CMD_STRUCT code GenlockLevel1_1[3] = {
	DD	000000000H,000000000H
	SYMB	IDEN, "GenlockLevel1_1", _GenlockLevel1_1, #509, 129, 0
	SYMB	ALAB, _GenlockLevel1_1, #509
	PUBLIC	_GenlockLevel1_1
	ALIGN	1
_GenlockLevel1_1:
	DD	_ENABLECmdTxt,_ENABCmdTxt
	DD	_GenlockLevel1_1+24
	DD	000000000H,000000000H
	DD	_GenlockGenCalibrateEnable,_ADJUSTCmdTxt,_ADJCmdTxt
	DD	_GenlockLevel1_1+48
	DD	000000000H,000000000H
	DD	_GenlockGenCalibrateAdjust,_STORECmdTxt,_STORCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  570		{ ENABLECmdTxt, ENABCmdTxt, &GenlockLevel1_1[1], NULL, NONE, GenlockGenCalibrateEnable},
; rs232cmd.c  571		{ ADJUSTCmdTxt, ADJCmdTxt,  &GenlockLevel1_1[2], NULL, NONE, GenlockGenCalibrateAdjust},
; rs232cmd.c  572		{ STORECmdTxt,  STORCmdTxt, NULL, 					 NULL, NONE, GenlockGenCalibrateStore},
; rs232cmd.c  573	};
; rs232cmd.c  574	// **************************************************************************
; rs232cmd.c  575	/*	CMD:	SUB1:	SUB2:		PARM:
; rs232cmd.c  576			OUTPut
; rs232cmd.c  577				:BB1-3<?>
; rs232cmd.c  578					:SYSTem			INTernal | PALBurst | NTSCburst |F10MHZ
; rs232cmd.c  579					:DELay			<Field>,<Line>,<Time>
; rs232cmd.c  580					:SCHPhase		<-179to 180>
; rs232cmd.c  581	
; rs232cmd.c  582				:TSGenerator<?>
; rs232cmd.c  583					:PATTern 	  <pattern name>
; rs232cmd.c  584					:SYSTem			PAL|NTSC
; rs232cmd.c  585					:DELay			<Field>,<Line>,<Time>
; rs232cmd.c  586					:SCHPhase		<-179to 180>
; rs232cmd.c  587					:EMBaudio<?>
; rs232cmd.c  588						[:SIGNal]	OFF | SILence | F1KHZ
; rs232cmd.c  589						:LEVel
; rs232cmd.c  590	
; rs232cmd.c  591				:AUDio
; rs232cmd.c  592					:OUTPut
; rs232cmd.c  593					:ANALog<?>
; rs232cmd.c  594						:SIGNal
; rs232cmd.c  595						:LEVel
; rs232cmd.c  596						:CLICk
; rs232cmd.c  597					:AESebu<?>
; rs232cmd.c  598						:SYSTem
; rs232cmd.c  599						:SIGNal
; rs232cmd.c  600						:LEVel
; rs232cmd.c  601						:TIMing
; rs232cmd.c  602						:WORDclock
; rs232cmd.c  603						:CLICkperiod
; rs232cmd.c  604	*/
; rs232cmd.c  605	struct CMD_STRUCT code Output[3] = {
	DD	_GenlockGenCalibrateStore
	SYMB	IDEN, "Output", _Output, #509, 129, 0
	SYMB	ALAB, _Output, #509
	PUBLIC	_Output
	ALIGN	1
_Output:
	DD	_BBCmdTxt,_BBCmdTxt
	DD	_Output+24
	DD	_BBGenLevel1,_BBGenSuffix,_BBGen,_TSGENERATORCmdTxt
	DD	_TSGCmdTxt
	DD	_Output+48
	DD	_TSGenLevel1
	DD	000000000H
	DD	_TSGen,_AUDIOCmdTxt,_AUDCmdTxt
	DD	000000000H
	DD	_AudioGenLevel1
	DD	000000000H
; rs232cmd.c  606		{ BBCmdTxt, 			BBCmdTxt,  &Output[1], &BBGenLevel1[0],	 BBGenSuffix, BBGen},
; rs232cmd.c  607		{ TSGENERATORCmdTxt, TSGCmdTxt, &Output[2], &TSGenLevel1[0], 	 NONE,		  TSGen},
; rs232cmd.c  608		{ AUDIOCmdTxt, 		AUDCmdTxt, NULL,		  &AudioGenLevel1[0], NONE,		  AudioGenOutput},
; rs232cmd.c  609	};
; rs232cmd.c  610	
; rs232cmd.c  611	struct CMD_STRUCT code BBGenLevel1[3] = {
	DD	_AudioGenOutput
	SYMB	IDEN, "BBGenLevel1", _BBGenLevel1, #509, 129, 0
	SYMB	ALAB, _BBGenLevel1, #509
	PUBLIC	_BBGenLevel1
	ALIGN	1
_BBGenLevel1:
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_BBGenLevel1+24
	DD	000000000H,000000000H
	DD	_BBGenSystem,_DELAYCmdTxt,_DELCmdTxt
	DD	_BBGenLevel1+48
	DD	000000000H,000000000H
	DD	_BBGenDelay,_SCHPHASECmdTxt,_SCHPCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  612		{ SYSTEMCmdTxt, 	SYSTCmdTxt, &BBGenLevel1[1], NULL, NONE, BBGenSystem},
; rs232cmd.c  613		{ DELAYCmdTxt,	   DELCmdTxt,  &BBGenLevel1[2], NULL, NONE, BBGenDelay},
; rs232cmd.c  614		{ SCHPHASECmdTxt, SCHPCmdTxt, NULL, 			  NULL, NONE, BBGenScHPhase},
; rs232cmd.c  615	};
; rs232cmd.c  616	
; rs232cmd.c  617	struct CMD_STRUCT code TSGenLevel1[5] = {
	DD	_BBGenScHPhase
	SYMB	TYPE, 513, 'Z', #492, 4
	SYMB	IDEN, "TSGenLevel1", _TSGenLevel1, #513, 129, 0
	SYMB	ALAB, _TSGenLevel1, #513
	PUBLIC	_TSGenLevel1
	ALIGN	1
_TSGenLevel1:
	DD	_PATTERNCmdTxt,_PATTCmdTxt
	DD	_TSGenLevel1+24
	DD	000000000H,000000000H
	DD	_TSGenPattern,_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_TSGenLevel1+48
	DD	000000000H,000000000H
	DD	_TSGenSystem,_DELAYCmdTxt,_DELCmdTxt
	DD	_TSGenLevel1+72
	DD	000000000H,000000000H
	DD	_TSGenDelay,_SCHPHASECmdTxt,_SCHPCmdTxt
	DD	_TSGenLevel1+96
	DD	000000000H,000000000H
	DD	_TSGenScHPhase,_EMBAUDIOCmdTxt,_EMBCmdTxt
	DD	000000000H
	DD	_TSGenLevel1_1
	DD	000000000H
; rs232cmd.c  618		{ PATTERNCmdTxt, 	PATTCmdTxt, &TSGenLevel1[1], NULL, 					NONE, TSGenPattern},
; rs232cmd.c  619		{ SYSTEMCmdTxt, 	SYSTCmdTxt, &TSGenLevel1[2], NULL, 					NONE, TSGenSystem},
; rs232cmd.c  620		{ DELAYCmdTxt,	   DELCmdTxt,  &TSGenLevel1[3], NULL, 					NONE, TSGenDelay},
; rs232cmd.c  621		{ SCHPHASECmdTxt, SCHPCmdTxt, &TSGenLevel1[4], NULL, 					NONE, TSGenScHPhase},
; rs232cmd.c  622		{ EMBAUDIOCmdTxt, EMBCmdTxt, 	NULL, 			  &TSGenLevel1_1[0], NONE, TSGenEmbAudioSignal},
; rs232cmd.c  623	};
; rs232cmd.c  624	
; rs232cmd.c  625	struct CMD_STRUCT code TSGenLevel1_1[2] = {
	DD	_TSGenEmbAudioSignal
	SYMB	TYPE, 515, 'Z', #492, 1
	SYMB	IDEN, "TSGenLevel1_1", _TSGenLevel1_1, #515, 129, 0
	SYMB	ALAB, _TSGenLevel1_1, #515
	PUBLIC	_TSGenLevel1_1
	ALIGN	1
_TSGenLevel1_1:
	DD	_SIGNALCmdTxt,_SIGNCmdTxt
	DD	_TSGenLevel1_1+24
	DD	000000000H,000000000H
	DD	_TSGenEmbAudioSignal,_LEVELCmdTxt,_LEVCmdTxt
; rs232cmd.c  626		{ SIGNALCmdTxt, SIGNCmdTxt, &TSGenLevel1_1[1], NULL, NONE, TSGenEmbAudioSignal},
; rs232cmd.c  627		{ LEVELCmdTxt,  LEVCmdTxt,  NULL,				  NULL, NONE, NONE},
; rs232cmd.c  628	};
; rs232cmd.c  629	
; rs232cmd.c  630	struct CMD_STRUCT code AudioGenLevel1[3] = {
	DD	000000000H,000000000H,000000000H,000000000H
	SYMB	IDEN, "AudioGenLevel1", _AudioGenLevel1, #509, 129, 0
	SYMB	ALAB, _AudioGenLevel1, #509
	PUBLIC	_AudioGenLevel1
	ALIGN	1
_AudioGenLevel1:
	DD	_OUTPUTCmdTxt,_OUTPCmdTxt
	DD	_AudioGenLevel1+24
	DD	000000000H,000000000H
	DD	_AudioGenOutput,_ANALOGCmdTxt,_ANALCmdTxt
	DD	_AudioGenLevel1+48
	DD	_AudioGenLevel1_1
	DD	000000000H
	DD	_AudioGenAnalog,_AESEBUCmdTxt,_AESCmdTxt
	DD	000000000H
	DD	_AudioGenLevel1_2
	DD	000000000H
; rs232cmd.c  631		{ OUTPUTCmdTxt, OUTPCmdTxt, &AudioGenLevel1[1], NULL, 					 NONE, AudioGenOutput},
; rs232cmd.c  632		{ ANALOGCmdTxt, ANALCmdTxt, &AudioGenLevel1[2], &AudioGenLevel1_1[0], NONE, AudioGenAnalog},
; rs232cmd.c  633		{ AESEBUCmdTxt, AESCmdTxt,  NULL, 				   &AudioGenLevel1_2[0], NONE, AudioGenAESEBU},
; rs232cmd.c  634	};
; rs232cmd.c  635	
; rs232cmd.c  636	struct CMD_STRUCT code AudioGenLevel1_1[3] = {
	DD	_AudioGenAESEBU
	SYMB	IDEN, "AudioGenLevel1_1", _AudioGenLevel1_1, #509, 129, 0
	SYMB	ALAB, _AudioGenLevel1_1, #509
	PUBLIC	_AudioGenLevel1_1
	ALIGN	1
_AudioGenLevel1_1:
	DD	_SIGNALCmdTxt,_SIGNCmdTxt
	DD	_AudioGenLevel1_1+24
	DD	000000000H,000000000H
	DD	_AudioGenAnalogSignal,_LEVELCmdTxt,_LEVCmdTxt
	DD	_AudioGenLevel1_1+48
	DD	000000000H,000000000H
	DD	_AudioGenAnalogLevel,_CLICKCmdTxt,_CLICCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  637		{ SIGNALCmdTxt, SIGNCmdTxt, &AudioGenLevel1_1[1], NULL, NONE, AudioGenAnalogSignal},
; rs232cmd.c  638		{ LEVELCmdTxt,  LEVCmdTxt,  &AudioGenLevel1_1[2], NULL, NONE, AudioGenAnalogLevel},
; rs232cmd.c  639		{ CLICKCmdTxt,  CLICCmdTxt, NULL, 					  NULL, NONE, AudioGenAnalogClick},
; rs232cmd.c  640	};
; rs232cmd.c  641	
; rs232cmd.c  642	struct CMD_STRUCT code AudioGenLevel1_2[6] = {
	DD	_AudioGenAnalogClick
	SYMB	IDEN, "AudioGenLevel1_2", _AudioGenLevel1_2, #505, 129, 0
	SYMB	ALAB, _AudioGenLevel1_2, #505
	PUBLIC	_AudioGenLevel1_2
	ALIGN	1
_AudioGenLevel1_2:
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_AudioGenLevel1_2+24
	DD	000000000H,000000000H
	DD	_AudioGenAESEBUSystem,_SIGNALCmdTxt,_SIGNCmdTxt
	DD	_AudioGenLevel1_2+48
	DD	000000000H,000000000H
	DD	_AudioGenAESEBUSignal,_LEVELCmdTxt,_LEVCmdTxt
	DD	_AudioGenLevel1_2+72
	DD	000000000H,000000000H
	DD	_AudioGenAESEBULevel,_TIMINGCmdTxt,_TIMCmdTxt
	DD	_AudioGenLevel1_2+96
	DD	000000000H,000000000H
	DD	_AudioGenAESEBUTiming,_WORDCLOCKCmdTxt,_WORDCmdTxt
	DD	_AudioGenLevel1_2+120
	DD	000000000H,000000000H
	DD	_AudioGenAESEBUWordClock,_CLICKCmdTxt,_CLICCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  643		{ SYSTEMCmdTxt, 	 SYSTCmdTxt, &AudioGenLevel1_2[1], NULL, NONE, AudioGenAESEBUSystem},
; rs232cmd.c  644		{ SIGNALCmdTxt, 	 SIGNCmdTxt, &AudioGenLevel1_2[2], NULL, NONE, AudioGenAESEBUSignal},
; rs232cmd.c  645		{ LEVELCmdTxt, 	 LEVCmdTxt,  &AudioGenLevel1_2[3], NULL, NONE, AudioGenAESEBULevel},
; rs232cmd.c  646		{ TIMINGCmdTxt,	 TIMCmdTxt,  &AudioGenLevel1_2[4], NULL, NONE, AudioGenAESEBUTiming},
; rs232cmd.c  647		{ WORDCLOCKCmdTxt, WORDCmdTxt, &AudioGenLevel1_2[5], NULL, NONE, AudioGenAESEBUWordClock},
; rs232cmd.c  648		{ CLICKCmdTxt, 	 CLICCmdTxt, NULL, 					  NULL, NONE, AudioGenAESEBUClick},
; rs232cmd.c  649	};
; rs232cmd.c  650	
; rs232cmd.c  651	// **************************************************************************
; rs232cmd.c  652	/*	CMD:	SUB1:	SUB2:		PARM:
; rs232cmd.c  653			FACTORY
; rs232cmd.c  654				:PASSword
; rs232cmd.c  655	
; rs232cmd.c  656				:RESet
; rs232cmd.c  657	
; rs232cmd.c  658				:V24Circuit
; rs232cmd.c  659					:COMMand
; rs232cmd.c  660					:TRANsparent
; rs232cmd.c  661	
; rs232cmd.c  662				:CHECksum
; rs232cmd.c  663					:CODE
; rs232cmd.c  664					:PLD
; rs232cmd.c  665					:EMBaudio
; rs232cmd.c  666					:PATTern
; rs232cmd.c  667	
; rs232cmd.c  668				:MAINboard
; rs232cmd.c  669					:VERSion
; rs232cmd.c  670					:IDN
; rs232cmd.c  671						:COMPany
; rs232cmd.c  672						:TYPE
; rs232cmd.c  673						:KUNumber
; rs232cmd.c  674						:SWRevision
; rs232cmd.c  675					:SYSTem				PAL|NTSC
; rs232cmd.c  676					:FMSDate
; rs232cmd.c  677						:PRODuction	<year>,<month>,<day>
; rs232cmd.c  678						:UPDate			<year>,<month>,<day>
; rs232cmd.c  679	
; rs232cmd.c  680				:GENLock
; rs232cmd.c  681					[:DATE]				<year>,<month>,<day>
; rs232cmd.c  682					:VERSion
; rs232cmd.c  683					:FREFerence
; rs232cmd.c  684						[:DATE]			<year>,<month>,<day>
; rs232cmd.c  685						:DAC
; rs232cmd.c  686					:UREFerence
; rs232cmd.c  687						[:DATE]	 		<year>,<month>,<day>
; rs232cmd.c  688						:DAC
; rs232cmd.c  689					:HPHZero			<pal>,<ntsc>
; rs232cmd.c  690					:PHASe				<pal>,<ntsc>
; rs232cmd.c  691	
; rs232cmd.c  692				:BB 1
; rs232cmd.c  693					[:DATE]				<year>,<month>,<day>
; rs232cmd.c  694					:VERSion
; rs232cmd.c  695					:SIGNAL				NORMAL|F45MHZ
; rs232cmd.c  696					:PHASe				<pal>,<ntsc>
; rs232cmd.c  697					:SCHPhase			<pal>,<ntsc>
; rs232cmd.c  698					:DAC					<gain>,<offset>,<level>
; rs232cmd.c  699	
; rs232cmd.c  700				:BB 2-3
; rs232cmd.c  701					[:DATE]				<year>,<month>,<day>
; rs232cmd.c  702					:PHASe				<pal>,<ntsc>
; rs232cmd.c  703					:SCHPhase			<pal>,<ntsc>
; rs232cmd.c  704					:DAC					<gain>,<offset>,<level>
; rs232cmd.c  705	
; rs232cmd.c  706				:TSGenerator
; rs232cmd.c  707					[:DATE]				<year>,<month>,<day>
; rs232cmd.c  708					:AGAin				<pal>,<ntsc>
; rs232cmd.c  709					:CGAin				<pal>,<ntsc>
; rs232cmd.c  710					:PHASE				<pal>,<ntsc>
; rs232cmd.c  711					:SCHPhase			<pal>,<ntsc>
; rs232cmd.c  712	
; rs232cmd.c  713				:AUDio
; rs232cmd.c  714					[:STATus]
; rs232cmd.c  715					:DATE					<year>,<month>,<day>
; rs232cmd.c  716					:ALEVel				<left>,<right>
; rs232cmd.c  717	
; rs232cmd.c  718				:PLD
; rs232cmd.c  719					:VERSion			<video>,<audio>
; rs232cmd.c  720	
; rs232cmd.c  721				:TCXO
; rs232cmd.c  722					[:STATus]
; rs232cmd.c  723	
; rs232cmd.c  724				:MMCH						<subaddress>[,<data>]
; rs232cmd.c  725	
; rs232cmd.c  726	*/									
; rs232cmd.c  727	
; rs232cmd.c  728	struct CMD_STRUCT code Factory[12] = {
	DD	_AudioGenAESEBUClick
	SYMB	IDEN, "Factory", _Factory, #501, 129, 0
	SYMB	ALAB, _Factory, #501
	PUBLIC	_Factory
	ALIGN	1
_Factory:
	DD	_PASSWORDCmdTxt,_PASSCmdTxt
	DD	_Factory+24
	DD	000000000H,000000000H
	DD	_FactPassword,_RESETCmdTxt,_RESCmdTxt
	DD	_Factory+48
	DD	000000000H,000000000H
	DD	_FactReset,_V24CIRCUITCmdTxt,_V24CCmdTxt
	DD	_Factory+72
	DD	_FactoryLevel1
	DD	000000000H,000000000H
	DD	_CHECKSUMCmdTxt,_CHECCmdTxt
	DD	_Factory+96
	DD	_FactoryLevel9
	DD	000000000H,000000000H
	DD	_MAINBOARDCmdTxt,_MAINCmdTxt
	DD	_Factory+120
	DD	_FactoryLevel2
	DD	000000000H,000000000H
	DD	_GENLOCKCmdTxt,_GENLCmdTxt
	DD	_Factory+144
	DD	_FactoryLevel3
	DD	000000000H
	DD	_FactGenlockGenDate,_BBCmdTxt,_BBCmdTxt
	DD	_Factory+168
	DD	_FactoryLevel4,_BBGenSuffix,_FactBBGenDate
	DD	_TSGENERATORCmdTxt,_TSGCmdTxt
	DD	_Factory+192
	DD	_FactoryLevel5
	DD	000000000H
	DD	_FactTSGenDate,_AUDIOCmdTxt,_AUDCmdTxt
	DD	_Factory+216
	DD	_FactoryLevel6
	DD	000000000H
	DD	_FactAudioGenStatus,_PLDCmdTxt,_PLDCmdTxt
	DD	_Factory+240
	DD	_FactoryLevel7
	DD	000000000H
	DD	_FactPLDVersion,_TCXOCmdTxt,_TCXOCmdTxt
	DD	_Factory+264
	DD	_FactoryLevel8
	DD	000000000H
	DD	_FactTCXOStatus,_MMCHIPCmdTxt,_MMCHCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  729		{ PASSWORDCmdTxt, 	PASSCmdTxt, &Factory[1],  NULL,					NONE, 		 FactPassword},
; rs232cmd.c  730		{ RESETCmdTxt, 		RESCmdTxt,  &Factory[2],  NULL,					NONE, 		 FactReset},
; rs232cmd.c  731		{ V24CIRCUITCmdTxt, 	V24CCmdTxt, &Factory[3],  &FactoryLevel1[0], NONE, 		 NONE},
; rs232cmd.c  732		{ CHECKSUMCmdTxt, 	CHECCmdTxt, &Factory[4],  &FactoryLevel9[0], NONE,		  	 NONE},
; rs232cmd.c  733		{ MAINBOARDCmdTxt, 	MAINCmdTxt, &Factory[5],  &FactoryLevel2[0], NONE,		  	 NONE},
; rs232cmd.c  734		{ GENLOCKCmdTxt, 		GENLCmdTxt,	&Factory[6],  &FactoryLevel3[0], NONE,		  	 FactGenlockGenDate},
; rs232cmd.c  735		{ BBCmdTxt, 			BBCmdTxt, 	&Factory[7],  &FactoryLevel4[0], BBGenSuffix, FactBBGenDate},
; rs232cmd.c  736		{ TSGENERATORCmdTxt, TSGCmdTxt, 	&Factory[8],  &FactoryLevel5[0], NONE,		  	 FactTSGenDate},
; rs232cmd.c  737		{ AUDIOCmdTxt, 		AUDCmdTxt, 	&Factory[9],  &FactoryLevel6[0], NONE,		  	 FactAudioGenStatus},
; rs232cmd.c  738		{ PLDCmdTxt, 			PLDCmdTxt, 	&Factory[10], &FactoryLevel7[0], NONE,			 FactPLDVersion},
; rs232cmd.c  739		{ TCXOCmdTxt, 			TCXOCmdTxt,	&Factory[11], &FactoryLevel8[0], NONE,			 FactTCXOStatus},
; rs232cmd.c  740		{ MMCHIPCmdTxt, 		MMCHCmdTxt, NULL,			  NULL,					NONE,			 FactMultiMediaChip},
; rs232cmd.c  741	};
; rs232cmd.c  742	
; rs232cmd.c  743	struct CMD_STRUCT code FactoryLevel1[2] = {
	DD	_FactMultiMediaChip
	SYMB	IDEN, "FactoryLevel1", _FactoryLevel1, #515, 129, 0
	SYMB	ALAB, _FactoryLevel1, #515
	PUBLIC	_FactoryLevel1
	ALIGN	1
_FactoryLevel1:
	DD	_COMMANDCmdTxt,_COMMCmdTxt
	DD	_FactoryLevel1+24
	DD	000000000H,000000000H
	DD	_FactV24Command,_TRANSPARENTCmdTxt,_TRANCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  744		{ COMMANDCmdTxt, 		 COMMCmdTxt, &FactoryLevel1[1], NULL, NONE, FactV24Command},
; rs232cmd.c  745		{ TRANSPARENTCmdTxt, TRANCmdTxt, NULL,						  NULL, NONE, FactV24Transparent},
; rs232cmd.c  746	};
; rs232cmd.c  747	
; rs232cmd.c  748	struct CMD_STRUCT code FactoryLevel9[5] = {
	DD	_FactV24Transparent
	SYMB	IDEN, "FactoryLevel9", _FactoryLevel9, #513, 129, 0
	SYMB	ALAB, _FactoryLevel9, #513
	PUBLIC	_FactoryLevel9
	ALIGN	1
_FactoryLevel9:
	DD	_CODECmdTxt,_CODECmdTxt
	DD	_FactoryLevel9+24
	DD	000000000H,000000000H
	DD	_FactChecksumCode,_PLDCmdTxt,_PLDCmdTxt
	DD	_FactoryLevel9+48
	DD	000000000H,000000000H
	DD	_FactChecksumPLD,_EMBAUDIOCmdTxt,_EMBCmdTxt
	DD	_FactoryLevel9+72
	DD	000000000H,000000000H
	DD	_FactChecksumEmbAudio,_PATTERNCmdTxt,_PATTCmdTxt
	DD	_FactoryLevel9+96
	DD	000000000H,000000000H
	DD	_FactChecksumPattern,_RANGECmdTxt,_RANGCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  749		{ CODECmdTxt, 		CODECmdTxt, &FactoryLevel9[1], NULL, NONE, FactChecksumCode},
; rs232cmd.c  750		{ PLDCmdTxt,  	 	PLDCmdTxt,  &FactoryLevel9[2], NULL, NONE, FactChecksumPLD},
; rs232cmd.c  751		{ EMBAUDIOCmdTxt, EMBCmdTxt,  &FactoryLevel9[3], NULL, NONE, FactChecksumEmbAudio},
; rs232cmd.c  752		{ PATTERNCmdTxt, 	PATTCmdTxt, &FactoryLevel9[4], NULL, NONE, FactChecksumPattern},
; rs232cmd.c  753		{ RANGECmdTxt, 	RANGCmdTxt, NULL, 				 NULL, NONE, FactChecksumRange},
; rs232cmd.c  754	};
; rs232cmd.c  755	
; rs232cmd.c  756	struct CMD_STRUCT code FactoryLevel2[4] = {
	DD	_FactChecksumRange
	SYMB	TYPE, 517, 'Z', #492, 3
	SYMB	IDEN, "FactoryLevel2", _FactoryLevel2, #517, 129, 0
	SYMB	ALAB, _FactoryLevel2, #517
	PUBLIC	_FactoryLevel2
	ALIGN	1
_FactoryLevel2:
	DD	_VERSIONCmdTxt,_VERSCmdTxt
	DD	_FactoryLevel2+24
	DD	000000000H,000000000H
	DD	_FactMainVersion,_IDNCmdTxt,_IDNCmdTxt
	DD	_FactoryLevel2+48
	DD	_FactoryLevel2_2
	DD	000000000H,000000000H
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_FactoryLevel2+72
	DD	000000000H,000000000H
	DD	_FactMainSystem,_FMSDATECmdTxt,_FMSDCmdTxt
	DD	000000000H
	DD	_FactoryLevel2_1
; rs232cmd.c  757		{ VERSIONCmdTxt, 	VERSCmdTxt, &FactoryLevel2[1], NULL, 					 NONE, FactMainVersion},
; rs232cmd.c  758		{ IDNCmdTxt,  	 	IDNCmdTxt,  &FactoryLevel2[2], &FactoryLevel2_2[0], NONE, NONE},
; rs232cmd.c  759		{ SYSTEMCmdTxt, 	SYSTCmdTxt, &FactoryLevel2[3], NULL, 					 NONE, FactMainSystem},
; rs232cmd.c  760		{ FMSDATECmdTxt, 	FMSDCmdTxt, NULL, 				 &FactoryLevel2_1[0], NONE, NONE},
; rs232cmd.c  761	};
; rs232cmd.c  762	
; rs232cmd.c  763	struct CMD_STRUCT code FactoryLevel2_1[2] = {
	DD	000000000H,000000000H
	SYMB	IDEN, "FactoryLevel2_1", _FactoryLevel2_1, #515, 129, 0
	SYMB	ALAB, _FactoryLevel2_1, #515
	PUBLIC	_FactoryLevel2_1
	ALIGN	1
_FactoryLevel2_1:
	DD	_PRODUCTIONCmdTxt,_PRODCmdTxt
	DD	_FactoryLevel2_1+24
	DD	000000000H,000000000H
	DD	_FactMainFMSDateProd,_UPDATECmdTxt,_UPDCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  764		{ PRODUCTIONCmdTxt, PRODCmdTxt, &FactoryLevel2_1[1], NULL, NONE, FactMainFMSDateProd},
; rs232cmd.c  765		{ UPDATECmdTxt, 	  UPDCmdTxt,  NULL, 					  NULL, NONE, FactMainFMSDateUpd},
; rs232cmd.c  766	};
; rs232cmd.c  767	
; rs232cmd.c  768	struct CMD_STRUCT code FactoryLevel2_2[4] = {
	DD	_FactMainFMSDateUpd
	SYMB	IDEN, "FactoryLevel2_2", _FactoryLevel2_2, #517, 129, 0
	SYMB	ALAB, _FactoryLevel2_2, #517
	PUBLIC	_FactoryLevel2_2
	ALIGN	1
_FactoryLevel2_2:
	DD	_COMPANYCmdTxt,_COMPCmdTxt
	DD	_FactoryLevel2_2+24
	DD	000000000H,000000000H
	DD	_FactMainIDNCompany,_TYPECmdTxt,_TYPECmdTxt
	DD	_FactoryLevel2_2+48
	DD	000000000H,000000000H
	DD	_FactMainIDNType,_KUNUMBERCmdTxt,_KUNCmdTxt
	DD	_FactoryLevel2_2+72
	DD	000000000H,000000000H
	DD	_FactMainIDNKUNumber,_SWREVISIONCmdTxt,_SWRCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  769		{ COMPANYCmdTxt,    COMPCmdTxt, &FactoryLevel2_2[1], NULL, NONE, FactMainIDNCompany},
; rs232cmd.c  770		{ TYPECmdTxt,  	  TYPECmdTxt, &FactoryLevel2_2[2], NULL, NONE, FactMainIDNType},
; rs232cmd.c  771		{ KUNUMBERCmdTxt,   KUNCmdTxt,  &FactoryLevel2_2[3], NULL, NONE, FactMainIDNKUNumber},
; rs232cmd.c  772		{ SWREVISIONCmdTxt, SWRCmdTxt,  NULL, 					  NULL, NONE, FactMainIDNSWRevision},
; rs232cmd.c  773	};
; rs232cmd.c  774	
; rs232cmd.c  775	struct CMD_STRUCT code FactoryLevel3[6] = {
	DD	_FactMainIDNSWRevision
	SYMB	IDEN, "FactoryLevel3", _FactoryLevel3, #505, 129, 0
	SYMB	ALAB, _FactoryLevel3, #505
	PUBLIC	_FactoryLevel3
	ALIGN	1
_FactoryLevel3:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel3+24
	DD	000000000H,000000000H
	DD	_FactGenlockGenDate,_VERSIONCmdTxt,_VERSCmdTxt
	DD	_FactoryLevel3+48
	DD	000000000H,000000000H
	DD	_FactGenlockGenVersion,_FREFERENCECmdTxt,_FREFCmdTxt
	DD	_FactoryLevel3+72
	DD	_FactoryLevel3_1
	DD	000000000H
	DD	_FactGenlockGenFRefDate,_UREFERENCECmdTxt,_UREFCmdTxt
	DD	_FactoryLevel3+96
	DD	_FactoryLevel3_2
	DD	000000000H
	DD	_FactGenlockGenURefDate,_HPHZEROCmdTxt,_HPHZCmdTxt
	DD	_FactoryLevel3+120
	DD	000000000H,000000000H
	DD	_FactGenlockGenHPHZero,_PHASECmdTxt,_PHASCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  776		{ DATECmdTxt,  	  DATECmdTxt, &FactoryLevel3[1], NULL, 					NONE, FactGenlockGenDate},
; rs232cmd.c  777		{ VERSIONCmdTxt,    VERSCmdTxt, &FactoryLevel3[2], NULL, 					NONE, FactGenlockGenVersion},
; rs232cmd.c  778		{ FREFERENCECmdTxt, FREFCmdTxt, &FactoryLevel3[3], &FactoryLevel3_1[0], NONE, FactGenlockGenFRefDate},
; rs232cmd.c  779		{ UREFERENCECmdTxt, UREFCmdTxt, &FactoryLevel3[4], &FactoryLevel3_2[0], NONE, FactGenlockGenURefDate},
; rs232cmd.c  780		{ HPHZEROCmdTxt,    HPHZCmdTxt, &FactoryLevel3[5], NULL,						NONE, FactGenlockGenHPHZero},
; rs232cmd.c  781		{ PHASECmdTxt,  	  PHASCmdTxt, NULL, 					NULL,						NONE, FactGenlockGenPhase},
; rs232cmd.c  782	};
; rs232cmd.c  783	
; rs232cmd.c  784	struct CMD_STRUCT code FactoryLevel3_1[2] = {
	DD	_FactGenlockGenPhase
	SYMB	IDEN, "FactoryLevel3_1", _FactoryLevel3_1, #515, 129, 0
	SYMB	ALAB, _FactoryLevel3_1, #515
	PUBLIC	_FactoryLevel3_1
	ALIGN	1
_FactoryLevel3_1:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel3_1+24
	DD	000000000H,000000000H
	DD	_FactGenlockGenFRefDate,_DACCmdTxt,_DACCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  785		{ DATECmdTxt, DATECmdTxt, &FactoryLevel3_1[1], NULL, NONE, FactGenlockGenFRefDate},
; rs232cmd.c  786		{ DACCmdTxt,  DACCmdTxt,  NULL, 					  NULL, NONE, FactGenlockGenFRefDAC},
; rs232cmd.c  787	};
; rs232cmd.c  788	
; rs232cmd.c  789	struct CMD_STRUCT code FactoryLevel3_2[2] = {
	DD	_FactGenlockGenFRefDAC
	SYMB	IDEN, "FactoryLevel3_2", _FactoryLevel3_2, #515, 129, 0
	SYMB	ALAB, _FactoryLevel3_2, #515
	PUBLIC	_FactoryLevel3_2
	ALIGN	1
_FactoryLevel3_2:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel3_2+24
	DD	000000000H,000000000H
	DD	_FactGenlockGenURefDate,_DACCmdTxt,_DACCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  790		{ DATECmdTxt, DATECmdTxt, &FactoryLevel3_2[1], NULL, NONE, FactGenlockGenURefDate},
; rs232cmd.c  791		{ DACCmdTxt,  DACCmdTxt,  NULL, 					  NULL, NONE, FactGenlockGenURefDAC},
; rs232cmd.c  792	};
; rs232cmd.c  793	
; rs232cmd.c  794	struct CMD_STRUCT code FactoryLevel4[6] = {
	DD	_FactGenlockGenURefDAC
	SYMB	IDEN, "FactoryLevel4", _FactoryLevel4, #505, 129, 0
	SYMB	ALAB, _FactoryLevel4, #505
	PUBLIC	_FactoryLevel4
	ALIGN	1
_FactoryLevel4:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel4+24
	DD	000000000H,000000000H
	DD	_FactBBGenDate,_VERSIONCmdTxt,_VERSCmdTxt
	DD	_FactoryLevel4+48
	DD	000000000H,000000000H
	DD	_FactBBGenVersion,_SIGNALCmdTxt,_SIGNCmdTxt
	DD	_FactoryLevel4+72
	DD	000000000H,000000000H
	DD	_FactBBGenSignal,_PHASECmdTxt,_PHASCmdTxt
	DD	_FactoryLevel4+96
	DD	000000000H,000000000H
	DD	_FactBBGenPhase,_SCHPHASECmdTxt,_SCHPCmdTxt
	DD	_FactoryLevel4+120
	DD	000000000H,000000000H
	DD	_FactBBGenScHPhase,_DACCmdTxt,_DACCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  795		{ DATECmdTxt,  	DATECmdTxt, &FactoryLevel4[1], NULL, NONE, FactBBGenDate},
; rs232cmd.c  796		{ VERSIONCmdTxt, 	VERSCmdTxt, &FactoryLevel4[2], NULL, NONE, FactBBGenVersion},
; rs232cmd.c  797		{ SIGNALCmdTxt, 	SIGNCmdTxt, &FactoryLevel4[3], NULL, NONE, FactBBGenSignal},
; rs232cmd.c  798		{ PHASECmdTxt, 	PHASCmdTxt, &FactoryLevel4[4], NULL, NONE, FactBBGenPhase},
; rs232cmd.c  799		{ SCHPHASECmdTxt,	SCHPCmdTxt, &FactoryLevel4[5], NULL, NONE, FactBBGenScHPhase},
; rs232cmd.c  800		{ DACCmdTxt,  		DACCmdTxt,  NULL, 				 NULL, NONE, FactBBGenDAC},
; rs232cmd.c  801	};
; rs232cmd.c  802	
; rs232cmd.c  803	struct CMD_STRUCT code FactoryLevel5[5] = {
	DD	_FactBBGenDAC
	SYMB	IDEN, "FactoryLevel5", _FactoryLevel5, #513, 129, 0
	SYMB	ALAB, _FactoryLevel5, #513
	PUBLIC	_FactoryLevel5
	ALIGN	1
_FactoryLevel5:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel5+24
	DD	000000000H,000000000H
	DD	_FactTSGenDate,_AGAINCmdTxt,_AGACmdTxt
	DD	_FactoryLevel5+48
	DD	000000000H,000000000H
	DD	_FactTSGenAGain,_CGAINCmdTxt,_CGACmdTxt
	DD	_FactoryLevel5+72
	DD	000000000H,000000000H
	DD	_FactTSGenCGain,_PHASECmdTxt,_PHASCmdTxt
	DD	_FactoryLevel5+96
	DD	000000000H,000000000H
	DD	_FactTSGenPhase,_SCHPHASECmdTxt,_SCHPCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  804		{ DATECmdTxt,  	DATECmdTxt, &FactoryLevel5[1], NULL, NONE, FactTSGenDate},
; rs232cmd.c  805		{ AGAINCmdTxt, 	AGACmdTxt, 	&FactoryLevel5[2], NULL, NONE, FactTSGenAGain},
; rs232cmd.c  806		{ CGAINCmdTxt, 	CGACmdTxt, 	&FactoryLevel5[3], NULL, NONE, FactTSGenCGain},
; rs232cmd.c  807		{ PHASECmdTxt, 	PHASCmdTxt, &FactoryLevel5[4], NULL, NONE, FactTSGenPhase},
; rs232cmd.c  808		{ SCHPHASECmdTxt,	SCHPCmdTxt, NULL, 				 NULL, NONE, FactTSGenScHPhase},
; rs232cmd.c  809	};
; rs232cmd.c  810	
; rs232cmd.c  811	struct CMD_STRUCT code FactoryLevel6[3] = {
	DD	_FactTSGenScHPhase
	SYMB	IDEN, "FactoryLevel6", _FactoryLevel6, #509, 129, 0
	SYMB	ALAB, _FactoryLevel6, #509
	PUBLIC	_FactoryLevel6
	ALIGN	1
_FactoryLevel6:
	DD	_STATUSCmdTxt,_STATCmdTxt
	DD	_FactoryLevel6+24
	DD	000000000H,000000000H
	DD	_FactAudioGenStatus,_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel6+48
	DD	000000000H,000000000H
	DD	_FactAudioGenDate,_ALEVELCmdTxt,_ALEVCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  812		{ STATUSCmdTxt, STATCmdTxt, &FactoryLevel6[1], NULL, NONE, FactAudioGenStatus},
; rs232cmd.c  813		{ DATECmdTxt,   DATECmdTxt, &FactoryLevel6[2], NULL, NONE, FactAudioGenDate},
; rs232cmd.c  814		{ ALEVELCmdTxt, ALEVCmdTxt, NULL, 				  NULL, NONE, FactAudioGenLevel},
; rs232cmd.c  815	};
; rs232cmd.c  816	
; rs232cmd.c  817	struct CMD_STRUCT code FactoryLevel7[1] = {
	DD	_FactAudioGenLevel
	SYMB	IDEN, "FactoryLevel7", _FactoryLevel7, #511, 129, 0
	SYMB	ALAB, _FactoryLevel7, #511
	PUBLIC	_FactoryLevel7
	ALIGN	1
_FactoryLevel7:
	DD	_VERSIONCmdTxt,_VERSCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  818		{ VERSIONCmdTxt, 	VERSCmdTxt, NULL, NULL, NONE, FactPLDVersion},
; rs232cmd.c  819	};
; rs232cmd.c  820	
; rs232cmd.c  821	struct CMD_STRUCT code FactoryLevel8[1] = {
	DD	_FactPLDVersion
	SYMB	IDEN, "FactoryLevel8", _FactoryLevel8, #511, 129, 0
	SYMB	ALAB, _FactoryLevel8, #511
	PUBLIC	_FactoryLevel8
	ALIGN	1
_FactoryLevel8:
	DD	_STATUSCmdTxt,_STATCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  822		{ STATUSCmdTxt, STATCmdTxt, NULL, NULL, NONE, FactTCXOStatus},
; rs232cmd.c  823	};
; rs232cmd.c  824	
; rs232cmd.c  825	//**************************************************************************
; rs232cmd.c  826	// The following parameter structures are based on the enumerated types
; rs232cmd.c  827	//  defined in TABLES.H, ie. DO NOT change the order of these names. If
; rs232cmd.c  828	//  the order is changed in TABLES.H it must also be changed here.
; rs232cmd.c  829	
; rs232cmd.c  830	struct PAR_STRUCT code SAVEPar[1] = {
	DD	_FactTCXOStatus
	SYMB	TYPE, 520, 'n', #519, 129
	SYMB	TYPE, 521, 'P', #520
	SYMB	TYPE, 519, "PAR_STRUCT", 'S', 12,\
		 "LongName", #491, 0,\
		 "ShortName", #491, 4,\
		 "SameLevel", #521, 8
	SYMB	TYPE, 522, 'Z', #519, 0
	SYMB	IDEN, "SAVEPar", _SAVEPar, #522, 129, 0
	SYMB	ALAB, _SAVEPar, #522
	PUBLIC	_SAVEPar
	ALIGN	1
_SAVEPar:
	DD	_SAVEParTxt,_SAVEParTxt
; rs232cmd.c  831		{ SAVEParTxt, SAVEParTxt, NULL}
; rs232cmd.c  832	};
; rs232cmd.c  833	
; rs232cmd.c  834	struct PAR_STRUCT code GenlockSystemPar[4] = {
	DD	000000000H
	SYMB	TYPE, 524, 'Z', #519, 3
	SYMB	IDEN, "GenlockSystemPar", _GenlockSystemPar, #524, 129, 0
	SYMB	ALAB, _GenlockSystemPar, #524
	PUBLIC	_GenlockSystemPar
	ALIGN	1
_GenlockSystemPar:
	DD	_INTERNALParTxt,_INTParTxt
	DD	_GenlockSystemPar+12
	DD	_PALBURSTParTxt,_PALBParTxt
	DD	_GenlockSystemPar+24
	DD	_NTSCBURSTParTxt,_NTSCParTxt
	DD	_GenlockSystemPar+36
	DD	_F10MHzParTxt,_F10MHzParTxt
; rs232cmd.c  835		{ INTERNALParTxt,  INTParTxt, 	&GenlockSystemPar[1]},
; rs232cmd.c  836		{ PALBURSTParTxt,  PALBParTxt, 	&GenlockSystemPar[2]},
; rs232cmd.c  837		{ NTSCBURSTParTxt, NTSCParTxt, 	&GenlockSystemPar[3]},
; rs232cmd.c  838		{ F10MHzParTxt, 	 F10MHzParTxt, NULL},
; rs232cmd.c  839	};
; rs232cmd.c  840	
; rs232cmd.c  841	struct PAR_STRUCT code SystemPar[3] = {
	DD	000000000H
	SYMB	TYPE, 526, 'Z', #519, 2
	SYMB	IDEN, "SystemPar", _SystemPar, #526, 129, 0
	SYMB	ALAB, _SystemPar, #526
	PUBLIC	_SystemPar
	ALIGN	1
_SystemPar:
	DD	_PALParTxt,_PALParTxt
	DD	_SystemPar+12
	DD	_PAL_IDParTxt,_PAL_IDParTxt
	DD	_SystemPar+24
	DD	_NTSCParTxt,_NTSCParTxt
; rs232cmd.c  842		{ PALParTxt, 	 PALParTxt, &SystemPar[1]},
; rs232cmd.c  843		{ PAL_IDParTxt, PAL_IDParTxt, &SystemPar[2]},
; rs232cmd.c  844		{ NTSCParTxt, 	 NTSCParTxt, NULL},
; rs232cmd.c  845	};
; rs232cmd.c  846	
; rs232cmd.c  847	struct PAR_STRUCT code CBPatternPar[23] = {
	DD	000000000H
	SYMB	TYPE, 528, 'Z', #519, 22
	SYMB	IDEN, "CBPatternPar", _CBPatternPar, #528, 129, 0
	SYMB	ALAB, _CBPatternPar, #528
	PUBLIC	_CBPatternPar
	ALIGN	1
_CBPatternPar:
	DD	_CBSMPTEParTxt,_CBSMParTxt
	DD	_CBPatternPar+12
	DD	_CBEBUParTxt,_CBEBParTxt
	DD	_CBPatternPar+24
	DD	_CBFCCParTxt,_CBFCParTxt
	DD	_CBPatternPar+36
	DD	_CBEBU8ParTxt,_CBEB8ParTxt
	DD	_CBPatternPar+48
	DD	_CB100ParTxt,_CB100ParTxt
	DD	_CBPatternPar+60
	DD	_CBGREY75ParTxt,_CBGR75ParTxt
	DD	_CBPatternPar+72
	DD	_CBRED75ParTxt,_CBR75ParTxt
	DD	_CBPatternPar+84
	DD	_RED75ParTxt,_RED75ParTxt
	DD	_CBPatternPar+96
	DD	_MULTIBURSTParTxt,_MULTParTxt
	DD	_CBPatternPar+108
	DD	_CCIR18ParTxt,_CCIR18ParTxt
	DD	_CBPatternPar+120
	DD	_WIN10ParTxt,_WIN10ParTxt
	DD	_CBPatternPar+132
	DD	_WIN15ParTxt,_WIN15ParTxt
	DD	_CBPatternPar+144
	DD	_WIN20ParTxt,_WIN20ParTxt
	DD	_CBPatternPar+156
	DD	_WIN100ParTxt,_WIN100ParTxt
	DD	_CBPatternPar+168
	DD	_BLWH15ParTxt,_BLWH15ParTxt
	DD	_CBPatternPar+180
	DD	_WHITE100ParTxt,_WHIT100ParTxt
	DD	_CBPatternPar+192
	DD	_BLACKParTxt,_BLACParTxt
	DD	_CBPatternPar+204
	DD	_SDICHECKParTxt,_SDICParTxt
	DD	_CBPatternPar+216
	DD	_DGREYParTxt,_DGRParTxt
	DD	_CBPatternPar+228
	DD	_STAIRCASE5ParTxt,_STA5ParTxt
	DD	_CBPatternPar+240
	DD	_STAIRCASE10ParTxt,_STA10ParTxt
	DD	_CBPatternPar+252
	DD	_CROSSHATCHParTxt,_CROSParTxt
	DD	_CBPatternPar+264
	DD	_PLUGEParTxt,_PLUGParTxt
; rs232cmd.c  848		{ CBSMPTEParTxt, 		CBSMParTxt, 	&CBPatternPar[1]},
; rs232cmd.c  849		{ CBEBUParTxt, 	 	CBEBParTxt, 	&CBPatternPar[2]},
; rs232cmd.c  850		{ CBFCCParTxt, 	 	CBFCParTxt, 	&CBPatternPar[3]},
; rs232cmd.c  851		{ CBEBU8ParTxt,  		CBEB8ParTxt, 	&CBPatternPar[4]},
; rs232cmd.c  852		{ CB100ParTxt, 	 	CB100ParTxt, 	&CBPatternPar[5]},
; rs232cmd.c  853		{ CBGREY75ParTxt, 	CBGR75ParTxt, 	&CBPatternPar[6]},
; rs232cmd.c  854		{ CBRED75ParTxt, 		CBR75ParTxt, 	&CBPatternPar[7]},
; rs232cmd.c  855		{ RED75ParTxt, 		RED75ParTxt, 	&CBPatternPar[8]},
; rs232cmd.c  856	
; rs232cmd.c  857		{ MULTIBURSTParTxt,	MULTParTxt, 	&CBPatternPar[9]},
; rs232cmd.c  858		{ CCIR18ParTxt,	 	CCIR18ParTxt,	&CBPatternPar[10]},
; rs232cmd.c  859																				
; rs232cmd.c  860		{ WIN10ParTxt, 		WIN10ParTxt, 	&CBPatternPar[11]},
; rs232cmd.c  861		{ WIN15ParTxt, 		WIN15ParTxt,	&CBPatternPar[12]},
; rs232cmd.c  862		{ WIN20ParTxt, 		WIN20ParTxt, 	&CBPatternPar[13]},
; rs232cmd.c  863		{ WIN100ParTxt, 		WIN100ParTxt, 	&CBPatternPar[14]},
; rs232cmd.c  864		{ BLWH15ParTxt, 		BLWH15ParTxt, 	&CBPatternPar[15]},
; rs232cmd.c  865		{ WHITE100ParTxt, 	WHIT100ParTxt, &CBPatternPar[16]},
; rs232cmd.c  866		{ BLACKParTxt, 		BLACParTxt, 	&CBPatternPar[17]},
; rs232cmd.c  867	
; rs232cmd.c  868		{ SDICHECKParTxt, 	SDICParTxt, 	&CBPatternPar[18]},
; rs232cmd.c  869		{ DGREYParTxt, 		DGRParTxt, 		&CBPatternPar[19]},
; rs232cmd.c  870	
; rs232cmd.c  871		{ STAIRCASE5ParTxt, 	STA5ParTxt, 	&CBPatternPar[20]},
; rs232cmd.c  872		{ STAIRCASE10ParTxt, STA10ParTxt, 	&CBPatternPar[21]},
; rs232cmd.c  873	
; rs232cmd.c  874		{ CROSSHATCHParTxt, 	CROSParTxt, 	&CBPatternPar[22]},
; rs232cmd.c  875		{ PLUGEParTxt, 		PLUGParTxt, 	NULL},
; rs232cmd.c  876	};
; rs232cmd.c  877	
; rs232cmd.c  878	struct PAR_STRUCT code EmbAudioSignalPar[3] = {
	DD	000000000H
	SYMB	IDEN, "EmbAudioSignalPar", _EmbAudioSignalPar, #526, 129, 0
	SYMB	ALAB, _EmbAudioSignalPar, #526
	PUBLIC	_EmbAudioSignalPar
	ALIGN	1
_EmbAudioSignalPar:
	DD	_OFFParTxt,_OFFParTxt
	DD	_EmbAudioSignalPar+12
	DD	_SILENCEParTxt,_SILParTxt
	DD	_EmbAudioSignalPar+24
	DD	_S1KHZParTxt,_S1KHZParTxt
; rs232cmd.c  879		{ OFFParTxt, 	  	OFFParTxt, 		&EmbAudioSignalPar[1]},
; rs232cmd.c  880		{ SILENCEParTxt, 	SILParTxt, 		&EmbAudioSignalPar[2]},
; rs232cmd.c  881		{ S1KHZParTxt,   	S1KHZParTxt, 	NULL},
; rs232cmd.c  882	};
; rs232cmd.c  883	
; rs232cmd.c  884	struct PAR_STRUCT code AudioOutputPar[2] = {
	DD	000000000H
	SYMB	TYPE, 530, 'Z', #519, 1
	SYMB	IDEN, "AudioOutputPar", _AudioOutputPar, #530, 129, 0
	SYMB	ALAB, _AudioOutputPar, #530
	PUBLIC	_AudioOutputPar
	ALIGN	1
_AudioOutputPar:
	DD	_ANALOGParTxt,_ANALParTxt
	DD	_AudioOutputPar+12
	DD	_AESEBUParTxt,_AESParTxt
; rs232cmd.c  885		{ ANALOGParTxt, ANALParTxt, &AudioOutputPar[1]},
; rs232cmd.c  886		{ AESEBUParTxt, AESParTxt,  NULL},
; rs232cmd.c  887	};
; rs232cmd.c  888	
; rs232cmd.c  889	struct PAR_STRUCT code AESEBUSystemPar[2] = {
	DD	000000000H
	SYMB	IDEN, "AESEBUSystemPar", _AESEBUSystemPar, #530, 129, 0
	SYMB	ALAB, _AESEBUSystemPar, #530
	PUBLIC	_AESEBUSystemPar
	ALIGN	1
_AESEBUSystemPar:
	DD	_PALParTxt,_PALParTxt
	DD	_AESEBUSystemPar+12
	DD	_NTSCParTxt,_NTSCParTxt
; rs232cmd.c  890		{ PALParTxt,  PALParTxt,  &AESEBUSystemPar[1]},
; rs232cmd.c  891		{ NTSCParTxt, NTSCParTxt, NULL},
; rs232cmd.c  892	};
; rs232cmd.c  893	
; rs232cmd.c  894	struct PAR_STRUCT code AudioSignalPar[4] = {
	DD	000000000H
	SYMB	IDEN, "AudioSignalPar", _AudioSignalPar, #524, 129, 0
	SYMB	ALAB, _AudioSignalPar, #524
	PUBLIC	_AudioSignalPar
	ALIGN	1
_AudioSignalPar:
	DD	_S500HZParTxt,_S500HZParTxt
	DD	_AudioSignalPar+12
	DD	_S1KHZParTxt,_S1KHZParTxt
	DD	_AudioSignalPar+24
	DD	_SEBU1KHZParTxt,_SEBU1KHZParTxt
	DD	_AudioSignalPar+36
	DD	_S8KHZParTxt,_S8KHZParTxt
; rs232cmd.c  895		{ S500HZParTxt, 	S500HZParTxt, 	 &AudioSignalPar[1]},
; rs232cmd.c  896		{ S1KHZParTxt, 	S1KHZParTxt, 	 &AudioSignalPar[2]},
; rs232cmd.c  897		{ SEBU1KHZParTxt, SEBU1KHZParTxt, &AudioSignalPar[3]},
; rs232cmd.c  898		{ S8KHZParTxt, 	S8KHZParTxt, 	 NULL},
; rs232cmd.c  899	};
; rs232cmd.c  900	
; rs232cmd.c  901	struct PAR_STRUCT code AnalogLevelPar[1] = {
	DD	000000000H
	SYMB	IDEN, "AnalogLevelPar", _AnalogLevelPar, #522, 129, 0
	SYMB	ALAB, _AnalogLevelPar, #522
	PUBLIC	_AnalogLevelPar
	ALIGN	1
_AnalogLevelPar:
	DD	_SILENCEParTxt,_SILParTxt
; rs232cmd.c  902		{ SILENCEParTxt, SILParTxt, NULL},
; rs232cmd.c  903	};
; rs232cmd.c  904	
; rs232cmd.c  905	struct PAR_STRUCT code AESEBULevelPar[1] = {
	DD	000000000H
	SYMB	IDEN, "AESEBULevelPar", _AESEBULevelPar, #522, 129, 0
	SYMB	ALAB, _AESEBULevelPar, #522
	PUBLIC	_AESEBULevelPar
	ALIGN	1
_AESEBULevelPar:
	DD	_SILENCEParTxt,_SILParTxt
; rs232cmd.c  906		{ SILENCEParTxt, SILParTxt, NULL},
; rs232cmd.c  907	};
; rs232cmd.c  908	
; rs232cmd.c  909	struct PAR_STRUCT code AudioFrequencyPar[2] = {
	DD	000000000H
	SYMB	IDEN, "AudioFrequencyPar", _AudioFrequencyPar, #530, 129, 0
	SYMB	ALAB, _AudioFrequencyPar, #530
	PUBLIC	_AudioFrequencyPar
	ALIGN	1
_AudioFrequencyPar:
	DD	_F441KHZParTxt,_F441KHZParTxt
	DD	_AudioFrequencyPar+12
	DD	_F48KHZParTxt,_F48KHZParTxt
; rs232cmd.c  910		{ F441KHZParTxt, F441KHZParTxt, &AudioFrequencyPar[1]},
; rs232cmd.c  911		{ F48KHZParTxt,  F48KHZParTxt,  NULL},
; rs232cmd.c  912	};
; rs232cmd.c  913	
; rs232cmd.c  914	struct PAR_STRUCT code UnitPar[2] = {
	DD	000000000H
	SYMB	IDEN, "UnitPar", _UnitPar, #530, 129, 0
	SYMB	ALAB, _UnitPar, #530
	PUBLIC	_UnitPar
	ALIGN	1
_UnitPar:
	DD	_BBParTxt,_BBParTxt
	DD	_UnitPar+12
	DD	_SPGParTxt,_SPGParTxt
; rs232cmd.c  915		{ BBParTxt,  BBParTxt,  &UnitPar[1]},
; rs232cmd.c  916		{ SPGParTxt, SPGParTxt, NULL},
; rs232cmd.c  917	};
; rs232cmd.c  918	
; rs232cmd.c  919	struct PAR_STRUCT code OffOnPar[2] = {
	DD	000000000H
	SYMB	IDEN, "OffOnPar", _OffOnPar, #530, 129, 0
	SYMB	ALAB, _OffOnPar, #530
	PUBLIC	_OffOnPar
	ALIGN	1
_OffOnPar:
	DD	_OFFParTxt,_OFFParTxt
	DD	_OffOnPar+12
	DD	_ONParTxt,_ONParTxt
; rs232cmd.c  920		{ OFFParTxt, OFFParTxt, &OffOnPar[1]},
; rs232cmd.c  921		{ ONParTxt,  ONParTxt,  NULL},
; rs232cmd.c  922	};
; rs232cmd.c  923	
; rs232cmd.c  924	struct PAR_STRUCT code FactBBGenSignalPar[2] = {
	DD	000000000H
	SYMB	IDEN, "FactBBGenSignalPar", _FactBBGenSignalPar, #530, 129, 0
	SYMB	ALAB, _FactBBGenSignalPar, #530
	PUBLIC	_FactBBGenSignalPar
	ALIGN	1
_FactBBGenSignalPar:
	DD	_NORMALParTxt,_NORMParTxt
	DD	_FactBBGenSignalPar+12
	DD	_F45MHZParTxt,_F45MHZParTxt
; rs232cmd.c  925		{ NORMALParTxt, NORMParTxt, 	&FactBBGenSignalPar[1]},
; rs232cmd.c  926		{ F45MHZParTxt, F45MHZParTxt, NULL},
; rs232cmd.c  927	};
; rs232cmd.c  928	
; rs232cmd.c  929	struct PAR_STRUCT code MinMaxPar[2] = {
	DD	000000000H
	SYMB	IDEN, "MinMaxPar", _MinMaxPar, #530, 129, 0
	SYMB	ALAB, _MinMaxPar, #530
	PUBLIC	_MinMaxPar
	ALIGN	1
_MinMaxPar:
	DD	_MINParTxt,_MINParTxt
	DD	_MinMaxPar+12
	DD	_MAXParTxt,_MAXParTxt
; rs232cmd.c  930		{ MINParTxt, MINParTxt, &MinMaxPar[1]},
; rs232cmd.c  931		{ MAXParTxt, MAXParTxt, NULL},
; rs232cmd.c  932	};
; rs232cmd.c  933	
; rs232cmd.c  934	struct PAR_STRUCT code UpDownPar[2] = {
	DD	000000000H
	SYMB	IDEN, "UpDownPar", _UpDownPar, #530, 129, 0
	SYMB	ALAB, _UpDownPar, #530
	PUBLIC	_UpDownPar
	ALIGN	1
_UpDownPar:
	DD	_UPParTxt,_UPParTxt
	DD	_UpDownPar+12
	DD	_DOWNParTxt,_DOWNParTxt
; rs232cmd.c  935		{ UPParTxt,   UPParTxt,   &UpDownPar[1]},
; rs232cmd.c  936		{ DOWNParTxt, DOWNParTxt, NULL},
; rs232cmd.c  937	};
; rs232cmd.c  938	
; rs232cmd.c  939	/***************************************************************************/
; rs232cmd.c  940	// Temporary variables PRIVATE NOT overlayable
; rs232cmd.c  941	
; rs232cmd.c  942	static unsigned int Suffix[4]=
	DD	000000000H
RS232CMD_INI_FA	SEGMENT	HDATA INSEGMENT INIT
	RSEG	RS232CMD_INI_FA
	SYMB	TYPE, 532, 'Z', #18, 3
	SYMB	IDEN, "Suffix", _Suffix, #532, 130, 4
	ALIGN	1
_Suffix:
; rs232cmd.c  943	{
; rs232cmd.c  944		1,1,1,1
; rs232cmd.c  945	};
; rs232cmd.c  946	
; rs232cmd.c  947	static bool PasswordProtected = true;
	DW	00001H,00001H,00001H,00001H
	SYMB	IDEN, "PasswordProtected", _PasswordProtected, #487, 130, 4
	ALIGN	1
_PasswordProtected:
; rs232cmd.c  948	static UC GenlockCalEnable = 0;
	DW	0FFFFH
	SYMB	IDEN, "GenlockCalEnable", _GenlockCalEnable, #3, 130, 4
_GenlockCalEnable:
; rs232cmd.c  949	static int GenlockCalValue = 0;
	DB	000H
	SYMB	IDEN, "GenlockCalValue", _GenlockCalValue, #16, 130, 4
	ALIGN	1
_GenlockCalValue:
; rs232cmd.c  950	
; rs232cmd.c  951	/**************************************************************************/
; rs232cmd.c  952	/* CLSCommand																	 								 RS232CMD.C */
; rs232cmd.c  953	/*																																				*/
; rs232cmd.c  954	/* Author: 		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c  955	/* Revised:		000413				     																					*/
; rs232cmd.c  956	/*																																				*/
; rs232cmd.c  957	/* Function:  Clear status command																				*/
; rs232cmd.c  958	/* Remarks:		No parameters																								*/
; rs232cmd.c  959	/* Returns:		-																														*/
; rs232cmd.c  960	/* Updates:																																*/
; rs232cmd.c  961	/**************************************************************************/
; rs232cmd.c  962	void CLSCommand( void)
; rs232cmd.c  963	{
	DW	00000H
RS232CMD_PR	SEGMENT	HCODE
	RSEG	RS232CMD_PR
	ALIGN	1
	SYMB	LINE, 963
	PUBLIC	_CLSCommand
_CLSCommand:
	SYMB	TYPE, 534, 'X', 12, #1, 30, 0
	SYMB	GFUN, "CLSCommand", _CLSCommand, #534, 0, 0, 0
	SYMB	ALAB, _CLSCommand, #534
; rs232cmd.c  964		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 964
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_8
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_8
; rs232cmd.c  965		{
; rs232cmd.c  966			if ( CmdRequest)
	SYMB	LINE, 966
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_3
; rs232cmd.c  967				SCPIError = SyntaxErr;
	SYMB	LINE, 967
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_3:
; rs232cmd.c  968			else
; rs232cmd.c  969			{
; rs232cmd.c  970				if ( ParCnt)
	SYMB	LINE, 970
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_4
; rs232cmd.c  971					SCPIError = ParNotAllowed;
	SYMB	LINE, 971
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_4:
; rs232cmd.c  972				else
; rs232cmd.c  973					ResetErrorEventQueue();
	SYMB	LINE, 973
	CALL	_ResetErrorEventQueue
; rs232cmd.c  974			}
; rs232cmd.c  975		}
	SYMB	LINE, 975
_8:
; rs232cmd.c  976	}
	SYMB	LINE, 976
	RET
	SYMB	EFUN
; rs232cmd.c  977	
; rs232cmd.c  978	/**************************************************************************/
; rs232cmd.c  979	/* ESECommand																	 								 RS232CMD.C */
; rs232cmd.c  980	/*																																				*/
; rs232cmd.c  981	/* Author:		Kim Engedahl, DEV, 970627	    															*/
; rs232cmd.c  982	/* Revised:		000413				     																					*/
; rs232cmd.c  983	/*																																				*/
; rs232cmd.c  984	/* Function:	Set/read the Standard Event Status Enable Register					*/
; rs232cmd.c  985	/* Remarks:		--																													*/
; rs232cmd.c  986	/* Returns:		-																														*/
; rs232cmd.c  987	/* Updates:																																*/
; rs232cmd.c  988	/**************************************************************************/
; rs232cmd.c  989	void ESECommand( void)
; rs232cmd.c  990	{
	ALIGN	1
	SYMB	LINE, 990
	PUBLIC	_ESECommand
_ESECommand:
	SYMB	TYPE, 535, 'X', 12, #1, 30, 0
	SYMB	GFUN, "ESECommand", _ESECommand, #535, 0, 0, 0
	SYMB	ALAB, _ESECommand, #535
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "Reg", -2, #16, 130, 5
; rs232cmd.c  991		int Reg;
; rs232cmd.c  992	
; rs232cmd.c  993		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 993
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_21
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_21
; rs232cmd.c  994		{
; rs232cmd.c  995			if ( CmdRequest)
	SYMB	LINE, 995
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_12
; rs232cmd.c  996			{
; rs232cmd.c  997				if ( ParCnt)
	SYMB	LINE, 997
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_11
; rs232cmd.c  998					SCPIError = ParNotAllowed;
	SYMB	LINE, 998
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_21
_11:
; rs232cmd.c  999				else
; rs232cmd.c 1000					rs232printf( 12, "%d\n", ESEReg);
	SYMB	LINE, 1000
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _ESEReg )
	MOV.W	R1,#SOF( _ESEReg )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 1001			}
	SYMB	LINE, 1001
	BR	_21
_12:
; rs232cmd.c 1002			else
; rs232cmd.c 1003			{
; rs232cmd.c 1004				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1004
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_13
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_14
_13:
; rs232cmd.c 1005				{
; rs232cmd.c 1006					SCPIError = SyntaxErr;	
	SYMB	LINE, 1006
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1007					return;
	SYMB	LINE, 1007
	BR	_21
; rs232cmd.c 1008				}
	SYMB	LINE, 1008
_14:
; rs232cmd.c 1009	
; rs232cmd.c 1010				if ( Reg > 255)
	SYMB	LINE, 1010
	CMP.W	[R7],#0FFH
	BLE	_15
; rs232cmd.c 1011				{
; rs232cmd.c 1012					SCPIError = DataOutOfRange;
	SYMB	LINE, 1012
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1013					return;
	SYMB	LINE, 1013
	BR	_21
; rs232cmd.c 1014				}
	SYMB	LINE, 1014
_15:
; rs232cmd.c 1015	
; rs232cmd.c 1016				ESEReg = Reg & 0xFF;
	SYMB	LINE, 1016
	MOV.W	R0,[R7]
	AND.B	R0L,#0FFH
	MOV.B	ES,#SEG( _ESEReg )
	MOV.W	R1,#SOF( _ESEReg )
	MOV.B	[R1],R0L
; rs232cmd.c 1017			}
; rs232cmd.c 1018		}
; rs232cmd.c 1019	}
	SYMB	LINE, 1019
_21:
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1020	
; rs232cmd.c 1021	/**************************************************************************/
; rs232cmd.c 1022	/* ESRCommand																									 RS232CMD.C */
; rs232cmd.c 1023	/*																																				*/
; rs232cmd.c 1024	/* Author:		Kim Engedahl, DEV, 970627	    															*/
; rs232cmd.c 1025	/* Revised:		000413				     																					*/
; rs232cmd.c 1026	/*																																				*/
; rs232cmd.c 1027	/* Function:	Read and clear the Standard Event Status Register						*/
; rs232cmd.c 1028	/* Remarks:		No parameters																								*/
; rs232cmd.c 1029	/*						The register will reset to zero.														*/
; rs232cmd.c 1030	/* Returns:		-																														*/
; rs232cmd.c 1031	/* Updates:																																*/
; rs232cmd.c 1032	/**************************************************************************/
; rs232cmd.c 1033	void ESRCommand( void)
; rs232cmd.c 1034	{
	ALIGN	1
	SYMB	LINE, 1034
	PUBLIC	_ESRCommand
_ESRCommand:
	SYMB	TYPE, 536, 'X', 12, #1, 30, 0
	SYMB	GFUN, "ESRCommand", _ESRCommand, #536, 0, 0, 0
	SYMB	ALAB, _ESRCommand, #536
	SYMB	IDEN, "Reg", -1, #16, 130, 5
	SYMB	LTIM, "Reg", -1, 0, 69
; rs232cmd.c 1035		int Reg;
; rs232cmd.c 1036	
; rs232cmd.c 1037		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1037
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_30
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_30
; rs232cmd.c 1038		{
; rs232cmd.c 1039			if ( CmdRequest)
	SYMB	LINE, 1039
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_26
; rs232cmd.c 1040			{
; rs232cmd.c 1041				if ( ParCnt)
	SYMB	LINE, 1041
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_25
; rs232cmd.c 1042					SCPIError = ParNotAllowed;
	SYMB	LINE, 1042
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_25:
; rs232cmd.c 1043				else
; rs232cmd.c 1044				{
; rs232cmd.c 1045					rs232printf( 12, "%d\n", UpdateESRRegister());
	SYMB	LINE, 1045
	CALL	_UpdateESRRegister
	MOV.B	R1L,R0L
	MOVS.B	R1H,#00H
	MOV.W	R0,#0CH
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
; rs232cmd.c 1046	
; rs232cmd.c 1047					ESRReg = 0;
	SYMB	LINE, 1047
	MOV.B	ES,#SEG( _ESRReg )
	MOV.W	R0,#SOF( _ESRReg )
	MOV.B	[R0],#00H
; rs232cmd.c 1048				}
; rs232cmd.c 1049			}
	SYMB	LINE, 1049
	RET
_26:
; rs232cmd.c 1050			else
; rs232cmd.c 1051				SCPIError = SyntaxErr;
	SYMB	LINE, 1051
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1052		}
	SYMB	LINE, 1052
_30:
; rs232cmd.c 1053	}
	SYMB	LINE, 1053
	RET
	SYMB	EFUN
; rs232cmd.c 1054	
; rs232cmd.c 1055	/**************************************************************************/
; rs232cmd.c 1056	/* OPCCommand																	 								 RS232CMD.C */
; rs232cmd.c 1057	/*																																				*/
; rs232cmd.c 1058	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 1059	/* Revised:		000413				     																					*/
; rs232cmd.c 1060	/*																																				*/
; rs232cmd.c 1061	/* Function:	Operation Complete Command/Query														*/
; rs232cmd.c 1062	/* Remarks:		No parameters																								*/
; rs232cmd.c 1063	/* Returns:		-																														*/
; rs232cmd.c 1064	/* Updates:																																*/
; rs232cmd.c 1065	/**************************************************************************/
; rs232cmd.c 1066	void OPCCommand( void)
; rs232cmd.c 1067	{
	ALIGN	1
	SYMB	LINE, 1067
	PUBLIC	_OPCCommand
_OPCCommand:
	SYMB	TYPE, 537, 'X', 12, #1, 30, 0
	SYMB	GFUN, "OPCCommand", _OPCCommand, #537, 0, 0, 0
	SYMB	ALAB, _OPCCommand, #537
; rs232cmd.c 1068		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1068
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_36
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_36
; rs232cmd.c 1069		{
; rs232cmd.c 1070			if ( CmdRequest)
	SYMB	LINE, 1070
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_31
; rs232cmd.c 1071			{
; rs232cmd.c 1072				if ( ParCnt)
	SYMB	LINE, 1072
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_36
; rs232cmd.c 1073					SCPIError = ParNotAllowed;
	SYMB	LINE, 1073
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
; rs232cmd.c 1074			}
	SYMB	LINE, 1074
	RET
_31:
; rs232cmd.c 1075			else
; rs232cmd.c 1076			{
; rs232cmd.c 1077				if ( ParCnt)
	SYMB	LINE, 1077
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_36
; rs232cmd.c 1078					SCPIError = ParNotAllowed;
	SYMB	LINE, 1078
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
; rs232cmd.c 1079			}
; rs232cmd.c 1080		}
	SYMB	LINE, 1080
_36:
; rs232cmd.c 1081	}
	SYMB	LINE, 1081
	RET
	SYMB	EFUN
; rs232cmd.c 1082	
; rs232cmd.c 1083	/**************************************************************************/
; rs232cmd.c 1084	/* SRECommand															 		 								 RS232CMD.C */
; rs232cmd.c 1085	/*																																				*/
; rs232cmd.c 1086	/* Author:		Kim Engedahl, DEV, 970627	    															*/
; rs232cmd.c 1087	/* Revised:		000413				     																					*/
; rs232cmd.c 1088	/*																																				*/
; rs232cmd.c 1089	/* Function:	Set/read the Service Request Enable Register								*/
; rs232cmd.c 1090	/* Remarks:		Bit 6 in *SRE? register is always ZERO											*/
; rs232cmd.c 1091	/*						Bit 6 in *SRE register is ignored														*/
; rs232cmd.c 1092	/* Returns:		-																														*/
; rs232cmd.c 1093	/* Updates:																																*/
; rs232cmd.c 1094	/**************************************************************************/
; rs232cmd.c 1095	void SRECommand( void)
; rs232cmd.c 1096	{
	ALIGN	1
	SYMB	LINE, 1096
	PUBLIC	_SRECommand
_SRECommand:
	SYMB	TYPE, 538, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SRECommand", _SRECommand, #538, 0, 0, 0
	SYMB	ALAB, _SRECommand, #538
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "Reg", -2, #16, 130, 5
; rs232cmd.c 1097		int Reg;
; rs232cmd.c 1098	
; rs232cmd.c 1099		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1099
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_47
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_47
; rs232cmd.c 1100		{
; rs232cmd.c 1101			if ( CmdRequest)
	SYMB	LINE, 1101
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_38
; rs232cmd.c 1102			{
; rs232cmd.c 1103				if ( ParCnt)
	SYMB	LINE, 1103
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_37
; rs232cmd.c 1104					SCPIError = ParNotAllowed;
	SYMB	LINE, 1104
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_47
_37:
; rs232cmd.c 1105				else
; rs232cmd.c 1106					rs232printf( 12, "%d\n", SREReg);
	SYMB	LINE, 1106
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _SREReg )
	MOV.W	R1,#SOF( _SREReg )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 1107			}
	SYMB	LINE, 1107
	BR	_47
_38:
; rs232cmd.c 1108			else
; rs232cmd.c 1109			{
; rs232cmd.c 1110				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1110
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_39
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_40
_39:
; rs232cmd.c 1111				{
; rs232cmd.c 1112					SCPIError = SyntaxErr;	
	SYMB	LINE, 1112
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1113					return;
	SYMB	LINE, 1113
	BR	_47
; rs232cmd.c 1114				}
	SYMB	LINE, 1114
_40:
; rs232cmd.c 1115	
; rs232cmd.c 1116				if ( Reg > 255)
	SYMB	LINE, 1116
	CMP.W	[R7],#0FFH
	BLE	_41
; rs232cmd.c 1117				{
; rs232cmd.c 1118					SCPIError = DataOutOfRange;
	SYMB	LINE, 1118
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1119					return;
	SYMB	LINE, 1119
	BR	_47
; rs232cmd.c 1120				}
	SYMB	LINE, 1120
_41:
; rs232cmd.c 1121	
; rs232cmd.c 1122				SREReg = Reg & 0xBF;
	SYMB	LINE, 1122
	MOV.W	R0,[R7]
	AND.B	R0L,#0BFH
	MOV.B	ES,#SEG( _SREReg )
	MOV.W	R1,#SOF( _SREReg )
	MOV.B	[R1],R0L
; rs232cmd.c 1123			}
; rs232cmd.c 1124		}
; rs232cmd.c 1125	}
	SYMB	LINE, 1125
_47:
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1126	
; rs232cmd.c 1127	/**************************************************************************/
; rs232cmd.c 1128	/* STBCommand																									 RS232CMD.C */
; rs232cmd.c 1129	/*																																				*/
; rs232cmd.c 1130	/* Author:		Kim Engedahl, DEV, 970627	    															*/
; rs232cmd.c 1131	/* Revised:		000413				     																					*/
; rs232cmd.c 1132	/*																																				*/
; rs232cmd.c 1133	/* Function:	Read the Status Byte Register																*/
; rs232cmd.c 1134	/* Remarks:		No parameters																								*/
; rs232cmd.c 1135	/* Returns:																																*/
; rs232cmd.c 1136	/* Updates:																																*/
; rs232cmd.c 1137	/**************************************************************************/
; rs232cmd.c 1138	void STBCommand( void)
; rs232cmd.c 1139	{
	ALIGN	1
	SYMB	LINE, 1139
	PUBLIC	_STBCommand
_STBCommand:
	SYMB	TYPE, 539, 'X', 12, #1, 30, 0
	SYMB	GFUN, "STBCommand", _STBCommand, #539, 0, 0, 0
	SYMB	ALAB, _STBCommand, #539
; rs232cmd.c 1140		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1140
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_56
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_56
; rs232cmd.c 1141		{
; rs232cmd.c 1142			if ( CmdRequest)
	SYMB	LINE, 1142
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_52
; rs232cmd.c 1143			{
; rs232cmd.c 1144				if ( ParCnt)
	SYMB	LINE, 1144
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_51
; rs232cmd.c 1145					SCPIError = ParNotAllowed;
	SYMB	LINE, 1145
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_51:
; rs232cmd.c 1146				else
; rs232cmd.c 1147				{
; rs232cmd.c 1148					UpdateSTBRegister();
	SYMB	LINE, 1148
	CALL	_UpdateSTBRegister
; rs232cmd.c 1149	
; rs232cmd.c 1150					rs232printf( 12, "%d\n", STBReg);
	SYMB	LINE, 1150
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _STBReg )
	MOV.W	R1,#SOF( _STBReg )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
; rs232cmd.c 1151				}
; rs232cmd.c 1152			}
	SYMB	LINE, 1152
	RET
_52:
; rs232cmd.c 1153			else
; rs232cmd.c 1154				SCPIError = SyntaxErr;
	SYMB	LINE, 1154
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1155		}
	SYMB	LINE, 1155
_56:
; rs232cmd.c 1156	}
	SYMB	LINE, 1156
	RET
	SYMB	EFUN
; rs232cmd.c 1157	
; rs232cmd.c 1158	/**************************************************************************/
; rs232cmd.c 1159	/* TSTCommand																									 RS232CMD.C */
; rs232cmd.c 1160	/*																																				*/
; rs232cmd.c 1161	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1162	/* Revised:		000505				     																					*/
; rs232cmd.c 1163	/*																																				*/
; rs232cmd.c 1164	/* Function:	Selftest query																							*/
; rs232cmd.c 1165	/* Remarks:		No parameters																								*/
; rs232cmd.c 1166	/* Returns:		-																														*/
; rs232cmd.c 1167	/* Updates:																																*/
; rs232cmd.c 1168	/**************************************************************************/
; rs232cmd.c 1169	void TSTCommand( void)
; rs232cmd.c 1170	{
	ALIGN	1
	SYMB	LINE, 1170
	PUBLIC	_TSTCommand
_TSTCommand:
	SYMB	TYPE, 540, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSTCommand", _TSTCommand, #540, 0, 0, 0
	SYMB	ALAB, _TSTCommand, #540
; rs232cmd.c 1171		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1171
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_61
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_61
; rs232cmd.c 1172		{
; rs232cmd.c 1173			if ( CmdRequest)
	SYMB	LINE, 1173
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_57
; rs232cmd.c 1174			{
; rs232cmd.c 1175				if ( ParCnt)
	SYMB	LINE, 1175
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_61
; rs232cmd.c 1176					SCPIError = ParNotAllowed;
	SYMB	LINE, 1176
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
; rs232cmd.c 1177				else
; rs232cmd.c 1178				{
; rs232cmd.c 1179					;
; rs232cmd.c 1180				}
; rs232cmd.c 1181			}
	SYMB	LINE, 1181
	RET
_57:
; rs232cmd.c 1182			else
; rs232cmd.c 1183				SCPIError = SyntaxErr;
	SYMB	LINE, 1183
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1184		}
	SYMB	LINE, 1184
_61:
; rs232cmd.c 1185	}
	SYMB	LINE, 1185
	RET
	SYMB	EFUN
; rs232cmd.c 1186	
; rs232cmd.c 1187	/**************************************************************************/
; rs232cmd.c 1188	/* WAICommand																									 RS232CMD.C */
; rs232cmd.c 1189	/*																																				*/
; rs232cmd.c 1190	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1191	/* Revised:		000505				     																					*/
; rs232cmd.c 1192	/*																																				*/
; rs232cmd.c 1193	/* Function:	Wait-to-continue command																		*/
; rs232cmd.c 1194	/* Remarks:		No parameters																								*/
; rs232cmd.c 1195	/* Returns:		-																														*/
; rs232cmd.c 1196	/* Updates:																																*/
; rs232cmd.c 1197	/**************************************************************************/
; rs232cmd.c 1198	void WAICommand( void)
; rs232cmd.c 1199	{
	ALIGN	1
	SYMB	LINE, 1199
	PUBLIC	_WAICommand
_WAICommand:
	SYMB	TYPE, 541, 'X', 12, #1, 30, 0
	SYMB	GFUN, "WAICommand", _WAICommand, #541, 0, 0, 0
	SYMB	ALAB, _WAICommand, #541
; rs232cmd.c 1200		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1200
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_66
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_66
; rs232cmd.c 1201		{
; rs232cmd.c 1202			if ( CmdRequest)
	SYMB	LINE, 1202
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_62
; rs232cmd.c 1203				SCPIError = SyntaxErr;
	SYMB	LINE, 1203
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_62:
; rs232cmd.c 1204			else
; rs232cmd.c 1205			{
; rs232cmd.c 1206				if ( ParCnt)
	SYMB	LINE, 1206
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_66
; rs232cmd.c 1207					SCPIError = ParNotAllowed;
	SYMB	LINE, 1207
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
; rs232cmd.c 1208				else
; rs232cmd.c 1209				{
; rs232cmd.c 1210					;
; rs232cmd.c 1211				}
; rs232cmd.c 1212			}
; rs232cmd.c 1213		}
	SYMB	LINE, 1213
_66:
; rs232cmd.c 1214	}
	SYMB	LINE, 1214
	RET
	SYMB	EFUN
; rs232cmd.c 1215	
; rs232cmd.c 1216	/**************************************************************************/
; rs232cmd.c 1217	/* RSTCommand																									 RS232CMD.C */
; rs232cmd.c 1218	/*																																				*/
; rs232cmd.c 1219	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 1220	/* Revised:		000617				     																					*/
; rs232cmd.c 1221	/*																																				*/
; rs232cmd.c 1222	/* Function:	Reset comamnd																								*/
; rs232cmd.c 1223	/* Remarks:		No parameters																								*/
; rs232cmd.c 1224	/* Returns:																																*/
; rs232cmd.c 1225	/* Updates:																																*/
; rs232cmd.c 1226	/**************************************************************************/
; rs232cmd.c 1227	void RSTCommand( void)
; rs232cmd.c 1228	{
	ALIGN	1
	SYMB	LINE, 1228
	PUBLIC	_RSTCommand
_RSTCommand:
	SYMB	TYPE, 542, 'X', 12, #1, 30, 0
	SYMB	GFUN, "RSTCommand", _RSTCommand, #542, 0, 0, 0
	SYMB	ALAB, _RSTCommand, #542
; rs232cmd.c 1229		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1229
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_72
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_72
; rs232cmd.c 1230		{
; rs232cmd.c 1231			if ( CmdRequest)
	SYMB	LINE, 1231
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_67
; rs232cmd.c 1232				SCPIError = SyntaxErr;
	SYMB	LINE, 1232
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_67:
; rs232cmd.c 1233			else
; rs232cmd.c 1234			{
; rs232cmd.c 1235				if ( ParCnt)
	SYMB	LINE, 1235
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_68
; rs232cmd.c 1236					SCPIError = ParNotAllowed;
	SYMB	LINE, 1236
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_68:
; rs232cmd.c 1237				else
; rs232cmd.c 1238					ResetInstrument();
	SYMB	LINE, 1238
	CALL	_ResetInstrument
; rs232cmd.c 1239			}
; rs232cmd.c 1240		}
	SYMB	LINE, 1240
_72:
; rs232cmd.c 1241	}
	SYMB	LINE, 1241
	RET
	SYMB	EFUN
; rs232cmd.c 1242	
; rs232cmd.c 1243	/**************************************************************************/
; rs232cmd.c 1244	/* IDNCommand																								   RS232CMD.C */
; rs232cmd.c 1245	/*																																				*/
; rs232cmd.c 1246	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 1247	/* Revised:		000614				     																					*/
; rs232cmd.c 1248	/*																																				*/
; rs232cmd.c 1249	/* Function:	Identification query																				*/
; rs232cmd.c 1250	/* Remarks:		No parameter, Query only																		*/
; rs232cmd.c 1251	/* Returns:		-																														*/
; rs232cmd.c 1252	/* Updates:		-																														*/
; rs232cmd.c 1253	/**************************************************************************/
; rs232cmd.c 1254	void IDNCommand( void)
; rs232cmd.c 1255	{
	ALIGN	1
	SYMB	LINE, 1255
	PUBLIC	_IDNCommand
_IDNCommand:
	SYMB	TYPE, 543, 'X', 12, #1, 30, 0
	SYMB	GFUN, "IDNCommand", _IDNCommand, #543, 0, 0, 0
	SYMB	ALAB, _IDNCommand, #543
; rs232cmd.c 1256		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1256
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_78
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_78
; rs232cmd.c 1257		{
; rs232cmd.c 1258			if ( CmdRequest)
	SYMB	LINE, 1258
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_74
; rs232cmd.c 1259			{
; rs232cmd.c 1260				if ( ParCnt)
	SYMB	LINE, 1260
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_73
; rs232cmd.c 1261					SCPIError = ParNotAllowed;
	SYMB	LINE, 1261
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_73:
; rs232cmd.c 1262				else
; rs232cmd.c 1263				{
; rs232cmd.c 1264					rs232puts( Calibration.Company);
	SYMB	LINE, 1264
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	CALL	_rs232puts
; rs232cmd.c 1265	
; rs232cmd.c 1266					rs232putchar( ',');
	SYMB	LINE, 1266
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 1267	
; rs232cmd.c 1268					rs232puts( Calibration.Type);
	SYMB	LINE, 1268
	MOV.W	R1,#SEG( _Calibration+33 )
	MOV.W	R0,#SOF( _Calibration+33 )
	CALL	_rs232puts
	MOV.B	R0L,#02CH
; rs232cmd.c 1269	
; rs232cmd.c 1270					rs232putchar( ',');
	SYMB	LINE, 1270
	CALL	_rs232putchar
; rs232cmd.c 1271	
; rs232cmd.c 1272					rs232puts( Calibration.KUNumber);
	SYMB	LINE, 1272
	MOV.W	R1,#SEG( _Calibration+66 )
	MOV.W	R0,#SOF( _Calibration+66 )
	CALL	_rs232puts
; rs232cmd.c 1273	
; rs232cmd.c 1274					rs232putchar( ',');
	SYMB	LINE, 1274
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 1275	
; rs232cmd.c 1276					rs232puts( Calibration.SWRevision);
	SYMB	LINE, 1276
	MOV.W	R1,#SEG( _Calibration+75 )
	MOV.W	R0,#SOF( _Calibration+75 )
	CALL	_rs232puts
; rs232cmd.c 1277	
; rs232cmd.c 1278					rs232putchar( '\n');
	SYMB	LINE, 1278
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1279				}
; rs232cmd.c 1280			}
	SYMB	LINE, 1280
	RET
_74:
; rs232cmd.c 1281			else
; rs232cmd.c 1282				SCPIError = SyntaxErr;
	SYMB	LINE, 1282
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1283		}
	SYMB	LINE, 1283
_78:
; rs232cmd.c 1284	}
	SYMB	LINE, 1284
	RET
	SYMB	EFUN
; rs232cmd.c 1285	
; rs232cmd.c 1286	/**************************************************************************/
; rs232cmd.c 1287	/* RCLCommand																									 RS232CMD.C */
; rs232cmd.c 1288	/*																																				*/
; rs232cmd.c 1289	/* Author:		Sten A. Andersen/Thomas Kappelgaard, DEV, xxxxxx 						*/
; rs232cmd.c 1290	/* Revised:		Kim Engedahl, DEV, 000617																		*/
; rs232cmd.c 1291	/*																																				*/
; rs232cmd.c 1292	/* Function:																															*/
; rs232cmd.c 1293	/* Remarks:																																*/
; rs232cmd.c 1294	/* Returns:		-																														*/
; rs232cmd.c 1295	/* Updates:		-																														*/
; rs232cmd.c 1296	/**************************************************************************/
; rs232cmd.c 1297	void RCLCommand(void) 
; rs232cmd.c 1298	{
	ALIGN	1
	SYMB	LINE, 1298
	PUBLIC	_RCLCommand
_RCLCommand:
	SYMB	TYPE, 544, 'X', 12, #1, 30, 0
	SYMB	GFUN, "RCLCommand", _RCLCommand, #544, 0, 0, 0
	SYMB	ALAB, _RCLCommand, #544
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "Reg", -2, #16, 130, 5
; rs232cmd.c 1299		int	Reg = 0;
	SYMB	LINE, 1299
	MOV.W	[R7],#00H
; rs232cmd.c 1300	
; rs232cmd.c 1301		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1301
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_89
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_89
; rs232cmd.c 1302		{
; rs232cmd.c 1303			if ( CmdRequest)
	SYMB	LINE, 1303
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_79
; rs232cmd.c 1304			{
; rs232cmd.c 1305				SCPIError = SyntaxErr;
	SYMB	LINE, 1305
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1306			}
	SYMB	LINE, 1306
	BR	_89
_79:
; rs232cmd.c 1307			else
; rs232cmd.c 1308			{
; rs232cmd.c 1309				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1309
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_80
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_81
_80:
; rs232cmd.c 1310				{
; rs232cmd.c 1311					SCPIError = SyntaxErr;	
	SYMB	LINE, 1311
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1312					return;
	SYMB	LINE, 1312
	BR	_89
; rs232cmd.c 1313				}
	SYMB	LINE, 1313
_81:
; rs232cmd.c 1314	
; rs232cmd.c 1315				if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1315
	MOV.W	R0,[R7]
	BEQ	_82
	CMP.W	[R7],#04H
	BLE	_83
_82:
; rs232cmd.c 1316					SCPIError = DataOutOfRange;
	SYMB	LINE, 1316
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_89
_83:
; rs232cmd.c 1317				else
; rs232cmd.c 1318				{
; rs232cmd.c 1319					if ( RecallPreset( Reg) != OK)
	SYMB	LINE, 1319
	MOV.W	R0,[R7]
	CALL	_RecallPreset
	CMP.W	R0,#0FFFFH
	BEQ	_89
; rs232cmd.c 1320						SCPIError = ExecErr;
	SYMB	LINE, 1320
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 1321				}
; rs232cmd.c 1322			}
; rs232cmd.c 1323		}
; rs232cmd.c 1324	}
	SYMB	LINE, 1324
_89:
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1325	
; rs232cmd.c 1326	/**************************************************************************/
; rs232cmd.c 1327	/* SAVCommand																									 RS232CMD.C */
; rs232cmd.c 1328	/*																																				*/
; rs232cmd.c 1329	/* Author:		Sten A. Andersen/Thomas Kappelgaard, DEV, xxxxxx 						*/
; rs232cmd.c 1330	/* Revised:		Kim Engedahl, DEV, 000502																		*/
; rs232cmd.c 1331	/*																																				*/
; rs232cmd.c 1332	/* Function:																															*/
; rs232cmd.c 1333	/* Remarks:																																*/
; rs232cmd.c 1334	/* Returns:		-																														*/
; rs232cmd.c 1335	/* Updates:		-																														*/
; rs232cmd.c 1336	/**************************************************************************/
; rs232cmd.c 1337	void SAVCommand(void) 
; rs232cmd.c 1338	{
	ALIGN	1
	SYMB	LINE, 1338
	PUBLIC	_SAVCommand
_SAVCommand:
	SYMB	TYPE, 545, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SAVCommand", _SAVCommand, #545, 0, 0, 0
	SYMB	ALAB, _SAVCommand, #545
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "Reg", -2, #16, 130, 5
; rs232cmd.c 1339		int	Reg = 0;
	SYMB	LINE, 1339
	MOV.W	[R7],#00H
; rs232cmd.c 1340	
; rs232cmd.c 1341		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1341
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_104
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_104
; rs232cmd.c 1342		{
; rs232cmd.c 1343			if ( CmdRequest)
	SYMB	LINE, 1343
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_94
; rs232cmd.c 1344				SCPIError = SyntaxErr;
	SYMB	LINE, 1344
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_104
_94:
; rs232cmd.c 1345			else
; rs232cmd.c 1346			{
; rs232cmd.c 1347				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1347
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_95
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_96
_95:
; rs232cmd.c 1348				{
; rs232cmd.c 1349					SCPIError = SyntaxErr;	
	SYMB	LINE, 1349
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1350					return;
	SYMB	LINE, 1350
	BR	_104
; rs232cmd.c 1351				}
	SYMB	LINE, 1351
_96:
; rs232cmd.c 1352	
; rs232cmd.c 1353				if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1353
	MOV.W	R0,[R7]
	BEQ	_97
	CMP.W	[R7],#04H
	BLE	_98
_97:
; rs232cmd.c 1354					SCPIError = DataOutOfRange;
	SYMB	LINE, 1354
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_104
_98:
; rs232cmd.c 1355				else
; rs232cmd.c 1356				{
; rs232cmd.c 1357					if ( StorePreset( Reg) != OK)
	SYMB	LINE, 1357
	MOV.W	R0,[R7]
	CALL	_StorePreset
	CMP.W	R0,#0FFFFH
	BEQ	_104
; rs232cmd.c 1358						SCPIError = ExecErr;
	SYMB	LINE, 1358
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 1359				}
; rs232cmd.c 1360			}
; rs232cmd.c 1361		}
; rs232cmd.c 1362	}
	SYMB	LINE, 1362
_104:
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1363	
; rs232cmd.c 1364	/**************************************************************************/
; rs232cmd.c 1365	/* SystemError																								 RS232CMD.C */
; rs232cmd.c 1366	/*																																				*/
; rs232cmd.c 1367	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 1368	/* Revised:		000401				     																					*/
; rs232cmd.c 1369	/*																																				*/
; rs232cmd.c 1370	/* Function:	Write the next entry in the error queue (FIFO) to RS232 		*/
; rs232cmd.c 1371	/* Remarks:		No parameters, Query only																		*/
; rs232cmd.c 1372	/* Returns:		-																														*/
; rs232cmd.c 1373	/* Updates:		-																														*/
; rs232cmd.c 1374	/**************************************************************************/
; rs232cmd.c 1375	void SystemError( void)
; rs232cmd.c 1376	{
	ALIGN	1
	SYMB	LINE, 1376
	PUBLIC	_SystemError
_SystemError:
	SYMB	TYPE, 546, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemError", _SystemError, #546, 0, 0, 48
	SYMB	ALAB, _SystemError, #546
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#0CH
	SYMB	SOFF, 16
	SYMB	IDEN, "i", -1, #16, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
	SYMB	IDEN, "ptr", -1, #491, 130, 5
	SYMB	LTIM, "ptr", -1, 0, 69
	SYMB	TYPE, 547, 'Z', #2, 11
	SYMB	IDEN, "buf", -16, #547, 130, 5
; rs232cmd.c 1377		int i;
; rs232cmd.c 1378		code char *ptr;
; rs232cmd.c 1379		char buf[12];
; rs232cmd.c 1380	
; rs232cmd.c 1381		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1381
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_119
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_119
; rs232cmd.c 1382		{
; rs232cmd.c 1383			if ( CmdRequest)
	SYMB	LINE, 1383
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_114
; rs232cmd.c 1384			{
; rs232cmd.c 1385				if ( ParCnt > 0)
	SYMB	LINE, 1385
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#00H
	BL	_111
; rs232cmd.c 1386					SCPIError = ParNotAllowed;
	SYMB	LINE, 1386
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_119
_111:
; rs232cmd.c 1387				else
; rs232cmd.c 1388				{
; rs232cmd.c 1389					if (( i = ReadErrorEventQueue()) >= 0)
	SYMB	LINE, 1389
	CALL	_ReadErrorEventQueue
	MOV.W	R4,R0
	MOV.W	R1,R0
	CMP.W	R1,#00H
	BLT	_119
; rs232cmd.c 1390					{
; rs232cmd.c 1391						sprintf( buf, "%d,\"", ErrorTxt_Array[i].ErrorNo);
	SYMB	LINE, 1391
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	MOV.W	R0,R7
	MULU.W	R4,#06H
	MOV.W	R2,R4
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _ErrorTxt_Array )
	MOV.W	R0,#SOF( _ErrorTxt_Array )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	SYMB	SOFF, 18
	MOV.W	R1,#SEG( _109 )
	MOV.W	R0,#SOF( _109 )
	PUSH.W	R0, R1
	SYMB	SOFF, 22
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+6
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 16
; rs232cmd.c 1392						rs232puts( buf);
	SYMB	LINE, 1392
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	MOV.W	R0,R7
	CALL	_rs232puts
; rs232cmd.c 1393	
; rs232cmd.c 1394						ptr = ErrorTxt_Array[i].ErrorTxt;
	SYMB	LINE, 1394
	MOV.W	R2,R4
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _ErrorTxt_Array+2 )
	MOV.W	R0,#SOF( _ErrorTxt_Array+2 )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_122
	ADDS.B	CS,#01H
_122:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "ptr", 19, 0, 205
; rs232cmd.c 1395	
; rs232cmd.c 1396						while ( *ptr)
	SYMB	LINE, 1396
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_113
_112:
; rs232cmd.c 1397							rs232putchar( *ptr++);
	SYMB	LINE, 1397
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "ptr", 19, 0, 77
	SYMB	LTIM, "ptr", 19, 0, 205
	SYMB	LINE, 1396
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_112
	SYMB	LINE, 1397
_113:
; rs232cmd.c 1398	
; rs232cmd.c 1399						 rs232puts( "\"\n");
	SYMB	LINE, 1399
	MOV.W	R1,#SEG( _110 )
	MOV.W	R0,#SOF( _110 )
	CALL	_rs232puts
; rs232cmd.c 1400					}
; rs232cmd.c 1401				}
; rs232cmd.c 1402			}
	SYMB	LINE, 1402
	BR	_119
_114:
; rs232cmd.c 1403			else
; rs232cmd.c 1404				SCPIError = SyntaxErr;
	SYMB	LINE, 1404
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1405		}
	SYMB	LINE, 1405
_119:
; rs232cmd.c 1406	}
	SYMB	LINE, 1406
	ADD.W	R7,#0CH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "ptr", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 1407	
; rs232cmd.c 1408	/**************************************************************************/
; rs232cmd.c 1409	/* SystemVersion																							 RS232CMD.C */
; rs232cmd.c 1410	/*																																				*/
; rs232cmd.c 1411	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 1412	/* Revised:		000401				     																					*/
; rs232cmd.c 1413	/*																																				*/
; rs232cmd.c 1414	/* Function:	Write the SCPI version to RS232															*/
; rs232cmd.c 1415	/* Remarks:		No parameter, Query only																		*/
; rs232cmd.c 1416	/* Returns:		-																														*/
; rs232cmd.c 1417	/* Updates:		-																														*/
; rs232cmd.c 1418	/**************************************************************************/
; rs232cmd.c 1419	void SystemVersion( void)
; rs232cmd.c 1420	{
	ALIGN	1
	SYMB	LINE, 1420
	PUBLIC	_SystemVersion
_SystemVersion:
	SYMB	TYPE, 549, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemVersion", _SystemVersion, #549, 0, 0, 48
	SYMB	ALAB, _SystemVersion, #549
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 1421		char code *str;
; rs232cmd.c 1422	
; rs232cmd.c 1423		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1423
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_130
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_130
; rs232cmd.c 1424		{
; rs232cmd.c 1425			if ( CmdRequest)
	SYMB	LINE, 1425
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_126
; rs232cmd.c 1426			{
; rs232cmd.c 1427				if ( ParCnt)
	SYMB	LINE, 1427
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_123
; rs232cmd.c 1428					SCPIError = ParNotAllowed;
	SYMB	LINE, 1428
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_130
_123:
; rs232cmd.c 1429				else
; rs232cmd.c 1430				{
; rs232cmd.c 1431					str = SystemVersionTxt;
	SYMB	LINE, 1431
	MOV.W	R5,#SEG( _SystemVersionTxt )
	MOV.W	R4,#SOF( _SystemVersionTxt )
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 1432	
; rs232cmd.c 1433					while ( *str)
	SYMB	LINE, 1433
	MOV.B	CS,#SEG( _SystemVersionTxt )
	MOV.W	R0,#SOF( _SystemVersionTxt )
	MOVC.B	R1L,[R0+]
	BEQ	_125
_124:
; rs232cmd.c 1434						rs232putchar( *str++);
	SYMB	LINE, 1434
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 1433
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_124
	SYMB	LINE, 1434
_125:
; rs232cmd.c 1435	
; rs232cmd.c 1436					rs232putchar( '\n');
	SYMB	LINE, 1436
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1437				}
; rs232cmd.c 1438			}
	SYMB	LINE, 1438
	BR	_130
_126:
; rs232cmd.c 1439			else
; rs232cmd.c 1440				SCPIError = SyntaxErr;
	SYMB	LINE, 1440
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1441		}
	SYMB	LINE, 1441
_130:
; rs232cmd.c 1442	}
	SYMB	LINE, 1442
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 1443	
; rs232cmd.c 1444	/**************************************************************************/
; rs232cmd.c 1445	/* SystemPresetName																						 RS232CMD.C */
; rs232cmd.c 1446	/*																																				*/
; rs232cmd.c 1447	/* Author:		Kim Engedahl, DEV, 970206	    															*/
; rs232cmd.c 1448	/* Revised:		000503					     																				*/
; rs232cmd.c 1449	/*																																				*/								
; rs232cmd.c 1450	/* Function:	Name a specific preset number.															*/
; rs232cmd.c 1451	/* Remarks:		the scanf function can not used MaxPresetNameLength, i.e.		*/
; rs232cmd.c 1452	/*						this define should be inserted as a value. The value is			*/
; rs232cmd.c 1453	/*						defined	in INSTRU.H								 													*/
; rs232cmd.c 1454	/* Returns:		-																														*/
; rs232cmd.c 1455	/* Updates:		-																														*/
; rs232cmd.c 1456	/**************************************************************************/
; rs232cmd.c 1457	void SystemPresetName( void)
; rs232cmd.c 1458	{
	ALIGN	1
	SYMB	LINE, 1458
	SYMB	TYPE, 550, 'Z', #2, 16
	SYMB	TYPE, 552, 'Z', #2, 6
	SYMB	TYPE, 554, 'Z', #457, 2
	SYMB	TYPE, 556, 'Z', #461, 1
	SYMB	TYPE, 558, 'S', 100,\
		 "Name", #550, 0,\
		 "Author", #552, 17,\
		 "Date", #7, 24,\
		 "GenlockSetup", #455, 28,\
		 "BBSetup", #554, 34,\
		 "CBSetup", #459, 58,\
		 "AudioOutput", #16, 70,\
		 "AudioSetup", #556, 72
	SYMB	TYPE, 559, "PresetObject", 'T', #558
	PUBLIC	_SystemPresetName
_SystemPresetName:
	SYMB	TYPE, 560, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetName", _SystemPresetName, #560, 0, 0, 48
	SYMB	ALAB, _SystemPresetName, #560
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#078H
	SYMB	SOFF, 124
	SYMB	IDEN, "Reg", -124, #16, 130, 5
	SYMB	IDEN, "Name", -122, #550, 130, 5
	SYMB	IDEN, "Preset", -104, #559, 130, 5
; rs232cmd.c 1459		int Reg;
; rs232cmd.c 1460		char Name[MaxPresetNameLength];
; rs232cmd.c 1461		PresetObject Preset;
; rs232cmd.c 1462	
; rs232cmd.c 1463		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1463
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_149
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_149
; rs232cmd.c 1464		{
; rs232cmd.c 1465			if ( CmdRequest)
	SYMB	LINE, 1465
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_136
; rs232cmd.c 1466			{
; rs232cmd.c 1467				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1467
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_132
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 128
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 132
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 124
	CMP.W	R0,#01H
	BEQ	_133
_132:
; rs232cmd.c 1468					SCPIError = SyntaxErr;
	SYMB	LINE, 1468
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_149
_133:
; rs232cmd.c 1469				else
; rs232cmd.c 1470				{
; rs232cmd.c 1471					if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1471
	MOV.W	R0,[R7]
	BEQ	_134
	CMP.W	[R7],#04H
	BLE	_135
_134:
; rs232cmd.c 1472						SCPIError = DataOutOfRange;
	SYMB	LINE, 1472
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_149
_135:
; rs232cmd.c 1473					else
; rs232cmd.c 1474					{
; rs232cmd.c 1475						NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1475
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+20
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_NV_Recall
; rs232cmd.c 1476	
; rs232cmd.c 1477						rs232puts( Preset.Name);
	SYMB	LINE, 1477
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 1478						rs232putchar( '\n');
	SYMB	LINE, 1478
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1479					}
; rs232cmd.c 1480				}
; rs232cmd.c 1481			}
	SYMB	LINE, 1481
	BR	_149
_136:
; rs232cmd.c 1482			else
; rs232cmd.c 1483			{
; rs232cmd.c 1484																	// The second parameter, the string, in scanf
; rs232cmd.c 1485																	// should be limited to the definition of
; rs232cmd.c 1486																	// MaxPresetNameLength
; rs232cmd.c 1487				if (( ParCnt != 2) || (( sscanf( Cmd, "%d,%17s", &Reg, Name)) != 2))
	SYMB	LINE, 1487
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_137
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 128
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+4
	PUSH.W	R2, R3
	SYMB	SOFF, 132
	MOV.W	R3,#SEG( _131 )
	MOV.W	R2,#SOF( _131 )
	PUSH.W	R2, R3
	SYMB	SOFF, 136
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 124
	CMP.W	R0,#02H
	BEQ	_138
_137:
; rs232cmd.c 1488					SCPIError = SyntaxErr;
	SYMB	LINE, 1488
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_149
_138:
	MOV.W	R1,R5
	MOV.W	R0,R4
; rs232cmd.c 1489				else
; rs232cmd.c 1490				{
; rs232cmd.c 1491					if ( strlen( Name) == MaxPresetNameLength)
	SYMB	LINE, 1491
	CALL	_strlen
	CMP.W	R0,#011H
	BNE	_139
; rs232cmd.c 1492						SCPIError = SyntaxErr;
	SYMB	LINE, 1492
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_149
_139:
; rs232cmd.c 1493					else
; rs232cmd.c 1494					{
; rs232cmd.c 1495						if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1495
	MOV.W	R0,[R7]
	BEQ	_140
	CMP.W	[R7],#04H
	BLE	_141
_140:
; rs232cmd.c 1496							SCPIError = DataOutOfRange;
	SYMB	LINE, 1496
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_149
_141:
; rs232cmd.c 1497						else
; rs232cmd.c 1498						{
; rs232cmd.c 1499							NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1499
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+20
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_NV_Recall
	MOV.W	R1,R5
	MOV.W	R0,R4
; rs232cmd.c 1500							strcpy( Preset.Name, Name);
	SYMB	LINE, 1500
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+2
	CALL	_strcpy
; rs232cmd.c 1501							NV_Store( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1501
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#064H
	CALL	_NV_Store
; rs232cmd.c 1502						}
; rs232cmd.c 1503					}
; rs232cmd.c 1504				}
; rs232cmd.c 1505			}
; rs232cmd.c 1506		}
	SYMB	LINE, 1506
_149:
; rs232cmd.c 1507	}
	SYMB	LINE, 1507
	ADD.W	R7,#078H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1508	
; rs232cmd.c 1509	/**************************************************************************/
; rs232cmd.c 1510	/* SystemPresetAuthor																					 RS232CMD.C */
; rs232cmd.c 1511	/*																																				*/
; rs232cmd.c 1512	/* Author:		Kim Engedahl, DEV, 000502	    															*/
; rs232cmd.c 1513	/* Revised:		000503					     																				*/
; rs232cmd.c 1514	/*																																				*/								
; rs232cmd.c 1515	/* Function:	Name the author of a specific preset number. 								*/
; rs232cmd.c 1516	/* Remarks:		the scanf function can not used MaxPresetAuthorLength, i.e.	*/
; rs232cmd.c 1517	/*						this define should be inserted as a value. The value is			*/
; rs232cmd.c 1518	/*						defined	in INSTRU.H								 													*/
; rs232cmd.c 1519	/* Returns:		-																														*/
; rs232cmd.c 1520	/* Updates:		-																														*/
; rs232cmd.c 1521	/**************************************************************************/
; rs232cmd.c 1522	void SystemPresetAuthor( void)
; rs232cmd.c 1523	{
	ALIGN	1
	SYMB	LINE, 1523
	PUBLIC	_SystemPresetAuthor
_SystemPresetAuthor:
	SYMB	TYPE, 561, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetAuthor", _SystemPresetAuthor, #561, 0, 0, 48
	SYMB	ALAB, _SystemPresetAuthor, #561
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#06EH
	SYMB	SOFF, 114
	SYMB	IDEN, "Reg", -114, #16, 130, 5
	SYMB	IDEN, "Author", -112, #552, 130, 5
	SYMB	IDEN, "Preset", -104, #559, 130, 5
; rs232cmd.c 1524		int Reg;
; rs232cmd.c 1525		char Author[MaxPresetAuthorLength];
; rs232cmd.c 1526		PresetObject Preset;
; rs232cmd.c 1527	
; rs232cmd.c 1528		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1528
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_175
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_175
; rs232cmd.c 1529		{
; rs232cmd.c 1530			if ( CmdRequest)
	SYMB	LINE, 1530
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_162
; rs232cmd.c 1531			{
; rs232cmd.c 1532				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1532
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_158
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 118
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 122
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 114
	CMP.W	R0,#01H
	BEQ	_159
_158:
; rs232cmd.c 1533					SCPIError = SyntaxErr;
	SYMB	LINE, 1533
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_175
_159:
; rs232cmd.c 1534				else
; rs232cmd.c 1535				{
; rs232cmd.c 1536					if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1536
	MOV.W	R0,[R7]
	BEQ	_160
	CMP.W	[R7],#04H
	BLE	_161
_160:
; rs232cmd.c 1537						SCPIError = DataOutOfRange;
	SYMB	LINE, 1537
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_175
_161:
; rs232cmd.c 1538					else
; rs232cmd.c 1539					{
; rs232cmd.c 1540						NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1540
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+10
	MOV.W	R2,[R7]
	ASL.W	R2,#01H
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	CALL	_NV_Recall
; rs232cmd.c 1541	
; rs232cmd.c 1542						rs232puts( Preset.Author);
	SYMB	LINE, 1542
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+27
	CALL	_rs232puts
; rs232cmd.c 1543						rs232putchar( '\n');
	SYMB	LINE, 1543
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1544					}
; rs232cmd.c 1545				}
; rs232cmd.c 1546			}
	SYMB	LINE, 1546
	BR	_175
_162:
; rs232cmd.c 1547			else
; rs232cmd.c 1548			{
; rs232cmd.c 1549																	// The second parameter, the string, in scanf
; rs232cmd.c 1550																	// should be limited to the definition of
; rs232cmd.c 1551																	// MaxPresetAuthorLength
; rs232cmd.c 1552				if (( ParCnt != 2) || (( sscanf( Cmd, "%d,%7s", &Reg, Author)) != 2))
	SYMB	LINE, 1552
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_163
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 118
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+4
	PUSH.W	R2, R3
	SYMB	SOFF, 122
	MOV.W	R3,#SEG( _157 )
	MOV.W	R2,#SOF( _157 )
	PUSH.W	R2, R3
	SYMB	SOFF, 126
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 114
	CMP.W	R0,#02H
	BEQ	_164
_163:
; rs232cmd.c 1553					SCPIError = SyntaxErr;
	SYMB	LINE, 1553
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_175
_164:
	MOV.W	R1,R5
	MOV.W	R0,R4
; rs232cmd.c 1554				else
; rs232cmd.c 1555				{
; rs232cmd.c 1556					if ( strlen( Author) == MaxPresetAuthorLength)
	SYMB	LINE, 1556
	CALL	_strlen
	CMP.W	R0,#07H
	BNE	_165
; rs232cmd.c 1557						SCPIError = SyntaxErr;
	SYMB	LINE, 1557
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_175
_165:
; rs232cmd.c 1558					else
; rs232cmd.c 1559					{
; rs232cmd.c 1560						if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1560
	MOV.W	R0,[R7]
	BEQ	_166
	CMP.W	[R7],#04H
	BLE	_167
_166:
; rs232cmd.c 1561							SCPIError = DataOutOfRange;
	SYMB	LINE, 1561
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_175
_167:
; rs232cmd.c 1562						else
; rs232cmd.c 1563						{
; rs232cmd.c 1564							NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1564
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+10
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_NV_Recall
; rs232cmd.c 1565							strcpy( Preset.Author, Author);
	SYMB	LINE, 1565
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+27
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+2
	CALL	_strcpy
; rs232cmd.c 1566							NV_Store( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1566
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#064H
	CALL	_NV_Store
; rs232cmd.c 1567						}
; rs232cmd.c 1568					}
; rs232cmd.c 1569				}
; rs232cmd.c 1570			}
; rs232cmd.c 1571		}
	SYMB	LINE, 1571
_175:
; rs232cmd.c 1572	}
	SYMB	LINE, 1572
	ADD.W	R7,#06EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1573	
; rs232cmd.c 1574	/**************************************************************************/
; rs232cmd.c 1575	/* SystemPresetDate																						 RS232CMD.C */
; rs232cmd.c 1576	/*																																				*/
; rs232cmd.c 1577	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 1578	/* Revised:		001016					     																				*/
; rs232cmd.c 1579	/*																																				*/								
; rs232cmd.c 1580	/* Function:	-																														*/
; rs232cmd.c 1581	/* Remarks:		-																														*/
; rs232cmd.c 1582	/* Returns:		-																														*/
; rs232cmd.c 1583	/* Updates:		-																														*/
; rs232cmd.c 1584	/**************************************************************************/
; rs232cmd.c 1585	void SystemPresetDate( void)
; rs232cmd.c 1586	{
	ALIGN	1
	SYMB	LINE, 1586
	PUBLIC	_SystemPresetDate
_SystemPresetDate:
	SYMB	TYPE, 562, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetDate", _SystemPresetDate, #562, 0, 0, 48
	SYMB	ALAB, _SystemPresetDate, #562
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#080H
	SYMB	SOFF, 132
	SYMB	IDEN, "Reg", -132, #16, 130, 5
	SYMB	IDEN, "Preset", -130, #559, 130, 5
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	TYPE, 563, 'Z', #2, 19
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 1587		int Reg;
; rs232cmd.c 1588		PresetObject Preset;
; rs232cmd.c 1589		UI year, month, day;
; rs232cmd.c 1590		char buffer[20];
; rs232cmd.c 1591	
; rs232cmd.c 1592		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1592
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_202
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_202
; rs232cmd.c 1593		{
; rs232cmd.c 1594			if ( CmdRequest)
	SYMB	LINE, 1594
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_189
; rs232cmd.c 1595			{
; rs232cmd.c 1596				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1596
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_185
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 136
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 140
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 132
	CMP.W	R0,#01H
	BEQ	_186
_185:
; rs232cmd.c 1597					SCPIError = SyntaxErr;
	SYMB	LINE, 1597
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_202
_186:
; rs232cmd.c 1598				else
; rs232cmd.c 1599				{
; rs232cmd.c 1600					if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1600
	MOV.W	R0,[R7]
	BEQ	_187
	CMP.W	[R7],#04H
	BLE	_188
_187:
; rs232cmd.c 1601						SCPIError = DataOutOfRange;
	SYMB	LINE, 1601
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_202
_188:
; rs232cmd.c 1602					else
; rs232cmd.c 1603					{
; rs232cmd.c 1604						NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1604
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+2
	MOV.W	R2,[R7]
	ASL.W	R2,#01H
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	CALL	_NV_Recall
; rs232cmd.c 1605	
; rs232cmd.c 1606						day = Preset.Date % 100;
	SYMB	LINE, 1606
	MOV.W	R1,[R7+28]
	MOV.W	R0,[R7+26]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	[R7+28],R1
	MOV.W	[R7+26],R0
	FCALL	__UMODL
	MOV.W	[R7+106],R0
; rs232cmd.c 1607						month = ( Preset.Date / 100) % 100;
	SYMB	LINE, 1607
	MOV.W	R1,[R7+28]
	MOV.W	R0,[R7+26]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+104],R0
; rs232cmd.c 1608						year = ( Preset.Date / 10000);
	SYMB	LINE, 1608
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.W	R1,[R7+28]
	MOV.W	R0,[R7+26]
	FCALL	__UDIVL
	MOV.W	[R7+102],R0
; rs232cmd.c 1609	
; rs232cmd.c 1610						sprintf( buffer, "%d,%d,%d\n", year, month, day);
	SYMB	LINE, 1610
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+108
	MOV.W	R0,[R7+106]
	PUSH.W	R0
	SYMB	SOFF, 134
	MOV.W	R0,[R7+106]
	PUSH.W	R0
	SYMB	SOFF, 136
	MOV.W	R0,[R7+106]
	PUSH.W	R0
	SYMB	SOFF, 138
	MOV.W	R1,#SEG( _183 )
	MOV.W	R0,#SOF( _183 )
	PUSH.W	R0, R1
	SYMB	SOFF, 142
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 132
; rs232cmd.c 1611	
; rs232cmd.c 1612						rs232puts( buffer);
	SYMB	LINE, 1612
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 1613					}
; rs232cmd.c 1614				}
; rs232cmd.c 1615			}
	SYMB	LINE, 1615
	BR	_202
_189:
; rs232cmd.c 1616			else
; rs232cmd.c 1617			{
; rs232cmd.c 1618				if (( ParCnt != 4) || (( sscanf( Cmd, "%d,%d,%d,%d", &Reg, &year, &month, &day)) != 4))
	SYMB	LINE, 1618
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#04H
	BNE	_190
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+102
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+104
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+106
	PUSH.W	R0, R1
	SYMB	SOFF, 136
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+108
	PUSH.W	R0, R1
	SYMB	SOFF, 140
	PUSH.W	R4, R5
	SYMB	SOFF, 144
	PUSH.W	R2, R3
	SYMB	SOFF, 148
	MOV.W	R3,#SEG( _184 )
	MOV.W	R2,#SOF( _184 )
	PUSH.W	R2, R3
	SYMB	SOFF, 152
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#014H
	SYMB	SOFF, 132
	CMP.W	R0,#04H
	BEQ	_191
_190:
; rs232cmd.c 1619					SCPIError = SyntaxErr;
	SYMB	LINE, 1619
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_202
_191:
; rs232cmd.c 1620				else
; rs232cmd.c 1621				{
; rs232cmd.c 1622					if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 1622
	MOV.W	R0,[R7+102]
	MOV.W	R1,[R7+104]
	MOV.W	R2,[R7+106]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_192
; rs232cmd.c 1623						SCPIError = ExecErr;
	SYMB	LINE, 1623
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_202
_192:
; rs232cmd.c 1624					else
; rs232cmd.c 1625					{
; rs232cmd.c 1626						if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1626
	MOV.W	R0,[R7]
	BEQ	_193
	CMP.W	[R7],#04H
	BLE	_194
_193:
; rs232cmd.c 1627							SCPIError = DataOutOfRange;
	SYMB	LINE, 1627
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_202
_194:
; rs232cmd.c 1628						else
; rs232cmd.c 1629						{
; rs232cmd.c 1630							NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1630
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_NV_Recall
; rs232cmd.c 1631							Preset.Date = day + 100*month + 10000*year;
	SYMB	LINE, 1631
	MOV.W	R0,[R7+104]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+106]
	MOV.W	R2,[R7+102]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.W	[R7+28],R1
	MOV.W	[R7+26],R0
; rs232cmd.c 1632							NV_Store( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1632
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#064H
	CALL	_NV_Store
; rs232cmd.c 1633						}
; rs232cmd.c 1634					}				
; rs232cmd.c 1635				}
; rs232cmd.c 1636			}
; rs232cmd.c 1637		}
	SYMB	LINE, 1637
_202:
; rs232cmd.c 1638	}
	SYMB	LINE, 1638
	ADD.W	R7,#080H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1639	
; rs232cmd.c 1640	/**************************************************************************/
; rs232cmd.c 1641	/* SystemPresetDownload																				 RS232CMD.C */
; rs232cmd.c 1642	/*																																				*/
; rs232cmd.c 1643	/* Author:		Kim Engedahl, DEV, 000413	    															*/
; rs232cmd.c 1644	/* Revised:		000413					     																				*/
; rs232cmd.c 1645	/*																																				*/								
; rs232cmd.c 1646	/* Function:	Download a setup to a specific preset withouth disturbing		*/
; rs232cmd.c 1647	/*						the setting/function of the PT5201.										 			*/
; rs232cmd.c 1648	/* Remarks:		--																													*/
; rs232cmd.c 1649	/* Returns:		-																														*/
; rs232cmd.c 1650	/* Updates:		-																														*/
; rs232cmd.c 1651	/**************************************************************************/
; rs232cmd.c 1652	void SystemPresetDownload( void)
; rs232cmd.c 1653	{
	ALIGN	1
	SYMB	LINE, 1653
	PUBLIC	_SystemPresetDownload
_SystemPresetDownload:
	SYMB	TYPE, 565, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetDownload", _SystemPresetDownload, #565, 0, 0, 0
	SYMB	ALAB, _SystemPresetDownload, #565
; rs232cmd.c 1654		;
; rs232cmd.c 1655	}
	SYMB	LINE, 1655
	RET
	SYMB	EFUN
; rs232cmd.c 1656	
; rs232cmd.c 1657	/**************************************************************************/
; rs232cmd.c 1658	/* SystemPresetUpload																					 RS232CMD.C */
; rs232cmd.c 1659	/*																																				*/
; rs232cmd.c 1660	/* Author:		Kim Engedahl, DEV, 000413	    															*/
; rs232cmd.c 1661	/* Revised:		000413					     																				*/
; rs232cmd.c 1662	/*																																				*/								
; rs232cmd.c 1663	/* Function:	Upload a setup from a specific preset withouth disturbing		*/
; rs232cmd.c 1664	/*						the setting/function of the PT5201.											 		*/
; rs232cmd.c 1665	/* Remarks:		--																													*/
; rs232cmd.c 1666	/* Returns:		-																														*/
; rs232cmd.c 1667	/* Updates:		-																														*/
; rs232cmd.c 1668	/**************************************************************************/
; rs232cmd.c 1669	void SystemPresetUpload( void)
; rs232cmd.c 1670	{
	ALIGN	1
	SYMB	LINE, 1670
	PUBLIC	_SystemPresetUpload
_SystemPresetUpload:
	SYMB	TYPE, 566, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetUpload", _SystemPresetUpload, #566, 0, 0, 0
	SYMB	ALAB, _SystemPresetUpload, #566
; rs232cmd.c 1671		;
; rs232cmd.c 1672	}
	SYMB	LINE, 1672
	RET
	SYMB	EFUN
; rs232cmd.c 1673	
; rs232cmd.c 1674	/**************************************************************************/
; rs232cmd.c 1675	/* StatusOperEvent																						 RS232CMD.C */
; rs232cmd.c 1676	/*																																				*/
; rs232cmd.c 1677	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1678	/* Revised:		000402				     																					*/
; rs232cmd.c 1679	/*																																				*/
; rs232cmd.c 1680	/* Function:	Set/read the status operation event register								*/
; rs232cmd.c 1681	/* Remarks:		Reading the event register clears it												*/
; rs232cmd.c 1682	/* Returns:		-																														*/
; rs232cmd.c 1683	/* Updates:		OperEventReg																								*/
; rs232cmd.c 1684	/**************************************************************************/
; rs232cmd.c 1685	void StatusOperEvent( void)
; rs232cmd.c 1686	{
	ALIGN	1
	SYMB	LINE, 1686
	PUBLIC	_StatusOperEvent
_StatusOperEvent:
	SYMB	TYPE, 567, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusOperEvent", _StatusOperEvent, #567, 0, 0, 0
	SYMB	ALAB, _StatusOperEvent, #567
; rs232cmd.c 1687		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1687
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_214
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_214
; rs232cmd.c 1688		{
; rs232cmd.c 1689			if ( ParCnt)
	SYMB	LINE, 1689
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_209
; rs232cmd.c 1690				SCPIError = ParNotAllowed;
	SYMB	LINE, 1690
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_209:
; rs232cmd.c 1691			else
; rs232cmd.c 1692			{
; rs232cmd.c 1693				if ( CmdRequest) {
	SYMB	LINE, 1693
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_210
; rs232cmd.c 1694					rs232printf( 12, "%d\n", OperEventReg);
	SYMB	LINE, 1694
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _OperEventReg )
	MOV.W	R1,#SOF( _OperEventReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
; rs232cmd.c 1695	
; rs232cmd.c 1696					OperEventReg = 0;
	SYMB	LINE, 1696
	MOV.B	ES,#SEG( _OperEventReg )
	MOV.W	R0,#SOF( _OperEventReg )
	MOV.W	[R0],#00H
; rs232cmd.c 1697				}
	SYMB	LINE, 1697
	RET
_210:
; rs232cmd.c 1698				else
; rs232cmd.c 1699					SCPIError = SyntaxErr;
	SYMB	LINE, 1699
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1700			}
; rs232cmd.c 1701		}
	SYMB	LINE, 1701
_214:
; rs232cmd.c 1702	}
	SYMB	LINE, 1702
	RET
	SYMB	EFUN
; rs232cmd.c 1703	
; rs232cmd.c 1704	/**************************************************************************/
; rs232cmd.c 1705	/* StatusOperCondition																				 RS232CMD.C */
; rs232cmd.c 1706	/*																																				*/
; rs232cmd.c 1707	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1708	/* Revised:		000413				     																					*/
; rs232cmd.c 1709	/*																																				*/
; rs232cmd.c 1710	/* Function:	Read the status questionable condition register							*/
; rs232cmd.c 1711	/* Remarks:		No parameters																								*/
; rs232cmd.c 1712	/* Returns:																																*/
; rs232cmd.c 1713	/* Updates:																																*/
; rs232cmd.c 1714	/**************************************************************************/
; rs232cmd.c 1715	void StatusOperCondition( void)
; rs232cmd.c 1716	{
	ALIGN	1
	SYMB	LINE, 1716
	PUBLIC	_StatusOperCondition
_StatusOperCondition:
	SYMB	TYPE, 568, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusOperCondition", _StatusOperCondition, #568, 0, 0, 0
	SYMB	ALAB, _StatusOperCondition, #568
; rs232cmd.c 1717		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1717
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_220
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_220
; rs232cmd.c 1718		{
; rs232cmd.c 1719			if ( ParCnt)
	SYMB	LINE, 1719
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_215
; rs232cmd.c 1720				SCPIError = ParNotAllowed;
	SYMB	LINE, 1720
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_215:
; rs232cmd.c 1721			else
; rs232cmd.c 1722			{
; rs232cmd.c 1723				if ( CmdRequest)
	SYMB	LINE, 1723
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_216
; rs232cmd.c 1724					rs232printf( 12, "%d\n", OperConditionReg);
	SYMB	LINE, 1724
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _OperConditionReg )
	MOV.W	R1,#SOF( _OperConditionReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
	RET
_216:
; rs232cmd.c 1725				else
; rs232cmd.c 1726					SCPIError = SyntaxErr;
	SYMB	LINE, 1726
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1727			}
; rs232cmd.c 1728		}
	SYMB	LINE, 1728
_220:
; rs232cmd.c 1729	}
	SYMB	LINE, 1729
	RET
	SYMB	EFUN
; rs232cmd.c 1730	
; rs232cmd.c 1731	/**************************************************************************/
; rs232cmd.c 1732	/* StatusOperEnable																						 RS232CMD.C */
; rs232cmd.c 1733	/*																																				*/
; rs232cmd.c 1734	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1735	/* Revised:		000413				     																					*/
; rs232cmd.c 1736	/*																																				*/
; rs232cmd.c 1737	/* Function:	Set/read the status operaion enable register								*/
; rs232cmd.c 1738	/* Remarks:		--																													*/
; rs232cmd.c 1739	/* Returns:		-																														*/
; rs232cmd.c 1740	/* Updates:		-																														*/
; rs232cmd.c 1741	/**************************************************************************/
; rs232cmd.c 1742	void StatusOperEnable( void)
; rs232cmd.c 1743	{
	ALIGN	1
	SYMB	LINE, 1743
	PUBLIC	_StatusOperEnable
_StatusOperEnable:
	SYMB	TYPE, 569, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusOperEnable", _StatusOperEnable, #569, 0, 0, 0
	SYMB	ALAB, _StatusOperEnable, #569
	ADDS.W	R7,#0CH
	SYMB	SOFF, 4
	SYMB	IDEN, "Reg", -4, #6, 130, 5
; rs232cmd.c 1744		long	Reg;
; rs232cmd.c 1745	
; rs232cmd.c 1746		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1746
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_232
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_232
; rs232cmd.c 1747		{
; rs232cmd.c 1748			if ( CmdRequest)
	SYMB	LINE, 1748
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_223
; rs232cmd.c 1749			{
; rs232cmd.c 1750				if ( ParCnt)
	SYMB	LINE, 1750
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_222
; rs232cmd.c 1751					SCPIError = ParNotAllowed;
	SYMB	LINE, 1751
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_232
_222:
; rs232cmd.c 1752				else
; rs232cmd.c 1753					rs232printf( 12, "%d\n", OperEnableReg);
	SYMB	LINE, 1753
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _OperEnableReg )
	MOV.W	R1,#SOF( _OperEnableReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 1754			}
	SYMB	LINE, 1754
	BR	_232
_223:
; rs232cmd.c 1755			else
; rs232cmd.c 1756			{
; rs232cmd.c 1757				if (( ParCnt != 1) || ( sscanf( Cmd, "%l", &Reg) != 1))
	SYMB	LINE, 1757
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_224
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _221 )
	MOV.W	R2,#SOF( _221 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	CMP.W	R0,#01H
	BEQ	_225
_224:
; rs232cmd.c 1758				{
; rs232cmd.c 1759					SCPIError = SyntaxErr;	
	SYMB	LINE, 1759
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1760					return;
	SYMB	LINE, 1760
	BR	_232
; rs232cmd.c 1761				}
	SYMB	LINE, 1761
_225:
; rs232cmd.c 1762	
; rs232cmd.c 1763				if ( Reg > 65535)
	SYMB	LINE, 1763
	CMP.W	[R7+2],#00H
	BLT	_226
	BGT	_235
	CMP.W	[R7],#0FFFFH
	BL	_226
_235:
; rs232cmd.c 1764				{
; rs232cmd.c 1765					SCPIError = DataOutOfRange;
	SYMB	LINE, 1765
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1766					return;
	SYMB	LINE, 1766
	BR	_232
; rs232cmd.c 1767				}
	SYMB	LINE, 1767
_226:
; rs232cmd.c 1768	
; rs232cmd.c 1769				OperEnableReg = Reg & 0xEFFF;
	SYMB	LINE, 1769
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	AND.W	R0,#0EFFFH
	MOV.B	ES,#SEG( _OperEnableReg )
	MOV.W	R1,#SOF( _OperEnableReg )
	MOV.W	[R1],R0
; rs232cmd.c 1770			}
; rs232cmd.c 1771		}
; rs232cmd.c 1772	}
	SYMB	LINE, 1772
_232:
	ADDS.W	R7,#04H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1773	
; rs232cmd.c 1774	/***************************************************************************/
; rs232cmd.c 1775	/* StatusQuestEvent																			 			 RS232CMD.C */
; rs232cmd.c 1776	/*																																				*/
; rs232cmd.c 1777	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1778	/* Revised:		000413				     																					*/
; rs232cmd.c 1779	/*																																				*/
; rs232cmd.c 1780	/* Function:	Set/read the status questionablen event register						*/
; rs232cmd.c 1781	/* Remarks:		Reading the event register clears it												*/
; rs232cmd.c 1782	/* Returns:		-																														*/
; rs232cmd.c 1783	/* Updates:		QuestEventReg																								*/
; rs232cmd.c 1784	/***************************************************************************/
; rs232cmd.c 1785	void StatusQuestEvent( void)
; rs232cmd.c 1786	{
	ALIGN	1
	SYMB	LINE, 1786
	PUBLIC	_StatusQuestEvent
_StatusQuestEvent:
	SYMB	TYPE, 570, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusQuestEvent", _StatusQuestEvent, #570, 0, 0, 0
	SYMB	ALAB, _StatusQuestEvent, #570
; rs232cmd.c 1787		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1787
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_241
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_241
; rs232cmd.c 1788		{
; rs232cmd.c 1789			if ( ParCnt)
	SYMB	LINE, 1789
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_236
; rs232cmd.c 1790				SCPIError = ParNotAllowed;
	SYMB	LINE, 1790
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_236:
; rs232cmd.c 1791			else
; rs232cmd.c 1792			{
; rs232cmd.c 1793				if ( CmdRequest)
	SYMB	LINE, 1793
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_237
; rs232cmd.c 1794				{
; rs232cmd.c 1795					rs232printf( 12, "%d\n", QuestEventReg);
	SYMB	LINE, 1795
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _QuestEventReg )
	MOV.W	R1,#SOF( _QuestEventReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
; rs232cmd.c 1796	
; rs232cmd.c 1797					QuestEventReg = 0;
	SYMB	LINE, 1797
	MOV.B	ES,#SEG( _QuestEventReg )
	MOV.W	R0,#SOF( _QuestEventReg )
	MOV.W	[R0],#00H
; rs232cmd.c 1798				}
	SYMB	LINE, 1798
	RET
_237:
; rs232cmd.c 1799				else
; rs232cmd.c 1800					SCPIError = SyntaxErr;
	SYMB	LINE, 1800
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1801			}
; rs232cmd.c 1802		}
	SYMB	LINE, 1802
_241:
; rs232cmd.c 1803	}
	SYMB	LINE, 1803
	RET
	SYMB	EFUN
; rs232cmd.c 1804	
; rs232cmd.c 1805	/**************************************************************************/
; rs232cmd.c 1806	/* StatusQuestCondition																		 		 RS232CMD.C */
; rs232cmd.c 1807	/*																																				*/
; rs232cmd.c 1808	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1809	/* Revised:		000413				     																					*/
; rs232cmd.c 1810	/*																																				*/
; rs232cmd.c 1811	/* Function:	Read the status operation condition register								*/
; rs232cmd.c 1812	/* Remarks:		No parameters																								*/
; rs232cmd.c 1813	/* Returns:		-																														*/
; rs232cmd.c 1814	/* Updates:		-																														*/
; rs232cmd.c 1815	/**************************************************************************/
; rs232cmd.c 1816	void StatusQuestCondition( void)
; rs232cmd.c 1817	{
	ALIGN	1
	SYMB	LINE, 1817
	PUBLIC	_StatusQuestCondition
_StatusQuestCondition:
	SYMB	TYPE, 571, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusQuestCondition", _StatusQuestCondition, #571, 0, 0, 0
	SYMB	ALAB, _StatusQuestCondition, #571
; rs232cmd.c 1818		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1818
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_247
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_247
; rs232cmd.c 1819		{
; rs232cmd.c 1820			if ( ParCnt)
	SYMB	LINE, 1820
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_242
; rs232cmd.c 1821				SCPIError = ParNotAllowed;
	SYMB	LINE, 1821
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_242:
; rs232cmd.c 1822			else
; rs232cmd.c 1823			{
; rs232cmd.c 1824				if ( CmdRequest)
	SYMB	LINE, 1824
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_243
; rs232cmd.c 1825				rs232printf( 12, "%d\n", QuestConditionReg);
	SYMB	LINE, 1825
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _QuestConditionReg )
	MOV.W	R1,#SOF( _QuestConditionReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
	RET
_243:
; rs232cmd.c 1826				else
; rs232cmd.c 1827					SCPIError = SyntaxErr;
	SYMB	LINE, 1827
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1828			}
; rs232cmd.c 1829		}
	SYMB	LINE, 1829
_247:
; rs232cmd.c 1830	}
	SYMB	LINE, 1830
	RET
	SYMB	EFUN
; rs232cmd.c 1831	
; rs232cmd.c 1832	/**************************************************************************/
; rs232cmd.c 1833	/* StatusQuestEnable																					 RS232CMD.C */
; rs232cmd.c 1834	/*																																				*/
; rs232cmd.c 1835	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1836	/* Revised:		000413				     																					*/
; rs232cmd.c 1837	/*																																				*/
; rs232cmd.c 1838	/* Function:	Set/read the status questionable enable register						*/
; rs232cmd.c 1839	/* Remarks:		--																													*/
; rs232cmd.c 1840	/* Returns:																																*/
; rs232cmd.c 1841	/* Updates:																																*/
; rs232cmd.c 1842	/**************************************************************************/
; rs232cmd.c 1843	void StatusQuestEnable( void)
; rs232cmd.c 1844	{
	ALIGN	1
	SYMB	LINE, 1844
	PUBLIC	_StatusQuestEnable
_StatusQuestEnable:
	SYMB	TYPE, 572, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusQuestEnable", _StatusQuestEnable, #572, 0, 0, 0
	SYMB	ALAB, _StatusQuestEnable, #572
	ADDS.W	R7,#0CH
	SYMB	SOFF, 4
	SYMB	IDEN, "Reg", -4, #6, 130, 5
; rs232cmd.c 1845		long	Reg;
; rs232cmd.c 1846	
; rs232cmd.c 1847		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1847
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_258
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_258
; rs232cmd.c 1848		{
; rs232cmd.c 1849			if ( CmdRequest)
	SYMB	LINE, 1849
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_249
; rs232cmd.c 1850			{
; rs232cmd.c 1851				if ( ParCnt)
	SYMB	LINE, 1851
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_248
; rs232cmd.c 1852					SCPIError = ParNotAllowed;
	SYMB	LINE, 1852
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_258
_248:
; rs232cmd.c 1853				else
; rs232cmd.c 1854					rs232printf( 12, "%d\n", QuestEnableReg);
	SYMB	LINE, 1854
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _QuestEnableReg )
	MOV.W	R1,#SOF( _QuestEnableReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 1855			}
	SYMB	LINE, 1855
	BR	_258
_249:
; rs232cmd.c 1856			else
; rs232cmd.c 1857			{
; rs232cmd.c 1858				if (( ParCnt != 1) || ( sscanf( Cmd, "%l", &Reg) != 1))
	SYMB	LINE, 1858
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_250
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _221 )
	MOV.W	R2,#SOF( _221 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	CMP.W	R0,#01H
	BEQ	_251
_250:
; rs232cmd.c 1859				{
; rs232cmd.c 1860					SCPIError = SyntaxErr;	
	SYMB	LINE, 1860
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1861					return;
	SYMB	LINE, 1861
	BR	_258
; rs232cmd.c 1862				}
	SYMB	LINE, 1862
_251:
; rs232cmd.c 1863	
; rs232cmd.c 1864				if ( Reg > 65535)
	SYMB	LINE, 1864
	CMP.W	[R7+2],#00H
	BLT	_252
	BGT	_261
	CMP.W	[R7],#0FFFFH
	BL	_252
_261:
; rs232cmd.c 1865				{
; rs232cmd.c 1866					SCPIError = DataOutOfRange;
	SYMB	LINE, 1866
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1867					return;
	SYMB	LINE, 1867
	BR	_258
; rs232cmd.c 1868				}
	SYMB	LINE, 1868
_252:
; rs232cmd.c 1869	
; rs232cmd.c 1870				QuestEnableReg = Reg & 0xEFFF;
	SYMB	LINE, 1870
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	AND.W	R0,#0EFFFH
	MOV.B	ES,#SEG( _QuestEnableReg )
	MOV.W	R1,#SOF( _QuestEnableReg )
	MOV.W	[R1],R0
; rs232cmd.c 1871			}
; rs232cmd.c 1872		}
; rs232cmd.c 1873	}
	SYMB	LINE, 1873
_258:
	ADDS.W	R7,#04H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1874	
; rs232cmd.c 1875	/**************************************************************************/
; rs232cmd.c 1876	/* StatusPreset																								 RS232CMD.C */
; rs232cmd.c 1877	/*																																				*/
; rs232cmd.c 1878	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 1879	/* Revised:		000617				     																					*/
; rs232cmd.c 1880	/*																																				*/
; rs232cmd.c 1881	/* Function:																															*/
; rs232cmd.c 1882	/* Remarks:																																*/
; rs232cmd.c 1883	/* Returns:																																*/
; rs232cmd.c 1884	/* Updates:																																*/
; rs232cmd.c 1885	/**************************************************************************/
; rs232cmd.c 1886	void StatusPreset( void)
; rs232cmd.c 1887	{
	ALIGN	1
	SYMB	LINE, 1887
	PUBLIC	_StatusPreset
_StatusPreset:
	SYMB	TYPE, 573, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusPreset", _StatusPreset, #573, 0, 0, 0
	SYMB	ALAB, _StatusPreset, #573
; rs232cmd.c 1888		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1888
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_270
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_270
; rs232cmd.c 1889		{
; rs232cmd.c 1890			if ( CmdRequest)
	SYMB	LINE, 1890
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_266
; rs232cmd.c 1891			{
; rs232cmd.c 1892				if ( ParCnt)
	SYMB	LINE, 1892
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_263
; rs232cmd.c 1893					SCPIError = SyntaxErr;
	SYMB	LINE, 1893
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_263:
; rs232cmd.c 1894				else
; rs232cmd.c 1895				{
; rs232cmd.c 1896					if ( Settings.ActivePreset)
	SYMB	LINE, 1896
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.W	R0,[R0]
	BEQ	_264
; rs232cmd.c 1897						rs232putchar( '0' + Settings.ActivePreset);
	SYMB	LINE, 1897
	ADD.B	R0L,#030H
	CALL	_rs232putchar
	BR	_265
_264:
; rs232cmd.c 1898					else
; rs232cmd.c 1899						rs232puts( "OFF");
	SYMB	LINE, 1899
	MOV.W	R1,#SEG( _262 )
	MOV.W	R0,#SOF( _262 )
	CALL	_rs232puts
_265:
; rs232cmd.c 1900	
; rs232cmd.c 1901					rs232putchar( '\n');
	SYMB	LINE, 1901
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1902				}
; rs232cmd.c 1903			}
	SYMB	LINE, 1903
	RET
_266:
; rs232cmd.c 1904			else
; rs232cmd.c 1905				SCPIError = SyntaxErr;
	SYMB	LINE, 1905
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1906		}
	SYMB	LINE, 1906
_270:
; rs232cmd.c 1907	}
	SYMB	LINE, 1907
	RET
	SYMB	EFUN
; rs232cmd.c 1908	
; rs232cmd.c 1909	/**************************************************************************/
; rs232cmd.c 1910	/* GenlockGen															 	   								 RS232CMD.C	*/
; rs232cmd.c 1911	/*																																				*/
; rs232cmd.c 1912	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 1913	/* Revised:		001219				     																					*/
; rs232cmd.c 1914	/*																																				*/
; rs232cmd.c 1915	/* Function:	Return the Genlock Configuration.														*/
; rs232cmd.c 1916	/* Remarks:		Request only																								*/
; rs232cmd.c 1917	/* Returns:		--																													*/
; rs232cmd.c 1918	/* Updates:	  --																													*/
; rs232cmd.c 1919	/**************************************************************************/
; rs232cmd.c 1920	void GenlockGen( void)
; rs232cmd.c 1921	{
	ALIGN	1
	SYMB	LINE, 1921
	PUBLIC	_GenlockGen
_GenlockGen:
	SYMB	TYPE, 574, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGen", _GenlockGen, #574, 0, 0, 48
	SYMB	ALAB, _GenlockGen, #574
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 1922		char code *str;
; rs232cmd.c 1923	
; rs232cmd.c 1924		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1924
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_282
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_282
; rs232cmd.c 1925		{
; rs232cmd.c 1926			if ( !CmdRequest)
	SYMB	LINE, 1926
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_271
; rs232cmd.c 1927					SCPIError = SyntaxErr;
	SYMB	LINE, 1927
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_282
_271:
; rs232cmd.c 1928			else
; rs232cmd.c 1929			{
; rs232cmd.c 1930				if ( ParCnt)
	SYMB	LINE, 1930
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_272
; rs232cmd.c 1931					SCPIError = ParNotAllowed;
	SYMB	LINE, 1931
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_282
_272:
; rs232cmd.c 1932				else
; rs232cmd.c 1933				{
; rs232cmd.c 1934	            if ( GenlockStatus)
	SYMB	LINE, 1934
	MOV.B	ES,#SEG( _GenlockStatus )
	MOV.W	R0,#SOF( _GenlockStatus )
	MOV.B	R0L,[R0]
	BEQ	_273
; rs232cmd.c 1935	   				str = GENLOCKEDParTxt;
	SYMB	LINE, 1935
	MOV.W	R5,#SEG( _GENLOCKEDParTxt )
	MOV.W	R4,#SOF( _GENLOCKEDParTxt )
	SYMB	LTIM, "str", 19, 0, 205
	BR	_274
_273:
; rs232cmd.c 1936	            else
; rs232cmd.c 1937	   				str = UNLOCKEDParTxt;
	SYMB	LINE, 1937
	MOV.W	R5,#SEG( _UNLOCKEDParTxt )
	MOV.W	R4,#SOF( _UNLOCKEDParTxt )
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
_274:
; rs232cmd.c 1938	
; rs232cmd.c 1939	     			while ( *str)
	SYMB	LINE, 1939
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_276
_275:
; rs232cmd.c 1940	      			rs232putchar( *str++);
	SYMB	LINE, 1940
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 1939
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_275
	SYMB	LINE, 1940
_276:
; rs232cmd.c 1941	
; rs232cmd.c 1942	   			rs232putchar(',');
	SYMB	LINE, 1942
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 1943	
; rs232cmd.c 1944					str = GenlockSystemPar[GenlockSetup.System].LongName;
	SYMB	LINE, 1944
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _GenlockSystemPar )
	MOV.W	R0,#SOF( _GenlockSystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_283
	ADDS.B	CS,#01H
_283:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 1945	
; rs232cmd.c 1946					while ( *str)
	SYMB	LINE, 1946
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_278
_277:
; rs232cmd.c 1947						rs232putchar( *str++);
	SYMB	LINE, 1947
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 1946
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_277
	SYMB	LINE, 1947
_278:
; rs232cmd.c 1948	
; rs232cmd.c 1949					rs232putchar(',');
	SYMB	LINE, 1949
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 1950	
; rs232cmd.c 1951					PrintSamplesToFLT( GenlockSetup.System, GenlockSetup.Delay);
	SYMB	LINE, 1951
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _GenlockSetup+2 )
	MOV.W	R3,#SOF( _GenlockSetup+2 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	CALL	_PrintSamplesToFLT
; rs232cmd.c 1952	
; rs232cmd.c 1953					rs232putchar ( '\n');
	SYMB	LINE, 1953
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1954				}
; rs232cmd.c 1955			}
; rs232cmd.c 1956		}
	SYMB	LINE, 1956
_282:
; rs232cmd.c 1957	}
	SYMB	LINE, 1957
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 1958	
; rs232cmd.c 1959	/**************************************************************************/
; rs232cmd.c 1960	/* GenlockGenSystem																		 	   		 RS232CMD.C	*/
; rs232cmd.c 1961	/*																																				*/
; rs232cmd.c 1962	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 1963	/* Revised:		000525				     																					*/
; rs232cmd.c 1964	/*																																				*/
; rs232cmd.c 1965	/* Function:	Handle the genlock system command														*/
; rs232cmd.c 1966	/* Remarks:		--																													*/
; rs232cmd.c 1967	/* Returns:		--																													*/
; rs232cmd.c 1968	/* Updates:		--																													*/
; rs232cmd.c 1969	/**************************************************************************/
; rs232cmd.c 1970	void GenlockGenSystem( void)
; rs232cmd.c 1971	{
	ALIGN	1
	SYMB	LINE, 1971
	PUBLIC	_GenlockGenSystem
_GenlockGenSystem:
	SYMB	TYPE, 575, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenSystem", _GenlockGenSystem, #575, 0, 0, 48
	SYMB	ALAB, _GenlockGenSystem, #575
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 1972		int system;
; rs232cmd.c 1973		char code *str;
; rs232cmd.c 1974	
; rs232cmd.c 1975		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1975
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_295
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_295
; rs232cmd.c 1976		{
; rs232cmd.c 1977			if ( CmdRequest)
	SYMB	LINE, 1977
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_287
; rs232cmd.c 1978			{
; rs232cmd.c 1979				if ( ParCnt)
	SYMB	LINE, 1979
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_284
; rs232cmd.c 1980					SCPIError = ParNotAllowed;
	SYMB	LINE, 1980
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_295
_284:
; rs232cmd.c 1981				else
; rs232cmd.c 1982				{
; rs232cmd.c 1983					str = GenlockSystemPar[GenlockSetup.System].LongName;
	SYMB	LINE, 1983
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _GenlockSystemPar )
	MOV.W	R0,#SOF( _GenlockSystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_296
	ADDS.B	CS,#01H
_296:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 1984	
; rs232cmd.c 1985					while ( *str)
	SYMB	LINE, 1985
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_286
_285:
; rs232cmd.c 1986						rs232putchar( *str++);
	SYMB	LINE, 1986
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 1985
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_285
	SYMB	LINE, 1986
_286:
; rs232cmd.c 1987	
; rs232cmd.c 1988					rs232putchar('\n');
	SYMB	LINE, 1988
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1989				}
; rs232cmd.c 1990			}
	SYMB	LINE, 1990
	BR	_295
_287:
; rs232cmd.c 1991			else
; rs232cmd.c 1992			{
; rs232cmd.c 1993				if ( ParCnt != 1)
	SYMB	LINE, 1993
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_288
; rs232cmd.c 1994					SCPIError = SyntaxErr;
	SYMB	LINE, 1994
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_295
_288:
; rs232cmd.c 1995				else
; rs232cmd.c 1996				{
; rs232cmd.c 1997					system = FindParameter( Cmd, GenlockSystemPar);
	SYMB	LINE, 1997
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _GenlockSystemPar )
	MOV.W	R2,#SOF( _GenlockSystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 1998		
; rs232cmd.c 1999					if ( system > -1)
	SYMB	LINE, 1999
	CMP.W	R0,#0FFFFH
	BLE	_289
; rs232cmd.c 2000						SetGenlockSystem( system);
	SYMB	LINE, 2000
	CALL	_SetGenlockSystem
	SYMB	LTIM, "system", 2, 0, 77
	BR	_295
_289:
; rs232cmd.c 2001					else
; rs232cmd.c 2002						SCPIError = DataOutOfRange;
	SYMB	LINE, 2002
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2003				}
; rs232cmd.c 2004			}
; rs232cmd.c 2005		}
	SYMB	LINE, 2005
_295:
; rs232cmd.c 2006	}
	SYMB	LINE, 2006
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2007	
; rs232cmd.c 2008	/**************************************************************************/
; rs232cmd.c 2009	/* GenlockGenDelay		 								  		 								   RS232CMD.C */
; rs232cmd.c 2010	/*																																				*/
; rs232cmd.c 2011	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 2012	/* Revised:		000525				     																					*/
; rs232cmd.c 2013	/*																																				*/
; rs232cmd.c 2014	/* Function:	Handle the genlock timing command														*/
; rs232cmd.c 2015	/* Remarks:		--																													*/
; rs232cmd.c 2016	/* Returns:		--																													*/
; rs232cmd.c 2017	/* Updates:		--																													*/
; rs232cmd.c 2018	/**************************************************************************/
; rs232cmd.c 2019	void GenlockGenDelay( void)
; rs232cmd.c 2020	{
	ALIGN	1
	SYMB	LINE, 2020
	PUBLIC	_GenlockGenDelay
_GenlockGenDelay:
	SYMB	TYPE, 576, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenDelay", _GenlockGenDelay, #576, 0, 0, 48
	SYMB	ALAB, _GenlockGenDelay, #576
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	IDEN, "field", -12, #16, 130, 5
	SYMB	IDEN, "line", -10, #16, 130, 5
	SYMB	IDEN, "offset", -8, #10, 130, 5
	SYMB	IDEN, "samples", -1, #6, 130, 5
	SYMB	LTIM, "samples", -1, 0, 69
; rs232cmd.c 2021		int field, line;
; rs232cmd.c 2022		float offset;
; rs232cmd.c 2023		long samples;
; rs232cmd.c 2024	
; rs232cmd.c 2025		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2025
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_310
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_310
; rs232cmd.c 2026		{
; rs232cmd.c 2027			if ( CmdRequest)
	SYMB	LINE, 2027
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_301
; rs232cmd.c 2028			{
; rs232cmd.c 2029				if ( ParCnt)
	SYMB	LINE, 2029
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_300
; rs232cmd.c 2030					SCPIError = ParNotAllowed;
	SYMB	LINE, 2030
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_310
_300:
; rs232cmd.c 2031				else
; rs232cmd.c 2032				{
; rs232cmd.c 2033					PrintSamplesToFLT( GenlockSetup.System, GenlockSetup.Delay);
	SYMB	LINE, 2033
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _GenlockSetup+2 )
	MOV.W	R3,#SOF( _GenlockSetup+2 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2034	
; rs232cmd.c 2035					rs232putchar ( '\n');
	SYMB	LINE, 2035
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2036				}
; rs232cmd.c 2037			}
	SYMB	LINE, 2037
	BR	_310
_301:
; rs232cmd.c 2038			else
; rs232cmd.c 2039			{
; rs232cmd.c 2040				if (( ParCnt != 3) || ( sscanf( Cmd, "%d,%d,%f", &field, &line, &offset) != 3))
	SYMB	LINE, 2040
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_302
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 16
	PUSH.W	R4, R5
	SYMB	SOFF, 20
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	MOV.W	R3,#SEG( _299 )
	MOV.W	R2,#SOF( _299 )
	PUSH.W	R2, R3
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 12
	CMP.W	R0,#03H
	BEQ	_303
_302:
; rs232cmd.c 2041					SCPIError = SyntaxErr;
	SYMB	LINE, 2041
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_310
_303:
; rs232cmd.c 2042				else
; rs232cmd.c 2043				{
; rs232cmd.c 2044					if (( samples = FLTToSamples( GenlockSetup.System, field, line, offset)) == -1)
	SYMB	LINE, 2044
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MOV.W	R1,[R7]
	MOV.W	R2,[R7+2]
	MOV.W	R5,[R7+6]
	MOV.W	R4,[R7+4]
	PUSH.W	R4, R5
	SYMB	SOFF, 16
	CALL	_FLTToSamples
	ADDS.W	R7,#04H
	SYMB	SOFF, 12
	MOV.W	R3,R1
	MOV.W	R2,R0
	CMP.W	R3,#0FFFFH
	BNE	_313
	CMP.W	R2,#0FFFFH
_313:
	BNE	_304
; rs232cmd.c 2045						SCPIError = ExecErr;
	SYMB	LINE, 2045
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_310
_304:
; rs232cmd.c 2046					else
; rs232cmd.c 2047						SetGenlockDelay( samples);
	SYMB	LINE, 2047
	CALL	_SetGenlockDelay
; rs232cmd.c 2048				}
; rs232cmd.c 2049			}
; rs232cmd.c 2050		}
	SYMB	LINE, 2050
_310:
; rs232cmd.c 2051	}
	SYMB	LINE, 2051
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2052	
; rs232cmd.c 2053	/**************************************************************************/
; rs232cmd.c 2054	/* GenlockGenCalibrateEnable	 				  		 								   RS232CMD.C */
; rs232cmd.c 2055	/*																																				*/
; rs232cmd.c 2056	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 2057	/* Revised:		000622				     																					*/
; rs232cmd.c 2058	/*																																				*/
; rs232cmd.c 2059	/* Function:	Handle the genlock calibration															*/
; rs232cmd.c 2060	/* Remarks:		--																													*/
; rs232cmd.c 2061	/* Returns:		--																													*/
; rs232cmd.c 2062	/* Updates:		--																													*/
; rs232cmd.c 2063	/**************************************************************************/
; rs232cmd.c 2064	void GenlockGenCalibrateEnable( void)
; rs232cmd.c 2065	{
	ALIGN	1
	SYMB	LINE, 2065
	PUBLIC	_GenlockGenCalibrateEnable
_GenlockGenCalibrateEnable:
	SYMB	TYPE, 577, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenCalibrateEnable", _GenlockGenCalibrateEnable, #577, 0, 0, 48
	SYMB	ALAB, _GenlockGenCalibrateEnable, #577
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; rs232cmd.c 2066		char code *str;
; rs232cmd.c 2067		int tmp;
; rs232cmd.c 2068	
; rs232cmd.c 2069		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2069
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_330
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_330
; rs232cmd.c 2070		{
; rs232cmd.c 2071			if ( CmdRequest)
	SYMB	LINE, 2071
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_320
; rs232cmd.c 2072			{
; rs232cmd.c 2073				if ( ParCnt)
	SYMB	LINE, 2073
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_317
; rs232cmd.c 2074					SCPIError = SyntaxErr;
	SYMB	LINE, 2074
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_330
_317:
; rs232cmd.c 2075				else
; rs232cmd.c 2076				{
; rs232cmd.c 2077					str = OffOnPar[GenlockCalEnable].LongName;
	SYMB	LINE, 2077
	MOV.B	ES,#SEG( _GenlockCalEnable )
	MOV.W	R0,#SOF( _GenlockCalEnable )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _OffOnPar )
	MOV.W	R0,#SOF( _OffOnPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_331
	ADDS.B	CS,#01H
_331:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2078	
; rs232cmd.c 2079					while ( *str)
	SYMB	LINE, 2079
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_319
_318:
; rs232cmd.c 2080						rs232putchar( *str++);
	SYMB	LINE, 2080
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2079
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_318
	SYMB	LINE, 2080
_319:
; rs232cmd.c 2081	
; rs232cmd.c 2082					rs232putchar('\n');
	SYMB	LINE, 2082
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2083				}
; rs232cmd.c 2084			}
	SYMB	LINE, 2084
	BR	_330
_320:
; rs232cmd.c 2085			else
; rs232cmd.c 2086			{
; rs232cmd.c 2087				if ( ParCnt != 1)
	SYMB	LINE, 2087
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_321
; rs232cmd.c 2088					SCPIError = SyntaxErr;
	SYMB	LINE, 2088
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_330
_321:
; rs232cmd.c 2089				else
; rs232cmd.c 2090				{
; rs232cmd.c 2091					tmp = FindParameter( Cmd, OffOnPar);
	SYMB	LINE, 2091
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _OffOnPar )
	MOV.W	R2,#SOF( _OffOnPar )
	CALL	_FindParameter
	SYMB	LTIM, "tmp", 2, 0, 205
; rs232cmd.c 2092		
; rs232cmd.c 2093					if ( tmp > -1)
	SYMB	LINE, 2093
	CMP.W	R0,#0FFFFH
	BLE	_323
; rs232cmd.c 2094					{
; rs232cmd.c 2095						GenlockCalEnable = tmp;
	SYMB	LINE, 2095
	MOV.W	R1,R0
	MOV.B	ES,#SEG( _GenlockCalEnable )
	MOV.W	R2,#SOF( _GenlockCalEnable )
	MOV.B	[R2],R1L
; rs232cmd.c 2096	
; rs232cmd.c 2097						if ( tmp == 0)
	SYMB	LINE, 2097
	OR.W	R0,R0
	BNE	_322
; rs232cmd.c 2098						{
; rs232cmd.c 2099							SetGenlockSystem( GenlockSetup.System);
	SYMB	LINE, 2099
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	SYMB	LTIM, "tmp", 2, 0, 77
	MOVS.B	R0H,#00H
	CALL	_SetGenlockSystem
; rs232cmd.c 2100	
; rs232cmd.c 2101							SetBBSystem( BBOutput1, BBSetup[BBOutput1].System);
	SYMB	LINE, 2101
	MOV.B	ES,#SEG( _BBSetup )
	MOV.W	R0,#SOF( _BBSetup )
	MOV.B	R0L,[R0]
	MOV.B	R1L,R0L
	MOVS.B	R1H,#00H
	MOV.W	R0,#00H
	CALL	_SetBBSystem
; rs232cmd.c 2102	
; rs232cmd.c 2103							BBControlPort = 0;
	SYMB	LINE, 2103
	MOV.B	ES,#SEG( _BBControlPort )
	MOV.W	R0,#SOF( _BBControlPort )
	MOV.W	[R0],#00H
; rs232cmd.c 2104						}
	SYMB	LINE, 2104
	BR	_330
_322:
; rs232cmd.c 2105						else
; rs232cmd.c 2106						{
; rs232cmd.c 2107																								// Force genlock internal mode
; rs232cmd.c 2108							sio0SndCommand( 12, SPG_V24_address, "GM0");
	SYMB	LINE, 2108
	MOV.W	R0,#0CH
	MOV.W	R3,#SEG( _314 )
	MOV.W	R2,#SOF( _314 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	MOV.W	R1,#015H
	CALL	_sio0SndCommand
	ADDS.W	R7,#04H
	SYMB	SOFF, 4
; rs232cmd.c 2109	
; rs232cmd.c 2110																								// Force BB1 PAL mode
; rs232cmd.c 2111							sio0SndCommand( 20, BB_V24_address, "HG%ld;", BBSetup[BBOutput1].Delay);
	SYMB	LINE, 2111
	MOV.W	R1,#034H
	MOV.B	ES,#SEG( _BBSetup+2 )
	MOV.W	R3,#SOF( _BBSetup+2 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _315 )
	MOV.W	R2,#SOF( _315 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	MOV.W	R0,#014H
	CALL	_sio0SndCommand
	ADD.W	R7,#08H
	SYMB	SOFF, 4
; rs232cmd.c 2112	
; rs232cmd.c 2113							BBControlPort = 1;								// Set BB1 to F45MHz
	SYMB	LINE, 2113
	MOV.B	ES,#SEG( _BBControlPort )
	MOV.W	R0,#SOF( _BBControlPort )
	MOV.W	[R0],#01H
; rs232cmd.c 2114	
; rs232cmd.c 2115							GenlockCalValue = Calibration.GenlockCalibration.DACUserValue;
	SYMB	LINE, 2115
	MOV.B	ES,#SEG( _Calibration+120 )
	MOV.W	R0,#SOF( _Calibration+120 )
	MOV.W	R0,[R0]
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R1,#SOF( _GenlockCalValue )
	MOV.W	[R1],R0
; rs232cmd.c 2116	
; rs232cmd.c 2117							sio0SndCommand( 20, SPG_V24_address, "GX%d;", GenlockCalValue);
	SYMB	LINE, 2117
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	R0,[R0]
	PUSH.W	R0
	SYMB	SOFF, 6
	MOV.W	R1,#SEG( _316 )
	MOV.W	R0,#SOF( _316 )
	PUSH.W	R0, R1
	SYMB	SOFF, 10
	MOV.W	R0,#014H
	MOV.W	R1,#015H
	CALL	_sio0SndCommand
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2118						}
; rs232cmd.c 2119					}
	SYMB	LINE, 2119
	BR	_330
_323:
; rs232cmd.c 2120					else
; rs232cmd.c 2121						SCPIError = DataOutOfRange;
	SYMB	LINE, 2121
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2122				}
; rs232cmd.c 2123			}
; rs232cmd.c 2124		}
	SYMB	LINE, 2124
_330:
; rs232cmd.c 2125	}
	SYMB	LINE, 2125
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2126	
; rs232cmd.c 2127	/**************************************************************************/
; rs232cmd.c 2128	/* GenlockGenCalibrateAdjust 	 				  		 								   RS232CMD.C */
; rs232cmd.c 2129	/*																																				*/
; rs232cmd.c 2130	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 2131	/* Revised:		001016				     																					*/
; rs232cmd.c 2132	/*																																				*/
; rs232cmd.c 2133	/* Function:	Handle the genlock calibration															*/
; rs232cmd.c 2134	/* Remarks:		--																													*/
; rs232cmd.c 2135	/* Returns:		--																													*/
; rs232cmd.c 2136	/* Updates:		--																													*/
; rs232cmd.c 2137	/**************************************************************************/
; rs232cmd.c 2138	void GenlockGenCalibrateAdjust( void)
; rs232cmd.c 2139	{
	ALIGN	1
	SYMB	LINE, 2139
	PUBLIC	_GenlockGenCalibrateAdjust
_GenlockGenCalibrateAdjust:
	SYMB	TYPE, 578, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenCalibrateAdjust", _GenlockGenCalibrateAdjust, #578, 0, 0, 48
	SYMB	ALAB, _GenlockGenCalibrateAdjust, #578
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
	SYMB	IDEN, "MinVal", -1, #18, 130, 5
	SYMB	LTIM, "MinVal", -1, 0, 69
	SYMB	IDEN, "MaxVal", -1, #18, 130, 5
	SYMB	LTIM, "MaxVal", -1, 0, 69
; rs232cmd.c 2140		int tmp;
; rs232cmd.c 2141		UI MinVal, MaxVal;
; rs232cmd.c 2142	
; rs232cmd.c 2143		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2143
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_350
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_350
; rs232cmd.c 2144		{
; rs232cmd.c 2145			if ( CmdRequest)
	SYMB	LINE, 2145
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_335
; rs232cmd.c 2146				SCPIError = SyntaxErr;
	SYMB	LINE, 2146
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_350
_335:
; rs232cmd.c 2147			else
; rs232cmd.c 2148			{
; rs232cmd.c 2149				if ( ParCnt == 0)
	SYMB	LINE, 2149
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BNE	_336
; rs232cmd.c 2150					SCPIError = SyntaxErr;
	SYMB	LINE, 2150
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_350
_336:
; rs232cmd.c 2151				else
; rs232cmd.c 2152				{
; rs232cmd.c 2153					MinVal = Calibration.GenlockCalibration.DACFactValue - 150;
	SYMB	LINE, 2153
	MOV.B	ES,#SEG( _Calibration+118 )
	MOV.W	R0,#SOF( _Calibration+118 )
	MOV.W	R0,[R0]
	MOV.W	R5,R0
	MOV.W	R4,R5
	SUB.W	R5,#096H
	SYMB	LTIM, "MinVal", 22, 0, 205
; rs232cmd.c 2154					MaxVal = Calibration.GenlockCalibration.DACFactValue + 150;
	SYMB	LINE, 2154
	ADD.W	R4,#096H
	SYMB	LTIM, "MaxVal", 18, 0, 205
; rs232cmd.c 2155	
; rs232cmd.c 2156					tmp = FindParameter( Cmd, MinMaxPar);
	SYMB	LINE, 2156
	MOV.W	R3,#SEG( _MinMaxPar )
	MOV.W	R2,#SOF( _MinMaxPar )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_FindParameter
	SYMB	LTIM, "tmp", 2, 0, 205
; rs232cmd.c 2157		
; rs232cmd.c 2158					if ( tmp > -1)
	SYMB	LINE, 2158
	CMP.W	R0,#0FFFFH
	BLE	_339
; rs232cmd.c 2159					{
; rs232cmd.c 2160						if ( tmp == 0)
	SYMB	LINE, 2160
	OR.W	R0,R0
	BNE	_337
; rs232cmd.c 2161							GenlockCalValue = MaxVal;
	SYMB	LINE, 2161
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	[R0],R4
	BR	_338
_337:
	SYMB	LTIM, "MinVal", 22, 0, 77
; rs232cmd.c 2162						else
; rs232cmd.c 2163							GenlockCalValue = MinVal;
	SYMB	LINE, 2163
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	[R0],R5
_338:
; rs232cmd.c 2164	
; rs232cmd.c 2165						sio0SndCommand( 20, SPG_V24_address, "GX%u;", GenlockCalValue);	
	SYMB	LINE, 2165
	MOV.W	R0,#014H
	SYMB	LTIM, "tmp", 2, 0, 77
	MOV.W	R1,#015H
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R2,#SOF( _GenlockCalValue )
	MOV.W	R2,[R2]
	PUSH.W	R2
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _334 )
	MOV.W	R2,#SOF( _334 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sio0SndCommand
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2166					}
	SYMB	LINE, 2166
	BR	_350
_339:
	SYMB	LTIM, "MaxVal", 18, 0, 77
; rs232cmd.c 2167					else
; rs232cmd.c 2168					{
; rs232cmd.c 2169						tmp = FindParameter( Cmd, UpDownPar);
	SYMB	LINE, 2169
	MOV.W	R3,#SEG( _UpDownPar )
	MOV.W	R2,#SOF( _UpDownPar )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_FindParameter
	SYMB	LTIM, "tmp", 2, 0, 205
; rs232cmd.c 2170	
; rs232cmd.c 2171						if ( tmp > -1)
	SYMB	LINE, 2171
	CMP.W	R0,#0FFFFH
	BLE	_344
; rs232cmd.c 2172						{
; rs232cmd.c 2173							if ( tmp == 0)
	SYMB	LINE, 2173
	OR.W	R0,R0
	BNE	_340
; rs232cmd.c 2174							{
; rs232cmd.c 2175								if ( GenlockCalValue > MinVal)
	SYMB	LINE, 2175
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	R0,[R0]
	SYMB	LTIM, "tmp", 2, 0, 77
	CMP.W	R0,R5
	BL	_343
; rs232cmd.c 2176									GenlockCalValue--;
	SYMB	LINE, 2176
	ADDS.W	R0,#0FH
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R1,#SOF( _GenlockCalValue )
	MOV.W	[R1],R0
; rs232cmd.c 2177							}
	SYMB	LINE, 2177
	BR	_343
_340:
; rs232cmd.c 2178							else
; rs232cmd.c 2179							{
; rs232cmd.c 2180								if ( GenlockCalValue < MaxVal)
	SYMB	LINE, 2180
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	R0,[R0]
	CMP.W	R0,R4
	BCC	_343
; rs232cmd.c 2181									GenlockCalValue++;
	SYMB	LINE, 2181
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R1,#SOF( _GenlockCalValue )
	MOV.W	[R1],R0
; rs232cmd.c 2182							}
	SYMB	LINE, 2182
_343:
; rs232cmd.c 2183	
; rs232cmd.c 2184							sio0SndCommand( 20, SPG_V24_address, "GX%u;", GenlockCalValue);
	SYMB	LINE, 2184
	MOV.W	R0,#014H
	MOV.W	R1,#015H
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R2,#SOF( _GenlockCalValue )
	MOV.W	R2,[R2]
	PUSH.W	R2
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _334 )
	MOV.W	R2,#SOF( _334 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sio0SndCommand
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2185						}
	SYMB	LINE, 2185
	BR	_350
_344:
; rs232cmd.c 2186						else
; rs232cmd.c 2187							SCPIError = DataOutOfRange;
	SYMB	LINE, 2187
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2188					}	
; rs232cmd.c 2189				}
; rs232cmd.c 2190			}
; rs232cmd.c 2191		}
	SYMB	LINE, 2191
_350:
; rs232cmd.c 2192	}
	SYMB	LINE, 2192
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2193	
; rs232cmd.c 2194	/**************************************************************************/
; rs232cmd.c 2195	/* GenlockGenCalibrateStore 	 				  		 								   RS232CMD.C */
; rs232cmd.c 2196	/*																																				*/
; rs232cmd.c 2197	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 2198	/* Revised:		000622				     																					*/
; rs232cmd.c 2199	/*																																				*/
; rs232cmd.c 2200	/* Function:	Handle the genlock calibration															*/
; rs232cmd.c 2201	/* Remarks:		--																													*/
; rs232cmd.c 2202	/* Returns:		--																													*/
; rs232cmd.c 2203	/* Updates:		--																													*/
; rs232cmd.c 2204	/**************************************************************************/
; rs232cmd.c 2205	void GenlockGenCalibrateStore( void)
; rs232cmd.c 2206	{
	ALIGN	1
	SYMB	LINE, 2206
	PUBLIC	_GenlockGenCalibrateStore
_GenlockGenCalibrateStore:
	SYMB	TYPE, 579, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenCalibrateStore", _GenlockGenCalibrateStore, #579, 0, 0, 0
	SYMB	ALAB, _GenlockGenCalibrateStore, #579
; rs232cmd.c 2207		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2207
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_362
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_362
; rs232cmd.c 2208		{
; rs232cmd.c 2209			if ( CmdRequest)
	SYMB	LINE, 2209
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_355
; rs232cmd.c 2210					SCPIError = SyntaxErr;
	SYMB	LINE, 2210
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_355:
; rs232cmd.c 2211			else
; rs232cmd.c 2212			{
; rs232cmd.c 2213				if ( ParCnt)
	SYMB	LINE, 2213
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_356
; rs232cmd.c 2214					SCPIError = ParNotAllowed;
	SYMB	LINE, 2214
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_356:
; rs232cmd.c 2215				else
; rs232cmd.c 2216				{
; rs232cmd.c 2217					if ( GenlockCalEnable)
	SYMB	LINE, 2217
	MOV.B	ES,#SEG( _GenlockCalEnable )
	MOV.W	R0,#SOF( _GenlockCalEnable )
	MOV.B	R0L,[R0]
	BEQ	_357
; rs232cmd.c 2218					{
; rs232cmd.c 2219						Calibration.GenlockCalibration.DACUserValue = GenlockCalValue;
	SYMB	LINE, 2219
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	R0,[R0]
	MOV.B	ES,#SEG( _Calibration+120 )
	MOV.W	R1,#SOF( _Calibration+120 )
	MOV.W	[R1],R0
; rs232cmd.c 2220								
; rs232cmd.c 2221						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 2221
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 2222					}
	SYMB	LINE, 2222
	RET
_357:
; rs232cmd.c 2223					else
; rs232cmd.c 2224						SCPIError = ExecErr;					
	SYMB	LINE, 2224
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 2225				}
; rs232cmd.c 2226			}
; rs232cmd.c 2227		}
	SYMB	LINE, 2227
_362:
; rs232cmd.c 2228	}
	SYMB	LINE, 2228
	RET
	SYMB	EFUN
; rs232cmd.c 2229	
; rs232cmd.c 2230	/**************************************************************************/
; rs232cmd.c 2231	/* BBSuffix																 	  						 	   RS232CMD.C	*/
; rs232cmd.c 2232	/*																																				*/
; rs232cmd.c 2233	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 2234	/* Revised:		000604				     																					*/
; rs232cmd.c 2235	/*																																				*/
; rs232cmd.c 2236	/* Function:	Get suffix of the Black Burst generator											*/
; rs232cmd.c 2237	/* Remarks:		--																													*/
; rs232cmd.c 2238	/* Returns:		--																													*/
; rs232cmd.c 2239	/* Updates:		Suffix																									 		*/
; rs232cmd.c 2240	/**************************************************************************/
; rs232cmd.c 2241	void BBGenSuffix( void)
; rs232cmd.c 2242	{
	ALIGN	1
	SYMB	LINE, 2242
	PUBLIC	_BBGenSuffix
_BBGenSuffix:
	SYMB	TYPE, 580, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGenSuffix", _BBGenSuffix, #580, 0, 0, 0
	SYMB	ALAB, _BBGenSuffix, #580
; rs232cmd.c 2243		if ( NumSuffix > 3)
	SYMB	LINE, 2243
	MOV.B	ES,#SEG( _NumSuffix )
	MOV.W	R0,#SOF( _NumSuffix )
	MOV.W	R0,[R0]
	CMP.W	R0,#03H
	BL	_363
; rs232cmd.c 2244			SCPIError = HdrSuffixOutOfRange;
	SYMB	LINE, 2244
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#0CH
	RET
_363:
; rs232cmd.c 2245		else
; rs232cmd.c 2246			Suffix[0] = NumSuffix-1;
	SYMB	LINE, 2246
	ADDS.W	R0,#0FH
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R1,#SOF( _Suffix )
	MOV.W	[R1],R0
_364:
; rs232cmd.c 2247	
; rs232cmd.c 2248	}
	SYMB	LINE, 2248
	RET
	SYMB	EFUN
; rs232cmd.c 2249	
; rs232cmd.c 2250	/**************************************************************************/
; rs232cmd.c 2251	/* BBGen																								 	     RS232CMD.C	*/
; rs232cmd.c 2252	/*																																				*/
; rs232cmd.c 2253	/* Author:		Kim Engedahl, DEV, 000524	    															*/
; rs232cmd.c 2254	/* Revised:		000604				     																					*/
; rs232cmd.c 2255	/*																																				*/
; rs232cmd.c 2256	/* Function:	Handle the Black Burst command.															*/
; rs232cmd.c 2257	/* Remarks:		Request only																								*/
; rs232cmd.c 2258	/* Returns:		--																													*/
; rs232cmd.c 2259	/* Updates:		--																												 	*/
; rs232cmd.c 2260	/**************************************************************************/
; rs232cmd.c 2261	void BBGen( void)
; rs232cmd.c 2262	{
	ALIGN	1
	SYMB	LINE, 2262
	PUBLIC	_BBGen
_BBGen:
	SYMB	TYPE, 581, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGen", _BBGen, #581, 0, 0, 48
	SYMB	ALAB, _BBGen, #581
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2263		char code *str;
; rs232cmd.c 2264	
; rs232cmd.c 2265		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2265
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_374
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_374
; rs232cmd.c 2266		{
; rs232cmd.c 2267			if ( !CmdRequest)
	SYMB	LINE, 2267
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_367
; rs232cmd.c 2268					SCPIError = SyntaxErr;
	SYMB	LINE, 2268
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_374
_367:
; rs232cmd.c 2269			else
; rs232cmd.c 2270			{
; rs232cmd.c 2271				if ( ParCnt)
	SYMB	LINE, 2271
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_368
; rs232cmd.c 2272					SCPIError = ParNotAllowed;
	SYMB	LINE, 2272
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_374
_368:
; rs232cmd.c 2273				else
; rs232cmd.c 2274				{
; rs232cmd.c 2275					str = SystemPar[BBSetup[Suffix[0]].System].LongName;
	SYMB	LINE, 2275
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	ASL.W	R0,#03H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_375
	ADDS.B	CS,#01H
_375:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2276	
; rs232cmd.c 2277					while ( *str)
	SYMB	LINE, 2277
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_370
_369:
; rs232cmd.c 2278						rs232putchar( *str++);
	SYMB	LINE, 2278
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2277
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_369
	SYMB	LINE, 2278
_370:
; rs232cmd.c 2279	
; rs232cmd.c 2280					rs232putchar( ',');
	SYMB	LINE, 2280
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2281	
; rs232cmd.c 2282					PrintSamplesToFLT( BBSetup[Suffix[0]].System, BBSetup[Suffix[0]].Delay);
	SYMB	LINE, 2282
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R2,#SOF( _Suffix )
	MOV.W	R2,[R2]
	ASL.W	R2,#03H
	MOV.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup+2 )
	MOV.W	R3,[R2+SOF( _BBSetup+4 )]
	MOV.W	R2,[R2+SOF( _BBSetup+2 )]
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2283	
; rs232cmd.c 2284					rs232printf( 6, ",%d\n", BBSetup[Suffix[0]].ScHPhase);
	SYMB	LINE, 2284
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R1,#SOF( _Suffix )
	MOV.W	R1,[R1]
	ASL.W	R1,#03H
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup+6 )
	MOV.W	R1,[R2+SOF( _BBSetup+6 )]
	PUSH.W	R1
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _366 )
	MOV.W	R2,#SOF( _366 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2285				}
; rs232cmd.c 2286			}
; rs232cmd.c 2287		}
	SYMB	LINE, 2287
_374:
; rs232cmd.c 2288	}
	SYMB	LINE, 2288
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2289	
; rs232cmd.c 2290	/**************************************************************************/
; rs232cmd.c 2291	/* BBGenSystem		 												 	    							 RS232CMD.C	*/
; rs232cmd.c 2292	/*																																				*/
; rs232cmd.c 2293	/* Author:		Kim Engedahl, DEV, 000524	    															*/
; rs232cmd.c 2294	/* Revised:		000604				     																					*/
; rs232cmd.c 2295	/*																																				*/
; rs232cmd.c 2296	/* Function:	Handle the Black Burst system-command.											*/
; rs232cmd.c 2297	/* Remarks:		--																													*/
; rs232cmd.c 2298	/* Returns:		--																													*/
; rs232cmd.c 2299	/* Updates:		--																													*/
; rs232cmd.c 2300	/**************************************************************************/
; rs232cmd.c 2301	void BBGenSystem( void)
; rs232cmd.c 2302	{
	ALIGN	1
	SYMB	LINE, 2302
	PUBLIC	_BBGenSystem
_BBGenSystem:
	SYMB	TYPE, 582, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGenSystem", _BBGenSystem, #582, 0, 0, 48
	SYMB	ALAB, _BBGenSystem, #582
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2303		int system;
; rs232cmd.c 2304		char code *str;
; rs232cmd.c 2305	
; rs232cmd.c 2306		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2306
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_387
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_387
; rs232cmd.c 2307		{
; rs232cmd.c 2308			if ( CmdRequest)
	SYMB	LINE, 2308
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_379
; rs232cmd.c 2309			{
; rs232cmd.c 2310				if ( ParCnt)
	SYMB	LINE, 2310
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_376
; rs232cmd.c 2311					SCPIError = ParNotAllowed;
	SYMB	LINE, 2311
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_387
_376:
; rs232cmd.c 2312				else
; rs232cmd.c 2313				{
; rs232cmd.c 2314					str = SystemPar[BBSetup[Suffix[0]].System].LongName;
	SYMB	LINE, 2314
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	ASL.W	R0,#03H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_388
	ADDS.B	CS,#01H
_388:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2315	
; rs232cmd.c 2316					while ( *str)
	SYMB	LINE, 2316
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_378
_377:
; rs232cmd.c 2317						rs232putchar( *str++);
	SYMB	LINE, 2317
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2316
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_377
	SYMB	LINE, 2317
_378:
; rs232cmd.c 2318	
; rs232cmd.c 2319					rs232putchar('\n');
	SYMB	LINE, 2319
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2320				}
; rs232cmd.c 2321			}
	SYMB	LINE, 2321
	BR	_387
_379:
; rs232cmd.c 2322			else
; rs232cmd.c 2323			{
; rs232cmd.c 2324				if ( ParCnt != 1)
	SYMB	LINE, 2324
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_380
; rs232cmd.c 2325					SCPIError = SyntaxErr;
	SYMB	LINE, 2325
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_387
_380:
; rs232cmd.c 2326				else
; rs232cmd.c 2327				{
; rs232cmd.c 2328					system = FindParameter( Cmd, SystemPar);
	SYMB	LINE, 2328
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _SystemPar )
	MOV.W	R2,#SOF( _SystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 2329	
; rs232cmd.c 2330					if ( system > -1)
	SYMB	LINE, 2330
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "system", 2, 0, 77
	SYMB	LTIM, "system", 6, 0, 205
	BLE	_381
; rs232cmd.c 2331						SetBBSystem( Suffix[0], system);
	SYMB	LINE, 2331
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	CALL	_SetBBSystem
	SYMB	LTIM, "system", 6, 0, 77
	BR	_387
_381:
; rs232cmd.c 2332					else
; rs232cmd.c 2333						SCPIError = DataOutOfRange;
	SYMB	LINE, 2333
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2334				}
; rs232cmd.c 2335			}
; rs232cmd.c 2336		}
	SYMB	LINE, 2336
_387:
; rs232cmd.c 2337	}
	SYMB	LINE, 2337
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2338	
; rs232cmd.c 2339	/**************************************************************************/
; rs232cmd.c 2340	/* BBGenDelay	 														 	    							 RS232CMD.C	*/
; rs232cmd.c 2341	/*																																				*/
; rs232cmd.c 2342	/* Author:		Kim Engedahl, DEV, 000524	    															*/
; rs232cmd.c 2343	/* Revised:		000604				     																					*/				
; rs232cmd.c 2344	/*																																				*/
; rs232cmd.c 2345	/* Function:	Handle the Black Burst timing command.											*/
; rs232cmd.c 2346	/* Remarks:		--																													*/
; rs232cmd.c 2347	/* Returns:		--																													*/
; rs232cmd.c 2348	/* Updates:		--																													*/
; rs232cmd.c 2349	/**************************************************************************/
; rs232cmd.c 2350	void BBGenDelay( void)
; rs232cmd.c 2351	{
	ALIGN	1
	SYMB	LINE, 2351
	PUBLIC	_BBGenDelay
_BBGenDelay:
	SYMB	TYPE, 583, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGenDelay", _BBGenDelay, #583, 0, 0, 48
	SYMB	ALAB, _BBGenDelay, #583
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	IDEN, "field", -12, #16, 130, 5
	SYMB	IDEN, "line", -10, #16, 130, 5
	SYMB	IDEN, "offset", -8, #10, 130, 5
	SYMB	IDEN, "samples", -1, #6, 130, 5
	SYMB	LTIM, "samples", -1, 0, 69
; rs232cmd.c 2352		int field, line;
; rs232cmd.c 2353		float offset;
; rs232cmd.c 2354		long samples;
; rs232cmd.c 2355	
; rs232cmd.c 2356		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2356
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_401
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_401
; rs232cmd.c 2357		{
; rs232cmd.c 2358			if ( CmdRequest)
	SYMB	LINE, 2358
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_392
; rs232cmd.c 2359			{
; rs232cmd.c 2360				if ( ParCnt)
	SYMB	LINE, 2360
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_391
; rs232cmd.c 2361					SCPIError = ParNotAllowed;
	SYMB	LINE, 2361
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_401
_391:
; rs232cmd.c 2362				else
; rs232cmd.c 2363				{
; rs232cmd.c 2364					PrintSamplesToFLT( BBSetup[Suffix[0]].System, BBSetup[Suffix[0]].Delay);
	SYMB	LINE, 2364
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MOV.W	R1,R0
	ASL.W	R1,#03H
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R2+SOF( _BBSetup )]
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup+2 )
	MOV.W	R3,[R2+SOF( _BBSetup+4 )]
	MOV.W	R2,[R2+SOF( _BBSetup+2 )]
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2365	
; rs232cmd.c 2366					rs232putchar ( '\n');
	SYMB	LINE, 2366
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2367				}
; rs232cmd.c 2368			}
	SYMB	LINE, 2368
	BR	_401
_392:
; rs232cmd.c 2369			else
; rs232cmd.c 2370			{
; rs232cmd.c 2371				if (( ParCnt != 3) || ( sscanf( Cmd, "%d,%d,%f", &field, &line, &offset) != 3))
	SYMB	LINE, 2371
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_393
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 16
	PUSH.W	R4, R5
	SYMB	SOFF, 20
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	MOV.W	R3,#SEG( _299 )
	MOV.W	R2,#SOF( _299 )
	PUSH.W	R2, R3
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 12
	CMP.W	R0,#03H
	BEQ	_394
_393:
; rs232cmd.c 2372					SCPIError = SyntaxErr;
	SYMB	LINE, 2372
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_401
_394:
; rs232cmd.c 2373				else
; rs232cmd.c 2374				{
; rs232cmd.c 2375					if (( samples = FLTToSamples( BBSetup[Suffix[0]].System, field, line, offset)) == -1)
	SYMB	LINE, 2375
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	ASL.W	R0,#03H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MOV.W	R1,[R7]
	MOV.W	R2,[R7+2]
	MOV.W	R5,[R7+6]
	MOV.W	R4,[R7+4]
	PUSH.W	R4, R5
	SYMB	SOFF, 16
	CALL	_FLTToSamples
	ADDS.W	R7,#04H
	SYMB	SOFF, 12
	MOV.W	R3,R1
	MOV.W	R2,R0
	MOV.W	R1,R3
	MOV.W	R0,R2
	CMP.W	R1,#0FFFFH
	BNE	_404
	CMP.W	R0,#0FFFFH
_404:
	BNE	_395
; rs232cmd.c 2376						SCPIError = ExecErr;
	SYMB	LINE, 2376
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_401
_395:
; rs232cmd.c 2377					else
; rs232cmd.c 2378						SetBBDelay( Suffix[0], (UL) samples);
	SYMB	LINE, 2378
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	CALL	_SetBBDelay
; rs232cmd.c 2379				}
; rs232cmd.c 2380			}
; rs232cmd.c 2381		}
	SYMB	LINE, 2381
_401:
; rs232cmd.c 2382	}
	SYMB	LINE, 2382
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2383	
; rs232cmd.c 2384	/**************************************************************************/
; rs232cmd.c 2385	/* BBGenScHPhase													 	   								 RS232CMD.C	*/
; rs232cmd.c 2386	/*																																				*/
; rs232cmd.c 2387	/* Author:		Kim Engedahl, DEV, 000524	    															*/			
; rs232cmd.c 2388	/* Revised:		000604				     																					*/
; rs232cmd.c 2389	/*																																				*/
; rs232cmd.c 2390	/* Function:	Handle the Black Burst ScH-Phase command.										*/
; rs232cmd.c 2391	/* Remarks:		--																													*/
; rs232cmd.c 2392	/* Returns:		--																													*/
; rs232cmd.c 2393	/* Updates:		--																													*/
; rs232cmd.c 2394	/**************************************************************************/
; rs232cmd.c 2395	void BBGenScHPhase( void)
; rs232cmd.c 2396	{
	ALIGN	1
	SYMB	LINE, 2396
	PUBLIC	_BBGenScHPhase
_BBGenScHPhase:
	SYMB	TYPE, 584, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGenScHPhase", _BBGenScHPhase, #584, 0, 0, 0
	SYMB	ALAB, _BBGenScHPhase, #584
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "schphase", -2, #16, 130, 5
; rs232cmd.c 2397		int schphase;
; rs232cmd.c 2398	
; rs232cmd.c 2399		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2399
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_416
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_416
; rs232cmd.c 2400		{
; rs232cmd.c 2401			if ( CmdRequest)
	SYMB	LINE, 2401
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_406
; rs232cmd.c 2402			{
; rs232cmd.c 2403				if ( ParCnt)
	SYMB	LINE, 2403
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_405
; rs232cmd.c 2404					SCPIError = ParNotAllowed;
	SYMB	LINE, 2404
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_416
_405:
; rs232cmd.c 2405				else
; rs232cmd.c 2406					rs232printf( 6, "%d\n", BBSetup[Suffix[0]].ScHPhase);
	SYMB	LINE, 2406
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R1,#SOF( _Suffix )
	MOV.W	R1,[R1]
	ASL.W	R1,#03H
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup+6 )
	MOV.W	R1,[R2+SOF( _BBSetup+6 )]
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 2407			}
	SYMB	LINE, 2407
	BR	_416
_406:
; rs232cmd.c 2408			else
; rs232cmd.c 2409			{
; rs232cmd.c 2410				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &schphase) != 1))
	SYMB	LINE, 2410
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_407
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_408
_407:
; rs232cmd.c 2411					SCPIError = SyntaxErr;
	SYMB	LINE, 2411
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_416
_408:
; rs232cmd.c 2412				else
; rs232cmd.c 2413				{
; rs232cmd.c 2414					if (( schphase < ScHPhaseLow) || ( schphase > ScHPhaseHigh))
	SYMB	LINE, 2414
	CMP.W	[R7],#0FF4DH
	BLT	_409
	CMP.W	[R7],#0B4H
	BLE	_410
_409:
; rs232cmd.c 2415						SCPIError = DataOutOfRange;
	SYMB	LINE, 2415
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_416
_410:
; rs232cmd.c 2416					else
; rs232cmd.c 2417						SetBBScHPhase( Suffix[0], schphase);
	SYMB	LINE, 2417
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MOV.W	R1,[R7]
	CALL	_SetBBScHPhase
; rs232cmd.c 2418				}
; rs232cmd.c 2419			}
; rs232cmd.c 2420		}
	SYMB	LINE, 2420
_416:
; rs232cmd.c 2421	}
	SYMB	LINE, 2421
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2422	
; rs232cmd.c 2423	/**************************************************************************/
; rs232cmd.c 2424	/* TSGen																									 	   RS232CMD.C */
; rs232cmd.c 2425	/*																																				*/
; rs232cmd.c 2426	/* Author:		Kim Engedahl, DEV, 000524	    															*/
; rs232cmd.c 2427	/* Revised:		000727				     																					*/
; rs232cmd.c 2428	/*																																				*/
; rs232cmd.c 2429	/* Function:	Return the setting of a Analog-TPG.													*/
; rs232cmd.c 2430	/* Remarks:		Request only.																								*/
; rs232cmd.c 2431	/* Returns:		--																													*/
; rs232cmd.c 2432	/* Updates:		--																													*/
; rs232cmd.c 2433	/***************************************************************************/
; rs232cmd.c 2434	void TSGen( void)
; rs232cmd.c 2435	{
	ALIGN	1
	SYMB	LINE, 2435
	PUBLIC	_TSGen
_TSGen:
	SYMB	TYPE, 585, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGen", _TSGen, #585, 0, 0, 48
	SYMB	ALAB, _TSGen, #585
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2436		char code *str;
; rs232cmd.c 2437	
; rs232cmd.c 2438		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2438
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_433
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_433
; rs232cmd.c 2439		{
; rs232cmd.c 2440			if ( !CmdRequest)
	SYMB	LINE, 2440
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_422
; rs232cmd.c 2441					SCPIError = SyntaxErr;
	SYMB	LINE, 2441
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_433
_422:
; rs232cmd.c 2442			else
; rs232cmd.c 2443			{
; rs232cmd.c 2444				if ( ParCnt)
	SYMB	LINE, 2444
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_423
; rs232cmd.c 2445					SCPIError = ParNotAllowed;
	SYMB	LINE, 2445
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_433
_423:
; rs232cmd.c 2446				else
; rs232cmd.c 2447				{
; rs232cmd.c 2448					str = CBPatternPar[CBSetup.Pattern].LongName;
	SYMB	LINE, 2448
	MOV.B	ES,#SEG( _CBSetup+2 )
	MOV.W	R0,#SOF( _CBSetup+2 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _CBPatternPar )
	MOV.W	R0,#SOF( _CBPatternPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_434
	ADDS.B	CS,#01H
_434:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2449	
; rs232cmd.c 2450					while ( *str)
	SYMB	LINE, 2450
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_425
_424:
; rs232cmd.c 2451						rs232putchar( *str++);
	SYMB	LINE, 2451
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2450
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_424
	SYMB	LINE, 2451
_425:
; rs232cmd.c 2452	
; rs232cmd.c 2453					rs232putchar( ',');
	SYMB	LINE, 2453
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2454	
; rs232cmd.c 2455	
; rs232cmd.c 2456					str = SystemPar[CBSetup.System].LongName;
	SYMB	LINE, 2456
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_435
	ADDS.B	CS,#01H
_435:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2457	
; rs232cmd.c 2458					while ( *str)
	SYMB	LINE, 2458
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_427
_426:
; rs232cmd.c 2459						rs232putchar( *str++);
	SYMB	LINE, 2459
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2458
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_426
	SYMB	LINE, 2459
_427:
; rs232cmd.c 2460	
; rs232cmd.c 2461					rs232putchar( ',');
	SYMB	LINE, 2461
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2462	
; rs232cmd.c 2463	
; rs232cmd.c 2464					PrintSamplesToFLT( CBSetup.System, CBSetup.Delay*256);
	SYMB	LINE, 2464
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _CBSetup+4 )
	MOV.W	R3,#SOF( _CBSetup+4 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	ASL.D	R2,#08H
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2465	
; rs232cmd.c 2466	
; rs232cmd.c 2467					rs232printf( 6, ",%d,", CBSetup.ScHPhase);
	SYMB	LINE, 2467
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R1,#SOF( _CBSetup+8 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _421 )
	MOV.W	R2,#SOF( _421 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2468	
; rs232cmd.c 2469	
; rs232cmd.c 2470					str = EmbAudioSignalPar[CBSetup.EmbAudioSignal].LongName;
	SYMB	LINE, 2470
	MOV.B	ES,#SEG( _CBSetup+10 )
	MOV.W	R0,#SOF( _CBSetup+10 )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _EmbAudioSignalPar )
	MOV.W	R0,#SOF( _EmbAudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_436
	ADDS.B	CS,#01H
_436:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2471	
; rs232cmd.c 2472					while ( *str)
	SYMB	LINE, 2472
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_429
_428:
; rs232cmd.c 2473						rs232putchar( *str++);
	SYMB	LINE, 2473
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2472
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_428
	SYMB	LINE, 2473
_429:
; rs232cmd.c 2474	
; rs232cmd.c 2475					rs232putchar( '\n');
	SYMB	LINE, 2475
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2476				}
; rs232cmd.c 2477			}
; rs232cmd.c 2478		}
	SYMB	LINE, 2478
_433:
; rs232cmd.c 2479	}
	SYMB	LINE, 2479
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2480	
; rs232cmd.c 2481	/**************************************************************************/
; rs232cmd.c 2482	/* TSGenPattern																					 	     RS232CMD.C	*/
; rs232cmd.c 2483	/*																																				*/
; rs232cmd.c 2484	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 2485	/* Revised:		000727				     																					*/
; rs232cmd.c 2486	/*																																				*/
; rs232cmd.c 2487	/* Function:	Handle the Colorbar pattern command.												*/
; rs232cmd.c 2488	/* Remarks:		--																													*/
; rs232cmd.c 2489	/* Returns:		--																													*/
; rs232cmd.c 2490	/* Updates:		--																													*/
; rs232cmd.c 2491	/**************************************************************************/
; rs232cmd.c 2492	void TSGenPattern( void)
; rs232cmd.c 2493	{
	ALIGN	1
	SYMB	LINE, 2493
	PUBLIC	_TSGenPattern
_TSGenPattern:
	SYMB	TYPE, 586, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGenPattern", _TSGenPattern, #586, 0, 0, 48
	SYMB	ALAB, _TSGenPattern, #586
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "pattern", -1, #16, 130, 5
	SYMB	LTIM, "pattern", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2494		int pattern;
; rs232cmd.c 2495		char code *str;
; rs232cmd.c 2496	
; rs232cmd.c 2497		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2497
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_449
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_449
; rs232cmd.c 2498		{
; rs232cmd.c 2499			if ( CmdRequest)
	SYMB	LINE, 2499
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_440
; rs232cmd.c 2500			{
; rs232cmd.c 2501				if ( ParCnt)
	SYMB	LINE, 2501
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_437
; rs232cmd.c 2502					SCPIError = ParNotAllowed;
	SYMB	LINE, 2502
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_449
_437:
; rs232cmd.c 2503				else
; rs232cmd.c 2504				{
; rs232cmd.c 2505					str = CBPatternPar[CBSetup.Pattern].LongName;
	SYMB	LINE, 2505
	MOV.B	ES,#SEG( _CBSetup+2 )
	MOV.W	R0,#SOF( _CBSetup+2 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _CBPatternPar )
	MOV.W	R0,#SOF( _CBPatternPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_450
	ADDS.B	CS,#01H
_450:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2506	
; rs232cmd.c 2507					while ( *str)
	SYMB	LINE, 2507
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_439
_438:
; rs232cmd.c 2508						rs232putchar( *str++);
	SYMB	LINE, 2508
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2507
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_438
	SYMB	LINE, 2508
_439:
; rs232cmd.c 2509	
; rs232cmd.c 2510					rs232putchar('\n');
	SYMB	LINE, 2510
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2511				}
; rs232cmd.c 2512			}
	SYMB	LINE, 2512
	BR	_449
_440:
; rs232cmd.c 2513			else
; rs232cmd.c 2514			{
; rs232cmd.c 2515				pattern = FindParameter( Cmd, CBPatternPar);
	SYMB	LINE, 2515
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _CBPatternPar )
	MOV.W	R2,#SOF( _CBPatternPar )
	CALL	_FindParameter
	SYMB	LTIM, "pattern", 2, 0, 205
; rs232cmd.c 2516	
; rs232cmd.c 2517				if ( ParCnt != 1)
	SYMB	LINE, 2517
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	R1L,[R1]
	CMP.B	R1L,#01H
	BEQ	_441
; rs232cmd.c 2518					SCPIError = SyntaxErr;
	SYMB	LINE, 2518
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_449
_441:
	SYMB	LTIM, "pattern", 2, 0, 77
; rs232cmd.c 2519				else
; rs232cmd.c 2520				{
; rs232cmd.c 2521					if ( pattern > -1)
	SYMB	LINE, 2521
	CMP.W	R0,#0FFFFH
	BLE	_442
; rs232cmd.c 2522					{
; rs232cmd.c 2523						if ( SetCBPattern( pattern) != OK)
	SYMB	LINE, 2523
	CALL	_SetCBPattern
	CMP.W	R0,#0FFFFH
	BEQ	_449
; rs232cmd.c 2524							SCPIError = ExecErr;
	SYMB	LINE, 2524
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 2525					}
	SYMB	LINE, 2525
	BR	_449
_442:
; rs232cmd.c 2526					else
; rs232cmd.c 2527						SCPIError = DataOutOfRange;
	SYMB	LINE, 2527
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2528				}
; rs232cmd.c 2529			}
; rs232cmd.c 2530		}
	SYMB	LINE, 2530
_449:
; rs232cmd.c 2531	}
	SYMB	LINE, 2531
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2532	
; rs232cmd.c 2533	/**************************************************************************/
; rs232cmd.c 2534	/* TSGenSystem														 	    							 RS232CMD.C	*/
; rs232cmd.c 2535	/*																																				*/
; rs232cmd.c 2536	/* Author:		Kim Engedahl, DEV, 98021	    															*/
; rs232cmd.c 2537	/* Revised:		000727				     																					*/
; rs232cmd.c 2538	/*																																				*/
; rs232cmd.c 2539	/* Function:	Handle the Colobar system-command.													*/
; rs232cmd.c 2540	/* Remarks:		This command will possibly change pattern and/or delay if	 	*/
; rs232cmd.c 2541	/*            these are not valid in the selected system									*/
; rs232cmd.c 2542	/* Returns:		--																													*/
; rs232cmd.c 2543	/* Updates:	   --																													*/
; rs232cmd.c 2544	/**************************************************************************/
; rs232cmd.c 2545	void TSGenSystem( void)
; rs232cmd.c 2546	{
	ALIGN	1
	SYMB	LINE, 2546
	PUBLIC	_TSGenSystem
_TSGenSystem:
	SYMB	TYPE, 587, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGenSystem", _TSGenSystem, #587, 0, 0, 48
	SYMB	ALAB, _TSGenSystem, #587
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2547		int system;
; rs232cmd.c 2548		char code *str;
; rs232cmd.c 2549	
; rs232cmd.c 2550		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2550
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_467
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_467
; rs232cmd.c 2551		{
; rs232cmd.c 2552			if ( CmdRequest)
	SYMB	LINE, 2552
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_457
; rs232cmd.c 2553			{
; rs232cmd.c 2554				if ( ParCnt)
	SYMB	LINE, 2554
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_454
; rs232cmd.c 2555					SCPIError = ParNotAllowed;
	SYMB	LINE, 2555
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_467
_454:
; rs232cmd.c 2556				else
; rs232cmd.c 2557				{
; rs232cmd.c 2558					str = SystemPar[CBSetup.System].LongName;
	SYMB	LINE, 2558
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_468
	ADDS.B	CS,#01H
_468:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2559	
; rs232cmd.c 2560					while ( *str)										 
	SYMB	LINE, 2560
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_456
_455:
; rs232cmd.c 2561						rs232putchar( *str++);
	SYMB	LINE, 2561
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2560
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_455
	SYMB	LINE, 2561
_456:
; rs232cmd.c 2562	
; rs232cmd.c 2563					rs232putchar('\n');
	SYMB	LINE, 2563
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2564				}
; rs232cmd.c 2565			}
	SYMB	LINE, 2565
	BR	_467
_457:
; rs232cmd.c 2566			else
; rs232cmd.c 2567			{
; rs232cmd.c 2568				if ( ParCnt != 1)
	SYMB	LINE, 2568
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_458
; rs232cmd.c 2569					SCPIError = SyntaxErr;
	SYMB	LINE, 2569
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_467
_458:
; rs232cmd.c 2570				else
; rs232cmd.c 2571				{
; rs232cmd.c 2572					system = FindParameter( Cmd, SystemPar);
	SYMB	LINE, 2572
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _SystemPar )
	MOV.W	R2,#SOF( _SystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 2573	
; rs232cmd.c 2574					if ( system == PAL_PALID)						// If line7, (PAL w/ID) ever should
	SYMB	LINE, 2574
	CMP.W	R0,#01H
	BNE	_459
; rs232cmd.c 2575						SCPIError = DataOutOfRange;				//  be supported remove this exception
	SYMB	LINE, 2575
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_467
_459:
	SYMB	LTIM, "system", 2, 0, 77
; rs232cmd.c 2576					else						
; rs232cmd.c 2577					{
; rs232cmd.c 2578						if ( system > -1)
	SYMB	LINE, 2578
	CMP.W	R0,#0FFFFH
	BLE	_460
; rs232cmd.c 2579							SetCBSystem( system);
	SYMB	LINE, 2579
	CALL	_SetCBSystem
	BR	_467
_460:
; rs232cmd.c 2580						else
; rs232cmd.c 2581							SCPIError = DataOutOfRange;
	SYMB	LINE, 2581
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2582					}
; rs232cmd.c 2583				}
; rs232cmd.c 2584			}
; rs232cmd.c 2585		}
	SYMB	LINE, 2585
_467:
; rs232cmd.c 2586	}
	SYMB	LINE, 2586
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2587	
; rs232cmd.c 2588	/**************************************************************************/
; rs232cmd.c 2589	/* TSGenDelay															 	    							 RS232CMD.C */
; rs232cmd.c 2590	/*																																				*/
; rs232cmd.c 2591	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 2592	/* Revised:		000604				     																					*/
; rs232cmd.c 2593	/*																																				*/
; rs232cmd.c 2594	/* Function:	Handle the Colorbar delay command.													*/
; rs232cmd.c 2595	/* Remarks:		Delay should be multiplied/divided with/by 256 to conform		*/
; rs232cmd.c 2596	/*						with the black burst timing as the functions								*/
; rs232cmd.c 2597	/*						PrintSamplesToFLT/FLTToSamples are common to both the CBar	*/
; rs232cmd.c 2598	/*						and BB timing. The CBar timing equals 1728/1716 samples			*/
; rs232cmd.c 2599	/*						(app. 37ns/sample), while the BB timing equals 1728*256/		*/
; rs232cmd.c 2600	/*						1716*256 samples (app. 0.14 ns/sample).											*/
; rs232cmd.c 2601	/* Returns:		--																													*/
; rs232cmd.c 2602	/* Updates:		--																													*/
; rs232cmd.c 2603	/**************************************************************************/
; rs232cmd.c 2604	void TSGenDelay( void)
; rs232cmd.c 2605	{
	ALIGN	1
	SYMB	LINE, 2605
	PUBLIC	_TSGenDelay
_TSGenDelay:
	SYMB	TYPE, 588, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGenDelay", _TSGenDelay, #588, 0, 0, 48
	SYMB	ALAB, _TSGenDelay, #588
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	IDEN, "field", -12, #16, 130, 5
	SYMB	IDEN, "line", -10, #16, 130, 5
	SYMB	IDEN, "offset", -8, #10, 130, 5
	SYMB	IDEN, "samples", -1, #6, 130, 5
	SYMB	LTIM, "samples", -1, 0, 69
; rs232cmd.c 2606		int field, line;
; rs232cmd.c 2607		float offset;
; rs232cmd.c 2608		long samples;
; rs232cmd.c 2609	
; rs232cmd.c 2610		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2610
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_482
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_482
; rs232cmd.c 2611		{
; rs232cmd.c 2612			if ( CmdRequest)
	SYMB	LINE, 2612
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_473
; rs232cmd.c 2613			{
; rs232cmd.c 2614				if ( ParCnt)
	SYMB	LINE, 2614
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_472
; rs232cmd.c 2615					SCPIError = ParNotAllowed;
	SYMB	LINE, 2615
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_482
_472:
; rs232cmd.c 2616				else
; rs232cmd.c 2617				{
; rs232cmd.c 2618					PrintSamplesToFLT( CBSetup.System, CBSetup.Delay*256);
	SYMB	LINE, 2618
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _CBSetup+4 )
	MOV.W	R3,#SOF( _CBSetup+4 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	ASL.D	R2,#08H
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2619	
; rs232cmd.c 2620					rs232putchar ( '\n');
	SYMB	LINE, 2620
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2621				}
; rs232cmd.c 2622			}
	SYMB	LINE, 2622
	BR	_482
_473:
; rs232cmd.c 2623			else
; rs232cmd.c 2624			{
; rs232cmd.c 2625				if (( ParCnt != 3) || ( sscanf( Cmd, "%d,%d,%f", &field, &line, &offset) != 3))
	SYMB	LINE, 2625
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_474
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 16
	PUSH.W	R4, R5
	SYMB	SOFF, 20
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	MOV.W	R3,#SEG( _299 )
	MOV.W	R2,#SOF( _299 )
	PUSH.W	R2, R3
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 12
	CMP.W	R0,#03H
	BEQ	_475
_474:
; rs232cmd.c 2626					SCPIError = SyntaxErr;
	SYMB	LINE, 2626
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_482
_475:
; rs232cmd.c 2627				else
; rs232cmd.c 2628				{
; rs232cmd.c 2629					if (( samples = FLTToSamples( CBSetup.System, field, line, offset)) == -1)
	SYMB	LINE, 2629
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MOV.W	R1,[R7]
	MOV.W	R2,[R7+2]
	MOV.W	R5,[R7+6]
	MOV.W	R4,[R7+4]
	PUSH.W	R4, R5
	SYMB	SOFF, 16
	CALL	_FLTToSamples
	ADDS.W	R7,#04H
	SYMB	SOFF, 12
	MOV.W	R3,R1
	MOV.W	R2,R0
	CMP.W	R3,#0FFFFH
	BNE	_485
	CMP.W	R2,#0FFFFH
_485:
	BNE	_476
; rs232cmd.c 2630						SCPIError = ExecErr;
	SYMB	LINE, 2630
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_482
_476:
; rs232cmd.c 2631					else		
; rs232cmd.c 2632						SetCBDelay( samples/256);
	SYMB	LINE, 2632
	MOV.W	R3,#00H
	MOV.W	R2,#0100H
	FCALL	__SDIVL
	CALL	_SetCBDelay
; rs232cmd.c 2633				}
; rs232cmd.c 2634			}
; rs232cmd.c 2635		}
	SYMB	LINE, 2635
_482:
; rs232cmd.c 2636	}
	SYMB	LINE, 2636
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2637	
; rs232cmd.c 2638	/**************************************************************************/
; rs232cmd.c 2639	/* TSGenScHPhase														 	   							 RS232CMD.C	*/
; rs232cmd.c 2640	/*																																				*/
; rs232cmd.c 2641	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 2642	/* Revised:		000727				     																					*/
; rs232cmd.c 2643	/*																																				*/
; rs232cmd.c 2644	/* Function:	Handle the Colorbar ScH-Phase-command.											*/
; rs232cmd.c 2645	/* Remarks:		--																													*/
; rs232cmd.c 2646	/* Returns:		--																													*/
; rs232cmd.c 2647	/* Updates:		--																													*/
; rs232cmd.c 2648	/**************************************************************************/
; rs232cmd.c 2649	void TSGenScHPhase( void)
; rs232cmd.c 2650	{
	ALIGN	1
	SYMB	LINE, 2650
	PUBLIC	_TSGenScHPhase
_TSGenScHPhase:
	SYMB	TYPE, 589, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGenScHPhase", _TSGenScHPhase, #589, 0, 0, 0
	SYMB	ALAB, _TSGenScHPhase, #589
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "schphase", -2, #16, 130, 5
; rs232cmd.c 2651		int schphase;
; rs232cmd.c 2652	
; rs232cmd.c 2653		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2653
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_497
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_497
; rs232cmd.c 2654		{
; rs232cmd.c 2655			if ( CmdRequest)
	SYMB	LINE, 2655
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_487
; rs232cmd.c 2656			{
; rs232cmd.c 2657				if ( ParCnt)
	SYMB	LINE, 2657
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_486
; rs232cmd.c 2658					SCPIError = ParNotAllowed;
	SYMB	LINE, 2658
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_497
_486:
; rs232cmd.c 2659				else
; rs232cmd.c 2660					rs232printf( 6, "%d\n", CBSetup.ScHPhase);
	SYMB	LINE, 2660
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R1,#SOF( _CBSetup+8 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 2661			}
	SYMB	LINE, 2661
	BR	_497
_487:
; rs232cmd.c 2662			else
; rs232cmd.c 2663			{
; rs232cmd.c 2664				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &schphase) != 1))
	SYMB	LINE, 2664
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_488
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_489
_488:
; rs232cmd.c 2665					SCPIError = SyntaxErr;
	SYMB	LINE, 2665
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_497
_489:
; rs232cmd.c 2666				else
; rs232cmd.c 2667				{
; rs232cmd.c 2668					if (( schphase < ScHPhaseLow) || ( schphase > ScHPhaseHigh))
	SYMB	LINE, 2668
	CMP.W	[R7],#0FF4DH
	BLT	_490
	CMP.W	[R7],#0B4H
	BLE	_491
_490:
; rs232cmd.c 2669						SCPIError = DataOutOfRange;
	SYMB	LINE, 2669
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_497
_491:
; rs232cmd.c 2670					else
; rs232cmd.c 2671						SetCBScHPhase( schphase);
	SYMB	LINE, 2671
	MOV.W	R0,[R7]
	CALL	_SetCBScHPhase
; rs232cmd.c 2672				}
; rs232cmd.c 2673			}
; rs232cmd.c 2674		}
	SYMB	LINE, 2674
_497:
; rs232cmd.c 2675	}
	SYMB	LINE, 2675
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2676	
; rs232cmd.c 2677	/**************************************************************************/
; rs232cmd.c 2678	/* TSGenEmbAudioSignal											 	   							 RS232CMD.C	*/
; rs232cmd.c 2679	/*																																				*/
; rs232cmd.c 2680	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 2681	/* Revised:		000727				     																					*/
; rs232cmd.c 2682	/*																																				*/
; rs232cmd.c 2683	/* Function:	Handle the Colorbar embedded audio signal										*/
; rs232cmd.c 2684	/* Remarks:		--																													*/
; rs232cmd.c 2685	/* Returns:		--																													*/
; rs232cmd.c 2686	/* Updates:		--																													*/
; rs232cmd.c 2687	/**************************************************************************/
; rs232cmd.c 2688	void TSGenEmbAudioSignal( void)
; rs232cmd.c 2689	{
	ALIGN	1
	SYMB	LINE, 2689
	PUBLIC	_TSGenEmbAudioSignal
_TSGenEmbAudioSignal:
	SYMB	TYPE, 590, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGenEmbAudioSignal", _TSGenEmbAudioSignal, #590, 0, 0, 48
	SYMB	ALAB, _TSGenEmbAudioSignal, #590
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "signal", -1, #16, 130, 5
	SYMB	LTIM, "signal", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2690		int signal;
; rs232cmd.c 2691		char code *str;
; rs232cmd.c 2692	
; rs232cmd.c 2693		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2693
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_513
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_513
; rs232cmd.c 2694		{
; rs232cmd.c 2695			if ( CmdRequest)
	SYMB	LINE, 2695
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_505
; rs232cmd.c 2696			{
; rs232cmd.c 2697				if ( ParCnt)
	SYMB	LINE, 2697
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_502
; rs232cmd.c 2698					SCPIError = ParNotAllowed;
	SYMB	LINE, 2698
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_513
_502:
; rs232cmd.c 2699				else
; rs232cmd.c 2700				{
; rs232cmd.c 2701					str = EmbAudioSignalPar[CBSetup.EmbAudioSignal].LongName;
	SYMB	LINE, 2701
	MOV.B	ES,#SEG( _CBSetup+10 )
	MOV.W	R0,#SOF( _CBSetup+10 )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _EmbAudioSignalPar )
	MOV.W	R0,#SOF( _EmbAudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_514
	ADDS.B	CS,#01H
_514:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2702	
; rs232cmd.c 2703					while ( *str)
	SYMB	LINE, 2703
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_504
_503:
; rs232cmd.c 2704						rs232putchar( *str++);
	SYMB	LINE, 2704
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2703
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_503
	SYMB	LINE, 2704
_504:
; rs232cmd.c 2705	
; rs232cmd.c 2706					rs232putchar('\n');
	SYMB	LINE, 2706
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2707				}
; rs232cmd.c 2708			}
	SYMB	LINE, 2708
	BR	_513
_505:
; rs232cmd.c 2709			else
; rs232cmd.c 2710			{
; rs232cmd.c 2711				if ( ParCnt != 1)
	SYMB	LINE, 2711
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_506
; rs232cmd.c 2712					SCPIError = SyntaxErr;
	SYMB	LINE, 2712
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_513
_506:
; rs232cmd.c 2713				else
; rs232cmd.c 2714				{
; rs232cmd.c 2715					signal = FindParameter( Cmd, EmbAudioSignalPar);
	SYMB	LINE, 2715
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _EmbAudioSignalPar )
	MOV.W	R2,#SOF( _EmbAudioSignalPar )
	CALL	_FindParameter
	SYMB	LTIM, "signal", 2, 0, 205
; rs232cmd.c 2716		
; rs232cmd.c 2717					if ( signal > -1)
	SYMB	LINE, 2717
	CMP.W	R0,#0FFFFH
	BLE	_507
	SYMB	LTIM, "signal", 2, 0, 77
; rs232cmd.c 2718						SetCBEmbAudioSignal( signal);
	SYMB	LINE, 2718
	CALL	_SetCBEmbAudioSignal
	BR	_513
_507:
; rs232cmd.c 2719					else
; rs232cmd.c 2720						SCPIError = DataOutOfRange;
	SYMB	LINE, 2720
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2721				}
; rs232cmd.c 2722			}
; rs232cmd.c 2723		}
	SYMB	LINE, 2723
_513:
; rs232cmd.c 2724	}
	SYMB	LINE, 2724
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2725	
; rs232cmd.c 2726	/**************************************************************************/
; rs232cmd.c 2727	/* AudioGenOutput																				 	     RS232CMD.C	*/
; rs232cmd.c 2728	/*																																				*/
; rs232cmd.c 2729	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 2730	/* Revised:		000603				     																					*/
; rs232cmd.c 2731	/*																																				*/
; rs232cmd.c 2732	/* Function:	--																													*/
; rs232cmd.c 2733	/* Remarks:		--																													*/
; rs232cmd.c 2734	/* Returns:		--																													*/
; rs232cmd.c 2735	/* Updates:		--																													*/
; rs232cmd.c 2736	/**************************************************************************/
; rs232cmd.c 2737	void AudioGenOutput( void)
; rs232cmd.c 2738	{
	ALIGN	1
	SYMB	LINE, 2738
	PUBLIC	_AudioGenOutput
_AudioGenOutput:
	SYMB	TYPE, 591, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenOutput", _AudioGenOutput, #591, 0, 0, 48
	SYMB	ALAB, _AudioGenOutput, #591
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "output", -1, #16, 130, 5
	SYMB	LTIM, "output", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2739		int output;
; rs232cmd.c 2740		char code *str;
; rs232cmd.c 2741	
; rs232cmd.c 2742		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2742
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_529
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_529
; rs232cmd.c 2743		{
; rs232cmd.c 2744			if ( CmdRequest)
	SYMB	LINE, 2744
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_520
; rs232cmd.c 2745			{
; rs232cmd.c 2746				if ( ParCnt)
	SYMB	LINE, 2746
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_517
; rs232cmd.c 2747					SCPIError = ParNotAllowed;
	SYMB	LINE, 2747
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_529
_517:
; rs232cmd.c 2748				else
; rs232cmd.c 2749				{
; rs232cmd.c 2750					str = AudioOutputPar[AudioOutput].LongName;
	SYMB	LINE, 2750
	MOV.B	ES,#SEG( _AudioOutput )
	MOV.W	R0,#SOF( _AudioOutput )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioOutputPar )
	MOV.W	R0,#SOF( _AudioOutputPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_530
	ADDS.B	CS,#01H
_530:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2751	
; rs232cmd.c 2752					while ( *str)
	SYMB	LINE, 2752
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_519
_518:
; rs232cmd.c 2753						rs232putchar( *str++);
	SYMB	LINE, 2753
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2752
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_518
	SYMB	LINE, 2753
_519:
; rs232cmd.c 2754	
; rs232cmd.c 2755					rs232putchar('\n');
	SYMB	LINE, 2755
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2756				}
; rs232cmd.c 2757			}
	SYMB	LINE, 2757
	BR	_529
_520:
; rs232cmd.c 2758			else
; rs232cmd.c 2759			{
; rs232cmd.c 2760				if ( ParCnt != 1)
	SYMB	LINE, 2760
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_521
; rs232cmd.c 2761					SCPIError = SyntaxErr;
	SYMB	LINE, 2761
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_529
_521:
; rs232cmd.c 2762				else
; rs232cmd.c 2763				{
; rs232cmd.c 2764					output = FindParameter( Cmd, AudioOutputPar);
	SYMB	LINE, 2764
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AudioOutputPar )
	MOV.W	R2,#SOF( _AudioOutputPar )
	CALL	_FindParameter
	SYMB	LTIM, "output", 2, 0, 205
; rs232cmd.c 2765		
; rs232cmd.c 2766					if ( output > -1)
	SYMB	LINE, 2766
	CMP.W	R0,#0FFFFH
	BLE	_522
; rs232cmd.c 2767					{
; rs232cmd.c 2768						if ( SetAudioOutput( output) == FAIL)
	SYMB	LINE, 2768
	CALL	_SetAudioOutput
	SYMB	LTIM, "output", 2, 0, 77
	OR.W	R0,R0
	BNE	_529
; rs232cmd.c 2769							SCPIError = ExecErr;
	SYMB	LINE, 2769
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 2770					}
	SYMB	LINE, 2770
	BR	_529
_522:
; rs232cmd.c 2771					else
; rs232cmd.c 2772						SCPIError = DataOutOfRange;
	SYMB	LINE, 2772
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2773				}
; rs232cmd.c 2774			}
; rs232cmd.c 2775		}
	SYMB	LINE, 2775
_529:
; rs232cmd.c 2776	}
	SYMB	LINE, 2776
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2777	
; rs232cmd.c 2778	/**************************************************************************/
; rs232cmd.c 2779	/* AudioGenAnalog																				 	     RS232CMD.C	*/
; rs232cmd.c 2780	/*																																				*/
; rs232cmd.c 2781	/* Author:		Kim Engedahl, DEV, 000526	    															*/
; rs232cmd.c 2782	/* Revised:		000705				     																					*/
; rs232cmd.c 2783	/*																																				*/
; rs232cmd.c 2784	/* Function:	--																													*/
; rs232cmd.c 2785	/* Remarks:		Request only.																								*/
; rs232cmd.c 2786	/* Returns:	  --																													*/
; rs232cmd.c 2787	/* Updates:		--																													*/
; rs232cmd.c 2788	/**************************************************************************/
; rs232cmd.c 2789	void AudioGenAnalog( void)
; rs232cmd.c 2790	{
	ALIGN	1
	SYMB	LINE, 2790
	PUBLIC	_AudioGenAnalog
_AudioGenAnalog:
	SYMB	TYPE, 592, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAnalog", _AudioGenAnalog, #592, 0, 0, 112
	SYMB	ALAB, _AudioGenAnalog, #592
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "level", -1, #16, 130, 5
	SYMB	LTIM, "level", -1, 0, 69
; rs232cmd.c 2791		char code *str;
; rs232cmd.c 2792		int level;
; rs232cmd.c 2793	
; rs232cmd.c 2794		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2794
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_605
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_605
; rs232cmd.c 2795		{
; rs232cmd.c 2796			if ( !CmdRequest)
	SYMB	LINE, 2796
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_534
; rs232cmd.c 2797					SCPIError = SyntaxErr;
	SYMB	LINE, 2797
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_605
_534:
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2798			else
; rs232cmd.c 2799			{
; rs232cmd.c 2800				if ( ParCnt)
	SYMB	LINE, 2800
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_535
; rs232cmd.c 2801					SCPIError = ParNotAllowed;
	SYMB	LINE, 2801
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_605
_535:
	SYMB	LTIM, "level", 26, 0, 77
RS232CMD_IR	SEGMENT	HCODE INSEGMENT ROMDATA
	RSEG	RS232CMD_IR
	ALIGN	1
__swtable607:
	DW	SOF _538,SEG _538
	DW	SOF _539,SEG _539
	DW	SOF _540,SEG _540
	DW	SOF _541,SEG _541
	DW	SOF _542,SEG _542
	DW	SOF _543,SEG _543
	DW	SOF _544,SEG _544
	DW	SOF _545,SEG _545
	DW	SOF _546,SEG _546
	DW	SOF _547,SEG _547
	DW	SOF _548,SEG _548
	DW	SOF _549,SEG _549
	DW	SOF _550,SEG _550
	DW	SOF _551,SEG _551
	DW	SOF _552,SEG _552
	DW	SOF _553,SEG _553
	DW	SOF _554,SEG _554
	DW	SOF _555,SEG _555
	DW	SOF _556,SEG _556
	DW	SOF _557,SEG _557
	DW	SOF _558,SEG _558
	DW	SOF _559,SEG _559
	DW	SOF _560,SEG _560
	DW	SOF _561,SEG _561
	DW	SOF _562,SEG _562
	DW	SOF _563,SEG _563
	DW	SOF _564,SEG _564
	DW	SOF _565,SEG _565
	DW	SOF _566,SEG _566
	DW	SOF _567,SEG _567
	RSEG	RS232CMD_PR
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2802				else
; rs232cmd.c 2803				{
; rs232cmd.c 2804					str = AudioSignalPar[AudioSetup[AnalogAudio].Signal].LongName;
	SYMB	LINE, 2804
	MOV.B	ES,#SEG( _AudioSetup+2 )
	MOV.W	R0,#SOF( _AudioSetup+2 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioSignalPar )
	MOV.W	R0,#SOF( _AudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_606
	ADDS.B	CS,#01H
_606:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2805	
; rs232cmd.c 2806					while ( *str)
	SYMB	LINE, 2806
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_537
_536:
; rs232cmd.c 2807						rs232putchar( *str++);
	SYMB	LINE, 2807
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2806
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_536
	SYMB	LINE, 2807
_537:
; rs232cmd.c 2808	
; rs232cmd.c 2809					rs232putchar(',');
	SYMB	LINE, 2809
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2810	
; rs232cmd.c 2811					str = NULL;
	SYMB	LINE, 2811
	MOV.W	R5,#00H
	MOV.W	R4,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2812	
; rs232cmd.c 2813					switch ( AudioSetup[AnalogAudio].Level)
	SYMB	LINE, 2813
	MOV.B	ES,#SEG( _AudioSetup+4 )
	MOV.W	R0,#SOF( _AudioSetup+4 )
	MOV.W	R0,[R0]
	ADDS.W	R0,#0FH
	CMP.W	R0,#01DH
	BG	_568
	ASL.W	R0,#02H
	MOV.B	CS,#SEG( __swtable607 )
	ADD.W	R0,#SOF( __swtable607 )
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	RET
; rs232cmd.c 2814					{
; rs232cmd.c 2815					 	case P10dBm:
	SYMB	LINE, 2815
_538:
; rs232cmd.c 2816							level = 10;
	SYMB	LINE, 2816
	MOV.W	R6,#0AH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2817							break;
	SYMB	LINE, 2817
	BR	_600
; rs232cmd.c 2818	
; rs232cmd.c 2819					 	case P8dBm:
	SYMB	LINE, 2819
_539:
; rs232cmd.c 2820							level = 8;
	SYMB	LINE, 2820
	MOV.W	R6,#08H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2821							break;
	SYMB	LINE, 2821
	BR	_600
; rs232cmd.c 2822	
; rs232cmd.c 2823					 	case P7dBm:
	SYMB	LINE, 2823
_540:
; rs232cmd.c 2824							level = 7;
	SYMB	LINE, 2824
	MOV.W	R6,#07H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2825							break;
	SYMB	LINE, 2825
	BR	_600
; rs232cmd.c 2826	
; rs232cmd.c 2827					 	case P6dBm:
	SYMB	LINE, 2827
_541:
; rs232cmd.c 2828							level = 6;
	SYMB	LINE, 2828
	MOV.W	R6,#06H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2829							break;
	SYMB	LINE, 2829
	BR	_600
; rs232cmd.c 2830	
; rs232cmd.c 2831					 	case P5dBm:
	SYMB	LINE, 2831
_542:
; rs232cmd.c 2832							level = 5;
	SYMB	LINE, 2832
	MOV.W	R6,#05H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2833							break;
	SYMB	LINE, 2833
	BR	_600
; rs232cmd.c 2834	
; rs232cmd.c 2835					 	case P4dBm:
	SYMB	LINE, 2835
_543:
; rs232cmd.c 2836							level = 4;
	SYMB	LINE, 2836
	MOV.W	R6,#04H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2837							break;
	SYMB	LINE, 2837
	BR	_600
; rs232cmd.c 2838	
; rs232cmd.c 2839					 	case P3dBm:
	SYMB	LINE, 2839
_544:
; rs232cmd.c 2840							level = 3;
	SYMB	LINE, 2840
	MOV.W	R6,#03H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2841							break;
	SYMB	LINE, 2841
	BR	_600
; rs232cmd.c 2842	
; rs232cmd.c 2843					 	case P2dBm:
	SYMB	LINE, 2843
_545:
; rs232cmd.c 2844							level = 2;
	SYMB	LINE, 2844
	MOV.W	R6,#02H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2845							break;
	SYMB	LINE, 2845
	BR	_600
; rs232cmd.c 2846	
; rs232cmd.c 2847					 	case P1dBm:
	SYMB	LINE, 2847
_546:
; rs232cmd.c 2848							level = 1;
	SYMB	LINE, 2848
	MOV.W	R6,#01H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2849							break;
	SYMB	LINE, 2849
	BR	_600
; rs232cmd.c 2850	
; rs232cmd.c 2851					 	case M0dBm:
	SYMB	LINE, 2851
_547:
; rs232cmd.c 2852							level = 0;
	SYMB	LINE, 2852
	MOV.W	R6,#00H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2853							break;
	SYMB	LINE, 2853
	BR	_600
; rs232cmd.c 2854	
; rs232cmd.c 2855					 	case M1dBm:
	SYMB	LINE, 2855
_548:
; rs232cmd.c 2856							level = -1;
	SYMB	LINE, 2856
	MOV.W	R6,#0FFFFH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2857							break;
	SYMB	LINE, 2857
	BR	_600
; rs232cmd.c 2858	
; rs232cmd.c 2859					 	case M2dBm:
	SYMB	LINE, 2859
_549:
; rs232cmd.c 2860							level = -2;
	SYMB	LINE, 2860
	MOV.W	R6,#0FFFEH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2861							break;
	SYMB	LINE, 2861
	BR	_600
; rs232cmd.c 2862	
; rs232cmd.c 2863					 	case M3dBm:
	SYMB	LINE, 2863
_550:
; rs232cmd.c 2864							level = -3;
	SYMB	LINE, 2864
	MOV.W	R6,#0FFFDH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2865							break;
	SYMB	LINE, 2865
	BR	_600
; rs232cmd.c 2866	
; rs232cmd.c 2867					 	case M4dBm:
	SYMB	LINE, 2867
_551:
; rs232cmd.c 2868							level = -4;
	SYMB	LINE, 2868
	MOV.W	R6,#0FFFCH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2869							break;
	SYMB	LINE, 2869
	BR	_600
; rs232cmd.c 2870	
; rs232cmd.c 2871					 	case M5dBm:
	SYMB	LINE, 2871
_552:
; rs232cmd.c 2872							level = -5;
	SYMB	LINE, 2872
	MOV.W	R6,#0FFFBH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2873							break;
	SYMB	LINE, 2873
	BR	_600
; rs232cmd.c 2874	
; rs232cmd.c 2875					 	case M6dBm:
	SYMB	LINE, 2875
_553:
; rs232cmd.c 2876							level = -6;
	SYMB	LINE, 2876
	MOV.W	R6,#0FFFAH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2877							break;
	SYMB	LINE, 2877
	BR	_600
; rs232cmd.c 2878	
; rs232cmd.c 2879					 	case M7dBm:
	SYMB	LINE, 2879
_554:
; rs232cmd.c 2880							level = -7;
	SYMB	LINE, 2880
	MOV.W	R6,#0FFF9H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2881							break;
	SYMB	LINE, 2881
	BR	_600
; rs232cmd.c 2882	
; rs232cmd.c 2883					 	case M8dBm:
	SYMB	LINE, 2883
_555:
; rs232cmd.c 2884							level = -8;
	SYMB	LINE, 2884
	MOV.W	R6,#0FFF8H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2885							break;
	SYMB	LINE, 2885
	BR	_600
; rs232cmd.c 2886	
; rs232cmd.c 2887					 	case M9dBm:
	SYMB	LINE, 2887
_556:
; rs232cmd.c 2888							level = -9;
	SYMB	LINE, 2888
	MOV.W	R6,#0FFF7H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2889							break;
	SYMB	LINE, 2889
	BR	_600
; rs232cmd.c 2890	
; rs232cmd.c 2891					 	case M10dBm:
	SYMB	LINE, 2891
_557:
; rs232cmd.c 2892							level = -10;
	SYMB	LINE, 2892
	MOV.W	R6,#0FFF6H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2893							break;
	SYMB	LINE, 2893
	BR	_600
; rs232cmd.c 2894	
; rs232cmd.c 2895					 	case M11dBm:
	SYMB	LINE, 2895
_558:
; rs232cmd.c 2896							level = -11;
	SYMB	LINE, 2896
	MOV.W	R6,#0FFF5H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2897							break;
	SYMB	LINE, 2897
	BR	_600
; rs232cmd.c 2898	
; rs232cmd.c 2899					 	case M12dBm:
	SYMB	LINE, 2899
_559:
; rs232cmd.c 2900							level = -12;
	SYMB	LINE, 2900
	MOV.W	R6,#0FFF4H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2901							break;
	SYMB	LINE, 2901
	BR	_600
; rs232cmd.c 2902	
; rs232cmd.c 2903					 	case M15dBm:
	SYMB	LINE, 2903
_560:
; rs232cmd.c 2904							level = -15;
	SYMB	LINE, 2904
	MOV.W	R6,#0FFF1H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2905							break;
	SYMB	LINE, 2905
	BR	_600
; rs232cmd.c 2906	
; rs232cmd.c 2907					 	case M18dBm:
	SYMB	LINE, 2907
_561:
; rs232cmd.c 2908							level = -18;
	SYMB	LINE, 2908
	MOV.W	R6,#0FFEEH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2909							break;
	SYMB	LINE, 2909
	BR	_600
; rs232cmd.c 2910	
; rs232cmd.c 2911						case M21dBm:
	SYMB	LINE, 2911
_562:
; rs232cmd.c 2912							level = -21;
	SYMB	LINE, 2912
	MOV.W	R6,#0FFEBH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2913							break;
	SYMB	LINE, 2913
	BR	_600
; rs232cmd.c 2914	
; rs232cmd.c 2915					 	case M24dBm:
	SYMB	LINE, 2915
_563:
; rs232cmd.c 2916							level = -24;
	SYMB	LINE, 2916
	MOV.W	R6,#0FFE8H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2917							break;
	SYMB	LINE, 2917
	BR	_600
; rs232cmd.c 2918	
; rs232cmd.c 2919					 	case M27dBm:
	SYMB	LINE, 2919
_564:
; rs232cmd.c 2920							level = -27;
	SYMB	LINE, 2920
	MOV.W	R6,#0FFE5H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2921							break;
	SYMB	LINE, 2921
	BR	_600
; rs232cmd.c 2922	
; rs232cmd.c 2923					 	case M30dBm:
	SYMB	LINE, 2923
_565:
; rs232cmd.c 2924							level = -30;
	SYMB	LINE, 2924
	MOV.W	R6,#0FFE2H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2925							break;
	SYMB	LINE, 2925
	BR	_600
; rs232cmd.c 2926	
; rs232cmd.c 2927					 	case M33dBm:
	SYMB	LINE, 2927
_566:
; rs232cmd.c 2928							level = -33;
	SYMB	LINE, 2928
	MOV.W	R6,#0FFDFH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2929							break;
	SYMB	LINE, 2929
	BR	_600
; rs232cmd.c 2930	
; rs232cmd.c 2931						case M36dBm:
	SYMB	LINE, 2931
_567:
; rs232cmd.c 2932							level = -36;
	SYMB	LINE, 2932
	MOV.W	R6,#0FFDCH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2933							break;
	SYMB	LINE, 2933
	BR	_600
; rs232cmd.c 2934	
; rs232cmd.c 2935						default:
	SYMB	LINE, 2935
_568:
; rs232cmd.c 2936							str = SILENCEParTxt;
	SYMB	LINE, 2936
	MOV.W	R5,#SEG( _SILENCEParTxt )
	MOV.W	R4,#SOF( _SILENCEParTxt )
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2937	
; rs232cmd.c 2938							while ( *str)
	SYMB	LINE, 2938
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_570
_569:
; rs232cmd.c 2939								rs232putchar( *str++);
	SYMB	LINE, 2939
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2938
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_569
	SYMB	LINE, 2939
_570:
; rs232cmd.c 2940	
; rs232cmd.c 2941							rs232putchar(',');
	SYMB	LINE, 2941
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2942							break;
; rs232cmd.c 2943						}
	SYMB	LINE, 2943
_600:
; rs232cmd.c 2944	
; rs232cmd.c 2945					if ( str == NULL)
	SYMB	LINE, 2945
	OR.W	R5,R4
	BNE	_601
; rs232cmd.c 2946						rs232printf( 6, "%d,", level);
	SYMB	LINE, 2946
	MOV.W	R0,#06H
	PUSH.W	R6
	SYMB	SOFF, 8
	SYMB	LTIM, "level", 26, 0, 77
	MOV.W	R3,#SEG( _533 )
	MOV.W	R2,#SOF( _533 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
_601:
; rs232cmd.c 2947	
; rs232cmd.c 2948					rs232printf( 6, "%d\n", AudioSetup[AnalogAudio].Click);			
	SYMB	LINE, 2948
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _AudioSetup+12 )
	MOV.W	R1,#SOF( _AudioSetup+12 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
; rs232cmd.c 2949				}
; rs232cmd.c 2950			}
; rs232cmd.c 2951		}
	SYMB	LINE, 2951
_605:
; rs232cmd.c 2952	}
	SYMB	LINE, 2952
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2953	
; rs232cmd.c 2954	/**************************************************************************/
; rs232cmd.c 2955	/* AudioGenAnalogSignal		 															 	     RS232CMD.C	*/
; rs232cmd.c 2956	/*																																				*/
; rs232cmd.c 2957	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 2958	/* Revised:		000603				     																					*/
; rs232cmd.c 2959	/*																																				*/
; rs232cmd.c 2960	/* Function:	--																													*/
; rs232cmd.c 2961	/* Remarks:		--																													*/
; rs232cmd.c 2962	/* Returns:		--																													*/
; rs232cmd.c 2963	/* Updates:		--																													*/
; rs232cmd.c 2964	/**************************************************************************/
; rs232cmd.c 2965	void AudioGenAnalogSignal( void)
; rs232cmd.c 2966	{
	ALIGN	1
	SYMB	LINE, 2966
	PUBLIC	_AudioGenAnalogSignal
_AudioGenAnalogSignal:
	SYMB	TYPE, 593, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAnalogSignal", _AudioGenAnalogSignal, #593, 0, 0, 48
	SYMB	ALAB, _AudioGenAnalogSignal, #593
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "signal", -1, #16, 130, 5
	SYMB	LTIM, "signal", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2967		int signal;
; rs232cmd.c 2968		char code *str;
; rs232cmd.c 2969	
; rs232cmd.c 2970		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2970
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_620
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_620
; rs232cmd.c 2971		{
; rs232cmd.c 2972			if ( CmdRequest)
	SYMB	LINE, 2972
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_611
; rs232cmd.c 2973			{
; rs232cmd.c 2974				if ( ParCnt)
	SYMB	LINE, 2974
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_608
; rs232cmd.c 2975					SCPIError = ParNotAllowed;
	SYMB	LINE, 2975
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_620
_608:
; rs232cmd.c 2976				else
; rs232cmd.c 2977				{
; rs232cmd.c 2978					str = AudioSignalPar[AudioSetup[AnalogAudio].Signal].LongName;
	SYMB	LINE, 2978
	MOV.B	ES,#SEG( _AudioSetup+2 )
	MOV.W	R0,#SOF( _AudioSetup+2 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioSignalPar )
	MOV.W	R0,#SOF( _AudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_621
	ADDS.B	CS,#01H
_621:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2979	
; rs232cmd.c 2980					while ( *str)
	SYMB	LINE, 2980
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_610
_609:
; rs232cmd.c 2981						rs232putchar( *str++);
	SYMB	LINE, 2981
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2980
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_609
	SYMB	LINE, 2981
_610:
; rs232cmd.c 2982	
; rs232cmd.c 2983					rs232putchar('\n');
	SYMB	LINE, 2983
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2984				}
; rs232cmd.c 2985			}
	SYMB	LINE, 2985
	BR	_620
_611:
; rs232cmd.c 2986			else
; rs232cmd.c 2987			{
; rs232cmd.c 2988				if ( ParCnt != 1)
	SYMB	LINE, 2988
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_612
; rs232cmd.c 2989					SCPIError = SyntaxErr;
	SYMB	LINE, 2989
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_620
_612:
; rs232cmd.c 2990				else
; rs232cmd.c 2991				{
; rs232cmd.c 2992					signal = FindParameter( Cmd, AudioSignalPar);
	SYMB	LINE, 2992
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AudioSignalPar )
	MOV.W	R2,#SOF( _AudioSignalPar )
	CALL	_FindParameter
	SYMB	LTIM, "signal", 2, 0, 205
; rs232cmd.c 2993		
; rs232cmd.c 2994					if ( signal > -1)
	SYMB	LINE, 2994
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "signal", 2, 0, 77
	SYMB	LTIM, "signal", 6, 0, 205
	BLE	_613
; rs232cmd.c 2995					{
; rs232cmd.c 2996						if ( SetAudioSignal( AnalogAudio, signal) == FAIL)
	SYMB	LINE, 2996
	MOV.W	R0,#00H
	CALL	_SetAudioSignal
	SYMB	LTIM, "signal", 6, 0, 77
	OR.W	R0,R0
	BNE	_620
; rs232cmd.c 2997								SCPIError = ExecErr;
	SYMB	LINE, 2997
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 2998					}
	SYMB	LINE, 2998
	BR	_620
_613:
; rs232cmd.c 2999					else
; rs232cmd.c 3000						SCPIError = DataOutOfRange;
	SYMB	LINE, 3000
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3001				}
; rs232cmd.c 3002			}
; rs232cmd.c 3003		}
	SYMB	LINE, 3003
_620:
; rs232cmd.c 3004	}
	SYMB	LINE, 3004
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3005	
; rs232cmd.c 3006	/**************************************************************************/
; rs232cmd.c 3007	/* AudioGenAnalogLevel																	 	     RS232CMD.C	*/
; rs232cmd.c 3008	/*																																				*/
; rs232cmd.c 3009	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3010	/* Revised:		000705				     																					*/
; rs232cmd.c 3011	/*																																				*/
; rs232cmd.c 3012	/* Function:	--																													*/
; rs232cmd.c 3013	/* Remarks:		--																													*/
; rs232cmd.c 3014	/* Returns:		--																													*/
; rs232cmd.c 3015	/* Updates:		--																													*/
; rs232cmd.c 3016	/**************************************************************************/
; rs232cmd.c 3017	void AudioGenAnalogLevel( void)
; rs232cmd.c 3018	{
	ALIGN	1
	SYMB	LINE, 3018
	PUBLIC	_AudioGenAnalogLevel
_AudioGenAnalogLevel:
	SYMB	TYPE, 594, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAnalogLevel", _AudioGenAnalogLevel, #594, 0, 0, 48
	SYMB	ALAB, _AudioGenAnalogLevel, #594
	RSEG	RS232CMD_IR
	ALIGN	1
__swtable762:
	DW	SOF _657,SEG _657
	DW	SOF _625,SEG _625
	DW	SOF _626,SEG _626
	DW	SOF _627,SEG _627
	DW	SOF _628,SEG _628
	DW	SOF _629,SEG _629
	DW	SOF _630,SEG _630
	DW	SOF _631,SEG _631
	DW	SOF _632,SEG _632
	DW	SOF _633,SEG _633
	DW	SOF _634,SEG _634
	DW	SOF _635,SEG _635
	DW	SOF _636,SEG _636
	DW	SOF _637,SEG _637
	DW	SOF _638,SEG _638
	DW	SOF _639,SEG _639
	DW	SOF _640,SEG _640
	DW	SOF _641,SEG _641
	DW	SOF _642,SEG _642
	DW	SOF _643,SEG _643
	DW	SOF _644,SEG _644
	DW	SOF _645,SEG _645
	DW	SOF _646,SEG _646
	DW	SOF _647,SEG _647
	DW	SOF _648,SEG _648
	DW	SOF _649,SEG _649
	DW	SOF _650,SEG _650
	DW	SOF _651,SEG _651
	DW	SOF _652,SEG _652
	DW	SOF _653,SEG _653
	RSEG	RS232CMD_PR
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0EH
	SYMB	SOFF, 6
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "level", -6, #16, 130, 5
; rs232cmd.c 3019		code char *str;
; rs232cmd.c 3020		int level;
; rs232cmd.c 3021	
; rs232cmd.c 3022		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3022
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_761
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_761
; rs232cmd.c 3023		{
; rs232cmd.c 3024			if ( CmdRequest)
	SYMB	LINE, 3024
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_687
; rs232cmd.c 3025			{
; rs232cmd.c 3026				if ( ParCnt)
	SYMB	LINE, 3026
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_624
; rs232cmd.c 3027					SCPIError = ParNotAllowed;
	SYMB	LINE, 3027
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_761
_624:
; rs232cmd.c 3028				else
; rs232cmd.c 3029				{
; rs232cmd.c 3030					switch ( AudioSetup[AnalogAudio].Level)
	SYMB	LINE, 3030
	MOV.B	ES,#SEG( _AudioSetup+4 )
	MOV.W	R0,#SOF( _AudioSetup+4 )
	MOV.W	R0,[R0]
	ADDS.W	R0,#0FH
	CMP.W	R0,#01DH
	BG	_654
	ASL.W	R0,#02H
	MOV.B	CS,#SEG( __swtable762 )
	ADD.W	R0,#SOF( __swtable762 )
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	RET
; rs232cmd.c 3031					{
; rs232cmd.c 3032					 	case P10dBm:
; rs232cmd.c 3033							level = 10;
; rs232cmd.c 3034							break;
; rs232cmd.c 3035	
; rs232cmd.c 3036					 	case P8dBm:
	SYMB	LINE, 3036
_625:
; rs232cmd.c 3037							level = 8;
	SYMB	LINE, 3037
	MOV.W	[R7],#08H
; rs232cmd.c 3038							break;
	SYMB	LINE, 3038
	BR	_686
; rs232cmd.c 3039	
; rs232cmd.c 3040					 	case P7dBm:
	SYMB	LINE, 3040
_626:
; rs232cmd.c 3041							level = 7;
	SYMB	LINE, 3041
	MOV.W	[R7],#07H
; rs232cmd.c 3042							break;
	SYMB	LINE, 3042
	BR	_686
; rs232cmd.c 3043	
; rs232cmd.c 3044					 	case P6dBm:
	SYMB	LINE, 3044
_627:
; rs232cmd.c 3045							level = 6;
	SYMB	LINE, 3045
	MOV.W	[R7],#06H
; rs232cmd.c 3046							break;
	SYMB	LINE, 3046
	BR	_686
; rs232cmd.c 3047	
; rs232cmd.c 3048					 	case P5dBm:
	SYMB	LINE, 3048
_628:
; rs232cmd.c 3049							level = 5;
	SYMB	LINE, 3049
	MOV.W	[R7],#05H
; rs232cmd.c 3050							break;
	SYMB	LINE, 3050
	BR	_686
; rs232cmd.c 3051	
; rs232cmd.c 3052					 	case P4dBm:
	SYMB	LINE, 3052
_629:
; rs232cmd.c 3053							level = 4;
	SYMB	LINE, 3053
	MOV.W	[R7],#04H
; rs232cmd.c 3054							break;
	SYMB	LINE, 3054
	BR	_686
; rs232cmd.c 3055	
; rs232cmd.c 3056					 	case P3dBm:
	SYMB	LINE, 3056
_630:
; rs232cmd.c 3057							level = 3;
	SYMB	LINE, 3057
	MOV.W	[R7],#03H
; rs232cmd.c 3058							break;
	SYMB	LINE, 3058
	BR	_686
; rs232cmd.c 3059	
; rs232cmd.c 3060					 	case P2dBm:
	SYMB	LINE, 3060
_631:
; rs232cmd.c 3061							level = 2;
	SYMB	LINE, 3061
	MOV.W	[R7],#02H
; rs232cmd.c 3062							break;
	SYMB	LINE, 3062
	BR	_686
; rs232cmd.c 3063	
; rs232cmd.c 3064					 	case P1dBm:
	SYMB	LINE, 3064
_632:
; rs232cmd.c 3065							level = 1;
	SYMB	LINE, 3065
	MOV.W	[R7],#01H
; rs232cmd.c 3066							break;
	SYMB	LINE, 3066
	BR	_686
; rs232cmd.c 3067	
; rs232cmd.c 3068					 	case M0dBm:
	SYMB	LINE, 3068
_633:
; rs232cmd.c 3069							level = 0;
	SYMB	LINE, 3069
	MOV.W	[R7],#00H
; rs232cmd.c 3070							break;
	SYMB	LINE, 3070
	BR	_686
; rs232cmd.c 3071	
; rs232cmd.c 3072					 	case M1dBm:
	SYMB	LINE, 3072
_634:
; rs232cmd.c 3073							level = -1;
	SYMB	LINE, 3073
	MOV.W	[R7],#0FFFFH
; rs232cmd.c 3074							break;
	SYMB	LINE, 3074
	BR	_686
; rs232cmd.c 3075	
; rs232cmd.c 3076					 	case M2dBm:
	SYMB	LINE, 3076
_635:
; rs232cmd.c 3077							level = -2;
	SYMB	LINE, 3077
	MOV.W	[R7],#0FFFEH
; rs232cmd.c 3078							break;
	SYMB	LINE, 3078
	BR	_686
; rs232cmd.c 3079	
; rs232cmd.c 3080					 	case M3dBm:
	SYMB	LINE, 3080
_636:
; rs232cmd.c 3081							level = -3;
	SYMB	LINE, 3081
	MOV.W	[R7],#0FFFDH
; rs232cmd.c 3082							break;
	SYMB	LINE, 3082
	BR	_686
; rs232cmd.c 3083	
; rs232cmd.c 3084					 	case M4dBm:
	SYMB	LINE, 3084
_637:
; rs232cmd.c 3085							level = -4;
	SYMB	LINE, 3085
	MOV.W	[R7],#0FFFCH
; rs232cmd.c 3086							break;
	SYMB	LINE, 3086
	BR	_686
; rs232cmd.c 3087	
; rs232cmd.c 3088					 	case M5dBm:
	SYMB	LINE, 3088
_638:
; rs232cmd.c 3089							level = -5;
	SYMB	LINE, 3089
	MOV.W	[R7],#0FFFBH
; rs232cmd.c 3090							break;
	SYMB	LINE, 3090
	BR	_686
; rs232cmd.c 3091	
; rs232cmd.c 3092					 	case M6dBm:
	SYMB	LINE, 3092
_639:
; rs232cmd.c 3093							level = -6;
	SYMB	LINE, 3093
	MOV.W	[R7],#0FFFAH
; rs232cmd.c 3094							break;
	SYMB	LINE, 3094
	BR	_686
; rs232cmd.c 3095	
; rs232cmd.c 3096					 	case M7dBm:
	SYMB	LINE, 3096
_640:
; rs232cmd.c 3097							level = -7;
	SYMB	LINE, 3097
	MOV.W	[R7],#0FFF9H
; rs232cmd.c 3098							break;
	SYMB	LINE, 3098
	BR	_686
; rs232cmd.c 3099	
; rs232cmd.c 3100					 	case M8dBm:
	SYMB	LINE, 3100
_641:
; rs232cmd.c 3101							level = -8;
	SYMB	LINE, 3101
	MOV.W	[R7],#0FFF8H
; rs232cmd.c 3102							break;
	SYMB	LINE, 3102
	BR	_686
; rs232cmd.c 3103	
; rs232cmd.c 3104					 	case M9dBm:
	SYMB	LINE, 3104
_642:
; rs232cmd.c 3105							level = -9;
	SYMB	LINE, 3105
	MOV.W	[R7],#0FFF7H
; rs232cmd.c 3106							break;
	SYMB	LINE, 3106
	BR	_686
; rs232cmd.c 3107	
; rs232cmd.c 3108					 	case M10dBm:
	SYMB	LINE, 3108
_643:
; rs232cmd.c 3109							level = -10;
	SYMB	LINE, 3109
	MOV.W	[R7],#0FFF6H
; rs232cmd.c 3110							break;
	SYMB	LINE, 3110
	BR	_686
; rs232cmd.c 3111	
; rs232cmd.c 3112					 	case M11dBm:
	SYMB	LINE, 3112
_644:
; rs232cmd.c 3113							level = -11;
	SYMB	LINE, 3113
	MOV.W	[R7],#0FFF5H
; rs232cmd.c 3114							break;
	SYMB	LINE, 3114
	BR	_686
; rs232cmd.c 3115	
; rs232cmd.c 3116					 	case M12dBm:
	SYMB	LINE, 3116
_645:
; rs232cmd.c 3117							level = -12;
	SYMB	LINE, 3117
	MOV.W	[R7],#0FFF4H
; rs232cmd.c 3118							break;
	SYMB	LINE, 3118
	BR	_686
; rs232cmd.c 3119	
; rs232cmd.c 3120					 	case M15dBm:
	SYMB	LINE, 3120
_646:
; rs232cmd.c 3121							level = -15;
	SYMB	LINE, 3121
	MOV.W	[R7],#0FFF1H
; rs232cmd.c 3122							break;
	SYMB	LINE, 3122
	BR	_686
; rs232cmd.c 3123	
; rs232cmd.c 3124					 	case M18dBm:
	SYMB	LINE, 3124
_647:
; rs232cmd.c 3125							level = -18;
	SYMB	LINE, 3125
	MOV.W	[R7],#0FFEEH
; rs232cmd.c 3126							break;
	SYMB	LINE, 3126
	BR	_686
; rs232cmd.c 3127	
; rs232cmd.c 3128						case M21dBm:
	SYMB	LINE, 3128
_648:
; rs232cmd.c 3129							level = -21;
	SYMB	LINE, 3129
	MOV.W	[R7],#0FFEBH
; rs232cmd.c 3130							break;
	SYMB	LINE, 3130
	BR	_686
; rs232cmd.c 3131	
; rs232cmd.c 3132					 	case M24dBm:
	SYMB	LINE, 3132
_649:
; rs232cmd.c 3133							level = -24;
	SYMB	LINE, 3133
	MOV.W	[R7],#0FFE8H
; rs232cmd.c 3134							break;
	SYMB	LINE, 3134
	BR	_686
; rs232cmd.c 3135	
; rs232cmd.c 3136					 	case M27dBm:
	SYMB	LINE, 3136
_650:
; rs232cmd.c 3137							level = -27;
	SYMB	LINE, 3137
	MOV.W	[R7],#0FFE5H
; rs232cmd.c 3138							break;
	SYMB	LINE, 3138
	BR	_686
; rs232cmd.c 3139	
; rs232cmd.c 3140					 	case M30dBm:
	SYMB	LINE, 3140
_651:
; rs232cmd.c 3141							level = -30;
	SYMB	LINE, 3141
	MOV.W	[R7],#0FFE2H
; rs232cmd.c 3142							break;
	SYMB	LINE, 3142
	BR	_686
; rs232cmd.c 3143	
; rs232cmd.c 3144					 	case M33dBm:
	SYMB	LINE, 3144
_652:
; rs232cmd.c 3145							level = -33;
	SYMB	LINE, 3145
	MOV.W	[R7],#0FFDFH
; rs232cmd.c 3146							break;
	SYMB	LINE, 3146
	BR	_686
; rs232cmd.c 3147	
; rs232cmd.c 3148						case M36dBm:
	SYMB	LINE, 3148
_653:
; rs232cmd.c 3149							level = -36;
	SYMB	LINE, 3149
	MOV.W	[R7],#0FFDCH
; rs232cmd.c 3150							break;
	SYMB	LINE, 3150
	BR	_686
; rs232cmd.c 3151	
; rs232cmd.c 3152						default:
	SYMB	LINE, 3152
_654:
; rs232cmd.c 3153							str = SILENCEParTxt;
	SYMB	LINE, 3153
	MOV.W	R5,#SEG( _SILENCEParTxt )
	MOV.W	R4,#SOF( _SILENCEParTxt )
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3154	
; rs232cmd.c 3155							while ( *str)
	SYMB	LINE, 3155
	MOV.B	CS,#SEG( _SILENCEParTxt )
	MOV.W	R0,#SOF( _SILENCEParTxt )
	MOVC.B	R1L,[R0+]
	BEQ	_656
_655:
; rs232cmd.c 3156								rs232putchar( *str++);
	SYMB	LINE, 3156
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3155
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_655
	SYMB	LINE, 3156
_656:
; rs232cmd.c 3157	
; rs232cmd.c 3158							rs232putchar('\n');
	SYMB	LINE, 3158
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3159							return;
	SYMB	LINE, 3159
	BR	_761
	SYMB	LINE, 3032
_657:
	SYMB	LINE, 3033
	MOV.W	[R7],#0AH
; rs232cmd.c 3160						}
	SYMB	LINE, 3160
_686:
; rs232cmd.c 3161	
; rs232cmd.c 3162					rs232printf( 6, "%d\n", level);
	SYMB	LINE, 3162
	MOV.W	R0,#06H
	MOV.W	R1,[R7]
	PUSH.W	R1
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	RSEG	RS232CMD_IR
	ALIGN	1
__swtable767:
	DW	SOF _720,SEG _720
	DW	SOF _721,SEG _721
	DW	SOF _721,SEG _721
	DW	SOF _719,SEG _719
	DW	SOF _721,SEG _721
	DW	SOF _721,SEG _721
	DW	SOF _718,SEG _718
	DW	SOF _721,SEG _721
	DW	SOF _721,SEG _721
	DW	SOF _717,SEG _717
	DW	SOF _721,SEG _721
	DW	SOF _721,SEG _721
	DW	SOF _716,SEG _716
	DW	SOF _721,SEG _721
	DW	SOF _721,SEG _721
	DW	SOF _715,SEG _715
	DW	SOF _721,SEG _721
	DW	SOF _721,SEG _721
	DW	SOF _714,SEG _714
	DW	SOF _721,SEG _721
	DW	SOF _721,SEG _721
	DW	SOF _713,SEG _713
	DW	SOF _721,SEG _721
	DW	SOF _721,SEG _721
	DW	SOF _712,SEG _712
	DW	SOF _711,SEG _711
	DW	SOF _710,SEG _710
	DW	SOF _709,SEG _709
	DW	SOF _708,SEG _708
	DW	SOF _707,SEG _707
	DW	SOF _706,SEG _706
	DW	SOF _705,SEG _705
	DW	SOF _704,SEG _704
	DW	SOF _703,SEG _703
	DW	SOF _702,SEG _702
	DW	SOF _701,SEG _701
	DW	SOF _700,SEG _700
	DW	SOF _699,SEG _699
	DW	SOF _698,SEG _698
	DW	SOF _697,SEG _697
	DW	SOF _696,SEG _696
	DW	SOF _695,SEG _695
	DW	SOF _694,SEG _694
	DW	SOF _693,SEG _693
	DW	SOF _692,SEG _692
	DW	SOF _721,SEG _721
	DW	SOF _722,SEG _722
	RSEG	RS232CMD_PR
	SYMB	SOFF, 6
; rs232cmd.c 3163				}
; rs232cmd.c 3164			}
	SYMB	LINE, 3164
	BR	_761
_687:
; rs232cmd.c 3165			else
; rs232cmd.c 3166			{
; rs232cmd.c 3167				if ( ParCnt != 1)
	SYMB	LINE, 3167
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_688
; rs232cmd.c 3168					SCPIError = SyntaxErr;
	SYMB	LINE, 3168
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_761
_688:
; rs232cmd.c 3169				else
; rs232cmd.c 3170				{
; rs232cmd.c 3171					level = FindParameter( Cmd, AnalogLevelPar);
	SYMB	LINE, 3171
	MOV.W	R3,#SEG( _AnalogLevelPar )
	MOV.W	R2,#SOF( _AnalogLevelPar )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_FindParameter
	MOV.W	[R7],R0
; rs232cmd.c 3172		
; rs232cmd.c 3173					if ( level > -1)
	SYMB	LINE, 3173
	CMP.W	[R7],#0FFFFH
	BLE	_689
; rs232cmd.c 3174						level = AnalogSilence;
	SYMB	LINE, 3174
	MOV.W	[R7],#01FH
	BR	_753
_689:
; rs232cmd.c 3175					else
; rs232cmd.c 3176					{
; rs232cmd.c 3177						if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &level) != 1))
	SYMB	LINE, 3177
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_690
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	MOV.W	R0,R7
	PUSH.W	R0, R1
	SYMB	SOFF, 10
	MOV.W	R1,#SEG( _10 )
	MOV.W	R0,#SOF( _10 )
	PUSH.W	R0, R1
	SYMB	SOFF, 14
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 6
	CMP.W	R0,#01H
	BEQ	_691
_690:
; rs232cmd.c 3178							SCPIError = SyntaxErr;
	SYMB	LINE, 3178
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_753
_691:
; rs232cmd.c 3179						else
; rs232cmd.c 3180						{
; rs232cmd.c 3181							switch ( level)
	SYMB	LINE, 3181
	MOV.W	R1,[R7]
	ADD.W	R1,#024H
	CMP.W	R1,#02EH
	BG	_721
	ASL.W	R1,#02H
	MOV.B	CS,#SEG( __swtable767 )
	ADD.W	R1,#SOF( __swtable767 )
	MOVC.W	R0,[R1+]
	PUSH.W	R0
	MOVC.W	R0,[R1+]
	PUSH.W	R0
	RET
; rs232cmd.c 3182							{
; rs232cmd.c 3183							 	case 10:
; rs232cmd.c 3184									level = P10dBm;
; rs232cmd.c 3185									break;
; rs232cmd.c 3186	
; rs232cmd.c 3187							 	case 8:
	SYMB	LINE, 3187
_692:
; rs232cmd.c 3188									level = P8dBm;
	SYMB	LINE, 3188
	MOV.W	[R7],#02H
; rs232cmd.c 3189									break;
	SYMB	LINE, 3189
	BR	_753
; rs232cmd.c 3190	
; rs232cmd.c 3191							 	case 7:
	SYMB	LINE, 3191
_693:
; rs232cmd.c 3192									level = P7dBm;
	SYMB	LINE, 3192
	MOV.W	[R7],#03H
; rs232cmd.c 3193									break;
	SYMB	LINE, 3193
	BR	_753
; rs232cmd.c 3194	
; rs232cmd.c 3195							 	case 6:
	SYMB	LINE, 3195
_694:
; rs232cmd.c 3196									level = P6dBm;
	SYMB	LINE, 3196
	MOV.W	[R7],#04H
; rs232cmd.c 3197									break;
	SYMB	LINE, 3197
	BR	_753
; rs232cmd.c 3198	
; rs232cmd.c 3199							 	case 5:
	SYMB	LINE, 3199
_695:
; rs232cmd.c 3200									level = P5dBm;
	SYMB	LINE, 3200
	MOV.W	[R7],#05H
; rs232cmd.c 3201									break;
	SYMB	LINE, 3201
	BR	_753
; rs232cmd.c 3202	
; rs232cmd.c 3203							 	case 4:
	SYMB	LINE, 3203
_696:
; rs232cmd.c 3204									level = P4dBm;
	SYMB	LINE, 3204
	MOV.W	[R7],#06H
; rs232cmd.c 3205									break;
	SYMB	LINE, 3205
	BR	_753
; rs232cmd.c 3206	
; rs232cmd.c 3207							 	case 3:
	SYMB	LINE, 3207
_697:
; rs232cmd.c 3208									level = P3dBm;
	SYMB	LINE, 3208
	MOV.W	[R7],#07H
; rs232cmd.c 3209									break;
	SYMB	LINE, 3209
	BR	_753
; rs232cmd.c 3210	
; rs232cmd.c 3211							 	case 2:
	SYMB	LINE, 3211
_698:
; rs232cmd.c 3212									level = P2dBm;
	SYMB	LINE, 3212
	MOV.W	[R7],#08H
; rs232cmd.c 3213									break;
	SYMB	LINE, 3213
	BR	_753
; rs232cmd.c 3214	
; rs232cmd.c 3215							 	case 1:
	SYMB	LINE, 3215
_699:
; rs232cmd.c 3216									level = P1dBm;
	SYMB	LINE, 3216
	MOV.W	[R7],#09H
; rs232cmd.c 3217									break;
	SYMB	LINE, 3217
	BR	_753
; rs232cmd.c 3218	
; rs232cmd.c 3219							 	case 0:
	SYMB	LINE, 3219
_700:
; rs232cmd.c 3220									level = M0dBm;
	SYMB	LINE, 3220
	MOV.W	[R7],#0AH
; rs232cmd.c 3221									break;
	SYMB	LINE, 3221
	BR	_753
; rs232cmd.c 3222	
; rs232cmd.c 3223							 	case -1:
	SYMB	LINE, 3223
_701:
; rs232cmd.c 3224									level = M1dBm;
	SYMB	LINE, 3224
	MOV.W	[R7],#0BH
; rs232cmd.c 3225									break;
	SYMB	LINE, 3225
	BR	_753
; rs232cmd.c 3226	
; rs232cmd.c 3227							 	case -2:
	SYMB	LINE, 3227
_702:
; rs232cmd.c 3228									level = M2dBm;
	SYMB	LINE, 3228
	MOV.W	[R7],#0CH
; rs232cmd.c 3229									break;
	SYMB	LINE, 3229
	BR	_753
; rs232cmd.c 3230	
; rs232cmd.c 3231							 	case -3:
	SYMB	LINE, 3231
_703:
; rs232cmd.c 3232									level = M3dBm;
	SYMB	LINE, 3232
	MOV.W	[R7],#0DH
; rs232cmd.c 3233									break;
	SYMB	LINE, 3233
	BR	_753
; rs232cmd.c 3234	
; rs232cmd.c 3235							 	case -4:
	SYMB	LINE, 3235
_704:
; rs232cmd.c 3236									level = M4dBm;
	SYMB	LINE, 3236
	MOV.W	[R7],#0EH
; rs232cmd.c 3237									break;
	SYMB	LINE, 3237
	BR	_753
; rs232cmd.c 3238	
; rs232cmd.c 3239							 	case -5:
	SYMB	LINE, 3239
_705:
; rs232cmd.c 3240									level = M5dBm;
	SYMB	LINE, 3240
	MOV.W	[R7],#0FH
; rs232cmd.c 3241									break;
	SYMB	LINE, 3241
	BR	_753
; rs232cmd.c 3242	
; rs232cmd.c 3243							 	case -6:
	SYMB	LINE, 3243
_706:
; rs232cmd.c 3244									level = M6dBm;
	SYMB	LINE, 3244
	MOV.W	[R7],#010H
; rs232cmd.c 3245									break;
	SYMB	LINE, 3245
	BR	_753
; rs232cmd.c 3246	
; rs232cmd.c 3247							 	case -7:
	SYMB	LINE, 3247
_707:
; rs232cmd.c 3248									level = M7dBm;
	SYMB	LINE, 3248
	MOV.W	[R7],#011H
; rs232cmd.c 3249									break;
	SYMB	LINE, 3249
	BR	_753
; rs232cmd.c 3250	
; rs232cmd.c 3251							 	case -8:
	SYMB	LINE, 3251
_708:
; rs232cmd.c 3252									level = M8dBm;
	SYMB	LINE, 3252
	MOV.W	[R7],#012H
; rs232cmd.c 3253									break;
	SYMB	LINE, 3253
	BR	_753
; rs232cmd.c 3254	
; rs232cmd.c 3255							 	case -9:
	SYMB	LINE, 3255
_709:
; rs232cmd.c 3256									level = M9dBm;
	SYMB	LINE, 3256
	MOV.W	[R7],#013H
; rs232cmd.c 3257									break;
	SYMB	LINE, 3257
	BR	_753
; rs232cmd.c 3258	
; rs232cmd.c 3259							 	case -10:
	SYMB	LINE, 3259
_710:
; rs232cmd.c 3260									level = M10dBm;
	SYMB	LINE, 3260
	MOV.W	[R7],#014H
; rs232cmd.c 3261									break;
	SYMB	LINE, 3261
	BR	_753
; rs232cmd.c 3262	
; rs232cmd.c 3263							 	case -11:
	SYMB	LINE, 3263
_711:
; rs232cmd.c 3264									level = M11dBm;
	SYMB	LINE, 3264
	MOV.W	[R7],#015H
; rs232cmd.c 3265									break;
	SYMB	LINE, 3265
	BR	_753
; rs232cmd.c 3266	
; rs232cmd.c 3267							 	case -12:
	SYMB	LINE, 3267
_712:
; rs232cmd.c 3268									level = M12dBm;
	SYMB	LINE, 3268
	MOV.W	[R7],#016H
; rs232cmd.c 3269									break;
	SYMB	LINE, 3269
	BR	_753
; rs232cmd.c 3270	
; rs232cmd.c 3271							 	case -15:
	SYMB	LINE, 3271
_713:
; rs232cmd.c 3272									level = M15dBm;
	SYMB	LINE, 3272
	MOV.W	[R7],#017H
; rs232cmd.c 3273									break;
	SYMB	LINE, 3273
	BR	_753
; rs232cmd.c 3274	
; rs232cmd.c 3275							 	case -18:
	SYMB	LINE, 3275
_714:
; rs232cmd.c 3276									level = M18dBm;
	SYMB	LINE, 3276
	MOV.W	[R7],#018H
; rs232cmd.c 3277									break;
	SYMB	LINE, 3277
	BR	_753
; rs232cmd.c 3278	
; rs232cmd.c 3279								case -21:
	SYMB	LINE, 3279
_715:
; rs232cmd.c 3280									level = M21dBm;
	SYMB	LINE, 3280
	MOV.W	[R7],#019H
; rs232cmd.c 3281									break;
	SYMB	LINE, 3281
	BR	_753
; rs232cmd.c 3282	
; rs232cmd.c 3283							 	case -24:
	SYMB	LINE, 3283
_716:
; rs232cmd.c 3284									level = M24dBm;
	SYMB	LINE, 3284
	MOV.W	[R7],#01AH
; rs232cmd.c 3285									break;
	SYMB	LINE, 3285
	BR	_753
; rs232cmd.c 3286	
; rs232cmd.c 3287							 	case -27:
	SYMB	LINE, 3287
_717:
; rs232cmd.c 3288									level = M27dBm;
	SYMB	LINE, 3288
	MOV.W	[R7],#01BH
; rs232cmd.c 3289									break;
	SYMB	LINE, 3289
	BR	_753
; rs232cmd.c 3290	
; rs232cmd.c 3291							 	case -30:
	SYMB	LINE, 3291
_718:
; rs232cmd.c 3292									level = M30dBm;
	SYMB	LINE, 3292
	MOV.W	[R7],#01CH
; rs232cmd.c 3293									break;
	SYMB	LINE, 3293
	BR	_753
; rs232cmd.c 3294	
; rs232cmd.c 3295							 	case -33:
	SYMB	LINE, 3295
_719:
; rs232cmd.c 3296									level = M33dBm;
	SYMB	LINE, 3296
	MOV.W	[R7],#01DH
; rs232cmd.c 3297									break;
	SYMB	LINE, 3297
	BR	_753
; rs232cmd.c 3298	
; rs232cmd.c 3299								case -36:
	SYMB	LINE, 3299
_720:
; rs232cmd.c 3300									level = M36dBm;
	SYMB	LINE, 3300
	MOV.W	[R7],#01EH
; rs232cmd.c 3301									break;
	SYMB	LINE, 3301
	BR	_753
; rs232cmd.c 3302	
; rs232cmd.c 3303								default:
	SYMB	LINE, 3303
_721:
; rs232cmd.c 3304									SCPIError = DataOutOfRange;
	SYMB	LINE, 3304
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3305									return;
	SYMB	LINE, 3305
	BR	_761
	SYMB	LINE, 3183
_722:
	SYMB	LINE, 3184
	MOV.W	[R7],#01H
; rs232cmd.c 3306							}
; rs232cmd.c 3307						}
; rs232cmd.c 3308					}
	SYMB	LINE, 3308
_753:
; rs232cmd.c 3309	
; rs232cmd.c 3310					if ( SetAudioLevel( AnalogAudio, level) == FAIL)
	SYMB	LINE, 3310
	MOV.W	R0,#00H
	MOV.W	R1,[R7]
	CALL	_SetAudioLevel
	OR.W	R0,R0
	BNE	_761
; rs232cmd.c 3311						SCPIError = ExecErr;
	SYMB	LINE, 3311
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3312				}
; rs232cmd.c 3313			}
; rs232cmd.c 3314		}
; rs232cmd.c 3315	}
	SYMB	LINE, 3315
_761:
	ADDS.W	R7,#02H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3316	
; rs232cmd.c 3317	/**************************************************************************/
; rs232cmd.c 3318	/* AudioGenAnalogClick 																	 	     RS232CMD.C	*/
; rs232cmd.c 3319	/*																																				*/
; rs232cmd.c 3320	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3321	/* Revised:		000603				     																					*/
; rs232cmd.c 3322	/*																																				*/
; rs232cmd.c 3323	/* Function:	--																													*/
; rs232cmd.c 3324	/* Remarks:		--																													*/
; rs232cmd.c 3325	/* Returns:		--																													*/
; rs232cmd.c 3326	/* Updates:		--																													*/
; rs232cmd.c 3327	/**************************************************************************/
; rs232cmd.c 3328	void AudioGenAnalogClick( void)
; rs232cmd.c 3329	{
	ALIGN	1
	SYMB	LINE, 3329
	PUBLIC	_AudioGenAnalogClick
_AudioGenAnalogClick:
	SYMB	TYPE, 595, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAnalogClick", _AudioGenAnalogClick, #595, 0, 0, 0
	SYMB	ALAB, _AudioGenAnalogClick, #595
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "click", -2, #16, 130, 5
; rs232cmd.c 3330		int click;
; rs232cmd.c 3331	
; rs232cmd.c 3332		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3332
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_780
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_780
; rs232cmd.c 3333		{
; rs232cmd.c 3334			if ( CmdRequest)
	SYMB	LINE, 3334
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_769
; rs232cmd.c 3335			{
; rs232cmd.c 3336				if ( ParCnt)
	SYMB	LINE, 3336
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_768
; rs232cmd.c 3337					SCPIError = ParNotAllowed;
	SYMB	LINE, 3337
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_780
_768:
; rs232cmd.c 3338				else
; rs232cmd.c 3339					rs232printf( 6, "%d\n", AudioSetup[AnalogAudio].Click);
	SYMB	LINE, 3339
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _AudioSetup+12 )
	MOV.W	R1,#SOF( _AudioSetup+12 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 3340			}
	SYMB	LINE, 3340
	BR	_780
_769:
; rs232cmd.c 3341			else
; rs232cmd.c 3342			{
; rs232cmd.c 3343				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &click) != 1))
	SYMB	LINE, 3343
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_770
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_771
_770:
; rs232cmd.c 3344					SCPIError = SyntaxErr;
	SYMB	LINE, 3344
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_780
_771:
; rs232cmd.c 3345				else {
; rs232cmd.c 3346					if (( click != click1s) && ( click != click3s))
	SYMB	LINE, 3346
	CMP.W	[R7],#01H
	BEQ	_773
	CMP.W	[R7],#03H
	BEQ	_773
; rs232cmd.c 3347						SCPIError = DataOutOfRange;
	SYMB	LINE, 3347
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_780
_773:
; rs232cmd.c 3348					else
; rs232cmd.c 3349					{
; rs232cmd.c 3350						if ( SetAudioClick( AnalogAudio, click) == FAIL)
	SYMB	LINE, 3350
	MOV.W	R0,#00H
	MOV.W	R1,[R7]
	CALL	_SetAudioClick
	OR.W	R0,R0
	BNE	_780
; rs232cmd.c 3351							SCPIError = ExecErr;
	SYMB	LINE, 3351
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3352					}
; rs232cmd.c 3353				}
; rs232cmd.c 3354			}
; rs232cmd.c 3355		}
	SYMB	LINE, 3355
_780:
; rs232cmd.c 3356	}
	SYMB	LINE, 3356
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 3357	
; rs232cmd.c 3358	
; rs232cmd.c 3359	/**************************************************************************/
; rs232cmd.c 3360	/* AudioGenAESEBU																				 	     RS232CMD.C	*/
; rs232cmd.c 3361	/*																																				*/
; rs232cmd.c 3362	/* Author:		Kim Engedahl, DEV, 000526	    															*/
; rs232cmd.c 3363	/* Revised:		000617				     																					*/
; rs232cmd.c 3364	/*																																				*/
; rs232cmd.c 3365	/* Function:	--																													*/
; rs232cmd.c 3366	/* Remarks:		Request only.																								*/
; rs232cmd.c 3367	/* Returns:	  --																													*/
; rs232cmd.c 3368	/* Updates:		--																													*/
; rs232cmd.c 3369	/**************************************************************************/
; rs232cmd.c 3370	void AudioGenAESEBU( void)
; rs232cmd.c 3371	{
	ALIGN	1
	SYMB	LINE, 3371
	PUBLIC	_AudioGenAESEBU
_AudioGenAESEBU:
	SYMB	TYPE, 596, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBU", _AudioGenAESEBU, #596, 0, 0, 112
	SYMB	ALAB, _AudioGenAESEBU, #596
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "level", -1, #16, 130, 5
	SYMB	LTIM, "level", -1, 0, 69
; rs232cmd.c 3372		char code *str;
; rs232cmd.c 3373		int level;
; rs232cmd.c 3374	
; rs232cmd.c 3375		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3375
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_815
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_815
; rs232cmd.c 3376		{
; rs232cmd.c 3377			if ( !CmdRequest)
	SYMB	LINE, 3377
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_786
; rs232cmd.c 3378					SCPIError = SyntaxErr;
	SYMB	LINE, 3378
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_815
_786:
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3379			else
; rs232cmd.c 3380			{
; rs232cmd.c 3381				if ( ParCnt)
	SYMB	LINE, 3381
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_787
; rs232cmd.c 3382					SCPIError = ParNotAllowed;
	SYMB	LINE, 3382
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_815
_787:
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3383				else
; rs232cmd.c 3384				{
; rs232cmd.c 3385					str = AESEBUSystemPar[AudioSetup[AESEBUAudio].System].LongName;
	SYMB	LINE, 3385
	MOV.B	ES,#SEG( _AudioSetup+14 )
	MOV.W	R0,#SOF( _AudioSetup+14 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AESEBUSystemPar )
	MOV.W	R0,#SOF( _AESEBUSystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_816
	ADDS.B	CS,#01H
_816:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3386	
; rs232cmd.c 3387					while ( *str)
	SYMB	LINE, 3387
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_789
_788:
; rs232cmd.c 3388						rs232putchar( *str++);
	SYMB	LINE, 3388
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3387
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_788
	SYMB	LINE, 3388
_789:
; rs232cmd.c 3389	
; rs232cmd.c 3390					rs232putchar( ',');
	SYMB	LINE, 3390
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 3391	
; rs232cmd.c 3392					str = AudioSignalPar[AudioSetup[AESEBUAudio].Signal].LongName;
	SYMB	LINE, 3392
	MOV.B	ES,#SEG( _AudioSetup+16 )
	MOV.W	R0,#SOF( _AudioSetup+16 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOVS.W	R1,#00H
	MOV.W	R5,#SEG( _AudioSignalPar )
	MOV.W	R4,#SOF( _AudioSignalPar )
	SYMB	LTIM, "str", 19, 0, 77
	ADD.W	R4,R0
	ADDC.W	R5,R1
	MOV.B	CS,R5L
	MOVC.W	R0,[R4+]
	CMP.W	R4,#00H
	BNE	_817
	ADDS.B	CS,#01H
_817:
	MOVC.W	R1,[R4+]
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3393	
; rs232cmd.c 3394					while ( *str)
	SYMB	LINE, 3394
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_791
_790:
; rs232cmd.c 3395						rs232putchar( *str++);
	SYMB	LINE, 3395
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3394
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_790
	SYMB	LINE, 3395
_791:
	MOV.B	R0L,#02CH
; rs232cmd.c 3396	
; rs232cmd.c 3397					rs232putchar( ',');
	SYMB	LINE, 3397
	CALL	_rs232putchar
; rs232cmd.c 3398	
; rs232cmd.c 3399					str = NULL;
	SYMB	LINE, 3399
	MOV.W	R5,#00H
	MOV.W	R4,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3400	
; rs232cmd.c 3401					switch ( AudioSetup[AESEBUAudio].Level)
	SYMB	LINE, 3401
	MOV.B	ES,#SEG( _AudioSetup+18 )
	MOV.W	R0,#SOF( _AudioSetup+18 )
	MOV.W	R0,[R0]
	CMP.W	R0,#00H
	BEQ	_792
	CMP.W	R0,#01H
	BEQ	_793
	CMP.W	R0,#02H
	BEQ	_794
	CMP.W	R0,#03H
	BEQ	_795
	CMP.W	R0,#04H
	BEQ	_796
	CMP.W	R0,#05H
	BEQ	_797
	CMP.W	R0,#06H
	BEQ	_798
	BR	_799
; rs232cmd.c 3402					{
; rs232cmd.c 3403						case M0dBFS:
	SYMB	LINE, 3403
_792:
; rs232cmd.c 3404							level = 0;
	SYMB	LINE, 3404
	MOV.W	R6,#00H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3405							break;
	SYMB	LINE, 3405
	BR	_808
; rs232cmd.c 3406	
; rs232cmd.c 3407						case M9dBFS:
	SYMB	LINE, 3407
_793:
; rs232cmd.c 3408							level = -9;
	SYMB	LINE, 3408
	MOV.W	R6,#0FFF7H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3409							break;
	SYMB	LINE, 3409
	BR	_808
; rs232cmd.c 3410	
; rs232cmd.c 3411						case M12dBFS:
	SYMB	LINE, 3411
_794:
; rs232cmd.c 3412							level = -12;
	SYMB	LINE, 3412
	MOV.W	R6,#0FFF4H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3413							break;
	SYMB	LINE, 3413
	BR	_808
; rs232cmd.c 3414	
; rs232cmd.c 3415						case M15dBFS:
	SYMB	LINE, 3415
_795:
; rs232cmd.c 3416							level = -15;
	SYMB	LINE, 3416
	MOV.W	R6,#0FFF1H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3417							break;
	SYMB	LINE, 3417
	BR	_808
; rs232cmd.c 3418	
; rs232cmd.c 3419						case M16dBFS:
	SYMB	LINE, 3419
_796:
; rs232cmd.c 3420							level = -16;
	SYMB	LINE, 3420
	MOV.W	R6,#0FFF0H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3421							break;
	SYMB	LINE, 3421
	BR	_808
; rs232cmd.c 3422	
; rs232cmd.c 3423						case M18dBFS:
	SYMB	LINE, 3423
_797:
; rs232cmd.c 3424							level = -18;
	SYMB	LINE, 3424
	MOV.W	R6,#0FFEEH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3425							break;
	SYMB	LINE, 3425
	BR	_808
; rs232cmd.c 3426	
; rs232cmd.c 3427						case M21dBFS:
	SYMB	LINE, 3427
_798:
; rs232cmd.c 3428							level = -21;
	SYMB	LINE, 3428
	MOV.W	R6,#0FFEBH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3429							break;
	SYMB	LINE, 3429
	BR	_808
; rs232cmd.c 3430	
; rs232cmd.c 3431						default:
	SYMB	LINE, 3431
_799:
; rs232cmd.c 3432							str = SILENCEParTxt;
	SYMB	LINE, 3432
	MOV.W	R5,#SEG( _SILENCEParTxt )
	MOV.W	R4,#SOF( _SILENCEParTxt )
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3433	
; rs232cmd.c 3434							while ( *str)
	SYMB	LINE, 3434
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_801
_800:
; rs232cmd.c 3435								rs232putchar( *str++);
	SYMB	LINE, 3435
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3434
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_800
	SYMB	LINE, 3435
_801:
	MOV.B	R0L,#02CH
; rs232cmd.c 3436	
; rs232cmd.c 3437							rs232putchar( ',');
	SYMB	LINE, 3437
	CALL	_rs232putchar
; rs232cmd.c 3438							break;
; rs232cmd.c 3439						}
	SYMB	LINE, 3439
_808:
; rs232cmd.c 3440	
; rs232cmd.c 3441					if ( str == NULL)
	SYMB	LINE, 3441
	OR.W	R5,R4
	BNE	_809
; rs232cmd.c 3442						rs232printf( 6, "%d,", level);
	SYMB	LINE, 3442
	MOV.W	R0,#06H
	PUSH.W	R6
	SYMB	SOFF, 8
	SYMB	LTIM, "level", 26, 0, 77
	MOV.W	R3,#SEG( _533 )
	MOV.W	R2,#SOF( _533 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
_809:
; rs232cmd.c 3443	
; rs232cmd.c 3444					rs232printf( 6, "%.1f,", AudioSetup[AESEBUAudio].Timing);
	SYMB	LINE, 3444
	MOV.B	ES,#SEG( _AudioSetup+20 )
	MOV.W	R1,#SOF( _AudioSetup+20 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__SPF2DPF
	PUSH.W	R0, R1, R2, R3
	SYMB	SOFF, 14
	MOV.W	R1,#SEG( _785 )
	MOV.W	R0,#SOF( _785 )
	PUSH.W	R0, R1
	SYMB	SOFF, 18
	MOV.W	R0,#06H
	CALL	_rs232printf
	ADD.W	R7,#0CH
	SYMB	SOFF, 6
; rs232cmd.c 3445	
; rs232cmd.c 3446					str = AudioFrequencyPar[AudioSetup[AESEBUAudio].Frequency].LongName;
	SYMB	LINE, 3446
	MOV.B	ES,#SEG( _AudioSetup+24 )
	MOV.W	R0,#SOF( _AudioSetup+24 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioFrequencyPar )
	MOV.W	R0,#SOF( _AudioFrequencyPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R4,[R0+]
	CMP.W	R0,#00H
	BNE	_818
	ADDS.B	CS,#01H
_818:
	MOVC.W	R5,[R0+]
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3447	
; rs232cmd.c 3448					while ( *str)
	SYMB	LINE, 3448
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_811
_810:
; rs232cmd.c 3449						rs232putchar( *str++);
	SYMB	LINE, 3449
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3448
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_810
	SYMB	LINE, 3449
_811:
; rs232cmd.c 3450	
; rs232cmd.c 3451					rs232putchar( ',');
	SYMB	LINE, 3451
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 3452	
; rs232cmd.c 3453					rs232printf( 6, "%d\n", AudioSetup[AESEBUAudio].Click);
	SYMB	LINE, 3453
	MOV.B	ES,#SEG( _AudioSetup+26 )
	MOV.W	R0,#SOF( _AudioSetup+26 )
	MOV.W	R0,[R0]
	PUSH.W	R0
	SYMB	SOFF, 8
	MOV.W	R1,#SEG( _9 )
	MOV.W	R0,#SOF( _9 )
	PUSH.W	R0, R1
	SYMB	SOFF, 12
	MOV.W	R0,#06H
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
; rs232cmd.c 3454				}
; rs232cmd.c 3455			}
; rs232cmd.c 3456		}
	SYMB	LINE, 3456
_815:
; rs232cmd.c 3457	}
	SYMB	LINE, 3457
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3458	
; rs232cmd.c 3459	/**************************************************************************/
; rs232cmd.c 3460	/* AudioGenAESEBUSystem																	 	     RS232CMD.C	*/
; rs232cmd.c 3461	/*																																				*/
; rs232cmd.c 3462	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3463	/* Revised:		000603				     																					*/
; rs232cmd.c 3464	/*																																				*/
; rs232cmd.c 3465	/* Function:	--																													*/
; rs232cmd.c 3466	/* Remarks:		--																													*/
; rs232cmd.c 3467	/* Returns:		--																													*/
; rs232cmd.c 3468	/* Updates:		--																													*/
; rs232cmd.c 3469	/**************************************************************************/
; rs232cmd.c 3470	void AudioGenAESEBUSystem( void)
; rs232cmd.c 3471	{
	ALIGN	1
	SYMB	LINE, 3471
	PUBLIC	_AudioGenAESEBUSystem
_AudioGenAESEBUSystem:
	SYMB	TYPE, 597, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUSystem", _AudioGenAESEBUSystem, #597, 0, 0, 48
	SYMB	ALAB, _AudioGenAESEBUSystem, #597
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 3472		int system;
; rs232cmd.c 3473		char code *str;
; rs232cmd.c 3474	
; rs232cmd.c 3475		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3475
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_831
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_831
; rs232cmd.c 3476		{
; rs232cmd.c 3477			if ( CmdRequest)
	SYMB	LINE, 3477
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_822
; rs232cmd.c 3478			{
; rs232cmd.c 3479				if ( ParCnt)
	SYMB	LINE, 3479
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_819
; rs232cmd.c 3480					SCPIError = ParNotAllowed;
	SYMB	LINE, 3480
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_831
_819:
; rs232cmd.c 3481				else
; rs232cmd.c 3482				{
; rs232cmd.c 3483					str = AESEBUSystemPar[AudioSetup[AESEBUAudio].System].LongName;
	SYMB	LINE, 3483
	MOV.B	ES,#SEG( _AudioSetup+14 )
	MOV.W	R0,#SOF( _AudioSetup+14 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AESEBUSystemPar )
	MOV.W	R0,#SOF( _AESEBUSystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_832
	ADDS.B	CS,#01H
_832:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3484	
; rs232cmd.c 3485					while ( *str)
	SYMB	LINE, 3485
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_821
_820:
; rs232cmd.c 3486						rs232putchar( *str++);
	SYMB	LINE, 3486
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3485
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_820
	SYMB	LINE, 3486
_821:
; rs232cmd.c 3487	
; rs232cmd.c 3488					rs232putchar('\n');
	SYMB	LINE, 3488
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3489				}
; rs232cmd.c 3490			}
	SYMB	LINE, 3490
	BR	_831
_822:
; rs232cmd.c 3491			else
; rs232cmd.c 3492			{
; rs232cmd.c 3493				if ( ParCnt != 1)
	SYMB	LINE, 3493
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_823
; rs232cmd.c 3494					SCPIError = SyntaxErr;
	SYMB	LINE, 3494
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_831
_823:
; rs232cmd.c 3495				else
; rs232cmd.c 3496				{
; rs232cmd.c 3497					system = FindParameter( Cmd, AESEBUSystemPar);
	SYMB	LINE, 3497
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AESEBUSystemPar )
	MOV.W	R2,#SOF( _AESEBUSystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 3498		
; rs232cmd.c 3499					if ( system > -1)
	SYMB	LINE, 3499
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "system", 2, 0, 77
	SYMB	LTIM, "system", 6, 0, 205
	BLE	_824
; rs232cmd.c 3500					{
; rs232cmd.c 3501						if ( SetAudioSystem( AESEBUAudio, system) == FAIL)
	SYMB	LINE, 3501
	MOV.W	R0,#01H
	CALL	_SetAudioSystem
	SYMB	LTIM, "system", 6, 0, 77
	OR.W	R0,R0
	BNE	_831
; rs232cmd.c 3502							SCPIError = ExecErr;
	SYMB	LINE, 3502
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3503					}
	SYMB	LINE, 3503
	BR	_831
_824:
; rs232cmd.c 3504					else
; rs232cmd.c 3505						SCPIError = DataOutOfRange;
	SYMB	LINE, 3505
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3506				}
; rs232cmd.c 3507			}
; rs232cmd.c 3508		}
	SYMB	LINE, 3508
_831:
; rs232cmd.c 3509	}
	SYMB	LINE, 3509
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3510	
; rs232cmd.c 3511	/**************************************************************************/
; rs232cmd.c 3512	/* AudioGenAESEBUSignal		 															 	     RS232CMD.C	*/
; rs232cmd.c 3513	/*																																				*/
; rs232cmd.c 3514	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3515	/* Revised:		000603				     																					*/
; rs232cmd.c 3516	/*																																				*/
; rs232cmd.c 3517	/* Function:	--																													*/
; rs232cmd.c 3518	/* Remarks:		--																													*/
; rs232cmd.c 3519	/* Returns:		--																													*/
; rs232cmd.c 3520	/* Updates:		--																													*/
; rs232cmd.c 3521	/**************************************************************************/
; rs232cmd.c 3522	void AudioGenAESEBUSignal( void)
; rs232cmd.c 3523	{
	ALIGN	1
	SYMB	LINE, 3523
	PUBLIC	_AudioGenAESEBUSignal
_AudioGenAESEBUSignal:
	SYMB	TYPE, 598, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUSignal", _AudioGenAESEBUSignal, #598, 0, 0, 48
	SYMB	ALAB, _AudioGenAESEBUSignal, #598
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "signal", -1, #16, 130, 5
	SYMB	LTIM, "signal", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 3524		int signal;
; rs232cmd.c 3525		char code *str;
; rs232cmd.c 3526	
; rs232cmd.c 3527		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3527
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_847
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_847
; rs232cmd.c 3528		{
; rs232cmd.c 3529			if ( CmdRequest)
	SYMB	LINE, 3529
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_838
; rs232cmd.c 3530			{
; rs232cmd.c 3531				if ( ParCnt)
	SYMB	LINE, 3531
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_835
; rs232cmd.c 3532					SCPIError = ParNotAllowed;
	SYMB	LINE, 3532
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_847
_835:
; rs232cmd.c 3533				else
; rs232cmd.c 3534				{
; rs232cmd.c 3535					str = AudioSignalPar[AudioSetup[AESEBUAudio].Signal].LongName;
	SYMB	LINE, 3535
	MOV.B	ES,#SEG( _AudioSetup+16 )
	MOV.W	R0,#SOF( _AudioSetup+16 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioSignalPar )
	MOV.W	R0,#SOF( _AudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_848
	ADDS.B	CS,#01H
_848:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3536	
; rs232cmd.c 3537					while ( *str)
	SYMB	LINE, 3537
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_837
_836:
; rs232cmd.c 3538						rs232putchar( *str++);
	SYMB	LINE, 3538
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3537
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_836
	SYMB	LINE, 3538
_837:
; rs232cmd.c 3539	
; rs232cmd.c 3540					rs232putchar('\n');
	SYMB	LINE, 3540
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3541				}
; rs232cmd.c 3542			}
	SYMB	LINE, 3542
	BR	_847
_838:
; rs232cmd.c 3543			else
; rs232cmd.c 3544			{
; rs232cmd.c 3545				if ( ParCnt != 1)
	SYMB	LINE, 3545
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_839
; rs232cmd.c 3546					SCPIError = SyntaxErr;
	SYMB	LINE, 3546
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_847
_839:
; rs232cmd.c 3547				else
; rs232cmd.c 3548				{
; rs232cmd.c 3549					signal = FindParameter( Cmd, AudioSignalPar);
	SYMB	LINE, 3549
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AudioSignalPar )
	MOV.W	R2,#SOF( _AudioSignalPar )
	CALL	_FindParameter
	SYMB	LTIM, "signal", 2, 0, 205
; rs232cmd.c 3550		
; rs232cmd.c 3551					if ( signal > -1)
	SYMB	LINE, 3551
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "signal", 2, 0, 77
	SYMB	LTIM, "signal", 6, 0, 205
	BLE	_840
; rs232cmd.c 3552					{
; rs232cmd.c 3553						if ( SetAudioSignal( AESEBUAudio, signal) == FAIL)
	SYMB	LINE, 3553
	MOV.W	R0,#01H
	CALL	_SetAudioSignal
	SYMB	LTIM, "signal", 6, 0, 77
	OR.W	R0,R0
	BNE	_847
; rs232cmd.c 3554							SCPIError = ExecErr;
	SYMB	LINE, 3554
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3555					}
	SYMB	LINE, 3555
	BR	_847
_840:
; rs232cmd.c 3556					else
; rs232cmd.c 3557						SCPIError = DataOutOfRange;
	SYMB	LINE, 3557
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3558				}
; rs232cmd.c 3559			}
; rs232cmd.c 3560		}
	SYMB	LINE, 3560
_847:
; rs232cmd.c 3561	}
	SYMB	LINE, 3561
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3562	
; rs232cmd.c 3563	/**************************************************************************/
; rs232cmd.c 3564	/* AudioGenAESEBULevel 																	 	     RS232CMD.C	*/
; rs232cmd.c 3565	/*																																				*/
; rs232cmd.c 3566	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3567	/* Revised:		0000628				     																					*/
; rs232cmd.c 3568	/*																																				*/
; rs232cmd.c 3569	/* Function:	--																													*/
; rs232cmd.c 3570	/* Remarks:		--																													*/
; rs232cmd.c 3571	/* Returns:		--																													*/
; rs232cmd.c 3572	/* Updates:		--																													*/
; rs232cmd.c 3573	/**************************************************************************/
; rs232cmd.c 3574	void AudioGenAESEBULevel( void)
; rs232cmd.c 3575	{
	ALIGN	1
	SYMB	LINE, 3575
	PUBLIC	_AudioGenAESEBULevel
_AudioGenAESEBULevel:
	SYMB	TYPE, 599, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBULevel", _AudioGenAESEBULevel, #599, 0, 0, 48
	SYMB	ALAB, _AudioGenAESEBULevel, #599
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0EH
	SYMB	SOFF, 6
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "level", -6, #16, 130, 5
; rs232cmd.c 3576		code char *str;
; rs232cmd.c 3577		int level;
; rs232cmd.c 3578	
; rs232cmd.c 3579		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3579
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_896
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_896
; rs232cmd.c 3580		{
; rs232cmd.c 3581			if ( CmdRequest)
	SYMB	LINE, 3581
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_868
; rs232cmd.c 3582			{
; rs232cmd.c 3583				if ( ParCnt)
	SYMB	LINE, 3583
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_851
; rs232cmd.c 3584					SCPIError = ParNotAllowed;
	SYMB	LINE, 3584
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_896
_851:
; rs232cmd.c 3585				else
; rs232cmd.c 3586				{
; rs232cmd.c 3587					switch ( AudioSetup[AESEBUAudio].Level)
	SYMB	LINE, 3587
	MOV.B	ES,#SEG( _AudioSetup+18 )
	MOV.W	R0,#SOF( _AudioSetup+18 )
	MOV.W	R0,[R0]
	CMP.W	R0,#00H
	BEQ	_861
	CMP.W	R0,#01H
	BEQ	_852
	CMP.W	R0,#02H
	BEQ	_853
	CMP.W	R0,#03H
	BEQ	_854
	CMP.W	R0,#04H
	BEQ	_855
	CMP.W	R0,#05H
	BEQ	_856
	CMP.W	R0,#06H
	BEQ	_857
	BR	_858
; rs232cmd.c 3588					{
; rs232cmd.c 3589						case M0dBFS:
; rs232cmd.c 3590							level = 0;
; rs232cmd.c 3591							break;
; rs232cmd.c 3592	
; rs232cmd.c 3593						case M9dBFS:
	SYMB	LINE, 3593
_852:
; rs232cmd.c 3594							level = -9;
	SYMB	LINE, 3594
	MOV.W	[R7],#0FFF7H
; rs232cmd.c 3595							break;
	SYMB	LINE, 3595
	BR	_867
; rs232cmd.c 3596	
; rs232cmd.c 3597						case M12dBFS:
	SYMB	LINE, 3597
_853:
; rs232cmd.c 3598							level = -12;
	SYMB	LINE, 3598
	MOV.W	[R7],#0FFF4H
; rs232cmd.c 3599							break;
	SYMB	LINE, 3599
	BR	_867
; rs232cmd.c 3600	
; rs232cmd.c 3601						case M15dBFS:
	SYMB	LINE, 3601
_854:
; rs232cmd.c 3602							level = -15;
	SYMB	LINE, 3602
	MOV.W	[R7],#0FFF1H
; rs232cmd.c 3603							break;
	SYMB	LINE, 3603
	BR	_867
; rs232cmd.c 3604	
; rs232cmd.c 3605						case M16dBFS:
	SYMB	LINE, 3605
_855:
; rs232cmd.c 3606							level = -16;
	SYMB	LINE, 3606
	MOV.W	[R7],#0FFF0H
; rs232cmd.c 3607							break;
	SYMB	LINE, 3607
	BR	_867
; rs232cmd.c 3608	
; rs232cmd.c 3609						case M18dBFS:
	SYMB	LINE, 3609
_856:
; rs232cmd.c 3610							level = -18;
	SYMB	LINE, 3610
	MOV.W	[R7],#0FFEEH
; rs232cmd.c 3611							break;
	SYMB	LINE, 3611
	BR	_867
; rs232cmd.c 3612	
; rs232cmd.c 3613						case M21dBFS:
	SYMB	LINE, 3613
_857:
; rs232cmd.c 3614							level = -21;
	SYMB	LINE, 3614
	MOV.W	[R7],#0FFEBH
; rs232cmd.c 3615							break;
	SYMB	LINE, 3615
	BR	_867
; rs232cmd.c 3616	
; rs232cmd.c 3617						default:
	SYMB	LINE, 3617
_858:
; rs232cmd.c 3618							str = SILENCEParTxt;
	SYMB	LINE, 3618
	MOV.W	R5,#SEG( _SILENCEParTxt )
	MOV.W	R4,#SOF( _SILENCEParTxt )
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3619	
; rs232cmd.c 3620							while ( *str)
	SYMB	LINE, 3620
	MOV.B	CS,#SEG( _SILENCEParTxt )
	MOV.W	R0,#SOF( _SILENCEParTxt )
	MOVC.B	R1L,[R0+]
	BEQ	_860
_859:
; rs232cmd.c 3621								rs232putchar( *str++);
	SYMB	LINE, 3621
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3620
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_859
	SYMB	LINE, 3621
_860:
; rs232cmd.c 3622	
; rs232cmd.c 3623							rs232putchar('\n');
	SYMB	LINE, 3623
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3624							return;
	SYMB	LINE, 3624
	BR	_896
	SYMB	LINE, 3589
_861:
	SYMB	LINE, 3590
	MOV.W	[R7],#00H
; rs232cmd.c 3625						}
	SYMB	LINE, 3625
_867:
; rs232cmd.c 3626	
; rs232cmd.c 3627					rs232printf( 6, "%d\n", level);
	SYMB	LINE, 3627
	MOV.W	R0,#06H
	MOV.W	R1,[R7]
	PUSH.W	R1
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
; rs232cmd.c 3628				}
; rs232cmd.c 3629			}
	SYMB	LINE, 3629
	BR	_896
_868:
; rs232cmd.c 3630			else
; rs232cmd.c 3631			{
; rs232cmd.c 3632				if ( ParCnt != 1)
	SYMB	LINE, 3632
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_869
; rs232cmd.c 3633					SCPIError = SyntaxErr;
	SYMB	LINE, 3633
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_896
_869:
; rs232cmd.c 3634				else
; rs232cmd.c 3635				{
; rs232cmd.c 3636					level = FindParameter( Cmd, AESEBULevelPar);
	SYMB	LINE, 3636
	MOV.W	R3,#SEG( _AESEBULevelPar )
	MOV.W	R2,#SOF( _AESEBULevelPar )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_FindParameter
	MOV.W	[R7],R0
; rs232cmd.c 3637		
; rs232cmd.c 3638					if ( level > -1)
	SYMB	LINE, 3638
	CMP.W	[R7],#0FFFFH
	BLE	_870
; rs232cmd.c 3639						level = AESEBUSilence;
	SYMB	LINE, 3639
	MOV.W	[R7],#07H
	BR	_888
_870:
; rs232cmd.c 3640					else
; rs232cmd.c 3641					{
; rs232cmd.c 3642						if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &level) != 1))
	SYMB	LINE, 3642
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_871
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	MOV.W	R0,R7
	PUSH.W	R0, R1
	SYMB	SOFF, 10
	MOV.W	R1,#SEG( _10 )
	MOV.W	R0,#SOF( _10 )
	PUSH.W	R0, R1
	SYMB	SOFF, 14
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 6
	CMP.W	R0,#01H
	BEQ	_872
_871:
; rs232cmd.c 3643							SCPIError = SyntaxErr;
	SYMB	LINE, 3643
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_888
_872:
; rs232cmd.c 3644						else {
; rs232cmd.c 3645							switch ( level)
	SYMB	LINE, 3645
	CMP.W	[R7],#00H
	BEQ	_880
	CMP.W	[R7],#0FFF7H
	BEQ	_873
	CMP.W	[R7],#0FFF4H
	BEQ	_874
	CMP.W	[R7],#0FFF1H
	BEQ	_875
	CMP.W	[R7],#0FFF0H
	BEQ	_876
	CMP.W	[R7],#0FFEEH
	BEQ	_877
	CMP.W	[R7],#0FFEBH
	BEQ	_878
	BR	_879
; rs232cmd.c 3646							{
; rs232cmd.c 3647								case 0:
; rs232cmd.c 3648									level = M0dBFS;
; rs232cmd.c 3649									break;
; rs232cmd.c 3650	
; rs232cmd.c 3651							 	case -9:
	SYMB	LINE, 3651
_873:
; rs232cmd.c 3652									level = M9dBFS;
	SYMB	LINE, 3652
	MOV.W	[R7],#01H
; rs232cmd.c 3653									break;
	SYMB	LINE, 3653
	BR	_888
; rs232cmd.c 3654	
; rs232cmd.c 3655							 	case -12:
	SYMB	LINE, 3655
_874:
; rs232cmd.c 3656									level = M12dBFS;
	SYMB	LINE, 3656
	MOV.W	[R7],#02H
; rs232cmd.c 3657									break;
	SYMB	LINE, 3657
	BR	_888
; rs232cmd.c 3658	
; rs232cmd.c 3659							 	case -15:
	SYMB	LINE, 3659
_875:
; rs232cmd.c 3660									level = M15dBFS;
	SYMB	LINE, 3660
	MOV.W	[R7],#03H
; rs232cmd.c 3661									break;
	SYMB	LINE, 3661
	BR	_888
; rs232cmd.c 3662	
; rs232cmd.c 3663							 	case -16:
	SYMB	LINE, 3663
_876:
; rs232cmd.c 3664									level = M16dBFS;
	SYMB	LINE, 3664
	MOV.W	[R7],#04H
; rs232cmd.c 3665									break;
	SYMB	LINE, 3665
	BR	_888
; rs232cmd.c 3666	
; rs232cmd.c 3667							 	case -18:
	SYMB	LINE, 3667
_877:
; rs232cmd.c 3668									level = M18dBFS;
	SYMB	LINE, 3668
	MOV.W	[R7],#05H
; rs232cmd.c 3669									break;
	SYMB	LINE, 3669
	BR	_888
; rs232cmd.c 3670	
; rs232cmd.c 3671							 	case -21:
	SYMB	LINE, 3671
_878:
; rs232cmd.c 3672									level = M21dBFS;
	SYMB	LINE, 3672
	MOV.W	[R7],#06H
; rs232cmd.c 3673									break;
	SYMB	LINE, 3673
	BR	_888
; rs232cmd.c 3674	
; rs232cmd.c 3675								default:
	SYMB	LINE, 3675
_879:
; rs232cmd.c 3676									SCPIError = DataOutOfRange;
	SYMB	LINE, 3676
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3677									return;
	SYMB	LINE, 3677
	BR	_896
	SYMB	LINE, 3647
_880:
	SYMB	LINE, 3648
	MOV.W	[R7],#00H
; rs232cmd.c 3678							}
; rs232cmd.c 3679						}
; rs232cmd.c 3680					}
	SYMB	LINE, 3680
_888:
; rs232cmd.c 3681	
; rs232cmd.c 3682					if ( SetAudioLevel( AESEBUAudio, level) == FAIL)
	SYMB	LINE, 3682
	MOV.W	R0,#01H
	MOV.W	R1,[R7]
	CALL	_SetAudioLevel
	OR.W	R0,R0
	BNE	_896
; rs232cmd.c 3683						SCPIError = ExecErr;
	SYMB	LINE, 3683
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3684				}
; rs232cmd.c 3685			}
; rs232cmd.c 3686		}
; rs232cmd.c 3687	}
	SYMB	LINE, 3687
_896:
	ADDS.W	R7,#02H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3688	
; rs232cmd.c 3689	/**************************************************************************/
; rs232cmd.c 3690	/* AudioGenAESEBUTiming	 																 	     RS232CMD.C	*/
; rs232cmd.c 3691	/*																																				*/
; rs232cmd.c 3692	/* Author:		Kim Engedahl, DEV, 000616	    															*/
; rs232cmd.c 3693	/* Revised:		000616				     																					*/
; rs232cmd.c 3694	/*																																				*/
; rs232cmd.c 3695	/* Function:	--																													*/
; rs232cmd.c 3696	/* Remarks:		--																													*/
; rs232cmd.c 3697	/* Returns:		--																													*/
; rs232cmd.c 3698	/* Updates:		--																													*/
; rs232cmd.c 3699	/**************************************************************************/
; rs232cmd.c 3700	void AudioGenAESEBUTiming( void)
; rs232cmd.c 3701	{
	ALIGN	1
	SYMB	LINE, 3701
	PUBLIC	_AudioGenAESEBUTiming
_AudioGenAESEBUTiming:
	SYMB	TYPE, 600, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUTiming", _AudioGenAESEBUTiming, #600, 0, 0, 112
	SYMB	ALAB, _AudioGenAESEBUTiming, #600
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#014H
	SYMB	SOFF, 26
	SYMB	IDEN, "timing", -10, #10, 130, 5
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; rs232cmd.c 3702		float timing;
; rs232cmd.c 3703		int tmp;
; rs232cmd.c 3704	
; rs232cmd.c 3705		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3705
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_918
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_918
; rs232cmd.c 3706		{
; rs232cmd.c 3707			if ( CmdRequest)
	SYMB	LINE, 3707
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_907
; rs232cmd.c 3708			{
; rs232cmd.c 3709				if ( ParCnt)
	SYMB	LINE, 3709
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_906
; rs232cmd.c 3710					SCPIError = ParNotAllowed;
	SYMB	LINE, 3710
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_918
_906:
; rs232cmd.c 3711				else
; rs232cmd.c 3712					rs232printf( 6, "%.1f\n", AudioSetup[AESEBUAudio].Timing);
	SYMB	LINE, 3712
	MOV.B	ES,#SEG( _AudioSetup+20 )
	MOV.W	R1,#SOF( _AudioSetup+20 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__SPF2DPF
	PUSH.W	R0, R1, R2, R3
	SYMB	SOFF, 34
	MOV.W	R1,#SEG( _901 )
	MOV.W	R0,#SOF( _901 )
	PUSH.W	R0, R1
	SYMB	SOFF, 38
	MOV.W	R0,#06H
	CALL	_rs232printf
	ADD.W	R7,#0CH
	SYMB	SOFF, 26
; rs232cmd.c 3713			}
	SYMB	LINE, 3713
	BR	_918
_907:
; rs232cmd.c 3714			else
; rs232cmd.c 3715			{
; rs232cmd.c 3716				if (( ParCnt != 1) || ( sscanf( Cmd, "%f", &timing) != 1))
	SYMB	LINE, 3716
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_908
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+16
	PUSH.W	R2, R3
	SYMB	SOFF, 30
	MOV.W	R3,#SEG( _902 )
	MOV.W	R2,#SOF( _902 )
	PUSH.W	R2, R3
	SYMB	SOFF, 34
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 26
	CMP.W	R0,#01H
	BEQ	_909
_908:
; rs232cmd.c 3717					SCPIError = SyntaxErr;
	SYMB	LINE, 3717
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_918
_909:
; rs232cmd.c 3718				else
; rs232cmd.c 3719				{
; rs232cmd.c 3720					tmp = (int)(( timing / 0.8) + 0.5 - ( 1*( timing < 0)));
	SYMB	LINE, 3720
	MOV.W	R1,[R7+18]
	MOV.W	R0,[R7+16]
	FCALL	__SPF2DPF
	MOV.W	[R7+14],#03FE9H
	MOV.W	[R7+12],#09999H
	MOV.W	[R7+10],#09999H
	MOV.W	[R7+8],#0999AH
	LEA	R6,R7+8
	FCALL	__DIV_DPF
	MOV.W	[R7+14],#03FE0H
	MOV.W	[R7+12],#00H
	MOV.W	[R7+10],#00H
	MOV.W	[R7+8],#00H
	LEA	R6,R7+8
	FCALL	__ADD_DPF
	MOV.W	[R7+6],R3
	MOV.W	[R7+4],R2
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.W	R1,[R7+18]
	MOV.W	R0,[R7+16]
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	FCALL	__CMP_SPF
	CMP.B	R0L,#0FFH
	BNE	_921
	MOVS.W	R0,#00H
	MOVS.W	R1,#00H
	MOVS.W	R2,#00H
	MOV.W	R3,#03FF0H
	BR	_922
_921:
	MOVS.W	R0,#00H
	MOVS.W	R1,#00H
	MOVS.W	R2,#00H
	MOVS.W	R3,#00H
_922:
	MOV.W	R6,R7
	FCALL	__SUBR_DPF
	FCALL	__DPF2S
	SYMB	LTIM, "tmp", 2, 0, 205
; rs232cmd.c 3721	
; rs232cmd.c 3722					if (( tmp < -12) || ( tmp > 13))
	SYMB	LINE, 3722
	CMP.W	R0,#0FFF4H
	BLT	_910
	CMP.W	R0,#0DH
	BLE	_911
_910:
; rs232cmd.c 3723						SCPIError = DataOutOfRange;
	SYMB	LINE, 3723
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_918
_911:
; rs232cmd.c 3724					else
; rs232cmd.c 3725					{
; rs232cmd.c 3726						if ( SetAudioTiming( AESEBUAudio, timing) == FAIL)
	SYMB	LINE, 3726
	MOV.W	R0,#01H
	SYMB	LTIM, "tmp", 2, 0, 77
	MOV.W	R3,[R7+18]
	MOV.W	R2,[R7+16]
	CALL	_SetAudioTiming
	OR.W	R0,R0
	BNE	_918
; rs232cmd.c 3727							SCPIError = ExecErr;
	SYMB	LINE, 3727
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3728					}
; rs232cmd.c 3729				}
; rs232cmd.c 3730			}
; rs232cmd.c 3731		}
	SYMB	LINE, 3731
_918:
; rs232cmd.c 3732	}
	SYMB	LINE, 3732
	ADD.W	R7,#014H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 3733	
; rs232cmd.c 3734	/**************************************************************************/
; rs232cmd.c 3735	/* AudioGenAESEBUWordClock	 														 	     RS232CMD.C	*/
; rs232cmd.c 3736	/*																																				*/
; rs232cmd.c 3737	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3738	/* Revised:		000603				     																					*/
; rs232cmd.c 3739	/*																																				*/
; rs232cmd.c 3740	/* Function:	--																													*/
; rs232cmd.c 3741	/* Remarks:		--																													*/
; rs232cmd.c 3742	/* Returns:		--																													*/
; rs232cmd.c 3743	/* Updates:		--																													*/
; rs232cmd.c 3744	/**************************************************************************/
; rs232cmd.c 3745	void AudioGenAESEBUWordClock( void)
; rs232cmd.c 3746	{
	ALIGN	1
	SYMB	LINE, 3746
	PUBLIC	_AudioGenAESEBUWordClock
_AudioGenAESEBUWordClock:
	SYMB	TYPE, 601, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUWordClock", _AudioGenAESEBUWordClock, #601, 0, 0, 48
	SYMB	ALAB, _AudioGenAESEBUWordClock, #601
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "frequency", -1, #16, 130, 5
	SYMB	LTIM, "frequency", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 3747		int frequency;
; rs232cmd.c 3748		char code *str;
; rs232cmd.c 3749	
; rs232cmd.c 3750		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3750
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_937
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_937
; rs232cmd.c 3751		{
; rs232cmd.c 3752			if ( CmdRequest)
	SYMB	LINE, 3752
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_928
; rs232cmd.c 3753			{
; rs232cmd.c 3754				if ( ParCnt)
	SYMB	LINE, 3754
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_925
; rs232cmd.c 3755					SCPIError = ParNotAllowed;
	SYMB	LINE, 3755
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_937
_925:
; rs232cmd.c 3756				else
; rs232cmd.c 3757				{
; rs232cmd.c 3758					str = AudioFrequencyPar[AudioSetup[AESEBUAudio].Frequency].LongName;
	SYMB	LINE, 3758
	MOV.B	ES,#SEG( _AudioSetup+24 )
	MOV.W	R0,#SOF( _AudioSetup+24 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioFrequencyPar )
	MOV.W	R0,#SOF( _AudioFrequencyPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_938
	ADDS.B	CS,#01H
_938:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3759	
; rs232cmd.c 3760					while ( *str)
	SYMB	LINE, 3760
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_927
_926:
; rs232cmd.c 3761						rs232putchar( *str++);
	SYMB	LINE, 3761
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3760
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_926
	SYMB	LINE, 3761
_927:
; rs232cmd.c 3762	
; rs232cmd.c 3763					rs232putchar('\n');
	SYMB	LINE, 3763
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3764				}
; rs232cmd.c 3765			}
	SYMB	LINE, 3765
	BR	_937
_928:
; rs232cmd.c 3766			else
; rs232cmd.c 3767			{
; rs232cmd.c 3768				if ( ParCnt != 1)
	SYMB	LINE, 3768
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_929
; rs232cmd.c 3769					SCPIError = SyntaxErr;
	SYMB	LINE, 3769
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_937
_929:
; rs232cmd.c 3770				else
; rs232cmd.c 3771				{
; rs232cmd.c 3772					frequency = FindParameter( Cmd, AudioFrequencyPar);
	SYMB	LINE, 3772
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AudioFrequencyPar )
	MOV.W	R2,#SOF( _AudioFrequencyPar )
	CALL	_FindParameter
	SYMB	LTIM, "frequency", 2, 0, 205
; rs232cmd.c 3773		
; rs232cmd.c 3774					if ( frequency > -1)
	SYMB	LINE, 3774
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "frequency", 2, 0, 77
	SYMB	LTIM, "frequency", 6, 0, 205
	BLE	_930
; rs232cmd.c 3775					{
; rs232cmd.c 3776						if ( SetAudioWordClock( AESEBUAudio, frequency) == FAIL)
	SYMB	LINE, 3776
	MOV.W	R0,#01H
	CALL	_SetAudioWordClock
	SYMB	LTIM, "frequency", 6, 0, 77
	OR.W	R0,R0
	BNE	_937
; rs232cmd.c 3777							SCPIError = ExecErr;
	SYMB	LINE, 3777
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3778					}
	SYMB	LINE, 3778
	BR	_937
_930:
; rs232cmd.c 3779					else
; rs232cmd.c 3780						SCPIError = DataOutOfRange;
	SYMB	LINE, 3780
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3781				}
; rs232cmd.c 3782			}
; rs232cmd.c 3783		}
	SYMB	LINE, 3783
_937:
; rs232cmd.c 3784	}
	SYMB	LINE, 3784
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3785	
; rs232cmd.c 3786	/**************************************************************************/
; rs232cmd.c 3787	/* AudioGenAESEBUClick	 																 	     RS232CMD.C	*/
; rs232cmd.c 3788	/*																																				*/
; rs232cmd.c 3789	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3790	/* Revised:		000603				     																					*/
; rs232cmd.c 3791	/*																																				*/
; rs232cmd.c 3792	/* Function:	--																													*/
; rs232cmd.c 3793	/* Remarks:		--																													*/
; rs232cmd.c 3794	/* Returns:		--																													*/
; rs232cmd.c 3795	/* Updates:		--																													*/
; rs232cmd.c 3796	/**************************************************************************/
; rs232cmd.c 3797	void AudioGenAESEBUClick( void)
; rs232cmd.c 3798	{
	ALIGN	1
	SYMB	LINE, 3798
	PUBLIC	_AudioGenAESEBUClick
_AudioGenAESEBUClick:
	SYMB	TYPE, 602, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUClick", _AudioGenAESEBUClick, #602, 0, 0, 0
	SYMB	ALAB, _AudioGenAESEBUClick, #602
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "click", -2, #16, 130, 5
; rs232cmd.c 3799		int click;
; rs232cmd.c 3800	
; rs232cmd.c 3801		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3801
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_953
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_953
; rs232cmd.c 3802		{
; rs232cmd.c 3803			if ( CmdRequest)
	SYMB	LINE, 3803
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_942
; rs232cmd.c 3804			{
; rs232cmd.c 3805				if ( ParCnt)
	SYMB	LINE, 3805
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_941
; rs232cmd.c 3806					SCPIError = ParNotAllowed;
	SYMB	LINE, 3806
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_953
_941:
; rs232cmd.c 3807				else
; rs232cmd.c 3808					rs232printf( 6, "%d\n", AudioSetup[AESEBUAudio].Click);
	SYMB	LINE, 3808
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _AudioSetup+26 )
	MOV.W	R1,#SOF( _AudioSetup+26 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 3809			}
	SYMB	LINE, 3809
	BR	_953
_942:
; rs232cmd.c 3810			else
; rs232cmd.c 3811			{
; rs232cmd.c 3812				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &click) != 1))
	SYMB	LINE, 3812
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_943
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_944
_943:
; rs232cmd.c 3813					SCPIError = SyntaxErr;
	SYMB	LINE, 3813
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_953
_944:
; rs232cmd.c 3814				else
; rs232cmd.c 3815				{
; rs232cmd.c 3816					if (( click != click1s) && ( click != click3s))
	SYMB	LINE, 3816
	CMP.W	[R7],#01H
	BEQ	_946
	CMP.W	[R7],#03H
	BEQ	_946
; rs232cmd.c 3817						SCPIError = DataOutOfRange;
	SYMB	LINE, 3817
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_953
_946:
; rs232cmd.c 3818					else
; rs232cmd.c 3819					{
; rs232cmd.c 3820						if ( SetAudioClick( AESEBUAudio, click) == FAIL)
	SYMB	LINE, 3820
	MOV.W	R0,#01H
	MOV.W	R1,[R7]
	CALL	_SetAudioClick
	OR.W	R0,R0
	BNE	_953
; rs232cmd.c 3821							SCPIError = ExecErr;
	SYMB	LINE, 3821
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3822					}
; rs232cmd.c 3823				}
; rs232cmd.c 3824			}
; rs232cmd.c 3825		}
	SYMB	LINE, 3825
_953:
; rs232cmd.c 3826	}
	SYMB	LINE, 3826
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 3827	
; rs232cmd.c 3828	/**************************************************************************/
; rs232cmd.c 3829	/* FactPassword																					 	     RS232CMD.C	*/
; rs232cmd.c 3830	/*																																				*/
; rs232cmd.c 3831	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3832	/* Revised:	  000614				     																					*/
; rs232cmd.c 3833	/*																																				*/
; rs232cmd.c 3834	/* Function:	--																													*/
; rs232cmd.c 3835	/* Remarks:		--																													*/
; rs232cmd.c 3836	/* Returns:		--																													*/
; rs232cmd.c 3837	/* Updates:		--																													*/
; rs232cmd.c 3838	/**************************************************************************/
; rs232cmd.c 3839	void FactPassword( void)
; rs232cmd.c 3840	{
	ALIGN	1
	SYMB	LINE, 3840
	PUBLIC	_FactPassword
_FactPassword:
	SYMB	TYPE, 603, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactPassword", _FactPassword, #603, 0, 0, 0
	SYMB	ALAB, _FactPassword, #603
; rs232cmd.c 3841		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3841
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_974
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_974
; rs232cmd.c 3842		{
; rs232cmd.c 3843			if ( CmdRequest)
	SYMB	LINE, 3843
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_963
; rs232cmd.c 3844			{
; rs232cmd.c 3845				if ( ParCnt)
	SYMB	LINE, 3845
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_961
; rs232cmd.c 3846					SCPIError = ParNotAllowed;
	SYMB	LINE, 3846
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_961:
; rs232cmd.c 3847				else
; rs232cmd.c 3848				{
; rs232cmd.c 3849					if ( PasswordProtected)
	SYMB	LINE, 3849
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BEQ	_962
; rs232cmd.c 3850						rs232puts( "ON\n");
	SYMB	LINE, 3850
	MOV.W	R1,#SEG( _958 )
	MOV.W	R0,#SOF( _958 )
	CALL	_rs232puts
	RET
_962:
; rs232cmd.c 3851					else
; rs232cmd.c 3852						rs232puts( "OFF\n");
	SYMB	LINE, 3852
	MOV.W	R1,#SEG( _959 )
	MOV.W	R0,#SOF( _959 )
	CALL	_rs232puts
; rs232cmd.c 3853				}
; rs232cmd.c 3854			}
	SYMB	LINE, 3854
	RET
_963:
; rs232cmd.c 3855			else
; rs232cmd.c 3856			{
; rs232cmd.c 3857				if ( ParCnt != 1)
	SYMB	LINE, 3857
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_964
; rs232cmd.c 3858					SCPIError = SyntaxErr;
	SYMB	LINE, 3858
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_964:
; rs232cmd.c 3859				else
; rs232cmd.c 3860				{
; rs232cmd.c 3861					if ( !strcmp( Cmd, "ON"))
	SYMB	LINE, 3861
	MOV.W	R3,#SEG( _960 )
	MOV.W	R2,#SOF( _960 )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_strcmp
	OR.W	R0,R0
	BNE	_965
; rs232cmd.c 3862						PasswordProtected = true;
	SYMB	LINE, 3862
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	[R0],#0FFFFH
	RET
_965:
; rs232cmd.c 3863					else
; rs232cmd.c 3864						if ( !Cstrcmp( Cmd, PasswordText))
	SYMB	LINE, 3864
	MOV.W	R3,#SEG( _PasswordText )
	MOV.W	R2,#SOF( _PasswordText )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_Cstrcmp
	OR.W	R0,R0
	BNE	_966
; rs232cmd.c 3865							PasswordProtected = false;
	SYMB	LINE, 3865
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	[R0],#00H
	RET
_966:
; rs232cmd.c 3866					else
; rs232cmd.c 3867						SCPIError = IllegalParValue;
	SYMB	LINE, 3867
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#023H
; rs232cmd.c 3868				}
; rs232cmd.c 3869			}
; rs232cmd.c 3870		}
	SYMB	LINE, 3870
_974:
; rs232cmd.c 3871	}
	SYMB	LINE, 3871
	RET
	SYMB	EFUN
; rs232cmd.c 3872	
; rs232cmd.c 3873	/**************************************************************************/
; rs232cmd.c 3874	/* FactReset																						 	     RS232CMD.C	*/
; rs232cmd.c 3875	/*																																				*/
; rs232cmd.c 3876	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 3877	/* Revised:	  000914				     																					*/
; rs232cmd.c 3878	/*																																				*/
; rs232cmd.c 3879	/* Function:	--																													*/
; rs232cmd.c 3880	/* Remarks:		--																													*/
; rs232cmd.c 3881	/* Returns:		--																													*/
; rs232cmd.c 3882	/* Updates:		--																													*/
; rs232cmd.c 3883	/**************************************************************************/
; rs232cmd.c 3884	void FactReset( void)
; rs232cmd.c 3885	{
	ALIGN	1
	SYMB	LINE, 3885
	PUBLIC	_FactReset
_FactReset:
	SYMB	TYPE, 604, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactReset", _FactReset, #604, 0, 0, 16
	SYMB	ALAB, _FactReset, #604
	PUSH.W	R4
	SYMB	SOFF, 2
	SYMB	IDEN, "i", -1, #16, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
; rs232cmd.c 3886		int i;
; rs232cmd.c 3887	
; rs232cmd.c 3888		if ( !PasswordProtected)
	SYMB	LINE, 3888
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_983
; rs232cmd.c 3889		{
; rs232cmd.c 3890			if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3890
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_983
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_983
; rs232cmd.c 3891			{
; rs232cmd.c 3892				if ( CmdRequest)
	SYMB	LINE, 3892
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_976
; rs232cmd.c 3893						SCPIError = SyntaxErr;
	SYMB	LINE, 3893
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_983
_976:
; rs232cmd.c 3894				else
; rs232cmd.c 3895				{
; rs232cmd.c 3896					if ( ParCnt)
	SYMB	LINE, 3896
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_977
; rs232cmd.c 3897						SCPIError = SyntaxErr;
	SYMB	LINE, 3897
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_983
_977:
; rs232cmd.c 3898					else
; rs232cmd.c 3899					{
; rs232cmd.c 3900						GenlockDefaults();				// 
	SYMB	LINE, 3900
	CALL	_GenlockDefaults
; rs232cmd.c 3901						BBDefaults();				 			// 
	SYMB	LINE, 3901
	CALL	_BBDefaults
; rs232cmd.c 3902						CBDefaults();				 			//
	SYMB	LINE, 3902
	CALL	_CBDefaults
; rs232cmd.c 3903						AudioDefaults();				 	//
	SYMB	LINE, 3903
	CALL	_AudioDefaults
; rs232cmd.c 3904	
; rs232cmd.c 3905						GenlockInit();	 		 			// init the genlock setup
	SYMB	LINE, 3905
	CALL	_GenlockInit
; rs232cmd.c 3906						BBInit();						 			// init the black burst setups
	SYMB	LINE, 3906
	CALL	_BBInit
; rs232cmd.c 3907						CBInit();						 			// init the colorbar generator (PAL,EBU ColorBar)
	SYMB	LINE, 3907
	CALL	_CBInit
; rs232cmd.c 3908						AudioInit();				 			// init the audio setup, (this includes an AudioTimer)				
	SYMB	LINE, 3908
	CALL	_AudioInit
; rs232cmd.c 3909	
; rs232cmd.c 3910						GenlockUpdate();	 			 	// update the genlock setup.
	SYMB	LINE, 3910
	CALL	_GenlockUpdate
; rs232cmd.c 3911						CBUpdate();							 	// update the colorbar generator (PAL,EBU ColorBar)
	SYMB	LINE, 3911
	CALL	_CBUpdate
; rs232cmd.c 3912						BBUpdate();							 	// update the black burst setups
	SYMB	LINE, 3912
	CALL	_BBUpdate
; rs232cmd.c 3913						AudioUpdate();					 	// update the audio setup
	SYMB	LINE, 3913
	CALL	_AudioUpdate
; rs232cmd.c 3914	
; rs232cmd.c 3915						for ( i = 1; i <= NoOfPresets; i++)
	SYMB	LINE, 3915
	MOV.W	R4,#01H
	SYMB	LTIM, "i", 18, 0, 205
_978:
; rs232cmd.c 3916							StorePreset( i);
	SYMB	LINE, 3916
	MOV.W	R0,R4
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 2, 0, 205
	CALL	_StorePreset
	SYMB	LTIM, "i", 2, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
	SYMB	LINE, 3915
	ADDS.W	R4,#01H
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
	CMP.W	R4,#04H
	BLE	_978
; rs232cmd.c 3917	
; rs232cmd.c 3918						Settings.ActivePreset = 0;
	SYMB	LINE, 3918
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.W	[R0],#00H
; rs232cmd.c 3919						NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 3919
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	CALL	_NV_Store
; rs232cmd.c 3920					}
; rs232cmd.c 3921				}
; rs232cmd.c 3922			}
; rs232cmd.c 3923		}
	SYMB	LINE, 3923
_983:
; rs232cmd.c 3924	}
	SYMB	LINE, 3924
	POP.W	R4
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	EFUN
; rs232cmd.c 3925	
; rs232cmd.c 3926	/**************************************************************************/
; rs232cmd.c 3927	/* FactV24Command																				 	     RS232CMD.C	*/
; rs232cmd.c 3928	/*																																				*/
; rs232cmd.c 3929	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3930	/* Revised:	  000614				     																					*/
; rs232cmd.c 3931	/*																																				*/
; rs232cmd.c 3932	/* Function:	--																													*/
; rs232cmd.c 3933	/* Remarks:		--																													*/
; rs232cmd.c 3934	/* Returns:		--																													*/
; rs232cmd.c 3935	/* Updates:		--																													*/
; rs232cmd.c 3936	/**************************************************************************/
; rs232cmd.c 3937	void FactV24Command( void)
; rs232cmd.c 3938	{
	ALIGN	1
	SYMB	LINE, 3938
	PUBLIC	_FactV24Command
_FactV24Command:
	SYMB	TYPE, 605, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactV24Command", _FactV24Command, #605, 0, 0, 48
	SYMB	ALAB, _FactV24Command, #605
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#03EH
	SYMB	SOFF, 66
	SYMB	IDEN, "address", -66, #3, 130, 5
	SYMB	TYPE, 606, 'Z', #2, 29
	SYMB	IDEN, "command", -64, #606, 130, 5
	SYMB	IDEN, "result", -34, #606, 130, 5
; rs232cmd.c 3939		UC address;
; rs232cmd.c 3940		char command[30], result[30];;
; rs232cmd.c 3941	
; rs232cmd.c 3942		if ( !PasswordProtected)
	SYMB	LINE, 3942
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1000
; rs232cmd.c 3943		{
; rs232cmd.c 3944			if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3944
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1000
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1000
; rs232cmd.c 3945			{
; rs232cmd.c 3946				if ( CmdRequest)
	SYMB	LINE, 3946
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_988
; rs232cmd.c 3947					SCPIError = SyntaxErr;
	SYMB	LINE, 3947
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1000
_988:
; rs232cmd.c 3948				else
; rs232cmd.c 3949				{
; rs232cmd.c 3950					if (( ParCnt != 2) || ( sscanf( Cmd, "%d,%s", &address, command) != 2))
	SYMB	LINE, 3950
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_989
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	PUSH.W	R4, R5
	SYMB	SOFF, 70
	PUSH.W	R2, R3
	SYMB	SOFF, 74
	MOV.W	R3,#SEG( _985 )
	MOV.W	R2,#SOF( _985 )
	PUSH.W	R2, R3
	SYMB	SOFF, 78
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 66
	CMP.W	R0,#02H
	BEQ	_990
_989:
; rs232cmd.c 3951						SCPIError = SyntaxErr;
	SYMB	LINE, 3951
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1000
_990:
; rs232cmd.c 3952					else
; rs232cmd.c 3953					{
; rs232cmd.c 3954						if ( command[2] == '?')
	SYMB	LINE, 3954
	CMP.B	[R7+4],#03FH
	BNE	_992
; rs232cmd.c 3955						{
; rs232cmd.c 3956							if ( sio0SndRequest( 12, address, result, "%s", command) == OK)
	SYMB	LINE, 3956
	MOV.W	R0,#0CH
	MOV.B	R1L,[R7]
	MOVS.B	R1H,#00H
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+32
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+2
	PUSH.W	R2, R3
	SYMB	SOFF, 70
	MOV.W	R3,#SEG( _986 )
	MOV.W	R2,#SOF( _986 )
	PUSH.W	R2, R3
	SYMB	SOFF, 74
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_sio0SndRequest
	ADD.W	R7,#08H
	SYMB	SOFF, 66
	CMP.W	R0,#0FFFFH
	BNE	_991
; rs232cmd.c 3957								rs232puts( result);
	SYMB	LINE, 3957
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
	BR	_1000
_991:
; rs232cmd.c 3958							else
; rs232cmd.c 3959								SCPIError = ExecErr;
	SYMB	LINE, 3959
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3960						}
	SYMB	LINE, 3960
	BR	_1000
_992:
; rs232cmd.c 3961						else
; rs232cmd.c 3962						{
; rs232cmd.c 3963							if ( sio0SndCommand( 20, address, "%s;", command) == FAIL)
	SYMB	LINE, 3963
	MOV.W	R0,#014H
	MOV.B	R1L,[R7]
	MOVS.B	R1H,#00H
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+2
	PUSH.W	R2, R3
	SYMB	SOFF, 70
	MOV.W	R3,#SEG( _987 )
	MOV.W	R2,#SOF( _987 )
	PUSH.W	R2, R3
	SYMB	SOFF, 74
	CALL	_sio0SndCommand
	ADD.W	R7,#08H
	SYMB	SOFF, 66
	OR.W	R0,R0
	BNE	_1000
; rs232cmd.c 3964								SCPIError = ExecErr;
	SYMB	LINE, 3964
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3965						}
; rs232cmd.c 3966					}
; rs232cmd.c 3967				}
; rs232cmd.c 3968			}
; rs232cmd.c 3969		}
	SYMB	LINE, 3969
_1000:
; rs232cmd.c 3970	}
	SYMB	LINE, 3970
	ADD.W	R7,#03EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 3971	
; rs232cmd.c 3972	/**************************************************************************/
; rs232cmd.c 3973	/* FactV24Transparent																		 	     RS232CMD.C	*/
; rs232cmd.c 3974	/*																																				*/
; rs232cmd.c 3975	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 3976	/* Revised:	  000614				     																					*/
; rs232cmd.c 3977	/*																																				*/
; rs232cmd.c 3978	/* Function:	--																													*/
; rs232cmd.c 3979	/* Remarks:		--																													*/
; rs232cmd.c 3980	/* Returns:		--																													*/
; rs232cmd.c 3981	/* Updates:		--																													*/
; rs232cmd.c 3982	/**************************************************************************/
; rs232cmd.c 3983	void FactV24Transparent( void)
; rs232cmd.c 3984	{
	ALIGN	1
	SYMB	LINE, 3984
	PUBLIC	_FactV24Transparent
_FactV24Transparent:
	SYMB	TYPE, 608, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactV24Transparent", _FactV24Transparent, #608, 0, 0, 0
	SYMB	ALAB, _FactV24Transparent, #608
	SYMB	IDEN, "unit", -1, #16, 130, 5
	SYMB	LTIM, "unit", -1, 0, 69
; rs232cmd.c 3985		int unit;
; rs232cmd.c 3986	
; rs232cmd.c 3987		if ( !PasswordProtected)
	SYMB	LINE, 3987
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1011
; rs232cmd.c 3988		{
; rs232cmd.c 3989			if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3989
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1011
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1011
; rs232cmd.c 3990			{
; rs232cmd.c 3991				if ( CmdRequest)
	SYMB	LINE, 3991
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1005
; rs232cmd.c 3992					SCPIError = SyntaxErr;
	SYMB	LINE, 3992
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_1005:
; rs232cmd.c 3993				else
; rs232cmd.c 3994				{
; rs232cmd.c 3995					unit = FindParameter( Cmd, UnitPar);
	SYMB	LINE, 3995
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _UnitPar )
	MOV.W	R2,#SOF( _UnitPar )
	CALL	_FindParameter
	SYMB	LTIM, "unit", 2, 0, 205
; rs232cmd.c 3996		
; rs232cmd.c 3997					if ( unit > -1)
	SYMB	LINE, 3997
	CMP.W	R0,#0FFFFH
	BLE	_1006
; rs232cmd.c 3998						BBSPGCommunication( unit);
	SYMB	LINE, 3998
	CALL	_BBSPGCommunication
	SYMB	LTIM, "unit", 2, 0, 77
	RET
_1006:
; rs232cmd.c 3999					else
; rs232cmd.c 4000						SCPIError = DataOutOfRange;
	SYMB	LINE, 4000
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 4001				}
; rs232cmd.c 4002			}
; rs232cmd.c 4003		}
	SYMB	LINE, 4003
_1011:
; rs232cmd.c 4004	}
	SYMB	LINE, 4004
	RET
	SYMB	EFUN
; rs232cmd.c 4005	
; rs232cmd.c 4006	/**************************************************************************/
; rs232cmd.c 4007	/* FactChecksumCode																			 	     RS232CMD.C	*/
; rs232cmd.c 4008	/*																																				*/
; rs232cmd.c 4009	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4010	/* Revised:	  000705			     																						*/
; rs232cmd.c 4011	/*																																				*/
; rs232cmd.c 4012	/* Function:	--																													*/
; rs232cmd.c 4013	/* Remarks:		--																													*/
; rs232cmd.c 4014	/* Returns:		--																													*/
; rs232cmd.c 4015	/* Updates:		--																													*/
; rs232cmd.c 4016	/**************************************************************************/
; rs232cmd.c 4017	void FactChecksumCode( void)
; rs232cmd.c 4018	{
	ALIGN	1
	SYMB	LINE, 4018
	PUBLIC	_FactChecksumCode
_FactChecksumCode:
	SYMB	TYPE, 609, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumCode", _FactChecksumCode, #609, 0, 0, 48
	SYMB	ALAB, _FactChecksumCode, #609
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4019		char buffer[30];
; rs232cmd.c 4020	
; rs232cmd.c 4021		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4021
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1019
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1019
; rs232cmd.c 4022		{
; rs232cmd.c 4023			if ( CmdRequest)
	SYMB	LINE, 4023
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1015
; rs232cmd.c 4024			{
; rs232cmd.c 4025				if ( ParCnt)
	SYMB	LINE, 4025
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1014
; rs232cmd.c 4026					SCPIError = SyntaxErr;
	SYMB	LINE, 4026
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1019
_1014:
; rs232cmd.c 4027				else
; rs232cmd.c 4028				{		
; rs232cmd.c 4029					sprintf( buffer, "%u\n", ROMChecksum( StartOfPROMCode, StartOfPROMCode+SizeOfPROMCode-1));
	SYMB	LINE, 4029
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	MOV.W	R3,#03H
	MOV.W	R2,#0FFFFH
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 34
; rs232cmd.c 4030					rs232puts( buffer);
	SYMB	LINE, 4030
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4031				}
; rs232cmd.c 4032			}
	SYMB	LINE, 4032
	BR	_1019
_1015:
; rs232cmd.c 4033			else
; rs232cmd.c 4034				SCPIError = SyntaxErr;
	SYMB	LINE, 4034
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4035		}
	SYMB	LINE, 4035
_1019:
; rs232cmd.c 4036	}
	SYMB	LINE, 4036
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4037	
; rs232cmd.c 4038	/**************************************************************************/
; rs232cmd.c 4039	/* FactChecksumPLD																			 	     RS232CMD.C	*/
; rs232cmd.c 4040	/*																																				*/
; rs232cmd.c 4041	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4042	/* Revised:	  000705			     																						*/
; rs232cmd.c 4043	/*																																				*/
; rs232cmd.c 4044	/* Function:	--																													*/
; rs232cmd.c 4045	/* Remarks:		--																													*/
; rs232cmd.c 4046	/* Returns:		--																													*/
; rs232cmd.c 4047	/* Updates:		--																													*/
; rs232cmd.c 4048	/**************************************************************************/
; rs232cmd.c 4049	void FactChecksumPLD( void)
; rs232cmd.c 4050	{
	ALIGN	1
	SYMB	LINE, 4050
	PUBLIC	_FactChecksumPLD
_FactChecksumPLD:
	SYMB	TYPE, 610, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumPLD", _FactChecksumPLD, #610, 0, 0, 48
	SYMB	ALAB, _FactChecksumPLD, #610
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4051		char buffer[30];
; rs232cmd.c 4052	
; rs232cmd.c 4053		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4053
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1025
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1025
; rs232cmd.c 4054		{
; rs232cmd.c 4055			if ( CmdRequest)
	SYMB	LINE, 4055
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1021
; rs232cmd.c 4056			{
; rs232cmd.c 4057				if ( ParCnt)
	SYMB	LINE, 4057
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1020
; rs232cmd.c 4058					SCPIError = SyntaxErr;
	SYMB	LINE, 4058
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1025
_1020:
; rs232cmd.c 4059				else
; rs232cmd.c 4060				{		
; rs232cmd.c 4061					sprintf( buffer, "%u\n", ROMChecksum( StartOfPLDCode, StartOfPLDCode+SizeOfPLDCode-1));
	SYMB	LINE, 4061
	MOV.W	R1,#04H
	MOV.W	R0,#00H
	MOV.W	R3,#04H
	MOV.W	R2,#09FFFH
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 34
; rs232cmd.c 4062					rs232puts( buffer);
	SYMB	LINE, 4062
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4063				}
; rs232cmd.c 4064			}
	SYMB	LINE, 4064
	BR	_1025
_1021:
; rs232cmd.c 4065			else
; rs232cmd.c 4066				SCPIError = SyntaxErr;
	SYMB	LINE, 4066
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4067		}
	SYMB	LINE, 4067
_1025:
; rs232cmd.c 4068	}
	SYMB	LINE, 4068
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4069	
; rs232cmd.c 4070	/**************************************************************************/
; rs232cmd.c 4071	/* FactChecksumEmbAudio																	 	     RS232CMD.C	*/
; rs232cmd.c 4072	/*																																				*/
; rs232cmd.c 4073	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4074	/* Revised:	  000705			     																						*/
; rs232cmd.c 4075	/*																																				*/
; rs232cmd.c 4076	/* Function:	--																													*/
; rs232cmd.c 4077	/* Remarks:		--																													*/
; rs232cmd.c 4078	/* Returns:		--																													*/
; rs232cmd.c 4079	/* Updates:		--																													*/
; rs232cmd.c 4080	/**************************************************************************/
; rs232cmd.c 4081	void FactChecksumEmbAudio( void)
; rs232cmd.c 4082	{
	ALIGN	1
	SYMB	LINE, 4082
	PUBLIC	_FactChecksumEmbAudio
_FactChecksumEmbAudio:
	SYMB	TYPE, 611, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumEmbAudio", _FactChecksumEmbAudio, #611, 0, 0, 48
	SYMB	ALAB, _FactChecksumEmbAudio, #611
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4083		char buffer[30];
; rs232cmd.c 4084	
; rs232cmd.c 4085		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4085
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1031
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1031
; rs232cmd.c 4086		{
; rs232cmd.c 4087			if ( CmdRequest)
	SYMB	LINE, 4087
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1027
; rs232cmd.c 4088			{
; rs232cmd.c 4089				if ( ParCnt)
	SYMB	LINE, 4089
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1026
; rs232cmd.c 4090					SCPIError = SyntaxErr;
	SYMB	LINE, 4090
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1031
_1026:
; rs232cmd.c 4091				else
; rs232cmd.c 4092				{		
; rs232cmd.c 4093					sprintf( buffer, "%u\n", ROMChecksum( StartOfEmbAudioCode, StartOfEmbAudioCode+SizeOfEmbAudioCode-1));
	SYMB	LINE, 4093
	MOV.W	R1,#04H
	MOV.W	R0,#0A000H
	MOV.W	R3,#04H
	MOV.W	R2,#0C3FFH
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 34
; rs232cmd.c 4094					rs232puts( buffer);
	SYMB	LINE, 4094
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4095				}
; rs232cmd.c 4096			}
	SYMB	LINE, 4096
	BR	_1031
_1027:
; rs232cmd.c 4097			else
; rs232cmd.c 4098				SCPIError = SyntaxErr;
	SYMB	LINE, 4098
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4099		}
	SYMB	LINE, 4099
_1031:
; rs232cmd.c 4100	}
	SYMB	LINE, 4100
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4101	
; rs232cmd.c 4102	/**************************************************************************/
; rs232cmd.c 4103	/* FactChecksumPattern																	 	     RS232CMD.C	*/
; rs232cmd.c 4104	/*																																				*/
; rs232cmd.c 4105	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4106	/* Revised:	  000705			     																						*/
; rs232cmd.c 4107	/*																																				*/
; rs232cmd.c 4108	/* Function:	--																													*/
; rs232cmd.c 4109	/* Remarks:		--																													*/
; rs232cmd.c 4110	/* Returns:		--																													*/
; rs232cmd.c 4111	/* Updates:		--																													*/
; rs232cmd.c 4112	/**************************************************************************/
; rs232cmd.c 4113	void FactChecksumPattern( void)
; rs232cmd.c 4114	{
	ALIGN	1
	SYMB	LINE, 4114
	PUBLIC	_FactChecksumPattern
_FactChecksumPattern:
	SYMB	TYPE, 612, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumPattern", _FactChecksumPattern, #612, 0, 0, 48
	SYMB	ALAB, _FactChecksumPattern, #612
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4115		char buffer[30];
; rs232cmd.c 4116	
; rs232cmd.c 4117		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4117
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1037
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1037
; rs232cmd.c 4118		{
; rs232cmd.c 4119			if ( CmdRequest)
	SYMB	LINE, 4119
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1033
; rs232cmd.c 4120			{
; rs232cmd.c 4121				if ( ParCnt)
	SYMB	LINE, 4121
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1032
; rs232cmd.c 4122					SCPIError = SyntaxErr;
	SYMB	LINE, 4122
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1037
_1032:
; rs232cmd.c 4123				else
; rs232cmd.c 4124				{		
; rs232cmd.c 4125					sprintf( buffer, "%u\n", ROMChecksum( StartOfCBVideoCode, StartOfCBVideoCode+SizeOfCBVideoCode-1));
	SYMB	LINE, 4125
	MOV.W	R1,#05H
	MOV.W	R0,#00H
	MOV.W	R3,#07H
	MOV.W	R2,#0FFFFH
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 34
; rs232cmd.c 4126					rs232puts( buffer);
	SYMB	LINE, 4126
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4127				}
; rs232cmd.c 4128			}
	SYMB	LINE, 4128
	BR	_1037
_1033:
; rs232cmd.c 4129			else
; rs232cmd.c 4130				SCPIError = SyntaxErr;
	SYMB	LINE, 4130
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4131		}
	SYMB	LINE, 4131
_1037:
; rs232cmd.c 4132	}
	SYMB	LINE, 4132
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4133	
; rs232cmd.c 4134	/**************************************************************************/
; rs232cmd.c 4135	/* FactChecksumRange																		 	     RS232CMD.C	*/
; rs232cmd.c 4136	/*																																				*/
; rs232cmd.c 4137	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4138	/* Revised:	  000705			     																						*/
; rs232cmd.c 4139	/*																																				*/
; rs232cmd.c 4140	/* Function:	--																													*/
; rs232cmd.c 4141	/* Remarks:		--																													*/
; rs232cmd.c 4142	/* Returns:		--																													*/
; rs232cmd.c 4143	/* Updates:		--																													*/
; rs232cmd.c 4144	/**************************************************************************/
; rs232cmd.c 4145	void FactChecksumRange( void)
; rs232cmd.c 4146	{
	ALIGN	1
	SYMB	LINE, 4146
	PUBLIC	_FactChecksumRange
_FactChecksumRange:
	SYMB	TYPE, 613, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumRange", _FactChecksumRange, #613, 0, 0, 48
	SYMB	ALAB, _FactChecksumRange, #613
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "StartAddr", -42, #7, 130, 5
	SYMB	IDEN, "EndAddr", -38, #7, 130, 5
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4147		UL StartAddr, EndAddr;
; rs232cmd.c 4148	
; rs232cmd.c 4149		char buffer[30];
; rs232cmd.c 4150	
; rs232cmd.c 4151		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4151
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1045
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1045
; rs232cmd.c 4152		{
; rs232cmd.c 4153			if ( CmdRequest)
	SYMB	LINE, 4153
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1041
; rs232cmd.c 4154			{
; rs232cmd.c 4155				if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &StartAddr, &EndAddr)) != 2))
	SYMB	LINE, 4155
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1039
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+4
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1038 )
	MOV.W	R2,#SOF( _1038 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1040
_1039:
; rs232cmd.c 4156					SCPIError = SyntaxErr;
	SYMB	LINE, 4156
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1045
_1040:
; rs232cmd.c 4157				else
; rs232cmd.c 4158				{
; rs232cmd.c 4159					sprintf( buffer, "%u\n", ROMChecksum( StartAddr, EndAddr));
	SYMB	LINE, 4159
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	MOV.W	R3,[R7+6]
	MOV.W	R2,[R7+4]
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+8
	PUSH.W	R0
	SYMB	SOFF, 44
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 48
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 42
; rs232cmd.c 4160					rs232puts( buffer);
	SYMB	LINE, 4160
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4161				}
; rs232cmd.c 4162			}
	SYMB	LINE, 4162
	BR	_1045
_1041:
; rs232cmd.c 4163			else
; rs232cmd.c 4164				SCPIError = SyntaxErr;
	SYMB	LINE, 4164
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4165		}
	SYMB	LINE, 4165
_1045:
; rs232cmd.c 4166	}
	SYMB	LINE, 4166
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4167	
; rs232cmd.c 4168	/**************************************************************************/
; rs232cmd.c 4169	/* FactMainVersion																			 	     RS232CMD.C	*/
; rs232cmd.c 4170	/*																																				*/
; rs232cmd.c 4171	/* Author:		Kim Engedahl, DEV, 000620	    															*/
; rs232cmd.c 4172	/* Revised:	  000620				     																					*/
; rs232cmd.c 4173	/*																																				*/
; rs232cmd.c 4174	/* Function:	--																													*/
; rs232cmd.c 4175	/* Remarks:		--																													*/
; rs232cmd.c 4176	/* Returns:		--																													*/
; rs232cmd.c 4177	/* Updates:		--																													*/
; rs232cmd.c 4178	/**************************************************************************/
; rs232cmd.c 4179	void FactMainVersion( void)
; rs232cmd.c 4180	{
	ALIGN	1
	SYMB	LINE, 4180
	PUBLIC	_FactMainVersion
_FactMainVersion:
	SYMB	TYPE, 614, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainVersion", _FactMainVersion, #614, 0, 0, 48
	SYMB	ALAB, _FactMainVersion, #614
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#014H
	SYMB	SOFF, 24
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4181		char buffer[20];
; rs232cmd.c 4182	
; rs232cmd.c 4183		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4183
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1053
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1053
; rs232cmd.c 4184		{
; rs232cmd.c 4185			if ( CmdRequest)
	SYMB	LINE, 4185
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1049
; rs232cmd.c 4186			{
; rs232cmd.c 4187				if ( ParCnt)
	SYMB	LINE, 4187
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1048
; rs232cmd.c 4188					SCPIError = SyntaxErr;
	SYMB	LINE, 4188
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1053
_1048:
; rs232cmd.c 4189				else
; rs232cmd.c 4190				{
; rs232cmd.c 4191					sprintf( buffer, "%u\n", MasterSWVersion);
	SYMB	LINE, 4191
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R0,#017H
	PUSH.W	R0
	SYMB	SOFF, 26
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 30
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 24
; rs232cmd.c 4192					rs232puts( buffer);
	SYMB	LINE, 4192
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4193				}
; rs232cmd.c 4194			}
	SYMB	LINE, 4194
	BR	_1053
_1049:
; rs232cmd.c 4195			else
; rs232cmd.c 4196				SCPIError = SyntaxErr;
	SYMB	LINE, 4196
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4197		}
	SYMB	LINE, 4197
_1053:
; rs232cmd.c 4198	}
	SYMB	LINE, 4198
	ADD.W	R7,#014H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4199	
; rs232cmd.c 4200	/**************************************************************************/
; rs232cmd.c 4201	/* FactMainIDNCompany																		 	     RS232CMD.C	*/
; rs232cmd.c 4202	/*																																				*/
; rs232cmd.c 4203	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4204	/* Revised:	  000616				     																					*/
; rs232cmd.c 4205	/*																																				*/
; rs232cmd.c 4206	/* Function:	--																													*/
; rs232cmd.c 4207	/* Remarks:		--																													*/
; rs232cmd.c 4208	/* Returns:		--																													*/
; rs232cmd.c 4209	/* Updates:		--																													*/
; rs232cmd.c 4210	/**************************************************************************/
; rs232cmd.c 4211	void FactMainIDNCompany( void)
; rs232cmd.c 4212	{
	ALIGN	1
	SYMB	LINE, 4212
	PUBLIC	_FactMainIDNCompany
_FactMainIDNCompany:
	SYMB	TYPE, 615, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainIDNCompany", _FactMainIDNCompany, #615, 0, 0, 112
	SYMB	ALAB, _FactMainIDNCompany, #615
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#022H
	SYMB	SOFF, 40
	SYMB	IDEN, "Company", -40, #476, 130, 5
; rs232cmd.c 4213		char Company[33];
; rs232cmd.c 4214	
; rs232cmd.c 4215		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4215
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1064
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1064
; rs232cmd.c 4216		{
; rs232cmd.c 4217			if ( CmdRequest)
	SYMB	LINE, 4217
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1056
; rs232cmd.c 4218			{
; rs232cmd.c 4219				if ( ParCnt)
	SYMB	LINE, 4219
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1055
; rs232cmd.c 4220					SCPIError = SyntaxErr;
	SYMB	LINE, 4220
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1064
_1055:
; rs232cmd.c 4221				else
; rs232cmd.c 4222				{
; rs232cmd.c 4223					rs232puts( Calibration.Company);
	SYMB	LINE, 4223
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	CALL	_rs232puts
; rs232cmd.c 4224					rs232putchar( '\n');
	SYMB	LINE, 4224
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4225				}
; rs232cmd.c 4226			}
	SYMB	LINE, 4226
	BR	_1064
_1056:
; rs232cmd.c 4227			else
; rs232cmd.c 4228			{
; rs232cmd.c 4229				if ( !PasswordProtected)
	SYMB	LINE, 4229
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1064
; rs232cmd.c 4230				{
; rs232cmd.c 4231					if (( ParCnt != 1) || ( sscanf( Cmd, "%32s", Company) != 1))
	SYMB	LINE, 4231
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1057
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 44
	MOV.W	R3,#SEG( _1054 )
	MOV.W	R2,#SOF( _1054 )
	PUSH.W	R2, R3
	SYMB	SOFF, 48
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 40
	CMP.W	R0,#01H
	BEQ	_1058
_1057:
; rs232cmd.c 4232						SCPIError = SyntaxErr;
	SYMB	LINE, 4232
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1064
_1058:
; rs232cmd.c 4233					else
; rs232cmd.c 4234					{
; rs232cmd.c 4235						strncpy( Calibration.Company, Company, 32);
	SYMB	LINE, 4235
	MOV.W	R6,#020H
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_strncpy
; rs232cmd.c 4236	
; rs232cmd.c 4237					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4237
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	CALL	_NV_Store
; rs232cmd.c 4238					}
; rs232cmd.c 4239				}
; rs232cmd.c 4240			}
; rs232cmd.c 4241		}
	SYMB	LINE, 4241
_1064:
; rs232cmd.c 4242	}
	SYMB	LINE, 4242
	ADD.W	R7,#022H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4243	
; rs232cmd.c 4244	/**************************************************************************/
; rs232cmd.c 4245	/* FactMainIDNType																			 	     RS232CMD.C	*/
; rs232cmd.c 4246	/*																																				*/
; rs232cmd.c 4247	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4248	/* Revised:	  000616				     																					*/
; rs232cmd.c 4249	/*																																				*/
; rs232cmd.c 4250	/* Function:	--																													*/
; rs232cmd.c 4251	/* Remarks:		--																													*/
; rs232cmd.c 4252	/* Returns:		--																													*/
; rs232cmd.c 4253	/* Updates:		--																													*/
; rs232cmd.c 4254	/**************************************************************************/
; rs232cmd.c 4255	void FactMainIDNType( void)
; rs232cmd.c 4256	{
	ALIGN	1
	SYMB	LINE, 4256
	PUBLIC	_FactMainIDNType
_FactMainIDNType:
	SYMB	TYPE, 616, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainIDNType", _FactMainIDNType, #616, 0, 0, 112
	SYMB	ALAB, _FactMainIDNType, #616
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#022H
	SYMB	SOFF, 40
	SYMB	IDEN, "Type", -40, #476, 130, 5
; rs232cmd.c 4257		char Type[33];
; rs232cmd.c 4258	
; rs232cmd.c 4259		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4259
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1076
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1076
; rs232cmd.c 4260		{
; rs232cmd.c 4261			if ( CmdRequest)
	SYMB	LINE, 4261
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1068
; rs232cmd.c 4262			{
; rs232cmd.c 4263				if ( ParCnt)
	SYMB	LINE, 4263
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1067
; rs232cmd.c 4264					SCPIError = SyntaxErr;
	SYMB	LINE, 4264
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1076
_1067:
; rs232cmd.c 4265				else
; rs232cmd.c 4266				{
; rs232cmd.c 4267					rs232puts( Calibration.Type);
	SYMB	LINE, 4267
	MOV.W	R1,#SEG( _Calibration+33 )
	MOV.W	R0,#SOF( _Calibration+33 )
	CALL	_rs232puts
; rs232cmd.c 4268					rs232putchar( '\n');
	SYMB	LINE, 4268
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4269				}
; rs232cmd.c 4270			}
	SYMB	LINE, 4270
	BR	_1076
_1068:
; rs232cmd.c 4271			else
; rs232cmd.c 4272			{
; rs232cmd.c 4273				if ( !PasswordProtected)
	SYMB	LINE, 4273
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1076
; rs232cmd.c 4274				{
; rs232cmd.c 4275					if (( ParCnt != 1) || ( sscanf( Cmd, "%32s", Type) != 1))
	SYMB	LINE, 4275
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1069
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 44
	MOV.W	R3,#SEG( _1054 )
	MOV.W	R2,#SOF( _1054 )
	PUSH.W	R2, R3
	SYMB	SOFF, 48
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 40
	CMP.W	R0,#01H
	BEQ	_1070
_1069:
; rs232cmd.c 4276						SCPIError = SyntaxErr;
	SYMB	LINE, 4276
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1076
_1070:
; rs232cmd.c 4277					else
; rs232cmd.c 4278					{
; rs232cmd.c 4279						strncpy( Calibration.Type, Type, 32);
	SYMB	LINE, 4279
	MOV.W	R1,#SEG( _Calibration+33 )
	MOV.W	R0,#SOF( _Calibration+33 )
	MOV.W	R6,#020H
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_strncpy
; rs232cmd.c 4280	
; rs232cmd.c 4281					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4281
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4282					}
; rs232cmd.c 4283				}
; rs232cmd.c 4284			}
; rs232cmd.c 4285		}
	SYMB	LINE, 4285
_1076:
; rs232cmd.c 4286	}
	SYMB	LINE, 4286
	ADD.W	R7,#022H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4287	
; rs232cmd.c 4288	/**************************************************************************/
; rs232cmd.c 4289	/* FactMainIDNNumber																	 	     RS232CMD.C	*/
; rs232cmd.c 4290	/*																																				*/
; rs232cmd.c 4291	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4292	/* Revised:	  000614				     																					*/
; rs232cmd.c 4293	/*																																				*/
; rs232cmd.c 4294	/* Function:	--																													*/
; rs232cmd.c 4295	/* Remarks:		--																													*/
; rs232cmd.c 4296	/* Returns:		--																													*/
; rs232cmd.c 4297	/* Updates:		--																													*/
; rs232cmd.c 4298	/**************************************************************************/
; rs232cmd.c 4299	void FactMainIDNKUNumber( void)
; rs232cmd.c 4300	{
	ALIGN	1
	SYMB	LINE, 4300
	PUBLIC	_FactMainIDNKUNumber
_FactMainIDNKUNumber:
	SYMB	TYPE, 617, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainIDNKUNumber", _FactMainIDNKUNumber, #617, 0, 0, 112
	SYMB	ALAB, _FactMainIDNKUNumber, #617
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#0AH
	SYMB	SOFF, 16
	SYMB	TYPE, 618, 'Z', #2, 8
	SYMB	IDEN, "KUNumber", -16, #618, 130, 5
; rs232cmd.c 4301		char KUNumber[9];
; rs232cmd.c 4302	
; rs232cmd.c 4303		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4303
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1089
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1089
; rs232cmd.c 4304		{
; rs232cmd.c 4305			if ( CmdRequest)
	SYMB	LINE, 4305
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1081
; rs232cmd.c 4306			{
; rs232cmd.c 4307				if ( ParCnt)
	SYMB	LINE, 4307
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1080
; rs232cmd.c 4308					SCPIError = SyntaxErr;
	SYMB	LINE, 4308
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1089
_1080:
; rs232cmd.c 4309				else
; rs232cmd.c 4310				{
; rs232cmd.c 4311					rs232puts( Calibration.KUNumber);
	SYMB	LINE, 4311
	MOV.W	R1,#SEG( _Calibration+66 )
	MOV.W	R0,#SOF( _Calibration+66 )
	CALL	_rs232puts
; rs232cmd.c 4312					rs232putchar( '\n');
	SYMB	LINE, 4312
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4313				}
; rs232cmd.c 4314			}
	SYMB	LINE, 4314
	BR	_1089
_1081:
; rs232cmd.c 4315			else
; rs232cmd.c 4316			{
; rs232cmd.c 4317				if ( !PasswordProtected)
	SYMB	LINE, 4317
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1089
; rs232cmd.c 4318				{
; rs232cmd.c 4319					if (( ParCnt != 1) || ( sscanf( Cmd, "%8s", KUNumber) != 1))
	SYMB	LINE, 4319
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1082
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 20
	MOV.W	R3,#SEG( _1079 )
	MOV.W	R2,#SOF( _1079 )
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 16
	CMP.W	R0,#01H
	BEQ	_1083
_1082:
; rs232cmd.c 4320						SCPIError = SyntaxErr;
	SYMB	LINE, 4320
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1089
_1083:
; rs232cmd.c 4321					else
; rs232cmd.c 4322					{
; rs232cmd.c 4323						strncpy( Calibration.KUNumber, KUNumber, 9);
	SYMB	LINE, 4323
	MOV.W	R1,#SEG( _Calibration+66 )
	MOV.W	R0,#SOF( _Calibration+66 )
	MOV.W	R6,#09H
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_strncpy
; rs232cmd.c 4324	
; rs232cmd.c 4325					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4325
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4326					}
; rs232cmd.c 4327				}
; rs232cmd.c 4328			}
; rs232cmd.c 4329		}
	SYMB	LINE, 4329
_1089:
; rs232cmd.c 4330	}
	SYMB	LINE, 4330
	ADD.W	R7,#0AH
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4331	
; rs232cmd.c 4332	/**************************************************************************/
; rs232cmd.c 4333	/* FactMainIDNSWRevision																 	     RS232CMD.C	*/
; rs232cmd.c 4334	/*																																				*/
; rs232cmd.c 4335	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4336	/* Revised:	  000616				     																					*/
; rs232cmd.c 4337	/*																																				*/
; rs232cmd.c 4338	/* Function:	--																													*/
; rs232cmd.c 4339	/* Remarks:		--																													*/
; rs232cmd.c 4340	/* Returns:		--																													*/
; rs232cmd.c 4341	/* Updates:		--																													*/
; rs232cmd.c 4342	/**************************************************************************/
; rs232cmd.c 4343	void FactMainIDNSWRevision( void)
; rs232cmd.c 4344	{
	ALIGN	1
	SYMB	LINE, 4344
	PUBLIC	_FactMainIDNSWRevision
_FactMainIDNSWRevision:
	SYMB	TYPE, 620, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainIDNSWRevision", _FactMainIDNSWRevision, #620, 0, 0, 112
	SYMB	ALAB, _FactMainIDNSWRevision, #620
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#0AH
	SYMB	SOFF, 16
	SYMB	IDEN, "SWRevision", -16, #618, 130, 5
; rs232cmd.c 4345		char SWRevision[9];
; rs232cmd.c 4346	
; rs232cmd.c 4347		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4347
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1101
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1101
; rs232cmd.c 4348		{
; rs232cmd.c 4349			if ( CmdRequest)
	SYMB	LINE, 4349
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1093
; rs232cmd.c 4350			{
; rs232cmd.c 4351				if ( ParCnt)
	SYMB	LINE, 4351
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1092
; rs232cmd.c 4352					SCPIError = SyntaxErr;
	SYMB	LINE, 4352
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1101
_1092:
; rs232cmd.c 4353				else
; rs232cmd.c 4354				{
; rs232cmd.c 4355					rs232puts( Calibration.SWRevision);
	SYMB	LINE, 4355
	MOV.W	R1,#SEG( _Calibration+75 )
	MOV.W	R0,#SOF( _Calibration+75 )
	CALL	_rs232puts
; rs232cmd.c 4356					rs232putchar( '\n');
	SYMB	LINE, 4356
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4357				}
; rs232cmd.c 4358			}
	SYMB	LINE, 4358
	BR	_1101
_1093:
; rs232cmd.c 4359			else
; rs232cmd.c 4360			{
; rs232cmd.c 4361				if ( !PasswordProtected)
	SYMB	LINE, 4361
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1101
; rs232cmd.c 4362				{
; rs232cmd.c 4363					if (( ParCnt != 1) || ( sscanf( Cmd, "%8s", SWRevision) != 1))
	SYMB	LINE, 4363
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1094
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 20
	MOV.W	R3,#SEG( _1079 )
	MOV.W	R2,#SOF( _1079 )
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 16
	CMP.W	R0,#01H
	BEQ	_1095
_1094:
; rs232cmd.c 4364						SCPIError = SyntaxErr;
	SYMB	LINE, 4364
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1101
_1095:
; rs232cmd.c 4365					else
; rs232cmd.c 4366					{
; rs232cmd.c 4367						strncpy( Calibration.SWRevision, SWRevision, 8);
	SYMB	LINE, 4367
	MOV.W	R1,#SEG( _Calibration+75 )
	MOV.W	R0,#SOF( _Calibration+75 )
	MOV.W	R6,#08H
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_strncpy
; rs232cmd.c 4368	
; rs232cmd.c 4369					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4369
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4370					}
; rs232cmd.c 4371				}
; rs232cmd.c 4372			}
; rs232cmd.c 4373		}
	SYMB	LINE, 4373
_1101:
; rs232cmd.c 4374	}
	SYMB	LINE, 4374
	ADD.W	R7,#0AH
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4375	
; rs232cmd.c 4376	/**************************************************************************/
; rs232cmd.c 4377	/* FactMainSystem	 																			 	     RS232CMD.C	*/
; rs232cmd.c 4378	/*																																				*/
; rs232cmd.c 4379	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 4380	/* Revised:	  000617				     																					*/
; rs232cmd.c 4381	/*																																				*/
; rs232cmd.c 4382	/* Function:	--																													*/
; rs232cmd.c 4383	/* Remarks:		--																													*/
; rs232cmd.c 4384	/* Returns:		--																													*/
; rs232cmd.c 4385	/* Updates:		--																													*/
; rs232cmd.c 4386	/**************************************************************************/
; rs232cmd.c 4387	void FactMainSystem( void)
; rs232cmd.c 4388	{
	ALIGN	1
	SYMB	LINE, 4388
	PUBLIC	_FactMainSystem
_FactMainSystem:
	SYMB	TYPE, 621, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainSystem", _FactMainSystem, #621, 0, 0, 48
	SYMB	ALAB, _FactMainSystem, #621
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 4389		int system;
; rs232cmd.c 4390		char code *str;
; rs232cmd.c 4391	
; rs232cmd.c 4392		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4392
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1117
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1117
; rs232cmd.c 4393		{
; rs232cmd.c 4394			if ( CmdRequest)
	SYMB	LINE, 4394
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1107
; rs232cmd.c 4395			{
; rs232cmd.c 4396				if ( ParCnt)
	SYMB	LINE, 4396
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1104
; rs232cmd.c 4397					SCPIError = ParNotAllowed;
	SYMB	LINE, 4397
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_1117
_1104:
; rs232cmd.c 4398				else
; rs232cmd.c 4399				{
; rs232cmd.c 4400					str = SystemPar[Calibration.ResetSystem].LongName;
	SYMB	LINE, 4400
	MOV.B	ES,#SEG( _Calibration+97 )
	MOV.W	R0,#SOF( _Calibration+97 )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_1118
	ADDS.B	CS,#01H
_1118:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 4401	
; rs232cmd.c 4402					while ( *str)
	SYMB	LINE, 4402
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_1106
_1105:
; rs232cmd.c 4403						rs232putchar( *str++);
	SYMB	LINE, 4403
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 4402
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_1105
	SYMB	LINE, 4403
_1106:
; rs232cmd.c 4404	
; rs232cmd.c 4405					rs232putchar('\n');
	SYMB	LINE, 4405
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4406				}
; rs232cmd.c 4407			}
	SYMB	LINE, 4407
	BR	_1117
_1107:
; rs232cmd.c 4408			else
; rs232cmd.c 4409			{
; rs232cmd.c 4410				if ( ParCnt != 1)
	SYMB	LINE, 4410
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_1108
; rs232cmd.c 4411					SCPIError = SyntaxErr;
	SYMB	LINE, 4411
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1117
_1108:
; rs232cmd.c 4412				else
; rs232cmd.c 4413				{
; rs232cmd.c 4414					system = FindParameter( Cmd, SystemPar);
	SYMB	LINE, 4414
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _SystemPar )
	MOV.W	R2,#SOF( _SystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 4415	
; rs232cmd.c 4416					if ( system == PAL_PALID)						// If line7, (PAL w/ID), ever should
	SYMB	LINE, 4416
	CMP.W	R0,#01H
	BNE	_1109
; rs232cmd.c 4417						SCPIError = DataOutOfRange;				//  be supported remove this exception
	SYMB	LINE, 4417
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_1117
_1109:
	SYMB	LTIM, "system", 2, 0, 77
; rs232cmd.c 4418					else						
; rs232cmd.c 4419					{	
; rs232cmd.c 4420						if ( system > -1)
	SYMB	LINE, 4420
	CMP.W	R0,#0FFFFH
	BLE	_1110
; rs232cmd.c 4421						{
; rs232cmd.c 4422							Calibration.ResetSystem = system;
	SYMB	LINE, 4422
	MOV.B	ES,#SEG( _Calibration+97 )
	MOV.W	R1,#SOF( _Calibration+97 )
	MOV.B	[R1],R0L
; rs232cmd.c 4423	
; rs232cmd.c 4424						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4424
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4425						}
	SYMB	LINE, 4425
	BR	_1117
_1110:
; rs232cmd.c 4426						else
; rs232cmd.c 4427							SCPIError = DataOutOfRange;
	SYMB	LINE, 4427
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 4428					}
; rs232cmd.c 4429				}
; rs232cmd.c 4430			}
; rs232cmd.c 4431		}
	SYMB	LINE, 4431
_1117:
; rs232cmd.c 4432	}
	SYMB	LINE, 4432
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 4433	
; rs232cmd.c 4434	/**************************************************************************/
; rs232cmd.c 4435	/* FactMainFMSDateProd																	 	     RS232CMD.C	*/
; rs232cmd.c 4436	/*																																				*/
; rs232cmd.c 4437	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4438	/* Revised:	  0006014				     																					*/
; rs232cmd.c 4439	/*																																				*/
; rs232cmd.c 4440	/* Function:	--																													*/
; rs232cmd.c 4441	/* Remarks:		--																													*/
; rs232cmd.c 4442	/* Returns:		--																													*/
; rs232cmd.c 4443	/* Updates:		--																													*/
; rs232cmd.c 4444	/**************************************************************************/
; rs232cmd.c 4445	void FactMainFMSDateProd( void)
; rs232cmd.c 4446	{
	ALIGN	1
	SYMB	LINE, 4446
	PUBLIC	_FactMainFMSDateProd
_FactMainFMSDateProd:
	SYMB	TYPE, 622, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainFMSDateProd", _FactMainFMSDateProd, #622, 0, 0, 48
	SYMB	ALAB, _FactMainFMSDateProd, #622
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4447		UI year, month, day;
; rs232cmd.c 4448		char buffer[20];
; rs232cmd.c 4449	
; rs232cmd.c 4450		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4450
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1134
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1134
; rs232cmd.c 4451		{
; rs232cmd.c 4452			if ( CmdRequest)
	SYMB	LINE, 4452
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1124
; rs232cmd.c 4453			{
; rs232cmd.c 4454				if ( ParCnt)
	SYMB	LINE, 4454
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1123
; rs232cmd.c 4455					SCPIError = SyntaxErr;
	SYMB	LINE, 4455
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1134
_1123:
; rs232cmd.c 4456				else
; rs232cmd.c 4457				{
; rs232cmd.c 4458					day = Calibration.ProdDate % 100;
	SYMB	LINE, 4458
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R1,#SOF( _Calibration+98 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R4,#SOF( _Calibration+98 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R1,#SOF( _Calibration+98 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4459					month = ( Calibration.ProdDate / 100) % 100;
	SYMB	LINE, 4459
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4460					year = ( Calibration.ProdDate / 10000);
	SYMB	LINE, 4460
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R1,#SOF( _Calibration+98 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4461	
; rs232cmd.c 4462					sprintf( buffer, "%d,%d,%d\n", year, month, day);
	SYMB	LINE, 4462
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _183 )
	MOV.W	R0,#SOF( _183 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4463	
; rs232cmd.c 4464					rs232puts( buffer);
	SYMB	LINE, 4464
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4465				}
; rs232cmd.c 4466			}
	SYMB	LINE, 4466
	BR	_1134
_1124:
; rs232cmd.c 4467			else
; rs232cmd.c 4468			{
; rs232cmd.c 4469				if ( !PasswordProtected)
	SYMB	LINE, 4469
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1134
; rs232cmd.c 4470				{
; rs232cmd.c 4471					if (( ParCnt != 3) || (( sscanf( Cmd, "%d,%d,%d", &year, &month, &day)) != 3))
	SYMB	LINE, 4471
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1125
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1122 )
	MOV.W	R2,#SOF( _1122 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1126
_1125:
; rs232cmd.c 4472						SCPIError = SyntaxErr;
	SYMB	LINE, 4472
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1134
_1126:
; rs232cmd.c 4473					else
; rs232cmd.c 4474					{
; rs232cmd.c 4475						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4475
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1127
; rs232cmd.c 4476							SCPIError = ExecErr;
	SYMB	LINE, 4476
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1134
_1127:
; rs232cmd.c 4477						else
; rs232cmd.c 4478						{
; rs232cmd.c 4479							Calibration.ProdDate = day + 100*month + 10000*year;
	SYMB	LINE, 4479
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R2,#SOF( _Calibration+98 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4480						
; rs232cmd.c 4481						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4481
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4482						}
; rs232cmd.c 4483					}				
; rs232cmd.c 4484				}
; rs232cmd.c 4485			}
; rs232cmd.c 4486		}
	SYMB	LINE, 4486
_1134:
; rs232cmd.c 4487	}
	SYMB	LINE, 4487
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4488	
; rs232cmd.c 4489	/**************************************************************************/
; rs232cmd.c 4490	/* FactMainFMSDateUpd																		 	     RS232CMD.C	*/
; rs232cmd.c 4491	/*																																				*/
; rs232cmd.c 4492	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4493	/* Revised:	  000614				     																					*/
; rs232cmd.c 4494	/*																																				*/
; rs232cmd.c 4495	/* Function:	--																													*/
; rs232cmd.c 4496	/* Remarks:		--																													*/
; rs232cmd.c 4497	/* Returns:		--																													*/
; rs232cmd.c 4498	/* Updates:		--																													*/
; rs232cmd.c 4499	/**************************************************************************/
; rs232cmd.c 4500	void FactMainFMSDateUpd( void)
; rs232cmd.c 4501	{
	ALIGN	1
	SYMB	LINE, 4501
	PUBLIC	_FactMainFMSDateUpd
_FactMainFMSDateUpd:
	SYMB	TYPE, 623, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainFMSDateUpd", _FactMainFMSDateUpd, #623, 0, 0, 48
	SYMB	ALAB, _FactMainFMSDateUpd, #623
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4502		UI year, month, day;
; rs232cmd.c 4503		char buffer[20];
; rs232cmd.c 4504	
; rs232cmd.c 4505		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4505
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1148
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1148
; rs232cmd.c 4506		{
; rs232cmd.c 4507			if ( CmdRequest)
	SYMB	LINE, 4507
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1138
; rs232cmd.c 4508			{
; rs232cmd.c 4509				if ( ParCnt)
	SYMB	LINE, 4509
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1137
; rs232cmd.c 4510					SCPIError = SyntaxErr;
	SYMB	LINE, 4510
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1148
_1137:
; rs232cmd.c 4511				else
; rs232cmd.c 4512				{
; rs232cmd.c 4513					day = Calibration.UpdateDate % 100;
	SYMB	LINE, 4513
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R1,#SOF( _Calibration+102 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R4,#SOF( _Calibration+102 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R1,#SOF( _Calibration+102 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4514					month = ( Calibration.UpdateDate / 100) % 100;
	SYMB	LINE, 4514
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4515					year = ( Calibration.UpdateDate / 10000);
	SYMB	LINE, 4515
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R1,#SOF( _Calibration+102 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4516	
; rs232cmd.c 4517					sprintf( buffer, "%d,%d,%d\n", year, month, day);
	SYMB	LINE, 4517
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _183 )
	MOV.W	R0,#SOF( _183 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4518	
; rs232cmd.c 4519					rs232puts( buffer);
	SYMB	LINE, 4519
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4520				}
; rs232cmd.c 4521			}
	SYMB	LINE, 4521
	BR	_1148
_1138:
; rs232cmd.c 4522			else
; rs232cmd.c 4523			{
; rs232cmd.c 4524				if ( !PasswordProtected)
	SYMB	LINE, 4524
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1148
; rs232cmd.c 4525				{
; rs232cmd.c 4526					if (( ParCnt != 3) || (( sscanf( Cmd, "%d,%d,%d", &year, &month, &day)) != 3))
	SYMB	LINE, 4526
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1139
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1122 )
	MOV.W	R2,#SOF( _1122 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1140
_1139:
; rs232cmd.c 4527						SCPIError = SyntaxErr;
	SYMB	LINE, 4527
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1148
_1140:
; rs232cmd.c 4528					else
; rs232cmd.c 4529					{
; rs232cmd.c 4530						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4530
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1141
; rs232cmd.c 4531							SCPIError = ExecErr;
	SYMB	LINE, 4531
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1148
_1141:
; rs232cmd.c 4532						else
; rs232cmd.c 4533						{
; rs232cmd.c 4534							Calibration.UpdateDate = day + 100*month + 10000*year;
	SYMB	LINE, 4534
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R2,#SOF( _Calibration+102 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4535						
; rs232cmd.c 4536						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4536
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4537						}
; rs232cmd.c 4538					}				
; rs232cmd.c 4539				}
; rs232cmd.c 4540			}
; rs232cmd.c 4541		}
	SYMB	LINE, 4541
_1148:
; rs232cmd.c 4542	}
	SYMB	LINE, 4542
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4543	
; rs232cmd.c 4544	/**************************************************************************/
; rs232cmd.c 4545	/* FactGenlockGenDate		 																 	     RS232CMD.C	*/
; rs232cmd.c 4546	/*																																				*/
; rs232cmd.c 4547	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 4548	/* Revised:	  000614				     																					*/
; rs232cmd.c 4549	/*																																				*/
; rs232cmd.c 4550	/* Function:	--																													*/
; rs232cmd.c 4551	/* Remarks:		--																													*/
; rs232cmd.c 4552	/* Returns:		--																													*/
; rs232cmd.c 4553	/* Updates:		--																													*/
; rs232cmd.c 4554	/**************************************************************************/
; rs232cmd.c 4555	void FactGenlockGenDate( void)
; rs232cmd.c 4556	{
	ALIGN	1
	SYMB	LINE, 4556
	PUBLIC	_FactGenlockGenDate
_FactGenlockGenDate:
	SYMB	TYPE, 624, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenDate", _FactGenlockGenDate, #624, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenDate, #624
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4557		UI year, month, day;
; rs232cmd.c 4558		char buffer[20];
; rs232cmd.c 4559	
; rs232cmd.c 4560		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4560
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1162
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1162
; rs232cmd.c 4561		{
; rs232cmd.c 4562			if ( CmdRequest)
	SYMB	LINE, 4562
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1152
; rs232cmd.c 4563			{
; rs232cmd.c 4564				if ( ParCnt)
	SYMB	LINE, 4564
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1151
; rs232cmd.c 4565					SCPIError = SyntaxErr;
	SYMB	LINE, 4565
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1162
_1151:
; rs232cmd.c 4566				else
; rs232cmd.c 4567				{
; rs232cmd.c 4568					day = Calibration.GenlockCalibration.Date % 100;
	SYMB	LINE, 4568
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R1,#SOF( _Calibration+106 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R4,#SOF( _Calibration+106 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R1,#SOF( _Calibration+106 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4569					month = ( Calibration.GenlockCalibration.Date / 100) % 100;
	SYMB	LINE, 4569
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4570					year = ( Calibration.GenlockCalibration.Date / 10000);
	SYMB	LINE, 4570
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R1,#SOF( _Calibration+106 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4571	
; rs232cmd.c 4572					sprintf( buffer, "%d,%d,%d\n", year, month, day);
	SYMB	LINE, 4572
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _183 )
	MOV.W	R0,#SOF( _183 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4573	
; rs232cmd.c 4574					rs232puts( buffer);
	SYMB	LINE, 4574
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4575				}
; rs232cmd.c 4576			}
	SYMB	LINE, 4576
	BR	_1162
_1152:
; rs232cmd.c 4577			else
; rs232cmd.c 4578			{
; rs232cmd.c 4579				if ( !PasswordProtected)
	SYMB	LINE, 4579
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1162
; rs232cmd.c 4580				{
; rs232cmd.c 4581					if (( ParCnt != 3) || (( sscanf( Cmd, "%d,%d,%d", &year, &month, &day)) != 3))
	SYMB	LINE, 4581
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1153
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1122 )
	MOV.W	R2,#SOF( _1122 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1154
_1153:
; rs232cmd.c 4582						SCPIError = SyntaxErr;
	SYMB	LINE, 4582
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1162
_1154:
; rs232cmd.c 4583					else
; rs232cmd.c 4584					{
; rs232cmd.c 4585						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4585
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1155
; rs232cmd.c 4586							SCPIError = ExecErr;
	SYMB	LINE, 4586
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1162
_1155:
; rs232cmd.c 4587						else
; rs232cmd.c 4588						{
; rs232cmd.c 4589							Calibration.GenlockCalibration.Date = day + 100*month + 10000*year;
	SYMB	LINE, 4589
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R2,#SOF( _Calibration+106 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4590						
; rs232cmd.c 4591						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4591
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4592						}
; rs232cmd.c 4593					}				
; rs232cmd.c 4594				}
; rs232cmd.c 4595			}
; rs232cmd.c 4596		}
	SYMB	LINE, 4596
_1162:
; rs232cmd.c 4597	}
	SYMB	LINE, 4597
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4598	
; rs232cmd.c 4599	/**************************************************************************/
; rs232cmd.c 4600	/* FactGenlockGenVersion 																 	     RS232CMD.C	*/
; rs232cmd.c 4601	/*																																				*/
; rs232cmd.c 4602	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4603	/* Revised:	  000614				     																					*/
; rs232cmd.c 4604	/*																																				*/
; rs232cmd.c 4605	/* Function:	--																													*/
; rs232cmd.c 4606	/* Remarks:		--																													*/
; rs232cmd.c 4607	/* Returns:		--																													*/
; rs232cmd.c 4608	/* Updates:		--																													*/
; rs232cmd.c 4609	/**************************************************************************/
; rs232cmd.c 4610	void FactGenlockGenVersion( void)
; rs232cmd.c 4611	{
	ALIGN	1
	SYMB	LINE, 4611
	PUBLIC	_FactGenlockGenVersion
_FactGenlockGenVersion:
	SYMB	TYPE, 625, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenVersion", _FactGenlockGenVersion, #625, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenVersion, #625
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#0AH
	SYMB	SOFF, 14
	SYMB	TYPE, 626, 'Z', #2, 9
	SYMB	IDEN, "result", -14, #626, 130, 5
; rs232cmd.c 4612		char result[10];
; rs232cmd.c 4613	
; rs232cmd.c 4614		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4614
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1172
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1172
; rs232cmd.c 4615		{
; rs232cmd.c 4616			if ( CmdRequest)
	SYMB	LINE, 4616
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1167
; rs232cmd.c 4617			{
; rs232cmd.c 4618				if ( ParCnt)
	SYMB	LINE, 4618
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1165
; rs232cmd.c 4619					SCPIError = SyntaxErr;
	SYMB	LINE, 4619
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1172
_1165:
; rs232cmd.c 4620				else
; rs232cmd.c 4621				{
; rs232cmd.c 4622					if ( GenlockVersion( result) == OK)
	SYMB	LINE, 4622
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_GenlockVersion
	CMP.W	R0,#0FFFFH
	BNE	_1166
; rs232cmd.c 4623					{
; rs232cmd.c 4624						rs232puts( result);
	SYMB	LINE, 4624
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4625						rs232putchar( '\n');
	SYMB	LINE, 4625
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4626					}
	SYMB	LINE, 4626
	BR	_1172
_1166:
; rs232cmd.c 4627					else
; rs232cmd.c 4628						SCPIError = ExecErr;			
	SYMB	LINE, 4628
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 4629				}
; rs232cmd.c 4630			}
	SYMB	LINE, 4630
	BR	_1172
_1167:
; rs232cmd.c 4631			else
; rs232cmd.c 4632				SCPIError = SyntaxErr;
	SYMB	LINE, 4632
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4633		}
	SYMB	LINE, 4633
_1172:
; rs232cmd.c 4634	}
	SYMB	LINE, 4634
	ADD.W	R7,#0AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4635	
; rs232cmd.c 4636	/**************************************************************************/
; rs232cmd.c 4637	/* FactGenlockGenFRefDate																 	     RS232CMD.C	*/
; rs232cmd.c 4638	/*																																				*/
; rs232cmd.c 4639	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4640	/* Revised:	  000622				     																					*/
; rs232cmd.c 4641	/*																																				*/
; rs232cmd.c 4642	/* Function:	--																													*/
; rs232cmd.c 4643	/* Remarks:		--																													*/
; rs232cmd.c 4644	/* Returns:		--																													*/
; rs232cmd.c 4645	/* Updates:		--																													*/
; rs232cmd.c 4646	/**************************************************************************/
; rs232cmd.c 4647	void FactGenlockGenFRefDate( void)
; rs232cmd.c 4648	{
	ALIGN	1
	SYMB	LINE, 4648
	PUBLIC	_FactGenlockGenFRefDate
_FactGenlockGenFRefDate:
	SYMB	TYPE, 628, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenFRefDate", _FactGenlockGenFRefDate, #628, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenFRefDate, #628
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4649		UI year, month, day;
; rs232cmd.c 4650		char buffer[20];
; rs232cmd.c 4651	
; rs232cmd.c 4652		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4652
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1187
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1187
; rs232cmd.c 4653		{
; rs232cmd.c 4654			if ( CmdRequest)
	SYMB	LINE, 4654
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1177
; rs232cmd.c 4655			{
; rs232cmd.c 4656				if ( ParCnt)
	SYMB	LINE, 4656
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1176
; rs232cmd.c 4657					SCPIError = SyntaxErr;
	SYMB	LINE, 4657
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1187
_1176:
; rs232cmd.c 4658				else
; rs232cmd.c 4659				{
; rs232cmd.c 4660					day = Calibration.GenlockCalibration.DACFactDate % 100;
	SYMB	LINE, 4660
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R1,#SOF( _Calibration+110 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R4,#SOF( _Calibration+110 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R1,#SOF( _Calibration+110 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4661					month = ( Calibration.GenlockCalibration.DACFactDate / 100) % 100;
	SYMB	LINE, 4661
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4662					year = ( Calibration.GenlockCalibration.DACFactDate / 10000);
	SYMB	LINE, 4662
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R1,#SOF( _Calibration+110 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4663	
; rs232cmd.c 4664					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 4664
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1174 )
	MOV.W	R0,#SOF( _1174 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4665	
; rs232cmd.c 4666					rs232puts( buffer);
	SYMB	LINE, 4666
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4667				}
; rs232cmd.c 4668			}
	SYMB	LINE, 4668
	BR	_1187
_1177:
; rs232cmd.c 4669			else
; rs232cmd.c 4670			{
; rs232cmd.c 4671				if ( !PasswordProtected)
	SYMB	LINE, 4671
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1187
; rs232cmd.c 4672				{
; rs232cmd.c 4673					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 4673
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1178
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1175 )
	MOV.W	R2,#SOF( _1175 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1179
_1178:
; rs232cmd.c 4674						SCPIError = SyntaxErr;
	SYMB	LINE, 4674
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1187
_1179:
; rs232cmd.c 4675					else
; rs232cmd.c 4676					{
; rs232cmd.c 4677						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4677
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1180
; rs232cmd.c 4678							SCPIError = ExecErr;
	SYMB	LINE, 4678
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1187
_1180:
; rs232cmd.c 4679						else
; rs232cmd.c 4680						{
; rs232cmd.c 4681							Calibration.GenlockCalibration.DACFactDate = day + 100*month + 10000*year;
	SYMB	LINE, 4681
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R2,#SOF( _Calibration+110 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4682						
; rs232cmd.c 4683						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4683
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4684						}
; rs232cmd.c 4685					}				
; rs232cmd.c 4686				}
; rs232cmd.c 4687			}
; rs232cmd.c 4688		}
	SYMB	LINE, 4688
_1187:
; rs232cmd.c 4689	}
	SYMB	LINE, 4689
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4690	
; rs232cmd.c 4691	/**************************************************************************/
; rs232cmd.c 4692	/* FactGenlockGenFRefDAC 																 	     RS232CMD.C	*/
; rs232cmd.c 4693	/*																																				*/
; rs232cmd.c 4694	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4695	/* Revised:	  000622				     																					*/
; rs232cmd.c 4696	/*																																				*/
; rs232cmd.c 4697	/* Function:	--																													*/
; rs232cmd.c 4698	/* Remarks:		--																													*/
; rs232cmd.c 4699	/* Returns:		--																													*/
; rs232cmd.c 4700	/* Updates:		--																													*/
; rs232cmd.c 4701	/**************************************************************************/
; rs232cmd.c 4702	void FactGenlockGenFRefDAC( void)
; rs232cmd.c 4703	{
	ALIGN	1
	SYMB	LINE, 4703
	PUBLIC	_FactGenlockGenFRefDAC
_FactGenlockGenFRefDAC:
	SYMB	TYPE, 629, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenFRefDAC", _FactGenlockGenFRefDAC, #629, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenFRefDAC, #629
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#016H
	SYMB	SOFF, 26
	SYMB	IDEN, "buffer", -26, #563, 130, 5
	SYMB	IDEN, "DACValue", -6, #18, 130, 5
; rs232cmd.c 4704		char buffer[20];
; rs232cmd.c 4705		UI DACValue;
; rs232cmd.c 4706	
; rs232cmd.c 4707		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4707
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1200
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1200
; rs232cmd.c 4708		{
; rs232cmd.c 4709			if ( CmdRequest)
	SYMB	LINE, 4709
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1192
; rs232cmd.c 4710			{
; rs232cmd.c 4711				if ( ParCnt)
	SYMB	LINE, 4711
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1191
; rs232cmd.c 4712					SCPIError = SyntaxErr;
	SYMB	LINE, 4712
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1200
_1191:
; rs232cmd.c 4713				else
; rs232cmd.c 4714				{
; rs232cmd.c 4715					sprintf( buffer, "%u\n", Calibration.GenlockCalibration.DACFactValue);
	SYMB	LINE, 4715
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+118 )
	MOV.W	R0,#SOF( _Calibration+118 )
	MOV.W	R0,[R0]
	PUSH.W	R0
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 32
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 26
; rs232cmd.c 4716	
; rs232cmd.c 4717					rs232puts( buffer);
	SYMB	LINE, 4717
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4718				}
; rs232cmd.c 4719			}
	SYMB	LINE, 4719
	BR	_1200
_1192:
; rs232cmd.c 4720			else
; rs232cmd.c 4721			{
; rs232cmd.c 4722				if ( !PasswordProtected)
	SYMB	LINE, 4722
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1200
; rs232cmd.c 4723				{
; rs232cmd.c 4724					if (( ParCnt != 1) || (( sscanf( Cmd, "%u", &DACValue)) != 1))
	SYMB	LINE, 4724
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1193
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	PUSH.W	R2, R3
	SYMB	SOFF, 30
	MOV.W	R3,#SEG( _1190 )
	MOV.W	R2,#SOF( _1190 )
	PUSH.W	R2, R3
	SYMB	SOFF, 34
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 26
	CMP.W	R0,#01H
	BEQ	_1194
_1193:
; rs232cmd.c 4725						SCPIError = SyntaxErr;
	SYMB	LINE, 4725
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1200
_1194:
; rs232cmd.c 4726					else
; rs232cmd.c 4727					{
; rs232cmd.c 4728						Calibration.GenlockCalibration.DACFactValue = DACValue;
	SYMB	LINE, 4728
	MOV.W	R0,[R7+20]
	MOV.B	ES,#SEG( _Calibration+118 )
	MOV.W	R1,#SOF( _Calibration+118 )
	MOV.W	[R1],R0
; rs232cmd.c 4729								
; rs232cmd.c 4730						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4730
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4731					}
; rs232cmd.c 4732				}
; rs232cmd.c 4733			}
; rs232cmd.c 4734		}
	SYMB	LINE, 4734
_1200:
; rs232cmd.c 4735	}
	SYMB	LINE, 4735
	ADD.W	R7,#016H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4736	
; rs232cmd.c 4737	/**************************************************************************/
; rs232cmd.c 4738	/* FactGenlockGenURefDate																 	     RS232CMD.C	*/
; rs232cmd.c 4739	/*																																				*/
; rs232cmd.c 4740	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4741	/* Revised:	  000622				     																					*/
; rs232cmd.c 4742	/*																																				*/
; rs232cmd.c 4743	/* Function:	--																													*/
; rs232cmd.c 4744	/* Remarks:		--																													*/
; rs232cmd.c 4745	/* Returns:		--																													*/
; rs232cmd.c 4746	/* Updates:		--																													*/
; rs232cmd.c 4747	/**************************************************************************/
; rs232cmd.c 4748	void FactGenlockGenURefDate( void)
; rs232cmd.c 4749	{
	ALIGN	1
	SYMB	LINE, 4749
	PUBLIC	_FactGenlockGenURefDate
_FactGenlockGenURefDate:
	SYMB	TYPE, 630, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenURefDate", _FactGenlockGenURefDate, #630, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenURefDate, #630
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4750		UI year, month, day;
; rs232cmd.c 4751		char buffer[20];
; rs232cmd.c 4752	
; rs232cmd.c 4753		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4753
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1213
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1213
; rs232cmd.c 4754		{
; rs232cmd.c 4755			if ( CmdRequest)
	SYMB	LINE, 4755
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1204
; rs232cmd.c 4756			{
; rs232cmd.c 4757				if ( ParCnt)
	SYMB	LINE, 4757
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1203
; rs232cmd.c 4758					SCPIError = SyntaxErr;
	SYMB	LINE, 4758
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1213
_1203:
; rs232cmd.c 4759				else
; rs232cmd.c 4760				{
; rs232cmd.c 4761					day = Calibration.GenlockCalibration.DACUserDate % 100;
	SYMB	LINE, 4761
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R1,#SOF( _Calibration+114 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R4,#SOF( _Calibration+114 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R1,#SOF( _Calibration+114 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4762					month = ( Calibration.GenlockCalibration.DACUserDate / 100) % 100;
	SYMB	LINE, 4762
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4763					year = ( Calibration.GenlockCalibration.DACUserDate / 10000);
	SYMB	LINE, 4763
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R1,#SOF( _Calibration+114 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4764	
; rs232cmd.c 4765					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 4765
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1174 )
	MOV.W	R0,#SOF( _1174 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4766	
; rs232cmd.c 4767					rs232puts( buffer);
	SYMB	LINE, 4767
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4768				}
; rs232cmd.c 4769			}
	SYMB	LINE, 4769
	BR	_1213
_1204:
; rs232cmd.c 4770			else
; rs232cmd.c 4771			{
; rs232cmd.c 4772				if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 4772
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1205
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1175 )
	MOV.W	R2,#SOF( _1175 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1206
_1205:
; rs232cmd.c 4773					SCPIError = SyntaxErr;
	SYMB	LINE, 4773
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1213
_1206:
; rs232cmd.c 4774				else
; rs232cmd.c 4775				{
; rs232cmd.c 4776					if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4776
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1207
; rs232cmd.c 4777						SCPIError = ExecErr;
	SYMB	LINE, 4777
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1213
_1207:
; rs232cmd.c 4778					else
; rs232cmd.c 4779					{
; rs232cmd.c 4780						Calibration.GenlockCalibration.DACUserDate = day + 100*month + 10000*year;
	SYMB	LINE, 4780
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R2,#SOF( _Calibration+114 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4781						
; rs232cmd.c 4782					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4782
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4783					}				
; rs232cmd.c 4784				}
; rs232cmd.c 4785			}
; rs232cmd.c 4786		}
	SYMB	LINE, 4786
_1213:
; rs232cmd.c 4787	}
	SYMB	LINE, 4787
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4788	
; rs232cmd.c 4789	/**************************************************************************/
; rs232cmd.c 4790	/* FactGenlockGenURefDAC																 	     RS232CMD.C	*/
; rs232cmd.c 4791	/*																																				*/
; rs232cmd.c 4792	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4793	/* Revised:	  000622				     																					*/
; rs232cmd.c 4794	/*																																				*/
; rs232cmd.c 4795	/* Function:	--																													*/
; rs232cmd.c 4796	/* Remarks:		--																													*/
; rs232cmd.c 4797	/* Returns:		--																													*/
; rs232cmd.c 4798	/* Updates:		--																													*/
; rs232cmd.c 4799	/**************************************************************************/
; rs232cmd.c 4800	void FactGenlockGenURefDAC( void)
; rs232cmd.c 4801	{
	ALIGN	1
	SYMB	LINE, 4801
	PUBLIC	_FactGenlockGenURefDAC
_FactGenlockGenURefDAC:
	SYMB	TYPE, 631, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenURefDAC", _FactGenlockGenURefDAC, #631, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenURefDAC, #631
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#016H
	SYMB	SOFF, 26
	SYMB	IDEN, "buffer", -26, #563, 130, 5
	SYMB	IDEN, "DACValue", -6, #18, 130, 5
; rs232cmd.c 4802		char buffer[20];
; rs232cmd.c 4803		UI DACValue;
; rs232cmd.c 4804	
; rs232cmd.c 4805		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4805
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1224
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1224
; rs232cmd.c 4806		{
; rs232cmd.c 4807			if ( CmdRequest)
	SYMB	LINE, 4807
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1217
; rs232cmd.c 4808			{
; rs232cmd.c 4809				if ( ParCnt)
	SYMB	LINE, 4809
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1216
; rs232cmd.c 4810					SCPIError = SyntaxErr;
	SYMB	LINE, 4810
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1224
_1216:
; rs232cmd.c 4811				else
; rs232cmd.c 4812				{
; rs232cmd.c 4813					sprintf( buffer, "%u\n", Calibration.GenlockCalibration.DACUserValue);
	SYMB	LINE, 4813
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+120 )
	MOV.W	R0,#SOF( _Calibration+120 )
	MOV.W	R0,[R0]
	PUSH.W	R0
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 32
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 26
; rs232cmd.c 4814	
; rs232cmd.c 4815					rs232puts( buffer);
	SYMB	LINE, 4815
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4816				}
; rs232cmd.c 4817			}
	SYMB	LINE, 4817
	BR	_1224
_1217:
; rs232cmd.c 4818			else
; rs232cmd.c 4819			{
; rs232cmd.c 4820				if (( ParCnt != 1) || (( sscanf( Cmd, "%u", &DACValue)) != 1))
	SYMB	LINE, 4820
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1218
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	PUSH.W	R2, R3
	SYMB	SOFF, 30
	MOV.W	R3,#SEG( _1190 )
	MOV.W	R2,#SOF( _1190 )
	PUSH.W	R2, R3
	SYMB	SOFF, 34
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 26
	CMP.W	R0,#01H
	BEQ	_1219
_1218:
; rs232cmd.c 4821					SCPIError = SyntaxErr;
	SYMB	LINE, 4821
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1224
_1219:
; rs232cmd.c 4822				else
; rs232cmd.c 4823				{
; rs232cmd.c 4824					Calibration.GenlockCalibration.DACUserValue = DACValue;
	SYMB	LINE, 4824
	MOV.W	R0,[R7+20]
	MOV.B	ES,#SEG( _Calibration+120 )
	MOV.W	R1,#SOF( _Calibration+120 )
	MOV.W	[R1],R0
; rs232cmd.c 4825								
; rs232cmd.c 4826					NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4826
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4827				}
; rs232cmd.c 4828			}
; rs232cmd.c 4829		}
	SYMB	LINE, 4829
_1224:
; rs232cmd.c 4830	}
	SYMB	LINE, 4830
	ADD.W	R7,#016H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4831	
; rs232cmd.c 4832	/**************************************************************************/
; rs232cmd.c 4833	/* FactGenlockGenHPHZero 																 	     RS232CMD.C	*/
; rs232cmd.c 4834	/*																																				*/
; rs232cmd.c 4835	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 4836	/* Revised:	  000622				     																					*/
; rs232cmd.c 4837	/*																																				*/
; rs232cmd.c 4838	/* Function:	--																													*/
; rs232cmd.c 4839	/* Remarks:		--																													*/
; rs232cmd.c 4840	/* Returns:		--																													*/
; rs232cmd.c 4841	/* Updates:		--																													*/
; rs232cmd.c 4842	/**************************************************************************/
; rs232cmd.c 4843	void FactGenlockGenHPHZero( void)
; rs232cmd.c 4844	{
	ALIGN	1
	SYMB	LINE, 4844
	PUBLIC	_FactGenlockGenHPHZero
_FactGenlockGenHPHZero:
	SYMB	TYPE, 632, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenHPHZero", _FactGenlockGenHPHZero, #632, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenHPHZero, #632
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "buffer", -42, #606, 130, 5
	SYMB	IDEN, "HPHZeroG", -12, #7, 130, 5
	SYMB	IDEN, "HPHZeroM", -8, #7, 130, 5
; rs232cmd.c 4845		char buffer[30];
; rs232cmd.c 4846		UL HPHZeroG, HPHZeroM;
; rs232cmd.c 4847	
; rs232cmd.c 4848		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4848
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1237
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1237
; rs232cmd.c 4849		{
; rs232cmd.c 4850			if ( CmdRequest)
	SYMB	LINE, 4850
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1229
; rs232cmd.c 4851			{
; rs232cmd.c 4852				if ( ParCnt)
	SYMB	LINE, 4852
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1228
; rs232cmd.c 4853					SCPIError = SyntaxErr;
	SYMB	LINE, 4853
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1237
_1228:
; rs232cmd.c 4854				else
; rs232cmd.c 4855				{
; rs232cmd.c 4856					sprintf( buffer, "%lu,%lu\n", Calibration.GenlockCalibration.HPHZeroG, 
; rs232cmd.c 4857																		    Calibration.GenlockCalibration.HPHZeroM);
	SYMB	LINE, 4857
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+122 )
	MOV.W	R1,#SOF( _Calibration+122 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _Calibration+130 )
	MOV.W	R3,#SOF( _Calibration+130 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	PUSH.W	R0, R1
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _1227 )
	MOV.W	R0,#SOF( _1227 )
	PUSH.W	R0, R1
	SYMB	SOFF, 54
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
; rs232cmd.c 4858					rs232puts( buffer);
	SYMB	LINE, 4858
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4859				}
; rs232cmd.c 4860			}
	SYMB	LINE, 4860
	BR	_1237
_1229:
; rs232cmd.c 4861			else
; rs232cmd.c 4862			{
; rs232cmd.c 4863				if ( !PasswordProtected)
	SYMB	LINE, 4863
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1237
; rs232cmd.c 4864				{
; rs232cmd.c 4865					if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &HPHZeroG, &HPHZeroM)) != 2))
	SYMB	LINE, 4865
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1230
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+34
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1038 )
	MOV.W	R2,#SOF( _1038 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1231
_1230:
; rs232cmd.c 4866						SCPIError = SyntaxErr;
	SYMB	LINE, 4866
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1237
_1231:
; rs232cmd.c 4867					else
; rs232cmd.c 4868					{
; rs232cmd.c 4869						Calibration.GenlockCalibration.HPHZeroG = HPHZeroG;
	SYMB	LINE, 4869
	MOV.W	R1,[R7+32]
	MOV.W	R0,[R7+30]
	MOV.B	ES,#SEG( _Calibration+122 )
	MOV.W	R2,#SOF( _Calibration+122 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4870						Calibration.GenlockCalibration.HPHZeroM = HPHZeroM;
	SYMB	LINE, 4870
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	MOV.B	ES,#SEG( _Calibration+130 )
	MOV.W	R2,#SOF( _Calibration+130 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4871					
; rs232cmd.c 4872						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4872
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4873					}
; rs232cmd.c 4874				}
; rs232cmd.c 4875			}
; rs232cmd.c 4876		}
	SYMB	LINE, 4876
_1237:
; rs232cmd.c 4877	}
	SYMB	LINE, 4877
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4878	
; rs232cmd.c 4879	/**************************************************************************/
; rs232cmd.c 4880	/* FactGenlockGenPhase	 																 	     RS232CMD.C	*/
; rs232cmd.c 4881	/*																																				*/
; rs232cmd.c 4882	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 4883	/* Revised:	  000622				     																					*/
; rs232cmd.c 4884	/*																																				*/
; rs232cmd.c 4885	/* Function:	--																													*/
; rs232cmd.c 4886	/* Remarks:		--																													*/
; rs232cmd.c 4887	/* Returns:		--																													*/
; rs232cmd.c 4888	/* Updates:		--																													*/
; rs232cmd.c 4889	/**************************************************************************/
; rs232cmd.c 4890	void FactGenlockGenPhase( void)
; rs232cmd.c 4891	{
	ALIGN	1
	SYMB	LINE, 4891
	PUBLIC	_FactGenlockGenPhase
_FactGenlockGenPhase:
	SYMB	TYPE, 633, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenPhase", _FactGenlockGenPhase, #633, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenPhase, #633
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "buffer", -42, #606, 130, 5
	SYMB	IDEN, "PhaseG", -12, #7, 130, 5
	SYMB	IDEN, "PhaseM", -8, #7, 130, 5
; rs232cmd.c 4892		char buffer[30];
; rs232cmd.c 4893		UL PhaseG, PhaseM;
; rs232cmd.c 4894	
; rs232cmd.c 4895		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4895
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1249
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1249
; rs232cmd.c 4896		{
; rs232cmd.c 4897			if ( CmdRequest)
	SYMB	LINE, 4897
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1241
; rs232cmd.c 4898			{
; rs232cmd.c 4899				if ( ParCnt)
	SYMB	LINE, 4899
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1240
; rs232cmd.c 4900					SCPIError = SyntaxErr;
	SYMB	LINE, 4900
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1249
_1240:
; rs232cmd.c 4901				else
; rs232cmd.c 4902				{
; rs232cmd.c 4903					sprintf( buffer, "%lu,%lu\n", Calibration.GenlockCalibration.PhaseG, 
; rs232cmd.c 4904																		    Calibration.GenlockCalibration.PhaseM);
	SYMB	LINE, 4904
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+126 )
	MOV.W	R1,#SOF( _Calibration+126 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _Calibration+134 )
	MOV.W	R3,#SOF( _Calibration+134 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	PUSH.W	R0, R1
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _1227 )
	MOV.W	R0,#SOF( _1227 )
	PUSH.W	R0, R1
	SYMB	SOFF, 54
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
; rs232cmd.c 4905					rs232puts( buffer);
	SYMB	LINE, 4905
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4906				}
; rs232cmd.c 4907			}
	SYMB	LINE, 4907
	BR	_1249
_1241:
; rs232cmd.c 4908			else
; rs232cmd.c 4909			{
; rs232cmd.c 4910				if ( !PasswordProtected)
	SYMB	LINE, 4910
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1249
; rs232cmd.c 4911				{
; rs232cmd.c 4912					if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &PhaseG, &PhaseM)) != 2))
	SYMB	LINE, 4912
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1242
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+34
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1038 )
	MOV.W	R2,#SOF( _1038 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1243
_1242:
; rs232cmd.c 4913						SCPIError = SyntaxErr;
	SYMB	LINE, 4913
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1249
_1243:
; rs232cmd.c 4914					else
; rs232cmd.c 4915					{
; rs232cmd.c 4916						Calibration.GenlockCalibration.PhaseG = PhaseG;
	SYMB	LINE, 4916
	MOV.W	R1,[R7+32]
	MOV.W	R0,[R7+30]
	MOV.B	ES,#SEG( _Calibration+126 )
	MOV.W	R2,#SOF( _Calibration+126 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4917						Calibration.GenlockCalibration.PhaseM = PhaseM;
	SYMB	LINE, 4917
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	MOV.B	ES,#SEG( _Calibration+134 )
	MOV.W	R2,#SOF( _Calibration+134 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4918					
; rs232cmd.c 4919						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4919
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4920					}
; rs232cmd.c 4921				}
; rs232cmd.c 4922			}
; rs232cmd.c 4923		}
	SYMB	LINE, 4923
_1249:
; rs232cmd.c 4924	}
	SYMB	LINE, 4924
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4925	
; rs232cmd.c 4926	/**************************************************************************/
; rs232cmd.c 4927	/* FactBBGenDate	 																			 	     RS232CMD.C	*/
; rs232cmd.c 4928	/*																																				*/
; rs232cmd.c 4929	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 4930	/* Revised:	  000622				     																					*/
; rs232cmd.c 4931	/*																																				*/
; rs232cmd.c 4932	/* Function:	--																													*/
; rs232cmd.c 4933	/* Remarks:		--																													*/
; rs232cmd.c 4934	/* Returns:		--																													*/
; rs232cmd.c 4935	/* Updates:		--																													*/
; rs232cmd.c 4936	/**************************************************************************/
; rs232cmd.c 4937	void FactBBGenDate( void)
; rs232cmd.c 4938	{
	ALIGN	1
	SYMB	LINE, 4938
	PUBLIC	_FactBBGenDate
_FactBBGenDate:
	SYMB	TYPE, 634, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenDate", _FactBBGenDate, #634, 0, 0, 48
	SYMB	ALAB, _FactBBGenDate, #634
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4939		UI year, month, day;
; rs232cmd.c 4940		char buffer[20];
; rs232cmd.c 4941	
; rs232cmd.c 4942		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4942
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1263
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1263
; rs232cmd.c 4943		{
; rs232cmd.c 4944			if ( CmdRequest)
	SYMB	LINE, 4944
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1253
; rs232cmd.c 4945			{
; rs232cmd.c 4946				if ( ParCnt)
	SYMB	LINE, 4946
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1252
; rs232cmd.c 4947					SCPIError = SyntaxErr;
	SYMB	LINE, 4947
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1263
_1252:
; rs232cmd.c 4948				else
; rs232cmd.c 4949				{
; rs232cmd.c 4950					day = Calibration.BBCalibration[Suffix[0]].Date % 100;
	SYMB	LINE, 4950
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+138 )
	MOV.W	R1,[R0+SOF( _Calibration+140 )]
	MOV.W	R0,[R0+SOF( _Calibration+138 )]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	FCALL	__UMODL
	MOV.W	[R7+8],R0
; rs232cmd.c 4951					month = ( Calibration.BBCalibration[Suffix[0]].Date / 100) % 100;
	SYMB	LINE, 4951
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+6],R0
; rs232cmd.c 4952					year = ( Calibration.BBCalibration[Suffix[0]].Date / 10000);
	SYMB	LINE, 4952
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	FCALL	__UDIVL
	MOV.W	[R7+4],R0
; rs232cmd.c 4953	
; rs232cmd.c 4954					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 4954
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+10
	MOV.W	R0,[R7+8]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R0,[R7+8]
	PUSH.W	R0
	SYMB	SOFF, 38
	MOV.W	R0,[R7+8]
	PUSH.W	R0
	SYMB	SOFF, 40
	MOV.W	R1,#SEG( _1174 )
	MOV.W	R0,#SOF( _1174 )
	PUSH.W	R0, R1
	SYMB	SOFF, 44
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 34
; rs232cmd.c 4955	
; rs232cmd.c 4956					rs232puts( buffer);
	SYMB	LINE, 4956
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4957				}
; rs232cmd.c 4958			}
	SYMB	LINE, 4958
	BR	_1263
_1253:
; rs232cmd.c 4959			else
; rs232cmd.c 4960			{
; rs232cmd.c 4961				if ( !PasswordProtected)
	SYMB	LINE, 4961
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1263
; rs232cmd.c 4962				{
; rs232cmd.c 4963					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 4963
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1254
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+4
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+8
	PUSH.W	R0, R1
	SYMB	SOFF, 38
	PUSH.W	R4, R5
	SYMB	SOFF, 42
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R3,#SEG( _1175 )
	MOV.W	R2,#SOF( _1175 )
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 34
	CMP.W	R0,#03H
	BEQ	_1255
_1254:
; rs232cmd.c 4964						SCPIError = SyntaxErr;
	SYMB	LINE, 4964
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1263
_1255:
; rs232cmd.c 4965					else
; rs232cmd.c 4966					{
; rs232cmd.c 4967						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4967
	MOV.W	R0,[R7+4]
	MOV.W	R1,[R7+6]
	MOV.W	R2,[R7+8]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1256
; rs232cmd.c 4968							SCPIError = ExecErr;
	SYMB	LINE, 4968
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1263
_1256:
; rs232cmd.c 4969						else
; rs232cmd.c 4970						{
; rs232cmd.c 4971							Calibration.BBCalibration[Suffix[0]].Date = day + 100*month + 10000*year;
	SYMB	LINE, 4971
	MOV.W	R0,[R7+6]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+8]
	MOV.W	R2,[R7+4]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R2,#SOF( _Suffix )
	MOV.W	R2,[R2]
	MULU.W	R2,#014H
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _Calibration+138 )
	MOV.W	[R2+SOF( _Calibration+138 )],R0
	MOV.W	[R2+SOF( _Calibration+140 )],R1
; rs232cmd.c 4972						
; rs232cmd.c 4973						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4973
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4974						}
; rs232cmd.c 4975					}				
; rs232cmd.c 4976				}
; rs232cmd.c 4977			}
; rs232cmd.c 4978		}
	SYMB	LINE, 4978
_1263:
; rs232cmd.c 4979	}
	SYMB	LINE, 4979
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4980	
; rs232cmd.c 4981	/**************************************************************************/
; rs232cmd.c 4982	/* FactBBGenVersion																			 	     RS232CMD.C	*/
; rs232cmd.c 4983	/*																																				*/
; rs232cmd.c 4984	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4985	/* Revised:	  000614				     																					*/
; rs232cmd.c 4986	/*																																				*/
; rs232cmd.c 4987	/* Function:	--																													*/
; rs232cmd.c 4988	/* Remarks:		--																													*/
; rs232cmd.c 4989	/* Returns:		--																													*/
; rs232cmd.c 4990	/* Updates:		--																													*/
; rs232cmd.c 4991	/**************************************************************************/
; rs232cmd.c 4992	void FactBBGenVersion( void)
; rs232cmd.c 4993	{
	ALIGN	1
	SYMB	LINE, 4993
	PUBLIC	_FactBBGenVersion
_FactBBGenVersion:
	SYMB	TYPE, 635, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenVersion", _FactBBGenVersion, #635, 0, 0, 48
	SYMB	ALAB, _FactBBGenVersion, #635
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#0AH
	SYMB	SOFF, 14
	SYMB	IDEN, "result", -14, #626, 130, 5
; rs232cmd.c 4994		char result[10];
; rs232cmd.c 4995	
; rs232cmd.c 4996		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4996
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1274
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1274
; rs232cmd.c 4997		{
; rs232cmd.c 4998			if ( CmdRequest)
	SYMB	LINE, 4998
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1269
; rs232cmd.c 4999			{
; rs232cmd.c 5000				if ( ParCnt || Suffix[0])
	SYMB	LINE, 5000
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BNE	_1266
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	BEQ	_1267
_1266:
; rs232cmd.c 5001					SCPIError = SyntaxErr;
	SYMB	LINE, 5001
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1274
_1267:
; rs232cmd.c 5002				else
; rs232cmd.c 5003				{
; rs232cmd.c 5004					if ( BBVersion( result) == OK)
	SYMB	LINE, 5004
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_BBVersion
	CMP.W	R0,#0FFFFH
	BNE	_1268
; rs232cmd.c 5005					{
; rs232cmd.c 5006						rs232puts( result);
	SYMB	LINE, 5006
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5007						rs232putchar( '\n');
	SYMB	LINE, 5007
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 5008					}
	SYMB	LINE, 5008
	BR	_1274
_1268:
; rs232cmd.c 5009					else
; rs232cmd.c 5010						SCPIError = ExecErr;			
	SYMB	LINE, 5010
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 5011				}
; rs232cmd.c 5012			}
	SYMB	LINE, 5012
	BR	_1274
_1269:
; rs232cmd.c 5013			else
; rs232cmd.c 5014				SCPIError = SyntaxErr;
	SYMB	LINE, 5014
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 5015		}
	SYMB	LINE, 5015
_1274:
; rs232cmd.c 5016	}
	SYMB	LINE, 5016
	ADD.W	R7,#0AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5017	
; rs232cmd.c 5018	/**************************************************************************/
; rs232cmd.c 5019	/* FactBBGenSignal																			 	     RS232CMD.C	*/
; rs232cmd.c 5020	/*																																				*/
; rs232cmd.c 5021	/* Author:		Kim Engedahl, DEV, 000503	    															*/
; rs232cmd.c 5022	/* Revised:	  000614			     																						*/
; rs232cmd.c 5023	/*																																				*/
; rs232cmd.c 5024	/* Function:	--																													*/
; rs232cmd.c 5025	/* Remarks:		--																													*/
; rs232cmd.c 5026	/* Returns:		--																													*/
; rs232cmd.c 5027	/* Updates:		--																													*/
; rs232cmd.c 5028	/**************************************************************************/
; rs232cmd.c 5029	void FactBBGenSignal( void)
; rs232cmd.c 5030	{
	ALIGN	1
	SYMB	LINE, 5030
	PUBLIC	_FactBBGenSignal
_FactBBGenSignal:
	SYMB	TYPE, 636, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenSignal", _FactBBGenSignal, #636, 0, 0, 0
	SYMB	ALAB, _FactBBGenSignal, #636
	SYMB	IDEN, "signal", -1, #16, 130, 5
	SYMB	LTIM, "signal", -1, 0, 69
; rs232cmd.c 5031		int signal;
; rs232cmd.c 5032	
; rs232cmd.c 5033		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5033
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1287
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1287
; rs232cmd.c 5034		{
; rs232cmd.c 5035			if ( CmdRequest)
	SYMB	LINE, 5035
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1276
; rs232cmd.c 5036				SCPIError = SyntaxErr;
	SYMB	LINE, 5036
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_1276:
; rs232cmd.c 5037			else
; rs232cmd.c 5038			{
; rs232cmd.c 5039				if ( !PasswordProtected)
	SYMB	LINE, 5039
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1287
; rs232cmd.c 5040				{
; rs232cmd.c 5041					if ( ParCnt != 1)
	SYMB	LINE, 5041
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_1277
; rs232cmd.c 5042						SCPIError = SyntaxErr;
	SYMB	LINE, 5042
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_1277:
; rs232cmd.c 5043					else
; rs232cmd.c 5044					{
; rs232cmd.c 5045						signal = FindParameter( Cmd, FactBBGenSignalPar);
	SYMB	LINE, 5045
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _FactBBGenSignalPar )
	MOV.W	R2,#SOF( _FactBBGenSignalPar )
	CALL	_FindParameter
	SYMB	LTIM, "signal", 2, 0, 205
; rs232cmd.c 5046		
; rs232cmd.c 5047						switch ( signal)
	SYMB	LINE, 5047
	CMP.W	R0,#00H
	BEQ	_1278
	CMP.W	R0,#01H
	BEQ	_1279
	BR	_1280
; rs232cmd.c 5048						{
; rs232cmd.c 5049							case 0:
	SYMB	LINE, 5049
_1278:
; rs232cmd.c 5050								BBControlPort = 0;
	SYMB	LINE, 5050
	MOV.B	ES,#SEG( _BBControlPort )
	MOV.W	R0,#SOF( _BBControlPort )
	MOV.W	[R0],#00H
; rs232cmd.c 5051								break;
	SYMB	LINE, 5051
	RET
; rs232cmd.c 5052	
; rs232cmd.c 5053							case 1:
	SYMB	LINE, 5053
_1279:
; rs232cmd.c 5054								BBControlPort = 1;
	SYMB	LINE, 5054
	MOV.B	ES,#SEG( _BBControlPort )
	MOV.W	R0,#SOF( _BBControlPort )
	MOV.W	[R0],#01H
; rs232cmd.c 5055								break;
	SYMB	LINE, 5055
	RET
; rs232cmd.c 5056	
; rs232cmd.c 5057							default:
	SYMB	LINE, 5057
_1280:
; rs232cmd.c 5058								SCPIError = DataOutOfRange;
	SYMB	LINE, 5058
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 5059								break;
; rs232cmd.c 5060						}
; rs232cmd.c 5061					}
; rs232cmd.c 5062				}
; rs232cmd.c 5063			}
; rs232cmd.c 5064		}
	SYMB	LINE, 5064
_1287:
; rs232cmd.c 5065	}
	SYMB	LINE, 5065
	RET
	SYMB	LTIM, "signal", 2, 0, 77
	SYMB	EFUN
; rs232cmd.c 5066	
; rs232cmd.c 5067	/**************************************************************************/
; rs232cmd.c 5068	/* FactBBGenPhase																				 	     RS232CMD.C	*/
; rs232cmd.c 5069	/*																																				*/
; rs232cmd.c 5070	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5071	/* Revised:	  000622				     																					*/
; rs232cmd.c 5072	/*																																				*/
; rs232cmd.c 5073	/* Function:	--																													*/
; rs232cmd.c 5074	/* Remarks:		--																													*/
; rs232cmd.c 5075	/* Returns:		--																													*/
; rs232cmd.c 5076	/* Updates:		--																													*/
; rs232cmd.c 5077	/**************************************************************************/
; rs232cmd.c 5078	void FactBBGenPhase( void)
; rs232cmd.c 5079	{
	ALIGN	1
	SYMB	LINE, 5079
	PUBLIC	_FactBBGenPhase
_FactBBGenPhase:
	SYMB	TYPE, 637, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenPhase", _FactBBGenPhase, #637, 0, 0, 48
	SYMB	ALAB, _FactBBGenPhase, #637
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "buffer", -42, #606, 130, 5
	SYMB	IDEN, "PhaseG", -12, #7, 130, 5
	SYMB	IDEN, "PhaseM", -8, #7, 130, 5
; rs232cmd.c 5080		char buffer[30];
; rs232cmd.c 5081		UL PhaseG, PhaseM;
; rs232cmd.c 5082	
; rs232cmd.c 5083		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5083
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1298
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1298
; rs232cmd.c 5084		{
; rs232cmd.c 5085			if ( CmdRequest)
	SYMB	LINE, 5085
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1290
; rs232cmd.c 5086			{
; rs232cmd.c 5087				if ( ParCnt)
	SYMB	LINE, 5087
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1289
; rs232cmd.c 5088					SCPIError = SyntaxErr;
	SYMB	LINE, 5088
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1298
_1289:
; rs232cmd.c 5089				else
; rs232cmd.c 5090				{
; rs232cmd.c 5091					sprintf( buffer, "%lu,%lu\n", Calibration.BBCalibration[Suffix[0]].PhaseG, 
; rs232cmd.c 5092																		    Calibration.BBCalibration[Suffix[0]].PhaseM);
	SYMB	LINE, 5092
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+142 )
	MOV.W	R2,[R0+SOF( _Calibration+142 )]
	MOV.W	R3,[R0+SOF( _Calibration+144 )]
	MOV.B	ES,#SEG( _Calibration+148 )
	MOV.W	R1,[R0+SOF( _Calibration+150 )]
	MOV.W	R0,[R0+SOF( _Calibration+148 )]
	PUSH.W	R0, R1
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _1227 )
	MOV.W	R0,#SOF( _1227 )
	PUSH.W	R0, R1
	SYMB	SOFF, 54
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
; rs232cmd.c 5093					rs232puts( buffer);
	SYMB	LINE, 5093
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5094				}
; rs232cmd.c 5095			}
	SYMB	LINE, 5095
	BR	_1298
_1290:
; rs232cmd.c 5096			else
; rs232cmd.c 5097			{
; rs232cmd.c 5098				if ( !PasswordProtected)
	SYMB	LINE, 5098
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1298
; rs232cmd.c 5099				{
; rs232cmd.c 5100					if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &PhaseG, &PhaseM)) != 2))
	SYMB	LINE, 5100
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1291
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+34
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1038 )
	MOV.W	R2,#SOF( _1038 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1292
_1291:
; rs232cmd.c 5101						SCPIError = SyntaxErr;
	SYMB	LINE, 5101
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1298
_1292:
; rs232cmd.c 5102					else
; rs232cmd.c 5103					{
; rs232cmd.c 5104						Calibration.BBCalibration[Suffix[0]].PhaseG = PhaseG;
	SYMB	LINE, 5104
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.W	R3,[R7+32]
	MOV.W	R2,[R7+30]
	MOV.B	ES,#SEG( _Calibration+142 )
	MOV.W	[R0+SOF( _Calibration+142 )],R2
	MOV.W	[R0+SOF( _Calibration+144 )],R3
; rs232cmd.c 5105						Calibration.BBCalibration[Suffix[0]].PhaseM = PhaseM;
	SYMB	LINE, 5105
	MOV.W	R3,[R7+36]
	MOV.W	R2,[R7+34]
	MOV.B	ES,#SEG( _Calibration+148 )
	MOV.W	[R0+SOF( _Calibration+148 )],R2
	MOV.W	[R0+SOF( _Calibration+150 )],R3
; rs232cmd.c 5106					
; rs232cmd.c 5107						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5107
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5108					}
; rs232cmd.c 5109				}
; rs232cmd.c 5110			}
; rs232cmd.c 5111		}
	SYMB	LINE, 5111
_1298:
; rs232cmd.c 5112	}
	SYMB	LINE, 5112
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5113	
; rs232cmd.c 5114	/**************************************************************************/
; rs232cmd.c 5115	/* FactBBGenScHPhase																		 	     RS232CMD.C	*/
; rs232cmd.c 5116	/*																																				*/
; rs232cmd.c 5117	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5118	/* Revised:	  000622				     																					*/
; rs232cmd.c 5119	/*																																				*/
; rs232cmd.c 5120	/* Function:	--																													*/
; rs232cmd.c 5121	/* Remarks:		--																													*/
; rs232cmd.c 5122	/* Returns:		--																													*/
; rs232cmd.c 5123	/* Updates:		--																													*/
; rs232cmd.c 5124	/**************************************************************************/
; rs232cmd.c 5125	void FactBBGenScHPhase( void)
; rs232cmd.c 5126	{
	ALIGN	1
	SYMB	LINE, 5126
	PUBLIC	_FactBBGenScHPhase
_FactBBGenScHPhase:
	SYMB	TYPE, 638, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenScHPhase", _FactBBGenScHPhase, #638, 0, 0, 48
	SYMB	ALAB, _FactBBGenScHPhase, #638
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#022H
	SYMB	SOFF, 38
	SYMB	IDEN, "buffer", -38, #606, 130, 5
	SYMB	IDEN, "ScHPhaseG", -8, #18, 130, 5
	SYMB	IDEN, "ScHPhaseM", -6, #18, 130, 5
; rs232cmd.c 5127		char buffer[30];
; rs232cmd.c 5128		UI ScHPhaseG, ScHPhaseM;
; rs232cmd.c 5129	
; rs232cmd.c 5130		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5130
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1312
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1312
; rs232cmd.c 5131		{
; rs232cmd.c 5132			if ( CmdRequest)
	SYMB	LINE, 5132
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1304
; rs232cmd.c 5133			{
; rs232cmd.c 5134				if ( ParCnt)
	SYMB	LINE, 5134
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1303
; rs232cmd.c 5135					SCPIError = SyntaxErr;
	SYMB	LINE, 5135
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1312
_1303:
; rs232cmd.c 5136				else
; rs232cmd.c 5137				{
; rs232cmd.c 5138					sprintf( buffer, "%u,%u\n", Calibration.BBCalibration[Suffix[0]].ScHPhaseG, 
; rs232cmd.c 5139																	    Calibration.BBCalibration[Suffix[0]].ScHPhaseM);
	SYMB	LINE, 5139
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+146 )
	MOV.W	R2,[R0+SOF( _Calibration+146 )]
	MOV.B	ES,#SEG( _Calibration+152 )
	MOV.W	R0,[R0+SOF( _Calibration+152 )]
	PUSH.W	R0
	SYMB	SOFF, 40
	PUSH.W	R2
	SYMB	SOFF, 42
	MOV.W	R1,#SEG( _1301 )
	MOV.W	R0,#SOF( _1301 )
	PUSH.W	R0, R1
	SYMB	SOFF, 46
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 38
; rs232cmd.c 5140					rs232puts( buffer);
	SYMB	LINE, 5140
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5141				}
; rs232cmd.c 5142			}
	SYMB	LINE, 5142
	BR	_1312
_1304:
; rs232cmd.c 5143			else
; rs232cmd.c 5144			{
; rs232cmd.c 5145				if ( !PasswordProtected)
	SYMB	LINE, 5145
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1312
; rs232cmd.c 5146				{
; rs232cmd.c 5147					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &ScHPhaseG, &ScHPhaseM)) != 2))
	SYMB	LINE, 5147
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1305
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+32
	PUSH.W	R4, R5
	SYMB	SOFF, 42
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R3,#SEG( _1302 )
	MOV.W	R2,#SOF( _1302 )
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 38
	CMP.W	R0,#02H
	BEQ	_1306
_1305:
; rs232cmd.c 5148						SCPIError = SyntaxErr;
	SYMB	LINE, 5148
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1312
_1306:
; rs232cmd.c 5149					else
; rs232cmd.c 5150					{
; rs232cmd.c 5151						Calibration.BBCalibration[Suffix[0]].ScHPhaseG = ScHPhaseG;
	SYMB	LINE, 5151
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.W	R2,[R7+30]
	MOV.B	ES,#SEG( _Calibration+146 )
	MOV.W	[R0+SOF( _Calibration+146 )],R2
; rs232cmd.c 5152						Calibration.BBCalibration[Suffix[0]].ScHPhaseM = ScHPhaseM;
	SYMB	LINE, 5152
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.W	R2,[R7+32]
	MOV.B	ES,#SEG( _Calibration+152 )
	MOV.W	[R0+SOF( _Calibration+152 )],R2
; rs232cmd.c 5153					
; rs232cmd.c 5154						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5154
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5155					}
; rs232cmd.c 5156				}
; rs232cmd.c 5157			}
; rs232cmd.c 5158		}
	SYMB	LINE, 5158
_1312:
; rs232cmd.c 5159	}
	SYMB	LINE, 5159
	ADD.W	R7,#022H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5160	
; rs232cmd.c 5161	/**************************************************************************/
; rs232cmd.c 5162	/* FactBBGenDAC																					 	     RS232CMD.C	*/
; rs232cmd.c 5163	/*																																				*/
; rs232cmd.c 5164	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5165	/* Revised:	  000622				     																					*/
; rs232cmd.c 5166	/*																																				*/
; rs232cmd.c 5167	/* Function:	--																													*/
; rs232cmd.c 5168	/* Remarks:		--																													*/
; rs232cmd.c 5169	/* Returns:		--																													*/
; rs232cmd.c 5170	/* Updates:		--																													*/
; rs232cmd.c 5171	/**************************************************************************/
; rs232cmd.c 5172	void FactBBGenDAC( void)
; rs232cmd.c 5173	{
	ALIGN	1
	SYMB	LINE, 5173
	PUBLIC	_FactBBGenDAC
_FactBBGenDAC:
	SYMB	TYPE, 639, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenDAC", _FactBBGenDAC, #639, 0, 0, 48
	SYMB	ALAB, _FactBBGenDAC, #639
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#024H
	SYMB	SOFF, 40
	SYMB	IDEN, "buffer", -40, #606, 130, 5
	SYMB	IDEN, "DACGain", -10, #18, 130, 5
	SYMB	IDEN, "DACOffset", -8, #18, 130, 5
	SYMB	IDEN, "DACLevel", -6, #18, 130, 5
; rs232cmd.c 5174		char buffer[30];
; rs232cmd.c 5175		UI DACGain, DACOffset, DACLevel;
; rs232cmd.c 5176	
; rs232cmd.c 5177		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5177
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1324
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1324
; rs232cmd.c 5178		{
; rs232cmd.c 5179			if ( CmdRequest)
	SYMB	LINE, 5179
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1316
; rs232cmd.c 5180			{
; rs232cmd.c 5181				if ( ParCnt)
	SYMB	LINE, 5181
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1315
; rs232cmd.c 5182					SCPIError = SyntaxErr;
	SYMB	LINE, 5182
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1324
_1315:
; rs232cmd.c 5183				else
; rs232cmd.c 5184				{
; rs232cmd.c 5185					sprintf( buffer, "%u,%u,%u\n", Calibration.BBCalibration[Suffix[0]].DACGain, 
; rs232cmd.c 5186																		     Calibration.BBCalibration[Suffix[0]].DACOffset,
; rs232cmd.c 5187																		     Calibration.BBCalibration[Suffix[0]].DACLevel);
	SYMB	LINE, 5187
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+154 )
	MOV.B	R2L,[R0+SOF( _Calibration+154 )]
	MOVS.B	R2H,#00H
	MOV.B	ES,#SEG( _Calibration+155 )
	MOV.B	R3L,[R0+SOF( _Calibration+155 )]
	MOVS.B	R3H,#00H
	MOV.B	ES,#SEG( _Calibration+156 )
	MOV.B	R0L,[R0+SOF( _Calibration+156 )]
	MOVS.B	R0H,#00H
	PUSH.W	R0
	SYMB	SOFF, 42
	PUSH.W	R3
	SYMB	SOFF, 44
	PUSH.W	R2
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _1174 )
	MOV.W	R0,#SOF( _1174 )
	PUSH.W	R0, R1
	SYMB	SOFF, 50
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 40
; rs232cmd.c 5188					rs232puts( buffer);
	SYMB	LINE, 5188
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5189				}
; rs232cmd.c 5190			}
	SYMB	LINE, 5190
	BR	_1324
_1316:
; rs232cmd.c 5191			else
; rs232cmd.c 5192			{
; rs232cmd.c 5193				if ( !PasswordProtected)
	SYMB	LINE, 5193
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1324
; rs232cmd.c 5194				{
; rs232cmd.c 5195					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &DACGain, &DACOffset, &DACLevel)) != 3))
	SYMB	LINE, 5195
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1317
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+32
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+34
	PUSH.W	R0, R1
	SYMB	SOFF, 44
	PUSH.W	R4, R5
	SYMB	SOFF, 48
	PUSH.W	R2, R3
	SYMB	SOFF, 52
	MOV.W	R3,#SEG( _1175 )
	MOV.W	R2,#SOF( _1175 )
	PUSH.W	R2, R3
	SYMB	SOFF, 56
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 40
	CMP.W	R0,#03H
	BEQ	_1318
_1317:
; rs232cmd.c 5196						SCPIError = SyntaxErr;
	SYMB	LINE, 5196
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1324
_1318:
; rs232cmd.c 5197					else
; rs232cmd.c 5198					{
; rs232cmd.c 5199						Calibration.BBCalibration[Suffix[0]].DACGain = DACGain;
	SYMB	LINE, 5199
	MOV.W	R2,[R7+30]
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+154 )
	MOV.B	[R0+SOF( _Calibration+154 )],R2L
; rs232cmd.c 5200						Calibration.BBCalibration[Suffix[0]].DACOffset = DACOffset;
	SYMB	LINE, 5200
	MOV.W	R2,[R7+32]
	MOV.B	ES,#SEG( _Calibration+155 )
	MOV.B	[R0+SOF( _Calibration+155 )],R2L
; rs232cmd.c 5201						Calibration.BBCalibration[Suffix[0]].DACLevel = DACLevel;	
	SYMB	LINE, 5201
	MOV.W	R2,[R7+34]
	MOV.B	ES,#SEG( _Calibration+156 )
	MOV.B	[R0+SOF( _Calibration+156 )],R2L
; rs232cmd.c 5202								
; rs232cmd.c 5203						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5203
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5204					}
; rs232cmd.c 5205				}
; rs232cmd.c 5206			}
; rs232cmd.c 5207		}
	SYMB	LINE, 5207
_1324:
; rs232cmd.c 5208	}
	SYMB	LINE, 5208
	ADD.W	R7,#024H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5209	
; rs232cmd.c 5210	/**************************************************************************/
; rs232cmd.c 5211	/* FactTSGenDate																				 	     RS232CMD.C	*/
; rs232cmd.c 5212	/*																																				*/
; rs232cmd.c 5213	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5214	/* Revised:	  000727				     																					*/
; rs232cmd.c 5215	/*																																				*/
; rs232cmd.c 5216	/* Function:	--																													*/
; rs232cmd.c 5217	/* Remarks:		--																													*/
; rs232cmd.c 5218	/* Returns:		--																													*/
; rs232cmd.c 5219	/* Updates:		--																													*/
; rs232cmd.c 5220	/**************************************************************************/
; rs232cmd.c 5221	void FactTSGenDate( void)
; rs232cmd.c 5222	{
	ALIGN	1
	SYMB	LINE, 5222
	PUBLIC	_FactTSGenDate
_FactTSGenDate:
	SYMB	TYPE, 640, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTSGenDate", _FactTSGenDate, #640, 0, 0, 48
	SYMB	ALAB, _FactTSGenDate, #640
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5223		UI year, month, day;
; rs232cmd.c 5224		char buffer[20];
; rs232cmd.c 5225	
; rs232cmd.c 5226		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5226
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1338
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1338
; rs232cmd.c 5227		{
; rs232cmd.c 5228			if ( CmdRequest)
	SYMB	LINE, 5228
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1328
; rs232cmd.c 5229			{
; rs232cmd.c 5230				if ( ParCnt)
	SYMB	LINE, 5230
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1327
; rs232cmd.c 5231					SCPIError = SyntaxErr;
	SYMB	LINE, 5231
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1338
_1327:
; rs232cmd.c 5232				else
; rs232cmd.c 5233				{
; rs232cmd.c 5234					day = Calibration.CBCalibration.Date % 100;
	SYMB	LINE, 5234
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R1,#SOF( _Calibration+198 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R4,#SOF( _Calibration+198 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R1,#SOF( _Calibration+198 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 5235					month = ( Calibration.CBCalibration.Date / 100) % 100;
	SYMB	LINE, 5235
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 5236					year = ( Calibration.CBCalibration.Date / 10000);
	SYMB	LINE, 5236
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R1,#SOF( _Calibration+198 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 5237	
; rs232cmd.c 5238					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 5238
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1174 )
	MOV.W	R0,#SOF( _1174 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 5239	
; rs232cmd.c 5240					rs232puts( buffer);
	SYMB	LINE, 5240
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5241				}
; rs232cmd.c 5242			}
	SYMB	LINE, 5242
	BR	_1338
_1328:
; rs232cmd.c 5243			else
; rs232cmd.c 5244			{
; rs232cmd.c 5245				if ( !PasswordProtected)
	SYMB	LINE, 5245
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1338
; rs232cmd.c 5246				{
; rs232cmd.c 5247					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 5247
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1329
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1175 )
	MOV.W	R2,#SOF( _1175 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1330
_1329:
; rs232cmd.c 5248						SCPIError = SyntaxErr;
	SYMB	LINE, 5248
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1338
_1330:
; rs232cmd.c 5249					else
; rs232cmd.c 5250					{
; rs232cmd.c 5251						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 5251
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1331
; rs232cmd.c 5252							SCPIError = ExecErr;
	SYMB	LINE, 5252
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1338
_1331:
; rs232cmd.c 5253						else
; rs232cmd.c 5254						{
; rs232cmd.c 5255							Calibration.CBCalibration.Date = day + 100*month + 10000*year;
	SYMB	LINE, 5255
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R2,#SOF( _Calibration+198 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 5256						
; rs232cmd.c 5257						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5257
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5258						}
; rs232cmd.c 5259					}				
; rs232cmd.c 5260				}
; rs232cmd.c 5261			}
; rs232cmd.c 5262		}
	SYMB	LINE, 5262
_1338:
; rs232cmd.c 5263	}
	SYMB	LINE, 5263
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5264	
; rs232cmd.c 5265	/**************************************************************************/
; rs232cmd.c 5266	/* FactTSGenAGain																				 	     RS232CMD.C	*/
; rs232cmd.c 5267	/*																																				*/
; rs232cmd.c 5268	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5269	/* Revised:	  000727,				     																					*/
; rs232cmd.c 5270	/*																																				*/
; rs232cmd.c 5271	/* Function:	--																													*/
; rs232cmd.c 5272	/* Remarks:		--																													*/
; rs232cmd.c 5273	/* Returns:		--																													*/
; rs232cmd.c 5274	/* Updates:		--																													*/
; rs232cmd.c 5275	/**************************************************************************/
; rs232cmd.c 5276	void FactTSGenAGain( void)
; rs232cmd.c 5277	{
	ALIGN	1
	SYMB	LINE, 5277
	PUBLIC	_FactTSGenAGain
_FactTSGenAGain:
	SYMB	TYPE, 641, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTSGenAGain", _FactTSGenAGain, #641, 0, 0, 48
	SYMB	ALAB, _FactTSGenAGain, #641
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#018H
	SYMB	SOFF, 28
	SYMB	IDEN, "buffer", -28, #563, 130, 5
	SYMB	IDEN, "GainG", -8, #3, 130, 5
	SYMB	IDEN, "GainM", -6, #3, 130, 5
; rs232cmd.c 5278		char buffer[20];
; rs232cmd.c 5279		UC GainG, GainM;
; rs232cmd.c 5280	
; rs232cmd.c 5281		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5281
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1352
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1352
; rs232cmd.c 5282		{
; rs232cmd.c 5283			if ( CmdRequest)
	SYMB	LINE, 5283
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1342
; rs232cmd.c 5284			{
; rs232cmd.c 5285				if ( ParCnt)
	SYMB	LINE, 5285
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1341
; rs232cmd.c 5286					SCPIError = SyntaxErr;
	SYMB	LINE, 5286
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1352
_1341:
; rs232cmd.c 5287				else
; rs232cmd.c 5288				{
; rs232cmd.c 5289					sprintf( buffer, "%u,%u\n", Calibration.CBCalibration.GainG, 
; rs232cmd.c 5290																	    Calibration.CBCalibration.GainM);
	SYMB	LINE, 5290
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+213 )
	MOV.W	R0,#SOF( _Calibration+213 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOV.B	ES,#SEG( _Calibration+215 )
	MOV.W	R1,#SOF( _Calibration+215 )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 30
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R1,#SEG( _1301 )
	MOV.W	R0,#SOF( _1301 )
	PUSH.W	R0, R1
	SYMB	SOFF, 36
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 28
; rs232cmd.c 5291					rs232puts( buffer);
	SYMB	LINE, 5291
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5292				}
; rs232cmd.c 5293			}
	SYMB	LINE, 5293
	BR	_1352
_1342:
; rs232cmd.c 5294			else
; rs232cmd.c 5295			{
; rs232cmd.c 5296				if ( !PasswordProtected)
	SYMB	LINE, 5296
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1352
; rs232cmd.c 5297				{
; rs232cmd.c 5298					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &GainG, &GainM)) != 2))
	SYMB	LINE, 5298
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1343
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+22
	PUSH.W	R4, R5
	SYMB	SOFF, 32
	PUSH.W	R2, R3
	SYMB	SOFF, 36
	MOV.W	R3,#SEG( _1302 )
	MOV.W	R2,#SOF( _1302 )
	PUSH.W	R2, R3
	SYMB	SOFF, 40
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 28
	CMP.W	R0,#02H
	BEQ	_1344
_1343:
; rs232cmd.c 5299						SCPIError = SyntaxErr;
	SYMB	LINE, 5299
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1352
_1344:
; rs232cmd.c 5300					else
; rs232cmd.c 5301					{
; rs232cmd.c 5302						Calibration.CBCalibration.GainG = GainG;
	SYMB	LINE, 5302
	MOV.B	R0L,[R7+20]
	MOV.B	ES,#SEG( _Calibration+213 )
	MOV.W	R1,#SOF( _Calibration+213 )
	MOV.B	[R1],R0L
; rs232cmd.c 5303						Calibration.CBCalibration.GainM = GainM;
	SYMB	LINE, 5303
	MOV.B	R0L,[R7+22]
	MOV.B	ES,#SEG( _Calibration+215 )
	MOV.W	R1,#SOF( _Calibration+215 )
	MOV.B	[R1],R0L
; rs232cmd.c 5304																																		
; rs232cmd.c 5305						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5305
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5306	
; rs232cmd.c 5307						if ( CBSetup.System < NTSC)
	SYMB	LINE, 5307
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BCC	_1345
; rs232cmd.c 5308							WriteCBGain( GainG);
	SYMB	LINE, 5308
	MOV.B	R0L,[R7+20]
	CALL	_WriteCBGain
	BR	_1352
_1345:
; rs232cmd.c 5309						else
; rs232cmd.c 5310							WriteCBGain( GainM);
	SYMB	LINE, 5310
	MOV.B	R0L,[R7+22]
	CALL	_WriteCBGain
; rs232cmd.c 5311					}
; rs232cmd.c 5312				}
; rs232cmd.c 5313			}
; rs232cmd.c 5314		}
	SYMB	LINE, 5314
_1352:
; rs232cmd.c 5315	}
	SYMB	LINE, 5315
	ADD.W	R7,#018H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5316	
; rs232cmd.c 5317	/**************************************************************************/
; rs232cmd.c 5318	/* FactTSGenCGain																				 	     RS232CMD.C	*/
; rs232cmd.c 5319	/*																																				*/
; rs232cmd.c 5320	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5321	/* Revised:	  000727,				     																					*/
; rs232cmd.c 5322	/*																																				*/
; rs232cmd.c 5323	/* Function:	--																													*/
; rs232cmd.c 5324	/* Remarks:		--																													*/
; rs232cmd.c 5325	/* Returns:		--																													*/
; rs232cmd.c 5326	/* Updates:		--																													*/
; rs232cmd.c 5327	/**************************************************************************/
; rs232cmd.c 5328	void FactTSGenCGain( void)
; rs232cmd.c 5329	{
	ALIGN	1
	SYMB	LINE, 5329
	PUBLIC	_FactTSGenCGain
_FactTSGenCGain:
	SYMB	TYPE, 642, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTSGenCGain", _FactTSGenCGain, #642, 0, 0, 48
	SYMB	ALAB, _FactTSGenCGain, #642
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#018H
	SYMB	SOFF, 28
	SYMB	IDEN, "buffer", -28, #563, 130, 5
	SYMB	IDEN, "ChromaGainG", -8, #3, 130, 5
	SYMB	IDEN, "ChromaGainM", -6, #3, 130, 5
; rs232cmd.c 5330		char buffer[20];
; rs232cmd.c 5331		UC ChromaGainG, ChromaGainM;
; rs232cmd.c 5332	
; rs232cmd.c 5333		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5333
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1367
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1367
; rs232cmd.c 5334		{
; rs232cmd.c 5335			if ( CmdRequest)
	SYMB	LINE, 5335
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1357
; rs232cmd.c 5336			{
; rs232cmd.c 5337				if ( ParCnt)
	SYMB	LINE, 5337
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1356
; rs232cmd.c 5338					SCPIError = SyntaxErr;
	SYMB	LINE, 5338
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1367
_1356:
; rs232cmd.c 5339				else
; rs232cmd.c 5340				{
; rs232cmd.c 5341					sprintf( buffer, "%u,%u\n", Calibration.CBCalibration.ChromaGainG, 
; rs232cmd.c 5342																	    Calibration.CBCalibration.ChromaGainM);
	SYMB	LINE, 5342
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+214 )
	MOV.W	R0,#SOF( _Calibration+214 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOV.B	ES,#SEG( _Calibration+216 )
	MOV.W	R1,#SOF( _Calibration+216 )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 30
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R1,#SEG( _1301 )
	MOV.W	R0,#SOF( _1301 )
	PUSH.W	R0, R1
	SYMB	SOFF, 36
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 28
; rs232cmd.c 5343					rs232puts( buffer);
	SYMB	LINE, 5343
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5344				}
; rs232cmd.c 5345			}
	SYMB	LINE, 5345
	BR	_1367
_1357:
; rs232cmd.c 5346			else
; rs232cmd.c 5347			{
; rs232cmd.c 5348				if ( !PasswordProtected)
	SYMB	LINE, 5348
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1367
; rs232cmd.c 5349				{
; rs232cmd.c 5350					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &ChromaGainG, &ChromaGainM)) != 2))
	SYMB	LINE, 5350
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1358
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+22
	PUSH.W	R4, R5
	SYMB	SOFF, 32
	PUSH.W	R2, R3
	SYMB	SOFF, 36
	MOV.W	R3,#SEG( _1302 )
	MOV.W	R2,#SOF( _1302 )
	PUSH.W	R2, R3
	SYMB	SOFF, 40
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 28
	CMP.W	R0,#02H
	BEQ	_1359
_1358:
; rs232cmd.c 5351						SCPIError = SyntaxErr;
	SYMB	LINE, 5351
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1367
_1359:
; rs232cmd.c 5352					else
; rs232cmd.c 5353					{
; rs232cmd.c 5354						Calibration.CBCalibration.ChromaGainG = ChromaGainG;
	SYMB	LINE, 5354
	MOV.B	R0L,[R7+20]
	MOV.B	ES,#SEG( _Calibration+214 )
	MOV.W	R1,#SOF( _Calibration+214 )
	MOV.B	[R1],R0L
; rs232cmd.c 5355						Calibration.CBCalibration.ChromaGainM = ChromaGainM;
	SYMB	LINE, 5355
	MOV.B	R0L,[R7+22]
	MOV.B	ES,#SEG( _Calibration+216 )
	MOV.W	R1,#SOF( _Calibration+216 )
	MOV.B	[R1],R0L
; rs232cmd.c 5356																																		
; rs232cmd.c 5357						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5357
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5358	
; rs232cmd.c 5359						if ( CBSetup.System < NTSC)
	SYMB	LINE, 5359
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BCC	_1360
; rs232cmd.c 5360							WriteCBChromaGain( ChromaGainG);
	SYMB	LINE, 5360
	MOV.B	R0L,[R7+20]
	CALL	_WriteCBChromaGain
	BR	_1367
_1360:
; rs232cmd.c 5361						else
; rs232cmd.c 5362							WriteCBChromaGain( ChromaGainM);
	SYMB	LINE, 5362
	MOV.B	R0L,[R7+22]
	CALL	_WriteCBChromaGain
; rs232cmd.c 5363					}
; rs232cmd.c 5364				}
; rs232cmd.c 5365			}
; rs232cmd.c 5366		}
	SYMB	LINE, 5366
_1367:
; rs232cmd.c 5367	}
	SYMB	LINE, 5367
	ADD.W	R7,#018H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5368	
; rs232cmd.c 5369	/**************************************************************************/
; rs232cmd.c 5370	/* FactTSGenPhase																				 	     RS232CMD.C	*/
; rs232cmd.c 5371	/*																																				*/
; rs232cmd.c 5372	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5373	/* Revised:	  000727				     																					*/
; rs232cmd.c 5374	/*																																				*/
; rs232cmd.c 5375	/* Function:	--																													*/
; rs232cmd.c 5376	/* Remarks:		PAL range: 0-4*625*1728, NTSC range: 0-2*525*1716						*/
; rs232cmd.c 5377	/* Returns:		--																													*/
; rs232cmd.c 5378	/* Updates:		--																													*/
; rs232cmd.c 5379	/**************************************************************************/
; rs232cmd.c 5380	void FactTSGenPhase( void)
; rs232cmd.c 5381	{
	ALIGN	1
	SYMB	LINE, 5381
	PUBLIC	_FactTSGenPhase
_FactTSGenPhase:
	SYMB	TYPE, 643, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTSGenPhase", _FactTSGenPhase, #643, 0, 0, 48
	SYMB	ALAB, _FactTSGenPhase, #643
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "buffer", -42, #606, 130, 5
	SYMB	IDEN, "PhaseG", -12, #7, 130, 5
	SYMB	IDEN, "PhaseM", -8, #7, 130, 5
; rs232cmd.c 5382		char buffer[30];
; rs232cmd.c 5383		UL PhaseG, PhaseM;
; rs232cmd.c 5384	
; rs232cmd.c 5385		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5385
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1380
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1380
; rs232cmd.c 5386		{
; rs232cmd.c 5387			if ( CmdRequest)
	SYMB	LINE, 5387
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1372
; rs232cmd.c 5388			{
; rs232cmd.c 5389				if ( ParCnt)
	SYMB	LINE, 5389
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1371
; rs232cmd.c 5390					SCPIError = SyntaxErr;
	SYMB	LINE, 5390
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1380
_1371:
; rs232cmd.c 5391				else
; rs232cmd.c 5392				{
; rs232cmd.c 5393					sprintf( buffer, "%lu,%lu\n", Calibration.CBCalibration.PhaseG, 
; rs232cmd.c 5394																		    Calibration.CBCalibration.PhaseM);
	SYMB	LINE, 5394
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+202 )
	MOV.W	R1,#SOF( _Calibration+202 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _Calibration+208 )
	MOV.W	R3,#SOF( _Calibration+208 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	PUSH.W	R0, R1
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _1227 )
	MOV.W	R0,#SOF( _1227 )
	PUSH.W	R0, R1
	SYMB	SOFF, 54
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
; rs232cmd.c 5395					rs232puts( buffer);
	SYMB	LINE, 5395
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5396				}
; rs232cmd.c 5397			}
	SYMB	LINE, 5397
	BR	_1380
_1372:
; rs232cmd.c 5398			else
; rs232cmd.c 5399			{
; rs232cmd.c 5400				if ( !PasswordProtected)
	SYMB	LINE, 5400
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1380
; rs232cmd.c 5401				{
; rs232cmd.c 5402					if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &PhaseG, &PhaseM)) != 2))
	SYMB	LINE, 5402
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1373
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+34
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1038 )
	MOV.W	R2,#SOF( _1038 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1374
_1373:
; rs232cmd.c 5403						SCPIError = SyntaxErr;
	SYMB	LINE, 5403
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1380
_1374:
; rs232cmd.c 5404					else
; rs232cmd.c 5405					{
; rs232cmd.c 5406						Calibration.CBCalibration.PhaseG = PhaseG;
	SYMB	LINE, 5406
	MOV.W	R1,[R7+32]
	MOV.W	R0,[R7+30]
	MOV.B	ES,#SEG( _Calibration+202 )
	MOV.W	R2,#SOF( _Calibration+202 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 5407						Calibration.CBCalibration.PhaseM = PhaseM;
	SYMB	LINE, 5407
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	MOV.B	ES,#SEG( _Calibration+208 )
	MOV.W	R2,#SOF( _Calibration+208 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 5408					
; rs232cmd.c 5409						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5409
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5410	
; rs232cmd.c 5411						SetCBDelay( CBSetup.Delay);
	SYMB	LINE, 5411
	MOV.B	ES,#SEG( _CBSetup+4 )
	MOV.W	R1,#SOF( _CBSetup+4 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	CALL	_SetCBDelay
; rs232cmd.c 5412					}
; rs232cmd.c 5413				}
; rs232cmd.c 5414			}
; rs232cmd.c 5415		}
	SYMB	LINE, 5415
_1380:
; rs232cmd.c 5416	}
	SYMB	LINE, 5416
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5417	
; rs232cmd.c 5418	/**************************************************************************/
; rs232cmd.c 5419	/* FactTSGenScHPhase																		 	     RS232CMD.C	*/
; rs232cmd.c 5420	/*																																				*/
; rs232cmd.c 5421	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5422	/* Revised:	  000727				     																					*/
; rs232cmd.c 5423	/*																																				*/
; rs232cmd.c 5424	/* Function:	--																													*/
; rs232cmd.c 5425	/* Remarks:		--																													*/
; rs232cmd.c 5426	/* Returns:		--																													*/
; rs232cmd.c 5427	/* Updates:		--																													*/
; rs232cmd.c 5428	/**************************************************************************/
; rs232cmd.c 5429	void FactTSGenScHPhase( void)
; rs232cmd.c 5430	{
	ALIGN	1
	SYMB	LINE, 5430
	PUBLIC	_FactTSGenScHPhase
_FactTSGenScHPhase:
	SYMB	TYPE, 644, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTSGenScHPhase", _FactTSGenScHPhase, #644, 0, 0, 48
	SYMB	ALAB, _FactTSGenScHPhase, #644
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#022H
	SYMB	SOFF, 38
	SYMB	IDEN, "buffer", -38, #606, 130, 5
	SYMB	IDEN, "ScHPhaseG", -8, #3, 130, 5
	SYMB	IDEN, "ScHPhaseM", -6, #3, 130, 5
; rs232cmd.c 5431		char buffer[30];
; rs232cmd.c 5432		UC ScHPhaseG, ScHPhaseM;
; rs232cmd.c 5433	
; rs232cmd.c 5434		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5434
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1392
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1392
; rs232cmd.c 5435		{
; rs232cmd.c 5436			if ( CmdRequest)
	SYMB	LINE, 5436
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1384
; rs232cmd.c 5437			{
; rs232cmd.c 5438				if ( ParCnt)
	SYMB	LINE, 5438
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1383
; rs232cmd.c 5439					SCPIError = SyntaxErr;
	SYMB	LINE, 5439
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1392
_1383:
; rs232cmd.c 5440				else
; rs232cmd.c 5441				{
; rs232cmd.c 5442					sprintf( buffer, "%u,%u\n", Calibration.CBCalibration.ScHPhaseG, 
; rs232cmd.c 5443																	    Calibration.CBCalibration.ScHPhaseM);
	SYMB	LINE, 5443
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+206 )
	MOV.W	R0,#SOF( _Calibration+206 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOV.B	ES,#SEG( _Calibration+212 )
	MOV.W	R1,#SOF( _Calibration+212 )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 40
	PUSH.W	R0
	SYMB	SOFF, 42
	MOV.W	R1,#SEG( _1301 )
	MOV.W	R0,#SOF( _1301 )
	PUSH.W	R0, R1
	SYMB	SOFF, 46
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 38
; rs232cmd.c 5444					rs232puts( buffer);
	SYMB	LINE, 5444
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5445				}
; rs232cmd.c 5446			}
	SYMB	LINE, 5446
	BR	_1392
_1384:
; rs232cmd.c 5447			else
; rs232cmd.c 5448			{
; rs232cmd.c 5449				if ( !PasswordProtected)
	SYMB	LINE, 5449
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1392
; rs232cmd.c 5450				{
; rs232cmd.c 5451					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &ScHPhaseG, &ScHPhaseM)) != 2))
	SYMB	LINE, 5451
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1385
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+32
	PUSH.W	R4, R5
	SYMB	SOFF, 42
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R3,#SEG( _1302 )
	MOV.W	R2,#SOF( _1302 )
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 38
	CMP.W	R0,#02H
	BEQ	_1386
_1385:
; rs232cmd.c 5452						SCPIError = SyntaxErr;
	SYMB	LINE, 5452
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1392
_1386:
; rs232cmd.c 5453					else
; rs232cmd.c 5454					{
; rs232cmd.c 5455						Calibration.CBCalibration.ScHPhaseG = ScHPhaseG;
	SYMB	LINE, 5455
	MOV.B	R0L,[R7+30]
	MOV.B	ES,#SEG( _Calibration+206 )
	MOV.W	R1,#SOF( _Calibration+206 )
	MOV.B	[R1],R0L
; rs232cmd.c 5456						Calibration.CBCalibration.ScHPhaseM = ScHPhaseM;
	SYMB	LINE, 5456
	MOV.B	R0L,[R7+32]
	MOV.B	ES,#SEG( _Calibration+212 )
	MOV.W	R1,#SOF( _Calibration+212 )
	MOV.B	[R1],R0L
; rs232cmd.c 5457					
; rs232cmd.c 5458						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5458
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5459	
; rs232cmd.c 5460						SetCBScHPhase( CBSetup.ScHPhase);
	SYMB	LINE, 5460
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R0,#SOF( _CBSetup+8 )
	MOV.W	R0,[R0]
	CALL	_SetCBScHPhase
; rs232cmd.c 5461					}
; rs232cmd.c 5462				}
; rs232cmd.c 5463			}
; rs232cmd.c 5464		}
	SYMB	LINE, 5464
_1392:
; rs232cmd.c 5465	}
	SYMB	LINE, 5465
	ADD.W	R7,#022H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5466	
; rs232cmd.c 5467	/**************************************************************************/
; rs232cmd.c 5468	/* FactAudioGenStatus																		 	     RS232CMD.C	*/
; rs232cmd.c 5469	/*																																				*/
; rs232cmd.c 5470	/* Author:		Kim Engedahl, DEV, 000505	    															*/
; rs232cmd.c 5471	/* Revised:	  000625				     																					*/
; rs232cmd.c 5472	/*																																				*/
; rs232cmd.c 5473	/* Function:	--																													*/
; rs232cmd.c 5474	/* Remarks:																																*/
; rs232cmd.c 5475	/* Returns:		--																													*/
; rs232cmd.c 5476	/* Updates:		--																													*/
; rs232cmd.c 5477	/**************************************************************************/
; rs232cmd.c 5478	void FactAudioGenStatus( void)
; rs232cmd.c 5479	{
	ALIGN	1
	SYMB	LINE, 5479
	PUBLIC	_FactAudioGenStatus
_FactAudioGenStatus:
	SYMB	TYPE, 645, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactAudioGenStatus", _FactAudioGenStatus, #645, 0, 0, 48
	SYMB	ALAB, _FactAudioGenStatus, #645
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#014H
	SYMB	SOFF, 24
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5480		char buffer[20];
; rs232cmd.c 5481	
; rs232cmd.c 5482		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5482
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1400
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1400
; rs232cmd.c 5483		{
; rs232cmd.c 5484			if ( CmdRequest)
	SYMB	LINE, 5484
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1396
; rs232cmd.c 5485			{
; rs232cmd.c 5486				if ( ParCnt)
	SYMB	LINE, 5486
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1395
; rs232cmd.c 5487					SCPIError = SyntaxErr;
	SYMB	LINE, 5487
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1400
_1395:
; rs232cmd.c 5488				else
; rs232cmd.c 5489				{
; rs232cmd.c 5490					sprintf( buffer, "%u\n", 0, AudioStatus());
	SYMB	LINE, 5490
	CALL	_AudioStatus
	MOVS.B	R0H,#00H
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 26
	MOV.W	R0,#00H
	PUSH.W	R0
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 32
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 24
; rs232cmd.c 5491					rs232puts( buffer);
	SYMB	LINE, 5491
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5492				}
; rs232cmd.c 5493			}
	SYMB	LINE, 5493
	BR	_1400
_1396:
; rs232cmd.c 5494			else
; rs232cmd.c 5495				SCPIError = SyntaxErr;
	SYMB	LINE, 5495
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 5496		}
	SYMB	LINE, 5496
_1400:
; rs232cmd.c 5497	}
	SYMB	LINE, 5497
	ADD.W	R7,#014H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5498	
; rs232cmd.c 5499	/**************************************************************************/
; rs232cmd.c 5500	/* FactAudioGenDate																			 	     RS232CMD.C	*/
; rs232cmd.c 5501	/*																																				*/
; rs232cmd.c 5502	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5503	/* Revised:	  000622				     																					*/
; rs232cmd.c 5504	/*																																				*/
; rs232cmd.c 5505	/* Function:	--																													*/
; rs232cmd.c 5506	/* Remarks:		--																													*/
; rs232cmd.c 5507	/* Returns:		--																													*/
; rs232cmd.c 5508	/* Updates:		--																													*/
; rs232cmd.c 5509	/**************************************************************************/
; rs232cmd.c 5510	void FactAudioGenDate( void)
; rs232cmd.c 5511	{
	ALIGN	1
	SYMB	LINE, 5511
	PUBLIC	_FactAudioGenDate
_FactAudioGenDate:
	SYMB	TYPE, 646, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactAudioGenDate", _FactAudioGenDate, #646, 0, 0, 48
	SYMB	ALAB, _FactAudioGenDate, #646
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5512		UI year, month, day;
; rs232cmd.c 5513		char buffer[20];
; rs232cmd.c 5514	
; rs232cmd.c 5515		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5515
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1412
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1412
; rs232cmd.c 5516		{
; rs232cmd.c 5517			if ( CmdRequest)
	SYMB	LINE, 5517
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1402
; rs232cmd.c 5518			{
; rs232cmd.c 5519				if ( ParCnt)
	SYMB	LINE, 5519
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1401
; rs232cmd.c 5520					SCPIError = SyntaxErr;
	SYMB	LINE, 5520
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1412
_1401:
; rs232cmd.c 5521				else
; rs232cmd.c 5522				{
; rs232cmd.c 5523					day = Calibration.AudioCalibration.Date % 100;
	SYMB	LINE, 5523
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R1,#SOF( _Calibration+218 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R4,#SOF( _Calibration+218 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R1,#SOF( _Calibration+218 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 5524					month = ( Calibration.AudioCalibration.Date / 100) % 100;
	SYMB	LINE, 5524
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 5525					year = ( Calibration.AudioCalibration.Date / 10000);
	SYMB	LINE, 5525
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R1,#SOF( _Calibration+218 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 5526	
; rs232cmd.c 5527					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 5527
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1174 )
	MOV.W	R0,#SOF( _1174 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 5528	
; rs232cmd.c 5529					rs232puts( buffer);
	SYMB	LINE, 5529
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5530				}
; rs232cmd.c 5531			}
	SYMB	LINE, 5531
	BR	_1412
_1402:
; rs232cmd.c 5532			else
; rs232cmd.c 5533			{
; rs232cmd.c 5534				if ( !PasswordProtected)
	SYMB	LINE, 5534
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1412
; rs232cmd.c 5535				{
; rs232cmd.c 5536					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 5536
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1403
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1175 )
	MOV.W	R2,#SOF( _1175 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1404
_1403:
; rs232cmd.c 5537						SCPIError = SyntaxErr;
	SYMB	LINE, 5537
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1412
_1404:
; rs232cmd.c 5538					else
; rs232cmd.c 5539					{
; rs232cmd.c 5540						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 5540
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1405
; rs232cmd.c 5541							SCPIError = ExecErr;
	SYMB	LINE, 5541
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1412
_1405:
; rs232cmd.c 5542						else
; rs232cmd.c 5543						{
; rs232cmd.c 5544							Calibration.AudioCalibration.Date = day + 100*month + 10000*year;
	SYMB	LINE, 5544
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R2,#SOF( _Calibration+218 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 5545						
; rs232cmd.c 5546						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5546
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5547						}
; rs232cmd.c 5548					}				
; rs232cmd.c 5549				}
; rs232cmd.c 5550			}
; rs232cmd.c 5551		}
	SYMB	LINE, 5551
_1412:
; rs232cmd.c 5552	}
	SYMB	LINE, 5552
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5553	
; rs232cmd.c 5554	/**************************************************************************/
; rs232cmd.c 5555	/* FactAudioGenLevel																		 	     RS232CMD.C	*/
; rs232cmd.c 5556	/*																																				*/
; rs232cmd.c 5557	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5558	/* Revised:	  000622				     																					*/
; rs232cmd.c 5559	/*																																				*/
; rs232cmd.c 5560	/* Function:	--																													*/
; rs232cmd.c 5561	/* Remarks:		--																													*/
; rs232cmd.c 5562	/* Returns:		--																													*/
; rs232cmd.c 5563	/* Updates:		--																													*/
; rs232cmd.c 5564	/**************************************************************************/
; rs232cmd.c 5565	void FactAudioGenLevel( void)
; rs232cmd.c 5566	{
	ALIGN	1
	SYMB	LINE, 5566
	PUBLIC	_FactAudioGenLevel
_FactAudioGenLevel:
	SYMB	TYPE, 647, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactAudioGenLevel", _FactAudioGenLevel, #647, 0, 0, 48
	SYMB	ALAB, _FactAudioGenLevel, #647
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#018H
	SYMB	SOFF, 28
	SYMB	IDEN, "buffer", -28, #563, 130, 5
	SYMB	IDEN, "AnalogLeft", -8, #3, 130, 5
	SYMB	IDEN, "AnalogRight", -6, #3, 130, 5
; rs232cmd.c 5567		char buffer[20];
; rs232cmd.c 5568		UC AnalogLeft, AnalogRight;
; rs232cmd.c 5569	
; rs232cmd.c 5570		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5570
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1424
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1424
; rs232cmd.c 5571		{
; rs232cmd.c 5572			if ( CmdRequest)
	SYMB	LINE, 5572
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1416
; rs232cmd.c 5573			{
; rs232cmd.c 5574				if ( ParCnt)
	SYMB	LINE, 5574
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1415
; rs232cmd.c 5575					SCPIError = SyntaxErr;
	SYMB	LINE, 5575
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1424
_1415:
; rs232cmd.c 5576				else
; rs232cmd.c 5577				{
; rs232cmd.c 5578					sprintf( buffer, "%u,%u\n", Calibration.AudioCalibration.AnalogLeftChannel, 
; rs232cmd.c 5579																	    Calibration.AudioCalibration.AnalogRightChannel);
	SYMB	LINE, 5579
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+222 )
	MOV.W	R0,#SOF( _Calibration+222 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOV.B	ES,#SEG( _Calibration+223 )
	MOV.W	R1,#SOF( _Calibration+223 )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 30
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R1,#SEG( _1301 )
	MOV.W	R0,#SOF( _1301 )
	PUSH.W	R0, R1
	SYMB	SOFF, 36
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 28
; rs232cmd.c 5580					rs232puts( buffer);
	SYMB	LINE, 5580
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5581				}
; rs232cmd.c 5582			}
	SYMB	LINE, 5582
	BR	_1424
_1416:
; rs232cmd.c 5583			else
; rs232cmd.c 5584			{
; rs232cmd.c 5585				if ( !PasswordProtected)
	SYMB	LINE, 5585
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1424
; rs232cmd.c 5586				{
; rs232cmd.c 5587					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &AnalogLeft, &AnalogRight)) != 2))
	SYMB	LINE, 5587
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1417
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+22
	PUSH.W	R4, R5
	SYMB	SOFF, 32
	PUSH.W	R2, R3
	SYMB	SOFF, 36
	MOV.W	R3,#SEG( _1302 )
	MOV.W	R2,#SOF( _1302 )
	PUSH.W	R2, R3
	SYMB	SOFF, 40
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 28
	CMP.W	R0,#02H
	BEQ	_1418
_1417:
; rs232cmd.c 5588						SCPIError = SyntaxErr;
	SYMB	LINE, 5588
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1424
_1418:
; rs232cmd.c 5589					else
; rs232cmd.c 5590					{
; rs232cmd.c 5591						Calibration.AudioCalibration.AnalogLeftChannel = AnalogLeft;
	SYMB	LINE, 5591
	MOV.B	R0L,[R7+20]
	MOV.B	ES,#SEG( _Calibration+222 )
	MOV.W	R1,#SOF( _Calibration+222 )
	MOV.B	[R1],R0L
; rs232cmd.c 5592						Calibration.AudioCalibration.AnalogRightChannel = AnalogRight;
	SYMB	LINE, 5592
	MOV.B	R0L,[R7+22]
	MOV.B	ES,#SEG( _Calibration+223 )
	MOV.W	R1,#SOF( _Calibration+223 )
	MOV.B	[R1],R0L
; rs232cmd.c 5593								
; rs232cmd.c 5594						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5594
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5595	
; rs232cmd.c 5596						WriteAnlAudioDACLevel( AnalogLeft, AnalogRight);
	SYMB	LINE, 5596
	MOV.B	R0L,[R7+20]
	MOV.B	R0H,[R7+22]
	CALL	_WriteAnlAudioDACLevel
; rs232cmd.c 5597					}
; rs232cmd.c 5598				}
; rs232cmd.c 5599			}
; rs232cmd.c 5600		}
	SYMB	LINE, 5600
_1424:
; rs232cmd.c 5601	}
	SYMB	LINE, 5601
	ADD.W	R7,#018H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5602	
; rs232cmd.c 5603	/**************************************************************************/
; rs232cmd.c 5604	/* FactPLDVersion																				 	     RS232CMD.C	*/
; rs232cmd.c 5605	/*																																				*/
; rs232cmd.c 5606	/* Author:		Kim Engedahl, DEV, 000505	    															*/
; rs232cmd.c 5607	/* Revised:	  000625				     																					*/
; rs232cmd.c 5608	/*																																				*/
; rs232cmd.c 5609	/* Function:	--																													*/
; rs232cmd.c 5610	/* Remarks:		NOTE! The video PLD version has not been implemented at this*/
; rs232cmd.c 5611	/*						this time, hence the return value of 0 does NOT reflect the	*/
; rs232cmd.c 5612	/*						video PLD version.																					*/
; rs232cmd.c 5613	/* Returns:		--																													*/
; rs232cmd.c 5614	/* Updates:		--																													*/
; rs232cmd.c 5615	/**************************************************************************/
; rs232cmd.c 5616	void FactPLDVersion( void)
; rs232cmd.c 5617	{
	ALIGN	1
	SYMB	LINE, 5617
	PUBLIC	_FactPLDVersion
_FactPLDVersion:
	SYMB	TYPE, 648, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactPLDVersion", _FactPLDVersion, #648, 0, 0, 48
	SYMB	ALAB, _FactPLDVersion, #648
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#014H
	SYMB	SOFF, 24
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5618		char buffer[20];
; rs232cmd.c 5619	
; rs232cmd.c 5620		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5620
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1432
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1432
; rs232cmd.c 5621		{
; rs232cmd.c 5622			if ( CmdRequest)
	SYMB	LINE, 5622
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1428
; rs232cmd.c 5623			{
; rs232cmd.c 5624				if ( ParCnt)
	SYMB	LINE, 5624
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1427
; rs232cmd.c 5625					SCPIError = SyntaxErr;
	SYMB	LINE, 5625
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1432
_1427:
; rs232cmd.c 5626				else
; rs232cmd.c 5627				{
; rs232cmd.c 5628					sprintf( buffer, "%u,%u\n", 0, pld_version());
	SYMB	LINE, 5628
	CALL	_pld_version
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 26
	MOV.W	R0,#00H
	PUSH.W	R0
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _1301 )
	MOV.W	R0,#SOF( _1301 )
	PUSH.W	R0, R1
	SYMB	SOFF, 32
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 24
; rs232cmd.c 5629					rs232puts( buffer);
	SYMB	LINE, 5629
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5630				}
; rs232cmd.c 5631			}
	SYMB	LINE, 5631
	BR	_1432
_1428:
; rs232cmd.c 5632			else
; rs232cmd.c 5633				SCPIError = SyntaxErr;
	SYMB	LINE, 5633
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 5634		}
	SYMB	LINE, 5634
_1432:
; rs232cmd.c 5635	}
	SYMB	LINE, 5635
	ADD.W	R7,#014H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5636	
; rs232cmd.c 5637	/**************************************************************************/
; rs232cmd.c 5638	/* FactTCXOStatus																				 	     RS232CMD.C	*/
; rs232cmd.c 5639	/*																																				*/
; rs232cmd.c 5640	/* Author:		Kim Engedahl, DEV, 000628	    															*/
; rs232cmd.c 5641	/* Revised:	  000628				     																					*/
; rs232cmd.c 5642	/*																																				*/
; rs232cmd.c 5643	/* Function:	--																													*/
; rs232cmd.c 5644	/* Remarks:																																*/
; rs232cmd.c 5645	/* Returns:		--																													*/
; rs232cmd.c 5646	/* Updates:		--																													*/
; rs232cmd.c 5647	/**************************************************************************/
; rs232cmd.c 5648	void FactTCXOStatus( void)
; rs232cmd.c 5649	{
	ALIGN	1
	SYMB	LINE, 5649
	PUBLIC	_FactTCXOStatus
_FactTCXOStatus:
	SYMB	TYPE, 649, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTCXOStatus", _FactTCXOStatus, #649, 0, 0, 48
	SYMB	ALAB, _FactTCXOStatus, #649
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#014H
	SYMB	SOFF, 24
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5650		char buffer[20];
; rs232cmd.c 5651	
; rs232cmd.c 5652		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5652
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1438
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1438
; rs232cmd.c 5653		{
; rs232cmd.c 5654			if ( CmdRequest)
	SYMB	LINE, 5654
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1434
; rs232cmd.c 5655			{
; rs232cmd.c 5656				if ( ParCnt)
	SYMB	LINE, 5656
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1433
; rs232cmd.c 5657					SCPIError = SyntaxErr;
	SYMB	LINE, 5657
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1438
_1433:
; rs232cmd.c 5658				else
; rs232cmd.c 5659				{
; rs232cmd.c 5660					sprintf( buffer, "%u\n", tcxo_status());
	SYMB	LINE, 5660
	CALL	_tcxo_status
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 26
	MOV.W	R1,#SEG( _1013 )
	MOV.W	R0,#SOF( _1013 )
	PUSH.W	R0, R1
	SYMB	SOFF, 30
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 24
; rs232cmd.c 5661					rs232puts( buffer);
	SYMB	LINE, 5661
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5662				}
; rs232cmd.c 5663			}
	SYMB	LINE, 5663
	BR	_1438
_1434:
; rs232cmd.c 5664			else
; rs232cmd.c 5665				SCPIError = SyntaxErr;
	SYMB	LINE, 5665
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 5666		}
	SYMB	LINE, 5666
_1438:
; rs232cmd.c 5667	}
	SYMB	LINE, 5667
	ADD.W	R7,#014H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5668	
; rs232cmd.c 5669	/**************************************************************************/
; rs232cmd.c 5670	/* FactMultiMediaChip																		 	     RS232CMD.C	*/
; rs232cmd.c 5671	/*																																				*/
; rs232cmd.c 5672	/* Author:		Kim Engedahl, DEV, 000505	    															*/
; rs232cmd.c 5673	/* Revised:	  000614				     																					*/
; rs232cmd.c 5674	/*																																				*/
; rs232cmd.c 5675	/* Function:	--																													*/
; rs232cmd.c 5676	/* Remarks:		--																													*/
; rs232cmd.c 5677	/* Returns:		--																													*/
; rs232cmd.c 5678	/* Updates:		--																													*/
; rs232cmd.c 5679	/**************************************************************************/
; rs232cmd.c 5680	void FactMultiMediaChip( void)
; rs232cmd.c 5681	{
	ALIGN	1
	SYMB	LINE, 5681
	PUBLIC	_FactMultiMediaChip
_FactMultiMediaChip:
	SYMB	TYPE, 650, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMultiMediaChip", _FactMultiMediaChip, #650, 0, 0, 48
	SYMB	ALAB, _FactMultiMediaChip, #650
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0AH
	SYMB	SOFF, 10
	SYMB	TYPE, 651, 'Z', #18, 1
	SYMB	IDEN, "test", -10, #651, 130, 5
	SYMB	TYPE, 653, 'Z', #3, 1
	SYMB	IDEN, "tmp", -6, #653, 130, 5
; rs232cmd.c 5682		UI test[2];
; rs232cmd.c 5683		UC tmp[2];
; rs232cmd.c 5684	
; rs232cmd.c 5685		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5685
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1449
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1449
; rs232cmd.c 5686		{
; rs232cmd.c 5687			if ( CmdRequest)
	SYMB	LINE, 5687
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1442
; rs232cmd.c 5688			{
; rs232cmd.c 5689				if ( ParCnt != 1)
	SYMB	LINE, 5689
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_1441
; rs232cmd.c 5690					SCPIError = SyntaxErr;
	SYMB	LINE, 5690
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1449
_1441:
; rs232cmd.c 5691				else
; rs232cmd.c 5692				{
; rs232cmd.c 5693					sscanf( Cmd, "%d", &test[0]);
	SYMB	LINE, 5693
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 14
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 18
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 10
; rs232cmd.c 5694	
; rs232cmd.c 5695					tmp[0] = test[0] & 0x0FF;
	SYMB	LINE, 5695
	MOV.W	R0,[R7]
	AND.B	R0L,#0FFH
	MOV.B	[R7+4],R0L
; rs232cmd.c 5696	
; rs232cmd.c 5697					TransmitIIC( 0x40, 1, tmp, IIC_PTV);
	SYMB	LINE, 5697
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+4
	MOV.B	R1L,#00H
	MOV.B	R0H,#01H
	MOV.B	R0L,#040H
	CALL	_TransmitIIC
; rs232cmd.c 5698					ReceiveIIC( 0x40, 1, &tmp[1], IIC_PTV);
	SYMB	LINE, 5698
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+5
	MOV.B	R0L,#040H
	MOV.B	R0H,#01H
	MOV.B	R1L,#00H
	CALL	_ReceiveIIC
; rs232cmd.c 5699	
; rs232cmd.c 5700					rs232printf( 12,"%03d,%03d\n", ( int) tmp[0], ( int) tmp[1]);
	SYMB	LINE, 5700
	MOV.W	R0,#0CH
	MOV.B	R1L,[R7+4]
	MOVS.B	R1H,#00H
	MOV.B	R2L,[R7+5]
	MOVS.B	R2H,#00H
	PUSH.W	R2
	SYMB	SOFF, 12
	PUSH.W	R1
	SYMB	SOFF, 14
	MOV.W	R3,#SEG( _1439 )
	MOV.W	R2,#SOF( _1439 )
	PUSH.W	R2, R3
	SYMB	SOFF, 18
	CALL	_rs232printf
	ADD.W	R7,#08H
	SYMB	SOFF, 10
; rs232cmd.c 5701				}
; rs232cmd.c 5702			}
	SYMB	LINE, 5702
	BR	_1449
_1442:
; rs232cmd.c 5703			else
; rs232cmd.c 5704			{
; rs232cmd.c 5705				if ( !PasswordProtected)
	SYMB	LINE, 5705
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1449
; rs232cmd.c 5706				{
; rs232cmd.c 5707					if ( ParCnt != 2)
	SYMB	LINE, 5707
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BEQ	_1443
; rs232cmd.c 5708						SCPIError = SyntaxErr;	
	SYMB	LINE, 5708
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1449
_1443:
; rs232cmd.c 5709					else
; rs232cmd.c 5710					{
; rs232cmd.c 5711						sscanf( Cmd, "%d,%d", &test[0], &test[1]);
	SYMB	LINE, 5711
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	PUSH.W	R4, R5
	SYMB	SOFF, 14
	PUSH.W	R2, R3
	SYMB	SOFF, 18
	MOV.W	R3,#SEG( _1440 )
	MOV.W	R2,#SOF( _1440 )
	PUSH.W	R2, R3
	SYMB	SOFF, 22
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 10
; rs232cmd.c 5712	
; rs232cmd.c 5713						tmp[0] = test[0] & 0x0FF;
	SYMB	LINE, 5713
	MOV.W	R0,[R7]
	AND.B	R0L,#0FFH
	MOV.B	[R7+4],R0L
; rs232cmd.c 5714						tmp[1] = test[1] & 0x0FF;
	SYMB	LINE, 5714
	MOV.W	R0,[R7+2]
	AND.B	R0L,#0FFH
	MOV.B	[R7+5],R0L
; rs232cmd.c 5715	
; rs232cmd.c 5716						TransmitIIC( 0x40, 2, tmp, IIC_PTV);
	SYMB	LINE, 5716
	MOV.B	R0H,#02H
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+4
	MOV.B	R1L,#00H
	MOV.W	R3,R5
	MOV.W	R2,R4
	MOV.B	R0L,#040H
	CALL	_TransmitIIC
; rs232cmd.c 5717	
; rs232cmd.c 5718						TransmitIIC( 0x40, 1, tmp, IIC_PTV);
	SYMB	LINE, 5718
	MOV.B	R1L,#00H
	MOV.B	R0H,#01H
	MOV.B	R0L,#040H
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_TransmitIIC
; rs232cmd.c 5719						ReceiveIIC( 0x40, 1, &tmp[1], IIC_PTV);
	SYMB	LINE, 5719
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+5
	MOV.B	R0L,#040H
	MOV.B	R0H,#01H
	MOV.B	R1L,#00H
	CALL	_ReceiveIIC
; rs232cmd.c 5720	
; rs232cmd.c 5721						rs232printf( 12,"%03d,%03d\n", ( int) tmp[0], ( int) tmp[1]);
	SYMB	LINE, 5721
	MOV.W	R0,#0CH
	MOV.B	R1L,[R7+4]
	MOVS.B	R1H,#00H
	MOV.B	R2L,[R7+5]
	MOVS.B	R2H,#00H
	PUSH.W	R2
	SYMB	SOFF, 12
	PUSH.W	R1
	SYMB	SOFF, 14
	MOV.W	R3,#SEG( _1439 )
	MOV.W	R2,#SOF( _1439 )
	PUSH.W	R2, R3
	SYMB	SOFF, 18
	CALL	_rs232printf
	ADD.W	R7,#08H
	SYMB	SOFF, 10
; rs232cmd.c 5722					}
; rs232cmd.c 5723				}
; rs232cmd.c 5724			}
; rs232cmd.c 5725		}
	SYMB	LINE, 5725
_1449:
; rs232cmd.c 5726	}
	SYMB	LINE, 5726
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5727	
; rs232cmd.c 5728	/**************************************************************************/
; rs232cmd.c 5729	/* FindParameter														 							     RS232CMD.C	*/
; rs232cmd.c 5730	/*																																				*/
; rs232cmd.c 5731	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 5732	/* Revised:		000603				     																					*/
; rs232cmd.c 5733	/*																																				*/
; rs232cmd.c 5734	/* Function:	Find the character defined parameter												*/
; rs232cmd.c 5735	/* Remarks:		--																													*/
; rs232cmd.c 5736	/* Returns:		The array number containing the parameter or max. array+1		*/
; rs232cmd.c 5737	/* Updates:		--																													*/
; rs232cmd.c 5738	/**************************************************************************/
; rs232cmd.c 5739	int FindParameter( char* par, struct PAR_STRUCT code* ParPtr)
; rs232cmd.c 5740	{
	ALIGN	1
	SYMB	LINE, 5740
	PUBLIC	_FindParameter
_FindParameter:
	SYMB	TYPE, 655, 'X', 12, #16, 30, 2, #259, #521
	SYMB	GFUN, "FindParameter", _FindParameter, #655, 0, 0, 112
	SYMB	ALAB, _FindParameter, #655
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#0CH
	SYMB	SOFF, 10
	SYMB	LTIM, "par", 3, 0, 2253
	SYMB	LTIM, "ParPtr", 11, 0, 2253
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "par", 3, 0, 2125
	SYMB	LTIM, "par", 19, 0, 2253
	SYMB	IDEN, "par", 19, #259, 0, 2061
	SYMB	IDEN, "ParPtr", 11, #521, 0, 2061
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; rs232cmd.c 5741		int tmp = 0;
	SYMB	LINE, 5741
	MOV.W	R6,#00H
	SYMB	LTIM, "tmp", 26, 0, 205
; rs232cmd.c 5742	
; rs232cmd.c 5743		while ( ParPtr)
	SYMB	LINE, 5743
	MOV.W	R1,R3
	MOV.W	R0,R2
	OR.W	R3,R2
	SYMB	LTIM, "ParPtr", 11, 0, 2125
	SYMB	LTIM, "ParPtr", 3, 0, 2253
	BEQ	_1456
_1452:
; rs232cmd.c 5744		{
; rs232cmd.c 5745			if (( !Cstrcmp( par, ParPtr->LongName)) || ( !Cstrcmp( par, ParPtr->ShortName)))
	SYMB	LINE, 5745
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_1458
	ADDS.B	CS,#01H
_1458:
	MOVC.W	R3,[R0+]
	SYMB	LTIM, "ParPtr", 3, 0, 2125
	SYMB	LTIM, "ParPtr", -10, 130, 2245
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "par", 19, 0, 2125
	SYMB	LTIM, "par", 3, 0, 2253
	CALL	_Cstrcmp
	SYMB	LTIM, "par", 3, 0, 2125
	SYMB	LTIM, "par", 19, 0, 2253
	OR.W	R0,R0
	BEQ	_1453
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	ADD.W	R0,#04H
	ADDC.W	R1,#00H
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_1459
	ADDS.B	CS,#01H
_1459:
	MOVC.W	R3,[R0+]
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "par", 19, 0, 2125
	SYMB	LTIM, "par", 3, 0, 2253
	CALL	_Cstrcmp
	SYMB	LTIM, "par", 3, 0, 2125
	SYMB	LTIM, "par", 19, 0, 2253
	OR.W	R0,R0
	BNE	_1454
_1453:
; rs232cmd.c 5746				return( tmp);
	SYMB	LINE, 5746
	MOV.W	R0,R6
	SYMB	LTIM, "tmp", 26, 0, 77
	SYMB	LTIM, "tmp", 2, 0, 205
	BR	_1457
_1454:
	SYMB	LTIM, "par", 19, 0, 2125
	SYMB	LTIM, "par", 19, 0, 2253
	SYMB	LTIM, "ParPtr", -10, 130, 2117
	SYMB	LTIM, "ParPtr", -10, 130, 2245
	SYMB	LTIM, "tmp", 2, 0, 77
	SYMB	LTIM, "tmp", 26, 0, 205
; rs232cmd.c 5747	
; rs232cmd.c 5748			ParPtr = ParPtr->SameLevel;
	SYMB	LINE, 5748
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	ADD.W	R0,#08H
	ADDC.W	R1,#00H
	SYMB	LTIM, "ParPtr", -10, 130, 2117
	SYMB	LTIM, "ParPtr", 3, 0, 2253
	SYMB	LTIM, "ParPtr", 3, 0, 2125
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_1460
	ADDS.B	CS,#01H
_1460:
	MOVC.W	R3,[R0+]
	SYMB	LTIM, "ParPtr", 11, 0, 2253
; rs232cmd.c 5749	
; rs232cmd.c 5750			if ( tmp < 255)
	SYMB	LINE, 5750
	CMP.W	R6,#0FFH
	BGE	_1456
; rs232cmd.c 5751				tmp++;
	SYMB	LINE, 5751
	ADDS.W	R6,#01H
	SYMB	LTIM, "tmp", 26, 0, 77
	SYMB	LTIM, "tmp", 26, 0, 205
	SYMB	LINE, 5743
	MOV.W	R1,R3
	MOV.W	R0,R2
	OR.W	R3,R2
	SYMB	LTIM, "ParPtr", 11, 0, 2125
	SYMB	LTIM, "ParPtr", 3, 0, 2253
	BNE	_1452
; rs232cmd.c 5752			else
; rs232cmd.c 5753				break;
; rs232cmd.c 5754		}
	SYMB	LINE, 5754
_1456:
; rs232cmd.c 5755	
; rs232cmd.c 5756		return( -1);
	SYMB	LINE, 5756
	MOV.W	R0,#0FFFFH
	SYMB	LTIM, "ParPtr", 3, 0, 2125
; rs232cmd.c 5757	}
	SYMB	LINE, 5757
_1457:
	ADDS.W	R7,#04H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "tmp", 26, 0, 77
	SYMB	LTIM, "par", 19, 0, 2125
	SYMB	EFUN
; rs232cmd.c 5758	
; rs232cmd.c 5759	
; rs232cmd.c 5760	/**************************************************************************/
; rs232cmd.c 5761	/* FLTToSamples															  								 RS232CMD.C */
; rs232cmd.c 5762	/*																																				*/
; rs232cmd.c 5763	/* Author:		Kim Engedahl, DEV, 970211	    															*/
; rs232cmd.c 5764	/* Revised:		000530				     																					*/
; rs232cmd.c 5765	/*																																				*/	
; rs232cmd.c 5766	/* Function:	--																													*/
; rs232cmd.c 5767	/* Remarks:		PAL Range: 1728*256, NTSC Range: 1716*256										*/
; rs232cmd.c 5768	/* Returns:		FLT in samples, or -1 if illegal														*/
; rs232cmd.c 5769	/* Updates:		--																													*/
; rs232cmd.c 5770	/***************************************************************************/
; rs232cmd.c 5771	long FLTToSamples( UC system, int F, int L, float T) {
	ALIGN	1
	SYMB	LINE, 5771
	PUBLIC	_FLTToSamples
_FLTToSamples:
	SYMB	TYPE, 656, 'X', 12, #6, 30, 4, #3, #16, #16, #10
	SYMB	GFUN, "FLTToSamples", _FLTToSamples, #656, 0, 0, 112
	SYMB	ALAB, _FLTToSamples, #656
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#018H
	SYMB	SOFF, 30
	SYMB	LTIM, "system", 0, 0, 2253
	MOV.B	[R7+18],R0L
	SYMB	LTIM, "system", 0, 0, 2125
	SYMB	LTIM, "system", -12, 130, 2245
	MOV.W	[R7+14],R2
	SYMB	IDEN, "system", -7, #3, 130, 2053
	SYMB	IDEN, "F", -1, #16, 130, 2053
	SYMB	LTIM, "F", -1, 0, 2117
	SYMB	IDEN, "L", -1, #16, 130, 2053
	SYMB	LTIM, "L", -1, 0, 2117
	SYMB	IDEN, "T", 4, #10, 130, 2053
	SYMB	IDEN, "samples", -10, #6, 130, 5
	SYMB	IDEN, "minus", -1, #2, 130, 5
	SYMB	LTIM, "minus", -1, 0, 69
; rs232cmd.c 5772	
; rs232cmd.c 5773		long samples;
; rs232cmd.c 5774		char minus;
; rs232cmd.c 5775	
; rs232cmd.c 5776		if (( F == 0) && ( L == 0) && ( T == 0))
	SYMB	LINE, 5776
	MOV.W	[R7+16],R1
	OR.W	R1,R1
	BNE	_1467
	MOV.W	R0,[R7+14]
	BNE	_1467
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BNE	_1467
; rs232cmd.c 5777			return( 0);
	SYMB	LINE, 5777
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_1534
_1467:
	SYMB	LTIM, "system", -12, 130, 2117
	SYMB	LTIM, "system", -12, 130, 2245
; rs232cmd.c 5778	
; rs232cmd.c 5779		if (( F <= 0) && ( L <= 0) && ( T <= 0))
	SYMB	LINE, 5779
	CMP.W	[R7+16],#00H
	BGT	_1470
	CMP.W	[R7+14],#00H
	BGT	_1470
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BGT	_1470
; rs232cmd.c 5780		{
; rs232cmd.c 5781			minus = 1;
	SYMB	LINE, 5781
	MOV.B	[R7+12],#01H
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5782		}
	SYMB	LINE, 5782
	BR	_1474
_1470:
; rs232cmd.c 5783		else
; rs232cmd.c 5784		{
; rs232cmd.c 5785			if (( F >= 0) && ( L >= 0) && ( T >= 0))
	SYMB	LINE, 5785
	CMP.W	[R7+16],#00H
	BLT	_1472
	CMP.W	[R7+14],#00H
	BLT	_1472
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BGE	_1473
; rs232cmd.c 5786				minus = 0;
	SYMB	LINE, 5786
_1472:
; rs232cmd.c 5787			else
; rs232cmd.c 5788				return( -1);
	SYMB	LINE, 5788
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
	SYMB	LINE, 5786
_1473:
	SYMB	LTIM, "system", -12, 130, 2117
	SYMB	LTIM, "system", -12, 130, 2245
	MOV.B	[R7+12],#00H
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5789		}
	SYMB	LINE, 5789
_1474:
; rs232cmd.c 5790	
; rs232cmd.c 5791																				// 1 sample = (1/27MHz)/256
; rs232cmd.c 5792		samples = ( long)(( T*6912L)/1000L + 0.5);	
	SYMB	LINE, 5792
	MOV.W	R1,#045D8H
	MOV.W	R0,#00H
	MOV.W	R3,[R7+36]
	MOV.W	R2,[R7+34]
	FCALL	__MUL_SPF
	MOV.W	R3,#0447AH
	MOV.W	R2,#00H
	FCALL	__DIV_SPF
	FCALL	__SPF2DPF
	MOV.W	[R7+10],#03FE0H
	MOV.W	[R7+8],#00H
	MOV.W	[R7+6],#00H
	MOV.W	[R7+4],#00H
	LEA	R6,R7+4
	FCALL	__ADD_DPF
	FCALL	__DPF2L
	MOV.W	[R7+22],R1
	MOV.W	[R7+20],R0
; rs232cmd.c 5793	
; rs232cmd.c 5794		if ( system < NTSC)									// If selected system is PAL..
	SYMB	LINE, 5794
	MOV.B	R2L,[R7+18]
	CMP.B	R2L,#02H
	SYMB	LTIM, "system", -12, 130, 2117
	SYMB	LTIM, "system", 8, 0, 2253
	BCC	_1499
	MOV.W	[R7+10],R1
	MOV.W	[R7+8],R0
; rs232cmd.c 5795		{
; rs232cmd.c 5796	
; rs232cmd.c 5797			if ( labs( samples) > 442367L)	 	// Test for illegal time var
	SYMB	LINE, 5797
	CALL	_labs
	SYMB	LTIM, "system", 8, 0, 2125
	CMP.W	R1,#06H
	BLT	_1475
	BGT	_1540
	CMP.W	R0,#0BFFFH
	BL	_1475
_1540:
; rs232cmd.c 5798				return( -1);
	SYMB	LINE, 5798
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
_1475:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5799	
; rs232cmd.c 5800			switch ( F)												// Test for illegal field & line
	SYMB	LINE, 5800
	CMP.W	[R7+16],#00H
	BEQ	_1476
	CMP.W	[R7+16],#0FFFFH
	BEQ	_1481
	CMP.W	[R7+16],#0FFFDH
	BEQ	_1481
	CMP.W	[R7+16],#02H
	BEQ	_1481
	CMP.W	[R7+16],#0FFFEH
	BEQ	_1484
	CMP.W	[R7+16],#01H
	BEQ	_1484
	CMP.W	[R7+16],#03H
	BEQ	_1484
	CMP.W	[R7+16],#04H
	BEQ	_1485
	BR	_1487
; rs232cmd.c 5801			{
; rs232cmd.c 5802				case 0:
	SYMB	LINE, 5802
_1476:
; rs232cmd.c 5803					if (( minus && ( L < -311)) || ( !minus && ( L > 312)))
	SYMB	LINE, 5803
	MOV.B	R0L,[R7+12]
	BEQ	_1477
	CMP.W	[R7+14],#0FEC9H
	BLT	_1478
_1477:
	MOV.B	R0L,[R7+12]
	BNE	_1492
	CMP.W	[R7+14],#0138H
	BLE	_1492
_1478:
; rs232cmd.c 5804						return( -1);
	SYMB	LINE, 5804
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5805					break;
; rs232cmd.c 5806	
; rs232cmd.c 5807				case -1:
; rs232cmd.c 5808				case -3:
; rs232cmd.c 5809				case 2:
	SYMB	LINE, 5809
_1481:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5810					if ( abs( L) > 312)
	SYMB	LINE, 5810
	MOV.W	R0,[R7+14]
	CALL	_abs
	CMP.W	R0,#0138H
	BLE	_1492
; rs232cmd.c 5811						return( -1);
	SYMB	LINE, 5811
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5812					break;
; rs232cmd.c 5813	
; rs232cmd.c 5814				case -2:
; rs232cmd.c 5815				case 1:
; rs232cmd.c 5816				case 3:
	SYMB	LINE, 5816
_1484:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5817					if ( abs( L) > 311)
	SYMB	LINE, 5817
	MOV.W	R0,[R7+14]
	CALL	_abs
	CMP.W	R0,#0137H
	BLE	_1492
; rs232cmd.c 5818						return( -1);
	SYMB	LINE, 5818
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5819					break;
; rs232cmd.c 5820	
; rs232cmd.c 5821				case 4:
	SYMB	LINE, 5821
_1485:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5822					if (( L > 0) || ( T > 0.0))
	SYMB	LINE, 5822
	CMP.W	[R7+14],#00H
	BGT	_1486
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__SPF2DPF
	MOV.W	[R7+6],#00H
	MOV.W	[R7+4],#00H
	MOV.W	[R7+2],#00H
	MOV.W	[R7],#00H
	MOV.W	R6,R7
	FCALL	__CMP_DPF
	CMP.B	R0L,#01H
	BNE	_1492
_1486:
; rs232cmd.c 5823						return( -1);
	SYMB	LINE, 5823
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5824					break;
; rs232cmd.c 5825	
; rs232cmd.c 5826				default:
	SYMB	LINE, 5826
_1487:
; rs232cmd.c 5827					return( -1);
	SYMB	LINE, 5827
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5828			}
	SYMB	LINE, 5828
_1492:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5829	
; rs232cmd.c 5830			if ( !minus)											// if posistive delay..
	SYMB	LINE, 5830
	MOV.B	R0L,[R7+12]
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", 0, 0, 205
	BNE	_1493
; rs232cmd.c 5831			{
; rs232cmd.c 5832				if ( F % 2)
	SYMB	LINE, 5832
	MOV.W	R0,[R7+16]
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#02H
	OR.W	R1,R1
	BEQ	_1498
; rs232cmd.c 5833				{
; rs232cmd.c 5834					L += 313;
	SYMB	LINE, 5834
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0139H
	SYMB	LTIM, "minus", 0, 0, 77
	MOV.W	[R7+14],R0
; rs232cmd.c 5835					F--;
	SYMB	LINE, 5835
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#0FH
	MOV.W	[R7+16],R0
; rs232cmd.c 5836				}
; rs232cmd.c 5837			}
	SYMB	LINE, 5837
	BR	_1498
_1493:
; rs232cmd.c 5838			else															// ..else delay is negative
; rs232cmd.c 5839			{
; rs232cmd.c 5840				F += 7;
	SYMB	LINE, 5840
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#07H
; rs232cmd.c 5841	
; rs232cmd.c 5842				samples += 442367L;
	SYMB	LINE, 5842
	MOV.W	R3,[R7+10]
	MOV.W	R2,[R7+8]
	ADD.W	R2,#0BFFFH
	ADDC.W	R3,#06H
	MOV.W	[R7+22],R3
	MOV.W	[R7+20],R2
; rs232cmd.c 5843	
; rs232cmd.c 5844				if ( F % 2) {
	SYMB	LINE, 5844
	MOV.W	[R7+16],R0
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#02H
	OR.W	R1,R1
	BEQ	_1494
; rs232cmd.c 5845					L += 624;
	SYMB	LINE, 5845
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0270H
	MOV.W	[R7+14],R0
; rs232cmd.c 5846					F--;
	SYMB	LINE, 5846
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#0FH
	MOV.W	[R7+16],R0
; rs232cmd.c 5847				}
	SYMB	LINE, 5847
	BR	_1495
_1494:
; rs232cmd.c 5848				else
; rs232cmd.c 5849					L += 312;
	SYMB	LINE, 5849
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0138H
	MOV.W	[R7+14],R0
_1495:
; rs232cmd.c 5850	
; rs232cmd.c 5851				if ( T == 0)
	SYMB	LINE, 5851
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BNE	_1498
; rs232cmd.c 5852					samples++;
	SYMB	LINE, 5852
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,#01H
	ADDC.W	R1,#00H
	MOV.W	[R7+22],R1
	MOV.W	[R7+20],R0
; rs232cmd.c 5853			}
	SYMB	LINE, 5853
_1498:
; rs232cmd.c 5854	
; rs232cmd.c 5855			samples += F*138240000L + L*442368L;
	SYMB	LINE, 5855
	MOV.W	R0,[R7+16]
	SEXT.W	R1
	MOV.W	R3,R1
	MOV.W	R2,R0
	ASL.D	R2,#05H
	ADD.W	R2,R0
	ADDC.W	R3,R1
	ASL.D	R2,#05H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#02H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#02H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#0DH
	MOV.W	R0,[R7+14]
	MOV.W	R4,R0
	SEXT.W	R5
	MOV.W	R1,R5
	MOV.W	R0,R4
	ASL.D	R0,#03H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#0EH
	ADD.W	R2,R0
	ADDC.W	R3,R1
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,R2
	ADDC.W	R1,R3
; rs232cmd.c 5856		}
	SYMB	LINE, 5856
	BR	_1520
_1499:
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5857		else																// ..else system is NTSC
; rs232cmd.c 5858		{
; rs232cmd.c 5859	
; rs232cmd.c 5860			if ( labs( samples) > 439295L)		// Test for illegal time var
	SYMB	LINE, 5860
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	CALL	_labs
	CMP.W	R1,#06H
	BLT	_1500
	BGT	_1546
	CMP.W	R0,#0B3FFH
	BL	_1500
_1546:
; rs232cmd.c 5861				return( -1);
	SYMB	LINE, 5861
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
_1500:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5862	
; rs232cmd.c 5863			switch ( F)												// Test for illegal field & line
	SYMB	LINE, 5863
	CMP.W	[R7+16],#00H
	BEQ	_1501
	CMP.W	[R7+16],#0FFFFH
	BEQ	_1504
	CMP.W	[R7+16],#01H
	BEQ	_1505
	CMP.W	[R7+16],#02H
	BEQ	_1506
	BR	_1508
; rs232cmd.c 5864			{
; rs232cmd.c 5865				case 0:
	SYMB	LINE, 5865
_1501:
; rs232cmd.c 5866					if (( minus && ( L < -261)) || ( !minus && ( L > 262)))
	SYMB	LINE, 5866
	MOV.B	R0L,[R7+12]
	BEQ	_1502
	CMP.W	[R7+14],#0FEFBH
	BLT	_1503
_1502:
	MOV.B	R0L,[R7+12]
	BNE	_1513
	CMP.W	[R7+14],#0106H
	BLE	_1513
_1503:
; rs232cmd.c 5867						return( -1);
	SYMB	LINE, 5867
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5868					break;
; rs232cmd.c 5869	
; rs232cmd.c 5870				case -1:
	SYMB	LINE, 5870
_1504:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5871					if ( abs( L) > 262)
	SYMB	LINE, 5871
	MOV.W	R0,[R7+14]
	CALL	_abs
	CMP.W	R0,#0106H
	BLE	_1513
; rs232cmd.c 5872						return( -1);
	SYMB	LINE, 5872
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5873					break;
; rs232cmd.c 5874	
; rs232cmd.c 5875				case 1:
	SYMB	LINE, 5875
_1505:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5876					if ( abs( L) > 261)
	SYMB	LINE, 5876
	MOV.W	R0,[R7+14]
	CALL	_abs
	CMP.W	R0,#0105H
	BLE	_1513
; rs232cmd.c 5877						return( -1);
	SYMB	LINE, 5877
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5878					break;
; rs232cmd.c 5879	
; rs232cmd.c 5880				case 2:
	SYMB	LINE, 5880
_1506:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5881					if (( L > 0) || ( T > 0.0))
	SYMB	LINE, 5881
	CMP.W	[R7+14],#00H
	BGT	_1507
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__SPF2DPF
	MOV.W	[R7+10],#00H
	MOV.W	[R7+8],#00H
	MOV.W	[R7+6],#00H
	MOV.W	[R7+4],#00H
	LEA	R6,R7+4
	FCALL	__CMP_DPF
	CMP.B	R0L,#01H
	BNE	_1513
_1507:
; rs232cmd.c 5882						return( -1);
	SYMB	LINE, 5882
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5883					break;
; rs232cmd.c 5884	
; rs232cmd.c 5885				default:
	SYMB	LINE, 5885
_1508:
; rs232cmd.c 5886					return( -1);
	SYMB	LINE, 5886
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1534
; rs232cmd.c 5887			}
	SYMB	LINE, 5887
_1513:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5888	
; rs232cmd.c 5889			if ( !minus)										// if posistive delay..
	SYMB	LINE, 5889
	MOV.B	R0L,[R7+12]
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", 0, 0, 205
	BNE	_1514
; rs232cmd.c 5890			{						
; rs232cmd.c 5891	
; rs232cmd.c 5892				if ( F % 2)
	SYMB	LINE, 5892
	MOV.W	R0,[R7+16]
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#02H
	OR.W	R1,R1
	BEQ	_1519
; rs232cmd.c 5893				{
; rs232cmd.c 5894					L += 263;
	SYMB	LINE, 5894
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0107H
	SYMB	LTIM, "minus", 0, 0, 77
	MOV.W	[R7+14],R0
; rs232cmd.c 5895					F--;
	SYMB	LINE, 5895
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#0FH
	MOV.W	[R7+16],R0
; rs232cmd.c 5896				}
; rs232cmd.c 5897			}
	SYMB	LINE, 5897
	BR	_1519
_1514:
; rs232cmd.c 5898			else															// ..else delay is negative
; rs232cmd.c 5899			{																	
; rs232cmd.c 5900				F += 3;
	SYMB	LINE, 5900
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#03H
; rs232cmd.c 5901	
; rs232cmd.c 5902				samples += 439295;
	SYMB	LINE, 5902
	MOV.W	R3,[R7+22]
	MOV.W	R2,[R7+20]
	ADD.W	R2,#0B3FFH
	ADDC.W	R3,#06H
	MOV.W	[R7+22],R3
	MOV.W	[R7+20],R2
; rs232cmd.c 5903	
; rs232cmd.c 5904				if ( F % 2)
	SYMB	LINE, 5904
	MOV.W	[R7+16],R0
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#02H
	OR.W	R1,R1
	BEQ	_1515
; rs232cmd.c 5905				{
; rs232cmd.c 5906					L += 524;
	SYMB	LINE, 5906
	MOV.W	R0,[R7+14]
	ADD.W	R0,#020CH
	MOV.W	[R7+14],R0
; rs232cmd.c 5907					F--;
	SYMB	LINE, 5907
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#0FH
	MOV.W	[R7+16],R0
; rs232cmd.c 5908				}
	SYMB	LINE, 5908
	BR	_1516
_1515:
; rs232cmd.c 5909				else
; rs232cmd.c 5910					L += 262;
	SYMB	LINE, 5910
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0106H
	MOV.W	[R7+14],R0
_1516:
; rs232cmd.c 5911	
; rs232cmd.c 5912				if ( T == 0)
	SYMB	LINE, 5912
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BNE	_1519
; rs232cmd.c 5913					samples++;
	SYMB	LINE, 5913
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,#01H
	ADDC.W	R1,#00H
	MOV.W	[R7+22],R1
	MOV.W	[R7+20],R0
; rs232cmd.c 5914			}
	SYMB	LINE, 5914
_1519:
; rs232cmd.c 5915	
; rs232cmd.c 5916			samples += F*115315200L + L*439296L;
	SYMB	LINE, 5916
	MOV.W	R0,[R7+16]
	SEXT.W	R1
	MOV.W	R3,R1
	MOV.W	R2,R0
	ASL.D	R2,#03H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#03H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#06H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#03H
	ADD.W	R2,R0
	ADDC.W	R3,R1
	ASL.D	R2,#03H
	ADD.W	R2,R0
	ADDC.W	R3,R1
	ASL.D	R2,#09H
	MOV.W	R0,[R7+14]
	MOV.W	R4,R0
	SEXT.W	R5
	MOV.W	R1,R5
	MOV.W	R0,R4
	ASL.D	R0,#03H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	ADD.W	R0,R4
	ADDC.W	R1,R5
	ASL.D	R0,#0AH
	ADD.W	R2,R0
	ADDC.W	R3,R1
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,R2
	ADDC.W	R1,R3
; rs232cmd.c 5917		}
	SYMB	LINE, 5917
_1520:
; rs232cmd.c 5918	
; rs232cmd.c 5919		return( samples);
; rs232cmd.c 5920	}
	SYMB	LINE, 5920
_1534:
	ADD.W	R7,#018H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5921	
; rs232cmd.c 5922	/**************************************************************************/
; rs232cmd.c 5923	/* PrintSamplesToFLT												  								 RS232CMD.C */
; rs232cmd.c 5924	/*																																				*/
; rs232cmd.c 5925	/* Author:		Kim Engedahl, DEV, 970211	    															*/
; rs232cmd.c 5926	/* Revised:		000530												     													*/
; rs232cmd.c 5927	/*																																				*/
; rs232cmd.c 5928	/* Function:	--																													*/
; rs232cmd.c 5929	/* Remarks:		PAL Range: 1728*256, NTSC Range: 1716*256										*/
; rs232cmd.c 5930	/* Returns:		--																													*/
; rs232cmd.c 5931	/* Updates:		--																													*/
; rs232cmd.c 5932	/**************************************************************************/
; rs232cmd.c 5933	void PrintSamplesToFLT( UC system, long samples) {
	ALIGN	1
	SYMB	LINE, 5933
	PUBLIC	_PrintSamplesToFLT
_PrintSamplesToFLT:
	SYMB	TYPE, 657, 'X', 12, #1, 30, 2, #3, #6
	SYMB	GFUN, "PrintSamplesToFLT", _PrintSamplesToFLT, #657, 0, 0, 112
	SYMB	ALAB, _PrintSamplesToFLT, #657
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#0AH
	SYMB	SOFF, 12
	SYMB	LTIM, "system", 0, 0, 2253
	SYMB	IDEN, "system", 0, #3, 0, 2061
	SYMB	IDEN, "samples", -1, #6, 130, 2053
	SYMB	LTIM, "samples", -1, 0, 2117
	SYMB	IDEN, "sign", -1, #2, 130, 5
	SYMB	LTIM, "sign", -1, 0, 69
	SYMB	IDEN, "frame", -1, #16, 130, 5
	SYMB	LTIM, "frame", -1, 0, 69
	SYMB	IDEN, "field", -1, #16, 130, 5
	SYMB	LTIM, "field", -1, 0, 69
	SYMB	IDEN, "line", -8, #16, 130, 5
; rs232cmd.c 5934	
; rs232cmd.c 5935		char sign;
; rs232cmd.c 5936		int frame, field, line;
; rs232cmd.c 5937	
; rs232cmd.c 5938		sign = '+';
	SYMB	LINE, 5938
	MOV.B	[R7+2],#02BH
	SYMB	LTIM, "sign", -10, 130, 197
; rs232cmd.c 5939	
; rs232cmd.c 5940		if ( system < NTSC)												// If system selected is PAL..
	SYMB	LINE, 5940
	CMP.B	R0L,#02H
	BCC	_1557
; rs232cmd.c 5941		{
; rs232cmd.c 5942			// 552960000 = 2*625*1728*256
; rs232cmd.c 5943			// 276480000 = 625*1728*256
; rs232cmd.c 5944			// 442368    = 1728*256
; rs232cmd.c 5945	
; rs232cmd.c 5946			if ( samples >= 552960000L)
	SYMB	LINE, 5946
	MOV.W	R5,R3
	MOV.W	R4,R2
	CMP.W	R3,#020F5H
	BLT	_1556
	BGT	_1569
	CMP.W	R2,#08000H
	BCS	_1556
_1569:
; rs232cmd.c 5947			{
; rs232cmd.c 5948				samples--;
	SYMB	LINE, 5948
	SUB.W	R4,#01H
	SUBB.W	R5,#00H
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "system", 0, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
; rs232cmd.c 5949	
; rs232cmd.c 5950				frame = samples / 276480000L;
	SYMB	LINE, 5950
	MOV.W	R3,#0107AH
	MOV.W	R2,#0C000H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	SYMB	LTIM, "samples", 3, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
	MOV.W	[R7],R0
	SYMB	LTIM, "frame", -12, 130, 197
; rs232cmd.c 5951				line = ( samples % 276480000L) /  442368L;
	SYMB	LINE, 5951
	MOV.W	R3,#0107AH
	MOV.W	R2,#0C000H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
	SYMB	LTIM, "samples", 3, 0, 2125
	MOV.W	R3,#06H
	MOV.W	R2,#0C000H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	MOV.W	R6,R0
	MOV.W	[R7+4],R6
; rs232cmd.c 5952				samples = ( samples % 276480000L) %  442368L;
	SYMB	LINE, 5952
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#06H
	MOV.W	R2,#0C000H
	FCALL	__SMODL
	SYMB	LTIM, "samples", 3, 0, 2253
; rs232cmd.c 5953				field = 2*frame;
	SYMB	LINE, 5953
	MOV.W	R2,[R7]
	ASL.W	R2,#01H
	SYMB	LTIM, "frame", -12, 130, 69
	SYMB	LTIM, "frame", 10, 0, 205
	SYMB	LTIM, "frame", 10, 0, 77
	MOV.W	R3,R2
	SYMB	LTIM, "field", 14, 0, 205
; rs232cmd.c 5954	
; rs232cmd.c 5955				if ( line > 312)
	SYMB	LINE, 5955
	MOV.W	R4,#0138H
	CMP.W	R6,#0138H
	BLE	_1554
; rs232cmd.c 5956				{
; rs232cmd.c 5957					field++;
	SYMB	LINE, 5957
	ADDS.W	R2,#01H
	MOV.W	R3,R2
	SYMB	LTIM, "field", 14, 0, 77
	SYMB	LTIM, "field", 14, 0, 205
; rs232cmd.c 5958					line = 624-line;
	SYMB	LINE, 5958
	MOV.W	R2,#0270H
	SUB.W	R2,R6
	MOV.W	[R7+4],R2
; rs232cmd.c 5959				}
	SYMB	LINE, 5959
	BR	_1555
_1554:
; rs232cmd.c 5960				else
; rs232cmd.c 5961					line = 312-line;
	SYMB	LINE, 5961
	MOV.W	R2,[R7+4]
	SUB.W	R4,R2
	MOV.W	[R7+4],R4
_1555:
; rs232cmd.c 5962	
; rs232cmd.c 5963				samples = 442368L - 1 - samples;
	SYMB	LINE, 5963
	MOV.W	R5,#06H
	MOV.W	R4,#0BFFFH
	SUB.W	R4,R0
	SUBB.W	R5,R1
	SYMB	LTIM, "samples", 3, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 5964				field = 7-field;
	SYMB	LINE, 5964
	MOV.W	R1,#07H
	SUB.W	R1,R3
	MOV.W	R0,R1
	SYMB	LTIM, "field", 14, 0, 77
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 5965	
; rs232cmd.c 5966				if ( field != 4)
	SYMB	LINE, 5966
	CMP.W	R1,#04H
	BEQ	_1567
; rs232cmd.c 5967					sign = '-';
	SYMB	LINE, 5967
	MOV.B	[R7+2],#02DH
	SYMB	LTIM, "sign", -10, 130, 69
	SYMB	LTIM, "sign", -10, 130, 197
; rs232cmd.c 5968			}
	SYMB	LINE, 5968
	BR	_1567
_1556:
; rs232cmd.c 5969			else
; rs232cmd.c 5970			{
; rs232cmd.c 5971				frame = samples / 276480000L;
	SYMB	LINE, 5971
	MOV.W	R3,#0107AH
	MOV.W	R2,#0C000H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SDIVL
	SYMB	LTIM, "field", 2, 0, 77
	MOV.W	[R7],R0
	SYMB	LTIM, "frame", -12, 130, 197
; rs232cmd.c 5972				line = ( samples % 276480000L) / 442368L;
	SYMB	LINE, 5972
	MOV.W	R3,#0107AH
	MOV.W	R2,#0C000H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
	SYMB	LTIM, "samples", 3, 0, 2125
	MOV.W	R3,#06H
	MOV.W	R2,#0C000H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	MOV.W	R6,R0
	MOV.W	[R7+4],R6
; rs232cmd.c 5973				samples = ( samples % 276480000L) % 442368L;
	SYMB	LINE, 5973
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#06H
	MOV.W	R2,#0C000H
	FCALL	__SMODL
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 5974				field = 2*frame;
	SYMB	LINE, 5974
	MOV.W	R1,[R7]
	ASL.W	R1,#01H
	SYMB	LTIM, "frame", -12, 130, 69
	SYMB	LTIM, "frame", 6, 0, 205
	SYMB	LTIM, "frame", 6, 0, 77
	MOV.W	R0,R1
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 5975	
; rs232cmd.c 5976				if ( line > 312)
	SYMB	LINE, 5976
	CMP.W	R6,#0138H
	BLE	_1567
; rs232cmd.c 5977				{
; rs232cmd.c 5978					field++;
	SYMB	LINE, 5978
	ADDS.W	R1,#01H
	MOV.W	R0,R1
	SYMB	LTIM, "field", 2, 0, 77
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 5979					line -= 313;
	SYMB	LINE, 5979
	SUB.W	R6,#0139H
	MOV.W	[R7+4],R6
; rs232cmd.c 5980				}
; rs232cmd.c 5981			}
; rs232cmd.c 5982		}
	SYMB	LINE, 5982
	BR	_1567
_1557:
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 11, 0, 2253
; rs232cmd.c 5983		else {                  									// ..system selected is NTSC
; rs232cmd.c 5984			if ( samples >= 230630400L)
	SYMB	LINE, 5984
	MOV.W	R5,R3
	MOV.W	R4,R2
	CMP.W	R3,#0DBFH
	BLT	_1560
	BGT	_1573
	CMP.W	R2,#02400H
	BCS	_1560
_1573:
	SYMB	LTIM, "samples", 11, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 5985			{
; rs232cmd.c 5986				// 230630400 = 525*1716*256
; rs232cmd.c 5987				// 439296    = 1716*256
; rs232cmd.c 5988	
; rs232cmd.c 5989				samples--;
	SYMB	LINE, 5989
	SUB.W	R4,#01H
	SUBB.W	R5,#00H
	SYMB	LTIM, "samples", 19, 0, 2125
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "field", 2, 0, 77
	SYMB	LTIM, "samples", 3, 0, 2253
; rs232cmd.c 5990	
; rs232cmd.c 5991				frame = samples / 230630400L;
	SYMB	LINE, 5991
	MOV.W	R3,#0DBFH
	MOV.W	R2,#02400H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	SYMB	LTIM, "samples", 3, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
	MOV.W	[R7],R0
	SYMB	LTIM, "frame", -12, 130, 197
; rs232cmd.c 5992				line = ( samples % 230630400L) / 439296L;
	SYMB	LINE, 5992
	MOV.W	R3,#0DBFH
	MOV.W	R2,#02400H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
	SYMB	LTIM, "samples", 3, 0, 2125
	MOV.W	R3,#06H
	MOV.W	R2,#0B400H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	MOV.W	R6,R0
	MOV.W	[R7+4],R6
; rs232cmd.c 5993				samples = ( samples % 230630400L) % 439296L;
	SYMB	LINE, 5993
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#06H
	MOV.W	R2,#0B400H
	FCALL	__SMODL
	SYMB	LTIM, "samples", 3, 0, 2253
; rs232cmd.c 5994	
; rs232cmd.c 5995				field = 2*frame;
	SYMB	LINE, 5995
	MOV.W	R2,[R7]
	ASL.W	R2,#01H
	SYMB	LTIM, "frame", -12, 130, 69
	SYMB	LTIM, "frame", 10, 0, 205
	SYMB	LTIM, "frame", 10, 0, 77
	MOV.W	R3,R2
	SYMB	LTIM, "field", 14, 0, 205
; rs232cmd.c 5996	
; rs232cmd.c 5997				if ( line > 262)
	SYMB	LINE, 5997
	MOV.W	R4,#0106H
	CMP.W	R6,#0106H
	BLE	_1558
; rs232cmd.c 5998				{
; rs232cmd.c 5999					field++;
	SYMB	LINE, 5999
	ADDS.W	R2,#01H
	MOV.W	R3,R2
	SYMB	LTIM, "field", 14, 0, 77
	SYMB	LTIM, "field", 14, 0, 205
; rs232cmd.c 6000					line = 524-line;
	SYMB	LINE, 6000
	MOV.W	R2,#020CH
	SUB.W	R2,R6
	MOV.W	[R7+4],R2
; rs232cmd.c 6001				}
	SYMB	LINE, 6001
	BR	_1559
_1558:
; rs232cmd.c 6002				else
; rs232cmd.c 6003					line = 262-line;
	SYMB	LINE, 6003
	MOV.W	R2,[R7+4]
	SUB.W	R4,R2
	MOV.W	[R7+4],R4
_1559:
; rs232cmd.c 6004	
; rs232cmd.c 6005				samples = 439296L - 1 - samples;
	SYMB	LINE, 6005
	MOV.W	R5,#06H
	MOV.W	R4,#0B3FFH
	SUB.W	R4,R0
	SUBB.W	R5,R1
	SYMB	LTIM, "samples", 3, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 6006				field = 3 - field;
	SYMB	LINE, 6006
	MOV.W	R1,#03H
	SUB.W	R1,R3
	MOV.W	R0,R1
	SYMB	LTIM, "field", 14, 0, 77
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 6007	
; rs232cmd.c 6008				if ( field != 2)
	SYMB	LINE, 6008
	CMP.W	R1,#02H
	BEQ	_1567
; rs232cmd.c 6009					sign = '-';
	SYMB	LINE, 6009
	MOV.B	[R7+2],#02DH
	SYMB	LTIM, "sign", -10, 130, 69
	SYMB	LTIM, "sign", -10, 130, 197
; rs232cmd.c 6010			}
	SYMB	LINE, 6010
	BR	_1567
_1560:
; rs232cmd.c 6011			else
; rs232cmd.c 6012			{
; rs232cmd.c 6013				frame = samples / 230630400L;
	SYMB	LINE, 6013
	MOV.W	R3,#0DBFH
	MOV.W	R2,#02400H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SDIVL
	SYMB	LTIM, "field", 2, 0, 77
	MOV.W	[R7],R0
	SYMB	LTIM, "frame", -12, 130, 197
; rs232cmd.c 6014				line = ( samples % 230630400L) / 439296L;
	SYMB	LINE, 6014
	MOV.W	R3,#0DBFH
	MOV.W	R2,#02400H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
	SYMB	LTIM, "samples", 3, 0, 2125
	MOV.W	R3,#06H
	MOV.W	R2,#0B400H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	MOV.W	R6,R0
	MOV.W	[R7+4],R6
; rs232cmd.c 6015				samples = ( samples % 230630400L) % 439296L;
	SYMB	LINE, 6015
	MOV.W	R3,#06H
	MOV.W	R2,#0B400H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 6016				field = 2*frame;
	SYMB	LINE, 6016
	MOV.W	R1,[R7]
	ASL.W	R1,#01H
	SYMB	LTIM, "frame", -12, 130, 69
	SYMB	LTIM, "frame", 6, 0, 205
	SYMB	LTIM, "frame", 6, 0, 77
	MOV.W	R0,R1
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 6017	
; rs232cmd.c 6018				if ( line > 262)
	SYMB	LINE, 6018
	CMP.W	R6,#0106H
	BLE	_1567
; rs232cmd.c 6019				{
; rs232cmd.c 6020					field++;
	SYMB	LINE, 6020
	ADDS.W	R1,#01H
	MOV.W	R0,R1
	SYMB	LTIM, "field", 2, 0, 77
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 6021					line -= 263;
	SYMB	LINE, 6021
	SUB.W	R6,#0107H
	MOV.W	[R7+4],R6
; rs232cmd.c 6022				}
; rs232cmd.c 6023			}
; rs232cmd.c 6024		}
	SYMB	LINE, 6024
_1567:
; rs232cmd.c 6025	
; rs232cmd.c 6026		rs232printf( 12, "%c%d,", sign, abs( field));
	SYMB	LINE, 6026
	CALL	_abs
	SYMB	LTIM, "field", 2, 0, 77
	MOV.B	R1L,[R7+2]
	SEXT.B	R1H
	SYMB	LTIM, "sign", -10, 130, 69
	SYMB	LTIM, "sign", 4, 0, 205
	SYMB	LTIM, "sign", 4, 0, 77
	PUSH.W	R0
	SYMB	SOFF, 14
	MOV.W	R6,R1
	PUSH.W	R1
	SYMB	SOFF, 16
	MOV.W	R1,#SEG( _1552 )
	MOV.W	R0,#SOF( _1552 )
	PUSH.W	R0, R1
	SYMB	SOFF, 20
	MOV.W	R0,#0CH
	CALL	_rs232printf
	ADD.W	R7,#08H
	SYMB	SOFF, 12
; rs232cmd.c 6027		rs232printf( 12, "%c%d,", sign, abs( line));
	SYMB	LINE, 6027
	MOV.W	R0,[R7+4]
	CALL	_abs
	PUSH.W	R0
	SYMB	SOFF, 14
	MOV.W	[R7+2],R6
	PUSH.W	R6
	SYMB	SOFF, 16
	MOV.W	R1,#SEG( _1552 )
	MOV.W	R0,#SOF( _1552 )
	PUSH.W	R0, R1
	SYMB	SOFF, 20
	MOV.W	R0,#0CH
	CALL	_rs232printf
	ADD.W	R7,#08H
	SYMB	SOFF, 12
; rs232cmd.c 6028		rs232printf( 12, "%c%.1f", sign, fabs((float) ( samples*1000L)/6912L));
	SYMB	LINE, 6028
	MOV.W	R1,R5
	MOV.W	R0,R4
	ASL.D	R0,#05H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	ADD.W	R0,R4
	ADDC.W	R1,R5
	ASL.D	R0,#03H
	FCALL	__L2SPF
	MOV.W	R3,#045D8H
	MOV.W	R2,#00H
	FCALL	__DIV_SPF
	FCALL	__SPF2DPF
	CALL	_fabs
	PUSH.W	R0, R1, R2, R3
	SYMB	SOFF, 20
	MOV.W	R0,[R7+8]
	PUSH.W	R0
	SYMB	SOFF, 22
	MOV.W	R1,#SEG( _1553 )
	MOV.W	R0,#SOF( _1553 )
	PUSH.W	R0, R1
	SYMB	SOFF, 26
	MOV.W	R0,#0CH
	CALL	_rs232printf
	ADD.W	R7,#0EH
	SYMB	SOFF, 12
; rs232cmd.c 6029	}
	SYMB	LINE, 6029
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	EFUN
; rs232cmd.c 6030	
	SYMB	ENDF

	RSEG	RS232CMD_INI_FA
_366:	DB	02CH,025H,064H,00AH,000H
	SYMB	TYPE, 658, 'Z', #453, 3
	SYMB	ALAB, _PresetPtr, #658
	EXTRN	HDATA(_PresetPtr)
	SYMB	ALAB, _CmdExecute, #2
	EXTRN	HDATA(_CmdExecute)
_1227:	DB	025H,06CH,075H,02CH,025H,06CH,075H,00AH,000H
	SYMB	TYPE, 660, 'X', 12, #16, 30, 3, #18, #18, #18
	SYMB	ALAB, _ValidateDate, #660
	EXTRN	HCODE(_ValidateDate)
	SYMB	TYPE, 661, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _SetGenlockSystem, #661
	EXTRN	HCODE(_SetGenlockSystem)
	SYMB	TYPE, 662, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _StorePreset, #662
	EXTRN	HCODE(_StorePreset)
	SYMB	TYPE, 663, 'X', 12, #1, 30, 0
	SYMB	ALAB, _UpdateSTBRegister, #663
	EXTRN	HCODE(_UpdateSTBRegister)
_987:	DB	025H,073H,03BH,000H
_9:	DB	025H,064H,00AH,000H
	SYMB	TYPE, 664, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetBBSystem, #664
	EXTRN	HCODE(_SetBBSystem)
_110:	DB	022H,00AH,000H
	SYMB	TYPE, 665, 'X', 12, #16, 30, 2, #16, #7
	SYMB	ALAB, _SetBBDelay, #665
	EXTRN	HCODE(_SetBBDelay)
	SYMB	TYPE, 666, 'X', 12, #257, 30, 1, #259
	SYMB	ALAB, _strlen, #666
	EXTRN	HCODE(_strlen)
_1174:	DB	025H,075H,02CH,025H,075H,02CH,025H,075H,00AH,000H
	SYMB	TYPE, 667, 'X', 12, #16, 30, 1, #7
	SYMB	ALAB, _SetCBDelay, #667
	EXTRN	HCODE(_SetCBDelay)
_1552:	DB	025H,063H,025H,064H,02CH,000H
	SYMB	TYPE, 668, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetBBScHPhase, #668
	EXTRN	HCODE(_SetBBScHPhase)
	SYMB	TYPE, 669, 'X', 12, #16, 30, 0
	SYMB	ALAB, _BBUpdate, #669
	EXTRN	HCODE(_BBUpdate)
	EXTRN	HCODE(__UMODL)
	SYMB	TYPE, 670, 'X', 12, #1, 30, 0
	SYMB	ALAB, _ResetErrorEventQueue, #670
	EXTRN	HCODE(_ResetErrorEventQueue)
	SYMB	TYPE, 671, 'X', 12, #16, 30, 1, #259
	SYMB	ALAB, _GenlockVersion, #671
	EXTRN	HCODE(_GenlockVersion)
	SYMB	TYPE, 672, 'X', 12, #16, 30, 2, #259, #491
	SYMB	ALAB, _Cstrcmp, #672
	EXTRN	HCODE(_Cstrcmp)
	SYMB	TYPE, 673, 'X', 12, #16, 30, 2, #16, #10
	SYMB	ALAB, _SetAudioTiming, #673
	EXTRN	HCODE(_SetAudioTiming)
_1175:	DB	025H,075H,02CH,025H,075H,02CH,025H,075H,000H
	SYMB	TYPE, 674, 'X', 12, #259, 30, 3, #259, #259, #257
	SYMB	ALAB, _strncpy, #674
	EXTRN	HCODE(_strncpy)
	SYMB	ALAB, _AudioOutput, #16
	EXTRN	HDATA(_AudioOutput)
	SYMB	TYPE, 675, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioWordClock, #675
	EXTRN	HCODE(_SetAudioWordClock)
	EXTRN	HCODE(__DIV_DPF)
_785:	DB	025H,02EH,031H,066H,02CH,000H
	SYMB	TYPE, 676, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _abs, #676
	EXTRN	HCODE(_abs)
_1013:	DB	025H,075H,00AH,000H
	SYMB	TYPE, 677, 'X', 12, #16, 30, 0
	SYMB	ALAB, _ReadErrorEventQueue, #677
	EXTRN	HCODE(_ReadErrorEventQueue)
	SYMB	TYPE, 679, 'n', #3, 130
	SYMB	TYPE, 680, 'P', #679
	SYMB	TYPE, 678, 'X', 12, #16, 30, 4, #3, #3, #680, #3
	SYMB	ALAB, _TransmitIIC, #678
	EXTRN	HCODE(_TransmitIIC)
	SYMB	TYPE, 681, 'X', 12, #16, 30, 0
	SYMB	ALAB, _CBUpdate, #681
	EXTRN	HCODE(_CBUpdate)
	SYMB	TYPE, 682, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioSystem, #682
	EXTRN	HCODE(_SetAudioSystem)
	SYMB	TYPE, 683, 'X', 12, #16, 30, 4, #16, #16, #259, #1
	SYMB	ALAB, _sio0SndCommand, #683
	EXTRN	HCODE(_sio0SndCommand)
	SYMB	TYPE, 684, 'X', 12, #16, 30, 2, #259, #259
	SYMB	ALAB, _strcmp, #684
	EXTRN	HCODE(_strcmp)
	SYMB	TYPE, 685, 'X', 12, #3, 30, 0
	SYMB	ALAB, _AudioStatus, #685
	EXTRN	HCODE(_AudioStatus)
_1301:	DB	025H,075H,02CH,025H,075H,00AH,000H
	SYMB	TYPE, 686, 'X', 12, #16, 30, 3, #259, #259, #1
	SYMB	ALAB, _sscanf, #686
	EXTRN	HCODE(_sscanf)
_1439:	DB	025H,030H,033H,064H,02CH,025H,030H,033H,064H,00AH,000H
_1302:	DB	025H,075H,02CH,025H,075H,000H
_10:	DB	025H,064H,000H
_902:	DB	025H,066H,000H
	EXTRN	HCODE(__MUL_SPF)
	SYMB	TYPE, 687, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _SetCBSystem, #687
	EXTRN	HCODE(_SetCBSystem)
	SYMB	ALAB, _CBSetup, #459
	EXTRN	HDATA(_CBSetup)
	SYMB	ALAB, _BBSetup, #554
	EXTRN	HDATA(_BBSetup)
_221:	DB	025H,06CH,000H
	SYMB	ALAB, _OperEnableReg, #18
	EXTRN	HDATA(_OperEnableReg)
_316:	DB	047H,058H,025H,064H,03BH,000H
	EXTRN	HCODE(__SUBR_DPF)
_986:	DB	025H,073H,000H
	SYMB	TYPE, 688, 'X', 12, #16, 30, 0
	SYMB	ALAB, _GenlockInit, #688
	EXTRN	HCODE(_GenlockInit)
	SYMB	TYPE, 689, 'Z', #2, 511
	SYMB	ALAB, _Cmd, #689
	EXTRN	HDATA(_Cmd)
	SYMB	TYPE, 691, 'X', 12, #16, 30, 0
	SYMB	ALAB, _GenlockUpdate, #691
	EXTRN	HCODE(_GenlockUpdate)
_960:	DB	04FH,04EH,000H
_1190:	DB	025H,075H,000H
	SYMB	TYPE, 692, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioSignal, #692
	EXTRN	HCODE(_SetAudioSignal)
	EXTRN	HCODE(__SPF2DPF)
	SYMB	TYPE, 693, 'X', 12, #16, 30, 0
	SYMB	ALAB, _CBInit, #693
	EXTRN	HCODE(_CBInit)
	SYMB	TYPE, 694, 'X', 12, #259, 30, 2, #259, #259
	SYMB	ALAB, _strcpy, #694
	EXTRN	HCODE(_strcpy)
_901:	DB	025H,02EH,031H,066H,00AH,000H
	SYMB	TYPE, 695, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _WriteCBChromaGain, #695
	EXTRN	HCODE(_WriteCBChromaGain)
	SYMB	TYPE, 696, 'X', 12, #11, 30, 1, #11
	SYMB	ALAB, _fabs, #696
	EXTRN	HCODE(_fabs)
	SYMB	ALAB, _ParCnt, #3
	EXTRN	HDATA(_ParCnt)
	SYMB	TYPE, 697, 'X', 12, #16, 30, 3, #263, #453, #16
	SYMB	ALAB, _NV_Recall, #697
	EXTRN	HCODE(_NV_Recall)
	SYMB	TYPE, 698, 'X', 12, #6, 30, 1, #6
	SYMB	ALAB, _labs, #698
	EXTRN	HCODE(_labs)
_262:	DB	04FH,046H,046H,000H
	SYMB	ALAB, _GenlockStatus, #3
	EXTRN	HDATA(_GenlockStatus)
	SYMB	TYPE, 699, 'X', 12, #16, 30, 4, #3, #3, #680, #3
	SYMB	ALAB, _ReceiveIIC, #699
	EXTRN	HCODE(_ReceiveIIC)
	SYMB	TYPE, 700, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _SetAudioOutput, #700
	EXTRN	HCODE(_SetAudioOutput)
	SYMB	ALAB, _NumSuffix, #18
	EXTRN	HDATA(_NumSuffix)
	SYMB	TYPE, 701, 'X', 12, #16, 30, 1, #259
	SYMB	ALAB, _rs232puts, #701
	EXTRN	HCODE(_rs232puts)
	SYMB	ALAB, _CalibrationPtr, #453
	EXTRN	HDATA(_CalibrationPtr)
	SYMB	ALAB, _CmdRequest, #2
	EXTRN	HDATA(_CmdRequest)
	SYMB	ALAB, _ESRReg, #3
	EXTRN	HDATA(_ESRReg)
	SYMB	ALAB, _STBReg, #3
	EXTRN	HDATA(_STBReg)
	SYMB	ALAB, _AudioSetup, #556
	EXTRN	HDATA(_AudioSetup)
_1038:	DB	025H,06CH,075H,02CH,025H,06CH,075H,000H
	SYMB	TYPE, 702, "ERROR_STRUCT", 'S', 6,\
		 "ErrorNo", #16, 0,\
		 "ErrorTxt", #491, 2
	SYMB	TYPE, 703, 'Z', #702, 47
	SYMB	ALAB, _ErrorTxt_Array, #703
	EXTRN	HCODE(_ErrorTxt_Array)
	SYMB	TYPE, 705, 'X', 12, #16, 30, 1, #7
	SYMB	ALAB, _SetGenlockDelay, #705
	EXTRN	HCODE(_SetGenlockDelay)
	SYMB	TYPE, 706, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _WriteCBGain, #706
	EXTRN	HCODE(_WriteCBGain)
_1440:	DB	025H,064H,02CH,025H,064H,000H
_1553:	DB	025H,063H,025H,02EH,031H,066H,000H
	SYMB	ALAB, _BBControlPort, #16
	EXTRN	HDATA(_BBControlPort)
_315:	DB	048H,047H,025H,06CH,064H,03BH,000H
	SYMB	TYPE, 707, 'X', 12, #1, 30, 0
	SYMB	ALAB, _BBDefaults, #707
	EXTRN	HCODE(_BBDefaults)
	SYMB	ALAB, _SettingsPtr, #453
	EXTRN	HDATA(_SettingsPtr)
_314:	DB	047H,04DH,030H,000H
	EXTRN	HCODE(__L2SPF)
	SYMB	ALAB, _ESEReg, #3
	EXTRN	HDATA(_ESEReg)
	SYMB	TYPE, 708, 'X', 12, #16, 30, 1, #259
	SYMB	ALAB, _BBVersion, #708
	EXTRN	HCODE(_BBVersion)
_959:	DB	04FH,046H,046H,00AH,000H
	SYMB	TYPE, 709, 'X', 12, #16, 30, 0
	SYMB	ALAB, _BBInit, #709
	EXTRN	HCODE(_BBInit)
	SYMB	TYPE, 710, 'X', 12, #1, 30, 0
	SYMB	ALAB, _CBDefaults, #710
	EXTRN	HCODE(_CBDefaults)
_985:	DB	025H,064H,02CH,025H,073H,000H
_334:	DB	047H,058H,025H,075H,03BH,000H
	SYMB	ALAB, _GenlockSetup, #455
	EXTRN	HDATA(_GenlockSetup)
	SYMB	TYPE, 711, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _SetCBEmbAudioSignal, #711
	EXTRN	HCODE(_SetCBEmbAudioSignal)
	SYMB	TYPE, 712, 'X', 12, #16, 30, 3, #16, #259, #1
	SYMB	ALAB, _rs232printf, #712
	EXTRN	HCODE(_rs232printf)
	SYMB	TYPE, 713, 'X', 12, #16, 30, 0
	SYMB	ALAB, _AudioUpdate, #713
	EXTRN	HCODE(_AudioUpdate)
	SYMB	ALAB, _Settings, #475
	EXTRN	HDATA(_Settings)
	SYMB	TYPE, 714, 'X', 12, #16, 30, 3, #259, #259, #1
	SYMB	ALAB, _sprintf, #714
	EXTRN	HCODE(_sprintf)
	SYMB	ALAB, _OperEventReg, #18
	EXTRN	HDATA(_OperEventReg)
	EXTRN	HCODE(__CMP_SPF)
	EXTRN	HCODE(__DIV_SPF)
	SYMB	ALAB, _SREReg, #3
	EXTRN	HDATA(_SREReg)
	SYMB	TYPE, 715, 'X', 12, #16, 30, 3, #263, #453, #16
	SYMB	ALAB, _NV_Store, #715
	EXTRN	HCODE(_NV_Store)
_184:	DB	025H,064H,02CH,025H,064H,02CH,025H,064H,02CH,025H,064H,000H
	SYMB	TYPE, 716, 'X', 12, #16, 30, 0
	SYMB	ALAB, _pld_version, #716
	EXTRN	HCODE(_pld_version)
	SYMB	TYPE, 717, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _RecallPreset, #717
	EXTRN	HCODE(_RecallPreset)
	SYMB	TYPE, 718, 'X', 12, #16, 30, 0
	SYMB	ALAB, _AudioInit, #718
	EXTRN	HCODE(_AudioInit)
	SYMB	ALAB, _Calibration, #485
	EXTRN	HDATA(_Calibration)
	SYMB	TYPE, 719, 'X', 12, #1, 30, 1, #16
	SYMB	ALAB, _BBSPGCommunication, #719
	EXTRN	HCODE(_BBSPGCommunication)
_1122:	DB	025H,064H,02CH,025H,064H,02CH,025H,064H,000H
_299:	DB	025H,064H,02CH,025H,064H,02CH,025H,066H,000H
	EXTRN	HCODE(__ADD_DPF)
	EXTRN	HCODE(__SMODL)
	SYMB	TYPE, 720, 'X', 12, #16, 30, 0
	SYMB	ALAB, _tcxo_status, #720
	EXTRN	HCODE(_tcxo_status)
_157:	DB	025H,064H,02CH,025H,037H,073H,000H
	SYMB	ALAB, _QuestEnableReg, #18
	EXTRN	HDATA(_QuestEnableReg)
	EXTRN	IDATA(__lc_bs)
	SYMB	TYPE, 721, 'X', 12, #16, 30, 0
	SYMB	ALAB, _ResetInstrument, #721
	EXTRN	HCODE(_ResetInstrument)
	SYMB	ALAB, _QuestConditionReg, #18
	EXTRN	HDATA(_QuestConditionReg)
	SYMB	TYPE, 722, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioClick, #722
	EXTRN	HCODE(_SetAudioClick)
_1079:	DB	025H,038H,073H,000H
	SYMB	TYPE, 723, 'X', 12, #16, 30, 1, #18
	SYMB	ALAB, _SetCBPattern, #723
	EXTRN	HCODE(_SetCBPattern)
	EXTRN	HCODE(__SDIVL)
_1054:	DB	025H,033H,032H,073H,000H
	SYMB	TYPE, 724, 'X', 12, #1, 30, 0
	SYMB	ALAB, _GenlockDefaults, #724
	EXTRN	HCODE(_GenlockDefaults)
_533:	DB	025H,064H,02CH,000H
	SYMB	TYPE, 725, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _rs232putchar, #725
	EXTRN	HCODE(_rs232putchar)
	EXTRN	HCODE(__DPF2L)
	EXTRN	HCODE(__CMP_DPF)
	SYMB	ALAB, _OperConditionReg, #18
	EXTRN	HDATA(_OperConditionReg)
	SYMB	TYPE, 726, 'X', 12, #1, 30, 0
	SYMB	ALAB, _AudioDefaults, #726
	EXTRN	HCODE(_AudioDefaults)
_183:	DB	025H,064H,02CH,025H,064H,02CH,025H,064H,00AH,000H
_131:	DB	025H,064H,02CH,025H,031H,037H,073H,000H
	SYMB	ALAB, _SCPIError, #16
	EXTRN	HDATA(_SCPIError)
	EXTRN	HCODE(__UDIVL)
	SYMB	TYPE, 727, 'X', 12, #18, 30, 2, #7, #7
	SYMB	ALAB, _ROMChecksum, #727
	EXTRN	HCODE(_ROMChecksum)
	SYMB	TYPE, 728, 'X', 12, #16, 30, 2, #3, #3
	SYMB	ALAB, _WriteAnlAudioDACLevel, #728
	EXTRN	HCODE(_WriteAnlAudioDACLevel)
_109:	DB	025H,064H,02CH,022H,000H
_958:	DB	04FH,04EH,00AH,000H
	SYMB	TYPE, 729, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioLevel, #729
	EXTRN	HCODE(_SetAudioLevel)
_421:	DB	02CH,025H,064H,02CH,000H
	EXTRN	HCODE(__DPF2S)
	SYMB	TYPE, 730, 'X', 12, #16, 30, 5, #16, #16, #259, #259, #1
	SYMB	ALAB, _sio0SndRequest, #730
	EXTRN	HCODE(_sio0SndRequest)
	SYMB	TYPE, 731, 'X', 12, #3, 30, 0
	SYMB	ALAB, _UpdateESRRegister, #731
	EXTRN	HCODE(_UpdateESRRegister)
	SYMB	ALAB, _QuestEventReg, #18
	EXTRN	HDATA(_QuestEventReg)
	SYMB	TYPE, 732, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _SetCBScHPhase, #732
	EXTRN	HCODE(_SetCBScHPhase)
	EXTRN	DATA(__lc_ub_xvwbuffer)
	EXTRN	DATA(__lc_ue_xvwbuffer)
	CALLS	'CLSCommand', 'ResetErrorEventQueue'
	CALLS	'ESECommand', 'rs232printf'
	CALLS	'ESECommand', 'sscanf'
	CALLS	'ESRCommand', 'UpdateESRRegister'
	CALLS	'ESRCommand', 'rs232printf'
	CALLS	'SRECommand', 'rs232printf'
	CALLS	'SRECommand', 'sscanf'
	CALLS	'STBCommand', 'UpdateSTBRegister'
	CALLS	'STBCommand', 'rs232printf'
	CALLS	'RSTCommand', 'ResetInstrument'
	CALLS	'IDNCommand', 'rs232puts'
	CALLS	'IDNCommand', 'rs232putchar'
	CALLS	'IDNCommand', 'rs232puts'
	CALLS	'IDNCommand', 'rs232putchar'
	CALLS	'IDNCommand', 'rs232puts'
	CALLS	'IDNCommand', 'rs232putchar'
	CALLS	'IDNCommand', 'rs232puts'
	CALLS	'IDNCommand', 'rs232putchar'
	CALLS	'RCLCommand', 'sscanf'
	CALLS	'RCLCommand', 'RecallPreset'
	CALLS	'SAVCommand', 'sscanf'
	CALLS	'SAVCommand', 'StorePreset'
	CALLS	'SystemError', 'ReadErrorEventQueue'
	CALLS	'SystemError', 'sprintf'
	CALLS	'SystemError', 'rs232puts'
	CALLS	'SystemError', 'rs232putchar'
	CALLS	'SystemError', 'rs232puts'
	CALLS	'SystemVersion', 'rs232putchar'
	CALLS	'SystemPresetName', 'sscanf'
	CALLS	'SystemPresetName', 'NV_Recall'
	CALLS	'SystemPresetName', 'rs232puts'
	CALLS	'SystemPresetName', 'rs232putchar'
	CALLS	'SystemPresetName', 'sscanf'
	CALLS	'SystemPresetName', 'strlen'
	CALLS	'SystemPresetName', 'NV_Recall'
	CALLS	'SystemPresetName', 'strcpy'
	CALLS	'SystemPresetName', 'NV_Store'
	CALLS	'SystemPresetAuthor', 'sscanf'
	CALLS	'SystemPresetAuthor', 'NV_Recall'
	CALLS	'SystemPresetAuthor', 'rs232puts'
	CALLS	'SystemPresetAuthor', 'rs232putchar'
	CALLS	'SystemPresetAuthor', 'sscanf'
	CALLS	'SystemPresetAuthor', 'strlen'
	CALLS	'SystemPresetAuthor', 'NV_Recall'
	CALLS	'SystemPresetAuthor', 'strcpy'
	CALLS	'SystemPresetAuthor', 'NV_Store'
	CALLS	'SystemPresetDate', 'sscanf'
	CALLS	'SystemPresetDate', 'NV_Recall'
	CALLS	'SystemPresetDate', 'sprintf'
	CALLS	'SystemPresetDate', 'rs232puts'
	CALLS	'SystemPresetDate', 'sscanf'
	CALLS	'SystemPresetDate', 'ValidateDate'
	CALLS	'SystemPresetDate', 'NV_Recall'
	CALLS	'SystemPresetDate', 'NV_Store'
	CALLS	'StatusOperEvent', 'rs232printf'
	CALLS	'StatusOperCondition', 'rs232printf'
	CALLS	'StatusOperEnable', 'rs232printf'
	CALLS	'StatusOperEnable', 'sscanf'
	CALLS	'StatusQuestEvent', 'rs232printf'
	CALLS	'StatusQuestCondition', 'rs232printf'
	CALLS	'StatusQuestEnable', 'rs232printf'
	CALLS	'StatusQuestEnable', 'sscanf'
	CALLS	'StatusPreset', 'rs232putchar'
	CALLS	'StatusPreset', 'rs232puts'
	CALLS	'StatusPreset', 'rs232putchar'
	CALLS	'GenlockGen', 'rs232putchar'
	CALLS	'GenlockGen', 'PrintSamplesToFLT'
	CALLS	'GenlockGen', 'rs232putchar'
	CALLS	'GenlockGenSystem', 'rs232putchar'
	CALLS	'GenlockGenSystem', 'FindParameter'
	CALLS	'GenlockGenSystem', 'SetGenlockSystem'
	CALLS	'GenlockGenDelay', 'PrintSamplesToFLT'
	CALLS	'GenlockGenDelay', 'rs232putchar'
	CALLS	'GenlockGenDelay', 'sscanf'
	CALLS	'GenlockGenDelay', 'FLTToSamples'
	CALLS	'GenlockGenDelay', 'SetGenlockDelay'
	CALLS	'GenlockGenCalibrateEnable', 'rs232putchar'
	CALLS	'GenlockGenCalibrateEnable', 'FindParameter'
	CALLS	'GenlockGenCalibrateEnable', 'SetGenlockSystem'
	CALLS	'GenlockGenCalibrateEnable', 'SetBBSystem'
	CALLS	'GenlockGenCalibrateEnable', 'sio0SndCommand'
	CALLS	'GenlockGenCalibrateAdjust', 'FindParameter'
	CALLS	'GenlockGenCalibrateAdjust', 'sio0SndCommand'
	CALLS	'GenlockGenCalibrateAdjust', 'FindParameter'
	CALLS	'GenlockGenCalibrateAdjust', 'sio0SndCommand'
	CALLS	'GenlockGenCalibrateStore', 'NV_Store'
	CALLS	'BBGen', 'rs232putchar'
	CALLS	'BBGen', 'PrintSamplesToFLT'
	CALLS	'BBGen', 'rs232printf'
	CALLS	'BBGenSystem', 'rs232putchar'
	CALLS	'BBGenSystem', 'FindParameter'
	CALLS	'BBGenSystem', 'SetBBSystem'
	CALLS	'BBGenDelay', 'PrintSamplesToFLT'
	CALLS	'BBGenDelay', 'rs232putchar'
	CALLS	'BBGenDelay', 'sscanf'
	CALLS	'BBGenDelay', 'FLTToSamples'
	CALLS	'BBGenDelay', 'SetBBDelay'
	CALLS	'BBGenScHPhase', 'rs232printf'
	CALLS	'BBGenScHPhase', 'sscanf'
	CALLS	'BBGenScHPhase', 'SetBBScHPhase'
	CALLS	'TSGen', 'rs232putchar'
	CALLS	'TSGen', 'PrintSamplesToFLT'
	CALLS	'TSGen', 'rs232printf'
	CALLS	'TSGen', 'rs232putchar'
	CALLS	'TSGenPattern', 'rs232putchar'
	CALLS	'TSGenPattern', 'FindParameter'
	CALLS	'TSGenPattern', 'SetCBPattern'
	CALLS	'TSGenSystem', 'rs232putchar'
	CALLS	'TSGenSystem', 'FindParameter'
	CALLS	'TSGenSystem', 'SetCBSystem'
	CALLS	'TSGenDelay', 'PrintSamplesToFLT'
	CALLS	'TSGenDelay', 'rs232putchar'
	CALLS	'TSGenDelay', 'sscanf'
	CALLS	'TSGenDelay', 'FLTToSamples'
	CALLS	'TSGenDelay', 'SetCBDelay'
	CALLS	'TSGenScHPhase', 'rs232printf'
	CALLS	'TSGenScHPhase', 'sscanf'
	CALLS	'TSGenScHPhase', 'SetCBScHPhase'
	CALLS	'TSGenEmbAudioSignal', 'rs232putchar'
	CALLS	'TSGenEmbAudioSignal', 'FindParameter'
	CALLS	'TSGenEmbAudioSignal', 'SetCBEmbAudioSignal'
	CALLS	'AudioGenOutput', 'rs232putchar'
	CALLS	'AudioGenOutput', 'FindParameter'
	CALLS	'AudioGenOutput', 'SetAudioOutput'
	CALLS	'AudioGenAnalog', 'rs232putchar'
	CALLS	'AudioGenAnalog', 'rs232printf'
	CALLS	'AudioGenAnalogSignal', 'rs232putchar'
	CALLS	'AudioGenAnalogSignal', 'FindParameter'
	CALLS	'AudioGenAnalogSignal', 'SetAudioSignal'
	CALLS	'AudioGenAnalogLevel', 'rs232putchar'
	CALLS	'AudioGenAnalogLevel', 'rs232printf'
	CALLS	'AudioGenAnalogLevel', 'FindParameter'
	CALLS	'AudioGenAnalogLevel', 'sscanf'
	CALLS	'AudioGenAnalogLevel', 'SetAudioLevel'
	CALLS	'AudioGenAnalogClick', 'rs232printf'
	CALLS	'AudioGenAnalogClick', 'sscanf'
	CALLS	'AudioGenAnalogClick', 'SetAudioClick'
	CALLS	'AudioGenAESEBU', 'rs232putchar'
	CALLS	'AudioGenAESEBU', 'rs232printf'
	CALLS	'AudioGenAESEBU', 'rs232putchar'
	CALLS	'AudioGenAESEBU', 'rs232printf'
	CALLS	'AudioGenAESEBUSystem', 'rs232putchar'
	CALLS	'AudioGenAESEBUSystem', 'FindParameter'
	CALLS	'AudioGenAESEBUSystem', 'SetAudioSystem'
	CALLS	'AudioGenAESEBUSignal', 'rs232putchar'
	CALLS	'AudioGenAESEBUSignal', 'FindParameter'
	CALLS	'AudioGenAESEBUSignal', 'SetAudioSignal'
	CALLS	'AudioGenAESEBULevel', 'rs232putchar'
	CALLS	'AudioGenAESEBULevel', 'rs232printf'
	CALLS	'AudioGenAESEBULevel', 'FindParameter'
	CALLS	'AudioGenAESEBULevel', 'sscanf'
	CALLS	'AudioGenAESEBULevel', 'SetAudioLevel'
	CALLS	'AudioGenAESEBUTiming', 'rs232printf'
	CALLS	'AudioGenAESEBUTiming', 'sscanf'
	CALLS	'AudioGenAESEBUTiming', 'SetAudioTiming'
	CALLS	'AudioGenAESEBUWordClock', 'rs232putchar'
	CALLS	'AudioGenAESEBUWordClock', 'FindParameter'
	CALLS	'AudioGenAESEBUWordClock', 'SetAudioWordClock'
	CALLS	'AudioGenAESEBUClick', 'rs232printf'
	CALLS	'AudioGenAESEBUClick', 'sscanf'
	CALLS	'AudioGenAESEBUClick', 'SetAudioClick'
	CALLS	'FactPassword', 'rs232puts'
	CALLS	'FactPassword', 'strcmp'
	CALLS	'FactPassword', 'Cstrcmp'
	CALLS	'FactReset', 'GenlockDefaults'
	CALLS	'FactReset', 'BBDefaults'
	CALLS	'FactReset', 'CBDefaults'
	CALLS	'FactReset', 'AudioDefaults'
	CALLS	'FactReset', 'GenlockInit'
	CALLS	'FactReset', 'BBInit'
	CALLS	'FactReset', 'CBInit'
	CALLS	'FactReset', 'AudioInit'
	CALLS	'FactReset', 'GenlockUpdate'
	CALLS	'FactReset', 'CBUpdate'
	CALLS	'FactReset', 'BBUpdate'
	CALLS	'FactReset', 'AudioUpdate'
	CALLS	'FactReset', 'StorePreset'
	CALLS	'FactReset', 'NV_Store'
	CALLS	'FactV24Command', 'sscanf'
	CALLS	'FactV24Command', 'sio0SndRequest'
	CALLS	'FactV24Command', 'rs232puts'
	CALLS	'FactV24Command', 'sio0SndCommand'
	CALLS	'FactV24Transparent', 'FindParameter'
	CALLS	'FactV24Transparent', 'BBSPGCommunication'
	CALLS	'FactChecksumCode', 'ROMChecksum'
	CALLS	'FactChecksumCode', 'sprintf'
	CALLS	'FactChecksumCode', 'rs232puts'
	CALLS	'FactChecksumPLD', 'ROMChecksum'
	CALLS	'FactChecksumPLD', 'sprintf'
	CALLS	'FactChecksumPLD', 'rs232puts'
	CALLS	'FactChecksumEmbAudio', 'ROMChecksum'
	CALLS	'FactChecksumEmbAudio', 'sprintf'
	CALLS	'FactChecksumEmbAudio', 'rs232puts'
	CALLS	'FactChecksumPattern', 'ROMChecksum'
	CALLS	'FactChecksumPattern', 'sprintf'
	CALLS	'FactChecksumPattern', 'rs232puts'
	CALLS	'FactChecksumRange', 'sscanf'
	CALLS	'FactChecksumRange', 'ROMChecksum'
	CALLS	'FactChecksumRange', 'sprintf'
	CALLS	'FactChecksumRange', 'rs232puts'
	CALLS	'FactMainVersion', 'sprintf'
	CALLS	'FactMainVersion', 'rs232puts'
	CALLS	'FactMainIDNCompany', 'rs232puts'
	CALLS	'FactMainIDNCompany', 'rs232putchar'
	CALLS	'FactMainIDNCompany', 'sscanf'
	CALLS	'FactMainIDNCompany', 'strncpy'
	CALLS	'FactMainIDNCompany', 'NV_Store'
	CALLS	'FactMainIDNType', 'rs232puts'
	CALLS	'FactMainIDNType', 'rs232putchar'
	CALLS	'FactMainIDNType', 'sscanf'
	CALLS	'FactMainIDNType', 'strncpy'
	CALLS	'FactMainIDNType', 'NV_Store'
	CALLS	'FactMainIDNKUNumber', 'rs232puts'
	CALLS	'FactMainIDNKUNumber', 'rs232putchar'
	CALLS	'FactMainIDNKUNumber', 'sscanf'
	CALLS	'FactMainIDNKUNumber', 'strncpy'
	CALLS	'FactMainIDNKUNumber', 'NV_Store'
	CALLS	'FactMainIDNSWRevision', 'rs232puts'
	CALLS	'FactMainIDNSWRevision', 'rs232putchar'
	CALLS	'FactMainIDNSWRevision', 'sscanf'
	CALLS	'FactMainIDNSWRevision', 'strncpy'
	CALLS	'FactMainIDNSWRevision', 'NV_Store'
	CALLS	'FactMainSystem', 'rs232putchar'
	CALLS	'FactMainSystem', 'FindParameter'
	CALLS	'FactMainSystem', 'NV_Store'
	CALLS	'FactMainFMSDateProd', 'sprintf'
	CALLS	'FactMainFMSDateProd', 'rs232puts'
	CALLS	'FactMainFMSDateProd', 'sscanf'
	CALLS	'FactMainFMSDateProd', 'ValidateDate'
	CALLS	'FactMainFMSDateProd', 'NV_Store'
	CALLS	'FactMainFMSDateUpd', 'sprintf'
	CALLS	'FactMainFMSDateUpd', 'rs232puts'
	CALLS	'FactMainFMSDateUpd', 'sscanf'
	CALLS	'FactMainFMSDateUpd', 'ValidateDate'
	CALLS	'FactMainFMSDateUpd', 'NV_Store'
	CALLS	'FactGenlockGenDate', 'sprintf'
	CALLS	'FactGenlockGenDate', 'rs232puts'
	CALLS	'FactGenlockGenDate', 'sscanf'
	CALLS	'FactGenlockGenDate', 'ValidateDate'
	CALLS	'FactGenlockGenDate', 'NV_Store'
	CALLS	'FactGenlockGenVersion', 'GenlockVersion'
	CALLS	'FactGenlockGenVersion', 'rs232puts'
	CALLS	'FactGenlockGenVersion', 'rs232putchar'
	CALLS	'FactGenlockGenFRefDate', 'sprintf'
	CALLS	'FactGenlockGenFRefDate', 'rs232puts'
	CALLS	'FactGenlockGenFRefDate', 'sscanf'
	CALLS	'FactGenlockGenFRefDate', 'ValidateDate'
	CALLS	'FactGenlockGenFRefDate', 'NV_Store'
	CALLS	'FactGenlockGenFRefDAC', 'sprintf'
	CALLS	'FactGenlockGenFRefDAC', 'rs232puts'
	CALLS	'FactGenlockGenFRefDAC', 'sscanf'
	CALLS	'FactGenlockGenFRefDAC', 'NV_Store'
	CALLS	'FactGenlockGenURefDate', 'sprintf'
	CALLS	'FactGenlockGenURefDate', 'rs232puts'
	CALLS	'FactGenlockGenURefDate', 'sscanf'
	CALLS	'FactGenlockGenURefDate', 'ValidateDate'
	CALLS	'FactGenlockGenURefDate', 'NV_Store'
	CALLS	'FactGenlockGenURefDAC', 'sprintf'
	CALLS	'FactGenlockGenURefDAC', 'rs232puts'
	CALLS	'FactGenlockGenURefDAC', 'sscanf'
	CALLS	'FactGenlockGenURefDAC', 'NV_Store'
	CALLS	'FactGenlockGenHPHZero', 'sprintf'
	CALLS	'FactGenlockGenHPHZero', 'rs232puts'
	CALLS	'FactGenlockGenHPHZero', 'sscanf'
	CALLS	'FactGenlockGenHPHZero', 'NV_Store'
	CALLS	'FactGenlockGenPhase', 'sprintf'
	CALLS	'FactGenlockGenPhase', 'rs232puts'
	CALLS	'FactGenlockGenPhase', 'sscanf'
	CALLS	'FactGenlockGenPhase', 'NV_Store'
	CALLS	'FactBBGenDate', 'sprintf'
	CALLS	'FactBBGenDate', 'rs232puts'
	CALLS	'FactBBGenDate', 'sscanf'
	CALLS	'FactBBGenDate', 'ValidateDate'
	CALLS	'FactBBGenDate', 'NV_Store'
	CALLS	'FactBBGenVersion', 'BBVersion'
	CALLS	'FactBBGenVersion', 'rs232puts'
	CALLS	'FactBBGenVersion', 'rs232putchar'
	CALLS	'FactBBGenSignal', 'FindParameter'
	CALLS	'FactBBGenPhase', 'sprintf'
	CALLS	'FactBBGenPhase', 'rs232puts'
	CALLS	'FactBBGenPhase', 'sscanf'
	CALLS	'FactBBGenPhase', 'NV_Store'
	CALLS	'FactBBGenScHPhase', 'sprintf'
	CALLS	'FactBBGenScHPhase', 'rs232puts'
	CALLS	'FactBBGenScHPhase', 'sscanf'
	CALLS	'FactBBGenScHPhase', 'NV_Store'
	CALLS	'FactBBGenDAC', 'sprintf'
	CALLS	'FactBBGenDAC', 'rs232puts'
	CALLS	'FactBBGenDAC', 'sscanf'
	CALLS	'FactBBGenDAC', 'NV_Store'
	CALLS	'FactTSGenDate', 'sprintf'
	CALLS	'FactTSGenDate', 'rs232puts'
	CALLS	'FactTSGenDate', 'sscanf'
	CALLS	'FactTSGenDate', 'ValidateDate'
	CALLS	'FactTSGenDate', 'NV_Store'
	CALLS	'FactTSGenAGain', 'sprintf'
	CALLS	'FactTSGenAGain', 'rs232puts'
	CALLS	'FactTSGenAGain', 'sscanf'
	CALLS	'FactTSGenAGain', 'NV_Store'
	CALLS	'FactTSGenAGain', 'WriteCBGain'
	CALLS	'FactTSGenCGain', 'sprintf'
	CALLS	'FactTSGenCGain', 'rs232puts'
	CALLS	'FactTSGenCGain', 'sscanf'
	CALLS	'FactTSGenCGain', 'NV_Store'
	CALLS	'FactTSGenCGain', 'WriteCBChromaGain'
	CALLS	'FactTSGenPhase', 'sprintf'
	CALLS	'FactTSGenPhase', 'rs232puts'
	CALLS	'FactTSGenPhase', 'sscanf'
	CALLS	'FactTSGenPhase', 'NV_Store'
	CALLS	'FactTSGenPhase', 'SetCBDelay'
	CALLS	'FactTSGenScHPhase', 'sprintf'
	CALLS	'FactTSGenScHPhase', 'rs232puts'
	CALLS	'FactTSGenScHPhase', 'sscanf'
	CALLS	'FactTSGenScHPhase', 'NV_Store'
	CALLS	'FactTSGenScHPhase', 'SetCBScHPhase'
	CALLS	'FactAudioGenStatus', 'AudioStatus'
	CALLS	'FactAudioGenStatus', 'sprintf'
	CALLS	'FactAudioGenStatus', 'rs232puts'
	CALLS	'FactAudioGenDate', 'sprintf'
	CALLS	'FactAudioGenDate', 'rs232puts'
	CALLS	'FactAudioGenDate', 'sscanf'
	CALLS	'FactAudioGenDate', 'ValidateDate'
	CALLS	'FactAudioGenDate', 'NV_Store'
	CALLS	'FactAudioGenLevel', 'sprintf'
	CALLS	'FactAudioGenLevel', 'rs232puts'
	CALLS	'FactAudioGenLevel', 'sscanf'
	CALLS	'FactAudioGenLevel', 'NV_Store'
	CALLS	'FactAudioGenLevel', 'WriteAnlAudioDACLevel'
	CALLS	'FactPLDVersion', 'pld_version'
	CALLS	'FactPLDVersion', 'sprintf'
	CALLS	'FactPLDVersion', 'rs232puts'
	CALLS	'FactTCXOStatus', 'tcxo_status'
	CALLS	'FactTCXOStatus', 'sprintf'
	CALLS	'FactTCXOStatus', 'rs232puts'
	CALLS	'FactMultiMediaChip', 'sscanf'
	CALLS	'FactMultiMediaChip', 'TransmitIIC'
	CALLS	'FactMultiMediaChip', 'ReceiveIIC'
	CALLS	'FactMultiMediaChip', 'rs232printf'
	CALLS	'FactMultiMediaChip', 'sscanf'
	CALLS	'FactMultiMediaChip', 'TransmitIIC'
	CALLS	'FactMultiMediaChip', 'ReceiveIIC'
	CALLS	'FactMultiMediaChip', 'rs232printf'
	CALLS	'FindParameter', 'Cstrcmp'
	CALLS	'FLTToSamples', 'labs'
	CALLS	'FLTToSamples', 'abs'
	CALLS	'FLTToSamples', 'labs'
	CALLS	'FLTToSamples', 'abs'
	CALLS	'PrintSamplesToFLT', 'abs'
	CALLS	'PrintSamplesToFLT', 'rs232printf'
	CALLS	'PrintSamplesToFLT', 'abs'
	CALLS	'PrintSamplesToFLT', 'rs232printf'
	CALLS	'PrintSamplesToFLT', 'fabs'
	CALLS	'PrintSamplesToFLT', 'rs232printf'
	END
