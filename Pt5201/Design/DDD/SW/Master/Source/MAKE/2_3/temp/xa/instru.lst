XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   1
U:\Pt5201\Design\DDD\SW\Master\Source\MAKE\2_3\temp\xa\instru.src
ADDR   CODE            LINE SOURCELINE
                          1 ; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
                          2 ; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -I..\..\rtxcdef\xa
                          3 ;          -I..\..\rtxc\xa\include -I..\..\code\include\1_1 -I..\..\app_spec\xa
                          4 ;          -Ml -O2 -s
                          6 $NOZPAGE
                          7         NAME    INSTRU
                         11 ; instru.c    1 /****************************************************************************/
                         12 ; instru.c    2 /* MODULE:                                                                  */
                         13 ; instru.c    3 /*  instru.c - Instrument control task                                      */
                         14 ; instru.c    4 /****************************************************************************/
                         15 ; instru.c    5 /* FUNCTIONS:                                                               */
                         16 ; instru.c    6 /*                                                                          */
                         17 ; instru.c    7 /*                                                                          */
                         18 ; instru.c    8 /* TASKS:                                                                   */
                         19 ; instru.c    9     void instru(void);
                         20 ; instru.c   10 /*                                                                          */
                         21 ; instru.c   11 /* NOTES:                                                                   */
                         22 ; instru.c   12 /*  Receives command messages form user control tasks, processes them and   */   
                                                        
                         23 ; instru.c   13 /*  replies according to command.                                           */
                         24 ; instru.c   14 /*                                                                          */
                         25 ; instru.c   15 /* EDITOR:                                                                  */
                         26 ; instru.c   16 /*  Tasking tabs 3 5                                                             
                                                                                                                             
                                                                                            */
                         27 ; instru.c   17 /****************************************************************************/
                         28 ; instru.c   18 /*
                         29 ; instru.c   19  *   PTV software for PT5201    
                         30 ; instru.c   20  *   Copyright (c) 
                         31 ; instru.c   21  *   ProTeleVision Technologies A/S.
                         32 ; instru.c   22  *   ALL RIGHTS RESERVED
                         33 ; instru.c   23 */
                         34 ; instru.c   24 /****************************************************************************/
                         35 ; instru.c   25 
                         36 ; instru.c   26 #include <string.h>
                         40 ; instru.c   27 #include <stdio.h>
                         60 ; instru.c   28 #include <stdlib.h>
                         74 ; instru.c   29 #include "define.h"
                         77 ; instru.c   30 #include "eventdef.h"
                         80 ; instru.c   31 #include "rtxcobj.h"
                        405 ; instru.c   32 #include "rs232.h"
                        412 ; instru.c   33 #include "sio0drv.h"
                        419 ; instru.c   34 #include "tim0drv.h"
                        424 ; instru.c   35 #include "i2c_drv.h"
                        427 ; instru.c   36 #include "tvp6kdrv.h"
                        430 ; instru.c   37 #include "nv_drv.h"
                        434 ; instru.c   38 #include "led_hw.h"
                        441 ; instru.c   39 #include "genlock.h"
                        448 ; instru.c   40 #include "bb.h"
                        456 ; instru.c   41 #include "cbar.h"
                        466 ; instru.c   42 #include "audio.h"
                        477 ; instru.c   43 #include "keyscan.h"
                        480 ; instru.c   44 #include "front.h"
                        483 ; instru.c   45 #include "unitprg.h"
                        486 ; instru.c   46 
                        487 ; instru.c   47 #include "instru.h"
                        565 ; instru.c   48 #include "interp.h"
                        570 ; instru.c   49 
                        571 ; instru.c   50 TTimer*  InstruTimer;
                        572 ; instru.c   51 TThread* InstrumentControl;
                        573 ; instru.c   52 TThread* InterpreterThread;
                        574 ; instru.c   53 TThread* KeyScanThread;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   2

ADDR   CODE            LINE SOURCELINE
                        575 ; instru.c   54 TThread* FrontThread;
                        576 ; instru.c   55 
                        577 ; instru.c   56 NvPointer SettingsPtr;
                        578 ; instru.c   57 NvPointer PresetPtr[NoOfPresets];
                        579 ; instru.c   58 NvPointer CalibrationPtr;
                        580 ; instru.c   59 
                        581 ; instru.c   60 SettingsObject Settings;
                        582 ; instru.c   61 CalibrationObject Calibration;
                        583 ; instru.c   62 
                        584 ; instru.c   63 
                        585 ; instru.c   64 UC GenlockStatus;
                        586 ; instru.c   65 
                        587 ; instru.c   66 /**************************************************************************/
                        588 ; instru.c   67 /* Instrument_Control_Task                                                       
                                                                                                                       INSTRU
                            .C      */
                        589 ; instru.c   68 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        590 ; instru.c   69 /* Author:              Kim Engedahl, DEV, 000321                                
                                                                                                                             
                                            */
                        591 ; instru.c   70 /* Revised:             001219, KEn, DEV                                         
                                                                                                                             
                                                    */
                        592 ; instru.c   71 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        593 ; instru.c   72 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                        594 ; instru.c   73 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                        595 ; instru.c   74 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                        596 ; instru.c   75 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                        597 ; instru.c   76 /**************************************************************************/
                        598 ; instru.c   77 void Instrument_Control_Task( void)
                        599 ; instru.c   78 {
000000                  600 INSTRU_PR       SEGMENT HCODE
000000                  601         RSEG    INSTRU_PR
                        602         ALIGN   1
                        616         PUBLIC  _Instrument_Control_Task
000000                  617 _Instrument_Control_Task:
000000 0F70             621         PUSH.W  R4, R5, R6
000002 9972000A         623         SUB.W   R7,#0AH
                        633 ; instru.c   79         /* VAR */
                        634 ; instru.c   80         bool Test1LEDFlag = FALSE;
000006 B960             636         MOV.W   R6,#00H
                        644 ; instru.c   81         char result[10], i;
                        645 ; instru.c   82         int tmp;
                        646 ; instru.c   83 
                        647 ; instru.c   84   /* BEGIN */
                        648 ; instru.c   85         UnitPgmMode = 0;                                                // IMPORT
                            ANT!!! see module UNITPRG.C
000008 080rrr           650         CLR     _UnitPgmMode
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   3

ADDR   CODE            LINE SOURCELINE
                        651 ; instru.c   86 
                        652 ; instru.c   87   rs232_init();                                                 // init the rs232
                             driver
                        654         CALL    _rs232_init
00000B C4rrrrrr        +654 ;       FCALL   _rs232_init
                        655 ; instru.c   88   sio0_init();                                                          // init t
                            he sio0 driver
                        657         CALL    _sio0_init
00000F C4rrrrrr        +657 ;       FCALL   _sio0_init
                        658 ; instru.c   89         tim0_init();                                                            /
                            / init the T0 counter for field
                        660         CALL    _tim0_init
000013 C4rrrrrr        +660 ;       FCALL   _tim0_init
                        661 ; instru.c   90   InitBus( IIC_PTV);                                    // init the IIC bus
000017 910800           663         MOV.B   R0L,#00H
                        664         CALL    _InitBus
00001A C4rrrrrr        +664 ;       FCALL   _InitBus
                        665 ; instru.c   91         tvp6k_init();                                                           /
                            / init the TI TVP6000 Multimedie chip
                        667         CALL    _tvp6k_init
00001E C4rrrrrr        +667 ;       FCALL   _tvp6k_init
                        668 ; instru.c   92 
                        669 ; instru.c   93         NV_Init();                                                               
                                    // init the NV RAM
                        671         CALL    _NV_Init
000022 C4rrrrrr        +671 ;       FCALL   _NV_Init
                        672 ; instru.c   94 
                        673 ; instru.c   95                                                                                  
                                                                    // init the calibraion values
                        674 ; instru.c   96         CalibrationPtr = NV_AllocP( sizeof( CalibrationObject));
000026 990800E0         676         MOV.W   R0,#0E0H
                        677         CALL    _NV_AllocP
00002A C4rrrrrr        +677 ;       FCALL   _NV_AllocP
00002E 8920             678         MOV.W   R2,R0
000030 964842rr         679         MOV.B   ES,#SEG( _CalibrationPtr )
000034 9908rrrr         680         MOV.W   R0,#SOF( _CalibrationPtr )
000038 8A28             681         MOV.W   [R0],R2
                        682 ; instru.c   97 
                        683 ; instru.c   98         if ( NV_Recall( &Calibration, CalibrationPtr, sizeof( Calibration)) == FA
                            IL)
00003A 993800E0         685         MOV.W   R3,#0E0H
00003E 9918rrrr         686         MOV.W   R1,#SEG( _Calibration )
000042 9908rrrr         687         MOV.W   R0,#SOF( _Calibration )
                        688         CALL    _NV_Recall
000046 C4rrrrrr        +688 ;       FCALL   _NV_Recall
00004A 6900             689         OR.W    R0,R0
00004C F209             690         BNE     _4
                        691 ; instru.c   99         {
                        692 ; instru.c  100                 SystemsLEDSet( ErrorLEDs, 0);
00004E 910803           694         MOV.B   R0L,#03H
000051 911800           695         MOV.B   R0H,#00H
                        696         CALL    _SystemsLEDSet
000054 C4rrrrrr        +696 ;       FCALL   _SystemsLEDSet
                        697 ; instru.c  101 
                        698 ; instru.c  102                 Sleep( 1000);
000058 990803E8         700         MOV.W   R0,#03E8H
                        701         CALL    _Sleep
00005C C4rrrrrr        +701 ;       FCALL   _Sleep
                        702 ; instru.c  103                 // error reading calibration values
                        703 ; instru.c  104         }
000060                  705 _4:
                        706 ; instru.c  105 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   4

ADDR   CODE            LINE SOURCELINE
                        707 ; instru.c  106                                                                                  
                                                                    // init the presets
                        708 ; instru.c  107         for ( i = 0; i < NoOfPresets; i++)
000060 9958rrrr         710         MOV.W   R5,#SEG( _PresetPtr )
000064 9948rrrr         711         MOV.W   R4,#SOF( _PresetPtr )
000068                  713 _5:
                        714 ; instru.c  108                 PresetPtr[i] = NV_AllocP( sizeof( PresetObject));
000068 99080064         716         MOV.W   R0,#064H
                        717         CALL    _NV_AllocP
00006C C4rrrrrr        +717 ;       FCALL   _NV_AllocP
000070 86AC42           718         MOV.B   ES,R5L
000073 8A0C             719         MOV.W   [R4],R0
000075 99400002         721         ADD.W   R4,#02H
000079 9954rrrr         724         CMP.W   R5,#SEG( _PresetPtr+8 )
00007D F203             725         BNE     _14
00007F 9944rrrr         726         CMP.W   R4,#SOF( _PresetPtr+8 )
00007F 9944rrrr00       726         CMP.W   R4,#SOF( _PresetPtr+8 )
000084                  727 _14:
000084 F1F1             728         BCS     _5
                        729 ; instru.c  109 
                        730 ; instru.c  110                                                                                  
                                                                    // init the last selected values
                        731 ; instru.c  111         SettingsPtr = NV_AllocP( sizeof( SettingsObject));
000086 9908004A         733         MOV.W   R0,#04AH
                        734         CALL    _NV_AllocP
00008A C4rrrrrr        +734 ;       FCALL   _NV_AllocP
00008E 8920             735         MOV.W   R2,R0
000090 964842rr         736         MOV.B   ES,#SEG( _SettingsPtr )
000094 9908rrrr         737         MOV.W   R0,#SOF( _SettingsPtr )
000098 8A28             738         MOV.W   [R0],R2
                        739 ; instru.c  112 
                        740 ; instru.c  113         if ( NV_Recall( &Settings, SettingsPtr, sizeof( Settings)) == FAIL)
00009A 9938004A         742         MOV.W   R3,#04AH
00009E 9918rrrr         743         MOV.W   R1,#SEG( _Settings )
0000A2 9908rrrr         744         MOV.W   R0,#SOF( _Settings )
                        745         CALL    _NV_Recall
0000A6 C4rrrrrr        +745 ;       FCALL   _NV_Recall
0000AA 6900             746         OR.W    R0,R0
0000AC F203             747         BNE     _6
                        748 ; instru.c  114                 ResetInstrument();
0000AE C500EB           750         CALL    _ResetInstrument
0000B1 FE20             751         BR      _8
0000B1 FE2000           751         BR      _8
0000B4                  752 _6:
                        753 ; instru.c  115         else
                        754 ; instru.c  116         {
                        755 ; instru.c  117                                                                                  
                                                                            // NOTE!! The Init()-routines WILL clear
                        756 ; instru.c  118                                                                                  
                                                                            //  Settings.ActivePreset!!!!!!!!!!
                        757 ; instru.c  119                 tmp = Settings.ActivePreset;
0000B4 964842rr         759         MOV.B   ES,#SEG( _Settings )
0000B8 9948rrrr         760         MOV.W   R4,#SOF( _Settings )
0000BC 8A44             761         MOV.W   R4,[R4]
                        764 ; instru.c  120 
                        765 ; instru.c  121                 GenlockInit();                                                  /
                            / restore the genlock settings.
                        767         CALL    _GenlockInit
0000BE C4rrrrrr        +767 ;       FCALL   _GenlockInit
                        768 ; instru.c  122                 CBInit();                                                        
                                                    // restore the colorbar generator settings
                        770         CALL    _CBInit
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   5

ADDR   CODE            LINE SOURCELINE
0000C2 C4rrrrrr        +770 ;       FCALL   _CBInit
                        771 ; instru.c  123                 BBInit();                                                        
                                                    // restore the black burst settings
                        773         CALL    _BBInit
0000C6 C4rrrrrr        +773 ;       FCALL   _BBInit
                        774 ; instru.c  124                 AudioInit();                                                     
                                    // restore the audio settings
                        776         CALL    _AudioInit
0000CA C4rrrrrr        +776 ;       FCALL   _AudioInit
                        777 ; instru.c  125 
                        778 ; instru.c  126                 GenlockUpdate();                                                /
                            / update the genlock setup.
                        780         CALL    _GenlockUpdate
0000CE C4rrrrrr        +780 ;       FCALL   _GenlockUpdate
                        781 ; instru.c  127                 CBUpdate();                                                      
                                            // update the colorbar generator (PAL,EBU ColorBar)
                        783         CALL    _CBUpdate
0000D2 C4rrrrrr        +783 ;       FCALL   _CBUpdate
                        784 ; instru.c  128                 BBUpdate();                                                      
                                            // update the black burst setups
                        786         CALL    _BBUpdate
0000D6 C4rrrrrr        +786 ;       FCALL   _BBUpdate
                        787 ; instru.c  129                 AudioUpdate();                                                  /
                            / update the audio setup
                        789         CALL    _AudioUpdate
0000DA C4rrrrrr        +789 ;       FCALL   _AudioUpdate
                        790 ; instru.c  130 
                        791 ; instru.c  131                 Settings.ActivePreset = tmp;
0000DE 964842rr         793         MOV.B   ES,#SEG( _Settings )
0000E2 9908rrrr         794         MOV.W   R0,#SOF( _Settings )
0000E6 8A48             795         MOV.W   [R0],R4
                        796 ; instru.c  132 
                        797 ; instru.c  133                 if ( Settings.ActivePreset)
0000E8 6944             799         OR.W    R4,R4
0000EA F303             800         BEQ     _8
                        801 ; instru.c  134                         RecallPreset( tmp);
0000EC 8904             803         MOV.W   R0,R4
0000EE C50185           804         CALL    _RecallPreset
                        808 ; instru.c  135         }
0000F2                  810 _8:
                        811 ; instru.c  136 
                        812 ; instru.c  137 
                        813 ; instru.c  138   KeyScanThread = newTThread( 3, keyscan);
0000F2 B903             815         MOV.W   R0,#03H
0000F4 9938rrrr         816         MOV.W   R3,#SEG( _keyscan )
0000F8 9928rrrr         817         MOV.W   R2,#SOF( _keyscan )
                        818         CALL    _newTThread
0000FC C4rrrrrr        +818 ;       FCALL   _newTThread
000100 964842rr         819         MOV.B   ES,#SEG( _KeyScanThread )
000104 9928rrrr         820         MOV.W   R2,#SOF( _KeyScanThread )
000108 8B0A             821         MOV.W   [R2+],R0
00010A 8A1A             822         MOV.W   [R2],R1
                        823 ; instru.c  139         FrontThread = newTThread( 4, front);
00010C B904             825         MOV.W   R0,#04H
00010E 9938rrrr         826         MOV.W   R3,#SEG( _front )
000112 9928rrrr         827         MOV.W   R2,#SOF( _front )
                        828         CALL    _newTThread
000116 C4rrrrrr        +828 ;       FCALL   _newTThread
00011A 964842rr         829         MOV.B   ES,#SEG( _FrontThread )
00011E 9928rrrr         830         MOV.W   R2,#SOF( _FrontThread )
000122 8B0A             831         MOV.W   [R2+],R0
000124 8A1A             832         MOV.W   [R2],R1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   6

ADDR   CODE            LINE SOURCELINE
                        833 ; instru.c  140         InterpreterThread = newTThread( 5, Interpreter);
000126 B905             835         MOV.W   R0,#05H
000128 9938rrrr         836         MOV.W   R3,#SEG( _Interpreter )
00012C 9928rrrr         837         MOV.W   R2,#SOF( _Interpreter )
                        838         CALL    _newTThread
000130 C4rrrrrr        +838 ;       FCALL   _newTThread
000134 964842rr         839         MOV.B   ES,#SEG( _InterpreterThread )
000138 9928rrrr         840         MOV.W   R2,#SOF( _InterpreterThread )
00013C 8B0A             841         MOV.W   [R2+],R0
00013E 8A1A             842         MOV.W   [R2],R1
                        843 ; instru.c  141 
                        844 ; instru.c  142   KeyScanThread->Execute( KeyScanThread);
000140 964842rr         846         MOV.B   ES,#SEG( _KeyScanThread )
000144 9918rrrr         847         MOV.W   R1,#SOF( _KeyScanThread )
000148 8B01             848         MOV.W   R0,[R1+]
00014A 8A11             849         MOV.W   R1,[R1]
00014C 862C42           850         MOV.B   ES,R1L
00014F 8C4006           851         MOV.W   R4,[R0+6]
000152 8C5008           852         MOV.W   R5,[R0+8]
000155 C4rrrrrr         853         FCALL   __ICALL
                        854 ; instru.c  143         FrontThread->Execute( FrontThread);
000159 964842rr         856         MOV.B   ES,#SEG( _FrontThread )
00015D 9918rrrr         857         MOV.W   R1,#SOF( _FrontThread )
000161 8B01             858         MOV.W   R0,[R1+]
000163 8A11             859         MOV.W   R1,[R1]
000165 862C42           860         MOV.B   ES,R1L
000168 8C4006           861         MOV.W   R4,[R0+6]
00016B 8C5008           862         MOV.W   R5,[R0+8]
00016E C4rrrrrr         863         FCALL   __ICALL
                        864 ; instru.c  144   InterpreterThread->Execute( InterpreterThread);
000172 964842rr         866         MOV.B   ES,#SEG( _InterpreterThread )
000176 9918rrrr         867         MOV.W   R1,#SOF( _InterpreterThread )
00017A 8B01             868         MOV.W   R0,[R1+]
00017C 8A11             869         MOV.W   R1,[R1]
00017E 862C42           870         MOV.B   ES,R1L
000181 8C4006           871         MOV.W   R4,[R0+6]
000184 8C5008           872         MOV.W   R5,[R0+8]
000187 C4rrrrrr         873         FCALL   __ICALL
                        874 ; instru.c  145 
                        875 ; instru.c  146   InstruTimer = newTTimer();
                        877         CALL    _newTTimer
00018B C4rrrrrr        +877 ;       FCALL   _newTTimer
00018F 964842rr         878         MOV.B   ES,#SEG( _InstruTimer )
000193 9928rrrr         879         MOV.W   R2,#SOF( _InstruTimer )
000197 8B0A             880         MOV.W   [R2+],R0
000199 8A1A             881         MOV.W   [R2],R1
                        882 ; instru.c  147   InstruTimer->SetPeriod( InstruTimer, 250);
00019B 862C42           884         MOV.B   ES,R1L
00019E 8C400A           885         MOV.W   R4,[R0+10]
0001A1 8C500C           886         MOV.W   R5,[R0+12]
0001A4 992800FA         887         MOV.W   R2,#0FAH
0001A8 C4rrrrrr         888         FCALL   __ICALL
                        889 ; instru.c  148 
                        890 ; instru.c  149   for(;;)
0001AC                  892 _9:
                        893 ; instru.c  150         {
                        894 ; instru.c  151                 InstruTimer->TimeOut->Wait( InstruTimer->TimeOut, 0);
0001AC 964842rr         896         MOV.B   ES,#SEG( _InstruTimer )
0001B0 9918rrrr         897         MOV.W   R1,#SOF( _InstruTimer )
0001B4 8B01             898         MOV.W   R0,[R1+]
0001B6 8A11             899         MOV.W   R1,[R1]
0001B8 862C42           900         MOV.B   ES,R1L
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   7

ADDR   CODE            LINE SOURCELINE
0001BB 8C4016           901         MOV.W   R4,[R0+22]
0001BE 8C5018           902         MOV.W   R5,[R0+24]
0001C1 86AC42           903         MOV.B   ES,R5L
0001C4 8C540C           904         MOV.W   R5,[R4+12]
0001C7 8C440A           905         MOV.W   R4,[R4+10]
0001CA 862C42           906         MOV.B   ES,R1L
0001CD 8C1018           907         MOV.W   R1,[R0+24]
0001D0 8C0016           908         MOV.W   R0,[R0+22]
0001D3 B930             909         MOV.W   R3,#00H
0001D5 B920             910         MOV.W   R2,#00H
0001D7 C4rrrrrr         911         FCALL   __ICALL
                        912 ; instru.c  152                 
                        913 ; instru.c  153                 if ( !GenlockSetup.System == Internal)
0001DB 964842rr         915         MOV.B   ES,#SEG( _GenlockSetup )
0001DF 9908rrrr         916         MOV.W   R0,#SOF( _GenlockSetup )
0001E3 8200             917         MOV.B   R0L,[R0]
0001E5 F345             918         BEQ     _12
                        919 ; instru.c  154                 {
                        920 ; instru.c  155                         sio0SndRequest( 12, SPG_V24_address, result, "GS?");
0001E7 9908000C         922         MOV.W   R0,#0CH
0001EB 99180015         923         MOV.W   R1,#015H
0001EF 91A8rr           924         MOV.B   R5L,#SEG( __lc_bs )
0001F2 71BB             925         XOR.B   R5H,R5H
0001F4 8947             926         MOV.W   R4,R7
0001F6 9938rrrr         927         MOV.W   R3,#SEG( _3 )
0001FA 9928rrrr         928         MOV.W   R2,#SOF( _3 )
0001FE 0F0C             929         PUSH.W  R2, R3
000200 8935             931         MOV.W   R3,R5
000202 8924             932         MOV.W   R2,R4
                        933         CALL    _sio0SndRequest
000204 C4rrrrrr        +933 ;       FCALL   _sio0SndRequest
000208 A974             934         ADDS.W  R7,#04H
                        936 ; instru.c  156 
                        937 ; instru.c  157                         GenlockStatus = (UC) atoi( result);
00020A 8915             939         MOV.W   R1,R5
00020C 8904             940         MOV.W   R0,R4
                        941         CALL    _atoi
00020E C4rrrrrr        +941 ;       FCALL   _atoi
000212 964842rr         942         MOV.B   ES,#SEG( _GenlockStatus )
000216 9918rrrr         943         MOV.W   R1,#SOF( _GenlockStatus )
00021A 8209             944         MOV.B   [R1],R0L
                        945 ; instru.c  158 
                        946 ; instru.c  159                         if ( GenlockSetup.System == MHzLock10)
00021C 964842rr         948         MOV.B   ES,#SEG( _GenlockSetup )
000220 9918rrrr         949         MOV.W   R1,#SOF( _GenlockSetup )
000224 8211             950         MOV.B   R0H,[R1]
000226 911403           951         CMP.B   R0H,#03H
000229 F208             952         BNE     _10
                        953 ; instru.c  160             GenlockStatus &= 0x02;
00022B 910502           955         AND.B   R0L,#02H
00022E 964842rr         956         MOV.B   ES,#SEG( _GenlockStatus )
000232 9918rrrr         957         MOV.W   R1,#SOF( _GenlockStatus )
000236 8209             958         MOV.B   [R1],R0L
000238 FE0C             959         BR      _11
000238 FE0C             959         BR      _11
00023A                  960 _10:
                        961 ; instru.c  161          else
                        962 ; instru.c  162             GenlockStatus &= 0x01;
00023A 964842rr         964         MOV.B   ES,#SEG( _GenlockStatus )
00023E 9908rrrr         965         MOV.W   R0,#SOF( _GenlockStatus )
000242 8200             966         MOV.B   R0L,[R0]
000244 910501           967         AND.B   R0L,#01H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   8

ADDR   CODE            LINE SOURCELINE
000247 964842rr         968         MOV.B   ES,#SEG( _GenlockStatus )
00024B 9918rrrr         969         MOV.W   R1,#SOF( _GenlockStatus )
00024F 8209             970         MOV.B   [R1],R0L
00024F 820900           970         MOV.B   [R1],R0L
000252                  971 _11:
                        972 ; instru.c  163 
                        973 ; instru.c  164                 LEDSet( GenlockLED, GenlockStatus > 0);
000252 99084000         975         MOV.W   R0,#04000H
000256 964842rr         976         MOV.B   ES,#SEG( _GenlockStatus )
00025A 9918rrrr         977         MOV.W   R1,#SOF( _GenlockStatus )
00025E 8221             978         MOV.B   R1L,[R1]
000260 912400           979         CMP.B   R1L,#00H
000263 F903             980         BL      _16
000265 B911             981         MOVS.W  R1,#01H
000267 FE02             982         BR      _18
000267 FE0200           982         BR      _18
00026A                  983 _16:
00026A B910             984         MOVS.W  R1,#00H
00026A B910             984         MOVS.W  R1,#00H
00026C                  985 _18:
                        986         CALL    _LEDSet
00026C C4rrrrrr        +986 ;       FCALL   _LEDSet
                        987 ; instru.c  165                 }
000270                  989 _12:
                        990 ; instru.c  166 
                        991 ; instru.c  167                 Test1LEDFlag ^= 1;
000270 99670001         993         XOR.W   R6,#01H
                        996 ; instru.c  168                 TestLEDSet( Test1LED, Test1LEDFlag);
000274 B901             998         MOV.W   R0,#01H
000276 8916             999         MOV.W   R1,R6
                       1002         CALL    _TestLEDSet
000278 C4rrrrrr       +1002 ;       FCALL   _TestLEDSet
00027C FE97            1006         BR      _9
                       1007 ; instru.c  169   }
                       1008 ; instru.c  170 }
00027E 9970000A        1010         ADD.W   R7,#0AH
000282 2F70            1012         POP.W   R4, R5, R6
000284 D680            1014         RET
                       1017 ; instru.c  171 
                       1018 ; instru.c  172 /**************************************************************************/
                       1019 ; instru.c  173 /* ResetInstrument                                                               
                                                                                                                             
                                               INSTRU.C     */
                       1020 ; instru.c  174 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1021 ; instru.c  175 /* Author:              Kim Engedahl, DEV, 000411                                
                                                                                                                             
                                            */
                       1022 ; instru.c  176 /* Revised:             000914, KEn, DEV                                         
                                                                                                                             
                                                    */
                       1023 ; instru.c  177 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1024 ; instru.c  178 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   9

ADDR   CODE            LINE SOURCELINE
                       1025 ; instru.c  179 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       1026 ; instru.c  180 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       1027 ; instru.c  181 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       1028 ; instru.c  182 /**************************************************************************/
                       1029 ; instru.c  183 int ResetInstrument( void)
                       1030 ; instru.c  184 {
                       1031         ALIGN   1
                       1033         PUBLIC  _ResetInstrument
000286                 1034 _ResetInstrument:
                       1038 ; instru.c  185         BBDefaults();                                                   // 
                       1040         CALL    _BBDefaults
000286 C4rrrrrr       +1040 ;       FCALL   _BBDefaults
                       1041 ; instru.c  186         CBDefaults();                                                   //
                       1043         CALL    _CBDefaults
00028A C4rrrrrr       +1043 ;       FCALL   _CBDefaults
                       1044 ; instru.c  187         AudioDefaults();                                        //
                       1046         CALL    _AudioDefaults
00028E C4rrrrrr       +1046 ;       FCALL   _AudioDefaults
                       1047 ; instru.c  188         GenlockDefaults();                              // 
                       1049         CALL    _GenlockDefaults
000292 C4rrrrrr       +1049 ;       FCALL   _GenlockDefaults
                       1050 ; instru.c  189 
                       1051 ; instru.c  190         BBInit();                                                                
                                    // init the black burst setups
                       1053         CALL    _BBInit
000296 C4rrrrrr       +1053 ;       FCALL   _BBInit
                       1054 ; instru.c  191         CBInit();                                                                
                                    // init the colorbar generator (PAL,EBU ColorBar)
                       1056         CALL    _CBInit
00029A C4rrrrrr       +1056 ;       FCALL   _CBInit
                       1057 ; instru.c  192         AudioInit();                                                    // init t
                            he audio setup, (this includes an AudioTimer)
                       1059         CALL    _AudioInit
00029E C4rrrrrr       +1059 ;       FCALL   _AudioInit
                       1060 ; instru.c  193         GenlockInit();                                          // init the genlo
                            ck setup.
                       1062         CALL    _GenlockInit
0002A2 C4rrrrrr       +1062 ;       FCALL   _GenlockInit
                       1063 ; instru.c  194 
                       1064 ; instru.c  195         GenlockUpdate();                                        // update the gen
                            lock setup.
                       1066         CALL    _GenlockUpdate
0002A6 C4rrrrrr       +1066 ;       FCALL   _GenlockUpdate
                       1067 ; instru.c  196         CBUpdate();                                                             /
                            / update the colorbar generator (PAL,EBU ColorBar)
                       1069         CALL    _CBUpdate
0002AA C4rrrrrr       +1069 ;       FCALL   _CBUpdate
                       1070 ; instru.c  197         BBUpdate();                                                             /
                            / update the black burst setups
                       1072         CALL    _BBUpdate
0002AE C4rrrrrr       +1072 ;       FCALL   _BBUpdate
                       1073 ; instru.c  198         AudioUpdate();                                          // update the aud
                            io setup
                       1075         CALL    _AudioUpdate
0002B2 C4rrrrrr       +1075 ;       FCALL   _AudioUpdate
                       1076 ; instru.c  199 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  10

ADDR   CODE            LINE SOURCELINE
                       1077 ; instru.c  200         Settings.ActivePreset = 0;
0002B6 964842rr        1079         MOV.B   ES,#SEG( _Settings )
0002BA 9908rrrr        1080         MOV.W   R0,#SOF( _Settings )
0002BE BA00            1081         MOV.W   [R0],#00H
                       1082 ; instru.c  201         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
0002C0 9918rrrr        1084         MOV.W   R1,#SEG( _Settings )
0002C4 9908rrrr        1085         MOV.W   R0,#SOF( _Settings )
0002C8 964842rr        1086         MOV.B   ES,#SEG( _SettingsPtr )
0002CC 9928rrrr        1087         MOV.W   R2,#SOF( _SettingsPtr )
0002D0 8A22            1088         MOV.W   R2,[R2]
0002D2 9938004A        1089         MOV.W   R3,#04AH
                       1090         CALL    _NV_Store
0002D6 C4rrrrrr       +1090 ;       FCALL   _NV_Store
                       1091 ; instru.c  202 
                       1092 ; instru.c  203         return( OK);
0002DA 9908FFFF        1094         MOV.W   R0,#0FFFFH
                       1095 ; instru.c  204 }
0002DE D680            1097         RET
                       1099 ; instru.c  205 
                       1100 ; instru.c  206 /**************************************************************************/
                       1101 ; instru.c  207 /* StorePreset                                                                   
                                                                                                                             
                                                       INSTRU.C     */
                       1102 ; instru.c  208 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1103 ; instru.c  209 /* Author:              Kim Engedahl, DEV, 000411                                
                                                                                                                             
                                            */
                       1104 ; instru.c  210 /* Revised:             000618, KEn, DEV                                         
                                                                                                                             
                                                    */
                       1105 ; instru.c  211 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1106 ; instru.c  212 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       1107 ; instru.c  213 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       1108 ; instru.c  214 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       1109 ; instru.c  215 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       1110 ; instru.c  216 /**************************************************************************/
                       1111 ; instru.c  217 int StorePreset( int no)
                       1112 ; instru.c  218 {
                       1113         ALIGN   1
                       1115         PUBLIC  _StorePreset
0002E0                 1116 _StorePreset:
0002E0 0F70            1120         PUSH.W  R4, R5, R6
0002E2 99720068        1122         SUB.W   R7,#068H
                       1129 ; instru.c  219         int i;
                       1130 ; instru.c  220         PresetObject Preset;
                       1131 ; instru.c  221 
                       1132 ; instru.c  222         if (( no == 0) || ( no > NoOfPresets))
0002E6 8950            1134         MOV.W   R5,R0
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  11

ADDR   CODE            LINE SOURCELINE
0002E8 F303            1137         BEQ     _19
0002EA 99540004        1138         CMP.W   R5,#04H
0002EE FD02            1139         BLE     _20
0002EE FD02            1139         BLE     _20
0002F0                 1140 _19:
                       1141 ; instru.c  223                 return( FAIL);
0002F0 B900            1143         MOV.W   R0,#00H
0002F2 FE7F            1144         BR      _23
0002F2 FE7F            1144         BR      _23
0002F4                 1145 _20:
                       1148 ; instru.c  224 
                       1149 ; instru.c  225         // Copy genlock setup to preset
                       1150 ; instru.c  226         memcpy( &Preset.GenlockSetup, &GenlockSetup, sizeof( GenlockSetup));
0002F4 9128rr          1152         MOV.B   R1L,#SEG( __lc_bs )
0002F7 7133            1153         XOR.B   R1H,R1H
0002F9 400720          1154         LEA     R0,R7+32
0002FC 9938rrrr        1155         MOV.W   R3,#SEG( _GenlockSetup )
000300 9928rrrr        1156         MOV.W   R2,#SOF( _GenlockSetup )
000304 B966            1157         MOV.W   R6,#06H
                       1158         CALL    _memcpy
000306 C4rrrrrr       +1158 ;       FCALL   _memcpy
                       1159 ; instru.c  227 
                       1160 ; instru.c  228         // Copy black burst setup to preset
                       1161 ; instru.c  229         for ( i = 0; i < NoOfBBOutputs; i++)
00030A B940            1163         MOV.W   R4,#00H
00030C                 1165 _21:
                       1166 ; instru.c  230                 memcpy( &Preset.BBSetup[i], &BBSetup[i], sizeof( BBSetup[0]));
00030C 8904            1168         MOV.W   R0,R4
00030E D903            1169         ASL.W   R0,#03H
000310 8920            1170         MOV.W   R2,R0
000312 B930            1171         MOVS.W  R3,#00H
000314 9128rr          1172         MOV.B   R1L,#SEG( __lc_bs )
000317 7133            1173         XOR.B   R1H,R1H
000319 400726          1174         LEA     R0,R7+38
00031C 0902            1175         ADD.W   R0,R2
00031E 8C1F02          1176         MOV.W   [R7+2],R1
000321 8A0F            1177         MOV.W   [R7],R0
000323 9918rrrr        1178         MOV.W   R1,#SEG( _BBSetup )
000327 9908rrrr        1179         MOV.W   R0,#SOF( _BBSetup )
00032B 0902            1180         ADD.W   R0,R2
00032D 99680008        1181         MOV.W   R6,#08H
000331 8931            1182         MOV.W   R3,R1
000333 8920            1183         MOV.W   R2,R0
000335 8C1702          1184         MOV.W   R1,[R7+2]
000338 8A07            1185         MOV.W   R0,[R7]
                       1186         CALL    _memcpy
00033A C4rrrrrr       +1186 ;       FCALL   _memcpy
00033E A941            1188         ADDS.W  R4,#01H
000340 99440003        1191         CMP.W   R4,#03H
000344 FBE3            1192         BLT     _21
                       1193 ; instru.c  231 
                       1194 ; instru.c  232         // Copy Colorbar setup to preset
                       1195 ; instru.c  233         memcpy( &Preset.CBSetup, &CBSetup, sizeof( CBSetup));
000346 9128rr          1197         MOV.B   R1L,#SEG( __lc_bs )
000349 7133            1198         XOR.B   R1H,R1H
00034B 40073E          1199         LEA     R0,R7+62
00034E 9938rrrr        1200         MOV.W   R3,#SEG( _CBSetup )
000352 9928rrrr        1201         MOV.W   R2,#SOF( _CBSetup )
000356 9968000C        1202         MOV.W   R6,#0CH
                       1203         CALL    _memcpy
00035A C4rrrrrr       +1203 ;       FCALL   _memcpy
                       1204 ; instru.c  234 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  12

ADDR   CODE            LINE SOURCELINE
                       1205 ; instru.c  235         // Copy currently selected audio output to preset
                       1206 ; instru.c  236         Preset.AudioOutput = AudioOutput;
00035E 964842rr        1208         MOV.B   ES,#SEG( _AudioOutput )
000362 9908rrrr        1209         MOV.W   R0,#SOF( _AudioOutput )
000366 8A00            1210         MOV.W   R0,[R0]
000368 8C0F4A          1211         MOV.W   [R7+74],R0
                       1212 ; instru.c  237 
                       1213 ; instru.c  238         // Copy audio setup to preset
                       1214 ; instru.c  239         for ( i = 0; i < NoOfAudioOutputs; i++)
00036B B940            1216         MOV.W   R4,#00H
00036E                 1219 _22:
                       1220 ; instru.c  240                 memcpy( &Preset.AudioSetup[i], &AudioSetup[i], sizeof( AudioSetup
                            [0]));
00036E 9928000E        1222         MOV.W   R2,#0EH
000372 E424            1223         MULU.W  R2,R4
000374 B930            1224         MOVS.W  R3,#00H
000376 9128rr          1225         MOV.B   R1L,#SEG( __lc_bs )
000379 7133            1226         XOR.B   R1H,R1H
00037B 40074C          1227         LEA     R0,R7+76
00037E 0902            1228         ADD.W   R0,R2
000380 8C1F02          1229         MOV.W   [R7+2],R1
000383 8A0F            1230         MOV.W   [R7],R0
000385 9918rrrr        1231         MOV.W   R1,#SEG( _AudioSetup )
000389 9908rrrr        1232         MOV.W   R0,#SOF( _AudioSetup )
00038D 0902            1233         ADD.W   R0,R2
00038F 9968000E        1234         MOV.W   R6,#0EH
000393 8931            1235         MOV.W   R3,R1
000395 8920            1236         MOV.W   R2,R0
000397 8C1702          1237         MOV.W   R1,[R7+2]
00039A 8A07            1238         MOV.W   R0,[R7]
                       1239         CALL    _memcpy
00039C C4rrrrrr       +1239 ;       FCALL   _memcpy
0003A0 A941            1241         ADDS.W  R4,#01H
0003A2 99440002        1244         CMP.W   R4,#02H
0003A6 FBE3            1245         BLT     _22
                       1246 ; instru.c  241 
                       1247 ; instru.c  242         // Store preset in setected preset number
                       1248 ; instru.c  243         NV_Store( &Preset, PresetPtr[no-1], sizeof( Preset));
0003A8 9128rr          1250         MOV.B   R1L,#SEG( __lc_bs )
0003AB 7133            1251         XOR.B   R1H,R1H
0003AD 400704          1252         LEA     R0,R7+4
0003B0 8945            1253         MOV.W   R4,R5
0003B2 D951            1254         ASL.W   R5,#01H
0003B4 8925            1258         MOV.W   R2,R5
0003B6 B930            1259         MOVS.W  R3,#00H
0003B8 964842rr        1260         MOV.B   ES,#SEG( _PresetPtr+-2 )
0003BC 8D22rrrr        1261         MOV.W   R2,[R2+SOF( _PresetPtr+-2 )]
0003C0 99380064        1262         MOV.W   R3,#064H
                       1263         CALL    _NV_Store
0003C4 C4rrrrrr       +1263 ;       FCALL   _NV_Store
                       1264 ; instru.c  244 
                       1265 ; instru.c  245         Settings.ActivePreset = no;
0003C8 8904            1267         MOV.W   R0,R4
0003CA 964842rr        1268         MOV.B   ES,#SEG( _Settings )
0003CE 9918rrrr        1269         MOV.W   R1,#SOF( _Settings )
0003D2 8A09            1270         MOV.W   [R1],R0
                       1273 ; instru.c  246         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
0003D4 9918rrrr        1275         MOV.W   R1,#SEG( _Settings )
0003D8 9908rrrr        1276         MOV.W   R0,#SOF( _Settings )
0003DC 964842rr        1278         MOV.B   ES,#SEG( _SettingsPtr )
0003E0 9928rrrr        1279         MOV.W   R2,#SOF( _SettingsPtr )
0003E4 8A22            1280         MOV.W   R2,[R2]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  13

ADDR   CODE            LINE SOURCELINE
0003E6 9938004A        1281         MOV.W   R3,#04AH
                       1282         CALL    _NV_Store
0003EA C4rrrrrr       +1282 ;       FCALL   _NV_Store
                       1283 ; instru.c  247 
                       1284 ; instru.c  248         return( OK);
0003EE 9908FFFF        1286         MOV.W   R0,#0FFFFH
                       1287 ; instru.c  249 }
0003F2                 1289 _23:
0003F2 99700068        1290         ADD.W   R7,#068H
0003F6 2F70            1292         POP.W   R4, R5, R6
0003F8 D680            1294         RET
                       1296 ; instru.c  250 
                       1297 ; instru.c  251 /**************************************************************************/
                       1298 ; instru.c  252 /* RecallPreset                                                                  
                                                                                                                             
                                                       INSTRU.C     */
                       1299 ; instru.c  253 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1300 ; instru.c  254 /* Author:              Kim Engedahl, DEV, 000411                                
                                                                                                                             
                                            */
                       1301 ; instru.c  255 /* Revised:             000618, KEn, DEV                                         
                                                                                                                             
                                                    */
                       1302 ; instru.c  256 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1303 ; instru.c  257 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       1304 ; instru.c  258 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       1305 ; instru.c  259 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       1306 ; instru.c  260 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       1307 ; instru.c  261 /**************************************************************************/
                       1308 ; instru.c  262 int RecallPreset( int no)
                       1309 ; instru.c  263 {
                       1310         ALIGN   1
                       1312         PUBLIC  _RecallPreset
0003FA                 1313 _RecallPreset:
0003FA 0F70            1317         PUSH.W  R4, R5, R6
0003FC 99720068        1319         SUB.W   R7,#068H
                       1326 ; instru.c  264         int i;
                       1327 ; instru.c  265         PresetObject Preset;
                       1328 ; instru.c  266 
                       1329 ; instru.c  267         if (( no == 0) || ( no > NoOfPresets))
000400 8950            1331         MOV.W   R5,R0
000402 6900            1332         OR.W    R0,R0
000404 F303            1335         BEQ     _27
000406 99540004        1336         CMP.W   R5,#04H
00040A FD03            1337         BLE     _28
00040A FD03            1337         BLE     _28
00040C                 1338 _27:
                       1339 ; instru.c  268                 return( FAIL);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  14

ADDR   CODE            LINE SOURCELINE
00040C B900            1341         MOV.W   R0,#00H
                       1342         BR      _33
00040E D5008F         +1342         JMP.L   _33
00040E D5008F00       +1342         JMP.L   _33
000412                 1343 _28:
                       1346 ; instru.c  269 
                       1347 ; instru.c  270         if ( NV_Recall( &Preset, PresetPtr[no-1], sizeof( Preset)))
000412 9128rr          1349         MOV.B   R1L,#SEG( __lc_bs )
000415 7133            1350         XOR.B   R1H,R1H
000417 400704          1351         LEA     R0,R7+4
00041A 8925            1352         MOV.W   R2,R5
00041C D921            1353         ASL.W   R2,#01H
00041E B930            1354         MOVS.W  R3,#00H
000420 964842rr        1355         MOV.B   ES,#SEG( _PresetPtr+-2 )
000424 8D22rrrr        1356         MOV.W   R2,[R2+SOF( _PresetPtr+-2 )]
000428 99380064        1357         MOV.W   R3,#064H
                       1358         CALL    _NV_Recall
00042C C4rrrrrr       +1358 ;       FCALL   _NV_Recall
000430 6900            1359         OR.W    R0,R0
000432 F37C            1360         BEQ     _31
                       1361 ; instru.c  271         {
                       1362 ; instru.c  272                 // Recall genlock setup from preset
                       1363 ; instru.c  273                 memcpy( &GenlockSetup, &Preset.GenlockSetup, sizeof( GenlockSetup
                            ));
000434 9918rrrr        1365         MOV.W   R1,#SEG( _GenlockSetup )
000438 9908rrrr        1366         MOV.W   R0,#SOF( _GenlockSetup )
00043C 9168rr          1367         MOV.B   R3L,#SEG( __lc_bs )
00043F 7177            1368         XOR.B   R3H,R3H
000441 402720          1369         LEA     R2,R7+32
000444 B966            1370         MOV.W   R6,#06H
                       1371         CALL    _memcpy
000446 C4rrrrrr       +1371 ;       FCALL   _memcpy
                       1372 ; instru.c  274 
                       1373 ; instru.c  275                 GenlockUpdate();                // update the genlock setup
                       1375         CALL    _GenlockUpdate
00044A C4rrrrrr       +1375 ;       FCALL   _GenlockUpdate
                       1376 ; instru.c  276 
                       1377 ; instru.c  277 
                       1378 ; instru.c  278                 // Recall black burst setup from preset
                       1379 ; instru.c  279                 for ( i = 0; i < NoOfBBOutputs; i++)
00044E B940            1381         MOV.W   R4,#00H
000450                 1383 _29:
                       1384 ; instru.c  280                         memcpy( &BBSetup[i], &Preset.BBSetup[i], sizeof( BBSetup[
                            0]));
000450 8904            1386         MOV.W   R0,R4
000452 D903            1387         ASL.W   R0,#03H
000454 8920            1388         MOV.W   R2,R0
000456 B930            1389         MOVS.W  R3,#00H
000458 9918rrrr        1390         MOV.W   R1,#SEG( _BBSetup )
00045C 9908rrrr        1391         MOV.W   R0,#SOF( _BBSetup )
000460 0902            1392         ADD.W   R0,R2
000462 8C1F02          1393         MOV.W   [R7+2],R1
000465 8A0F            1394         MOV.W   [R7],R0
000467 9128rr          1395         MOV.B   R1L,#SEG( __lc_bs )
00046A 7133            1396         XOR.B   R1H,R1H
00046C 400726          1397         LEA     R0,R7+38
00046F 0902            1398         ADD.W   R0,R2
000471 99680008        1399         MOV.W   R6,#08H
000475 8931            1400         MOV.W   R3,R1
000477 8920            1401         MOV.W   R2,R0
000479 8C1702          1402         MOV.W   R1,[R7+2]
00047C 8A07            1403         MOV.W   R0,[R7]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  15

ADDR   CODE            LINE SOURCELINE
                       1404         CALL    _memcpy
00047E C4rrrrrr       +1404 ;       FCALL   _memcpy
000482 A941            1406         ADDS.W  R4,#01H
000484 99440003        1409         CMP.W   R4,#03H
000488 FBE3            1410         BLT     _29
                       1411 ; instru.c  281 
                       1412 ; instru.c  282                 BBUpdate();                                     // update the bla
                            ck burst setups
                       1414         CALL    _BBUpdate
00048A C4rrrrrr       +1414 ;       FCALL   _BBUpdate
                       1415 ; instru.c  283 
                       1416 ; instru.c  284 
                       1417 ; instru.c  285                 // Recall Colorbar setup from preset
                       1418 ; instru.c  286                 memcpy( &CBSetup, &Preset.CBSetup, sizeof( CBSetup));
00048E 9918rrrr        1420         MOV.W   R1,#SEG( _CBSetup )
000492 9908rrrr        1421         MOV.W   R0,#SOF( _CBSetup )
000496 9168rr          1422         MOV.B   R3L,#SEG( __lc_bs )
000499 7177            1423         XOR.B   R3H,R3H
00049B 40273E          1424         LEA     R2,R7+62
00049E 9968000C        1425         MOV.W   R6,#0CH
                       1426         CALL    _memcpy
0004A2 C4rrrrrr       +1426 ;       FCALL   _memcpy
                       1427 ; instru.c  287 
                       1428 ; instru.c  288                 CBUpdate();                                     // update the col
                            orbar generator (PAL,EBU ColorBar)
                       1430         CALL    _CBUpdate
0004A6 C4rrrrrr       +1430 ;       FCALL   _CBUpdate
                       1431 ; instru.c  289 
                       1432 ; instru.c  290 
                       1433 ; instru.c  291                 // Recall currently selected audio output from preset
                       1434 ; instru.c  292                 AudioOutput = Preset.AudioOutput;
0004AA 8C074A          1436         MOV.W   R0,[R7+74]
0004AD 964842rr        1437         MOV.B   ES,#SEG( _AudioOutput )
0004B1 9918rrrr        1438         MOV.W   R1,#SOF( _AudioOutput )
0004B5 8A09            1439         MOV.W   [R1],R0
                       1440 ; instru.c  293 
                       1441 ; instru.c  294                 // Recall audio setup from preset
                       1442 ; instru.c  295                 for ( i = 0; i < NoOfAudioOutputs; i++)
0004B7 B940            1444         MOV.W   R4,#00H
0004BA                 1447 _30:
                       1448 ; instru.c  296                         memcpy( &AudioSetup[i], &Preset.AudioSetup[i], sizeof( Au
                            dioSetup[0]));
0004BA 9928000E        1450         MOV.W   R2,#0EH
0004BE E424            1451         MULU.W  R2,R4
0004C0 B930            1452         MOVS.W  R3,#00H
0004C2 9918rrrr        1453         MOV.W   R1,#SEG( _AudioSetup )
0004C6 9908rrrr        1454         MOV.W   R0,#SOF( _AudioSetup )
0004CA 0902            1455         ADD.W   R0,R2
0004CC 8C1F02          1456         MOV.W   [R7+2],R1
0004CF 8A0F            1457         MOV.W   [R7],R0
0004D1 9128rr          1458         MOV.B   R1L,#SEG( __lc_bs )
0004D4 7133            1459         XOR.B   R1H,R1H
0004D6 40074C          1460         LEA     R0,R7+76
0004D9 0902            1461         ADD.W   R0,R2
0004DB 9968000E        1462         MOV.W   R6,#0EH
0004DF 8931            1463         MOV.W   R3,R1
0004E1 8920            1464         MOV.W   R2,R0
0004E3 8C1702          1465         MOV.W   R1,[R7+2]
0004E6 8A07            1466         MOV.W   R0,[R7]
                       1467         CALL    _memcpy
0004E8 C4rrrrrr       +1467 ;       FCALL   _memcpy
0004EC A941            1469         ADDS.W  R4,#01H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  16

ADDR   CODE            LINE SOURCELINE
0004EE 99440002        1472         CMP.W   R4,#02H
0004F2 FBE3            1473         BLT     _30
                       1474 ; instru.c  297         
                       1475 ; instru.c  298                 SetAudioOutput( AudioOutput);           // update the audio setup
                            
0004F4 964842rr        1477         MOV.B   ES,#SEG( _AudioOutput )
0004F8 9908rrrr        1478         MOV.W   R0,#SOF( _AudioOutput )
0004FC 8A00            1479         MOV.W   R0,[R0]
                       1480         CALL    _SetAudioOutput
0004FE C4rrrrrr       +1480 ;       FCALL   _SetAudioOutput
                       1481 ; instru.c  299 
                       1482 ; instru.c  300                 Settings.ActivePreset = no;
000502 964842rr        1484         MOV.B   ES,#SEG( _Settings )
000506 9908rrrr        1485         MOV.W   R0,#SOF( _Settings )
00050A 8A58            1486         MOV.W   [R0],R5
                       1487 ; instru.c  301                 NV_Store( &Settings, SettingsPtr, sizeof( Settings));
00050C 9918rrrr        1489         MOV.W   R1,#SEG( _Settings )
000510 9908rrrr        1490         MOV.W   R0,#SOF( _Settings )
000514 964842rr        1491         MOV.B   ES,#SEG( _SettingsPtr )
000518 9928rrrr        1492         MOV.W   R2,#SOF( _SettingsPtr )
00051C 8A22            1493         MOV.W   R2,[R2]
00051E 9938004A        1494         MOV.W   R3,#04AH
                       1495         CALL    _NV_Store
000522 C4rrrrrr       +1495 ;       FCALL   _NV_Store
                       1496 ; instru.c  302 
                       1497 ; instru.c  303                 return( OK);
000526 9908FFFF        1499         MOV.W   R0,#0FFFFH
00052A FE01            1500         BR      _33
                       1501 ; instru.c  304         }
00052C                 1503 _31:
                       1504 ; instru.c  305 
                       1505 ; instru.c  306         return( FAIL);
00052C B900            1507         MOV.W   R0,#00H
                       1508 ; instru.c  307 }
00052E                 1510 _33:
00052E 99700068        1511         ADD.W   R7,#068H
000532 2F70            1513         POP.W   R4, R5, R6
000534 D680            1515         RET
                       1519 ; instru.c  308 
                       1520 ; instru.c  309 
                       1521 ; instru.c  310 
                       1522 ; instru.c  311 
                       1523 ; instru.c  312 
                       1524 ; instru.c  313 
                       1525 ; instru.c  314 
                       1526 ; instru.c  315 
                       1527 ; instru.c  316 
                       1528 ; instru.c  317 
                       1529 ; instru.c  318 
                       1530 ; instru.c  319 
                       1531 ; instru.c  320 
                       1532 ; instru.c  321 
                       1533 ; instru.c  322 
                       1534 ; instru.c  323 
                       1535 ; instru.c  324 
                       1536 ; instru.c  325 
                       1541         EXTRN   HCODE(_sio0_init)
000000                 1545 INSTRU_CLR_FA   SEGMENT HDATA INSEGMENT CLEAR
000000                 1546         RSEG    INSTRU_CLR_FA
                       1547         PUBLIC  _PresetPtr
                       1548         ALIGN   1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  17

ADDR   CODE            LINE SOURCELINE
000000                 1549 _PresetPtr:     DS      8
   |  RESERVED             
000007
                       1552         EXTRN   HCODE(_front)
                       1555         EXTRN   HCODE(_InitBus)
                       1558         EXTRN   HCODE(_tvp6k_init)
000000                 1559 INSTRU_INI_FA   SEGMENT HDATA INSEGMENT INIT
000000                 1560         RSEG    INSTRU_INI_FA
000000 47533F00        1561 _3:     DB      047H,053H,03FH,000H
                       1564         EXTRN   HCODE(_TestLEDSet)
                       1567         EXTRN   HCODE(_BBUpdate)
000008                 1572         RSEG    INSTRU_CLR_FA
                       1573         PUBLIC  _FrontThread
                       1574         ALIGN   1
000008                 1575 _FrontThread:   DS      4
   |  RESERVED             
00000B
                       1577         EXTRN   HDATA(_AudioOutput)
                       1580         EXTRN   HCODE(_CBUpdate)
                       1583         PUBLIC  _InstrumentControl
                       1584         ALIGN   1
00000C                 1585 _InstrumentControl:     DS      4
   |  RESERVED             
00000F
                       1588         EXTRN   HCODE(_tim0_init)
                       1591         EXTRN   HCODE(_NV_AllocP)
                       1594         PUBLIC  _InterpreterThread
                       1595         ALIGN   1
000010                 1596 _InterpreterThread:     DS      4
   |  RESERVED             
000013
                       1599         EXTRN   HCODE(_atoi)
                       1604         EXTRN   HCODE(_newTTimer)
                       1606         EXTRN   HDATA(_CBSetup)
                       1608         EXTRN   HDATA(_BBSetup)
                       1611         EXTRN   HCODE(_NV_Init)
                       1614         EXTRN   HCODE(_GenlockInit)
                       1617         EXTRN   HCODE(_GenlockUpdate)
                       1620         EXTRN   HCODE(_LEDSet)
                       1623         EXTRN   HCODE(_CBInit)
                       1626         EXTRN   HCODE(_NV_Recall)
                       1629         PUBLIC  _GenlockStatus
000014 RESERVED        1630 _GenlockStatus: DS      1
000014
                       1633         EXTRN   HCODE(_SetAudioOutput)
                       1636         PUBLIC  _CalibrationPtr
000015 RESERVED        1637         ALIGN   1
000015
000016                 1638 _CalibrationPtr:        DS      2
   |  RESERVED             
000017
                       1640         EXTRN   HDATA(_AudioSetup)
                       1643         PUBLIC  _InstruTimer
                       1644         ALIGN   1
000018                 1645 _InstruTimer:   DS      4
   |  RESERVED             
00001B
                       1648         EXTRN   HCODE(_BBDefaults)
                       1651         PUBLIC  _SettingsPtr
                       1652         ALIGN   1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  18

ADDR   CODE            LINE SOURCELINE
00001C                 1653 _SettingsPtr:   DS      2
   |  RESERVED             
00001D
                       1656         EXTRN   HCODE(_BBInit)
                       1659         EXTRN   HCODE(_CBDefaults)
                       1661         EXTRN   HDATA(_GenlockSetup)
                       1664         EXTRN   HCODE(_AudioUpdate)
                       1667         EXTRN   HCODE(_keyscan)
                       1670         PUBLIC  _Settings
                       1671         ALIGN   1
00001E                 1672 _Settings:      DS      74
   |  RESERVED             
000067
                       1675         EXTRN   HCODE(_rs232_init)
                       1678         EXTRN   HCODE(_SystemsLEDSet)
                       1679         EXTRN   HCODE(__ICALL)
                       1682         PUBLIC  _KeyScanThread
                       1683         ALIGN   1
000068                 1684 _KeyScanThread: DS      4
   |  RESERVED             
00006B
                       1687         EXTRN   HCODE(_NV_Store)
                       1690         EXTRN   HCODE(_AudioInit)
                       1693         PUBLIC  _Calibration
                       1694         ALIGN   1
00006C                 1695 _Calibration:   DS      224
   |  RESERVED             
00014B
                       1698         EXTRN   HCODE(_Interpreter)
                       1699         EXTRN   IDATA(__lc_bs)
                       1701         EXTRN   BIT(_UnitPgmMode)
                       1704         EXTRN   HCODE(_GenlockDefaults)
                       1710         EXTRN   HCODE(_newTThread)
                       1713         EXTRN   HCODE(_AudioDefaults)
                       1716         EXTRN   HCODE(_Sleep)
                       1719         EXTRN   HCODE(_memcpy)
                       1722         EXTRN   HCODE(_sio0SndRequest)
                       1723         EXTRN   DATA(__lc_ub_xvwbuffer)
                       1724         EXTRN   DATA(__lc_ue_xvwbuffer)
                       1725         CALLS   'Instrument_Control_Task', 'rs232_init'
                       1726         CALLS   'Instrument_Control_Task', 'sio0_init'
                       1727         CALLS   'Instrument_Control_Task', 'tim0_init'
                       1728         CALLS   'Instrument_Control_Task', 'InitBus'
                       1729         CALLS   'Instrument_Control_Task', 'tvp6k_init'
                       1730         CALLS   'Instrument_Control_Task', 'NV_Init'
                       1731         CALLS   'Instrument_Control_Task', 'NV_AllocP'
                       1732         CALLS   'Instrument_Control_Task', 'NV_Recall'
                       1733         CALLS   'Instrument_Control_Task', 'SystemsLEDSet'
                       1734         CALLS   'Instrument_Control_Task', 'Sleep'
                       1735         CALLS   'Instrument_Control_Task', 'NV_AllocP'
                       1736         CALLS   'Instrument_Control_Task', 'NV_Recall'
                       1737         CALLS   'Instrument_Control_Task', 'ResetInstrument'
                       1738         CALLS   'Instrument_Control_Task', 'GenlockInit'
                       1739         CALLS   'Instrument_Control_Task', 'CBInit'
                       1740         CALLS   'Instrument_Control_Task', 'BBInit'
                       1741         CALLS   'Instrument_Control_Task', 'AudioInit'
                       1742         CALLS   'Instrument_Control_Task', 'GenlockUpdate'
                       1743         CALLS   'Instrument_Control_Task', 'CBUpdate'
                       1744         CALLS   'Instrument_Control_Task', 'BBUpdate'
                       1745         CALLS   'Instrument_Control_Task', 'AudioUpdate'
                       1746         CALLS   'Instrument_Control_Task', 'RecallPreset'
                       1747         CALLS   'Instrument_Control_Task', 'newTThread'
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  19

ADDR   CODE            LINE SOURCELINE
                       1748         CALLS   'Instrument_Control_Task', 'newTTimer'
                       1749         CALLS   'Instrument_Control_Task', 'sio0SndRequest'
                       1750         CALLS   'Instrument_Control_Task', 'atoi'
                       1751         CALLS   'Instrument_Control_Task', 'LEDSet'
                       1752         CALLS   'Instrument_Control_Task', 'TestLEDSet'
                       1753         CALLS   'ResetInstrument', 'BBDefaults'
                       1754         CALLS   'ResetInstrument', 'CBDefaults'
                       1755         CALLS   'ResetInstrument', 'AudioDefaults'
                       1756         CALLS   'ResetInstrument', 'GenlockDefaults'
                       1757         CALLS   'ResetInstrument', 'BBInit'
                       1758         CALLS   'ResetInstrument', 'CBInit'
                       1759         CALLS   'ResetInstrument', 'AudioInit'
                       1760         CALLS   'ResetInstrument', 'GenlockInit'
                       1761         CALLS   'ResetInstrument', 'GenlockUpdate'
                       1762         CALLS   'ResetInstrument', 'CBUpdate'
                       1763         CALLS   'ResetInstrument', 'BBUpdate'
                       1764         CALLS   'ResetInstrument', 'AudioUpdate'
                       1765         CALLS   'ResetInstrument', 'NV_Store'
                       1766         CALLS   'StorePreset', 'memcpy'
                       1767         CALLS   'StorePreset', 'NV_Store'
                       1768         CALLS   'RecallPreset', 'NV_Recall'
                       1769         CALLS   'RecallPreset', 'memcpy'
                       1770         CALLS   'RecallPreset', 'GenlockUpdate'
                       1771         CALLS   'RecallPreset', 'memcpy'
                       1772         CALLS   'RecallPreset', 'BBUpdate'
                       1773         CALLS   'RecallPreset', 'memcpy'
                       1774         CALLS   'RecallPreset', 'CBUpdate'
                       1775         CALLS   'RecallPreset', 'memcpy'
                       1776         CALLS   'RecallPreset', 'SetAudioOutput'
                       1777         CALLS   'RecallPreset', 'NV_Store'
