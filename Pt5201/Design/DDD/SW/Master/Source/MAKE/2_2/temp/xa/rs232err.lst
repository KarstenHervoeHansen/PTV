XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   1
U:\Pt5201\Design\DDD\SW\Master\Source\MAKE\work\temp\xa\rs232err.src
ADDR   CODE            LINE SOURCELINE
                          1 ; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
                          2 ; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -I..\..\rtxcdef\xa
                          3 ;          -I..\..\rtxc\xa\include -I..\..\code\include\1_0 -I..\..\app_spec\xa
                          4 ;          -Ml -O2 -s
                          6 $NOZPAGE
                          7         NAME    RS232ERR
                         11 ; rs232err.c    1       /************************************************************************
                            ***/
                         12 ; rs232err.c    2       /*      Copyright ProTeleVision Technologies A/S, BRONDBY 1998           
                                                            */
                         13 ; rs232err.c    3       /*      Project:                PT5230 Digital Video Generator           
                                                                                            */
                         14 ; rs232err.c    4       /*      Module:         RS232ERR.C                                       
                                                                                                                            *
                            /
                         15 ; rs232err.c    5       /*      Author:         Kim Engedahl, DEV                                
                                                                                                                    */
                         16 ; rs232err.c    6       /*      Org. date:      960713                                           
                                                                                                                            *
                            /
                         17 ; rs232err.c    7       /*      Rev. date:      980616, KEn, DEV                                 
                                                                                                                    */
                         18 ; rs232err.c    8       /*      Status:         Version 1.0                                      
                                                                                                                            *
                            /
                         19 ; rs232err.c    9       /*                                                                       
                                                                                                                             
                                                            */
                         20 ; rs232err.c   10       /*      This module contains the following functions:                    
                                                                            */
                         21 ; rs232err.c   11       /*                                                                       
                                                                                                                             
                                                            */
                         22 ; rs232err.c   12       /*              void ResetErrorEventQueue();                             
                                                                                                            */
                         23 ; rs232err.c   13       /*              bit UpdateQUESTRegister();                               
                                                                                                                    */
                         24 ; rs232err.c   14       /*              bit UpdateOPERRegister();                                
                                                                                                                    */
                         25 ; rs232err.c   15       /*              UC UpdateESRRegister();                                  
                                                                                                                    */
                         26 ; rs232err.c   16       /*              void UpdateSTBRegister();                                
                                                                                                                    */
                         27 ; rs232err.c   17       /*              int ReadErrorEventQueue();                               
                                                                                                                    */
                         28 ; rs232err.c   18       /*              void SaveErrorEventQueue( int ErrorType);                
                                                                                            */
                         29 ; rs232err.c   19       /*                                                                       
                                                                                                                             
                                                            */
                         30 ; rs232err.c   20       /*      Changes:                                                         
                                                                                                                             
                                                    */
                         31 ; rs232err.c   21       /* 980616: Released as 4008 002 06812                                    
                                                                                            */
                         32 ; rs232err.c   22       /* 980514: Released as 4008 002 06811                                    
                                                                                            */
                         33 ; rs232err.c   23       /************************************************************************
                            ***/
                         34 ; rs232err.c   24       
                         35 ; rs232err.c   25       /************************************************************************
                            ***/
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   2

ADDR   CODE            LINE SOURCELINE
                         36 ; rs232err.c   26       // Include files:
                         37 ; rs232err.c   27       
                         38 ; rs232err.c   28       //#include <xa.h>
                         39 ; rs232err.c   29       #include <string.h>
                         43 ; rs232err.c   30       #include <stdio.h>
                         63 ; rs232err.c   31       #include <stdlib.h>
                         77 ; rs232err.c   32       
                         78 ; rs232err.c   33       //#include "mas.h"
                         79 ; rs232err.c   34       
                         80 ; rs232err.c   35       #include "define.h"
                         83 ; rs232err.c   36       #include "rs232err.h"
                         86 ; rs232err.c   37       
                         87 ; rs232err.c   38       char code NoErrTxt[]                                                    =
                             "No error";
000000                   88 RS232ERR_RO     SEGMENT HCODE ROMDATA
000000                   89         RSEG    RS232ERR_RO
                         93         PUBLIC  _NoErrTxt
000000                   94 _NoErrTxt:
                         95 ; rs232err.c   39       char code CmdErrTxt[]                                           = "Comman
                            d error";
000000 4E6F206572726F    96         DB      04EH,06FH,020H,065H,072H,072H,06FH,072H,000H
       7200                 
                         99         PUBLIC  _CmdErrTxt
000009                  100 _CmdErrTxt:
000009 436F6D6D616E64   101         DB      043H,06FH,06DH,06DH,061H,06EH,064H,020H,065H,072H,072H,06FH
       206572726F           
                        102 ; rs232err.c   40       char code InvalidCharTxt[]                                      = "Invali
                            d character";
000015 7200             103         DB      072H,000H
                        106         PUBLIC  _InvalidCharTxt
000017                  107 _InvalidCharTxt:
000017 496E76616C6964   108         DB      049H,06EH,076H,061H,06CH,069H,064H,020H,063H,068H,061H,072H
       2063686172           
                        109 ; rs232err.c   41       char code SyntaxErrTxt[]                                        = "Syntax
                             error";
000023 616374657200     110         DB      061H,063H,074H,065H,072H,000H
                        113         PUBLIC  _SyntaxErrTxt
000029                  114 _SyntaxErrTxt:
000029 53796E74617820   115         DB      053H,079H,06EH,074H,061H,078H,020H,065H,072H,072H,06FH,072H
       6572726F72           
                        116 ; rs232err.c   42       char code InvalidSeparatorTxt[]                 = "Invalid separator";
000035 00               117         DB      000H
                        120         PUBLIC  _InvalidSeparatorTxt
000036                  121 _InvalidSeparatorTxt:
000036 496E76616C6964   122         DB      049H,06EH,076H,061H,06CH,069H,064H,020H,073H,065H,070H,061H
       2073657061           
                        123 ; rs232err.c   43       char code DataTypeErrTxt[]                                      = "Data t
                            ype error";
000042 7261746F7200     124         DB      072H,061H,074H,06FH,072H,000H
                        127         PUBLIC  _DataTypeErrTxt
000048                  128 _DataTypeErrTxt:
000048 44617461207479   129         DB      044H,061H,074H,061H,020H,074H,079H,070H,065H,020H,065H,072H
       7065206572           
                        130 ; rs232err.c   44       char code ParNotAllowedTxt[]                            = "Parameter not 
                            allowed";
000054 726F7200         131         DB      072H,06FH,072H,000H
                        134         PUBLIC  _ParNotAllowedTxt
000058                  135 _ParNotAllowedTxt:
000058 506172616D6574   136         DB      050H,061H,072H,061H,06DH,065H,074H,065H,072H,020H,06EH,06FH
       6572206E6F           
                        137 ; rs232err.c   45       char code MissingParTxt[]                                       = "Missin
                            g parameter";
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   3

ADDR   CODE            LINE SOURCELINE
000064 7420616C6C6F77   138         DB      074H,020H,061H,06CH,06CH,06FH,077H,065H,064H,000H
       656400               
                        141         PUBLIC  _MissingParTxt
00006E                  142 _MissingParTxt:
00006E 4D697373696E67   143         DB      04DH,069H,073H,073H,069H,06EH,067H,020H,070H,061H,072H,061H
       2070617261           
                        144 ; rs232err.c   46       char code CmdHeaderErrTxt[]                             = "Command header
                             error";
00007A 6D6574657200     145         DB      06DH,065H,074H,065H,072H,000H
                        148         PUBLIC  _CmdHeaderErrTxt
000080                  149 _CmdHeaderErrTxt:
000080 436F6D6D616E64   150         DB      043H,06FH,06DH,06DH,061H,06EH,064H,020H,068H,065H,061H,064H
       2068656164           
                        151 ; rs232err.c   47       char code HdrSeparatorErrTxt[]                  = "Header separator error
                            ";
00008C 6572206572726F   152         DB      065H,072H,020H,065H,072H,072H,06FH,072H,000H
       7200                 
                        155         PUBLIC  _HdrSeparatorErrTxt
000095                  156 _HdrSeparatorErrTxt:
000095 48656164657220   157         DB      048H,065H,061H,064H,065H,072H,020H,073H,065H,070H,061H,072H
       7365706172           
                        158 ; rs232err.c   48       char code PrgmMnemonicTooLongTxt[]              = "Program mnemonic too l
                            ong";
0000A1 61746F72206572   159         DB      061H,074H,06FH,072H,020H,065H,072H,072H,06FH,072H,000H
       726F7200             
                        162         PUBLIC  _PrgmMnemonicTooLongTxt
0000AC                  163 _PrgmMnemonicTooLongTxt:
0000AC 50726F6772616D   164         DB      050H,072H,06FH,067H,072H,061H,06DH,020H,06DH,06EH,065H,06DH
       206D6E656D           
0000B8 6F6E696320746F   165         DB      06FH,06EH,069H,063H,020H,074H,06FH,06FH,020H,06CH,06FH,06EH
       6F206C6F6E           
                        166 ; rs232err.c   49       char code UndefinedHeaderTxt[]                  = "Undefined header";
0000C4 6700             167         DB      067H,000H
                        170         PUBLIC  _UndefinedHeaderTxt
0000C6                  171 _UndefinedHeaderTxt:
0000C6 556E646566696E   172         DB      055H,06EH,064H,065H,066H,069H,06EH,065H,064H,020H,068H,065H
       6564206865           
                        173 ; rs232err.c   50       char code HdrSuffixOutOfRangeTxt[]              = "Header suffix out of r
                            ange";
0000D2 6164657200       174         DB      061H,064H,065H,072H,000H
                        177         PUBLIC  _HdrSuffixOutOfRangeTxt
0000D7                  178 _HdrSuffixOutOfRangeTxt:
0000D7 48656164657220   179         DB      048H,065H,061H,064H,065H,072H,020H,073H,075H,066H,066H,069H
       7375666669           
0000E3 78206F7574206F   180         DB      078H,020H,06FH,075H,074H,020H,06FH,066H,020H,072H,061H,06EH
       662072616E           
                        181 ; rs232err.c   51       
                        182 ; rs232err.c   52       char code NumericDataErrTxt[]                           = "Numeric data e
                            rror";
0000EF 676500           183         DB      067H,065H,000H
                        186         PUBLIC  _NumericDataErrTxt
0000F2                  187 _NumericDataErrTxt:
0000F2 4E756D65726963   188         DB      04EH,075H,06DH,065H,072H,069H,063H,020H,064H,061H,074H,061H
       2064617461           
                        189 ; rs232err.c   53       char code InvalidCharInNumberTxt[]              = "Invalid character in n
                            umber";
0000FE 206572726F7200   190         DB      020H,065H,072H,072H,06FH,072H,000H
                        193         PUBLIC  _InvalidCharInNumberTxt
000105                  194 _InvalidCharInNumberTxt:
000105 496E76616C6964   195         DB      049H,06EH,076H,061H,06CH,069H,064H,020H,063H,068H,061H,072H
       2063686172           
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   4

ADDR   CODE            LINE SOURCELINE
000111 61637465722069   196         DB      061H,063H,074H,065H,072H,020H,069H,06EH,020H,06EH,075H,06DH
       6E206E756D           
                        197 ; rs232err.c   54       char code ExponentTooLargeTxt[]                 = "Exponent too large";
00011D 62657200         198         DB      062H,065H,072H,000H
                        201         PUBLIC  _ExponentTooLargeTxt
000121                  202 _ExponentTooLargeTxt:
000121 4578706F6E656E   203         DB      045H,078H,070H,06FH,06EH,065H,06EH,074H,020H,074H,06FH,06FH
       7420746F6F           
                        204 ; rs232err.c   55       char code TooManyDigitsTxt[]                            = "Too many digit
                            s";
00012D 206C6172676500   205         DB      020H,06CH,061H,072H,067H,065H,000H
                        208         PUBLIC  _TooManyDigitsTxt
000134                  209 _TooManyDigitsTxt:
000134 546F6F206D616E   210         DB      054H,06FH,06FH,020H,06DH,061H,06EH,079H,020H,064H,069H,067H
       7920646967           
                        211 ; rs232err.c   56       char code NumericDataNotAllowedTxt[]    = "Numeric data not allowed";
000140 69747300         212         DB      069H,074H,073H,000H
                        215         PUBLIC  _NumericDataNotAllowedTxt
000144                  216 _NumericDataNotAllowedTxt:
000144 4E756D65726963   217         DB      04EH,075H,06DH,065H,072H,069H,063H,020H,064H,061H,074H,061H
       2064617461           
000150 206E6F7420616C   218         DB      020H,06EH,06FH,074H,020H,061H,06CH,06CH,06FH,077H,065H,064H
       6C6F776564           
                        219 ; rs232err.c   57       char code SuffixErrTxt[]                                        = "Suffix
                             error";
00015C 00               220         DB      000H
                        223         PUBLIC  _SuffixErrTxt
00015D                  224 _SuffixErrTxt:
00015D 53756666697820   225         DB      053H,075H,066H,066H,069H,078H,020H,065H,072H,072H,06FH,072H
       6572726F72           
                        226 ; rs232err.c   58       char code InvalidSuffixErrTxt[]                 = "Invalid suffix";
000169 00               227         DB      000H
                        230         PUBLIC  _InvalidSuffixErrTxt
00016A                  231 _InvalidSuffixErrTxt:
00016A 496E76616C6964   232         DB      049H,06EH,076H,061H,06CH,069H,064H,020H,073H,075H,066H,066H
       2073756666           
                        233 ; rs232err.c   59       char code SuffixTooLongTxt[]                            = "Suffix too lon
                            g";
000176 697800           234         DB      069H,078H,000H
                        237         PUBLIC  _SuffixTooLongTxt
000179                  238 _SuffixTooLongTxt:
000179 53756666697820   239         DB      053H,075H,066H,066H,069H,078H,020H,074H,06FH,06FH,020H,06CH
       746F6F206C           
                        240 ; rs232err.c   60       char code SuffixNotAllowedTxt[]                 = "Suffix not allowed";
000185 6F6E6700         241         DB      06FH,06EH,067H,000H
                        244         PUBLIC  _SuffixNotAllowedTxt
000189                  245 _SuffixNotAllowedTxt:
000189 53756666697820   246         DB      053H,075H,066H,066H,069H,078H,020H,06EH,06FH,074H,020H,061H
       6E6F742061           
                        247 ; rs232err.c   61       
                        248 ; rs232err.c   62       char code CharErrTxt[]                                          = "Charac
                            ter data error";
000195 6C6C6F77656400   249         DB      06CH,06CH,06FH,077H,065H,064H,000H
                        252         PUBLIC  _CharErrTxt
00019C                  253 _CharErrTxt:
00019C 43686172616374   254         DB      043H,068H,061H,072H,061H,063H,074H,065H,072H,020H,064H,061H
       6572206461           
                        255 ; rs232err.c   63       char code InvalidCharDataTxt[]                  = "Invalid character data
                            ";
0001A8 7461206572726F   256         DB      074H,061H,020H,065H,072H,072H,06FH,072H,000H
       7200                 
                        259         PUBLIC  _InvalidCharDataTxt
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   5

ADDR   CODE            LINE SOURCELINE
0001B1                  260 _InvalidCharDataTxt:
0001B1 496E76616C6964   261         DB      049H,06EH,076H,061H,06CH,069H,064H,020H,063H,068H,061H,072H
       2063686172           
                        262 ; rs232err.c   64       char code CharDataTooLongTxt[]                  = "Character data too lon
                            g";
0001BD 61637465722064   263         DB      061H,063H,074H,065H,072H,020H,064H,061H,074H,061H,000H
       61746100             
                        266         PUBLIC  _CharDataTooLongTxt
0001C8                  267 _CharDataTooLongTxt:
0001C8 43686172616374   268         DB      043H,068H,061H,072H,061H,063H,074H,065H,072H,020H,064H,061H
       6572206461           
                        269 ; rs232err.c   65       char code CharDataNotAllowedTxt[]               = "Character data not all
                            owed";
0001D4 746120746F6F20   270         DB      074H,061H,020H,074H,06FH,06FH,020H,06CH,06FH,06EH,067H,000H
       6C6F6E6700           
                        273         PUBLIC  _CharDataNotAllowedTxt
0001E0                  274 _CharDataNotAllowedTxt:
0001E0 43686172616374   275         DB      043H,068H,061H,072H,061H,063H,074H,065H,072H,020H,064H,061H
       6572206461           
0001EC 7461206E6F7420   276         DB      074H,061H,020H,06EH,06FH,074H,020H,061H,06CH,06CH,06FH,077H
       616C6C6F77           
                        277 ; rs232err.c   66       
                        278 ; rs232err.c   67       char code StringDataErrTxt[]                            = "String data er
                            ror";
0001F8 656400           279         DB      065H,064H,000H
                        282         PUBLIC  _StringDataErrTxt
0001FB                  283 _StringDataErrTxt:
0001FB 537472696E6720   284         DB      053H,074H,072H,069H,06EH,067H,020H,064H,061H,074H,061H,020H
       6461746120           
                        285 ; rs232err.c   68       char code InvalidStringDataTxt[]                        = "Invalid string
                             data";
000207 6572726F7200     286         DB      065H,072H,072H,06FH,072H,000H
                        289         PUBLIC  _InvalidStringDataTxt
00020D                  290 _InvalidStringDataTxt:
00020D 496E76616C6964   291         DB      049H,06EH,076H,061H,06CH,069H,064H,020H,073H,074H,072H,069H
       2073747269           
                        292 ; rs232err.c   69       char code StringDataNotAllowedTxt[]             = "String data not allowe
                            d";
000219 6E672064617461   293         DB      06EH,067H,020H,064H,061H,074H,061H,000H
       00                   
                        296         PUBLIC  _StringDataNotAllowedTxt
000221                  297 _StringDataNotAllowedTxt:
000221 537472696E6720   298         DB      053H,074H,072H,069H,06EH,067H,020H,064H,061H,074H,061H,020H
       6461746120           
                        299 ; rs232err.c   70       
                        300 ; rs232err.c   71       char code BlockDataErrTxt[]                             = "Block data err
                            or";
00022D 6E6F7420616C6C   301         DB      06EH,06FH,074H,020H,061H,06CH,06CH,06FH,077H,065H,064H,000H
       6F77656400           
                        304         PUBLIC  _BlockDataErrTxt
000239                  305 _BlockDataErrTxt:
000239 426C6F636B2064   306         DB      042H,06CH,06FH,063H,06BH,020H,064H,061H,074H,061H,020H,065H
       6174612065           
                        307 ; rs232err.c   72       char code InvalidBlockDataTxt[]                 = "Invalid block data";
000245 72726F7200       308         DB      072H,072H,06FH,072H,000H
                        311         PUBLIC  _InvalidBlockDataTxt
00024A                  312 _InvalidBlockDataTxt:
00024A 496E76616C6964   313         DB      049H,06EH,076H,061H,06CH,069H,064H,020H,062H,06CH,06FH,063H
       20626C6F63           
                        314 ; rs232err.c   73       char code BlockDataNotAllowedTxt[]              = "Block data not allowed
                            ";
000256 6B206461746100   315         DB      06BH,020H,064H,061H,074H,061H,000H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   6

ADDR   CODE            LINE SOURCELINE
                        318         PUBLIC  _BlockDataNotAllowedTxt
00025D                  319 _BlockDataNotAllowedTxt:
00025D 426C6F636B2064   320         DB      042H,06CH,06FH,063H,06BH,020H,064H,061H,074H,061H,020H,06EH
       617461206E           
                        321 ; rs232err.c   74       
                        322 ; rs232err.c   75       char code ExpressionErrTxt[]                            = "Expression err
                            or";
000269 6F7420616C6C6F   323         DB      06FH,074H,020H,061H,06CH,06CH,06FH,077H,065H,064H,000H
       77656400             
                        326         PUBLIC  _ExpressionErrTxt
000274                  327 _ExpressionErrTxt:
000274 45787072657373   328         DB      045H,078H,070H,072H,065H,073H,073H,069H,06FH,06EH,020H,065H
       696F6E2065           
                        329 ; rs232err.c   76       
                        330 ; rs232err.c   77       char code ExecErrTxt[]                                          = "Execut
                            ion error";
000280 72726F7200       331         DB      072H,072H,06FH,072H,000H
                        334         PUBLIC  _ExecErrTxt
000285                  335 _ExecErrTxt:
000285 45786563757469   336         DB      045H,078H,065H,063H,075H,074H,069H,06FH,06EH,020H,065H,072H
       6F6E206572           
                        337 ; rs232err.c   78       char code CmdProtectedTxt[]                             = "Command protec
                            ted";
000291 726F7200         338         DB      072H,06FH,072H,000H
                        341         PUBLIC  _CmdProtectedTxt
000295                  342 _CmdProtectedTxt:
000295 436F6D6D616E64   343         DB      043H,06FH,06DH,06DH,061H,06EH,064H,020H,070H,072H,06FH,074H
       2070726F74           
                        344 ; rs232err.c   79       
                        345 ; rs232err.c   80       char code ParErrTxt[]                                           = "Parame
                            ter error";
0002A1 656374656400     346         DB      065H,063H,074H,065H,064H,000H
                        349         PUBLIC  _ParErrTxt
0002A7                  350 _ParErrTxt:
0002A7 506172616D6574   351         DB      050H,061H,072H,061H,06DH,065H,074H,065H,072H,020H,065H,072H
       6572206572           
                        352 ; rs232err.c   81       char code SettingsErrTxt[]                                      = "Settin
                            gs conflict";
0002B3 726F7200         353         DB      072H,06FH,072H,000H
                        356         PUBLIC  _SettingsErrTxt
0002B7                  357 _SettingsErrTxt:
0002B7 53657474696E67   358         DB      053H,065H,074H,074H,069H,06EH,067H,073H,020H,063H,06FH,06EH
       7320636F6E           
                        359 ; rs232err.c   82       char code DataOutOfRangeTxt[]                           = "Data out of ra
                            nge";
0002C3 666C69637400     360         DB      066H,06CH,069H,063H,074H,000H
                        363         PUBLIC  _DataOutOfRangeTxt
0002C9                  364 _DataOutOfRangeTxt:
0002C9 44617461206F75   365         DB      044H,061H,074H,061H,020H,06FH,075H,074H,020H,06FH,066H,020H
       74206F6620           
                        366 ; rs232err.c   83       char code TooMuchDataTxt[]                                      = "Too mu
                            ch data";
0002D5 72616E676500     367         DB      072H,061H,06EH,067H,065H,000H
                        370         PUBLIC  _TooMuchDataTxt
0002DB                  371 _TooMuchDataTxt:
0002DB 546F6F206D7563   372         DB      054H,06FH,06FH,020H,06DH,075H,063H,068H,020H,064H,061H,074H
       6820646174           
                        373 ; rs232err.c   84       char code IllegalParValueTxt[]                  = "Illegal parameter valu
                            e";
0002E7 6100             374         DB      061H,000H
                        377         PUBLIC  _IllegalParValueTxt
0002E9                  378 _IllegalParValueTxt:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   7

ADDR   CODE            LINE SOURCELINE
0002E9 496C6C6567616C   379         DB      049H,06CH,06CH,065H,067H,061H,06CH,020H,070H,061H,072H,061H
       2070617261           
                        380 ; rs232err.c   85       
                        381 ; rs232err.c   86       char code InvalidVersionTxt[]                           = "Invalid versio
                            n";
0002F5 6D657465722076   382         DB      06DH,065H,074H,065H,072H,020H,076H,061H,06CH,075H,065H,000H
       616C756500           
                        385         PUBLIC  _InvalidVersionTxt
000301                  386 _InvalidVersionTxt:
000301 496E76616C6964   387         DB      049H,06EH,076H,061H,06CH,069H,064H,020H,076H,065H,072H,073H
       2076657273           
                        388 ; rs232err.c   87       char code HardwareMissingTxt[]                  = "Hardware Missing";
00030D 696F6E00         389         DB      069H,06FH,06EH,000H
                        392         PUBLIC  _HardwareMissingTxt
000311                  393 _HardwareMissingTxt:
000311 48617264776172   394         DB      048H,061H,072H,064H,077H,061H,072H,065H,020H,04DH,069H,073H
       65204D6973           
                        395 ; rs232err.c   88       
                        396 ; rs232err.c   89       char code DeviceSpecificErrTxt[]                        = "Device-specifi
                            c error";
00031D 73696E6700       397         DB      073H,069H,06EH,067H,000H
                        400         PUBLIC  _DeviceSpecificErrTxt
000322                  401 _DeviceSpecificErrTxt:
000322 4465766963652D   402         DB      044H,065H,076H,069H,063H,065H,02DH,073H,070H,065H,063H,069H
       7370656369           
                        403 ; rs232err.c   90       char code QueueOverflowTxt[]                            = "Queue overflow
                            ";
00032E 66696320657272   404         DB      066H,069H,063H,020H,065H,072H,072H,06FH,072H,000H
       6F7200               
                        407         PUBLIC  _QueueOverflowTxt
000338                  408 _QueueOverflowTxt:
000338 5175657565206F   409         DB      051H,075H,065H,075H,065H,020H,06FH,076H,065H,072H,066H,06CH
       766572666C           
                        410 ; rs232err.c   91       char code CommunicationErrTxt[]                 = "Communication error";
000344 6F7700           411         DB      06FH,077H,000H
                        414         PUBLIC  _CommunicationErrTxt
000347                  415 _CommunicationErrTxt:
000347 436F6D6D756E69   416         DB      043H,06FH,06DH,06DH,075H,06EH,069H,063H,061H,074H,069H,06FH
       636174696F           
                        417 ; rs232err.c   92       char code ParityErrMessageTxt[]                 = "Parity error in progra
                            m message";
000353 6E206572726F72   418         DB      06EH,020H,065H,072H,072H,06FH,072H,000H
       00                   
                        421         PUBLIC  _ParityErrMessageTxt
00035B                  422 _ParityErrMessageTxt:
00035B 50617269747920   423         DB      050H,061H,072H,069H,074H,079H,020H,065H,072H,072H,06FH,072H
       6572726F72           
000367 20696E2070726F   424         DB      020H,069H,06EH,020H,070H,072H,06FH,067H,072H,061H,06DH,020H
       6772616D20           
                        425 ; rs232err.c   93       char code FramingErrMessageTxt[]                        = "Framing error 
                            in program message";
000373 6D657373616765   426         DB      06DH,065H,073H,073H,061H,067H,065H,000H
       00                   
                        429         PUBLIC  _FramingErrMessageTxt
00037B                  430 _FramingErrMessageTxt:
00037B 4672616D696E67   431         DB      046H,072H,061H,06DH,069H,06EH,067H,020H,065H,072H,072H,06FH
       206572726F           
000387 7220696E207072   432         DB      072H,020H,069H,06EH,020H,070H,072H,06FH,067H,072H,061H,06DH
       6F6772616D           
                        433 ; rs232err.c   94       char code InputBufferOverrunTxt[]               = "Input buffer overrun";
                            
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   8

ADDR   CODE            LINE SOURCELINE
000393 206D6573736167   434         DB      020H,06DH,065H,073H,073H,061H,067H,065H,000H
       6500                 
                        437         PUBLIC  _InputBufferOverrunTxt
00039C                  438 _InputBufferOverrunTxt:
00039C 496E7075742062   439         DB      049H,06EH,070H,075H,074H,020H,062H,075H,066H,066H,065H,072H
       7566666572           
                        440 ; rs232err.c   95       
                        441 ; rs232err.c   96       char code QueryErrTxt[]                                         = "Query 
                            error";
0003A8 206F7665727275   442         DB      020H,06FH,076H,065H,072H,072H,075H,06EH,000H
       6E00                 
                        445         PUBLIC  _QueryErrTxt
0003B1                  446 _QueryErrTxt:
                        447 ; rs232err.c   97       char code QueryInterruptedTxt[]                 = "Query INTERRUPTED";
0003B1 51756572792065   448         DB      051H,075H,065H,072H,079H,020H,065H,072H,072H,06FH,072H,000H
       72726F7200           
                        451         PUBLIC  _QueryInterruptedTxt
0003BD                  452 _QueryInterruptedTxt:
0003BD 51756572792049   453         DB      051H,075H,065H,072H,079H,020H,049H,04EH,054H,045H,052H,052H
       4E54455252           
                        454 ; rs232err.c   98       char code QueryUnterminatedTxt[]                        = "Query UNTERMIN
                            ATED";
0003C9 555054454400     455         DB      055H,050H,054H,045H,044H,000H
                        458         PUBLIC  _QueryUnterminatedTxt
0003CF                  459 _QueryUnterminatedTxt:
0003CF 51756572792055   460         DB      051H,075H,065H,072H,079H,020H,055H,04EH,054H,045H,052H,04DH
       4E5445524D           
                        461 ; rs232err.c   99       char code QueryDeadlockedTxt[]                  = "Query DEADLOCKED";
0003DB 494E4154454400   462         DB      049H,04EH,041H,054H,045H,044H,000H
                        465         PUBLIC  _QueryDeadlockedTxt
0003E2                  466 _QueryDeadlockedTxt:
0003E2 51756572792044   467         DB      051H,075H,065H,072H,079H,020H,044H,045H,041H,044H,04CH,04FH
       4541444C4F           
                        468 ; rs232err.c  100       
                        469 ; rs232err.c  101       
                        470 ; rs232err.c  102       struct ERROR_STRUCT code ErrorTxt_Array[LastErrorCode] = {
0003EE 434B454400       471         DB      043H,04BH,045H,044H,000H
                        480         PUBLIC  _ErrorTxt_Array
0003F3 RESERVED         481         ALIGN   1
0003F3
0003F4                  482 _ErrorTxt_Array:
0003F4 0000             483         DW      00000H
0003F6 rrrrrrrrrrrrrr   484         DD      _NoErrTxt
       rr                   
0003FA 9CFF             485         DW      0FF9CH
0003FC rrrrrrrrrrrrrr   486         DD      _CmdErrTxt
       rr                   
000400 9BFF             487         DW      0FF9BH
000402 rrrrrrrrrrrrrr   488         DD      _InvalidCharTxt
       rr                   
000406 9AFF             489         DW      0FF9AH
000408 rrrrrrrrrrrrrr   490         DD      _SyntaxErrTxt
       rr                   
00040C 99FF             491         DW      0FF99H
00040E rrrrrrrrrrrrrr   492         DD      _InvalidSeparatorTxt
       rr                   
000412 98FF             493         DW      0FF98H
000414 rrrrrrrrrrrrrr   494         DD      _DataTypeErrTxt
       rr                   
000418 94FF             495         DW      0FF94H
00041A rrrrrrrrrrrrrr   496         DD      _ParNotAllowedTxt
       rr                   
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   9

ADDR   CODE            LINE SOURCELINE
00041E 93FF             497         DW      0FF93H
000420 rrrrrrrrrrrrrr   498         DD      _MissingParTxt
       rr                   
000424 92FF             499         DW      0FF92H
000426 rrrrrrrrrrrrrr   500         DD      _CmdHeaderErrTxt
       rr                   
00042A 91FF             501         DW      0FF91H
00042C rrrrrrrrrrrrrr   502         DD      _HdrSeparatorErrTxt
       rr                   
000430 90FF             503         DW      0FF90H
000432 rrrrrrrrrrrrrr   504         DD      _PrgmMnemonicTooLongTxt
       rr                   
000436 8FFF             505         DW      0FF8FH
000438 rrrrrrrrrrrrrr   506         DD      _UndefinedHeaderTxt
       rr                   
00043C 8EFF             507         DW      0FF8EH
00043E rrrrrrrrrrrrrr   508         DD      _HdrSuffixOutOfRangeTxt
       rr                   
000442 88FF             509         DW      0FF88H
000444 rrrrrrrrrrrrrr   510         DD      _NumericDataErrTxt
       rr                   
000448 87FF             511         DW      0FF87H
00044A rrrrrrrrrrrrrr   512         DD      _InvalidCharInNumberTxt
       rr                   
00044E 85FF             513         DW      0FF85H
000450 rrrrrrrrrrrrrr   514         DD      _ExponentTooLargeTxt
       rr                   
000454 84FF             515         DW      0FF84H
000456 rrrrrrrrrrrrrr   516         DD      _TooManyDigitsTxt
       rr                   
00045A 83FF             517         DW      0FF83H
00045C rrrrrrrrrrrrrr   518         DD      _NumericDataNotAllowedTxt
       rr                   
000460 7EFF             519         DW      0FF7EH
000462 rrrrrrrrrrrrrr   520         DD      _SuffixErrTxt
       rr                   
000466 7DFF             521         DW      0FF7DH
000468 rrrrrrrrrrrrrr   522         DD      _InvalidSuffixErrTxt
       rr                   
00046C 7AFF             523         DW      0FF7AH
00046E rrrrrrrrrrrrrr   524         DD      _SuffixTooLongTxt
       rr                   
000472 76FF             525         DW      0FF76H
000474 rrrrrrrrrrrrrr   526         DD      _SuffixNotAllowedTxt
       rr                   
000478 74FF             527         DW      0FF74H
00047A rrrrrrrrrrrrrr   528         DD      _CharErrTxt
       rr                   
00047E 6AFF             529         DW      0FF6AH
000480 rrrrrrrrrrrrrr   530         DD      _StringDataErrTxt
       rr                   
000484 69FF             531         DW      0FF69H
000486 rrrrrrrrrrrrrr   532         DD      _InvalidStringDataTxt
       rr                   
00048A 62FF             533         DW      0FF62H
00048C rrrrrrrrrrrrrr   534         DD      _StringDataNotAllowedTxt
       rr                   
000490 60FF             535         DW      0FF60H
000492 rrrrrrrrrrrrrr   536         DD      _BlockDataErrTxt
       rr                   
000496 5FFF             537         DW      0FF5FH
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  10

ADDR   CODE            LINE SOURCELINE
000498 rrrrrrrrrrrrrr   538         DD      _InvalidBlockDataTxt
       rr                   
00049C 56FF             539         DW      0FF56H
00049E rrrrrrrrrrrrrr   540         DD      _ExpressionErrTxt
       rr                   
0004A2 38FF             541         DW      0FF38H
0004A4 rrrrrrrrrrrrrr   542         DD      _ExecErrTxt
       rr                   
0004A8 35FF             543         DW      0FF35H
0004AA rrrrrrrrrrrrrr   544         DD      _CmdProtectedTxt
       rr                   
0004AE 24FF             545         DW      0FF24H
0004B0 rrrrrrrrrrrrrr   546         DD      _ParErrTxt
       rr                   
0004B4 23FF             547         DW      0FF23H
0004B6 rrrrrrrrrrrrrr   548         DD      _SettingsErrTxt
       rr                   
0004BA 22FF             549         DW      0FF22H
0004BC rrrrrrrrrrrrrr   550         DD      _DataOutOfRangeTxt
       rr                   
0004C0 21FF             551         DW      0FF21H
0004C2 rrrrrrrrrrrrrr   552         DD      _TooMuchDataTxt
       rr                   
0004C6 20FF             553         DW      0FF20H
0004C8 rrrrrrrrrrrrrr   554         DD      _IllegalParValueTxt
       rr                   
0004CC 17FF             555         DW      0FF17H
0004CE rrrrrrrrrrrrrr   556         DD      _InvalidVersionTxt
       rr                   
0004D2 0FFF             557         DW      0FF0FH
0004D4 rrrrrrrrrrrrrr   558         DD      _HardwareMissingTxt
       rr                   
0004D8 D4FE             559         DW      0FED4H
0004DA rrrrrrrrrrrrrr   560         DD      _DeviceSpecificErrTxt
       rr                   
0004DE A2FE             561         DW      0FEA2H
0004E0 rrrrrrrrrrrrrr   562         DD      _QueueOverflowTxt
       rr                   
0004E4 98FE             563         DW      0FE98H
0004E6 rrrrrrrrrrrrrr   564         DD      _CommunicationErrTxt
       rr                   
0004EA 97FE             565         DW      0FE97H
0004EC rrrrrrrrrrrrrr   566         DD      _ParityErrMessageTxt
       rr                   
0004F0 96FE             567         DW      0FE96H
0004F2 rrrrrrrrrrrrrr   568         DD      _FramingErrMessageTxt
       rr                   
0004F6 95FE             569         DW      0FE95H
0004F8 rrrrrrrrrrrrrr   570         DD      _InputBufferOverrunTxt
       rr                   
0004FC 70FE             571         DW      0FE70H
0004FE rrrrrrrrrrrrrr   572         DD      _QueryErrTxt
       rr                   
000502 66FE             573         DW      0FE66H
000504 rrrrrrrrrrrrrr   574         DD      _QueryInterruptedTxt
       rr                   
000508 5CFE             575         DW      0FE5CH
00050A rrrrrrrrrrrrrr   576         DD      _QueryUnterminatedTxt
       rr                   
00050E 52FE             577         DW      0FE52H
                        578 ; rs232err.c  103               {    0, NoErrTxt },                                             /
                            / NoErr
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  11

ADDR   CODE            LINE SOURCELINE
                        579 ; rs232err.c  104               { -100, CmdErrTxt },                                            /
                            / CmdErr
                        580 ; rs232err.c  105               { -101, InvalidCharTxt },                               // Invali
                            dChar
                        581 ; rs232err.c  106               { -102, SyntaxErrTxt },                                 // Syntax
                            Err
                        582 ; rs232err.c  107               { -103, InvalidSeparatorTxt },          // InvalidSeparator
                        583 ; rs232err.c  108               { -104, DataTypeErrTxt },                               // DataTy
                            peErr
                        584 ; rs232err.c  109               { -108, ParNotAllowedTxt },                     // ParNotAllowed
                        585 ; rs232err.c  110               { -109, MissingParTxt },                                // Missin
                            gpar
                        586 ; rs232err.c  111               { -110, CmdHeaderErrTxt },                              // CmdHea
                            derErr
                        587 ; rs232err.c  112               { -111, HdrSeparatorErrTxt },                   // HdrSeparatorEr
                            r
                        588 ; rs232err.c  113               { -112, PrgmMnemonicTooLongTxt },       // PrgmMnemonicTooLong
                        589 ; rs232err.c  114               { -113, UndefinedHeaderTxt },                   // UndefinedHeade
                            r
                        590 ; rs232err.c  115               { -114, HdrSuffixOutOfRangeTxt },       // HdrSufficOutOfrange
                        591 ; rs232err.c  116       
                        592 ; rs232err.c  117               { -120, NumericDataErrTxt },                    // NumericDataErr
                            
                        593 ; rs232err.c  118               { -121, InvalidCharInNumberTxt },       //      InvalidCharinNUmb
                            er
                        594 ; rs232err.c  119               { -123, ExponentTooLargeTxt },          // ExponentTooLarge
                        595 ; rs232err.c  120               { -124, TooManyDigitsTxt },                     // TooManyDigits
                        596 ; rs232err.c  121               { -125, NumericDataNotAllowedTxt },     // NumericDataNotAllowed
                        597 ; rs232err.c  122               { -130, SuffixErrTxt },                                 // Suffix
                            Err
                        598 ; rs232err.c  123               { -131, InvalidSuffixErrTxt },          // InvalidSuffixErr
                        599 ; rs232err.c  124               { -134, SuffixTooLongTxt },                     // SuffixTooLong
                        600 ; rs232err.c  125               { -138, SuffixNotAllowedTxt },          // SuffixNotAllowed
                        601 ; rs232err.c  126       
                        602 ; rs232err.c  127               { -140, CharErrTxt },                                   // CharEr
                            r
                        603 ; rs232err.c  128       
                        604 ; rs232err.c  129               { -150, StringDataErrTxt },                     // StringDataErr
                        605 ; rs232err.c  130               { -151, InvalidStringDataTxt },         // InvalidStringData
                        606 ; rs232err.c  131               { -158, StringDataNotAllowedTxt },      // StringDataNotAllowed
                        607 ; rs232err.c  132       
                        608 ; rs232err.c  133               { -160, BlockDataErrTxt },                              // BlockD
                            ataErr
                        609 ; rs232err.c  134               { -161, InvalidBlockDataTxt },          // InvalidBlockData
                        610 ; rs232err.c  135       
                        611 ; rs232err.c  136               { -170, ExpressionErrTxt },                     // ExpressionErr
                        612 ; rs232err.c  137       
                        613 ; rs232err.c  138               { -200, ExecErrTxt },                                   // ExecEr
                            r
                        614 ; rs232err.c  139               { -203, CmdProtectedTxt },                              // CmdPro
                            tected
                        615 ; rs232err.c  140       
                        616 ; rs232err.c  141               { -220, ParErrTxt },                                            /
                            / ParErr
                        617 ; rs232err.c  142               { -221, SettingsErrTxt },                                        
                                    // SettingsErr
                        618 ; rs232err.c  143               { -222, DataOutOfRangeTxt },                    // DataOutOfRange
                            
                        619 ; rs232err.c  144               { -223, TooMuchDataTxt },                               // TooMuc
                            hData
                        620 ; rs232err.c  145               { -224, IllegalParValueTxt },                   // IllegalParValu
                            e
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  12

ADDR   CODE            LINE SOURCELINE
                        621 ; rs232err.c  146       
                        622 ; rs232err.c  147               { -233, InvalidVersionTxt },                    // InvalidVersion
                            
                        623 ; rs232err.c  148       
                        624 ; rs232err.c  149               { -241, HardwareMissingTxt },                   // HardwareMissin
                            g
                        625 ; rs232err.c  150       
                        626 ; rs232err.c  151               { -300, DeviceSpecificErrTxt },         // DeviceSpecificErr
                        627 ; rs232err.c  152               { -350, QueueOverflowTxt },                     // QueueOverflow
                        628 ; rs232err.c  153               { -360, CommunicationErrTxt },          // CommunicationErr
                        629 ; rs232err.c  154               { -361, ParityErrMessageTxt },          // ParityErrMessage
                        630 ; rs232err.c  155               { -362, FramingErrMessageTxt },         // FramingErrMessage
                        631 ; rs232err.c  156               { -363, InputBufferOverrunTxt },                // InputBufferOve
                            rrunErr
                        632 ; rs232err.c  157               { -400, QueryErrTxt },                                  // QueryE
                            rr
                        633 ; rs232err.c  158               { -410, QueryInterruptedTxt },          // QueryInterrupted
                        634 ; rs232err.c  159               { -420, QueryUnterminatedTxt },         // QueryUnterminated
                        635 ; rs232err.c  160               { -430, QueryDeadlockedTxt }                    // QueryDeadlocke
                            d
                        636 ; rs232err.c  161       };
                        637 ; rs232err.c  162       
                        638 ; rs232err.c  163       UC STBReg;                                                               
                                            // Status Byte
                        639 ; rs232err.c  164       UC SREReg;                                                               
                                            // Service Request Enable Register
                        640 ; rs232err.c  165       
                        641 ; rs232err.c  166       UC ESRReg;                                                               
                                            // Event Status Register
                        642 ; rs232err.c  167       UC ESEReg;                                                               
                                            // Event Status Enable Register
                        643 ; rs232err.c  168       
                        644 ; rs232err.c  169       UI QuestConditionReg;                                           // Questi
                            onable Condition Register
                        645 ; rs232err.c  170       UI QuestNtransReg;                                                      /
                            / Questionable NTransition Register
                        646 ; rs232err.c  171       UI QuestPtransReg;                                                      /
                            / Questionable PTransition Register
                        647 ; rs232err.c  172       UI QuestEventReg;                                                        
                                    // Questionable Event Register
                        648 ; rs232err.c  173       UI QuestEnableReg;                                                      /
                            / Questionable Enable Register
                        649 ; rs232err.c  174       
                        650 ; rs232err.c  175       UI OperConditionReg;                                                    /
                            / Operation Condition Register
                        651 ; rs232err.c  176       UI OperNtransReg;                                                        
                                    // Operation NTransition Register
                        652 ; rs232err.c  177       UI OperPtransReg;                                                        
                                    // Operation PTransition Register
                        653 ; rs232err.c  178       UI OperEventReg;                                                         
                                    // Operation Event Register
                        654 ; rs232err.c  179       UI OperEnableReg;                                                        
                                    // Operation Enable Register
                        655 ; rs232err.c  180       
                        656 ; rs232err.c  181       int SCPIError;                                                           
                                    // Current SCPI error
                        657 ; rs232err.c  182       
                        658 ; rs232err.c  183       static int ErrorEventQueue[QUEUE_SIZE];
                        659 ; rs232err.c  184       
                        660 ; rs232err.c  185       static int QueueHead = 0;
000510 rrrrrrrrrrrrrr   661         DD      _QueryDeadlockedTxt
       rr                   
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  13

ADDR   CODE            LINE SOURCELINE
000000                  662 RS232ERR_INI_FA SEGMENT HDATA INSEGMENT INIT
000000                  663         RSEG    RS232ERR_INI_FA
                        665         ALIGN   1
000000                  666 _QueueHead:
                        667 ; rs232err.c  186       static int QueueTail = 0;
000000 0000             668         DW      00000H
                        670         ALIGN   1
000002                  671 _QueueTail:
                        672 ; rs232err.c  187       
                        673 ; rs232err.c  188       /************************************************************************
                            ***/
                        674 ; rs232err.c  189       /*      ResetErrorEventQueue                                             
                                                                                        RS232ERR.C  */
                        675 ; rs232err.c  190       /*                                                                       
                                                                                                                             
                                                            */
                        676 ; rs232err.c  191       /* Author:              Kim Engedahl, DEV, 941124                        
                                                                                            */
                        677 ; rs232err.c  192       /* Revised:             970630                                           
                                                                                                                    */
                        678 ; rs232err.c  193       /*                                                                       
                                                                                                                             
                                                            */
                        679 ; rs232err.c  194       /*      Function:       Clear all entries in the error/event queue       
                                                                    */
                        680 ; rs232err.c  195       /*      Remarks:                Note! It is only the pointers which is re
                            set                                             */
                        681 ; rs232err.c  196       /*      Returns:                -                                        
                                                                                                                             
                                                    */
                        682 ; rs232err.c  197       /*      Updates:                -                                        
                                                                                                                             
                                                    */
                        683 ; rs232err.c  198       /************************************************************************
                            ***/
                        684 ; rs232err.c  199       void ResetErrorEventQueue() {
000002 0000             685         DW      00000H
000000                  686 RS232ERR_PR     SEGMENT HCODE
000000                  687         RSEG    RS232ERR_PR
                        688         ALIGN   1
                        690         PUBLIC  _ResetErrorEventQueue
000000                  691 _ResetErrorEventQueue:
                        695 ; rs232err.c  200       
                        696 ; rs232err.c  201               QueueHead = QueueTail = 0;
000000 964842rr         698         MOV.B   ES,#SEG( _QueueTail )
000004 9908rrrr         699         MOV.W   R0,#SOF( _QueueTail )
000008 BA00             700         MOV.W   [R0],#00H
00000A 964842rr         701         MOV.B   ES,#SEG( _QueueHead )
00000E 9908rrrr         702         MOV.W   R0,#SOF( _QueueHead )
000012 BA00             703         MOV.W   [R0],#00H
                        704 ; rs232err.c  202       
                        705 ; rs232err.c  203               UpdateSTBRegister();
000014 C500A0           707         CALL    _UpdateSTBRegister
                        708 ; rs232err.c  204       }
000017 D680             710         RET
                        712 ; rs232err.c  205       
                        713 ; rs232err.c  206       /************************************************************************
                            ***/
                        714 ; rs232err.c  207       /*      ReadErrorEventQueue                                              
                                                                                        RS232ERR.C  */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  14

ADDR   CODE            LINE SOURCELINE
                        715 ; rs232err.c  208       /*                                                                       
                                                                                                                             
                                                            */
                        716 ; rs232err.c  209       /* Author:              Kim Engedahl, DEV, 941124                        
                                                                                            */
                        717 ; rs232err.c  210       /* Revised:             970630                                           
                                                                                                                    */
                        718 ; rs232err.c  211       /*                                                                       
                                                                                                                             
                                                            */
                        719 ; rs232err.c  212       /*      Function:       Read the OLDEST entry in the error queue         
                                                                            */
                        720 ; rs232err.c  213       /*      Remarks:                -                                        
                                                                                                                             
                                                    */
                        721 ; rs232err.c  214       /*      Returns:                Error code if queue > 0, otherwise 0, ie.
                             No error                               */
                        722 ; rs232err.c  215       /*      Updates:                -                                        
                                                                                                                             
                                                    */
                        723 ; rs232err.c  216       /************************************************************************
                            ***/
                        724 ; rs232err.c  217       int ReadErrorEventQueue() {
000019 00               725         ALIGN   1
                        727         PUBLIC  _ReadErrorEventQueue
00001A                  728 _ReadErrorEventQueue:
00001A 0F10             732         PUSH.W  R4
                        736 ; rs232err.c  218       
                        737 ; rs232err.c  219               register int tmp = NoErr;
00001C B940             739         MOV.W   R4,#00H
                        741 ; rs232err.c  220       
                        742 ; rs232err.c  221               if ( QueueHead != QueueTail) {                                  /
                            / If Queue is not empty
00001E 964842rr         744         MOV.B   ES,#SEG( _QueueHead )
000022 9918rrrr         745         MOV.W   R1,#SOF( _QueueHead )
000026 8A11             746         MOV.W   R1,[R1]
000028 964842rr         747         MOV.B   ES,#SEG( _QueueTail )
00002C 9908rrrr         748         MOV.W   R0,#SOF( _QueueTail )
000030 8A00             749         MOV.W   R0,[R0]
000032 4910             750         CMP.W   R1,R0
000034 F312             751         BEQ     _3
                        752 ; rs232err.c  222       
                        753 ; rs232err.c  223                       QueueTail = ( QueueTail+1) % QUEUE_SIZE;
000036 A901             755         ADDS.W  R0,#01H
000038 8910             756         MOV.W   R1,R0
00003A 9819             757         SEXT.W  R1
00003C E9090020         758         DIV.D   R0,#020H
000040 964842rr         759         MOV.B   ES,#SEG( _QueueTail )
000044 9908rrrr         760         MOV.W   R0,#SOF( _QueueTail )
000048 8A18             761         MOV.W   [R0],R1
                        762 ; rs232err.c  224       
                        763 ; rs232err.c  225                       tmp = ErrorEventQueue[QueueTail];
00004A D911             765         ASL.W   R1,#01H
00004C 8901             766         MOV.W   R0,R1
00004E B910             767         MOVS.W  R1,#00H
000050 964842rr         768         MOV.B   ES,#SEG( _ErrorEventQueue )
000054 8D00rrrr         769         MOV.W   R0,[R0+SOF( _ErrorEventQueue )]
000058 8940             770         MOV.W   R4,R0
                        773 ; rs232err.c  226               }
00005A                  775 _3:
                        776 ; rs232err.c  227       
                        777 ; rs232err.c  228               UpdateSTBRegister();
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  15

ADDR   CODE            LINE SOURCELINE
00005A C5007D           779         CALL    _UpdateSTBRegister
                        780 ; rs232err.c  229       
                        781 ; rs232err.c  230               return( tmp);
00005D 8904             783         MOV.W   R0,R4
                        786 ; rs232err.c  231       }
00005F 2F10             788         POP.W   R4
000061 D680             790         RET
                        793 ; rs232err.c  232       
                        794 ; rs232err.c  233       /************************************************************************
                            ***/
                        795 ; rs232err.c  234       /*      SaveErrorEventQueue                                              
                                                                                        RS232ERR.C  */
                        796 ; rs232err.c  235       /*                                                                       
                                                                                                                             
                                                            */
                        797 ; rs232err.c  236       /* Author:              Kim Engedahl, DEV, 941124                        
                                                                                            */
                        798 ; rs232err.c  237       /* Revised:             970630                                           
                                                                                                                    */
                        799 ; rs232err.c  238       /*                                                                       
                                                                                                                             
                                                            */
                        800 ; rs232err.c  239       /*      Function:       Save the new error code in the error queue       
                                                                    */
                        801 ; rs232err.c  240       /*      Remarks:                -                                        
                                                                                                                             
                                                    */
                        802 ; rs232err.c  241       /*      Returns:                -                                        
                                                                                                                             
                                                    */
                        803 ; rs232err.c  242       /*      Updates:                -                                        
                                                                                                                             
                                                    */
                        804 ; rs232err.c  243       /************************************************************************
                            ***/
                        805 ; rs232err.c  244       void SaveErrorEventQueue( int ErrorType) {
000063 00               806         ALIGN   1
                        808         PUBLIC  _SaveErrorEventQueue
000064                  809 _SaveErrorEventQueue:
000064 0F30             813         PUSH.W  R4, R5
                        817 ; rs232err.c  245       
                        818 ; rs232err.c  246               if ((( QueueHead+1) % QUEUE_SIZE) != QueueTail) { // If queue not
                             full
000066 964842rr         820         MOV.B   ES,#SEG( _QueueHead )
00006A 9918rrrr         821         MOV.W   R1,#SOF( _QueueHead )
00006E 8A11             822         MOV.W   R1,[R1]
000070 A911             823         ADDS.W  R1,#01H
000072 8921             824         MOV.W   R2,R1
000074 8932             825         MOV.W   R3,R2
000076 9839             826         SEXT.W  R3
000078 E9290020         827         DIV.D   R2,#020H
00007C 964842rr         828         MOV.B   ES,#SEG( _QueueTail )
000080 9928rrrr         829         MOV.W   R2,#SOF( _QueueTail )
000084 8A22             830         MOV.W   R2,[R2]
000086 4932             831         CMP.W   R3,R2
000088 F318             832         BEQ     _5
                        833 ; rs232err.c  247       
                        834 ; rs232err.c  248                       QueueHead = ( ++QueueHead) % QUEUE_SIZE;
00008A 8921             836         MOV.W   R2,R1
00008C 8942             837         MOV.W   R4,R2
00008E 8954             838         MOV.W   R5,R4
000090 9859             839         SEXT.W  R5
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  16

ADDR   CODE            LINE SOURCELINE
000092 E9490020         840         DIV.D   R4,#020H
000096 964842rr         841         MOV.B   ES,#SEG( _QueueHead )
00009A 9918rrrr         842         MOV.W   R1,#SOF( _QueueHead )
00009E 8A29             843         MOV.W   [R1],R2
0000A0 964842rr         844         MOV.B   ES,#SEG( _QueueHead )
0000A4 9918rrrr         845         MOV.W   R1,#SOF( _QueueHead )
0000A8 8A59             846         MOV.W   [R1],R5
                        847 ; rs232err.c  249       
                        848 ; rs232err.c  250                       ErrorEventQueue[QueueHead] = ErrorType;
0000AA D951             850         ASL.W   R5,#01H
0000AC 8945             851         MOV.W   R4,R5
0000AE B950             852         MOVS.W  R5,#00H
0000B0 964842rr         853         MOV.B   ES,#SEG( _ErrorEventQueue )
0000B4 8D0Crrrr         854         MOV.W   [R4+SOF( _ErrorEventQueue )],R0
                        855 ; rs232err.c  251               }
0000B8 FE0C             857         BR      _6
0000B8 FE0C             857         BR      _6
0000BA                  858 _5:
                        859 ; rs232err.c  252               else
                        860 ; rs232err.c  253                       ErrorEventQueue[QueueHead] = QueueOverflow;
0000BA 964842rr         862         MOV.B   ES,#SEG( _QueueHead )
0000BE 9908rrrr         863         MOV.W   R0,#SOF( _QueueHead )
0000C2 8A00             864         MOV.W   R0,[R0]
0000C4 D901             866         ASL.W   R0,#01H
0000C6 B910             867         MOVS.W  R1,#00H
0000C8 964842rr         868         MOV.B   ES,#SEG( _ErrorEventQueue )
0000CC 9D08rrrr0027     869         MOV.W   [R0+SOF( _ErrorEventQueue )],#027H
0000CC 9D08rrrr0027     869         MOV.W   [R0+SOF( _ErrorEventQueue )],#027H
0000D2                  870 _6:
                        871 ; rs232err.c  254       
                        872 ; rs232err.c  255               UpdateSTBRegister();
0000D2 C50041           874         CALL    _UpdateSTBRegister
                        875 ; rs232err.c  256       }
0000D5 2F30             877         POP.W   R4, R5
0000D7 D680             879         RET
                        881 ; rs232err.c  257       
                        882 ; rs232err.c  258       /************************************************************************
                            ***/
                        883 ; rs232err.c  259       /*      UpdateQUESTRegister                                              
                                                                                        RS232ERR.C  */
                        884 ; rs232err.c  260       /*                                                                       
                                                                                                                             
                                                            */
                        885 ; rs232err.c  261       /* Author:              Kim Engedahl, DEV, 970630                        
                                                                                            */
                        886 ; rs232err.c  262       /* Revised:             970630                                           
                                                                                                                    */
                        887 ; rs232err.c  263       /*                                                                       
                                                                                                                             
                                                            */
                        888 ; rs232err.c  264       /*      Function:       Update the content of the Questionable status reg
                            ister           */
                        889 ; rs232err.c  265       /*      Remarks:                -                                        
                                                                                                                             
                                                    */
                        890 ; rs232err.c  266       /*      Returns:                A sum bit                                
                                                                                                                             
                                    */
                        891 ; rs232err.c  267       /*      Updates:                -                                        
                                                                                                                             
                                                    */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  17

ADDR   CODE            LINE SOURCELINE
                        892 ; rs232err.c  268       /************************************************************************
                            ***/
                        893 ; rs232err.c  269       bit UpdateQUESTRegister() {
0000D9 00               894         ALIGN   1
                        896         PUBLIC  _UpdateQUESTRegister
0000DA                  897 _UpdateQUESTRegister:
                        901 ; rs232err.c  270       
                        902 ; rs232err.c  271               QuestConditionReg=0;                            // 1. Condition, 
                            ie. directly hardware etc.
0000DA 964842rr         904         MOV.B   ES,#SEG( _QuestConditionReg )
0000DE 9908rrrr         905         MOV.W   R0,#SOF( _QuestConditionReg )
0000E2 BA00             906         MOV.W   [R0],#00H
                        907 ; rs232err.c  272               QuestPtransReg=0;                                       // 2. Pos
                            itive transition
0000E4 964842rr         909         MOV.B   ES,#SEG( _QuestPtransReg )
0000E8 9908rrrr         910         MOV.W   R0,#SOF( _QuestPtransReg )
0000EC BA00             911         MOV.W   [R0],#00H
                        912 ; rs232err.c  273               QuestNtransReg=0;                                       // 3. Neg
                            ative transition
0000EE 964842rr         914         MOV.B   ES,#SEG( _QuestNtransReg )
0000F2 9908rrrr         915         MOV.W   R0,#SOF( _QuestNtransReg )
0000F6 BA00             916         MOV.W   [R0],#00H
                        917 ; rs232err.c  274               QuestEventReg=0;                                        // 4. Eve
                            nt section
0000F8 964842rr         919         MOV.B   ES,#SEG( _QuestEventReg )
0000FC 9908rrrr         920         MOV.W   R0,#SOF( _QuestEventReg )
000100 BA00             921         MOV.W   [R0],#00H
                        922 ; rs232err.c  275               QuestEnableReg=0;                                       // 5. Ena
                            ble section
000102 964842rr         924         MOV.B   ES,#SEG( _QuestEnableReg )
000106 9908rrrr         925         MOV.W   R0,#SOF( _QuestEnableReg )
00010A BA00             926         MOV.W   [R0],#00H
                        927 ; rs232err.c  276       
                        928 ; rs232err.c  277               return( FALSE);
00010C 910800           930         MOV.B   R0L,#00H
                        931 ; rs232err.c  278       }
00010F D680             933         RET
                        935 ; rs232err.c  279       
                        936 ; rs232err.c  280       /************************************************************************
                            ***/
                        937 ; rs232err.c  281       /*      UpdateOPERRegister                                               
                                                                                        RS232ERR.C  */
                        938 ; rs232err.c  282       /*                                                                       
                                                                                                                             
                                                            */
                        939 ; rs232err.c  283       /* Author:              Kim Engedahl, DEV, 970630                        
                                                                                            */
                        940 ; rs232err.c  284       /* Revised:             970630                                           
                                                                                                                    */
                        941 ; rs232err.c  285       /*                                                                       
                                                                                                                             
                                                            */
                        942 ; rs232err.c  286       /*      Function:       Update the content of the Operation status regist
                            er                      */
                        943 ; rs232err.c  287       /*      Remarks:                -                                        
                                                                                                                             
                                                    */
                        944 ; rs232err.c  288       /*      Returns:                A sum bit                                
                                                                                                                             
                                    */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  18

ADDR   CODE            LINE SOURCELINE
                        945 ; rs232err.c  289       /*      Updates:                -                                        
                                                                                                                             
                                                    */
                        946 ; rs232err.c  290       /************************************************************************
                            ***/
                        947 ; rs232err.c  291       bit UpdateOPERRegister() {
000111 00               948         ALIGN   1
                        950         PUBLIC  _UpdateOPERRegister
000112                  951 _UpdateOPERRegister:
                        955 ; rs232err.c  292       
                        956 ; rs232err.c  293               OperConditionReg=0;                             // 1. Condition, 
                            ie. directly hardware etc.
000112 964842rr         958         MOV.B   ES,#SEG( _OperConditionReg )
000116 9908rrrr         959         MOV.W   R0,#SOF( _OperConditionReg )
00011A BA00             960         MOV.W   [R0],#00H
                        961 ; rs232err.c  294               OperPtransReg=0;                                        // 2. Pos
                            itive transition
00011C 964842rr         963         MOV.B   ES,#SEG( _OperPtransReg )
000120 9908rrrr         964         MOV.W   R0,#SOF( _OperPtransReg )
000124 BA00             965         MOV.W   [R0],#00H
                        966 ; rs232err.c  295               OperNtransReg=0;                                        // 3. Neg
                            ative transition
000126 964842rr         968         MOV.B   ES,#SEG( _OperNtransReg )
00012A 9908rrrr         969         MOV.W   R0,#SOF( _OperNtransReg )
00012E BA00             970         MOV.W   [R0],#00H
                        971 ; rs232err.c  296               OperEventReg=0;                                 // 4. Event secti
                            on
000130 964842rr         973         MOV.B   ES,#SEG( _OperEventReg )
000134 9908rrrr         974         MOV.W   R0,#SOF( _OperEventReg )
000138 BA00             975         MOV.W   [R0],#00H
                        976 ; rs232err.c  297               OperEnableReg=0;                                        // 5. Ena
                            ble section
00013A 964842rr         978         MOV.B   ES,#SEG( _OperEnableReg )
00013E 9908rrrr         979         MOV.W   R0,#SOF( _OperEnableReg )
000142 BA00             980         MOV.W   [R0],#00H
                        981 ; rs232err.c  298       
                        982 ; rs232err.c  299               return( FALSE);
000144 910800           984         MOV.B   R0L,#00H
                        985 ; rs232err.c  300       }
000147 D680             987         RET
                        989 ; rs232err.c  301       
                        990 ; rs232err.c  302       /************************************************************************
                            ***/
                        991 ; rs232err.c  303       /*      UpdateESRRegister                                                
                                                                                                RS232ERR.C  */
                        992 ; rs232err.c  304       /*                                                                       
                                                                                                                             
                                                            */
                        993 ; rs232err.c  305       /* Author:              Kim Engedahl, DEV, 970630                        
                                                                                            */
                        994 ; rs232err.c  306       /* Revised:             970630                                           
                                                                                                                    */
                        995 ; rs232err.c  307       /*                                                                       
                                                                                                                             
                                                            */
                        996 ; rs232err.c  308       /*      Function:       Update the content of the ESR register           
                                                                            */
                        997 ; rs232err.c  309       /*      Remarks:                -                                        
                                                                                                                             
                                                    */
                        998 ; rs232err.c  310       /*      Returns:                The content of the ESR register          
                                                                                            */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  19

ADDR   CODE            LINE SOURCELINE
                        999 ; rs232err.c  311       /*      Updates:                -                                        
                                                                                                                             
                                                    */
                       1000 ; rs232err.c  312       /************************************************************************
                            ***/
                       1001 ; rs232err.c  313       UC UpdateESRRegister() {
000149 00              1002         ALIGN   1
                       1004         PUBLIC  _UpdateESRRegister
00014A                 1005 _UpdateESRRegister:
                       1009 ; rs232err.c  314                                                                                
                                    // Bit 7: Power On
                       1010 ; rs232err.c  315                                                                                
                                    // Bit 6: User request
                       1011 ; rs232err.c  316                                                                                
                                    // Bit 5: Command error
                       1012 ; rs232err.c  317                                                                                
                                    // Bit 4: Execution error
                       1013 ; rs232err.c  318                                                                                
                                    // Bit 3: Device dependent error
                       1014 ; rs232err.c  319                                                                                
                                    // Bit 2: Queue error
                       1015 ; rs232err.c  320                                                                                
                                    // Bit 1: Request control
                       1016 ; rs232err.c  321                                                                                
                                    // Bit 0: Operation complete
                       1017 ; rs232err.c  322               return( ESRReg);
00014A 964842rr        1019         MOV.B   ES,#SEG( _ESRReg )
00014E 9908rrrr        1020         MOV.W   R0,#SOF( _ESRReg )
000152 8200            1021         MOV.B   R0L,[R0]
                       1022 ; rs232err.c  323       }
000154 D680            1024         RET
                       1026 ; rs232err.c  324       
                       1027 ; rs232err.c  325       /************************************************************************
                            ***/
                       1028 ; rs232err.c  326       /*      UpdateSTBRegister                                                
                                                                                                RS232ERR.C  */
                       1029 ; rs232err.c  327       /*                                                                       
                                                                                                                             
                                                            */
                       1030 ; rs232err.c  328       /* Author:              Kim Engedahl, DEV, 970630                        
                                                                                            */
                       1031 ; rs232err.c  329       /* Revised:             970630                                           
                                                                                                                    */
                       1032 ; rs232err.c  330       /*                                                                       
                                                                                                                             
                                                            */
                       1033 ; rs232err.c  331       /*      Function:       Update the content of the Status Byte register   
                                                            */
                       1034 ; rs232err.c  332       /*      Remarks:                This command also updates the ESR registe
                            r, the  operation-      */
                       1035 ; rs232err.c  333       /*                                      register and the questionable reg
                            ister.                                                  */
                       1036 ; rs232err.c  334       /*      Returns:                -                                        
                                                                                                                             
                                                    */
                       1037 ; rs232err.c  335       /*      Updates:                STBReg, ESRReg, QUESTReg & OPERReg       
                                                                                            */
                       1038 ; rs232err.c  336       /************************************************************************
                            ***/
                       1039 ; rs232err.c  337       void UpdateSTBRegister() {
                       1040         ALIGN   1
                       1042         PUBLIC  _UpdateSTBRegister
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  20

ADDR   CODE            LINE SOURCELINE
000156                 1043 _UpdateSTBRegister:
                       1047 ; rs232err.c  338       
                       1048 ; rs232err.c  339               STBReg &= 0x07;                                                 /
                            / Clear the MSS-, ESR- & MAV-bit &
000156 964842rr        1050         MOV.B   ES,#SEG( _STBReg )
00015A 9908rrrr        1051         MOV.W   R0,#SOF( _STBReg )
00015E 8200            1052         MOV.B   R0L,[R0]
000160 910507          1053         AND.B   R0L,#07H
000163 964842rr        1054         MOV.B   ES,#SEG( _STBReg )
000167 9918rrrr        1055         MOV.W   R1,#SOF( _STBReg )
00016B 8209            1056         MOV.B   [R1],R0L
                       1057 ; rs232err.c  340                                                                                
                                                            //  operation & questionable bits
                       1058 ; rs232err.c  341               if ( UpdateOPERRegister())
00016D C5FFD1          1060         CALL    _UpdateOPERRegister
000170 6100            1061         OR.B    R0L,R0L
000172 F30C            1062         BEQ     _8
                       1063 ; rs232err.c  342                       STBReg |= 0x80;
000174 964842rr        1065         MOV.B   ES,#SEG( _STBReg )
000178 9908rrrr        1066         MOV.W   R0,#SOF( _STBReg )
00017C 8200            1067         MOV.B   R0L,[R0]
00017E 910680          1068         OR.B    R0L,#080H
000181 964842rr        1069         MOV.B   ES,#SEG( _STBReg )
000185 9918rrrr        1070         MOV.W   R1,#SOF( _STBReg )
000189 8209            1071         MOV.B   [R1],R0L
000189 820900          1071         MOV.B   [R1],R0L
00018C                 1072 _8:
                       1073 ; rs232err.c  343       
                       1074 ; rs232err.c  344               if ( STBReg & SREReg & 0xBF)                    //      Calculate
                             the MSS bit(6) in STB
00018C 964842rr        1076         MOV.B   ES,#SEG( _STBReg )
000190 9908rrrr        1077         MOV.W   R0,#SOF( _STBReg )
000194 8200            1078         MOV.B   R0L,[R0]
000196 964842rr        1079         MOV.B   ES,#SEG( _SREReg )
00019A 9918rrrr        1080         MOV.W   R1,#SOF( _SREReg )
00019E 8211            1081         MOV.B   R0H,[R1]
0001A0 5110            1082         AND.B   R0H,R0L
0001A2 964842rr        1083         MOV.B   ES,#SEG( _STBReg )
0001A6 9918rrrr        1084         MOV.W   R1,#SOF( _STBReg )
0001AA 8209            1085         MOV.B   [R1],R0L
0001AC 9115BF          1086         AND.B   R0H,#0BFH
0001AF F307            1087         BEQ     _9
                       1088 ; rs232err.c  345                       STBReg |= 0x40;
0001B1 910640          1090         OR.B    R0L,#040H
0001B4 964842rr        1091         MOV.B   ES,#SEG( _STBReg )
0001B8 9918rrrr        1092         MOV.W   R1,#SOF( _STBReg )
0001BC 8209            1093         MOV.B   [R1],R0L
0001BC 8209            1093         MOV.B   [R1],R0L
0001BE                 1094 _9:
                       1095 ; rs232err.c  346       
                       1096 ; rs232err.c  347               if ( UpdateESRRegister() & ESEReg)      //      Calculate the ESB
                             bit(5) in STB
0001BE C5FFC5          1098         CALL    _UpdateESRRegister
0001C1 964842rr        1099         MOV.B   ES,#SEG( _ESEReg )
0001C5 9918rrrr        1100         MOV.W   R1,#SOF( _ESEReg )
0001C9 8211            1101         MOV.B   R0H,[R1]
0001CB 5101            1102         AND.B   R0L,R0H
0001CD F30C            1103         BEQ     _10
                       1104 ; rs232err.c  348                       STBReg |= 0x20;
0001CF 964842rr        1106         MOV.B   ES,#SEG( _STBReg )
0001D3 9908rrrr        1107         MOV.W   R0,#SOF( _STBReg )
0001D7 8200            1108         MOV.B   R0L,[R0]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  21

ADDR   CODE            LINE SOURCELINE
0001D9 910620          1109         OR.B    R0L,#020H
0001DC 964842rr        1110         MOV.B   ES,#SEG( _STBReg )
0001E0 9918rrrr        1111         MOV.W   R1,#SOF( _STBReg )
0001E4 8209            1112         MOV.B   [R1],R0L
0001E4 8209            1112         MOV.B   [R1],R0L
0001E6                 1113 _10:
                       1114 ; rs232err.c  349       
                       1115 ; rs232err.c  350               if ( QueueHead != QueueTail)                    //      Calculate
                             the MAV bit(4) in STB
0001E6 964842rr        1117         MOV.B   ES,#SEG( _QueueHead )
0001EA 9908rrrr        1118         MOV.W   R0,#SOF( _QueueHead )
0001EE 8A00            1119         MOV.W   R0,[R0]
0001F0 964842rr        1120         MOV.B   ES,#SEG( _QueueTail )
0001F4 9918rrrr        1121         MOV.W   R1,#SOF( _QueueTail )
0001F8 8A11            1122         MOV.W   R1,[R1]
0001FA 4901            1123         CMP.W   R0,R1
0001FC F30C            1124         BEQ     _11
                       1125 ; rs232err.c  351                       STBReg |= 0x10;
0001FE 964842rr        1127         MOV.B   ES,#SEG( _STBReg )
000202 9908rrrr        1128         MOV.W   R0,#SOF( _STBReg )
000206 8200            1129         MOV.B   R0L,[R0]
000208 910610          1130         OR.B    R0L,#010H
00020B 964842rr        1131         MOV.B   ES,#SEG( _STBReg )
00020F 9918rrrr        1132         MOV.W   R1,#SOF( _STBReg )
000213 8209            1133         MOV.B   [R1],R0L
000213 820900          1133         MOV.B   [R1],R0L
000216                 1134 _11:
                       1135 ; rs232err.c  352       
                       1136 ; rs232err.c  353               if ( UpdateQUESTRegister())
000216 C5FF61          1138         CALL    _UpdateQUESTRegister
000219 6100            1139         OR.B    R0L,R0L
00021B F30C            1140         BEQ     _12
                       1141 ; rs232err.c  354                       STBReg |= 0x08;
00021D 964842rr        1143         MOV.B   ES,#SEG( _STBReg )
000221 9908rrrr        1144         MOV.W   R0,#SOF( _STBReg )
000225 8200            1145         MOV.B   R0L,[R0]
000227 910608          1146         OR.B    R0L,#08H
00022A 964842rr        1147         MOV.B   ES,#SEG( _STBReg )
00022E 9918rrrr        1148         MOV.W   R1,#SOF( _STBReg )
000232 8209            1149         MOV.B   [R1],R0L
000232 8209            1149         MOV.B   [R1],R0L
000234                 1150 _12:
                       1151 ; rs232err.c  355       }
000234 D680            1153         RET
000000                 1159 RS232ERR_CLR_FA SEGMENT HDATA INSEGMENT CLEAR
000000                 1160         RSEG    RS232ERR_CLR_FA
                       1161         PUBLIC  _QuestPtransReg
                       1162         ALIGN   1
000000                 1163 _QuestPtransReg:        DS      2
   |  RESERVED             
000001
                       1166         PUBLIC  _OperEnableReg
                       1167         ALIGN   1
000002                 1168 _OperEnableReg: DS      2
   |  RESERVED             
000003
                       1171         PUBLIC  _OperPtransReg
                       1172         ALIGN   1
000004                 1173 _OperPtransReg: DS      2
   |  RESERVED             
000005
                       1176         PUBLIC  _ESRReg
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  22

ADDR   CODE            LINE SOURCELINE
000006 RESERVED        1177 _ESRReg:        DS      1
000006
                       1180         PUBLIC  _STBReg
000007 RESERVED        1181 _STBReg:        DS      1
000007
                       1184         PUBLIC  _ESEReg
000008 RESERVED        1185 _ESEReg:        DS      1
000008
                       1188         PUBLIC  _OperEventReg
000009 RESERVED        1189         ALIGN   1
000009
00000A                 1190 _OperEventReg:  DS      2
   |  RESERVED             
00000B
                       1193         PUBLIC  _SREReg
00000C RESERVED        1194 _SREReg:        DS      1
00000C
                       1197         PUBLIC  _OperNtransReg
00000D RESERVED        1198         ALIGN   1
00000D
00000E                 1199 _OperNtransReg: DS      2
   |  RESERVED             
00000F
                       1202         PUBLIC  _QuestNtransReg
                       1203         ALIGN   1
000010                 1204 _QuestNtransReg:        DS      2
   |  RESERVED             
000011
                       1207         PUBLIC  _QuestEnableReg
                       1208         ALIGN   1
000012                 1209 _QuestEnableReg:        DS      2
   |  RESERVED             
000013
                       1212         ALIGN   1
000014                 1213 _ErrorEventQueue:       DS      64
   |  RESERVED             
000053
                       1216         PUBLIC  _QuestConditionReg
                       1217         ALIGN   1
000054                 1218 _QuestConditionReg:     DS      2
   |  RESERVED             
000055
                       1221         PUBLIC  _OperConditionReg
                       1222         ALIGN   1
000056                 1223 _OperConditionReg:      DS      2
   |  RESERVED             
000057
                       1226         PUBLIC  _SCPIError
                       1227         ALIGN   1
000058                 1228 _SCPIError:     DS      2
   |  RESERVED             
000059
                       1231         PUBLIC  _QuestEventReg
                       1232         ALIGN   1
00005A                 1233 _QuestEventReg: DS      2
   |  RESERVED             
00005B
                       1234         EXTRN   DATA(__lc_ub_xvwbuffer)
                       1235         EXTRN   DATA(__lc_ue_xvwbuffer)
                       1236         CALLS   'ResetErrorEventQueue', 'UpdateSTBRegister'
                       1237         CALLS   'ReadErrorEventQueue', 'UpdateSTBRegister'
                       1238         CALLS   'SaveErrorEventQueue', 'UpdateSTBRegister'
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  23

ADDR   CODE            LINE SOURCELINE
                       1239         CALLS   'UpdateSTBRegister', 'UpdateOPERRegister'
                       1240         CALLS   'UpdateSTBRegister', 'UpdateESRRegister'
                       1241         CALLS   'UpdateSTBRegister', 'UpdateQUESTRegister'
