; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -I..\..\rtxcdef\xa
;          -I..\..\rtxc\xa\include -I..\..\code\include\1_0 -I..\..\app_spec\xa
;          -Ml -O2 -s
$CASE
$NOZPAGE
	NAME	RS232CMD
	SYMB	TOOL, "XA C compiler v2.0", 1
	SYMB	TYPE, 256, "bit", 'g', 0, 1
	SYMB	FILE, "..\\..\\code\\interp\\work\\rs232cmd.c"
; rs232cmd.c    1	/* MODULE:                                                                  */
; rs232cmd.c    2	/*   r232cmd.c - RS232 remote commands.                            			 */
; rs232cmd.c    3	/****************************************************************************/
; rs232cmd.c    4	/* FUNCTIONS:                                                               */
; rs232cmd.c    5	/*                                                                          */
; rs232cmd.c    6	/* TASKS:                                                                   */
; rs232cmd.c    7	/*                                                                          */
; rs232cmd.c    8	/* NOTES:                                                                   */
; rs232cmd.c    9	/*                                                                          */
; rs232cmd.c   10	/****************************************************************************/
; rs232cmd.c   11	/*
; rs232cmd.c   12	 *   PTV software for PT5201
; rs232cmd.c   13	 *   Copyright (c) 
; rs232cmd.c   14	 *   ProTeleVision Technologies A/S.
; rs232cmd.c   15	 *   ALL RIGHTS RESERVED
; rs232cmd.c   16	*/
; rs232cmd.c   17	/****************************************************************************/
; rs232cmd.c   18	
; rs232cmd.c   19	/****************************************************************************/
; rs232cmd.c   20	/* Include files:							  													 */
; rs232cmd.c   21	
; rs232cmd.c   22	#include <string.h>
	SYMB	FILE, "c:\\cxa\\include\\string.h"
	SYMB	TYPE, 257, "size_t", 'T', #18
	SYMB	ENDF
; rs232cmd.c   23	#include <ctype.h>
	SYMB	FILE, "c:\\cxa\\include\\ctype.h"
	SYMB	ENDF
; rs232cmd.c   24	#include <stdio.h>
	SYMB	FILE, "c:\\cxa\\include\\stdio.h"
	SYMB	FILE, "c:\\cxa\\include\\stdarg.h"
	SYMB	ENDF
	SYMB	TYPE, 258, 'n', #2, 130
	SYMB	TYPE, 259, 'P', #258
	SYMB	TYPE, 260, "_iobuf", 'S', 14,\
		 "_ptr", #259, 0,\
		 "_cnt", #16, 4,\
		 "_base", #259, 6,\
		 "_flag", #2, 10,\
		 "_file", #2, 11,\
		 "_bufsiz", #16, 12
	SYMB	TYPE, 261, "FILE", 'T', #260
	SYMB	TYPE, 262, 'n', #1, 130
	SYMB	TYPE, 263, 'P', #262
	SYMB	TYPE, 264, 'Z', #263, 0
	SYMB	TYPE, 266, "va_list", 'T', #264
	SYMB	TYPE, 267, "fpos_t", 'T', #7
	SYMB	ENDF
; rs232cmd.c   25	#include <stdlib.h>
	SYMB	FILE, "c:\\cxa\\include\\stdlib.h"
	SYMB	FILE, "c:\\cxa\\include\\limits.h"
	SYMB	ENDF
	SYMB	TYPE, 268, 'S', 4,\
		 "quot", #16, 0,\
		 "rem", #16, 2
	SYMB	TYPE, 269, "div_t", 'T', #268
	SYMB	TYPE, 270, 'S', 8,\
		 "quot", #6, 0,\
		 "rem", #6, 4
	SYMB	TYPE, 271, "ldiv_t", 'T', #270
	SYMB	TYPE, 272, "wchar_t", 'T', #5
	SYMB	ENDF
; rs232cmd.c   26	#include <math.h>
	SYMB	FILE, "c:\\cxa\\include\\math.h"
	SYMB	ENDF
; rs232cmd.c   27	
; rs232cmd.c   28	#include "config.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\config.h"
	SYMB	ENDF
; rs232cmd.c   29	#include "define.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\define.h"
	SYMB	ENDF
; rs232cmd.c   30	#include "rtxcobj.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\rtxcobj.h"
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\rtxcapi.h"
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\typedef.h"
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 273, "KOBJNUM", 'T', #3
	SYMB	TYPE, 274, "TASK", 'T', #2
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\rtxstruc.h"
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 275, "KSNUM", 'T', #3
	SYMB	TYPE, 276, "PRIORITY", 'T', #274
	SYMB	TYPE, 277, "TSTATE", 'T', #5
	SYMB	TYPE, 278, "TSLICE", 'T', #3
	SYMB	TYPE, 280, 'n', #279, 130
	SYMB	TYPE, 281, 'P', #280
	SYMB	TYPE, 283, 'n', #282, 130
	SYMB	TYPE, 284, 'P', #283
	SYMB	TYPE, 285, 'n', #275, 130
	SYMB	TYPE, 286, 'P', #285
	SYMB	TYPE, 287, 'X', 12, #1, 30, 0
	SYMB	TYPE, 288, 'n', #287, 129
	SYMB	TYPE, 289, 'P', #288
	SYMB	TYPE, 290, "frame", 'S', 24,\
		 "es", #3, 0,\
		 "cs", #3, 1,\
		 "ssel", #3, 2,\
		 "ds", #3, 3,\
		 "pksnum", #286, 4,\
		 "R2", #18, 8,\
		 "R3", #18, 10,\
		 "R4", #18, 12,\
		 "R5", #18, 14,\
		 "R6", #18, 16,\
		 "psw", #18, 18,\
		 "pc", #289, 20
	SYMB	TYPE, 291, 'n', #290, 130
	SYMB	TYPE, 292, 'P', #291
	SYMB	TYPE, 293, 'X', 12, #1, 30, 0
	SYMB	TYPE, 294, 'n', #293, 129
	SYMB	TYPE, 295, 'P', #294
	SYMB	TYPE, 279, "tcb", 'S', 36,\
		 "flink", #281, 0,\
		 "blink", #281, 4,\
		 "pclkblk", #284, 8,\
		 "task", #274, 12,\
		 "priority", #276, 13,\
		 "sp", #292, 14,\
		 "status", #277, 18,\
		 "pc_t0", #295, 20,\
		 "stackbase", #259, 24,\
		 "stacksize", #257, 28,\
		 "tslice", #278, 30,\
		 "newslice", #278, 31,\
		 "arg", #263, 32
	SYMB	TYPE, 296, "TCB", 'T', #279
	SYMB	TYPE, 297, "SEMA", 'T', #273
	SYMB	TYPE, 298, "MAP", 'T', #273
	SYMB	TYPE, 300, 'n', #299, 130
	SYMB	TYPE, 301, 'P', #300
	SYMB	TYPE, 299, "rtxcmsg", 'S', 8,\
		 "link", #301, 0,\
		 "task", #274, 4,\
		 "priority", #276, 5,\
		 "sema", #297, 6
	SYMB	TYPE, 302, "RTXCMSG", 'T', #299
	SYMB	TYPE, 303, "TICKS", 'T', #16
	SYMB	TYPE, 304, 'N',\
		 "DELAY_OBJ", 0,\
		 "SEMAPHORE_OBJ", 1,\
		 "PARTITION_OBJ", 2,\
		 "QUEUE_OBJ", 3,\
		 "RESOURCE_OBJ", 4,\
		 "MAILBOX_OBJ", 5,\
		 "TIMER_OBJ", 6
	SYMB	TYPE, 305, "OBJTYPE", 'T', #304
	SYMB	TYPE, 282, "clkblk", 'S', 18,\
		 "flink", #284, 0,\
		 "blink", #284, 4,\
		 "remain", #303, 8,\
		 "recycle", #303, 10,\
		 "task", #274, 12,\
		 "state", #2, 13,\
		 "objtype", #305, 14,\
		 "objid", #273, 16
	SYMB	TYPE, 306, 'N',\
		 "PRIORITY_INVERSION_OFF", 0,\
		 "PRIORITY_INVERSION_ON", 1
	SYMB	TYPE, 307, "RESATTR", 'T', #306
	SYMB	ENDF
	SYMB	TYPE, 308, 'N',\
		 "RC_GOOD", 0,\
		 "RC_WAIT_CONFLICT", 1,\
		 "RC_NO_TIMERS", 2,\
		 "RC_TIMER_INACTIVE", 3,\
		 "RC_TIMER_ILLEGAL", 4,\
		 "RC_TIMEOUT", 5,\
		 "RC_QUEUE_FULL", 6,\
		 "RC_QUEUE_EMPTY", 7,\
		 "RC_ILLEGAL_QUEUE_SIZE", 8,\
		 "RC_BUSY", 9,\
		 "RC_NESTED", 10,\
		 "RC_ILLEGAL_TASK", 11,\
		 "RC_ACTIVE_TASK", 12,\
		 "RC_NO_YIELD", 13,\
		 "RC_MISSED_EVENT", 14
	SYMB	TYPE, 309, "KSRC", 'T', #308
	SYMB	TYPE, 310, "SSTATE", 'T', #274
	SYMB	TYPE, 311, "MBOX", 'T', #273
	SYMB	TYPE, 312, "QUEUE", 'T', #273
	SYMB	TYPE, 313, 'N',\
		 "QNE", 0,\
		 "QNF", 1,\
		 "QF", 2,\
		 "QE", 3
	SYMB	TYPE, 314, "QCOND", 'T', #313
	SYMB	TYPE, 315, "RESOURCE", 'T', #273
	SYMB	TYPE, 316, "CLKBLK", 'T', #282
	SYMB	TYPE, 317, "time_t", 'T', #6
	SYMB	TYPE, 318, "FRAME", 'T', #290
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\ctask.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\csema.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cres.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cqueue.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cpart.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cmbox.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cclock.h"
	SYMB	ENDF
	SYMB	TYPE, 320, 'n', #319, 130
	SYMB	TYPE, 321, 'P', #320
	SYMB	TYPE, 319, 'X', 12, #1, 30, 2, #321, #259
	SYMB	TYPE, 323, 'n', #322, 129
	SYMB	TYPE, 324, 'P', #323
	SYMB	TYPE, 325, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 326, 'n', #325, 129
	SYMB	TYPE, 327, 'P', #326
	SYMB	TYPE, 328, 'n', #6, 130
	SYMB	TYPE, 329, 'P', #328
	SYMB	TYPE, 328, 'X', 12, #16, 30, 2, #321, #329
	SYMB	TYPE, 331, 'n', #330, 129
	SYMB	TYPE, 332, 'P', #331
	SYMB	TYPE, 333, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 334, 'n', #333, 129
	SYMB	TYPE, 335, 'P', #334
	SYMB	TYPE, 336, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 337, 'n', #336, 129
	SYMB	TYPE, 338, 'P', #337
	SYMB	TYPE, 339, 'X', 12, #16, 30, 1, #321
	SYMB	TYPE, 340, 'n', #339, 129
	SYMB	TYPE, 341, 'P', #340
	SYMB	TYPE, 319, "TEvent", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TEvent", #324, 2,\
		 "_TEvent", #327, 6,\
		 "Wait", #332, 10,\
		 "Set", #335, 14,\
		 "Clear", #338, 18,\
		 "IsSet", #341, 22,\
		 "ID", #297, 26,\
		 "Name", #259, 28
	SYMB	TYPE, 342, "TEvent", 'T', #319
	SYMB	TYPE, 344, 'n', #343, 130
	SYMB	TYPE, 345, 'P', #344
	SYMB	TYPE, 343, 'X', 12, #1, 30, 1, #345
	SYMB	TYPE, 347, 'n', #346, 129
	SYMB	TYPE, 348, 'P', #347
	SYMB	TYPE, 349, 'X', 12, #1, 30, 1, #345
	SYMB	TYPE, 350, 'n', #349, 129
	SYMB	TYPE, 351, 'P', #350
	SYMB	TYPE, 352, 'n', #342, 130
	SYMB	TYPE, 353, 'P', #352
	SYMB	TYPE, 352, 'X', 12, #16, 30, 2, #345, #353
	SYMB	TYPE, 355, 'n', #354, 129
	SYMB	TYPE, 356, 'P', #355
	SYMB	TYPE, 357, 'X', 12, #1, 30, 2, #345, #353
	SYMB	TYPE, 358, 'n', #357, 129
	SYMB	TYPE, 359, 'P', #358
	SYMB	TYPE, 360, 'X', 12, #16, 30, 2, #345, #353
	SYMB	TYPE, 361, 'n', #360, 129
	SYMB	TYPE, 362, 'P', #361
	SYMB	TYPE, 363, 'X', 12, #353, 30, 2, #345, #329
	SYMB	TYPE, 364, 'n', #363, 129
	SYMB	TYPE, 365, 'P', #364
	SYMB	TYPE, 366, 'Z', #2, 95
	SYMB	TYPE, 343, "TEventList", 'S', 122,\
		 "ObjectID", #16, 0,\
		 "TEventList", #348, 2,\
		 "_TEventList", #351, 6,\
		 "Append", #356, 10,\
		 "Clear", #359, 14,\
		 "InList", #362, 18,\
		 "Wait", #365, 22,\
		 "Align", #366, 26
	SYMB	TYPE, 368, "TEventList", 'T', #343
	SYMB	TYPE, 370, 'n', #369, 130
	SYMB	TYPE, 371, 'P', #370
	SYMB	TYPE, 369, 'X', 12, #1, 30, 2, #371, #259
	SYMB	TYPE, 373, 'n', #372, 129
	SYMB	TYPE, 374, 'P', #373
	SYMB	TYPE, 375, 'X', 12, #1, 30, 1, #371
	SYMB	TYPE, 376, 'n', #375, 129
	SYMB	TYPE, 377, 'P', #376
	SYMB	TYPE, 378, 'X', 12, #1, 30, 1, #371
	SYMB	TYPE, 379, 'n', #378, 129
	SYMB	TYPE, 380, 'P', #379
	SYMB	TYPE, 381, 'X', 12, #1, 30, 1, #371
	SYMB	TYPE, 382, 'n', #381, 129
	SYMB	TYPE, 383, 'P', #382
	SYMB	TYPE, 384, 'X', 12, #16, 30, 1, #371
	SYMB	TYPE, 385, 'n', #384, 129
	SYMB	TYPE, 386, 'P', #385
	SYMB	TYPE, 369, "TResource", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TResource", #374, 2,\
		 "_TResource", #377, 6,\
		 "Lock", #380, 10,\
		 "Unlock", #383, 14,\
		 "Owner", #386, 18,\
		 "ID", #315, 22,\
		 "Name", #259, 24
	SYMB	TYPE, 387, "TResource", 'T', #369
	SYMB	TYPE, 388, 'X', 12, #1, 30, 0
	SYMB	TYPE, 389, 'n', #388, 129
	SYMB	TYPE, 390, 'P', #389
	SYMB	TYPE, 392, 'n', #391, 130
	SYMB	TYPE, 393, 'P', #392
	SYMB	TYPE, 388, 'X', 12, #1, 30, 3, #393, #16, #390
	SYMB	TYPE, 395, 'n', #394, 129
	SYMB	TYPE, 396, 'P', #395
	SYMB	TYPE, 397, 'X', 12, #1, 30, 1, #393
	SYMB	TYPE, 398, 'n', #397, 129
	SYMB	TYPE, 399, 'P', #398
	SYMB	TYPE, 400, 'X', 12, #1, 30, 1, #393
	SYMB	TYPE, 401, 'n', #400, 129
	SYMB	TYPE, 402, 'P', #401
	SYMB	TYPE, 403, 'X', 12, #1, 30, 2, #393, #16
	SYMB	TYPE, 404, 'n', #403, 129
	SYMB	TYPE, 405, 'P', #404
	SYMB	TYPE, 406, 'X', 12, #1, 30, 1, #393
	SYMB	TYPE, 407, 'n', #406, 129
	SYMB	TYPE, 408, 'P', #407
	SYMB	TYPE, 409, 'X', 12, #16, 30, 1, #393
	SYMB	TYPE, 410, 'n', #409, 129
	SYMB	TYPE, 411, 'P', #410
	SYMB	TYPE, 412, 'X', 12, #1, 30, 2, #393, #16
	SYMB	TYPE, 413, 'n', #412, 129
	SYMB	TYPE, 414, 'P', #413
	SYMB	TYPE, 391, "TThread", 'S', 36,\
		 "ObjectID", #16, 0,\
		 "TThread", #396, 2,\
		 "Execute", #399, 6,\
		 "Terminate", #402, 10,\
		 "Suspend", #405, 14,\
		 "Resume", #408, 18,\
		 "GetPriority", #411, 22,\
		 "SetPriority", #414, 26,\
		 "ID", #274, 30,\
		 "Status", #2, 31,\
		 "Stack", #259, 32
	SYMB	TYPE, 415, "TThread", 'T', #391
	SYMB	TYPE, 417, 'n', #416, 130
	SYMB	TYPE, 418, 'P', #417
	SYMB	TYPE, 416, 'X', 12, #1, 30, 1, #418
	SYMB	TYPE, 420, 'n', #419, 129
	SYMB	TYPE, 421, 'P', #420
	SYMB	TYPE, 422, 'X', 12, #1, 30, 1, #418
	SYMB	TYPE, 423, 'n', #422, 129
	SYMB	TYPE, 424, 'P', #423
	SYMB	TYPE, 425, 'X', 12, #1, 30, 2, #418, #16
	SYMB	TYPE, 426, 'n', #425, 129
	SYMB	TYPE, 427, 'P', #426
	SYMB	TYPE, 428, 'X', 12, #16, 30, 1, #418
	SYMB	TYPE, 429, 'n', #428, 129
	SYMB	TYPE, 430, 'P', #429
	SYMB	TYPE, 431, 'X', 12, #1, 30, 2, #418, #16
	SYMB	TYPE, 432, 'n', #431, 129
	SYMB	TYPE, 433, 'P', #432
	SYMB	TYPE, 434, 'n', #316, 130
	SYMB	TYPE, 435, 'P', #434
	SYMB	TYPE, 416, "TTimer", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TTimer", #421, 2,\
		 "_TTimer", #424, 6,\
		 "SetPeriod", #427, 10,\
		 "GetPeriod", #430, 14,\
		 "Tick", #433, 18,\
		 "TimeOut", #353, 22,\
		 "Period", #4, 26,\
		 "Handle", #435, 28
	SYMB	TYPE, 436, "TTimer", 'T', #416
	SYMB	TYPE, 438, 'n', #437, 130
	SYMB	TYPE, 439, 'P', #438
	SYMB	TYPE, 437, 'X', 12, #1, 30, 3, #439, #16, #16
	SYMB	TYPE, 441, 'n', #440, 129
	SYMB	TYPE, 442, 'P', #441
	SYMB	TYPE, 443, 'X', 12, #1, 30, 1, #439
	SYMB	TYPE, 444, 'n', #443, 129
	SYMB	TYPE, 445, 'P', #444
	SYMB	TYPE, 446, 'X', 12, #259, 30, 2, #439, #263
	SYMB	TYPE, 447, 'n', #446, 129
	SYMB	TYPE, 448, 'P', #447
	SYMB	TYPE, 449, 'X', 12, #1, 30, 2, #439, #263
	SYMB	TYPE, 450, 'n', #449, 129
	SYMB	TYPE, 451, 'P', #450
	SYMB	TYPE, 437, "TStream", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TStream", #442, 2,\
		 "_TStream", #445, 6,\
		 "Get", #448, 10,\
		 "Put", #451, 14,\
		 "ID", #312, 18,\
		 "Width", #16, 20,\
		 "Depth", #16, 22,\
		 "Handle", #259, 24
	SYMB	TYPE, 452, "TStream", 'T', #437
	SYMB	ENDF
; rs232cmd.c   31	#include "rs232par.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\rs232par.h"
	SYMB	ENDF
; rs232cmd.c   32	#include "rs232err.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\rs232err.h"
	SYMB	ENDF
; rs232cmd.c   33	#include "rs232cmd.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\rs232cmd.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\define.h"
	SYMB	ENDF
	SYMB	ENDF
; rs232cmd.c   34	#include "util.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\util.h"
	SYMB	ENDF
; rs232cmd.c   35	#include "rs232.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\rs232.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\define.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_0\\rtxcobj.h"
	SYMB	ENDF
	SYMB	ENDF
; rs232cmd.c   36	#include "i2c_drv.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\i2c_drv.h"
	SYMB	ENDF
; rs232cmd.c   37	#include "sio0drv.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\sio0drv.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\define.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_0\\rtxcobj.h"
	SYMB	ENDF
	SYMB	ENDF
; rs232cmd.c   38	#include "instru.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\instru.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\nv_drv.h"
	SYMB	TYPE, 453, "NvPointer", 'T', #18
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_0\\genlock.h"
	SYMB	TYPE, 454, 'S', 6,\
		 "System", #3, 0,\
		 "Delay", #7, 2
	SYMB	TYPE, 455, "GenlockObject", 'T', #454
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_0\\bb.h"
	SYMB	TYPE, 456, 'S', 8,\
		 "System", #3, 0,\
		 "Delay", #7, 2,\
		 "ScHPhase", #16, 6
	SYMB	TYPE, 457, "BBObject", 'T', #456
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_0\\cbar.h"
	SYMB	TYPE, 458, 'S', 12,\
		 "System", #3, 0,\
		 "Pattern", #18, 2,\
		 "Delay", #7, 4,\
		 "ScHPhase", #16, 8,\
		 "EmbAudioSignal", #3, 10
	SYMB	TYPE, 459, "CBObject", 'T', #458
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_0\\audio.h"
	SYMB	TYPE, 460, 'S', 14,\
		 "System", #16, 0,\
		 "Signal", #16, 2,\
		 "Level", #16, 4,\
		 "Timing", #10, 6,\
		 "Frequency", #16, 10,\
		 "Click", #16, 12
	SYMB	TYPE, 461, "AudioObject", 'T', #460
	SYMB	ENDF
	SYMB	TYPE, 462, 'S', 32,\
		 "Date", #7, 0,\
		 "DACFactDate", #7, 4,\
		 "DACUserDate", #7, 8,\
		 "DACFactValue", #18, 12,\
		 "DACUserValue", #18, 14,\
		 "HPHZeroG", #7, 16,\
		 "PhaseG", #7, 20,\
		 "HPHZeroM", #7, 24,\
		 "PhaseM", #7, 28
	SYMB	TYPE, 463, "GenlockCalibrationObject", 'T', #462
	SYMB	TYPE, 464, 'S', 20,\
		 "Date", #7, 0,\
		 "PhaseG", #7, 4,\
		 "ScHPhaseG", #18, 8,\
		 "PhaseM", #7, 10,\
		 "ScHPhaseM", #18, 14,\
		 "DACGain", #3, 16,\
		 "DACOffset", #3, 17,\
		 "DACLevel", #3, 18
	SYMB	TYPE, 465, "BBCalibrationObject", 'T', #464
	SYMB	TYPE, 466, 'S', 20,\
		 "Date", #7, 0,\
		 "PhaseG", #7, 4,\
		 "ScHPhaseG", #3, 8,\
		 "PhaseM", #7, 10,\
		 "ScHPhaseM", #3, 14,\
		 "GainG", #3, 15,\
		 "ChromaGainG", #3, 16,\
		 "GainM", #3, 17,\
		 "ChromaGainM", #3, 18
	SYMB	TYPE, 467, "CBCalibrationObject", 'T', #466
	SYMB	TYPE, 468, 'S', 6,\
		 "Date", #7, 0,\
		 "AnalogLeftChannel", #3, 4,\
		 "AnalogRightChannel", #3, 5
	SYMB	TYPE, 469, "AudioCalibrationObject", 'T', #468
	SYMB	TYPE, 470, 'Z', #457, 2
	SYMB	TYPE, 472, 'Z', #461, 1
	SYMB	TYPE, 474, 'S', 74,\
		 "ActivePreset", #16, 0,\
		 "GenlockSetup", #455, 2,\
		 "BBSetup", #470, 8,\
		 "CBSetup", #459, 32,\
		 "AudioOutput", #16, 44,\
		 "AudioSetup", #472, 46
	SYMB	TYPE, 475, "SettingsObject", 'T', #474
	SYMB	TYPE, 476, 'Z', #2, 32
	SYMB	TYPE, 478, 'Z', #2, 8
	SYMB	TYPE, 480, 'Z', #2, 12
	SYMB	TYPE, 482, 'Z', #465, 2
	SYMB	TYPE, 484, 'S', 224,\
		 "Company", #476, 0,\
		 "Type", #476, 33,\
		 "KUNumber", #478, 66,\
		 "SWRevision", #478, 75,\
		 "NC12", #480, 84,\
		 "ResetSystem", #3, 97,\
		 "ProdDate", #7, 98,\
		 "UpdateDate", #7, 102,\
		 "GenlockCalibration", #463, 106,\
		 "BBCalibration", #482, 138,\
		 "CBCalibration", #467, 198,\
		 "AudioCalibration", #469, 218
	SYMB	TYPE, 485, "CalibrationObject", 'T', #484
	SYMB	ENDF
; rs232cmd.c   39	#include "tables.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\tables.h"
	SYMB	ENDF
; rs232cmd.c   40	#include "genlock.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\genlock.h"
	SYMB	ENDF
; rs232cmd.c   41	#include "bb.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\bb.h"
	SYMB	ENDF
; rs232cmd.c   42	#include "cbar.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\cbar.h"
	SYMB	ENDF
; rs232cmd.c   43	#include "audio.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\audio.h"
	SYMB	ENDF
; rs232cmd.c   44	#include "plddrv.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\plddrv.h"
	SYMB	ENDF
; rs232cmd.c   45	#include "unitprg.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\unitprg.h"
	SYMB	TYPE, 486, 'N',\
		 "true", -1,\
		 "false", 0
	SYMB	TYPE, 487, "bool", 'T', #486
	SYMB	ENDF
; rs232cmd.c   46	
; rs232cmd.c   47	
; rs232cmd.c   48	UC code MasterSWVersion				 	= 22;
RS232CMD_RO	SEGMENT	HCODE ROMDATA
	RSEG	RS232CMD_RO
	SYMB	IDEN, "MasterSWVersion", _MasterSWVersion, #3, 129, 0
	SYMB	ALAB, _MasterSWVersion, #3
	PUBLIC	_MasterSWVersion
_MasterSWVersion:
; rs232cmd.c   49	
; rs232cmd.c   50	char code SystemVersionTxt[] 			= "1995.0";
	DB	016H
	SYMB	TYPE, 488, 'Z', #2, -1
	SYMB	IDEN, "SystemVersionTxt", _SystemVersionTxt, #488, 129, 0
	SYMB	ALAB, _SystemVersionTxt, #488
	PUBLIC	_SystemVersionTxt
_SystemVersionTxt:
; rs232cmd.c   51	char code PasswordText[] 				= "PASS5201";
	DB	031H,039H,039H,035H,02EH,030H,000H
	SYMB	IDEN, "PasswordText", _PasswordText, #488, 129, 0
	SYMB	ALAB, _PasswordText, #488
	PUBLIC	_PasswordText
_PasswordText:
; rs232cmd.c   52	
; rs232cmd.c   53	char code CLSCmdTxt[] 	      		= "CLS";
	DB	050H,041H,053H,053H,035H,032H,030H,031H,000H
	SYMB	IDEN, "CLSCmdTxt", _CLSCmdTxt, #488, 129, 0
	SYMB	ALAB, _CLSCmdTxt, #488
	PUBLIC	_CLSCmdTxt
_CLSCmdTxt:
; rs232cmd.c   54	char code ESECmdTxt[] 	      		= "ESE";
	DB	043H,04CH,053H,000H
	SYMB	IDEN, "ESECmdTxt", _ESECmdTxt, #488, 129, 0
	SYMB	ALAB, _ESECmdTxt, #488
	PUBLIC	_ESECmdTxt
_ESECmdTxt:
; rs232cmd.c   55	char code ESRCmdTxt[] 	      		= "ESR";
	DB	045H,053H,045H,000H
	SYMB	IDEN, "ESRCmdTxt", _ESRCmdTxt, #488, 129, 0
	SYMB	ALAB, _ESRCmdTxt, #488
	PUBLIC	_ESRCmdTxt
_ESRCmdTxt:
; rs232cmd.c   56	char code OPCCmdTxt[] 	      		= "OPC";
	DB	045H,053H,052H,000H
	SYMB	IDEN, "OPCCmdTxt", _OPCCmdTxt, #488, 129, 0
	SYMB	ALAB, _OPCCmdTxt, #488
	PUBLIC	_OPCCmdTxt
_OPCCmdTxt:
; rs232cmd.c   57	char code SRECmdTxt[] 	      		= "SRE";
	DB	04FH,050H,043H,000H
	SYMB	IDEN, "SRECmdTxt", _SRECmdTxt, #488, 129, 0
	SYMB	ALAB, _SRECmdTxt, #488
	PUBLIC	_SRECmdTxt
_SRECmdTxt:
; rs232cmd.c   58	char code STBCmdTxt[] 	      		= "STB";
	DB	053H,052H,045H,000H
	SYMB	IDEN, "STBCmdTxt", _STBCmdTxt, #488, 129, 0
	SYMB	ALAB, _STBCmdTxt, #488
	PUBLIC	_STBCmdTxt
_STBCmdTxt:
; rs232cmd.c   59	char code TSTCmdTxt[] 	      		= "TST";
	DB	053H,054H,042H,000H
	SYMB	IDEN, "TSTCmdTxt", _TSTCmdTxt, #488, 129, 0
	SYMB	ALAB, _TSTCmdTxt, #488
	PUBLIC	_TSTCmdTxt
_TSTCmdTxt:
; rs232cmd.c   60	char code WAICmdTxt[] 	      		= "WAI";
	DB	054H,053H,054H,000H
	SYMB	IDEN, "WAICmdTxt", _WAICmdTxt, #488, 129, 0
	SYMB	ALAB, _WAICmdTxt, #488
	PUBLIC	_WAICmdTxt
_WAICmdTxt:
; rs232cmd.c   61	char code RSTCmdTxt[] 	      		= "RST";
	DB	057H,041H,049H,000H
	SYMB	IDEN, "RSTCmdTxt", _RSTCmdTxt, #488, 129, 0
	SYMB	ALAB, _RSTCmdTxt, #488
	PUBLIC	_RSTCmdTxt
_RSTCmdTxt:
; rs232cmd.c   62	char code IDNCmdTxt[] 	      		= "IDN";
	DB	052H,053H,054H,000H
	SYMB	IDEN, "IDNCmdTxt", _IDNCmdTxt, #488, 129, 0
	SYMB	ALAB, _IDNCmdTxt, #488
	PUBLIC	_IDNCmdTxt
_IDNCmdTxt:
; rs232cmd.c   63	char code RCLCmdTxt[] 	      		= "RCL";
	DB	049H,044H,04EH,000H
	SYMB	IDEN, "RCLCmdTxt", _RCLCmdTxt, #488, 129, 0
	SYMB	ALAB, _RCLCmdTxt, #488
	PUBLIC	_RCLCmdTxt
_RCLCmdTxt:
; rs232cmd.c   64	char code SAVCmdTxt[] 	      		= "SAV";
	DB	052H,043H,04CH,000H
	SYMB	IDEN, "SAVCmdTxt", _SAVCmdTxt, #488, 129, 0
	SYMB	ALAB, _SAVCmdTxt, #488
	PUBLIC	_SAVCmdTxt
_SAVCmdTxt:
; rs232cmd.c   65	
; rs232cmd.c   66	char code SYSTEMCmdTxt[] 	   	  	= "SYSTEM";
	DB	053H,041H,056H,000H
	SYMB	IDEN, "SYSTEMCmdTxt", _SYSTEMCmdTxt, #488, 129, 0
	SYMB	ALAB, _SYSTEMCmdTxt, #488
	PUBLIC	_SYSTEMCmdTxt
_SYSTEMCmdTxt:
; rs232cmd.c   67	char code SYSTCmdTxt[] 		    	 	= "SYST";
	DB	053H,059H,053H,054H,045H,04DH,000H
	SYMB	IDEN, "SYSTCmdTxt", _SYSTCmdTxt, #488, 129, 0
	SYMB	ALAB, _SYSTCmdTxt, #488
	PUBLIC	_SYSTCmdTxt
_SYSTCmdTxt:
; rs232cmd.c   68	char code STATUSCmdTxt[] 			  	= "STATUS";
	DB	053H,059H,053H,054H,000H
	SYMB	IDEN, "STATUSCmdTxt", _STATUSCmdTxt, #488, 129, 0
	SYMB	ALAB, _STATUSCmdTxt, #488
	PUBLIC	_STATUSCmdTxt
_STATUSCmdTxt:
; rs232cmd.c   69	char code STATCmdTxt[] 	 			  	= "STAT";
	DB	053H,054H,041H,054H,055H,053H,000H
	SYMB	IDEN, "STATCmdTxt", _STATCmdTxt, #488, 129, 0
	SYMB	ALAB, _STATCmdTxt, #488
	PUBLIC	_STATCmdTxt
_STATCmdTxt:
; rs232cmd.c   70	char code DIAGNOSTICCmdTxt[]			= "DIAGNOSTIC";
	DB	053H,054H,041H,054H,000H
	SYMB	IDEN, "DIAGNOSTICCmdTxt", _DIAGNOSTICCmdTxt, #488, 129, 0
	SYMB	ALAB, _DIAGNOSTICCmdTxt, #488
	PUBLIC	_DIAGNOSTICCmdTxt
_DIAGNOSTICCmdTxt:
; rs232cmd.c   71	char code DIAGCmdTxt[] 	    			= "DIAG";
	DB	044H,049H,041H,047H,04EH,04FH,053H,054H,049H,043H,000H
	SYMB	IDEN, "DIAGCmdTxt", _DIAGCmdTxt, #488, 129, 0
	SYMB	ALAB, _DIAGCmdTxt, #488
	PUBLIC	_DIAGCmdTxt
_DIAGCmdTxt:
; rs232cmd.c   72	char code MONITORCmdTxt[]			  	= "MONITOR";
	DB	044H,049H,041H,047H,000H
	SYMB	IDEN, "MONITORCmdTxt", _MONITORCmdTxt, #488, 129, 0
	SYMB	ALAB, _MONITORCmdTxt, #488
	PUBLIC	_MONITORCmdTxt
_MONITORCmdTxt:
; rs232cmd.c   73	char code MONCmdTxt[] 	    			= "MON";
	DB	04DH,04FH,04EH,049H,054H,04FH,052H,000H
	SYMB	IDEN, "MONCmdTxt", _MONCmdTxt, #488, 129, 0
	SYMB	ALAB, _MONCmdTxt, #488
	PUBLIC	_MONCmdTxt
_MONCmdTxt:
; rs232cmd.c   74	char code INPUTCmdTxt[] 	 		  	= "INPUT";
	DB	04DH,04FH,04EH,000H
	SYMB	IDEN, "INPUTCmdTxt", _INPUTCmdTxt, #488, 129, 0
	SYMB	ALAB, _INPUTCmdTxt, #488
	PUBLIC	_INPUTCmdTxt
_INPUTCmdTxt:
; rs232cmd.c   75	char code INPCmdTxt[] 	 			  	= "INP";
	DB	049H,04EH,050H,055H,054H,000H
	SYMB	IDEN, "INPCmdTxt", _INPCmdTxt, #488, 129, 0
	SYMB	ALAB, _INPCmdTxt, #488
	PUBLIC	_INPCmdTxt
_INPCmdTxt:
; rs232cmd.c   76	char code OUTPUTCmdTxt[] 			  	= "OUTPUT";
	DB	049H,04EH,050H,000H
	SYMB	IDEN, "OUTPUTCmdTxt", _OUTPUTCmdTxt, #488, 129, 0
	SYMB	ALAB, _OUTPUTCmdTxt, #488
	PUBLIC	_OUTPUTCmdTxt
_OUTPUTCmdTxt:
; rs232cmd.c   77	char code OUTPCmdTxt[] 				  	= "OUTP";
	DB	04FH,055H,054H,050H,055H,054H,000H
	SYMB	IDEN, "OUTPCmdTxt", _OUTPCmdTxt, #488, 129, 0
	SYMB	ALAB, _OUTPCmdTxt, #488
	PUBLIC	_OUTPCmdTxt
_OUTPCmdTxt:
; rs232cmd.c   78	char code USERCmdTxt[]				  	= "USER";
	DB	04FH,055H,054H,050H,000H
	SYMB	IDEN, "USERCmdTxt", _USERCmdTxt, #488, 129, 0
	SYMB	ALAB, _USERCmdTxt, #488
	PUBLIC	_USERCmdTxt
_USERCmdTxt:
; rs232cmd.c   79	char code MEASURECmdTxt[]			  	= "MEASURE";
	DB	055H,053H,045H,052H,000H
	SYMB	IDEN, "MEASURECmdTxt", _MEASURECmdTxt, #488, 129, 0
	SYMB	ALAB, _MEASURECmdTxt, #488
	PUBLIC	_MEASURECmdTxt
_MEASURECmdTxt:
; rs232cmd.c   80	char code MEASCmdTxt[] 	    			= "MEAS";
	DB	04DH,045H,041H,053H,055H,052H,045H,000H
	SYMB	IDEN, "MEASCmdTxt", _MEASCmdTxt, #488, 129, 0
	SYMB	ALAB, _MEASCmdTxt, #488
	PUBLIC	_MEASCmdTxt
_MEASCmdTxt:
; rs232cmd.c   81	char code FACTORYCmdTxt[]			  	= "FACTORY";
	DB	04DH,045H,041H,053H,000H
	SYMB	IDEN, "FACTORYCmdTxt", _FACTORYCmdTxt, #488, 129, 0
	SYMB	ALAB, _FACTORYCmdTxt, #488
	PUBLIC	_FACTORYCmdTxt
_FACTORYCmdTxt:
; rs232cmd.c   82	char code FACTCmdTxt[] 	    			= "FACT";
	DB	046H,041H,043H,054H,04FH,052H,059H,000H
	SYMB	IDEN, "FACTCmdTxt", _FACTCmdTxt, #488, 129, 0
	SYMB	ALAB, _FACTCmdTxt, #488
	PUBLIC	_FACTCmdTxt
_FACTCmdTxt:
; rs232cmd.c   83	
; rs232cmd.c   84	char code ERRORCmdTxt[] 	     		= "ERROR";
	DB	046H,041H,043H,054H,000H
	SYMB	IDEN, "ERRORCmdTxt", _ERRORCmdTxt, #488, 129, 0
	SYMB	ALAB, _ERRORCmdTxt, #488
	PUBLIC	_ERRORCmdTxt
_ERRORCmdTxt:
; rs232cmd.c   85	char code ERRCmdTxt[] 		     		= "ERR";
	DB	045H,052H,052H,04FH,052H,000H
	SYMB	IDEN, "ERRCmdTxt", _ERRCmdTxt, #488, 129, 0
	SYMB	ALAB, _ERRCmdTxt, #488
	PUBLIC	_ERRCmdTxt
_ERRCmdTxt:
; rs232cmd.c   86	char code VERSIONCmdTxt[] 	    		= "VERSION";
	DB	045H,052H,052H,000H
	SYMB	IDEN, "VERSIONCmdTxt", _VERSIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _VERSIONCmdTxt, #488
	PUBLIC	_VERSIONCmdTxt
_VERSIONCmdTxt:
; rs232cmd.c   87	char code VERSCmdTxt[] 	      		= "VERS";
	DB	056H,045H,052H,053H,049H,04FH,04EH,000H
	SYMB	IDEN, "VERSCmdTxt", _VERSCmdTxt, #488, 129, 0
	SYMB	ALAB, _VERSCmdTxt, #488
	PUBLIC	_VERSCmdTxt
_VERSCmdTxt:
; rs232cmd.c   88	char code PRESETCmdTxt[] 				= "PRESET";
	DB	056H,045H,052H,053H,000H
	SYMB	IDEN, "PRESETCmdTxt", _PRESETCmdTxt, #488, 129, 0
	SYMB	ALAB, _PRESETCmdTxt, #488
	PUBLIC	_PRESETCmdTxt
_PRESETCmdTxt:
; rs232cmd.c   89	char code PRESCmdTxt[] 					= "PRES";
	DB	050H,052H,045H,053H,045H,054H,000H
	SYMB	IDEN, "PRESCmdTxt", _PRESCmdTxt, #488, 129, 0
	SYMB	ALAB, _PRESCmdTxt, #488
	PUBLIC	_PRESCmdTxt
_PRESCmdTxt:
; rs232cmd.c   90	char code EVENTLOGCmdTxt[]				= "EVENTLOG";
	DB	050H,052H,045H,053H,000H
	SYMB	IDEN, "EVENTLOGCmdTxt", _EVENTLOGCmdTxt, #488, 129, 0
	SYMB	ALAB, _EVENTLOGCmdTxt, #488
	PUBLIC	_EVENTLOGCmdTxt
_EVENTLOGCmdTxt:
; rs232cmd.c   91	char code DATECmdTxt[]					= "DATE";
	DB	045H,056H,045H,04EH,054H,04CH,04FH,047H,000H
	SYMB	IDEN, "DATECmdTxt", _DATECmdTxt, #488, 129, 0
	SYMB	ALAB, _DATECmdTxt, #488
	PUBLIC	_DATECmdTxt
_DATECmdTxt:
; rs232cmd.c   92	char code TIMECmdTxt[]					= "TIME";
	DB	044H,041H,054H,045H,000H
	SYMB	IDEN, "TIMECmdTxt", _TIMECmdTxt, #488, 129, 0
	SYMB	ALAB, _TIMECmdTxt, #488
	PUBLIC	_TIMECmdTxt
_TIMECmdTxt:
; rs232cmd.c   93	
; rs232cmd.c   94	char code RECALLCmdTxt[] 				= "RECALL";
	DB	054H,049H,04DH,045H,000H
	SYMB	IDEN, "RECALLCmdTxt", _RECALLCmdTxt, #488, 129, 0
	SYMB	ALAB, _RECALLCmdTxt, #488
	PUBLIC	_RECALLCmdTxt
_RECALLCmdTxt:
; rs232cmd.c   95	char code RECCmdTxt[] 					= "REC";
	DB	052H,045H,043H,041H,04CH,04CH,000H
	SYMB	IDEN, "RECCmdTxt", _RECCmdTxt, #488, 129, 0
	SYMB	ALAB, _RECCmdTxt, #488
	PUBLIC	_RECCmdTxt
_RECCmdTxt:
; rs232cmd.c   96	char code STORECmdTxt[] 				= "STORE";
	DB	052H,045H,043H,000H
	SYMB	IDEN, "STORECmdTxt", _STORECmdTxt, #488, 129, 0
	SYMB	ALAB, _STORECmdTxt, #488
	PUBLIC	_STORECmdTxt
_STORECmdTxt:
; rs232cmd.c   97	char code STORCmdTxt[] 					= "STOR";
	DB	053H,054H,04FH,052H,045H,000H
	SYMB	IDEN, "STORCmdTxt", _STORCmdTxt, #488, 129, 0
	SYMB	ALAB, _STORCmdTxt, #488
	PUBLIC	_STORCmdTxt
_STORCmdTxt:
; rs232cmd.c   98	char code NAMECmdTxt[] 					= "NAME";
	DB	053H,054H,04FH,052H,000H
	SYMB	IDEN, "NAMECmdTxt", _NAMECmdTxt, #488, 129, 0
	SYMB	ALAB, _NAMECmdTxt, #488
	PUBLIC	_NAMECmdTxt
_NAMECmdTxt:
; rs232cmd.c   99	char code AUTHORCmdTxt[] 				= "AUTHOR";
	DB	04EH,041H,04DH,045H,000H
	SYMB	IDEN, "AUTHORCmdTxt", _AUTHORCmdTxt, #488, 129, 0
	SYMB	ALAB, _AUTHORCmdTxt, #488
	PUBLIC	_AUTHORCmdTxt
_AUTHORCmdTxt:
; rs232cmd.c  100	char code AUTHCmdTxt[] 					= "AUTH";
	DB	041H,055H,054H,048H,04FH,052H,000H
	SYMB	IDEN, "AUTHCmdTxt", _AUTHCmdTxt, #488, 129, 0
	SYMB	ALAB, _AUTHCmdTxt, #488
	PUBLIC	_AUTHCmdTxt
_AUTHCmdTxt:
; rs232cmd.c  101	char code DOWNLOADCmdTxt[] 			= "DOWNLOAD";
	DB	041H,055H,054H,048H,000H
	SYMB	IDEN, "DOWNLOADCmdTxt", _DOWNLOADCmdTxt, #488, 129, 0
	SYMB	ALAB, _DOWNLOADCmdTxt, #488
	PUBLIC	_DOWNLOADCmdTxt
_DOWNLOADCmdTxt:
; rs232cmd.c  102	char code DOWNCmdTxt[] 					= "DOWN";
	DB	044H,04FH,057H,04EH,04CH,04FH,041H,044H,000H
	SYMB	IDEN, "DOWNCmdTxt", _DOWNCmdTxt, #488, 129, 0
	SYMB	ALAB, _DOWNCmdTxt, #488
	PUBLIC	_DOWNCmdTxt
_DOWNCmdTxt:
; rs232cmd.c  103	char code UPLOADCmdTxt[] 				= "UPLOAd";
	DB	044H,04FH,057H,04EH,000H
	SYMB	IDEN, "UPLOADCmdTxt", _UPLOADCmdTxt, #488, 129, 0
	SYMB	ALAB, _UPLOADCmdTxt, #488
	PUBLIC	_UPLOADCmdTxt
_UPLOADCmdTxt:
; rs232cmd.c  104	char code UPLCmdTxt[] 					= "UPL";
	DB	055H,050H,04CH,04FH,041H,064H,000H
	SYMB	IDEN, "UPLCmdTxt", _UPLCmdTxt, #488, 129, 0
	SYMB	ALAB, _UPLCmdTxt, #488
	PUBLIC	_UPLCmdTxt
_UPLCmdTxt:
; rs232cmd.c  105	
; rs232cmd.c  106	char code OPERATIONCmdTxt[] 			= "OPERATION";
	DB	055H,050H,04CH,000H
	SYMB	IDEN, "OPERATIONCmdTxt", _OPERATIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _OPERATIONCmdTxt, #488
	PUBLIC	_OPERATIONCmdTxt
_OPERATIONCmdTxt:
; rs232cmd.c  107	char code OPERCmdTxt[] 	    			= "OPER";
	DB	04FH,050H,045H,052H,041H,054H,049H,04FH,04EH,000H
	SYMB	IDEN, "OPERCmdTxt", _OPERCmdTxt, #488, 129, 0
	SYMB	ALAB, _OPERCmdTxt, #488
	PUBLIC	_OPERCmdTxt
_OPERCmdTxt:
; rs232cmd.c  108	char code QUESTIONABLECmdTxt[]	 	= "QUESTIONABLE";
	DB	04FH,050H,045H,052H,000H
	SYMB	IDEN, "QUESTIONABLECmdTxt", _QUESTIONABLECmdTxt, #488, 129, 0
	SYMB	ALAB, _QUESTIONABLECmdTxt, #488
	PUBLIC	_QUESTIONABLECmdTxt
_QUESTIONABLECmdTxt:
	DB	051H,055H,045H,053H,054H,049H,04FH,04EH,041H,042H,04CH,045H
; rs232cmd.c  109	char code QUESCmdTxt[]		 			= "QUES";
	DB	000H
	SYMB	IDEN, "QUESCmdTxt", _QUESCmdTxt, #488, 129, 0
	SYMB	ALAB, _QUESCmdTxt, #488
	PUBLIC	_QUESCmdTxt
_QUESCmdTxt:
; rs232cmd.c  110	
; rs232cmd.c  111	char code EVENTCmdTxt[] 				= "EVENT";
	DB	051H,055H,045H,053H,000H
	SYMB	IDEN, "EVENTCmdTxt", _EVENTCmdTxt, #488, 129, 0
	SYMB	ALAB, _EVENTCmdTxt, #488
	PUBLIC	_EVENTCmdTxt
_EVENTCmdTxt:
; rs232cmd.c  112	char code EVENCmdTxt[]					= "EVEN";
	DB	045H,056H,045H,04EH,054H,000H
	SYMB	IDEN, "EVENCmdTxt", _EVENCmdTxt, #488, 129, 0
	SYMB	ALAB, _EVENCmdTxt, #488
	PUBLIC	_EVENCmdTxt
_EVENCmdTxt:
; rs232cmd.c  113	char code CONDITIONCmdTxt[]	 		= "CONDITION";
	DB	045H,056H,045H,04EH,000H
	SYMB	IDEN, "CONDITIONCmdTxt", _CONDITIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _CONDITIONCmdTxt, #488
	PUBLIC	_CONDITIONCmdTxt
_CONDITIONCmdTxt:
; rs232cmd.c  114	char code CONDCmdTxt[] 					= "COND";
	DB	043H,04FH,04EH,044H,049H,054H,049H,04FH,04EH,000H
	SYMB	IDEN, "CONDCmdTxt", _CONDCmdTxt, #488, 129, 0
	SYMB	ALAB, _CONDCmdTxt, #488
	PUBLIC	_CONDCmdTxt
_CONDCmdTxt:
; rs232cmd.c  115	char code ENABLECmdTxt[] 				= "ENABLE";
	DB	043H,04FH,04EH,044H,000H
	SYMB	IDEN, "ENABLECmdTxt", _ENABLECmdTxt, #488, 129, 0
	SYMB	ALAB, _ENABLECmdTxt, #488
	PUBLIC	_ENABLECmdTxt
_ENABLECmdTxt:
; rs232cmd.c  116	char code ENABCmdTxt[] 					= "ENAB";
	DB	045H,04EH,041H,042H,04CH,045H,000H
	SYMB	IDEN, "ENABCmdTxt", _ENABCmdTxt, #488, 129, 0
	SYMB	ALAB, _ENABCmdTxt, #488
	PUBLIC	_ENABCmdTxt
_ENABCmdTxt:
; rs232cmd.c  117	
; rs232cmd.c  118	char code DISPLAYCmdTxt[] 				= "DISPLAY";
	DB	045H,04EH,041H,042H,000H
	SYMB	IDEN, "DISPLAYCmdTxt", _DISPLAYCmdTxt, #488, 129, 0
	SYMB	ALAB, _DISPLAYCmdTxt, #488
	PUBLIC	_DISPLAYCmdTxt
_DISPLAYCmdTxt:
; rs232cmd.c  119	char code DISPCmdTxt[] 					= "DISP";
	DB	044H,049H,053H,050H,04CH,041H,059H,000H
	SYMB	IDEN, "DISPCmdTxt", _DISPCmdTxt, #488, 129, 0
	SYMB	ALAB, _DISPCmdTxt, #488
	PUBLIC	_DISPCmdTxt
_DISPCmdTxt:
; rs232cmd.c  120	char code ERRORQUEUECmdTxt[]  		= "ERRORQUEUE";
	DB	044H,049H,053H,050H,000H
	SYMB	IDEN, "ERRORQUEUECmdTxt", _ERRORQUEUECmdTxt, #488, 129, 0
	SYMB	ALAB, _ERRORQUEUECmdTxt, #488
	PUBLIC	_ERRORQUEUECmdTxt
_ERRORQUEUECmdTxt:
; rs232cmd.c  121	char code RESETCmdTxt[] 				= "RESET";
	DB	045H,052H,052H,04FH,052H,051H,055H,045H,055H,045H,000H
	SYMB	IDEN, "RESETCmdTxt", _RESETCmdTxt, #488, 129, 0
	SYMB	ALAB, _RESETCmdTxt, #488
	PUBLIC	_RESETCmdTxt
_RESETCmdTxt:
; rs232cmd.c  122	char code RESCmdTxt[] 					= "RES";
	DB	052H,045H,053H,045H,054H,000H
	SYMB	IDEN, "RESCmdTxt", _RESCmdTxt, #488, 129, 0
	SYMB	ALAB, _RESCmdTxt, #488
	PUBLIC	_RESCmdTxt
_RESCmdTxt:
; rs232cmd.c  123	
; rs232cmd.c  124	char code DEFAULTCmdTxt[] 			 	= "DEFAULT";
	DB	052H,045H,053H,000H
	SYMB	IDEN, "DEFAULTCmdTxt", _DEFAULTCmdTxt, #488, 129, 0
	SYMB	ALAB, _DEFAULTCmdTxt, #488
	PUBLIC	_DEFAULTCmdTxt
_DEFAULTCmdTxt:
; rs232cmd.c  125	char code DEFCmdTxt[] 					= "DEF";
	DB	044H,045H,046H,041H,055H,04CH,054H,000H
	SYMB	IDEN, "DEFCmdTxt", _DEFCmdTxt, #488, 129, 0
	SYMB	ALAB, _DEFCmdTxt, #488
	PUBLIC	_DEFCmdTxt
_DEFCmdTxt:
; rs232cmd.c  126	
; rs232cmd.c  127	char code GENLOCKCmdTxt[] 				= "GENLOCK";
	DB	044H,045H,046H,000H
	SYMB	IDEN, "GENLOCKCmdTxt", _GENLOCKCmdTxt, #488, 129, 0
	SYMB	ALAB, _GENLOCKCmdTxt, #488
	PUBLIC	_GENLOCKCmdTxt
_GENLOCKCmdTxt:
; rs232cmd.c  128	char code GENLCmdTxt[]			 		= "GENL";
	DB	047H,045H,04EH,04CH,04FH,043H,04BH,000H
	SYMB	IDEN, "GENLCmdTxt", _GENLCmdTxt, #488, 129, 0
	SYMB	ALAB, _GENLCmdTxt, #488
	PUBLIC	_GENLCmdTxt
_GENLCmdTxt:
; rs232cmd.c  129	
; rs232cmd.c  130	char code DELAYCmdTxt[] 				= "DELAY";
	DB	047H,045H,04EH,04CH,000H
	SYMB	IDEN, "DELAYCmdTxt", _DELAYCmdTxt, #488, 129, 0
	SYMB	ALAB, _DELAYCmdTxt, #488
	PUBLIC	_DELAYCmdTxt
_DELAYCmdTxt:
; rs232cmd.c  131	char code DELCmdTxt[] 					= "DEL";
	DB	044H,045H,04CH,041H,059H,000H
	SYMB	IDEN, "DELCmdTxt", _DELCmdTxt, #488, 129, 0
	SYMB	ALAB, _DELCmdTxt, #488
	PUBLIC	_DELCmdTxt
_DELCmdTxt:
; rs232cmd.c  132	
; rs232cmd.c  133	char code CALIBRATECmdTxt[] 		 	= "CALIBRATE";
	DB	044H,045H,04CH,000H
	SYMB	IDEN, "CALIBRATECmdTxt", _CALIBRATECmdTxt, #488, 129, 0
	SYMB	ALAB, _CALIBRATECmdTxt, #488
	PUBLIC	_CALIBRATECmdTxt
_CALIBRATECmdTxt:
; rs232cmd.c  134	char code CALCmdTxt[] 					= "CAL";
	DB	043H,041H,04CH,049H,042H,052H,041H,054H,045H,000H
	SYMB	IDEN, "CALCmdTxt", _CALCmdTxt, #488, 129, 0
	SYMB	ALAB, _CALCmdTxt, #488
	PUBLIC	_CALCmdTxt
_CALCmdTxt:
; rs232cmd.c  135	
; rs232cmd.c  136	char code ADJUSTCmdTxt[] 				= "ADJUST";
	DB	043H,041H,04CH,000H
	SYMB	IDEN, "ADJUSTCmdTxt", _ADJUSTCmdTxt, #488, 129, 0
	SYMB	ALAB, _ADJUSTCmdTxt, #488
	PUBLIC	_ADJUSTCmdTxt
_ADJUSTCmdTxt:
; rs232cmd.c  137	char code ADJCmdTxt[] 					= "ADJ";
	DB	041H,044H,04AH,055H,053H,054H,000H
	SYMB	IDEN, "ADJCmdTxt", _ADJCmdTxt, #488, 129, 0
	SYMB	ALAB, _ADJCmdTxt, #488
	PUBLIC	_ADJCmdTxt
_ADJCmdTxt:
; rs232cmd.c  138	
; rs232cmd.c  139	char code BBCmdTxt[] 					= "BB";
	DB	041H,044H,04AH,000H
	SYMB	IDEN, "BBCmdTxt", _BBCmdTxt, #488, 129, 0
	SYMB	ALAB, _BBCmdTxt, #488
	PUBLIC	_BBCmdTxt
_BBCmdTxt:
; rs232cmd.c  140	char code TSGENERATORCmdTxt[] 		= "TSGENERATOR";
	DB	042H,042H,000H
	SYMB	IDEN, "TSGENERATORCmdTxt", _TSGENERATORCmdTxt, #488, 129, 0
	SYMB	ALAB, _TSGENERATORCmdTxt, #488
	PUBLIC	_TSGENERATORCmdTxt
_TSGENERATORCmdTxt:
; rs232cmd.c  141	char code TSGCmdTxt[] 					= "TSG";
	DB	054H,053H,047H,045H,04EH,045H,052H,041H,054H,04FH,052H,000H
	SYMB	IDEN, "TSGCmdTxt", _TSGCmdTxt, #488, 129, 0
	SYMB	ALAB, _TSGCmdTxt, #488
	PUBLIC	_TSGCmdTxt
_TSGCmdTxt:
; rs232cmd.c  142	char code AUDIOCmdTxt[] 				= "AUDIO";
	DB	054H,053H,047H,000H
	SYMB	IDEN, "AUDIOCmdTxt", _AUDIOCmdTxt, #488, 129, 0
	SYMB	ALAB, _AUDIOCmdTxt, #488
	PUBLIC	_AUDIOCmdTxt
_AUDIOCmdTxt:
; rs232cmd.c  143	char code AUDCmdTxt[] 					= "AUD";
	DB	041H,055H,044H,049H,04FH,000H
	SYMB	IDEN, "AUDCmdTxt", _AUDCmdTxt, #488, 129, 0
	SYMB	ALAB, _AUDCmdTxt, #488
	PUBLIC	_AUDCmdTxt
_AUDCmdTxt:
; rs232cmd.c  144	
; rs232cmd.c  145	char code ANALOGCmdTxt[]				= "ANALOG";
	DB	041H,055H,044H,000H
	SYMB	IDEN, "ANALOGCmdTxt", _ANALOGCmdTxt, #488, 129, 0
	SYMB	ALAB, _ANALOGCmdTxt, #488
	PUBLIC	_ANALOGCmdTxt
_ANALOGCmdTxt:
; rs232cmd.c  146	char code ANALCmdTxt[]					= "ANAL";
	DB	041H,04EH,041H,04CH,04FH,047H,000H
	SYMB	IDEN, "ANALCmdTxt", _ANALCmdTxt, #488, 129, 0
	SYMB	ALAB, _ANALCmdTxt, #488
	PUBLIC	_ANALCmdTxt
_ANALCmdTxt:
; rs232cmd.c  147	
; rs232cmd.c  148	char code PATTERNCmdTxt[] 				= "PATTERN";
	DB	041H,04EH,041H,04CH,000H
	SYMB	IDEN, "PATTERNCmdTxt", _PATTERNCmdTxt, #488, 129, 0
	SYMB	ALAB, _PATTERNCmdTxt, #488
	PUBLIC	_PATTERNCmdTxt
_PATTERNCmdTxt:
; rs232cmd.c  149	char code PATTCmdTxt[] 					= "PATT";
	DB	050H,041H,054H,054H,045H,052H,04EH,000H
	SYMB	IDEN, "PATTCmdTxt", _PATTCmdTxt, #488, 129, 0
	SYMB	ALAB, _PATTCmdTxt, #488
	PUBLIC	_PATTCmdTxt
_PATTCmdTxt:
; rs232cmd.c  150	char code EMBAUDIOCmdTxt[] 			= "EMBAUDIO";
	DB	050H,041H,054H,054H,000H
	SYMB	IDEN, "EMBAUDIOCmdTxt", _EMBAUDIOCmdTxt, #488, 129, 0
	SYMB	ALAB, _EMBAUDIOCmdTxt, #488
	PUBLIC	_EMBAUDIOCmdTxt
_EMBAUDIOCmdTxt:
; rs232cmd.c  151	char code EMBCmdTxt[] 					= "EMB";
	DB	045H,04DH,042H,041H,055H,044H,049H,04FH,000H
	SYMB	IDEN, "EMBCmdTxt", _EMBCmdTxt, #488, 129, 0
	SYMB	ALAB, _EMBCmdTxt, #488
	PUBLIC	_EMBCmdTxt
_EMBCmdTxt:
; rs232cmd.c  152	
; rs232cmd.c  153	char code AESEBUCmdTxt[]				= "AESEBU";
	DB	045H,04DH,042H,000H
	SYMB	IDEN, "AESEBUCmdTxt", _AESEBUCmdTxt, #488, 129, 0
	SYMB	ALAB, _AESEBUCmdTxt, #488
	PUBLIC	_AESEBUCmdTxt
_AESEBUCmdTxt:
; rs232cmd.c  154	char code AESCmdTxt[]					= "AES";
	DB	041H,045H,053H,045H,042H,055H,000H
	SYMB	IDEN, "AESCmdTxt", _AESCmdTxt, #488, 129, 0
	SYMB	ALAB, _AESCmdTxt, #488
	PUBLIC	_AESCmdTxt
_AESCmdTxt:
; rs232cmd.c  155	
; rs232cmd.c  156	char code SCHPHASECmdTxt[] 			= "SCHPHASE";
	DB	041H,045H,053H,000H
	SYMB	IDEN, "SCHPHASECmdTxt", _SCHPHASECmdTxt, #488, 129, 0
	SYMB	ALAB, _SCHPHASECmdTxt, #488
	PUBLIC	_SCHPHASECmdTxt
_SCHPHASECmdTxt:
; rs232cmd.c  157	char code SCHPCmdTxt[] 					= "SCHP";
	DB	053H,043H,048H,050H,048H,041H,053H,045H,000H
	SYMB	IDEN, "SCHPCmdTxt", _SCHPCmdTxt, #488, 129, 0
	SYMB	ALAB, _SCHPCmdTxt, #488
	PUBLIC	_SCHPCmdTxt
_SCHPCmdTxt:
; rs232cmd.c  158	
; rs232cmd.c  159	char code SIGNALCmdTxt[] 				= "SIGNAL";
	DB	053H,043H,048H,050H,000H
	SYMB	IDEN, "SIGNALCmdTxt", _SIGNALCmdTxt, #488, 129, 0
	SYMB	ALAB, _SIGNALCmdTxt, #488
	PUBLIC	_SIGNALCmdTxt
_SIGNALCmdTxt:
; rs232cmd.c  160	char code SIGNCmdTxt[] 					= "SIGN";
	DB	053H,049H,047H,04EH,041H,04CH,000H
	SYMB	IDEN, "SIGNCmdTxt", _SIGNCmdTxt, #488, 129, 0
	SYMB	ALAB, _SIGNCmdTxt, #488
	PUBLIC	_SIGNCmdTxt
_SIGNCmdTxt:
; rs232cmd.c  161	char code LEVELCmdTxt[] 				= "LEVEL";
	DB	053H,049H,047H,04EH,000H
	SYMB	IDEN, "LEVELCmdTxt", _LEVELCmdTxt, #488, 129, 0
	SYMB	ALAB, _LEVELCmdTxt, #488
	PUBLIC	_LEVELCmdTxt
_LEVELCmdTxt:
; rs232cmd.c  162	char code LEVCmdTxt[] 					= "LEV";
	DB	04CH,045H,056H,045H,04CH,000H
	SYMB	IDEN, "LEVCmdTxt", _LEVCmdTxt, #488, 129, 0
	SYMB	ALAB, _LEVCmdTxt, #488
	PUBLIC	_LEVCmdTxt
_LEVCmdTxt:
; rs232cmd.c  163	char code EDHINSERTCmdTxt[] 			= "EDHINSERT";
	DB	04CH,045H,056H,000H
	SYMB	IDEN, "EDHINSERTCmdTxt", _EDHINSERTCmdTxt, #488, 129, 0
	SYMB	ALAB, _EDHINSERTCmdTxt, #488
	PUBLIC	_EDHINSERTCmdTxt
_EDHINSERTCmdTxt:
; rs232cmd.c  164	char code EDHCmdTxt[] 					= "EDH";
	DB	045H,044H,048H,049H,04EH,053H,045H,052H,054H,000H
	SYMB	IDEN, "EDHCmdTxt", _EDHCmdTxt, #488, 129, 0
	SYMB	ALAB, _EDHCmdTxt, #488
	PUBLIC	_EDHCmdTxt
_EDHCmdTxt:
; rs232cmd.c  165	
; rs232cmd.c  166	char code TIMINGCmdTxt[] 				= "TIMING";
	DB	045H,044H,048H,000H
	SYMB	IDEN, "TIMINGCmdTxt", _TIMINGCmdTxt, #488, 129, 0
	SYMB	ALAB, _TIMINGCmdTxt, #488
	PUBLIC	_TIMINGCmdTxt
_TIMINGCmdTxt:
; rs232cmd.c  167	char code TIMCmdTxt[] 					= "TIM";
	DB	054H,049H,04DH,049H,04EH,047H,000H
	SYMB	IDEN, "TIMCmdTxt", _TIMCmdTxt, #488, 129, 0
	SYMB	ALAB, _TIMCmdTxt, #488
	PUBLIC	_TIMCmdTxt
_TIMCmdTxt:
; rs232cmd.c  168	
; rs232cmd.c  169	char code WORDCLOCKCmdTxt[] 			= "WORDCLOCK";
	DB	054H,049H,04DH,000H
	SYMB	IDEN, "WORDCLOCKCmdTxt", _WORDCLOCKCmdTxt, #488, 129, 0
	SYMB	ALAB, _WORDCLOCKCmdTxt, #488
	PUBLIC	_WORDCLOCKCmdTxt
_WORDCLOCKCmdTxt:
; rs232cmd.c  170	char code WORDCmdTxt[] 					= "WORD";
	DB	057H,04FH,052H,044H,043H,04CH,04FH,043H,04BH,000H
	SYMB	IDEN, "WORDCmdTxt", _WORDCmdTxt, #488, 129, 0
	SYMB	ALAB, _WORDCmdTxt, #488
	PUBLIC	_WORDCmdTxt
_WORDCmdTxt:
; rs232cmd.c  171	
; rs232cmd.c  172	char code CLICKCmdTxt[] 				= "CLICK";
	DB	057H,04FH,052H,044H,000H
	SYMB	IDEN, "CLICKCmdTxt", _CLICKCmdTxt, #488, 129, 0
	SYMB	ALAB, _CLICKCmdTxt, #488
	PUBLIC	_CLICKCmdTxt
_CLICKCmdTxt:
; rs232cmd.c  173	char code CLICCmdTxt[] 					= "CLIC";
	DB	043H,04CH,049H,043H,04BH,000H
	SYMB	IDEN, "CLICCmdTxt", _CLICCmdTxt, #488, 129, 0
	SYMB	ALAB, _CLICCmdTxt, #488
	PUBLIC	_CLICCmdTxt
_CLICCmdTxt:
; rs232cmd.c  174	
; rs232cmd.c  175	char code PASSWORDCmdTxt[] 			= "PASSWORD";
	DB	043H,04CH,049H,043H,000H
	SYMB	IDEN, "PASSWORDCmdTxt", _PASSWORDCmdTxt, #488, 129, 0
	SYMB	ALAB, _PASSWORDCmdTxt, #488
	PUBLIC	_PASSWORDCmdTxt
_PASSWORDCmdTxt:
; rs232cmd.c  176	char code PASSCmdTxt[] 					= "PASS";
	DB	050H,041H,053H,053H,057H,04FH,052H,044H,000H
	SYMB	IDEN, "PASSCmdTxt", _PASSCmdTxt, #488, 129, 0
	SYMB	ALAB, _PASSCmdTxt, #488
	PUBLIC	_PASSCmdTxt
_PASSCmdTxt:
; rs232cmd.c  177	char code V24CIRCUITCmdTxt[] 			= "V24CIRCUIT";
	DB	050H,041H,053H,053H,000H
	SYMB	IDEN, "V24CIRCUITCmdTxt", _V24CIRCUITCmdTxt, #488, 129, 0
	SYMB	ALAB, _V24CIRCUITCmdTxt, #488
	PUBLIC	_V24CIRCUITCmdTxt
_V24CIRCUITCmdTxt:
; rs232cmd.c  178	char code V24CCmdTxt[] 					= "V24C";
	DB	056H,032H,034H,043H,049H,052H,043H,055H,049H,054H,000H
	SYMB	IDEN, "V24CCmdTxt", _V24CCmdTxt, #488, 129, 0
	SYMB	ALAB, _V24CCmdTxt, #488
	PUBLIC	_V24CCmdTxt
_V24CCmdTxt:
; rs232cmd.c  179	char code CHECKSUMCmdTxt[] 	 		= "CHECKSUM";
	DB	056H,032H,034H,043H,000H
	SYMB	IDEN, "CHECKSUMCmdTxt", _CHECKSUMCmdTxt, #488, 129, 0
	SYMB	ALAB, _CHECKSUMCmdTxt, #488
	PUBLIC	_CHECKSUMCmdTxt
_CHECKSUMCmdTxt:
; rs232cmd.c  180	char code CHECCmdTxt[] 	 				= "CHEC";
	DB	043H,048H,045H,043H,04BH,053H,055H,04DH,000H
	SYMB	IDEN, "CHECCmdTxt", _CHECCmdTxt, #488, 129, 0
	SYMB	ALAB, _CHECCmdTxt, #488
	PUBLIC	_CHECCmdTxt
_CHECCmdTxt:
; rs232cmd.c  181	
; rs232cmd.c  182	char code CODECmdTxt[] 	 				= "CODE";
	DB	043H,048H,045H,043H,000H
	SYMB	IDEN, "CODECmdTxt", _CODECmdTxt, #488, 129, 0
	SYMB	ALAB, _CODECmdTxt, #488
	PUBLIC	_CODECmdTxt
_CODECmdTxt:
; rs232cmd.c  183	char code RANGECmdTxt[] 		 		= "RANGE";
	DB	043H,04FH,044H,045H,000H
	SYMB	IDEN, "RANGECmdTxt", _RANGECmdTxt, #488, 129, 0
	SYMB	ALAB, _RANGECmdTxt, #488
	PUBLIC	_RANGECmdTxt
_RANGECmdTxt:
; rs232cmd.c  184	char code RANGCmdTxt[] 	 				= "RANG";
	DB	052H,041H,04EH,047H,045H,000H
	SYMB	IDEN, "RANGCmdTxt", _RANGCmdTxt, #488, 129, 0
	SYMB	ALAB, _RANGCmdTxt, #488
	PUBLIC	_RANGCmdTxt
_RANGCmdTxt:
; rs232cmd.c  185	char code COMMANDCmdTxt[] 				= "COMMAND";
	DB	052H,041H,04EH,047H,000H
	SYMB	IDEN, "COMMANDCmdTxt", _COMMANDCmdTxt, #488, 129, 0
	SYMB	ALAB, _COMMANDCmdTxt, #488
	PUBLIC	_COMMANDCmdTxt
_COMMANDCmdTxt:
; rs232cmd.c  186	char code COMMCmdTxt[] 					= "COMM";
	DB	043H,04FH,04DH,04DH,041H,04EH,044H,000H
	SYMB	IDEN, "COMMCmdTxt", _COMMCmdTxt, #488, 129, 0
	SYMB	ALAB, _COMMCmdTxt, #488
	PUBLIC	_COMMCmdTxt
_COMMCmdTxt:
; rs232cmd.c  187	char code TRANSPARENTCmdTxt[]  		= "TRANSPARENT";
	DB	043H,04FH,04DH,04DH,000H
	SYMB	IDEN, "TRANSPARENTCmdTxt", _TRANSPARENTCmdTxt, #488, 129, 0
	SYMB	ALAB, _TRANSPARENTCmdTxt, #488
	PUBLIC	_TRANSPARENTCmdTxt
_TRANSPARENTCmdTxt:
; rs232cmd.c  188	char code TRANCmdTxt[] 				 	= "TRAN";
	DB	054H,052H,041H,04EH,053H,050H,041H,052H,045H,04EH,054H,000H
	SYMB	IDEN, "TRANCmdTxt", _TRANCmdTxt, #488, 129, 0
	SYMB	ALAB, _TRANCmdTxt, #488
	PUBLIC	_TRANCmdTxt
_TRANCmdTxt:
; rs232cmd.c  189	
; rs232cmd.c  190	char code MAINBOARDCmdTxt[] 			= "MAINBOARD";
	DB	054H,052H,041H,04EH,000H
	SYMB	IDEN, "MAINBOARDCmdTxt", _MAINBOARDCmdTxt, #488, 129, 0
	SYMB	ALAB, _MAINBOARDCmdTxt, #488
	PUBLIC	_MAINBOARDCmdTxt
_MAINBOARDCmdTxt:
; rs232cmd.c  191	char code MAINCmdTxt[] 					= "MAIN";
	DB	04DH,041H,049H,04EH,042H,04FH,041H,052H,044H,000H
	SYMB	IDEN, "MAINCmdTxt", _MAINCmdTxt, #488, 129, 0
	SYMB	ALAB, _MAINCmdTxt, #488
	PUBLIC	_MAINCmdTxt
_MAINCmdTxt:
; rs232cmd.c  192	char code COMPANYCmdTxt[] 				= "COMPANY";
	DB	04DH,041H,049H,04EH,000H
	SYMB	IDEN, "COMPANYCmdTxt", _COMPANYCmdTxt, #488, 129, 0
	SYMB	ALAB, _COMPANYCmdTxt, #488
	PUBLIC	_COMPANYCmdTxt
_COMPANYCmdTxt:
; rs232cmd.c  193	char code COMPCmdTxt[] 					= "COMP";
	DB	043H,04FH,04DH,050H,041H,04EH,059H,000H
	SYMB	IDEN, "COMPCmdTxt", _COMPCmdTxt, #488, 129, 0
	SYMB	ALAB, _COMPCmdTxt, #488
	PUBLIC	_COMPCmdTxt
_COMPCmdTxt:
; rs232cmd.c  194	char code TYPECmdTxt[] 					= "TYPE";
	DB	043H,04FH,04DH,050H,000H
	SYMB	IDEN, "TYPECmdTxt", _TYPECmdTxt, #488, 129, 0
	SYMB	ALAB, _TYPECmdTxt, #488
	PUBLIC	_TYPECmdTxt
_TYPECmdTxt:
; rs232cmd.c  195	char code KUNUMBERCmdTxt[] 			= "KUNUMBER";
	DB	054H,059H,050H,045H,000H
	SYMB	IDEN, "KUNUMBERCmdTxt", _KUNUMBERCmdTxt, #488, 129, 0
	SYMB	ALAB, _KUNUMBERCmdTxt, #488
	PUBLIC	_KUNUMBERCmdTxt
_KUNUMBERCmdTxt:
; rs232cmd.c  196	char code KUNCmdTxt[] 					= "KUN";
	DB	04BH,055H,04EH,055H,04DH,042H,045H,052H,000H
	SYMB	IDEN, "KUNCmdTxt", _KUNCmdTxt, #488, 129, 0
	SYMB	ALAB, _KUNCmdTxt, #488
	PUBLIC	_KUNCmdTxt
_KUNCmdTxt:
; rs232cmd.c  197	char code SWREVISIONCmdTxt[] 			= "SWREVISION";
	DB	04BH,055H,04EH,000H
	SYMB	IDEN, "SWREVISIONCmdTxt", _SWREVISIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _SWREVISIONCmdTxt, #488
	PUBLIC	_SWREVISIONCmdTxt
_SWREVISIONCmdTxt:
; rs232cmd.c  198	char code SWRCmdTxt[] 					= "SWR";
	DB	053H,057H,052H,045H,056H,049H,053H,049H,04FH,04EH,000H
	SYMB	IDEN, "SWRCmdTxt", _SWRCmdTxt, #488, 129, 0
	SYMB	ALAB, _SWRCmdTxt, #488
	PUBLIC	_SWRCmdTxt
_SWRCmdTxt:
; rs232cmd.c  199	
; rs232cmd.c  200	char code NCCmdTxt[] 					= "NC";
	DB	053H,057H,052H,000H
	SYMB	IDEN, "NCCmdTxt", _NCCmdTxt, #488, 129, 0
	SYMB	ALAB, _NCCmdTxt, #488
	PUBLIC	_NCCmdTxt
_NCCmdTxt:
; rs232cmd.c  201	char code FMSDATECmdTxt[] 				= "FMSDATE";
	DB	04EH,043H,000H
	SYMB	IDEN, "FMSDATECmdTxt", _FMSDATECmdTxt, #488, 129, 0
	SYMB	ALAB, _FMSDATECmdTxt, #488
	PUBLIC	_FMSDATECmdTxt
_FMSDATECmdTxt:
; rs232cmd.c  202	char code FMSDCmdTxt[] 					= "FMSD";
	DB	046H,04DH,053H,044H,041H,054H,045H,000H
	SYMB	IDEN, "FMSDCmdTxt", _FMSDCmdTxt, #488, 129, 0
	SYMB	ALAB, _FMSDCmdTxt, #488
	PUBLIC	_FMSDCmdTxt
_FMSDCmdTxt:
; rs232cmd.c  203	char code PRODUCTIONCmdTxt[] 			= "PRODUCTION";
	DB	046H,04DH,053H,044H,000H
	SYMB	IDEN, "PRODUCTIONCmdTxt", _PRODUCTIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _PRODUCTIONCmdTxt, #488
	PUBLIC	_PRODUCTIONCmdTxt
_PRODUCTIONCmdTxt:
; rs232cmd.c  204	char code PRODCmdTxt[] 					= "PROD";
	DB	050H,052H,04FH,044H,055H,043H,054H,049H,04FH,04EH,000H
	SYMB	IDEN, "PRODCmdTxt", _PRODCmdTxt, #488, 129, 0
	SYMB	ALAB, _PRODCmdTxt, #488
	PUBLIC	_PRODCmdTxt
_PRODCmdTxt:
; rs232cmd.c  205	char code UPDATECmdTxt[] 				= "UPDATE";
	DB	050H,052H,04FH,044H,000H
	SYMB	IDEN, "UPDATECmdTxt", _UPDATECmdTxt, #488, 129, 0
	SYMB	ALAB, _UPDATECmdTxt, #488
	PUBLIC	_UPDATECmdTxt
_UPDATECmdTxt:
; rs232cmd.c  206	char code UPDCmdTxt[] 					= "UPD";
	DB	055H,050H,044H,041H,054H,045H,000H
	SYMB	IDEN, "UPDCmdTxt", _UPDCmdTxt, #488, 129, 0
	SYMB	ALAB, _UPDCmdTxt, #488
	PUBLIC	_UPDCmdTxt
_UPDCmdTxt:
; rs232cmd.c  207	
; rs232cmd.c  208	char code FREFERENCECmdTxt[] 		 	= "FREFERENCE";
	DB	055H,050H,044H,000H
	SYMB	IDEN, "FREFERENCECmdTxt", _FREFERENCECmdTxt, #488, 129, 0
	SYMB	ALAB, _FREFERENCECmdTxt, #488
	PUBLIC	_FREFERENCECmdTxt
_FREFERENCECmdTxt:
; rs232cmd.c  209	char code FREFCmdTxt[] 					= "FREF";
	DB	046H,052H,045H,046H,045H,052H,045H,04EH,043H,045H,000H
	SYMB	IDEN, "FREFCmdTxt", _FREFCmdTxt, #488, 129, 0
	SYMB	ALAB, _FREFCmdTxt, #488
	PUBLIC	_FREFCmdTxt
_FREFCmdTxt:
; rs232cmd.c  210	char code DACCmdTxt[] 					= "DAC";
	DB	046H,052H,045H,046H,000H
	SYMB	IDEN, "DACCmdTxt", _DACCmdTxt, #488, 129, 0
	SYMB	ALAB, _DACCmdTxt, #488
	PUBLIC	_DACCmdTxt
_DACCmdTxt:
; rs232cmd.c  211	char code UREFERENCECmdTxt[] 			= "UREFERENCE";
	DB	044H,041H,043H,000H
	SYMB	IDEN, "UREFERENCECmdTxt", _UREFERENCECmdTxt, #488, 129, 0
	SYMB	ALAB, _UREFERENCECmdTxt, #488
	PUBLIC	_UREFERENCECmdTxt
_UREFERENCECmdTxt:
; rs232cmd.c  212	char code UREFCmdTxt[] 					= "UREF";
	DB	055H,052H,045H,046H,045H,052H,045H,04EH,043H,045H,000H
	SYMB	IDEN, "UREFCmdTxt", _UREFCmdTxt, #488, 129, 0
	SYMB	ALAB, _UREFCmdTxt, #488
	PUBLIC	_UREFCmdTxt
_UREFCmdTxt:
; rs232cmd.c  213	char code HPHZEROCmdTxt[] 				= "HPHZERO";
	DB	055H,052H,045H,046H,000H
	SYMB	IDEN, "HPHZEROCmdTxt", _HPHZEROCmdTxt, #488, 129, 0
	SYMB	ALAB, _HPHZEROCmdTxt, #488
	PUBLIC	_HPHZEROCmdTxt
_HPHZEROCmdTxt:
; rs232cmd.c  214	char code HPHZCmdTxt[] 					= "HPHZ";
	DB	048H,050H,048H,05AH,045H,052H,04FH,000H
	SYMB	IDEN, "HPHZCmdTxt", _HPHZCmdTxt, #488, 129, 0
	SYMB	ALAB, _HPHZCmdTxt, #488
	PUBLIC	_HPHZCmdTxt
_HPHZCmdTxt:
; rs232cmd.c  215	char code PHASECmdTxt[] 				= "PHASE";
	DB	048H,050H,048H,05AH,000H
	SYMB	IDEN, "PHASECmdTxt", _PHASECmdTxt, #488, 129, 0
	SYMB	ALAB, _PHASECmdTxt, #488
	PUBLIC	_PHASECmdTxt
_PHASECmdTxt:
; rs232cmd.c  216	char code PHASCmdTxt[] 					= "PHAS";
	DB	050H,048H,041H,053H,045H,000H
	SYMB	IDEN, "PHASCmdTxt", _PHASCmdTxt, #488, 129, 0
	SYMB	ALAB, _PHASCmdTxt, #488
	PUBLIC	_PHASCmdTxt
_PHASCmdTxt:
; rs232cmd.c  217	
; rs232cmd.c  218	char code AGAINCmdTxt[] 				= "AGAIN";
	DB	050H,048H,041H,053H,000H
	SYMB	IDEN, "AGAINCmdTxt", _AGAINCmdTxt, #488, 129, 0
	SYMB	ALAB, _AGAINCmdTxt, #488
	PUBLIC	_AGAINCmdTxt
_AGAINCmdTxt:
; rs232cmd.c  219	char code AGACmdTxt[] 					= "AGA";
	DB	041H,047H,041H,049H,04EH,000H
	SYMB	IDEN, "AGACmdTxt", _AGACmdTxt, #488, 129, 0
	SYMB	ALAB, _AGACmdTxt, #488
	PUBLIC	_AGACmdTxt
_AGACmdTxt:
; rs232cmd.c  220	char code CGAINCmdTxt[] 				= "CGAIN";
	DB	041H,047H,041H,000H
	SYMB	IDEN, "CGAINCmdTxt", _CGAINCmdTxt, #488, 129, 0
	SYMB	ALAB, _CGAINCmdTxt, #488
	PUBLIC	_CGAINCmdTxt
_CGAINCmdTxt:
; rs232cmd.c  221	char code CGACmdTxt[] 					= "CGA";
	DB	043H,047H,041H,049H,04EH,000H
	SYMB	IDEN, "CGACmdTxt", _CGACmdTxt, #488, 129, 0
	SYMB	ALAB, _CGACmdTxt, #488
	PUBLIC	_CGACmdTxt
_CGACmdTxt:
; rs232cmd.c  222	char code ALEVELCmdTxt[] 				= "ALEVEL";
	DB	043H,047H,041H,000H
	SYMB	IDEN, "ALEVELCmdTxt", _ALEVELCmdTxt, #488, 129, 0
	SYMB	ALAB, _ALEVELCmdTxt, #488
	PUBLIC	_ALEVELCmdTxt
_ALEVELCmdTxt:
; rs232cmd.c  223	char code ALEVCmdTxt[] 					= "ALEV";
	DB	041H,04CH,045H,056H,045H,04CH,000H
	SYMB	IDEN, "ALEVCmdTxt", _ALEVCmdTxt, #488, 129, 0
	SYMB	ALAB, _ALEVCmdTxt, #488
	PUBLIC	_ALEVCmdTxt
_ALEVCmdTxt:
; rs232cmd.c  224	
; rs232cmd.c  225	char code PLDCmdTxt[] 					= "PLD";
	DB	041H,04CH,045H,056H,000H
	SYMB	IDEN, "PLDCmdTxt", _PLDCmdTxt, #488, 129, 0
	SYMB	ALAB, _PLDCmdTxt, #488
	PUBLIC	_PLDCmdTxt
_PLDCmdTxt:
; rs232cmd.c  226	char code TCXOCmdTxt[] 					= "TCXO";
	DB	050H,04CH,044H,000H
	SYMB	IDEN, "TCXOCmdTxt", _TCXOCmdTxt, #488, 129, 0
	SYMB	ALAB, _TCXOCmdTxt, #488
	PUBLIC	_TCXOCmdTxt
_TCXOCmdTxt:
; rs232cmd.c  227	char code MMCHIPCmdTxt[] 				= "MMCHIP";
	DB	054H,043H,058H,04FH,000H
	SYMB	IDEN, "MMCHIPCmdTxt", _MMCHIPCmdTxt, #488, 129, 0
	SYMB	ALAB, _MMCHIPCmdTxt, #488
	PUBLIC	_MMCHIPCmdTxt
_MMCHIPCmdTxt:
; rs232cmd.c  228	char code MMCHCmdTxt[] 					= "MMCH";
	DB	04DH,04DH,043H,048H,049H,050H,000H
	SYMB	IDEN, "MMCHCmdTxt", _MMCHCmdTxt, #488, 129, 0
	SYMB	ALAB, _MMCHCmdTxt, #488
	PUBLIC	_MMCHCmdTxt
_MMCHCmdTxt:
; rs232cmd.c  229	
; rs232cmd.c  230	char code SAVEParTxt[] 					= "SAVE";
	DB	04DH,04DH,043H,048H,000H
	SYMB	IDEN, "SAVEParTxt", _SAVEParTxt, #488, 129, 0
	SYMB	ALAB, _SAVEParTxt, #488
	PUBLIC	_SAVEParTxt
_SAVEParTxt:
; rs232cmd.c  231	
; rs232cmd.c  232	char code INTERNALParTxt[] 			= "INTERNAL";
	DB	053H,041H,056H,045H,000H
	SYMB	IDEN, "INTERNALParTxt", _INTERNALParTxt, #488, 129, 0
	SYMB	ALAB, _INTERNALParTxt, #488
	PUBLIC	_INTERNALParTxt
_INTERNALParTxt:
; rs232cmd.c  233	char code INTParTxt[] 					= "INT";
	DB	049H,04EH,054H,045H,052H,04EH,041H,04CH,000H
	SYMB	IDEN, "INTParTxt", _INTParTxt, #488, 129, 0
	SYMB	ALAB, _INTParTxt, #488
	PUBLIC	_INTParTxt
_INTParTxt:
; rs232cmd.c  234	char code PALBURSTParTxt[] 			= "PALBURST";
	DB	049H,04EH,054H,000H
	SYMB	IDEN, "PALBURSTParTxt", _PALBURSTParTxt, #488, 129, 0
	SYMB	ALAB, _PALBURSTParTxt, #488
	PUBLIC	_PALBURSTParTxt
_PALBURSTParTxt:
; rs232cmd.c  235	char code PALBParTxt[] 					= "PALB";
	DB	050H,041H,04CH,042H,055H,052H,053H,054H,000H
	SYMB	IDEN, "PALBParTxt", _PALBParTxt, #488, 129, 0
	SYMB	ALAB, _PALBParTxt, #488
	PUBLIC	_PALBParTxt
_PALBParTxt:
; rs232cmd.c  236	char code NTSCBURSTParTxt[] 			= "NTSCBURST";
	DB	050H,041H,04CH,042H,000H
	SYMB	IDEN, "NTSCBURSTParTxt", _NTSCBURSTParTxt, #488, 129, 0
	SYMB	ALAB, _NTSCBURSTParTxt, #488
	PUBLIC	_NTSCBURSTParTxt
_NTSCBURSTParTxt:
; rs232cmd.c  237	char code NTSCParTxt[] 					= "NTSC";
	DB	04EH,054H,053H,043H,042H,055H,052H,053H,054H,000H
	SYMB	IDEN, "NTSCParTxt", _NTSCParTxt, #488, 129, 0
	SYMB	ALAB, _NTSCParTxt, #488
	PUBLIC	_NTSCParTxt
_NTSCParTxt:
; rs232cmd.c  238	
; rs232cmd.c  239	char code F10MHzParTxt[] 				= "F10MHZ";
	DB	04EH,054H,053H,043H,000H
	SYMB	IDEN, "F10MHzParTxt", _F10MHzParTxt, #488, 129, 0
	SYMB	ALAB, _F10MHzParTxt, #488
	PUBLIC	_F10MHzParTxt
_F10MHzParTxt:
; rs232cmd.c  240	
; rs232cmd.c  241	char code PALParTxt[] 					= "PAL";
	DB	046H,031H,030H,04DH,048H,05AH,000H
	SYMB	IDEN, "PALParTxt", _PALParTxt, #488, 129, 0
	SYMB	ALAB, _PALParTxt, #488
	PUBLIC	_PALParTxt
_PALParTxt:
; rs232cmd.c  242	char code PAL_IDParTxt[] 				= "PAL_ID";
	DB	050H,041H,04CH,000H
	SYMB	IDEN, "PAL_IDParTxt", _PAL_IDParTxt, #488, 129, 0
	SYMB	ALAB, _PAL_IDParTxt, #488
	PUBLIC	_PAL_IDParTxt
_PAL_IDParTxt:
; rs232cmd.c  243	
; rs232cmd.c  244	char code CBSMPTEParTxt[]				= "CBSMPTE";			// SMPTE Colorbar
	DB	050H,041H,04CH,05FH,049H,044H,000H
	SYMB	IDEN, "CBSMPTEParTxt", _CBSMPTEParTxt, #488, 129, 0
	SYMB	ALAB, _CBSMPTEParTxt, #488
	PUBLIC	_CBSMPTEParTxt
_CBSMPTEParTxt:
; rs232cmd.c  245	char code CBSMParTxt[] 					= "CBSM";					
	DB	043H,042H,053H,04DH,050H,054H,045H,000H
	SYMB	IDEN, "CBSMParTxt", _CBSMParTxt, #488, 129, 0
	SYMB	ALAB, _CBSMParTxt, #488
	PUBLIC	_CBSMParTxt
_CBSMParTxt:
; rs232cmd.c  246	char code CBEBUParTxt[] 				= "CBEBU";  	    	// EBU Colorbar
	DB	043H,042H,053H,04DH,000H
	SYMB	IDEN, "CBEBUParTxt", _CBEBUParTxt, #488, 129, 0
	SYMB	ALAB, _CBEBUParTxt, #488
	PUBLIC	_CBEBUParTxt
_CBEBUParTxt:
; rs232cmd.c  247	char code CBEBParTxt[] 					= "CBEB";
	DB	043H,042H,045H,042H,055H,000H
	SYMB	IDEN, "CBEBParTxt", _CBEBParTxt, #488, 129, 0
	SYMB	ALAB, _CBEBParTxt, #488
	PUBLIC	_CBEBParTxt
_CBEBParTxt:
; rs232cmd.c  248	char code CBFCCParTxt[] 			  	= "CBFCC";				// FCC Colorbar
	DB	043H,042H,045H,042H,000H
	SYMB	IDEN, "CBFCCParTxt", _CBFCCParTxt, #488, 129, 0
	SYMB	ALAB, _CBFCCParTxt, #488
	PUBLIC	_CBFCCParTxt
_CBFCCParTxt:
; rs232cmd.c  249	char code CBFCParTxt[] 				  	= "CBFC";
	DB	043H,042H,046H,043H,043H,000H
	SYMB	IDEN, "CBFCParTxt", _CBFCParTxt, #488, 129, 0
	SYMB	ALAB, _CBFCParTxt, #488
	PUBLIC	_CBFCParTxt
_CBFCParTxt:
; rs232cmd.c  250	char code CBEBU8ParTxt[] 			  	= "CBEBU8";				// Colorbar ITU801
	DB	043H,042H,046H,043H,000H
	SYMB	IDEN, "CBEBU8ParTxt", _CBEBU8ParTxt, #488, 129, 0
	SYMB	ALAB, _CBEBU8ParTxt, #488
	PUBLIC	_CBEBU8ParTxt
_CBEBU8ParTxt:
; rs232cmd.c  251	char code CBEB8ParTxt[] 			  	= "CBEB8";
	DB	043H,042H,045H,042H,055H,038H,000H
	SYMB	IDEN, "CBEB8ParTxt", _CBEB8ParTxt, #488, 129, 0
	SYMB	ALAB, _CBEB8ParTxt, #488
	PUBLIC	_CBEB8ParTxt
_CBEB8ParTxt:
; rs232cmd.c  252	char code CB100ParTxt[]		 		  	= "CB100";				// 100% Colorbar
	DB	043H,042H,045H,042H,038H,000H
	SYMB	IDEN, "CB100ParTxt", _CB100ParTxt, #488, 129, 0
	SYMB	ALAB, _CB100ParTxt, #488
	PUBLIC	_CB100ParTxt
_CB100ParTxt:
; rs232cmd.c  253	char code CBGREY75ParTxt[] 		  	= "CBGREY75";			// Colorbar + 75% Grey
	DB	043H,042H,031H,030H,030H,000H
	SYMB	IDEN, "CBGREY75ParTxt", _CBGREY75ParTxt, #488, 129, 0
	SYMB	ALAB, _CBGREY75ParTxt, #488
	PUBLIC	_CBGREY75ParTxt
_CBGREY75ParTxt:
; rs232cmd.c  254	char code CBGR75ParTxt[]			  	= "CBGR75";
	DB	043H,042H,047H,052H,045H,059H,037H,035H,000H
	SYMB	IDEN, "CBGR75ParTxt", _CBGR75ParTxt, #488, 129, 0
	SYMB	ALAB, _CBGR75ParTxt, #488
	PUBLIC	_CBGR75ParTxt
_CBGR75ParTxt:
; rs232cmd.c  255	char code CBRED75ParTxt[]  		  	= "CBRED75";			// Colorbar + 75% Red
	DB	043H,042H,047H,052H,037H,035H,000H
	SYMB	IDEN, "CBRED75ParTxt", _CBRED75ParTxt, #488, 129, 0
	SYMB	ALAB, _CBRED75ParTxt, #488
	PUBLIC	_CBRED75ParTxt
_CBRED75ParTxt:
; rs232cmd.c  256	char code CBR75ParTxt[] 			  	= "CBR75";
	DB	043H,042H,052H,045H,044H,037H,035H,000H
	SYMB	IDEN, "CBR75ParTxt", _CBR75ParTxt, #488, 129, 0
	SYMB	ALAB, _CBR75ParTxt, #488
	PUBLIC	_CBR75ParTxt
_CBR75ParTxt:
; rs232cmd.c  257	char code RED75ParTxt[] 			  	= "RED75";				// 75% Red
	DB	043H,042H,052H,037H,035H,000H
	SYMB	IDEN, "RED75ParTxt", _RED75ParTxt, #488, 129, 0
	SYMB	ALAB, _RED75ParTxt, #488
	PUBLIC	_RED75ParTxt
_RED75ParTxt:
; rs232cmd.c  258	
; rs232cmd.c  259	char code MULTIBURSTParTxt[] 			= "MULTIBURST";		// Multi burst
	DB	052H,045H,044H,037H,035H,000H
	SYMB	IDEN, "MULTIBURSTParTxt", _MULTIBURSTParTxt, #488, 129, 0
	SYMB	ALAB, _MULTIBURSTParTxt, #488
	PUBLIC	_MULTIBURSTParTxt
_MULTIBURSTParTxt:
; rs232cmd.c  260	char code MULTParTxt[] 				 	= "MULT";
	DB	04DH,055H,04CH,054H,049H,042H,055H,052H,053H,054H,000H
	SYMB	IDEN, "MULTParTxt", _MULTParTxt, #488, 129, 0
	SYMB	ALAB, _MULTParTxt, #488
	PUBLIC	_MULTParTxt
_MULTParTxt:
; rs232cmd.c  261	char code CCIR18ParTxt[] 	 		 	= "CCIR18";
	DB	04DH,055H,04CH,054H,000H
	SYMB	IDEN, "CCIR18ParTxt", _CCIR18ParTxt, #488, 129, 0
	SYMB	ALAB, _CCIR18ParTxt, #488
	PUBLIC	_CCIR18ParTxt
_CCIR18ParTxt:
; rs232cmd.c  262	char code WIN10ParTxt[] 			 	= "WIN10";				// Window 10%
	DB	043H,043H,049H,052H,031H,038H,000H
	SYMB	IDEN, "WIN10ParTxt", _WIN10ParTxt, #488, 129, 0
	SYMB	ALAB, _WIN10ParTxt, #488
	PUBLIC	_WIN10ParTxt
_WIN10ParTxt:
; rs232cmd.c  263	char code WIN15ParTxt[] 			 	= "WIN15";				// Window 15%
	DB	057H,049H,04EH,031H,030H,000H
	SYMB	IDEN, "WIN15ParTxt", _WIN15ParTxt, #488, 129, 0
	SYMB	ALAB, _WIN15ParTxt, #488
	PUBLIC	_WIN15ParTxt
_WIN15ParTxt:
; rs232cmd.c  264	char code WIN20ParTxt[] 			 	= "WIN20";				// Window 20%
	DB	057H,049H,04EH,031H,035H,000H
	SYMB	IDEN, "WIN20ParTxt", _WIN20ParTxt, #488, 129, 0
	SYMB	ALAB, _WIN20ParTxt, #488
	PUBLIC	_WIN20ParTxt
_WIN20ParTxt:
; rs232cmd.c  265	char code WIN100ParTxt[] 			 	= "WIN100";				// Window 100%
	DB	057H,049H,04EH,032H,030H,000H
	SYMB	IDEN, "WIN100ParTxt", _WIN100ParTxt, #488, 129, 0
	SYMB	ALAB, _WIN100ParTxt, #488
	PUBLIC	_WIN100ParTxt
_WIN100ParTxt:
; rs232cmd.c  266	char code BLWH15ParTxt[] 			 	= "BLWH15KHZ";			// 15kHz Bl/Wh
	DB	057H,049H,04EH,031H,030H,030H,000H
	SYMB	IDEN, "BLWH15ParTxt", _BLWH15ParTxt, #488, 129, 0
	SYMB	ALAB, _BLWH15ParTxt, #488
	PUBLIC	_BLWH15ParTxt
_BLWH15ParTxt:
; rs232cmd.c  267	char code WHITE100ParTxt[] 		 	= "WHITE100";			// White 100%
	DB	042H,04CH,057H,048H,031H,035H,04BH,048H,05AH,000H
	SYMB	IDEN, "WHITE100ParTxt", _WHITE100ParTxt, #488, 129, 0
	SYMB	ALAB, _WHITE100ParTxt, #488
	PUBLIC	_WHITE100ParTxt
_WHITE100ParTxt:
; rs232cmd.c  268	char code WHIT100ParTxt[] 				= "WHIT100";
	DB	057H,048H,049H,054H,045H,031H,030H,030H,000H
	SYMB	IDEN, "WHIT100ParTxt", _WHIT100ParTxt, #488, 129, 0
	SYMB	ALAB, _WHIT100ParTxt, #488
	PUBLIC	_WHIT100ParTxt
_WHIT100ParTxt:
; rs232cmd.c  269	char code BLACKParTxt[] 		  		= "BLACK";				// Black
	DB	057H,048H,049H,054H,031H,030H,030H,000H
	SYMB	IDEN, "BLACKParTxt", _BLACKParTxt, #488, 129, 0
	SYMB	ALAB, _BLACKParTxt, #488
	PUBLIC	_BLACKParTxt
_BLACKParTxt:
; rs232cmd.c  270	char code BLACParTxt[]		 	  		= "BLAC";
	DB	042H,04CH,041H,043H,04BH,000H
	SYMB	IDEN, "BLACParTxt", _BLACParTxt, #488, 129, 0
	SYMB	ALAB, _BLACParTxt, #488
	PUBLIC	_BLACParTxt
_BLACParTxt:
; rs232cmd.c  271	
; rs232cmd.c  272	char code SDICHECKParTxt[] 	  		= "SDICHECK";			// Check field
	DB	042H,04CH,041H,043H,000H
	SYMB	IDEN, "SDICHECKParTxt", _SDICHECKParTxt, #488, 129, 0
	SYMB	ALAB, _SDICHECKParTxt, #488
	PUBLIC	_SDICHECKParTxt
_SDICHECKParTxt:
; rs232cmd.c  273	char code SDICParTxt[] 			  		= "SDIC";
	DB	053H,044H,049H,043H,048H,045H,043H,04BH,000H
	SYMB	IDEN, "SDICParTxt", _SDICParTxt, #488, 129, 0
	SYMB	ALAB, _SDICParTxt, #488
	PUBLIC	_SDICParTxt
_SDICParTxt:
; rs232cmd.c  274	char code DGREYParTxt[] 		  		= "DGREY";				// Digital grey
	DB	053H,044H,049H,043H,000H
	SYMB	IDEN, "DGREYParTxt", _DGREYParTxt, #488, 129, 0
	SYMB	ALAB, _DGREYParTxt, #488
	PUBLIC	_DGREYParTxt
_DGREYParTxt:
; rs232cmd.c  275	char code DGRParTxt[] 			  		= "DGR";
	DB	044H,047H,052H,045H,059H,000H
	SYMB	IDEN, "DGRParTxt", _DGRParTxt, #488, 129, 0
	SYMB	ALAB, _DGRParTxt, #488
	PUBLIC	_DGRParTxt
_DGRParTxt:
; rs232cmd.c  276	char code STAIRCASE5ParTxt[]			= "STAIRCASE5";	 	// 5-step staircase
	DB	044H,047H,052H,000H
	SYMB	IDEN, "STAIRCASE5ParTxt", _STAIRCASE5ParTxt, #488, 129, 0
	SYMB	ALAB, _STAIRCASE5ParTxt, #488
	PUBLIC	_STAIRCASE5ParTxt
_STAIRCASE5ParTxt:
; rs232cmd.c  277	char code STA5ParTxt[] 			  		= "STA5";
	DB	053H,054H,041H,049H,052H,043H,041H,053H,045H,035H,000H
	SYMB	IDEN, "STA5ParTxt", _STA5ParTxt, #488, 129, 0
	SYMB	ALAB, _STA5ParTxt, #488
	PUBLIC	_STA5ParTxt
_STA5ParTxt:
; rs232cmd.c  278	char code STAIRCASE10ParTxt[] 		= "STAIRCASE10";		// 10-step staircase
	DB	053H,054H,041H,035H,000H
	SYMB	IDEN, "STAIRCASE10ParTxt", _STAIRCASE10ParTxt, #488, 129, 0
	SYMB	ALAB, _STAIRCASE10ParTxt, #488
	PUBLIC	_STAIRCASE10ParTxt
_STAIRCASE10ParTxt:
; rs232cmd.c  279	char code STA10ParTxt[] 		  		= "STA10";
	DB	053H,054H,041H,049H,052H,043H,041H,053H,045H,031H,030H,000H
	SYMB	IDEN, "STA10ParTxt", _STA10ParTxt, #488, 129, 0
	SYMB	ALAB, _STA10ParTxt, #488
	PUBLIC	_STA10ParTxt
_STA10ParTxt:
; rs232cmd.c  280	char code CROSSHATCHParTxt[] 			= "CROSSHATCH";		// Cross hatch
	DB	053H,054H,041H,031H,030H,000H
	SYMB	IDEN, "CROSSHATCHParTxt", _CROSSHATCHParTxt, #488, 129, 0
	SYMB	ALAB, _CROSSHATCHParTxt, #488
	PUBLIC	_CROSSHATCHParTxt
_CROSSHATCHParTxt:
; rs232cmd.c  281	char code CROSParTxt[] 			  		= "CROS";
	DB	043H,052H,04FH,053H,053H,048H,041H,054H,043H,048H,000H
	SYMB	IDEN, "CROSParTxt", _CROSParTxt, #488, 129, 0
	SYMB	ALAB, _CROSParTxt, #488
	PUBLIC	_CROSParTxt
_CROSParTxt:
; rs232cmd.c  282	char code PLUGEParTxt[] 		  		= "PLUGE";				// PLUGE
	DB	043H,052H,04FH,053H,000H
	SYMB	IDEN, "PLUGEParTxt", _PLUGEParTxt, #488, 129, 0
	SYMB	ALAB, _PLUGEParTxt, #488
	PUBLIC	_PLUGEParTxt
_PLUGEParTxt:
; rs232cmd.c  283	char code PLUGParTxt[] 			  		= "PLUG";
	DB	050H,04CH,055H,047H,045H,000H
	SYMB	IDEN, "PLUGParTxt", _PLUGParTxt, #488, 129, 0
	SYMB	ALAB, _PLUGParTxt, #488
	PUBLIC	_PLUGParTxt
_PLUGParTxt:
; rs232cmd.c  284	
; rs232cmd.c  285	char code ANALOGParTxt[]		  		= "ANALOG";
	DB	050H,04CH,055H,047H,000H
	SYMB	IDEN, "ANALOGParTxt", _ANALOGParTxt, #488, 129, 0
	SYMB	ALAB, _ANALOGParTxt, #488
	PUBLIC	_ANALOGParTxt
_ANALOGParTxt:
; rs232cmd.c  286	char code ANALParTxt[]			  		= "ANAL";
	DB	041H,04EH,041H,04CH,04FH,047H,000H
	SYMB	IDEN, "ANALParTxt", _ANALParTxt, #488, 129, 0
	SYMB	ALAB, _ANALParTxt, #488
	PUBLIC	_ANALParTxt
_ANALParTxt:
; rs232cmd.c  287	char code AESEBUParTxt[]		  		= "AESEBU";
	DB	041H,04EH,041H,04CH,000H
	SYMB	IDEN, "AESEBUParTxt", _AESEBUParTxt, #488, 129, 0
	SYMB	ALAB, _AESEBUParTxt, #488
	PUBLIC	_AESEBUParTxt
_AESEBUParTxt:
; rs232cmd.c  288	char code AESParTxt[]			  		= "AES";
	DB	041H,045H,053H,045H,042H,055H,000H
	SYMB	IDEN, "AESParTxt", _AESParTxt, #488, 129, 0
	SYMB	ALAB, _AESParTxt, #488
	PUBLIC	_AESParTxt
_AESParTxt:
; rs232cmd.c  289	
; rs232cmd.c  290	char code F441KHZParTxt[]		 		= "F441KHZ";
	DB	041H,045H,053H,000H
	SYMB	IDEN, "F441KHZParTxt", _F441KHZParTxt, #488, 129, 0
	SYMB	ALAB, _F441KHZParTxt, #488
	PUBLIC	_F441KHZParTxt
_F441KHZParTxt:
; rs232cmd.c  291	char code F48KHZParTxt[] 				= "F48KHZ";
	DB	046H,034H,034H,031H,04BH,048H,05AH,000H
	SYMB	IDEN, "F48KHZParTxt", _F48KHZParTxt, #488, 129, 0
	SYMB	ALAB, _F48KHZParTxt, #488
	PUBLIC	_F48KHZParTxt
_F48KHZParTxt:
; rs232cmd.c  292	char code F45MHZParTxt[] 				= "F45MHZ";
	DB	046H,034H,038H,04BH,048H,05AH,000H
	SYMB	IDEN, "F45MHZParTxt", _F45MHZParTxt, #488, 129, 0
	SYMB	ALAB, _F45MHZParTxt, #488
	PUBLIC	_F45MHZParTxt
_F45MHZParTxt:
; rs232cmd.c  293	
; rs232cmd.c  294	char code S500HZParTxt[] 				= "S500HZ";				// Stereo 500 Hz
	DB	046H,034H,035H,04DH,048H,05AH,000H
	SYMB	IDEN, "S500HZParTxt", _S500HZParTxt, #488, 129, 0
	SYMB	ALAB, _S500HZParTxt, #488
	PUBLIC	_S500HZParTxt
_S500HZParTxt:
; rs232cmd.c  295	char code S1KHZParTxt[] 				= "S1KHZ";   			// Stereo 1 kHz
	DB	053H,035H,030H,030H,048H,05AH,000H
	SYMB	IDEN, "S1KHZParTxt", _S1KHZParTxt, #488, 129, 0
	SYMB	ALAB, _S1KHZParTxt, #488
	PUBLIC	_S1KHZParTxt
_S1KHZParTxt:
; rs232cmd.c  296	char code SEBU1KHZParTxt[]		 		= "SEBU1KHZ";			// Stereo EBU 1 kHz
	DB	053H,031H,04BH,048H,05AH,000H
	SYMB	IDEN, "SEBU1KHZParTxt", _SEBU1KHZParTxt, #488, 129, 0
	SYMB	ALAB, _SEBU1KHZParTxt, #488
	PUBLIC	_SEBU1KHZParTxt
_SEBU1KHZParTxt:
; rs232cmd.c  297	char code S8KHZParTxt[] 				= "S8KHZ";				// Stereo 8 kHz
	DB	053H,045H,042H,055H,031H,04BH,048H,05AH,000H
	SYMB	IDEN, "S8KHZParTxt", _S8KHZParTxt, #488, 129, 0
	SYMB	ALAB, _S8KHZParTxt, #488
	PUBLIC	_S8KHZParTxt
_S8KHZParTxt:
; rs232cmd.c  298	
; rs232cmd.c  299	char code SILENCEParTxt[] 				= "SILENCE";
	DB	053H,038H,04BH,048H,05AH,000H
	SYMB	IDEN, "SILENCEParTxt", _SILENCEParTxt, #488, 129, 0
	SYMB	ALAB, _SILENCEParTxt, #488
	PUBLIC	_SILENCEParTxt
_SILENCEParTxt:
; rs232cmd.c  300	char code SILParTxt[] 					= "SIL";
	DB	053H,049H,04CH,045H,04EH,043H,045H,000H
	SYMB	IDEN, "SILParTxt", _SILParTxt, #488, 129, 0
	SYMB	ALAB, _SILParTxt, #488
	PUBLIC	_SILParTxt
_SILParTxt:
; rs232cmd.c  301	
; rs232cmd.c  302	char code DMYParTxt[]					= "DMY";
	DB	053H,049H,04CH,000H
	SYMB	IDEN, "DMYParTxt", _DMYParTxt, #488, 129, 0
	SYMB	ALAB, _DMYParTxt, #488
	PUBLIC	_DMYParTxt
_DMYParTxt:
; rs232cmd.c  303	char code MDYParTxt[]					= "MDY";
	DB	044H,04DH,059H,000H
	SYMB	IDEN, "MDYParTxt", _MDYParTxt, #488, 129, 0
	SYMB	ALAB, _MDYParTxt, #488
	PUBLIC	_MDYParTxt
_MDYParTxt:
; rs232cmd.c  304	char code YMDParTxt[]					= "YMD";
	DB	04DH,044H,059H,000H
	SYMB	IDEN, "YMDParTxt", _YMDParTxt, #488, 129, 0
	SYMB	ALAB, _YMDParTxt, #488
	PUBLIC	_YMDParTxt
_YMDParTxt:
; rs232cmd.c  305	
; rs232cmd.c  306	char code BBParTxt[] 					= "BB";
	DB	059H,04DH,044H,000H
	SYMB	IDEN, "BBParTxt", _BBParTxt, #488, 129, 0
	SYMB	ALAB, _BBParTxt, #488
	PUBLIC	_BBParTxt
_BBParTxt:
; rs232cmd.c  307	char code SPGParTxt[]  					= "SPG";
	DB	042H,042H,000H
	SYMB	IDEN, "SPGParTxt", _SPGParTxt, #488, 129, 0
	SYMB	ALAB, _SPGParTxt, #488
	PUBLIC	_SPGParTxt
_SPGParTxt:
; rs232cmd.c  308	
; rs232cmd.c  309	char code OFFParTxt[] 					= "OFF";
	DB	053H,050H,047H,000H
	SYMB	IDEN, "OFFParTxt", _OFFParTxt, #488, 129, 0
	SYMB	ALAB, _OFFParTxt, #488
	PUBLIC	_OFFParTxt
_OFFParTxt:
; rs232cmd.c  310	char code ONParTxt[] 					= "ON";
	DB	04FH,046H,046H,000H
	SYMB	IDEN, "ONParTxt", _ONParTxt, #488, 129, 0
	SYMB	ALAB, _ONParTxt, #488
	PUBLIC	_ONParTxt
_ONParTxt:
; rs232cmd.c  311	
; rs232cmd.c  312	char code UPParTxt[] 					= "UP";
	DB	04FH,04EH,000H
	SYMB	IDEN, "UPParTxt", _UPParTxt, #488, 129, 0
	SYMB	ALAB, _UPParTxt, #488
	PUBLIC	_UPParTxt
_UPParTxt:
; rs232cmd.c  313	char code DOWNParTxt[] 				 	= "DOWN";
	DB	055H,050H,000H
	SYMB	IDEN, "DOWNParTxt", _DOWNParTxt, #488, 129, 0
	SYMB	ALAB, _DOWNParTxt, #488
	PUBLIC	_DOWNParTxt
_DOWNParTxt:
; rs232cmd.c  314	
; rs232cmd.c  315	char code NORMALParTxt[] 				= "NORMAL";
	DB	044H,04FH,057H,04EH,000H
	SYMB	IDEN, "NORMALParTxt", _NORMALParTxt, #488, 129, 0
	SYMB	ALAB, _NORMALParTxt, #488
	PUBLIC	_NORMALParTxt
_NORMALParTxt:
; rs232cmd.c  316	char code NORMParTxt[] 					= "NORM";
	DB	04EH,04FH,052H,04DH,041H,04CH,000H
	SYMB	IDEN, "NORMParTxt", _NORMParTxt, #488, 129, 0
	SYMB	ALAB, _NORMParTxt, #488
	PUBLIC	_NORMParTxt
_NORMParTxt:
; rs232cmd.c  317	
; rs232cmd.c  318	char code MINParTxt[] 					= "MIN";
	DB	04EH,04FH,052H,04DH,000H
	SYMB	IDEN, "MINParTxt", _MINParTxt, #488, 129, 0
	SYMB	ALAB, _MINParTxt, #488
	PUBLIC	_MINParTxt
_MINParTxt:
; rs232cmd.c  319	char code MAXParTxt[] 					= "MAX";
	DB	04DH,049H,04EH,000H
	SYMB	IDEN, "MAXParTxt", _MAXParTxt, #488, 129, 0
	SYMB	ALAB, _MAXParTxt, #488
	PUBLIC	_MAXParTxt
_MAXParTxt:
; rs232cmd.c  320	
; rs232cmd.c  321	
; rs232cmd.c  322	void CLSCommand( void);
; rs232cmd.c  323	void ESECommand( void);
; rs232cmd.c  324	void ESRCommand( void);
; rs232cmd.c  325	void OPCCommand( void);
; rs232cmd.c  326	void SRECommand( void);
; rs232cmd.c  327	void STBCommand( void);
; rs232cmd.c  328	void TSTCommand( void);
; rs232cmd.c  329	void WAICommand( void);
; rs232cmd.c  330	void RSTCommand( void);
; rs232cmd.c  331	void IDNCommand( void);
; rs232cmd.c  332	void RCLCommand( void);
; rs232cmd.c  333	void SAVCommand( void);
; rs232cmd.c  334	
; rs232cmd.c  335	void SystemError( void);
; rs232cmd.c  336	void SystemVersion( void);
; rs232cmd.c  337	void SystemTime( void);
; rs232cmd.c  338	void SystemDate( void);
; rs232cmd.c  339	
; rs232cmd.c  340	void SystemPresetName( void);
; rs232cmd.c  341	void SystemPresetAuthor( void);
; rs232cmd.c  342	void SystemPresetDate( void);
; rs232cmd.c  343	void SystemPresetDownload( void);
; rs232cmd.c  344	void SystemPresetUpload( void);
; rs232cmd.c  345	
; rs232cmd.c  346	void StatusOperEvent( void);
; rs232cmd.c  347	void StatusOperCondition( void);
; rs232cmd.c  348	void StatusOperEnable( void);
; rs232cmd.c  349	void StatusQuestEvent( void);
; rs232cmd.c  350	void StatusQuestCondition( void);
; rs232cmd.c  351	void StatusQuestEnable( void);
; rs232cmd.c  352	void StatusPreset( void);
; rs232cmd.c  353	
; rs232cmd.c  354	void GenlockGen( void);
; rs232cmd.c  355	void GenlockGenSystem( void);
; rs232cmd.c  356	void GenlockGenDelay( void);
; rs232cmd.c  357	void GenlockGenCalibrateEnable( void);
; rs232cmd.c  358	void GenlockGenCalibrateAdjust( void);
; rs232cmd.c  359	void GenlockGenCalibrateStore( void);
; rs232cmd.c  360	
; rs232cmd.c  361	void BBGenSuffix( void);
; rs232cmd.c  362	void BBGen( void);
; rs232cmd.c  363	void BBGenSystem( void);
; rs232cmd.c  364	void BBGenDelay( void);
; rs232cmd.c  365	void BBGenScHPhase( void);
; rs232cmd.c  366	
; rs232cmd.c  367	void TSGen( void);
; rs232cmd.c  368	void TSGenPattern( void);
; rs232cmd.c  369	void TSGenSystem( void);
; rs232cmd.c  370	void TSGenDelay( void);
; rs232cmd.c  371	void TSGenScHPhase( void);
; rs232cmd.c  372	void TSGenEmbAudioSignal( void);
; rs232cmd.c  373	
; rs232cmd.c  374	void AudioGenOutput( void);
; rs232cmd.c  375	
; rs232cmd.c  376	void AudioGenAnalog( void);
; rs232cmd.c  377	void AudioGenAnalogSignal( void);
; rs232cmd.c  378	void AudioGenAnalogLevel( void);
; rs232cmd.c  379	void AudioGenAnalogClick( void);
; rs232cmd.c  380	
; rs232cmd.c  381	void AudioGenAESEBU( void);
; rs232cmd.c  382	void AudioGenAESEBUSystem( void);
; rs232cmd.c  383	void AudioGenAESEBUSignal( void);
; rs232cmd.c  384	void AudioGenAESEBULevel( void);
; rs232cmd.c  385	void AudioGenAESEBUTiming( void);
; rs232cmd.c  386	void AudioGenAESEBUWordClock( void);
; rs232cmd.c  387	void AudioGenAESEBUClick( void);
; rs232cmd.c  388	
; rs232cmd.c  389	void FactPassword( void);
; rs232cmd.c  390	void FactReset( void);
; rs232cmd.c  391	void FactV24Command( void);
; rs232cmd.c  392	void FactV24Transparent( void);
; rs232cmd.c  393	
; rs232cmd.c  394	void FactChecksumCode( void);
; rs232cmd.c  395	void FactChecksumPLD( void);
; rs232cmd.c  396	void FactChecksumEmbAudio( void);
; rs232cmd.c  397	void FactChecksumPattern( void);
; rs232cmd.c  398	void FactChecksumRange( void);
; rs232cmd.c  399	
; rs232cmd.c  400	void FactMainVersion( void);
; rs232cmd.c  401	void FactMainIDNCompany( void);
; rs232cmd.c  402	void FactMainIDNType( void);
; rs232cmd.c  403	void FactMainIDNKUNumber( void);
; rs232cmd.c  404	void FactMainIDNSWRevision( void);
; rs232cmd.c  405	
; rs232cmd.c  406	void FactMainSystem( void);
; rs232cmd.c  407	void FactMainFMSDateProd( void);
; rs232cmd.c  408	void FactMainFMSDateUpd( void);
; rs232cmd.c  409	
; rs232cmd.c  410	void FactGenlockGenDate( void);
; rs232cmd.c  411	void FactGenlockGenVersion( void);
; rs232cmd.c  412	void FactGenlockGenFRefDate( void);
; rs232cmd.c  413	void FactGenlockGenFRefDAC( void);
; rs232cmd.c  414	void FactGenlockGenURefDate( void);
; rs232cmd.c  415	void FactGenlockGenURefDAC( void);
; rs232cmd.c  416	void FactGenlockGenHPHZero( void);
; rs232cmd.c  417	void FactGenlockGenPhase( void);
; rs232cmd.c  418	
; rs232cmd.c  419	void FactBBGenDate( void);
; rs232cmd.c  420	void FactBBGenVersion( void);
; rs232cmd.c  421	void FactBBGenSignal( void);
; rs232cmd.c  422	void FactBBGenPhase( void);
; rs232cmd.c  423	void FactBBGenScHPhase( void);
; rs232cmd.c  424	void FactBBGenDAC( void);
; rs232cmd.c  425	
; rs232cmd.c  426	void FactTSGenDate( void);
; rs232cmd.c  427	void FactTSGenAGain( void);
; rs232cmd.c  428	void FactTSGenCGain( void);
; rs232cmd.c  429	void FactTSGenPhase( void);
; rs232cmd.c  430	void FactTSGenScHPhase( void);
; rs232cmd.c  431	
; rs232cmd.c  432	void FactAudioGenStatus( void);
; rs232cmd.c  433	void FactAudioGenDate( void);
; rs232cmd.c  434	void FactAudioGenLevel( void);
; rs232cmd.c  435	
; rs232cmd.c  436	void FactPLDVersion( void);
; rs232cmd.c  437	void FactTCXOStatus( void);
; rs232cmd.c  438	void FactMultiMediaChip( void);
; rs232cmd.c  439	
; rs232cmd.c  440	int FindParameter( char* par, struct PAR_STRUCT code* TmpPtr);
; rs232cmd.c  441	
; rs232cmd.c  442	long FLTToSamples( UC system, int F, int L, float T);
; rs232cmd.c  443	void PrintSamplesToFLT( UC system, long samples);
; rs232cmd.c  444	
; rs232cmd.c  445	// **************************************************************************
; rs232cmd.c  446	struct CMD_STRUCT code Mandated[12] = {
	DB	04DH,041H,058H,000H
	SYMB	TYPE, 490, 'n', #2, 129
	SYMB	TYPE, 491, 'P', #490
	SYMB	TYPE, 493, 'n', #492, 129
	SYMB	TYPE, 494, 'P', #493
	SYMB	TYPE, 495, 'X', 12, #1, 30, 0
	SYMB	TYPE, 496, 'n', #495, 129
	SYMB	TYPE, 497, 'P', #496
	SYMB	TYPE, 498, 'X', 12, #1, 30, 0
	SYMB	TYPE, 499, 'n', #498, 129
	SYMB	TYPE, 500, 'P', #499
	SYMB	TYPE, 492, "CMD_STRUCT", 'S', 24,\
		 "LongName", #491, 0,\
		 "ShortName", #491, 4,\
		 "SameLevel", #494, 8,\
		 "NextLevel", #494, 12,\
		 "Suffix", #497, 16,\
		 "Function", #500, 20
	SYMB	TYPE, 501, 'Z', #492, 11
	SYMB	IDEN, "Mandated", _Mandated, #501, 129, 0
	SYMB	ALAB, _Mandated, #501
	PUBLIC	_Mandated
	ALIGN	1
_Mandated:
	DD	_CLSCmdTxt
	DD	000000000H
	DD	_Mandated+24
	DD	000000000H,000000000H
	DD	_CLSCommand,_ESECmdTxt
	DD	000000000H
	DD	_Mandated+48
	DD	000000000H,000000000H
	DD	_ESECommand,_ESRCmdTxt
	DD	000000000H
	DD	_Mandated+72
	DD	000000000H,000000000H
	DD	_ESRCommand,_IDNCmdTxt
	DD	000000000H
	DD	_Mandated+96
	DD	000000000H,000000000H
	DD	_IDNCommand,_OPCCmdTxt
	DD	000000000H
	DD	_Mandated+120
	DD	000000000H,000000000H
	DD	_OPCCommand,_RSTCmdTxt
	DD	000000000H
	DD	_Mandated+144
	DD	000000000H,000000000H
	DD	_RSTCommand,_SRECmdTxt
	DD	000000000H
	DD	_Mandated+168
	DD	000000000H,000000000H
	DD	_SRECommand,_STBCmdTxt
	DD	000000000H
	DD	_Mandated+192
	DD	000000000H,000000000H
	DD	_STBCommand,_TSTCmdTxt
	DD	000000000H
	DD	_Mandated+216
	DD	000000000H,000000000H
	DD	_TSTCommand,_RCLCmdTxt
	DD	000000000H
	DD	_Mandated+240
	DD	000000000H,000000000H
	DD	_RCLCommand,_SAVCmdTxt
	DD	000000000H
	DD	_Mandated+264
	DD	000000000H,000000000H
	DD	_SAVCommand,_WAICmdTxt
	DD	000000000H,000000000H,000000000H,000000000H
; rs232cmd.c  447		{ CLSCmdTxt, NULL, &Mandated[1],  NULL, NONE, CLSCommand},
; rs232cmd.c  448		{ ESECmdTxt, NULL, &Mandated[2],  NULL, NONE, ESECommand},
; rs232cmd.c  449		{ ESRCmdTxt, NULL, &Mandated[3],  NULL, NONE, ESRCommand},
; rs232cmd.c  450		{ IDNCmdTxt, NULL, &Mandated[4],  NULL, NONE, IDNCommand},
; rs232cmd.c  451		{ OPCCmdTxt, NULL, &Mandated[5],  NULL, NONE, OPCCommand},
; rs232cmd.c  452		{ RSTCmdTxt, NULL, &Mandated[6],  NULL, NONE, RSTCommand},
; rs232cmd.c  453		{ SRECmdTxt, NULL, &Mandated[7],  NULL, NONE, SRECommand},
; rs232cmd.c  454		{ STBCmdTxt, NULL, &Mandated[8],  NULL, NONE, STBCommand},
; rs232cmd.c  455		{ TSTCmdTxt, NULL, &Mandated[9],  NULL, NONE, TSTCommand},
; rs232cmd.c  456		{ RCLCmdTxt, NULL, &Mandated[10], NULL, NONE, RCLCommand},
; rs232cmd.c  457		{ SAVCmdTxt, NULL, &Mandated[11], NULL, NONE, SAVCommand},
; rs232cmd.c  458		{ WAICmdTxt, NULL, NULL         , NULL, NONE, WAICommand}
; rs232cmd.c  459	};
; rs232cmd.c  460	
; rs232cmd.c  461	struct CMD_STRUCT code Subsystem[9] = {
	DD	_WAICommand
	SYMB	TYPE, 503, 'Z', #492, 8
	SYMB	IDEN, "Subsystem", _Subsystem, #503, 129, 0
	SYMB	ALAB, _Subsystem, #503
	PUBLIC	_Subsystem
	ALIGN	1
_Subsystem:
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_Subsystem+24
	DD	_System
	DD	000000000H,000000000H
	DD	_STATUSCmdTxt,_STATCmdTxt
	DD	_Subsystem+48
	DD	_Status
	DD	000000000H,000000000H
	DD	_DIAGNOSTICCmdTxt,_DIAGCmdTxt
	DD	_Subsystem+72
	DD	000000000H,000000000H,000000000H
	DD	_MONITORCmdTxt,_MONCmdTxt
	DD	_Subsystem+96
	DD	000000000H,000000000H,000000000H
	DD	_INPUTCmdTxt,_INPCmdTxt
	DD	_Subsystem+120
	DD	_Input
	DD	000000000H,000000000H
	DD	_OUTPUTCmdTxt,_OUTPCmdTxt
	DD	_Subsystem+144
	DD	_Output
	DD	000000000H,000000000H
	DD	_USERCmdTxt,_USERCmdTxt
	DD	_Subsystem+168
	DD	000000000H,000000000H,000000000H
	DD	_MEASURECmdTxt,_MEASCmdTxt
	DD	_Subsystem+192
	DD	000000000H,000000000H,000000000H
	DD	_FACTORYCmdTxt,_FACTCmdTxt
	DD	000000000H
	DD	_Factory
; rs232cmd.c  462		{ SYSTEMCmdTxt,	  SYSTCmdTxt, &Subsystem[1], &System[0],  NONE, NONE},
; rs232cmd.c  463		{ STATUSCmdTxt, 	  STATCmdTxt, &Subsystem[2], &Status[0],  NONE, NONE},
; rs232cmd.c  464		{ DIAGNOSTICCmdTxt, DIAGCmdTxt, &Subsystem[3], NULL,		   NONE, NONE},
; rs232cmd.c  465		{ MONITORCmdTxt, 	  MONCmdTxt,  &Subsystem[4], NULL, 		   NONE, NONE},
; rs232cmd.c  466		{ INPUTCmdTxt, 	  INPCmdTxt,  &Subsystem[5], &Input[0],   NONE, NONE},
; rs232cmd.c  467		{ OUTPUTCmdTxt, 	  OUTPCmdTxt, &Subsystem[6], &Output[0],  NONE, NONE},
; rs232cmd.c  468		{ USERCmdTxt, 		  USERCmdTxt, &Subsystem[7], NULL, 		   NONE, NONE},
; rs232cmd.c  469		{ MEASURECmdTxt, 	  MEASCmdTxt, &Subsystem[8], NULL, 		   NONE, NONE},
; rs232cmd.c  470		{ FACTORYCmdTxt, 	  FACTCmdTxt, NULL, 			  &Factory[0], NONE, NONE},
; rs232cmd.c  471	};
; rs232cmd.c  472	
; rs232cmd.c  473	// **************************************************************************
; rs232cmd.c  474	/*	CMD:	SUB1:	SUB2:	SUB3:	PARM:
; rs232cmd.c  475			SYSTem
; rs232cmd.c  476				:ERRor?
; rs232cmd.c  477	    	:VERSion?
; rs232cmd.c  478		    :PRESet<?>
; rs232cmd.c  479	  	  	[:ACTIVE?]
; rs232cmd.c  480	  	  	:RECall<?>	1 .. 4
; rs232cmd.c  481	    	  :STORe			1 .. 4
; rs232cmd.c  482	      	:NAMe<?>		1 .. 4 , <name>
; rs232cmd.c  483	      	:AUTHor<?> 	1 .. 4 , <author name>
; rs232cmd.c  484		      :DATE<?>		1 .. 4[, <year>,<month>,<date>]
; rs232cmd.c  485					:DOWNload		1 .. 4
; rs232cmd.c  486					:UPLoad			1 .. 4
; rs232cmd.c  487	    	:EVENtlog
; rs232cmd.c  488	    	:DATE
; rs232cmd.c  489	    	:TIME
; rs232cmd.c  490	*/
; rs232cmd.c  491	struct CMD_STRUCT code System[6] = {
	DD	000000000H,000000000H
	SYMB	TYPE, 505, 'Z', #492, 5
	SYMB	IDEN, "System", _System, #505, 129, 0
	SYMB	ALAB, _System, #505
	PUBLIC	_System
	ALIGN	1
_System:
	DD	_ERRORCmdTxt,_ERRCmdTxt
	DD	_System+24
	DD	000000000H,000000000H
	DD	_SystemError,_VERSIONCmdTxt,_VERSCmdTxt
	DD	_System+48
	DD	000000000H,000000000H
	DD	_SystemVersion,_PRESETCmdTxt,_PRESCmdTxt
	DD	_System+72
	DD	_SystemLevel1
	DD	000000000H
	DD	_RCLCommand,_EVENTLOGCmdTxt,_EVENCmdTxt
	DD	_System+96
	DD	000000000H,000000000H,000000000H
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_System+120
	DD	000000000H,000000000H,000000000H
	DD	_TIMECmdTxt,_TIMECmdTxt
; rs232cmd.c  492		{ ERRORCmdTxt, 	ERRCmdTxt, 	&System[1], NULL, 				NONE, SystemError},
; rs232cmd.c  493		{ VERSIONCmdTxt,	VERSCmdTxt, &System[2], NULL, 				NONE, SystemVersion},
; rs232cmd.c  494		{ PRESETCmdTxt, 	PRESCmdTxt, &System[3], &SystemLevel1[0], NONE, RCLCommand},
; rs232cmd.c  495		{ EVENTLOGCmdTxt, EVENCmdTxt, &System[4], NULL, 				NONE, NONE},
; rs232cmd.c  496		{ DATECmdTxt, 		DATECmdTxt, &System[5], NULL, 				NONE, NONE},
; rs232cmd.c  497		{ TIMECmdTxt, 		TIMECmdTxt, NULL, 		NULL, 				NONE, NONE}
; rs232cmd.c  498	};
; rs232cmd.c  499	
; rs232cmd.c  500	struct CMD_STRUCT code SystemLevel1[7] = {
	DD	000000000H,000000000H,000000000H,000000000H
	SYMB	TYPE, 507, 'Z', #492, 6
	SYMB	IDEN, "SystemLevel1", _SystemLevel1, #507, 129, 0
	SYMB	ALAB, _SystemLevel1, #507
	PUBLIC	_SystemLevel1
	ALIGN	1
_SystemLevel1:
	DD	_RECALLCmdTxt,_RECCmdTxt
	DD	_SystemLevel1+24
	DD	000000000H,000000000H
	DD	_RCLCommand,_STORECmdTxt,_STORCmdTxt
	DD	_SystemLevel1+48
	DD	000000000H,000000000H
	DD	_SAVCommand,_NAMECmdTxt,_NAMECmdTxt
	DD	_SystemLevel1+72
	DD	000000000H,000000000H
	DD	_SystemPresetName,_AUTHORCmdTxt,_AUTHCmdTxt
	DD	_SystemLevel1+96
	DD	000000000H,000000000H
	DD	_SystemPresetAuthor,_DATECmdTxt,_DATECmdTxt
	DD	_SystemLevel1+120
	DD	000000000H,000000000H
	DD	_SystemPresetDate,_DOWNLOADCmdTxt,_DOWNCmdTxt
	DD	_SystemLevel1+144
	DD	000000000H,000000000H
	DD	_SystemPresetDownload,_UPLOADCmdTxt,_UPLCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  501		{ RECALLCmdTxt,   RECCmdTxt, 	&SystemLevel1[1], NULL, NONE, RCLCommand},
; rs232cmd.c  502		{ STORECmdTxt,    STORCmdTxt, &SystemLevel1[2], NULL, NONE, SAVCommand},
; rs232cmd.c  503		{ NAMECmdTxt, 	   NAMECmdTxt, &SystemLevel1[3],	NULL, NONE, SystemPresetName},
; rs232cmd.c  504		{ AUTHORCmdTxt,   AUTHCmdTxt, &SystemLevel1[4],	NULL, NONE, SystemPresetAuthor},
; rs232cmd.c  505		{ DATECmdTxt, 	   DATECmdTxt, &SystemLevel1[5],	NULL, NONE, SystemPresetDate},
; rs232cmd.c  506		{ DOWNLOADCmdTxt, DOWNCmdTxt,	&SystemLevel1[6],	NULL, NONE, SystemPresetDownload},
; rs232cmd.c  507		{ UPLOADCmdTxt, 	UPLCmdTxt,	NULL, 				NULL, NONE, SystemPresetUpload},
; rs232cmd.c  508	};
; rs232cmd.c  509	
; rs232cmd.c  510	// **************************************************************************
; rs232cmd.c  511	/*	CMD:	SUB1:	SUB2:	SUB3:	PARM:
; rs232cmd.c  512			STATus
; rs232cmd.c  513		 		:OPERation
; rs232cmd.c  514	  	 		:EVENt?
; rs232cmd.c  515		      :CONDition?
; rs232cmd.c  516	  	    :ENABle<?>	0 .. 65535
; rs232cmd.c  517	   		:QUEStionable
; rs232cmd.c  518	     		:EVENt?
; rs232cmd.c  519		      :CONDition?
; rs232cmd.c  520	  	    :ENABle<?>	0 .. 65535
; rs232cmd.c  521				:PRESet				TBD
; rs232cmd.c  522		    :PT5201?
; rs232cmd.c  523	*/
; rs232cmd.c  524	struct CMD_STRUCT code Status[3] = {
	DD	_SystemPresetUpload
	SYMB	TYPE, 509, 'Z', #492, 2
	SYMB	IDEN, "Status", _Status, #509, 129, 0
	SYMB	ALAB, _Status, #509
	PUBLIC	_Status
	ALIGN	1
_Status:
	DD	_OPERATIONCmdTxt,_OPERCmdTxt
	DD	_Status+24
	DD	_StatusLevel1_1
	DD	000000000H
	DD	_StatusOperEvent,_QUESTIONABLECmdTxt,_QUESCmdTxt
	DD	_Status+48
	DD	_StatusLevel1_2
	DD	000000000H
	DD	_StatusQuestEvent,_PRESETCmdTxt,_PRESCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  525		{ OPERATIONCmdTxt, 	 OPERCmdTxt, &Status[1], &StatusLevel1_1[0], NONE, StatusOperEvent},
; rs232cmd.c  526		{ QUESTIONABLECmdTxt, QUESCmdTxt, &Status[2], &StatusLevel1_2[0], NONE, StatusQuestEvent},
; rs232cmd.c  527		{ PRESETCmdTxt, 		 PRESCmdTxt, NULL, 		 NULL, 					NONE, StatusPreset},
; rs232cmd.c  528	};
; rs232cmd.c  529	
; rs232cmd.c  530	struct CMD_STRUCT code StatusLevel1_1[3] = {
	DD	_StatusPreset
	SYMB	IDEN, "StatusLevel1_1", _StatusLevel1_1, #509, 129, 0
	SYMB	ALAB, _StatusLevel1_1, #509
	PUBLIC	_StatusLevel1_1
	ALIGN	1
_StatusLevel1_1:
	DD	_EVENTCmdTxt,_EVENCmdTxt
	DD	_StatusLevel1_1+24
	DD	000000000H,000000000H
	DD	_StatusOperEvent,_CONDITIONCmdTxt,_CONDCmdTxt
	DD	_StatusLevel1_1+48
	DD	000000000H,000000000H
	DD	_StatusOperCondition,_ENABLECmdTxt,_ENABCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  531		{ EVENTCmdTxt, 	 EVENCmdTxt, &StatusLevel1_1[1], NULL, NONE, StatusOperEvent},
; rs232cmd.c  532		{ CONDITIONCmdTxt, CONDCmdTxt, &StatusLevel1_1[2], NULL, NONE, StatusOperCondition},
; rs232cmd.c  533		{ ENABLECmdTxt, 	 ENABCmdTxt, NULL, 				   NULL, NONE, StatusOperEnable},
; rs232cmd.c  534	};
; rs232cmd.c  535	
; rs232cmd.c  536	struct CMD_STRUCT code StatusLevel1_2[3] = {
	DD	_StatusOperEnable
	SYMB	IDEN, "StatusLevel1_2", _StatusLevel1_2, #509, 129, 0
	SYMB	ALAB, _StatusLevel1_2, #509
	PUBLIC	_StatusLevel1_2
	ALIGN	1
_StatusLevel1_2:
	DD	_EVENTCmdTxt,_EVENCmdTxt
	DD	_StatusLevel1_2+24
	DD	000000000H,000000000H
	DD	_StatusQuestEvent,_CONDITIONCmdTxt,_CONDCmdTxt
	DD	_StatusLevel1_2+48
	DD	000000000H,000000000H
	DD	_StatusQuestCondition,_ENABLECmdTxt,_ENABCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  537		{ EVENTCmdTxt,		 EVENCmdTxt, &StatusLevel1_2[1], NULL, NONE, StatusQuestEvent},
; rs232cmd.c  538		{ CONDITIONCmdTxt, CONDCmdTxt, &StatusLevel1_2[2], NULL, NONE, StatusQuestCondition},
; rs232cmd.c  539		{ ENABLECmdTxt, 	 ENABCmdTxt, NULL, 					NULL, NONE, StatusQuestEnable},
; rs232cmd.c  540	};
; rs232cmd.c  541	
; rs232cmd.c  542	
; rs232cmd.c  543	// **************************************************************************
; rs232cmd.c  544	/*	CMD:	SUB1:	SUB2:		PARM:
; rs232cmd.c  545			INPut
; rs232cmd.c  546				:GENLOCK<?>
; rs232cmd.c  547					:SYSTem			INTernal | PALBurst | NTSCburst |F10MHZ
; rs232cmd.c  548					:DELay			<Field>,<Line>,<Time>
; rs232cmd.c  549					:CALibrate
; rs232cmd.c  550						:ENABle		OFF|ON
; rs232cmd.c  551						:ADJust		UP|DOWN|MIN|MAX
; rs232cmd.c  552						:STORe
; rs232cmd.c  553											
; rs232cmd.c  554	*/
; rs232cmd.c  555	//**************************************************************************
; rs232cmd.c  556	struct CMD_STRUCT code Input[1] = {
	DD	_StatusQuestEnable
	SYMB	TYPE, 511, 'Z', #492, 0
	SYMB	IDEN, "Input", _Input, #511, 129, 0
	SYMB	ALAB, _Input, #511
	PUBLIC	_Input
	ALIGN	1
_Input:	DD	_GENLOCKCmdTxt,_GENLCmdTxt
	DD	000000000H
	DD	_GenlockLevel1
	DD	000000000H
; rs232cmd.c  557		{ GENLOCKCmdTxt, GENLCmdTxt, NULL, &GenlockLevel1[0], NONE, GenlockGen},
; rs232cmd.c  558	};
; rs232cmd.c  559	
; rs232cmd.c  560	struct CMD_STRUCT code GenlockLevel1[3] = {
	DD	_GenlockGen
	SYMB	IDEN, "GenlockLevel1", _GenlockLevel1, #509, 129, 0
	SYMB	ALAB, _GenlockLevel1, #509
	PUBLIC	_GenlockLevel1
	ALIGN	1
_GenlockLevel1:
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_GenlockLevel1+24
	DD	000000000H,000000000H
	DD	_GenlockGenSystem,_DELAYCmdTxt,_DELCmdTxt
	DD	_GenlockLevel1+48
	DD	000000000H,000000000H
	DD	_GenlockGenDelay,_CALIBRATECmdTxt,_CALCmdTxt
	DD	000000000H
	DD	_GenlockLevel1_1
; rs232cmd.c  561		{ SYSTEMCmdTxt, 	 SYSTCmdTxt, &GenlockLevel1[1], NULL, 					  NONE, GenlockGenSystem},
; rs232cmd.c  562		{ DELAYCmdTxt, 	 DELCmdTxt,  &GenlockLevel1[2], NULL, 					  NONE, GenlockGenDelay},
; rs232cmd.c  563		{ CALIBRATECmdTxt, CALCmdTxt,  NULL, 				  &GenlockLevel1_1[0], NONE, NONE},
; rs232cmd.c  564	};
; rs232cmd.c  565	
; rs232cmd.c  566	struct CMD_STRUCT code GenlockLevel1_1[3] = {
	DD	000000000H,000000000H
	SYMB	IDEN, "GenlockLevel1_1", _GenlockLevel1_1, #509, 129, 0
	SYMB	ALAB, _GenlockLevel1_1, #509
	PUBLIC	_GenlockLevel1_1
	ALIGN	1
_GenlockLevel1_1:
	DD	_ENABLECmdTxt,_ENABCmdTxt
	DD	_GenlockLevel1_1+24
	DD	000000000H,000000000H
	DD	_GenlockGenCalibrateEnable,_ADJUSTCmdTxt,_ADJCmdTxt
	DD	_GenlockLevel1_1+48
	DD	000000000H,000000000H
	DD	_GenlockGenCalibrateAdjust,_STORECmdTxt,_STORCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  567		{ ENABLECmdTxt, ENABCmdTxt, &GenlockLevel1_1[1], NULL, NONE, GenlockGenCalibrateEnable},
; rs232cmd.c  568		{ ADJUSTCmdTxt, ADJCmdTxt,  &GenlockLevel1_1[2], NULL, NONE, GenlockGenCalibrateAdjust},
; rs232cmd.c  569		{ STORECmdTxt,  STORCmdTxt, NULL, 					 NULL, NONE, GenlockGenCalibrateStore},
; rs232cmd.c  570	};
; rs232cmd.c  571	// **************************************************************************
; rs232cmd.c  572	/*	CMD:	SUB1:	SUB2:		PARM:
; rs232cmd.c  573			OUTPut
; rs232cmd.c  574				:BB1-3<?>
; rs232cmd.c  575					:SYSTem			INTernal | PALBurst | NTSCburst |F10MHZ
; rs232cmd.c  576					:DELay			<Field>,<Line>,<Time>
; rs232cmd.c  577					:SCHPhase		<-179to 180>
; rs232cmd.c  578	
; rs232cmd.c  579				:TSGenerator<?>
; rs232cmd.c  580					:PATTern 	  <pattern name>
; rs232cmd.c  581					:SYSTem			PAL|NTSC
; rs232cmd.c  582					:DELay			<Field>,<Line>,<Time>
; rs232cmd.c  583					:SCHPhase		<-179to 180>
; rs232cmd.c  584					:EMBaudio<?>
; rs232cmd.c  585						[:SIGNal]	OFF | SILence | F1KHZ
; rs232cmd.c  586						:LEVel
; rs232cmd.c  587	
; rs232cmd.c  588				:AUDio
; rs232cmd.c  589					:OUTPut
; rs232cmd.c  590					:ANALog<?>
; rs232cmd.c  591						:SIGNal
; rs232cmd.c  592						:LEVel
; rs232cmd.c  593						:CLICk
; rs232cmd.c  594					:AESebu<?>
; rs232cmd.c  595						:SYSTem
; rs232cmd.c  596						:SIGNal
; rs232cmd.c  597						:LEVel
; rs232cmd.c  598						:TIMing
; rs232cmd.c  599						:WORDclock
; rs232cmd.c  600						:CLICkperiod
; rs232cmd.c  601	*/
; rs232cmd.c  602	struct CMD_STRUCT code Output[3] = {
	DD	_GenlockGenCalibrateStore
	SYMB	IDEN, "Output", _Output, #509, 129, 0
	SYMB	ALAB, _Output, #509
	PUBLIC	_Output
	ALIGN	1
_Output:
	DD	_BBCmdTxt,_BBCmdTxt
	DD	_Output+24
	DD	_BBGenLevel1,_BBGenSuffix,_BBGen,_TSGENERATORCmdTxt
	DD	_TSGCmdTxt
	DD	_Output+48
	DD	_TSGenLevel1
	DD	000000000H
	DD	_TSGen,_AUDIOCmdTxt,_AUDCmdTxt
	DD	000000000H
	DD	_AudioGenLevel1
	DD	000000000H
; rs232cmd.c  603		{ BBCmdTxt, 			BBCmdTxt,  &Output[1], &BBGenLevel1[0],	 BBGenSuffix, BBGen},
; rs232cmd.c  604		{ TSGENERATORCmdTxt, TSGCmdTxt, &Output[2], &TSGenLevel1[0], 	 NONE,		  TSGen},
; rs232cmd.c  605		{ AUDIOCmdTxt, 		AUDCmdTxt, NULL,		  &AudioGenLevel1[0], NONE,		  AudioGenOutput},
; rs232cmd.c  606	};
; rs232cmd.c  607	
; rs232cmd.c  608	struct CMD_STRUCT code BBGenLevel1[3] = {
	DD	_AudioGenOutput
	SYMB	IDEN, "BBGenLevel1", _BBGenLevel1, #509, 129, 0
	SYMB	ALAB, _BBGenLevel1, #509
	PUBLIC	_BBGenLevel1
	ALIGN	1
_BBGenLevel1:
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_BBGenLevel1+24
	DD	000000000H,000000000H
	DD	_BBGenSystem,_DELAYCmdTxt,_DELCmdTxt
	DD	_BBGenLevel1+48
	DD	000000000H,000000000H
	DD	_BBGenDelay,_SCHPHASECmdTxt,_SCHPCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  609		{ SYSTEMCmdTxt, 	SYSTCmdTxt, &BBGenLevel1[1], NULL, NONE, BBGenSystem},
; rs232cmd.c  610		{ DELAYCmdTxt,	   DELCmdTxt,  &BBGenLevel1[2], NULL, NONE, BBGenDelay},
; rs232cmd.c  611		{ SCHPHASECmdTxt, SCHPCmdTxt, NULL, 			  NULL, NONE, BBGenScHPhase},
; rs232cmd.c  612	};
; rs232cmd.c  613	
; rs232cmd.c  614	struct CMD_STRUCT code TSGenLevel1[5] = {
	DD	_BBGenScHPhase
	SYMB	TYPE, 513, 'Z', #492, 4
	SYMB	IDEN, "TSGenLevel1", _TSGenLevel1, #513, 129, 0
	SYMB	ALAB, _TSGenLevel1, #513
	PUBLIC	_TSGenLevel1
	ALIGN	1
_TSGenLevel1:
	DD	_PATTERNCmdTxt,_PATTCmdTxt
	DD	_TSGenLevel1+24
	DD	000000000H,000000000H
	DD	_TSGenPattern,_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_TSGenLevel1+48
	DD	000000000H,000000000H
	DD	_TSGenSystem,_DELAYCmdTxt,_DELCmdTxt
	DD	_TSGenLevel1+72
	DD	000000000H,000000000H
	DD	_TSGenDelay,_SCHPHASECmdTxt,_SCHPCmdTxt
	DD	_TSGenLevel1+96
	DD	000000000H,000000000H
	DD	_TSGenScHPhase,_EMBAUDIOCmdTxt,_EMBCmdTxt
	DD	000000000H
	DD	_TSGenLevel1_1
	DD	000000000H
; rs232cmd.c  615		{ PATTERNCmdTxt, 	PATTCmdTxt, &TSGenLevel1[1], NULL, 					NONE, TSGenPattern},
; rs232cmd.c  616		{ SYSTEMCmdTxt, 	SYSTCmdTxt, &TSGenLevel1[2], NULL, 					NONE, TSGenSystem},
; rs232cmd.c  617		{ DELAYCmdTxt,	   DELCmdTxt,  &TSGenLevel1[3], NULL, 					NONE, TSGenDelay},
; rs232cmd.c  618		{ SCHPHASECmdTxt, SCHPCmdTxt, &TSGenLevel1[4], NULL, 					NONE, TSGenScHPhase},
; rs232cmd.c  619		{ EMBAUDIOCmdTxt, EMBCmdTxt, 	NULL, 			  &TSGenLevel1_1[0], NONE, TSGenEmbAudioSignal},
; rs232cmd.c  620	};
; rs232cmd.c  621	
; rs232cmd.c  622	struct CMD_STRUCT code TSGenLevel1_1[2] = {
	DD	_TSGenEmbAudioSignal
	SYMB	TYPE, 515, 'Z', #492, 1
	SYMB	IDEN, "TSGenLevel1_1", _TSGenLevel1_1, #515, 129, 0
	SYMB	ALAB, _TSGenLevel1_1, #515
	PUBLIC	_TSGenLevel1_1
	ALIGN	1
_TSGenLevel1_1:
	DD	_SIGNALCmdTxt,_SIGNCmdTxt
	DD	_TSGenLevel1_1+24
	DD	000000000H,000000000H
	DD	_TSGenEmbAudioSignal,_LEVELCmdTxt,_LEVCmdTxt
; rs232cmd.c  623		{ SIGNALCmdTxt, SIGNCmdTxt, &TSGenLevel1_1[1], NULL, NONE, TSGenEmbAudioSignal},
; rs232cmd.c  624		{ LEVELCmdTxt,  LEVCmdTxt,  NULL,				  NULL, NONE, NONE},
; rs232cmd.c  625	};
; rs232cmd.c  626	
; rs232cmd.c  627	struct CMD_STRUCT code AudioGenLevel1[3] = {
	DD	000000000H,000000000H,000000000H,000000000H
	SYMB	IDEN, "AudioGenLevel1", _AudioGenLevel1, #509, 129, 0
	SYMB	ALAB, _AudioGenLevel1, #509
	PUBLIC	_AudioGenLevel1
	ALIGN	1
_AudioGenLevel1:
	DD	_OUTPUTCmdTxt,_OUTPCmdTxt
	DD	_AudioGenLevel1+24
	DD	000000000H,000000000H
	DD	_AudioGenOutput,_ANALOGCmdTxt,_ANALCmdTxt
	DD	_AudioGenLevel1+48
	DD	_AudioGenLevel1_1
	DD	000000000H
	DD	_AudioGenAnalog,_AESEBUCmdTxt,_AESCmdTxt
	DD	000000000H
	DD	_AudioGenLevel1_2
	DD	000000000H
; rs232cmd.c  628		{ OUTPUTCmdTxt, OUTPCmdTxt, &AudioGenLevel1[1], NULL, 					 NONE, AudioGenOutput},
; rs232cmd.c  629		{ ANALOGCmdTxt, ANALCmdTxt, &AudioGenLevel1[2], &AudioGenLevel1_1[0], NONE, AudioGenAnalog},
; rs232cmd.c  630		{ AESEBUCmdTxt, AESCmdTxt,  NULL, 				   &AudioGenLevel1_2[0], NONE, AudioGenAESEBU},
; rs232cmd.c  631	};
; rs232cmd.c  632	
; rs232cmd.c  633	struct CMD_STRUCT code AudioGenLevel1_1[3] = {
	DD	_AudioGenAESEBU
	SYMB	IDEN, "AudioGenLevel1_1", _AudioGenLevel1_1, #509, 129, 0
	SYMB	ALAB, _AudioGenLevel1_1, #509
	PUBLIC	_AudioGenLevel1_1
	ALIGN	1
_AudioGenLevel1_1:
	DD	_SIGNALCmdTxt,_SIGNCmdTxt
	DD	_AudioGenLevel1_1+24
	DD	000000000H,000000000H
	DD	_AudioGenAnalogSignal,_LEVELCmdTxt,_LEVCmdTxt
	DD	_AudioGenLevel1_1+48
	DD	000000000H,000000000H
	DD	_AudioGenAnalogLevel,_CLICKCmdTxt,_CLICCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  634		{ SIGNALCmdTxt, SIGNCmdTxt, &AudioGenLevel1_1[1], NULL, NONE, AudioGenAnalogSignal},
; rs232cmd.c  635		{ LEVELCmdTxt,  LEVCmdTxt,  &AudioGenLevel1_1[2], NULL, NONE, AudioGenAnalogLevel},
; rs232cmd.c  636		{ CLICKCmdTxt,  CLICCmdTxt, NULL, 					  NULL, NONE, AudioGenAnalogClick},
; rs232cmd.c  637	};
; rs232cmd.c  638	
; rs232cmd.c  639	struct CMD_STRUCT code AudioGenLevel1_2[6] = {
	DD	_AudioGenAnalogClick
	SYMB	IDEN, "AudioGenLevel1_2", _AudioGenLevel1_2, #505, 129, 0
	SYMB	ALAB, _AudioGenLevel1_2, #505
	PUBLIC	_AudioGenLevel1_2
	ALIGN	1
_AudioGenLevel1_2:
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_AudioGenLevel1_2+24
	DD	000000000H,000000000H
	DD	_AudioGenAESEBUSystem,_SIGNALCmdTxt,_SIGNCmdTxt
	DD	_AudioGenLevel1_2+48
	DD	000000000H,000000000H
	DD	_AudioGenAESEBUSignal,_LEVELCmdTxt,_LEVCmdTxt
	DD	_AudioGenLevel1_2+72
	DD	000000000H,000000000H
	DD	_AudioGenAESEBULevel,_TIMINGCmdTxt,_TIMCmdTxt
	DD	_AudioGenLevel1_2+96
	DD	000000000H,000000000H
	DD	_AudioGenAESEBUTiming,_WORDCLOCKCmdTxt,_WORDCmdTxt
	DD	_AudioGenLevel1_2+120
	DD	000000000H,000000000H
	DD	_AudioGenAESEBUWordClock,_CLICKCmdTxt,_CLICCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  640		{ SYSTEMCmdTxt, 	 SYSTCmdTxt, &AudioGenLevel1_2[1], NULL, NONE, AudioGenAESEBUSystem},
; rs232cmd.c  641		{ SIGNALCmdTxt, 	 SIGNCmdTxt, &AudioGenLevel1_2[2], NULL, NONE, AudioGenAESEBUSignal},
; rs232cmd.c  642		{ LEVELCmdTxt, 	 LEVCmdTxt,  &AudioGenLevel1_2[3], NULL, NONE, AudioGenAESEBULevel},
; rs232cmd.c  643		{ TIMINGCmdTxt,	 TIMCmdTxt,  &AudioGenLevel1_2[4], NULL, NONE, AudioGenAESEBUTiming},
; rs232cmd.c  644		{ WORDCLOCKCmdTxt, WORDCmdTxt, &AudioGenLevel1_2[5], NULL, NONE, AudioGenAESEBUWordClock},
; rs232cmd.c  645		{ CLICKCmdTxt, 	 CLICCmdTxt, NULL, 					  NULL, NONE, AudioGenAESEBUClick},
; rs232cmd.c  646	};
; rs232cmd.c  647	
; rs232cmd.c  648	// **************************************************************************
; rs232cmd.c  649	/*	CMD:	SUB1:	SUB2:		PARM:
; rs232cmd.c  650			FACTORY
; rs232cmd.c  651				:PASSword
; rs232cmd.c  652	
; rs232cmd.c  653				:RESet
; rs232cmd.c  654	
; rs232cmd.c  655				:V24Circuit
; rs232cmd.c  656					:COMMand
; rs232cmd.c  657					:TRANsparent
; rs232cmd.c  658	
; rs232cmd.c  659				:CHECksum
; rs232cmd.c  660					:CODE
; rs232cmd.c  661					:PLD
; rs232cmd.c  662					:EMBaudio
; rs232cmd.c  663					:PATTern
; rs232cmd.c  664	
; rs232cmd.c  665				:MAINboard
; rs232cmd.c  666					:VERSion
; rs232cmd.c  667					:IDN
; rs232cmd.c  668						:COMPany
; rs232cmd.c  669						:TYPE
; rs232cmd.c  670						:KUNumber
; rs232cmd.c  671						:SWRevision
; rs232cmd.c  672					:SYSTem				PAL|NTSC
; rs232cmd.c  673					:FMSDate
; rs232cmd.c  674						:PRODuction	<year>,<month>,<day>
; rs232cmd.c  675						:UPDate			<year>,<month>,<day>
; rs232cmd.c  676	
; rs232cmd.c  677				:GENLock
; rs232cmd.c  678					[:DATE]				<year>,<month>,<day>
; rs232cmd.c  679					:VERSion
; rs232cmd.c  680					:FREFerence
; rs232cmd.c  681						[:DATE]			<year>,<month>,<day>
; rs232cmd.c  682						:DAC
; rs232cmd.c  683					:UREFerence
; rs232cmd.c  684						[:DATE]	 		<year>,<month>,<day>
; rs232cmd.c  685						:DAC
; rs232cmd.c  686					:HPHZero			<pal>,<ntsc>
; rs232cmd.c  687					:PHASe				<pal>,<ntsc>
; rs232cmd.c  688	
; rs232cmd.c  689				:BB 1
; rs232cmd.c  690					[:DATE]				<year>,<month>,<day>
; rs232cmd.c  691					:VERSion
; rs232cmd.c  692					:SIGNAL				NORMAL|F45MHZ
; rs232cmd.c  693					:PHASe				<pal>,<ntsc>
; rs232cmd.c  694					:SCHPhase			<pal>,<ntsc>
; rs232cmd.c  695					:DAC					<gain>,<offset>,<level>
; rs232cmd.c  696	
; rs232cmd.c  697				:BB 2-3
; rs232cmd.c  698					[:DATE]				<year>,<month>,<day>
; rs232cmd.c  699					:PHASe				<pal>,<ntsc>
; rs232cmd.c  700					:SCHPhase			<pal>,<ntsc>
; rs232cmd.c  701					:DAC					<gain>,<offset>,<level>
; rs232cmd.c  702	
; rs232cmd.c  703				:TSGenerator
; rs232cmd.c  704					[:DATE]				<year>,<month>,<day>
; rs232cmd.c  705					:AGAin				<pal>,<ntsc>
; rs232cmd.c  706					:CGAin				<pal>,<ntsc>
; rs232cmd.c  707					:PHASE				<pal>,<ntsc>
; rs232cmd.c  708					:SCHPhase			<pal>,<ntsc>
; rs232cmd.c  709	
; rs232cmd.c  710				:AUDio
; rs232cmd.c  711					[:STATus]
; rs232cmd.c  712					:DATE					<year>,<month>,<day>
; rs232cmd.c  713					:ALEVel				<left>,<right>
; rs232cmd.c  714	
; rs232cmd.c  715				:PLD
; rs232cmd.c  716					:VERSion			<video>,<audio>
; rs232cmd.c  717	
; rs232cmd.c  718				:TCXO
; rs232cmd.c  719					[:STATus]
; rs232cmd.c  720	
; rs232cmd.c  721				:MMCH						<subaddress>[,<data>]
; rs232cmd.c  722	
; rs232cmd.c  723	*/									
; rs232cmd.c  724	
; rs232cmd.c  725	struct CMD_STRUCT code Factory[12] = {
	DD	_AudioGenAESEBUClick
	SYMB	IDEN, "Factory", _Factory, #501, 129, 0
	SYMB	ALAB, _Factory, #501
	PUBLIC	_Factory
	ALIGN	1
_Factory:
	DD	_PASSWORDCmdTxt,_PASSCmdTxt
	DD	_Factory+24
	DD	000000000H,000000000H
	DD	_FactPassword,_RESETCmdTxt,_RESCmdTxt
	DD	_Factory+48
	DD	000000000H,000000000H
	DD	_FactReset,_V24CIRCUITCmdTxt,_V24CCmdTxt
	DD	_Factory+72
	DD	_FactoryLevel1
	DD	000000000H,000000000H
	DD	_CHECKSUMCmdTxt,_CHECCmdTxt
	DD	_Factory+96
	DD	_FactoryLevel9
	DD	000000000H,000000000H
	DD	_MAINBOARDCmdTxt,_MAINCmdTxt
	DD	_Factory+120
	DD	_FactoryLevel2
	DD	000000000H,000000000H
	DD	_GENLOCKCmdTxt,_GENLCmdTxt
	DD	_Factory+144
	DD	_FactoryLevel3
	DD	000000000H
	DD	_FactGenlockGenDate,_BBCmdTxt,_BBCmdTxt
	DD	_Factory+168
	DD	_FactoryLevel4,_BBGenSuffix,_FactBBGenDate
	DD	_TSGENERATORCmdTxt,_TSGCmdTxt
	DD	_Factory+192
	DD	_FactoryLevel5
	DD	000000000H
	DD	_FactTSGenDate,_AUDIOCmdTxt,_AUDCmdTxt
	DD	_Factory+216
	DD	_FactoryLevel6
	DD	000000000H
	DD	_FactAudioGenStatus,_PLDCmdTxt,_PLDCmdTxt
	DD	_Factory+240
	DD	_FactoryLevel7
	DD	000000000H
	DD	_FactPLDVersion,_TCXOCmdTxt,_TCXOCmdTxt
	DD	_Factory+264
	DD	_FactoryLevel8
	DD	000000000H
	DD	_FactTCXOStatus,_MMCHIPCmdTxt,_MMCHCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  726		{ PASSWORDCmdTxt, 	PASSCmdTxt, &Factory[1],  NULL,					NONE, 		 FactPassword},
; rs232cmd.c  727		{ RESETCmdTxt, 		RESCmdTxt,  &Factory[2],  NULL,					NONE, 		 FactReset},
; rs232cmd.c  728		{ V24CIRCUITCmdTxt, 	V24CCmdTxt, &Factory[3],  &FactoryLevel1[0], NONE, 		 NONE},
; rs232cmd.c  729		{ CHECKSUMCmdTxt, 	CHECCmdTxt, &Factory[4],  &FactoryLevel9[0], NONE,		  	 NONE},
; rs232cmd.c  730		{ MAINBOARDCmdTxt, 	MAINCmdTxt, &Factory[5],  &FactoryLevel2[0], NONE,		  	 NONE},
; rs232cmd.c  731		{ GENLOCKCmdTxt, 		GENLCmdTxt,	&Factory[6],  &FactoryLevel3[0], NONE,		  	 FactGenlockGenDate},
; rs232cmd.c  732		{ BBCmdTxt, 			BBCmdTxt, 	&Factory[7],  &FactoryLevel4[0], BBGenSuffix, FactBBGenDate},
; rs232cmd.c  733		{ TSGENERATORCmdTxt, TSGCmdTxt, 	&Factory[8],  &FactoryLevel5[0], NONE,		  	 FactTSGenDate},
; rs232cmd.c  734		{ AUDIOCmdTxt, 		AUDCmdTxt, 	&Factory[9],  &FactoryLevel6[0], NONE,		  	 FactAudioGenStatus},
; rs232cmd.c  735		{ PLDCmdTxt, 			PLDCmdTxt, 	&Factory[10], &FactoryLevel7[0], NONE,			 FactPLDVersion},
; rs232cmd.c  736		{ TCXOCmdTxt, 			TCXOCmdTxt,	&Factory[11], &FactoryLevel8[0], NONE,			 FactTCXOStatus},
; rs232cmd.c  737		{ MMCHIPCmdTxt, 		MMCHCmdTxt, NULL,			  NULL,					NONE,			 FactMultiMediaChip},
; rs232cmd.c  738	};
; rs232cmd.c  739	
; rs232cmd.c  740	struct CMD_STRUCT code FactoryLevel1[2] = {
	DD	_FactMultiMediaChip
	SYMB	IDEN, "FactoryLevel1", _FactoryLevel1, #515, 129, 0
	SYMB	ALAB, _FactoryLevel1, #515
	PUBLIC	_FactoryLevel1
	ALIGN	1
_FactoryLevel1:
	DD	_COMMANDCmdTxt,_COMMCmdTxt
	DD	_FactoryLevel1+24
	DD	000000000H,000000000H
	DD	_FactV24Command,_TRANSPARENTCmdTxt,_TRANCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  741		{ COMMANDCmdTxt, 		 COMMCmdTxt, &FactoryLevel1[1], NULL, NONE, FactV24Command},
; rs232cmd.c  742		{ TRANSPARENTCmdTxt, TRANCmdTxt, NULL,						  NULL, NONE, FactV24Transparent},
; rs232cmd.c  743	};
; rs232cmd.c  744	
; rs232cmd.c  745	struct CMD_STRUCT code FactoryLevel9[5] = {
	DD	_FactV24Transparent
	SYMB	IDEN, "FactoryLevel9", _FactoryLevel9, #513, 129, 0
	SYMB	ALAB, _FactoryLevel9, #513
	PUBLIC	_FactoryLevel9
	ALIGN	1
_FactoryLevel9:
	DD	_CODECmdTxt,_CODECmdTxt
	DD	_FactoryLevel9+24
	DD	000000000H,000000000H
	DD	_FactChecksumCode,_PLDCmdTxt,_PLDCmdTxt
	DD	_FactoryLevel9+48
	DD	000000000H,000000000H
	DD	_FactChecksumPLD,_EMBAUDIOCmdTxt,_EMBCmdTxt
	DD	_FactoryLevel9+72
	DD	000000000H,000000000H
	DD	_FactChecksumEmbAudio,_PATTERNCmdTxt,_PATTCmdTxt
	DD	_FactoryLevel9+96
	DD	000000000H,000000000H
	DD	_FactChecksumPattern,_RANGECmdTxt,_RANGCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  746		{ CODECmdTxt, 		CODECmdTxt, &FactoryLevel9[1], NULL, NONE, FactChecksumCode},
; rs232cmd.c  747		{ PLDCmdTxt,  	 	PLDCmdTxt,  &FactoryLevel9[2], NULL, NONE, FactChecksumPLD},
; rs232cmd.c  748		{ EMBAUDIOCmdTxt, EMBCmdTxt,  &FactoryLevel9[3], NULL, NONE, FactChecksumEmbAudio},
; rs232cmd.c  749		{ PATTERNCmdTxt, 	PATTCmdTxt, &FactoryLevel9[4], NULL, NONE, FactChecksumPattern},
; rs232cmd.c  750		{ RANGECmdTxt, 	RANGCmdTxt, NULL, 				 NULL, NONE, FactChecksumRange},
; rs232cmd.c  751	};
; rs232cmd.c  752	
; rs232cmd.c  753	struct CMD_STRUCT code FactoryLevel2[4] = {
	DD	_FactChecksumRange
	SYMB	TYPE, 517, 'Z', #492, 3
	SYMB	IDEN, "FactoryLevel2", _FactoryLevel2, #517, 129, 0
	SYMB	ALAB, _FactoryLevel2, #517
	PUBLIC	_FactoryLevel2
	ALIGN	1
_FactoryLevel2:
	DD	_VERSIONCmdTxt,_VERSCmdTxt
	DD	_FactoryLevel2+24
	DD	000000000H,000000000H
	DD	_FactMainVersion,_IDNCmdTxt,_IDNCmdTxt
	DD	_FactoryLevel2+48
	DD	_FactoryLevel2_2
	DD	000000000H,000000000H
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_FactoryLevel2+72
	DD	000000000H,000000000H
	DD	_FactMainSystem,_FMSDATECmdTxt,_FMSDCmdTxt
	DD	000000000H
	DD	_FactoryLevel2_1
; rs232cmd.c  754		{ VERSIONCmdTxt, 	VERSCmdTxt, &FactoryLevel2[1], NULL, 					 NONE, FactMainVersion},
; rs232cmd.c  755		{ IDNCmdTxt,  	 	IDNCmdTxt,  &FactoryLevel2[2], &FactoryLevel2_2[0], NONE, NONE},
; rs232cmd.c  756		{ SYSTEMCmdTxt, 	SYSTCmdTxt, &FactoryLevel2[3], NULL, 					 NONE, FactMainSystem},
; rs232cmd.c  757		{ FMSDATECmdTxt, 	FMSDCmdTxt, NULL, 				 &FactoryLevel2_1[0], NONE, NONE},
; rs232cmd.c  758	};
; rs232cmd.c  759	
; rs232cmd.c  760	struct CMD_STRUCT code FactoryLevel2_1[2] = {
	DD	000000000H,000000000H
	SYMB	IDEN, "FactoryLevel2_1", _FactoryLevel2_1, #515, 129, 0
	SYMB	ALAB, _FactoryLevel2_1, #515
	PUBLIC	_FactoryLevel2_1
	ALIGN	1
_FactoryLevel2_1:
	DD	_PRODUCTIONCmdTxt,_PRODCmdTxt
	DD	_FactoryLevel2_1+24
	DD	000000000H,000000000H
	DD	_FactMainFMSDateProd,_UPDATECmdTxt,_UPDCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  761		{ PRODUCTIONCmdTxt, PRODCmdTxt, &FactoryLevel2_1[1], NULL, NONE, FactMainFMSDateProd},
; rs232cmd.c  762		{ UPDATECmdTxt, 	  UPDCmdTxt,  NULL, 					  NULL, NONE, FactMainFMSDateUpd},
; rs232cmd.c  763	};
; rs232cmd.c  764	
; rs232cmd.c  765	struct CMD_STRUCT code FactoryLevel2_2[4] = {
	DD	_FactMainFMSDateUpd
	SYMB	IDEN, "FactoryLevel2_2", _FactoryLevel2_2, #517, 129, 0
	SYMB	ALAB, _FactoryLevel2_2, #517
	PUBLIC	_FactoryLevel2_2
	ALIGN	1
_FactoryLevel2_2:
	DD	_COMPANYCmdTxt,_COMPCmdTxt
	DD	_FactoryLevel2_2+24
	DD	000000000H,000000000H
	DD	_FactMainIDNCompany,_TYPECmdTxt,_TYPECmdTxt
	DD	_FactoryLevel2_2+48
	DD	000000000H,000000000H
	DD	_FactMainIDNType,_KUNUMBERCmdTxt,_KUNCmdTxt
	DD	_FactoryLevel2_2+72
	DD	000000000H,000000000H
	DD	_FactMainIDNKUNumber,_SWREVISIONCmdTxt,_SWRCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  766		{ COMPANYCmdTxt,    COMPCmdTxt, &FactoryLevel2_2[1], NULL, NONE, FactMainIDNCompany},
; rs232cmd.c  767		{ TYPECmdTxt,  	  TYPECmdTxt, &FactoryLevel2_2[2], NULL, NONE, FactMainIDNType},
; rs232cmd.c  768		{ KUNUMBERCmdTxt,   KUNCmdTxt,  &FactoryLevel2_2[3], NULL, NONE, FactMainIDNKUNumber},
; rs232cmd.c  769		{ SWREVISIONCmdTxt, SWRCmdTxt,  NULL, 					  NULL, NONE, FactMainIDNSWRevision},
; rs232cmd.c  770	};
; rs232cmd.c  771	
; rs232cmd.c  772	struct CMD_STRUCT code FactoryLevel3[6] = {
	DD	_FactMainIDNSWRevision
	SYMB	IDEN, "FactoryLevel3", _FactoryLevel3, #505, 129, 0
	SYMB	ALAB, _FactoryLevel3, #505
	PUBLIC	_FactoryLevel3
	ALIGN	1
_FactoryLevel3:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel3+24
	DD	000000000H,000000000H
	DD	_FactGenlockGenDate,_VERSIONCmdTxt,_VERSCmdTxt
	DD	_FactoryLevel3+48
	DD	000000000H,000000000H
	DD	_FactGenlockGenVersion,_FREFERENCECmdTxt,_FREFCmdTxt
	DD	_FactoryLevel3+72
	DD	_FactoryLevel3_1
	DD	000000000H
	DD	_FactGenlockGenFRefDate,_UREFERENCECmdTxt,_UREFCmdTxt
	DD	_FactoryLevel3+96
	DD	_FactoryLevel3_2
	DD	000000000H
	DD	_FactGenlockGenURefDate,_HPHZEROCmdTxt,_HPHZCmdTxt
	DD	_FactoryLevel3+120
	DD	000000000H,000000000H
	DD	_FactGenlockGenHPHZero,_PHASECmdTxt,_PHASCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  773		{ DATECmdTxt,  	  DATECmdTxt, &FactoryLevel3[1], NULL, 					NONE, FactGenlockGenDate},
; rs232cmd.c  774		{ VERSIONCmdTxt,    VERSCmdTxt, &FactoryLevel3[2], NULL, 					NONE, FactGenlockGenVersion},
; rs232cmd.c  775		{ FREFERENCECmdTxt, FREFCmdTxt, &FactoryLevel3[3], &FactoryLevel3_1[0], NONE, FactGenlockGenFRefDate},
; rs232cmd.c  776		{ UREFERENCECmdTxt, UREFCmdTxt, &FactoryLevel3[4], &FactoryLevel3_2[0], NONE, FactGenlockGenURefDate},
; rs232cmd.c  777		{ HPHZEROCmdTxt,    HPHZCmdTxt, &FactoryLevel3[5], NULL,						NONE, FactGenlockGenHPHZero},
; rs232cmd.c  778		{ PHASECmdTxt,  	  PHASCmdTxt, NULL, 					NULL,						NONE, FactGenlockGenPhase},
; rs232cmd.c  779	};
; rs232cmd.c  780	
; rs232cmd.c  781	struct CMD_STRUCT code FactoryLevel3_1[2] = {
	DD	_FactGenlockGenPhase
	SYMB	IDEN, "FactoryLevel3_1", _FactoryLevel3_1, #515, 129, 0
	SYMB	ALAB, _FactoryLevel3_1, #515
	PUBLIC	_FactoryLevel3_1
	ALIGN	1
_FactoryLevel3_1:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel3_1+24
	DD	000000000H,000000000H
	DD	_FactGenlockGenFRefDate,_DACCmdTxt,_DACCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  782		{ DATECmdTxt, DATECmdTxt, &FactoryLevel3_1[1], NULL, NONE, FactGenlockGenFRefDate},
; rs232cmd.c  783		{ DACCmdTxt,  DACCmdTxt,  NULL, 					  NULL, NONE, FactGenlockGenFRefDAC},
; rs232cmd.c  784	};
; rs232cmd.c  785	
; rs232cmd.c  786	struct CMD_STRUCT code FactoryLevel3_2[2] = {
	DD	_FactGenlockGenFRefDAC
	SYMB	IDEN, "FactoryLevel3_2", _FactoryLevel3_2, #515, 129, 0
	SYMB	ALAB, _FactoryLevel3_2, #515
	PUBLIC	_FactoryLevel3_2
	ALIGN	1
_FactoryLevel3_2:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel3_2+24
	DD	000000000H,000000000H
	DD	_FactGenlockGenURefDate,_DACCmdTxt,_DACCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  787		{ DATECmdTxt, DATECmdTxt, &FactoryLevel3_2[1], NULL, NONE, FactGenlockGenURefDate},
; rs232cmd.c  788		{ DACCmdTxt,  DACCmdTxt,  NULL, 					  NULL, NONE, FactGenlockGenURefDAC},
; rs232cmd.c  789	};
; rs232cmd.c  790	
; rs232cmd.c  791	struct CMD_STRUCT code FactoryLevel4[6] = {
	DD	_FactGenlockGenURefDAC
	SYMB	IDEN, "FactoryLevel4", _FactoryLevel4, #505, 129, 0
	SYMB	ALAB, _FactoryLevel4, #505
	PUBLIC	_FactoryLevel4
	ALIGN	1
_FactoryLevel4:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel4+24
	DD	000000000H,000000000H
	DD	_FactBBGenDate,_VERSIONCmdTxt,_VERSCmdTxt
	DD	_FactoryLevel4+48
	DD	000000000H,000000000H
	DD	_FactBBGenVersion,_SIGNALCmdTxt,_SIGNCmdTxt
	DD	_FactoryLevel4+72
	DD	000000000H,000000000H
	DD	_FactBBGenSignal,_PHASECmdTxt,_PHASCmdTxt
	DD	_FactoryLevel4+96
	DD	000000000H,000000000H
	DD	_FactBBGenPhase,_SCHPHASECmdTxt,_SCHPCmdTxt
	DD	_FactoryLevel4+120
	DD	000000000H,000000000H
	DD	_FactBBGenScHPhase,_DACCmdTxt,_DACCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  792		{ DATECmdTxt,  	DATECmdTxt, &FactoryLevel4[1], NULL, NONE, FactBBGenDate},
; rs232cmd.c  793		{ VERSIONCmdTxt, 	VERSCmdTxt, &FactoryLevel4[2], NULL, NONE, FactBBGenVersion},
; rs232cmd.c  794		{ SIGNALCmdTxt, 	SIGNCmdTxt, &FactoryLevel4[3], NULL, NONE, FactBBGenSignal},
; rs232cmd.c  795		{ PHASECmdTxt, 	PHASCmdTxt, &FactoryLevel4[4], NULL, NONE, FactBBGenPhase},
; rs232cmd.c  796		{ SCHPHASECmdTxt,	SCHPCmdTxt, &FactoryLevel4[5], NULL, NONE, FactBBGenScHPhase},
; rs232cmd.c  797		{ DACCmdTxt,  		DACCmdTxt,  NULL, 				 NULL, NONE, FactBBGenDAC},
; rs232cmd.c  798	};
; rs232cmd.c  799	
; rs232cmd.c  800	struct CMD_STRUCT code FactoryLevel5[5] = {
	DD	_FactBBGenDAC
	SYMB	IDEN, "FactoryLevel5", _FactoryLevel5, #513, 129, 0
	SYMB	ALAB, _FactoryLevel5, #513
	PUBLIC	_FactoryLevel5
	ALIGN	1
_FactoryLevel5:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel5+24
	DD	000000000H,000000000H
	DD	_FactTSGenDate,_AGAINCmdTxt,_AGACmdTxt
	DD	_FactoryLevel5+48
	DD	000000000H,000000000H
	DD	_FactTSGenAGain,_CGAINCmdTxt,_CGACmdTxt
	DD	_FactoryLevel5+72
	DD	000000000H,000000000H
	DD	_FactTSGenCGain,_PHASECmdTxt,_PHASCmdTxt
	DD	_FactoryLevel5+96
	DD	000000000H,000000000H
	DD	_FactTSGenPhase,_SCHPHASECmdTxt,_SCHPCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  801		{ DATECmdTxt,  	DATECmdTxt, &FactoryLevel5[1], NULL, NONE, FactTSGenDate},
; rs232cmd.c  802		{ AGAINCmdTxt, 	AGACmdTxt, 	&FactoryLevel5[2], NULL, NONE, FactTSGenAGain},
; rs232cmd.c  803		{ CGAINCmdTxt, 	CGACmdTxt, 	&FactoryLevel5[3], NULL, NONE, FactTSGenCGain},
; rs232cmd.c  804		{ PHASECmdTxt, 	PHASCmdTxt, &FactoryLevel5[4], NULL, NONE, FactTSGenPhase},
; rs232cmd.c  805		{ SCHPHASECmdTxt,	SCHPCmdTxt, NULL, 				 NULL, NONE, FactTSGenScHPhase},
; rs232cmd.c  806	};
; rs232cmd.c  807	
; rs232cmd.c  808	struct CMD_STRUCT code FactoryLevel6[3] = {
	DD	_FactTSGenScHPhase
	SYMB	IDEN, "FactoryLevel6", _FactoryLevel6, #509, 129, 0
	SYMB	ALAB, _FactoryLevel6, #509
	PUBLIC	_FactoryLevel6
	ALIGN	1
_FactoryLevel6:
	DD	_STATUSCmdTxt,_STATCmdTxt
	DD	_FactoryLevel6+24
	DD	000000000H,000000000H
	DD	_FactAudioGenStatus,_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel6+48
	DD	000000000H,000000000H
	DD	_FactAudioGenDate,_ALEVELCmdTxt,_ALEVCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  809		{ STATUSCmdTxt, STATCmdTxt, &FactoryLevel6[1], NULL, NONE, FactAudioGenStatus},
; rs232cmd.c  810		{ DATECmdTxt,   DATECmdTxt, &FactoryLevel6[2], NULL, NONE, FactAudioGenDate},
; rs232cmd.c  811		{ ALEVELCmdTxt, ALEVCmdTxt, NULL, 				  NULL, NONE, FactAudioGenLevel},
; rs232cmd.c  812	};
; rs232cmd.c  813	
; rs232cmd.c  814	struct CMD_STRUCT code FactoryLevel7[1] = {
	DD	_FactAudioGenLevel
	SYMB	IDEN, "FactoryLevel7", _FactoryLevel7, #511, 129, 0
	SYMB	ALAB, _FactoryLevel7, #511
	PUBLIC	_FactoryLevel7
	ALIGN	1
_FactoryLevel7:
	DD	_VERSIONCmdTxt,_VERSCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  815		{ VERSIONCmdTxt, 	VERSCmdTxt, NULL, NULL, NONE, FactPLDVersion},
; rs232cmd.c  816	};
; rs232cmd.c  817	
; rs232cmd.c  818	struct CMD_STRUCT code FactoryLevel8[1] = {
	DD	_FactPLDVersion
	SYMB	IDEN, "FactoryLevel8", _FactoryLevel8, #511, 129, 0
	SYMB	ALAB, _FactoryLevel8, #511
	PUBLIC	_FactoryLevel8
	ALIGN	1
_FactoryLevel8:
	DD	_STATUSCmdTxt,_STATCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  819		{ STATUSCmdTxt, STATCmdTxt, NULL, NULL, NONE, FactTCXOStatus},
; rs232cmd.c  820	};
; rs232cmd.c  821	
; rs232cmd.c  822	//**************************************************************************
; rs232cmd.c  823	// The following parameter structures are based on the enumerated types
; rs232cmd.c  824	//  defined in TABLES.H, ie. DO NOT change the order of these names. If
; rs232cmd.c  825	//  the order is changed in TABLES.H it must also be changed here.
; rs232cmd.c  826	
; rs232cmd.c  827	struct PAR_STRUCT code SAVEPar[1] = {
	DD	_FactTCXOStatus
	SYMB	TYPE, 520, 'n', #519, 129
	SYMB	TYPE, 521, 'P', #520
	SYMB	TYPE, 519, "PAR_STRUCT", 'S', 12,\
		 "LongName", #491, 0,\
		 "ShortName", #491, 4,\
		 "SameLevel", #521, 8
	SYMB	TYPE, 522, 'Z', #519, 0
	SYMB	IDEN, "SAVEPar", _SAVEPar, #522, 129, 0
	SYMB	ALAB, _SAVEPar, #522
	PUBLIC	_SAVEPar
	ALIGN	1
_SAVEPar:
	DD	_SAVEParTxt,_SAVEParTxt
; rs232cmd.c  828		{ SAVEParTxt, SAVEParTxt, NULL}
; rs232cmd.c  829	};
; rs232cmd.c  830	
; rs232cmd.c  831	struct PAR_STRUCT code GenlockSystemPar[4] = {
	DD	000000000H
	SYMB	TYPE, 524, 'Z', #519, 3
	SYMB	IDEN, "GenlockSystemPar", _GenlockSystemPar, #524, 129, 0
	SYMB	ALAB, _GenlockSystemPar, #524
	PUBLIC	_GenlockSystemPar
	ALIGN	1
_GenlockSystemPar:
	DD	_INTERNALParTxt,_INTParTxt
	DD	_GenlockSystemPar+12
	DD	_PALBURSTParTxt,_PALBParTxt
	DD	_GenlockSystemPar+24
	DD	_NTSCBURSTParTxt,_NTSCParTxt
	DD	_GenlockSystemPar+36
	DD	_F10MHzParTxt,_F10MHzParTxt
; rs232cmd.c  832		{ INTERNALParTxt,  INTParTxt, 	&GenlockSystemPar[1]},
; rs232cmd.c  833		{ PALBURSTParTxt,  PALBParTxt, 	&GenlockSystemPar[2]},
; rs232cmd.c  834		{ NTSCBURSTParTxt, NTSCParTxt, 	&GenlockSystemPar[3]},
; rs232cmd.c  835		{ F10MHzParTxt, 	 F10MHzParTxt, NULL},
; rs232cmd.c  836	};
; rs232cmd.c  837	
; rs232cmd.c  838	struct PAR_STRUCT code SystemPar[3] = {
	DD	000000000H
	SYMB	TYPE, 526, 'Z', #519, 2
	SYMB	IDEN, "SystemPar", _SystemPar, #526, 129, 0
	SYMB	ALAB, _SystemPar, #526
	PUBLIC	_SystemPar
	ALIGN	1
_SystemPar:
	DD	_PALParTxt,_PALParTxt
	DD	_SystemPar+12
	DD	_PAL_IDParTxt,_PAL_IDParTxt
	DD	_SystemPar+24
	DD	_NTSCParTxt,_NTSCParTxt
; rs232cmd.c  839		{ PALParTxt, 	 PALParTxt, &SystemPar[1]},
; rs232cmd.c  840		{ PAL_IDParTxt, PAL_IDParTxt, &SystemPar[2]},
; rs232cmd.c  841		{ NTSCParTxt, 	 NTSCParTxt, NULL},
; rs232cmd.c  842	};
; rs232cmd.c  843	
; rs232cmd.c  844	struct PAR_STRUCT code CBPatternPar[23] = {
	DD	000000000H
	SYMB	TYPE, 528, 'Z', #519, 22
	SYMB	IDEN, "CBPatternPar", _CBPatternPar, #528, 129, 0
	SYMB	ALAB, _CBPatternPar, #528
	PUBLIC	_CBPatternPar
	ALIGN	1
_CBPatternPar:
	DD	_CBSMPTEParTxt,_CBSMParTxt
	DD	_CBPatternPar+12
	DD	_CBEBUParTxt,_CBEBParTxt
	DD	_CBPatternPar+24
	DD	_CBFCCParTxt,_CBFCParTxt
	DD	_CBPatternPar+36
	DD	_CBEBU8ParTxt,_CBEB8ParTxt
	DD	_CBPatternPar+48
	DD	_CB100ParTxt,_CB100ParTxt
	DD	_CBPatternPar+60
	DD	_CBGREY75ParTxt,_CBGR75ParTxt
	DD	_CBPatternPar+72
	DD	_CBRED75ParTxt,_CBR75ParTxt
	DD	_CBPatternPar+84
	DD	_RED75ParTxt,_RED75ParTxt
	DD	_CBPatternPar+96
	DD	_MULTIBURSTParTxt,_MULTParTxt
	DD	_CBPatternPar+108
	DD	_CCIR18ParTxt,_CCIR18ParTxt
	DD	_CBPatternPar+120
	DD	_WIN10ParTxt,_WIN10ParTxt
	DD	_CBPatternPar+132
	DD	_WIN15ParTxt,_WIN15ParTxt
	DD	_CBPatternPar+144
	DD	_WIN20ParTxt,_WIN20ParTxt
	DD	_CBPatternPar+156
	DD	_WIN100ParTxt,_WIN100ParTxt
	DD	_CBPatternPar+168
	DD	_BLWH15ParTxt,_BLWH15ParTxt
	DD	_CBPatternPar+180
	DD	_WHITE100ParTxt,_WHIT100ParTxt
	DD	_CBPatternPar+192
	DD	_BLACKParTxt,_BLACParTxt
	DD	_CBPatternPar+204
	DD	_SDICHECKParTxt,_SDICParTxt
	DD	_CBPatternPar+216
	DD	_DGREYParTxt,_DGRParTxt
	DD	_CBPatternPar+228
	DD	_STAIRCASE5ParTxt,_STA5ParTxt
	DD	_CBPatternPar+240
	DD	_STAIRCASE10ParTxt,_STA10ParTxt
	DD	_CBPatternPar+252
	DD	_CROSSHATCHParTxt,_CROSParTxt
	DD	_CBPatternPar+264
	DD	_PLUGEParTxt,_PLUGParTxt
; rs232cmd.c  845		{ CBSMPTEParTxt, 		CBSMParTxt, 	&CBPatternPar[1]},
; rs232cmd.c  846		{ CBEBUParTxt, 	 	CBEBParTxt, 	&CBPatternPar[2]},
; rs232cmd.c  847		{ CBFCCParTxt, 	 	CBFCParTxt, 	&CBPatternPar[3]},
; rs232cmd.c  848		{ CBEBU8ParTxt,  		CBEB8ParTxt, 	&CBPatternPar[4]},
; rs232cmd.c  849		{ CB100ParTxt, 	 	CB100ParTxt, 	&CBPatternPar[5]},
; rs232cmd.c  850		{ CBGREY75ParTxt, 	CBGR75ParTxt, 	&CBPatternPar[6]},
; rs232cmd.c  851		{ CBRED75ParTxt, 		CBR75ParTxt, 	&CBPatternPar[7]},
; rs232cmd.c  852		{ RED75ParTxt, 		RED75ParTxt, 	&CBPatternPar[8]},
; rs232cmd.c  853	
; rs232cmd.c  854		{ MULTIBURSTParTxt,	MULTParTxt, 	&CBPatternPar[9]},
; rs232cmd.c  855		{ CCIR18ParTxt,	 	CCIR18ParTxt,	&CBPatternPar[10]},
; rs232cmd.c  856																				
; rs232cmd.c  857		{ WIN10ParTxt, 		WIN10ParTxt, 	&CBPatternPar[11]},
; rs232cmd.c  858		{ WIN15ParTxt, 		WIN15ParTxt,	&CBPatternPar[12]},
; rs232cmd.c  859		{ WIN20ParTxt, 		WIN20ParTxt, 	&CBPatternPar[13]},
; rs232cmd.c  860		{ WIN100ParTxt, 		WIN100ParTxt, 	&CBPatternPar[14]},
; rs232cmd.c  861		{ BLWH15ParTxt, 		BLWH15ParTxt, 	&CBPatternPar[15]},
; rs232cmd.c  862		{ WHITE100ParTxt, 	WHIT100ParTxt, &CBPatternPar[16]},
; rs232cmd.c  863		{ BLACKParTxt, 		BLACParTxt, 	&CBPatternPar[17]},
; rs232cmd.c  864	
; rs232cmd.c  865		{ SDICHECKParTxt, 	SDICParTxt, 	&CBPatternPar[18]},
; rs232cmd.c  866		{ DGREYParTxt, 		DGRParTxt, 		&CBPatternPar[19]},
; rs232cmd.c  867	
; rs232cmd.c  868		{ STAIRCASE5ParTxt, 	STA5ParTxt, 	&CBPatternPar[20]},
; rs232cmd.c  869		{ STAIRCASE10ParTxt, STA10ParTxt, 	&CBPatternPar[21]},
; rs232cmd.c  870	
; rs232cmd.c  871		{ CROSSHATCHParTxt, 	CROSParTxt, 	&CBPatternPar[22]},
; rs232cmd.c  872		{ PLUGEParTxt, 		PLUGParTxt, 	NULL},
; rs232cmd.c  873	};
; rs232cmd.c  874	
; rs232cmd.c  875	struct PAR_STRUCT code EmbAudioSignalPar[3] = {
	DD	000000000H
	SYMB	IDEN, "EmbAudioSignalPar", _EmbAudioSignalPar, #526, 129, 0
	SYMB	ALAB, _EmbAudioSignalPar, #526
	PUBLIC	_EmbAudioSignalPar
	ALIGN	1
_EmbAudioSignalPar:
	DD	_OFFParTxt,_OFFParTxt
	DD	_EmbAudioSignalPar+12
	DD	_SILENCEParTxt,_SILParTxt
	DD	_EmbAudioSignalPar+24
	DD	_S1KHZParTxt,_S1KHZParTxt
; rs232cmd.c  876		{ OFFParTxt, 	  	OFFParTxt, 		&EmbAudioSignalPar[1]},
; rs232cmd.c  877		{ SILENCEParTxt, 	SILParTxt, 		&EmbAudioSignalPar[2]},
; rs232cmd.c  878		{ S1KHZParTxt,   	S1KHZParTxt, 	NULL},
; rs232cmd.c  879	};
; rs232cmd.c  880	
; rs232cmd.c  881	struct PAR_STRUCT code AudioOutputPar[2] = {
	DD	000000000H
	SYMB	TYPE, 530, 'Z', #519, 1
	SYMB	IDEN, "AudioOutputPar", _AudioOutputPar, #530, 129, 0
	SYMB	ALAB, _AudioOutputPar, #530
	PUBLIC	_AudioOutputPar
	ALIGN	1
_AudioOutputPar:
	DD	_ANALOGParTxt,_ANALParTxt
	DD	_AudioOutputPar+12
	DD	_AESEBUParTxt,_AESParTxt
; rs232cmd.c  882		{ ANALOGParTxt, ANALParTxt, &AudioOutputPar[1]},
; rs232cmd.c  883		{ AESEBUParTxt, AESParTxt,  NULL},
; rs232cmd.c  884	};
; rs232cmd.c  885	
; rs232cmd.c  886	struct PAR_STRUCT code AESEBUSystemPar[2] = {
	DD	000000000H
	SYMB	IDEN, "AESEBUSystemPar", _AESEBUSystemPar, #530, 129, 0
	SYMB	ALAB, _AESEBUSystemPar, #530
	PUBLIC	_AESEBUSystemPar
	ALIGN	1
_AESEBUSystemPar:
	DD	_PALParTxt,_PALParTxt
	DD	_AESEBUSystemPar+12
	DD	_NTSCParTxt,_NTSCParTxt
; rs232cmd.c  887		{ PALParTxt,  PALParTxt,  &AESEBUSystemPar[1]},
; rs232cmd.c  888		{ NTSCParTxt, NTSCParTxt, NULL},
; rs232cmd.c  889	};
; rs232cmd.c  890	
; rs232cmd.c  891	struct PAR_STRUCT code AudioSignalPar[4] = {
	DD	000000000H
	SYMB	IDEN, "AudioSignalPar", _AudioSignalPar, #524, 129, 0
	SYMB	ALAB, _AudioSignalPar, #524
	PUBLIC	_AudioSignalPar
	ALIGN	1
_AudioSignalPar:
	DD	_S500HZParTxt,_S500HZParTxt
	DD	_AudioSignalPar+12
	DD	_S1KHZParTxt,_S1KHZParTxt
	DD	_AudioSignalPar+24
	DD	_SEBU1KHZParTxt,_SEBU1KHZParTxt
	DD	_AudioSignalPar+36
	DD	_S8KHZParTxt,_S8KHZParTxt
; rs232cmd.c  892		{ S500HZParTxt, 	S500HZParTxt, 	 &AudioSignalPar[1]},
; rs232cmd.c  893		{ S1KHZParTxt, 	S1KHZParTxt, 	 &AudioSignalPar[2]},
; rs232cmd.c  894		{ SEBU1KHZParTxt, SEBU1KHZParTxt, &AudioSignalPar[3]},
; rs232cmd.c  895		{ S8KHZParTxt, 	S8KHZParTxt, 	 NULL},
; rs232cmd.c  896	};
; rs232cmd.c  897	
; rs232cmd.c  898	struct PAR_STRUCT code AnalogLevelPar[1] = {
	DD	000000000H
	SYMB	IDEN, "AnalogLevelPar", _AnalogLevelPar, #522, 129, 0
	SYMB	ALAB, _AnalogLevelPar, #522
	PUBLIC	_AnalogLevelPar
	ALIGN	1
_AnalogLevelPar:
	DD	_SILENCEParTxt,_SILParTxt
; rs232cmd.c  899		{ SILENCEParTxt, SILParTxt, NULL},
; rs232cmd.c  900	};
; rs232cmd.c  901	
; rs232cmd.c  902	struct PAR_STRUCT code AESEBULevelPar[1] = {
	DD	000000000H
	SYMB	IDEN, "AESEBULevelPar", _AESEBULevelPar, #522, 129, 0
	SYMB	ALAB, _AESEBULevelPar, #522
	PUBLIC	_AESEBULevelPar
	ALIGN	1
_AESEBULevelPar:
	DD	_SILENCEParTxt,_SILParTxt
; rs232cmd.c  903		{ SILENCEParTxt, SILParTxt, NULL},
; rs232cmd.c  904	};
; rs232cmd.c  905	
; rs232cmd.c  906	struct PAR_STRUCT code AudioFrequencyPar[2] = {
	DD	000000000H
	SYMB	IDEN, "AudioFrequencyPar", _AudioFrequencyPar, #530, 129, 0
	SYMB	ALAB, _AudioFrequencyPar, #530
	PUBLIC	_AudioFrequencyPar
	ALIGN	1
_AudioFrequencyPar:
	DD	_F441KHZParTxt,_F441KHZParTxt
	DD	_AudioFrequencyPar+12
	DD	_F48KHZParTxt,_F48KHZParTxt
; rs232cmd.c  907		{ F441KHZParTxt, F441KHZParTxt, &AudioFrequencyPar[1]},
; rs232cmd.c  908		{ F48KHZParTxt,  F48KHZParTxt,  NULL},
; rs232cmd.c  909	};
; rs232cmd.c  910	
; rs232cmd.c  911	struct PAR_STRUCT code UnitPar[2] = {
	DD	000000000H
	SYMB	IDEN, "UnitPar", _UnitPar, #530, 129, 0
	SYMB	ALAB, _UnitPar, #530
	PUBLIC	_UnitPar
	ALIGN	1
_UnitPar:
	DD	_BBParTxt,_BBParTxt
	DD	_UnitPar+12
	DD	_SPGParTxt,_SPGParTxt
; rs232cmd.c  912		{ BBParTxt,  BBParTxt,  &UnitPar[1]},
; rs232cmd.c  913		{ SPGParTxt, SPGParTxt, NULL},
; rs232cmd.c  914	};
; rs232cmd.c  915	
; rs232cmd.c  916	struct PAR_STRUCT code OffOnPar[2] = {
	DD	000000000H
	SYMB	IDEN, "OffOnPar", _OffOnPar, #530, 129, 0
	SYMB	ALAB, _OffOnPar, #530
	PUBLIC	_OffOnPar
	ALIGN	1
_OffOnPar:
	DD	_OFFParTxt,_OFFParTxt
	DD	_OffOnPar+12
	DD	_ONParTxt,_ONParTxt
; rs232cmd.c  917		{ OFFParTxt, OFFParTxt, &OffOnPar[1]},
; rs232cmd.c  918		{ ONParTxt,  ONParTxt,  NULL},
; rs232cmd.c  919	};
; rs232cmd.c  920	
; rs232cmd.c  921	struct PAR_STRUCT code FactBBGenSignalPar[2] = {
	DD	000000000H
	SYMB	IDEN, "FactBBGenSignalPar", _FactBBGenSignalPar, #530, 129, 0
	SYMB	ALAB, _FactBBGenSignalPar, #530
	PUBLIC	_FactBBGenSignalPar
	ALIGN	1
_FactBBGenSignalPar:
	DD	_NORMALParTxt,_NORMParTxt
	DD	_FactBBGenSignalPar+12
	DD	_F45MHZParTxt,_F45MHZParTxt
; rs232cmd.c  922		{ NORMALParTxt, NORMParTxt, 	&FactBBGenSignalPar[1]},
; rs232cmd.c  923		{ F45MHZParTxt, F45MHZParTxt, NULL},
; rs232cmd.c  924	};
; rs232cmd.c  925	
; rs232cmd.c  926	struct PAR_STRUCT code MinMaxPar[2] = {
	DD	000000000H
	SYMB	IDEN, "MinMaxPar", _MinMaxPar, #530, 129, 0
	SYMB	ALAB, _MinMaxPar, #530
	PUBLIC	_MinMaxPar
	ALIGN	1
_MinMaxPar:
	DD	_MINParTxt,_MINParTxt
	DD	_MinMaxPar+12
	DD	_MAXParTxt,_MAXParTxt
; rs232cmd.c  927		{ MINParTxt, MINParTxt, &MinMaxPar[1]},
; rs232cmd.c  928		{ MAXParTxt, MAXParTxt, NULL},
; rs232cmd.c  929	};
; rs232cmd.c  930	
; rs232cmd.c  931	struct PAR_STRUCT code UpDownPar[2] = {
	DD	000000000H
	SYMB	IDEN, "UpDownPar", _UpDownPar, #530, 129, 0
	SYMB	ALAB, _UpDownPar, #530
	PUBLIC	_UpDownPar
	ALIGN	1
_UpDownPar:
	DD	_UPParTxt,_UPParTxt
	DD	_UpDownPar+12
	DD	_DOWNParTxt,_DOWNParTxt
; rs232cmd.c  932		{ UPParTxt,   UPParTxt,   &UpDownPar[1]},
; rs232cmd.c  933		{ DOWNParTxt, DOWNParTxt, NULL},
; rs232cmd.c  934	};
; rs232cmd.c  935	
; rs232cmd.c  936	/***************************************************************************/
; rs232cmd.c  937	// Temporary variables PRIVATE NOT overlayable
; rs232cmd.c  938	
; rs232cmd.c  939	static unsigned int Suffix[4]=
	DD	000000000H
RS232CMD_INI_FA	SEGMENT	HDATA INSEGMENT INIT
	RSEG	RS232CMD_INI_FA
	SYMB	TYPE, 532, 'Z', #18, 3
	SYMB	IDEN, "Suffix", _Suffix, #532, 130, 4
	ALIGN	1
_Suffix:
; rs232cmd.c  940	{
; rs232cmd.c  941		1,1,1,1
; rs232cmd.c  942	};
; rs232cmd.c  943	
; rs232cmd.c  944	static bool PasswordProtected = true;
	DW	00001H,00001H,00001H,00001H
	SYMB	IDEN, "PasswordProtected", _PasswordProtected, #487, 130, 4
	ALIGN	1
_PasswordProtected:
; rs232cmd.c  945	static UC GenlockCalEnable = 0;
	DW	0FFFFH
	SYMB	IDEN, "GenlockCalEnable", _GenlockCalEnable, #3, 130, 4
_GenlockCalEnable:
; rs232cmd.c  946	static int GenlockCalValue = 0;
	DB	000H
	SYMB	IDEN, "GenlockCalValue", _GenlockCalValue, #16, 130, 4
	ALIGN	1
_GenlockCalValue:
; rs232cmd.c  947	
; rs232cmd.c  948	/**************************************************************************/
; rs232cmd.c  949	/* CLSCommand																	 								 RS232CMD.C */
; rs232cmd.c  950	/*																																				*/
; rs232cmd.c  951	/* Author: 		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c  952	/* Revised:		000413				     																					*/
; rs232cmd.c  953	/*																																				*/
; rs232cmd.c  954	/* Function:  Clear status command																				*/
; rs232cmd.c  955	/* Remarks:		No parameters																								*/
; rs232cmd.c  956	/* Returns:		-																														*/
; rs232cmd.c  957	/* Updates:																																*/
; rs232cmd.c  958	/**************************************************************************/
; rs232cmd.c  959	void CLSCommand( void)
; rs232cmd.c  960	{
	DW	00000H
RS232CMD_PR	SEGMENT	HCODE
	RSEG	RS232CMD_PR
	ALIGN	1
	SYMB	LINE, 960
	PUBLIC	_CLSCommand
_CLSCommand:
	SYMB	TYPE, 534, 'X', 12, #1, 30, 0
	SYMB	GFUN, "CLSCommand", _CLSCommand, #534, 0, 0, 0
	SYMB	ALAB, _CLSCommand, #534
; rs232cmd.c  961		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 961
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_8
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_8
; rs232cmd.c  962		{
; rs232cmd.c  963			if ( CmdRequest)
	SYMB	LINE, 963
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_3
; rs232cmd.c  964				SCPIError = SyntaxErr;
	SYMB	LINE, 964
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_3:
; rs232cmd.c  965			else
; rs232cmd.c  966			{
; rs232cmd.c  967				if ( ParCnt)
	SYMB	LINE, 967
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_4
; rs232cmd.c  968					SCPIError = ParNotAllowed;
	SYMB	LINE, 968
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_4:
; rs232cmd.c  969				else
; rs232cmd.c  970					ResetErrorEventQueue();
	SYMB	LINE, 970
	CALL	_ResetErrorEventQueue
; rs232cmd.c  971			}
; rs232cmd.c  972		}
	SYMB	LINE, 972
_8:
; rs232cmd.c  973	}
	SYMB	LINE, 973
	RET
	SYMB	EFUN
; rs232cmd.c  974	
; rs232cmd.c  975	/**************************************************************************/
; rs232cmd.c  976	/* ESECommand																	 								 RS232CMD.C */
; rs232cmd.c  977	/*																																				*/
; rs232cmd.c  978	/* Author:		Kim Engedahl, DEV, 970627	    															*/
; rs232cmd.c  979	/* Revised:		000413				     																					*/
; rs232cmd.c  980	/*																																				*/
; rs232cmd.c  981	/* Function:	Set/read the Standard Event Status Enable Register					*/
; rs232cmd.c  982	/* Remarks:		--																													*/
; rs232cmd.c  983	/* Returns:		-																														*/
; rs232cmd.c  984	/* Updates:																																*/
; rs232cmd.c  985	/**************************************************************************/
; rs232cmd.c  986	void ESECommand( void)
; rs232cmd.c  987	{
	ALIGN	1
	SYMB	LINE, 987
	PUBLIC	_ESECommand
_ESECommand:
	SYMB	TYPE, 535, 'X', 12, #1, 30, 0
	SYMB	GFUN, "ESECommand", _ESECommand, #535, 0, 0, 0
	SYMB	ALAB, _ESECommand, #535
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "Reg", -2, #16, 130, 5
; rs232cmd.c  988		int Reg;
; rs232cmd.c  989	
; rs232cmd.c  990		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 990
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_21
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_21
; rs232cmd.c  991		{
; rs232cmd.c  992			if ( CmdRequest)
	SYMB	LINE, 992
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_12
; rs232cmd.c  993			{
; rs232cmd.c  994				if ( ParCnt)
	SYMB	LINE, 994
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_11
; rs232cmd.c  995					SCPIError = ParNotAllowed;
	SYMB	LINE, 995
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_21
_11:
; rs232cmd.c  996				else
; rs232cmd.c  997					rs232printf( 12, "%d\n", ESEReg);
	SYMB	LINE, 997
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _ESEReg )
	MOV.W	R1,#SOF( _ESEReg )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c  998			}
	SYMB	LINE, 998
	BR	_21
_12:
; rs232cmd.c  999			else
; rs232cmd.c 1000			{
; rs232cmd.c 1001				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1001
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_13
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_14
_13:
; rs232cmd.c 1002				{
; rs232cmd.c 1003					SCPIError = SyntaxErr;	
	SYMB	LINE, 1003
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1004					return;
	SYMB	LINE, 1004
	BR	_21
; rs232cmd.c 1005				}
	SYMB	LINE, 1005
_14:
; rs232cmd.c 1006	
; rs232cmd.c 1007				if ( Reg > 255)
	SYMB	LINE, 1007
	CMP.W	[R7],#0FFH
	BLE	_15
; rs232cmd.c 1008				{
; rs232cmd.c 1009					SCPIError = DataOutOfRange;
	SYMB	LINE, 1009
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1010					return;
	SYMB	LINE, 1010
	BR	_21
; rs232cmd.c 1011				}
	SYMB	LINE, 1011
_15:
; rs232cmd.c 1012	
; rs232cmd.c 1013				ESEReg = Reg & 0xFF;
	SYMB	LINE, 1013
	MOV.W	R0,[R7]
	AND.B	R0L,#0FFH
	MOV.B	ES,#SEG( _ESEReg )
	MOV.W	R1,#SOF( _ESEReg )
	MOV.B	[R1],R0L
; rs232cmd.c 1014			}
; rs232cmd.c 1015		}
; rs232cmd.c 1016	}
	SYMB	LINE, 1016
_21:
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1017	
; rs232cmd.c 1018	/**************************************************************************/
; rs232cmd.c 1019	/* ESRCommand																									 RS232CMD.C */
; rs232cmd.c 1020	/*																																				*/
; rs232cmd.c 1021	/* Author:		Kim Engedahl, DEV, 970627	    															*/
; rs232cmd.c 1022	/* Revised:		000413				     																					*/
; rs232cmd.c 1023	/*																																				*/
; rs232cmd.c 1024	/* Function:	Read and clear the Standard Event Status Register						*/
; rs232cmd.c 1025	/* Remarks:		No parameters																								*/
; rs232cmd.c 1026	/*						The register will reset to zero.														*/
; rs232cmd.c 1027	/* Returns:		-																														*/
; rs232cmd.c 1028	/* Updates:																																*/
; rs232cmd.c 1029	/**************************************************************************/
; rs232cmd.c 1030	void ESRCommand( void)
; rs232cmd.c 1031	{
	ALIGN	1
	SYMB	LINE, 1031
	PUBLIC	_ESRCommand
_ESRCommand:
	SYMB	TYPE, 536, 'X', 12, #1, 30, 0
	SYMB	GFUN, "ESRCommand", _ESRCommand, #536, 0, 0, 0
	SYMB	ALAB, _ESRCommand, #536
	SYMB	IDEN, "Reg", -1, #16, 130, 5
	SYMB	LTIM, "Reg", -1, 0, 69
; rs232cmd.c 1032		int Reg;
; rs232cmd.c 1033	
; rs232cmd.c 1034		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1034
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_30
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_30
; rs232cmd.c 1035		{
; rs232cmd.c 1036			if ( CmdRequest)
	SYMB	LINE, 1036
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_26
; rs232cmd.c 1037			{
; rs232cmd.c 1038				if ( ParCnt)
	SYMB	LINE, 1038
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_25
; rs232cmd.c 1039					SCPIError = ParNotAllowed;
	SYMB	LINE, 1039
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_25:
; rs232cmd.c 1040				else
; rs232cmd.c 1041				{
; rs232cmd.c 1042					rs232printf( 12, "%d\n", UpdateESRRegister());
	SYMB	LINE, 1042
	CALL	_UpdateESRRegister
	MOV.B	R1L,R0L
	MOVS.B	R1H,#00H
	MOV.W	R0,#0CH
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
; rs232cmd.c 1043	
; rs232cmd.c 1044					ESRReg = 0;
	SYMB	LINE, 1044
	MOV.B	ES,#SEG( _ESRReg )
	MOV.W	R0,#SOF( _ESRReg )
	MOV.B	[R0],#00H
; rs232cmd.c 1045				}
; rs232cmd.c 1046			}
	SYMB	LINE, 1046
	RET
_26:
; rs232cmd.c 1047			else
; rs232cmd.c 1048				SCPIError = SyntaxErr;
	SYMB	LINE, 1048
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1049		}
	SYMB	LINE, 1049
_30:
; rs232cmd.c 1050	}
	SYMB	LINE, 1050
	RET
	SYMB	EFUN
; rs232cmd.c 1051	
; rs232cmd.c 1052	/**************************************************************************/
; rs232cmd.c 1053	/* OPCCommand																	 								 RS232CMD.C */
; rs232cmd.c 1054	/*																																				*/
; rs232cmd.c 1055	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 1056	/* Revised:		000413				     																					*/
; rs232cmd.c 1057	/*																																				*/
; rs232cmd.c 1058	/* Function:	Operation Complete Command/Query														*/
; rs232cmd.c 1059	/* Remarks:		No parameters																								*/
; rs232cmd.c 1060	/* Returns:		-																														*/
; rs232cmd.c 1061	/* Updates:																																*/
; rs232cmd.c 1062	/**************************************************************************/
; rs232cmd.c 1063	void OPCCommand( void)
; rs232cmd.c 1064	{
	ALIGN	1
	SYMB	LINE, 1064
	PUBLIC	_OPCCommand
_OPCCommand:
	SYMB	TYPE, 537, 'X', 12, #1, 30, 0
	SYMB	GFUN, "OPCCommand", _OPCCommand, #537, 0, 0, 0
	SYMB	ALAB, _OPCCommand, #537
; rs232cmd.c 1065		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1065
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_36
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_36
; rs232cmd.c 1066		{
; rs232cmd.c 1067			if ( CmdRequest)
	SYMB	LINE, 1067
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_31
; rs232cmd.c 1068			{
; rs232cmd.c 1069				if ( ParCnt)
	SYMB	LINE, 1069
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_36
; rs232cmd.c 1070					SCPIError = ParNotAllowed;
	SYMB	LINE, 1070
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
; rs232cmd.c 1071			}
	SYMB	LINE, 1071
	RET
_31:
; rs232cmd.c 1072			else
; rs232cmd.c 1073			{
; rs232cmd.c 1074				if ( ParCnt)
	SYMB	LINE, 1074
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_36
; rs232cmd.c 1075					SCPIError = ParNotAllowed;
	SYMB	LINE, 1075
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
; rs232cmd.c 1076			}
; rs232cmd.c 1077		}
	SYMB	LINE, 1077
_36:
; rs232cmd.c 1078	}
	SYMB	LINE, 1078
	RET
	SYMB	EFUN
; rs232cmd.c 1079	
; rs232cmd.c 1080	/**************************************************************************/
; rs232cmd.c 1081	/* SRECommand															 		 								 RS232CMD.C */
; rs232cmd.c 1082	/*																																				*/
; rs232cmd.c 1083	/* Author:		Kim Engedahl, DEV, 970627	    															*/
; rs232cmd.c 1084	/* Revised:		000413				     																					*/
; rs232cmd.c 1085	/*																																				*/
; rs232cmd.c 1086	/* Function:	Set/read the Service Request Enable Register								*/
; rs232cmd.c 1087	/* Remarks:		Bit 6 in *SRE? register is always ZERO											*/
; rs232cmd.c 1088	/*						Bit 6 in *SRE register is ignored														*/
; rs232cmd.c 1089	/* Returns:		-																														*/
; rs232cmd.c 1090	/* Updates:																																*/
; rs232cmd.c 1091	/**************************************************************************/
; rs232cmd.c 1092	void SRECommand( void)
; rs232cmd.c 1093	{
	ALIGN	1
	SYMB	LINE, 1093
	PUBLIC	_SRECommand
_SRECommand:
	SYMB	TYPE, 538, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SRECommand", _SRECommand, #538, 0, 0, 0
	SYMB	ALAB, _SRECommand, #538
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "Reg", -2, #16, 130, 5
; rs232cmd.c 1094		int Reg;
; rs232cmd.c 1095	
; rs232cmd.c 1096		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1096
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_47
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_47
; rs232cmd.c 1097		{
; rs232cmd.c 1098			if ( CmdRequest)
	SYMB	LINE, 1098
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_38
; rs232cmd.c 1099			{
; rs232cmd.c 1100				if ( ParCnt)
	SYMB	LINE, 1100
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_37
; rs232cmd.c 1101					SCPIError = ParNotAllowed;
	SYMB	LINE, 1101
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_47
_37:
; rs232cmd.c 1102				else
; rs232cmd.c 1103					rs232printf( 12, "%d\n", SREReg);
	SYMB	LINE, 1103
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _SREReg )
	MOV.W	R1,#SOF( _SREReg )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 1104			}
	SYMB	LINE, 1104
	BR	_47
_38:
; rs232cmd.c 1105			else
; rs232cmd.c 1106			{
; rs232cmd.c 1107				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1107
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_39
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_40
_39:
; rs232cmd.c 1108				{
; rs232cmd.c 1109					SCPIError = SyntaxErr;	
	SYMB	LINE, 1109
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1110					return;
	SYMB	LINE, 1110
	BR	_47
; rs232cmd.c 1111				}
	SYMB	LINE, 1111
_40:
; rs232cmd.c 1112	
; rs232cmd.c 1113				if ( Reg > 255)
	SYMB	LINE, 1113
	CMP.W	[R7],#0FFH
	BLE	_41
; rs232cmd.c 1114				{
; rs232cmd.c 1115					SCPIError = DataOutOfRange;
	SYMB	LINE, 1115
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1116					return;
	SYMB	LINE, 1116
	BR	_47
; rs232cmd.c 1117				}
	SYMB	LINE, 1117
_41:
; rs232cmd.c 1118	
; rs232cmd.c 1119				SREReg = Reg & 0xBF;
	SYMB	LINE, 1119
	MOV.W	R0,[R7]
	AND.B	R0L,#0BFH
	MOV.B	ES,#SEG( _SREReg )
	MOV.W	R1,#SOF( _SREReg )
	MOV.B	[R1],R0L
; rs232cmd.c 1120			}
; rs232cmd.c 1121		}
; rs232cmd.c 1122	}
	SYMB	LINE, 1122
_47:
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1123	
; rs232cmd.c 1124	/**************************************************************************/
; rs232cmd.c 1125	/* STBCommand																									 RS232CMD.C */
; rs232cmd.c 1126	/*																																				*/
; rs232cmd.c 1127	/* Author:		Kim Engedahl, DEV, 970627	    															*/
; rs232cmd.c 1128	/* Revised:		000413				     																					*/
; rs232cmd.c 1129	/*																																				*/
; rs232cmd.c 1130	/* Function:	Read the Status Byte Register																*/
; rs232cmd.c 1131	/* Remarks:		No parameters																								*/
; rs232cmd.c 1132	/* Returns:																																*/
; rs232cmd.c 1133	/* Updates:																																*/
; rs232cmd.c 1134	/**************************************************************************/
; rs232cmd.c 1135	void STBCommand( void)
; rs232cmd.c 1136	{
	ALIGN	1
	SYMB	LINE, 1136
	PUBLIC	_STBCommand
_STBCommand:
	SYMB	TYPE, 539, 'X', 12, #1, 30, 0
	SYMB	GFUN, "STBCommand", _STBCommand, #539, 0, 0, 0
	SYMB	ALAB, _STBCommand, #539
; rs232cmd.c 1137		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1137
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_56
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_56
; rs232cmd.c 1138		{
; rs232cmd.c 1139			if ( CmdRequest)
	SYMB	LINE, 1139
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_52
; rs232cmd.c 1140			{
; rs232cmd.c 1141				if ( ParCnt)
	SYMB	LINE, 1141
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_51
; rs232cmd.c 1142					SCPIError = ParNotAllowed;
	SYMB	LINE, 1142
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_51:
; rs232cmd.c 1143				else
; rs232cmd.c 1144				{
; rs232cmd.c 1145					UpdateSTBRegister();
	SYMB	LINE, 1145
	CALL	_UpdateSTBRegister
; rs232cmd.c 1146	
; rs232cmd.c 1147					rs232printf( 12, "%d\n", STBReg);
	SYMB	LINE, 1147
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _STBReg )
	MOV.W	R1,#SOF( _STBReg )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
; rs232cmd.c 1148				}
; rs232cmd.c 1149			}
	SYMB	LINE, 1149
	RET
_52:
; rs232cmd.c 1150			else
; rs232cmd.c 1151				SCPIError = SyntaxErr;
	SYMB	LINE, 1151
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1152		}
	SYMB	LINE, 1152
_56:
; rs232cmd.c 1153	}
	SYMB	LINE, 1153
	RET
	SYMB	EFUN
; rs232cmd.c 1154	
; rs232cmd.c 1155	/**************************************************************************/
; rs232cmd.c 1156	/* TSTCommand																									 RS232CMD.C */
; rs232cmd.c 1157	/*																																				*/
; rs232cmd.c 1158	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1159	/* Revised:		000505				     																					*/
; rs232cmd.c 1160	/*																																				*/
; rs232cmd.c 1161	/* Function:	Selftest query																							*/
; rs232cmd.c 1162	/* Remarks:		No parameters																								*/
; rs232cmd.c 1163	/* Returns:		-																														*/
; rs232cmd.c 1164	/* Updates:																																*/
; rs232cmd.c 1165	/**************************************************************************/
; rs232cmd.c 1166	void TSTCommand( void)
; rs232cmd.c 1167	{
	ALIGN	1
	SYMB	LINE, 1167
	PUBLIC	_TSTCommand
_TSTCommand:
	SYMB	TYPE, 540, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSTCommand", _TSTCommand, #540, 0, 0, 0
	SYMB	ALAB, _TSTCommand, #540
; rs232cmd.c 1168		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1168
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_61
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_61
; rs232cmd.c 1169		{
; rs232cmd.c 1170			if ( CmdRequest)
	SYMB	LINE, 1170
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_57
; rs232cmd.c 1171			{
; rs232cmd.c 1172				if ( ParCnt)
	SYMB	LINE, 1172
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_61
; rs232cmd.c 1173					SCPIError = ParNotAllowed;
	SYMB	LINE, 1173
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
; rs232cmd.c 1174				else
; rs232cmd.c 1175				{
; rs232cmd.c 1176					;
; rs232cmd.c 1177				}
; rs232cmd.c 1178			}
	SYMB	LINE, 1178
	RET
_57:
; rs232cmd.c 1179			else
; rs232cmd.c 1180				SCPIError = SyntaxErr;
	SYMB	LINE, 1180
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1181		}
	SYMB	LINE, 1181
_61:
; rs232cmd.c 1182	}
	SYMB	LINE, 1182
	RET
	SYMB	EFUN
; rs232cmd.c 1183	
; rs232cmd.c 1184	/**************************************************************************/
; rs232cmd.c 1185	/* WAICommand																									 RS232CMD.C */
; rs232cmd.c 1186	/*																																				*/
; rs232cmd.c 1187	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1188	/* Revised:		000505				     																					*/
; rs232cmd.c 1189	/*																																				*/
; rs232cmd.c 1190	/* Function:	Wait-to-continue command																		*/
; rs232cmd.c 1191	/* Remarks:		No parameters																								*/
; rs232cmd.c 1192	/* Returns:		-																														*/
; rs232cmd.c 1193	/* Updates:																																*/
; rs232cmd.c 1194	/**************************************************************************/
; rs232cmd.c 1195	void WAICommand( void)
; rs232cmd.c 1196	{
	ALIGN	1
	SYMB	LINE, 1196
	PUBLIC	_WAICommand
_WAICommand:
	SYMB	TYPE, 541, 'X', 12, #1, 30, 0
	SYMB	GFUN, "WAICommand", _WAICommand, #541, 0, 0, 0
	SYMB	ALAB, _WAICommand, #541
; rs232cmd.c 1197		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1197
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_66
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_66
; rs232cmd.c 1198		{
; rs232cmd.c 1199			if ( CmdRequest)
	SYMB	LINE, 1199
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_62
; rs232cmd.c 1200				SCPIError = SyntaxErr;
	SYMB	LINE, 1200
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_62:
; rs232cmd.c 1201			else
; rs232cmd.c 1202			{
; rs232cmd.c 1203				if ( ParCnt)
	SYMB	LINE, 1203
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_66
; rs232cmd.c 1204					SCPIError = ParNotAllowed;
	SYMB	LINE, 1204
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
; rs232cmd.c 1205				else
; rs232cmd.c 1206				{
; rs232cmd.c 1207					;
; rs232cmd.c 1208				}
; rs232cmd.c 1209			}
; rs232cmd.c 1210		}
	SYMB	LINE, 1210
_66:
; rs232cmd.c 1211	}
	SYMB	LINE, 1211
	RET
	SYMB	EFUN
; rs232cmd.c 1212	
; rs232cmd.c 1213	/**************************************************************************/
; rs232cmd.c 1214	/* RSTCommand																									 RS232CMD.C */
; rs232cmd.c 1215	/*																																				*/
; rs232cmd.c 1216	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 1217	/* Revised:		000617				     																					*/
; rs232cmd.c 1218	/*																																				*/
; rs232cmd.c 1219	/* Function:	Reset comamnd																								*/
; rs232cmd.c 1220	/* Remarks:		No parameters																								*/
; rs232cmd.c 1221	/* Returns:																																*/
; rs232cmd.c 1222	/* Updates:																																*/
; rs232cmd.c 1223	/**************************************************************************/
; rs232cmd.c 1224	void RSTCommand( void)
; rs232cmd.c 1225	{
	ALIGN	1
	SYMB	LINE, 1225
	PUBLIC	_RSTCommand
_RSTCommand:
	SYMB	TYPE, 542, 'X', 12, #1, 30, 0
	SYMB	GFUN, "RSTCommand", _RSTCommand, #542, 0, 0, 0
	SYMB	ALAB, _RSTCommand, #542
; rs232cmd.c 1226		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1226
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_72
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_72
; rs232cmd.c 1227		{
; rs232cmd.c 1228			if ( CmdRequest)
	SYMB	LINE, 1228
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_67
; rs232cmd.c 1229				SCPIError = SyntaxErr;
	SYMB	LINE, 1229
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_67:
; rs232cmd.c 1230			else
; rs232cmd.c 1231			{
; rs232cmd.c 1232				if ( ParCnt)
	SYMB	LINE, 1232
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_68
; rs232cmd.c 1233					SCPIError = ParNotAllowed;
	SYMB	LINE, 1233
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_68:
; rs232cmd.c 1234				else
; rs232cmd.c 1235					ResetInstrument();
	SYMB	LINE, 1235
	CALL	_ResetInstrument
; rs232cmd.c 1236			}
; rs232cmd.c 1237		}
	SYMB	LINE, 1237
_72:
; rs232cmd.c 1238	}
	SYMB	LINE, 1238
	RET
	SYMB	EFUN
; rs232cmd.c 1239	
; rs232cmd.c 1240	/**************************************************************************/
; rs232cmd.c 1241	/* IDNCommand																								   RS232CMD.C */
; rs232cmd.c 1242	/*																																				*/
; rs232cmd.c 1243	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 1244	/* Revised:		000614				     																					*/
; rs232cmd.c 1245	/*																																				*/
; rs232cmd.c 1246	/* Function:	Identification query																				*/
; rs232cmd.c 1247	/* Remarks:		No parameter, Query only																		*/
; rs232cmd.c 1248	/* Returns:		-																														*/
; rs232cmd.c 1249	/* Updates:		-																														*/
; rs232cmd.c 1250	/**************************************************************************/
; rs232cmd.c 1251	void IDNCommand( void)
; rs232cmd.c 1252	{
	ALIGN	1
	SYMB	LINE, 1252
	PUBLIC	_IDNCommand
_IDNCommand:
	SYMB	TYPE, 543, 'X', 12, #1, 30, 0
	SYMB	GFUN, "IDNCommand", _IDNCommand, #543, 0, 0, 0
	SYMB	ALAB, _IDNCommand, #543
; rs232cmd.c 1253		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1253
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_78
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_78
; rs232cmd.c 1254		{
; rs232cmd.c 1255			if ( CmdRequest)
	SYMB	LINE, 1255
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_74
; rs232cmd.c 1256			{
; rs232cmd.c 1257				if ( ParCnt)
	SYMB	LINE, 1257
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_73
; rs232cmd.c 1258					SCPIError = ParNotAllowed;
	SYMB	LINE, 1258
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_73:
; rs232cmd.c 1259				else
; rs232cmd.c 1260				{
; rs232cmd.c 1261					rs232puts( Calibration.Company);
	SYMB	LINE, 1261
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	CALL	_rs232puts
; rs232cmd.c 1262	
; rs232cmd.c 1263					rs232putchar( ',');
	SYMB	LINE, 1263
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 1264	
; rs232cmd.c 1265					rs232puts( Calibration.Type);
	SYMB	LINE, 1265
	MOV.W	R1,#SEG( _Calibration+33 )
	MOV.W	R0,#SOF( _Calibration+33 )
	CALL	_rs232puts
	MOV.B	R0L,#02CH
; rs232cmd.c 1266	
; rs232cmd.c 1267					rs232putchar( ',');
	SYMB	LINE, 1267
	CALL	_rs232putchar
; rs232cmd.c 1268	
; rs232cmd.c 1269					rs232puts( Calibration.KUNumber);
	SYMB	LINE, 1269
	MOV.W	R1,#SEG( _Calibration+66 )
	MOV.W	R0,#SOF( _Calibration+66 )
	CALL	_rs232puts
; rs232cmd.c 1270	
; rs232cmd.c 1271					rs232putchar( ',');
	SYMB	LINE, 1271
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 1272	
; rs232cmd.c 1273					rs232puts( Calibration.SWRevision);
	SYMB	LINE, 1273
	MOV.W	R1,#SEG( _Calibration+75 )
	MOV.W	R0,#SOF( _Calibration+75 )
	CALL	_rs232puts
; rs232cmd.c 1274	
; rs232cmd.c 1275					rs232putchar( '\n');
	SYMB	LINE, 1275
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1276				}
; rs232cmd.c 1277			}
	SYMB	LINE, 1277
	RET
_74:
; rs232cmd.c 1278			else
; rs232cmd.c 1279				SCPIError = SyntaxErr;
	SYMB	LINE, 1279
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1280		}
	SYMB	LINE, 1280
_78:
; rs232cmd.c 1281	}
	SYMB	LINE, 1281
	RET
	SYMB	EFUN
; rs232cmd.c 1282	
; rs232cmd.c 1283	/**************************************************************************/
; rs232cmd.c 1284	/* RCLCommand																									 RS232CMD.C */
; rs232cmd.c 1285	/*																																				*/
; rs232cmd.c 1286	/* Author:		Sten A. Andersen/Thomas Kappelgaard, DEV, xxxxxx 						*/
; rs232cmd.c 1287	/* Revised:		Kim Engedahl, DEV, 000617																		*/
; rs232cmd.c 1288	/*																																				*/
; rs232cmd.c 1289	/* Function:																															*/
; rs232cmd.c 1290	/* Remarks:																																*/
; rs232cmd.c 1291	/* Returns:		-																														*/
; rs232cmd.c 1292	/* Updates:		-																														*/
; rs232cmd.c 1293	/**************************************************************************/
; rs232cmd.c 1294	void RCLCommand(void) 
; rs232cmd.c 1295	{
	ALIGN	1
	SYMB	LINE, 1295
	PUBLIC	_RCLCommand
_RCLCommand:
	SYMB	TYPE, 544, 'X', 12, #1, 30, 0
	SYMB	GFUN, "RCLCommand", _RCLCommand, #544, 0, 0, 0
	SYMB	ALAB, _RCLCommand, #544
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "Reg", -2, #16, 130, 5
; rs232cmd.c 1296		int	Reg = 0;
	SYMB	LINE, 1296
	MOV.W	[R7],#00H
; rs232cmd.c 1297	
; rs232cmd.c 1298		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1298
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_89
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_89
; rs232cmd.c 1299		{
; rs232cmd.c 1300			if ( CmdRequest)
	SYMB	LINE, 1300
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_79
; rs232cmd.c 1301			{
; rs232cmd.c 1302				SCPIError = SyntaxErr;
	SYMB	LINE, 1302
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1303			}
	SYMB	LINE, 1303
	BR	_89
_79:
; rs232cmd.c 1304			else
; rs232cmd.c 1305			{
; rs232cmd.c 1306				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1306
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_80
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_81
_80:
; rs232cmd.c 1307				{
; rs232cmd.c 1308					SCPIError = SyntaxErr;	
	SYMB	LINE, 1308
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1309					return;
	SYMB	LINE, 1309
	BR	_89
; rs232cmd.c 1310				}
	SYMB	LINE, 1310
_81:
; rs232cmd.c 1311	
; rs232cmd.c 1312				if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1312
	MOV.W	R0,[R7]
	BEQ	_82
	CMP.W	[R7],#04H
	BLE	_83
_82:
; rs232cmd.c 1313					SCPIError = DataOutOfRange;
	SYMB	LINE, 1313
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_89
_83:
; rs232cmd.c 1314				else
; rs232cmd.c 1315				{
; rs232cmd.c 1316					if ( RecallPreset( Reg) != OK)
	SYMB	LINE, 1316
	MOV.W	R0,[R7]
	CALL	_RecallPreset
	CMP.W	R0,#0FFFFH
	BEQ	_89
; rs232cmd.c 1317						SCPIError = ExecErr;
	SYMB	LINE, 1317
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 1318				}
; rs232cmd.c 1319			}
; rs232cmd.c 1320		}
; rs232cmd.c 1321	}
	SYMB	LINE, 1321
_89:
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1322	
; rs232cmd.c 1323	/**************************************************************************/
; rs232cmd.c 1324	/* SAVCommand																									 RS232CMD.C */
; rs232cmd.c 1325	/*																																				*/
; rs232cmd.c 1326	/* Author:		Sten A. Andersen/Thomas Kappelgaard, DEV, xxxxxx 						*/
; rs232cmd.c 1327	/* Revised:		Kim Engedahl, DEV, 000502																		*/
; rs232cmd.c 1328	/*																																				*/
; rs232cmd.c 1329	/* Function:																															*/
; rs232cmd.c 1330	/* Remarks:																																*/
; rs232cmd.c 1331	/* Returns:		-																														*/
; rs232cmd.c 1332	/* Updates:		-																														*/
; rs232cmd.c 1333	/**************************************************************************/
; rs232cmd.c 1334	void SAVCommand(void) 
; rs232cmd.c 1335	{
	ALIGN	1
	SYMB	LINE, 1335
	PUBLIC	_SAVCommand
_SAVCommand:
	SYMB	TYPE, 545, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SAVCommand", _SAVCommand, #545, 0, 0, 0
	SYMB	ALAB, _SAVCommand, #545
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "Reg", -2, #16, 130, 5
; rs232cmd.c 1336		int	Reg = 0;
	SYMB	LINE, 1336
	MOV.W	[R7],#00H
; rs232cmd.c 1337	
; rs232cmd.c 1338		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1338
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_104
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_104
; rs232cmd.c 1339		{
; rs232cmd.c 1340			if ( CmdRequest)
	SYMB	LINE, 1340
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_94
; rs232cmd.c 1341				SCPIError = SyntaxErr;
	SYMB	LINE, 1341
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_104
_94:
; rs232cmd.c 1342			else
; rs232cmd.c 1343			{
; rs232cmd.c 1344				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1344
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_95
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_96
_95:
; rs232cmd.c 1345				{
; rs232cmd.c 1346					SCPIError = SyntaxErr;	
	SYMB	LINE, 1346
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1347					return;
	SYMB	LINE, 1347
	BR	_104
; rs232cmd.c 1348				}
	SYMB	LINE, 1348
_96:
; rs232cmd.c 1349	
; rs232cmd.c 1350				if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1350
	MOV.W	R0,[R7]
	BEQ	_97
	CMP.W	[R7],#04H
	BLE	_98
_97:
; rs232cmd.c 1351					SCPIError = DataOutOfRange;
	SYMB	LINE, 1351
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_104
_98:
; rs232cmd.c 1352				else
; rs232cmd.c 1353				{
; rs232cmd.c 1354					if ( StorePreset( Reg) != OK)
	SYMB	LINE, 1354
	MOV.W	R0,[R7]
	CALL	_StorePreset
	CMP.W	R0,#0FFFFH
	BEQ	_104
; rs232cmd.c 1355						SCPIError = ExecErr;
	SYMB	LINE, 1355
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 1356				}
; rs232cmd.c 1357			}
; rs232cmd.c 1358		}
; rs232cmd.c 1359	}
	SYMB	LINE, 1359
_104:
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1360	
; rs232cmd.c 1361	/**************************************************************************/
; rs232cmd.c 1362	/* SystemError																								 RS232CMD.C */
; rs232cmd.c 1363	/*																																				*/
; rs232cmd.c 1364	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 1365	/* Revised:		000401				     																					*/
; rs232cmd.c 1366	/*																																				*/
; rs232cmd.c 1367	/* Function:	Write the next entry in the error queue (FIFO) to RS232 		*/
; rs232cmd.c 1368	/* Remarks:		No parameters, Query only																		*/
; rs232cmd.c 1369	/* Returns:		-																														*/
; rs232cmd.c 1370	/* Updates:		-																														*/
; rs232cmd.c 1371	/**************************************************************************/
; rs232cmd.c 1372	void SystemError( void)
; rs232cmd.c 1373	{
	ALIGN	1
	SYMB	LINE, 1373
	PUBLIC	_SystemError
_SystemError:
	SYMB	TYPE, 546, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemError", _SystemError, #546, 0, 0, 48
	SYMB	ALAB, _SystemError, #546
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#0CH
	SYMB	SOFF, 16
	SYMB	IDEN, "i", -1, #16, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
	SYMB	IDEN, "ptr", -1, #491, 130, 5
	SYMB	LTIM, "ptr", -1, 0, 69
	SYMB	TYPE, 547, 'Z', #2, 11
	SYMB	IDEN, "buf", -16, #547, 130, 5
; rs232cmd.c 1374		int i;
; rs232cmd.c 1375		code char *ptr;
; rs232cmd.c 1376		char buf[12];
; rs232cmd.c 1377	
; rs232cmd.c 1378		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1378
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_119
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_119
; rs232cmd.c 1379		{
; rs232cmd.c 1380			if ( CmdRequest)
	SYMB	LINE, 1380
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_114
; rs232cmd.c 1381			{
; rs232cmd.c 1382				if ( ParCnt > 0)
	SYMB	LINE, 1382
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#00H
	BL	_111
; rs232cmd.c 1383					SCPIError = ParNotAllowed;
	SYMB	LINE, 1383
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_119
_111:
; rs232cmd.c 1384				else
; rs232cmd.c 1385				{
; rs232cmd.c 1386					if (( i = ReadErrorEventQueue()) >= 0)
	SYMB	LINE, 1386
	CALL	_ReadErrorEventQueue
	MOV.W	R4,R0
	MOV.W	R1,R0
	CMP.W	R1,#00H
	BLT	_119
; rs232cmd.c 1387					{
; rs232cmd.c 1388						sprintf( buf, "%d,\"", ErrorTxt_Array[i].ErrorNo);
	SYMB	LINE, 1388
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	MOV.W	R0,R7
	MULU.W	R4,#06H
	MOV.W	R2,R4
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _ErrorTxt_Array )
	MOV.W	R0,#SOF( _ErrorTxt_Array )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	SYMB	SOFF, 18
	MOV.W	R1,#SEG( _109 )
	MOV.W	R0,#SOF( _109 )
	PUSH.W	R0, R1
	SYMB	SOFF, 22
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+6
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 16
; rs232cmd.c 1389						rs232puts( buf);
	SYMB	LINE, 1389
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	MOV.W	R0,R7
	CALL	_rs232puts
; rs232cmd.c 1390	
; rs232cmd.c 1391						ptr = ErrorTxt_Array[i].ErrorTxt;
	SYMB	LINE, 1391
	MOV.W	R2,R4
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _ErrorTxt_Array+2 )
	MOV.W	R0,#SOF( _ErrorTxt_Array+2 )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_122
	ADDS.B	CS,#01H
_122:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "ptr", 19, 0, 205
; rs232cmd.c 1392	
; rs232cmd.c 1393						while ( *ptr)
	SYMB	LINE, 1393
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_113
_112:
; rs232cmd.c 1394							rs232putchar( *ptr++);
	SYMB	LINE, 1394
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "ptr", 19, 0, 77
	SYMB	LTIM, "ptr", 19, 0, 205
	SYMB	LINE, 1393
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_112
	SYMB	LINE, 1394
_113:
; rs232cmd.c 1395	
; rs232cmd.c 1396						 rs232puts( "\"\n");
	SYMB	LINE, 1396
	MOV.W	R1,#SEG( _110 )
	MOV.W	R0,#SOF( _110 )
	CALL	_rs232puts
; rs232cmd.c 1397					}
; rs232cmd.c 1398				}
; rs232cmd.c 1399			}
	SYMB	LINE, 1399
	BR	_119
_114:
; rs232cmd.c 1400			else
; rs232cmd.c 1401				SCPIError = SyntaxErr;
	SYMB	LINE, 1401
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1402		}
	SYMB	LINE, 1402
_119:
; rs232cmd.c 1403	}
	SYMB	LINE, 1403
	ADD.W	R7,#0CH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "ptr", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 1404	
; rs232cmd.c 1405	/**************************************************************************/
; rs232cmd.c 1406	/* SystemVersion																							 RS232CMD.C */
; rs232cmd.c 1407	/*																																				*/
; rs232cmd.c 1408	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 1409	/* Revised:		000401				     																					*/
; rs232cmd.c 1410	/*																																				*/
; rs232cmd.c 1411	/* Function:	Write the SCPI version to RS232															*/
; rs232cmd.c 1412	/* Remarks:		No parameter, Query only																		*/
; rs232cmd.c 1413	/* Returns:		-																														*/
; rs232cmd.c 1414	/* Updates:		-																														*/
; rs232cmd.c 1415	/**************************************************************************/
; rs232cmd.c 1416	void SystemVersion( void)
; rs232cmd.c 1417	{
	ALIGN	1
	SYMB	LINE, 1417
	PUBLIC	_SystemVersion
_SystemVersion:
	SYMB	TYPE, 549, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemVersion", _SystemVersion, #549, 0, 0, 48
	SYMB	ALAB, _SystemVersion, #549
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 1418		char code *str;
; rs232cmd.c 1419	
; rs232cmd.c 1420		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1420
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_130
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_130
; rs232cmd.c 1421		{
; rs232cmd.c 1422			if ( CmdRequest)
	SYMB	LINE, 1422
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_126
; rs232cmd.c 1423			{
; rs232cmd.c 1424				if ( ParCnt)
	SYMB	LINE, 1424
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_123
; rs232cmd.c 1425					SCPIError = ParNotAllowed;
	SYMB	LINE, 1425
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_130
_123:
; rs232cmd.c 1426				else
; rs232cmd.c 1427				{
; rs232cmd.c 1428					str = SystemVersionTxt;
	SYMB	LINE, 1428
	MOV.W	R5,#SEG( _SystemVersionTxt )
	MOV.W	R4,#SOF( _SystemVersionTxt )
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 1429	
; rs232cmd.c 1430					while ( *str)
	SYMB	LINE, 1430
	MOV.B	CS,#SEG( _SystemVersionTxt )
	MOV.W	R0,#SOF( _SystemVersionTxt )
	MOVC.B	R1L,[R0+]
	BEQ	_125
_124:
; rs232cmd.c 1431						rs232putchar( *str++);
	SYMB	LINE, 1431
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 1430
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_124
	SYMB	LINE, 1431
_125:
; rs232cmd.c 1432	
; rs232cmd.c 1433					rs232putchar( '\n');
	SYMB	LINE, 1433
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1434				}
; rs232cmd.c 1435			}
	SYMB	LINE, 1435
	BR	_130
_126:
; rs232cmd.c 1436			else
; rs232cmd.c 1437				SCPIError = SyntaxErr;
	SYMB	LINE, 1437
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1438		}
	SYMB	LINE, 1438
_130:
; rs232cmd.c 1439	}
	SYMB	LINE, 1439
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 1440	
; rs232cmd.c 1441	/**************************************************************************/
; rs232cmd.c 1442	/* SystemPresetName																						 RS232CMD.C */
; rs232cmd.c 1443	/*																																				*/
; rs232cmd.c 1444	/* Author:		Kim Engedahl, DEV, 970206	    															*/
; rs232cmd.c 1445	/* Revised:		000503					     																				*/
; rs232cmd.c 1446	/*																																				*/								
; rs232cmd.c 1447	/* Function:	Name a specific preset number.															*/
; rs232cmd.c 1448	/* Remarks:		the scanf function can not used MaxPresetNameLength, i.e.		*/
; rs232cmd.c 1449	/*						this define should be inserted as a value. The value is			*/
; rs232cmd.c 1450	/*						defined	in INSTRU.H								 													*/
; rs232cmd.c 1451	/* Returns:		-																														*/
; rs232cmd.c 1452	/* Updates:		-																														*/
; rs232cmd.c 1453	/**************************************************************************/
; rs232cmd.c 1454	void SystemPresetName( void)
; rs232cmd.c 1455	{
	ALIGN	1
	SYMB	LINE, 1455
	SYMB	TYPE, 550, 'Z', #2, 16
	SYMB	TYPE, 552, 'Z', #2, 6
	SYMB	TYPE, 554, 'Z', #457, 2
	SYMB	TYPE, 556, 'Z', #461, 1
	SYMB	TYPE, 558, 'S', 100,\
		 "Name", #550, 0,\
		 "Author", #552, 17,\
		 "Date", #7, 24,\
		 "GenlockSetup", #455, 28,\
		 "BBSetup", #554, 34,\
		 "CBSetup", #459, 58,\
		 "AudioOutput", #16, 70,\
		 "AudioSetup", #556, 72
	SYMB	TYPE, 559, "PresetObject", 'T', #558
	PUBLIC	_SystemPresetName
_SystemPresetName:
	SYMB	TYPE, 560, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetName", _SystemPresetName, #560, 0, 0, 48
	SYMB	ALAB, _SystemPresetName, #560
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#078H
	SYMB	SOFF, 124
	SYMB	IDEN, "Reg", -124, #16, 130, 5
	SYMB	IDEN, "Name", -122, #550, 130, 5
	SYMB	IDEN, "Preset", -104, #559, 130, 5
; rs232cmd.c 1456		int Reg;
; rs232cmd.c 1457		char Name[MaxPresetNameLength];
; rs232cmd.c 1458		PresetObject Preset;
; rs232cmd.c 1459	
; rs232cmd.c 1460		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1460
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_149
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_149
; rs232cmd.c 1461		{
; rs232cmd.c 1462			if ( CmdRequest)
	SYMB	LINE, 1462
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_136
; rs232cmd.c 1463			{
; rs232cmd.c 1464				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1464
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_132
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 128
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 132
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 124
	CMP.W	R0,#01H
	BEQ	_133
_132:
; rs232cmd.c 1465					SCPIError = SyntaxErr;
	SYMB	LINE, 1465
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_149
_133:
; rs232cmd.c 1466				else
; rs232cmd.c 1467				{
; rs232cmd.c 1468					if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1468
	MOV.W	R0,[R7]
	BEQ	_134
	CMP.W	[R7],#04H
	BLE	_135
_134:
; rs232cmd.c 1469						SCPIError = DataOutOfRange;
	SYMB	LINE, 1469
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_149
_135:
; rs232cmd.c 1470					else
; rs232cmd.c 1471					{
; rs232cmd.c 1472						NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1472
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+20
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_NV_Recall
; rs232cmd.c 1473	
; rs232cmd.c 1474						rs232puts( Preset.Name);
	SYMB	LINE, 1474
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 1475						rs232putchar( '\n');
	SYMB	LINE, 1475
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1476					}
; rs232cmd.c 1477				}
; rs232cmd.c 1478			}
	SYMB	LINE, 1478
	BR	_149
_136:
; rs232cmd.c 1479			else
; rs232cmd.c 1480			{
; rs232cmd.c 1481																	// The second parameter, the string, in scanf
; rs232cmd.c 1482																	// should be limited to the definition of
; rs232cmd.c 1483																	// MaxPresetNameLength
; rs232cmd.c 1484				if (( ParCnt != 2) || (( sscanf( Cmd, "%d,%17s", &Reg, Name)) != 2))
	SYMB	LINE, 1484
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_137
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 128
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+4
	PUSH.W	R2, R3
	SYMB	SOFF, 132
	MOV.W	R3,#SEG( _131 )
	MOV.W	R2,#SOF( _131 )
	PUSH.W	R2, R3
	SYMB	SOFF, 136
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 124
	CMP.W	R0,#02H
	BEQ	_138
_137:
; rs232cmd.c 1485					SCPIError = SyntaxErr;
	SYMB	LINE, 1485
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_149
_138:
	MOV.W	R1,R5
	MOV.W	R0,R4
; rs232cmd.c 1486				else
; rs232cmd.c 1487				{
; rs232cmd.c 1488					if ( strlen( Name) == MaxPresetNameLength)
	SYMB	LINE, 1488
	CALL	_strlen
	CMP.W	R0,#011H
	BNE	_139
; rs232cmd.c 1489						SCPIError = SyntaxErr;
	SYMB	LINE, 1489
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_149
_139:
; rs232cmd.c 1490					else
; rs232cmd.c 1491					{
; rs232cmd.c 1492						if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1492
	MOV.W	R0,[R7]
	BEQ	_140
	CMP.W	[R7],#04H
	BLE	_141
_140:
; rs232cmd.c 1493							SCPIError = DataOutOfRange;
	SYMB	LINE, 1493
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_149
_141:
; rs232cmd.c 1494						else
; rs232cmd.c 1495						{
; rs232cmd.c 1496							NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1496
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+20
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_NV_Recall
	MOV.W	R1,R5
	MOV.W	R0,R4
; rs232cmd.c 1497							strcpy( Preset.Name, Name);
	SYMB	LINE, 1497
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+2
	CALL	_strcpy
; rs232cmd.c 1498							NV_Store( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1498
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#064H
	CALL	_NV_Store
; rs232cmd.c 1499						}
; rs232cmd.c 1500					}
; rs232cmd.c 1501				}
; rs232cmd.c 1502			}
; rs232cmd.c 1503		}
	SYMB	LINE, 1503
_149:
; rs232cmd.c 1504	}
	SYMB	LINE, 1504
	ADD.W	R7,#078H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1505	
; rs232cmd.c 1506	/**************************************************************************/
; rs232cmd.c 1507	/* SystemPresetAuthor																					 RS232CMD.C */
; rs232cmd.c 1508	/*																																				*/
; rs232cmd.c 1509	/* Author:		Kim Engedahl, DEV, 000502	    															*/
; rs232cmd.c 1510	/* Revised:		000503					     																				*/
; rs232cmd.c 1511	/*																																				*/								
; rs232cmd.c 1512	/* Function:	Name the author of a specific preset number. 								*/
; rs232cmd.c 1513	/* Remarks:		the scanf function can not used MaxPresetAuthorLength, i.e.	*/
; rs232cmd.c 1514	/*						this define should be inserted as a value. The value is			*/
; rs232cmd.c 1515	/*						defined	in INSTRU.H								 													*/
; rs232cmd.c 1516	/* Returns:		-																														*/
; rs232cmd.c 1517	/* Updates:		-																														*/
; rs232cmd.c 1518	/**************************************************************************/
; rs232cmd.c 1519	void SystemPresetAuthor( void)
; rs232cmd.c 1520	{
	ALIGN	1
	SYMB	LINE, 1520
	PUBLIC	_SystemPresetAuthor
_SystemPresetAuthor:
	SYMB	TYPE, 561, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetAuthor", _SystemPresetAuthor, #561, 0, 0, 48
	SYMB	ALAB, _SystemPresetAuthor, #561
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#06EH
	SYMB	SOFF, 114
	SYMB	IDEN, "Reg", -114, #16, 130, 5
	SYMB	IDEN, "Author", -112, #552, 130, 5
	SYMB	IDEN, "Preset", -104, #559, 130, 5
; rs232cmd.c 1521		int Reg;
; rs232cmd.c 1522		char Author[MaxPresetAuthorLength];
; rs232cmd.c 1523		PresetObject Preset;
; rs232cmd.c 1524	
; rs232cmd.c 1525		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1525
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_175
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_175
; rs232cmd.c 1526		{
; rs232cmd.c 1527			if ( CmdRequest)
	SYMB	LINE, 1527
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_162
; rs232cmd.c 1528			{
; rs232cmd.c 1529				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1529
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_158
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 118
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 122
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 114
	CMP.W	R0,#01H
	BEQ	_159
_158:
; rs232cmd.c 1530					SCPIError = SyntaxErr;
	SYMB	LINE, 1530
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_175
_159:
; rs232cmd.c 1531				else
; rs232cmd.c 1532				{
; rs232cmd.c 1533					if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1533
	MOV.W	R0,[R7]
	BEQ	_160
	CMP.W	[R7],#04H
	BLE	_161
_160:
; rs232cmd.c 1534						SCPIError = DataOutOfRange;
	SYMB	LINE, 1534
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_175
_161:
; rs232cmd.c 1535					else
; rs232cmd.c 1536					{
; rs232cmd.c 1537						NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1537
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+10
	MOV.W	R2,[R7]
	ASL.W	R2,#01H
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	CALL	_NV_Recall
; rs232cmd.c 1538	
; rs232cmd.c 1539						rs232puts( Preset.Author);
	SYMB	LINE, 1539
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+27
	CALL	_rs232puts
; rs232cmd.c 1540						rs232putchar( '\n');
	SYMB	LINE, 1540
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1541					}
; rs232cmd.c 1542				}
; rs232cmd.c 1543			}
	SYMB	LINE, 1543
	BR	_175
_162:
; rs232cmd.c 1544			else
; rs232cmd.c 1545			{
; rs232cmd.c 1546																	// The second parameter, the string, in scanf
; rs232cmd.c 1547																	// should be limited to the definition of
; rs232cmd.c 1548																	// MaxPresetAuthorLength
; rs232cmd.c 1549				if (( ParCnt != 2) || (( sscanf( Cmd, "%d,%7s", &Reg, Author)) != 2))
	SYMB	LINE, 1549
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_163
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 118
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+4
	PUSH.W	R2, R3
	SYMB	SOFF, 122
	MOV.W	R3,#SEG( _157 )
	MOV.W	R2,#SOF( _157 )
	PUSH.W	R2, R3
	SYMB	SOFF, 126
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 114
	CMP.W	R0,#02H
	BEQ	_164
_163:
; rs232cmd.c 1550					SCPIError = SyntaxErr;
	SYMB	LINE, 1550
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_175
_164:
	MOV.W	R1,R5
	MOV.W	R0,R4
; rs232cmd.c 1551				else
; rs232cmd.c 1552				{
; rs232cmd.c 1553					if ( strlen( Author) == MaxPresetAuthorLength)
	SYMB	LINE, 1553
	CALL	_strlen
	CMP.W	R0,#07H
	BNE	_165
; rs232cmd.c 1554						SCPIError = SyntaxErr;
	SYMB	LINE, 1554
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_175
_165:
; rs232cmd.c 1555					else
; rs232cmd.c 1556					{
; rs232cmd.c 1557						if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1557
	MOV.W	R0,[R7]
	BEQ	_166
	CMP.W	[R7],#04H
	BLE	_167
_166:
; rs232cmd.c 1558							SCPIError = DataOutOfRange;
	SYMB	LINE, 1558
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_175
_167:
; rs232cmd.c 1559						else
; rs232cmd.c 1560						{
; rs232cmd.c 1561							NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1561
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+10
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_NV_Recall
; rs232cmd.c 1562							strcpy( Preset.Author, Author);
	SYMB	LINE, 1562
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+27
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+2
	CALL	_strcpy
; rs232cmd.c 1563							NV_Store( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1563
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#064H
	CALL	_NV_Store
; rs232cmd.c 1564						}
; rs232cmd.c 1565					}
; rs232cmd.c 1566				}
; rs232cmd.c 1567			}
; rs232cmd.c 1568		}
	SYMB	LINE, 1568
_175:
; rs232cmd.c 1569	}
	SYMB	LINE, 1569
	ADD.W	R7,#06EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1570	
; rs232cmd.c 1571	/**************************************************************************/
; rs232cmd.c 1572	/* SystemPresetDate																						 RS232CMD.C */
; rs232cmd.c 1573	/*																																				*/
; rs232cmd.c 1574	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 1575	/* Revised:		001016					     																				*/
; rs232cmd.c 1576	/*																																				*/								
; rs232cmd.c 1577	/* Function:	-																														*/
; rs232cmd.c 1578	/* Remarks:		-																														*/
; rs232cmd.c 1579	/* Returns:		-																														*/
; rs232cmd.c 1580	/* Updates:		-																														*/
; rs232cmd.c 1581	/**************************************************************************/
; rs232cmd.c 1582	void SystemPresetDate( void)
; rs232cmd.c 1583	{
	ALIGN	1
	SYMB	LINE, 1583
	PUBLIC	_SystemPresetDate
_SystemPresetDate:
	SYMB	TYPE, 562, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetDate", _SystemPresetDate, #562, 0, 0, 48
	SYMB	ALAB, _SystemPresetDate, #562
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#080H
	SYMB	SOFF, 132
	SYMB	IDEN, "Reg", -132, #16, 130, 5
	SYMB	IDEN, "Preset", -130, #559, 130, 5
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	TYPE, 563, 'Z', #2, 19
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 1584		int Reg;
; rs232cmd.c 1585		PresetObject Preset;
; rs232cmd.c 1586		UI year, month, day;
; rs232cmd.c 1587		char buffer[20];
; rs232cmd.c 1588	
; rs232cmd.c 1589		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1589
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_202
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_202
; rs232cmd.c 1590		{
; rs232cmd.c 1591			if ( CmdRequest)
	SYMB	LINE, 1591
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_189
; rs232cmd.c 1592			{
; rs232cmd.c 1593				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1593
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_185
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 136
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 140
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 132
	CMP.W	R0,#01H
	BEQ	_186
_185:
; rs232cmd.c 1594					SCPIError = SyntaxErr;
	SYMB	LINE, 1594
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_202
_186:
; rs232cmd.c 1595				else
; rs232cmd.c 1596				{
; rs232cmd.c 1597					if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1597
	MOV.W	R0,[R7]
	BEQ	_187
	CMP.W	[R7],#04H
	BLE	_188
_187:
; rs232cmd.c 1598						SCPIError = DataOutOfRange;
	SYMB	LINE, 1598
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_202
_188:
; rs232cmd.c 1599					else
; rs232cmd.c 1600					{
; rs232cmd.c 1601						NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1601
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+2
	MOV.W	R2,[R7]
	ASL.W	R2,#01H
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	CALL	_NV_Recall
; rs232cmd.c 1602	
; rs232cmd.c 1603						day = Preset.Date % 100;
	SYMB	LINE, 1603
	MOV.W	R1,[R7+28]
	MOV.W	R0,[R7+26]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	[R7+28],R1
	MOV.W	[R7+26],R0
	FCALL	__UMODL
	MOV.W	[R7+106],R0
; rs232cmd.c 1604						month = ( Preset.Date / 100) % 100;
	SYMB	LINE, 1604
	MOV.W	R1,[R7+28]
	MOV.W	R0,[R7+26]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+104],R0
; rs232cmd.c 1605						year = ( Preset.Date / 10000);
	SYMB	LINE, 1605
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.W	R1,[R7+28]
	MOV.W	R0,[R7+26]
	FCALL	__UDIVL
	MOV.W	[R7+102],R0
; rs232cmd.c 1606	
; rs232cmd.c 1607						sprintf( buffer, "%d,%d,%d\n", year, month, day);
	SYMB	LINE, 1607
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+108
	MOV.W	R0,[R7+106]
	PUSH.W	R0
	SYMB	SOFF, 134
	MOV.W	R0,[R7+106]
	PUSH.W	R0
	SYMB	SOFF, 136
	MOV.W	R0,[R7+106]
	PUSH.W	R0
	SYMB	SOFF, 138
	MOV.W	R1,#SEG( _183 )
	MOV.W	R0,#SOF( _183 )
	PUSH.W	R0, R1
	SYMB	SOFF, 142
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 132
; rs232cmd.c 1608	
; rs232cmd.c 1609						rs232puts( buffer);
	SYMB	LINE, 1609
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 1610					}
; rs232cmd.c 1611				}
; rs232cmd.c 1612			}
	SYMB	LINE, 1612
	BR	_202
_189:
; rs232cmd.c 1613			else
; rs232cmd.c 1614			{
; rs232cmd.c 1615				if (( ParCnt != 4) || (( sscanf( Cmd, "%d,%d,%d,%d", &Reg, &year, &month, &day)) != 4))
	SYMB	LINE, 1615
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#04H
	BNE	_190
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+102
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+104
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+106
	PUSH.W	R0, R1
	SYMB	SOFF, 136
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+108
	PUSH.W	R0, R1
	SYMB	SOFF, 140
	PUSH.W	R4, R5
	SYMB	SOFF, 144
	PUSH.W	R2, R3
	SYMB	SOFF, 148
	MOV.W	R3,#SEG( _184 )
	MOV.W	R2,#SOF( _184 )
	PUSH.W	R2, R3
	SYMB	SOFF, 152
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#014H
	SYMB	SOFF, 132
	CMP.W	R0,#04H
	BEQ	_191
_190:
; rs232cmd.c 1616					SCPIError = SyntaxErr;
	SYMB	LINE, 1616
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_202
_191:
; rs232cmd.c 1617				else
; rs232cmd.c 1618				{
; rs232cmd.c 1619					if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 1619
	MOV.W	R0,[R7+102]
	MOV.W	R1,[R7+104]
	MOV.W	R2,[R7+106]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_192
; rs232cmd.c 1620						SCPIError = ExecErr;
	SYMB	LINE, 1620
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_202
_192:
; rs232cmd.c 1621					else
; rs232cmd.c 1622					{
; rs232cmd.c 1623						if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1623
	MOV.W	R0,[R7]
	BEQ	_193
	CMP.W	[R7],#04H
	BLE	_194
_193:
; rs232cmd.c 1624							SCPIError = DataOutOfRange;
	SYMB	LINE, 1624
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_202
_194:
; rs232cmd.c 1625						else
; rs232cmd.c 1626						{
; rs232cmd.c 1627							NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1627
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_NV_Recall
; rs232cmd.c 1628							Preset.Date = day + 100*month + 10000*year;
	SYMB	LINE, 1628
	MOV.W	R0,[R7+104]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+106]
	MOV.W	R2,[R7+102]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.W	[R7+28],R1
	MOV.W	[R7+26],R0
; rs232cmd.c 1629							NV_Store( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1629
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#064H
	CALL	_NV_Store
; rs232cmd.c 1630						}
; rs232cmd.c 1631					}				
; rs232cmd.c 1632				}
; rs232cmd.c 1633			}
; rs232cmd.c 1634		}
	SYMB	LINE, 1634
_202:
; rs232cmd.c 1635	}
	SYMB	LINE, 1635
	ADD.W	R7,#080H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1636	
; rs232cmd.c 1637	/**************************************************************************/
; rs232cmd.c 1638	/* SystemPresetDownload																				 RS232CMD.C */
; rs232cmd.c 1639	/*																																				*/
; rs232cmd.c 1640	/* Author:		Kim Engedahl, DEV, 000413	    															*/
; rs232cmd.c 1641	/* Revised:		000413					     																				*/
; rs232cmd.c 1642	/*																																				*/								
; rs232cmd.c 1643	/* Function:	Download a setup to a specific preset withouth disturbing		*/
; rs232cmd.c 1644	/*						the setting/function of the PT5201.										 			*/
; rs232cmd.c 1645	/* Remarks:		--																													*/
; rs232cmd.c 1646	/* Returns:		-																														*/
; rs232cmd.c 1647	/* Updates:		-																														*/
; rs232cmd.c 1648	/**************************************************************************/
; rs232cmd.c 1649	void SystemPresetDownload( void)
; rs232cmd.c 1650	{
	ALIGN	1
	SYMB	LINE, 1650
	PUBLIC	_SystemPresetDownload
_SystemPresetDownload:
	SYMB	TYPE, 565, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetDownload", _SystemPresetDownload, #565, 0, 0, 0
	SYMB	ALAB, _SystemPresetDownload, #565
; rs232cmd.c 1651		;
; rs232cmd.c 1652	}
	SYMB	LINE, 1652
	RET
	SYMB	EFUN
; rs232cmd.c 1653	
; rs232cmd.c 1654	/**************************************************************************/
; rs232cmd.c 1655	/* SystemPresetUpload																					 RS232CMD.C */
; rs232cmd.c 1656	/*																																				*/
; rs232cmd.c 1657	/* Author:		Kim Engedahl, DEV, 000413	    															*/
; rs232cmd.c 1658	/* Revised:		000413					     																				*/
; rs232cmd.c 1659	/*																																				*/								
; rs232cmd.c 1660	/* Function:	Upload a setup from a specific preset withouth disturbing		*/
; rs232cmd.c 1661	/*						the setting/function of the PT5201.											 		*/
; rs232cmd.c 1662	/* Remarks:		--																													*/
; rs232cmd.c 1663	/* Returns:		-																														*/
; rs232cmd.c 1664	/* Updates:		-																														*/
; rs232cmd.c 1665	/**************************************************************************/
; rs232cmd.c 1666	void SystemPresetUpload( void)
; rs232cmd.c 1667	{
	ALIGN	1
	SYMB	LINE, 1667
	PUBLIC	_SystemPresetUpload
_SystemPresetUpload:
	SYMB	TYPE, 566, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetUpload", _SystemPresetUpload, #566, 0, 0, 0
	SYMB	ALAB, _SystemPresetUpload, #566
; rs232cmd.c 1668		;
; rs232cmd.c 1669	}
	SYMB	LINE, 1669
	RET
	SYMB	EFUN
; rs232cmd.c 1670	
; rs232cmd.c 1671	/**************************************************************************/
; rs232cmd.c 1672	/* StatusOperEvent																						 RS232CMD.C */
; rs232cmd.c 1673	/*																																				*/
; rs232cmd.c 1674	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1675	/* Revised:		000402				     																					*/
; rs232cmd.c 1676	/*																																				*/
; rs232cmd.c 1677	/* Function:	Set/read the status operation event register								*/
; rs232cmd.c 1678	/* Remarks:		Reading the event register clears it												*/
; rs232cmd.c 1679	/* Returns:		-																														*/
; rs232cmd.c 1680	/* Updates:		OperEventReg																								*/
; rs232cmd.c 1681	/**************************************************************************/
; rs232cmd.c 1682	void StatusOperEvent( void)
; rs232cmd.c 1683	{
	ALIGN	1
	SYMB	LINE, 1683
	PUBLIC	_StatusOperEvent
_StatusOperEvent:
	SYMB	TYPE, 567, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusOperEvent", _StatusOperEvent, #567, 0, 0, 0
	SYMB	ALAB, _StatusOperEvent, #567
; rs232cmd.c 1684		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1684
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_214
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_214
; rs232cmd.c 1685		{
; rs232cmd.c 1686			if ( ParCnt)
	SYMB	LINE, 1686
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_209
; rs232cmd.c 1687				SCPIError = ParNotAllowed;
	SYMB	LINE, 1687
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_209:
; rs232cmd.c 1688			else
; rs232cmd.c 1689			{
; rs232cmd.c 1690				if ( CmdRequest) {
	SYMB	LINE, 1690
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_210
; rs232cmd.c 1691					rs232printf( 12, "%d\n", OperEventReg);
	SYMB	LINE, 1691
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _OperEventReg )
	MOV.W	R1,#SOF( _OperEventReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
; rs232cmd.c 1692	
; rs232cmd.c 1693					OperEventReg = 0;
	SYMB	LINE, 1693
	MOV.B	ES,#SEG( _OperEventReg )
	MOV.W	R0,#SOF( _OperEventReg )
	MOV.W	[R0],#00H
; rs232cmd.c 1694				}
	SYMB	LINE, 1694
	RET
_210:
; rs232cmd.c 1695				else
; rs232cmd.c 1696					SCPIError = SyntaxErr;
	SYMB	LINE, 1696
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1697			}
; rs232cmd.c 1698		}
	SYMB	LINE, 1698
_214:
; rs232cmd.c 1699	}
	SYMB	LINE, 1699
	RET
	SYMB	EFUN
; rs232cmd.c 1700	
; rs232cmd.c 1701	/**************************************************************************/
; rs232cmd.c 1702	/* StatusOperCondition																				 RS232CMD.C */
; rs232cmd.c 1703	/*																																				*/
; rs232cmd.c 1704	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1705	/* Revised:		000413				     																					*/
; rs232cmd.c 1706	/*																																				*/
; rs232cmd.c 1707	/* Function:	Read the status questionable condition register							*/
; rs232cmd.c 1708	/* Remarks:		No parameters																								*/
; rs232cmd.c 1709	/* Returns:																																*/
; rs232cmd.c 1710	/* Updates:																																*/
; rs232cmd.c 1711	/**************************************************************************/
; rs232cmd.c 1712	void StatusOperCondition( void)
; rs232cmd.c 1713	{
	ALIGN	1
	SYMB	LINE, 1713
	PUBLIC	_StatusOperCondition
_StatusOperCondition:
	SYMB	TYPE, 568, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusOperCondition", _StatusOperCondition, #568, 0, 0, 0
	SYMB	ALAB, _StatusOperCondition, #568
; rs232cmd.c 1714		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1714
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_220
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_220
; rs232cmd.c 1715		{
; rs232cmd.c 1716			if ( ParCnt)
	SYMB	LINE, 1716
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_215
; rs232cmd.c 1717				SCPIError = ParNotAllowed;
	SYMB	LINE, 1717
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_215:
; rs232cmd.c 1718			else
; rs232cmd.c 1719			{
; rs232cmd.c 1720				if ( CmdRequest)
	SYMB	LINE, 1720
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_216
; rs232cmd.c 1721					rs232printf( 12, "%d\n", OperConditionReg);
	SYMB	LINE, 1721
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _OperConditionReg )
	MOV.W	R1,#SOF( _OperConditionReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
	RET
_216:
; rs232cmd.c 1722				else
; rs232cmd.c 1723					SCPIError = SyntaxErr;
	SYMB	LINE, 1723
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1724			}
; rs232cmd.c 1725		}
	SYMB	LINE, 1725
_220:
; rs232cmd.c 1726	}
	SYMB	LINE, 1726
	RET
	SYMB	EFUN
; rs232cmd.c 1727	
; rs232cmd.c 1728	/**************************************************************************/
; rs232cmd.c 1729	/* StatusOperEnable																						 RS232CMD.C */
; rs232cmd.c 1730	/*																																				*/
; rs232cmd.c 1731	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1732	/* Revised:		000413				     																					*/
; rs232cmd.c 1733	/*																																				*/
; rs232cmd.c 1734	/* Function:	Set/read the status operaion enable register								*/
; rs232cmd.c 1735	/* Remarks:		--																													*/
; rs232cmd.c 1736	/* Returns:		-																														*/
; rs232cmd.c 1737	/* Updates:		-																														*/
; rs232cmd.c 1738	/**************************************************************************/
; rs232cmd.c 1739	void StatusOperEnable( void)
; rs232cmd.c 1740	{
	ALIGN	1
	SYMB	LINE, 1740
	PUBLIC	_StatusOperEnable
_StatusOperEnable:
	SYMB	TYPE, 569, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusOperEnable", _StatusOperEnable, #569, 0, 0, 0
	SYMB	ALAB, _StatusOperEnable, #569
	ADDS.W	R7,#0CH
	SYMB	SOFF, 4
	SYMB	IDEN, "Reg", -4, #6, 130, 5
; rs232cmd.c 1741		long	Reg;
; rs232cmd.c 1742	
; rs232cmd.c 1743		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1743
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_232
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_232
; rs232cmd.c 1744		{
; rs232cmd.c 1745			if ( CmdRequest)
	SYMB	LINE, 1745
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_223
; rs232cmd.c 1746			{
; rs232cmd.c 1747				if ( ParCnt)
	SYMB	LINE, 1747
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_222
; rs232cmd.c 1748					SCPIError = ParNotAllowed;
	SYMB	LINE, 1748
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_232
_222:
; rs232cmd.c 1749				else
; rs232cmd.c 1750					rs232printf( 12, "%d\n", OperEnableReg);
	SYMB	LINE, 1750
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _OperEnableReg )
	MOV.W	R1,#SOF( _OperEnableReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 1751			}
	SYMB	LINE, 1751
	BR	_232
_223:
; rs232cmd.c 1752			else
; rs232cmd.c 1753			{
; rs232cmd.c 1754				if (( ParCnt != 1) || ( sscanf( Cmd, "%l", &Reg) != 1))
	SYMB	LINE, 1754
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_224
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _221 )
	MOV.W	R2,#SOF( _221 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	CMP.W	R0,#01H
	BEQ	_225
_224:
; rs232cmd.c 1755				{
; rs232cmd.c 1756					SCPIError = SyntaxErr;	
	SYMB	LINE, 1756
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1757					return;
	SYMB	LINE, 1757
	BR	_232
; rs232cmd.c 1758				}
	SYMB	LINE, 1758
_225:
; rs232cmd.c 1759	
; rs232cmd.c 1760				if ( Reg > 65535)
	SYMB	LINE, 1760
	CMP.W	[R7+2],#00H
	BLT	_226
	BGT	_235
	CMP.W	[R7],#0FFFFH
	BL	_226
_235:
; rs232cmd.c 1761				{
; rs232cmd.c 1762					SCPIError = DataOutOfRange;
	SYMB	LINE, 1762
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1763					return;
	SYMB	LINE, 1763
	BR	_232
; rs232cmd.c 1764				}
	SYMB	LINE, 1764
_226:
; rs232cmd.c 1765	
; rs232cmd.c 1766				OperEnableReg = Reg & 0xEFFF;
	SYMB	LINE, 1766
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	AND.W	R0,#0EFFFH
	MOV.B	ES,#SEG( _OperEnableReg )
	MOV.W	R1,#SOF( _OperEnableReg )
	MOV.W	[R1],R0
; rs232cmd.c 1767			}
; rs232cmd.c 1768		}
; rs232cmd.c 1769	}
	SYMB	LINE, 1769
_232:
	ADDS.W	R7,#04H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1770	
; rs232cmd.c 1771	/***************************************************************************/
; rs232cmd.c 1772	/* StatusQuestEvent																			 			 RS232CMD.C */
; rs232cmd.c 1773	/*																																				*/
; rs232cmd.c 1774	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1775	/* Revised:		000413				     																					*/
; rs232cmd.c 1776	/*																																				*/
; rs232cmd.c 1777	/* Function:	Set/read the status questionablen event register						*/
; rs232cmd.c 1778	/* Remarks:		Reading the event register clears it												*/
; rs232cmd.c 1779	/* Returns:		-																														*/
; rs232cmd.c 1780	/* Updates:		QuestEventReg																								*/
; rs232cmd.c 1781	/***************************************************************************/
; rs232cmd.c 1782	void StatusQuestEvent( void)
; rs232cmd.c 1783	{
	ALIGN	1
	SYMB	LINE, 1783
	PUBLIC	_StatusQuestEvent
_StatusQuestEvent:
	SYMB	TYPE, 570, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusQuestEvent", _StatusQuestEvent, #570, 0, 0, 0
	SYMB	ALAB, _StatusQuestEvent, #570
; rs232cmd.c 1784		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1784
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_241
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_241
; rs232cmd.c 1785		{
; rs232cmd.c 1786			if ( ParCnt)
	SYMB	LINE, 1786
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_236
; rs232cmd.c 1787				SCPIError = ParNotAllowed;
	SYMB	LINE, 1787
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_236:
; rs232cmd.c 1788			else
; rs232cmd.c 1789			{
; rs232cmd.c 1790				if ( CmdRequest)
	SYMB	LINE, 1790
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_237
; rs232cmd.c 1791				{
; rs232cmd.c 1792					rs232printf( 12, "%d\n", QuestEventReg);
	SYMB	LINE, 1792
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _QuestEventReg )
	MOV.W	R1,#SOF( _QuestEventReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
; rs232cmd.c 1793	
; rs232cmd.c 1794					QuestEventReg = 0;
	SYMB	LINE, 1794
	MOV.B	ES,#SEG( _QuestEventReg )
	MOV.W	R0,#SOF( _QuestEventReg )
	MOV.W	[R0],#00H
; rs232cmd.c 1795				}
	SYMB	LINE, 1795
	RET
_237:
; rs232cmd.c 1796				else
; rs232cmd.c 1797					SCPIError = SyntaxErr;
	SYMB	LINE, 1797
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1798			}
; rs232cmd.c 1799		}
	SYMB	LINE, 1799
_241:
; rs232cmd.c 1800	}
	SYMB	LINE, 1800
	RET
	SYMB	EFUN
; rs232cmd.c 1801	
; rs232cmd.c 1802	/**************************************************************************/
; rs232cmd.c 1803	/* StatusQuestCondition																		 		 RS232CMD.C */
; rs232cmd.c 1804	/*																																				*/
; rs232cmd.c 1805	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1806	/* Revised:		000413				     																					*/
; rs232cmd.c 1807	/*																																				*/
; rs232cmd.c 1808	/* Function:	Read the status operation condition register								*/
; rs232cmd.c 1809	/* Remarks:		No parameters																								*/
; rs232cmd.c 1810	/* Returns:		-																														*/
; rs232cmd.c 1811	/* Updates:		-																														*/
; rs232cmd.c 1812	/**************************************************************************/
; rs232cmd.c 1813	void StatusQuestCondition( void)
; rs232cmd.c 1814	{
	ALIGN	1
	SYMB	LINE, 1814
	PUBLIC	_StatusQuestCondition
_StatusQuestCondition:
	SYMB	TYPE, 571, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusQuestCondition", _StatusQuestCondition, #571, 0, 0, 0
	SYMB	ALAB, _StatusQuestCondition, #571
; rs232cmd.c 1815		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1815
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_247
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_247
; rs232cmd.c 1816		{
; rs232cmd.c 1817			if ( ParCnt)
	SYMB	LINE, 1817
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_242
; rs232cmd.c 1818				SCPIError = ParNotAllowed;
	SYMB	LINE, 1818
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_242:
; rs232cmd.c 1819			else
; rs232cmd.c 1820			{
; rs232cmd.c 1821				if ( CmdRequest)
	SYMB	LINE, 1821
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_243
; rs232cmd.c 1822				rs232printf( 12, "%d\n", QuestConditionReg);
	SYMB	LINE, 1822
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _QuestConditionReg )
	MOV.W	R1,#SOF( _QuestConditionReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
	RET
_243:
; rs232cmd.c 1823				else
; rs232cmd.c 1824					SCPIError = SyntaxErr;
	SYMB	LINE, 1824
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1825			}
; rs232cmd.c 1826		}
	SYMB	LINE, 1826
_247:
; rs232cmd.c 1827	}
	SYMB	LINE, 1827
	RET
	SYMB	EFUN
; rs232cmd.c 1828	
; rs232cmd.c 1829	/**************************************************************************/
; rs232cmd.c 1830	/* StatusQuestEnable																					 RS232CMD.C */
; rs232cmd.c 1831	/*																																				*/
; rs232cmd.c 1832	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1833	/* Revised:		000413				     																					*/
; rs232cmd.c 1834	/*																																				*/
; rs232cmd.c 1835	/* Function:	Set/read the status questionable enable register						*/
; rs232cmd.c 1836	/* Remarks:		--																													*/
; rs232cmd.c 1837	/* Returns:																																*/
; rs232cmd.c 1838	/* Updates:																																*/
; rs232cmd.c 1839	/**************************************************************************/
; rs232cmd.c 1840	void StatusQuestEnable( void)
; rs232cmd.c 1841	{
	ALIGN	1
	SYMB	LINE, 1841
	PUBLIC	_StatusQuestEnable
_StatusQuestEnable:
	SYMB	TYPE, 572, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusQuestEnable", _StatusQuestEnable, #572, 0, 0, 0
	SYMB	ALAB, _StatusQuestEnable, #572
	ADDS.W	R7,#0CH
	SYMB	SOFF, 4
	SYMB	IDEN, "Reg", -4, #6, 130, 5
; rs232cmd.c 1842		long	Reg;
; rs232cmd.c 1843	
; rs232cmd.c 1844		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1844
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_258
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_258
; rs232cmd.c 1845		{
; rs232cmd.c 1846			if ( CmdRequest)
	SYMB	LINE, 1846
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_249
; rs232cmd.c 1847			{
; rs232cmd.c 1848				if ( ParCnt)
	SYMB	LINE, 1848
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_248
; rs232cmd.c 1849					SCPIError = ParNotAllowed;
	SYMB	LINE, 1849
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_258
_248:
; rs232cmd.c 1850				else
; rs232cmd.c 1851					rs232printf( 12, "%d\n", QuestEnableReg);
	SYMB	LINE, 1851
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _QuestEnableReg )
	MOV.W	R1,#SOF( _QuestEnableReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 1852			}
	SYMB	LINE, 1852
	BR	_258
_249:
; rs232cmd.c 1853			else
; rs232cmd.c 1854			{
; rs232cmd.c 1855				if (( ParCnt != 1) || ( sscanf( Cmd, "%l", &Reg) != 1))
	SYMB	LINE, 1855
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_250
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _221 )
	MOV.W	R2,#SOF( _221 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	CMP.W	R0,#01H
	BEQ	_251
_250:
; rs232cmd.c 1856				{
; rs232cmd.c 1857					SCPIError = SyntaxErr;	
	SYMB	LINE, 1857
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1858					return;
	SYMB	LINE, 1858
	BR	_258
; rs232cmd.c 1859				}
	SYMB	LINE, 1859
_251:
; rs232cmd.c 1860	
; rs232cmd.c 1861				if ( Reg > 65535)
	SYMB	LINE, 1861
	CMP.W	[R7+2],#00H
	BLT	_252
	BGT	_261
	CMP.W	[R7],#0FFFFH
	BL	_252
_261:
; rs232cmd.c 1862				{
; rs232cmd.c 1863					SCPIError = DataOutOfRange;
	SYMB	LINE, 1863
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1864					return;
	SYMB	LINE, 1864
	BR	_258
; rs232cmd.c 1865				}
	SYMB	LINE, 1865
_252:
; rs232cmd.c 1866	
; rs232cmd.c 1867				QuestEnableReg = Reg & 0xEFFF;
	SYMB	LINE, 1867
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	AND.W	R0,#0EFFFH
	MOV.B	ES,#SEG( _QuestEnableReg )
	MOV.W	R1,#SOF( _QuestEnableReg )
	MOV.W	[R1],R0
; rs232cmd.c 1868			}
; rs232cmd.c 1869		}
; rs232cmd.c 1870	}
	SYMB	LINE, 1870
_258:
	ADDS.W	R7,#04H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1871	
; rs232cmd.c 1872	/**************************************************************************/
; rs232cmd.c 1873	/* StatusPreset																								 RS232CMD.C */
; rs232cmd.c 1874	/*																																				*/
; rs232cmd.c 1875	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 1876	/* Revised:		000617				     																					*/
; rs232cmd.c 1877	/*																																				*/
; rs232cmd.c 1878	/* Function:																															*/
; rs232cmd.c 1879	/* Remarks:																																*/
; rs232cmd.c 1880	/* Returns:																																*/
; rs232cmd.c 1881	/* Updates:																																*/
; rs232cmd.c 1882	/**************************************************************************/
; rs232cmd.c 1883	void StatusPreset( void)
; rs232cmd.c 1884	{
	ALIGN	1
	SYMB	LINE, 1884
	PUBLIC	_StatusPreset
_StatusPreset:
	SYMB	TYPE, 573, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusPreset", _StatusPreset, #573, 0, 0, 0
	SYMB	ALAB, _StatusPreset, #573
; rs232cmd.c 1885		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1885
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_270
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_270
; rs232cmd.c 1886		{
; rs232cmd.c 1887			if ( CmdRequest)
	SYMB	LINE, 1887
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_266
; rs232cmd.c 1888			{
; rs232cmd.c 1889				if ( ParCnt)
	SYMB	LINE, 1889
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_263
; rs232cmd.c 1890					SCPIError = SyntaxErr;
	SYMB	LINE, 1890
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_263:
; rs232cmd.c 1891				else
; rs232cmd.c 1892				{
; rs232cmd.c 1893					if ( Settings.ActivePreset)
	SYMB	LINE, 1893
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.W	R0,[R0]
	BEQ	_264
; rs232cmd.c 1894						rs232putchar( '0' + Settings.ActivePreset);
	SYMB	LINE, 1894
	ADD.B	R0L,#030H
	CALL	_rs232putchar
	BR	_265
_264:
; rs232cmd.c 1895					else
; rs232cmd.c 1896						rs232puts( "OFF");
	SYMB	LINE, 1896
	MOV.W	R1,#SEG( _262 )
	MOV.W	R0,#SOF( _262 )
	CALL	_rs232puts
_265:
; rs232cmd.c 1897	
; rs232cmd.c 1898					rs232putchar( '\n');
	SYMB	LINE, 1898
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1899				}
; rs232cmd.c 1900			}
	SYMB	LINE, 1900
	RET
_266:
; rs232cmd.c 1901			else
; rs232cmd.c 1902				SCPIError = SyntaxErr;
	SYMB	LINE, 1902
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1903		}
	SYMB	LINE, 1903
_270:
; rs232cmd.c 1904	}
	SYMB	LINE, 1904
	RET
	SYMB	EFUN
; rs232cmd.c 1905	
; rs232cmd.c 1906	/**************************************************************************/
; rs232cmd.c 1907	/* GenlockGen															 	   								 RS232CMD.C	*/
; rs232cmd.c 1908	/*																																				*/
; rs232cmd.c 1909	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 1910	/* Revised:		000525				     																					*/
; rs232cmd.c 1911	/*																																				*/
; rs232cmd.c 1912	/* Function:	Return the Genlock Configuration.														*/
; rs232cmd.c 1913	/* Remarks:		Request only																								*/
; rs232cmd.c 1914	/* Returns:		--																													*/
; rs232cmd.c 1915	/* Updates:	  --																													*/
; rs232cmd.c 1916	/**************************************************************************/
; rs232cmd.c 1917	void GenlockGen( void)
; rs232cmd.c 1918	{
	ALIGN	1
	SYMB	LINE, 1918
	PUBLIC	_GenlockGen
_GenlockGen:
	SYMB	TYPE, 574, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGen", _GenlockGen, #574, 0, 0, 48
	SYMB	ALAB, _GenlockGen, #574
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 1919		char code *str;
; rs232cmd.c 1920	
; rs232cmd.c 1921		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1921
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_278
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_278
; rs232cmd.c 1922		{
; rs232cmd.c 1923			if ( !CmdRequest)
	SYMB	LINE, 1923
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_271
; rs232cmd.c 1924					SCPIError = SyntaxErr;
	SYMB	LINE, 1924
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_278
_271:
; rs232cmd.c 1925			else
; rs232cmd.c 1926			{
; rs232cmd.c 1927				if ( ParCnt)
	SYMB	LINE, 1927
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_272
; rs232cmd.c 1928					SCPIError = ParNotAllowed;
	SYMB	LINE, 1928
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_278
_272:
; rs232cmd.c 1929				else
; rs232cmd.c 1930				{
; rs232cmd.c 1931					str = GenlockSystemPar[GenlockSetup.System].LongName;
	SYMB	LINE, 1931
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _GenlockSystemPar )
	MOV.W	R0,#SOF( _GenlockSystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_279
	ADDS.B	CS,#01H
_279:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 1932	
; rs232cmd.c 1933					while ( *str)
	SYMB	LINE, 1933
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_274
_273:
; rs232cmd.c 1934						rs232putchar( *str++);
	SYMB	LINE, 1934
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 1933
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_273
	SYMB	LINE, 1934
_274:
; rs232cmd.c 1935	
; rs232cmd.c 1936					rs232putchar(',');
	SYMB	LINE, 1936
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 1937	
; rs232cmd.c 1938					PrintSamplesToFLT( GenlockSetup.System, GenlockSetup.Delay);
	SYMB	LINE, 1938
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _GenlockSetup+2 )
	MOV.W	R3,#SOF( _GenlockSetup+2 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	CALL	_PrintSamplesToFLT
; rs232cmd.c 1939	
; rs232cmd.c 1940					rs232putchar ( '\n');
	SYMB	LINE, 1940
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1941				}
; rs232cmd.c 1942			}
; rs232cmd.c 1943		}
	SYMB	LINE, 1943
_278:
; rs232cmd.c 1944	}
	SYMB	LINE, 1944
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 1945	
; rs232cmd.c 1946	/**************************************************************************/
; rs232cmd.c 1947	/* GenlockGenSystem																		 	   		 RS232CMD.C	*/
; rs232cmd.c 1948	/*																																				*/
; rs232cmd.c 1949	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 1950	/* Revised:		000525				     																					*/
; rs232cmd.c 1951	/*																																				*/
; rs232cmd.c 1952	/* Function:	Handle the genlock system command														*/
; rs232cmd.c 1953	/* Remarks:		--																													*/
; rs232cmd.c 1954	/* Returns:		--																													*/
; rs232cmd.c 1955	/* Updates:		--																													*/
; rs232cmd.c 1956	/**************************************************************************/
; rs232cmd.c 1957	void GenlockGenSystem( void)
; rs232cmd.c 1958	{
	ALIGN	1
	SYMB	LINE, 1958
	PUBLIC	_GenlockGenSystem
_GenlockGenSystem:
	SYMB	TYPE, 575, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenSystem", _GenlockGenSystem, #575, 0, 0, 48
	SYMB	ALAB, _GenlockGenSystem, #575
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 1959		int system;
; rs232cmd.c 1960		char code *str;
; rs232cmd.c 1961	
; rs232cmd.c 1962		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1962
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_291
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_291
; rs232cmd.c 1963		{
; rs232cmd.c 1964			if ( CmdRequest)
	SYMB	LINE, 1964
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_283
; rs232cmd.c 1965			{
; rs232cmd.c 1966				if ( ParCnt)
	SYMB	LINE, 1966
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_280
; rs232cmd.c 1967					SCPIError = ParNotAllowed;
	SYMB	LINE, 1967
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_291
_280:
; rs232cmd.c 1968				else
; rs232cmd.c 1969				{
; rs232cmd.c 1970					str = GenlockSystemPar[GenlockSetup.System].LongName;
	SYMB	LINE, 1970
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _GenlockSystemPar )
	MOV.W	R0,#SOF( _GenlockSystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_292
	ADDS.B	CS,#01H
_292:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 1971	
; rs232cmd.c 1972					while ( *str)
	SYMB	LINE, 1972
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_282
_281:
; rs232cmd.c 1973						rs232putchar( *str++);
	SYMB	LINE, 1973
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 1972
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_281
	SYMB	LINE, 1973
_282:
; rs232cmd.c 1974	
; rs232cmd.c 1975					rs232putchar('\n');
	SYMB	LINE, 1975
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1976				}
; rs232cmd.c 1977			}
	SYMB	LINE, 1977
	BR	_291
_283:
; rs232cmd.c 1978			else
; rs232cmd.c 1979			{
; rs232cmd.c 1980				if ( ParCnt != 1)
	SYMB	LINE, 1980
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_284
; rs232cmd.c 1981					SCPIError = SyntaxErr;
	SYMB	LINE, 1981
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_291
_284:
; rs232cmd.c 1982				else
; rs232cmd.c 1983				{
; rs232cmd.c 1984					system = FindParameter( Cmd, GenlockSystemPar);
	SYMB	LINE, 1984
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _GenlockSystemPar )
	MOV.W	R2,#SOF( _GenlockSystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 1985		
; rs232cmd.c 1986					if ( system > -1)
	SYMB	LINE, 1986
	CMP.W	R0,#0FFFFH
	BLE	_285
; rs232cmd.c 1987						SetGenlockSystem( system);
	SYMB	LINE, 1987
	CALL	_SetGenlockSystem
	SYMB	LTIM, "system", 2, 0, 77
	BR	_291
_285:
; rs232cmd.c 1988					else
; rs232cmd.c 1989						SCPIError = DataOutOfRange;
	SYMB	LINE, 1989
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1990				}
; rs232cmd.c 1991			}
; rs232cmd.c 1992		}
	SYMB	LINE, 1992
_291:
; rs232cmd.c 1993	}
	SYMB	LINE, 1993
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 1994	
; rs232cmd.c 1995	/**************************************************************************/
; rs232cmd.c 1996	/* GenlockGenDelay		 								  		 								   RS232CMD.C */
; rs232cmd.c 1997	/*																																				*/
; rs232cmd.c 1998	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 1999	/* Revised:		000525				     																					*/
; rs232cmd.c 2000	/*																																				*/
; rs232cmd.c 2001	/* Function:	Handle the genlock timing command														*/
; rs232cmd.c 2002	/* Remarks:		--																													*/
; rs232cmd.c 2003	/* Returns:		--																													*/
; rs232cmd.c 2004	/* Updates:		--																													*/
; rs232cmd.c 2005	/**************************************************************************/
; rs232cmd.c 2006	void GenlockGenDelay( void)
; rs232cmd.c 2007	{
	ALIGN	1
	SYMB	LINE, 2007
	PUBLIC	_GenlockGenDelay
_GenlockGenDelay:
	SYMB	TYPE, 576, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenDelay", _GenlockGenDelay, #576, 0, 0, 48
	SYMB	ALAB, _GenlockGenDelay, #576
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	IDEN, "field", -12, #16, 130, 5
	SYMB	IDEN, "line", -10, #16, 130, 5
	SYMB	IDEN, "offset", -8, #10, 130, 5
	SYMB	IDEN, "samples", -1, #6, 130, 5
	SYMB	LTIM, "samples", -1, 0, 69
; rs232cmd.c 2008		int field, line;
; rs232cmd.c 2009		float offset;
; rs232cmd.c 2010		long samples;
; rs232cmd.c 2011	
; rs232cmd.c 2012		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2012
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_306
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_306
; rs232cmd.c 2013		{
; rs232cmd.c 2014			if ( CmdRequest)
	SYMB	LINE, 2014
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_297
; rs232cmd.c 2015			{
; rs232cmd.c 2016				if ( ParCnt)
	SYMB	LINE, 2016
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_296
; rs232cmd.c 2017					SCPIError = ParNotAllowed;
	SYMB	LINE, 2017
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_306
_296:
; rs232cmd.c 2018				else
; rs232cmd.c 2019				{
; rs232cmd.c 2020					PrintSamplesToFLT( GenlockSetup.System, GenlockSetup.Delay);
	SYMB	LINE, 2020
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _GenlockSetup+2 )
	MOV.W	R3,#SOF( _GenlockSetup+2 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2021	
; rs232cmd.c 2022					rs232putchar ( '\n');
	SYMB	LINE, 2022
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2023				}
; rs232cmd.c 2024			}
	SYMB	LINE, 2024
	BR	_306
_297:
; rs232cmd.c 2025			else
; rs232cmd.c 2026			{
; rs232cmd.c 2027				if (( ParCnt != 3) || ( sscanf( Cmd, "%d,%d,%f", &field, &line, &offset) != 3))
	SYMB	LINE, 2027
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_298
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 16
	PUSH.W	R4, R5
	SYMB	SOFF, 20
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	MOV.W	R3,#SEG( _295 )
	MOV.W	R2,#SOF( _295 )
	PUSH.W	R2, R3
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 12
	CMP.W	R0,#03H
	BEQ	_299
_298:
; rs232cmd.c 2028					SCPIError = SyntaxErr;
	SYMB	LINE, 2028
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_306
_299:
; rs232cmd.c 2029				else
; rs232cmd.c 2030				{
; rs232cmd.c 2031					if (( samples = FLTToSamples( GenlockSetup.System, field, line, offset)) == -1)
	SYMB	LINE, 2031
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MOV.W	R1,[R7]
	MOV.W	R2,[R7+2]
	MOV.W	R5,[R7+6]
	MOV.W	R4,[R7+4]
	PUSH.W	R4, R5
	SYMB	SOFF, 16
	CALL	_FLTToSamples
	ADDS.W	R7,#04H
	SYMB	SOFF, 12
	MOV.W	R3,R1
	MOV.W	R2,R0
	CMP.W	R3,#0FFFFH
	BNE	_309
	CMP.W	R2,#0FFFFH
_309:
	BNE	_300
; rs232cmd.c 2032						SCPIError = ExecErr;
	SYMB	LINE, 2032
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_306
_300:
; rs232cmd.c 2033					else
; rs232cmd.c 2034						SetGenlockDelay( samples);
	SYMB	LINE, 2034
	CALL	_SetGenlockDelay
; rs232cmd.c 2035				}
; rs232cmd.c 2036			}
; rs232cmd.c 2037		}
	SYMB	LINE, 2037
_306:
; rs232cmd.c 2038	}
	SYMB	LINE, 2038
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2039	
; rs232cmd.c 2040	/**************************************************************************/
; rs232cmd.c 2041	/* GenlockGenCalibrateEnable	 				  		 								   RS232CMD.C */
; rs232cmd.c 2042	/*																																				*/
; rs232cmd.c 2043	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 2044	/* Revised:		000622				     																					*/
; rs232cmd.c 2045	/*																																				*/
; rs232cmd.c 2046	/* Function:	Handle the genlock calibration															*/
; rs232cmd.c 2047	/* Remarks:		--																													*/
; rs232cmd.c 2048	/* Returns:		--																													*/
; rs232cmd.c 2049	/* Updates:		--																													*/
; rs232cmd.c 2050	/**************************************************************************/
; rs232cmd.c 2051	void GenlockGenCalibrateEnable( void)
; rs232cmd.c 2052	{
	ALIGN	1
	SYMB	LINE, 2052
	PUBLIC	_GenlockGenCalibrateEnable
_GenlockGenCalibrateEnable:
	SYMB	TYPE, 577, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenCalibrateEnable", _GenlockGenCalibrateEnable, #577, 0, 0, 48
	SYMB	ALAB, _GenlockGenCalibrateEnable, #577
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; rs232cmd.c 2053		char code *str;
; rs232cmd.c 2054		int tmp;
; rs232cmd.c 2055	
; rs232cmd.c 2056		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2056
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_326
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_326
; rs232cmd.c 2057		{
; rs232cmd.c 2058			if ( CmdRequest)
	SYMB	LINE, 2058
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_316
; rs232cmd.c 2059			{
; rs232cmd.c 2060				if ( ParCnt)
	SYMB	LINE, 2060
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_313
; rs232cmd.c 2061					SCPIError = SyntaxErr;
	SYMB	LINE, 2061
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_326
_313:
; rs232cmd.c 2062				else
; rs232cmd.c 2063				{
; rs232cmd.c 2064					str = OffOnPar[GenlockCalEnable].LongName;
	SYMB	LINE, 2064
	MOV.B	ES,#SEG( _GenlockCalEnable )
	MOV.W	R0,#SOF( _GenlockCalEnable )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _OffOnPar )
	MOV.W	R0,#SOF( _OffOnPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_327
	ADDS.B	CS,#01H
_327:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2065	
; rs232cmd.c 2066					while ( *str)
	SYMB	LINE, 2066
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_315
_314:
; rs232cmd.c 2067						rs232putchar( *str++);
	SYMB	LINE, 2067
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2066
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_314
	SYMB	LINE, 2067
_315:
; rs232cmd.c 2068	
; rs232cmd.c 2069					rs232putchar('\n');
	SYMB	LINE, 2069
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2070				}
; rs232cmd.c 2071			}
	SYMB	LINE, 2071
	BR	_326
_316:
; rs232cmd.c 2072			else
; rs232cmd.c 2073			{
; rs232cmd.c 2074				if ( ParCnt != 1)
	SYMB	LINE, 2074
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_317
; rs232cmd.c 2075					SCPIError = SyntaxErr;
	SYMB	LINE, 2075
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_326
_317:
; rs232cmd.c 2076				else
; rs232cmd.c 2077				{
; rs232cmd.c 2078					tmp = FindParameter( Cmd, OffOnPar);
	SYMB	LINE, 2078
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _OffOnPar )
	MOV.W	R2,#SOF( _OffOnPar )
	CALL	_FindParameter
	SYMB	LTIM, "tmp", 2, 0, 205
; rs232cmd.c 2079		
; rs232cmd.c 2080					if ( tmp > -1)
	SYMB	LINE, 2080
	CMP.W	R0,#0FFFFH
	BLE	_319
; rs232cmd.c 2081					{
; rs232cmd.c 2082						GenlockCalEnable = tmp;
	SYMB	LINE, 2082
	MOV.W	R1,R0
	MOV.B	ES,#SEG( _GenlockCalEnable )
	MOV.W	R2,#SOF( _GenlockCalEnable )
	MOV.B	[R2],R1L
; rs232cmd.c 2083	
; rs232cmd.c 2084						if ( tmp == 0)
	SYMB	LINE, 2084
	OR.W	R0,R0
	BNE	_318
; rs232cmd.c 2085						{
; rs232cmd.c 2086							SetGenlockSystem( GenlockSetup.System);
	SYMB	LINE, 2086
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	SYMB	LTIM, "tmp", 2, 0, 77
	MOVS.B	R0H,#00H
	CALL	_SetGenlockSystem
; rs232cmd.c 2087	
; rs232cmd.c 2088							SetBBSystem( BBOutput1, BBSetup[BBOutput1].System);
	SYMB	LINE, 2088
	MOV.B	ES,#SEG( _BBSetup )
	MOV.W	R0,#SOF( _BBSetup )
	MOV.B	R0L,[R0]
	MOV.B	R1L,R0L
	MOVS.B	R1H,#00H
	MOV.W	R0,#00H
	CALL	_SetBBSystem
; rs232cmd.c 2089	
; rs232cmd.c 2090							BBControlPort = 0;
	SYMB	LINE, 2090
	MOV.B	ES,#SEG( _BBControlPort )
	MOV.W	R0,#SOF( _BBControlPort )
	MOV.W	[R0],#00H
; rs232cmd.c 2091						}
	SYMB	LINE, 2091
	BR	_326
_318:
; rs232cmd.c 2092						else
; rs232cmd.c 2093						{
; rs232cmd.c 2094																								// Force genlock internal mode
; rs232cmd.c 2095							sio0SndCommand( 12, SPG_V24_address, "GM0");
	SYMB	LINE, 2095
	MOV.W	R0,#0CH
	MOV.W	R3,#SEG( _310 )
	MOV.W	R2,#SOF( _310 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	MOV.W	R1,#015H
	CALL	_sio0SndCommand
	ADDS.W	R7,#04H
	SYMB	SOFF, 4
; rs232cmd.c 2096	
; rs232cmd.c 2097																								// Force BB1 PAL mode
; rs232cmd.c 2098							sio0SndCommand( 20, BB_V24_address, "HG%ld;", BBSetup[BBOutput1].Delay);
	SYMB	LINE, 2098
	MOV.W	R1,#034H
	MOV.B	ES,#SEG( _BBSetup+2 )
	MOV.W	R3,#SOF( _BBSetup+2 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _311 )
	MOV.W	R2,#SOF( _311 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	MOV.W	R0,#014H
	CALL	_sio0SndCommand
	ADD.W	R7,#08H
	SYMB	SOFF, 4
; rs232cmd.c 2099	
; rs232cmd.c 2100							BBControlPort = 1;								// Set BB1 to F45MHz
	SYMB	LINE, 2100
	MOV.B	ES,#SEG( _BBControlPort )
	MOV.W	R0,#SOF( _BBControlPort )
	MOV.W	[R0],#01H
; rs232cmd.c 2101	
; rs232cmd.c 2102							GenlockCalValue = Calibration.GenlockCalibration.DACUserValue;
	SYMB	LINE, 2102
	MOV.B	ES,#SEG( _Calibration+120 )
	MOV.W	R0,#SOF( _Calibration+120 )
	MOV.W	R0,[R0]
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R1,#SOF( _GenlockCalValue )
	MOV.W	[R1],R0
; rs232cmd.c 2103	
; rs232cmd.c 2104							sio0SndCommand( 20, SPG_V24_address, "GX%d;", GenlockCalValue);
	SYMB	LINE, 2104
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	R0,[R0]
	PUSH.W	R0
	SYMB	SOFF, 6
	MOV.W	R1,#SEG( _312 )
	MOV.W	R0,#SOF( _312 )
	PUSH.W	R0, R1
	SYMB	SOFF, 10
	MOV.W	R0,#014H
	MOV.W	R1,#015H
	CALL	_sio0SndCommand
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2105						}
; rs232cmd.c 2106					}
	SYMB	LINE, 2106
	BR	_326
_319:
; rs232cmd.c 2107					else
; rs232cmd.c 2108						SCPIError = DataOutOfRange;
	SYMB	LINE, 2108
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2109				}
; rs232cmd.c 2110			}
; rs232cmd.c 2111		}
	SYMB	LINE, 2111
_326:
; rs232cmd.c 2112	}
	SYMB	LINE, 2112
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2113	
; rs232cmd.c 2114	/**************************************************************************/
; rs232cmd.c 2115	/* GenlockGenCalibrateAdjust 	 				  		 								   RS232CMD.C */
; rs232cmd.c 2116	/*																																				*/
; rs232cmd.c 2117	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 2118	/* Revised:		001016				     																					*/
; rs232cmd.c 2119	/*																																				*/
; rs232cmd.c 2120	/* Function:	Handle the genlock calibration															*/
; rs232cmd.c 2121	/* Remarks:		--																													*/
; rs232cmd.c 2122	/* Returns:		--																													*/
; rs232cmd.c 2123	/* Updates:		--																													*/
; rs232cmd.c 2124	/**************************************************************************/
; rs232cmd.c 2125	void GenlockGenCalibrateAdjust( void)
; rs232cmd.c 2126	{
	ALIGN	1
	SYMB	LINE, 2126
	PUBLIC	_GenlockGenCalibrateAdjust
_GenlockGenCalibrateAdjust:
	SYMB	TYPE, 578, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenCalibrateAdjust", _GenlockGenCalibrateAdjust, #578, 0, 0, 48
	SYMB	ALAB, _GenlockGenCalibrateAdjust, #578
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
	SYMB	IDEN, "MinVal", -1, #18, 130, 5
	SYMB	LTIM, "MinVal", -1, 0, 69
	SYMB	IDEN, "MaxVal", -1, #18, 130, 5
	SYMB	LTIM, "MaxVal", -1, 0, 69
; rs232cmd.c 2127		int tmp;
; rs232cmd.c 2128		UI MinVal, MaxVal;
; rs232cmd.c 2129	
; rs232cmd.c 2130		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2130
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_346
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_346
; rs232cmd.c 2131		{
; rs232cmd.c 2132			if ( CmdRequest)
	SYMB	LINE, 2132
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_331
; rs232cmd.c 2133				SCPIError = SyntaxErr;
	SYMB	LINE, 2133
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_346
_331:
; rs232cmd.c 2134			else
; rs232cmd.c 2135			{
; rs232cmd.c 2136				if ( ParCnt == 0)
	SYMB	LINE, 2136
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BNE	_332
; rs232cmd.c 2137					SCPIError = SyntaxErr;
	SYMB	LINE, 2137
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_346
_332:
; rs232cmd.c 2138				else
; rs232cmd.c 2139				{
; rs232cmd.c 2140					MinVal = Calibration.GenlockCalibration.DACFactValue - 150;
	SYMB	LINE, 2140
	MOV.B	ES,#SEG( _Calibration+118 )
	MOV.W	R0,#SOF( _Calibration+118 )
	MOV.W	R0,[R0]
	MOV.W	R5,R0
	MOV.W	R4,R5
	SUB.W	R5,#096H
	SYMB	LTIM, "MinVal", 22, 0, 205
; rs232cmd.c 2141					MaxVal = Calibration.GenlockCalibration.DACFactValue + 150;
	SYMB	LINE, 2141
	ADD.W	R4,#096H
	SYMB	LTIM, "MaxVal", 18, 0, 205
; rs232cmd.c 2142	
; rs232cmd.c 2143					tmp = FindParameter( Cmd, MinMaxPar);
	SYMB	LINE, 2143
	MOV.W	R3,#SEG( _MinMaxPar )
	MOV.W	R2,#SOF( _MinMaxPar )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_FindParameter
	SYMB	LTIM, "tmp", 2, 0, 205
; rs232cmd.c 2144		
; rs232cmd.c 2145					if ( tmp > -1)
	SYMB	LINE, 2145
	CMP.W	R0,#0FFFFH
	BLE	_335
; rs232cmd.c 2146					{
; rs232cmd.c 2147						if ( tmp == 0)
	SYMB	LINE, 2147
	OR.W	R0,R0
	BNE	_333
; rs232cmd.c 2148							GenlockCalValue = MaxVal;
	SYMB	LINE, 2148
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	[R0],R4
	BR	_334
_333:
	SYMB	LTIM, "MinVal", 22, 0, 77
; rs232cmd.c 2149						else
; rs232cmd.c 2150							GenlockCalValue = MinVal;
	SYMB	LINE, 2150
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	[R0],R5
_334:
; rs232cmd.c 2151	
; rs232cmd.c 2152						sio0SndCommand( 20, SPG_V24_address, "GX%u;", GenlockCalValue);	
	SYMB	LINE, 2152
	MOV.W	R0,#014H
	SYMB	LTIM, "tmp", 2, 0, 77
	MOV.W	R1,#015H
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R2,#SOF( _GenlockCalValue )
	MOV.W	R2,[R2]
	PUSH.W	R2
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _330 )
	MOV.W	R2,#SOF( _330 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sio0SndCommand
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2153					}
	SYMB	LINE, 2153
	BR	_346
_335:
	SYMB	LTIM, "MaxVal", 18, 0, 77
; rs232cmd.c 2154					else
; rs232cmd.c 2155					{
; rs232cmd.c 2156						tmp = FindParameter( Cmd, UpDownPar);
	SYMB	LINE, 2156
	MOV.W	R3,#SEG( _UpDownPar )
	MOV.W	R2,#SOF( _UpDownPar )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_FindParameter
	SYMB	LTIM, "tmp", 2, 0, 205
; rs232cmd.c 2157	
; rs232cmd.c 2158						if ( tmp > -1)
	SYMB	LINE, 2158
	CMP.W	R0,#0FFFFH
	BLE	_340
; rs232cmd.c 2159						{
; rs232cmd.c 2160							if ( tmp == 0)
	SYMB	LINE, 2160
	OR.W	R0,R0
	BNE	_336
; rs232cmd.c 2161							{
; rs232cmd.c 2162								if ( GenlockCalValue > MinVal)
	SYMB	LINE, 2162
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	R0,[R0]
	SYMB	LTIM, "tmp", 2, 0, 77
	CMP.W	R0,R5
	BL	_339
; rs232cmd.c 2163									GenlockCalValue--;
	SYMB	LINE, 2163
	ADDS.W	R0,#0FH
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R1,#SOF( _GenlockCalValue )
	MOV.W	[R1],R0
; rs232cmd.c 2164							}
	SYMB	LINE, 2164
	BR	_339
_336:
; rs232cmd.c 2165							else
; rs232cmd.c 2166							{
; rs232cmd.c 2167								if ( GenlockCalValue < MaxVal)
	SYMB	LINE, 2167
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	R0,[R0]
	CMP.W	R0,R4
	BCC	_339
; rs232cmd.c 2168									GenlockCalValue++;
	SYMB	LINE, 2168
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R1,#SOF( _GenlockCalValue )
	MOV.W	[R1],R0
; rs232cmd.c 2169							}
	SYMB	LINE, 2169
_339:
; rs232cmd.c 2170	
; rs232cmd.c 2171							sio0SndCommand( 20, SPG_V24_address, "GX%u;", GenlockCalValue);
	SYMB	LINE, 2171
	MOV.W	R0,#014H
	MOV.W	R1,#015H
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R2,#SOF( _GenlockCalValue )
	MOV.W	R2,[R2]
	PUSH.W	R2
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _330 )
	MOV.W	R2,#SOF( _330 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sio0SndCommand
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2172						}
	SYMB	LINE, 2172
	BR	_346
_340:
; rs232cmd.c 2173						else
; rs232cmd.c 2174							SCPIError = DataOutOfRange;
	SYMB	LINE, 2174
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2175					}	
; rs232cmd.c 2176				}
; rs232cmd.c 2177			}
; rs232cmd.c 2178		}
	SYMB	LINE, 2178
_346:
; rs232cmd.c 2179	}
	SYMB	LINE, 2179
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2180	
; rs232cmd.c 2181	/**************************************************************************/
; rs232cmd.c 2182	/* GenlockGenCalibrateStore 	 				  		 								   RS232CMD.C */
; rs232cmd.c 2183	/*																																				*/
; rs232cmd.c 2184	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 2185	/* Revised:		000622				     																					*/
; rs232cmd.c 2186	/*																																				*/
; rs232cmd.c 2187	/* Function:	Handle the genlock calibration															*/
; rs232cmd.c 2188	/* Remarks:		--																													*/
; rs232cmd.c 2189	/* Returns:		--																													*/
; rs232cmd.c 2190	/* Updates:		--																													*/
; rs232cmd.c 2191	/**************************************************************************/
; rs232cmd.c 2192	void GenlockGenCalibrateStore( void)
; rs232cmd.c 2193	{
	ALIGN	1
	SYMB	LINE, 2193
	PUBLIC	_GenlockGenCalibrateStore
_GenlockGenCalibrateStore:
	SYMB	TYPE, 579, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenCalibrateStore", _GenlockGenCalibrateStore, #579, 0, 0, 0
	SYMB	ALAB, _GenlockGenCalibrateStore, #579
; rs232cmd.c 2194		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2194
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_358
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_358
; rs232cmd.c 2195		{
; rs232cmd.c 2196			if ( CmdRequest)
	SYMB	LINE, 2196
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_351
; rs232cmd.c 2197					SCPIError = SyntaxErr;
	SYMB	LINE, 2197
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_351:
; rs232cmd.c 2198			else
; rs232cmd.c 2199			{
; rs232cmd.c 2200				if ( ParCnt)
	SYMB	LINE, 2200
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_352
; rs232cmd.c 2201					SCPIError = ParNotAllowed;
	SYMB	LINE, 2201
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_352:
; rs232cmd.c 2202				else
; rs232cmd.c 2203				{
; rs232cmd.c 2204					if ( GenlockCalEnable)
	SYMB	LINE, 2204
	MOV.B	ES,#SEG( _GenlockCalEnable )
	MOV.W	R0,#SOF( _GenlockCalEnable )
	MOV.B	R0L,[R0]
	BEQ	_353
; rs232cmd.c 2205					{
; rs232cmd.c 2206						Calibration.GenlockCalibration.DACUserValue = GenlockCalValue;
	SYMB	LINE, 2206
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	R0,[R0]
	MOV.B	ES,#SEG( _Calibration+120 )
	MOV.W	R1,#SOF( _Calibration+120 )
	MOV.W	[R1],R0
; rs232cmd.c 2207								
; rs232cmd.c 2208						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 2208
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 2209					}
	SYMB	LINE, 2209
	RET
_353:
; rs232cmd.c 2210					else
; rs232cmd.c 2211						SCPIError = ExecErr;					
	SYMB	LINE, 2211
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 2212				}
; rs232cmd.c 2213			}
; rs232cmd.c 2214		}
	SYMB	LINE, 2214
_358:
; rs232cmd.c 2215	}
	SYMB	LINE, 2215
	RET
	SYMB	EFUN
; rs232cmd.c 2216	
; rs232cmd.c 2217	/**************************************************************************/
; rs232cmd.c 2218	/* BBSuffix																 	  						 	   RS232CMD.C	*/
; rs232cmd.c 2219	/*																																				*/
; rs232cmd.c 2220	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 2221	/* Revised:		000604				     																					*/
; rs232cmd.c 2222	/*																																				*/
; rs232cmd.c 2223	/* Function:	Get suffix of the Black Burst generator											*/
; rs232cmd.c 2224	/* Remarks:		--																													*/
; rs232cmd.c 2225	/* Returns:		--																													*/
; rs232cmd.c 2226	/* Updates:		Suffix																									 		*/
; rs232cmd.c 2227	/**************************************************************************/
; rs232cmd.c 2228	void BBGenSuffix( void)
; rs232cmd.c 2229	{
	ALIGN	1
	SYMB	LINE, 2229
	PUBLIC	_BBGenSuffix
_BBGenSuffix:
	SYMB	TYPE, 580, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGenSuffix", _BBGenSuffix, #580, 0, 0, 0
	SYMB	ALAB, _BBGenSuffix, #580
; rs232cmd.c 2230		if ( NumSuffix > 3)
	SYMB	LINE, 2230
	MOV.B	ES,#SEG( _NumSuffix )
	MOV.W	R0,#SOF( _NumSuffix )
	MOV.W	R0,[R0]
	CMP.W	R0,#03H
	BL	_359
; rs232cmd.c 2231			SCPIError = HdrSuffixOutOfRange;
	SYMB	LINE, 2231
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#0CH
	RET
_359:
; rs232cmd.c 2232		else
; rs232cmd.c 2233			Suffix[0] = NumSuffix-1;
	SYMB	LINE, 2233
	ADDS.W	R0,#0FH
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R1,#SOF( _Suffix )
	MOV.W	[R1],R0
_360:
; rs232cmd.c 2234	
; rs232cmd.c 2235	}
	SYMB	LINE, 2235
	RET
	SYMB	EFUN
; rs232cmd.c 2236	
; rs232cmd.c 2237	/**************************************************************************/
; rs232cmd.c 2238	/* BBGen																								 	     RS232CMD.C	*/
; rs232cmd.c 2239	/*																																				*/
; rs232cmd.c 2240	/* Author:		Kim Engedahl, DEV, 000524	    															*/
; rs232cmd.c 2241	/* Revised:		000604				     																					*/
; rs232cmd.c 2242	/*																																				*/
; rs232cmd.c 2243	/* Function:	Handle the Black Burst command.															*/
; rs232cmd.c 2244	/* Remarks:		Request only																								*/
; rs232cmd.c 2245	/* Returns:		--																													*/
; rs232cmd.c 2246	/* Updates:		--																												 	*/
; rs232cmd.c 2247	/**************************************************************************/
; rs232cmd.c 2248	void BBGen( void)
; rs232cmd.c 2249	{
	ALIGN	1
	SYMB	LINE, 2249
	PUBLIC	_BBGen
_BBGen:
	SYMB	TYPE, 581, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGen", _BBGen, #581, 0, 0, 48
	SYMB	ALAB, _BBGen, #581
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2250		char code *str;
; rs232cmd.c 2251	
; rs232cmd.c 2252		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2252
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_370
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_370
; rs232cmd.c 2253		{
; rs232cmd.c 2254			if ( !CmdRequest)
	SYMB	LINE, 2254
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_363
; rs232cmd.c 2255					SCPIError = SyntaxErr;
	SYMB	LINE, 2255
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_370
_363:
; rs232cmd.c 2256			else
; rs232cmd.c 2257			{
; rs232cmd.c 2258				if ( ParCnt)
	SYMB	LINE, 2258
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_364
; rs232cmd.c 2259					SCPIError = ParNotAllowed;
	SYMB	LINE, 2259
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_370
_364:
; rs232cmd.c 2260				else
; rs232cmd.c 2261				{
; rs232cmd.c 2262					str = SystemPar[BBSetup[Suffix[0]].System].LongName;
	SYMB	LINE, 2262
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	ASL.W	R0,#03H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_371
	ADDS.B	CS,#01H
_371:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2263	
; rs232cmd.c 2264					while ( *str)
	SYMB	LINE, 2264
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_366
_365:
; rs232cmd.c 2265						rs232putchar( *str++);
	SYMB	LINE, 2265
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2264
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_365
	SYMB	LINE, 2265
_366:
; rs232cmd.c 2266	
; rs232cmd.c 2267					rs232putchar( ',');
	SYMB	LINE, 2267
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2268	
; rs232cmd.c 2269					PrintSamplesToFLT( BBSetup[Suffix[0]].System, BBSetup[Suffix[0]].Delay);
	SYMB	LINE, 2269
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R2,#SOF( _Suffix )
	MOV.W	R2,[R2]
	ASL.W	R2,#03H
	MOV.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup+2 )
	MOV.W	R3,[R2+SOF( _BBSetup+4 )]
	MOV.W	R2,[R2+SOF( _BBSetup+2 )]
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2270	
; rs232cmd.c 2271					rs232printf( 6, ",%d\n", BBSetup[Suffix[0]].ScHPhase);
	SYMB	LINE, 2271
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R1,#SOF( _Suffix )
	MOV.W	R1,[R1]
	ASL.W	R1,#03H
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup+6 )
	MOV.W	R1,[R2+SOF( _BBSetup+6 )]
	PUSH.W	R1
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _362 )
	MOV.W	R2,#SOF( _362 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2272				}
; rs232cmd.c 2273			}
; rs232cmd.c 2274		}
	SYMB	LINE, 2274
_370:
; rs232cmd.c 2275	}
	SYMB	LINE, 2275
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2276	
; rs232cmd.c 2277	/**************************************************************************/
; rs232cmd.c 2278	/* BBGenSystem		 												 	    							 RS232CMD.C	*/
; rs232cmd.c 2279	/*																																				*/
; rs232cmd.c 2280	/* Author:		Kim Engedahl, DEV, 000524	    															*/
; rs232cmd.c 2281	/* Revised:		000604				     																					*/
; rs232cmd.c 2282	/*																																				*/
; rs232cmd.c 2283	/* Function:	Handle the Black Burst system-command.											*/
; rs232cmd.c 2284	/* Remarks:		--																													*/
; rs232cmd.c 2285	/* Returns:		--																													*/
; rs232cmd.c 2286	/* Updates:		--																													*/
; rs232cmd.c 2287	/**************************************************************************/
; rs232cmd.c 2288	void BBGenSystem( void)
; rs232cmd.c 2289	{
	ALIGN	1
	SYMB	LINE, 2289
	PUBLIC	_BBGenSystem
_BBGenSystem:
	SYMB	TYPE, 582, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGenSystem", _BBGenSystem, #582, 0, 0, 48
	SYMB	ALAB, _BBGenSystem, #582
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2290		int system;
; rs232cmd.c 2291		char code *str;
; rs232cmd.c 2292	
; rs232cmd.c 2293		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2293
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_383
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_383
; rs232cmd.c 2294		{
; rs232cmd.c 2295			if ( CmdRequest)
	SYMB	LINE, 2295
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_375
; rs232cmd.c 2296			{
; rs232cmd.c 2297				if ( ParCnt)
	SYMB	LINE, 2297
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_372
; rs232cmd.c 2298					SCPIError = ParNotAllowed;
	SYMB	LINE, 2298
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_383
_372:
; rs232cmd.c 2299				else
; rs232cmd.c 2300				{
; rs232cmd.c 2301					str = SystemPar[BBSetup[Suffix[0]].System].LongName;
	SYMB	LINE, 2301
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	ASL.W	R0,#03H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_384
	ADDS.B	CS,#01H
_384:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2302	
; rs232cmd.c 2303					while ( *str)
	SYMB	LINE, 2303
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_374
_373:
; rs232cmd.c 2304						rs232putchar( *str++);
	SYMB	LINE, 2304
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2303
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_373
	SYMB	LINE, 2304
_374:
; rs232cmd.c 2305	
; rs232cmd.c 2306					rs232putchar('\n');
	SYMB	LINE, 2306
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2307				}
; rs232cmd.c 2308			}
	SYMB	LINE, 2308
	BR	_383
_375:
; rs232cmd.c 2309			else
; rs232cmd.c 2310			{
; rs232cmd.c 2311				if ( ParCnt != 1)
	SYMB	LINE, 2311
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_376
; rs232cmd.c 2312					SCPIError = SyntaxErr;
	SYMB	LINE, 2312
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_383
_376:
; rs232cmd.c 2313				else
; rs232cmd.c 2314				{
; rs232cmd.c 2315					system = FindParameter( Cmd, SystemPar);
	SYMB	LINE, 2315
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _SystemPar )
	MOV.W	R2,#SOF( _SystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 2316	
; rs232cmd.c 2317					if ( system > -1)
	SYMB	LINE, 2317
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "system", 2, 0, 77
	SYMB	LTIM, "system", 6, 0, 205
	BLE	_377
; rs232cmd.c 2318						SetBBSystem( Suffix[0], system);
	SYMB	LINE, 2318
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	CALL	_SetBBSystem
	SYMB	LTIM, "system", 6, 0, 77
	BR	_383
_377:
; rs232cmd.c 2319					else
; rs232cmd.c 2320						SCPIError = DataOutOfRange;
	SYMB	LINE, 2320
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2321				}
; rs232cmd.c 2322			}
; rs232cmd.c 2323		}
	SYMB	LINE, 2323
_383:
; rs232cmd.c 2324	}
	SYMB	LINE, 2324
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2325	
; rs232cmd.c 2326	/**************************************************************************/
; rs232cmd.c 2327	/* BBGenDelay	 														 	    							 RS232CMD.C	*/
; rs232cmd.c 2328	/*																																				*/
; rs232cmd.c 2329	/* Author:		Kim Engedahl, DEV, 000524	    															*/
; rs232cmd.c 2330	/* Revised:		000604				     																					*/				
; rs232cmd.c 2331	/*																																				*/
; rs232cmd.c 2332	/* Function:	Handle the Black Burst timing command.											*/
; rs232cmd.c 2333	/* Remarks:		--																													*/
; rs232cmd.c 2334	/* Returns:		--																													*/
; rs232cmd.c 2335	/* Updates:		--																													*/
; rs232cmd.c 2336	/**************************************************************************/
; rs232cmd.c 2337	void BBGenDelay( void)
; rs232cmd.c 2338	{
	ALIGN	1
	SYMB	LINE, 2338
	PUBLIC	_BBGenDelay
_BBGenDelay:
	SYMB	TYPE, 583, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGenDelay", _BBGenDelay, #583, 0, 0, 48
	SYMB	ALAB, _BBGenDelay, #583
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	IDEN, "field", -12, #16, 130, 5
	SYMB	IDEN, "line", -10, #16, 130, 5
	SYMB	IDEN, "offset", -8, #10, 130, 5
	SYMB	IDEN, "samples", -1, #6, 130, 5
	SYMB	LTIM, "samples", -1, 0, 69
; rs232cmd.c 2339		int field, line;
; rs232cmd.c 2340		float offset;
; rs232cmd.c 2341		long samples;
; rs232cmd.c 2342	
; rs232cmd.c 2343		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2343
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_397
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_397
; rs232cmd.c 2344		{
; rs232cmd.c 2345			if ( CmdRequest)
	SYMB	LINE, 2345
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_388
; rs232cmd.c 2346			{
; rs232cmd.c 2347				if ( ParCnt)
	SYMB	LINE, 2347
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_387
; rs232cmd.c 2348					SCPIError = ParNotAllowed;
	SYMB	LINE, 2348
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_397
_387:
; rs232cmd.c 2349				else
; rs232cmd.c 2350				{
; rs232cmd.c 2351					PrintSamplesToFLT( BBSetup[Suffix[0]].System, BBSetup[Suffix[0]].Delay);
	SYMB	LINE, 2351
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MOV.W	R1,R0
	ASL.W	R1,#03H
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R2+SOF( _BBSetup )]
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup+2 )
	MOV.W	R3,[R2+SOF( _BBSetup+4 )]
	MOV.W	R2,[R2+SOF( _BBSetup+2 )]
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2352	
; rs232cmd.c 2353					rs232putchar ( '\n');
	SYMB	LINE, 2353
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2354				}
; rs232cmd.c 2355			}
	SYMB	LINE, 2355
	BR	_397
_388:
; rs232cmd.c 2356			else
; rs232cmd.c 2357			{
; rs232cmd.c 2358				if (( ParCnt != 3) || ( sscanf( Cmd, "%d,%d,%f", &field, &line, &offset) != 3))
	SYMB	LINE, 2358
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_389
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 16
	PUSH.W	R4, R5
	SYMB	SOFF, 20
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	MOV.W	R3,#SEG( _295 )
	MOV.W	R2,#SOF( _295 )
	PUSH.W	R2, R3
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 12
	CMP.W	R0,#03H
	BEQ	_390
_389:
; rs232cmd.c 2359					SCPIError = SyntaxErr;
	SYMB	LINE, 2359
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_397
_390:
; rs232cmd.c 2360				else
; rs232cmd.c 2361				{
; rs232cmd.c 2362					if (( samples = FLTToSamples( BBSetup[Suffix[0]].System, field, line, offset)) == -1)
	SYMB	LINE, 2362
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	ASL.W	R0,#03H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MOV.W	R1,[R7]
	MOV.W	R2,[R7+2]
	MOV.W	R5,[R7+6]
	MOV.W	R4,[R7+4]
	PUSH.W	R4, R5
	SYMB	SOFF, 16
	CALL	_FLTToSamples
	ADDS.W	R7,#04H
	SYMB	SOFF, 12
	MOV.W	R3,R1
	MOV.W	R2,R0
	MOV.W	R1,R3
	MOV.W	R0,R2
	CMP.W	R1,#0FFFFH
	BNE	_400
	CMP.W	R0,#0FFFFH
_400:
	BNE	_391
; rs232cmd.c 2363						SCPIError = ExecErr;
	SYMB	LINE, 2363
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_397
_391:
; rs232cmd.c 2364					else
; rs232cmd.c 2365						SetBBDelay( Suffix[0], (UL) samples);
	SYMB	LINE, 2365
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	CALL	_SetBBDelay
; rs232cmd.c 2366				}
; rs232cmd.c 2367			}
; rs232cmd.c 2368		}
	SYMB	LINE, 2368
_397:
; rs232cmd.c 2369	}
	SYMB	LINE, 2369
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2370	
; rs232cmd.c 2371	/**************************************************************************/
; rs232cmd.c 2372	/* BBGenScHPhase													 	   								 RS232CMD.C	*/
; rs232cmd.c 2373	/*																																				*/
; rs232cmd.c 2374	/* Author:		Kim Engedahl, DEV, 000524	    															*/			
; rs232cmd.c 2375	/* Revised:		000604				     																					*/
; rs232cmd.c 2376	/*																																				*/
; rs232cmd.c 2377	/* Function:	Handle the Black Burst ScH-Phase command.										*/
; rs232cmd.c 2378	/* Remarks:		--																													*/
; rs232cmd.c 2379	/* Returns:		--																													*/
; rs232cmd.c 2380	/* Updates:		--																													*/
; rs232cmd.c 2381	/**************************************************************************/
; rs232cmd.c 2382	void BBGenScHPhase( void)
; rs232cmd.c 2383	{
	ALIGN	1
	SYMB	LINE, 2383
	PUBLIC	_BBGenScHPhase
_BBGenScHPhase:
	SYMB	TYPE, 584, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGenScHPhase", _BBGenScHPhase, #584, 0, 0, 0
	SYMB	ALAB, _BBGenScHPhase, #584
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "schphase", -2, #16, 130, 5
; rs232cmd.c 2384		int schphase;
; rs232cmd.c 2385	
; rs232cmd.c 2386		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2386
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_412
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_412
; rs232cmd.c 2387		{
; rs232cmd.c 2388			if ( CmdRequest)
	SYMB	LINE, 2388
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_402
; rs232cmd.c 2389			{
; rs232cmd.c 2390				if ( ParCnt)
	SYMB	LINE, 2390
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_401
; rs232cmd.c 2391					SCPIError = ParNotAllowed;
	SYMB	LINE, 2391
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_412
_401:
; rs232cmd.c 2392				else
; rs232cmd.c 2393					rs232printf( 6, "%d\n", BBSetup[Suffix[0]].ScHPhase);
	SYMB	LINE, 2393
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R1,#SOF( _Suffix )
	MOV.W	R1,[R1]
	ASL.W	R1,#03H
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup+6 )
	MOV.W	R1,[R2+SOF( _BBSetup+6 )]
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 2394			}
	SYMB	LINE, 2394
	BR	_412
_402:
; rs232cmd.c 2395			else
; rs232cmd.c 2396			{
; rs232cmd.c 2397				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &schphase) != 1))
	SYMB	LINE, 2397
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_403
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_404
_403:
; rs232cmd.c 2398					SCPIError = SyntaxErr;
	SYMB	LINE, 2398
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_412
_404:
; rs232cmd.c 2399				else
; rs232cmd.c 2400				{
; rs232cmd.c 2401					if (( schphase < ScHPhaseLow) || ( schphase > ScHPhaseHigh))
	SYMB	LINE, 2401
	CMP.W	[R7],#0FF4DH
	BLT	_405
	CMP.W	[R7],#0B4H
	BLE	_406
_405:
; rs232cmd.c 2402						SCPIError = DataOutOfRange;
	SYMB	LINE, 2402
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_412
_406:
; rs232cmd.c 2403					else
; rs232cmd.c 2404						SetBBScHPhase( Suffix[0], schphase);
	SYMB	LINE, 2404
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MOV.W	R1,[R7]
	CALL	_SetBBScHPhase
; rs232cmd.c 2405				}
; rs232cmd.c 2406			}
; rs232cmd.c 2407		}
	SYMB	LINE, 2407
_412:
; rs232cmd.c 2408	}
	SYMB	LINE, 2408
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2409	
; rs232cmd.c 2410	/**************************************************************************/
; rs232cmd.c 2411	/* TSGen																									 	   RS232CMD.C */
; rs232cmd.c 2412	/*																																				*/
; rs232cmd.c 2413	/* Author:		Kim Engedahl, DEV, 000524	    															*/
; rs232cmd.c 2414	/* Revised:		000727				     																					*/
; rs232cmd.c 2415	/*																																				*/
; rs232cmd.c 2416	/* Function:	Return the setting of a Analog-TPG.													*/
; rs232cmd.c 2417	/* Remarks:		Request only.																								*/
; rs232cmd.c 2418	/* Returns:		--																													*/
; rs232cmd.c 2419	/* Updates:		--																													*/
; rs232cmd.c 2420	/***************************************************************************/
; rs232cmd.c 2421	void TSGen( void)
; rs232cmd.c 2422	{
	ALIGN	1
	SYMB	LINE, 2422
	PUBLIC	_TSGen
_TSGen:
	SYMB	TYPE, 585, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGen", _TSGen, #585, 0, 0, 48
	SYMB	ALAB, _TSGen, #585
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2423		char code *str;
; rs232cmd.c 2424	
; rs232cmd.c 2425		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2425
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_429
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_429
; rs232cmd.c 2426		{
; rs232cmd.c 2427			if ( !CmdRequest)
	SYMB	LINE, 2427
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_418
; rs232cmd.c 2428					SCPIError = SyntaxErr;
	SYMB	LINE, 2428
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_429
_418:
; rs232cmd.c 2429			else
; rs232cmd.c 2430			{
; rs232cmd.c 2431				if ( ParCnt)
	SYMB	LINE, 2431
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_419
; rs232cmd.c 2432					SCPIError = ParNotAllowed;
	SYMB	LINE, 2432
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_429
_419:
; rs232cmd.c 2433				else
; rs232cmd.c 2434				{
; rs232cmd.c 2435					str = CBPatternPar[CBSetup.Pattern].LongName;
	SYMB	LINE, 2435
	MOV.B	ES,#SEG( _CBSetup+2 )
	MOV.W	R0,#SOF( _CBSetup+2 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _CBPatternPar )
	MOV.W	R0,#SOF( _CBPatternPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_430
	ADDS.B	CS,#01H
_430:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2436	
; rs232cmd.c 2437					while ( *str)
	SYMB	LINE, 2437
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_421
_420:
; rs232cmd.c 2438						rs232putchar( *str++);
	SYMB	LINE, 2438
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2437
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_420
	SYMB	LINE, 2438
_421:
; rs232cmd.c 2439	
; rs232cmd.c 2440					rs232putchar( ',');
	SYMB	LINE, 2440
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2441	
; rs232cmd.c 2442	
; rs232cmd.c 2443					str = SystemPar[CBSetup.System].LongName;
	SYMB	LINE, 2443
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_431
	ADDS.B	CS,#01H
_431:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2444	
; rs232cmd.c 2445					while ( *str)
	SYMB	LINE, 2445
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_423
_422:
; rs232cmd.c 2446						rs232putchar( *str++);
	SYMB	LINE, 2446
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2445
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_422
	SYMB	LINE, 2446
_423:
; rs232cmd.c 2447	
; rs232cmd.c 2448					rs232putchar( ',');
	SYMB	LINE, 2448
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2449	
; rs232cmd.c 2450	
; rs232cmd.c 2451					PrintSamplesToFLT( CBSetup.System, CBSetup.Delay*256);
	SYMB	LINE, 2451
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _CBSetup+4 )
	MOV.W	R3,#SOF( _CBSetup+4 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	ASL.D	R2,#08H
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2452	
; rs232cmd.c 2453	
; rs232cmd.c 2454					rs232printf( 6, ",%d,", CBSetup.ScHPhase);
	SYMB	LINE, 2454
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R1,#SOF( _CBSetup+8 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _417 )
	MOV.W	R2,#SOF( _417 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2455	
; rs232cmd.c 2456	
; rs232cmd.c 2457					str = EmbAudioSignalPar[CBSetup.EmbAudioSignal].LongName;
	SYMB	LINE, 2457
	MOV.B	ES,#SEG( _CBSetup+10 )
	MOV.W	R0,#SOF( _CBSetup+10 )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _EmbAudioSignalPar )
	MOV.W	R0,#SOF( _EmbAudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_432
	ADDS.B	CS,#01H
_432:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2458	
; rs232cmd.c 2459					while ( *str)
	SYMB	LINE, 2459
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_425
_424:
; rs232cmd.c 2460						rs232putchar( *str++);
	SYMB	LINE, 2460
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2459
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_424
	SYMB	LINE, 2460
_425:
; rs232cmd.c 2461	
; rs232cmd.c 2462					rs232putchar( '\n');
	SYMB	LINE, 2462
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2463				}
; rs232cmd.c 2464			}
; rs232cmd.c 2465		}
	SYMB	LINE, 2465
_429:
; rs232cmd.c 2466	}
	SYMB	LINE, 2466
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2467	
; rs232cmd.c 2468	/**************************************************************************/
; rs232cmd.c 2469	/* TSGenPattern																					 	     RS232CMD.C	*/
; rs232cmd.c 2470	/*																																				*/
; rs232cmd.c 2471	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 2472	/* Revised:		000727				     																					*/
; rs232cmd.c 2473	/*																																				*/
; rs232cmd.c 2474	/* Function:	Handle the Colorbar pattern command.												*/
; rs232cmd.c 2475	/* Remarks:		--																													*/
; rs232cmd.c 2476	/* Returns:		--																													*/
; rs232cmd.c 2477	/* Updates:		--																													*/
; rs232cmd.c 2478	/**************************************************************************/
; rs232cmd.c 2479	void TSGenPattern( void)
; rs232cmd.c 2480	{
	ALIGN	1
	SYMB	LINE, 2480
	PUBLIC	_TSGenPattern
_TSGenPattern:
	SYMB	TYPE, 586, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGenPattern", _TSGenPattern, #586, 0, 0, 48
	SYMB	ALAB, _TSGenPattern, #586
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "pattern", -1, #16, 130, 5
	SYMB	LTIM, "pattern", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2481		int pattern;
; rs232cmd.c 2482		char code *str;
; rs232cmd.c 2483	
; rs232cmd.c 2484		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2484
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_445
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_445
; rs232cmd.c 2485		{
; rs232cmd.c 2486			if ( CmdRequest)
	SYMB	LINE, 2486
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_436
; rs232cmd.c 2487			{
; rs232cmd.c 2488				if ( ParCnt)
	SYMB	LINE, 2488
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_433
; rs232cmd.c 2489					SCPIError = ParNotAllowed;
	SYMB	LINE, 2489
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_445
_433:
; rs232cmd.c 2490				else
; rs232cmd.c 2491				{
; rs232cmd.c 2492					str = CBPatternPar[CBSetup.Pattern].LongName;
	SYMB	LINE, 2492
	MOV.B	ES,#SEG( _CBSetup+2 )
	MOV.W	R0,#SOF( _CBSetup+2 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _CBPatternPar )
	MOV.W	R0,#SOF( _CBPatternPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_446
	ADDS.B	CS,#01H
_446:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2493	
; rs232cmd.c 2494					while ( *str)
	SYMB	LINE, 2494
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_435
_434:
; rs232cmd.c 2495						rs232putchar( *str++);
	SYMB	LINE, 2495
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2494
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_434
	SYMB	LINE, 2495
_435:
; rs232cmd.c 2496	
; rs232cmd.c 2497					rs232putchar('\n');
	SYMB	LINE, 2497
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2498				}
; rs232cmd.c 2499			}
	SYMB	LINE, 2499
	BR	_445
_436:
; rs232cmd.c 2500			else
; rs232cmd.c 2501			{
; rs232cmd.c 2502				pattern = FindParameter( Cmd, CBPatternPar);
	SYMB	LINE, 2502
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _CBPatternPar )
	MOV.W	R2,#SOF( _CBPatternPar )
	CALL	_FindParameter
	SYMB	LTIM, "pattern", 2, 0, 205
; rs232cmd.c 2503	
; rs232cmd.c 2504				if ( ParCnt != 1)
	SYMB	LINE, 2504
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	R1L,[R1]
	CMP.B	R1L,#01H
	BEQ	_437
; rs232cmd.c 2505					SCPIError = SyntaxErr;
	SYMB	LINE, 2505
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_445
_437:
	SYMB	LTIM, "pattern", 2, 0, 77
; rs232cmd.c 2506				else
; rs232cmd.c 2507				{
; rs232cmd.c 2508					if ( pattern > -1)
	SYMB	LINE, 2508
	CMP.W	R0,#0FFFFH
	BLE	_438
; rs232cmd.c 2509					{
; rs232cmd.c 2510						if ( SetCBPattern( pattern) != OK)
	SYMB	LINE, 2510
	CALL	_SetCBPattern
	CMP.W	R0,#0FFFFH
	BEQ	_445
; rs232cmd.c 2511							SCPIError = ExecErr;
	SYMB	LINE, 2511
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 2512					}
	SYMB	LINE, 2512
	BR	_445
_438:
; rs232cmd.c 2513					else
; rs232cmd.c 2514						SCPIError = DataOutOfRange;
	SYMB	LINE, 2514
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2515				}
; rs232cmd.c 2516			}
; rs232cmd.c 2517		}
	SYMB	LINE, 2517
_445:
; rs232cmd.c 2518	}
	SYMB	LINE, 2518
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2519	
; rs232cmd.c 2520	/**************************************************************************/
; rs232cmd.c 2521	/* TSGenSystem														 	    							 RS232CMD.C	*/
; rs232cmd.c 2522	/*																																				*/
; rs232cmd.c 2523	/* Author:		Kim Engedahl, DEV, 98021	    															*/
; rs232cmd.c 2524	/* Revised:		000727				     																					*/
; rs232cmd.c 2525	/*																																				*/
; rs232cmd.c 2526	/* Function:	Handle the Colobar system-command.													*/
; rs232cmd.c 2527	/* Remarks:		This command will possibly change pattern and/or delay if	 	*/
; rs232cmd.c 2528	/*            these are not valid in the selected system									*/
; rs232cmd.c 2529	/* Returns:		--																													*/
; rs232cmd.c 2530	/* Updates:	   --																													*/
; rs232cmd.c 2531	/**************************************************************************/
; rs232cmd.c 2532	void TSGenSystem( void)
; rs232cmd.c 2533	{
	ALIGN	1
	SYMB	LINE, 2533
	PUBLIC	_TSGenSystem
_TSGenSystem:
	SYMB	TYPE, 587, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGenSystem", _TSGenSystem, #587, 0, 0, 48
	SYMB	ALAB, _TSGenSystem, #587
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2534		int system;
; rs232cmd.c 2535		char code *str;
; rs232cmd.c 2536	
; rs232cmd.c 2537		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2537
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_463
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_463
; rs232cmd.c 2538		{
; rs232cmd.c 2539			if ( CmdRequest)
	SYMB	LINE, 2539
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_453
; rs232cmd.c 2540			{
; rs232cmd.c 2541				if ( ParCnt)
	SYMB	LINE, 2541
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_450
; rs232cmd.c 2542					SCPIError = ParNotAllowed;
	SYMB	LINE, 2542
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_463
_450:
; rs232cmd.c 2543				else
; rs232cmd.c 2544				{
; rs232cmd.c 2545					str = SystemPar[CBSetup.System].LongName;
	SYMB	LINE, 2545
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_464
	ADDS.B	CS,#01H
_464:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2546	
; rs232cmd.c 2547					while ( *str)										 
	SYMB	LINE, 2547
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_452
_451:
; rs232cmd.c 2548						rs232putchar( *str++);
	SYMB	LINE, 2548
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2547
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_451
	SYMB	LINE, 2548
_452:
; rs232cmd.c 2549	
; rs232cmd.c 2550					rs232putchar('\n');
	SYMB	LINE, 2550
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2551				}
; rs232cmd.c 2552			}
	SYMB	LINE, 2552
	BR	_463
_453:
; rs232cmd.c 2553			else
; rs232cmd.c 2554			{
; rs232cmd.c 2555				if ( ParCnt != 1)
	SYMB	LINE, 2555
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_454
; rs232cmd.c 2556					SCPIError = SyntaxErr;
	SYMB	LINE, 2556
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_463
_454:
; rs232cmd.c 2557				else
; rs232cmd.c 2558				{
; rs232cmd.c 2559					system = FindParameter( Cmd, SystemPar);
	SYMB	LINE, 2559
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _SystemPar )
	MOV.W	R2,#SOF( _SystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 2560	
; rs232cmd.c 2561					if ( system == PAL_PALID)						// If line7, (PAL w/ID) ever should
	SYMB	LINE, 2561
	CMP.W	R0,#01H
	BNE	_455
; rs232cmd.c 2562						SCPIError = DataOutOfRange;				//  be supported remove this exception
	SYMB	LINE, 2562
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_463
_455:
	SYMB	LTIM, "system", 2, 0, 77
; rs232cmd.c 2563					else						
; rs232cmd.c 2564					{
; rs232cmd.c 2565						if ( system > -1)
	SYMB	LINE, 2565
	CMP.W	R0,#0FFFFH
	BLE	_456
; rs232cmd.c 2566							SetCBSystem( system);
	SYMB	LINE, 2566
	CALL	_SetCBSystem
	BR	_463
_456:
; rs232cmd.c 2567						else
; rs232cmd.c 2568							SCPIError = DataOutOfRange;
	SYMB	LINE, 2568
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2569					}
; rs232cmd.c 2570				}
; rs232cmd.c 2571			}
; rs232cmd.c 2572		}
	SYMB	LINE, 2572
_463:
; rs232cmd.c 2573	}
	SYMB	LINE, 2573
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2574	
; rs232cmd.c 2575	/**************************************************************************/
; rs232cmd.c 2576	/* TSGenDelay															 	    							 RS232CMD.C */
; rs232cmd.c 2577	/*																																				*/
; rs232cmd.c 2578	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 2579	/* Revised:		000604				     																					*/
; rs232cmd.c 2580	/*																																				*/
; rs232cmd.c 2581	/* Function:	Handle the Colorbar delay command.													*/
; rs232cmd.c 2582	/* Remarks:		Delay should be multiplied/divided with/by 256 to conform		*/
; rs232cmd.c 2583	/*						with the black burst timing as the functions								*/
; rs232cmd.c 2584	/*						PrintSamplesToFLT/FLTToSamples are common to both the CBar	*/
; rs232cmd.c 2585	/*						and BB timing. The CBar timing equals 1728/1716 samples			*/
; rs232cmd.c 2586	/*						(app. 37ns/sample), while the BB timing equals 1728*256/		*/
; rs232cmd.c 2587	/*						1716*256 samples (app. 0.14 ns/sample).											*/
; rs232cmd.c 2588	/* Returns:		--																													*/
; rs232cmd.c 2589	/* Updates:		--																													*/
; rs232cmd.c 2590	/**************************************************************************/
; rs232cmd.c 2591	void TSGenDelay( void)
; rs232cmd.c 2592	{
	ALIGN	1
	SYMB	LINE, 2592
	PUBLIC	_TSGenDelay
_TSGenDelay:
	SYMB	TYPE, 588, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGenDelay", _TSGenDelay, #588, 0, 0, 48
	SYMB	ALAB, _TSGenDelay, #588
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	IDEN, "field", -12, #16, 130, 5
	SYMB	IDEN, "line", -10, #16, 130, 5
	SYMB	IDEN, "offset", -8, #10, 130, 5
	SYMB	IDEN, "samples", -1, #6, 130, 5
	SYMB	LTIM, "samples", -1, 0, 69
; rs232cmd.c 2593		int field, line;
; rs232cmd.c 2594		float offset;
; rs232cmd.c 2595		long samples;
; rs232cmd.c 2596	
; rs232cmd.c 2597		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2597
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_478
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_478
; rs232cmd.c 2598		{
; rs232cmd.c 2599			if ( CmdRequest)
	SYMB	LINE, 2599
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_469
; rs232cmd.c 2600			{
; rs232cmd.c 2601				if ( ParCnt)
	SYMB	LINE, 2601
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_468
; rs232cmd.c 2602					SCPIError = ParNotAllowed;
	SYMB	LINE, 2602
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_478
_468:
; rs232cmd.c 2603				else
; rs232cmd.c 2604				{
; rs232cmd.c 2605					PrintSamplesToFLT( CBSetup.System, CBSetup.Delay*256);
	SYMB	LINE, 2605
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _CBSetup+4 )
	MOV.W	R3,#SOF( _CBSetup+4 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	ASL.D	R2,#08H
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2606	
; rs232cmd.c 2607					rs232putchar ( '\n');
	SYMB	LINE, 2607
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2608				}
; rs232cmd.c 2609			}
	SYMB	LINE, 2609
	BR	_478
_469:
; rs232cmd.c 2610			else
; rs232cmd.c 2611			{
; rs232cmd.c 2612				if (( ParCnt != 3) || ( sscanf( Cmd, "%d,%d,%f", &field, &line, &offset) != 3))
	SYMB	LINE, 2612
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_470
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 16
	PUSH.W	R4, R5
	SYMB	SOFF, 20
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	MOV.W	R3,#SEG( _295 )
	MOV.W	R2,#SOF( _295 )
	PUSH.W	R2, R3
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 12
	CMP.W	R0,#03H
	BEQ	_471
_470:
; rs232cmd.c 2613					SCPIError = SyntaxErr;
	SYMB	LINE, 2613
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_478
_471:
; rs232cmd.c 2614				else
; rs232cmd.c 2615				{
; rs232cmd.c 2616					if (( samples = FLTToSamples( CBSetup.System, field, line, offset)) == -1)
	SYMB	LINE, 2616
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MOV.W	R1,[R7]
	MOV.W	R2,[R7+2]
	MOV.W	R5,[R7+6]
	MOV.W	R4,[R7+4]
	PUSH.W	R4, R5
	SYMB	SOFF, 16
	CALL	_FLTToSamples
	ADDS.W	R7,#04H
	SYMB	SOFF, 12
	MOV.W	R3,R1
	MOV.W	R2,R0
	CMP.W	R3,#0FFFFH
	BNE	_481
	CMP.W	R2,#0FFFFH
_481:
	BNE	_472
; rs232cmd.c 2617						SCPIError = ExecErr;
	SYMB	LINE, 2617
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_478
_472:
; rs232cmd.c 2618					else		
; rs232cmd.c 2619						SetCBDelay( samples/256);
	SYMB	LINE, 2619
	MOV.W	R3,#00H
	MOV.W	R2,#0100H
	FCALL	__SDIVL
	CALL	_SetCBDelay
; rs232cmd.c 2620				}
; rs232cmd.c 2621			}
; rs232cmd.c 2622		}
	SYMB	LINE, 2622
_478:
; rs232cmd.c 2623	}
	SYMB	LINE, 2623
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2624	
; rs232cmd.c 2625	/**************************************************************************/
; rs232cmd.c 2626	/* TSGenScHPhase														 	   							 RS232CMD.C	*/
; rs232cmd.c 2627	/*																																				*/
; rs232cmd.c 2628	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 2629	/* Revised:		000727				     																					*/
; rs232cmd.c 2630	/*																																				*/
; rs232cmd.c 2631	/* Function:	Handle the Colorbar ScH-Phase-command.											*/
; rs232cmd.c 2632	/* Remarks:		--																													*/
; rs232cmd.c 2633	/* Returns:		--																													*/
; rs232cmd.c 2634	/* Updates:		--																													*/
; rs232cmd.c 2635	/**************************************************************************/
; rs232cmd.c 2636	void TSGenScHPhase( void)
; rs232cmd.c 2637	{
	ALIGN	1
	SYMB	LINE, 2637
	PUBLIC	_TSGenScHPhase
_TSGenScHPhase:
	SYMB	TYPE, 589, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGenScHPhase", _TSGenScHPhase, #589, 0, 0, 0
	SYMB	ALAB, _TSGenScHPhase, #589
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "schphase", -2, #16, 130, 5
; rs232cmd.c 2638		int schphase;
; rs232cmd.c 2639	
; rs232cmd.c 2640		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2640
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_493
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_493
; rs232cmd.c 2641		{
; rs232cmd.c 2642			if ( CmdRequest)
	SYMB	LINE, 2642
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_483
; rs232cmd.c 2643			{
; rs232cmd.c 2644				if ( ParCnt)
	SYMB	LINE, 2644
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_482
; rs232cmd.c 2645					SCPIError = ParNotAllowed;
	SYMB	LINE, 2645
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_493
_482:
; rs232cmd.c 2646				else
; rs232cmd.c 2647					rs232printf( 6, "%d\n", CBSetup.ScHPhase);
	SYMB	LINE, 2647
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R1,#SOF( _CBSetup+8 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 2648			}
	SYMB	LINE, 2648
	BR	_493
_483:
; rs232cmd.c 2649			else
; rs232cmd.c 2650			{
; rs232cmd.c 2651				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &schphase) != 1))
	SYMB	LINE, 2651
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_484
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_485
_484:
; rs232cmd.c 2652					SCPIError = SyntaxErr;
	SYMB	LINE, 2652
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_493
_485:
; rs232cmd.c 2653				else
; rs232cmd.c 2654				{
; rs232cmd.c 2655					if (( schphase < ScHPhaseLow) || ( schphase > ScHPhaseHigh))
	SYMB	LINE, 2655
	CMP.W	[R7],#0FF4DH
	BLT	_486
	CMP.W	[R7],#0B4H
	BLE	_487
_486:
; rs232cmd.c 2656						SCPIError = DataOutOfRange;
	SYMB	LINE, 2656
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_493
_487:
; rs232cmd.c 2657					else
; rs232cmd.c 2658						SetCBScHPhase( schphase);
	SYMB	LINE, 2658
	MOV.W	R0,[R7]
	CALL	_SetCBScHPhase
; rs232cmd.c 2659				}
; rs232cmd.c 2660			}
; rs232cmd.c 2661		}
	SYMB	LINE, 2661
_493:
; rs232cmd.c 2662	}
	SYMB	LINE, 2662
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2663	
; rs232cmd.c 2664	/**************************************************************************/
; rs232cmd.c 2665	/* TSGenEmbAudioSignal											 	   							 RS232CMD.C	*/
; rs232cmd.c 2666	/*																																				*/
; rs232cmd.c 2667	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 2668	/* Revised:		000727				     																					*/
; rs232cmd.c 2669	/*																																				*/
; rs232cmd.c 2670	/* Function:	Handle the Colorbar embedded audio signal										*/
; rs232cmd.c 2671	/* Remarks:		--																													*/
; rs232cmd.c 2672	/* Returns:		--																													*/
; rs232cmd.c 2673	/* Updates:		--																													*/
; rs232cmd.c 2674	/**************************************************************************/
; rs232cmd.c 2675	void TSGenEmbAudioSignal( void)
; rs232cmd.c 2676	{
	ALIGN	1
	SYMB	LINE, 2676
	PUBLIC	_TSGenEmbAudioSignal
_TSGenEmbAudioSignal:
	SYMB	TYPE, 590, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSGenEmbAudioSignal", _TSGenEmbAudioSignal, #590, 0, 0, 48
	SYMB	ALAB, _TSGenEmbAudioSignal, #590
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "signal", -1, #16, 130, 5
	SYMB	LTIM, "signal", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2677		int signal;
; rs232cmd.c 2678		char code *str;
; rs232cmd.c 2679	
; rs232cmd.c 2680		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2680
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_509
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_509
; rs232cmd.c 2681		{
; rs232cmd.c 2682			if ( CmdRequest)
	SYMB	LINE, 2682
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_501
; rs232cmd.c 2683			{
; rs232cmd.c 2684				if ( ParCnt)
	SYMB	LINE, 2684
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_498
; rs232cmd.c 2685					SCPIError = ParNotAllowed;
	SYMB	LINE, 2685
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_509
_498:
; rs232cmd.c 2686				else
; rs232cmd.c 2687				{
; rs232cmd.c 2688					str = EmbAudioSignalPar[CBSetup.EmbAudioSignal].LongName;
	SYMB	LINE, 2688
	MOV.B	ES,#SEG( _CBSetup+10 )
	MOV.W	R0,#SOF( _CBSetup+10 )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _EmbAudioSignalPar )
	MOV.W	R0,#SOF( _EmbAudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_510
	ADDS.B	CS,#01H
_510:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2689	
; rs232cmd.c 2690					while ( *str)
	SYMB	LINE, 2690
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_500
_499:
; rs232cmd.c 2691						rs232putchar( *str++);
	SYMB	LINE, 2691
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2690
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_499
	SYMB	LINE, 2691
_500:
; rs232cmd.c 2692	
; rs232cmd.c 2693					rs232putchar('\n');
	SYMB	LINE, 2693
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2694				}
; rs232cmd.c 2695			}
	SYMB	LINE, 2695
	BR	_509
_501:
; rs232cmd.c 2696			else
; rs232cmd.c 2697			{
; rs232cmd.c 2698				if ( ParCnt != 1)
	SYMB	LINE, 2698
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_502
; rs232cmd.c 2699					SCPIError = SyntaxErr;
	SYMB	LINE, 2699
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_509
_502:
; rs232cmd.c 2700				else
; rs232cmd.c 2701				{
; rs232cmd.c 2702					signal = FindParameter( Cmd, EmbAudioSignalPar);
	SYMB	LINE, 2702
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _EmbAudioSignalPar )
	MOV.W	R2,#SOF( _EmbAudioSignalPar )
	CALL	_FindParameter
	SYMB	LTIM, "signal", 2, 0, 205
; rs232cmd.c 2703		
; rs232cmd.c 2704					if ( signal > -1)
	SYMB	LINE, 2704
	CMP.W	R0,#0FFFFH
	BLE	_503
	SYMB	LTIM, "signal", 2, 0, 77
; rs232cmd.c 2705						SetCBEmbAudioSignal( signal);
	SYMB	LINE, 2705
	CALL	_SetCBEmbAudioSignal
	BR	_509
_503:
; rs232cmd.c 2706					else
; rs232cmd.c 2707						SCPIError = DataOutOfRange;
	SYMB	LINE, 2707
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2708				}
; rs232cmd.c 2709			}
; rs232cmd.c 2710		}
	SYMB	LINE, 2710
_509:
; rs232cmd.c 2711	}
	SYMB	LINE, 2711
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2712	
; rs232cmd.c 2713	/**************************************************************************/
; rs232cmd.c 2714	/* AudioGenOutput																				 	     RS232CMD.C	*/
; rs232cmd.c 2715	/*																																				*/
; rs232cmd.c 2716	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 2717	/* Revised:		000603				     																					*/
; rs232cmd.c 2718	/*																																				*/
; rs232cmd.c 2719	/* Function:	--																													*/
; rs232cmd.c 2720	/* Remarks:		--																													*/
; rs232cmd.c 2721	/* Returns:		--																													*/
; rs232cmd.c 2722	/* Updates:		--																													*/
; rs232cmd.c 2723	/**************************************************************************/
; rs232cmd.c 2724	void AudioGenOutput( void)
; rs232cmd.c 2725	{
	ALIGN	1
	SYMB	LINE, 2725
	PUBLIC	_AudioGenOutput
_AudioGenOutput:
	SYMB	TYPE, 591, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenOutput", _AudioGenOutput, #591, 0, 0, 48
	SYMB	ALAB, _AudioGenOutput, #591
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "output", -1, #16, 130, 5
	SYMB	LTIM, "output", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2726		int output;
; rs232cmd.c 2727		char code *str;
; rs232cmd.c 2728	
; rs232cmd.c 2729		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2729
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_525
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_525
; rs232cmd.c 2730		{
; rs232cmd.c 2731			if ( CmdRequest)
	SYMB	LINE, 2731
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_516
; rs232cmd.c 2732			{
; rs232cmd.c 2733				if ( ParCnt)
	SYMB	LINE, 2733
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_513
; rs232cmd.c 2734					SCPIError = ParNotAllowed;
	SYMB	LINE, 2734
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_525
_513:
; rs232cmd.c 2735				else
; rs232cmd.c 2736				{
; rs232cmd.c 2737					str = AudioOutputPar[AudioOutput].LongName;
	SYMB	LINE, 2737
	MOV.B	ES,#SEG( _AudioOutput )
	MOV.W	R0,#SOF( _AudioOutput )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioOutputPar )
	MOV.W	R0,#SOF( _AudioOutputPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_526
	ADDS.B	CS,#01H
_526:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2738	
; rs232cmd.c 2739					while ( *str)
	SYMB	LINE, 2739
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_515
_514:
; rs232cmd.c 2740						rs232putchar( *str++);
	SYMB	LINE, 2740
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2739
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_514
	SYMB	LINE, 2740
_515:
; rs232cmd.c 2741	
; rs232cmd.c 2742					rs232putchar('\n');
	SYMB	LINE, 2742
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2743				}
; rs232cmd.c 2744			}
	SYMB	LINE, 2744
	BR	_525
_516:
; rs232cmd.c 2745			else
; rs232cmd.c 2746			{
; rs232cmd.c 2747				if ( ParCnt != 1)
	SYMB	LINE, 2747
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_517
; rs232cmd.c 2748					SCPIError = SyntaxErr;
	SYMB	LINE, 2748
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_525
_517:
; rs232cmd.c 2749				else
; rs232cmd.c 2750				{
; rs232cmd.c 2751					output = FindParameter( Cmd, AudioOutputPar);
	SYMB	LINE, 2751
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AudioOutputPar )
	MOV.W	R2,#SOF( _AudioOutputPar )
	CALL	_FindParameter
	SYMB	LTIM, "output", 2, 0, 205
; rs232cmd.c 2752		
; rs232cmd.c 2753					if ( output > -1)
	SYMB	LINE, 2753
	CMP.W	R0,#0FFFFH
	BLE	_518
; rs232cmd.c 2754					{
; rs232cmd.c 2755						if ( SetAudioOutput( output) == FAIL)
	SYMB	LINE, 2755
	CALL	_SetAudioOutput
	SYMB	LTIM, "output", 2, 0, 77
	OR.W	R0,R0
	BNE	_525
; rs232cmd.c 2756							SCPIError = ExecErr;
	SYMB	LINE, 2756
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 2757					}
	SYMB	LINE, 2757
	BR	_525
_518:
; rs232cmd.c 2758					else
; rs232cmd.c 2759						SCPIError = DataOutOfRange;
	SYMB	LINE, 2759
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2760				}
; rs232cmd.c 2761			}
; rs232cmd.c 2762		}
	SYMB	LINE, 2762
_525:
; rs232cmd.c 2763	}
	SYMB	LINE, 2763
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2764	
; rs232cmd.c 2765	/**************************************************************************/
; rs232cmd.c 2766	/* AudioGenAnalog																				 	     RS232CMD.C	*/
; rs232cmd.c 2767	/*																																				*/
; rs232cmd.c 2768	/* Author:		Kim Engedahl, DEV, 000526	    															*/
; rs232cmd.c 2769	/* Revised:		000705				     																					*/
; rs232cmd.c 2770	/*																																				*/
; rs232cmd.c 2771	/* Function:	--																													*/
; rs232cmd.c 2772	/* Remarks:		Request only.																								*/
; rs232cmd.c 2773	/* Returns:	  --																													*/
; rs232cmd.c 2774	/* Updates:		--																													*/
; rs232cmd.c 2775	/**************************************************************************/
; rs232cmd.c 2776	void AudioGenAnalog( void)
; rs232cmd.c 2777	{
	ALIGN	1
	SYMB	LINE, 2777
	PUBLIC	_AudioGenAnalog
_AudioGenAnalog:
	SYMB	TYPE, 592, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAnalog", _AudioGenAnalog, #592, 0, 0, 112
	SYMB	ALAB, _AudioGenAnalog, #592
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "level", -1, #16, 130, 5
	SYMB	LTIM, "level", -1, 0, 69
; rs232cmd.c 2778		char code *str;
; rs232cmd.c 2779		int level;
; rs232cmd.c 2780	
; rs232cmd.c 2781		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2781
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_601
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_601
; rs232cmd.c 2782		{
; rs232cmd.c 2783			if ( !CmdRequest)
	SYMB	LINE, 2783
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_530
; rs232cmd.c 2784					SCPIError = SyntaxErr;
	SYMB	LINE, 2784
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_601
_530:
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2785			else
; rs232cmd.c 2786			{
; rs232cmd.c 2787				if ( ParCnt)
	SYMB	LINE, 2787
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_531
; rs232cmd.c 2788					SCPIError = ParNotAllowed;
	SYMB	LINE, 2788
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_601
_531:
	SYMB	LTIM, "level", 26, 0, 77
RS232CMD_IR	SEGMENT	HCODE INSEGMENT ROMDATA
	RSEG	RS232CMD_IR
	ALIGN	1
__swtable603:
	DW	SOF _534,SEG _534
	DW	SOF _535,SEG _535
	DW	SOF _536,SEG _536
	DW	SOF _537,SEG _537
	DW	SOF _538,SEG _538
	DW	SOF _539,SEG _539
	DW	SOF _540,SEG _540
	DW	SOF _541,SEG _541
	DW	SOF _542,SEG _542
	DW	SOF _543,SEG _543
	DW	SOF _544,SEG _544
	DW	SOF _545,SEG _545
	DW	SOF _546,SEG _546
	DW	SOF _547,SEG _547
	DW	SOF _548,SEG _548
	DW	SOF _549,SEG _549
	DW	SOF _550,SEG _550
	DW	SOF _551,SEG _551
	DW	SOF _552,SEG _552
	DW	SOF _553,SEG _553
	DW	SOF _554,SEG _554
	DW	SOF _555,SEG _555
	DW	SOF _556,SEG _556
	DW	SOF _557,SEG _557
	DW	SOF _558,SEG _558
	DW	SOF _559,SEG _559
	DW	SOF _560,SEG _560
	DW	SOF _561,SEG _561
	DW	SOF _562,SEG _562
	DW	SOF _563,SEG _563
	RSEG	RS232CMD_PR
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2789				else
; rs232cmd.c 2790				{
; rs232cmd.c 2791					str = AudioSignalPar[AudioSetup[AnalogAudio].Signal].LongName;
	SYMB	LINE, 2791
	MOV.B	ES,#SEG( _AudioSetup+2 )
	MOV.W	R0,#SOF( _AudioSetup+2 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioSignalPar )
	MOV.W	R0,#SOF( _AudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_602
	ADDS.B	CS,#01H
_602:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2792	
; rs232cmd.c 2793					while ( *str)
	SYMB	LINE, 2793
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_533
_532:
; rs232cmd.c 2794						rs232putchar( *str++);
	SYMB	LINE, 2794
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2793
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_532
	SYMB	LINE, 2794
_533:
; rs232cmd.c 2795	
; rs232cmd.c 2796					rs232putchar(',');
	SYMB	LINE, 2796
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2797	
; rs232cmd.c 2798					str = NULL;
	SYMB	LINE, 2798
	MOV.W	R5,#00H
	MOV.W	R4,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2799	
; rs232cmd.c 2800					switch ( AudioSetup[AnalogAudio].Level)
	SYMB	LINE, 2800
	MOV.B	ES,#SEG( _AudioSetup+4 )
	MOV.W	R0,#SOF( _AudioSetup+4 )
	MOV.W	R0,[R0]
	ADDS.W	R0,#0FH
	CMP.W	R0,#01DH
	BG	_564
	ASL.W	R0,#02H
	MOV.B	CS,#SEG( __swtable603 )
	ADD.W	R0,#SOF( __swtable603 )
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	RET
; rs232cmd.c 2801					{
; rs232cmd.c 2802					 	case P10dBm:
	SYMB	LINE, 2802
_534:
; rs232cmd.c 2803							level = 10;
	SYMB	LINE, 2803
	MOV.W	R6,#0AH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2804							break;
	SYMB	LINE, 2804
	BR	_596
; rs232cmd.c 2805	
; rs232cmd.c 2806					 	case P8dBm:
	SYMB	LINE, 2806
_535:
; rs232cmd.c 2807							level = 8;
	SYMB	LINE, 2807
	MOV.W	R6,#08H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2808							break;
	SYMB	LINE, 2808
	BR	_596
; rs232cmd.c 2809	
; rs232cmd.c 2810					 	case P7dBm:
	SYMB	LINE, 2810
_536:
; rs232cmd.c 2811							level = 7;
	SYMB	LINE, 2811
	MOV.W	R6,#07H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2812							break;
	SYMB	LINE, 2812
	BR	_596
; rs232cmd.c 2813	
; rs232cmd.c 2814					 	case P6dBm:
	SYMB	LINE, 2814
_537:
; rs232cmd.c 2815							level = 6;
	SYMB	LINE, 2815
	MOV.W	R6,#06H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2816							break;
	SYMB	LINE, 2816
	BR	_596
; rs232cmd.c 2817	
; rs232cmd.c 2818					 	case P5dBm:
	SYMB	LINE, 2818
_538:
; rs232cmd.c 2819							level = 5;
	SYMB	LINE, 2819
	MOV.W	R6,#05H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2820							break;
	SYMB	LINE, 2820
	BR	_596
; rs232cmd.c 2821	
; rs232cmd.c 2822					 	case P4dBm:
	SYMB	LINE, 2822
_539:
; rs232cmd.c 2823							level = 4;
	SYMB	LINE, 2823
	MOV.W	R6,#04H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2824							break;
	SYMB	LINE, 2824
	BR	_596
; rs232cmd.c 2825	
; rs232cmd.c 2826					 	case P3dBm:
	SYMB	LINE, 2826
_540:
; rs232cmd.c 2827							level = 3;
	SYMB	LINE, 2827
	MOV.W	R6,#03H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2828							break;
	SYMB	LINE, 2828
	BR	_596
; rs232cmd.c 2829	
; rs232cmd.c 2830					 	case P2dBm:
	SYMB	LINE, 2830
_541:
; rs232cmd.c 2831							level = 2;
	SYMB	LINE, 2831
	MOV.W	R6,#02H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2832							break;
	SYMB	LINE, 2832
	BR	_596
; rs232cmd.c 2833	
; rs232cmd.c 2834					 	case P1dBm:
	SYMB	LINE, 2834
_542:
; rs232cmd.c 2835							level = 1;
	SYMB	LINE, 2835
	MOV.W	R6,#01H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2836							break;
	SYMB	LINE, 2836
	BR	_596
; rs232cmd.c 2837	
; rs232cmd.c 2838					 	case M0dBm:
	SYMB	LINE, 2838
_543:
; rs232cmd.c 2839							level = 0;
	SYMB	LINE, 2839
	MOV.W	R6,#00H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2840							break;
	SYMB	LINE, 2840
	BR	_596
; rs232cmd.c 2841	
; rs232cmd.c 2842					 	case M1dBm:
	SYMB	LINE, 2842
_544:
; rs232cmd.c 2843							level = -1;
	SYMB	LINE, 2843
	MOV.W	R6,#0FFFFH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2844							break;
	SYMB	LINE, 2844
	BR	_596
; rs232cmd.c 2845	
; rs232cmd.c 2846					 	case M2dBm:
	SYMB	LINE, 2846
_545:
; rs232cmd.c 2847							level = -2;
	SYMB	LINE, 2847
	MOV.W	R6,#0FFFEH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2848							break;
	SYMB	LINE, 2848
	BR	_596
; rs232cmd.c 2849	
; rs232cmd.c 2850					 	case M3dBm:
	SYMB	LINE, 2850
_546:
; rs232cmd.c 2851							level = -3;
	SYMB	LINE, 2851
	MOV.W	R6,#0FFFDH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2852							break;
	SYMB	LINE, 2852
	BR	_596
; rs232cmd.c 2853	
; rs232cmd.c 2854					 	case M4dBm:
	SYMB	LINE, 2854
_547:
; rs232cmd.c 2855							level = -4;
	SYMB	LINE, 2855
	MOV.W	R6,#0FFFCH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2856							break;
	SYMB	LINE, 2856
	BR	_596
; rs232cmd.c 2857	
; rs232cmd.c 2858					 	case M5dBm:
	SYMB	LINE, 2858
_548:
; rs232cmd.c 2859							level = -5;
	SYMB	LINE, 2859
	MOV.W	R6,#0FFFBH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2860							break;
	SYMB	LINE, 2860
	BR	_596
; rs232cmd.c 2861	
; rs232cmd.c 2862					 	case M6dBm:
	SYMB	LINE, 2862
_549:
; rs232cmd.c 2863							level = -6;
	SYMB	LINE, 2863
	MOV.W	R6,#0FFFAH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2864							break;
	SYMB	LINE, 2864
	BR	_596
; rs232cmd.c 2865	
; rs232cmd.c 2866					 	case M7dBm:
	SYMB	LINE, 2866
_550:
; rs232cmd.c 2867							level = -7;
	SYMB	LINE, 2867
	MOV.W	R6,#0FFF9H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2868							break;
	SYMB	LINE, 2868
	BR	_596
; rs232cmd.c 2869	
; rs232cmd.c 2870					 	case M8dBm:
	SYMB	LINE, 2870
_551:
; rs232cmd.c 2871							level = -8;
	SYMB	LINE, 2871
	MOV.W	R6,#0FFF8H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2872							break;
	SYMB	LINE, 2872
	BR	_596
; rs232cmd.c 2873	
; rs232cmd.c 2874					 	case M9dBm:
	SYMB	LINE, 2874
_552:
; rs232cmd.c 2875							level = -9;
	SYMB	LINE, 2875
	MOV.W	R6,#0FFF7H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2876							break;
	SYMB	LINE, 2876
	BR	_596
; rs232cmd.c 2877	
; rs232cmd.c 2878					 	case M10dBm:
	SYMB	LINE, 2878
_553:
; rs232cmd.c 2879							level = -10;
	SYMB	LINE, 2879
	MOV.W	R6,#0FFF6H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2880							break;
	SYMB	LINE, 2880
	BR	_596
; rs232cmd.c 2881	
; rs232cmd.c 2882					 	case M11dBm:
	SYMB	LINE, 2882
_554:
; rs232cmd.c 2883							level = -11;
	SYMB	LINE, 2883
	MOV.W	R6,#0FFF5H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2884							break;
	SYMB	LINE, 2884
	BR	_596
; rs232cmd.c 2885	
; rs232cmd.c 2886					 	case M12dBm:
	SYMB	LINE, 2886
_555:
; rs232cmd.c 2887							level = -12;
	SYMB	LINE, 2887
	MOV.W	R6,#0FFF4H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2888							break;
	SYMB	LINE, 2888
	BR	_596
; rs232cmd.c 2889	
; rs232cmd.c 2890					 	case M15dBm:
	SYMB	LINE, 2890
_556:
; rs232cmd.c 2891							level = -15;
	SYMB	LINE, 2891
	MOV.W	R6,#0FFF1H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2892							break;
	SYMB	LINE, 2892
	BR	_596
; rs232cmd.c 2893	
; rs232cmd.c 2894					 	case M18dBm:
	SYMB	LINE, 2894
_557:
; rs232cmd.c 2895							level = -18;
	SYMB	LINE, 2895
	MOV.W	R6,#0FFEEH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2896							break;
	SYMB	LINE, 2896
	BR	_596
; rs232cmd.c 2897	
; rs232cmd.c 2898						case M21dBm:
	SYMB	LINE, 2898
_558:
; rs232cmd.c 2899							level = -21;
	SYMB	LINE, 2899
	MOV.W	R6,#0FFEBH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2900							break;
	SYMB	LINE, 2900
	BR	_596
; rs232cmd.c 2901	
; rs232cmd.c 2902					 	case M24dBm:
	SYMB	LINE, 2902
_559:
; rs232cmd.c 2903							level = -24;
	SYMB	LINE, 2903
	MOV.W	R6,#0FFE8H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2904							break;
	SYMB	LINE, 2904
	BR	_596
; rs232cmd.c 2905	
; rs232cmd.c 2906					 	case M27dBm:
	SYMB	LINE, 2906
_560:
; rs232cmd.c 2907							level = -27;
	SYMB	LINE, 2907
	MOV.W	R6,#0FFE5H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2908							break;
	SYMB	LINE, 2908
	BR	_596
; rs232cmd.c 2909	
; rs232cmd.c 2910					 	case M30dBm:
	SYMB	LINE, 2910
_561:
; rs232cmd.c 2911							level = -30;
	SYMB	LINE, 2911
	MOV.W	R6,#0FFE2H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2912							break;
	SYMB	LINE, 2912
	BR	_596
; rs232cmd.c 2913	
; rs232cmd.c 2914					 	case M33dBm:
	SYMB	LINE, 2914
_562:
; rs232cmd.c 2915							level = -33;
	SYMB	LINE, 2915
	MOV.W	R6,#0FFDFH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2916							break;
	SYMB	LINE, 2916
	BR	_596
; rs232cmd.c 2917	
; rs232cmd.c 2918						case M36dBm:
	SYMB	LINE, 2918
_563:
; rs232cmd.c 2919							level = -36;
	SYMB	LINE, 2919
	MOV.W	R6,#0FFDCH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2920							break;
	SYMB	LINE, 2920
	BR	_596
; rs232cmd.c 2921	
; rs232cmd.c 2922						default:
	SYMB	LINE, 2922
_564:
; rs232cmd.c 2923							str = SILENCEParTxt;
	SYMB	LINE, 2923
	MOV.W	R5,#SEG( _SILENCEParTxt )
	MOV.W	R4,#SOF( _SILENCEParTxt )
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2924	
; rs232cmd.c 2925							while ( *str)
	SYMB	LINE, 2925
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_566
_565:
; rs232cmd.c 2926								rs232putchar( *str++);
	SYMB	LINE, 2926
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2925
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_565
	SYMB	LINE, 2926
_566:
; rs232cmd.c 2927	
; rs232cmd.c 2928							rs232putchar(',');
	SYMB	LINE, 2928
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2929							break;
; rs232cmd.c 2930						}
	SYMB	LINE, 2930
_596:
; rs232cmd.c 2931	
; rs232cmd.c 2932					if ( str == NULL)
	SYMB	LINE, 2932
	OR.W	R5,R4
	BNE	_597
; rs232cmd.c 2933						rs232printf( 6, "%d,", level);
	SYMB	LINE, 2933
	MOV.W	R0,#06H
	PUSH.W	R6
	SYMB	SOFF, 8
	SYMB	LTIM, "level", 26, 0, 77
	MOV.W	R3,#SEG( _529 )
	MOV.W	R2,#SOF( _529 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
_597:
; rs232cmd.c 2934	
; rs232cmd.c 2935					rs232printf( 6, "%d\n", AudioSetup[AnalogAudio].Click);			
	SYMB	LINE, 2935
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _AudioSetup+12 )
	MOV.W	R1,#SOF( _AudioSetup+12 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
; rs232cmd.c 2936				}
; rs232cmd.c 2937			}
; rs232cmd.c 2938		}
	SYMB	LINE, 2938
_601:
; rs232cmd.c 2939	}
	SYMB	LINE, 2939
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2940	
; rs232cmd.c 2941	/**************************************************************************/
; rs232cmd.c 2942	/* AudioGenAnalogSignal		 															 	     RS232CMD.C	*/
; rs232cmd.c 2943	/*																																				*/
; rs232cmd.c 2944	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 2945	/* Revised:		000603				     																					*/
; rs232cmd.c 2946	/*																																				*/
; rs232cmd.c 2947	/* Function:	--																													*/
; rs232cmd.c 2948	/* Remarks:		--																													*/
; rs232cmd.c 2949	/* Returns:		--																													*/
; rs232cmd.c 2950	/* Updates:		--																													*/
; rs232cmd.c 2951	/**************************************************************************/
; rs232cmd.c 2952	void AudioGenAnalogSignal( void)
; rs232cmd.c 2953	{
	ALIGN	1
	SYMB	LINE, 2953
	PUBLIC	_AudioGenAnalogSignal
_AudioGenAnalogSignal:
	SYMB	TYPE, 593, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAnalogSignal", _AudioGenAnalogSignal, #593, 0, 0, 48
	SYMB	ALAB, _AudioGenAnalogSignal, #593
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "signal", -1, #16, 130, 5
	SYMB	LTIM, "signal", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2954		int signal;
; rs232cmd.c 2955		char code *str;
; rs232cmd.c 2956	
; rs232cmd.c 2957		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2957
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_616
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_616
; rs232cmd.c 2958		{
; rs232cmd.c 2959			if ( CmdRequest)
	SYMB	LINE, 2959
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_607
; rs232cmd.c 2960			{
; rs232cmd.c 2961				if ( ParCnt)
	SYMB	LINE, 2961
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_604
; rs232cmd.c 2962					SCPIError = ParNotAllowed;
	SYMB	LINE, 2962
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_616
_604:
; rs232cmd.c 2963				else
; rs232cmd.c 2964				{
; rs232cmd.c 2965					str = AudioSignalPar[AudioSetup[AnalogAudio].Signal].LongName;
	SYMB	LINE, 2965
	MOV.B	ES,#SEG( _AudioSetup+2 )
	MOV.W	R0,#SOF( _AudioSetup+2 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioSignalPar )
	MOV.W	R0,#SOF( _AudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_617
	ADDS.B	CS,#01H
_617:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2966	
; rs232cmd.c 2967					while ( *str)
	SYMB	LINE, 2967
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_606
_605:
; rs232cmd.c 2968						rs232putchar( *str++);
	SYMB	LINE, 2968
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2967
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_605
	SYMB	LINE, 2968
_606:
; rs232cmd.c 2969	
; rs232cmd.c 2970					rs232putchar('\n');
	SYMB	LINE, 2970
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2971				}
; rs232cmd.c 2972			}
	SYMB	LINE, 2972
	BR	_616
_607:
; rs232cmd.c 2973			else
; rs232cmd.c 2974			{
; rs232cmd.c 2975				if ( ParCnt != 1)
	SYMB	LINE, 2975
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_608
; rs232cmd.c 2976					SCPIError = SyntaxErr;
	SYMB	LINE, 2976
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_616
_608:
; rs232cmd.c 2977				else
; rs232cmd.c 2978				{
; rs232cmd.c 2979					signal = FindParameter( Cmd, AudioSignalPar);
	SYMB	LINE, 2979
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AudioSignalPar )
	MOV.W	R2,#SOF( _AudioSignalPar )
	CALL	_FindParameter
	SYMB	LTIM, "signal", 2, 0, 205
; rs232cmd.c 2980		
; rs232cmd.c 2981					if ( signal > -1)
	SYMB	LINE, 2981
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "signal", 2, 0, 77
	SYMB	LTIM, "signal", 6, 0, 205
	BLE	_609
; rs232cmd.c 2982					{
; rs232cmd.c 2983						if ( SetAudioSignal( AnalogAudio, signal) == FAIL)
	SYMB	LINE, 2983
	MOV.W	R0,#00H
	CALL	_SetAudioSignal
	SYMB	LTIM, "signal", 6, 0, 77
	OR.W	R0,R0
	BNE	_616
; rs232cmd.c 2984								SCPIError = ExecErr;
	SYMB	LINE, 2984
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 2985					}
	SYMB	LINE, 2985
	BR	_616
_609:
; rs232cmd.c 2986					else
; rs232cmd.c 2987						SCPIError = DataOutOfRange;
	SYMB	LINE, 2987
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2988				}
; rs232cmd.c 2989			}
; rs232cmd.c 2990		}
	SYMB	LINE, 2990
_616:
; rs232cmd.c 2991	}
	SYMB	LINE, 2991
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2992	
; rs232cmd.c 2993	/**************************************************************************/
; rs232cmd.c 2994	/* AudioGenAnalogLevel																	 	     RS232CMD.C	*/
; rs232cmd.c 2995	/*																																				*/
; rs232cmd.c 2996	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 2997	/* Revised:		000705				     																					*/
; rs232cmd.c 2998	/*																																				*/
; rs232cmd.c 2999	/* Function:	--																													*/
; rs232cmd.c 3000	/* Remarks:		--																													*/
; rs232cmd.c 3001	/* Returns:		--																													*/
; rs232cmd.c 3002	/* Updates:		--																													*/
; rs232cmd.c 3003	/**************************************************************************/
; rs232cmd.c 3004	void AudioGenAnalogLevel( void)
; rs232cmd.c 3005	{
	ALIGN	1
	SYMB	LINE, 3005
	PUBLIC	_AudioGenAnalogLevel
_AudioGenAnalogLevel:
	SYMB	TYPE, 594, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAnalogLevel", _AudioGenAnalogLevel, #594, 0, 0, 48
	SYMB	ALAB, _AudioGenAnalogLevel, #594
	RSEG	RS232CMD_IR
	ALIGN	1
__swtable758:
	DW	SOF _653,SEG _653
	DW	SOF _621,SEG _621
	DW	SOF _622,SEG _622
	DW	SOF _623,SEG _623
	DW	SOF _624,SEG _624
	DW	SOF _625,SEG _625
	DW	SOF _626,SEG _626
	DW	SOF _627,SEG _627
	DW	SOF _628,SEG _628
	DW	SOF _629,SEG _629
	DW	SOF _630,SEG _630
	DW	SOF _631,SEG _631
	DW	SOF _632,SEG _632
	DW	SOF _633,SEG _633
	DW	SOF _634,SEG _634
	DW	SOF _635,SEG _635
	DW	SOF _636,SEG _636
	DW	SOF _637,SEG _637
	DW	SOF _638,SEG _638
	DW	SOF _639,SEG _639
	DW	SOF _640,SEG _640
	DW	SOF _641,SEG _641
	DW	SOF _642,SEG _642
	DW	SOF _643,SEG _643
	DW	SOF _644,SEG _644
	DW	SOF _645,SEG _645
	DW	SOF _646,SEG _646
	DW	SOF _647,SEG _647
	DW	SOF _648,SEG _648
	DW	SOF _649,SEG _649
	RSEG	RS232CMD_PR
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0EH
	SYMB	SOFF, 6
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "level", -6, #16, 130, 5
; rs232cmd.c 3006		code char *str;
; rs232cmd.c 3007		int level;
; rs232cmd.c 3008	
; rs232cmd.c 3009		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3009
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_757
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_757
; rs232cmd.c 3010		{
; rs232cmd.c 3011			if ( CmdRequest)
	SYMB	LINE, 3011
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_683
; rs232cmd.c 3012			{
; rs232cmd.c 3013				if ( ParCnt)
	SYMB	LINE, 3013
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_620
; rs232cmd.c 3014					SCPIError = ParNotAllowed;
	SYMB	LINE, 3014
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_757
_620:
; rs232cmd.c 3015				else
; rs232cmd.c 3016				{
; rs232cmd.c 3017					switch ( AudioSetup[AnalogAudio].Level)
	SYMB	LINE, 3017
	MOV.B	ES,#SEG( _AudioSetup+4 )
	MOV.W	R0,#SOF( _AudioSetup+4 )
	MOV.W	R0,[R0]
	ADDS.W	R0,#0FH
	CMP.W	R0,#01DH
	BG	_650
	ASL.W	R0,#02H
	MOV.B	CS,#SEG( __swtable758 )
	ADD.W	R0,#SOF( __swtable758 )
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	RET
; rs232cmd.c 3018					{
; rs232cmd.c 3019					 	case P10dBm:
; rs232cmd.c 3020							level = 10;
; rs232cmd.c 3021							break;
; rs232cmd.c 3022	
; rs232cmd.c 3023					 	case P8dBm:
	SYMB	LINE, 3023
_621:
; rs232cmd.c 3024							level = 8;
	SYMB	LINE, 3024
	MOV.W	[R7],#08H
; rs232cmd.c 3025							break;
	SYMB	LINE, 3025
	BR	_682
; rs232cmd.c 3026	
; rs232cmd.c 3027					 	case P7dBm:
	SYMB	LINE, 3027
_622:
; rs232cmd.c 3028							level = 7;
	SYMB	LINE, 3028
	MOV.W	[R7],#07H
; rs232cmd.c 3029							break;
	SYMB	LINE, 3029
	BR	_682
; rs232cmd.c 3030	
; rs232cmd.c 3031					 	case P6dBm:
	SYMB	LINE, 3031
_623:
; rs232cmd.c 3032							level = 6;
	SYMB	LINE, 3032
	MOV.W	[R7],#06H
; rs232cmd.c 3033							break;
	SYMB	LINE, 3033
	BR	_682
; rs232cmd.c 3034	
; rs232cmd.c 3035					 	case P5dBm:
	SYMB	LINE, 3035
_624:
; rs232cmd.c 3036							level = 5;
	SYMB	LINE, 3036
	MOV.W	[R7],#05H
; rs232cmd.c 3037							break;
	SYMB	LINE, 3037
	BR	_682
; rs232cmd.c 3038	
; rs232cmd.c 3039					 	case P4dBm:
	SYMB	LINE, 3039
_625:
; rs232cmd.c 3040							level = 4;
	SYMB	LINE, 3040
	MOV.W	[R7],#04H
; rs232cmd.c 3041							break;
	SYMB	LINE, 3041
	BR	_682
; rs232cmd.c 3042	
; rs232cmd.c 3043					 	case P3dBm:
	SYMB	LINE, 3043
_626:
; rs232cmd.c 3044							level = 3;
	SYMB	LINE, 3044
	MOV.W	[R7],#03H
; rs232cmd.c 3045							break;
	SYMB	LINE, 3045
	BR	_682
; rs232cmd.c 3046	
; rs232cmd.c 3047					 	case P2dBm:
	SYMB	LINE, 3047
_627:
; rs232cmd.c 3048							level = 2;
	SYMB	LINE, 3048
	MOV.W	[R7],#02H
; rs232cmd.c 3049							break;
	SYMB	LINE, 3049
	BR	_682
; rs232cmd.c 3050	
; rs232cmd.c 3051					 	case P1dBm:
	SYMB	LINE, 3051
_628:
; rs232cmd.c 3052							level = 1;
	SYMB	LINE, 3052
	MOV.W	[R7],#01H
; rs232cmd.c 3053							break;
	SYMB	LINE, 3053
	BR	_682
; rs232cmd.c 3054	
; rs232cmd.c 3055					 	case M0dBm:
	SYMB	LINE, 3055
_629:
; rs232cmd.c 3056							level = 0;
	SYMB	LINE, 3056
	MOV.W	[R7],#00H
; rs232cmd.c 3057							break;
	SYMB	LINE, 3057
	BR	_682
; rs232cmd.c 3058	
; rs232cmd.c 3059					 	case M1dBm:
	SYMB	LINE, 3059
_630:
; rs232cmd.c 3060							level = -1;
	SYMB	LINE, 3060
	MOV.W	[R7],#0FFFFH
; rs232cmd.c 3061							break;
	SYMB	LINE, 3061
	BR	_682
; rs232cmd.c 3062	
; rs232cmd.c 3063					 	case M2dBm:
	SYMB	LINE, 3063
_631:
; rs232cmd.c 3064							level = -2;
	SYMB	LINE, 3064
	MOV.W	[R7],#0FFFEH
; rs232cmd.c 3065							break;
	SYMB	LINE, 3065
	BR	_682
; rs232cmd.c 3066	
; rs232cmd.c 3067					 	case M3dBm:
	SYMB	LINE, 3067
_632:
; rs232cmd.c 3068							level = -3;
	SYMB	LINE, 3068
	MOV.W	[R7],#0FFFDH
; rs232cmd.c 3069							break;
	SYMB	LINE, 3069
	BR	_682
; rs232cmd.c 3070	
; rs232cmd.c 3071					 	case M4dBm:
	SYMB	LINE, 3071
_633:
; rs232cmd.c 3072							level = -4;
	SYMB	LINE, 3072
	MOV.W	[R7],#0FFFCH
; rs232cmd.c 3073							break;
	SYMB	LINE, 3073
	BR	_682
; rs232cmd.c 3074	
; rs232cmd.c 3075					 	case M5dBm:
	SYMB	LINE, 3075
_634:
; rs232cmd.c 3076							level = -5;
	SYMB	LINE, 3076
	MOV.W	[R7],#0FFFBH
; rs232cmd.c 3077							break;
	SYMB	LINE, 3077
	BR	_682
; rs232cmd.c 3078	
; rs232cmd.c 3079					 	case M6dBm:
	SYMB	LINE, 3079
_635:
; rs232cmd.c 3080							level = -6;
	SYMB	LINE, 3080
	MOV.W	[R7],#0FFFAH
; rs232cmd.c 3081							break;
	SYMB	LINE, 3081
	BR	_682
; rs232cmd.c 3082	
; rs232cmd.c 3083					 	case M7dBm:
	SYMB	LINE, 3083
_636:
; rs232cmd.c 3084							level = -7;
	SYMB	LINE, 3084
	MOV.W	[R7],#0FFF9H
; rs232cmd.c 3085							break;
	SYMB	LINE, 3085
	BR	_682
; rs232cmd.c 3086	
; rs232cmd.c 3087					 	case M8dBm:
	SYMB	LINE, 3087
_637:
; rs232cmd.c 3088							level = -8;
	SYMB	LINE, 3088
	MOV.W	[R7],#0FFF8H
; rs232cmd.c 3089							break;
	SYMB	LINE, 3089
	BR	_682
; rs232cmd.c 3090	
; rs232cmd.c 3091					 	case M9dBm:
	SYMB	LINE, 3091
_638:
; rs232cmd.c 3092							level = -9;
	SYMB	LINE, 3092
	MOV.W	[R7],#0FFF7H
; rs232cmd.c 3093							break;
	SYMB	LINE, 3093
	BR	_682
; rs232cmd.c 3094	
; rs232cmd.c 3095					 	case M10dBm:
	SYMB	LINE, 3095
_639:
; rs232cmd.c 3096							level = -10;
	SYMB	LINE, 3096
	MOV.W	[R7],#0FFF6H
; rs232cmd.c 3097							break;
	SYMB	LINE, 3097
	BR	_682
; rs232cmd.c 3098	
; rs232cmd.c 3099					 	case M11dBm:
	SYMB	LINE, 3099
_640:
; rs232cmd.c 3100							level = -11;
	SYMB	LINE, 3100
	MOV.W	[R7],#0FFF5H
; rs232cmd.c 3101							break;
	SYMB	LINE, 3101
	BR	_682
; rs232cmd.c 3102	
; rs232cmd.c 3103					 	case M12dBm:
	SYMB	LINE, 3103
_641:
; rs232cmd.c 3104							level = -12;
	SYMB	LINE, 3104
	MOV.W	[R7],#0FFF4H
; rs232cmd.c 3105							break;
	SYMB	LINE, 3105
	BR	_682
; rs232cmd.c 3106	
; rs232cmd.c 3107					 	case M15dBm:
	SYMB	LINE, 3107
_642:
; rs232cmd.c 3108							level = -15;
	SYMB	LINE, 3108
	MOV.W	[R7],#0FFF1H
; rs232cmd.c 3109							break;
	SYMB	LINE, 3109
	BR	_682
; rs232cmd.c 3110	
; rs232cmd.c 3111					 	case M18dBm:
	SYMB	LINE, 3111
_643:
; rs232cmd.c 3112							level = -18;
	SYMB	LINE, 3112
	MOV.W	[R7],#0FFEEH
; rs232cmd.c 3113							break;
	SYMB	LINE, 3113
	BR	_682
; rs232cmd.c 3114	
; rs232cmd.c 3115						case M21dBm:
	SYMB	LINE, 3115
_644:
; rs232cmd.c 3116							level = -21;
	SYMB	LINE, 3116
	MOV.W	[R7],#0FFEBH
; rs232cmd.c 3117							break;
	SYMB	LINE, 3117
	BR	_682
; rs232cmd.c 3118	
; rs232cmd.c 3119					 	case M24dBm:
	SYMB	LINE, 3119
_645:
; rs232cmd.c 3120							level = -24;
	SYMB	LINE, 3120
	MOV.W	[R7],#0FFE8H
; rs232cmd.c 3121							break;
	SYMB	LINE, 3121
	BR	_682
; rs232cmd.c 3122	
; rs232cmd.c 3123					 	case M27dBm:
	SYMB	LINE, 3123
_646:
; rs232cmd.c 3124							level = -27;
	SYMB	LINE, 3124
	MOV.W	[R7],#0FFE5H
; rs232cmd.c 3125							break;
	SYMB	LINE, 3125
	BR	_682
; rs232cmd.c 3126	
; rs232cmd.c 3127					 	case M30dBm:
	SYMB	LINE, 3127
_647:
; rs232cmd.c 3128							level = -30;
	SYMB	LINE, 3128
	MOV.W	[R7],#0FFE2H
; rs232cmd.c 3129							break;
	SYMB	LINE, 3129
	BR	_682
; rs232cmd.c 3130	
; rs232cmd.c 3131					 	case M33dBm:
	SYMB	LINE, 3131
_648:
; rs232cmd.c 3132							level = -33;
	SYMB	LINE, 3132
	MOV.W	[R7],#0FFDFH
; rs232cmd.c 3133							break;
	SYMB	LINE, 3133
	BR	_682
; rs232cmd.c 3134	
; rs232cmd.c 3135						case M36dBm:
	SYMB	LINE, 3135
_649:
; rs232cmd.c 3136							level = -36;
	SYMB	LINE, 3136
	MOV.W	[R7],#0FFDCH
; rs232cmd.c 3137							break;
	SYMB	LINE, 3137
	BR	_682
; rs232cmd.c 3138	
; rs232cmd.c 3139						default:
	SYMB	LINE, 3139
_650:
; rs232cmd.c 3140							str = SILENCEParTxt;
	SYMB	LINE, 3140
	MOV.W	R5,#SEG( _SILENCEParTxt )
	MOV.W	R4,#SOF( _SILENCEParTxt )
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3141	
; rs232cmd.c 3142							while ( *str)
	SYMB	LINE, 3142
	MOV.B	CS,#SEG( _SILENCEParTxt )
	MOV.W	R0,#SOF( _SILENCEParTxt )
	MOVC.B	R1L,[R0+]
	BEQ	_652
_651:
; rs232cmd.c 3143								rs232putchar( *str++);
	SYMB	LINE, 3143
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3142
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_651
	SYMB	LINE, 3143
_652:
; rs232cmd.c 3144	
; rs232cmd.c 3145							rs232putchar('\n');
	SYMB	LINE, 3145
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3146							return;
	SYMB	LINE, 3146
	BR	_757
	SYMB	LINE, 3019
_653:
	SYMB	LINE, 3020
	MOV.W	[R7],#0AH
; rs232cmd.c 3147						}
	SYMB	LINE, 3147
_682:
; rs232cmd.c 3148	
; rs232cmd.c 3149					rs232printf( 6, "%d\n", level);
	SYMB	LINE, 3149
	MOV.W	R0,#06H
	MOV.W	R1,[R7]
	PUSH.W	R1
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	RSEG	RS232CMD_IR
	ALIGN	1
__swtable763:
	DW	SOF _716,SEG _716
	DW	SOF _717,SEG _717
	DW	SOF _717,SEG _717
	DW	SOF _715,SEG _715
	DW	SOF _717,SEG _717
	DW	SOF _717,SEG _717
	DW	SOF _714,SEG _714
	DW	SOF _717,SEG _717
	DW	SOF _717,SEG _717
	DW	SOF _713,SEG _713
	DW	SOF _717,SEG _717
	DW	SOF _717,SEG _717
	DW	SOF _712,SEG _712
	DW	SOF _717,SEG _717
	DW	SOF _717,SEG _717
	DW	SOF _711,SEG _711
	DW	SOF _717,SEG _717
	DW	SOF _717,SEG _717
	DW	SOF _710,SEG _710
	DW	SOF _717,SEG _717
	DW	SOF _717,SEG _717
	DW	SOF _709,SEG _709
	DW	SOF _717,SEG _717
	DW	SOF _717,SEG _717
	DW	SOF _708,SEG _708
	DW	SOF _707,SEG _707
	DW	SOF _706,SEG _706
	DW	SOF _705,SEG _705
	DW	SOF _704,SEG _704
	DW	SOF _703,SEG _703
	DW	SOF _702,SEG _702
	DW	SOF _701,SEG _701
	DW	SOF _700,SEG _700
	DW	SOF _699,SEG _699
	DW	SOF _698,SEG _698
	DW	SOF _697,SEG _697
	DW	SOF _696,SEG _696
	DW	SOF _695,SEG _695
	DW	SOF _694,SEG _694
	DW	SOF _693,SEG _693
	DW	SOF _692,SEG _692
	DW	SOF _691,SEG _691
	DW	SOF _690,SEG _690
	DW	SOF _689,SEG _689
	DW	SOF _688,SEG _688
	DW	SOF _717,SEG _717
	DW	SOF _718,SEG _718
	RSEG	RS232CMD_PR
	SYMB	SOFF, 6
; rs232cmd.c 3150				}
; rs232cmd.c 3151			}
	SYMB	LINE, 3151
	BR	_757
_683:
; rs232cmd.c 3152			else
; rs232cmd.c 3153			{
; rs232cmd.c 3154				if ( ParCnt != 1)
	SYMB	LINE, 3154
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_684
; rs232cmd.c 3155					SCPIError = SyntaxErr;
	SYMB	LINE, 3155
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_757
_684:
; rs232cmd.c 3156				else
; rs232cmd.c 3157				{
; rs232cmd.c 3158					level = FindParameter( Cmd, AnalogLevelPar);
	SYMB	LINE, 3158
	MOV.W	R3,#SEG( _AnalogLevelPar )
	MOV.W	R2,#SOF( _AnalogLevelPar )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_FindParameter
	MOV.W	[R7],R0
; rs232cmd.c 3159		
; rs232cmd.c 3160					if ( level > -1)
	SYMB	LINE, 3160
	CMP.W	[R7],#0FFFFH
	BLE	_685
; rs232cmd.c 3161						level = AnalogSilence;
	SYMB	LINE, 3161
	MOV.W	[R7],#01FH
	BR	_749
_685:
; rs232cmd.c 3162					else
; rs232cmd.c 3163					{
; rs232cmd.c 3164						if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &level) != 1))
	SYMB	LINE, 3164
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_686
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	MOV.W	R0,R7
	PUSH.W	R0, R1
	SYMB	SOFF, 10
	MOV.W	R1,#SEG( _10 )
	MOV.W	R0,#SOF( _10 )
	PUSH.W	R0, R1
	SYMB	SOFF, 14
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 6
	CMP.W	R0,#01H
	BEQ	_687
_686:
; rs232cmd.c 3165							SCPIError = SyntaxErr;
	SYMB	LINE, 3165
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_749
_687:
; rs232cmd.c 3166						else
; rs232cmd.c 3167						{
; rs232cmd.c 3168							switch ( level)
	SYMB	LINE, 3168
	MOV.W	R1,[R7]
	ADD.W	R1,#024H
	CMP.W	R1,#02EH
	BG	_717
	ASL.W	R1,#02H
	MOV.B	CS,#SEG( __swtable763 )
	ADD.W	R1,#SOF( __swtable763 )
	MOVC.W	R0,[R1+]
	PUSH.W	R0
	MOVC.W	R0,[R1+]
	PUSH.W	R0
	RET
; rs232cmd.c 3169							{
; rs232cmd.c 3170							 	case 10:
; rs232cmd.c 3171									level = P10dBm;
; rs232cmd.c 3172									break;
; rs232cmd.c 3173	
; rs232cmd.c 3174							 	case 8:
	SYMB	LINE, 3174
_688:
; rs232cmd.c 3175									level = P8dBm;
	SYMB	LINE, 3175
	MOV.W	[R7],#02H
; rs232cmd.c 3176									break;
	SYMB	LINE, 3176
	BR	_749
; rs232cmd.c 3177	
; rs232cmd.c 3178							 	case 7:
	SYMB	LINE, 3178
_689:
; rs232cmd.c 3179									level = P7dBm;
	SYMB	LINE, 3179
	MOV.W	[R7],#03H
; rs232cmd.c 3180									break;
	SYMB	LINE, 3180
	BR	_749
; rs232cmd.c 3181	
; rs232cmd.c 3182							 	case 6:
	SYMB	LINE, 3182
_690:
; rs232cmd.c 3183									level = P6dBm;
	SYMB	LINE, 3183
	MOV.W	[R7],#04H
; rs232cmd.c 3184									break;
	SYMB	LINE, 3184
	BR	_749
; rs232cmd.c 3185	
; rs232cmd.c 3186							 	case 5:
	SYMB	LINE, 3186
_691:
; rs232cmd.c 3187									level = P5dBm;
	SYMB	LINE, 3187
	MOV.W	[R7],#05H
; rs232cmd.c 3188									break;
	SYMB	LINE, 3188
	BR	_749
; rs232cmd.c 3189	
; rs232cmd.c 3190							 	case 4:
	SYMB	LINE, 3190
_692:
; rs232cmd.c 3191									level = P4dBm;
	SYMB	LINE, 3191
	MOV.W	[R7],#06H
; rs232cmd.c 3192									break;
	SYMB	LINE, 3192
	BR	_749
; rs232cmd.c 3193	
; rs232cmd.c 3194							 	case 3:
	SYMB	LINE, 3194
_693:
; rs232cmd.c 3195									level = P3dBm;
	SYMB	LINE, 3195
	MOV.W	[R7],#07H
; rs232cmd.c 3196									break;
	SYMB	LINE, 3196
	BR	_749
; rs232cmd.c 3197	
; rs232cmd.c 3198							 	case 2:
	SYMB	LINE, 3198
_694:
; rs232cmd.c 3199									level = P2dBm;
	SYMB	LINE, 3199
	MOV.W	[R7],#08H
; rs232cmd.c 3200									break;
	SYMB	LINE, 3200
	BR	_749
; rs232cmd.c 3201	
; rs232cmd.c 3202							 	case 1:
	SYMB	LINE, 3202
_695:
; rs232cmd.c 3203									level = P1dBm;
	SYMB	LINE, 3203
	MOV.W	[R7],#09H
; rs232cmd.c 3204									break;
	SYMB	LINE, 3204
	BR	_749
; rs232cmd.c 3205	
; rs232cmd.c 3206							 	case 0:
	SYMB	LINE, 3206
_696:
; rs232cmd.c 3207									level = M0dBm;
	SYMB	LINE, 3207
	MOV.W	[R7],#0AH
; rs232cmd.c 3208									break;
	SYMB	LINE, 3208
	BR	_749
; rs232cmd.c 3209	
; rs232cmd.c 3210							 	case -1:
	SYMB	LINE, 3210
_697:
; rs232cmd.c 3211									level = M1dBm;
	SYMB	LINE, 3211
	MOV.W	[R7],#0BH
; rs232cmd.c 3212									break;
	SYMB	LINE, 3212
	BR	_749
; rs232cmd.c 3213	
; rs232cmd.c 3214							 	case -2:
	SYMB	LINE, 3214
_698:
; rs232cmd.c 3215									level = M2dBm;
	SYMB	LINE, 3215
	MOV.W	[R7],#0CH
; rs232cmd.c 3216									break;
	SYMB	LINE, 3216
	BR	_749
; rs232cmd.c 3217	
; rs232cmd.c 3218							 	case -3:
	SYMB	LINE, 3218
_699:
; rs232cmd.c 3219									level = M3dBm;
	SYMB	LINE, 3219
	MOV.W	[R7],#0DH
; rs232cmd.c 3220									break;
	SYMB	LINE, 3220
	BR	_749
; rs232cmd.c 3221	
; rs232cmd.c 3222							 	case -4:
	SYMB	LINE, 3222
_700:
; rs232cmd.c 3223									level = M4dBm;
	SYMB	LINE, 3223
	MOV.W	[R7],#0EH
; rs232cmd.c 3224									break;
	SYMB	LINE, 3224
	BR	_749
; rs232cmd.c 3225	
; rs232cmd.c 3226							 	case -5:
	SYMB	LINE, 3226
_701:
; rs232cmd.c 3227									level = M5dBm;
	SYMB	LINE, 3227
	MOV.W	[R7],#0FH
; rs232cmd.c 3228									break;
	SYMB	LINE, 3228
	BR	_749
; rs232cmd.c 3229	
; rs232cmd.c 3230							 	case -6:
	SYMB	LINE, 3230
_702:
; rs232cmd.c 3231									level = M6dBm;
	SYMB	LINE, 3231
	MOV.W	[R7],#010H
; rs232cmd.c 3232									break;
	SYMB	LINE, 3232
	BR	_749
; rs232cmd.c 3233	
; rs232cmd.c 3234							 	case -7:
	SYMB	LINE, 3234
_703:
; rs232cmd.c 3235									level = M7dBm;
	SYMB	LINE, 3235
	MOV.W	[R7],#011H
; rs232cmd.c 3236									break;
	SYMB	LINE, 3236
	BR	_749
; rs232cmd.c 3237	
; rs232cmd.c 3238							 	case -8:
	SYMB	LINE, 3238
_704:
; rs232cmd.c 3239									level = M8dBm;
	SYMB	LINE, 3239
	MOV.W	[R7],#012H
; rs232cmd.c 3240									break;
	SYMB	LINE, 3240
	BR	_749
; rs232cmd.c 3241	
; rs232cmd.c 3242							 	case -9:
	SYMB	LINE, 3242
_705:
; rs232cmd.c 3243									level = M9dBm;
	SYMB	LINE, 3243
	MOV.W	[R7],#013H
; rs232cmd.c 3244									break;
	SYMB	LINE, 3244
	BR	_749
; rs232cmd.c 3245	
; rs232cmd.c 3246							 	case -10:
	SYMB	LINE, 3246
_706:
; rs232cmd.c 3247									level = M10dBm;
	SYMB	LINE, 3247
	MOV.W	[R7],#014H
; rs232cmd.c 3248									break;
	SYMB	LINE, 3248
	BR	_749
; rs232cmd.c 3249	
; rs232cmd.c 3250							 	case -11:
	SYMB	LINE, 3250
_707:
; rs232cmd.c 3251									level = M11dBm;
	SYMB	LINE, 3251
	MOV.W	[R7],#015H
; rs232cmd.c 3252									break;
	SYMB	LINE, 3252
	BR	_749
; rs232cmd.c 3253	
; rs232cmd.c 3254							 	case -12:
	SYMB	LINE, 3254
_708:
; rs232cmd.c 3255									level = M12dBm;
	SYMB	LINE, 3255
	MOV.W	[R7],#016H
; rs232cmd.c 3256									break;
	SYMB	LINE, 3256
	BR	_749
; rs232cmd.c 3257	
; rs232cmd.c 3258							 	case -15:
	SYMB	LINE, 3258
_709:
; rs232cmd.c 3259									level = M15dBm;
	SYMB	LINE, 3259
	MOV.W	[R7],#017H
; rs232cmd.c 3260									break;
	SYMB	LINE, 3260
	BR	_749
; rs232cmd.c 3261	
; rs232cmd.c 3262							 	case -18:
	SYMB	LINE, 3262
_710:
; rs232cmd.c 3263									level = M18dBm;
	SYMB	LINE, 3263
	MOV.W	[R7],#018H
; rs232cmd.c 3264									break;
	SYMB	LINE, 3264
	BR	_749
; rs232cmd.c 3265	
; rs232cmd.c 3266								case -21:
	SYMB	LINE, 3266
_711:
; rs232cmd.c 3267									level = M21dBm;
	SYMB	LINE, 3267
	MOV.W	[R7],#019H
; rs232cmd.c 3268									break;
	SYMB	LINE, 3268
	BR	_749
; rs232cmd.c 3269	
; rs232cmd.c 3270							 	case -24:
	SYMB	LINE, 3270
_712:
; rs232cmd.c 3271									level = M24dBm;
	SYMB	LINE, 3271
	MOV.W	[R7],#01AH
; rs232cmd.c 3272									break;
	SYMB	LINE, 3272
	BR	_749
; rs232cmd.c 3273	
; rs232cmd.c 3274							 	case -27:
	SYMB	LINE, 3274
_713:
; rs232cmd.c 3275									level = M27dBm;
	SYMB	LINE, 3275
	MOV.W	[R7],#01BH
; rs232cmd.c 3276									break;
	SYMB	LINE, 3276
	BR	_749
; rs232cmd.c 3277	
; rs232cmd.c 3278							 	case -30:
	SYMB	LINE, 3278
_714:
; rs232cmd.c 3279									level = M30dBm;
	SYMB	LINE, 3279
	MOV.W	[R7],#01CH
; rs232cmd.c 3280									break;
	SYMB	LINE, 3280
	BR	_749
; rs232cmd.c 3281	
; rs232cmd.c 3282							 	case -33:
	SYMB	LINE, 3282
_715:
; rs232cmd.c 3283									level = M33dBm;
	SYMB	LINE, 3283
	MOV.W	[R7],#01DH
; rs232cmd.c 3284									break;
	SYMB	LINE, 3284
	BR	_749
; rs232cmd.c 3285	
; rs232cmd.c 3286								case -36:
	SYMB	LINE, 3286
_716:
; rs232cmd.c 3287									level = M36dBm;
	SYMB	LINE, 3287
	MOV.W	[R7],#01EH
; rs232cmd.c 3288									break;
	SYMB	LINE, 3288
	BR	_749
; rs232cmd.c 3289	
; rs232cmd.c 3290								default:
	SYMB	LINE, 3290
_717:
; rs232cmd.c 3291									SCPIError = DataOutOfRange;
	SYMB	LINE, 3291
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3292									return;
	SYMB	LINE, 3292
	BR	_757
	SYMB	LINE, 3170
_718:
	SYMB	LINE, 3171
	MOV.W	[R7],#01H
; rs232cmd.c 3293							}
; rs232cmd.c 3294						}
; rs232cmd.c 3295					}
	SYMB	LINE, 3295
_749:
; rs232cmd.c 3296	
; rs232cmd.c 3297					if ( SetAudioLevel( AnalogAudio, level) == FAIL)
	SYMB	LINE, 3297
	MOV.W	R0,#00H
	MOV.W	R1,[R7]
	CALL	_SetAudioLevel
	OR.W	R0,R0
	BNE	_757
; rs232cmd.c 3298						SCPIError = ExecErr;
	SYMB	LINE, 3298
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3299				}
; rs232cmd.c 3300			}
; rs232cmd.c 3301		}
; rs232cmd.c 3302	}
	SYMB	LINE, 3302
_757:
	ADDS.W	R7,#02H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3303	
; rs232cmd.c 3304	/**************************************************************************/
; rs232cmd.c 3305	/* AudioGenAnalogClick 																	 	     RS232CMD.C	*/
; rs232cmd.c 3306	/*																																				*/
; rs232cmd.c 3307	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3308	/* Revised:		000603				     																					*/
; rs232cmd.c 3309	/*																																				*/
; rs232cmd.c 3310	/* Function:	--																													*/
; rs232cmd.c 3311	/* Remarks:		--																													*/
; rs232cmd.c 3312	/* Returns:		--																													*/
; rs232cmd.c 3313	/* Updates:		--																													*/
; rs232cmd.c 3314	/**************************************************************************/
; rs232cmd.c 3315	void AudioGenAnalogClick( void)
; rs232cmd.c 3316	{
	ALIGN	1
	SYMB	LINE, 3316
	PUBLIC	_AudioGenAnalogClick
_AudioGenAnalogClick:
	SYMB	TYPE, 595, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAnalogClick", _AudioGenAnalogClick, #595, 0, 0, 0
	SYMB	ALAB, _AudioGenAnalogClick, #595
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "click", -2, #16, 130, 5
; rs232cmd.c 3317		int click;
; rs232cmd.c 3318	
; rs232cmd.c 3319		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3319
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_776
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_776
; rs232cmd.c 3320		{
; rs232cmd.c 3321			if ( CmdRequest)
	SYMB	LINE, 3321
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_765
; rs232cmd.c 3322			{
; rs232cmd.c 3323				if ( ParCnt)
	SYMB	LINE, 3323
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_764
; rs232cmd.c 3324					SCPIError = ParNotAllowed;
	SYMB	LINE, 3324
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_776
_764:
; rs232cmd.c 3325				else
; rs232cmd.c 3326					rs232printf( 6, "%d\n", AudioSetup[AnalogAudio].Click);
	SYMB	LINE, 3326
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _AudioSetup+12 )
	MOV.W	R1,#SOF( _AudioSetup+12 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 3327			}
	SYMB	LINE, 3327
	BR	_776
_765:
; rs232cmd.c 3328			else
; rs232cmd.c 3329			{
; rs232cmd.c 3330				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &click) != 1))
	SYMB	LINE, 3330
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_766
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_767
_766:
; rs232cmd.c 3331					SCPIError = SyntaxErr;
	SYMB	LINE, 3331
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_776
_767:
; rs232cmd.c 3332				else {
; rs232cmd.c 3333					if (( click != click1s) && ( click != click3s))
	SYMB	LINE, 3333
	CMP.W	[R7],#01H
	BEQ	_769
	CMP.W	[R7],#03H
	BEQ	_769
; rs232cmd.c 3334						SCPIError = DataOutOfRange;
	SYMB	LINE, 3334
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_776
_769:
; rs232cmd.c 3335					else
; rs232cmd.c 3336					{
; rs232cmd.c 3337						if ( SetAudioClick( AnalogAudio, click) == FAIL)
	SYMB	LINE, 3337
	MOV.W	R0,#00H
	MOV.W	R1,[R7]
	CALL	_SetAudioClick
	OR.W	R0,R0
	BNE	_776
; rs232cmd.c 3338							SCPIError = ExecErr;
	SYMB	LINE, 3338
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3339					}
; rs232cmd.c 3340				}
; rs232cmd.c 3341			}
; rs232cmd.c 3342		}
	SYMB	LINE, 3342
_776:
; rs232cmd.c 3343	}
	SYMB	LINE, 3343
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 3344	
; rs232cmd.c 3345	
; rs232cmd.c 3346	/**************************************************************************/
; rs232cmd.c 3347	/* AudioGenAESEBU																				 	     RS232CMD.C	*/
; rs232cmd.c 3348	/*																																				*/
; rs232cmd.c 3349	/* Author:		Kim Engedahl, DEV, 000526	    															*/
; rs232cmd.c 3350	/* Revised:		000617				     																					*/
; rs232cmd.c 3351	/*																																				*/
; rs232cmd.c 3352	/* Function:	--																													*/
; rs232cmd.c 3353	/* Remarks:		Request only.																								*/
; rs232cmd.c 3354	/* Returns:	  --																													*/
; rs232cmd.c 3355	/* Updates:		--																													*/
; rs232cmd.c 3356	/**************************************************************************/
; rs232cmd.c 3357	void AudioGenAESEBU( void)
; rs232cmd.c 3358	{
	ALIGN	1
	SYMB	LINE, 3358
	PUBLIC	_AudioGenAESEBU
_AudioGenAESEBU:
	SYMB	TYPE, 596, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBU", _AudioGenAESEBU, #596, 0, 0, 112
	SYMB	ALAB, _AudioGenAESEBU, #596
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "level", -1, #16, 130, 5
	SYMB	LTIM, "level", -1, 0, 69
; rs232cmd.c 3359		char code *str;
; rs232cmd.c 3360		int level;
; rs232cmd.c 3361	
; rs232cmd.c 3362		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3362
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_811
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_811
; rs232cmd.c 3363		{
; rs232cmd.c 3364			if ( !CmdRequest)
	SYMB	LINE, 3364
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_782
; rs232cmd.c 3365					SCPIError = SyntaxErr;
	SYMB	LINE, 3365
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_811
_782:
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3366			else
; rs232cmd.c 3367			{
; rs232cmd.c 3368				if ( ParCnt)
	SYMB	LINE, 3368
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_783
; rs232cmd.c 3369					SCPIError = ParNotAllowed;
	SYMB	LINE, 3369
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_811
_783:
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3370				else
; rs232cmd.c 3371				{
; rs232cmd.c 3372					str = AESEBUSystemPar[AudioSetup[AESEBUAudio].System].LongName;
	SYMB	LINE, 3372
	MOV.B	ES,#SEG( _AudioSetup+14 )
	MOV.W	R0,#SOF( _AudioSetup+14 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AESEBUSystemPar )
	MOV.W	R0,#SOF( _AESEBUSystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_812
	ADDS.B	CS,#01H
_812:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3373	
; rs232cmd.c 3374					while ( *str)
	SYMB	LINE, 3374
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_785
_784:
; rs232cmd.c 3375						rs232putchar( *str++);
	SYMB	LINE, 3375
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3374
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_784
	SYMB	LINE, 3375
_785:
; rs232cmd.c 3376	
; rs232cmd.c 3377					rs232putchar( ',');
	SYMB	LINE, 3377
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 3378	
; rs232cmd.c 3379					str = AudioSignalPar[AudioSetup[AESEBUAudio].Signal].LongName;
	SYMB	LINE, 3379
	MOV.B	ES,#SEG( _AudioSetup+16 )
	MOV.W	R0,#SOF( _AudioSetup+16 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOVS.W	R1,#00H
	MOV.W	R5,#SEG( _AudioSignalPar )
	MOV.W	R4,#SOF( _AudioSignalPar )
	SYMB	LTIM, "str", 19, 0, 77
	ADD.W	R4,R0
	ADDC.W	R5,R1
	MOV.B	CS,R5L
	MOVC.W	R0,[R4+]
	CMP.W	R4,#00H
	BNE	_813
	ADDS.B	CS,#01H
_813:
	MOVC.W	R1,[R4+]
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3380	
; rs232cmd.c 3381					while ( *str)
	SYMB	LINE, 3381
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_787
_786:
; rs232cmd.c 3382						rs232putchar( *str++);
	SYMB	LINE, 3382
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3381
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_786
	SYMB	LINE, 3382
_787:
	MOV.B	R0L,#02CH
; rs232cmd.c 3383	
; rs232cmd.c 3384					rs232putchar( ',');
	SYMB	LINE, 3384
	CALL	_rs232putchar
; rs232cmd.c 3385	
; rs232cmd.c 3386					str = NULL;
	SYMB	LINE, 3386
	MOV.W	R5,#00H
	MOV.W	R4,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3387	
; rs232cmd.c 3388					switch ( AudioSetup[AESEBUAudio].Level)
	SYMB	LINE, 3388
	MOV.B	ES,#SEG( _AudioSetup+18 )
	MOV.W	R0,#SOF( _AudioSetup+18 )
	MOV.W	R0,[R0]
	CMP.W	R0,#00H
	BEQ	_788
	CMP.W	R0,#01H
	BEQ	_789
	CMP.W	R0,#02H
	BEQ	_790
	CMP.W	R0,#03H
	BEQ	_791
	CMP.W	R0,#04H
	BEQ	_792
	CMP.W	R0,#05H
	BEQ	_793
	CMP.W	R0,#06H
	BEQ	_794
	BR	_795
; rs232cmd.c 3389					{
; rs232cmd.c 3390						case M0dBFS:
	SYMB	LINE, 3390
_788:
; rs232cmd.c 3391							level = 0;
	SYMB	LINE, 3391
	MOV.W	R6,#00H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3392							break;
	SYMB	LINE, 3392
	BR	_804
; rs232cmd.c 3393	
; rs232cmd.c 3394						case M9dBFS:
	SYMB	LINE, 3394
_789:
; rs232cmd.c 3395							level = -9;
	SYMB	LINE, 3395
	MOV.W	R6,#0FFF7H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3396							break;
	SYMB	LINE, 3396
	BR	_804
; rs232cmd.c 3397	
; rs232cmd.c 3398						case M12dBFS:
	SYMB	LINE, 3398
_790:
; rs232cmd.c 3399							level = -12;
	SYMB	LINE, 3399
	MOV.W	R6,#0FFF4H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3400							break;
	SYMB	LINE, 3400
	BR	_804
; rs232cmd.c 3401	
; rs232cmd.c 3402						case M15dBFS:
	SYMB	LINE, 3402
_791:
; rs232cmd.c 3403							level = -15;
	SYMB	LINE, 3403
	MOV.W	R6,#0FFF1H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3404							break;
	SYMB	LINE, 3404
	BR	_804
; rs232cmd.c 3405	
; rs232cmd.c 3406						case M16dBFS:
	SYMB	LINE, 3406
_792:
; rs232cmd.c 3407							level = -16;
	SYMB	LINE, 3407
	MOV.W	R6,#0FFF0H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3408							break;
	SYMB	LINE, 3408
	BR	_804
; rs232cmd.c 3409	
; rs232cmd.c 3410						case M18dBFS:
	SYMB	LINE, 3410
_793:
; rs232cmd.c 3411							level = -18;
	SYMB	LINE, 3411
	MOV.W	R6,#0FFEEH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3412							break;
	SYMB	LINE, 3412
	BR	_804
; rs232cmd.c 3413	
; rs232cmd.c 3414						case M21dBFS:
	SYMB	LINE, 3414
_794:
; rs232cmd.c 3415							level = -21;
	SYMB	LINE, 3415
	MOV.W	R6,#0FFEBH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3416							break;
	SYMB	LINE, 3416
	BR	_804
; rs232cmd.c 3417	
; rs232cmd.c 3418						default:
	SYMB	LINE, 3418
_795:
; rs232cmd.c 3419							str = SILENCEParTxt;
	SYMB	LINE, 3419
	MOV.W	R5,#SEG( _SILENCEParTxt )
	MOV.W	R4,#SOF( _SILENCEParTxt )
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3420	
; rs232cmd.c 3421							while ( *str)
	SYMB	LINE, 3421
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_797
_796:
; rs232cmd.c 3422								rs232putchar( *str++);
	SYMB	LINE, 3422
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3421
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_796
	SYMB	LINE, 3422
_797:
	MOV.B	R0L,#02CH
; rs232cmd.c 3423	
; rs232cmd.c 3424							rs232putchar( ',');
	SYMB	LINE, 3424
	CALL	_rs232putchar
; rs232cmd.c 3425							break;
; rs232cmd.c 3426						}
	SYMB	LINE, 3426
_804:
; rs232cmd.c 3427	
; rs232cmd.c 3428					if ( str == NULL)
	SYMB	LINE, 3428
	OR.W	R5,R4
	BNE	_805
; rs232cmd.c 3429						rs232printf( 6, "%d,", level);
	SYMB	LINE, 3429
	MOV.W	R0,#06H
	PUSH.W	R6
	SYMB	SOFF, 8
	SYMB	LTIM, "level", 26, 0, 77
	MOV.W	R3,#SEG( _529 )
	MOV.W	R2,#SOF( _529 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
_805:
; rs232cmd.c 3430	
; rs232cmd.c 3431					rs232printf( 6, "%.1f,", AudioSetup[AESEBUAudio].Timing);
	SYMB	LINE, 3431
	MOV.B	ES,#SEG( _AudioSetup+20 )
	MOV.W	R1,#SOF( _AudioSetup+20 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__SPF2DPF
	PUSH.W	R0, R1, R2, R3
	SYMB	SOFF, 14
	MOV.W	R1,#SEG( _781 )
	MOV.W	R0,#SOF( _781 )
	PUSH.W	R0, R1
	SYMB	SOFF, 18
	MOV.W	R0,#06H
	CALL	_rs232printf
	ADD.W	R7,#0CH
	SYMB	SOFF, 6
; rs232cmd.c 3432	
; rs232cmd.c 3433					str = AudioFrequencyPar[AudioSetup[AESEBUAudio].Frequency].LongName;
	SYMB	LINE, 3433
	MOV.B	ES,#SEG( _AudioSetup+24 )
	MOV.W	R0,#SOF( _AudioSetup+24 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioFrequencyPar )
	MOV.W	R0,#SOF( _AudioFrequencyPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R4,[R0+]
	CMP.W	R0,#00H
	BNE	_814
	ADDS.B	CS,#01H
_814:
	MOVC.W	R5,[R0+]
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3434	
; rs232cmd.c 3435					while ( *str)
	SYMB	LINE, 3435
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_807
_806:
; rs232cmd.c 3436						rs232putchar( *str++);
	SYMB	LINE, 3436
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3435
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_806
	SYMB	LINE, 3436
_807:
; rs232cmd.c 3437	
; rs232cmd.c 3438					rs232putchar( ',');
	SYMB	LINE, 3438
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 3439	
; rs232cmd.c 3440					rs232printf( 6, "%d\n", AudioSetup[AESEBUAudio].Click);
	SYMB	LINE, 3440
	MOV.B	ES,#SEG( _AudioSetup+26 )
	MOV.W	R0,#SOF( _AudioSetup+26 )
	MOV.W	R0,[R0]
	PUSH.W	R0
	SYMB	SOFF, 8
	MOV.W	R1,#SEG( _9 )
	MOV.W	R0,#SOF( _9 )
	PUSH.W	R0, R1
	SYMB	SOFF, 12
	MOV.W	R0,#06H
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
; rs232cmd.c 3441				}
; rs232cmd.c 3442			}
; rs232cmd.c 3443		}
	SYMB	LINE, 3443
_811:
; rs232cmd.c 3444	}
	SYMB	LINE, 3444
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3445	
; rs232cmd.c 3446	/**************************************************************************/
; rs232cmd.c 3447	/* AudioGenAESEBUSystem																	 	     RS232CMD.C	*/
; rs232cmd.c 3448	/*																																				*/
; rs232cmd.c 3449	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3450	/* Revised:		000603				     																					*/
; rs232cmd.c 3451	/*																																				*/
; rs232cmd.c 3452	/* Function:	--																													*/
; rs232cmd.c 3453	/* Remarks:		--																													*/
; rs232cmd.c 3454	/* Returns:		--																													*/
; rs232cmd.c 3455	/* Updates:		--																													*/
; rs232cmd.c 3456	/**************************************************************************/
; rs232cmd.c 3457	void AudioGenAESEBUSystem( void)
; rs232cmd.c 3458	{
	ALIGN	1
	SYMB	LINE, 3458
	PUBLIC	_AudioGenAESEBUSystem
_AudioGenAESEBUSystem:
	SYMB	TYPE, 597, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUSystem", _AudioGenAESEBUSystem, #597, 0, 0, 48
	SYMB	ALAB, _AudioGenAESEBUSystem, #597
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 3459		int system;
; rs232cmd.c 3460		char code *str;
; rs232cmd.c 3461	
; rs232cmd.c 3462		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3462
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_827
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_827
; rs232cmd.c 3463		{
; rs232cmd.c 3464			if ( CmdRequest)
	SYMB	LINE, 3464
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_818
; rs232cmd.c 3465			{
; rs232cmd.c 3466				if ( ParCnt)
	SYMB	LINE, 3466
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_815
; rs232cmd.c 3467					SCPIError = ParNotAllowed;
	SYMB	LINE, 3467
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_827
_815:
; rs232cmd.c 3468				else
; rs232cmd.c 3469				{
; rs232cmd.c 3470					str = AESEBUSystemPar[AudioSetup[AESEBUAudio].System].LongName;
	SYMB	LINE, 3470
	MOV.B	ES,#SEG( _AudioSetup+14 )
	MOV.W	R0,#SOF( _AudioSetup+14 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AESEBUSystemPar )
	MOV.W	R0,#SOF( _AESEBUSystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_828
	ADDS.B	CS,#01H
_828:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3471	
; rs232cmd.c 3472					while ( *str)
	SYMB	LINE, 3472
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_817
_816:
; rs232cmd.c 3473						rs232putchar( *str++);
	SYMB	LINE, 3473
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3472
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_816
	SYMB	LINE, 3473
_817:
; rs232cmd.c 3474	
; rs232cmd.c 3475					rs232putchar('\n');
	SYMB	LINE, 3475
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3476				}
; rs232cmd.c 3477			}
	SYMB	LINE, 3477
	BR	_827
_818:
; rs232cmd.c 3478			else
; rs232cmd.c 3479			{
; rs232cmd.c 3480				if ( ParCnt != 1)
	SYMB	LINE, 3480
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_819
; rs232cmd.c 3481					SCPIError = SyntaxErr;
	SYMB	LINE, 3481
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_827
_819:
; rs232cmd.c 3482				else
; rs232cmd.c 3483				{
; rs232cmd.c 3484					system = FindParameter( Cmd, AESEBUSystemPar);
	SYMB	LINE, 3484
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AESEBUSystemPar )
	MOV.W	R2,#SOF( _AESEBUSystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 3485		
; rs232cmd.c 3486					if ( system > -1)
	SYMB	LINE, 3486
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "system", 2, 0, 77
	SYMB	LTIM, "system", 6, 0, 205
	BLE	_820
; rs232cmd.c 3487					{
; rs232cmd.c 3488						if ( SetAudioSystem( AESEBUAudio, system) == FAIL)
	SYMB	LINE, 3488
	MOV.W	R0,#01H
	CALL	_SetAudioSystem
	SYMB	LTIM, "system", 6, 0, 77
	OR.W	R0,R0
	BNE	_827
; rs232cmd.c 3489							SCPIError = ExecErr;
	SYMB	LINE, 3489
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3490					}
	SYMB	LINE, 3490
	BR	_827
_820:
; rs232cmd.c 3491					else
; rs232cmd.c 3492						SCPIError = DataOutOfRange;
	SYMB	LINE, 3492
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3493				}
; rs232cmd.c 3494			}
; rs232cmd.c 3495		}
	SYMB	LINE, 3495
_827:
; rs232cmd.c 3496	}
	SYMB	LINE, 3496
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3497	
; rs232cmd.c 3498	/**************************************************************************/
; rs232cmd.c 3499	/* AudioGenAESEBUSignal		 															 	     RS232CMD.C	*/
; rs232cmd.c 3500	/*																																				*/
; rs232cmd.c 3501	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3502	/* Revised:		000603				     																					*/
; rs232cmd.c 3503	/*																																				*/
; rs232cmd.c 3504	/* Function:	--																													*/
; rs232cmd.c 3505	/* Remarks:		--																													*/
; rs232cmd.c 3506	/* Returns:		--																													*/
; rs232cmd.c 3507	/* Updates:		--																													*/
; rs232cmd.c 3508	/**************************************************************************/
; rs232cmd.c 3509	void AudioGenAESEBUSignal( void)
; rs232cmd.c 3510	{
	ALIGN	1
	SYMB	LINE, 3510
	PUBLIC	_AudioGenAESEBUSignal
_AudioGenAESEBUSignal:
	SYMB	TYPE, 598, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUSignal", _AudioGenAESEBUSignal, #598, 0, 0, 48
	SYMB	ALAB, _AudioGenAESEBUSignal, #598
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "signal", -1, #16, 130, 5
	SYMB	LTIM, "signal", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 3511		int signal;
; rs232cmd.c 3512		char code *str;
; rs232cmd.c 3513	
; rs232cmd.c 3514		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3514
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_843
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_843
; rs232cmd.c 3515		{
; rs232cmd.c 3516			if ( CmdRequest)
	SYMB	LINE, 3516
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_834
; rs232cmd.c 3517			{
; rs232cmd.c 3518				if ( ParCnt)
	SYMB	LINE, 3518
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_831
; rs232cmd.c 3519					SCPIError = ParNotAllowed;
	SYMB	LINE, 3519
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_843
_831:
; rs232cmd.c 3520				else
; rs232cmd.c 3521				{
; rs232cmd.c 3522					str = AudioSignalPar[AudioSetup[AESEBUAudio].Signal].LongName;
	SYMB	LINE, 3522
	MOV.B	ES,#SEG( _AudioSetup+16 )
	MOV.W	R0,#SOF( _AudioSetup+16 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioSignalPar )
	MOV.W	R0,#SOF( _AudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_844
	ADDS.B	CS,#01H
_844:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3523	
; rs232cmd.c 3524					while ( *str)
	SYMB	LINE, 3524
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_833
_832:
; rs232cmd.c 3525						rs232putchar( *str++);
	SYMB	LINE, 3525
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3524
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_832
	SYMB	LINE, 3525
_833:
; rs232cmd.c 3526	
; rs232cmd.c 3527					rs232putchar('\n');
	SYMB	LINE, 3527
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3528				}
; rs232cmd.c 3529			}
	SYMB	LINE, 3529
	BR	_843
_834:
; rs232cmd.c 3530			else
; rs232cmd.c 3531			{
; rs232cmd.c 3532				if ( ParCnt != 1)
	SYMB	LINE, 3532
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_835
; rs232cmd.c 3533					SCPIError = SyntaxErr;
	SYMB	LINE, 3533
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_843
_835:
; rs232cmd.c 3534				else
; rs232cmd.c 3535				{
; rs232cmd.c 3536					signal = FindParameter( Cmd, AudioSignalPar);
	SYMB	LINE, 3536
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AudioSignalPar )
	MOV.W	R2,#SOF( _AudioSignalPar )
	CALL	_FindParameter
	SYMB	LTIM, "signal", 2, 0, 205
; rs232cmd.c 3537		
; rs232cmd.c 3538					if ( signal > -1)
	SYMB	LINE, 3538
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "signal", 2, 0, 77
	SYMB	LTIM, "signal", 6, 0, 205
	BLE	_836
; rs232cmd.c 3539					{
; rs232cmd.c 3540						if ( SetAudioSignal( AESEBUAudio, signal) == FAIL)
	SYMB	LINE, 3540
	MOV.W	R0,#01H
	CALL	_SetAudioSignal
	SYMB	LTIM, "signal", 6, 0, 77
	OR.W	R0,R0
	BNE	_843
; rs232cmd.c 3541							SCPIError = ExecErr;
	SYMB	LINE, 3541
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3542					}
	SYMB	LINE, 3542
	BR	_843
_836:
; rs232cmd.c 3543					else
; rs232cmd.c 3544						SCPIError = DataOutOfRange;
	SYMB	LINE, 3544
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3545				}
; rs232cmd.c 3546			}
; rs232cmd.c 3547		}
	SYMB	LINE, 3547
_843:
; rs232cmd.c 3548	}
	SYMB	LINE, 3548
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3549	
; rs232cmd.c 3550	/**************************************************************************/
; rs232cmd.c 3551	/* AudioGenAESEBULevel 																	 	     RS232CMD.C	*/
; rs232cmd.c 3552	/*																																				*/
; rs232cmd.c 3553	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3554	/* Revised:		0000628				     																					*/
; rs232cmd.c 3555	/*																																				*/
; rs232cmd.c 3556	/* Function:	--																													*/
; rs232cmd.c 3557	/* Remarks:		--																													*/
; rs232cmd.c 3558	/* Returns:		--																													*/
; rs232cmd.c 3559	/* Updates:		--																													*/
; rs232cmd.c 3560	/**************************************************************************/
; rs232cmd.c 3561	void AudioGenAESEBULevel( void)
; rs232cmd.c 3562	{
	ALIGN	1
	SYMB	LINE, 3562
	PUBLIC	_AudioGenAESEBULevel
_AudioGenAESEBULevel:
	SYMB	TYPE, 599, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBULevel", _AudioGenAESEBULevel, #599, 0, 0, 48
	SYMB	ALAB, _AudioGenAESEBULevel, #599
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0EH
	SYMB	SOFF, 6
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "level", -6, #16, 130, 5
; rs232cmd.c 3563		code char *str;
; rs232cmd.c 3564		int level;
; rs232cmd.c 3565	
; rs232cmd.c 3566		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3566
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_892
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_892
; rs232cmd.c 3567		{
; rs232cmd.c 3568			if ( CmdRequest)
	SYMB	LINE, 3568
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_864
; rs232cmd.c 3569			{
; rs232cmd.c 3570				if ( ParCnt)
	SYMB	LINE, 3570
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_847
; rs232cmd.c 3571					SCPIError = ParNotAllowed;
	SYMB	LINE, 3571
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_892
_847:
; rs232cmd.c 3572				else
; rs232cmd.c 3573				{
; rs232cmd.c 3574					switch ( AudioSetup[AESEBUAudio].Level)
	SYMB	LINE, 3574
	MOV.B	ES,#SEG( _AudioSetup+18 )
	MOV.W	R0,#SOF( _AudioSetup+18 )
	MOV.W	R0,[R0]
	CMP.W	R0,#00H
	BEQ	_857
	CMP.W	R0,#01H
	BEQ	_848
	CMP.W	R0,#02H
	BEQ	_849
	CMP.W	R0,#03H
	BEQ	_850
	CMP.W	R0,#04H
	BEQ	_851
	CMP.W	R0,#05H
	BEQ	_852
	CMP.W	R0,#06H
	BEQ	_853
	BR	_854
; rs232cmd.c 3575					{
; rs232cmd.c 3576						case M0dBFS:
; rs232cmd.c 3577							level = 0;
; rs232cmd.c 3578							break;
; rs232cmd.c 3579	
; rs232cmd.c 3580						case M9dBFS:
	SYMB	LINE, 3580
_848:
; rs232cmd.c 3581							level = -9;
	SYMB	LINE, 3581
	MOV.W	[R7],#0FFF7H
; rs232cmd.c 3582							break;
	SYMB	LINE, 3582
	BR	_863
; rs232cmd.c 3583	
; rs232cmd.c 3584						case M12dBFS:
	SYMB	LINE, 3584
_849:
; rs232cmd.c 3585							level = -12;
	SYMB	LINE, 3585
	MOV.W	[R7],#0FFF4H
; rs232cmd.c 3586							break;
	SYMB	LINE, 3586
	BR	_863
; rs232cmd.c 3587	
; rs232cmd.c 3588						case M15dBFS:
	SYMB	LINE, 3588
_850:
; rs232cmd.c 3589							level = -15;
	SYMB	LINE, 3589
	MOV.W	[R7],#0FFF1H
; rs232cmd.c 3590							break;
	SYMB	LINE, 3590
	BR	_863
; rs232cmd.c 3591	
; rs232cmd.c 3592						case M16dBFS:
	SYMB	LINE, 3592
_851:
; rs232cmd.c 3593							level = -16;
	SYMB	LINE, 3593
	MOV.W	[R7],#0FFF0H
; rs232cmd.c 3594							break;
	SYMB	LINE, 3594
	BR	_863
; rs232cmd.c 3595	
; rs232cmd.c 3596						case M18dBFS:
	SYMB	LINE, 3596
_852:
; rs232cmd.c 3597							level = -18;
	SYMB	LINE, 3597
	MOV.W	[R7],#0FFEEH
; rs232cmd.c 3598							break;
	SYMB	LINE, 3598
	BR	_863
; rs232cmd.c 3599	
; rs232cmd.c 3600						case M21dBFS:
	SYMB	LINE, 3600
_853:
; rs232cmd.c 3601							level = -21;
	SYMB	LINE, 3601
	MOV.W	[R7],#0FFEBH
; rs232cmd.c 3602							break;
	SYMB	LINE, 3602
	BR	_863
; rs232cmd.c 3603	
; rs232cmd.c 3604						default:
	SYMB	LINE, 3604
_854:
; rs232cmd.c 3605							str = SILENCEParTxt;
	SYMB	LINE, 3605
	MOV.W	R5,#SEG( _SILENCEParTxt )
	MOV.W	R4,#SOF( _SILENCEParTxt )
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3606	
; rs232cmd.c 3607							while ( *str)
	SYMB	LINE, 3607
	MOV.B	CS,#SEG( _SILENCEParTxt )
	MOV.W	R0,#SOF( _SILENCEParTxt )
	MOVC.B	R1L,[R0+]
	BEQ	_856
_855:
; rs232cmd.c 3608								rs232putchar( *str++);
	SYMB	LINE, 3608
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3607
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_855
	SYMB	LINE, 3608
_856:
; rs232cmd.c 3609	
; rs232cmd.c 3610							rs232putchar('\n');
	SYMB	LINE, 3610
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3611							return;
	SYMB	LINE, 3611
	BR	_892
	SYMB	LINE, 3576
_857:
	SYMB	LINE, 3577
	MOV.W	[R7],#00H
; rs232cmd.c 3612						}
	SYMB	LINE, 3612
_863:
; rs232cmd.c 3613	
; rs232cmd.c 3614					rs232printf( 6, "%d\n", level);
	SYMB	LINE, 3614
	MOV.W	R0,#06H
	MOV.W	R1,[R7]
	PUSH.W	R1
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
; rs232cmd.c 3615				}
; rs232cmd.c 3616			}
	SYMB	LINE, 3616
	BR	_892
_864:
; rs232cmd.c 3617			else
; rs232cmd.c 3618			{
; rs232cmd.c 3619				if ( ParCnt != 1)
	SYMB	LINE, 3619
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_865
; rs232cmd.c 3620					SCPIError = SyntaxErr;
	SYMB	LINE, 3620
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_892
_865:
; rs232cmd.c 3621				else
; rs232cmd.c 3622				{
; rs232cmd.c 3623					level = FindParameter( Cmd, AESEBULevelPar);
	SYMB	LINE, 3623
	MOV.W	R3,#SEG( _AESEBULevelPar )
	MOV.W	R2,#SOF( _AESEBULevelPar )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_FindParameter
	MOV.W	[R7],R0
; rs232cmd.c 3624		
; rs232cmd.c 3625					if ( level > -1)
	SYMB	LINE, 3625
	CMP.W	[R7],#0FFFFH
	BLE	_866
; rs232cmd.c 3626						level = AESEBUSilence;
	SYMB	LINE, 3626
	MOV.W	[R7],#07H
	BR	_884
_866:
; rs232cmd.c 3627					else
; rs232cmd.c 3628					{
; rs232cmd.c 3629						if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &level) != 1))
	SYMB	LINE, 3629
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_867
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	MOV.W	R0,R7
	PUSH.W	R0, R1
	SYMB	SOFF, 10
	MOV.W	R1,#SEG( _10 )
	MOV.W	R0,#SOF( _10 )
	PUSH.W	R0, R1
	SYMB	SOFF, 14
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 6
	CMP.W	R0,#01H
	BEQ	_868
_867:
; rs232cmd.c 3630							SCPIError = SyntaxErr;
	SYMB	LINE, 3630
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_884
_868:
; rs232cmd.c 3631						else {
; rs232cmd.c 3632							switch ( level)
	SYMB	LINE, 3632
	CMP.W	[R7],#00H
	BEQ	_876
	CMP.W	[R7],#0FFF7H
	BEQ	_869
	CMP.W	[R7],#0FFF4H
	BEQ	_870
	CMP.W	[R7],#0FFF1H
	BEQ	_871
	CMP.W	[R7],#0FFF0H
	BEQ	_872
	CMP.W	[R7],#0FFEEH
	BEQ	_873
	CMP.W	[R7],#0FFEBH
	BEQ	_874
	BR	_875
; rs232cmd.c 3633							{
; rs232cmd.c 3634								case 0:
; rs232cmd.c 3635									level = M0dBFS;
; rs232cmd.c 3636									break;
; rs232cmd.c 3637	
; rs232cmd.c 3638							 	case -9:
	SYMB	LINE, 3638
_869:
; rs232cmd.c 3639									level = M9dBFS;
	SYMB	LINE, 3639
	MOV.W	[R7],#01H
; rs232cmd.c 3640									break;
	SYMB	LINE, 3640
	BR	_884
; rs232cmd.c 3641	
; rs232cmd.c 3642							 	case -12:
	SYMB	LINE, 3642
_870:
; rs232cmd.c 3643									level = M12dBFS;
	SYMB	LINE, 3643
	MOV.W	[R7],#02H
; rs232cmd.c 3644									break;
	SYMB	LINE, 3644
	BR	_884
; rs232cmd.c 3645	
; rs232cmd.c 3646							 	case -15:
	SYMB	LINE, 3646
_871:
; rs232cmd.c 3647									level = M15dBFS;
	SYMB	LINE, 3647
	MOV.W	[R7],#03H
; rs232cmd.c 3648									break;
	SYMB	LINE, 3648
	BR	_884
; rs232cmd.c 3649	
; rs232cmd.c 3650							 	case -16:
	SYMB	LINE, 3650
_872:
; rs232cmd.c 3651									level = M16dBFS;
	SYMB	LINE, 3651
	MOV.W	[R7],#04H
; rs232cmd.c 3652									break;
	SYMB	LINE, 3652
	BR	_884
; rs232cmd.c 3653	
; rs232cmd.c 3654							 	case -18:
	SYMB	LINE, 3654
_873:
; rs232cmd.c 3655									level = M18dBFS;
	SYMB	LINE, 3655
	MOV.W	[R7],#05H
; rs232cmd.c 3656									break;
	SYMB	LINE, 3656
	BR	_884
; rs232cmd.c 3657	
; rs232cmd.c 3658							 	case -21:
	SYMB	LINE, 3658
_874:
; rs232cmd.c 3659									level = M21dBFS;
	SYMB	LINE, 3659
	MOV.W	[R7],#06H
; rs232cmd.c 3660									break;
	SYMB	LINE, 3660
	BR	_884
; rs232cmd.c 3661	
; rs232cmd.c 3662								default:
	SYMB	LINE, 3662
_875:
; rs232cmd.c 3663									SCPIError = DataOutOfRange;
	SYMB	LINE, 3663
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3664									return;
	SYMB	LINE, 3664
	BR	_892
	SYMB	LINE, 3634
_876:
	SYMB	LINE, 3635
	MOV.W	[R7],#00H
; rs232cmd.c 3665							}
; rs232cmd.c 3666						}
; rs232cmd.c 3667					}
	SYMB	LINE, 3667
_884:
; rs232cmd.c 3668	
; rs232cmd.c 3669					if ( SetAudioLevel( AESEBUAudio, level) == FAIL)
	SYMB	LINE, 3669
	MOV.W	R0,#01H
	MOV.W	R1,[R7]
	CALL	_SetAudioLevel
	OR.W	R0,R0
	BNE	_892
; rs232cmd.c 3670						SCPIError = ExecErr;
	SYMB	LINE, 3670
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3671				}
; rs232cmd.c 3672			}
; rs232cmd.c 3673		}
; rs232cmd.c 3674	}
	SYMB	LINE, 3674
_892:
	ADDS.W	R7,#02H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3675	
; rs232cmd.c 3676	/**************************************************************************/
; rs232cmd.c 3677	/* AudioGenAESEBUTiming	 																 	     RS232CMD.C	*/
; rs232cmd.c 3678	/*																																				*/
; rs232cmd.c 3679	/* Author:		Kim Engedahl, DEV, 000616	    															*/
; rs232cmd.c 3680	/* Revised:		000616				     																					*/
; rs232cmd.c 3681	/*																																				*/
; rs232cmd.c 3682	/* Function:	--																													*/
; rs232cmd.c 3683	/* Remarks:		--																													*/
; rs232cmd.c 3684	/* Returns:		--																													*/
; rs232cmd.c 3685	/* Updates:		--																													*/
; rs232cmd.c 3686	/**************************************************************************/
; rs232cmd.c 3687	void AudioGenAESEBUTiming( void)
; rs232cmd.c 3688	{
	ALIGN	1
	SYMB	LINE, 3688
	PUBLIC	_AudioGenAESEBUTiming
_AudioGenAESEBUTiming:
	SYMB	TYPE, 600, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUTiming", _AudioGenAESEBUTiming, #600, 0, 0, 112
	SYMB	ALAB, _AudioGenAESEBUTiming, #600
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#014H
	SYMB	SOFF, 26
	SYMB	IDEN, "timing", -10, #10, 130, 5
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; rs232cmd.c 3689		float timing;
; rs232cmd.c 3690		int tmp;
; rs232cmd.c 3691	
; rs232cmd.c 3692		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3692
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_914
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_914
; rs232cmd.c 3693		{
; rs232cmd.c 3694			if ( CmdRequest)
	SYMB	LINE, 3694
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_903
; rs232cmd.c 3695			{
; rs232cmd.c 3696				if ( ParCnt)
	SYMB	LINE, 3696
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_902
; rs232cmd.c 3697					SCPIError = ParNotAllowed;
	SYMB	LINE, 3697
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_914
_902:
; rs232cmd.c 3698				else
; rs232cmd.c 3699					rs232printf( 6, "%.1f\n", AudioSetup[AESEBUAudio].Timing);
	SYMB	LINE, 3699
	MOV.B	ES,#SEG( _AudioSetup+20 )
	MOV.W	R1,#SOF( _AudioSetup+20 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__SPF2DPF
	PUSH.W	R0, R1, R2, R3
	SYMB	SOFF, 34
	MOV.W	R1,#SEG( _897 )
	MOV.W	R0,#SOF( _897 )
	PUSH.W	R0, R1
	SYMB	SOFF, 38
	MOV.W	R0,#06H
	CALL	_rs232printf
	ADD.W	R7,#0CH
	SYMB	SOFF, 26
; rs232cmd.c 3700			}
	SYMB	LINE, 3700
	BR	_914
_903:
; rs232cmd.c 3701			else
; rs232cmd.c 3702			{
; rs232cmd.c 3703				if (( ParCnt != 1) || ( sscanf( Cmd, "%f", &timing) != 1))
	SYMB	LINE, 3703
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_904
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+16
	PUSH.W	R2, R3
	SYMB	SOFF, 30
	MOV.W	R3,#SEG( _898 )
	MOV.W	R2,#SOF( _898 )
	PUSH.W	R2, R3
	SYMB	SOFF, 34
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 26
	CMP.W	R0,#01H
	BEQ	_905
_904:
; rs232cmd.c 3704					SCPIError = SyntaxErr;
	SYMB	LINE, 3704
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_914
_905:
; rs232cmd.c 3705				else
; rs232cmd.c 3706				{
; rs232cmd.c 3707					tmp = (int)(( timing / 0.8) + 0.5 - ( 1*( timing < 0)));
	SYMB	LINE, 3707
	MOV.W	R1,[R7+18]
	MOV.W	R0,[R7+16]
	FCALL	__SPF2DPF
	MOV.W	[R7+14],#03FE9H
	MOV.W	[R7+12],#09999H
	MOV.W	[R7+10],#09999H
	MOV.W	[R7+8],#0999AH
	LEA	R6,R7+8
	FCALL	__DIV_DPF
	MOV.W	[R7+14],#03FE0H
	MOV.W	[R7+12],#00H
	MOV.W	[R7+10],#00H
	MOV.W	[R7+8],#00H
	LEA	R6,R7+8
	FCALL	__ADD_DPF
	MOV.W	[R7+6],R3
	MOV.W	[R7+4],R2
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.W	R1,[R7+18]
	MOV.W	R0,[R7+16]
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	FCALL	__CMP_SPF
	CMP.B	R0L,#0FFH
	BNE	_917
	MOVS.W	R0,#00H
	MOVS.W	R1,#00H
	MOVS.W	R2,#00H
	MOV.W	R3,#03FF0H
	BR	_918
_917:
	MOVS.W	R0,#00H
	MOVS.W	R1,#00H
	MOVS.W	R2,#00H
	MOVS.W	R3,#00H
_918:
	MOV.W	R6,R7
	FCALL	__SUBR_DPF
	FCALL	__DPF2S
	SYMB	LTIM, "tmp", 2, 0, 205
; rs232cmd.c 3708	
; rs232cmd.c 3709					if (( tmp < -12) || ( tmp > 13))
	SYMB	LINE, 3709
	CMP.W	R0,#0FFF4H
	BLT	_906
	CMP.W	R0,#0DH
	BLE	_907
_906:
; rs232cmd.c 3710						SCPIError = DataOutOfRange;
	SYMB	LINE, 3710
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_914
_907:
; rs232cmd.c 3711					else
; rs232cmd.c 3712					{
; rs232cmd.c 3713						if ( SetAudioTiming( AESEBUAudio, timing) == FAIL)
	SYMB	LINE, 3713
	MOV.W	R0,#01H
	SYMB	LTIM, "tmp", 2, 0, 77
	MOV.W	R3,[R7+18]
	MOV.W	R2,[R7+16]
	CALL	_SetAudioTiming
	OR.W	R0,R0
	BNE	_914
; rs232cmd.c 3714							SCPIError = ExecErr;
	SYMB	LINE, 3714
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3715					}
; rs232cmd.c 3716				}
; rs232cmd.c 3717			}
; rs232cmd.c 3718		}
	SYMB	LINE, 3718
_914:
; rs232cmd.c 3719	}
	SYMB	LINE, 3719
	ADD.W	R7,#014H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 3720	
; rs232cmd.c 3721	/**************************************************************************/
; rs232cmd.c 3722	/* AudioGenAESEBUWordClock	 														 	     RS232CMD.C	*/
; rs232cmd.c 3723	/*																																				*/
; rs232cmd.c 3724	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3725	/* Revised:		000603				     																					*/
; rs232cmd.c 3726	/*																																				*/
; rs232cmd.c 3727	/* Function:	--																													*/
; rs232cmd.c 3728	/* Remarks:		--																													*/
; rs232cmd.c 3729	/* Returns:		--																													*/
; rs232cmd.c 3730	/* Updates:		--																													*/
; rs232cmd.c 3731	/**************************************************************************/
; rs232cmd.c 3732	void AudioGenAESEBUWordClock( void)
; rs232cmd.c 3733	{
	ALIGN	1
	SYMB	LINE, 3733
	PUBLIC	_AudioGenAESEBUWordClock
_AudioGenAESEBUWordClock:
	SYMB	TYPE, 601, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUWordClock", _AudioGenAESEBUWordClock, #601, 0, 0, 48
	SYMB	ALAB, _AudioGenAESEBUWordClock, #601
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "frequency", -1, #16, 130, 5
	SYMB	LTIM, "frequency", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 3734		int frequency;
; rs232cmd.c 3735		char code *str;
; rs232cmd.c 3736	
; rs232cmd.c 3737		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3737
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_933
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_933
; rs232cmd.c 3738		{
; rs232cmd.c 3739			if ( CmdRequest)
	SYMB	LINE, 3739
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_924
; rs232cmd.c 3740			{
; rs232cmd.c 3741				if ( ParCnt)
	SYMB	LINE, 3741
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_921
; rs232cmd.c 3742					SCPIError = ParNotAllowed;
	SYMB	LINE, 3742
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_933
_921:
; rs232cmd.c 3743				else
; rs232cmd.c 3744				{
; rs232cmd.c 3745					str = AudioFrequencyPar[AudioSetup[AESEBUAudio].Frequency].LongName;
	SYMB	LINE, 3745
	MOV.B	ES,#SEG( _AudioSetup+24 )
	MOV.W	R0,#SOF( _AudioSetup+24 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioFrequencyPar )
	MOV.W	R0,#SOF( _AudioFrequencyPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_934
	ADDS.B	CS,#01H
_934:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3746	
; rs232cmd.c 3747					while ( *str)
	SYMB	LINE, 3747
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_923
_922:
; rs232cmd.c 3748						rs232putchar( *str++);
	SYMB	LINE, 3748
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3747
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_922
	SYMB	LINE, 3748
_923:
; rs232cmd.c 3749	
; rs232cmd.c 3750					rs232putchar('\n');
	SYMB	LINE, 3750
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3751				}
; rs232cmd.c 3752			}
	SYMB	LINE, 3752
	BR	_933
_924:
; rs232cmd.c 3753			else
; rs232cmd.c 3754			{
; rs232cmd.c 3755				if ( ParCnt != 1)
	SYMB	LINE, 3755
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_925
; rs232cmd.c 3756					SCPIError = SyntaxErr;
	SYMB	LINE, 3756
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_933
_925:
; rs232cmd.c 3757				else
; rs232cmd.c 3758				{
; rs232cmd.c 3759					frequency = FindParameter( Cmd, AudioFrequencyPar);
	SYMB	LINE, 3759
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AudioFrequencyPar )
	MOV.W	R2,#SOF( _AudioFrequencyPar )
	CALL	_FindParameter
	SYMB	LTIM, "frequency", 2, 0, 205
; rs232cmd.c 3760		
; rs232cmd.c 3761					if ( frequency > -1)
	SYMB	LINE, 3761
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "frequency", 2, 0, 77
	SYMB	LTIM, "frequency", 6, 0, 205
	BLE	_926
; rs232cmd.c 3762					{
; rs232cmd.c 3763						if ( SetAudioWordClock( AESEBUAudio, frequency) == FAIL)
	SYMB	LINE, 3763
	MOV.W	R0,#01H
	CALL	_SetAudioWordClock
	SYMB	LTIM, "frequency", 6, 0, 77
	OR.W	R0,R0
	BNE	_933
; rs232cmd.c 3764							SCPIError = ExecErr;
	SYMB	LINE, 3764
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3765					}
	SYMB	LINE, 3765
	BR	_933
_926:
; rs232cmd.c 3766					else
; rs232cmd.c 3767						SCPIError = DataOutOfRange;
	SYMB	LINE, 3767
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3768				}
; rs232cmd.c 3769			}
; rs232cmd.c 3770		}
	SYMB	LINE, 3770
_933:
; rs232cmd.c 3771	}
	SYMB	LINE, 3771
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3772	
; rs232cmd.c 3773	/**************************************************************************/
; rs232cmd.c 3774	/* AudioGenAESEBUClick	 																 	     RS232CMD.C	*/
; rs232cmd.c 3775	/*																																				*/
; rs232cmd.c 3776	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3777	/* Revised:		000603				     																					*/
; rs232cmd.c 3778	/*																																				*/
; rs232cmd.c 3779	/* Function:	--																													*/
; rs232cmd.c 3780	/* Remarks:		--																													*/
; rs232cmd.c 3781	/* Returns:		--																													*/
; rs232cmd.c 3782	/* Updates:		--																													*/
; rs232cmd.c 3783	/**************************************************************************/
; rs232cmd.c 3784	void AudioGenAESEBUClick( void)
; rs232cmd.c 3785	{
	ALIGN	1
	SYMB	LINE, 3785
	PUBLIC	_AudioGenAESEBUClick
_AudioGenAESEBUClick:
	SYMB	TYPE, 602, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUClick", _AudioGenAESEBUClick, #602, 0, 0, 0
	SYMB	ALAB, _AudioGenAESEBUClick, #602
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "click", -2, #16, 130, 5
; rs232cmd.c 3786		int click;
; rs232cmd.c 3787	
; rs232cmd.c 3788		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3788
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_949
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_949
; rs232cmd.c 3789		{
; rs232cmd.c 3790			if ( CmdRequest)
	SYMB	LINE, 3790
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_938
; rs232cmd.c 3791			{
; rs232cmd.c 3792				if ( ParCnt)
	SYMB	LINE, 3792
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_937
; rs232cmd.c 3793					SCPIError = ParNotAllowed;
	SYMB	LINE, 3793
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_949
_937:
; rs232cmd.c 3794				else
; rs232cmd.c 3795					rs232printf( 6, "%d\n", AudioSetup[AESEBUAudio].Click);
	SYMB	LINE, 3795
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _AudioSetup+26 )
	MOV.W	R1,#SOF( _AudioSetup+26 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 3796			}
	SYMB	LINE, 3796
	BR	_949
_938:
; rs232cmd.c 3797			else
; rs232cmd.c 3798			{
; rs232cmd.c 3799				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &click) != 1))
	SYMB	LINE, 3799
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_939
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_940
_939:
; rs232cmd.c 3800					SCPIError = SyntaxErr;
	SYMB	LINE, 3800
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_949
_940:
; rs232cmd.c 3801				else
; rs232cmd.c 3802				{
; rs232cmd.c 3803					if (( click != click1s) && ( click != click3s))
	SYMB	LINE, 3803
	CMP.W	[R7],#01H
	BEQ	_942
	CMP.W	[R7],#03H
	BEQ	_942
; rs232cmd.c 3804						SCPIError = DataOutOfRange;
	SYMB	LINE, 3804
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_949
_942:
; rs232cmd.c 3805					else
; rs232cmd.c 3806					{
; rs232cmd.c 3807						if ( SetAudioClick( AESEBUAudio, click) == FAIL)
	SYMB	LINE, 3807
	MOV.W	R0,#01H
	MOV.W	R1,[R7]
	CALL	_SetAudioClick
	OR.W	R0,R0
	BNE	_949
; rs232cmd.c 3808							SCPIError = ExecErr;
	SYMB	LINE, 3808
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3809					}
; rs232cmd.c 3810				}
; rs232cmd.c 3811			}
; rs232cmd.c 3812		}
	SYMB	LINE, 3812
_949:
; rs232cmd.c 3813	}
	SYMB	LINE, 3813
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 3814	
; rs232cmd.c 3815	/**************************************************************************/
; rs232cmd.c 3816	/* FactPassword																					 	     RS232CMD.C	*/
; rs232cmd.c 3817	/*																																				*/
; rs232cmd.c 3818	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3819	/* Revised:	  000614				     																					*/
; rs232cmd.c 3820	/*																																				*/
; rs232cmd.c 3821	/* Function:	--																													*/
; rs232cmd.c 3822	/* Remarks:		--																													*/
; rs232cmd.c 3823	/* Returns:		--																													*/
; rs232cmd.c 3824	/* Updates:		--																													*/
; rs232cmd.c 3825	/**************************************************************************/
; rs232cmd.c 3826	void FactPassword( void)
; rs232cmd.c 3827	{
	ALIGN	1
	SYMB	LINE, 3827
	PUBLIC	_FactPassword
_FactPassword:
	SYMB	TYPE, 603, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactPassword", _FactPassword, #603, 0, 0, 0
	SYMB	ALAB, _FactPassword, #603
; rs232cmd.c 3828		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3828
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_970
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_970
; rs232cmd.c 3829		{
; rs232cmd.c 3830			if ( CmdRequest)
	SYMB	LINE, 3830
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_959
; rs232cmd.c 3831			{
; rs232cmd.c 3832				if ( ParCnt)
	SYMB	LINE, 3832
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_957
; rs232cmd.c 3833					SCPIError = ParNotAllowed;
	SYMB	LINE, 3833
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_957:
; rs232cmd.c 3834				else
; rs232cmd.c 3835				{
; rs232cmd.c 3836					if ( PasswordProtected)
	SYMB	LINE, 3836
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BEQ	_958
; rs232cmd.c 3837						rs232puts( "ON\n");
	SYMB	LINE, 3837
	MOV.W	R1,#SEG( _954 )
	MOV.W	R0,#SOF( _954 )
	CALL	_rs232puts
	RET
_958:
; rs232cmd.c 3838					else
; rs232cmd.c 3839						rs232puts( "OFF\n");
	SYMB	LINE, 3839
	MOV.W	R1,#SEG( _955 )
	MOV.W	R0,#SOF( _955 )
	CALL	_rs232puts
; rs232cmd.c 3840				}
; rs232cmd.c 3841			}
	SYMB	LINE, 3841
	RET
_959:
; rs232cmd.c 3842			else
; rs232cmd.c 3843			{
; rs232cmd.c 3844				if ( ParCnt != 1)
	SYMB	LINE, 3844
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_960
; rs232cmd.c 3845					SCPIError = SyntaxErr;
	SYMB	LINE, 3845
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_960:
; rs232cmd.c 3846				else
; rs232cmd.c 3847				{
; rs232cmd.c 3848					if ( !strcmp( Cmd, "ON"))
	SYMB	LINE, 3848
	MOV.W	R3,#SEG( _956 )
	MOV.W	R2,#SOF( _956 )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_strcmp
	OR.W	R0,R0
	BNE	_961
; rs232cmd.c 3849						PasswordProtected = true;
	SYMB	LINE, 3849
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	[R0],#0FFFFH
	RET
_961:
; rs232cmd.c 3850					else
; rs232cmd.c 3851						if ( !Cstrcmp( Cmd, PasswordText))
	SYMB	LINE, 3851
	MOV.W	R3,#SEG( _PasswordText )
	MOV.W	R2,#SOF( _PasswordText )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_Cstrcmp
	OR.W	R0,R0
	BNE	_962
; rs232cmd.c 3852							PasswordProtected = false;
	SYMB	LINE, 3852
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	[R0],#00H
	RET
_962:
; rs232cmd.c 3853					else
; rs232cmd.c 3854						SCPIError = IllegalParValue;
	SYMB	LINE, 3854
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#023H
; rs232cmd.c 3855				}
; rs232cmd.c 3856			}
; rs232cmd.c 3857		}
	SYMB	LINE, 3857
_970:
; rs232cmd.c 3858	}
	SYMB	LINE, 3858
	RET
	SYMB	EFUN
; rs232cmd.c 3859	
; rs232cmd.c 3860	/**************************************************************************/
; rs232cmd.c 3861	/* FactReset																						 	     RS232CMD.C	*/
; rs232cmd.c 3862	/*																																				*/
; rs232cmd.c 3863	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 3864	/* Revised:	  000914				     																					*/
; rs232cmd.c 3865	/*																																				*/
; rs232cmd.c 3866	/* Function:	--																													*/
; rs232cmd.c 3867	/* Remarks:		--																													*/
; rs232cmd.c 3868	/* Returns:		--																													*/
; rs232cmd.c 3869	/* Updates:		--																													*/
; rs232cmd.c 3870	/**************************************************************************/
; rs232cmd.c 3871	void FactReset( void)
; rs232cmd.c 3872	{
	ALIGN	1
	SYMB	LINE, 3872
	PUBLIC	_FactReset
_FactReset:
	SYMB	TYPE, 604, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactReset", _FactReset, #604, 0, 0, 16
	SYMB	ALAB, _FactReset, #604
	PUSH.W	R4
	SYMB	SOFF, 2
	SYMB	IDEN, "i", -1, #16, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
; rs232cmd.c 3873		int i;
; rs232cmd.c 3874	
; rs232cmd.c 3875		if ( !PasswordProtected)
	SYMB	LINE, 3875
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_979
; rs232cmd.c 3876		{
; rs232cmd.c 3877			if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3877
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_979
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_979
; rs232cmd.c 3878			{
; rs232cmd.c 3879				if ( CmdRequest)
	SYMB	LINE, 3879
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_972
; rs232cmd.c 3880						SCPIError = SyntaxErr;
	SYMB	LINE, 3880
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_979
_972:
; rs232cmd.c 3881				else
; rs232cmd.c 3882				{
; rs232cmd.c 3883					if ( ParCnt)
	SYMB	LINE, 3883
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_973
; rs232cmd.c 3884						SCPIError = SyntaxErr;
	SYMB	LINE, 3884
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_979
_973:
; rs232cmd.c 3885					else
; rs232cmd.c 3886					{
; rs232cmd.c 3887						GenlockDefaults();				// 
	SYMB	LINE, 3887
	CALL	_GenlockDefaults
; rs232cmd.c 3888						BBDefaults();				 			// 
	SYMB	LINE, 3888
	CALL	_BBDefaults
; rs232cmd.c 3889						CBDefaults();				 			//
	SYMB	LINE, 3889
	CALL	_CBDefaults
; rs232cmd.c 3890						AudioDefaults();				 	//
	SYMB	LINE, 3890
	CALL	_AudioDefaults
; rs232cmd.c 3891	
; rs232cmd.c 3892						GenlockInit();	 		 			// init the genlock setup
	SYMB	LINE, 3892
	CALL	_GenlockInit
; rs232cmd.c 3893						BBInit();						 			// init the black burst setups
	SYMB	LINE, 3893
	CALL	_BBInit
; rs232cmd.c 3894						CBInit();						 			// init the colorbar generator (PAL,EBU ColorBar)
	SYMB	LINE, 3894
	CALL	_CBInit
; rs232cmd.c 3895						AudioInit();				 			// init the audio setup, (this includes an AudioTimer)				
	SYMB	LINE, 3895
	CALL	_AudioInit
; rs232cmd.c 3896	
; rs232cmd.c 3897						GenlockUpdate();	 			 	// update the genlock setup.
	SYMB	LINE, 3897
	CALL	_GenlockUpdate
; rs232cmd.c 3898						CBUpdate();							 	// update the colorbar generator (PAL,EBU ColorBar)
	SYMB	LINE, 3898
	CALL	_CBUpdate
; rs232cmd.c 3899						BBUpdate();							 	// update the black burst setups
	SYMB	LINE, 3899
	CALL	_BBUpdate
; rs232cmd.c 3900						AudioUpdate();					 	// update the audio setup
	SYMB	LINE, 3900
	CALL	_AudioUpdate
; rs232cmd.c 3901	
; rs232cmd.c 3902						for ( i = 1; i <= NoOfPresets; i++)
	SYMB	LINE, 3902
	MOV.W	R4,#01H
	SYMB	LTIM, "i", 18, 0, 205
_974:
; rs232cmd.c 3903							StorePreset( i);
	SYMB	LINE, 3903
	MOV.W	R0,R4
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 2, 0, 205
	CALL	_StorePreset
	SYMB	LTIM, "i", 2, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
	SYMB	LINE, 3902
	ADDS.W	R4,#01H
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
	CMP.W	R4,#04H
	BLE	_974
; rs232cmd.c 3904	
; rs232cmd.c 3905						Settings.ActivePreset = 0;
	SYMB	LINE, 3905
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.W	[R0],#00H
; rs232cmd.c 3906						NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 3906
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	CALL	_NV_Store
; rs232cmd.c 3907					}
; rs232cmd.c 3908				}
; rs232cmd.c 3909			}
; rs232cmd.c 3910		}
	SYMB	LINE, 3910
_979:
; rs232cmd.c 3911	}
	SYMB	LINE, 3911
	POP.W	R4
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	EFUN
; rs232cmd.c 3912	
; rs232cmd.c 3913	/**************************************************************************/
; rs232cmd.c 3914	/* FactV24Command																				 	     RS232CMD.C	*/
; rs232cmd.c 3915	/*																																				*/
; rs232cmd.c 3916	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3917	/* Revised:	  000614				     																					*/
; rs232cmd.c 3918	/*																																				*/
; rs232cmd.c 3919	/* Function:	--																													*/
; rs232cmd.c 3920	/* Remarks:		--																													*/
; rs232cmd.c 3921	/* Returns:		--																													*/
; rs232cmd.c 3922	/* Updates:		--																													*/
; rs232cmd.c 3923	/**************************************************************************/
; rs232cmd.c 3924	void FactV24Command( void)
; rs232cmd.c 3925	{
	ALIGN	1
	SYMB	LINE, 3925
	PUBLIC	_FactV24Command
_FactV24Command:
	SYMB	TYPE, 605, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactV24Command", _FactV24Command, #605, 0, 0, 48
	SYMB	ALAB, _FactV24Command, #605
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#03EH
	SYMB	SOFF, 66
	SYMB	IDEN, "address", -66, #3, 130, 5
	SYMB	TYPE, 606, 'Z', #2, 29
	SYMB	IDEN, "command", -64, #606, 130, 5
	SYMB	IDEN, "result", -34, #606, 130, 5
; rs232cmd.c 3926		UC address;
; rs232cmd.c 3927		char command[30], result[30];;
; rs232cmd.c 3928	
; rs232cmd.c 3929		if ( !PasswordProtected)
	SYMB	LINE, 3929
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_996
; rs232cmd.c 3930		{
; rs232cmd.c 3931			if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3931
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_996
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_996
; rs232cmd.c 3932			{
; rs232cmd.c 3933				if ( CmdRequest)
	SYMB	LINE, 3933
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_984
; rs232cmd.c 3934					SCPIError = SyntaxErr;
	SYMB	LINE, 3934
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_996
_984:
; rs232cmd.c 3935				else
; rs232cmd.c 3936				{
; rs232cmd.c 3937					if (( ParCnt != 2) || ( sscanf( Cmd, "%d,%s", &address, command) != 2))
	SYMB	LINE, 3937
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_985
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	PUSH.W	R4, R5
	SYMB	SOFF, 70
	PUSH.W	R2, R3
	SYMB	SOFF, 74
	MOV.W	R3,#SEG( _981 )
	MOV.W	R2,#SOF( _981 )
	PUSH.W	R2, R3
	SYMB	SOFF, 78
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 66
	CMP.W	R0,#02H
	BEQ	_986
_985:
; rs232cmd.c 3938						SCPIError = SyntaxErr;
	SYMB	LINE, 3938
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_996
_986:
; rs232cmd.c 3939					else
; rs232cmd.c 3940					{
; rs232cmd.c 3941						if ( command[2] == '?')
	SYMB	LINE, 3941
	CMP.B	[R7+4],#03FH
	BNE	_988
; rs232cmd.c 3942						{
; rs232cmd.c 3943							if ( sio0SndRequest( 12, address, result, "%s", command) == OK)
	SYMB	LINE, 3943
	MOV.W	R0,#0CH
	MOV.B	R1L,[R7]
	MOVS.B	R1H,#00H
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+32
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+2
	PUSH.W	R2, R3
	SYMB	SOFF, 70
	MOV.W	R3,#SEG( _982 )
	MOV.W	R2,#SOF( _982 )
	PUSH.W	R2, R3
	SYMB	SOFF, 74
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_sio0SndRequest
	ADD.W	R7,#08H
	SYMB	SOFF, 66
	CMP.W	R0,#0FFFFH
	BNE	_987
; rs232cmd.c 3944								rs232puts( result);
	SYMB	LINE, 3944
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
	BR	_996
_987:
; rs232cmd.c 3945							else
; rs232cmd.c 3946								SCPIError = ExecErr;
	SYMB	LINE, 3946
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3947						}
	SYMB	LINE, 3947
	BR	_996
_988:
; rs232cmd.c 3948						else
; rs232cmd.c 3949						{
; rs232cmd.c 3950							if ( sio0SndCommand( 20, address, "%s;", command) == FAIL)
	SYMB	LINE, 3950
	MOV.W	R0,#014H
	MOV.B	R1L,[R7]
	MOVS.B	R1H,#00H
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+2
	PUSH.W	R2, R3
	SYMB	SOFF, 70
	MOV.W	R3,#SEG( _983 )
	MOV.W	R2,#SOF( _983 )
	PUSH.W	R2, R3
	SYMB	SOFF, 74
	CALL	_sio0SndCommand
	ADD.W	R7,#08H
	SYMB	SOFF, 66
	OR.W	R0,R0
	BNE	_996
; rs232cmd.c 3951								SCPIError = ExecErr;
	SYMB	LINE, 3951
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3952						}
; rs232cmd.c 3953					}
; rs232cmd.c 3954				}
; rs232cmd.c 3955			}
; rs232cmd.c 3956		}
	SYMB	LINE, 3956
_996:
; rs232cmd.c 3957	}
	SYMB	LINE, 3957
	ADD.W	R7,#03EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 3958	
; rs232cmd.c 3959	/**************************************************************************/
; rs232cmd.c 3960	/* FactV24Transparent																		 	     RS232CMD.C	*/
; rs232cmd.c 3961	/*																																				*/
; rs232cmd.c 3962	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 3963	/* Revised:	  000614				     																					*/
; rs232cmd.c 3964	/*																																				*/
; rs232cmd.c 3965	/* Function:	--																													*/
; rs232cmd.c 3966	/* Remarks:		--																													*/
; rs232cmd.c 3967	/* Returns:		--																													*/
; rs232cmd.c 3968	/* Updates:		--																													*/
; rs232cmd.c 3969	/**************************************************************************/
; rs232cmd.c 3970	void FactV24Transparent( void)
; rs232cmd.c 3971	{
	ALIGN	1
	SYMB	LINE, 3971
	PUBLIC	_FactV24Transparent
_FactV24Transparent:
	SYMB	TYPE, 608, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactV24Transparent", _FactV24Transparent, #608, 0, 0, 0
	SYMB	ALAB, _FactV24Transparent, #608
	SYMB	IDEN, "unit", -1, #16, 130, 5
	SYMB	LTIM, "unit", -1, 0, 69
; rs232cmd.c 3972		int unit;
; rs232cmd.c 3973	
; rs232cmd.c 3974		if ( !PasswordProtected)
	SYMB	LINE, 3974
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1007
; rs232cmd.c 3975		{
; rs232cmd.c 3976			if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3976
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1007
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1007
; rs232cmd.c 3977			{
; rs232cmd.c 3978				if ( CmdRequest)
	SYMB	LINE, 3978
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1001
; rs232cmd.c 3979					SCPIError = SyntaxErr;
	SYMB	LINE, 3979
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_1001:
; rs232cmd.c 3980				else
; rs232cmd.c 3981				{
; rs232cmd.c 3982					unit = FindParameter( Cmd, UnitPar);
	SYMB	LINE, 3982
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _UnitPar )
	MOV.W	R2,#SOF( _UnitPar )
	CALL	_FindParameter
	SYMB	LTIM, "unit", 2, 0, 205
; rs232cmd.c 3983		
; rs232cmd.c 3984					if ( unit > -1)
	SYMB	LINE, 3984
	CMP.W	R0,#0FFFFH
	BLE	_1002
; rs232cmd.c 3985						BBSPGCommunication( unit);
	SYMB	LINE, 3985
	CALL	_BBSPGCommunication
	SYMB	LTIM, "unit", 2, 0, 77
	RET
_1002:
; rs232cmd.c 3986					else
; rs232cmd.c 3987						SCPIError = DataOutOfRange;
	SYMB	LINE, 3987
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3988				}
; rs232cmd.c 3989			}
; rs232cmd.c 3990		}
	SYMB	LINE, 3990
_1007:
; rs232cmd.c 3991	}
	SYMB	LINE, 3991
	RET
	SYMB	EFUN
; rs232cmd.c 3992	
; rs232cmd.c 3993	/**************************************************************************/
; rs232cmd.c 3994	/* FactChecksumCode																			 	     RS232CMD.C	*/
; rs232cmd.c 3995	/*																																				*/
; rs232cmd.c 3996	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 3997	/* Revised:	  000705			     																						*/
; rs232cmd.c 3998	/*																																				*/
; rs232cmd.c 3999	/* Function:	--																													*/
; rs232cmd.c 4000	/* Remarks:		--																													*/
; rs232cmd.c 4001	/* Returns:		--																													*/
; rs232cmd.c 4002	/* Updates:		--																													*/
; rs232cmd.c 4003	/**************************************************************************/
; rs232cmd.c 4004	void FactChecksumCode( void)
; rs232cmd.c 4005	{
	ALIGN	1
	SYMB	LINE, 4005
	PUBLIC	_FactChecksumCode
_FactChecksumCode:
	SYMB	TYPE, 609, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumCode", _FactChecksumCode, #609, 0, 0, 48
	SYMB	ALAB, _FactChecksumCode, #609
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4006		char buffer[30];
; rs232cmd.c 4007	
; rs232cmd.c 4008		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4008
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1015
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1015
; rs232cmd.c 4009		{
; rs232cmd.c 4010			if ( CmdRequest)
	SYMB	LINE, 4010
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1011
; rs232cmd.c 4011			{
; rs232cmd.c 4012				if ( ParCnt)
	SYMB	LINE, 4012
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1010
; rs232cmd.c 4013					SCPIError = SyntaxErr;
	SYMB	LINE, 4013
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1015
_1010:
; rs232cmd.c 4014				else
; rs232cmd.c 4015				{		
; rs232cmd.c 4016					sprintf( buffer, "%u\n", ROMChecksum( StartOfPROMCode, StartOfPROMCode+SizeOfPROMCode-1));
	SYMB	LINE, 4016
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	MOV.W	R3,#03H
	MOV.W	R2,#0FFFFH
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 34
; rs232cmd.c 4017					rs232puts( buffer);
	SYMB	LINE, 4017
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4018				}
; rs232cmd.c 4019			}
	SYMB	LINE, 4019
	BR	_1015
_1011:
; rs232cmd.c 4020			else
; rs232cmd.c 4021				SCPIError = SyntaxErr;
	SYMB	LINE, 4021
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4022		}
	SYMB	LINE, 4022
_1015:
; rs232cmd.c 4023	}
	SYMB	LINE, 4023
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4024	
; rs232cmd.c 4025	/**************************************************************************/
; rs232cmd.c 4026	/* FactChecksumPLD																			 	     RS232CMD.C	*/
; rs232cmd.c 4027	/*																																				*/
; rs232cmd.c 4028	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4029	/* Revised:	  000705			     																						*/
; rs232cmd.c 4030	/*																																				*/
; rs232cmd.c 4031	/* Function:	--																													*/
; rs232cmd.c 4032	/* Remarks:		--																													*/
; rs232cmd.c 4033	/* Returns:		--																													*/
; rs232cmd.c 4034	/* Updates:		--																													*/
; rs232cmd.c 4035	/**************************************************************************/
; rs232cmd.c 4036	void FactChecksumPLD( void)
; rs232cmd.c 4037	{
	ALIGN	1
	SYMB	LINE, 4037
	PUBLIC	_FactChecksumPLD
_FactChecksumPLD:
	SYMB	TYPE, 610, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumPLD", _FactChecksumPLD, #610, 0, 0, 48
	SYMB	ALAB, _FactChecksumPLD, #610
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4038		char buffer[30];
; rs232cmd.c 4039	
; rs232cmd.c 4040		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4040
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1021
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1021
; rs232cmd.c 4041		{
; rs232cmd.c 4042			if ( CmdRequest)
	SYMB	LINE, 4042
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1017
; rs232cmd.c 4043			{
; rs232cmd.c 4044				if ( ParCnt)
	SYMB	LINE, 4044
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1016
; rs232cmd.c 4045					SCPIError = SyntaxErr;
	SYMB	LINE, 4045
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1021
_1016:
; rs232cmd.c 4046				else
; rs232cmd.c 4047				{		
; rs232cmd.c 4048					sprintf( buffer, "%u\n", ROMChecksum( StartOfPLDCode, StartOfPLDCode+SizeOfPLDCode-1));
	SYMB	LINE, 4048
	MOV.W	R1,#04H
	MOV.W	R0,#00H
	MOV.W	R3,#04H
	MOV.W	R2,#09FFFH
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 34
; rs232cmd.c 4049					rs232puts( buffer);
	SYMB	LINE, 4049
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4050				}
; rs232cmd.c 4051			}
	SYMB	LINE, 4051
	BR	_1021
_1017:
; rs232cmd.c 4052			else
; rs232cmd.c 4053				SCPIError = SyntaxErr;
	SYMB	LINE, 4053
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4054		}
	SYMB	LINE, 4054
_1021:
; rs232cmd.c 4055	}
	SYMB	LINE, 4055
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4056	
; rs232cmd.c 4057	/**************************************************************************/
; rs232cmd.c 4058	/* FactChecksumEmbAudio																	 	     RS232CMD.C	*/
; rs232cmd.c 4059	/*																																				*/
; rs232cmd.c 4060	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4061	/* Revised:	  000705			     																						*/
; rs232cmd.c 4062	/*																																				*/
; rs232cmd.c 4063	/* Function:	--																													*/
; rs232cmd.c 4064	/* Remarks:		--																													*/
; rs232cmd.c 4065	/* Returns:		--																													*/
; rs232cmd.c 4066	/* Updates:		--																													*/
; rs232cmd.c 4067	/**************************************************************************/
; rs232cmd.c 4068	void FactChecksumEmbAudio( void)
; rs232cmd.c 4069	{
	ALIGN	1
	SYMB	LINE, 4069
	PUBLIC	_FactChecksumEmbAudio
_FactChecksumEmbAudio:
	SYMB	TYPE, 611, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumEmbAudio", _FactChecksumEmbAudio, #611, 0, 0, 48
	SYMB	ALAB, _FactChecksumEmbAudio, #611
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4070		char buffer[30];
; rs232cmd.c 4071	
; rs232cmd.c 4072		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4072
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1027
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1027
; rs232cmd.c 4073		{
; rs232cmd.c 4074			if ( CmdRequest)
	SYMB	LINE, 4074
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1023
; rs232cmd.c 4075			{
; rs232cmd.c 4076				if ( ParCnt)
	SYMB	LINE, 4076
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1022
; rs232cmd.c 4077					SCPIError = SyntaxErr;
	SYMB	LINE, 4077
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1027
_1022:
; rs232cmd.c 4078				else
; rs232cmd.c 4079				{		
; rs232cmd.c 4080					sprintf( buffer, "%u\n", ROMChecksum( StartOfEmbAudioCode, StartOfEmbAudioCode+SizeOfEmbAudioCode-1));
	SYMB	LINE, 4080
	MOV.W	R1,#04H
	MOV.W	R0,#0A000H
	MOV.W	R3,#04H
	MOV.W	R2,#0C3FFH
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 34
; rs232cmd.c 4081					rs232puts( buffer);
	SYMB	LINE, 4081
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4082				}
; rs232cmd.c 4083			}
	SYMB	LINE, 4083
	BR	_1027
_1023:
; rs232cmd.c 4084			else
; rs232cmd.c 4085				SCPIError = SyntaxErr;
	SYMB	LINE, 4085
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4086		}
	SYMB	LINE, 4086
_1027:
; rs232cmd.c 4087	}
	SYMB	LINE, 4087
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4088	
; rs232cmd.c 4089	/**************************************************************************/
; rs232cmd.c 4090	/* FactChecksumPattern																	 	     RS232CMD.C	*/
; rs232cmd.c 4091	/*																																				*/
; rs232cmd.c 4092	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4093	/* Revised:	  000705			     																						*/
; rs232cmd.c 4094	/*																																				*/
; rs232cmd.c 4095	/* Function:	--																													*/
; rs232cmd.c 4096	/* Remarks:		--																													*/
; rs232cmd.c 4097	/* Returns:		--																													*/
; rs232cmd.c 4098	/* Updates:		--																													*/
; rs232cmd.c 4099	/**************************************************************************/
; rs232cmd.c 4100	void FactChecksumPattern( void)
; rs232cmd.c 4101	{
	ALIGN	1
	SYMB	LINE, 4101
	PUBLIC	_FactChecksumPattern
_FactChecksumPattern:
	SYMB	TYPE, 612, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumPattern", _FactChecksumPattern, #612, 0, 0, 48
	SYMB	ALAB, _FactChecksumPattern, #612
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4102		char buffer[30];
; rs232cmd.c 4103	
; rs232cmd.c 4104		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4104
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1033
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1033
; rs232cmd.c 4105		{
; rs232cmd.c 4106			if ( CmdRequest)
	SYMB	LINE, 4106
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1029
; rs232cmd.c 4107			{
; rs232cmd.c 4108				if ( ParCnt)
	SYMB	LINE, 4108
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1028
; rs232cmd.c 4109					SCPIError = SyntaxErr;
	SYMB	LINE, 4109
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1033
_1028:
; rs232cmd.c 4110				else
; rs232cmd.c 4111				{		
; rs232cmd.c 4112					sprintf( buffer, "%u\n", ROMChecksum( StartOfCBVideoCode, StartOfCBVideoCode+SizeOfCBVideoCode-1));
	SYMB	LINE, 4112
	MOV.W	R1,#05H
	MOV.W	R0,#00H
	MOV.W	R3,#07H
	MOV.W	R2,#0FFFFH
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 34
; rs232cmd.c 4113					rs232puts( buffer);
	SYMB	LINE, 4113
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4114				}
; rs232cmd.c 4115			}
	SYMB	LINE, 4115
	BR	_1033
_1029:
; rs232cmd.c 4116			else
; rs232cmd.c 4117				SCPIError = SyntaxErr;
	SYMB	LINE, 4117
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4118		}
	SYMB	LINE, 4118
_1033:
; rs232cmd.c 4119	}
	SYMB	LINE, 4119
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4120	
; rs232cmd.c 4121	/**************************************************************************/
; rs232cmd.c 4122	/* FactChecksumRange																		 	     RS232CMD.C	*/
; rs232cmd.c 4123	/*																																				*/
; rs232cmd.c 4124	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4125	/* Revised:	  000705			     																						*/
; rs232cmd.c 4126	/*																																				*/
; rs232cmd.c 4127	/* Function:	--																													*/
; rs232cmd.c 4128	/* Remarks:		--																													*/
; rs232cmd.c 4129	/* Returns:		--																													*/
; rs232cmd.c 4130	/* Updates:		--																													*/
; rs232cmd.c 4131	/**************************************************************************/
; rs232cmd.c 4132	void FactChecksumRange( void)
; rs232cmd.c 4133	{
	ALIGN	1
	SYMB	LINE, 4133
	PUBLIC	_FactChecksumRange
_FactChecksumRange:
	SYMB	TYPE, 613, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumRange", _FactChecksumRange, #613, 0, 0, 48
	SYMB	ALAB, _FactChecksumRange, #613
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "StartAddr", -42, #7, 130, 5
	SYMB	IDEN, "EndAddr", -38, #7, 130, 5
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4134		UL StartAddr, EndAddr;
; rs232cmd.c 4135	
; rs232cmd.c 4136		char buffer[30];
; rs232cmd.c 4137	
; rs232cmd.c 4138		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4138
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1041
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1041
; rs232cmd.c 4139		{
; rs232cmd.c 4140			if ( CmdRequest)
	SYMB	LINE, 4140
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1037
; rs232cmd.c 4141			{
; rs232cmd.c 4142				if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &StartAddr, &EndAddr)) != 2))
	SYMB	LINE, 4142
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1035
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+4
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1034 )
	MOV.W	R2,#SOF( _1034 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1036
_1035:
; rs232cmd.c 4143					SCPIError = SyntaxErr;
	SYMB	LINE, 4143
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1041
_1036:
; rs232cmd.c 4144				else
; rs232cmd.c 4145				{
; rs232cmd.c 4146					sprintf( buffer, "%u\n", ROMChecksum( StartAddr, EndAddr));
	SYMB	LINE, 4146
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	MOV.W	R3,[R7+6]
	MOV.W	R2,[R7+4]
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+8
	PUSH.W	R0
	SYMB	SOFF, 44
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 48
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 42
; rs232cmd.c 4147					rs232puts( buffer);
	SYMB	LINE, 4147
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4148				}
; rs232cmd.c 4149			}
	SYMB	LINE, 4149
	BR	_1041
_1037:
; rs232cmd.c 4150			else
; rs232cmd.c 4151				SCPIError = SyntaxErr;
	SYMB	LINE, 4151
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4152		}
	SYMB	LINE, 4152
_1041:
; rs232cmd.c 4153	}
	SYMB	LINE, 4153
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4154	
; rs232cmd.c 4155	/**************************************************************************/
; rs232cmd.c 4156	/* FactMainVersion																			 	     RS232CMD.C	*/
; rs232cmd.c 4157	/*																																				*/
; rs232cmd.c 4158	/* Author:		Kim Engedahl, DEV, 000620	    															*/
; rs232cmd.c 4159	/* Revised:	  000620				     																					*/
; rs232cmd.c 4160	/*																																				*/
; rs232cmd.c 4161	/* Function:	--																													*/
; rs232cmd.c 4162	/* Remarks:		--																													*/
; rs232cmd.c 4163	/* Returns:		--																													*/
; rs232cmd.c 4164	/* Updates:		--																													*/
; rs232cmd.c 4165	/**************************************************************************/
; rs232cmd.c 4166	void FactMainVersion( void)
; rs232cmd.c 4167	{
	ALIGN	1
	SYMB	LINE, 4167
	PUBLIC	_FactMainVersion
_FactMainVersion:
	SYMB	TYPE, 614, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainVersion", _FactMainVersion, #614, 0, 0, 48
	SYMB	ALAB, _FactMainVersion, #614
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#014H
	SYMB	SOFF, 24
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4168		char buffer[20];
; rs232cmd.c 4169	
; rs232cmd.c 4170		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4170
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1049
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1049
; rs232cmd.c 4171		{
; rs232cmd.c 4172			if ( CmdRequest)
	SYMB	LINE, 4172
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1045
; rs232cmd.c 4173			{
; rs232cmd.c 4174				if ( ParCnt)
	SYMB	LINE, 4174
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1044
; rs232cmd.c 4175					SCPIError = SyntaxErr;
	SYMB	LINE, 4175
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1049
_1044:
; rs232cmd.c 4176				else
; rs232cmd.c 4177				{
; rs232cmd.c 4178					sprintf( buffer, "%u\n", MasterSWVersion);
	SYMB	LINE, 4178
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R0,#016H
	PUSH.W	R0
	SYMB	SOFF, 26
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 30
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 24
; rs232cmd.c 4179					rs232puts( buffer);
	SYMB	LINE, 4179
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4180				}
; rs232cmd.c 4181			}
	SYMB	LINE, 4181
	BR	_1049
_1045:
; rs232cmd.c 4182			else
; rs232cmd.c 4183				SCPIError = SyntaxErr;
	SYMB	LINE, 4183
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4184		}
	SYMB	LINE, 4184
_1049:
; rs232cmd.c 4185	}
	SYMB	LINE, 4185
	ADD.W	R7,#014H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4186	
; rs232cmd.c 4187	/**************************************************************************/
; rs232cmd.c 4188	/* FactMainIDNCompany																		 	     RS232CMD.C	*/
; rs232cmd.c 4189	/*																																				*/
; rs232cmd.c 4190	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4191	/* Revised:	  000616				     																					*/
; rs232cmd.c 4192	/*																																				*/
; rs232cmd.c 4193	/* Function:	--																													*/
; rs232cmd.c 4194	/* Remarks:		--																													*/
; rs232cmd.c 4195	/* Returns:		--																													*/
; rs232cmd.c 4196	/* Updates:		--																													*/
; rs232cmd.c 4197	/**************************************************************************/
; rs232cmd.c 4198	void FactMainIDNCompany( void)
; rs232cmd.c 4199	{
	ALIGN	1
	SYMB	LINE, 4199
	PUBLIC	_FactMainIDNCompany
_FactMainIDNCompany:
	SYMB	TYPE, 615, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainIDNCompany", _FactMainIDNCompany, #615, 0, 0, 112
	SYMB	ALAB, _FactMainIDNCompany, #615
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#022H
	SYMB	SOFF, 40
	SYMB	IDEN, "Company", -40, #476, 130, 5
; rs232cmd.c 4200		char Company[33];
; rs232cmd.c 4201	
; rs232cmd.c 4202		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4202
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1060
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1060
; rs232cmd.c 4203		{
; rs232cmd.c 4204			if ( CmdRequest)
	SYMB	LINE, 4204
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1052
; rs232cmd.c 4205			{
; rs232cmd.c 4206				if ( ParCnt)
	SYMB	LINE, 4206
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1051
; rs232cmd.c 4207					SCPIError = SyntaxErr;
	SYMB	LINE, 4207
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1060
_1051:
; rs232cmd.c 4208				else
; rs232cmd.c 4209				{
; rs232cmd.c 4210					rs232puts( Calibration.Company);
	SYMB	LINE, 4210
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	CALL	_rs232puts
; rs232cmd.c 4211					rs232putchar( '\n');
	SYMB	LINE, 4211
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4212				}
; rs232cmd.c 4213			}
	SYMB	LINE, 4213
	BR	_1060
_1052:
; rs232cmd.c 4214			else
; rs232cmd.c 4215			{
; rs232cmd.c 4216				if ( !PasswordProtected)
	SYMB	LINE, 4216
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1060
; rs232cmd.c 4217				{
; rs232cmd.c 4218					if (( ParCnt != 1) || ( sscanf( Cmd, "%32s", Company) != 1))
	SYMB	LINE, 4218
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1053
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 44
	MOV.W	R3,#SEG( _1050 )
	MOV.W	R2,#SOF( _1050 )
	PUSH.W	R2, R3
	SYMB	SOFF, 48
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 40
	CMP.W	R0,#01H
	BEQ	_1054
_1053:
; rs232cmd.c 4219						SCPIError = SyntaxErr;
	SYMB	LINE, 4219
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1060
_1054:
; rs232cmd.c 4220					else
; rs232cmd.c 4221					{
; rs232cmd.c 4222						strncpy( Calibration.Company, Company, 32);
	SYMB	LINE, 4222
	MOV.W	R6,#020H
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_strncpy
; rs232cmd.c 4223	
; rs232cmd.c 4224					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4224
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	CALL	_NV_Store
; rs232cmd.c 4225					}
; rs232cmd.c 4226				}
; rs232cmd.c 4227			}
; rs232cmd.c 4228		}
	SYMB	LINE, 4228
_1060:
; rs232cmd.c 4229	}
	SYMB	LINE, 4229
	ADD.W	R7,#022H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4230	
; rs232cmd.c 4231	/**************************************************************************/
; rs232cmd.c 4232	/* FactMainIDNType																			 	     RS232CMD.C	*/
; rs232cmd.c 4233	/*																																				*/
; rs232cmd.c 4234	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4235	/* Revised:	  000616				     																					*/
; rs232cmd.c 4236	/*																																				*/
; rs232cmd.c 4237	/* Function:	--																													*/
; rs232cmd.c 4238	/* Remarks:		--																													*/
; rs232cmd.c 4239	/* Returns:		--																													*/
; rs232cmd.c 4240	/* Updates:		--																													*/
; rs232cmd.c 4241	/**************************************************************************/
; rs232cmd.c 4242	void FactMainIDNType( void)
; rs232cmd.c 4243	{
	ALIGN	1
	SYMB	LINE, 4243
	PUBLIC	_FactMainIDNType
_FactMainIDNType:
	SYMB	TYPE, 616, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainIDNType", _FactMainIDNType, #616, 0, 0, 112
	SYMB	ALAB, _FactMainIDNType, #616
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#022H
	SYMB	SOFF, 40
	SYMB	IDEN, "Type", -40, #476, 130, 5
; rs232cmd.c 4244		char Type[33];
; rs232cmd.c 4245	
; rs232cmd.c 4246		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4246
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1072
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1072
; rs232cmd.c 4247		{
; rs232cmd.c 4248			if ( CmdRequest)
	SYMB	LINE, 4248
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1064
; rs232cmd.c 4249			{
; rs232cmd.c 4250				if ( ParCnt)
	SYMB	LINE, 4250
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1063
; rs232cmd.c 4251					SCPIError = SyntaxErr;
	SYMB	LINE, 4251
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1072
_1063:
; rs232cmd.c 4252				else
; rs232cmd.c 4253				{
; rs232cmd.c 4254					rs232puts( Calibration.Type);
	SYMB	LINE, 4254
	MOV.W	R1,#SEG( _Calibration+33 )
	MOV.W	R0,#SOF( _Calibration+33 )
	CALL	_rs232puts
; rs232cmd.c 4255					rs232putchar( '\n');
	SYMB	LINE, 4255
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4256				}
; rs232cmd.c 4257			}
	SYMB	LINE, 4257
	BR	_1072
_1064:
; rs232cmd.c 4258			else
; rs232cmd.c 4259			{
; rs232cmd.c 4260				if ( !PasswordProtected)
	SYMB	LINE, 4260
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1072
; rs232cmd.c 4261				{
; rs232cmd.c 4262					if (( ParCnt != 1) || ( sscanf( Cmd, "%32s", Type) != 1))
	SYMB	LINE, 4262
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1065
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 44
	MOV.W	R3,#SEG( _1050 )
	MOV.W	R2,#SOF( _1050 )
	PUSH.W	R2, R3
	SYMB	SOFF, 48
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 40
	CMP.W	R0,#01H
	BEQ	_1066
_1065:
; rs232cmd.c 4263						SCPIError = SyntaxErr;
	SYMB	LINE, 4263
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1072
_1066:
; rs232cmd.c 4264					else
; rs232cmd.c 4265					{
; rs232cmd.c 4266						strncpy( Calibration.Type, Type, 32);
	SYMB	LINE, 4266
	MOV.W	R1,#SEG( _Calibration+33 )
	MOV.W	R0,#SOF( _Calibration+33 )
	MOV.W	R6,#020H
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_strncpy
; rs232cmd.c 4267	
; rs232cmd.c 4268					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4268
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4269					}
; rs232cmd.c 4270				}
; rs232cmd.c 4271			}
; rs232cmd.c 4272		}
	SYMB	LINE, 4272
_1072:
; rs232cmd.c 4273	}
	SYMB	LINE, 4273
	ADD.W	R7,#022H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4274	
; rs232cmd.c 4275	/**************************************************************************/
; rs232cmd.c 4276	/* FactMainIDNNumber																	 	     RS232CMD.C	*/
; rs232cmd.c 4277	/*																																				*/
; rs232cmd.c 4278	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4279	/* Revised:	  000614				     																					*/
; rs232cmd.c 4280	/*																																				*/
; rs232cmd.c 4281	/* Function:	--																													*/
; rs232cmd.c 4282	/* Remarks:		--																													*/
; rs232cmd.c 4283	/* Returns:		--																													*/
; rs232cmd.c 4284	/* Updates:		--																													*/
; rs232cmd.c 4285	/**************************************************************************/
; rs232cmd.c 4286	void FactMainIDNKUNumber( void)
; rs232cmd.c 4287	{
	ALIGN	1
	SYMB	LINE, 4287
	PUBLIC	_FactMainIDNKUNumber
_FactMainIDNKUNumber:
	SYMB	TYPE, 617, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainIDNKUNumber", _FactMainIDNKUNumber, #617, 0, 0, 112
	SYMB	ALAB, _FactMainIDNKUNumber, #617
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#0AH
	SYMB	SOFF, 16
	SYMB	TYPE, 618, 'Z', #2, 8
	SYMB	IDEN, "KUNumber", -16, #618, 130, 5
; rs232cmd.c 4288		char KUNumber[9];
; rs232cmd.c 4289	
; rs232cmd.c 4290		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4290
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1085
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1085
; rs232cmd.c 4291		{
; rs232cmd.c 4292			if ( CmdRequest)
	SYMB	LINE, 4292
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1077
; rs232cmd.c 4293			{
; rs232cmd.c 4294				if ( ParCnt)
	SYMB	LINE, 4294
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1076
; rs232cmd.c 4295					SCPIError = SyntaxErr;
	SYMB	LINE, 4295
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1085
_1076:
; rs232cmd.c 4296				else
; rs232cmd.c 4297				{
; rs232cmd.c 4298					rs232puts( Calibration.KUNumber);
	SYMB	LINE, 4298
	MOV.W	R1,#SEG( _Calibration+66 )
	MOV.W	R0,#SOF( _Calibration+66 )
	CALL	_rs232puts
; rs232cmd.c 4299					rs232putchar( '\n');
	SYMB	LINE, 4299
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4300				}
; rs232cmd.c 4301			}
	SYMB	LINE, 4301
	BR	_1085
_1077:
; rs232cmd.c 4302			else
; rs232cmd.c 4303			{
; rs232cmd.c 4304				if ( !PasswordProtected)
	SYMB	LINE, 4304
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1085
; rs232cmd.c 4305				{
; rs232cmd.c 4306					if (( ParCnt != 1) || ( sscanf( Cmd, "%8s", KUNumber) != 1))
	SYMB	LINE, 4306
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1078
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 20
	MOV.W	R3,#SEG( _1075 )
	MOV.W	R2,#SOF( _1075 )
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 16
	CMP.W	R0,#01H
	BEQ	_1079
_1078:
; rs232cmd.c 4307						SCPIError = SyntaxErr;
	SYMB	LINE, 4307
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1085
_1079:
; rs232cmd.c 4308					else
; rs232cmd.c 4309					{
; rs232cmd.c 4310						strncpy( Calibration.KUNumber, KUNumber, 9);
	SYMB	LINE, 4310
	MOV.W	R1,#SEG( _Calibration+66 )
	MOV.W	R0,#SOF( _Calibration+66 )
	MOV.W	R6,#09H
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_strncpy
; rs232cmd.c 4311	
; rs232cmd.c 4312					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4312
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4313					}
; rs232cmd.c 4314				}
; rs232cmd.c 4315			}
; rs232cmd.c 4316		}
	SYMB	LINE, 4316
_1085:
; rs232cmd.c 4317	}
	SYMB	LINE, 4317
	ADD.W	R7,#0AH
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4318	
; rs232cmd.c 4319	/**************************************************************************/
; rs232cmd.c 4320	/* FactMainIDNSWRevision																 	     RS232CMD.C	*/
; rs232cmd.c 4321	/*																																				*/
; rs232cmd.c 4322	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4323	/* Revised:	  000616				     																					*/
; rs232cmd.c 4324	/*																																				*/
; rs232cmd.c 4325	/* Function:	--																													*/
; rs232cmd.c 4326	/* Remarks:		--																													*/
; rs232cmd.c 4327	/* Returns:		--																													*/
; rs232cmd.c 4328	/* Updates:		--																													*/
; rs232cmd.c 4329	/**************************************************************************/
; rs232cmd.c 4330	void FactMainIDNSWRevision( void)
; rs232cmd.c 4331	{
	ALIGN	1
	SYMB	LINE, 4331
	PUBLIC	_FactMainIDNSWRevision
_FactMainIDNSWRevision:
	SYMB	TYPE, 620, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainIDNSWRevision", _FactMainIDNSWRevision, #620, 0, 0, 112
	SYMB	ALAB, _FactMainIDNSWRevision, #620
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#0AH
	SYMB	SOFF, 16
	SYMB	IDEN, "SWRevision", -16, #618, 130, 5
; rs232cmd.c 4332		char SWRevision[9];
; rs232cmd.c 4333	
; rs232cmd.c 4334		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4334
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1097
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1097
; rs232cmd.c 4335		{
; rs232cmd.c 4336			if ( CmdRequest)
	SYMB	LINE, 4336
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1089
; rs232cmd.c 4337			{
; rs232cmd.c 4338				if ( ParCnt)
	SYMB	LINE, 4338
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1088
; rs232cmd.c 4339					SCPIError = SyntaxErr;
	SYMB	LINE, 4339
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1097
_1088:
; rs232cmd.c 4340				else
; rs232cmd.c 4341				{
; rs232cmd.c 4342					rs232puts( Calibration.SWRevision);
	SYMB	LINE, 4342
	MOV.W	R1,#SEG( _Calibration+75 )
	MOV.W	R0,#SOF( _Calibration+75 )
	CALL	_rs232puts
; rs232cmd.c 4343					rs232putchar( '\n');
	SYMB	LINE, 4343
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4344				}
; rs232cmd.c 4345			}
	SYMB	LINE, 4345
	BR	_1097
_1089:
; rs232cmd.c 4346			else
; rs232cmd.c 4347			{
; rs232cmd.c 4348				if ( !PasswordProtected)
	SYMB	LINE, 4348
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1097
; rs232cmd.c 4349				{
; rs232cmd.c 4350					if (( ParCnt != 1) || ( sscanf( Cmd, "%8s", SWRevision) != 1))
	SYMB	LINE, 4350
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1090
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 20
	MOV.W	R3,#SEG( _1075 )
	MOV.W	R2,#SOF( _1075 )
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 16
	CMP.W	R0,#01H
	BEQ	_1091
_1090:
; rs232cmd.c 4351						SCPIError = SyntaxErr;
	SYMB	LINE, 4351
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1097
_1091:
; rs232cmd.c 4352					else
; rs232cmd.c 4353					{
; rs232cmd.c 4354						strncpy( Calibration.SWRevision, SWRevision, 8);
	SYMB	LINE, 4354
	MOV.W	R1,#SEG( _Calibration+75 )
	MOV.W	R0,#SOF( _Calibration+75 )
	MOV.W	R6,#08H
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_strncpy
; rs232cmd.c 4355	
; rs232cmd.c 4356					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4356
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4357					}
; rs232cmd.c 4358				}
; rs232cmd.c 4359			}
; rs232cmd.c 4360		}
	SYMB	LINE, 4360
_1097:
; rs232cmd.c 4361	}
	SYMB	LINE, 4361
	ADD.W	R7,#0AH
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4362	
; rs232cmd.c 4363	/**************************************************************************/
; rs232cmd.c 4364	/* FactMainSystem	 																			 	     RS232CMD.C	*/
; rs232cmd.c 4365	/*																																				*/
; rs232cmd.c 4366	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 4367	/* Revised:	  000617				     																					*/
; rs232cmd.c 4368	/*																																				*/
; rs232cmd.c 4369	/* Function:	--																													*/
; rs232cmd.c 4370	/* Remarks:		--																													*/
; rs232cmd.c 4371	/* Returns:		--																													*/
; rs232cmd.c 4372	/* Updates:		--																													*/
; rs232cmd.c 4373	/**************************************************************************/
; rs232cmd.c 4374	void FactMainSystem( void)
; rs232cmd.c 4375	{
	ALIGN	1
	SYMB	LINE, 4375
	PUBLIC	_FactMainSystem
_FactMainSystem:
	SYMB	TYPE, 621, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainSystem", _FactMainSystem, #621, 0, 0, 48
	SYMB	ALAB, _FactMainSystem, #621
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 4376		int system;
; rs232cmd.c 4377		char code *str;
; rs232cmd.c 4378	
; rs232cmd.c 4379		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4379
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1113
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1113
; rs232cmd.c 4380		{
; rs232cmd.c 4381			if ( CmdRequest)
	SYMB	LINE, 4381
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1103
; rs232cmd.c 4382			{
; rs232cmd.c 4383				if ( ParCnt)
	SYMB	LINE, 4383
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1100
; rs232cmd.c 4384					SCPIError = ParNotAllowed;
	SYMB	LINE, 4384
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_1113
_1100:
; rs232cmd.c 4385				else
; rs232cmd.c 4386				{
; rs232cmd.c 4387					str = SystemPar[Calibration.ResetSystem].LongName;
	SYMB	LINE, 4387
	MOV.B	ES,#SEG( _Calibration+97 )
	MOV.W	R0,#SOF( _Calibration+97 )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_1114
	ADDS.B	CS,#01H
_1114:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 4388	
; rs232cmd.c 4389					while ( *str)
	SYMB	LINE, 4389
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_1102
_1101:
; rs232cmd.c 4390						rs232putchar( *str++);
	SYMB	LINE, 4390
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 4389
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_1101
	SYMB	LINE, 4390
_1102:
; rs232cmd.c 4391	
; rs232cmd.c 4392					rs232putchar('\n');
	SYMB	LINE, 4392
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4393				}
; rs232cmd.c 4394			}
	SYMB	LINE, 4394
	BR	_1113
_1103:
; rs232cmd.c 4395			else
; rs232cmd.c 4396			{
; rs232cmd.c 4397				if ( ParCnt != 1)
	SYMB	LINE, 4397
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_1104
; rs232cmd.c 4398					SCPIError = SyntaxErr;
	SYMB	LINE, 4398
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1113
_1104:
; rs232cmd.c 4399				else
; rs232cmd.c 4400				{
; rs232cmd.c 4401					system = FindParameter( Cmd, SystemPar);
	SYMB	LINE, 4401
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _SystemPar )
	MOV.W	R2,#SOF( _SystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 4402	
; rs232cmd.c 4403					if ( system == PAL_PALID)						// If line7, (PAL w/ID), ever should
	SYMB	LINE, 4403
	CMP.W	R0,#01H
	BNE	_1105
; rs232cmd.c 4404						SCPIError = DataOutOfRange;				//  be supported remove this exception
	SYMB	LINE, 4404
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_1113
_1105:
	SYMB	LTIM, "system", 2, 0, 77
; rs232cmd.c 4405					else						
; rs232cmd.c 4406					{	
; rs232cmd.c 4407						if ( system > -1)
	SYMB	LINE, 4407
	CMP.W	R0,#0FFFFH
	BLE	_1106
; rs232cmd.c 4408						{
; rs232cmd.c 4409							Calibration.ResetSystem = system;
	SYMB	LINE, 4409
	MOV.B	ES,#SEG( _Calibration+97 )
	MOV.W	R1,#SOF( _Calibration+97 )
	MOV.B	[R1],R0L
; rs232cmd.c 4410	
; rs232cmd.c 4411						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4411
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4412						}
	SYMB	LINE, 4412
	BR	_1113
_1106:
; rs232cmd.c 4413						else
; rs232cmd.c 4414							SCPIError = DataOutOfRange;
	SYMB	LINE, 4414
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 4415					}
; rs232cmd.c 4416				}
; rs232cmd.c 4417			}
; rs232cmd.c 4418		}
	SYMB	LINE, 4418
_1113:
; rs232cmd.c 4419	}
	SYMB	LINE, 4419
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 4420	
; rs232cmd.c 4421	/**************************************************************************/
; rs232cmd.c 4422	/* FactMainFMSDateProd																	 	     RS232CMD.C	*/
; rs232cmd.c 4423	/*																																				*/
; rs232cmd.c 4424	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4425	/* Revised:	  0006014				     																					*/
; rs232cmd.c 4426	/*																																				*/
; rs232cmd.c 4427	/* Function:	--																													*/
; rs232cmd.c 4428	/* Remarks:		--																													*/
; rs232cmd.c 4429	/* Returns:		--																													*/
; rs232cmd.c 4430	/* Updates:		--																													*/
; rs232cmd.c 4431	/**************************************************************************/
; rs232cmd.c 4432	void FactMainFMSDateProd( void)
; rs232cmd.c 4433	{
	ALIGN	1
	SYMB	LINE, 4433
	PUBLIC	_FactMainFMSDateProd
_FactMainFMSDateProd:
	SYMB	TYPE, 622, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainFMSDateProd", _FactMainFMSDateProd, #622, 0, 0, 48
	SYMB	ALAB, _FactMainFMSDateProd, #622
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4434		UI year, month, day;
; rs232cmd.c 4435		char buffer[20];
; rs232cmd.c 4436	
; rs232cmd.c 4437		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4437
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1130
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1130
; rs232cmd.c 4438		{
; rs232cmd.c 4439			if ( CmdRequest)
	SYMB	LINE, 4439
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1120
; rs232cmd.c 4440			{
; rs232cmd.c 4441				if ( ParCnt)
	SYMB	LINE, 4441
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1119
; rs232cmd.c 4442					SCPIError = SyntaxErr;
	SYMB	LINE, 4442
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1130
_1119:
; rs232cmd.c 4443				else
; rs232cmd.c 4444				{
; rs232cmd.c 4445					day = Calibration.ProdDate % 100;
	SYMB	LINE, 4445
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R1,#SOF( _Calibration+98 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R4,#SOF( _Calibration+98 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R1,#SOF( _Calibration+98 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4446					month = ( Calibration.ProdDate / 100) % 100;
	SYMB	LINE, 4446
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4447					year = ( Calibration.ProdDate / 10000);
	SYMB	LINE, 4447
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R1,#SOF( _Calibration+98 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4448	
; rs232cmd.c 4449					sprintf( buffer, "%d,%d,%d\n", year, month, day);
	SYMB	LINE, 4449
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _183 )
	MOV.W	R0,#SOF( _183 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4450	
; rs232cmd.c 4451					rs232puts( buffer);
	SYMB	LINE, 4451
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4452				}
; rs232cmd.c 4453			}
	SYMB	LINE, 4453
	BR	_1130
_1120:
; rs232cmd.c 4454			else
; rs232cmd.c 4455			{
; rs232cmd.c 4456				if ( !PasswordProtected)
	SYMB	LINE, 4456
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1130
; rs232cmd.c 4457				{
; rs232cmd.c 4458					if (( ParCnt != 3) || (( sscanf( Cmd, "%d,%d,%d", &year, &month, &day)) != 3))
	SYMB	LINE, 4458
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1121
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1118 )
	MOV.W	R2,#SOF( _1118 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1122
_1121:
; rs232cmd.c 4459						SCPIError = SyntaxErr;
	SYMB	LINE, 4459
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1130
_1122:
; rs232cmd.c 4460					else
; rs232cmd.c 4461					{
; rs232cmd.c 4462						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4462
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1123
; rs232cmd.c 4463							SCPIError = ExecErr;
	SYMB	LINE, 4463
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1130
_1123:
; rs232cmd.c 4464						else
; rs232cmd.c 4465						{
; rs232cmd.c 4466							Calibration.ProdDate = day + 100*month + 10000*year;
	SYMB	LINE, 4466
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R2,#SOF( _Calibration+98 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4467						
; rs232cmd.c 4468						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4468
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4469						}
; rs232cmd.c 4470					}				
; rs232cmd.c 4471				}
; rs232cmd.c 4472			}
; rs232cmd.c 4473		}
	SYMB	LINE, 4473
_1130:
; rs232cmd.c 4474	}
	SYMB	LINE, 4474
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4475	
; rs232cmd.c 4476	/**************************************************************************/
; rs232cmd.c 4477	/* FactMainFMSDateUpd																		 	     RS232CMD.C	*/
; rs232cmd.c 4478	/*																																				*/
; rs232cmd.c 4479	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4480	/* Revised:	  000614				     																					*/
; rs232cmd.c 4481	/*																																				*/
; rs232cmd.c 4482	/* Function:	--																													*/
; rs232cmd.c 4483	/* Remarks:		--																													*/
; rs232cmd.c 4484	/* Returns:		--																													*/
; rs232cmd.c 4485	/* Updates:		--																													*/
; rs232cmd.c 4486	/**************************************************************************/
; rs232cmd.c 4487	void FactMainFMSDateUpd( void)
; rs232cmd.c 4488	{
	ALIGN	1
	SYMB	LINE, 4488
	PUBLIC	_FactMainFMSDateUpd
_FactMainFMSDateUpd:
	SYMB	TYPE, 623, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainFMSDateUpd", _FactMainFMSDateUpd, #623, 0, 0, 48
	SYMB	ALAB, _FactMainFMSDateUpd, #623
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4489		UI year, month, day;
; rs232cmd.c 4490		char buffer[20];
; rs232cmd.c 4491	
; rs232cmd.c 4492		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4492
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1144
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1144
; rs232cmd.c 4493		{
; rs232cmd.c 4494			if ( CmdRequest)
	SYMB	LINE, 4494
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1134
; rs232cmd.c 4495			{
; rs232cmd.c 4496				if ( ParCnt)
	SYMB	LINE, 4496
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1133
; rs232cmd.c 4497					SCPIError = SyntaxErr;
	SYMB	LINE, 4497
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1144
_1133:
; rs232cmd.c 4498				else
; rs232cmd.c 4499				{
; rs232cmd.c 4500					day = Calibration.UpdateDate % 100;
	SYMB	LINE, 4500
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R1,#SOF( _Calibration+102 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R4,#SOF( _Calibration+102 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R1,#SOF( _Calibration+102 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4501					month = ( Calibration.UpdateDate / 100) % 100;
	SYMB	LINE, 4501
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4502					year = ( Calibration.UpdateDate / 10000);
	SYMB	LINE, 4502
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R1,#SOF( _Calibration+102 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4503	
; rs232cmd.c 4504					sprintf( buffer, "%d,%d,%d\n", year, month, day);
	SYMB	LINE, 4504
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _183 )
	MOV.W	R0,#SOF( _183 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4505	
; rs232cmd.c 4506					rs232puts( buffer);
	SYMB	LINE, 4506
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4507				}
; rs232cmd.c 4508			}
	SYMB	LINE, 4508
	BR	_1144
_1134:
; rs232cmd.c 4509			else
; rs232cmd.c 4510			{
; rs232cmd.c 4511				if ( !PasswordProtected)
	SYMB	LINE, 4511
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1144
; rs232cmd.c 4512				{
; rs232cmd.c 4513					if (( ParCnt != 3) || (( sscanf( Cmd, "%d,%d,%d", &year, &month, &day)) != 3))
	SYMB	LINE, 4513
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1135
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1118 )
	MOV.W	R2,#SOF( _1118 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1136
_1135:
; rs232cmd.c 4514						SCPIError = SyntaxErr;
	SYMB	LINE, 4514
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1144
_1136:
; rs232cmd.c 4515					else
; rs232cmd.c 4516					{
; rs232cmd.c 4517						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4517
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1137
; rs232cmd.c 4518							SCPIError = ExecErr;
	SYMB	LINE, 4518
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1144
_1137:
; rs232cmd.c 4519						else
; rs232cmd.c 4520						{
; rs232cmd.c 4521							Calibration.UpdateDate = day + 100*month + 10000*year;
	SYMB	LINE, 4521
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R2,#SOF( _Calibration+102 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4522						
; rs232cmd.c 4523						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4523
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4524						}
; rs232cmd.c 4525					}				
; rs232cmd.c 4526				}
; rs232cmd.c 4527			}
; rs232cmd.c 4528		}
	SYMB	LINE, 4528
_1144:
; rs232cmd.c 4529	}
	SYMB	LINE, 4529
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4530	
; rs232cmd.c 4531	/**************************************************************************/
; rs232cmd.c 4532	/* FactGenlockGenDate		 																 	     RS232CMD.C	*/
; rs232cmd.c 4533	/*																																				*/
; rs232cmd.c 4534	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 4535	/* Revised:	  000614				     																					*/
; rs232cmd.c 4536	/*																																				*/
; rs232cmd.c 4537	/* Function:	--																													*/
; rs232cmd.c 4538	/* Remarks:		--																													*/
; rs232cmd.c 4539	/* Returns:		--																													*/
; rs232cmd.c 4540	/* Updates:		--																													*/
; rs232cmd.c 4541	/**************************************************************************/
; rs232cmd.c 4542	void FactGenlockGenDate( void)
; rs232cmd.c 4543	{
	ALIGN	1
	SYMB	LINE, 4543
	PUBLIC	_FactGenlockGenDate
_FactGenlockGenDate:
	SYMB	TYPE, 624, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenDate", _FactGenlockGenDate, #624, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenDate, #624
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4544		UI year, month, day;
; rs232cmd.c 4545		char buffer[20];
; rs232cmd.c 4546	
; rs232cmd.c 4547		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4547
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1158
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1158
; rs232cmd.c 4548		{
; rs232cmd.c 4549			if ( CmdRequest)
	SYMB	LINE, 4549
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1148
; rs232cmd.c 4550			{
; rs232cmd.c 4551				if ( ParCnt)
	SYMB	LINE, 4551
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1147
; rs232cmd.c 4552					SCPIError = SyntaxErr;
	SYMB	LINE, 4552
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1158
_1147:
; rs232cmd.c 4553				else
; rs232cmd.c 4554				{
; rs232cmd.c 4555					day = Calibration.GenlockCalibration.Date % 100;
	SYMB	LINE, 4555
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R1,#SOF( _Calibration+106 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R4,#SOF( _Calibration+106 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R1,#SOF( _Calibration+106 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4556					month = ( Calibration.GenlockCalibration.Date / 100) % 100;
	SYMB	LINE, 4556
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4557					year = ( Calibration.GenlockCalibration.Date / 10000);
	SYMB	LINE, 4557
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R1,#SOF( _Calibration+106 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4558	
; rs232cmd.c 4559					sprintf( buffer, "%d,%d,%d\n", year, month, day);
	SYMB	LINE, 4559
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _183 )
	MOV.W	R0,#SOF( _183 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4560	
; rs232cmd.c 4561					rs232puts( buffer);
	SYMB	LINE, 4561
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4562				}
; rs232cmd.c 4563			}
	SYMB	LINE, 4563
	BR	_1158
_1148:
; rs232cmd.c 4564			else
; rs232cmd.c 4565			{
; rs232cmd.c 4566				if ( !PasswordProtected)
	SYMB	LINE, 4566
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1158
; rs232cmd.c 4567				{
; rs232cmd.c 4568					if (( ParCnt != 3) || (( sscanf( Cmd, "%d,%d,%d", &year, &month, &day)) != 3))
	SYMB	LINE, 4568
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1149
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1118 )
	MOV.W	R2,#SOF( _1118 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1150
_1149:
; rs232cmd.c 4569						SCPIError = SyntaxErr;
	SYMB	LINE, 4569
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1158
_1150:
; rs232cmd.c 4570					else
; rs232cmd.c 4571					{
; rs232cmd.c 4572						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4572
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1151
; rs232cmd.c 4573							SCPIError = ExecErr;
	SYMB	LINE, 4573
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1158
_1151:
; rs232cmd.c 4574						else
; rs232cmd.c 4575						{
; rs232cmd.c 4576							Calibration.GenlockCalibration.Date = day + 100*month + 10000*year;
	SYMB	LINE, 4576
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R2,#SOF( _Calibration+106 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4577						
; rs232cmd.c 4578						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4578
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4579						}
; rs232cmd.c 4580					}				
; rs232cmd.c 4581				}
; rs232cmd.c 4582			}
; rs232cmd.c 4583		}
	SYMB	LINE, 4583
_1158:
; rs232cmd.c 4584	}
	SYMB	LINE, 4584
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4585	
; rs232cmd.c 4586	/**************************************************************************/
; rs232cmd.c 4587	/* FactGenlockGenVersion 																 	     RS232CMD.C	*/
; rs232cmd.c 4588	/*																																				*/
; rs232cmd.c 4589	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4590	/* Revised:	  000614				     																					*/
; rs232cmd.c 4591	/*																																				*/
; rs232cmd.c 4592	/* Function:	--																													*/
; rs232cmd.c 4593	/* Remarks:		--																													*/
; rs232cmd.c 4594	/* Returns:		--																													*/
; rs232cmd.c 4595	/* Updates:		--																													*/
; rs232cmd.c 4596	/**************************************************************************/
; rs232cmd.c 4597	void FactGenlockGenVersion( void)
; rs232cmd.c 4598	{
	ALIGN	1
	SYMB	LINE, 4598
	PUBLIC	_FactGenlockGenVersion
_FactGenlockGenVersion:
	SYMB	TYPE, 625, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenVersion", _FactGenlockGenVersion, #625, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenVersion, #625
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#0AH
	SYMB	SOFF, 14
	SYMB	TYPE, 626, 'Z', #2, 9
	SYMB	IDEN, "result", -14, #626, 130, 5
; rs232cmd.c 4599		char result[10];
; rs232cmd.c 4600	
; rs232cmd.c 4601		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4601
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1168
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1168
; rs232cmd.c 4602		{
; rs232cmd.c 4603			if ( CmdRequest)
	SYMB	LINE, 4603
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1163
; rs232cmd.c 4604			{
; rs232cmd.c 4605				if ( ParCnt)
	SYMB	LINE, 4605
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1161
; rs232cmd.c 4606					SCPIError = SyntaxErr;
	SYMB	LINE, 4606
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1168
_1161:
; rs232cmd.c 4607				else
; rs232cmd.c 4608				{
; rs232cmd.c 4609					if ( GenlockVersion( result) == OK)
	SYMB	LINE, 4609
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_GenlockVersion
	CMP.W	R0,#0FFFFH
	BNE	_1162
; rs232cmd.c 4610					{
; rs232cmd.c 4611						rs232puts( result);
	SYMB	LINE, 4611
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4612						rs232putchar( '\n');
	SYMB	LINE, 4612
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4613					}
	SYMB	LINE, 4613
	BR	_1168
_1162:
; rs232cmd.c 4614					else
; rs232cmd.c 4615						SCPIError = ExecErr;			
	SYMB	LINE, 4615
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 4616				}
; rs232cmd.c 4617			}
	SYMB	LINE, 4617
	BR	_1168
_1163:
; rs232cmd.c 4618			else
; rs232cmd.c 4619				SCPIError = SyntaxErr;
	SYMB	LINE, 4619
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4620		}
	SYMB	LINE, 4620
_1168:
; rs232cmd.c 4621	}
	SYMB	LINE, 4621
	ADD.W	R7,#0AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4622	
; rs232cmd.c 4623	/**************************************************************************/
; rs232cmd.c 4624	/* FactGenlockGenFRefDate																 	     RS232CMD.C	*/
; rs232cmd.c 4625	/*																																				*/
; rs232cmd.c 4626	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4627	/* Revised:	  000622				     																					*/
; rs232cmd.c 4628	/*																																				*/
; rs232cmd.c 4629	/* Function:	--																													*/
; rs232cmd.c 4630	/* Remarks:		--																													*/
; rs232cmd.c 4631	/* Returns:		--																													*/
; rs232cmd.c 4632	/* Updates:		--																													*/
; rs232cmd.c 4633	/**************************************************************************/
; rs232cmd.c 4634	void FactGenlockGenFRefDate( void)
; rs232cmd.c 4635	{
	ALIGN	1
	SYMB	LINE, 4635
	PUBLIC	_FactGenlockGenFRefDate
_FactGenlockGenFRefDate:
	SYMB	TYPE, 628, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenFRefDate", _FactGenlockGenFRefDate, #628, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenFRefDate, #628
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4636		UI year, month, day;
; rs232cmd.c 4637		char buffer[20];
; rs232cmd.c 4638	
; rs232cmd.c 4639		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4639
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1183
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1183
; rs232cmd.c 4640		{
; rs232cmd.c 4641			if ( CmdRequest)
	SYMB	LINE, 4641
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1173
; rs232cmd.c 4642			{
; rs232cmd.c 4643				if ( ParCnt)
	SYMB	LINE, 4643
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1172
; rs232cmd.c 4644					SCPIError = SyntaxErr;
	SYMB	LINE, 4644
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1183
_1172:
; rs232cmd.c 4645				else
; rs232cmd.c 4646				{
; rs232cmd.c 4647					day = Calibration.GenlockCalibration.DACFactDate % 100;
	SYMB	LINE, 4647
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R1,#SOF( _Calibration+110 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R4,#SOF( _Calibration+110 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R1,#SOF( _Calibration+110 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4648					month = ( Calibration.GenlockCalibration.DACFactDate / 100) % 100;
	SYMB	LINE, 4648
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4649					year = ( Calibration.GenlockCalibration.DACFactDate / 10000);
	SYMB	LINE, 4649
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R1,#SOF( _Calibration+110 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4650	
; rs232cmd.c 4651					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 4651
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1170 )
	MOV.W	R0,#SOF( _1170 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4652	
; rs232cmd.c 4653					rs232puts( buffer);
	SYMB	LINE, 4653
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4654				}
; rs232cmd.c 4655			}
	SYMB	LINE, 4655
	BR	_1183
_1173:
; rs232cmd.c 4656			else
; rs232cmd.c 4657			{
; rs232cmd.c 4658				if ( !PasswordProtected)
	SYMB	LINE, 4658
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1183
; rs232cmd.c 4659				{
; rs232cmd.c 4660					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 4660
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1174
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1171 )
	MOV.W	R2,#SOF( _1171 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1175
_1174:
; rs232cmd.c 4661						SCPIError = SyntaxErr;
	SYMB	LINE, 4661
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1183
_1175:
; rs232cmd.c 4662					else
; rs232cmd.c 4663					{
; rs232cmd.c 4664						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4664
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1176
; rs232cmd.c 4665							SCPIError = ExecErr;
	SYMB	LINE, 4665
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1183
_1176:
; rs232cmd.c 4666						else
; rs232cmd.c 4667						{
; rs232cmd.c 4668							Calibration.GenlockCalibration.DACFactDate = day + 100*month + 10000*year;
	SYMB	LINE, 4668
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R2,#SOF( _Calibration+110 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4669						
; rs232cmd.c 4670						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4670
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4671						}
; rs232cmd.c 4672					}				
; rs232cmd.c 4673				}
; rs232cmd.c 4674			}
; rs232cmd.c 4675		}
	SYMB	LINE, 4675
_1183:
; rs232cmd.c 4676	}
	SYMB	LINE, 4676
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4677	
; rs232cmd.c 4678	/**************************************************************************/
; rs232cmd.c 4679	/* FactGenlockGenFRefDAC 																 	     RS232CMD.C	*/
; rs232cmd.c 4680	/*																																				*/
; rs232cmd.c 4681	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4682	/* Revised:	  000622				     																					*/
; rs232cmd.c 4683	/*																																				*/
; rs232cmd.c 4684	/* Function:	--																													*/
; rs232cmd.c 4685	/* Remarks:		--																													*/
; rs232cmd.c 4686	/* Returns:		--																													*/
; rs232cmd.c 4687	/* Updates:		--																													*/
; rs232cmd.c 4688	/**************************************************************************/
; rs232cmd.c 4689	void FactGenlockGenFRefDAC( void)
; rs232cmd.c 4690	{
	ALIGN	1
	SYMB	LINE, 4690
	PUBLIC	_FactGenlockGenFRefDAC
_FactGenlockGenFRefDAC:
	SYMB	TYPE, 629, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenFRefDAC", _FactGenlockGenFRefDAC, #629, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenFRefDAC, #629
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#016H
	SYMB	SOFF, 26
	SYMB	IDEN, "buffer", -26, #563, 130, 5
	SYMB	IDEN, "DACValue", -6, #18, 130, 5
; rs232cmd.c 4691		char buffer[20];
; rs232cmd.c 4692		UI DACValue;
; rs232cmd.c 4693	
; rs232cmd.c 4694		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4694
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1196
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1196
; rs232cmd.c 4695		{
; rs232cmd.c 4696			if ( CmdRequest)
	SYMB	LINE, 4696
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1188
; rs232cmd.c 4697			{
; rs232cmd.c 4698				if ( ParCnt)
	SYMB	LINE, 4698
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1187
; rs232cmd.c 4699					SCPIError = SyntaxErr;
	SYMB	LINE, 4699
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1196
_1187:
; rs232cmd.c 4700				else
; rs232cmd.c 4701				{
; rs232cmd.c 4702					sprintf( buffer, "%u\n", Calibration.GenlockCalibration.DACFactValue);
	SYMB	LINE, 4702
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+118 )
	MOV.W	R0,#SOF( _Calibration+118 )
	MOV.W	R0,[R0]
	PUSH.W	R0
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 32
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 26
; rs232cmd.c 4703	
; rs232cmd.c 4704					rs232puts( buffer);
	SYMB	LINE, 4704
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4705				}
; rs232cmd.c 4706			}
	SYMB	LINE, 4706
	BR	_1196
_1188:
; rs232cmd.c 4707			else
; rs232cmd.c 4708			{
; rs232cmd.c 4709				if ( !PasswordProtected)
	SYMB	LINE, 4709
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1196
; rs232cmd.c 4710				{
; rs232cmd.c 4711					if (( ParCnt != 1) || (( sscanf( Cmd, "%u", &DACValue)) != 1))
	SYMB	LINE, 4711
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1189
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	PUSH.W	R2, R3
	SYMB	SOFF, 30
	MOV.W	R3,#SEG( _1186 )
	MOV.W	R2,#SOF( _1186 )
	PUSH.W	R2, R3
	SYMB	SOFF, 34
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 26
	CMP.W	R0,#01H
	BEQ	_1190
_1189:
; rs232cmd.c 4712						SCPIError = SyntaxErr;
	SYMB	LINE, 4712
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1196
_1190:
; rs232cmd.c 4713					else
; rs232cmd.c 4714					{
; rs232cmd.c 4715						Calibration.GenlockCalibration.DACFactValue = DACValue;
	SYMB	LINE, 4715
	MOV.W	R0,[R7+20]
	MOV.B	ES,#SEG( _Calibration+118 )
	MOV.W	R1,#SOF( _Calibration+118 )
	MOV.W	[R1],R0
; rs232cmd.c 4716								
; rs232cmd.c 4717						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4717
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4718					}
; rs232cmd.c 4719				}
; rs232cmd.c 4720			}
; rs232cmd.c 4721		}
	SYMB	LINE, 4721
_1196:
; rs232cmd.c 4722	}
	SYMB	LINE, 4722
	ADD.W	R7,#016H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4723	
; rs232cmd.c 4724	/**************************************************************************/
; rs232cmd.c 4725	/* FactGenlockGenURefDate																 	     RS232CMD.C	*/
; rs232cmd.c 4726	/*																																				*/
; rs232cmd.c 4727	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4728	/* Revised:	  000622				     																					*/
; rs232cmd.c 4729	/*																																				*/
; rs232cmd.c 4730	/* Function:	--																													*/
; rs232cmd.c 4731	/* Remarks:		--																													*/
; rs232cmd.c 4732	/* Returns:		--																													*/
; rs232cmd.c 4733	/* Updates:		--																													*/
; rs232cmd.c 4734	/**************************************************************************/
; rs232cmd.c 4735	void FactGenlockGenURefDate( void)
; rs232cmd.c 4736	{
	ALIGN	1
	SYMB	LINE, 4736
	PUBLIC	_FactGenlockGenURefDate
_FactGenlockGenURefDate:
	SYMB	TYPE, 630, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenURefDate", _FactGenlockGenURefDate, #630, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenURefDate, #630
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4737		UI year, month, day;
; rs232cmd.c 4738		char buffer[20];
; rs232cmd.c 4739	
; rs232cmd.c 4740		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4740
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1209
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1209
; rs232cmd.c 4741		{
; rs232cmd.c 4742			if ( CmdRequest)
	SYMB	LINE, 4742
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1200
; rs232cmd.c 4743			{
; rs232cmd.c 4744				if ( ParCnt)
	SYMB	LINE, 4744
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1199
; rs232cmd.c 4745					SCPIError = SyntaxErr;
	SYMB	LINE, 4745
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1209
_1199:
; rs232cmd.c 4746				else
; rs232cmd.c 4747				{
; rs232cmd.c 4748					day = Calibration.GenlockCalibration.DACUserDate % 100;
	SYMB	LINE, 4748
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R1,#SOF( _Calibration+114 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R4,#SOF( _Calibration+114 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R1,#SOF( _Calibration+114 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4749					month = ( Calibration.GenlockCalibration.DACUserDate / 100) % 100;
	SYMB	LINE, 4749
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4750					year = ( Calibration.GenlockCalibration.DACUserDate / 10000);
	SYMB	LINE, 4750
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R1,#SOF( _Calibration+114 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4751	
; rs232cmd.c 4752					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 4752
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1170 )
	MOV.W	R0,#SOF( _1170 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4753	
; rs232cmd.c 4754					rs232puts( buffer);
	SYMB	LINE, 4754
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4755				}
; rs232cmd.c 4756			}
	SYMB	LINE, 4756
	BR	_1209
_1200:
; rs232cmd.c 4757			else
; rs232cmd.c 4758			{
; rs232cmd.c 4759				if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 4759
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1201
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1171 )
	MOV.W	R2,#SOF( _1171 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1202
_1201:
; rs232cmd.c 4760					SCPIError = SyntaxErr;
	SYMB	LINE, 4760
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1209
_1202:
; rs232cmd.c 4761				else
; rs232cmd.c 4762				{
; rs232cmd.c 4763					if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4763
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1203
; rs232cmd.c 4764						SCPIError = ExecErr;
	SYMB	LINE, 4764
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1209
_1203:
; rs232cmd.c 4765					else
; rs232cmd.c 4766					{
; rs232cmd.c 4767						Calibration.GenlockCalibration.DACUserDate = day + 100*month + 10000*year;
	SYMB	LINE, 4767
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R2,#SOF( _Calibration+114 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4768						
; rs232cmd.c 4769					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4769
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4770					}				
; rs232cmd.c 4771				}
; rs232cmd.c 4772			}
; rs232cmd.c 4773		}
	SYMB	LINE, 4773
_1209:
; rs232cmd.c 4774	}
	SYMB	LINE, 4774
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4775	
; rs232cmd.c 4776	/**************************************************************************/
; rs232cmd.c 4777	/* FactGenlockGenURefDAC																 	     RS232CMD.C	*/
; rs232cmd.c 4778	/*																																				*/
; rs232cmd.c 4779	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4780	/* Revised:	  000622				     																					*/
; rs232cmd.c 4781	/*																																				*/
; rs232cmd.c 4782	/* Function:	--																													*/
; rs232cmd.c 4783	/* Remarks:		--																													*/
; rs232cmd.c 4784	/* Returns:		--																													*/
; rs232cmd.c 4785	/* Updates:		--																													*/
; rs232cmd.c 4786	/**************************************************************************/
; rs232cmd.c 4787	void FactGenlockGenURefDAC( void)
; rs232cmd.c 4788	{
	ALIGN	1
	SYMB	LINE, 4788
	PUBLIC	_FactGenlockGenURefDAC
_FactGenlockGenURefDAC:
	SYMB	TYPE, 631, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenURefDAC", _FactGenlockGenURefDAC, #631, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenURefDAC, #631
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#016H
	SYMB	SOFF, 26
	SYMB	IDEN, "buffer", -26, #563, 130, 5
	SYMB	IDEN, "DACValue", -6, #18, 130, 5
; rs232cmd.c 4789		char buffer[20];
; rs232cmd.c 4790		UI DACValue;
; rs232cmd.c 4791	
; rs232cmd.c 4792		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4792
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1220
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1220
; rs232cmd.c 4793		{
; rs232cmd.c 4794			if ( CmdRequest)
	SYMB	LINE, 4794
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1213
; rs232cmd.c 4795			{
; rs232cmd.c 4796				if ( ParCnt)
	SYMB	LINE, 4796
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1212
; rs232cmd.c 4797					SCPIError = SyntaxErr;
	SYMB	LINE, 4797
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1220
_1212:
; rs232cmd.c 4798				else
; rs232cmd.c 4799				{
; rs232cmd.c 4800					sprintf( buffer, "%u\n", Calibration.GenlockCalibration.DACUserValue);
	SYMB	LINE, 4800
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+120 )
	MOV.W	R0,#SOF( _Calibration+120 )
	MOV.W	R0,[R0]
	PUSH.W	R0
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 32
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 26
; rs232cmd.c 4801	
; rs232cmd.c 4802					rs232puts( buffer);
	SYMB	LINE, 4802
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4803				}
; rs232cmd.c 4804			}
	SYMB	LINE, 4804
	BR	_1220
_1213:
; rs232cmd.c 4805			else
; rs232cmd.c 4806			{
; rs232cmd.c 4807				if (( ParCnt != 1) || (( sscanf( Cmd, "%u", &DACValue)) != 1))
	SYMB	LINE, 4807
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1214
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	PUSH.W	R2, R3
	SYMB	SOFF, 30
	MOV.W	R3,#SEG( _1186 )
	MOV.W	R2,#SOF( _1186 )
	PUSH.W	R2, R3
	SYMB	SOFF, 34
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 26
	CMP.W	R0,#01H
	BEQ	_1215
_1214:
; rs232cmd.c 4808					SCPIError = SyntaxErr;
	SYMB	LINE, 4808
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1220
_1215:
; rs232cmd.c 4809				else
; rs232cmd.c 4810				{
; rs232cmd.c 4811					Calibration.GenlockCalibration.DACUserValue = DACValue;
	SYMB	LINE, 4811
	MOV.W	R0,[R7+20]
	MOV.B	ES,#SEG( _Calibration+120 )
	MOV.W	R1,#SOF( _Calibration+120 )
	MOV.W	[R1],R0
; rs232cmd.c 4812								
; rs232cmd.c 4813					NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4813
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4814				}
; rs232cmd.c 4815			}
; rs232cmd.c 4816		}
	SYMB	LINE, 4816
_1220:
; rs232cmd.c 4817	}
	SYMB	LINE, 4817
	ADD.W	R7,#016H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4818	
; rs232cmd.c 4819	/**************************************************************************/
; rs232cmd.c 4820	/* FactGenlockGenHPHZero 																 	     RS232CMD.C	*/
; rs232cmd.c 4821	/*																																				*/
; rs232cmd.c 4822	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 4823	/* Revised:	  000622				     																					*/
; rs232cmd.c 4824	/*																																				*/
; rs232cmd.c 4825	/* Function:	--																													*/
; rs232cmd.c 4826	/* Remarks:		--																													*/
; rs232cmd.c 4827	/* Returns:		--																													*/
; rs232cmd.c 4828	/* Updates:		--																													*/
; rs232cmd.c 4829	/**************************************************************************/
; rs232cmd.c 4830	void FactGenlockGenHPHZero( void)
; rs232cmd.c 4831	{
	ALIGN	1
	SYMB	LINE, 4831
	PUBLIC	_FactGenlockGenHPHZero
_FactGenlockGenHPHZero:
	SYMB	TYPE, 632, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenHPHZero", _FactGenlockGenHPHZero, #632, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenHPHZero, #632
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "buffer", -42, #606, 130, 5
	SYMB	IDEN, "HPHZeroG", -12, #7, 130, 5
	SYMB	IDEN, "HPHZeroM", -8, #7, 130, 5
; rs232cmd.c 4832		char buffer[30];
; rs232cmd.c 4833		UL HPHZeroG, HPHZeroM;
; rs232cmd.c 4834	
; rs232cmd.c 4835		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4835
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1233
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1233
; rs232cmd.c 4836		{
; rs232cmd.c 4837			if ( CmdRequest)
	SYMB	LINE, 4837
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1225
; rs232cmd.c 4838			{
; rs232cmd.c 4839				if ( ParCnt)
	SYMB	LINE, 4839
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1224
; rs232cmd.c 4840					SCPIError = SyntaxErr;
	SYMB	LINE, 4840
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1233
_1224:
; rs232cmd.c 4841				else
; rs232cmd.c 4842				{
; rs232cmd.c 4843					sprintf( buffer, "%lu,%lu\n", Calibration.GenlockCalibration.HPHZeroG, 
; rs232cmd.c 4844																		    Calibration.GenlockCalibration.HPHZeroM);
	SYMB	LINE, 4844
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+122 )
	MOV.W	R1,#SOF( _Calibration+122 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _Calibration+130 )
	MOV.W	R3,#SOF( _Calibration+130 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	PUSH.W	R0, R1
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _1223 )
	MOV.W	R0,#SOF( _1223 )
	PUSH.W	R0, R1
	SYMB	SOFF, 54
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
; rs232cmd.c 4845					rs232puts( buffer);
	SYMB	LINE, 4845
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4846				}
; rs232cmd.c 4847			}
	SYMB	LINE, 4847
	BR	_1233
_1225:
; rs232cmd.c 4848			else
; rs232cmd.c 4849			{
; rs232cmd.c 4850				if ( !PasswordProtected)
	SYMB	LINE, 4850
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1233
; rs232cmd.c 4851				{
; rs232cmd.c 4852					if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &HPHZeroG, &HPHZeroM)) != 2))
	SYMB	LINE, 4852
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1226
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+34
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1034 )
	MOV.W	R2,#SOF( _1034 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1227
_1226:
; rs232cmd.c 4853						SCPIError = SyntaxErr;
	SYMB	LINE, 4853
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1233
_1227:
; rs232cmd.c 4854					else
; rs232cmd.c 4855					{
; rs232cmd.c 4856						Calibration.GenlockCalibration.HPHZeroG = HPHZeroG;
	SYMB	LINE, 4856
	MOV.W	R1,[R7+32]
	MOV.W	R0,[R7+30]
	MOV.B	ES,#SEG( _Calibration+122 )
	MOV.W	R2,#SOF( _Calibration+122 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4857						Calibration.GenlockCalibration.HPHZeroM = HPHZeroM;
	SYMB	LINE, 4857
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	MOV.B	ES,#SEG( _Calibration+130 )
	MOV.W	R2,#SOF( _Calibration+130 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4858					
; rs232cmd.c 4859						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4859
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4860					}
; rs232cmd.c 4861				}
; rs232cmd.c 4862			}
; rs232cmd.c 4863		}
	SYMB	LINE, 4863
_1233:
; rs232cmd.c 4864	}
	SYMB	LINE, 4864
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4865	
; rs232cmd.c 4866	/**************************************************************************/
; rs232cmd.c 4867	/* FactGenlockGenPhase	 																 	     RS232CMD.C	*/
; rs232cmd.c 4868	/*																																				*/
; rs232cmd.c 4869	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 4870	/* Revised:	  000622				     																					*/
; rs232cmd.c 4871	/*																																				*/
; rs232cmd.c 4872	/* Function:	--																													*/
; rs232cmd.c 4873	/* Remarks:		--																													*/
; rs232cmd.c 4874	/* Returns:		--																													*/
; rs232cmd.c 4875	/* Updates:		--																													*/
; rs232cmd.c 4876	/**************************************************************************/
; rs232cmd.c 4877	void FactGenlockGenPhase( void)
; rs232cmd.c 4878	{
	ALIGN	1
	SYMB	LINE, 4878
	PUBLIC	_FactGenlockGenPhase
_FactGenlockGenPhase:
	SYMB	TYPE, 633, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenPhase", _FactGenlockGenPhase, #633, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenPhase, #633
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "buffer", -42, #606, 130, 5
	SYMB	IDEN, "PhaseG", -12, #7, 130, 5
	SYMB	IDEN, "PhaseM", -8, #7, 130, 5
; rs232cmd.c 4879		char buffer[30];
; rs232cmd.c 4880		UL PhaseG, PhaseM;
; rs232cmd.c 4881	
; rs232cmd.c 4882		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4882
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1245
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1245
; rs232cmd.c 4883		{
; rs232cmd.c 4884			if ( CmdRequest)
	SYMB	LINE, 4884
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1237
; rs232cmd.c 4885			{
; rs232cmd.c 4886				if ( ParCnt)
	SYMB	LINE, 4886
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1236
; rs232cmd.c 4887					SCPIError = SyntaxErr;
	SYMB	LINE, 4887
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1245
_1236:
; rs232cmd.c 4888				else
; rs232cmd.c 4889				{
; rs232cmd.c 4890					sprintf( buffer, "%lu,%lu\n", Calibration.GenlockCalibration.PhaseG, 
; rs232cmd.c 4891																		    Calibration.GenlockCalibration.PhaseM);
	SYMB	LINE, 4891
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+126 )
	MOV.W	R1,#SOF( _Calibration+126 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _Calibration+134 )
	MOV.W	R3,#SOF( _Calibration+134 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	PUSH.W	R0, R1
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _1223 )
	MOV.W	R0,#SOF( _1223 )
	PUSH.W	R0, R1
	SYMB	SOFF, 54
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
; rs232cmd.c 4892					rs232puts( buffer);
	SYMB	LINE, 4892
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4893				}
; rs232cmd.c 4894			}
	SYMB	LINE, 4894
	BR	_1245
_1237:
; rs232cmd.c 4895			else
; rs232cmd.c 4896			{
; rs232cmd.c 4897				if ( !PasswordProtected)
	SYMB	LINE, 4897
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1245
; rs232cmd.c 4898				{
; rs232cmd.c 4899					if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &PhaseG, &PhaseM)) != 2))
	SYMB	LINE, 4899
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1238
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+34
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1034 )
	MOV.W	R2,#SOF( _1034 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1239
_1238:
; rs232cmd.c 4900						SCPIError = SyntaxErr;
	SYMB	LINE, 4900
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1245
_1239:
; rs232cmd.c 4901					else
; rs232cmd.c 4902					{
; rs232cmd.c 4903						Calibration.GenlockCalibration.PhaseG = PhaseG;
	SYMB	LINE, 4903
	MOV.W	R1,[R7+32]
	MOV.W	R0,[R7+30]
	MOV.B	ES,#SEG( _Calibration+126 )
	MOV.W	R2,#SOF( _Calibration+126 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4904						Calibration.GenlockCalibration.PhaseM = PhaseM;
	SYMB	LINE, 4904
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	MOV.B	ES,#SEG( _Calibration+134 )
	MOV.W	R2,#SOF( _Calibration+134 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4905					
; rs232cmd.c 4906						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4906
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4907					}
; rs232cmd.c 4908				}
; rs232cmd.c 4909			}
; rs232cmd.c 4910		}
	SYMB	LINE, 4910
_1245:
; rs232cmd.c 4911	}
	SYMB	LINE, 4911
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4912	
; rs232cmd.c 4913	/**************************************************************************/
; rs232cmd.c 4914	/* FactBBGenDate	 																			 	     RS232CMD.C	*/
; rs232cmd.c 4915	/*																																				*/
; rs232cmd.c 4916	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 4917	/* Revised:	  000622				     																					*/
; rs232cmd.c 4918	/*																																				*/
; rs232cmd.c 4919	/* Function:	--																													*/
; rs232cmd.c 4920	/* Remarks:		--																													*/
; rs232cmd.c 4921	/* Returns:		--																													*/
; rs232cmd.c 4922	/* Updates:		--																													*/
; rs232cmd.c 4923	/**************************************************************************/
; rs232cmd.c 4924	void FactBBGenDate( void)
; rs232cmd.c 4925	{
	ALIGN	1
	SYMB	LINE, 4925
	PUBLIC	_FactBBGenDate
_FactBBGenDate:
	SYMB	TYPE, 634, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenDate", _FactBBGenDate, #634, 0, 0, 48
	SYMB	ALAB, _FactBBGenDate, #634
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4926		UI year, month, day;
; rs232cmd.c 4927		char buffer[20];
; rs232cmd.c 4928	
; rs232cmd.c 4929		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4929
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1259
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1259
; rs232cmd.c 4930		{
; rs232cmd.c 4931			if ( CmdRequest)
	SYMB	LINE, 4931
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1249
; rs232cmd.c 4932			{
; rs232cmd.c 4933				if ( ParCnt)
	SYMB	LINE, 4933
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1248
; rs232cmd.c 4934					SCPIError = SyntaxErr;
	SYMB	LINE, 4934
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1259
_1248:
; rs232cmd.c 4935				else
; rs232cmd.c 4936				{
; rs232cmd.c 4937					day = Calibration.BBCalibration[Suffix[0]].Date % 100;
	SYMB	LINE, 4937
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+138 )
	MOV.W	R1,[R0+SOF( _Calibration+140 )]
	MOV.W	R0,[R0+SOF( _Calibration+138 )]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	FCALL	__UMODL
	MOV.W	[R7+8],R0
; rs232cmd.c 4938					month = ( Calibration.BBCalibration[Suffix[0]].Date / 100) % 100;
	SYMB	LINE, 4938
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+6],R0
; rs232cmd.c 4939					year = ( Calibration.BBCalibration[Suffix[0]].Date / 10000);
	SYMB	LINE, 4939
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	FCALL	__UDIVL
	MOV.W	[R7+4],R0
; rs232cmd.c 4940	
; rs232cmd.c 4941					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 4941
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+10
	MOV.W	R0,[R7+8]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R0,[R7+8]
	PUSH.W	R0
	SYMB	SOFF, 38
	MOV.W	R0,[R7+8]
	PUSH.W	R0
	SYMB	SOFF, 40
	MOV.W	R1,#SEG( _1170 )
	MOV.W	R0,#SOF( _1170 )
	PUSH.W	R0, R1
	SYMB	SOFF, 44
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 34
; rs232cmd.c 4942	
; rs232cmd.c 4943					rs232puts( buffer);
	SYMB	LINE, 4943
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4944				}
; rs232cmd.c 4945			}
	SYMB	LINE, 4945
	BR	_1259
_1249:
; rs232cmd.c 4946			else
; rs232cmd.c 4947			{
; rs232cmd.c 4948				if ( !PasswordProtected)
	SYMB	LINE, 4948
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1259
; rs232cmd.c 4949				{
; rs232cmd.c 4950					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 4950
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1250
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+4
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+8
	PUSH.W	R0, R1
	SYMB	SOFF, 38
	PUSH.W	R4, R5
	SYMB	SOFF, 42
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R3,#SEG( _1171 )
	MOV.W	R2,#SOF( _1171 )
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 34
	CMP.W	R0,#03H
	BEQ	_1251
_1250:
; rs232cmd.c 4951						SCPIError = SyntaxErr;
	SYMB	LINE, 4951
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1259
_1251:
; rs232cmd.c 4952					else
; rs232cmd.c 4953					{
; rs232cmd.c 4954						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4954
	MOV.W	R0,[R7+4]
	MOV.W	R1,[R7+6]
	MOV.W	R2,[R7+8]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1252
; rs232cmd.c 4955							SCPIError = ExecErr;
	SYMB	LINE, 4955
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1259
_1252:
; rs232cmd.c 4956						else
; rs232cmd.c 4957						{
; rs232cmd.c 4958							Calibration.BBCalibration[Suffix[0]].Date = day + 100*month + 10000*year;
	SYMB	LINE, 4958
	MOV.W	R0,[R7+6]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+8]
	MOV.W	R2,[R7+4]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R2,#SOF( _Suffix )
	MOV.W	R2,[R2]
	MULU.W	R2,#014H
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _Calibration+138 )
	MOV.W	[R2+SOF( _Calibration+138 )],R0
	MOV.W	[R2+SOF( _Calibration+140 )],R1
; rs232cmd.c 4959						
; rs232cmd.c 4960						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4960
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4961						}
; rs232cmd.c 4962					}				
; rs232cmd.c 4963				}
; rs232cmd.c 4964			}
; rs232cmd.c 4965		}
	SYMB	LINE, 4965
_1259:
; rs232cmd.c 4966	}
	SYMB	LINE, 4966
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4967	
; rs232cmd.c 4968	/**************************************************************************/
; rs232cmd.c 4969	/* FactBBGenVersion																			 	     RS232CMD.C	*/
; rs232cmd.c 4970	/*																																				*/
; rs232cmd.c 4971	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4972	/* Revised:	  000614				     																					*/
; rs232cmd.c 4973	/*																																				*/
; rs232cmd.c 4974	/* Function:	--																													*/
; rs232cmd.c 4975	/* Remarks:		--																													*/
; rs232cmd.c 4976	/* Returns:		--																													*/
; rs232cmd.c 4977	/* Updates:		--																													*/
; rs232cmd.c 4978	/**************************************************************************/
; rs232cmd.c 4979	void FactBBGenVersion( void)
; rs232cmd.c 4980	{
	ALIGN	1
	SYMB	LINE, 4980
	PUBLIC	_FactBBGenVersion
_FactBBGenVersion:
	SYMB	TYPE, 635, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenVersion", _FactBBGenVersion, #635, 0, 0, 48
	SYMB	ALAB, _FactBBGenVersion, #635
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#0AH
	SYMB	SOFF, 14
	SYMB	IDEN, "result", -14, #626, 130, 5
; rs232cmd.c 4981		char result[10];
; rs232cmd.c 4982	
; rs232cmd.c 4983		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4983
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1270
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1270
; rs232cmd.c 4984		{
; rs232cmd.c 4985			if ( CmdRequest)
	SYMB	LINE, 4985
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1265
; rs232cmd.c 4986			{
; rs232cmd.c 4987				if ( ParCnt || Suffix[0])
	SYMB	LINE, 4987
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BNE	_1262
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	BEQ	_1263
_1262:
; rs232cmd.c 4988					SCPIError = SyntaxErr;
	SYMB	LINE, 4988
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1270
_1263:
; rs232cmd.c 4989				else
; rs232cmd.c 4990				{
; rs232cmd.c 4991					if ( BBVersion( result) == OK)
	SYMB	LINE, 4991
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_BBVersion
	CMP.W	R0,#0FFFFH
	BNE	_1264
; rs232cmd.c 4992					{
; rs232cmd.c 4993						rs232puts( result);
	SYMB	LINE, 4993
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4994						rs232putchar( '\n');
	SYMB	LINE, 4994
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4995					}
	SYMB	LINE, 4995
	BR	_1270
_1264:
; rs232cmd.c 4996					else
; rs232cmd.c 4997						SCPIError = ExecErr;			
	SYMB	LINE, 4997
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 4998				}
; rs232cmd.c 4999			}
	SYMB	LINE, 4999
	BR	_1270
_1265:
; rs232cmd.c 5000			else
; rs232cmd.c 5001				SCPIError = SyntaxErr;
	SYMB	LINE, 5001
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 5002		}
	SYMB	LINE, 5002
_1270:
; rs232cmd.c 5003	}
	SYMB	LINE, 5003
	ADD.W	R7,#0AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5004	
; rs232cmd.c 5005	/**************************************************************************/
; rs232cmd.c 5006	/* FactBBGenSignal																			 	     RS232CMD.C	*/
; rs232cmd.c 5007	/*																																				*/
; rs232cmd.c 5008	/* Author:		Kim Engedahl, DEV, 000503	    															*/
; rs232cmd.c 5009	/* Revised:	  000614			     																						*/
; rs232cmd.c 5010	/*																																				*/
; rs232cmd.c 5011	/* Function:	--																													*/
; rs232cmd.c 5012	/* Remarks:		--																													*/
; rs232cmd.c 5013	/* Returns:		--																													*/
; rs232cmd.c 5014	/* Updates:		--																													*/
; rs232cmd.c 5015	/**************************************************************************/
; rs232cmd.c 5016	void FactBBGenSignal( void)
; rs232cmd.c 5017	{
	ALIGN	1
	SYMB	LINE, 5017
	PUBLIC	_FactBBGenSignal
_FactBBGenSignal:
	SYMB	TYPE, 636, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenSignal", _FactBBGenSignal, #636, 0, 0, 0
	SYMB	ALAB, _FactBBGenSignal, #636
	SYMB	IDEN, "signal", -1, #16, 130, 5
	SYMB	LTIM, "signal", -1, 0, 69
; rs232cmd.c 5018		int signal;
; rs232cmd.c 5019	
; rs232cmd.c 5020		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5020
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1283
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1283
; rs232cmd.c 5021		{
; rs232cmd.c 5022			if ( CmdRequest)
	SYMB	LINE, 5022
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1272
; rs232cmd.c 5023				SCPIError = SyntaxErr;
	SYMB	LINE, 5023
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_1272:
; rs232cmd.c 5024			else
; rs232cmd.c 5025			{
; rs232cmd.c 5026				if ( !PasswordProtected)
	SYMB	LINE, 5026
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1283
; rs232cmd.c 5027				{
; rs232cmd.c 5028					if ( ParCnt != 1)
	SYMB	LINE, 5028
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_1273
; rs232cmd.c 5029						SCPIError = SyntaxErr;
	SYMB	LINE, 5029
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_1273:
; rs232cmd.c 5030					else
; rs232cmd.c 5031					{
; rs232cmd.c 5032						signal = FindParameter( Cmd, FactBBGenSignalPar);
	SYMB	LINE, 5032
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _FactBBGenSignalPar )
	MOV.W	R2,#SOF( _FactBBGenSignalPar )
	CALL	_FindParameter
	SYMB	LTIM, "signal", 2, 0, 205
; rs232cmd.c 5033		
; rs232cmd.c 5034						switch ( signal)
	SYMB	LINE, 5034
	CMP.W	R0,#00H
	BEQ	_1274
	CMP.W	R0,#01H
	BEQ	_1275
	BR	_1276
; rs232cmd.c 5035						{
; rs232cmd.c 5036							case 0:
	SYMB	LINE, 5036
_1274:
; rs232cmd.c 5037								BBControlPort = 0;
	SYMB	LINE, 5037
	MOV.B	ES,#SEG( _BBControlPort )
	MOV.W	R0,#SOF( _BBControlPort )
	MOV.W	[R0],#00H
; rs232cmd.c 5038								break;
	SYMB	LINE, 5038
	RET
; rs232cmd.c 5039	
; rs232cmd.c 5040							case 1:
	SYMB	LINE, 5040
_1275:
; rs232cmd.c 5041								BBControlPort = 1;
	SYMB	LINE, 5041
	MOV.B	ES,#SEG( _BBControlPort )
	MOV.W	R0,#SOF( _BBControlPort )
	MOV.W	[R0],#01H
; rs232cmd.c 5042								break;
	SYMB	LINE, 5042
	RET
; rs232cmd.c 5043	
; rs232cmd.c 5044							default:
	SYMB	LINE, 5044
_1276:
; rs232cmd.c 5045								SCPIError = DataOutOfRange;
	SYMB	LINE, 5045
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 5046								break;
; rs232cmd.c 5047						}
; rs232cmd.c 5048					}
; rs232cmd.c 5049				}
; rs232cmd.c 5050			}
; rs232cmd.c 5051		}
	SYMB	LINE, 5051
_1283:
; rs232cmd.c 5052	}
	SYMB	LINE, 5052
	RET
	SYMB	LTIM, "signal", 2, 0, 77
	SYMB	EFUN
; rs232cmd.c 5053	
; rs232cmd.c 5054	/**************************************************************************/
; rs232cmd.c 5055	/* FactBBGenPhase																				 	     RS232CMD.C	*/
; rs232cmd.c 5056	/*																																				*/
; rs232cmd.c 5057	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5058	/* Revised:	  000622				     																					*/
; rs232cmd.c 5059	/*																																				*/
; rs232cmd.c 5060	/* Function:	--																													*/
; rs232cmd.c 5061	/* Remarks:		--																													*/
; rs232cmd.c 5062	/* Returns:		--																													*/
; rs232cmd.c 5063	/* Updates:		--																													*/
; rs232cmd.c 5064	/**************************************************************************/
; rs232cmd.c 5065	void FactBBGenPhase( void)
; rs232cmd.c 5066	{
	ALIGN	1
	SYMB	LINE, 5066
	PUBLIC	_FactBBGenPhase
_FactBBGenPhase:
	SYMB	TYPE, 637, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenPhase", _FactBBGenPhase, #637, 0, 0, 48
	SYMB	ALAB, _FactBBGenPhase, #637
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "buffer", -42, #606, 130, 5
	SYMB	IDEN, "PhaseG", -12, #7, 130, 5
	SYMB	IDEN, "PhaseM", -8, #7, 130, 5
; rs232cmd.c 5067		char buffer[30];
; rs232cmd.c 5068		UL PhaseG, PhaseM;
; rs232cmd.c 5069	
; rs232cmd.c 5070		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5070
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1294
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1294
; rs232cmd.c 5071		{
; rs232cmd.c 5072			if ( CmdRequest)
	SYMB	LINE, 5072
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1286
; rs232cmd.c 5073			{
; rs232cmd.c 5074				if ( ParCnt)
	SYMB	LINE, 5074
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1285
; rs232cmd.c 5075					SCPIError = SyntaxErr;
	SYMB	LINE, 5075
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1294
_1285:
; rs232cmd.c 5076				else
; rs232cmd.c 5077				{
; rs232cmd.c 5078					sprintf( buffer, "%lu,%lu\n", Calibration.BBCalibration[Suffix[0]].PhaseG, 
; rs232cmd.c 5079																		    Calibration.BBCalibration[Suffix[0]].PhaseM);
	SYMB	LINE, 5079
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+142 )
	MOV.W	R2,[R0+SOF( _Calibration+142 )]
	MOV.W	R3,[R0+SOF( _Calibration+144 )]
	MOV.B	ES,#SEG( _Calibration+148 )
	MOV.W	R1,[R0+SOF( _Calibration+150 )]
	MOV.W	R0,[R0+SOF( _Calibration+148 )]
	PUSH.W	R0, R1
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _1223 )
	MOV.W	R0,#SOF( _1223 )
	PUSH.W	R0, R1
	SYMB	SOFF, 54
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
; rs232cmd.c 5080					rs232puts( buffer);
	SYMB	LINE, 5080
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5081				}
; rs232cmd.c 5082			}
	SYMB	LINE, 5082
	BR	_1294
_1286:
; rs232cmd.c 5083			else
; rs232cmd.c 5084			{
; rs232cmd.c 5085				if ( !PasswordProtected)
	SYMB	LINE, 5085
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1294
; rs232cmd.c 5086				{
; rs232cmd.c 5087					if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &PhaseG, &PhaseM)) != 2))
	SYMB	LINE, 5087
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1287
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+34
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1034 )
	MOV.W	R2,#SOF( _1034 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1288
_1287:
; rs232cmd.c 5088						SCPIError = SyntaxErr;
	SYMB	LINE, 5088
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1294
_1288:
; rs232cmd.c 5089					else
; rs232cmd.c 5090					{
; rs232cmd.c 5091						Calibration.BBCalibration[Suffix[0]].PhaseG = PhaseG;
	SYMB	LINE, 5091
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.W	R3,[R7+32]
	MOV.W	R2,[R7+30]
	MOV.B	ES,#SEG( _Calibration+142 )
	MOV.W	[R0+SOF( _Calibration+142 )],R2
	MOV.W	[R0+SOF( _Calibration+144 )],R3
; rs232cmd.c 5092						Calibration.BBCalibration[Suffix[0]].PhaseM = PhaseM;
	SYMB	LINE, 5092
	MOV.W	R3,[R7+36]
	MOV.W	R2,[R7+34]
	MOV.B	ES,#SEG( _Calibration+148 )
	MOV.W	[R0+SOF( _Calibration+148 )],R2
	MOV.W	[R0+SOF( _Calibration+150 )],R3
; rs232cmd.c 5093					
; rs232cmd.c 5094						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5094
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5095					}
; rs232cmd.c 5096				}
; rs232cmd.c 5097			}
; rs232cmd.c 5098		}
	SYMB	LINE, 5098
_1294:
; rs232cmd.c 5099	}
	SYMB	LINE, 5099
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5100	
; rs232cmd.c 5101	/**************************************************************************/
; rs232cmd.c 5102	/* FactBBGenScHPhase																		 	     RS232CMD.C	*/
; rs232cmd.c 5103	/*																																				*/
; rs232cmd.c 5104	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5105	/* Revised:	  000622				     																					*/
; rs232cmd.c 5106	/*																																				*/
; rs232cmd.c 5107	/* Function:	--																													*/
; rs232cmd.c 5108	/* Remarks:		--																													*/
; rs232cmd.c 5109	/* Returns:		--																													*/
; rs232cmd.c 5110	/* Updates:		--																													*/
; rs232cmd.c 5111	/**************************************************************************/
; rs232cmd.c 5112	void FactBBGenScHPhase( void)
; rs232cmd.c 5113	{
	ALIGN	1
	SYMB	LINE, 5113
	PUBLIC	_FactBBGenScHPhase
_FactBBGenScHPhase:
	SYMB	TYPE, 638, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenScHPhase", _FactBBGenScHPhase, #638, 0, 0, 48
	SYMB	ALAB, _FactBBGenScHPhase, #638
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#022H
	SYMB	SOFF, 38
	SYMB	IDEN, "buffer", -38, #606, 130, 5
	SYMB	IDEN, "ScHPhaseG", -8, #18, 130, 5
	SYMB	IDEN, "ScHPhaseM", -6, #18, 130, 5
; rs232cmd.c 5114		char buffer[30];
; rs232cmd.c 5115		UI ScHPhaseG, ScHPhaseM;
; rs232cmd.c 5116	
; rs232cmd.c 5117		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5117
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1308
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1308
; rs232cmd.c 5118		{
; rs232cmd.c 5119			if ( CmdRequest)
	SYMB	LINE, 5119
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1300
; rs232cmd.c 5120			{
; rs232cmd.c 5121				if ( ParCnt)
	SYMB	LINE, 5121
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1299
; rs232cmd.c 5122					SCPIError = SyntaxErr;
	SYMB	LINE, 5122
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1308
_1299:
; rs232cmd.c 5123				else
; rs232cmd.c 5124				{
; rs232cmd.c 5125					sprintf( buffer, "%u,%u\n", Calibration.BBCalibration[Suffix[0]].ScHPhaseG, 
; rs232cmd.c 5126																	    Calibration.BBCalibration[Suffix[0]].ScHPhaseM);
	SYMB	LINE, 5126
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+146 )
	MOV.W	R2,[R0+SOF( _Calibration+146 )]
	MOV.B	ES,#SEG( _Calibration+152 )
	MOV.W	R0,[R0+SOF( _Calibration+152 )]
	PUSH.W	R0
	SYMB	SOFF, 40
	PUSH.W	R2
	SYMB	SOFF, 42
	MOV.W	R1,#SEG( _1297 )
	MOV.W	R0,#SOF( _1297 )
	PUSH.W	R0, R1
	SYMB	SOFF, 46
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 38
; rs232cmd.c 5127					rs232puts( buffer);
	SYMB	LINE, 5127
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5128				}
; rs232cmd.c 5129			}
	SYMB	LINE, 5129
	BR	_1308
_1300:
; rs232cmd.c 5130			else
; rs232cmd.c 5131			{
; rs232cmd.c 5132				if ( !PasswordProtected)
	SYMB	LINE, 5132
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1308
; rs232cmd.c 5133				{
; rs232cmd.c 5134					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &ScHPhaseG, &ScHPhaseM)) != 2))
	SYMB	LINE, 5134
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1301
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+32
	PUSH.W	R4, R5
	SYMB	SOFF, 42
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R3,#SEG( _1298 )
	MOV.W	R2,#SOF( _1298 )
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 38
	CMP.W	R0,#02H
	BEQ	_1302
_1301:
; rs232cmd.c 5135						SCPIError = SyntaxErr;
	SYMB	LINE, 5135
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1308
_1302:
; rs232cmd.c 5136					else
; rs232cmd.c 5137					{
; rs232cmd.c 5138						Calibration.BBCalibration[Suffix[0]].ScHPhaseG = ScHPhaseG;
	SYMB	LINE, 5138
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.W	R2,[R7+30]
	MOV.B	ES,#SEG( _Calibration+146 )
	MOV.W	[R0+SOF( _Calibration+146 )],R2
; rs232cmd.c 5139						Calibration.BBCalibration[Suffix[0]].ScHPhaseM = ScHPhaseM;
	SYMB	LINE, 5139
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.W	R2,[R7+32]
	MOV.B	ES,#SEG( _Calibration+152 )
	MOV.W	[R0+SOF( _Calibration+152 )],R2
; rs232cmd.c 5140					
; rs232cmd.c 5141						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5141
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5142					}
; rs232cmd.c 5143				}
; rs232cmd.c 5144			}
; rs232cmd.c 5145		}
	SYMB	LINE, 5145
_1308:
; rs232cmd.c 5146	}
	SYMB	LINE, 5146
	ADD.W	R7,#022H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5147	
; rs232cmd.c 5148	/**************************************************************************/
; rs232cmd.c 5149	/* FactBBGenDAC																					 	     RS232CMD.C	*/
; rs232cmd.c 5150	/*																																				*/
; rs232cmd.c 5151	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5152	/* Revised:	  000622				     																					*/
; rs232cmd.c 5153	/*																																				*/
; rs232cmd.c 5154	/* Function:	--																													*/
; rs232cmd.c 5155	/* Remarks:		--																													*/
; rs232cmd.c 5156	/* Returns:		--																													*/
; rs232cmd.c 5157	/* Updates:		--																													*/
; rs232cmd.c 5158	/**************************************************************************/
; rs232cmd.c 5159	void FactBBGenDAC( void)
; rs232cmd.c 5160	{
	ALIGN	1
	SYMB	LINE, 5160
	PUBLIC	_FactBBGenDAC
_FactBBGenDAC:
	SYMB	TYPE, 639, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenDAC", _FactBBGenDAC, #639, 0, 0, 48
	SYMB	ALAB, _FactBBGenDAC, #639
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#024H
	SYMB	SOFF, 40
	SYMB	IDEN, "buffer", -40, #606, 130, 5
	SYMB	IDEN, "DACGain", -10, #18, 130, 5
	SYMB	IDEN, "DACOffset", -8, #18, 130, 5
	SYMB	IDEN, "DACLevel", -6, #18, 130, 5
; rs232cmd.c 5161		char buffer[30];
; rs232cmd.c 5162		UI DACGain, DACOffset, DACLevel;
; rs232cmd.c 5163	
; rs232cmd.c 5164		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5164
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1320
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1320
; rs232cmd.c 5165		{
; rs232cmd.c 5166			if ( CmdRequest)
	SYMB	LINE, 5166
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1312
; rs232cmd.c 5167			{
; rs232cmd.c 5168				if ( ParCnt)
	SYMB	LINE, 5168
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1311
; rs232cmd.c 5169					SCPIError = SyntaxErr;
	SYMB	LINE, 5169
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1320
_1311:
; rs232cmd.c 5170				else
; rs232cmd.c 5171				{
; rs232cmd.c 5172					sprintf( buffer, "%u,%u,%u\n", Calibration.BBCalibration[Suffix[0]].DACGain, 
; rs232cmd.c 5173																		     Calibration.BBCalibration[Suffix[0]].DACOffset,
; rs232cmd.c 5174																		     Calibration.BBCalibration[Suffix[0]].DACLevel);
	SYMB	LINE, 5174
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+154 )
	MOV.B	R2L,[R0+SOF( _Calibration+154 )]
	MOVS.B	R2H,#00H
	MOV.B	ES,#SEG( _Calibration+155 )
	MOV.B	R3L,[R0+SOF( _Calibration+155 )]
	MOVS.B	R3H,#00H
	MOV.B	ES,#SEG( _Calibration+156 )
	MOV.B	R0L,[R0+SOF( _Calibration+156 )]
	MOVS.B	R0H,#00H
	PUSH.W	R0
	SYMB	SOFF, 42
	PUSH.W	R3
	SYMB	SOFF, 44
	PUSH.W	R2
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _1170 )
	MOV.W	R0,#SOF( _1170 )
	PUSH.W	R0, R1
	SYMB	SOFF, 50
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 40
; rs232cmd.c 5175					rs232puts( buffer);
	SYMB	LINE, 5175
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5176				}
; rs232cmd.c 5177			}
	SYMB	LINE, 5177
	BR	_1320
_1312:
; rs232cmd.c 5178			else
; rs232cmd.c 5179			{
; rs232cmd.c 5180				if ( !PasswordProtected)
	SYMB	LINE, 5180
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1320
; rs232cmd.c 5181				{
; rs232cmd.c 5182					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &DACGain, &DACOffset, &DACLevel)) != 3))
	SYMB	LINE, 5182
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1313
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+32
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+34
	PUSH.W	R0, R1
	SYMB	SOFF, 44
	PUSH.W	R4, R5
	SYMB	SOFF, 48
	PUSH.W	R2, R3
	SYMB	SOFF, 52
	MOV.W	R3,#SEG( _1171 )
	MOV.W	R2,#SOF( _1171 )
	PUSH.W	R2, R3
	SYMB	SOFF, 56
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 40
	CMP.W	R0,#03H
	BEQ	_1314
_1313:
; rs232cmd.c 5183						SCPIError = SyntaxErr;
	SYMB	LINE, 5183
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1320
_1314:
; rs232cmd.c 5184					else
; rs232cmd.c 5185					{
; rs232cmd.c 5186						Calibration.BBCalibration[Suffix[0]].DACGain = DACGain;
	SYMB	LINE, 5186
	MOV.W	R2,[R7+30]
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+154 )
	MOV.B	[R0+SOF( _Calibration+154 )],R2L
; rs232cmd.c 5187						Calibration.BBCalibration[Suffix[0]].DACOffset = DACOffset;
	SYMB	LINE, 5187
	MOV.W	R2,[R7+32]
	MOV.B	ES,#SEG( _Calibration+155 )
	MOV.B	[R0+SOF( _Calibration+155 )],R2L
; rs232cmd.c 5188						Calibration.BBCalibration[Suffix[0]].DACLevel = DACLevel;	
	SYMB	LINE, 5188
	MOV.W	R2,[R7+34]
	MOV.B	ES,#SEG( _Calibration+156 )
	MOV.B	[R0+SOF( _Calibration+156 )],R2L
; rs232cmd.c 5189								
; rs232cmd.c 5190						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5190
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5191					}
; rs232cmd.c 5192				}
; rs232cmd.c 5193			}
; rs232cmd.c 5194		}
	SYMB	LINE, 5194
_1320:
; rs232cmd.c 5195	}
	SYMB	LINE, 5195
	ADD.W	R7,#024H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5196	
; rs232cmd.c 5197	/**************************************************************************/
; rs232cmd.c 5198	/* FactTSGenDate																				 	     RS232CMD.C	*/
; rs232cmd.c 5199	/*																																				*/
; rs232cmd.c 5200	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5201	/* Revised:	  000727				     																					*/
; rs232cmd.c 5202	/*																																				*/
; rs232cmd.c 5203	/* Function:	--																													*/
; rs232cmd.c 5204	/* Remarks:		--																													*/
; rs232cmd.c 5205	/* Returns:		--																													*/
; rs232cmd.c 5206	/* Updates:		--																													*/
; rs232cmd.c 5207	/**************************************************************************/
; rs232cmd.c 5208	void FactTSGenDate( void)
; rs232cmd.c 5209	{
	ALIGN	1
	SYMB	LINE, 5209
	PUBLIC	_FactTSGenDate
_FactTSGenDate:
	SYMB	TYPE, 640, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTSGenDate", _FactTSGenDate, #640, 0, 0, 48
	SYMB	ALAB, _FactTSGenDate, #640
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5210		UI year, month, day;
; rs232cmd.c 5211		char buffer[20];
; rs232cmd.c 5212	
; rs232cmd.c 5213		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5213
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1334
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1334
; rs232cmd.c 5214		{
; rs232cmd.c 5215			if ( CmdRequest)
	SYMB	LINE, 5215
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1324
; rs232cmd.c 5216			{
; rs232cmd.c 5217				if ( ParCnt)
	SYMB	LINE, 5217
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1323
; rs232cmd.c 5218					SCPIError = SyntaxErr;
	SYMB	LINE, 5218
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1334
_1323:
; rs232cmd.c 5219				else
; rs232cmd.c 5220				{
; rs232cmd.c 5221					day = Calibration.CBCalibration.Date % 100;
	SYMB	LINE, 5221
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R1,#SOF( _Calibration+198 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R4,#SOF( _Calibration+198 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R1,#SOF( _Calibration+198 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 5222					month = ( Calibration.CBCalibration.Date / 100) % 100;
	SYMB	LINE, 5222
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 5223					year = ( Calibration.CBCalibration.Date / 10000);
	SYMB	LINE, 5223
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R1,#SOF( _Calibration+198 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 5224	
; rs232cmd.c 5225					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 5225
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1170 )
	MOV.W	R0,#SOF( _1170 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 5226	
; rs232cmd.c 5227					rs232puts( buffer);
	SYMB	LINE, 5227
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5228				}
; rs232cmd.c 5229			}
	SYMB	LINE, 5229
	BR	_1334
_1324:
; rs232cmd.c 5230			else
; rs232cmd.c 5231			{
; rs232cmd.c 5232				if ( !PasswordProtected)
	SYMB	LINE, 5232
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1334
; rs232cmd.c 5233				{
; rs232cmd.c 5234					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 5234
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1325
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1171 )
	MOV.W	R2,#SOF( _1171 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1326
_1325:
; rs232cmd.c 5235						SCPIError = SyntaxErr;
	SYMB	LINE, 5235
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1334
_1326:
; rs232cmd.c 5236					else
; rs232cmd.c 5237					{
; rs232cmd.c 5238						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 5238
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1327
; rs232cmd.c 5239							SCPIError = ExecErr;
	SYMB	LINE, 5239
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1334
_1327:
; rs232cmd.c 5240						else
; rs232cmd.c 5241						{
; rs232cmd.c 5242							Calibration.CBCalibration.Date = day + 100*month + 10000*year;
	SYMB	LINE, 5242
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R2,#SOF( _Calibration+198 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 5243						
; rs232cmd.c 5244						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5244
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5245						}
; rs232cmd.c 5246					}				
; rs232cmd.c 5247				}
; rs232cmd.c 5248			}
; rs232cmd.c 5249		}
	SYMB	LINE, 5249
_1334:
; rs232cmd.c 5250	}
	SYMB	LINE, 5250
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5251	
; rs232cmd.c 5252	/**************************************************************************/
; rs232cmd.c 5253	/* FactTSGenAGain																				 	     RS232CMD.C	*/
; rs232cmd.c 5254	/*																																				*/
; rs232cmd.c 5255	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5256	/* Revised:	  000727,				     																					*/
; rs232cmd.c 5257	/*																																				*/
; rs232cmd.c 5258	/* Function:	--																													*/
; rs232cmd.c 5259	/* Remarks:		--																													*/
; rs232cmd.c 5260	/* Returns:		--																													*/
; rs232cmd.c 5261	/* Updates:		--																													*/
; rs232cmd.c 5262	/**************************************************************************/
; rs232cmd.c 5263	void FactTSGenAGain( void)
; rs232cmd.c 5264	{
	ALIGN	1
	SYMB	LINE, 5264
	PUBLIC	_FactTSGenAGain
_FactTSGenAGain:
	SYMB	TYPE, 641, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTSGenAGain", _FactTSGenAGain, #641, 0, 0, 48
	SYMB	ALAB, _FactTSGenAGain, #641
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#018H
	SYMB	SOFF, 28
	SYMB	IDEN, "buffer", -28, #563, 130, 5
	SYMB	IDEN, "GainG", -8, #3, 130, 5
	SYMB	IDEN, "GainM", -6, #3, 130, 5
; rs232cmd.c 5265		char buffer[20];
; rs232cmd.c 5266		UC GainG, GainM;
; rs232cmd.c 5267	
; rs232cmd.c 5268		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5268
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1348
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1348
; rs232cmd.c 5269		{
; rs232cmd.c 5270			if ( CmdRequest)
	SYMB	LINE, 5270
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1338
; rs232cmd.c 5271			{
; rs232cmd.c 5272				if ( ParCnt)
	SYMB	LINE, 5272
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1337
; rs232cmd.c 5273					SCPIError = SyntaxErr;
	SYMB	LINE, 5273
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1348
_1337:
; rs232cmd.c 5274				else
; rs232cmd.c 5275				{
; rs232cmd.c 5276					sprintf( buffer, "%u,%u\n", Calibration.CBCalibration.GainG, 
; rs232cmd.c 5277																	    Calibration.CBCalibration.GainM);
	SYMB	LINE, 5277
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+213 )
	MOV.W	R0,#SOF( _Calibration+213 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOV.B	ES,#SEG( _Calibration+215 )
	MOV.W	R1,#SOF( _Calibration+215 )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 30
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R1,#SEG( _1297 )
	MOV.W	R0,#SOF( _1297 )
	PUSH.W	R0, R1
	SYMB	SOFF, 36
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 28
; rs232cmd.c 5278					rs232puts( buffer);
	SYMB	LINE, 5278
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5279				}
; rs232cmd.c 5280			}
	SYMB	LINE, 5280
	BR	_1348
_1338:
; rs232cmd.c 5281			else
; rs232cmd.c 5282			{
; rs232cmd.c 5283				if ( !PasswordProtected)
	SYMB	LINE, 5283
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1348
; rs232cmd.c 5284				{
; rs232cmd.c 5285					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &GainG, &GainM)) != 2))
	SYMB	LINE, 5285
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1339
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+22
	PUSH.W	R4, R5
	SYMB	SOFF, 32
	PUSH.W	R2, R3
	SYMB	SOFF, 36
	MOV.W	R3,#SEG( _1298 )
	MOV.W	R2,#SOF( _1298 )
	PUSH.W	R2, R3
	SYMB	SOFF, 40
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 28
	CMP.W	R0,#02H
	BEQ	_1340
_1339:
; rs232cmd.c 5286						SCPIError = SyntaxErr;
	SYMB	LINE, 5286
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1348
_1340:
; rs232cmd.c 5287					else
; rs232cmd.c 5288					{
; rs232cmd.c 5289						Calibration.CBCalibration.GainG = GainG;
	SYMB	LINE, 5289
	MOV.B	R0L,[R7+20]
	MOV.B	ES,#SEG( _Calibration+213 )
	MOV.W	R1,#SOF( _Calibration+213 )
	MOV.B	[R1],R0L
; rs232cmd.c 5290						Calibration.CBCalibration.GainM = GainM;
	SYMB	LINE, 5290
	MOV.B	R0L,[R7+22]
	MOV.B	ES,#SEG( _Calibration+215 )
	MOV.W	R1,#SOF( _Calibration+215 )
	MOV.B	[R1],R0L
; rs232cmd.c 5291																																		
; rs232cmd.c 5292						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5292
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5293	
; rs232cmd.c 5294						if ( CBSetup.System < NTSC)
	SYMB	LINE, 5294
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BCC	_1341
; rs232cmd.c 5295							WriteCBGain( GainG);
	SYMB	LINE, 5295
	MOV.B	R0L,[R7+20]
	CALL	_WriteCBGain
	BR	_1348
_1341:
; rs232cmd.c 5296						else
; rs232cmd.c 5297							WriteCBGain( GainM);
	SYMB	LINE, 5297
	MOV.B	R0L,[R7+22]
	CALL	_WriteCBGain
; rs232cmd.c 5298					}
; rs232cmd.c 5299				}
; rs232cmd.c 5300			}
; rs232cmd.c 5301		}
	SYMB	LINE, 5301
_1348:
; rs232cmd.c 5302	}
	SYMB	LINE, 5302
	ADD.W	R7,#018H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5303	
; rs232cmd.c 5304	/**************************************************************************/
; rs232cmd.c 5305	/* FactTSGenCGain																				 	     RS232CMD.C	*/
; rs232cmd.c 5306	/*																																				*/
; rs232cmd.c 5307	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5308	/* Revised:	  000727,				     																					*/
; rs232cmd.c 5309	/*																																				*/
; rs232cmd.c 5310	/* Function:	--																													*/
; rs232cmd.c 5311	/* Remarks:		--																													*/
; rs232cmd.c 5312	/* Returns:		--																													*/
; rs232cmd.c 5313	/* Updates:		--																													*/
; rs232cmd.c 5314	/**************************************************************************/
; rs232cmd.c 5315	void FactTSGenCGain( void)
; rs232cmd.c 5316	{
	ALIGN	1
	SYMB	LINE, 5316
	PUBLIC	_FactTSGenCGain
_FactTSGenCGain:
	SYMB	TYPE, 642, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTSGenCGain", _FactTSGenCGain, #642, 0, 0, 48
	SYMB	ALAB, _FactTSGenCGain, #642
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#018H
	SYMB	SOFF, 28
	SYMB	IDEN, "buffer", -28, #563, 130, 5
	SYMB	IDEN, "ChromaGainG", -8, #3, 130, 5
	SYMB	IDEN, "ChromaGainM", -6, #3, 130, 5
; rs232cmd.c 5317		char buffer[20];
; rs232cmd.c 5318		UC ChromaGainG, ChromaGainM;
; rs232cmd.c 5319	
; rs232cmd.c 5320		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5320
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1363
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1363
; rs232cmd.c 5321		{
; rs232cmd.c 5322			if ( CmdRequest)
	SYMB	LINE, 5322
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1353
; rs232cmd.c 5323			{
; rs232cmd.c 5324				if ( ParCnt)
	SYMB	LINE, 5324
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1352
; rs232cmd.c 5325					SCPIError = SyntaxErr;
	SYMB	LINE, 5325
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1363
_1352:
; rs232cmd.c 5326				else
; rs232cmd.c 5327				{
; rs232cmd.c 5328					sprintf( buffer, "%u,%u\n", Calibration.CBCalibration.ChromaGainG, 
; rs232cmd.c 5329																	    Calibration.CBCalibration.ChromaGainM);
	SYMB	LINE, 5329
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+214 )
	MOV.W	R0,#SOF( _Calibration+214 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOV.B	ES,#SEG( _Calibration+216 )
	MOV.W	R1,#SOF( _Calibration+216 )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 30
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R1,#SEG( _1297 )
	MOV.W	R0,#SOF( _1297 )
	PUSH.W	R0, R1
	SYMB	SOFF, 36
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 28
; rs232cmd.c 5330					rs232puts( buffer);
	SYMB	LINE, 5330
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5331				}
; rs232cmd.c 5332			}
	SYMB	LINE, 5332
	BR	_1363
_1353:
; rs232cmd.c 5333			else
; rs232cmd.c 5334			{
; rs232cmd.c 5335				if ( !PasswordProtected)
	SYMB	LINE, 5335
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1363
; rs232cmd.c 5336				{
; rs232cmd.c 5337					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &ChromaGainG, &ChromaGainM)) != 2))
	SYMB	LINE, 5337
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1354
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+22
	PUSH.W	R4, R5
	SYMB	SOFF, 32
	PUSH.W	R2, R3
	SYMB	SOFF, 36
	MOV.W	R3,#SEG( _1298 )
	MOV.W	R2,#SOF( _1298 )
	PUSH.W	R2, R3
	SYMB	SOFF, 40
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 28
	CMP.W	R0,#02H
	BEQ	_1355
_1354:
; rs232cmd.c 5338						SCPIError = SyntaxErr;
	SYMB	LINE, 5338
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1363
_1355:
; rs232cmd.c 5339					else
; rs232cmd.c 5340					{
; rs232cmd.c 5341						Calibration.CBCalibration.ChromaGainG = ChromaGainG;
	SYMB	LINE, 5341
	MOV.B	R0L,[R7+20]
	MOV.B	ES,#SEG( _Calibration+214 )
	MOV.W	R1,#SOF( _Calibration+214 )
	MOV.B	[R1],R0L
; rs232cmd.c 5342						Calibration.CBCalibration.ChromaGainM = ChromaGainM;
	SYMB	LINE, 5342
	MOV.B	R0L,[R7+22]
	MOV.B	ES,#SEG( _Calibration+216 )
	MOV.W	R1,#SOF( _Calibration+216 )
	MOV.B	[R1],R0L
; rs232cmd.c 5343																																		
; rs232cmd.c 5344						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5344
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5345	
; rs232cmd.c 5346						if ( CBSetup.System < NTSC)
	SYMB	LINE, 5346
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BCC	_1356
; rs232cmd.c 5347							WriteCBChromaGain( ChromaGainG);
	SYMB	LINE, 5347
	MOV.B	R0L,[R7+20]
	CALL	_WriteCBChromaGain
	BR	_1363
_1356:
; rs232cmd.c 5348						else
; rs232cmd.c 5349							WriteCBChromaGain( ChromaGainM);
	SYMB	LINE, 5349
	MOV.B	R0L,[R7+22]
	CALL	_WriteCBChromaGain
; rs232cmd.c 5350					}
; rs232cmd.c 5351				}
; rs232cmd.c 5352			}
; rs232cmd.c 5353		}
	SYMB	LINE, 5353
_1363:
; rs232cmd.c 5354	}
	SYMB	LINE, 5354
	ADD.W	R7,#018H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5355	
; rs232cmd.c 5356	/**************************************************************************/
; rs232cmd.c 5357	/* FactTSGenPhase																				 	     RS232CMD.C	*/
; rs232cmd.c 5358	/*																																				*/
; rs232cmd.c 5359	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5360	/* Revised:	  000727				     																					*/
; rs232cmd.c 5361	/*																																				*/
; rs232cmd.c 5362	/* Function:	--																													*/
; rs232cmd.c 5363	/* Remarks:		PAL range: 0-4*625*1728, NTSC range: 0-2*525*1716						*/
; rs232cmd.c 5364	/* Returns:		--																													*/
; rs232cmd.c 5365	/* Updates:		--																													*/
; rs232cmd.c 5366	/**************************************************************************/
; rs232cmd.c 5367	void FactTSGenPhase( void)
; rs232cmd.c 5368	{
	ALIGN	1
	SYMB	LINE, 5368
	PUBLIC	_FactTSGenPhase
_FactTSGenPhase:
	SYMB	TYPE, 643, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTSGenPhase", _FactTSGenPhase, #643, 0, 0, 48
	SYMB	ALAB, _FactTSGenPhase, #643
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "buffer", -42, #606, 130, 5
	SYMB	IDEN, "PhaseG", -12, #7, 130, 5
	SYMB	IDEN, "PhaseM", -8, #7, 130, 5
; rs232cmd.c 5369		char buffer[30];
; rs232cmd.c 5370		UL PhaseG, PhaseM;
; rs232cmd.c 5371	
; rs232cmd.c 5372		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5372
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1376
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1376
; rs232cmd.c 5373		{
; rs232cmd.c 5374			if ( CmdRequest)
	SYMB	LINE, 5374
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1368
; rs232cmd.c 5375			{
; rs232cmd.c 5376				if ( ParCnt)
	SYMB	LINE, 5376
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1367
; rs232cmd.c 5377					SCPIError = SyntaxErr;
	SYMB	LINE, 5377
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1376
_1367:
; rs232cmd.c 5378				else
; rs232cmd.c 5379				{
; rs232cmd.c 5380					sprintf( buffer, "%lu,%lu\n", Calibration.CBCalibration.PhaseG, 
; rs232cmd.c 5381																		    Calibration.CBCalibration.PhaseM);
	SYMB	LINE, 5381
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+202 )
	MOV.W	R1,#SOF( _Calibration+202 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _Calibration+208 )
	MOV.W	R3,#SOF( _Calibration+208 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	PUSH.W	R0, R1
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _1223 )
	MOV.W	R0,#SOF( _1223 )
	PUSH.W	R0, R1
	SYMB	SOFF, 54
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
; rs232cmd.c 5382					rs232puts( buffer);
	SYMB	LINE, 5382
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5383				}
; rs232cmd.c 5384			}
	SYMB	LINE, 5384
	BR	_1376
_1368:
; rs232cmd.c 5385			else
; rs232cmd.c 5386			{
; rs232cmd.c 5387				if ( !PasswordProtected)
	SYMB	LINE, 5387
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1376
; rs232cmd.c 5388				{
; rs232cmd.c 5389					if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &PhaseG, &PhaseM)) != 2))
	SYMB	LINE, 5389
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1369
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+34
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1034 )
	MOV.W	R2,#SOF( _1034 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1370
_1369:
; rs232cmd.c 5390						SCPIError = SyntaxErr;
	SYMB	LINE, 5390
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1376
_1370:
; rs232cmd.c 5391					else
; rs232cmd.c 5392					{
; rs232cmd.c 5393						Calibration.CBCalibration.PhaseG = PhaseG;
	SYMB	LINE, 5393
	MOV.W	R1,[R7+32]
	MOV.W	R0,[R7+30]
	MOV.B	ES,#SEG( _Calibration+202 )
	MOV.W	R2,#SOF( _Calibration+202 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 5394						Calibration.CBCalibration.PhaseM = PhaseM;
	SYMB	LINE, 5394
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	MOV.B	ES,#SEG( _Calibration+208 )
	MOV.W	R2,#SOF( _Calibration+208 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 5395					
; rs232cmd.c 5396						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5396
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5397	
; rs232cmd.c 5398						SetCBDelay( CBSetup.Delay);
	SYMB	LINE, 5398
	MOV.B	ES,#SEG( _CBSetup+4 )
	MOV.W	R1,#SOF( _CBSetup+4 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	CALL	_SetCBDelay
; rs232cmd.c 5399					}
; rs232cmd.c 5400				}
; rs232cmd.c 5401			}
; rs232cmd.c 5402		}
	SYMB	LINE, 5402
_1376:
; rs232cmd.c 5403	}
	SYMB	LINE, 5403
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5404	
; rs232cmd.c 5405	/**************************************************************************/
; rs232cmd.c 5406	/* FactTSGenScHPhase																		 	     RS232CMD.C	*/
; rs232cmd.c 5407	/*																																				*/
; rs232cmd.c 5408	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5409	/* Revised:	  000727				     																					*/
; rs232cmd.c 5410	/*																																				*/
; rs232cmd.c 5411	/* Function:	--																													*/
; rs232cmd.c 5412	/* Remarks:		--																													*/
; rs232cmd.c 5413	/* Returns:		--																													*/
; rs232cmd.c 5414	/* Updates:		--																													*/
; rs232cmd.c 5415	/**************************************************************************/
; rs232cmd.c 5416	void FactTSGenScHPhase( void)
; rs232cmd.c 5417	{
	ALIGN	1
	SYMB	LINE, 5417
	PUBLIC	_FactTSGenScHPhase
_FactTSGenScHPhase:
	SYMB	TYPE, 644, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTSGenScHPhase", _FactTSGenScHPhase, #644, 0, 0, 48
	SYMB	ALAB, _FactTSGenScHPhase, #644
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#022H
	SYMB	SOFF, 38
	SYMB	IDEN, "buffer", -38, #606, 130, 5
	SYMB	IDEN, "ScHPhaseG", -8, #3, 130, 5
	SYMB	IDEN, "ScHPhaseM", -6, #3, 130, 5
; rs232cmd.c 5418		char buffer[30];
; rs232cmd.c 5419		UC ScHPhaseG, ScHPhaseM;
; rs232cmd.c 5420	
; rs232cmd.c 5421		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5421
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1388
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1388
; rs232cmd.c 5422		{
; rs232cmd.c 5423			if ( CmdRequest)
	SYMB	LINE, 5423
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1380
; rs232cmd.c 5424			{
; rs232cmd.c 5425				if ( ParCnt)
	SYMB	LINE, 5425
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1379
; rs232cmd.c 5426					SCPIError = SyntaxErr;
	SYMB	LINE, 5426
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1388
_1379:
; rs232cmd.c 5427				else
; rs232cmd.c 5428				{
; rs232cmd.c 5429					sprintf( buffer, "%u,%u\n", Calibration.CBCalibration.ScHPhaseG, 
; rs232cmd.c 5430																	    Calibration.CBCalibration.ScHPhaseM);
	SYMB	LINE, 5430
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+206 )
	MOV.W	R0,#SOF( _Calibration+206 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOV.B	ES,#SEG( _Calibration+212 )
	MOV.W	R1,#SOF( _Calibration+212 )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 40
	PUSH.W	R0
	SYMB	SOFF, 42
	MOV.W	R1,#SEG( _1297 )
	MOV.W	R0,#SOF( _1297 )
	PUSH.W	R0, R1
	SYMB	SOFF, 46
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 38
; rs232cmd.c 5431					rs232puts( buffer);
	SYMB	LINE, 5431
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5432				}
; rs232cmd.c 5433			}
	SYMB	LINE, 5433
	BR	_1388
_1380:
; rs232cmd.c 5434			else
; rs232cmd.c 5435			{
; rs232cmd.c 5436				if ( !PasswordProtected)
	SYMB	LINE, 5436
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1388
; rs232cmd.c 5437				{
; rs232cmd.c 5438					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &ScHPhaseG, &ScHPhaseM)) != 2))
	SYMB	LINE, 5438
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1381
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+32
	PUSH.W	R4, R5
	SYMB	SOFF, 42
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R3,#SEG( _1298 )
	MOV.W	R2,#SOF( _1298 )
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 38
	CMP.W	R0,#02H
	BEQ	_1382
_1381:
; rs232cmd.c 5439						SCPIError = SyntaxErr;
	SYMB	LINE, 5439
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1388
_1382:
; rs232cmd.c 5440					else
; rs232cmd.c 5441					{
; rs232cmd.c 5442						Calibration.CBCalibration.ScHPhaseG = ScHPhaseG;
	SYMB	LINE, 5442
	MOV.B	R0L,[R7+30]
	MOV.B	ES,#SEG( _Calibration+206 )
	MOV.W	R1,#SOF( _Calibration+206 )
	MOV.B	[R1],R0L
; rs232cmd.c 5443						Calibration.CBCalibration.ScHPhaseM = ScHPhaseM;
	SYMB	LINE, 5443
	MOV.B	R0L,[R7+32]
	MOV.B	ES,#SEG( _Calibration+212 )
	MOV.W	R1,#SOF( _Calibration+212 )
	MOV.B	[R1],R0L
; rs232cmd.c 5444					
; rs232cmd.c 5445						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5445
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5446	
; rs232cmd.c 5447						SetCBScHPhase( CBSetup.ScHPhase);
	SYMB	LINE, 5447
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R0,#SOF( _CBSetup+8 )
	MOV.W	R0,[R0]
	CALL	_SetCBScHPhase
; rs232cmd.c 5448					}
; rs232cmd.c 5449				}
; rs232cmd.c 5450			}
; rs232cmd.c 5451		}
	SYMB	LINE, 5451
_1388:
; rs232cmd.c 5452	}
	SYMB	LINE, 5452
	ADD.W	R7,#022H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5453	
; rs232cmd.c 5454	/**************************************************************************/
; rs232cmd.c 5455	/* FactAudioGenStatus																		 	     RS232CMD.C	*/
; rs232cmd.c 5456	/*																																				*/
; rs232cmd.c 5457	/* Author:		Kim Engedahl, DEV, 000505	    															*/
; rs232cmd.c 5458	/* Revised:	  000625				     																					*/
; rs232cmd.c 5459	/*																																				*/
; rs232cmd.c 5460	/* Function:	--																													*/
; rs232cmd.c 5461	/* Remarks:																																*/
; rs232cmd.c 5462	/* Returns:		--																													*/
; rs232cmd.c 5463	/* Updates:		--																													*/
; rs232cmd.c 5464	/**************************************************************************/
; rs232cmd.c 5465	void FactAudioGenStatus( void)
; rs232cmd.c 5466	{
	ALIGN	1
	SYMB	LINE, 5466
	PUBLIC	_FactAudioGenStatus
_FactAudioGenStatus:
	SYMB	TYPE, 645, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactAudioGenStatus", _FactAudioGenStatus, #645, 0, 0, 48
	SYMB	ALAB, _FactAudioGenStatus, #645
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#014H
	SYMB	SOFF, 24
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5467		char buffer[20];
; rs232cmd.c 5468	
; rs232cmd.c 5469		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5469
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1396
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1396
; rs232cmd.c 5470		{
; rs232cmd.c 5471			if ( CmdRequest)
	SYMB	LINE, 5471
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1392
; rs232cmd.c 5472			{
; rs232cmd.c 5473				if ( ParCnt)
	SYMB	LINE, 5473
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1391
; rs232cmd.c 5474					SCPIError = SyntaxErr;
	SYMB	LINE, 5474
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1396
_1391:
; rs232cmd.c 5475				else
; rs232cmd.c 5476				{
; rs232cmd.c 5477					sprintf( buffer, "%u\n", 0, AudioStatus());
	SYMB	LINE, 5477
	CALL	_AudioStatus
	MOVS.B	R0H,#00H
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 26
	MOV.W	R0,#00H
	PUSH.W	R0
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 32
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 24
; rs232cmd.c 5478					rs232puts( buffer);
	SYMB	LINE, 5478
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5479				}
; rs232cmd.c 5480			}
	SYMB	LINE, 5480
	BR	_1396
_1392:
; rs232cmd.c 5481			else
; rs232cmd.c 5482				SCPIError = SyntaxErr;
	SYMB	LINE, 5482
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 5483		}
	SYMB	LINE, 5483
_1396:
; rs232cmd.c 5484	}
	SYMB	LINE, 5484
	ADD.W	R7,#014H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5485	
; rs232cmd.c 5486	/**************************************************************************/
; rs232cmd.c 5487	/* FactAudioGenDate																			 	     RS232CMD.C	*/
; rs232cmd.c 5488	/*																																				*/
; rs232cmd.c 5489	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5490	/* Revised:	  000622				     																					*/
; rs232cmd.c 5491	/*																																				*/
; rs232cmd.c 5492	/* Function:	--																													*/
; rs232cmd.c 5493	/* Remarks:		--																													*/
; rs232cmd.c 5494	/* Returns:		--																													*/
; rs232cmd.c 5495	/* Updates:		--																													*/
; rs232cmd.c 5496	/**************************************************************************/
; rs232cmd.c 5497	void FactAudioGenDate( void)
; rs232cmd.c 5498	{
	ALIGN	1
	SYMB	LINE, 5498
	PUBLIC	_FactAudioGenDate
_FactAudioGenDate:
	SYMB	TYPE, 646, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactAudioGenDate", _FactAudioGenDate, #646, 0, 0, 48
	SYMB	ALAB, _FactAudioGenDate, #646
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5499		UI year, month, day;
; rs232cmd.c 5500		char buffer[20];
; rs232cmd.c 5501	
; rs232cmd.c 5502		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5502
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1408
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1408
; rs232cmd.c 5503		{
; rs232cmd.c 5504			if ( CmdRequest)
	SYMB	LINE, 5504
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1398
; rs232cmd.c 5505			{
; rs232cmd.c 5506				if ( ParCnt)
	SYMB	LINE, 5506
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1397
; rs232cmd.c 5507					SCPIError = SyntaxErr;
	SYMB	LINE, 5507
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1408
_1397:
; rs232cmd.c 5508				else
; rs232cmd.c 5509				{
; rs232cmd.c 5510					day = Calibration.AudioCalibration.Date % 100;
	SYMB	LINE, 5510
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R1,#SOF( _Calibration+218 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R4,#SOF( _Calibration+218 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R1,#SOF( _Calibration+218 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 5511					month = ( Calibration.AudioCalibration.Date / 100) % 100;
	SYMB	LINE, 5511
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 5512					year = ( Calibration.AudioCalibration.Date / 10000);
	SYMB	LINE, 5512
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R1,#SOF( _Calibration+218 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 5513	
; rs232cmd.c 5514					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 5514
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1170 )
	MOV.W	R0,#SOF( _1170 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 5515	
; rs232cmd.c 5516					rs232puts( buffer);
	SYMB	LINE, 5516
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5517				}
; rs232cmd.c 5518			}
	SYMB	LINE, 5518
	BR	_1408
_1398:
; rs232cmd.c 5519			else
; rs232cmd.c 5520			{
; rs232cmd.c 5521				if ( !PasswordProtected)
	SYMB	LINE, 5521
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1408
; rs232cmd.c 5522				{
; rs232cmd.c 5523					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 5523
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1399
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1171 )
	MOV.W	R2,#SOF( _1171 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1400
_1399:
; rs232cmd.c 5524						SCPIError = SyntaxErr;
	SYMB	LINE, 5524
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1408
_1400:
; rs232cmd.c 5525					else
; rs232cmd.c 5526					{
; rs232cmd.c 5527						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 5527
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1401
; rs232cmd.c 5528							SCPIError = ExecErr;
	SYMB	LINE, 5528
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1408
_1401:
; rs232cmd.c 5529						else
; rs232cmd.c 5530						{
; rs232cmd.c 5531							Calibration.AudioCalibration.Date = day + 100*month + 10000*year;
	SYMB	LINE, 5531
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R2,#SOF( _Calibration+218 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 5532						
; rs232cmd.c 5533						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5533
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5534						}
; rs232cmd.c 5535					}				
; rs232cmd.c 5536				}
; rs232cmd.c 5537			}
; rs232cmd.c 5538		}
	SYMB	LINE, 5538
_1408:
; rs232cmd.c 5539	}
	SYMB	LINE, 5539
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5540	
; rs232cmd.c 5541	/**************************************************************************/
; rs232cmd.c 5542	/* FactAudioGenLevel																		 	     RS232CMD.C	*/
; rs232cmd.c 5543	/*																																				*/
; rs232cmd.c 5544	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5545	/* Revised:	  000622				     																					*/
; rs232cmd.c 5546	/*																																				*/
; rs232cmd.c 5547	/* Function:	--																													*/
; rs232cmd.c 5548	/* Remarks:		--																													*/
; rs232cmd.c 5549	/* Returns:		--																													*/
; rs232cmd.c 5550	/* Updates:		--																													*/
; rs232cmd.c 5551	/**************************************************************************/
; rs232cmd.c 5552	void FactAudioGenLevel( void)
; rs232cmd.c 5553	{
	ALIGN	1
	SYMB	LINE, 5553
	PUBLIC	_FactAudioGenLevel
_FactAudioGenLevel:
	SYMB	TYPE, 647, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactAudioGenLevel", _FactAudioGenLevel, #647, 0, 0, 48
	SYMB	ALAB, _FactAudioGenLevel, #647
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#018H
	SYMB	SOFF, 28
	SYMB	IDEN, "buffer", -28, #563, 130, 5
	SYMB	IDEN, "AnalogLeft", -8, #3, 130, 5
	SYMB	IDEN, "AnalogRight", -6, #3, 130, 5
; rs232cmd.c 5554		char buffer[20];
; rs232cmd.c 5555		UC AnalogLeft, AnalogRight;
; rs232cmd.c 5556	
; rs232cmd.c 5557		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5557
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1420
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1420
; rs232cmd.c 5558		{
; rs232cmd.c 5559			if ( CmdRequest)
	SYMB	LINE, 5559
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1412
; rs232cmd.c 5560			{
; rs232cmd.c 5561				if ( ParCnt)
	SYMB	LINE, 5561
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1411
; rs232cmd.c 5562					SCPIError = SyntaxErr;
	SYMB	LINE, 5562
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1420
_1411:
; rs232cmd.c 5563				else
; rs232cmd.c 5564				{
; rs232cmd.c 5565					sprintf( buffer, "%u,%u\n", Calibration.AudioCalibration.AnalogLeftChannel, 
; rs232cmd.c 5566																	    Calibration.AudioCalibration.AnalogRightChannel);
	SYMB	LINE, 5566
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+222 )
	MOV.W	R0,#SOF( _Calibration+222 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOV.B	ES,#SEG( _Calibration+223 )
	MOV.W	R1,#SOF( _Calibration+223 )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 30
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R1,#SEG( _1297 )
	MOV.W	R0,#SOF( _1297 )
	PUSH.W	R0, R1
	SYMB	SOFF, 36
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 28
; rs232cmd.c 5567					rs232puts( buffer);
	SYMB	LINE, 5567
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5568				}
; rs232cmd.c 5569			}
	SYMB	LINE, 5569
	BR	_1420
_1412:
; rs232cmd.c 5570			else
; rs232cmd.c 5571			{
; rs232cmd.c 5572				if ( !PasswordProtected)
	SYMB	LINE, 5572
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1420
; rs232cmd.c 5573				{
; rs232cmd.c 5574					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &AnalogLeft, &AnalogRight)) != 2))
	SYMB	LINE, 5574
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1413
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+22
	PUSH.W	R4, R5
	SYMB	SOFF, 32
	PUSH.W	R2, R3
	SYMB	SOFF, 36
	MOV.W	R3,#SEG( _1298 )
	MOV.W	R2,#SOF( _1298 )
	PUSH.W	R2, R3
	SYMB	SOFF, 40
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 28
	CMP.W	R0,#02H
	BEQ	_1414
_1413:
; rs232cmd.c 5575						SCPIError = SyntaxErr;
	SYMB	LINE, 5575
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1420
_1414:
; rs232cmd.c 5576					else
; rs232cmd.c 5577					{
; rs232cmd.c 5578						Calibration.AudioCalibration.AnalogLeftChannel = AnalogLeft;
	SYMB	LINE, 5578
	MOV.B	R0L,[R7+20]
	MOV.B	ES,#SEG( _Calibration+222 )
	MOV.W	R1,#SOF( _Calibration+222 )
	MOV.B	[R1],R0L
; rs232cmd.c 5579						Calibration.AudioCalibration.AnalogRightChannel = AnalogRight;
	SYMB	LINE, 5579
	MOV.B	R0L,[R7+22]
	MOV.B	ES,#SEG( _Calibration+223 )
	MOV.W	R1,#SOF( _Calibration+223 )
	MOV.B	[R1],R0L
; rs232cmd.c 5580								
; rs232cmd.c 5581						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5581
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5582	
; rs232cmd.c 5583						WriteAnlAudioDACLevel( AnalogLeft, AnalogRight);
	SYMB	LINE, 5583
	MOV.B	R0L,[R7+20]
	MOV.B	R0H,[R7+22]
	CALL	_WriteAnlAudioDACLevel
; rs232cmd.c 5584					}
; rs232cmd.c 5585				}
; rs232cmd.c 5586			}
; rs232cmd.c 5587		}
	SYMB	LINE, 5587
_1420:
; rs232cmd.c 5588	}
	SYMB	LINE, 5588
	ADD.W	R7,#018H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5589	
; rs232cmd.c 5590	/**************************************************************************/
; rs232cmd.c 5591	/* FactPLDVersion																				 	     RS232CMD.C	*/
; rs232cmd.c 5592	/*																																				*/
; rs232cmd.c 5593	/* Author:		Kim Engedahl, DEV, 000505	    															*/
; rs232cmd.c 5594	/* Revised:	  000625				     																					*/
; rs232cmd.c 5595	/*																																				*/
; rs232cmd.c 5596	/* Function:	--																													*/
; rs232cmd.c 5597	/* Remarks:		NOTE! The video PLD version has not been implemented at this*/
; rs232cmd.c 5598	/*						this time, hence the return value of 0 does NOT reflect the	*/
; rs232cmd.c 5599	/*						video PLD version.																					*/
; rs232cmd.c 5600	/* Returns:		--																													*/
; rs232cmd.c 5601	/* Updates:		--																													*/
; rs232cmd.c 5602	/**************************************************************************/
; rs232cmd.c 5603	void FactPLDVersion( void)
; rs232cmd.c 5604	{
	ALIGN	1
	SYMB	LINE, 5604
	PUBLIC	_FactPLDVersion
_FactPLDVersion:
	SYMB	TYPE, 648, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactPLDVersion", _FactPLDVersion, #648, 0, 0, 48
	SYMB	ALAB, _FactPLDVersion, #648
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#014H
	SYMB	SOFF, 24
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5605		char buffer[20];
; rs232cmd.c 5606	
; rs232cmd.c 5607		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5607
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1428
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1428
; rs232cmd.c 5608		{
; rs232cmd.c 5609			if ( CmdRequest)
	SYMB	LINE, 5609
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1424
; rs232cmd.c 5610			{
; rs232cmd.c 5611				if ( ParCnt)
	SYMB	LINE, 5611
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1423
; rs232cmd.c 5612					SCPIError = SyntaxErr;
	SYMB	LINE, 5612
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1428
_1423:
; rs232cmd.c 5613				else
; rs232cmd.c 5614				{
; rs232cmd.c 5615					sprintf( buffer, "%u,%u\n", 0, pld_version());
	SYMB	LINE, 5615
	CALL	_pld_version
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 26
	MOV.W	R0,#00H
	PUSH.W	R0
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _1297 )
	MOV.W	R0,#SOF( _1297 )
	PUSH.W	R0, R1
	SYMB	SOFF, 32
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 24
; rs232cmd.c 5616					rs232puts( buffer);
	SYMB	LINE, 5616
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5617				}
; rs232cmd.c 5618			}
	SYMB	LINE, 5618
	BR	_1428
_1424:
; rs232cmd.c 5619			else
; rs232cmd.c 5620				SCPIError = SyntaxErr;
	SYMB	LINE, 5620
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 5621		}
	SYMB	LINE, 5621
_1428:
; rs232cmd.c 5622	}
	SYMB	LINE, 5622
	ADD.W	R7,#014H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5623	
; rs232cmd.c 5624	/**************************************************************************/
; rs232cmd.c 5625	/* FactTCXOStatus																				 	     RS232CMD.C	*/
; rs232cmd.c 5626	/*																																				*/
; rs232cmd.c 5627	/* Author:		Kim Engedahl, DEV, 000628	    															*/
; rs232cmd.c 5628	/* Revised:	  000628				     																					*/
; rs232cmd.c 5629	/*																																				*/
; rs232cmd.c 5630	/* Function:	--																													*/
; rs232cmd.c 5631	/* Remarks:																																*/
; rs232cmd.c 5632	/* Returns:		--																													*/
; rs232cmd.c 5633	/* Updates:		--																													*/
; rs232cmd.c 5634	/**************************************************************************/
; rs232cmd.c 5635	void FactTCXOStatus( void)
; rs232cmd.c 5636	{
	ALIGN	1
	SYMB	LINE, 5636
	PUBLIC	_FactTCXOStatus
_FactTCXOStatus:
	SYMB	TYPE, 649, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTCXOStatus", _FactTCXOStatus, #649, 0, 0, 48
	SYMB	ALAB, _FactTCXOStatus, #649
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#014H
	SYMB	SOFF, 24
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5637		char buffer[20];
; rs232cmd.c 5638	
; rs232cmd.c 5639		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5639
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1434
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1434
; rs232cmd.c 5640		{
; rs232cmd.c 5641			if ( CmdRequest)
	SYMB	LINE, 5641
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1430
; rs232cmd.c 5642			{
; rs232cmd.c 5643				if ( ParCnt)
	SYMB	LINE, 5643
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1429
; rs232cmd.c 5644					SCPIError = SyntaxErr;
	SYMB	LINE, 5644
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1434
_1429:
; rs232cmd.c 5645				else
; rs232cmd.c 5646				{
; rs232cmd.c 5647					sprintf( buffer, "%u\n", tcxo_status());
	SYMB	LINE, 5647
	CALL	_tcxo_status
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 26
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 30
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 24
; rs232cmd.c 5648					rs232puts( buffer);
	SYMB	LINE, 5648
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5649				}
; rs232cmd.c 5650			}
	SYMB	LINE, 5650
	BR	_1434
_1430:
; rs232cmd.c 5651			else
; rs232cmd.c 5652				SCPIError = SyntaxErr;
	SYMB	LINE, 5652
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 5653		}
	SYMB	LINE, 5653
_1434:
; rs232cmd.c 5654	}
	SYMB	LINE, 5654
	ADD.W	R7,#014H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5655	
; rs232cmd.c 5656	/**************************************************************************/
; rs232cmd.c 5657	/* FactMultiMediaChip																		 	     RS232CMD.C	*/
; rs232cmd.c 5658	/*																																				*/
; rs232cmd.c 5659	/* Author:		Kim Engedahl, DEV, 000505	    															*/
; rs232cmd.c 5660	/* Revised:	  000614				     																					*/
; rs232cmd.c 5661	/*																																				*/
; rs232cmd.c 5662	/* Function:	--																													*/
; rs232cmd.c 5663	/* Remarks:		--																													*/
; rs232cmd.c 5664	/* Returns:		--																													*/
; rs232cmd.c 5665	/* Updates:		--																													*/
; rs232cmd.c 5666	/**************************************************************************/
; rs232cmd.c 5667	void FactMultiMediaChip( void)
; rs232cmd.c 5668	{
	ALIGN	1
	SYMB	LINE, 5668
	PUBLIC	_FactMultiMediaChip
_FactMultiMediaChip:
	SYMB	TYPE, 650, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMultiMediaChip", _FactMultiMediaChip, #650, 0, 0, 48
	SYMB	ALAB, _FactMultiMediaChip, #650
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0AH
	SYMB	SOFF, 10
	SYMB	TYPE, 651, 'Z', #18, 1
	SYMB	IDEN, "test", -10, #651, 130, 5
	SYMB	TYPE, 653, 'Z', #3, 1
	SYMB	IDEN, "tmp", -6, #653, 130, 5
; rs232cmd.c 5669		UI test[2];
; rs232cmd.c 5670		UC tmp[2];
; rs232cmd.c 5671	
; rs232cmd.c 5672		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5672
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1445
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1445
; rs232cmd.c 5673		{
; rs232cmd.c 5674			if ( CmdRequest)
	SYMB	LINE, 5674
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1438
; rs232cmd.c 5675			{
; rs232cmd.c 5676				if ( ParCnt != 1)
	SYMB	LINE, 5676
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_1437
; rs232cmd.c 5677					SCPIError = SyntaxErr;
	SYMB	LINE, 5677
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1445
_1437:
; rs232cmd.c 5678				else
; rs232cmd.c 5679				{
; rs232cmd.c 5680					sscanf( Cmd, "%d", &test[0]);
	SYMB	LINE, 5680
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 14
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 18
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 10
; rs232cmd.c 5681	
; rs232cmd.c 5682					tmp[0] = test[0] & 0x0FF;
	SYMB	LINE, 5682
	MOV.W	R0,[R7]
	AND.B	R0L,#0FFH
	MOV.B	[R7+4],R0L
; rs232cmd.c 5683	
; rs232cmd.c 5684					TransmitIIC( 0x40, 1, tmp, IIC_PTV);
	SYMB	LINE, 5684
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+4
	MOV.B	R1L,#00H
	MOV.B	R0H,#01H
	MOV.B	R0L,#040H
	CALL	_TransmitIIC
; rs232cmd.c 5685					ReceiveIIC( 0x40, 1, &tmp[1], IIC_PTV);
	SYMB	LINE, 5685
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+5
	MOV.B	R0L,#040H
	MOV.B	R0H,#01H
	MOV.B	R1L,#00H
	CALL	_ReceiveIIC
; rs232cmd.c 5686	
; rs232cmd.c 5687					rs232printf( 12,"%03d,%03d\n", ( int) tmp[0], ( int) tmp[1]);
	SYMB	LINE, 5687
	MOV.W	R0,#0CH
	MOV.B	R1L,[R7+4]
	MOVS.B	R1H,#00H
	MOV.B	R2L,[R7+5]
	MOVS.B	R2H,#00H
	PUSH.W	R2
	SYMB	SOFF, 12
	PUSH.W	R1
	SYMB	SOFF, 14
	MOV.W	R3,#SEG( _1435 )
	MOV.W	R2,#SOF( _1435 )
	PUSH.W	R2, R3
	SYMB	SOFF, 18
	CALL	_rs232printf
	ADD.W	R7,#08H
	SYMB	SOFF, 10
; rs232cmd.c 5688				}
; rs232cmd.c 5689			}
	SYMB	LINE, 5689
	BR	_1445
_1438:
; rs232cmd.c 5690			else
; rs232cmd.c 5691			{
; rs232cmd.c 5692				if ( !PasswordProtected)
	SYMB	LINE, 5692
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1445
; rs232cmd.c 5693				{
; rs232cmd.c 5694					if ( ParCnt != 2)
	SYMB	LINE, 5694
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BEQ	_1439
; rs232cmd.c 5695						SCPIError = SyntaxErr;	
	SYMB	LINE, 5695
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1445
_1439:
; rs232cmd.c 5696					else
; rs232cmd.c 5697					{
; rs232cmd.c 5698						sscanf( Cmd, "%d,%d", &test[0], &test[1]);
	SYMB	LINE, 5698
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	PUSH.W	R4, R5
	SYMB	SOFF, 14
	PUSH.W	R2, R3
	SYMB	SOFF, 18
	MOV.W	R3,#SEG( _1436 )
	MOV.W	R2,#SOF( _1436 )
	PUSH.W	R2, R3
	SYMB	SOFF, 22
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 10
; rs232cmd.c 5699	
; rs232cmd.c 5700						tmp[0] = test[0] & 0x0FF;
	SYMB	LINE, 5700
	MOV.W	R0,[R7]
	AND.B	R0L,#0FFH
	MOV.B	[R7+4],R0L
; rs232cmd.c 5701						tmp[1] = test[1] & 0x0FF;
	SYMB	LINE, 5701
	MOV.W	R0,[R7+2]
	AND.B	R0L,#0FFH
	MOV.B	[R7+5],R0L
; rs232cmd.c 5702	
; rs232cmd.c 5703						TransmitIIC( 0x40, 2, tmp, IIC_PTV);
	SYMB	LINE, 5703
	MOV.B	R0H,#02H
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+4
	MOV.B	R1L,#00H
	MOV.W	R3,R5
	MOV.W	R2,R4
	MOV.B	R0L,#040H
	CALL	_TransmitIIC
; rs232cmd.c 5704	
; rs232cmd.c 5705						TransmitIIC( 0x40, 1, tmp, IIC_PTV);
	SYMB	LINE, 5705
	MOV.B	R1L,#00H
	MOV.B	R0H,#01H
	MOV.B	R0L,#040H
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_TransmitIIC
; rs232cmd.c 5706						ReceiveIIC( 0x40, 1, &tmp[1], IIC_PTV);
	SYMB	LINE, 5706
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+5
	MOV.B	R0L,#040H
	MOV.B	R0H,#01H
	MOV.B	R1L,#00H
	CALL	_ReceiveIIC
; rs232cmd.c 5707	
; rs232cmd.c 5708						rs232printf( 12,"%03d,%03d\n", ( int) tmp[0], ( int) tmp[1]);
	SYMB	LINE, 5708
	MOV.W	R0,#0CH
	MOV.B	R1L,[R7+4]
	MOVS.B	R1H,#00H
	MOV.B	R2L,[R7+5]
	MOVS.B	R2H,#00H
	PUSH.W	R2
	SYMB	SOFF, 12
	PUSH.W	R1
	SYMB	SOFF, 14
	MOV.W	R3,#SEG( _1435 )
	MOV.W	R2,#SOF( _1435 )
	PUSH.W	R2, R3
	SYMB	SOFF, 18
	CALL	_rs232printf
	ADD.W	R7,#08H
	SYMB	SOFF, 10
; rs232cmd.c 5709					}
; rs232cmd.c 5710				}
; rs232cmd.c 5711			}
; rs232cmd.c 5712		}
	SYMB	LINE, 5712
_1445:
; rs232cmd.c 5713	}
	SYMB	LINE, 5713
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5714	
; rs232cmd.c 5715	/**************************************************************************/
; rs232cmd.c 5716	/* FindParameter														 							     RS232CMD.C	*/
; rs232cmd.c 5717	/*																																				*/
; rs232cmd.c 5718	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 5719	/* Revised:		000603				     																					*/
; rs232cmd.c 5720	/*																																				*/
; rs232cmd.c 5721	/* Function:	Find the character defined parameter												*/
; rs232cmd.c 5722	/* Remarks:		--																													*/
; rs232cmd.c 5723	/* Returns:		The array number containing the parameter or max. array+1		*/
; rs232cmd.c 5724	/* Updates:		--																													*/
; rs232cmd.c 5725	/**************************************************************************/
; rs232cmd.c 5726	int FindParameter( char* par, struct PAR_STRUCT code* ParPtr)
; rs232cmd.c 5727	{
	ALIGN	1
	SYMB	LINE, 5727
	PUBLIC	_FindParameter
_FindParameter:
	SYMB	TYPE, 655, 'X', 12, #16, 30, 2, #259, #521
	SYMB	GFUN, "FindParameter", _FindParameter, #655, 0, 0, 112
	SYMB	ALAB, _FindParameter, #655
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#0CH
	SYMB	SOFF, 10
	SYMB	LTIM, "par", 3, 0, 2253
	SYMB	LTIM, "ParPtr", 11, 0, 2253
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "par", 3, 0, 2125
	SYMB	LTIM, "par", 19, 0, 2253
	SYMB	IDEN, "par", 19, #259, 0, 2061
	SYMB	IDEN, "ParPtr", 11, #521, 0, 2061
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; rs232cmd.c 5728		int tmp = 0;
	SYMB	LINE, 5728
	MOV.W	R6,#00H
	SYMB	LTIM, "tmp", 26, 0, 205
; rs232cmd.c 5729	
; rs232cmd.c 5730		while ( ParPtr)
	SYMB	LINE, 5730
	MOV.W	R1,R3
	MOV.W	R0,R2
	OR.W	R3,R2
	SYMB	LTIM, "ParPtr", 11, 0, 2125
	SYMB	LTIM, "ParPtr", 3, 0, 2253
	BEQ	_1452
_1448:
; rs232cmd.c 5731		{
; rs232cmd.c 5732			if (( !Cstrcmp( par, ParPtr->LongName)) || ( !Cstrcmp( par, ParPtr->ShortName)))
	SYMB	LINE, 5732
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_1454
	ADDS.B	CS,#01H
_1454:
	MOVC.W	R3,[R0+]
	SYMB	LTIM, "ParPtr", 3, 0, 2125
	SYMB	LTIM, "ParPtr", -10, 130, 2245
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "par", 19, 0, 2125
	SYMB	LTIM, "par", 3, 0, 2253
	CALL	_Cstrcmp
	SYMB	LTIM, "par", 3, 0, 2125
	SYMB	LTIM, "par", 19, 0, 2253
	OR.W	R0,R0
	BEQ	_1449
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	ADD.W	R0,#04H
	ADDC.W	R1,#00H
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_1455
	ADDS.B	CS,#01H
_1455:
	MOVC.W	R3,[R0+]
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "par", 19, 0, 2125
	SYMB	LTIM, "par", 3, 0, 2253
	CALL	_Cstrcmp
	SYMB	LTIM, "par", 3, 0, 2125
	SYMB	LTIM, "par", 19, 0, 2253
	OR.W	R0,R0
	BNE	_1450
_1449:
; rs232cmd.c 5733				return( tmp);
	SYMB	LINE, 5733
	MOV.W	R0,R6
	SYMB	LTIM, "tmp", 26, 0, 77
	SYMB	LTIM, "tmp", 2, 0, 205
	BR	_1453
_1450:
	SYMB	LTIM, "par", 19, 0, 2125
	SYMB	LTIM, "par", 19, 0, 2253
	SYMB	LTIM, "ParPtr", -10, 130, 2117
	SYMB	LTIM, "ParPtr", -10, 130, 2245
	SYMB	LTIM, "tmp", 2, 0, 77
	SYMB	LTIM, "tmp", 26, 0, 205
; rs232cmd.c 5734	
; rs232cmd.c 5735			ParPtr = ParPtr->SameLevel;
	SYMB	LINE, 5735
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	ADD.W	R0,#08H
	ADDC.W	R1,#00H
	SYMB	LTIM, "ParPtr", -10, 130, 2117
	SYMB	LTIM, "ParPtr", 3, 0, 2253
	SYMB	LTIM, "ParPtr", 3, 0, 2125
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_1456
	ADDS.B	CS,#01H
_1456:
	MOVC.W	R3,[R0+]
	SYMB	LTIM, "ParPtr", 11, 0, 2253
; rs232cmd.c 5736	
; rs232cmd.c 5737			if ( tmp < 255)
	SYMB	LINE, 5737
	CMP.W	R6,#0FFH
	BGE	_1452
; rs232cmd.c 5738				tmp++;
	SYMB	LINE, 5738
	ADDS.W	R6,#01H
	SYMB	LTIM, "tmp", 26, 0, 77
	SYMB	LTIM, "tmp", 26, 0, 205
	SYMB	LINE, 5730
	MOV.W	R1,R3
	MOV.W	R0,R2
	OR.W	R3,R2
	SYMB	LTIM, "ParPtr", 11, 0, 2125
	SYMB	LTIM, "ParPtr", 3, 0, 2253
	BNE	_1448
; rs232cmd.c 5739			else
; rs232cmd.c 5740				break;
; rs232cmd.c 5741		}
	SYMB	LINE, 5741
_1452:
; rs232cmd.c 5742	
; rs232cmd.c 5743		return( -1);
	SYMB	LINE, 5743
	MOV.W	R0,#0FFFFH
	SYMB	LTIM, "ParPtr", 3, 0, 2125
; rs232cmd.c 5744	}
	SYMB	LINE, 5744
_1453:
	ADDS.W	R7,#04H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "tmp", 26, 0, 77
	SYMB	LTIM, "par", 19, 0, 2125
	SYMB	EFUN
; rs232cmd.c 5745	
; rs232cmd.c 5746	
; rs232cmd.c 5747	/**************************************************************************/
; rs232cmd.c 5748	/* FLTToSamples															  								 RS232CMD.C */
; rs232cmd.c 5749	/*																																				*/
; rs232cmd.c 5750	/* Author:		Kim Engedahl, DEV, 970211	    															*/
; rs232cmd.c 5751	/* Revised:		000530				     																					*/
; rs232cmd.c 5752	/*																																				*/	
; rs232cmd.c 5753	/* Function:	--																													*/
; rs232cmd.c 5754	/* Remarks:		PAL Range: 1728*256, NTSC Range: 1716*256										*/
; rs232cmd.c 5755	/* Returns:		FLT in samples, or -1 if illegal														*/
; rs232cmd.c 5756	/* Updates:		--																													*/
; rs232cmd.c 5757	/***************************************************************************/
; rs232cmd.c 5758	long FLTToSamples( UC system, int F, int L, float T) {
	ALIGN	1
	SYMB	LINE, 5758
	PUBLIC	_FLTToSamples
_FLTToSamples:
	SYMB	TYPE, 656, 'X', 12, #6, 30, 4, #3, #16, #16, #10
	SYMB	GFUN, "FLTToSamples", _FLTToSamples, #656, 0, 0, 112
	SYMB	ALAB, _FLTToSamples, #656
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#018H
	SYMB	SOFF, 30
	SYMB	LTIM, "system", 0, 0, 2253
	MOV.B	[R7+18],R0L
	SYMB	LTIM, "system", 0, 0, 2125
	SYMB	LTIM, "system", -12, 130, 2245
	MOV.W	[R7+14],R2
	SYMB	IDEN, "system", -7, #3, 130, 2053
	SYMB	IDEN, "F", -1, #16, 130, 2053
	SYMB	LTIM, "F", -1, 0, 2117
	SYMB	IDEN, "L", -1, #16, 130, 2053
	SYMB	LTIM, "L", -1, 0, 2117
	SYMB	IDEN, "T", 4, #10, 130, 2053
	SYMB	IDEN, "samples", -10, #6, 130, 5
	SYMB	IDEN, "minus", -1, #2, 130, 5
	SYMB	LTIM, "minus", -1, 0, 69
; rs232cmd.c 5759	
; rs232cmd.c 5760		long samples;
; rs232cmd.c 5761		char minus;
; rs232cmd.c 5762	
; rs232cmd.c 5763		if (( F == 0) && ( L == 0) && ( T == 0))
	SYMB	LINE, 5763
	MOV.W	[R7+16],R1
	OR.W	R1,R1
	BNE	_1463
	MOV.W	R0,[R7+14]
	BNE	_1463
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BNE	_1463
; rs232cmd.c 5764			return( 0);
	SYMB	LINE, 5764
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_1530
_1463:
	SYMB	LTIM, "system", -12, 130, 2117
	SYMB	LTIM, "system", -12, 130, 2245
; rs232cmd.c 5765	
; rs232cmd.c 5766		if (( F <= 0) && ( L <= 0) && ( T <= 0))
	SYMB	LINE, 5766
	CMP.W	[R7+16],#00H
	BGT	_1466
	CMP.W	[R7+14],#00H
	BGT	_1466
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BGT	_1466
; rs232cmd.c 5767		{
; rs232cmd.c 5768			minus = 1;
	SYMB	LINE, 5768
	MOV.B	[R7+12],#01H
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5769		}
	SYMB	LINE, 5769
	BR	_1470
_1466:
; rs232cmd.c 5770		else
; rs232cmd.c 5771		{
; rs232cmd.c 5772			if (( F >= 0) && ( L >= 0) && ( T >= 0))
	SYMB	LINE, 5772
	CMP.W	[R7+16],#00H
	BLT	_1468
	CMP.W	[R7+14],#00H
	BLT	_1468
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BGE	_1469
; rs232cmd.c 5773				minus = 0;
	SYMB	LINE, 5773
_1468:
; rs232cmd.c 5774			else
; rs232cmd.c 5775				return( -1);
	SYMB	LINE, 5775
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1530
	SYMB	LINE, 5773
_1469:
	SYMB	LTIM, "system", -12, 130, 2117
	SYMB	LTIM, "system", -12, 130, 2245
	MOV.B	[R7+12],#00H
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5776		}
	SYMB	LINE, 5776
_1470:
; rs232cmd.c 5777	
; rs232cmd.c 5778																				// 1 sample = (1/27MHz)/256
; rs232cmd.c 5779		samples = ( long)(( T*6912L)/1000L + 0.5);	
	SYMB	LINE, 5779
	MOV.W	R1,#045D8H
	MOV.W	R0,#00H
	MOV.W	R3,[R7+36]
	MOV.W	R2,[R7+34]
	FCALL	__MUL_SPF
	MOV.W	R3,#0447AH
	MOV.W	R2,#00H
	FCALL	__DIV_SPF
	FCALL	__SPF2DPF
	MOV.W	[R7+10],#03FE0H
	MOV.W	[R7+8],#00H
	MOV.W	[R7+6],#00H
	MOV.W	[R7+4],#00H
	LEA	R6,R7+4
	FCALL	__ADD_DPF
	FCALL	__DPF2L
	MOV.W	[R7+22],R1
	MOV.W	[R7+20],R0
; rs232cmd.c 5780	
; rs232cmd.c 5781		if ( system < NTSC)									// If selected system is PAL..
	SYMB	LINE, 5781
	MOV.B	R2L,[R7+18]
	CMP.B	R2L,#02H
	SYMB	LTIM, "system", -12, 130, 2117
	SYMB	LTIM, "system", 8, 0, 2253
	BCC	_1495
	MOV.W	[R7+10],R1
	MOV.W	[R7+8],R0
; rs232cmd.c 5782		{
; rs232cmd.c 5783	
; rs232cmd.c 5784			if ( labs( samples) > 442367L)	 	// Test for illegal time var
	SYMB	LINE, 5784
	CALL	_labs
	SYMB	LTIM, "system", 8, 0, 2125
	CMP.W	R1,#06H
	BLT	_1471
	BGT	_1536
	CMP.W	R0,#0BFFFH
	BL	_1471
_1536:
; rs232cmd.c 5785				return( -1);
	SYMB	LINE, 5785
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1530
_1471:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5786	
; rs232cmd.c 5787			switch ( F)												// Test for illegal field & line
	SYMB	LINE, 5787
	CMP.W	[R7+16],#00H
	BEQ	_1472
	CMP.W	[R7+16],#0FFFFH
	BEQ	_1477
	CMP.W	[R7+16],#0FFFDH
	BEQ	_1477
	CMP.W	[R7+16],#02H
	BEQ	_1477
	CMP.W	[R7+16],#0FFFEH
	BEQ	_1480
	CMP.W	[R7+16],#01H
	BEQ	_1480
	CMP.W	[R7+16],#03H
	BEQ	_1480
	CMP.W	[R7+16],#04H
	BEQ	_1481
	BR	_1483
; rs232cmd.c 5788			{
; rs232cmd.c 5789				case 0:
	SYMB	LINE, 5789
_1472:
; rs232cmd.c 5790					if (( minus && ( L < -311)) || ( !minus && ( L > 312)))
	SYMB	LINE, 5790
	MOV.B	R0L,[R7+12]
	BEQ	_1473
	CMP.W	[R7+14],#0FEC9H
	BLT	_1474
_1473:
	MOV.B	R0L,[R7+12]
	BNE	_1488
	CMP.W	[R7+14],#0138H
	BLE	_1488
_1474:
; rs232cmd.c 5791						return( -1);
	SYMB	LINE, 5791
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1530
; rs232cmd.c 5792					break;
; rs232cmd.c 5793	
; rs232cmd.c 5794				case -1:
; rs232cmd.c 5795				case -3:
; rs232cmd.c 5796				case 2:
	SYMB	LINE, 5796
_1477:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5797					if ( abs( L) > 312)
	SYMB	LINE, 5797
	MOV.W	R0,[R7+14]
	CALL	_abs
	CMP.W	R0,#0138H
	BLE	_1488
; rs232cmd.c 5798						return( -1);
	SYMB	LINE, 5798
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1530
; rs232cmd.c 5799					break;
; rs232cmd.c 5800	
; rs232cmd.c 5801				case -2:
; rs232cmd.c 5802				case 1:
; rs232cmd.c 5803				case 3:
	SYMB	LINE, 5803
_1480:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5804					if ( abs( L) > 311)
	SYMB	LINE, 5804
	MOV.W	R0,[R7+14]
	CALL	_abs
	CMP.W	R0,#0137H
	BLE	_1488
; rs232cmd.c 5805						return( -1);
	SYMB	LINE, 5805
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1530
; rs232cmd.c 5806					break;
; rs232cmd.c 5807	
; rs232cmd.c 5808				case 4:
	SYMB	LINE, 5808
_1481:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5809					if (( L > 0) || ( T > 0.0))
	SYMB	LINE, 5809
	CMP.W	[R7+14],#00H
	BGT	_1482
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__SPF2DPF
	MOV.W	[R7+6],#00H
	MOV.W	[R7+4],#00H
	MOV.W	[R7+2],#00H
	MOV.W	[R7],#00H
	MOV.W	R6,R7
	FCALL	__CMP_DPF
	CMP.B	R0L,#01H
	BNE	_1488
_1482:
; rs232cmd.c 5810						return( -1);
	SYMB	LINE, 5810
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1530
; rs232cmd.c 5811					break;
; rs232cmd.c 5812	
; rs232cmd.c 5813				default:
	SYMB	LINE, 5813
_1483:
; rs232cmd.c 5814					return( -1);
	SYMB	LINE, 5814
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1530
; rs232cmd.c 5815			}
	SYMB	LINE, 5815
_1488:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5816	
; rs232cmd.c 5817			if ( !minus)											// if posistive delay..
	SYMB	LINE, 5817
	MOV.B	R0L,[R7+12]
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", 0, 0, 205
	BNE	_1489
; rs232cmd.c 5818			{
; rs232cmd.c 5819				if ( F % 2)
	SYMB	LINE, 5819
	MOV.W	R0,[R7+16]
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#02H
	OR.W	R1,R1
	BEQ	_1494
; rs232cmd.c 5820				{
; rs232cmd.c 5821					L += 313;
	SYMB	LINE, 5821
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0139H
	SYMB	LTIM, "minus", 0, 0, 77
	MOV.W	[R7+14],R0
; rs232cmd.c 5822					F--;
	SYMB	LINE, 5822
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#0FH
	MOV.W	[R7+16],R0
; rs232cmd.c 5823				}
; rs232cmd.c 5824			}
	SYMB	LINE, 5824
	BR	_1494
_1489:
; rs232cmd.c 5825			else															// ..else delay is negative
; rs232cmd.c 5826			{
; rs232cmd.c 5827				F += 7;
	SYMB	LINE, 5827
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#07H
; rs232cmd.c 5828	
; rs232cmd.c 5829				samples += 442367L;
	SYMB	LINE, 5829
	MOV.W	R3,[R7+10]
	MOV.W	R2,[R7+8]
	ADD.W	R2,#0BFFFH
	ADDC.W	R3,#06H
	MOV.W	[R7+22],R3
	MOV.W	[R7+20],R2
; rs232cmd.c 5830	
; rs232cmd.c 5831				if ( F % 2) {
	SYMB	LINE, 5831
	MOV.W	[R7+16],R0
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#02H
	OR.W	R1,R1
	BEQ	_1490
; rs232cmd.c 5832					L += 624;
	SYMB	LINE, 5832
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0270H
	MOV.W	[R7+14],R0
; rs232cmd.c 5833					F--;
	SYMB	LINE, 5833
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#0FH
	MOV.W	[R7+16],R0
; rs232cmd.c 5834				}
	SYMB	LINE, 5834
	BR	_1491
_1490:
; rs232cmd.c 5835				else
; rs232cmd.c 5836					L += 312;
	SYMB	LINE, 5836
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0138H
	MOV.W	[R7+14],R0
_1491:
; rs232cmd.c 5837	
; rs232cmd.c 5838				if ( T == 0)
	SYMB	LINE, 5838
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BNE	_1494
; rs232cmd.c 5839					samples++;
	SYMB	LINE, 5839
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,#01H
	ADDC.W	R1,#00H
	MOV.W	[R7+22],R1
	MOV.W	[R7+20],R0
; rs232cmd.c 5840			}
	SYMB	LINE, 5840
_1494:
; rs232cmd.c 5841	
; rs232cmd.c 5842			samples += F*138240000L + L*442368L;
	SYMB	LINE, 5842
	MOV.W	R0,[R7+16]
	SEXT.W	R1
	MOV.W	R3,R1
	MOV.W	R2,R0
	ASL.D	R2,#05H
	ADD.W	R2,R0
	ADDC.W	R3,R1
	ASL.D	R2,#05H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#02H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#02H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#0DH
	MOV.W	R0,[R7+14]
	MOV.W	R4,R0
	SEXT.W	R5
	MOV.W	R1,R5
	MOV.W	R0,R4
	ASL.D	R0,#03H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#0EH
	ADD.W	R2,R0
	ADDC.W	R3,R1
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,R2
	ADDC.W	R1,R3
; rs232cmd.c 5843		}
	SYMB	LINE, 5843
	BR	_1516
_1495:
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5844		else																// ..else system is NTSC
; rs232cmd.c 5845		{
; rs232cmd.c 5846	
; rs232cmd.c 5847			if ( labs( samples) > 439295L)		// Test for illegal time var
	SYMB	LINE, 5847
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	CALL	_labs
	CMP.W	R1,#06H
	BLT	_1496
	BGT	_1542
	CMP.W	R0,#0B3FFH
	BL	_1496
_1542:
; rs232cmd.c 5848				return( -1);
	SYMB	LINE, 5848
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1530
_1496:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5849	
; rs232cmd.c 5850			switch ( F)												// Test for illegal field & line
	SYMB	LINE, 5850
	CMP.W	[R7+16],#00H
	BEQ	_1497
	CMP.W	[R7+16],#0FFFFH
	BEQ	_1500
	CMP.W	[R7+16],#01H
	BEQ	_1501
	CMP.W	[R7+16],#02H
	BEQ	_1502
	BR	_1504
; rs232cmd.c 5851			{
; rs232cmd.c 5852				case 0:
	SYMB	LINE, 5852
_1497:
; rs232cmd.c 5853					if (( minus && ( L < -261)) || ( !minus && ( L > 262)))
	SYMB	LINE, 5853
	MOV.B	R0L,[R7+12]
	BEQ	_1498
	CMP.W	[R7+14],#0FEFBH
	BLT	_1499
_1498:
	MOV.B	R0L,[R7+12]
	BNE	_1509
	CMP.W	[R7+14],#0106H
	BLE	_1509
_1499:
; rs232cmd.c 5854						return( -1);
	SYMB	LINE, 5854
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1530
; rs232cmd.c 5855					break;
; rs232cmd.c 5856	
; rs232cmd.c 5857				case -1:
	SYMB	LINE, 5857
_1500:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5858					if ( abs( L) > 262)
	SYMB	LINE, 5858
	MOV.W	R0,[R7+14]
	CALL	_abs
	CMP.W	R0,#0106H
	BLE	_1509
; rs232cmd.c 5859						return( -1);
	SYMB	LINE, 5859
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1530
; rs232cmd.c 5860					break;
; rs232cmd.c 5861	
; rs232cmd.c 5862				case 1:
	SYMB	LINE, 5862
_1501:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5863					if ( abs( L) > 261)
	SYMB	LINE, 5863
	MOV.W	R0,[R7+14]
	CALL	_abs
	CMP.W	R0,#0105H
	BLE	_1509
; rs232cmd.c 5864						return( -1);
	SYMB	LINE, 5864
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1530
; rs232cmd.c 5865					break;
; rs232cmd.c 5866	
; rs232cmd.c 5867				case 2:
	SYMB	LINE, 5867
_1502:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5868					if (( L > 0) || ( T > 0.0))
	SYMB	LINE, 5868
	CMP.W	[R7+14],#00H
	BGT	_1503
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__SPF2DPF
	MOV.W	[R7+10],#00H
	MOV.W	[R7+8],#00H
	MOV.W	[R7+6],#00H
	MOV.W	[R7+4],#00H
	LEA	R6,R7+4
	FCALL	__CMP_DPF
	CMP.B	R0L,#01H
	BNE	_1509
_1503:
; rs232cmd.c 5869						return( -1);
	SYMB	LINE, 5869
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1530
; rs232cmd.c 5870					break;
; rs232cmd.c 5871	
; rs232cmd.c 5872				default:
	SYMB	LINE, 5872
_1504:
; rs232cmd.c 5873					return( -1);
	SYMB	LINE, 5873
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1530
; rs232cmd.c 5874			}
	SYMB	LINE, 5874
_1509:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5875	
; rs232cmd.c 5876			if ( !minus)										// if posistive delay..
	SYMB	LINE, 5876
	MOV.B	R0L,[R7+12]
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", 0, 0, 205
	BNE	_1510
; rs232cmd.c 5877			{						
; rs232cmd.c 5878	
; rs232cmd.c 5879				if ( F % 2)
	SYMB	LINE, 5879
	MOV.W	R0,[R7+16]
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#02H
	OR.W	R1,R1
	BEQ	_1515
; rs232cmd.c 5880				{
; rs232cmd.c 5881					L += 263;
	SYMB	LINE, 5881
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0107H
	SYMB	LTIM, "minus", 0, 0, 77
	MOV.W	[R7+14],R0
; rs232cmd.c 5882					F--;
	SYMB	LINE, 5882
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#0FH
	MOV.W	[R7+16],R0
; rs232cmd.c 5883				}
; rs232cmd.c 5884			}
	SYMB	LINE, 5884
	BR	_1515
_1510:
; rs232cmd.c 5885			else															// ..else delay is negative
; rs232cmd.c 5886			{																	
; rs232cmd.c 5887				F += 3;
	SYMB	LINE, 5887
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#03H
; rs232cmd.c 5888	
; rs232cmd.c 5889				samples += 439295;
	SYMB	LINE, 5889
	MOV.W	R3,[R7+22]
	MOV.W	R2,[R7+20]
	ADD.W	R2,#0B3FFH
	ADDC.W	R3,#06H
	MOV.W	[R7+22],R3
	MOV.W	[R7+20],R2
; rs232cmd.c 5890	
; rs232cmd.c 5891				if ( F % 2)
	SYMB	LINE, 5891
	MOV.W	[R7+16],R0
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#02H
	OR.W	R1,R1
	BEQ	_1511
; rs232cmd.c 5892				{
; rs232cmd.c 5893					L += 524;
	SYMB	LINE, 5893
	MOV.W	R0,[R7+14]
	ADD.W	R0,#020CH
	MOV.W	[R7+14],R0
; rs232cmd.c 5894					F--;
	SYMB	LINE, 5894
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#0FH
	MOV.W	[R7+16],R0
; rs232cmd.c 5895				}
	SYMB	LINE, 5895
	BR	_1512
_1511:
; rs232cmd.c 5896				else
; rs232cmd.c 5897					L += 262;
	SYMB	LINE, 5897
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0106H
	MOV.W	[R7+14],R0
_1512:
; rs232cmd.c 5898	
; rs232cmd.c 5899				if ( T == 0)
	SYMB	LINE, 5899
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BNE	_1515
; rs232cmd.c 5900					samples++;
	SYMB	LINE, 5900
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,#01H
	ADDC.W	R1,#00H
	MOV.W	[R7+22],R1
	MOV.W	[R7+20],R0
; rs232cmd.c 5901			}
	SYMB	LINE, 5901
_1515:
; rs232cmd.c 5902	
; rs232cmd.c 5903			samples += F*115315200L + L*439296L;
	SYMB	LINE, 5903
	MOV.W	R0,[R7+16]
	SEXT.W	R1
	MOV.W	R3,R1
	MOV.W	R2,R0
	ASL.D	R2,#03H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#03H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#06H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#03H
	ADD.W	R2,R0
	ADDC.W	R3,R1
	ASL.D	R2,#03H
	ADD.W	R2,R0
	ADDC.W	R3,R1
	ASL.D	R2,#09H
	MOV.W	R0,[R7+14]
	MOV.W	R4,R0
	SEXT.W	R5
	MOV.W	R1,R5
	MOV.W	R0,R4
	ASL.D	R0,#03H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	ADD.W	R0,R4
	ADDC.W	R1,R5
	ASL.D	R0,#0AH
	ADD.W	R2,R0
	ADDC.W	R3,R1
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,R2
	ADDC.W	R1,R3
; rs232cmd.c 5904		}
	SYMB	LINE, 5904
_1516:
; rs232cmd.c 5905	
; rs232cmd.c 5906		return( samples);
; rs232cmd.c 5907	}
	SYMB	LINE, 5907
_1530:
	ADD.W	R7,#018H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5908	
; rs232cmd.c 5909	/**************************************************************************/
; rs232cmd.c 5910	/* PrintSamplesToFLT												  								 RS232CMD.C */
; rs232cmd.c 5911	/*																																				*/
; rs232cmd.c 5912	/* Author:		Kim Engedahl, DEV, 970211	    															*/
; rs232cmd.c 5913	/* Revised:		000530												     													*/
; rs232cmd.c 5914	/*																																				*/
; rs232cmd.c 5915	/* Function:	--																													*/
; rs232cmd.c 5916	/* Remarks:		PAL Range: 1728*256, NTSC Range: 1716*256										*/
; rs232cmd.c 5917	/* Returns:		--																													*/
; rs232cmd.c 5918	/* Updates:		--																													*/
; rs232cmd.c 5919	/**************************************************************************/
; rs232cmd.c 5920	void PrintSamplesToFLT( UC system, long samples) {
	ALIGN	1
	SYMB	LINE, 5920
	PUBLIC	_PrintSamplesToFLT
_PrintSamplesToFLT:
	SYMB	TYPE, 657, 'X', 12, #1, 30, 2, #3, #6
	SYMB	GFUN, "PrintSamplesToFLT", _PrintSamplesToFLT, #657, 0, 0, 112
	SYMB	ALAB, _PrintSamplesToFLT, #657
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#0AH
	SYMB	SOFF, 12
	SYMB	LTIM, "system", 0, 0, 2253
	SYMB	IDEN, "system", 0, #3, 0, 2061
	SYMB	IDEN, "samples", -1, #6, 130, 2053
	SYMB	LTIM, "samples", -1, 0, 2117
	SYMB	IDEN, "sign", -1, #2, 130, 5
	SYMB	LTIM, "sign", -1, 0, 69
	SYMB	IDEN, "frame", -1, #16, 130, 5
	SYMB	LTIM, "frame", -1, 0, 69
	SYMB	IDEN, "field", -1, #16, 130, 5
	SYMB	LTIM, "field", -1, 0, 69
	SYMB	IDEN, "line", -8, #16, 130, 5
; rs232cmd.c 5921	
; rs232cmd.c 5922		char sign;
; rs232cmd.c 5923		int frame, field, line;
; rs232cmd.c 5924	
; rs232cmd.c 5925		sign = '+';
	SYMB	LINE, 5925
	MOV.B	[R7+2],#02BH
	SYMB	LTIM, "sign", -10, 130, 197
; rs232cmd.c 5926	
; rs232cmd.c 5927		if ( system < NTSC)												// If system selected is PAL..
	SYMB	LINE, 5927
	CMP.B	R0L,#02H
	BCC	_1553
; rs232cmd.c 5928		{
; rs232cmd.c 5929			// 552960000 = 2*625*1728*256
; rs232cmd.c 5930			// 276480000 = 625*1728*256
; rs232cmd.c 5931			// 442368    = 1728*256
; rs232cmd.c 5932	
; rs232cmd.c 5933			if ( samples >= 552960000L)
	SYMB	LINE, 5933
	MOV.W	R5,R3
	MOV.W	R4,R2
	CMP.W	R3,#020F5H
	BLT	_1552
	BGT	_1565
	CMP.W	R2,#08000H
	BCS	_1552
_1565:
; rs232cmd.c 5934			{
; rs232cmd.c 5935				samples--;
	SYMB	LINE, 5935
	SUB.W	R4,#01H
	SUBB.W	R5,#00H
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "system", 0, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
; rs232cmd.c 5936	
; rs232cmd.c 5937				frame = samples / 276480000L;
	SYMB	LINE, 5937
	MOV.W	R3,#0107AH
	MOV.W	R2,#0C000H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	SYMB	LTIM, "samples", 3, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
	MOV.W	[R7],R0
	SYMB	LTIM, "frame", -12, 130, 197
; rs232cmd.c 5938				line = ( samples % 276480000L) /  442368L;
	SYMB	LINE, 5938
	MOV.W	R3,#0107AH
	MOV.W	R2,#0C000H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
	SYMB	LTIM, "samples", 3, 0, 2125
	MOV.W	R3,#06H
	MOV.W	R2,#0C000H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	MOV.W	R6,R0
	MOV.W	[R7+4],R6
; rs232cmd.c 5939				samples = ( samples % 276480000L) %  442368L;
	SYMB	LINE, 5939
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#06H
	MOV.W	R2,#0C000H
	FCALL	__SMODL
	SYMB	LTIM, "samples", 3, 0, 2253
; rs232cmd.c 5940				field = 2*frame;
	SYMB	LINE, 5940
	MOV.W	R2,[R7]
	ASL.W	R2,#01H
	SYMB	LTIM, "frame", -12, 130, 69
	SYMB	LTIM, "frame", 10, 0, 205
	SYMB	LTIM, "frame", 10, 0, 77
	MOV.W	R3,R2
	SYMB	LTIM, "field", 14, 0, 205
; rs232cmd.c 5941	
; rs232cmd.c 5942				if ( line > 312)
	SYMB	LINE, 5942
	MOV.W	R4,#0138H
	CMP.W	R6,#0138H
	BLE	_1550
; rs232cmd.c 5943				{
; rs232cmd.c 5944					field++;
	SYMB	LINE, 5944
	ADDS.W	R2,#01H
	MOV.W	R3,R2
	SYMB	LTIM, "field", 14, 0, 77
	SYMB	LTIM, "field", 14, 0, 205
; rs232cmd.c 5945					line = 624-line;
	SYMB	LINE, 5945
	MOV.W	R2,#0270H
	SUB.W	R2,R6
	MOV.W	[R7+4],R2
; rs232cmd.c 5946				}
	SYMB	LINE, 5946
	BR	_1551
_1550:
; rs232cmd.c 5947				else
; rs232cmd.c 5948					line = 312-line;
	SYMB	LINE, 5948
	MOV.W	R2,[R7+4]
	SUB.W	R4,R2
	MOV.W	[R7+4],R4
_1551:
; rs232cmd.c 5949	
; rs232cmd.c 5950				samples = 442368L - 1 - samples;
	SYMB	LINE, 5950
	MOV.W	R5,#06H
	MOV.W	R4,#0BFFFH
	SUB.W	R4,R0
	SUBB.W	R5,R1
	SYMB	LTIM, "samples", 3, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 5951				field = 7-field;
	SYMB	LINE, 5951
	MOV.W	R1,#07H
	SUB.W	R1,R3
	MOV.W	R0,R1
	SYMB	LTIM, "field", 14, 0, 77
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 5952	
; rs232cmd.c 5953				if ( field != 4)
	SYMB	LINE, 5953
	CMP.W	R1,#04H
	BEQ	_1563
; rs232cmd.c 5954					sign = '-';
	SYMB	LINE, 5954
	MOV.B	[R7+2],#02DH
	SYMB	LTIM, "sign", -10, 130, 69
	SYMB	LTIM, "sign", -10, 130, 197
; rs232cmd.c 5955			}
	SYMB	LINE, 5955
	BR	_1563
_1552:
; rs232cmd.c 5956			else
; rs232cmd.c 5957			{
; rs232cmd.c 5958				frame = samples / 276480000L;
	SYMB	LINE, 5958
	MOV.W	R3,#0107AH
	MOV.W	R2,#0C000H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SDIVL
	SYMB	LTIM, "field", 2, 0, 77
	MOV.W	[R7],R0
	SYMB	LTIM, "frame", -12, 130, 197
; rs232cmd.c 5959				line = ( samples % 276480000L) / 442368L;
	SYMB	LINE, 5959
	MOV.W	R3,#0107AH
	MOV.W	R2,#0C000H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
	SYMB	LTIM, "samples", 3, 0, 2125
	MOV.W	R3,#06H
	MOV.W	R2,#0C000H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	MOV.W	R6,R0
	MOV.W	[R7+4],R6
; rs232cmd.c 5960				samples = ( samples % 276480000L) % 442368L;
	SYMB	LINE, 5960
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#06H
	MOV.W	R2,#0C000H
	FCALL	__SMODL
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 5961				field = 2*frame;
	SYMB	LINE, 5961
	MOV.W	R1,[R7]
	ASL.W	R1,#01H
	SYMB	LTIM, "frame", -12, 130, 69
	SYMB	LTIM, "frame", 6, 0, 205
	SYMB	LTIM, "frame", 6, 0, 77
	MOV.W	R0,R1
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 5962	
; rs232cmd.c 5963				if ( line > 312)
	SYMB	LINE, 5963
	CMP.W	R6,#0138H
	BLE	_1563
; rs232cmd.c 5964				{
; rs232cmd.c 5965					field++;
	SYMB	LINE, 5965
	ADDS.W	R1,#01H
	MOV.W	R0,R1
	SYMB	LTIM, "field", 2, 0, 77
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 5966					line -= 313;
	SYMB	LINE, 5966
	SUB.W	R6,#0139H
	MOV.W	[R7+4],R6
; rs232cmd.c 5967				}
; rs232cmd.c 5968			}
; rs232cmd.c 5969		}
	SYMB	LINE, 5969
	BR	_1563
_1553:
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 11, 0, 2253
; rs232cmd.c 5970		else {                  									// ..system selected is NTSC
; rs232cmd.c 5971			if ( samples >= 230630400L)
	SYMB	LINE, 5971
	MOV.W	R5,R3
	MOV.W	R4,R2
	CMP.W	R3,#0DBFH
	BLT	_1556
	BGT	_1569
	CMP.W	R2,#02400H
	BCS	_1556
_1569:
	SYMB	LTIM, "samples", 11, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 5972			{
; rs232cmd.c 5973				// 230630400 = 525*1716*256
; rs232cmd.c 5974				// 439296    = 1716*256
; rs232cmd.c 5975	
; rs232cmd.c 5976				samples--;
	SYMB	LINE, 5976
	SUB.W	R4,#01H
	SUBB.W	R5,#00H
	SYMB	LTIM, "samples", 19, 0, 2125
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "field", 2, 0, 77
	SYMB	LTIM, "samples", 3, 0, 2253
; rs232cmd.c 5977	
; rs232cmd.c 5978				frame = samples / 230630400L;
	SYMB	LINE, 5978
	MOV.W	R3,#0DBFH
	MOV.W	R2,#02400H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	SYMB	LTIM, "samples", 3, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
	MOV.W	[R7],R0
	SYMB	LTIM, "frame", -12, 130, 197
; rs232cmd.c 5979				line = ( samples % 230630400L) / 439296L;
	SYMB	LINE, 5979
	MOV.W	R3,#0DBFH
	MOV.W	R2,#02400H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
	SYMB	LTIM, "samples", 3, 0, 2125
	MOV.W	R3,#06H
	MOV.W	R2,#0B400H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	MOV.W	R6,R0
	MOV.W	[R7+4],R6
; rs232cmd.c 5980				samples = ( samples % 230630400L) % 439296L;
	SYMB	LINE, 5980
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#06H
	MOV.W	R2,#0B400H
	FCALL	__SMODL
	SYMB	LTIM, "samples", 3, 0, 2253
; rs232cmd.c 5981	
; rs232cmd.c 5982				field = 2*frame;
	SYMB	LINE, 5982
	MOV.W	R2,[R7]
	ASL.W	R2,#01H
	SYMB	LTIM, "frame", -12, 130, 69
	SYMB	LTIM, "frame", 10, 0, 205
	SYMB	LTIM, "frame", 10, 0, 77
	MOV.W	R3,R2
	SYMB	LTIM, "field", 14, 0, 205
; rs232cmd.c 5983	
; rs232cmd.c 5984				if ( line > 262)
	SYMB	LINE, 5984
	MOV.W	R4,#0106H
	CMP.W	R6,#0106H
	BLE	_1554
; rs232cmd.c 5985				{
; rs232cmd.c 5986					field++;
	SYMB	LINE, 5986
	ADDS.W	R2,#01H
	MOV.W	R3,R2
	SYMB	LTIM, "field", 14, 0, 77
	SYMB	LTIM, "field", 14, 0, 205
; rs232cmd.c 5987					line = 524-line;
	SYMB	LINE, 5987
	MOV.W	R2,#020CH
	SUB.W	R2,R6
	MOV.W	[R7+4],R2
; rs232cmd.c 5988				}
	SYMB	LINE, 5988
	BR	_1555
_1554:
; rs232cmd.c 5989				else
; rs232cmd.c 5990					line = 262-line;
	SYMB	LINE, 5990
	MOV.W	R2,[R7+4]
	SUB.W	R4,R2
	MOV.W	[R7+4],R4
_1555:
; rs232cmd.c 5991	
; rs232cmd.c 5992				samples = 439296L - 1 - samples;
	SYMB	LINE, 5992
	MOV.W	R5,#06H
	MOV.W	R4,#0B3FFH
	SUB.W	R4,R0
	SUBB.W	R5,R1
	SYMB	LTIM, "samples", 3, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 5993				field = 3 - field;
	SYMB	LINE, 5993
	MOV.W	R1,#03H
	SUB.W	R1,R3
	MOV.W	R0,R1
	SYMB	LTIM, "field", 14, 0, 77
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 5994	
; rs232cmd.c 5995				if ( field != 2)
	SYMB	LINE, 5995
	CMP.W	R1,#02H
	BEQ	_1563
; rs232cmd.c 5996					sign = '-';
	SYMB	LINE, 5996
	MOV.B	[R7+2],#02DH
	SYMB	LTIM, "sign", -10, 130, 69
	SYMB	LTIM, "sign", -10, 130, 197
; rs232cmd.c 5997			}
	SYMB	LINE, 5997
	BR	_1563
_1556:
; rs232cmd.c 5998			else
; rs232cmd.c 5999			{
; rs232cmd.c 6000				frame = samples / 230630400L;
	SYMB	LINE, 6000
	MOV.W	R3,#0DBFH
	MOV.W	R2,#02400H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SDIVL
	SYMB	LTIM, "field", 2, 0, 77
	MOV.W	[R7],R0
	SYMB	LTIM, "frame", -12, 130, 197
; rs232cmd.c 6001				line = ( samples % 230630400L) / 439296L;
	SYMB	LINE, 6001
	MOV.W	R3,#0DBFH
	MOV.W	R2,#02400H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
	SYMB	LTIM, "samples", 3, 0, 2125
	MOV.W	R3,#06H
	MOV.W	R2,#0B400H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	MOV.W	R6,R0
	MOV.W	[R7+4],R6
; rs232cmd.c 6002				samples = ( samples % 230630400L) % 439296L;
	SYMB	LINE, 6002
	MOV.W	R3,#06H
	MOV.W	R2,#0B400H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 6003				field = 2*frame;
	SYMB	LINE, 6003
	MOV.W	R1,[R7]
	ASL.W	R1,#01H
	SYMB	LTIM, "frame", -12, 130, 69
	SYMB	LTIM, "frame", 6, 0, 205
	SYMB	LTIM, "frame", 6, 0, 77
	MOV.W	R0,R1
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 6004	
; rs232cmd.c 6005				if ( line > 262)
	SYMB	LINE, 6005
	CMP.W	R6,#0106H
	BLE	_1563
; rs232cmd.c 6006				{
; rs232cmd.c 6007					field++;
	SYMB	LINE, 6007
	ADDS.W	R1,#01H
	MOV.W	R0,R1
	SYMB	LTIM, "field", 2, 0, 77
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 6008					line -= 263;
	SYMB	LINE, 6008
	SUB.W	R6,#0107H
	MOV.W	[R7+4],R6
; rs232cmd.c 6009				}
; rs232cmd.c 6010			}
; rs232cmd.c 6011		}
	SYMB	LINE, 6011
_1563:
; rs232cmd.c 6012	
; rs232cmd.c 6013		rs232printf( 12, "%c%d,", sign, abs( field));
	SYMB	LINE, 6013
	CALL	_abs
	SYMB	LTIM, "field", 2, 0, 77
	MOV.B	R1L,[R7+2]
	SEXT.B	R1H
	SYMB	LTIM, "sign", -10, 130, 69
	SYMB	LTIM, "sign", 4, 0, 205
	SYMB	LTIM, "sign", 4, 0, 77
	PUSH.W	R0
	SYMB	SOFF, 14
	MOV.W	R6,R1
	PUSH.W	R1
	SYMB	SOFF, 16
	MOV.W	R1,#SEG( _1548 )
	MOV.W	R0,#SOF( _1548 )
	PUSH.W	R0, R1
	SYMB	SOFF, 20
	MOV.W	R0,#0CH
	CALL	_rs232printf
	ADD.W	R7,#08H
	SYMB	SOFF, 12
; rs232cmd.c 6014		rs232printf( 12, "%c%d,", sign, abs( line));
	SYMB	LINE, 6014
	MOV.W	R0,[R7+4]
	CALL	_abs
	PUSH.W	R0
	SYMB	SOFF, 14
	MOV.W	[R7+2],R6
	PUSH.W	R6
	SYMB	SOFF, 16
	MOV.W	R1,#SEG( _1548 )
	MOV.W	R0,#SOF( _1548 )
	PUSH.W	R0, R1
	SYMB	SOFF, 20
	MOV.W	R0,#0CH
	CALL	_rs232printf
	ADD.W	R7,#08H
	SYMB	SOFF, 12
; rs232cmd.c 6015		rs232printf( 12, "%c%.1f", sign, fabs((float) ( samples*1000L)/6912L));
	SYMB	LINE, 6015
	MOV.W	R1,R5
	MOV.W	R0,R4
	ASL.D	R0,#05H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	ADD.W	R0,R4
	ADDC.W	R1,R5
	ASL.D	R0,#03H
	FCALL	__L2SPF
	MOV.W	R3,#045D8H
	MOV.W	R2,#00H
	FCALL	__DIV_SPF
	FCALL	__SPF2DPF
	CALL	_fabs
	PUSH.W	R0, R1, R2, R3
	SYMB	SOFF, 20
	MOV.W	R0,[R7+8]
	PUSH.W	R0
	SYMB	SOFF, 22
	MOV.W	R1,#SEG( _1549 )
	MOV.W	R0,#SOF( _1549 )
	PUSH.W	R0, R1
	SYMB	SOFF, 26
	MOV.W	R0,#0CH
	CALL	_rs232printf
	ADD.W	R7,#0EH
	SYMB	SOFF, 12
; rs232cmd.c 6016	}
	SYMB	LINE, 6016
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	EFUN
; rs232cmd.c 6017	
	SYMB	ENDF

	RSEG	RS232CMD_INI_FA
_362:	DB	02CH,025H,064H,00AH,000H
	SYMB	TYPE, 658, 'Z', #453, 3
	SYMB	ALAB, _PresetPtr, #658
	EXTRN	HDATA(_PresetPtr)
	SYMB	ALAB, _CmdExecute, #2
	EXTRN	HDATA(_CmdExecute)
_1223:	DB	025H,06CH,075H,02CH,025H,06CH,075H,00AH,000H
	SYMB	TYPE, 660, 'X', 12, #16, 30, 3, #18, #18, #18
	SYMB	ALAB, _ValidateDate, #660
	EXTRN	HCODE(_ValidateDate)
	SYMB	TYPE, 661, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _SetGenlockSystem, #661
	EXTRN	HCODE(_SetGenlockSystem)
	SYMB	TYPE, 662, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _StorePreset, #662
	EXTRN	HCODE(_StorePreset)
	SYMB	TYPE, 663, 'X', 12, #1, 30, 0
	SYMB	ALAB, _UpdateSTBRegister, #663
	EXTRN	HCODE(_UpdateSTBRegister)
_983:	DB	025H,073H,03BH,000H
_9:	DB	025H,064H,00AH,000H
	SYMB	TYPE, 664, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetBBSystem, #664
	EXTRN	HCODE(_SetBBSystem)
_110:	DB	022H,00AH,000H
	SYMB	TYPE, 665, 'X', 12, #16, 30, 2, #16, #7
	SYMB	ALAB, _SetBBDelay, #665
	EXTRN	HCODE(_SetBBDelay)
	SYMB	TYPE, 666, 'X', 12, #257, 30, 1, #259
	SYMB	ALAB, _strlen, #666
	EXTRN	HCODE(_strlen)
_1170:	DB	025H,075H,02CH,025H,075H,02CH,025H,075H,00AH,000H
	SYMB	TYPE, 667, 'X', 12, #16, 30, 1, #7
	SYMB	ALAB, _SetCBDelay, #667
	EXTRN	HCODE(_SetCBDelay)
_1548:	DB	025H,063H,025H,064H,02CH,000H
	SYMB	TYPE, 668, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetBBScHPhase, #668
	EXTRN	HCODE(_SetBBScHPhase)
	SYMB	TYPE, 669, 'X', 12, #16, 30, 0
	SYMB	ALAB, _BBUpdate, #669
	EXTRN	HCODE(_BBUpdate)
	EXTRN	HCODE(__UMODL)
	SYMB	TYPE, 670, 'X', 12, #1, 30, 0
	SYMB	ALAB, _ResetErrorEventQueue, #670
	EXTRN	HCODE(_ResetErrorEventQueue)
	SYMB	TYPE, 671, 'X', 12, #16, 30, 1, #259
	SYMB	ALAB, _GenlockVersion, #671
	EXTRN	HCODE(_GenlockVersion)
	SYMB	TYPE, 672, 'X', 12, #16, 30, 2, #259, #491
	SYMB	ALAB, _Cstrcmp, #672
	EXTRN	HCODE(_Cstrcmp)
	SYMB	TYPE, 673, 'X', 12, #16, 30, 2, #16, #10
	SYMB	ALAB, _SetAudioTiming, #673
	EXTRN	HCODE(_SetAudioTiming)
_1171:	DB	025H,075H,02CH,025H,075H,02CH,025H,075H,000H
	SYMB	TYPE, 674, 'X', 12, #259, 30, 3, #259, #259, #257
	SYMB	ALAB, _strncpy, #674
	EXTRN	HCODE(_strncpy)
	SYMB	ALAB, _AudioOutput, #16
	EXTRN	HDATA(_AudioOutput)
	SYMB	TYPE, 675, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioWordClock, #675
	EXTRN	HCODE(_SetAudioWordClock)
	EXTRN	HCODE(__DIV_DPF)
_781:	DB	025H,02EH,031H,066H,02CH,000H
	SYMB	TYPE, 676, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _abs, #676
	EXTRN	HCODE(_abs)
_1009:	DB	025H,075H,00AH,000H
	SYMB	TYPE, 677, 'X', 12, #16, 30, 0
	SYMB	ALAB, _ReadErrorEventQueue, #677
	EXTRN	HCODE(_ReadErrorEventQueue)
	SYMB	TYPE, 679, 'n', #3, 130
	SYMB	TYPE, 680, 'P', #679
	SYMB	TYPE, 678, 'X', 12, #16, 30, 4, #3, #3, #680, #3
	SYMB	ALAB, _TransmitIIC, #678
	EXTRN	HCODE(_TransmitIIC)
	SYMB	TYPE, 681, 'X', 12, #16, 30, 0
	SYMB	ALAB, _CBUpdate, #681
	EXTRN	HCODE(_CBUpdate)
	SYMB	TYPE, 682, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioSystem, #682
	EXTRN	HCODE(_SetAudioSystem)
	SYMB	TYPE, 683, 'X', 12, #16, 30, 4, #16, #16, #259, #1
	SYMB	ALAB, _sio0SndCommand, #683
	EXTRN	HCODE(_sio0SndCommand)
	SYMB	TYPE, 684, 'X', 12, #16, 30, 2, #259, #259
	SYMB	ALAB, _strcmp, #684
	EXTRN	HCODE(_strcmp)
	SYMB	TYPE, 685, 'X', 12, #3, 30, 0
	SYMB	ALAB, _AudioStatus, #685
	EXTRN	HCODE(_AudioStatus)
_1297:	DB	025H,075H,02CH,025H,075H,00AH,000H
	SYMB	TYPE, 686, 'X', 12, #16, 30, 3, #259, #259, #1
	SYMB	ALAB, _sscanf, #686
	EXTRN	HCODE(_sscanf)
_1435:	DB	025H,030H,033H,064H,02CH,025H,030H,033H,064H,00AH,000H
_1298:	DB	025H,075H,02CH,025H,075H,000H
_10:	DB	025H,064H,000H
_898:	DB	025H,066H,000H
	EXTRN	HCODE(__MUL_SPF)
	SYMB	TYPE, 687, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _SetCBSystem, #687
	EXTRN	HCODE(_SetCBSystem)
	SYMB	ALAB, _CBSetup, #459
	EXTRN	HDATA(_CBSetup)
	SYMB	ALAB, _BBSetup, #554
	EXTRN	HDATA(_BBSetup)
_221:	DB	025H,06CH,000H
	SYMB	ALAB, _OperEnableReg, #18
	EXTRN	HDATA(_OperEnableReg)
_312:	DB	047H,058H,025H,064H,03BH,000H
	EXTRN	HCODE(__SUBR_DPF)
_982:	DB	025H,073H,000H
	SYMB	TYPE, 688, 'X', 12, #16, 30, 0
	SYMB	ALAB, _GenlockInit, #688
	EXTRN	HCODE(_GenlockInit)
	SYMB	TYPE, 689, 'Z', #2, 511
	SYMB	ALAB, _Cmd, #689
	EXTRN	HDATA(_Cmd)
	SYMB	TYPE, 691, 'X', 12, #16, 30, 0
	SYMB	ALAB, _GenlockUpdate, #691
	EXTRN	HCODE(_GenlockUpdate)
_956:	DB	04FH,04EH,000H
_1186:	DB	025H,075H,000H
	SYMB	TYPE, 692, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioSignal, #692
	EXTRN	HCODE(_SetAudioSignal)
	EXTRN	HCODE(__SPF2DPF)
	SYMB	TYPE, 693, 'X', 12, #16, 30, 0
	SYMB	ALAB, _CBInit, #693
	EXTRN	HCODE(_CBInit)
	SYMB	TYPE, 694, 'X', 12, #259, 30, 2, #259, #259
	SYMB	ALAB, _strcpy, #694
	EXTRN	HCODE(_strcpy)
_897:	DB	025H,02EH,031H,066H,00AH,000H
	SYMB	TYPE, 695, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _WriteCBChromaGain, #695
	EXTRN	HCODE(_WriteCBChromaGain)
	SYMB	TYPE, 696, 'X', 12, #11, 30, 1, #11
	SYMB	ALAB, _fabs, #696
	EXTRN	HCODE(_fabs)
	SYMB	ALAB, _ParCnt, #3
	EXTRN	HDATA(_ParCnt)
	SYMB	TYPE, 697, 'X', 12, #16, 30, 3, #263, #453, #16
	SYMB	ALAB, _NV_Recall, #697
	EXTRN	HCODE(_NV_Recall)
	SYMB	TYPE, 698, 'X', 12, #6, 30, 1, #6
	SYMB	ALAB, _labs, #698
	EXTRN	HCODE(_labs)
_262:	DB	04FH,046H,046H,000H
	SYMB	TYPE, 699, 'X', 12, #16, 30, 4, #3, #3, #680, #3
	SYMB	ALAB, _ReceiveIIC, #699
	EXTRN	HCODE(_ReceiveIIC)
	SYMB	TYPE, 700, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _SetAudioOutput, #700
	EXTRN	HCODE(_SetAudioOutput)
	SYMB	ALAB, _NumSuffix, #18
	EXTRN	HDATA(_NumSuffix)
	SYMB	TYPE, 701, 'X', 12, #16, 30, 1, #259
	SYMB	ALAB, _rs232puts, #701
	EXTRN	HCODE(_rs232puts)
	SYMB	ALAB, _CalibrationPtr, #453
	EXTRN	HDATA(_CalibrationPtr)
	SYMB	ALAB, _CmdRequest, #2
	EXTRN	HDATA(_CmdRequest)
	SYMB	ALAB, _ESRReg, #3
	EXTRN	HDATA(_ESRReg)
	SYMB	ALAB, _STBReg, #3
	EXTRN	HDATA(_STBReg)
	SYMB	ALAB, _AudioSetup, #556
	EXTRN	HDATA(_AudioSetup)
_1034:	DB	025H,06CH,075H,02CH,025H,06CH,075H,000H
	SYMB	TYPE, 702, "ERROR_STRUCT", 'S', 6,\
		 "ErrorNo", #16, 0,\
		 "ErrorTxt", #491, 2
	SYMB	TYPE, 703, 'Z', #702, 47
	SYMB	ALAB, _ErrorTxt_Array, #703
	EXTRN	HCODE(_ErrorTxt_Array)
	SYMB	TYPE, 705, 'X', 12, #16, 30, 1, #7
	SYMB	ALAB, _SetGenlockDelay, #705
	EXTRN	HCODE(_SetGenlockDelay)
	SYMB	TYPE, 706, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _WriteCBGain, #706
	EXTRN	HCODE(_WriteCBGain)
_1436:	DB	025H,064H,02CH,025H,064H,000H
_1549:	DB	025H,063H,025H,02EH,031H,066H,000H
	SYMB	ALAB, _BBControlPort, #16
	EXTRN	HDATA(_BBControlPort)
_311:	DB	048H,047H,025H,06CH,064H,03BH,000H
	SYMB	TYPE, 707, 'X', 12, #1, 30, 0
	SYMB	ALAB, _BBDefaults, #707
	EXTRN	HCODE(_BBDefaults)
	SYMB	ALAB, _SettingsPtr, #453
	EXTRN	HDATA(_SettingsPtr)
_310:	DB	047H,04DH,030H,000H
	EXTRN	HCODE(__L2SPF)
	SYMB	ALAB, _ESEReg, #3
	EXTRN	HDATA(_ESEReg)
	SYMB	TYPE, 708, 'X', 12, #16, 30, 1, #259
	SYMB	ALAB, _BBVersion, #708
	EXTRN	HCODE(_BBVersion)
_955:	DB	04FH,046H,046H,00AH,000H
	SYMB	TYPE, 709, 'X', 12, #16, 30, 0
	SYMB	ALAB, _BBInit, #709
	EXTRN	HCODE(_BBInit)
	SYMB	TYPE, 710, 'X', 12, #1, 30, 0
	SYMB	ALAB, _CBDefaults, #710
	EXTRN	HCODE(_CBDefaults)
_981:	DB	025H,064H,02CH,025H,073H,000H
_330:	DB	047H,058H,025H,075H,03BH,000H
	SYMB	ALAB, _GenlockSetup, #455
	EXTRN	HDATA(_GenlockSetup)
	SYMB	TYPE, 711, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _SetCBEmbAudioSignal, #711
	EXTRN	HCODE(_SetCBEmbAudioSignal)
	SYMB	TYPE, 712, 'X', 12, #16, 30, 3, #16, #259, #1
	SYMB	ALAB, _rs232printf, #712
	EXTRN	HCODE(_rs232printf)
	SYMB	TYPE, 713, 'X', 12, #16, 30, 0
	SYMB	ALAB, _AudioUpdate, #713
	EXTRN	HCODE(_AudioUpdate)
	SYMB	ALAB, _Settings, #475
	EXTRN	HDATA(_Settings)
	SYMB	TYPE, 714, 'X', 12, #16, 30, 3, #259, #259, #1
	SYMB	ALAB, _sprintf, #714
	EXTRN	HCODE(_sprintf)
	SYMB	ALAB, _OperEventReg, #18
	EXTRN	HDATA(_OperEventReg)
	EXTRN	HCODE(__CMP_SPF)
	EXTRN	HCODE(__DIV_SPF)
	SYMB	ALAB, _SREReg, #3
	EXTRN	HDATA(_SREReg)
	SYMB	TYPE, 715, 'X', 12, #16, 30, 3, #263, #453, #16
	SYMB	ALAB, _NV_Store, #715
	EXTRN	HCODE(_NV_Store)
_184:	DB	025H,064H,02CH,025H,064H,02CH,025H,064H,02CH,025H,064H,000H
	SYMB	TYPE, 716, 'X', 12, #16, 30, 0
	SYMB	ALAB, _pld_version, #716
	EXTRN	HCODE(_pld_version)
	SYMB	TYPE, 717, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _RecallPreset, #717
	EXTRN	HCODE(_RecallPreset)
	SYMB	TYPE, 718, 'X', 12, #16, 30, 0
	SYMB	ALAB, _AudioInit, #718
	EXTRN	HCODE(_AudioInit)
	SYMB	ALAB, _Calibration, #485
	EXTRN	HDATA(_Calibration)
	SYMB	TYPE, 719, 'X', 12, #1, 30, 1, #16
	SYMB	ALAB, _BBSPGCommunication, #719
	EXTRN	HCODE(_BBSPGCommunication)
_1118:	DB	025H,064H,02CH,025H,064H,02CH,025H,064H,000H
_295:	DB	025H,064H,02CH,025H,064H,02CH,025H,066H,000H
	EXTRN	HCODE(__ADD_DPF)
	EXTRN	HCODE(__SMODL)
	SYMB	TYPE, 720, 'X', 12, #16, 30, 0
	SYMB	ALAB, _tcxo_status, #720
	EXTRN	HCODE(_tcxo_status)
_157:	DB	025H,064H,02CH,025H,037H,073H,000H
	SYMB	ALAB, _QuestEnableReg, #18
	EXTRN	HDATA(_QuestEnableReg)
	EXTRN	IDATA(__lc_bs)
	SYMB	TYPE, 721, 'X', 12, #16, 30, 0
	SYMB	ALAB, _ResetInstrument, #721
	EXTRN	HCODE(_ResetInstrument)
	SYMB	ALAB, _QuestConditionReg, #18
	EXTRN	HDATA(_QuestConditionReg)
	SYMB	TYPE, 722, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioClick, #722
	EXTRN	HCODE(_SetAudioClick)
_1075:	DB	025H,038H,073H,000H
	SYMB	TYPE, 723, 'X', 12, #16, 30, 1, #18
	SYMB	ALAB, _SetCBPattern, #723
	EXTRN	HCODE(_SetCBPattern)
	EXTRN	HCODE(__SDIVL)
_1050:	DB	025H,033H,032H,073H,000H
	SYMB	TYPE, 724, 'X', 12, #1, 30, 0
	SYMB	ALAB, _GenlockDefaults, #724
	EXTRN	HCODE(_GenlockDefaults)
_529:	DB	025H,064H,02CH,000H
	SYMB	TYPE, 725, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _rs232putchar, #725
	EXTRN	HCODE(_rs232putchar)
	EXTRN	HCODE(__DPF2L)
	EXTRN	HCODE(__CMP_DPF)
	SYMB	ALAB, _OperConditionReg, #18
	EXTRN	HDATA(_OperConditionReg)
	SYMB	TYPE, 726, 'X', 12, #1, 30, 0
	SYMB	ALAB, _AudioDefaults, #726
	EXTRN	HCODE(_AudioDefaults)
_183:	DB	025H,064H,02CH,025H,064H,02CH,025H,064H,00AH,000H
_131:	DB	025H,064H,02CH,025H,031H,037H,073H,000H
	SYMB	ALAB, _SCPIError, #16
	EXTRN	HDATA(_SCPIError)
	EXTRN	HCODE(__UDIVL)
	SYMB	TYPE, 727, 'X', 12, #18, 30, 2, #7, #7
	SYMB	ALAB, _ROMChecksum, #727
	EXTRN	HCODE(_ROMChecksum)
	SYMB	TYPE, 728, 'X', 12, #16, 30, 2, #3, #3
	SYMB	ALAB, _WriteAnlAudioDACLevel, #728
	EXTRN	HCODE(_WriteAnlAudioDACLevel)
_109:	DB	025H,064H,02CH,022H,000H
_954:	DB	04FH,04EH,00AH,000H
	SYMB	TYPE, 729, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioLevel, #729
	EXTRN	HCODE(_SetAudioLevel)
_417:	DB	02CH,025H,064H,02CH,000H
	EXTRN	HCODE(__DPF2S)
	SYMB	TYPE, 730, 'X', 12, #16, 30, 5, #16, #16, #259, #259, #1
	SYMB	ALAB, _sio0SndRequest, #730
	EXTRN	HCODE(_sio0SndRequest)
	SYMB	TYPE, 731, 'X', 12, #3, 30, 0
	SYMB	ALAB, _UpdateESRRegister, #731
	EXTRN	HCODE(_UpdateESRRegister)
	SYMB	ALAB, _QuestEventReg, #18
	EXTRN	HDATA(_QuestEventReg)
	SYMB	TYPE, 732, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _SetCBScHPhase, #732
	EXTRN	HCODE(_SetCBScHPhase)
	EXTRN	DATA(__lc_ub_xvwbuffer)
	EXTRN	DATA(__lc_ue_xvwbuffer)
	CALLS	'CLSCommand', 'ResetErrorEventQueue'
	CALLS	'ESECommand', 'rs232printf'
	CALLS	'ESECommand', 'sscanf'
	CALLS	'ESRCommand', 'UpdateESRRegister'
	CALLS	'ESRCommand', 'rs232printf'
	CALLS	'SRECommand', 'rs232printf'
	CALLS	'SRECommand', 'sscanf'
	CALLS	'STBCommand', 'UpdateSTBRegister'
	CALLS	'STBCommand', 'rs232printf'
	CALLS	'RSTCommand', 'ResetInstrument'
	CALLS	'IDNCommand', 'rs232puts'
	CALLS	'IDNCommand', 'rs232putchar'
	CALLS	'IDNCommand', 'rs232puts'
	CALLS	'IDNCommand', 'rs232putchar'
	CALLS	'IDNCommand', 'rs232puts'
	CALLS	'IDNCommand', 'rs232putchar'
	CALLS	'IDNCommand', 'rs232puts'
	CALLS	'IDNCommand', 'rs232putchar'
	CALLS	'RCLCommand', 'sscanf'
	CALLS	'RCLCommand', 'RecallPreset'
	CALLS	'SAVCommand', 'sscanf'
	CALLS	'SAVCommand', 'StorePreset'
	CALLS	'SystemError', 'ReadErrorEventQueue'
	CALLS	'SystemError', 'sprintf'
	CALLS	'SystemError', 'rs232puts'
	CALLS	'SystemError', 'rs232putchar'
	CALLS	'SystemError', 'rs232puts'
	CALLS	'SystemVersion', 'rs232putchar'
	CALLS	'SystemPresetName', 'sscanf'
	CALLS	'SystemPresetName', 'NV_Recall'
	CALLS	'SystemPresetName', 'rs232puts'
	CALLS	'SystemPresetName', 'rs232putchar'
	CALLS	'SystemPresetName', 'sscanf'
	CALLS	'SystemPresetName', 'strlen'
	CALLS	'SystemPresetName', 'NV_Recall'
	CALLS	'SystemPresetName', 'strcpy'
	CALLS	'SystemPresetName', 'NV_Store'
	CALLS	'SystemPresetAuthor', 'sscanf'
	CALLS	'SystemPresetAuthor', 'NV_Recall'
	CALLS	'SystemPresetAuthor', 'rs232puts'
	CALLS	'SystemPresetAuthor', 'rs232putchar'
	CALLS	'SystemPresetAuthor', 'sscanf'
	CALLS	'SystemPresetAuthor', 'strlen'
	CALLS	'SystemPresetAuthor', 'NV_Recall'
	CALLS	'SystemPresetAuthor', 'strcpy'
	CALLS	'SystemPresetAuthor', 'NV_Store'
	CALLS	'SystemPresetDate', 'sscanf'
	CALLS	'SystemPresetDate', 'NV_Recall'
	CALLS	'SystemPresetDate', 'sprintf'
	CALLS	'SystemPresetDate', 'rs232puts'
	CALLS	'SystemPresetDate', 'sscanf'
	CALLS	'SystemPresetDate', 'ValidateDate'
	CALLS	'SystemPresetDate', 'NV_Recall'
	CALLS	'SystemPresetDate', 'NV_Store'
	CALLS	'StatusOperEvent', 'rs232printf'
	CALLS	'StatusOperCondition', 'rs232printf'
	CALLS	'StatusOperEnable', 'rs232printf'
	CALLS	'StatusOperEnable', 'sscanf'
	CALLS	'StatusQuestEvent', 'rs232printf'
	CALLS	'StatusQuestCondition', 'rs232printf'
	CALLS	'StatusQuestEnable', 'rs232printf'
	CALLS	'StatusQuestEnable', 'sscanf'
	CALLS	'StatusPreset', 'rs232putchar'
	CALLS	'StatusPreset', 'rs232puts'
	CALLS	'StatusPreset', 'rs232putchar'
	CALLS	'GenlockGen', 'rs232putchar'
	CALLS	'GenlockGen', 'PrintSamplesToFLT'
	CALLS	'GenlockGen', 'rs232putchar'
	CALLS	'GenlockGenSystem', 'rs232putchar'
	CALLS	'GenlockGenSystem', 'FindParameter'
	CALLS	'GenlockGenSystem', 'SetGenlockSystem'
	CALLS	'GenlockGenDelay', 'PrintSamplesToFLT'
	CALLS	'GenlockGenDelay', 'rs232putchar'
	CALLS	'GenlockGenDelay', 'sscanf'
	CALLS	'GenlockGenDelay', 'FLTToSamples'
	CALLS	'GenlockGenDelay', 'SetGenlockDelay'
	CALLS	'GenlockGenCalibrateEnable', 'rs232putchar'
	CALLS	'GenlockGenCalibrateEnable', 'FindParameter'
	CALLS	'GenlockGenCalibrateEnable', 'SetGenlockSystem'
	CALLS	'GenlockGenCalibrateEnable', 'SetBBSystem'
	CALLS	'GenlockGenCalibrateEnable', 'sio0SndCommand'
	CALLS	'GenlockGenCalibrateAdjust', 'FindParameter'
	CALLS	'GenlockGenCalibrateAdjust', 'sio0SndCommand'
	CALLS	'GenlockGenCalibrateAdjust', 'FindParameter'
	CALLS	'GenlockGenCalibrateAdjust', 'sio0SndCommand'
	CALLS	'GenlockGenCalibrateStore', 'NV_Store'
	CALLS	'BBGen', 'rs232putchar'
	CALLS	'BBGen', 'PrintSamplesToFLT'
	CALLS	'BBGen', 'rs232printf'
	CALLS	'BBGenSystem', 'rs232putchar'
	CALLS	'BBGenSystem', 'FindParameter'
	CALLS	'BBGenSystem', 'SetBBSystem'
	CALLS	'BBGenDelay', 'PrintSamplesToFLT'
	CALLS	'BBGenDelay', 'rs232putchar'
	CALLS	'BBGenDelay', 'sscanf'
	CALLS	'BBGenDelay', 'FLTToSamples'
	CALLS	'BBGenDelay', 'SetBBDelay'
	CALLS	'BBGenScHPhase', 'rs232printf'
	CALLS	'BBGenScHPhase', 'sscanf'
	CALLS	'BBGenScHPhase', 'SetBBScHPhase'
	CALLS	'TSGen', 'rs232putchar'
	CALLS	'TSGen', 'PrintSamplesToFLT'
	CALLS	'TSGen', 'rs232printf'
	CALLS	'TSGen', 'rs232putchar'
	CALLS	'TSGenPattern', 'rs232putchar'
	CALLS	'TSGenPattern', 'FindParameter'
	CALLS	'TSGenPattern', 'SetCBPattern'
	CALLS	'TSGenSystem', 'rs232putchar'
	CALLS	'TSGenSystem', 'FindParameter'
	CALLS	'TSGenSystem', 'SetCBSystem'
	CALLS	'TSGenDelay', 'PrintSamplesToFLT'
	CALLS	'TSGenDelay', 'rs232putchar'
	CALLS	'TSGenDelay', 'sscanf'
	CALLS	'TSGenDelay', 'FLTToSamples'
	CALLS	'TSGenDelay', 'SetCBDelay'
	CALLS	'TSGenScHPhase', 'rs232printf'
	CALLS	'TSGenScHPhase', 'sscanf'
	CALLS	'TSGenScHPhase', 'SetCBScHPhase'
	CALLS	'TSGenEmbAudioSignal', 'rs232putchar'
	CALLS	'TSGenEmbAudioSignal', 'FindParameter'
	CALLS	'TSGenEmbAudioSignal', 'SetCBEmbAudioSignal'
	CALLS	'AudioGenOutput', 'rs232putchar'
	CALLS	'AudioGenOutput', 'FindParameter'
	CALLS	'AudioGenOutput', 'SetAudioOutput'
	CALLS	'AudioGenAnalog', 'rs232putchar'
	CALLS	'AudioGenAnalog', 'rs232printf'
	CALLS	'AudioGenAnalogSignal', 'rs232putchar'
	CALLS	'AudioGenAnalogSignal', 'FindParameter'
	CALLS	'AudioGenAnalogSignal', 'SetAudioSignal'
	CALLS	'AudioGenAnalogLevel', 'rs232putchar'
	CALLS	'AudioGenAnalogLevel', 'rs232printf'
	CALLS	'AudioGenAnalogLevel', 'FindParameter'
	CALLS	'AudioGenAnalogLevel', 'sscanf'
	CALLS	'AudioGenAnalogLevel', 'SetAudioLevel'
	CALLS	'AudioGenAnalogClick', 'rs232printf'
	CALLS	'AudioGenAnalogClick', 'sscanf'
	CALLS	'AudioGenAnalogClick', 'SetAudioClick'
	CALLS	'AudioGenAESEBU', 'rs232putchar'
	CALLS	'AudioGenAESEBU', 'rs232printf'
	CALLS	'AudioGenAESEBU', 'rs232putchar'
	CALLS	'AudioGenAESEBU', 'rs232printf'
	CALLS	'AudioGenAESEBUSystem', 'rs232putchar'
	CALLS	'AudioGenAESEBUSystem', 'FindParameter'
	CALLS	'AudioGenAESEBUSystem', 'SetAudioSystem'
	CALLS	'AudioGenAESEBUSignal', 'rs232putchar'
	CALLS	'AudioGenAESEBUSignal', 'FindParameter'
	CALLS	'AudioGenAESEBUSignal', 'SetAudioSignal'
	CALLS	'AudioGenAESEBULevel', 'rs232putchar'
	CALLS	'AudioGenAESEBULevel', 'rs232printf'
	CALLS	'AudioGenAESEBULevel', 'FindParameter'
	CALLS	'AudioGenAESEBULevel', 'sscanf'
	CALLS	'AudioGenAESEBULevel', 'SetAudioLevel'
	CALLS	'AudioGenAESEBUTiming', 'rs232printf'
	CALLS	'AudioGenAESEBUTiming', 'sscanf'
	CALLS	'AudioGenAESEBUTiming', 'SetAudioTiming'
	CALLS	'AudioGenAESEBUWordClock', 'rs232putchar'
	CALLS	'AudioGenAESEBUWordClock', 'FindParameter'
	CALLS	'AudioGenAESEBUWordClock', 'SetAudioWordClock'
	CALLS	'AudioGenAESEBUClick', 'rs232printf'
	CALLS	'AudioGenAESEBUClick', 'sscanf'
	CALLS	'AudioGenAESEBUClick', 'SetAudioClick'
	CALLS	'FactPassword', 'rs232puts'
	CALLS	'FactPassword', 'strcmp'
	CALLS	'FactPassword', 'Cstrcmp'
	CALLS	'FactReset', 'GenlockDefaults'
	CALLS	'FactReset', 'BBDefaults'
	CALLS	'FactReset', 'CBDefaults'
	CALLS	'FactReset', 'AudioDefaults'
	CALLS	'FactReset', 'GenlockInit'
	CALLS	'FactReset', 'BBInit'
	CALLS	'FactReset', 'CBInit'
	CALLS	'FactReset', 'AudioInit'
	CALLS	'FactReset', 'GenlockUpdate'
	CALLS	'FactReset', 'CBUpdate'
	CALLS	'FactReset', 'BBUpdate'
	CALLS	'FactReset', 'AudioUpdate'
	CALLS	'FactReset', 'StorePreset'
	CALLS	'FactReset', 'NV_Store'
	CALLS	'FactV24Command', 'sscanf'
	CALLS	'FactV24Command', 'sio0SndRequest'
	CALLS	'FactV24Command', 'rs232puts'
	CALLS	'FactV24Command', 'sio0SndCommand'
	CALLS	'FactV24Transparent', 'FindParameter'
	CALLS	'FactV24Transparent', 'BBSPGCommunication'
	CALLS	'FactChecksumCode', 'ROMChecksum'
	CALLS	'FactChecksumCode', 'sprintf'
	CALLS	'FactChecksumCode', 'rs232puts'
	CALLS	'FactChecksumPLD', 'ROMChecksum'
	CALLS	'FactChecksumPLD', 'sprintf'
	CALLS	'FactChecksumPLD', 'rs232puts'
	CALLS	'FactChecksumEmbAudio', 'ROMChecksum'
	CALLS	'FactChecksumEmbAudio', 'sprintf'
	CALLS	'FactChecksumEmbAudio', 'rs232puts'
	CALLS	'FactChecksumPattern', 'ROMChecksum'
	CALLS	'FactChecksumPattern', 'sprintf'
	CALLS	'FactChecksumPattern', 'rs232puts'
	CALLS	'FactChecksumRange', 'sscanf'
	CALLS	'FactChecksumRange', 'ROMChecksum'
	CALLS	'FactChecksumRange', 'sprintf'
	CALLS	'FactChecksumRange', 'rs232puts'
	CALLS	'FactMainVersion', 'sprintf'
	CALLS	'FactMainVersion', 'rs232puts'
	CALLS	'FactMainIDNCompany', 'rs232puts'
	CALLS	'FactMainIDNCompany', 'rs232putchar'
	CALLS	'FactMainIDNCompany', 'sscanf'
	CALLS	'FactMainIDNCompany', 'strncpy'
	CALLS	'FactMainIDNCompany', 'NV_Store'
	CALLS	'FactMainIDNType', 'rs232puts'
	CALLS	'FactMainIDNType', 'rs232putchar'
	CALLS	'FactMainIDNType', 'sscanf'
	CALLS	'FactMainIDNType', 'strncpy'
	CALLS	'FactMainIDNType', 'NV_Store'
	CALLS	'FactMainIDNKUNumber', 'rs232puts'
	CALLS	'FactMainIDNKUNumber', 'rs232putchar'
	CALLS	'FactMainIDNKUNumber', 'sscanf'
	CALLS	'FactMainIDNKUNumber', 'strncpy'
	CALLS	'FactMainIDNKUNumber', 'NV_Store'
	CALLS	'FactMainIDNSWRevision', 'rs232puts'
	CALLS	'FactMainIDNSWRevision', 'rs232putchar'
	CALLS	'FactMainIDNSWRevision', 'sscanf'
	CALLS	'FactMainIDNSWRevision', 'strncpy'
	CALLS	'FactMainIDNSWRevision', 'NV_Store'
	CALLS	'FactMainSystem', 'rs232putchar'
	CALLS	'FactMainSystem', 'FindParameter'
	CALLS	'FactMainSystem', 'NV_Store'
	CALLS	'FactMainFMSDateProd', 'sprintf'
	CALLS	'FactMainFMSDateProd', 'rs232puts'
	CALLS	'FactMainFMSDateProd', 'sscanf'
	CALLS	'FactMainFMSDateProd', 'ValidateDate'
	CALLS	'FactMainFMSDateProd', 'NV_Store'
	CALLS	'FactMainFMSDateUpd', 'sprintf'
	CALLS	'FactMainFMSDateUpd', 'rs232puts'
	CALLS	'FactMainFMSDateUpd', 'sscanf'
	CALLS	'FactMainFMSDateUpd', 'ValidateDate'
	CALLS	'FactMainFMSDateUpd', 'NV_Store'
	CALLS	'FactGenlockGenDate', 'sprintf'
	CALLS	'FactGenlockGenDate', 'rs232puts'
	CALLS	'FactGenlockGenDate', 'sscanf'
	CALLS	'FactGenlockGenDate', 'ValidateDate'
	CALLS	'FactGenlockGenDate', 'NV_Store'
	CALLS	'FactGenlockGenVersion', 'GenlockVersion'
	CALLS	'FactGenlockGenVersion', 'rs232puts'
	CALLS	'FactGenlockGenVersion', 'rs232putchar'
	CALLS	'FactGenlockGenFRefDate', 'sprintf'
	CALLS	'FactGenlockGenFRefDate', 'rs232puts'
	CALLS	'FactGenlockGenFRefDate', 'sscanf'
	CALLS	'FactGenlockGenFRefDate', 'ValidateDate'
	CALLS	'FactGenlockGenFRefDate', 'NV_Store'
	CALLS	'FactGenlockGenFRefDAC', 'sprintf'
	CALLS	'FactGenlockGenFRefDAC', 'rs232puts'
	CALLS	'FactGenlockGenFRefDAC', 'sscanf'
	CALLS	'FactGenlockGenFRefDAC', 'NV_Store'
	CALLS	'FactGenlockGenURefDate', 'sprintf'
	CALLS	'FactGenlockGenURefDate', 'rs232puts'
	CALLS	'FactGenlockGenURefDate', 'sscanf'
	CALLS	'FactGenlockGenURefDate', 'ValidateDate'
	CALLS	'FactGenlockGenURefDate', 'NV_Store'
	CALLS	'FactGenlockGenURefDAC', 'sprintf'
	CALLS	'FactGenlockGenURefDAC', 'rs232puts'
	CALLS	'FactGenlockGenURefDAC', 'sscanf'
	CALLS	'FactGenlockGenURefDAC', 'NV_Store'
	CALLS	'FactGenlockGenHPHZero', 'sprintf'
	CALLS	'FactGenlockGenHPHZero', 'rs232puts'
	CALLS	'FactGenlockGenHPHZero', 'sscanf'
	CALLS	'FactGenlockGenHPHZero', 'NV_Store'
	CALLS	'FactGenlockGenPhase', 'sprintf'
	CALLS	'FactGenlockGenPhase', 'rs232puts'
	CALLS	'FactGenlockGenPhase', 'sscanf'
	CALLS	'FactGenlockGenPhase', 'NV_Store'
	CALLS	'FactBBGenDate', 'sprintf'
	CALLS	'FactBBGenDate', 'rs232puts'
	CALLS	'FactBBGenDate', 'sscanf'
	CALLS	'FactBBGenDate', 'ValidateDate'
	CALLS	'FactBBGenDate', 'NV_Store'
	CALLS	'FactBBGenVersion', 'BBVersion'
	CALLS	'FactBBGenVersion', 'rs232puts'
	CALLS	'FactBBGenVersion', 'rs232putchar'
	CALLS	'FactBBGenSignal', 'FindParameter'
	CALLS	'FactBBGenPhase', 'sprintf'
	CALLS	'FactBBGenPhase', 'rs232puts'
	CALLS	'FactBBGenPhase', 'sscanf'
	CALLS	'FactBBGenPhase', 'NV_Store'
	CALLS	'FactBBGenScHPhase', 'sprintf'
	CALLS	'FactBBGenScHPhase', 'rs232puts'
	CALLS	'FactBBGenScHPhase', 'sscanf'
	CALLS	'FactBBGenScHPhase', 'NV_Store'
	CALLS	'FactBBGenDAC', 'sprintf'
	CALLS	'FactBBGenDAC', 'rs232puts'
	CALLS	'FactBBGenDAC', 'sscanf'
	CALLS	'FactBBGenDAC', 'NV_Store'
	CALLS	'FactTSGenDate', 'sprintf'
	CALLS	'FactTSGenDate', 'rs232puts'
	CALLS	'FactTSGenDate', 'sscanf'
	CALLS	'FactTSGenDate', 'ValidateDate'
	CALLS	'FactTSGenDate', 'NV_Store'
	CALLS	'FactTSGenAGain', 'sprintf'
	CALLS	'FactTSGenAGain', 'rs232puts'
	CALLS	'FactTSGenAGain', 'sscanf'
	CALLS	'FactTSGenAGain', 'NV_Store'
	CALLS	'FactTSGenAGain', 'WriteCBGain'
	CALLS	'FactTSGenCGain', 'sprintf'
	CALLS	'FactTSGenCGain', 'rs232puts'
	CALLS	'FactTSGenCGain', 'sscanf'
	CALLS	'FactTSGenCGain', 'NV_Store'
	CALLS	'FactTSGenCGain', 'WriteCBChromaGain'
	CALLS	'FactTSGenPhase', 'sprintf'
	CALLS	'FactTSGenPhase', 'rs232puts'
	CALLS	'FactTSGenPhase', 'sscanf'
	CALLS	'FactTSGenPhase', 'NV_Store'
	CALLS	'FactTSGenPhase', 'SetCBDelay'
	CALLS	'FactTSGenScHPhase', 'sprintf'
	CALLS	'FactTSGenScHPhase', 'rs232puts'
	CALLS	'FactTSGenScHPhase', 'sscanf'
	CALLS	'FactTSGenScHPhase', 'NV_Store'
	CALLS	'FactTSGenScHPhase', 'SetCBScHPhase'
	CALLS	'FactAudioGenStatus', 'AudioStatus'
	CALLS	'FactAudioGenStatus', 'sprintf'
	CALLS	'FactAudioGenStatus', 'rs232puts'
	CALLS	'FactAudioGenDate', 'sprintf'
	CALLS	'FactAudioGenDate', 'rs232puts'
	CALLS	'FactAudioGenDate', 'sscanf'
	CALLS	'FactAudioGenDate', 'ValidateDate'
	CALLS	'FactAudioGenDate', 'NV_Store'
	CALLS	'FactAudioGenLevel', 'sprintf'
	CALLS	'FactAudioGenLevel', 'rs232puts'
	CALLS	'FactAudioGenLevel', 'sscanf'
	CALLS	'FactAudioGenLevel', 'NV_Store'
	CALLS	'FactAudioGenLevel', 'WriteAnlAudioDACLevel'
	CALLS	'FactPLDVersion', 'pld_version'
	CALLS	'FactPLDVersion', 'sprintf'
	CALLS	'FactPLDVersion', 'rs232puts'
	CALLS	'FactTCXOStatus', 'tcxo_status'
	CALLS	'FactTCXOStatus', 'sprintf'
	CALLS	'FactTCXOStatus', 'rs232puts'
	CALLS	'FactMultiMediaChip', 'sscanf'
	CALLS	'FactMultiMediaChip', 'TransmitIIC'
	CALLS	'FactMultiMediaChip', 'ReceiveIIC'
	CALLS	'FactMultiMediaChip', 'rs232printf'
	CALLS	'FactMultiMediaChip', 'sscanf'
	CALLS	'FactMultiMediaChip', 'TransmitIIC'
	CALLS	'FactMultiMediaChip', 'ReceiveIIC'
	CALLS	'FactMultiMediaChip', 'rs232printf'
	CALLS	'FindParameter', 'Cstrcmp'
	CALLS	'FLTToSamples', 'labs'
	CALLS	'FLTToSamples', 'abs'
	CALLS	'FLTToSamples', 'labs'
	CALLS	'FLTToSamples', 'abs'
	CALLS	'PrintSamplesToFLT', 'abs'
	CALLS	'PrintSamplesToFLT', 'rs232printf'
	CALLS	'PrintSamplesToFLT', 'abs'
	CALLS	'PrintSamplesToFLT', 'rs232printf'
	CALLS	'PrintSamplesToFLT', 'fabs'
	CALLS	'PrintSamplesToFLT', 'rs232printf'
	END
