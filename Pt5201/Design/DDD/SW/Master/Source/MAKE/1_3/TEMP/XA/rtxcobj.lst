XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   1
U:\Pt5201\Design\DDD\SW\Master\Source\MAKE\2_1\temp\xa\rtxcobj.src
ADDR   CODE            LINE SOURCELINE
                          1 ; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
                          2 ; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -I..\..\rtxcdef\xa
                          3 ;          -I..\..\rtxc\xa\include -I..\..\code\include\1_0 -I..\..\app_spec\xa
                          4 ;          -Ml -O2 -s
                          6 $NOZPAGE
                          7         NAME    RTXCOBJ
                         11 ; rtxcobj.c    1        /************************************************************************
                            ****/ 
                         12 ; rtxcobj.c    2        /* MODULE:                                                               
                               */
                         13 ; rtxcobj.c    3        /*   RtxcObj.c - Methodes for:                                           
                               */
                         14 ; rtxcobj.c    4        /*               TTimer objects created 5/5-99 by. Tomas D. Kappelgaard. 
                               */
                         15 ; rtxcobj.c    5        /*               TThread objects created x/5-99 by. Tomas D. Kappelgaard.
                               */
                         16 ; rtxcobj.c    6        /*               TStream objects created 20/10-99 by. Tomas D. Kappelgaar
                            d. */
                         17 ; rtxcobj.c    7        /*                                                                       
                               */
                         18 ; rtxcobj.c    8        /************************************************************************
                            ****/
                         19 ; rtxcobj.c    9        /* FUNCTIONS:                                                            
                               */
                         20 ; rtxcobj.c   10        /*               void *Timer_Create(SEMA Event);                         
                               */
                         21 ; rtxcobj.c   11        /*               void Timer_Period_Set(TTimer Timer, int Time);          
                               */
                         22 ; rtxcobj.c   12        /*               int Timer_Period_Get(TTimer Timer);                     
                               */
                         23 ; rtxcobj.c   13        /*               void Timer_Tick(TTimer Timer, int Time);                
                               */
                         24 ; rtxcobj.c   14        /*               void * Thread_Create(int Priority, void (far *entry)(voi
                            d))*/
                         25 ; rtxcobj.c   15        /*                                                                       
                               */
                         26 ; rtxcobj.c   16        /* TASKS:                                                                
                               */
                         27 ; rtxcobj.c   17        /*                                                                       
                               */
                         28 ; rtxcobj.c   18        /*                                                                       
                               */
                         29 ; rtxcobj.c   19        /************************************************************************
                            ****/
                         30 ; rtxcobj.c   20        /* Edit log SAA 991005 */
                         31 ; rtxcobj.c   21        /* In line 369(++)                                                   */  
                             
                         32 ; rtxcobj.c   22        /*      removed '&' from address of array of chars (name IS pointer) */
                         33 ; rtxcobj.c   23        /* In Object EventList, function Wait : removed Timer part if        */
                         34 ; rtxcobj.c   24        /*                paarmeter *TimeOut is NULL pointer                 */
                         35 ; rtxcobj.c   25        
                         36 ; rtxcobj.c   26        
                         37 ; rtxcobj.c   27        
                         38 ; rtxcobj.c   28        
                         39 ; rtxcobj.c   29        
                         40 ; rtxcobj.c   30        /*
                         41 ; rtxcobj.c   31         *   PTV software for PT5765
                         42 ; rtxcobj.c   32         *   Copyright (c)
                         43 ; rtxcobj.c   33         *   ProTeleVision Technologies A/S.
                         44 ; rtxcobj.c   34         *   ALL RIGHTS RESERVED
                         45 ; rtxcobj.c   35        */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   2

ADDR   CODE            LINE SOURCELINE
                         46 ; rtxcobj.c   36        /************************************************************************
                            ****/
                         47 ; rtxcobj.c   37        
                         48 ; rtxcobj.c   38        #include <stdlib.h>
                         63 ; rtxcobj.c   39        //#include "rtxcobj.h"
                         64 ; rtxcobj.c   40        #include "define.h"
                         67 ; rtxcobj.c   41        #include "rtxcapi.h"
                        193 ; rtxcobj.c   42        #include "ctask.h"
                        196 ; rtxcobj.c   43        #include "cclock.h"
                        199 ; rtxcobj.c   44        #include "cpart.h"
                        202 ; rtxcobj.c   45        #include "csema.h"
                        205 ; rtxcobj.c   46        #include "cres.h"
                        208 ; rtxcobj.c   47        #include "cqueue.h"
                        211 ; rtxcobj.c   48        #include "stack.h"
                        216 ; rtxcobj.c   49        #include "objectid.h"
                        219 ; rtxcobj.c   50        //#include "evlog.h"
                        220 ; rtxcobj.c   51        
                        221 ; rtxcobj.c   52        
                        222 ; rtxcobj.c   53        /**************** new and delete *****************/
                        223 ; rtxcobj.c   54        long HeapAlloc;
                        224 ; rtxcobj.c   55        
                        225 ; rtxcobj.c   56        int malloc2(void* arg)
                        226 ; rtxcobj.c   57        {
000000                  227 RTXCOBJ_PR      SEGMENT HCODE
000000                  228         RSEG    RTXCOBJ_PR
                        229         ALIGN   1
                        231         PUBLIC  _malloc2
000000                  232 _malloc2:
000000 0F30             236         PUSH.W  R4, R5
                        240 ; rtxcobj.c   58         HeapAlloc+=((*(unsigned long*)arg)+4+15)&0xFFF0;
000002 964842rr         242         MOV.B   ES,#SEG( _HeapAlloc )
000006 9938rrrr         243         MOV.W   R3,#SOF( _HeapAlloc )
00000A 8B23             244         MOV.W   R2,[R3+]
00000C 8A33             245         MOV.W   R3,[R3]
00000E 8951             246         MOV.W   R5,R1
000010 8940             247         MOV.W   R4,R0
000012 8915             248         MOV.W   R1,R5
000014 8904             249         MOV.W   R0,R4
000016 862C42           252         MOV.B   ES,R1L
000019 8C1002           253         MOV.W   R1,[R0+2]
00001C 8A00             254         MOV.W   R0,[R0]
00001E 99000013         255         ADD.W   R0,#013H
000022 99110000         256         ADDC.W  R1,#00H
000026 9905FFF0         257         AND.W   R0,#0FFF0H
00002A 99150000         258         AND.W   R1,#00H
00002E 0920             259         ADD.W   R2,R0
000030 1931             260         ADDC.W  R3,R1
000032 964842rr         261         MOV.B   ES,#SEG( _HeapAlloc )
000036 9908rrrr         262         MOV.W   R0,#SOF( _HeapAlloc )
00003A 8B28             263         MOV.W   [R0+],R2
00003C 8A38             264         MOV.W   [R0],R3
                        265 ; rtxcobj.c   59         *(void**)arg=malloc(*(unsigned int*)arg);
00003E 8915             267         MOV.W   R1,R5
000040 8904             268         MOV.W   R0,R4
000042 862C42           269         MOV.B   ES,R1L
000045 8A00             270         MOV.W   R0,[R0]
                        271         CALL    _malloc
000047 C4rrrrrr        +271 ;       FCALL   _malloc
00004B 86AC42           273         MOV.B   ES,R5L
00004E 8A0C             274         MOV.W   [R4],R0
000050 8C1C02           275         MOV.W   [R4+2],R1
                        276 ; rtxcobj.c   60         return(0);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   3

ADDR   CODE            LINE SOURCELINE
000053 B900             278         MOV.W   R0,#00H
                        279 ; rtxcobj.c   61        }
000055 2F30             281         POP.W   R4, R5
000057 D680             283         RET
                        285 ; rtxcobj.c   62        void* new(long size)
                        286 ; rtxcobj.c   63        {
000059 00               287         ALIGN   1
                        289         PUBLIC  _new
00005A                  290 _new:
00005A A97C             294         ADDS.W  R7,#0CH
00005C 8C1F02           298         MOV.W   [R7+2],R1
00005F 8A0F             299         MOV.W   [R7],R0
                        300 ; rtxcobj.c   64         KS_user(malloc2,&size);
000061 9918rrrr         302         MOV.W   R1,#SEG( _malloc2 )
000065 9908rrrr         303         MOV.W   R0,#SOF( _malloc2 )
000069 9168rr           304         MOV.B   R3L,#SEG( __lc_bs )
00006C 7177             305         XOR.B   R3H,R3H
00006E 8927             306         MOV.W   R2,R7
                        307         CALL    _KS_user
000070 C4rrrrrr        +307 ;       FCALL   _KS_user
                        309 ; rtxcobj.c   65        // if (!size)
                        310 ; rtxcobj.c   66        //  LogEvent(EventOutOfMemmory,0);
                        311 ; rtxcobj.c   67         return((void*)size);
000074 8C1702           313         MOV.W   R1,[R7+2]
000077 8A07             314         MOV.W   R0,[R7]
                        318 ; rtxcobj.c   68        } 
000079 A974             320         ADDS.W  R7,#04H
00007B D680             322         RET
                        324 ; rtxcobj.c   69        
                        325 ; rtxcobj.c   70        int free2(void* addr)
                        326 ; rtxcobj.c   71        {
00007D 00               327         ALIGN   1
                        329         PUBLIC  _free2
00007E                  330 _free2:
                        336 ; rtxcobj.c   72         free(addr);
                        338         CALL    _free
00007E C4rrrrrr        +338 ;       FCALL   _free
                        340 ; rtxcobj.c   73         return(0);
000082 B900             342         MOV.W   R0,#00H
                        343 ; rtxcobj.c   74        }
000084 D680             345         RET
                        347 ; rtxcobj.c   75        void delete(void* addr)
                        348 ; rtxcobj.c   76        {
                        349         ALIGN   1
                        351         PUBLIC  _delete
000086                  352 _delete:
                        358 ; rtxcobj.c   77         KS_user(free2,addr);
000086 8931             360         MOV.W   R3,R1
000088 8920             361         MOV.W   R2,R0
00008A 9918rrrr         362         MOV.W   R1,#SEG( _free2 )
00008E 9908rrrr         363         MOV.W   R0,#SOF( _free2 )
                        364         CALL    _KS_user
000092 C4rrrrrr        +364 ;       FCALL   _KS_user
                        368 ; rtxcobj.c   78        } 
000096 D680             370         RET
                        372 ; rtxcobj.c   79        
                        373 ; rtxcobj.c   80        
                        374 ; rtxcobj.c   81        void Sleep(int time)
                        375 ; rtxcobj.c   82        {
                        376         ALIGN   1
                        378         PUBLIC  _Sleep
000098                  379 _Sleep:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   4

ADDR   CODE            LINE SOURCELINE
                        385 ; rtxcobj.c   83         KS_delay(0,time/CLKTICK);
000098 8910             387         MOV.W   R1,R0
00009A 9819             388         SEXT.W  R1
00009C E9090008         389         DIV.D   R0,#08H
0000A0 8910             391         MOV.W   R1,R0
0000A2 910800           392         MOV.B   R0L,#00H
                        393         CALL    _KS_delay
0000A5 C4rrrrrr        +393 ;       FCALL   _KS_delay
                        394 ; rtxcobj.c   84        }       
0000A9 D680             396         RET
                        398 ; rtxcobj.c   85        
                        399 ; rtxcobj.c   86        /**************** TEvent Object *****************/
                        400 ; rtxcobj.c   87        typedef struct TEvent {
                        401 ; rtxcobj.c   88          /* Public: */
                        402 ; rtxcobj.c   89                int     ObjectID;
                        403 ; rtxcobj.c   90                void    (*TEvent)(struct TEvent *this, char *Name);
                        404 ; rtxcobj.c   91                void    (*_TEvent)(struct TEvent *this);
                        405 ; rtxcobj.c   92                int     (*Wait)(struct TEvent *this, long *TimeOut);
                        406 ; rtxcobj.c   93                void    (*Set)(struct TEvent *this);
                        407 ; rtxcobj.c   94                void    (*Clear)(struct TEvent *this);
                        408 ; rtxcobj.c   95                int     (*IsSet)(struct TEvent *this);
                        409 ; rtxcobj.c   96                SEMA    ID;
                        410 ; rtxcobj.c   97                char *  Name;
                        411 ; rtxcobj.c   98          /* Private: */
                        412 ; rtxcobj.c   99        } TEvent;
                        413 ; rtxcobj.c  100        
                        414 ; rtxcobj.c  101        
                        415 ; rtxcobj.c  102        struct TEvent   TEventPartition[DNSEMAS];
                        416 ; rtxcobj.c  103        MAP             TEventMap=0;
000000                  417 RTXCOBJ_INI_FA  SEGMENT HDATA INSEGMENT INIT
000000                  418         RSEG    RTXCOBJ_INI_FA
                        421         PUBLIC  _TEventMap
000000                  422 _TEventMap:
                        423 ; rtxcobj.c  104        
                        424 ; rtxcobj.c  105        
                        425 ; rtxcobj.c  106        void    TEvent_TEvent(struct TEvent *this, char *Name)
                        426 ; rtxcobj.c  107        {
000000 00               427         DB      000H
0000AB                  428         RSEG    RTXCOBJ_PR
0000AB 00               429         ALIGN   1
                        431         PUBLIC  _TEvent_TEvent
0000AC                  432 _TEvent_TEvent:
0000AC 0F30             468         PUSH.W  R4, R5
0000AE A978             470         ADDS.W  R7,#08H
                        478 ; rtxcobj.c  108        
                        479 ; rtxcobj.c  109         struct TEvent *Ptr;
                        480 ; rtxcobj.c  110        
                        481 ; rtxcobj.c  111         if(this>(struct TEvent *)0)
0000B0 99140000         483         CMP.W   R1,#00H
0000B4 F202             484         BNE     _6
0000B6 99040000         485         CMP.W   R0,#00H
0000B6 99040000         485         CMP.W   R0,#00H
0000BA                  486 _6:
0000BA F92D             487         BL      _5
                        488 ; rtxcobj.c  112         {
                        489 ; rtxcobj.c  113          Ptr=this;
0000BC 8951             491         MOV.W   R5,R1
0000BE 8940             492         MOV.W   R4,R0
                        494 ; rtxcobj.c  114          this->ID=NSEMAS+1;
0000C0 8C1F06           496         MOV.W   [R7+6],R1
0000C3 8C0F04           497         MOV.W   [R7+4],R0
0000C6 9900001A         498         ADD.W   R0,#01AH
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   5

ADDR   CODE            LINE SOURCELINE
0000CA 8C1F02           501         MOV.W   [R7+2],R1
0000CD 8A0F             502         MOV.W   [R7],R0
0000CF 8C1706           503         MOV.W   R1,[R7+6]
0000D2 8C0704           504         MOV.W   R0,[R7+4]
0000D5 862C42           505         MOV.B   ES,R1L
0000D8 B4011A           506         MOV.B   [R0+26],#01H
                        509 ; rtxcobj.c  115          while(Ptr!=&TEventPartition[0])
0000DB 9914rrrr         511         CMP.W   R1,#SEG( _TEventPartition )
0000DF F203             512         BNE     _7
0000E1 9904rrrr         513         CMP.W   R0,#SOF( _TEventPartition )
0000E1 9904rrrr00       513         CMP.W   R0,#SOF( _TEventPartition )
0000E6                  514 _7:
0000E6 F30D             517         BEQ     _4
0000E6 F30D             517         BEQ     _4
0000E8                  518 _3:
                        519 ; rtxcobj.c  116          {
                        520 ; rtxcobj.c  117           this->ID++;
0000E8 8C1702           522         MOV.W   R1,[R7+2]
0000EB 8A07             523         MOV.W   R0,[R7]
0000ED 862C42           524         MOV.B   ES,R1L
0000F0 A201             525         ADDS.B  [R0],#01H
                        526 ; rtxcobj.c  118           Ptr--;
0000F2 99420020         528         SUB.W   R4,#020H
0000F6 9954rrrr         532         CMP.W   R5,#SEG( _TEventPartition )
0000FA F2F6             533         BNE     _3
0000FC 9944rrrr         534         CMP.W   R4,#SOF( _TEventPartition )
000100 F2F3             535         BNE     _3
                        536 ; rtxcobj.c  119          }
000102                  538 _4:
                        539 ; rtxcobj.c  120         this->ObjectID=TEventID;
000102 8C1706           541         MOV.W   R1,[R7+6]
000105 8C0704           542         MOV.W   R0,[R7+4]
000108 862C42           543         MOV.B   ES,R1L
00010B BA01             544         MOV.W   [R0],#01H
                        547 ; rtxcobj.c  121         this->Name=Name;
00010D 862C42           549         MOV.B   ES,R1L
000110 8C281C           550         MOV.W   [R0+28],R2
000113 8C381E           551         MOV.W   [R0+30],R3
                        552 ; rtxcobj.c  122         }
000116                  554 _5:
                        555 ; rtxcobj.c  123        }
000116 99700008         557         ADD.W   R7,#08H
00011A 2F30             559         POP.W   R4, R5
00011C D680             561         RET
                        566 ; rtxcobj.c  124        
                        567 ; rtxcobj.c  125        
                        568 ; rtxcobj.c  126        void    TEvent__TEvent(struct TEvent *this)
                        569 ; rtxcobj.c  127        {
                        570         ALIGN   1
                        572         PUBLIC  _TEvent__TEvent
00011E                  573 _TEvent__TEvent:
                        579 ; rtxcobj.c  128         if(this>(struct TEvent *)0)
00011E 99140000         581         CMP.W   R1,#00H
000122 F202             582         BNE     _10
000124 99040000         583         CMP.W   R0,#00H
000124 99040000         583         CMP.W   R0,#00H
000128                  584 _10:
000128 F903             585         BL      _9
                        586 ; rtxcobj.c  129          this->ID=0;
00012A 862C42           588         MOV.B   ES,R1L
00012D B4001A           589         MOV.B   [R0+26],#00H
00012D B4001A           589         MOV.B   [R0+26],#00H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   6

ADDR   CODE            LINE SOURCELINE
000130                  590 _9:
                        591 ; rtxcobj.c  130        }
000130 D680             593         RET
                        596 ; rtxcobj.c  131        
                        597 ; rtxcobj.c  132        
                        598 ; rtxcobj.c  133        int     TEvent_Waitt(struct TEvent *this, long *TimeOut)
                        599 ; rtxcobj.c  134        {
                        600         ALIGN   1
                        602         PUBLIC  _TEvent_Waitt
000132                  603 _TEvent_Waitt:
000132 0F30             607         PUSH.W  R4, R5
000134 A97C             609         ADDS.W  R7,#0CH
                        617 ; rtxcobj.c  135        
                        618 ; rtxcobj.c  136         int ret;
                        619 ; rtxcobj.c  137        
                        620 ; rtxcobj.c  138         if(this==0)
000136 8951             622         MOV.W   R5,R1
000138 8940             623         MOV.W   R4,R0
00013A 6910             624         OR.W    R1,R0
00013C F202             627         BNE     _11
                        628 ; rtxcobj.c  139          return(0);
00013E B900             630         MOV.W   R0,#00H
000140 FE4D             631         BR      _22
000140 FE4D             631         BR      _22
000142                  632 _11:
                        637 ; rtxcobj.c  140         if(TimeOut==0)
000142 8913             639         MOV.W   R1,R3
000144 8902             640         MOV.W   R0,R2
000146 6932             641         OR.W    R3,R2
000148 F208             644         BNE     _12
                        645 ; rtxcobj.c  141         {
                        646 ; rtxcobj.c  142          KS_wait(this->ID);
00014A 86AC42           648         MOV.B   ES,R5L
00014D 84041A           649         MOV.B   R0L,[R4+26]
                        651         CALL    _KS_wait
000150 C4rrrrrr        +651 ;       FCALL   _KS_wait
                        652 ; rtxcobj.c  143          return(-1);
000154 9908FFFF         654         MOV.W   R0,#0FFFFH
000158 FE41             655         BR      _22
                        656 ; rtxcobj.c  144         }
00015A                  658 _12:
                        662 ; rtxcobj.c  145         if(*TimeOut<0)
00015A 8C1F02           664         MOV.W   [R7+2],R1
00015D 8A0F             665         MOV.W   [R7],R0
00015F 862C42           666         MOV.B   ES,R1L
000162 8C1002           667         MOV.W   R1,[R0+2]
000165 8A00             668         MOV.W   R0,[R0]
000167 8C3702           671         MOV.W   R3,[R7+2]
00016A 8A27             672         MOV.W   R2,[R7]
00016C 866C42           673         MOV.B   ES,R3L
00016F 9C24020000       674         CMP.W   [R2+2],#00H
000174 FC07             675         BGT     _13
000176 FB03             676         BLT     _23
000178 9A240000         677         CMP.W   [R2],#00H
00017C F003             678         BCC     _13
00017C F003             678         BCC     _13
00017E                  679 _23:
                        680 ; rtxcobj.c  146          return(-1);
00017E 9908FFFF         682         MOV.W   R0,#0FFFFH
000182 FE2C             683         BR      _22
000182 FE2C             683         BR      _22
000184                  684 _13:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   7

ADDR   CODE            LINE SOURCELINE
                        689 ; rtxcobj.c  147         if(*TimeOut>CLKTICK)
000184 B930             691         MOV.W   R3,#00H
000186 99280008         692         MOV.W   R2,#08H
00018A 4913             693         CMP.W   R1,R3
00018C FB20             694         BLT     _16
00018E FC02             695         BGT     _24
000190 4902             696         CMP.W   R0,R2
000192 F91D             697         BL      _16
000192 F91D             697         BL      _16
000194                  698 _24:
                        699 ; rtxcobj.c  148         {
                        700 ; rtxcobj.c  149          ret=KS_waitt(this->ID,*TimeOut/CLKTICK);
000194 86AC42           702         MOV.B   ES,R5L
000197 84841A           703         MOV.B   R4L,[R4+26]
00019A C4rrrrrr         705         FCALL   __SDIVL
00019E 8910             706         MOV.W   R1,R0
0001A0 8108             707         MOV.B   R0L,R4L
                        708         CALL    _KS_waitt
0001A2 C4rrrrrr        +708 ;       FCALL   _KS_waitt
                        710 ; rtxcobj.c  150          if(ret==RC_GOOD)
0001A6 6900             712         OR.W    R0,R0
0001A8 F203             713         BNE     _14
                        714 ; rtxcobj.c  151           return(-1);
0001AA 9908FFFF         716         MOV.W   R0,#0FFFFH
0001AE FE16             718         BR      _22
0001AE FE16             718         BR      _22
0001B0                  719 _14:
                        722 ; rtxcobj.c  152          else if(ret==RC_TIMEOUT)
0001B0 99040005         724         CMP.W   R0,#05H
0001B4 F20A             725         BNE     _15
                        726 ; rtxcobj.c  153          {
                        727 ; rtxcobj.c  154           *TimeOut=0;
0001B6 8C1702           729         MOV.W   R1,[R7+2]
0001B9 8A07             730         MOV.W   R0,[R7]
0001BB 862C42           731         MOV.B   ES,R1L
0001BE BA00             732         MOV.W   [R0],#00H
0001C0 BC0002           733         MOV.W   [R0+2],#00H
                        736 ; rtxcobj.c  155           return(-1);
0001C3 9908FFFF         738         MOV.W   R0,#0FFFFH
0001C7 FE0A             740         BR      _22
                        741 ; rtxcobj.c  156          }
0001CA                  743 _15:
                        744 ; rtxcobj.c  157          else 
                        745 ; rtxcobj.c  158           return(0);
0001CA B900             747         MOV.W   R0,#00H
0001CC FE07             748         BR      _22
                        749 ; rtxcobj.c  159         }
0001CE                  751 _16:
                        753 ; rtxcobj.c  160         KS_wait(this->ID);
0001CE 86AC42           755         MOV.B   ES,R5L
0001D1 84041A           756         MOV.B   R0L,[R4+26]
                        757         CALL    _KS_wait
0001D4 C4rrrrrr        +757 ;       FCALL   _KS_wait
                        758 ; rtxcobj.c  161         return(-1);
0001D8 9908FFFF         760         MOV.W   R0,#0FFFFH
                        761 ; rtxcobj.c  162        }
0001DC                  763 _22:
0001DC A974             764         ADDS.W  R7,#04H
0001DE 2F30             766         POP.W   R4, R5
0001E0 D680             768         RET
                        771 ; rtxcobj.c  163        
                        772 ; rtxcobj.c  164        
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   8

ADDR   CODE            LINE SOURCELINE
                        773 ; rtxcobj.c  165        void    TEvent_Signal(struct TEvent *this)
                        774 ; rtxcobj.c  166        {
                        775         ALIGN   1
                        777         PUBLIC  _TEvent_Signal
0001E2                  778 _TEvent_Signal:
                        784 ; rtxcobj.c  167         if(this>(struct TEvent *)0)
0001E2 99140000         786         CMP.W   R1,#00H
0001E6 F202             787         BNE     _27
0001E8 99040000         788         CMP.W   R0,#00H
0001E8 99040000         788         CMP.W   R0,#00H
0001EC                  789 _27:
0001EC F905             790         BL      _26
                        791 ; rtxcobj.c  168         {
                        792 ; rtxcobj.c  169          KS_signal(this->ID);
0001EE 862C42           794         MOV.B   ES,R1L
0001F1 84001A           795         MOV.B   R0L,[R0+26]
                        797         CALL    _KS_signal
0001F4 C4rrrrrr        +797 ;       FCALL   _KS_signal
                        798 ; rtxcobj.c  170         }
0001F8                  800 _26:
                        801 ; rtxcobj.c  171        }
0001F8 D680             803         RET
                        805 ; rtxcobj.c  172        
                        806 ; rtxcobj.c  173        
                        807 ; rtxcobj.c  174        void    TEvent_Pend(struct TEvent *this)
                        808 ; rtxcobj.c  175        {
                        809         ALIGN   1
                        811         PUBLIC  _TEvent_Pend
0001FA                  812 _TEvent_Pend:
                        818 ; rtxcobj.c  176         if(this>(struct TEvent *)0)
0001FA 99140000         820         CMP.W   R1,#00H
0001FE F202             821         BNE     _29
000200 99040000         822         CMP.W   R0,#00H
000200 99040000         822         CMP.W   R0,#00H
000204                  823 _29:
000204 F905             824         BL      _28
                        825 ; rtxcobj.c  177         {
                        826 ; rtxcobj.c  178          KS_pend(this->ID);
000206 862C42           828         MOV.B   ES,R1L
000209 84001A           829         MOV.B   R0L,[R0+26]
                        831         CALL    _KS_pend
00020C C4rrrrrr        +831 ;       FCALL   _KS_pend
                        832 ; rtxcobj.c  179         }
000210                  834 _28:
                        835 ; rtxcobj.c  180        }
000210 D680             837         RET
                        839 ; rtxcobj.c  181        
                        840 ; rtxcobj.c  182        
                        841 ; rtxcobj.c  183        int     TEvent_InqSema(struct TEvent *this)
                        842 ; rtxcobj.c  184        {
                        843         ALIGN   1
                        845         PUBLIC  _TEvent_InqSema
000212                  846 _TEvent_InqSema:
                        852 ; rtxcobj.c  185         if(this>(struct TEvent *)0)
000212 99140000         854         CMP.W   R1,#00H
000216 F202             855         BNE     _32
000218 99040000         856         CMP.W   R0,#00H
000218 99040000         856         CMP.W   R0,#00H
00021C                  857 _32:
00021C F908             858         BL      _30
                        859 ; rtxcobj.c  186         {
                        860 ; rtxcobj.c  187          return(KS_inqsema(this->ID));
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   9

ADDR   CODE            LINE SOURCELINE
00021E 862C42           862         MOV.B   ES,R1L
000221 84001A           863         MOV.B   R0L,[R0+26]
                        865         CALL    _KS_inqsema
000224 C4rrrrrr        +865 ;       FCALL   _KS_inqsema
000228 8100             866         MOV.B   R0L,R0L
00022A 9019             867         SEXT.B  R0H
00022C D680             868         RET
                        869 ; rtxcobj.c  188         }
00022E                  871 _30:
                        872 ; rtxcobj.c  189         else
                        873 ; rtxcobj.c  190         {
                        874 ; rtxcobj.c  191          return(0);
00022E B900             876         MOV.W   R0,#00H
                        877 ; rtxcobj.c  192         }
                        878 ; rtxcobj.c  193        }
000230                  880 _31:
000230 D680             881         RET
                        883 ; rtxcobj.c  194        
                        884 ; rtxcobj.c  195        
                        885 ; rtxcobj.c  196        
                        886 ; rtxcobj.c  197        TEvent  *newTEvent(char *Name)
                        888 ; rtxcobj.c  198        {
                        889         ALIGN   1
                        891         PUBLIC  _newTEvent
000232                  892 _newTEvent:
000232 0F30             898         PUSH.W  R4, R5
000234 A978             900         ADDS.W  R7,#08H
000236 8C1F06           903         MOV.W   [R7+6],R1
000239 8C0F04           904         MOV.W   [R7+4],R0
                        910 ; rtxcobj.c  199        
                        911 ; rtxcobj.c  200        /* VAR */
                        912 ; rtxcobj.c  201         TEvent *Event;
                        913 ; rtxcobj.c  202        
                        914 ; rtxcobj.c  203        /* BEGIN */
                        915 ; rtxcobj.c  204         if(TEventMap==0)
00023C 964842rr         917         MOV.B   ES,#SEG( _TEventMap )
000240 9908rrrr         918         MOV.W   R0,#SOF( _TEventMap )
000244 8200             919         MOV.B   R0L,[R0]
000246 F214             920         BNE     _34
                        921 ; rtxcobj.c  205         {
                        922 ; rtxcobj.c  206          TEventMap=KS_create_part(&TEventPartition,sizeof(struct TEvent),DNSEMAS
                            );  /* Create event map */
000248 9918rrrr         924         MOV.W   R1,#SEG( _TEventPartition )
00024C 9908rrrr         925         MOV.W   R0,#SOF( _TEventPartition )
000250 99280020         926         MOV.W   R2,#020H
000254 99380080         927         MOV.W   R3,#080H
                        928         CALL    _KS_create_part
000258 C4rrrrrr        +928 ;       FCALL   _KS_create_part
00025C 964842rr         929         MOV.B   ES,#SEG( _TEventMap )
000260 9918rrrr         930         MOV.W   R1,#SOF( _TEventMap )
000264 8209             931         MOV.B   [R1],R0L
                        932 ; rtxcobj.c  207          if(TEventMap==0)
000266 6100             934         OR.B    R0L,R0L
000268 F203             935         BNE     _34
                        936 ; rtxcobj.c  208           return(0);
00026A B910             938         MOV.W   R1,#00H
00026C B900             939         MOV.W   R0,#00H
00026E FE71             940         BR      _39
                        941 ; rtxcobj.c  209         }
000270                  943 _34:
                        946 ; rtxcobj.c  210         Event=KS_alloc(TEventMap);
000270 964842rr         948         MOV.B   ES,#SEG( _TEventMap )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  10

ADDR   CODE            LINE SOURCELINE
000274 9908rrrr         949         MOV.W   R0,#SOF( _TEventMap )
000278 8200             950         MOV.B   R0L,[R0]
                        951         CALL    _KS_alloc
00027A C4rrrrrr        +951 ;       FCALL   _KS_alloc
                        953 ; rtxcobj.c  211         if(Event==0)
00027E 8931             955         MOV.W   R3,R1
000280 8920             956         MOV.W   R2,R0
000282 6910             957         OR.W    R1,R0
000284 F203             960         BNE     _35
                        961 ; rtxcobj.c  212         {
                        962 ; rtxcobj.c  213        //  LogEvent(EventNoMoreEvents,0);
                        963 ; rtxcobj.c  214          return(0);    
000286 B910             965         MOV.W   R1,#00H
000288 B900             966         MOV.W   R0,#00H
00028A FE63             967         BR      _39
                        968 ; rtxcobj.c  215         }
00028C                  970 _35:
                        975 ; rtxcobj.c  216         Event->TEvent=TEvent_TEvent;
00028C 8913             977         MOV.W   R1,R3
00028E 8902             978         MOV.W   R0,R2
000290 99000002         979         ADD.W   R0,#02H
000294 862C42           980         MOV.B   ES,R1L
000297 9A08rrrr         981         MOV.W   [R0],#SOF( _TEvent_TEvent )
00029B 9D080002rrrr     982         MOV.W   [R0+2],#SEG( _TEvent_TEvent )
                        983 ; rtxcobj.c  217         Event->_TEvent=TEvent__TEvent;
0002A1 8953             985         MOV.W   R5,R3
0002A3 8942             986         MOV.W   R4,R2
0002A5 99400006         987         ADD.W   R4,#06H
0002A9 86AC42           988         MOV.B   ES,R5L
0002AC 9A48rrrr         989         MOV.W   [R4],#SOF( _TEvent__TEvent )
0002B0 9D480002rrrr     990         MOV.W   [R4+2],#SEG( _TEvent__TEvent )
                        991 ; rtxcobj.c  218         Event->Wait=TEvent_Waitt;
0002B6 8953             993         MOV.W   R5,R3
0002B8 8942             994         MOV.W   R4,R2
0002BA 9940000A         995         ADD.W   R4,#0AH
0002BE 86AC42           996         MOV.B   ES,R5L
0002C1 9A48rrrr         997         MOV.W   [R4],#SOF( _TEvent_Waitt )
0002C5 9D480002rrrr     998         MOV.W   [R4+2],#SEG( _TEvent_Waitt )
                        999 ; rtxcobj.c  219         Event->Set=TEvent_Signal;
0002CB 8953            1001         MOV.W   R5,R3
0002CD 8942            1002         MOV.W   R4,R2
0002CF 9940000E        1003         ADD.W   R4,#0EH
0002D3 86AC42          1004         MOV.B   ES,R5L
0002D6 9A48rrrr        1005         MOV.W   [R4],#SOF( _TEvent_Signal )
0002DA 9D480002rrrr    1006         MOV.W   [R4+2],#SEG( _TEvent_Signal )
                       1007 ; rtxcobj.c  220         Event->Clear=TEvent_Pend;
0002E0 8953            1009         MOV.W   R5,R3
0002E2 8942            1010         MOV.W   R4,R2
0002E4 99400012        1011         ADD.W   R4,#012H
0002E8 86AC42          1012         MOV.B   ES,R5L
0002EB 9A48rrrr        1013         MOV.W   [R4],#SOF( _TEvent_Pend )
0002EF 9D480002rrrr    1014         MOV.W   [R4+2],#SEG( _TEvent_Pend )
                       1015 ; rtxcobj.c  221         Event->IsSet=TEvent_InqSema;
0002F5 8953            1017         MOV.W   R5,R3
0002F7 8942            1018         MOV.W   R4,R2
0002F9 99400016        1019         ADD.W   R4,#016H
0002FD 86AC42          1020         MOV.B   ES,R5L
000300 9A48rrrr        1021         MOV.W   [R4],#SOF( _TEvent_InqSema )
000304 9D480002rrrr    1022         MOV.W   [R4+2],#SEG( _TEvent_InqSema )
                       1023 ; rtxcobj.c  222         Event->TEvent(Event,Name);
00030A 862C42          1025         MOV.B   ES,R1L
00030D 8A40            1026         MOV.W   R4,[R0]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  11

ADDR   CODE            LINE SOURCELINE
00030F 8C5002          1027         MOV.W   R5,[R0+2]
000312 8C3F02          1028         MOV.W   [R7+2],R3
000315 8A2F            1029         MOV.W   [R7],R2
000317 8913            1030         MOV.W   R1,R3
000319 8902            1031         MOV.W   R0,R2
00031B 8C3706          1036         MOV.W   R3,[R7+6]
00031E 8C2704          1037         MOV.W   R2,[R7+4]
000321 C4rrrrrr        1038         FCALL   __ICALL
                       1044 ; rtxcobj.c  223         if(Event->ID>(NSEMAS+DNSEMAS+1))
000325 8C1702          1046         MOV.W   R1,[R7+2]
000328 8A07            1047         MOV.W   R0,[R7]
00032A 862C42          1048         MOV.B   ES,R1L
00032D 94041A81        1049         CMP.B   [R0+26],#081H
000331 F90D            1050         BL      _36
                       1051 ; rtxcobj.c  224         {
                       1052 ; rtxcobj.c  225          KS_free(TEventMap,Event);
000333 964842rr        1054         MOV.B   ES,#SEG( _TEventMap )
000337 9908rrrr        1055         MOV.W   R0,#SOF( _TEventMap )
00033B 8200            1056         MOV.B   R0L,[R0]
00033D 8C3702          1057         MOV.W   R3,[R7+2]
000340 8A27            1058         MOV.W   R2,[R7]
                       1059         CALL    _KS_free
000342 C4rrrrrr       +1059 ;       FCALL   _KS_free
                       1063 ; rtxcobj.c  226          return(0);
000346 B910            1065         MOV.W   R1,#00H
000348 B900            1066         MOV.W   R0,#00H
00034A FE03            1067         BR      _39
                       1068 ; rtxcobj.c  227         }
00034C                 1070 _36:
                       1072 ; rtxcobj.c  228         return(Event);
00034C 8C1702          1074         MOV.W   R1,[R7+2]
00034F 8A07            1075         MOV.W   R0,[R7]
                       1078 ; rtxcobj.c  229        }
000352                 1080 _39:
000352 99700008        1081         ADD.W   R7,#08H
000356 2F30            1083         POP.W   R4, R5
000358 D680            1085         RET
                       1088 ; rtxcobj.c  230        
                       1089 ; rtxcobj.c  231        
                       1090 ; rtxcobj.c  232        void deleteTEvent(TEvent *Event)
                       1091 ; rtxcobj.c  233        {
                       1092         ALIGN   1
                       1094         PUBLIC  _deleteTEvent
00035A                 1095 _deleteTEvent:
00035A 0F30            1099         PUSH.W  R4, R5
00035C A97C            1101         ADDS.W  R7,#0CH
                       1105 ; rtxcobj.c  234         Event->_TEvent(Event);
00035E 862C42          1107         MOV.B   ES,R1L
000361 8C4006          1108         MOV.W   R4,[R0+6]
000364 8C5008          1109         MOV.W   R5,[R0+8]
000367 8C1F02          1110         MOV.W   [R7+2],R1
00036A 8A0F            1111         MOV.W   [R7],R0
00036C C4rrrrrr        1116         FCALL   __ICALL
                       1119 ; rtxcobj.c  235         KS_free(TEventMap,Event);
000370 964842rr        1121         MOV.B   ES,#SEG( _TEventMap )
000374 9908rrrr        1122         MOV.W   R0,#SOF( _TEventMap )
000378 8200            1123         MOV.B   R0L,[R0]
00037A 8C3702          1124         MOV.W   R3,[R7+2]
00037D 8A27            1125         MOV.W   R2,[R7]
                       1126         CALL    _KS_free
00037F C4rrrrrr       +1126 ;       FCALL   _KS_free
                       1130 ; rtxcobj.c  236        }
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  12

ADDR   CODE            LINE SOURCELINE
000383 A974            1132         ADDS.W  R7,#04H
000385 2F30            1134         POP.W   R4, R5
000387 D680            1136         RET
                       1138 ; rtxcobj.c  237        
                       1139 ; rtxcobj.c  238        /**************** TResource Object *****************/
                       1140 ; rtxcobj.c  239        typedef struct TResource {
                       1141 ; rtxcobj.c  240          /* Public: */
                       1142 ; rtxcobj.c  241                int     ObjectID;
                       1143 ; rtxcobj.c  242                void    (*TResource)(struct TResource *this, char *Name);
                       1144 ; rtxcobj.c  243                void    (*_TResource)(struct TResource *this);
                       1145 ; rtxcobj.c  244                void    (*Lock)(struct TResource *this);
                       1146 ; rtxcobj.c  245                void    (*Unlock)(struct TResource *this);
                       1147 ; rtxcobj.c  246                int     (*Owner)(struct TResource *this);
                       1148 ; rtxcobj.c  247                RESOURCE ID;
                       1149 ; rtxcobj.c  248                char *  Name;
                       1150 ; rtxcobj.c  249          /* Private: */
                       1151 ; rtxcobj.c  250        } TResource;
                       1152 ; rtxcobj.c  251        
                       1153 ; rtxcobj.c  252        
                       1154 ; rtxcobj.c  253        struct TResource TResourcePartition[DNRES];
                       1155 ; rtxcobj.c  254        MAP              TResourceMap=0;
000001                 1156         RSEG    RTXCOBJ_INI_FA
                       1159         PUBLIC  _TResourceMap
000001                 1160 _TResourceMap:
                       1161 ; rtxcobj.c  255        
                       1162 ; rtxcobj.c  256        
                       1163 ; rtxcobj.c  257        void    TResource_TResource(struct TResource *this, char *Name)
                       1164 ; rtxcobj.c  258        {
000001 00              1165         DB      000H
000389                 1166         RSEG    RTXCOBJ_PR
000389 00              1167         ALIGN   1
                       1169         PUBLIC  _TResource_TResource
00038A                 1170 _TResource_TResource:
00038A 0F30            1200         PUSH.W  R4, R5
00038C A978            1202         ADDS.W  R7,#08H
                       1210 ; rtxcobj.c  259        
                       1211 ; rtxcobj.c  260         struct TResource *Ptr;
                       1212 ; rtxcobj.c  261        
                       1213 ; rtxcobj.c  262         if(this>(struct TResource *)0)
00038E 99140000        1215         CMP.W   R1,#00H
000392 F202            1216         BNE     _44
000394 99040000        1217         CMP.W   R0,#00H
000394 99040000        1217         CMP.W   R0,#00H
000398                 1218 _44:
000398 F92D            1219         BL      _43
                       1220 ; rtxcobj.c  263         {
                       1221 ; rtxcobj.c  264          Ptr=this;
00039A 8951            1223         MOV.W   R5,R1
00039C 8940            1224         MOV.W   R4,R0
                       1226 ; rtxcobj.c  265          this->ID=NRES+1;
00039E 8C1F06          1228         MOV.W   [R7+6],R1
0003A1 8C0F04          1229         MOV.W   [R7+4],R0
0003A4 99000016        1230         ADD.W   R0,#016H
0003A8 8C1F02          1233         MOV.W   [R7+2],R1
0003AB 8A0F            1234         MOV.W   [R7],R0
0003AD 8C1706          1235         MOV.W   R1,[R7+6]
0003B0 8C0704          1236         MOV.W   R0,[R7+4]
0003B3 862C42          1237         MOV.B   ES,R1L
0003B6 B40116          1238         MOV.B   [R0+22],#01H
                       1241 ; rtxcobj.c  266          while(Ptr!=&TResourcePartition[0])
0003B9 9914rrrr        1243         CMP.W   R1,#SEG( _TResourcePartition )
0003BD F203            1244         BNE     _45
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  13

ADDR   CODE            LINE SOURCELINE
0003BF 9904rrrr        1245         CMP.W   R0,#SOF( _TResourcePartition )
0003BF 9904rrrr00      1245         CMP.W   R0,#SOF( _TResourcePartition )
0003C4                 1246 _45:
0003C4 F30D            1249         BEQ     _42
0003C4 F30D            1249         BEQ     _42
0003C6                 1250 _41:
                       1251 ; rtxcobj.c  267          {
                       1252 ; rtxcobj.c  268           this->ID++;
0003C6 8C1702          1254         MOV.W   R1,[R7+2]
0003C9 8A07            1255         MOV.W   R0,[R7]
0003CB 862C42          1256         MOV.B   ES,R1L
0003CE A201            1257         ADDS.B  [R0],#01H
                       1258 ; rtxcobj.c  269           Ptr--;
0003D0 9942001C        1260         SUB.W   R4,#01CH
0003D4 9954rrrr        1264         CMP.W   R5,#SEG( _TResourcePartition )
0003D8 F2F6            1265         BNE     _41
0003DA 9944rrrr        1266         CMP.W   R4,#SOF( _TResourcePartition )
0003DE F2F3            1267         BNE     _41
                       1268 ; rtxcobj.c  270          }
0003E0                 1270 _42:
                       1271 ; rtxcobj.c  271         this->ObjectID=TResourceID;
0003E0 8C1706          1273         MOV.W   R1,[R7+6]
0003E3 8C0704          1274         MOV.W   R0,[R7+4]
0003E6 862C42          1275         MOV.B   ES,R1L
0003E9 BA04            1276         MOV.W   [R0],#04H
                       1279 ; rtxcobj.c  272         this->Name=Name;
0003EB 862C42          1281         MOV.B   ES,R1L
0003EE 8C2818          1282         MOV.W   [R0+24],R2
0003F1 8C381A          1283         MOV.W   [R0+26],R3
                       1284 ; rtxcobj.c  273         }
0003F4                 1286 _43:
                       1287 ; rtxcobj.c  274        }
0003F4 99700008        1289         ADD.W   R7,#08H
0003F8 2F30            1291         POP.W   R4, R5
0003FA D680            1293         RET
                       1298 ; rtxcobj.c  275        
                       1299 ; rtxcobj.c  276        
                       1300 ; rtxcobj.c  277        void    TResource__TResource(struct TResource *this)
                       1301 ; rtxcobj.c  278        {
                       1302         ALIGN   1
                       1304         PUBLIC  _TResource__TResource
0003FC                 1305 _TResource__TResource:
                       1311 ; rtxcobj.c  279         if(this>(struct TResource *)0)
0003FC 99140000        1313         CMP.W   R1,#00H
000400 F202            1314         BNE     _48
000402 99040000        1315         CMP.W   R0,#00H
000402 99040000        1315         CMP.W   R0,#00H
000406                 1316 _48:
000406 F903            1317         BL      _47
                       1318 ; rtxcobj.c  280          this->ID=0;
000408 862C42          1320         MOV.B   ES,R1L
00040B B40016          1321         MOV.B   [R0+22],#00H
00040B B40016          1321         MOV.B   [R0+22],#00H
00040E                 1322 _47:
                       1323 ; rtxcobj.c  281        }
00040E D680            1325         RET
                       1328 ; rtxcobj.c  282        
                       1329 ; rtxcobj.c  283        
                       1330 ; rtxcobj.c  284        void    TResource_Lock(struct TResource *this)
                       1331 ; rtxcobj.c  285        {
                       1332         ALIGN   1
                       1334         PUBLIC  _TResource_Lock
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  14

ADDR   CODE            LINE SOURCELINE
000410                 1335 _TResource_Lock:
                       1341 ; rtxcobj.c  286         if(this>(struct TResource *)0)
000410 99140000        1343         CMP.W   R1,#00H
000414 F202            1344         BNE     _50
000416 99040000        1345         CMP.W   R0,#00H
000416 99040000        1345         CMP.W   R0,#00H
00041A                 1346 _50:
00041A F905            1347         BL      _49
                       1348 ; rtxcobj.c  287         {
                       1349 ; rtxcobj.c  288          KS_lockw(this->ID);
00041C 862C42          1351         MOV.B   ES,R1L
00041F 840016          1352         MOV.B   R0L,[R0+22]
                       1354         CALL    _KS_lockw
000422 C4rrrrrr       +1354 ;       FCALL   _KS_lockw
                       1355 ; rtxcobj.c  289         }
000426                 1357 _49:
                       1358 ; rtxcobj.c  290        }
000426 D680            1360         RET
                       1362 ; rtxcobj.c  291        
                       1363 ; rtxcobj.c  292        
                       1364 ; rtxcobj.c  293        void    TResource_Unlock(struct TResource *this)
                       1365 ; rtxcobj.c  294        {
                       1366         ALIGN   1
                       1368         PUBLIC  _TResource_Unlock
000428                 1369 _TResource_Unlock:
                       1375 ; rtxcobj.c  295         if(this>(struct TResource *)0)
000428 99140000        1377         CMP.W   R1,#00H
00042C F202            1378         BNE     _52
00042E 99040000        1379         CMP.W   R0,#00H
00042E 99040000        1379         CMP.W   R0,#00H
000432                 1380 _52:
000432 F905            1381         BL      _51
                       1382 ; rtxcobj.c  296         {
                       1383 ; rtxcobj.c  297          KS_unlock(this->ID);
000434 862C42          1385         MOV.B   ES,R1L
000437 840016          1386         MOV.B   R0L,[R0+22]
                       1388         CALL    _KS_unlock
00043A C4rrrrrr       +1388 ;       FCALL   _KS_unlock
                       1389 ; rtxcobj.c  298         }
00043E                 1391 _51:
                       1392 ; rtxcobj.c  299        }
00043E D680            1394         RET
                       1396 ; rtxcobj.c  300        
                       1397 ; rtxcobj.c  301        
                       1398 ; rtxcobj.c  302        int     TResource_Owner(struct TResource *this)
                       1399 ; rtxcobj.c  303        {
                       1400         ALIGN   1
                       1402         PUBLIC  _TResource_Owner
000440                 1403 _TResource_Owner:
                       1409 ; rtxcobj.c  304         if(this>(struct TResource *)0)
000440 99140000        1411         CMP.W   R1,#00H
000444 F202            1412         BNE     _55
000446 99040000        1413         CMP.W   R0,#00H
000446 99040000        1413         CMP.W   R0,#00H
00044A                 1414 _55:
00044A F908            1415         BL      _53
                       1416 ; rtxcobj.c  305         {
                       1417 ; rtxcobj.c  306          return(KS_inqres(this->ID));
00044C 862C42          1419         MOV.B   ES,R1L
00044F 840016          1420         MOV.B   R0L,[R0+22]
                       1422         CALL    _KS_inqres
000452 C4rrrrrr       +1422 ;       FCALL   _KS_inqres
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  15

ADDR   CODE            LINE SOURCELINE
000456 8100            1423         MOV.B   R0L,R0L
000458 9019            1424         SEXT.B  R0H
00045A D680            1425         RET
                       1426 ; rtxcobj.c  307         }
00045C                 1428 _53:
                       1429 ; rtxcobj.c  308         else
                       1430 ; rtxcobj.c  309         {
                       1431 ; rtxcobj.c  310          return(0);
00045C B900            1433         MOV.W   R0,#00H
                       1434 ; rtxcobj.c  311         }
                       1435 ; rtxcobj.c  312        }
00045E                 1437 _54:
00045E D680            1438         RET
                       1440 ; rtxcobj.c  313        
                       1441 ; rtxcobj.c  314        
                       1442 ; rtxcobj.c  315        
                       1443 ; rtxcobj.c  316        TResource *newTResource(char *Name)
                       1445 ; rtxcobj.c  317        {
                       1446         ALIGN   1
                       1448         PUBLIC  _newTResource
000460                 1449 _newTResource:
000460 0F30            1455         PUSH.W  R4, R5
000462 A978            1457         ADDS.W  R7,#08H
000464 8C1F06          1460         MOV.W   [R7+6],R1
000467 8C0F04          1461         MOV.W   [R7+4],R0
                       1467 ; rtxcobj.c  318        
                       1468 ; rtxcobj.c  319        /* VAR */
                       1469 ; rtxcobj.c  320         TResource *Resource;
                       1470 ; rtxcobj.c  321        
                       1471 ; rtxcobj.c  322        /* BEGIN */
                       1472 ; rtxcobj.c  323         if(TResourceMap==0)
00046A 964842rr        1474         MOV.B   ES,#SEG( _TResourceMap )
00046E 9908rrrr        1475         MOV.W   R0,#SOF( _TResourceMap )
000472 8200            1476         MOV.B   R0L,[R0]
000474 F214            1477         BNE     _57
                       1478 ; rtxcobj.c  324         {
                       1479 ; rtxcobj.c  325          TResourceMap=KS_create_part(&TResourcePartition,sizeof(struct TResource
                            ),DNRES);  /* Create Resource map */
000476 9918rrrr        1481         MOV.W   R1,#SEG( _TResourcePartition )
00047A 9908rrrr        1482         MOV.W   R0,#SOF( _TResourcePartition )
00047E 9928001C        1483         MOV.W   R2,#01CH
000482 99380080        1484         MOV.W   R3,#080H
                       1485         CALL    _KS_create_part
000486 C4rrrrrr       +1485 ;       FCALL   _KS_create_part
00048A 964842rr        1486         MOV.B   ES,#SEG( _TResourceMap )
00048E 9918rrrr        1487         MOV.W   R1,#SOF( _TResourceMap )
000492 8209            1488         MOV.B   [R1],R0L
                       1489 ; rtxcobj.c  326          if(TResourceMap==0)
000494 6100            1491         OR.B    R0L,R0L
000496 F203            1492         BNE     _57
                       1493 ; rtxcobj.c  327           return(0);
000498 B910            1495         MOV.W   R1,#00H
00049A B900            1496         MOV.W   R0,#00H
00049C FE67            1497         BR      _62
                       1498 ; rtxcobj.c  328         }
00049E                 1500 _57:
                       1503 ; rtxcobj.c  329         Resource=KS_alloc(TResourceMap);
00049E 964842rr        1505         MOV.B   ES,#SEG( _TResourceMap )
0004A2 9908rrrr        1506         MOV.W   R0,#SOF( _TResourceMap )
0004A6 8200            1507         MOV.B   R0L,[R0]
                       1508         CALL    _KS_alloc
0004A8 C4rrrrrr       +1508 ;       FCALL   _KS_alloc
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  16

ADDR   CODE            LINE SOURCELINE
                       1510 ; rtxcobj.c  330         if(Resource==0)
0004AC 8931            1512         MOV.W   R3,R1
0004AE 8920            1513         MOV.W   R2,R0
0004B0 6910            1514         OR.W    R1,R0
0004B2 F203            1517         BNE     _58
                       1518 ; rtxcobj.c  331         {
                       1519 ; rtxcobj.c  332        //  LogEvent(EventNoMoreResources,0);
                       1520 ; rtxcobj.c  333          return(0);    
0004B4 B910            1522         MOV.W   R1,#00H
0004B6 B900            1523         MOV.W   R0,#00H
0004B8 FE59            1524         BR      _62
                       1525 ; rtxcobj.c  334         }
0004BA                 1527 _58:
                       1532 ; rtxcobj.c  335         Resource->TResource=TResource_TResource;
0004BA 8913            1534         MOV.W   R1,R3
0004BC 8902            1535         MOV.W   R0,R2
0004BE 99000002        1536         ADD.W   R0,#02H
0004C2 862C42          1537         MOV.B   ES,R1L
0004C5 9A08rrrr        1538         MOV.W   [R0],#SOF( _TResource_TResource )
0004C9 9D080002rrrr    1539         MOV.W   [R0+2],#SEG( _TResource_TResource )
                       1540 ; rtxcobj.c  336         Resource->_TResource=TResource__TResource;
0004CF 8953            1542         MOV.W   R5,R3
0004D1 8942            1543         MOV.W   R4,R2
0004D3 99400006        1544         ADD.W   R4,#06H
0004D7 86AC42          1545         MOV.B   ES,R5L
0004DA 9A48rrrr        1546         MOV.W   [R4],#SOF( _TResource__TResource )
0004DE 9D480002rrrr    1547         MOV.W   [R4+2],#SEG( _TResource__TResource )
                       1548 ; rtxcobj.c  337         Resource->Lock=TResource_Lock;
0004E4 8953            1550         MOV.W   R5,R3
0004E6 8942            1551         MOV.W   R4,R2
0004E8 9940000A        1552         ADD.W   R4,#0AH
0004EC 86AC42          1553         MOV.B   ES,R5L
0004EF 9A48rrrr        1554         MOV.W   [R4],#SOF( _TResource_Lock )
0004F3 9D480002rrrr    1555         MOV.W   [R4+2],#SEG( _TResource_Lock )
                       1556 ; rtxcobj.c  338         Resource->Unlock=TResource_Unlock;
0004F9 8953            1558         MOV.W   R5,R3
0004FB 8942            1559         MOV.W   R4,R2
0004FD 9940000E        1560         ADD.W   R4,#0EH
000501 86AC42          1561         MOV.B   ES,R5L
000504 9A48rrrr        1562         MOV.W   [R4],#SOF( _TResource_Unlock )
000508 9D480002rrrr    1563         MOV.W   [R4+2],#SEG( _TResource_Unlock )
                       1564 ; rtxcobj.c  339         Resource->Owner=TResource_Owner;
00050E 8953            1566         MOV.W   R5,R3
000510 8942            1567         MOV.W   R4,R2
000512 99400012        1568         ADD.W   R4,#012H
000516 86AC42          1569         MOV.B   ES,R5L
000519 9A48rrrr        1570         MOV.W   [R4],#SOF( _TResource_Owner )
00051D 9D480002rrrr    1571         MOV.W   [R4+2],#SEG( _TResource_Owner )
                       1572 ; rtxcobj.c  340         Resource->TResource(Resource,Name);
000523 862C42          1574         MOV.B   ES,R1L
000526 8A40            1575         MOV.W   R4,[R0]
000528 8C5002          1576         MOV.W   R5,[R0+2]
00052B 8C3F02          1577         MOV.W   [R7+2],R3
00052E 8A2F            1578         MOV.W   [R7],R2
000530 8913            1579         MOV.W   R1,R3
000532 8902            1580         MOV.W   R0,R2
000534 8C3706          1585         MOV.W   R3,[R7+6]
000537 8C2704          1586         MOV.W   R2,[R7+4]
00053A C4rrrrrr        1587         FCALL   __ICALL
                       1593 ; rtxcobj.c  341         if(Resource->ID>(NRES+DNRES+1))
00053E 8C1702          1595         MOV.W   R1,[R7+2]
000541 8A07            1596         MOV.W   R0,[R7]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  17

ADDR   CODE            LINE SOURCELINE
000543 862C42          1597         MOV.B   ES,R1L
000546 94041681        1598         CMP.B   [R0+22],#081H
00054A F90D            1599         BL      _59
                       1600 ; rtxcobj.c  342         {
                       1601 ; rtxcobj.c  343          KS_free(TResourceMap,Resource);
00054C 964842rr        1603         MOV.B   ES,#SEG( _TResourceMap )
000550 9908rrrr        1604         MOV.W   R0,#SOF( _TResourceMap )
000554 8200            1605         MOV.B   R0L,[R0]
000556 8C3702          1606         MOV.W   R3,[R7+2]
000559 8A27            1607         MOV.W   R2,[R7]
                       1608         CALL    _KS_free
00055B C4rrrrrr       +1608 ;       FCALL   _KS_free
                       1612 ; rtxcobj.c  344          return(0);
00055F B910            1614         MOV.W   R1,#00H
000561 B900            1615         MOV.W   R0,#00H
000563 FE04            1616         BR      _62
                       1617 ; rtxcobj.c  345         }
000566                 1619 _59:
                       1621 ; rtxcobj.c  346         return(Resource);
000566 8C1702          1623         MOV.W   R1,[R7+2]
000569 8A07            1624         MOV.W   R0,[R7]
                       1627 ; rtxcobj.c  347        }
00056C                 1629 _62:
00056C 99700008        1630         ADD.W   R7,#08H
000570 2F30            1632         POP.W   R4, R5
000572 D680            1634         RET
                       1637 ; rtxcobj.c  348        
                       1638 ; rtxcobj.c  349        
                       1639 ; rtxcobj.c  350        void deleteTResource(TResource *Resource)
                       1640 ; rtxcobj.c  351        {
                       1641         ALIGN   1
                       1643         PUBLIC  _deleteTResource
000574                 1644 _deleteTResource:
000574 0F30            1648         PUSH.W  R4, R5
000576 A97C            1650         ADDS.W  R7,#0CH
                       1654 ; rtxcobj.c  352         Resource->_TResource(Resource);
000578 862C42          1656         MOV.B   ES,R1L
00057B 8C4006          1657         MOV.W   R4,[R0+6]
00057E 8C5008          1658         MOV.W   R5,[R0+8]
000581 8C1F02          1659         MOV.W   [R7+2],R1
000584 8A0F            1660         MOV.W   [R7],R0
000586 C4rrrrrr        1665         FCALL   __ICALL
                       1668 ; rtxcobj.c  353         KS_free(TResourceMap,Resource);
00058A 964842rr        1670         MOV.B   ES,#SEG( _TResourceMap )
00058E 9908rrrr        1671         MOV.W   R0,#SOF( _TResourceMap )
000592 8200            1672         MOV.B   R0L,[R0]
000594 8C3702          1673         MOV.W   R3,[R7+2]
000597 8A27            1674         MOV.W   R2,[R7]
                       1675         CALL    _KS_free
000599 C4rrrrrr       +1675 ;       FCALL   _KS_free
                       1679 ; rtxcobj.c  354        }
00059D A974            1681         ADDS.W  R7,#04H
00059F 2F30            1683         POP.W   R4, R5
0005A1 D680            1685         RET
                       1687 ; rtxcobj.c  355        
                       1688 ; rtxcobj.c  356        
                       1689 ; rtxcobj.c  357        
                       1690 ; rtxcobj.c  358        /**************** TThread Object *****************/
                       1691 ; rtxcobj.c  359        typedef struct TThread {
                       1692 ; rtxcobj.c  360          /* Public: */
                       1693 ; rtxcobj.c  361                int     ObjectID;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  18

ADDR   CODE            LINE SOURCELINE
                       1694 ; rtxcobj.c  362                void    (*TThread)(struct TThread *this, int Priority, void (*ent
                            ry)(void));
                       1695 ; rtxcobj.c  363                void    (*Execute)(struct TThread *this);
                       1696 ; rtxcobj.c  364                void    (*Terminate)(struct TThread *this);
                       1697 ; rtxcobj.c  365                void    (*Suspend)(struct TThread *this, int Time);
                       1698 ; rtxcobj.c  366                void    (*Resume)(struct TThread *this);
                       1699 ; rtxcobj.c  367                int     (*GetPriority)(struct TThread *this);
                       1700 ; rtxcobj.c  368                void    (*SetPriority)(struct TThread *this, int Prio);
                       1701 ; rtxcobj.c  369                TASK    ID;
                       1702 ; rtxcobj.c  370                char    Status;
                       1703 ; rtxcobj.c  371          /* Private: */
                       1704 ; rtxcobj.c  372                char    *Stack;
                       1705 ; rtxcobj.c  373        } TThread;
                       1706 ; rtxcobj.c  374        
                       1707 ; rtxcobj.c  375        char far stk[DNTASKS][STACK_SIZE];
                       1708 ; rtxcobj.c  376        
                       1709 ; rtxcobj.c  377        void    TThread_TThread(struct TThread *this, int Priority, void (*entry)
                            (void))
                       1710 ; rtxcobj.c  378        {
0005A3 00              1711         ALIGN   1
                       1713         PUBLIC  _TThread_TThread
0005A4                 1714 _TThread_TThread:
0005A4 0F70            1759         PUSH.W  R4, R5, R6
0005A6 A97C            1761         ADDS.W  R7,#0CH
0005A8 8962            1765         MOV.W   R6,R2
                       1774 ; rtxcobj.c  379         if(this>(void *)0)
0005AA 8951            1776         MOV.W   R5,R1
0005AC 8940            1777         MOV.W   R4,R0
0005AE 99540000        1778         CMP.W   R5,#00H
0005B2 F202            1779         BNE     _66
0005B4 99440000        1780         CMP.W   R4,#00H
0005B4 99440000        1780         CMP.W   R4,#00H
0005B8                 1781 _66:
0005B8 F928            1784         BL      _65
                       1785 ; rtxcobj.c  380         {
                       1786 ; rtxcobj.c  381          this->ID=KS_alloc_task();
                       1788         CALL    _KS_alloc_task
0005BA C4rrrrrr       +1788 ;       FCALL   _KS_alloc_task
0005BE 86AC42          1789         MOV.B   ES,R5L
0005C1 840C1E          1790         MOV.B   [R4+30],R0L
                       1791 ; rtxcobj.c  382          if(this->ID>0)
0005C4 910400          1793         CMP.B   R0L,#00H
0005C7 FD21            1794         BLE     _65
                       1795 ; rtxcobj.c  383          {
                       1796 ; rtxcobj.c  384           this->ObjectID=TThreadID;
0005C9 86AC42          1798         MOV.B   ES,R5L
0005CC BA40            1799         MOV.W   [R4],#00H
0005CE 8C5F02          1800         MOV.W   [R7+2],R5
0005D1 8A4F            1801         MOV.W   [R7],R4
                       1804 ; rtxcobj.c  385           this->Stack=stk[this->ID];
0005D3 8120            1806         MOV.B   R1L,R0L
0005D5 9039            1807         SEXT.B  R1H
0005D7 D919            1808         ASL.W   R1,#09H
0005D9 8941            1809         MOV.W   R4,R1
0005DB B950            1810         MOVS.W  R5,#00H
0005DD 9938rrrr        1811         MOV.W   R3,#SEG( _stk )
0005E1 9928rrrr        1812         MOV.W   R2,#SOF( _stk )
0005E5 0924            1813         ADD.W   R2,R4
0005E7 8C5702          1814         MOV.W   R5,[R7+2]
0005EA 8A47            1815         MOV.W   R4,[R7]
0005EC 86AC42          1816         MOV.B   ES,R5L
0005EF 8C2C20          1817         MOV.W   [R4+32],R2
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  19

ADDR   CODE            LINE SOURCELINE
0005F2 8C3C22          1818         MOV.W   [R4+34],R3
                       1822 ; rtxcobj.c  386           KS_deftask(this->ID,Priority,this->Stack,STACK_SIZE,entry);
0005F5 99180200        1824         MOV.W   R1,#0200H
0005F9 8C5710          1825         MOV.W   R5,[R7+16]
0005FC 8C470E          1826         MOV.W   R4,[R7+14]
0005FF 0F30            1828         PUSH.W  R4, R5
000601 811C            1830         MOV.B   R0H,R6L
                       1831         CALL    _KS_deftask
000603 C4rrrrrr       +1831 ;       FCALL   _KS_deftask
000607 A974            1832         ADDS.W  R7,#04H
                       1834 ; rtxcobj.c  387          }
                       1835 ; rtxcobj.c  388         }
00060A                 1837 _65:
                       1838 ; rtxcobj.c  389        }
00060A A974            1840         ADDS.W  R7,#04H
00060C 2F70            1842         POP.W   R4, R5, R6
00060E D680            1844         RET
                       1846 ; rtxcobj.c  390        
                       1847 ; rtxcobj.c  391        
                       1848 ; rtxcobj.c  392        void    TThread_Execute(struct TThread *this)
                       1849 ; rtxcobj.c  393        {
                       1850         ALIGN   1
                       1852         PUBLIC  _TThread_Execute
000610                 1853 _TThread_Execute:
                       1859 ; rtxcobj.c  394         KS_execute(this->ID);
000610 862C42          1861         MOV.B   ES,R1L
000613 84001E          1862         MOV.B   R0L,[R0+30]
                       1864         CALL    _KS_execute
000616 C4rrrrrr       +1864 ;       FCALL   _KS_execute
                       1865 ; rtxcobj.c  395        }
00061A D680            1867         RET
                       1869 ; rtxcobj.c  396        
                       1870 ; rtxcobj.c  397        
                       1871 ; rtxcobj.c  398        void    TThread__TThread(struct TThread *this)
                       1872 ; rtxcobj.c  399        {
                       1873         ALIGN   1
                       1875         PUBLIC  _TThread__TThread
00061C                 1876 _TThread__TThread:
                       1882 ; rtxcobj.c  400         if(this->ID>0)
00061C 862C42          1884         MOV.B   ES,R1L
00061F 84401E          1885         MOV.B   R2L,[R0+30]
000622 862C42          1886         MOV.B   ES,R1L
000625 94041E00        1887         CMP.B   [R0+30],#00H
000629 FD04            1888         BLE     _68
                       1889 ; rtxcobj.c  401         {
                       1890 ; rtxcobj.c  402          KS_terminate(this->ID);
00062B 8104            1892         MOV.B   R0L,R2L
                       1893         CALL    _KS_terminate
00062D C4rrrrrr       +1893 ;       FCALL   _KS_terminate
                       1895 ; rtxcobj.c  403         }
000632                 1897 _68:
                       1898 ; rtxcobj.c  404        
                       1899 ; rtxcobj.c  405        }
000632 D680            1901         RET
                       1903 ; rtxcobj.c  406        
                       1904 ; rtxcobj.c  407        
                       1905 ; rtxcobj.c  408        void    TThread_Suspend(struct TThread *this, int Time)
                       1906 ; rtxcobj.c  409        {
                       1907         ALIGN   1
                       1909         PUBLIC  _TThread_Suspend
000634                 1910 _TThread_Suspend:
000634 0F30            1914         PUSH.W  R4, R5
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  20

ADDR   CODE            LINE SOURCELINE
                       1920 ; rtxcobj.c  410         if(this->ID>0)
000636 8951            1922         MOV.W   R5,R1
000638 8940            1923         MOV.W   R4,R0
00063A 9940001E        1924         ADD.W   R4,#01EH
00063E 862C42          1925         MOV.B   ES,R1L
000641 84601E          1926         MOV.B   R3L,[R0+30]
000644 862C42          1927         MOV.B   ES,R1L
000647 94041E00        1928         CMP.B   [R0+30],#00H
00064B FD12            1929         BLE     _72
                       1930 ; rtxcobj.c  411         {
                       1931 ; rtxcobj.c  412          if(Time<0)
00064D 99240000        1933         CMP.W   R2,#00H
000651 FA05            1934         BGE     _70
                       1935 ; rtxcobj.c  413          {
                       1936 ; rtxcobj.c  414           KS_suspend(this->ID);
000653 8106            1938         MOV.B   R0L,R3L
                       1939         CALL    _KS_suspend
000655 C4rrrrrr       +1939 ;       FCALL   _KS_suspend
                       1942 ; rtxcobj.c  415          }
000659 FE0B            1944         BR      _72
000659 FE0B00          1944         BR      _72
00065C                 1945 _70:
                       1947 ; rtxcobj.c  416          else
                       1948 ; rtxcobj.c  417          {
                       1949 ; rtxcobj.c  418           KS_delay(this->ID,Time/CLKTICK);
00065C 86AC42          1951         MOV.B   ES,R5L
00065F 8204            1952         MOV.B   R0L,[R4]
000661 8932            1953         MOV.W   R3,R2
000663 9839            1954         SEXT.W  R3
000665 E9290008        1955         DIV.D   R2,#08H
000669 8912            1957         MOV.W   R1,R2
                       1958         CALL    _KS_delay
00066B C4rrrrrr       +1958 ;       FCALL   _KS_delay
                       1959 ; rtxcobj.c  419          }
                       1960 ; rtxcobj.c  420         }
000670                 1962 _72:
                       1963 ; rtxcobj.c  421        }
000670 2F30            1965         POP.W   R4, R5
000672 D680            1967         RET
                       1969 ; rtxcobj.c  422        
                       1970 ; rtxcobj.c  423        
                       1971 ; rtxcobj.c  424        void    TThread_Resume(struct TThread *this)
                       1972 ; rtxcobj.c  425        {
                       1973         ALIGN   1
                       1975         PUBLIC  _TThread_Resume
000674                 1976 _TThread_Resume:
                       1982 ; rtxcobj.c  426         if(this->ID>0)
000674 862C42          1984         MOV.B   ES,R1L
000677 84401E          1985         MOV.B   R2L,[R0+30]
00067A 862C42          1986         MOV.B   ES,R1L
00067D 94041E00        1987         CMP.B   [R0+30],#00H
000681 FD04            1988         BLE     _75
                       1989 ; rtxcobj.c  427         {
                       1990 ; rtxcobj.c  428          KS_resume(this->ID);
000683 8104            1992         MOV.B   R0L,R2L
                       1993         CALL    _KS_resume
000685 C4rrrrrr       +1993 ;       FCALL   _KS_resume
                       1995 ; rtxcobj.c  429         }
00068A                 1997 _75:
                       1998 ; rtxcobj.c  430        }
00068A D680            2000         RET
                       2002 ; rtxcobj.c  431        
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  21

ADDR   CODE            LINE SOURCELINE
                       2003 ; rtxcobj.c  432        
                       2004 ; rtxcobj.c  433        int     TThread_GetPriority(struct TThread *this)
                       2005 ; rtxcobj.c  434        {
                       2006         ALIGN   1
                       2008         PUBLIC  _TThread_GetPriority
00068C                 2009 _TThread_GetPriority:
                       2015 ; rtxcobj.c  435         if(this->ID>0)
00068C 862C42          2017         MOV.B   ES,R1L
00068F 84401E          2018         MOV.B   R2L,[R0+30]
000692 862C42          2019         MOV.B   ES,R1L
000695 94041E00        2020         CMP.B   [R0+30],#00H
000699 FD07            2021         BLE     _77
                       2022 ; rtxcobj.c  436          return(KS_inqpriority(this->ID));
00069B 8104            2024         MOV.B   R0L,R2L
                       2025         CALL    _KS_inqpriority
00069D C4rrrrrr       +2025 ;       FCALL   _KS_inqpriority
0006A1 8100            2027         MOV.B   R0L,R0L
0006A3 9019            2028         SEXT.B  R0H
0006A5 D680            2029         RET
0006A5 D68000          2029         RET
0006A8                 2030 _77:
                       2031 ; rtxcobj.c  437         return(0);
0006A8 B900            2033         MOV.W   R0,#00H
                       2034 ; rtxcobj.c  438        }
0006AA                 2036 _78:
0006AA D680            2037         RET
                       2039 ; rtxcobj.c  439        
                       2040 ; rtxcobj.c  440        
                       2041 ; rtxcobj.c  441        void    TThread_SetPriority(struct TThread *this, int Prio)
                       2042 ; rtxcobj.c  442        {
                       2043         ALIGN   1
                       2045         PUBLIC  _TThread_SetPriority
0006AC                 2046 _TThread_SetPriority:
                       2054 ; rtxcobj.c  443         if(this->ID>0)
0006AC 862C42          2056         MOV.B   ES,R1L
0006AF 84601E          2057         MOV.B   R3L,[R0+30]
0006B2 862C42          2058         MOV.B   ES,R1L
0006B5 94041E00        2059         CMP.B   [R0+30],#00H
0006B9 FD05            2060         BLE     _80
                       2062 ; rtxcobj.c  444          KS_defpriority(this->ID,Prio);
0006BB 8114            2064         MOV.B   R0H,R2L
0006BD 8106            2065         MOV.B   R0L,R3L
                       2066         CALL    _KS_defpriority
0006BF C4rrrrrr       +2066 ;       FCALL   _KS_defpriority
0006C4                 2068 _80:
                       2069 ; rtxcobj.c  445        }
0006C4 D680            2071         RET
                       2074 ; rtxcobj.c  446        
                       2075 ; rtxcobj.c  447        
                       2076 ; rtxcobj.c  448        TThread         TThreadPartition[DNTASKS];
                       2077 ; rtxcobj.c  449        MAP             TThreadMap=0;
000002                 2078         RSEG    RTXCOBJ_INI_FA
                       2081         PUBLIC  _TThreadMap
000002                 2082 _TThreadMap:
                       2083 ; rtxcobj.c  450        
                       2084 ; rtxcobj.c  451        
                       2085 ; rtxcobj.c  452        
                       2086 ; rtxcobj.c  453        TThread *newTThread(int Priority, void (*entry)(void))
                       2087 ; rtxcobj.c  454        {
000002 00              2088         DB      000H
0006C6                 2089         RSEG    RTXCOBJ_PR
                       2090         ALIGN   1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  22

ADDR   CODE            LINE SOURCELINE
                       2092         PUBLIC  _newTThread
0006C6                 2093 _newTThread:
0006C6 0F70            2102         PUSH.W  R4, R5, R6
0006C8 A978            2104         ADDS.W  R7,#08H
0006CA 8C3F06          2108         MOV.W   [R7+6],R3
0006CD 8C2F04          2109         MOV.W   [R7+4],R2
0006D0 8960            2112         MOV.W   R6,R0
                       2122 ; rtxcobj.c  455        
                       2123 ; rtxcobj.c  456        /* VAR */
                       2124 ; rtxcobj.c  457         TThread *Thread;
                       2125 ; rtxcobj.c  458        
                       2126 ; rtxcobj.c  459        /* BEGIN */
                       2127 ; rtxcobj.c  460         if(TThreadMap==0)
0006D2 964842rr        2129         MOV.B   ES,#SEG( _TThreadMap )
0006D6 9908rrrr        2130         MOV.W   R0,#SOF( _TThreadMap )
0006DA 8200            2131         MOV.B   R0L,[R0]
0006DC F214            2132         BNE     _83
                       2133 ; rtxcobj.c  461         {
                       2134 ; rtxcobj.c  462          TThreadMap=KS_create_part(&TThreadPartition,sizeof(struct TThread),DNTA
                            SKS);  /* Create stack map */
0006DE 9918rrrr        2136         MOV.W   R1,#SEG( _TThreadPartition )
0006E2 9908rrrr        2137         MOV.W   R0,#SOF( _TThreadPartition )
0006E6 99280024        2138         MOV.W   R2,#024H
0006EA 99380020        2139         MOV.W   R3,#020H
                       2140         CALL    _KS_create_part
0006EE C4rrrrrr       +2140 ;       FCALL   _KS_create_part
0006F2 964842rr        2141         MOV.B   ES,#SEG( _TThreadMap )
0006F6 9918rrrr        2142         MOV.W   R1,#SOF( _TThreadMap )
0006FA 8209            2143         MOV.B   [R1],R0L
                       2144 ; rtxcobj.c  463          if(TThreadMap==0)
0006FC 6100            2146         OR.B    R0L,R0L
0006FE F203            2147         BNE     _83
                       2148 ; rtxcobj.c  464           return(0);
000700 B910            2150         MOV.W   R1,#00H
000702 B900            2151         MOV.W   R0,#00H
000704 FE7F            2152         BR      _88
                       2153 ; rtxcobj.c  465         }
000706                 2155 _83:
                       2160 ; rtxcobj.c  466         Thread=KS_alloc(TThreadMap);
000706 964842rr        2162         MOV.B   ES,#SEG( _TThreadMap )
00070A 9908rrrr        2163         MOV.W   R0,#SOF( _TThreadMap )
00070E 8200            2164         MOV.B   R0L,[R0]
                       2165         CALL    _KS_alloc
000710 C4rrrrrr       +2165 ;       FCALL   _KS_alloc
                       2167 ; rtxcobj.c  467         if(Thread==(void *)0)
000714 8931            2169         MOV.W   R3,R1
000716 8920            2170         MOV.W   R2,R0
000718 6910            2171         OR.W    R1,R0
00071A F203            2174         BNE     _84
                       2175 ; rtxcobj.c  468         {
                       2176 ; rtxcobj.c  469        //  LogEvent(EventNoMoreThreads,0);
                       2177 ; rtxcobj.c  470          return(0);    
00071C B910            2179         MOV.W   R1,#00H
00071E B900            2180         MOV.W   R0,#00H
000720 FE71            2181         BR      _88
                       2182 ; rtxcobj.c  471         }
000722                 2184 _84:
                       2191 ; rtxcobj.c  472         Thread->TThread=TThread_TThread;
000722 8913            2193         MOV.W   R1,R3
000724 8902            2194         MOV.W   R0,R2
000726 99000002        2195         ADD.W   R0,#02H
00072A 862C42          2196         MOV.B   ES,R1L
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  23

ADDR   CODE            LINE SOURCELINE
00072D 9A08rrrr        2197         MOV.W   [R0],#SOF( _TThread_TThread )
000731 9D080002rrrr    2198         MOV.W   [R0+2],#SEG( _TThread_TThread )
                       2199 ; rtxcobj.c  473         Thread->Execute=TThread_Execute;
000737 8953            2201         MOV.W   R5,R3
000739 8942            2202         MOV.W   R4,R2
00073B 99400006        2203         ADD.W   R4,#06H
00073F 86AC42          2204         MOV.B   ES,R5L
000742 9A48rrrr        2205         MOV.W   [R4],#SOF( _TThread_Execute )
000746 9D480002rrrr    2206         MOV.W   [R4+2],#SEG( _TThread_Execute )
                       2207 ; rtxcobj.c  474         Thread->Terminate=TThread__TThread;
00074C 8953            2209         MOV.W   R5,R3
00074E 8942            2210         MOV.W   R4,R2
000750 9940000A        2211         ADD.W   R4,#0AH
000754 86AC42          2212         MOV.B   ES,R5L
000757 9A48rrrr        2213         MOV.W   [R4],#SOF( _TThread__TThread )
00075B 9D480002rrrr    2214         MOV.W   [R4+2],#SEG( _TThread__TThread )
                       2215 ; rtxcobj.c  475         Thread->Suspend=TThread_Suspend;
000761 8953            2217         MOV.W   R5,R3
000763 8942            2218         MOV.W   R4,R2
000765 9940000E        2219         ADD.W   R4,#0EH
000769 86AC42          2220         MOV.B   ES,R5L
00076C 9A48rrrr        2221         MOV.W   [R4],#SOF( _TThread_Suspend )
000770 9D480002rrrr    2222         MOV.W   [R4+2],#SEG( _TThread_Suspend )
                       2223 ; rtxcobj.c  476         Thread->Resume=TThread_Resume;
000776 8953            2225         MOV.W   R5,R3
000778 8942            2226         MOV.W   R4,R2
00077A 99400012        2227         ADD.W   R4,#012H
00077E 86AC42          2228         MOV.B   ES,R5L
000781 9A48rrrr        2229         MOV.W   [R4],#SOF( _TThread_Resume )
000785 9D480002rrrr    2230         MOV.W   [R4+2],#SEG( _TThread_Resume )
                       2231 ; rtxcobj.c  477         Thread->GetPriority=TThread_GetPriority;
00078B 8953            2233         MOV.W   R5,R3
00078D 8942            2234         MOV.W   R4,R2
00078F 99400016        2235         ADD.W   R4,#016H
000793 86AC42          2236         MOV.B   ES,R5L
000796 9A48rrrr        2237         MOV.W   [R4],#SOF( _TThread_GetPriority )
00079A 9D480002rrrr    2238         MOV.W   [R4+2],#SEG( _TThread_GetPriority )
                       2239 ; rtxcobj.c  478         Thread->SetPriority=TThread_SetPriority;
0007A0 8953            2241         MOV.W   R5,R3
0007A2 8942            2242         MOV.W   R4,R2
0007A4 9940001A        2243         ADD.W   R4,#01AH
0007A8 86AC42          2244         MOV.B   ES,R5L
0007AB 9A48rrrr        2245         MOV.W   [R4],#SOF( _TThread_SetPriority )
0007AF 9D480002rrrr    2246         MOV.W   [R4+2],#SEG( _TThread_SetPriority )
                       2247 ; rtxcobj.c  479         Thread->TThread(Thread,Priority,entry);
0007B5 862C42          2249         MOV.B   ES,R1L
0007B8 8A40            2250         MOV.W   R4,[R0]
0007BA 8C5002          2251         MOV.W   R5,[R0+2]
0007BD 8C1706          2252         MOV.W   R1,[R7+6]
0007C0 8C0704          2253         MOV.W   R0,[R7+4]
0007C3 0F03            2256         PUSH.W  R0, R1
0007C5 8C3F06          2259         MOV.W   [R7+6],R3
0007C8 8C2F04          2260         MOV.W   [R7+4],R2
0007CB 8913            2261         MOV.W   R1,R3
0007CD 8902            2262         MOV.W   R0,R2
0007CF 8926            2267         MOV.W   R2,R6
0007D1 C4rrrrrr        2268         FCALL   __ICALL
0007D5 A974            2269         ADDS.W  R7,#04H
                       2276 ; rtxcobj.c  480         if(Thread->ID==0)
0007D7 8C1702          2278         MOV.W   R1,[R7+2]
0007DA 8A07            2279         MOV.W   R0,[R7]
0007DC 862C42          2280         MOV.B   ES,R1L
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  24

ADDR   CODE            LINE SOURCELINE
0007DF 84001E          2281         MOV.B   R0L,[R0+30]
0007E2 F20D            2282         BNE     _85
                       2283 ; rtxcobj.c  481         {
                       2284 ; rtxcobj.c  482          KS_free(TThreadMap,Thread);
0007E4 964842rr        2286         MOV.B   ES,#SEG( _TThreadMap )
0007E8 9908rrrr        2287         MOV.W   R0,#SOF( _TThreadMap )
0007EC 8200            2288         MOV.B   R0L,[R0]
0007EE 8C3702          2289         MOV.W   R3,[R7+2]
0007F1 8A27            2290         MOV.W   R2,[R7]
                       2291         CALL    _KS_free
0007F3 C4rrrrrr       +2291 ;       FCALL   _KS_free
                       2295 ; rtxcobj.c  483          return(0);
0007F7 B910            2297         MOV.W   R1,#00H
0007F9 B900            2298         MOV.W   R0,#00H
0007FB FE04            2299         BR      _88
                       2300 ; rtxcobj.c  484         }
0007FE                 2302 _85:
                       2304 ; rtxcobj.c  485         return(Thread);
0007FE 8C1702          2306         MOV.W   R1,[R7+2]
000801 8A07            2307         MOV.W   R0,[R7]
                       2310 ; rtxcobj.c  486        }
000804                 2312 _88:
000804 99700008        2313         ADD.W   R7,#08H
000808 2F70            2315         POP.W   R4, R5, R6
00080A D680            2317         RET
                       2320 ; rtxcobj.c  487        
                       2321 ; rtxcobj.c  488        
                       2322 ; rtxcobj.c  489        void deleteTThread(TThread *Thread)
                       2323 ; rtxcobj.c  490        {
                       2324         ALIGN   1
                       2326         PUBLIC  _deleteTThread
00080C                 2327 _deleteTThread:
00080C 0F30            2331         PUSH.W  R4, R5
00080E A97C            2333         ADDS.W  R7,#0CH
                       2337 ; rtxcobj.c  491         Thread->Terminate(Thread);
000810 862C42          2339         MOV.B   ES,R1L
000813 8C400A          2340         MOV.W   R4,[R0+10]
000816 8C500C          2341         MOV.W   R5,[R0+12]
000819 8C1F02          2342         MOV.W   [R7+2],R1
00081C 8A0F            2343         MOV.W   [R7],R0
00081E C4rrrrrr        2348         FCALL   __ICALL
                       2351 ; rtxcobj.c  492         KS_free(TThreadMap,Thread);
000822 964842rr        2353         MOV.B   ES,#SEG( _TThreadMap )
000826 9908rrrr        2354         MOV.W   R0,#SOF( _TThreadMap )
00082A 8200            2355         MOV.B   R0L,[R0]
00082C 8C3702          2356         MOV.W   R3,[R7+2]
00082F 8A27            2357         MOV.W   R2,[R7]
                       2358         CALL    _KS_free
000831 C4rrrrrr       +2358 ;       FCALL   _KS_free
                       2362 ; rtxcobj.c  493        }
000835 A974            2364         ADDS.W  R7,#04H
000837 2F30            2366         POP.W   R4, R5
000839 D680            2368         RET
                       2370 ; rtxcobj.c  494        
                       2371 ; rtxcobj.c  495        
                       2372 ; rtxcobj.c  496        
                       2373 ; rtxcobj.c  497        
                       2374 ; rtxcobj.c  498        /********** TTimer Object **************/
                       2375 ; rtxcobj.c  499        typedef struct TTimer {
                       2376 ; rtxcobj.c  500          /* Public: */
                       2377 ; rtxcobj.c  501                int     ObjectID;
                       2378 ; rtxcobj.c  502                void    (*TTimer)(struct TTimer *this);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  25

ADDR   CODE            LINE SOURCELINE
                       2379 ; rtxcobj.c  503                void    (*_TTimer)(struct TTimer *this);
                       2380 ; rtxcobj.c  504                void    (*SetPeriod)(struct TTimer *this, int Time);
                       2381 ; rtxcobj.c  505                int     (*GetPeriod)(struct TTimer *this);
                       2382 ; rtxcobj.c  506                void    (*Tick)(struct TTimer *this, int Time);
                       2383 ; rtxcobj.c  507                TEvent  *TimeOut;
                       2384 ; rtxcobj.c  508          /* Private: */
                       2385 ; rtxcobj.c  509                short   Period;
                       2386 ; rtxcobj.c  510                CLKBLK  *Handle;
                       2387 ; rtxcobj.c  511        
                       2388 ; rtxcobj.c  512        } TTimer;
                       2389 ; rtxcobj.c  513          
                       2390 ; rtxcobj.c  514        
                       2391 ; rtxcobj.c  515        void TTimer_TTimer(struct TTimer *this)
                       2392 ; rtxcobj.c  516        {
00083B 00              2393         ALIGN   1
                       2395         PUBLIC  _TTimer_TTimer
00083C                 2396 _TTimer_TTimer:
00083C 0F30            2429         PUSH.W  R4, R5
                       2433 ; rtxcobj.c  517         if(this>(void *)0)
00083E 8951            2435         MOV.W   R5,R1
000840 8940            2436         MOV.W   R4,R0
000842 99540000        2437         CMP.W   R5,#00H
000846 F202            2438         BNE     _90
000848 99440000        2439         CMP.W   R4,#00H
000848 99440000        2439         CMP.W   R4,#00H
00084C                 2440 _90:
00084C F914            2443         BL      _89
                       2444 ; rtxcobj.c  518         { 
                       2445 ; rtxcobj.c  519          this->Handle=KS_alloc_timer();
                       2447         CALL    _KS_alloc_timer
00084E C4rrrrrr       +2447 ;       FCALL   _KS_alloc_timer
000852 86AC42          2448         MOV.B   ES,R5L
000855 8C0C1C          2449         MOV.W   [R4+28],R0
000858 8C1C1E          2450         MOV.W   [R4+30],R1
                       2451 ; rtxcobj.c  520          this->TimeOut=newTEvent(0);
00085B B910            2453         MOV.W   R1,#00H
00085D B900            2454         MOV.W   R0,#00H
00085F C5FCE8          2455         CALL    _newTEvent
000862 86AC42          2456         MOV.B   ES,R5L
000865 8C0C16          2457         MOV.W   [R4+22],R0
000868 8C1C18          2458         MOV.W   [R4+24],R1
                       2459 ; rtxcobj.c  521          this->Period=0;
00086B 86AC42          2461         MOV.B   ES,R5L
00086E BC401A          2462         MOV.W   [R4+26],#00H
                       2463 ; rtxcobj.c  522          this->ObjectID=TTimerID;
000871 86AC42          2465         MOV.B   ES,R5L
000874 BA43            2466         MOV.W   [R4],#03H
                       2467 ; rtxcobj.c  523         }
000876                 2469 _89:
                       2470 ; rtxcobj.c  524        }
000876 2F30            2472         POP.W   R4, R5
000878 D680            2474         RET
                       2477 ; rtxcobj.c  525        
                       2478 ; rtxcobj.c  526        
                       2479 ; rtxcobj.c  527        void TTimer__TTimer(struct TTimer *this)
                       2480 ; rtxcobj.c  528        {
                       2481         ALIGN   1
                       2483         PUBLIC  _TTimer__TTimer
00087A                 2484 _TTimer__TTimer:
00087A 0F30            2488         PUSH.W  R4, R5
                       2492 ; rtxcobj.c  529         if(this>(void *)0)
00087C 8951            2494         MOV.W   R5,R1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  26

ADDR   CODE            LINE SOURCELINE
00087E 8940            2495         MOV.W   R4,R0
000880 99540000        2496         CMP.W   R5,#00H
000884 F202            2497         BNE     _92
000886 99440000        2498         CMP.W   R4,#00H
000886 99440000        2498         CMP.W   R4,#00H
00088A                 2499 _92:
00088A F90D            2502         BL      _91
                       2503 ; rtxcobj.c  530         { 
                       2504 ; rtxcobj.c  531          deleteTEvent(this->TimeOut);
00088C 86AC42          2506         MOV.B   ES,R5L
00088F 8C0416          2507         MOV.W   R0,[R4+22]
000892 8C1418          2508         MOV.W   R1,[R4+24]
000895 C5FD61          2509         CALL    _deleteTEvent
                       2510 ; rtxcobj.c  532          KS_free_timer(this->Handle);
000898 86AC42          2512         MOV.B   ES,R5L
00089B 8C041C          2513         MOV.W   R0,[R4+28]
00089E 8C141E          2514         MOV.W   R1,[R4+30]
                       2515         CALL    _KS_free_timer
0008A1 C4rrrrrr       +2515 ;       FCALL   _KS_free_timer
                       2516 ; rtxcobj.c  533         }
0008A6                 2518 _91:
                       2519 ; rtxcobj.c  534        }
0008A6 2F30            2521         POP.W   R4, R5
0008A8 D680            2523         RET
                       2526 ; rtxcobj.c  535        
                       2527 ; rtxcobj.c  536        
                       2528 ; rtxcobj.c  537        void TTimer_SetPeriod(struct TTimer *this, int Time)
                       2529 ; rtxcobj.c  538        {
                       2530         ALIGN   1
                       2532         PUBLIC  _TTimer_SetPeriod
0008AA                 2533 _TTimer_SetPeriod:
0008AA 0F70            2537         PUSH.W  R4, R5, R6
0008AC A97A            2539         ADDS.W  R7,#0AH
0008AE 8C2F04          2543         MOV.W   [R7+4],R2
                       2548 ; rtxcobj.c  539         if(this->Period==0)
0008B1 8951            2550         MOV.W   R5,R1
0008B3 8940            2551         MOV.W   R4,R0
0008B5 9940001A        2552         ADD.W   R4,#01AH
0008B9 862C42          2553         MOV.B   ES,R1L
0008BC 8C201A          2554         MOV.W   R2,[R0+26]
0008BF F21F            2555         BNE     _93
                       2556 ; rtxcobj.c  540         {
                       2557 ; rtxcobj.c  541          if(Time!=0)
0008C1 8C2704          2559         MOV.W   R2,[R7+4]
0008C4 F334            2560         BEQ     _97
                       2561 ; rtxcobj.c  542          {
                       2562 ; rtxcobj.c  543           KS_start_timer(this->Handle,(TICKS)Time/CLKTICK,
                       2563 ; rtxcobj.c  544                         (TICKS)Time/CLKTICK,this->TimeOut->ID);        /* start 
                            cyclic timer */
0008C6 862C42          2565         MOV.B   ES,R1L
0008C9 8C201C          2566         MOV.W   R2,[R0+28]
0008CC 8C301E          2567         MOV.W   R3,[R0+30]
0008CF 8C3F02          2568         MOV.W   [R7+2],R3
0008D2 8A2F            2569         MOV.W   [R7],R2
0008D4 8C2704          2570         MOV.W   R2,[R7+4]
0008D7 8932            2571         MOV.W   R3,R2
0008D9 9839            2572         SEXT.W  R3
0008DB E9290008        2573         DIV.D   R2,#08H
0008DF 862C42          2574         MOV.B   ES,R1L
0008E2 8C1018          2575         MOV.W   R1,[R0+24]
0008E5 8C0016          2576         MOV.W   R0,[R0+22]
0008E8 862C42          2578         MOV.B   ES,R1L
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  27

ADDR   CODE            LINE SOURCELINE
0008EB 84C01A          2579         MOV.B   R6L,[R0+26]
0008EE 8932            2580         MOV.W   R3,R2
0008F0 8923            2581         MOV.W   R2,R3
0008F2 8C1702          2582         MOV.W   R1,[R7+2]
0008F5 8A07            2583         MOV.W   R0,[R7]
                       2584         CALL    _KS_start_timer
0008F7 C4rrrrrr       +2584 ;       FCALL   _KS_start_timer
                       2585 ; rtxcobj.c  545          }
                       2586 ; rtxcobj.c  546         }
0008FB FE19            2588         BR      _97
0008FB FE1900          2588         BR      _97
0008FE                 2589 _93:
                       2591 ; rtxcobj.c  547         else
                       2592 ; rtxcobj.c  548         {
                       2593 ; rtxcobj.c  549          if(Time==0)
0008FE 8C2704          2595         MOV.W   R2,[R7+4]
000901 F208            2596         BNE     _94
                       2597 ; rtxcobj.c  550          {
                       2598 ; rtxcobj.c  551           KS_stop_timer(this->Handle);
000903 862C42          2600         MOV.B   ES,R1L
000906 8C101E          2601         MOV.W   R1,[R0+30]
000909 8C001C          2602         MOV.W   R0,[R0+28]
                       2604         CALL    _KS_stop_timer
00090C C4rrrrrr       +2604 ;       FCALL   _KS_stop_timer
                       2605 ; rtxcobj.c  552          }
000910 FE0E            2607         BR      _97
000910 FE0E            2607         BR      _97
000912                 2608 _94:
                       2610 ; rtxcobj.c  553          else                                                  /* stop cyclic ti
                            mer */
                       2611 ; rtxcobj.c  554          { 
                       2612 ; rtxcobj.c  555           KS_restart_timer(this->Handle,(TICKS)Time/CLKTICK,
                       2613 ; rtxcobj.c  556                            (TICKS)Time/CLKTICK);               /* restart cyclic
                             timer */
000912 862C42          2615         MOV.B   ES,R1L
000915 8C101E          2616         MOV.W   R1,[R0+30]
000918 8C001C          2617         MOV.W   R0,[R0+28]
00091B 8C2704          2619         MOV.W   R2,[R7+4]
00091E 8932            2620         MOV.W   R3,R2
000920 9839            2621         SEXT.W  R3
000922 E9290008        2622         DIV.D   R2,#08H
000926 8932            2623         MOV.W   R3,R2
000928 8923            2624         MOV.W   R2,R3
                       2625         CALL    _KS_restart_timer
00092A C4rrrrrr       +2625 ;       FCALL   _KS_restart_timer
                       2626 ; rtxcobj.c  557          }
                       2627 ; rtxcobj.c  558         }
00092E                 2629 _97:
                       2630 ; rtxcobj.c  559         this->Period=Time;
00092E 8C0704          2632         MOV.W   R0,[R7+4]
000931 86AC42          2633         MOV.B   ES,R5L
000934 8A0C            2634         MOV.W   [R4],R0
                       2637 ; rtxcobj.c  560        }
000936 A976            2639         ADDS.W  R7,#06H
000938 2F70            2641         POP.W   R4, R5, R6
00093A D680            2643         RET
                       2646 ; rtxcobj.c  561        
                       2647 ; rtxcobj.c  562        
                       2648 ; rtxcobj.c  563        
                       2649 ; rtxcobj.c  564        int TTimer_GetPeriod(struct TTimer *this)
                       2650 ; rtxcobj.c  565        {
                       2651         ALIGN   1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  28

ADDR   CODE            LINE SOURCELINE
                       2653         PUBLIC  _TTimer_GetPeriod
00093C                 2654 _TTimer_GetPeriod:
                       2660 ; rtxcobj.c  566         return(this->Period);
00093C 862C42          2662         MOV.B   ES,R1L
00093F 8C001A          2663         MOV.W   R0,[R0+26]
                       2665 ; rtxcobj.c  567        }
000942 D680            2667         RET
                       2669 ; rtxcobj.c  568        
                       2670 ; rtxcobj.c  569        
                       2671 ; rtxcobj.c  570        
                       2672 ; rtxcobj.c  571        void TTimer_Tick(struct TTimer *this, int Time)
                       2673 ; rtxcobj.c  572        {
                       2674         ALIGN   1
                       2676         PUBLIC  _TTimer_Tick
000944                 2677 _TTimer_Tick:
000944 0F70            2681         PUSH.W  R4, R5, R6
000946 A97C            2683         ADDS.W  R7,#0CH
                       2689 ; rtxcobj.c  573         if(this->Period==0)
000948 8951            2691         MOV.W   R5,R1
00094A 8940            2692         MOV.W   R4,R0
00094C 9940001A        2693         ADD.W   R4,#01AH
000950 862C42          2694         MOV.B   ES,R1L
000953 8C301A          2695         MOV.W   R3,[R0+26]
000956 F21B            2696         BNE     _98
                       2697 ; rtxcobj.c  574         {
                       2698 ; rtxcobj.c  575        //  this->TimeOut->Set(this->TimeOut);  /* signal update */
                       2699 ; rtxcobj.c  576          KS_start_timer(this->Handle,(TICKS)Time/CLKTICK,0,this->TimeOut->ID);
000958 862C42          2701         MOV.B   ES,R1L
00095B 8C401C          2702         MOV.W   R4,[R0+28]
00095E 8C501E          2703         MOV.W   R5,[R0+30]
000961 8C5F02          2704         MOV.W   [R7+2],R5
000964 8A4F            2705         MOV.W   [R7],R4
000966 8942            2706         MOV.W   R4,R2
000968 8954            2707         MOV.W   R5,R4
00096A 9859            2708         SEXT.W  R5
00096C E9490008        2709         DIV.D   R4,#08H
000970 B930            2713         MOV.W   R3,#00H
000972 862C42          2714         MOV.B   ES,R1L
000975 8C1018          2715         MOV.W   R1,[R0+24]
000978 8C0016          2716         MOV.W   R0,[R0+22]
00097B 862C42          2718         MOV.B   ES,R1L
00097E 84C01A          2719         MOV.B   R6L,[R0+26]
000981 8924            2720         MOV.W   R2,R4
000983 8C1702          2721         MOV.W   R1,[R7+2]
000986 8A07            2722         MOV.W   R0,[R7]
                       2723         CALL    _KS_start_timer
000988 C4rrrrrr       +2723 ;       FCALL   _KS_start_timer
                       2724 ; rtxcobj.c  577                                                     /* single shot timeout */
                       2725 ; rtxcobj.c  578         }
00098C FE19            2727         BR      _99
00098C FE19            2727         BR      _99
00098E                 2728 _98:
                       2731 ; rtxcobj.c  579         else
                       2732 ; rtxcobj.c  580         {
                       2733 ; rtxcobj.c  581          KS_restart_timer(this->Handle,(TICKS)Time/CLKTICK,
                       2734 ; rtxcobj.c  582                          (TICKS)(this->Period)/CLKTICK);   /* restart cyclic tim
                            er */
00098E 862C42          2736         MOV.B   ES,R1L
000991 8C101E          2737         MOV.W   R1,[R0+30]
000994 8C001C          2738         MOV.W   R0,[R0+28]
000997 8C1F02          2740         MOV.W   [R7+2],R1
00099A 8A0F            2741         MOV.W   [R7],R0
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  29

ADDR   CODE            LINE SOURCELINE
00099C 8902            2742         MOV.W   R0,R2
00099E 8910            2743         MOV.W   R1,R0
0009A0 9819            2744         SEXT.W  R1
0009A2 E9090008        2745         DIV.D   R0,#08H
0009A6 86AC42          2749         MOV.B   ES,R5L
0009A9 8A24            2750         MOV.W   R2,[R4]
0009AB 8932            2751         MOV.W   R3,R2
0009AD 9839            2752         SEXT.W  R3
0009AF E9290008        2753         DIV.D   R2,#08H
0009B3 8932            2754         MOV.W   R3,R2
0009B5 8920            2755         MOV.W   R2,R0
0009B7 8C1702          2756         MOV.W   R1,[R7+2]
0009BA 8A07            2757         MOV.W   R0,[R7]
                       2758         CALL    _KS_restart_timer
0009BC C4rrrrrr       +2758 ;       FCALL   _KS_restart_timer
                       2759 ; rtxcobj.c  583         }
0009C0                 2761 _99:
                       2762 ; rtxcobj.c  584        }
0009C0 A974            2764         ADDS.W  R7,#04H
0009C2 2F70            2766         POP.W   R4, R5, R6
0009C4 D680            2768         RET
                       2770 ; rtxcobj.c  585        
                       2771 ; rtxcobj.c  586        
                       2772 ; rtxcobj.c  587        //static void Timer_RealThread(void);
                       2773 ; rtxcobj.c  588        
                       2774 ; rtxcobj.c  589        
                       2775 ; rtxcobj.c  590        //int Timer_Thread_Create(void * Timer,int Priority, void (far *entry)(vo
                            id))
                       2776 ; rtxcobj.c  591        //{
                       2777 ; rtxcobj.c  592        
                       2778 ; rtxcobj.c  593        /* VAR */
                       2779 ; rtxcobj.c  594        
                       2780 ; rtxcobj.c  595        /* BEGIN */
                       2781 ; rtxcobj.c  596        // ((struct TimerObject *)Timer)->Thread=Thread_Create(Priority,Timer_Rea
                            lThread);
                       2782 ; rtxcobj.c  597        // if(((struct TimerObject *)Timer)->Thread==0)
                       2783 ; rtxcobj.c  598        //  return(0);
                       2784 ; rtxcobj.c  599        // ((struct TimerObject *)Timer)->TimeOutFunc=entry;
                       2785 ; rtxcobj.c  600        // KS_deftask_arg(((struct TimerObject *)Timer)->Thread->Num,Timer);
                       2786 ; rtxcobj.c  601        // Thread_Execute(((struct TimerObject *)Timer)->Thread);
                       2787 ; rtxcobj.c  602        // return(-1);
                       2788 ; rtxcobj.c  603        //}
                       2789 ; rtxcobj.c  604        
                       2790 ; rtxcobj.c  605        
                       2791 ; rtxcobj.c  606        
                       2792 ; rtxcobj.c  607        //static void Timer_RealThread(void)
                       2793 ; rtxcobj.c  608        //{
                       2794 ; rtxcobj.c  609         /* VAR */
                       2795 ; rtxcobj.c  610        
                       2796 ; rtxcobj.c  611         /* BEGIN */
                       2797 ; rtxcobj.c  612        // for(;;)
                       2798 ; rtxcobj.c  613        // {
                       2799 ; rtxcobj.c  614        //  KS_wait(((struct TimerObject *)KS_inqtask_arg(0))->TimeOutEvent);
                       2800 ; rtxcobj.c  615        
                       2801 ; rtxcobj.c  616        //  ((struct TimerObject *)KS_inqtask_arg(0))->TimeOutFunc();
                       2802 ; rtxcobj.c  617        // } /* END for */
                       2803 ; rtxcobj.c  618        //} /* END task */
                       2804 ; rtxcobj.c  619        
                       2805 ; rtxcobj.c  620        
                       2806 ; rtxcobj.c  621        
                       2807 ; rtxcobj.c  622        static MAP TTimerMap=0;
000003                 2808         RSEG    RTXCOBJ_INI_FA
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  30

ADDR   CODE            LINE SOURCELINE
000003                 2810 _TTimerMap:
                       2812 ; rtxcobj.c  623        static TTimer TTimerPartition[NTMRS];
                       2813 ; rtxcobj.c  624        
                       2814 ; rtxcobj.c  625        
                       2815 ; rtxcobj.c  626        
                       2816 ; rtxcobj.c  627        TTimer *newTTimer(void)
                       2817 ; rtxcobj.c  628        {
000003 00              2818         DB      000H
0009C6                 2819         RSEG    RTXCOBJ_PR
                       2820         ALIGN   1
                       2822         PUBLIC  _newTTimer
0009C6                 2823 _newTTimer:
0009C6 0F30            2829         PUSH.W  R4, R5
0009C8 A97C            2831         ADDS.W  R7,#0CH
                       2835 ; rtxcobj.c  629         
                       2836 ; rtxcobj.c  630        /* VAR */
                       2837 ; rtxcobj.c  631         TTimer *Timer;
                       2838 ; rtxcobj.c  632        
                       2839 ; rtxcobj.c  633        /* BEGIN */
                       2840 ; rtxcobj.c  634         if(TTimerMap==0)
0009CA 964842rr        2842         MOV.B   ES,#SEG( _TTimerMap )
0009CE 9908rrrr        2843         MOV.W   R0,#SOF( _TTimerMap )
0009D2 8200            2844         MOV.B   R0L,[R0]
0009D4 F213            2845         BNE     _101
                       2846 ; rtxcobj.c  635         {
                       2847 ; rtxcobj.c  636          TTimerMap=KS_create_part(&TTimerPartition,sizeof(struct TTimer),NTMRS);
                              /* Create Timer map */
0009D6 9918rrrr        2849         MOV.W   R1,#SEG( _TTimerPartition )
0009DA 9908rrrr        2850         MOV.W   R0,#SOF( _TTimerPartition )
0009DE 99380020        2851         MOV.W   R3,#020H
0009E2 8923            2852         MOV.W   R2,R3
                       2853         CALL    _KS_create_part
0009E4 C4rrrrrr       +2853 ;       FCALL   _KS_create_part
0009E8 964842rr        2854         MOV.B   ES,#SEG( _TTimerMap )
0009EC 9918rrrr        2855         MOV.W   R1,#SOF( _TTimerMap )
0009F0 8209            2856         MOV.B   [R1],R0L
                       2857 ; rtxcobj.c  637          if(TTimerMap==0)
0009F2 6100            2859         OR.B    R0L,R0L
0009F4 F203            2860         BNE     _101
                       2861 ; rtxcobj.c  638           return(0);
0009F6 B910            2863         MOV.W   R1,#00H
0009F8 B900            2864         MOV.W   R0,#00H
0009FA FE66            2865         BR      _106
                       2866 ; rtxcobj.c  639         }
0009FC                 2868 _101:
                       2869 ; rtxcobj.c  640         Timer=KS_alloc(TTimerMap);
0009FC 964842rr        2871         MOV.B   ES,#SEG( _TTimerMap )
000A00 9908rrrr        2872         MOV.W   R0,#SOF( _TTimerMap )
000A04 8200            2873         MOV.B   R0L,[R0]
                       2874         CALL    _KS_alloc
000A06 C4rrrrrr       +2874 ;       FCALL   _KS_alloc
                       2876 ; rtxcobj.c  641         if(Timer==(void *)0)
000A0A 8931            2878         MOV.W   R3,R1
000A0C 8920            2879         MOV.W   R2,R0
000A0E 6910            2880         OR.W    R1,R0
000A10 F203            2883         BNE     _102
                       2884 ; rtxcobj.c  642         {
                       2885 ; rtxcobj.c  643        //  LogEvent(EventNoMoreTimers,0);
                       2886 ; rtxcobj.c  644          return(0);    
000A12 B910            2888         MOV.W   R1,#00H
000A14 B900            2889         MOV.W   R0,#00H
000A16 FE58            2890         BR      _106
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  31

ADDR   CODE            LINE SOURCELINE
                       2891 ; rtxcobj.c  645         }
000A18                 2893 _102:
                       2896 ; rtxcobj.c  646         Timer->TTimer=TTimer_TTimer;
000A18 8913            2898         MOV.W   R1,R3
000A1A 8902            2899         MOV.W   R0,R2
000A1C 99000002        2900         ADD.W   R0,#02H
000A20 862C42          2901         MOV.B   ES,R1L
000A23 9A08rrrr        2902         MOV.W   [R0],#SOF( _TTimer_TTimer )
000A27 9D080002rrrr    2903         MOV.W   [R0+2],#SEG( _TTimer_TTimer )
                       2904 ; rtxcobj.c  647         Timer->_TTimer=TTimer__TTimer;
000A2D 8953            2906         MOV.W   R5,R3
000A2F 8942            2907         MOV.W   R4,R2
000A31 99400006        2908         ADD.W   R4,#06H
000A35 86AC42          2909         MOV.B   ES,R5L
000A38 9A48rrrr        2910         MOV.W   [R4],#SOF( _TTimer__TTimer )
000A3C 9D480002rrrr    2911         MOV.W   [R4+2],#SEG( _TTimer__TTimer )
                       2912 ; rtxcobj.c  648         Timer->SetPeriod=TTimer_SetPeriod;
000A42 8953            2914         MOV.W   R5,R3
000A44 8942            2915         MOV.W   R4,R2
000A46 9940000A        2916         ADD.W   R4,#0AH
000A4A 86AC42          2917         MOV.B   ES,R5L
000A4D 9A48rrrr        2918         MOV.W   [R4],#SOF( _TTimer_SetPeriod )
000A51 9D480002rrrr    2919         MOV.W   [R4+2],#SEG( _TTimer_SetPeriod )
                       2920 ; rtxcobj.c  649         Timer->GetPeriod=TTimer_GetPeriod;
000A57 8953            2922         MOV.W   R5,R3
000A59 8942            2923         MOV.W   R4,R2
000A5B 9940000E        2924         ADD.W   R4,#0EH
000A5F 86AC42          2925         MOV.B   ES,R5L
000A62 9A48rrrr        2926         MOV.W   [R4],#SOF( _TTimer_GetPeriod )
000A66 9D480002rrrr    2927         MOV.W   [R4+2],#SEG( _TTimer_GetPeriod )
                       2928 ; rtxcobj.c  650         Timer->Tick=TTimer_Tick;
000A6C 8953            2930         MOV.W   R5,R3
000A6E 8942            2931         MOV.W   R4,R2
000A70 99400012        2932         ADD.W   R4,#012H
000A74 86AC42          2933         MOV.B   ES,R5L
000A77 9A48rrrr        2934         MOV.W   [R4],#SOF( _TTimer_Tick )
000A7B 9D480002rrrr    2935         MOV.W   [R4+2],#SEG( _TTimer_Tick )
                       2936 ; rtxcobj.c  651         Timer->TTimer(Timer);
000A81 862C42          2938         MOV.B   ES,R1L
000A84 8A40            2939         MOV.W   R4,[R0]
000A86 8C5002          2940         MOV.W   R5,[R0+2]
000A89 8C3F02          2941         MOV.W   [R7+2],R3
000A8C 8A2F            2942         MOV.W   [R7],R2
000A8E 8913            2943         MOV.W   R1,R3
000A90 8902            2944         MOV.W   R0,R2
000A92 C4rrrrrr        2949         FCALL   __ICALL
                       2952 ; rtxcobj.c  652         if(Timer->Handle==(CLKBLK *)0)
000A96 8C1702          2954         MOV.W   R1,[R7+2]
000A99 8A07            2955         MOV.W   R0,[R7]
000A9B 862C42          2956         MOV.B   ES,R1L
000A9E 8C101E          2957         MOV.W   R1,[R0+30]
000AA1 8C001C          2958         MOV.W   R0,[R0+28]
000AA4 6910            2959         OR.W    R1,R0
000AA6 F20D            2960         BNE     _103
                       2961 ; rtxcobj.c  653         {
                       2962 ; rtxcobj.c  654          KS_free(TTimerMap,Timer);
000AA8 964842rr        2964         MOV.B   ES,#SEG( _TTimerMap )
000AAC 9908rrrr        2965         MOV.W   R0,#SOF( _TTimerMap )
000AB0 8200            2966         MOV.B   R0L,[R0]
000AB2 8C3702          2967         MOV.W   R3,[R7+2]
000AB5 8A27            2968         MOV.W   R2,[R7]
                       2969         CALL    _KS_free
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  32

ADDR   CODE            LINE SOURCELINE
000AB7 C4rrrrrr       +2969 ;       FCALL   _KS_free
                       2973 ; rtxcobj.c  655          return(0);
000ABB B910            2975         MOV.W   R1,#00H
000ABD B900            2976         MOV.W   R0,#00H
000ABF FE04            2977         BR      _106
                       2978 ; rtxcobj.c  656         }
000AC2                 2980 _103:
                       2982 ; rtxcobj.c  657         return(Timer);
000AC2 8C1702          2984         MOV.W   R1,[R7+2]
000AC5 8A07            2985         MOV.W   R0,[R7]
                       2988 ; rtxcobj.c  658        }
000AC8                 2990 _106:
000AC8 A974            2991         ADDS.W  R7,#04H
000ACA 2F30            2993         POP.W   R4, R5
000ACC D680            2995         RET
                       2998 ; rtxcobj.c  659        
                       2999 ; rtxcobj.c  660        
                       3000 ; rtxcobj.c  661        void deleteTTimer(TTimer *Timer)
                       3001 ; rtxcobj.c  662        {
                       3002         ALIGN   1
                       3004         PUBLIC  _deleteTTimer
000ACE                 3005 _deleteTTimer:
000ACE 0F30            3009         PUSH.W  R4, R5
000AD0 A97C            3011         ADDS.W  R7,#0CH
                       3015 ; rtxcobj.c  663         Timer->_TTimer(Timer);
000AD2 862C42          3017         MOV.B   ES,R1L
000AD5 8C4006          3018         MOV.W   R4,[R0+6]
000AD8 8C5008          3019         MOV.W   R5,[R0+8]
000ADB 8C1F02          3020         MOV.W   [R7+2],R1
000ADE 8A0F            3021         MOV.W   [R7],R0
000AE0 C4rrrrrr        3026         FCALL   __ICALL
                       3029 ; rtxcobj.c  664         KS_free(TTimerMap,Timer);
000AE4 964842rr        3031         MOV.B   ES,#SEG( _TTimerMap )
000AE8 9908rrrr        3032         MOV.W   R0,#SOF( _TTimerMap )
000AEC 8200            3033         MOV.B   R0L,[R0]
000AEE 8C3702          3034         MOV.W   R3,[R7+2]
000AF1 8A27            3035         MOV.W   R2,[R7]
                       3036         CALL    _KS_free
000AF3 C4rrrrrr       +3036 ;       FCALL   _KS_free
                       3040 ; rtxcobj.c  665        }
000AF7 A974            3042         ADDS.W  R7,#04H
000AF9 2F30            3044         POP.W   R4, R5
000AFB D680            3046         RET
                       3048 ; rtxcobj.c  666        
                       3049 ; rtxcobj.c  667        
                       3050 ; rtxcobj.c  668        
                       3051 ; rtxcobj.c  669        
                       3052 ; rtxcobj.c  670        /**************** TEventList Object *****************/
                       3053 ; rtxcobj.c  671        typedef struct TEventList {
                       3054 ; rtxcobj.c  672          /* Public: */
                       3055 ; rtxcobj.c  673                int     ObjectID;
                       3056 ; rtxcobj.c  674                void    (*TEventList)(struct TEventList *this);
                       3057 ; rtxcobj.c  675                void    (*_TEventList)(struct TEventList *this);
                       3058 ; rtxcobj.c  676                int     (*Append)(struct TEventList *this, TEvent *Event);
                       3059 ; rtxcobj.c  677                void    (*Clear)(struct TEventList *this, TEvent *Event);
                       3060 ; rtxcobj.c  678                int     (*InList)(struct TEventList *this, TEvent *Event);
                       3061 ; rtxcobj.c  679                TEvent  *(*Wait)(struct TEventList *this, long *TimeOut);
                       3062 ; rtxcobj.c  680          /* Private: */
                       3063 ; rtxcobj.c  681                TEvent  *Events[16];
                       3064 ; rtxcobj.c  682                SEMA    RTXCList[16];
                       3065 ; rtxcobj.c  683        } TEventList;
                       3066 ; rtxcobj.c  684        
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  33

ADDR   CODE            LINE SOURCELINE
                       3067 ; rtxcobj.c  685        
                       3068 ; rtxcobj.c  686        struct TEventList TEventListPartition[TEVENTLIST_COUNT];
                       3069 ; rtxcobj.c  687        MAP             TEventListMap=0;
000004                 3070         RSEG    RTXCOBJ_INI_FA
                       3073         PUBLIC  _TEventListMap
000004                 3074 _TEventListMap:
                       3075 ; rtxcobj.c  688        
                       3076 ; rtxcobj.c  689        
                       3077 ; rtxcobj.c  690        void    TEventList_TEventList(struct TEventList *this)
                       3078 ; rtxcobj.c  691        {
000004 00              3079         DB      000H
000AFD                 3080         RSEG    RTXCOBJ_PR
000AFD 00              3081         ALIGN   1
                       3083         PUBLIC  _TEventList_TEventList
000AFE                 3084 _TEventList_TEventList:
                       3122 ; rtxcobj.c  692         if(this>(struct TEventList *)0)
000AFE 99140000        3124         CMP.W   R1,#00H
000B02 F202            3125         BNE     _108
000B04 99040000        3126         CMP.W   R0,#00H
000B04 99040000        3126         CMP.W   R0,#00H
000B08                 3127 _108:
000B08 F903            3128         BL      _107
                       3129 ; rtxcobj.c  693         {
                       3130 ; rtxcobj.c  694          this->ObjectID=TEventListID;
000B0A 862C42          3132         MOV.B   ES,R1L
000B0D BA02            3133         MOV.W   [R0],#02H
                       3134 ; rtxcobj.c  695         }
000B10                 3136 _107:
                       3137 ; rtxcobj.c  696        }
000B10 D680            3139         RET
                       3142 ; rtxcobj.c  697        
                       3143 ; rtxcobj.c  698        
                       3144 ; rtxcobj.c  699        void    TEventList__TEventList(struct TEventList *this)
                       3145 ; rtxcobj.c  700        {
                       3146         ALIGN   1
                       3148         PUBLIC  _TEventList__TEventList
000B12                 3149 _TEventList__TEventList:
                       3155 ; rtxcobj.c  701         if(this>(struct TEventList *)0)
000B12 99140000        3157         CMP.W   R1,#00H
000B16 F202            3158         BNE     _110
000B18 99040000        3159         CMP.W   R0,#00H
000B18 99040000        3159         CMP.W   R0,#00H
000B1C                 3160 _110:
000B1C F903            3161         BL      _109
                       3162 ; rtxcobj.c  702          this->ObjectID=0;
000B1E 862C42          3164         MOV.B   ES,R1L
000B21 BA00            3165         MOV.W   [R0],#00H
000B21 BA0000          3165         MOV.W   [R0],#00H
000B24                 3166 _109:
                       3167 ; rtxcobj.c  703        }
000B24 D680            3169         RET
                       3172 ; rtxcobj.c  704        
                       3173 ; rtxcobj.c  705        
                       3174 ; rtxcobj.c  706        int     TEventList_Append(struct TEventList *this, TEvent *Event)
                       3175 ; rtxcobj.c  707        {
                       3176         ALIGN   1
                       3178         PUBLIC  _TEventList_Append
000B26                 3179 _TEventList_Append:
000B26 0F30            3183         PUSH.W  R4, R5
000B28 9972000C        3185         SUB.W   R7,#0CH
                       3195 ; rtxcobj.c  708        
                       3196 ; rtxcobj.c  709         TEvent **Ptr;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  34

ADDR   CODE            LINE SOURCELINE
                       3197 ; rtxcobj.c  710        
                       3198 ; rtxcobj.c  711         Ptr=&(this->Events[0]);
000B2C 8951            3200         MOV.W   R5,R1
000B2E 8940            3201         MOV.W   R4,R0
000B30 9940001A        3202         ADD.W   R4,#01AH
000B34 8C5F02          3203         MOV.W   [R7+2],R5
000B37 8A4F            3204         MOV.W   [R7],R4
                       3206 ; rtxcobj.c  712         if(this==0)
000B39 8C1F0A          3208         MOV.W   [R7+10],R1
000B3C 8C0F08          3209         MOV.W   [R7+8],R0
000B3F 6910            3210         OR.W    R1,R0
000B41 F203            3213         BNE     _111
                       3214 ; rtxcobj.c  713          return(0);
000B43 B900            3216         MOV.W   R0,#00H
000B45 FE3E            3217         BR      _120
000B45 FE3E00          3217         BR      _120
000B48                 3218 _111:
                       3225 ; rtxcobj.c  714         if(Event==0)
000B48 8C3F06          3227         MOV.W   [R7+6],R3
000B4B 8C2F04          3228         MOV.W   [R7+4],R2
000B4E 6932            3229         OR.W    R3,R2
000B50 F202            3232         BNE     _112
                       3233 ; rtxcobj.c  715          return(0);
000B52 B900            3235         MOV.W   R0,#00H
000B54 FE36            3236         BR      _120
000B54 FE36            3236         BR      _120
000B56                 3237 _112:
                       3244 ; rtxcobj.c  716         while(*Ptr!=0)
000B56 8C1702          3246         MOV.W   R1,[R7+2]
000B59 8A07            3247         MOV.W   R0,[R7]
000B5B 862C42          3248         MOV.B   ES,R1L
000B5E 8C1002          3249         MOV.W   R1,[R0+2]
000B61 8A00            3250         MOV.W   R0,[R0]
000B63 6910            3251         OR.W    R1,R0
000B65 F315            3252         BEQ     _115
000B67 9908FFFF        3253         MOV.W   R0,#0FFFFH
000B67 9908FFFF00      3253         MOV.W   R0,#0FFFFH
000B6C                 3254 _113:
                       3255 ; rtxcobj.c  717         {
                       3256 ; rtxcobj.c  718          if(*Ptr==Event)
000B6C 8C3706          3258         MOV.W   R3,[R7+6]
000B6F 8C2704          3259         MOV.W   R2,[R7+4]
000B72 86AC42          3260         MOV.B   ES,R5L
000B75 4C3C02          3261         CMP.W   [R4+2],R3
000B78 F201            3262         BNE     _121
000B7A 4A2C            3263         CMP.W   [R4],R2
000B7A 4A2C            3263         CMP.W   [R4],R2
000B7C                 3264 _121:
000B7C F201            3265         BNE     _114
                       3266 ; rtxcobj.c  719           return(-1);
000B7E FE21            3268         BR      _120
000B7E FE21            3268         BR      _120
000B80                 3269 _114:
                       3276 ; rtxcobj.c  720          Ptr++;
000B80 99400004        3278         ADD.W   R4,#04H
000B84 86AC42          3282         MOV.B   ES,R5L
000B87 8A24            3283         MOV.W   R2,[R4]
000B89 8C3402          3284         MOV.W   R3,[R4+2]
000B8C 6932            3285         OR.W    R3,R2
000B8E F2EE            3286         BNE     _113
                       3287 ; rtxcobj.c  721         }
000B90                 3289 _115:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  35

ADDR   CODE            LINE SOURCELINE
                       3290 ; rtxcobj.c  722         if(Ptr>=&(this->Events[15]))
000B90 8C170A          3292         MOV.W   R1,[R7+10]
000B93 8C0708          3293         MOV.W   R0,[R7+8]
000B96 99000056        3294         ADD.W   R0,#056H
000B9A 4951            3298         CMP.W   R5,R1
000B9C F201            3299         BNE     _122
000B9E 4940            3300         CMP.W   R4,R0
000B9E 4940            3300         CMP.W   R4,R0
000BA0                 3301 _122:
000BA0 F102            3302         BCS     _116
                       3303 ; rtxcobj.c  723          return(0);
000BA2 B900            3305         MOV.W   R0,#00H
000BA4 FE0E            3306         BR      _120
000BA4 FE0E            3306         BR      _120
000BA6                 3307 _116:
                       3312 ; rtxcobj.c  724         *Ptr=Event;
000BA6 8C1706          3314         MOV.W   R1,[R7+6]
000BA9 8C0704          3315         MOV.W   R0,[R7+4]
000BAC 86AC42          3316         MOV.B   ES,R5L
000BAF 8A0C            3317         MOV.W   [R4],R0
000BB1 8C1C02          3318         MOV.W   [R4+2],R1
                       3321 ; rtxcobj.c  725         *(Ptr+1)=0;
000BB4 86AC42          3323         MOV.B   ES,R5L
000BB7 BC4004          3324         MOV.W   [R4+4],#00H
000BBA BC4006          3325         MOV.W   [R4+6],#00H
                       3326 ; rtxcobj.c  726         return(-1);
000BBD 9908FFFF        3328         MOV.W   R0,#0FFFFH
                       3330 ; rtxcobj.c  727        }
000BC2                 3332 _120:
000BC2 9970000C        3333         ADD.W   R7,#0CH
000BC6 2F30            3335         POP.W   R4, R5
000BC8 D680            3337         RET
                       3340 ; rtxcobj.c  728        
                       3341 ; rtxcobj.c  729        
                       3342 ; rtxcobj.c  730        void    TEventList_Clear(struct TEventList *this, TEvent *Event)
                       3343 ; rtxcobj.c  731        {
                       3344         ALIGN   1
                       3346         PUBLIC  _TEventList_Clear
000BCA                 3347 _TEventList_Clear:
000BCA 0F70            3351         PUSH.W  R4, R5, R6
000BCC A978            3353         ADDS.W  R7,#08H
                       3361 ; rtxcobj.c  732        
                       3362 ; rtxcobj.c  733         char found=0;
000BCE 91C800          3364         MOV.B   R6L,#00H
                       3368 ; rtxcobj.c  734         TEvent **Ptr;
                       3369 ; rtxcobj.c  735         
                       3370 ; rtxcobj.c  736         Ptr=&(this->Events[0]);
000BD1 8951            3372         MOV.W   R5,R1
000BD3 8940            3373         MOV.W   R4,R0
000BD5 9940001A        3374         ADD.W   R4,#01AH
                       3376 ; rtxcobj.c  737         if(this==0)
000BD9 8C1F06          3378         MOV.W   [R7+6],R1
000BDC 8C0F04          3379         MOV.W   [R7+4],R0
000BDF 6910            3380         OR.W    R1,R0
000BE1 F32D            3383         BEQ     _128
                       3384 ; rtxcobj.c  738          return;
                       3385 ; rtxcobj.c  739         if(Event==0)
000BE3 8C3F02          3387         MOV.W   [R7+2],R3
000BE6 8A2F            3388         MOV.W   [R7],R2
000BE8 6932            3389         OR.W    R3,R2
000BEA F328            3392         BEQ     _128
                       3393 ; rtxcobj.c  740          return;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  36

ADDR   CODE            LINE SOURCELINE
                       3394 ; rtxcobj.c  741         while(*Ptr!=0)
000BEC 8C1706          3396         MOV.W   R1,[R7+6]
000BEF 8C0704          3397         MOV.W   R0,[R7+4]
000BF2 862C42          3398         MOV.B   ES,R1L
000BF5 8C101C          3399         MOV.W   R1,[R0+28]
000BF8 8C001A          3400         MOV.W   R0,[R0+26]
000BFB 6910            3404         OR.W    R1,R0
000BFD F31F            3405         BEQ     _128
000BFD F31F00          3405         BEQ     _128
000C00                 3406 _123:
                       3407 ; rtxcobj.c  742         {
                       3408 ; rtxcobj.c  743          if(*Ptr==Event)
000C00 8C1702          3410         MOV.W   R1,[R7+2]
000C03 8A07            3411         MOV.W   R0,[R7]
000C05 86AC42          3412         MOV.B   ES,R5L
000C08 4C1C02          3413         CMP.W   [R4+2],R1
000C0B F202            3414         BNE     _129
000C0D 4A0C            3415         CMP.W   [R4],R0
000C0D 4A0C00          3415         CMP.W   [R4],R0
000C10                 3416 _129:
000C10 F202            3417         BNE     _124
                       3418 ; rtxcobj.c  744           found=-1;
000C12 91C8FF          3420         MOV.B   R6L,#0FFH
000C16                 3423 _124:
                       3424 ; rtxcobj.c  745          if(found==-1)
000C16 91C4FF          3426         CMP.B   R6L,#0FFH
000C19 F209            3427         BNE     _125
                       3428 ; rtxcobj.c  746           *Ptr=*(Ptr+1);
000C1B 86AC42          3430         MOV.B   ES,R5L
000C1E 8C0404          3431         MOV.W   R0,[R4+4]
000C21 8C1406          3432         MOV.W   R1,[R4+6]
000C24 86AC42          3433         MOV.B   ES,R5L
000C27 8A0C            3434         MOV.W   [R4],R0
000C29 8C1C02          3435         MOV.W   [R4+2],R1
000C29 8C1C02          3435         MOV.W   [R4+2],R1
000C2C                 3436 _125:
                       3437 ; rtxcobj.c  747          Ptr++;
000C2C 99400004        3439         ADD.W   R4,#04H
000C30 86AC42          3443         MOV.B   ES,R5L
000C33 8A04            3444         MOV.W   R0,[R4]
000C35 8C1402          3445         MOV.W   R1,[R4+2]
000C38 6910            3446         OR.W    R1,R0
000C3A F2E2            3447         BNE     _123
                       3448 ; rtxcobj.c  748         }
                       3449 ; rtxcobj.c  749        }
000C3C                 3451 _128:
000C3C 99700008        3452         ADD.W   R7,#08H
000C40 2F70            3454         POP.W   R4, R5, R6
000C42 D680            3456         RET
                       3461 ; rtxcobj.c  750        
                       3462 ; rtxcobj.c  751        
                       3463 ; rtxcobj.c  752        int     TEventList_InList(struct TEventList *this, TEvent *Event)
                       3464 ; rtxcobj.c  753        {
                       3465         ALIGN   1
                       3467         PUBLIC  _TEventList_InList
000C44                 3468 _TEventList_InList:
000C44 0F30            3472         PUSH.W  R4, R5
000C46 A97C            3474         ADDS.W  R7,#0CH
                       3482 ; rtxcobj.c  754         TEvent **Ptr;
                       3483 ; rtxcobj.c  755         
                       3484 ; rtxcobj.c  756         if(this==(void *)0)
000C48 8951            3486         MOV.W   R5,R1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  37

ADDR   CODE            LINE SOURCELINE
000C4A 8940            3487         MOV.W   R4,R0
000C4C 6910            3488         OR.W    R1,R0
000C4E F202            3491         BNE     _131
                       3492 ; rtxcobj.c  757          return(0);
000C50 B900            3494         MOV.W   R0,#00H
000C52 FE29            3495         BR      _138
000C52 FE29            3495         BR      _138
000C54                 3496 _131:
                       3501 ; rtxcobj.c  758         if(Event==0)
000C54 8C3F02          3503         MOV.W   [R7+2],R3
000C57 8A2F            3504         MOV.W   [R7],R2
000C59 6932            3505         OR.W    R3,R2
000C5B F203            3508         BNE     _132
                       3509 ; rtxcobj.c  759          return(0);
000C5D B900            3511         MOV.W   R0,#00H
000C5F FE23            3512         BR      _138
000C5F FE2300          3512         BR      _138
000C62                 3513 _132:
                       3518 ; rtxcobj.c  760         Ptr=&(this->Events[0]);
000C62 8935            3520         MOV.W   R3,R5
000C64 8924            3521         MOV.W   R2,R4
000C66 8913            3522         MOV.W   R1,R3
000C68 8902            3523         MOV.W   R0,R2
000C6A 9920001A        3524         ADD.W   R2,#01AH
                       3528 ; rtxcobj.c  761         while(*Ptr!=0)
000C6E 862C42          3530         MOV.B   ES,R1L
000C71 8C101C          3531         MOV.W   R1,[R0+28]
000C74 8C001A          3532         MOV.W   R0,[R0+26]
000C77 6910            3534         OR.W    R1,R0
000C79 F315            3535         BEQ     _135
000C7B 9908FFFF        3536         MOV.W   R0,#0FFFFH
000C7B 9908FFFF00      3536         MOV.W   R0,#0FFFFH
000C80                 3537 _133:
                       3538 ; rtxcobj.c  762         {
                       3539 ; rtxcobj.c  763          if(*Ptr==Event)
000C80 8C5702          3541         MOV.W   R5,[R7+2]
000C83 8A47            3542         MOV.W   R4,[R7]
000C85 866C42          3543         MOV.B   ES,R3L
000C88 4C5A02          3544         CMP.W   [R2+2],R5
000C8B F202            3545         BNE     _139
000C8D 4A4A            3546         CMP.W   [R2],R4
000C8D 4A4A00          3546         CMP.W   [R2],R4
000C90                 3547 _139:
000C90 F201            3548         BNE     _134
                       3549 ; rtxcobj.c  764           return(-1);
000C92 FE09            3551         BR      _138
000C92 FE09            3551         BR      _138
000C94                 3552 _134:
                       3557 ; rtxcobj.c  765          Ptr++;
000C94 99200004        3559         ADD.W   R2,#04H
000C98 866C42          3563         MOV.B   ES,R3L
000C9B 8A42            3564         MOV.W   R4,[R2]
000C9D 8C5202          3565         MOV.W   R5,[R2+2]
000CA0 6954            3566         OR.W    R5,R4
000CA2 F2EE            3567         BNE     _133
                       3568 ; rtxcobj.c  766         }
000CA4                 3570 _135:
                       3571 ; rtxcobj.c  767         return(0);
000CA4 B900            3573         MOV.W   R0,#00H
                       3574 ; rtxcobj.c  768        }
000CA6                 3576 _138:
000CA6 A974            3577         ADDS.W  R7,#04H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  38

ADDR   CODE            LINE SOURCELINE
000CA8 2F30            3579         POP.W   R4, R5
000CAA D680            3581         RET
                       3585 ; rtxcobj.c  769        
                       3586 ; rtxcobj.c  770        
                       3587 ; rtxcobj.c  771        TEvent  *TEventList_Wait(struct TEventList *this, long *TimeOut)
                       3588 ; rtxcobj.c  772        {
                       3589         ALIGN   1
                       3591         PUBLIC  _TEventList_Wait
000CAC                 3592 _TEventList_Wait:
000CAC 0F70            3596         PUSH.W  R4, R5, R6
000CAE 99720018        3598         SUB.W   R7,#018H
                       3608 ; rtxcobj.c  773        
                       3609 ; rtxcobj.c  774         SEMA   cause;
                       3610 ; rtxcobj.c  775         int    index=0;
000CB2 B960            3612         MOV.W   R6,#00H
                       3616 ; rtxcobj.c  776         TTimer *TMOTimer;
                       3617 ; rtxcobj.c  777        
                       3618 ; rtxcobj.c  778         TMOTimer=0;
000CB4 BC700E          3620         MOV.W   [R7+14],#00H
000CB7 BC700C          3621         MOV.W   [R7+12],#00H
                       3623 ; rtxcobj.c  779         if(this==0)
000CBA 8C1F16          3625         MOV.W   [R7+22],R1
000CBD 8C0F14          3626         MOV.W   [R7+20],R0
000CC0 6910            3627         OR.W    R1,R0
000CC2 F20A            3630         BNE     _140
                       3631 ; rtxcobj.c  780         {
                       3632 ; rtxcobj.c  781          *TimeOut=-1;                    // Allocation error.
000CC4 866C42          3634         MOV.B   ES,R3L
000CC7 9A28FFFF        3635         MOV.W   [R2],#0FFFFH
000CCB 9C2802FFFF      3636         MOV.W   [R2+2],#0FFFFH
                       3637 ; rtxcobj.c  782          return(0);
000CD0 B910            3639         MOV.W   R1,#00H
000CD2 B900            3640         MOV.W   R0,#00H
                       3641         BR      _156
000CD4 D50160         +3641         JMP.L   _156
                       3642 ; rtxcobj.c  783         }
000CD8                 3644 _140:
                       3653 ; rtxcobj.c  784        
                       3654 ; rtxcobj.c  785        // Added test for NULL pointer @ Timeout SAA 991005
                       3655 ; rtxcobj.c  786        // TMOTimer has value zero
                       3656 ; rtxcobj.c  787        
                       3657 ; rtxcobj.c  788         if(TimeOut != 0)
000CD8 8C3F12          3659         MOV.W   [R7+18],R3
000CDB 8C2F10          3660         MOV.W   [R7+16],R2
000CDE 6932            3661         OR.W    R3,R2
000CE0 F370            3664         BEQ     _145
                       3665 ; rtxcobj.c  789         {
                       3666 ; rtxcobj.c  790          if(*TimeOut<0)
000CE2 8C1712          3668         MOV.W   R1,[R7+18]
000CE5 8C0710          3669         MOV.W   R0,[R7+16]
000CE8 862C42          3670         MOV.B   ES,R1L
000CEB 9C04020000      3671         CMP.W   [R0+2],#00H
000CF0 FC11            3672         BGT     _141
000CF2 FB03            3673         BLT     _157
000CF4 9A040000        3674         CMP.W   [R0],#00H
000CF8 F00D            3675         BCC     _141
000CF8 F00D            3675         BCC     _141
000CFA                 3676 _157:
                       3677 ; rtxcobj.c  791          {
                       3678 ; rtxcobj.c  792           *TimeOut=-1;                   // Allocation error.
000CFA 8C1712          3680         MOV.W   R1,[R7+18]
000CFD 8C0710          3681         MOV.W   R0,[R7+16]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  39

ADDR   CODE            LINE SOURCELINE
000D00 862C42          3682         MOV.B   ES,R1L
000D03 9A08FFFF        3683         MOV.W   [R0],#0FFFFH
000D07 9C0802FFFF      3684         MOV.W   [R0+2],#0FFFFH
                       3687 ; rtxcobj.c  793           return(0);
000D0C B910            3689         MOV.W   R1,#00H
000D0E B900            3690         MOV.W   R0,#00H
                       3692         BR      _156
000D10 D50142         +3692         JMP.L   _156
                       3693 ; rtxcobj.c  794          }
000D14                 3695 _141:
                       3703 ; rtxcobj.c  795          if(*TimeOut>CLKTICK)           // Allocate timer if nessesary.
000D14 8C1712          3705         MOV.W   R1,[R7+18]
000D17 8C0710          3706         MOV.W   R0,[R7+16]
000D1A 862C42          3707         MOV.B   ES,R1L
000D1D 9C04020000      3708         CMP.W   [R0+2],#00H
000D22 FB4F            3709         BLT     _145
000D24 FC03            3710         BGT     _158
000D26 9A040008        3711         CMP.W   [R0],#08H
000D2A F94B            3712         BL      _145
000D2A F94B            3712         BL      _145
000D2C                 3713 _158:
                       3714 ; rtxcobj.c  796          {
                       3715 ; rtxcobj.c  797           TMOTimer=newTTimer();
000D2C C5FE4C          3717         CALL    _newTTimer
000D2F 8931            3718         MOV.W   R3,R1
000D31 8920            3719         MOV.W   R2,R0
                       3722 ; rtxcobj.c  798           if(TMOTimer==0)
000D33 8C3F0E          3724         MOV.W   [R7+14],R3
000D36 8C2F0C          3725         MOV.W   [R7+12],R2
000D39 6932            3726         OR.W    R3,R2
000D3B F20D            3729         BNE     _142
                       3730 ; rtxcobj.c  799           {
                       3731 ; rtxcobj.c  800            *TimeOut=-1;                          // Allocation error.
000D3D 8C1712          3733         MOV.W   R1,[R7+18]
000D40 8C0710          3734         MOV.W   R0,[R7+16]
000D43 862C42          3735         MOV.B   ES,R1L
000D46 9A08FFFF        3736         MOV.W   [R0],#0FFFFH
000D4A 9C0802FFFF      3737         MOV.W   [R0+2],#0FFFFH
                       3740 ; rtxcobj.c  801            return(0);
000D4F B910            3742         MOV.W   R1,#00H
000D51 B900            3743         MOV.W   R0,#00H
                       3745         BR      _156
000D53 D50120         +3745         JMP.L   _156
                       3746 ; rtxcobj.c  802           }
000D56                 3748 _142:
                       3756 ; rtxcobj.c  803           TMOTimer->Tick(TMOTimer,*TimeOut); // Set Timeout.
000D56 8C170E          3758         MOV.W   R1,[R7+14]
000D59 8C070C          3759         MOV.W   R0,[R7+12]
000D5C 862C42          3760         MOV.B   ES,R1L
000D5F 8C4012          3761         MOV.W   R4,[R0+18]
000D62 8C5014          3762         MOV.W   R5,[R0+20]
000D65 8C1712          3763         MOV.W   R1,[R7+18]
000D68 8C0710          3764         MOV.W   R0,[R7+16]
000D6B 862C42          3765         MOV.B   ES,R1L
000D6E 8A20            3766         MOV.W   R2,[R0]
000D70 8C3002          3767         MOV.W   R3,[R0+2]
000D73 8C170E          3768         MOV.W   R1,[R7+14]
000D76 8C070C          3769         MOV.W   R0,[R7+12]
000D79 C4rrrrrr        3772         FCALL   __ICALL
                       3775 ; rtxcobj.c  804           if(this->Append(this,TMOTimer->TimeOut)==0)
000D7D 8C1716          3777         MOV.W   R1,[R7+22]
000D80 8C0714          3778         MOV.W   R0,[R7+20]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  40

ADDR   CODE            LINE SOURCELINE
000D83 862C42          3779         MOV.B   ES,R1L
000D86 8C400A          3780         MOV.W   R4,[R0+10]
000D89 8C500C          3781         MOV.W   R5,[R0+12]
000D8C 8C170E          3782         MOV.W   R1,[R7+14]
000D8F 8C070C          3783         MOV.W   R0,[R7+12]
000D92 862C42          3784         MOV.B   ES,R1L
000D95 8C2016          3785         MOV.W   R2,[R0+22]
000D98 8C3018          3786         MOV.W   R3,[R0+24]
000D9B 8C1716          3787         MOV.W   R1,[R7+22]
000D9E 8C0714          3788         MOV.W   R0,[R7+20]
000DA1 C4rrrrrr        3791         FCALL   __ICALL
000DA5 6900            3794         OR.W    R0,R0
000DA7 F20D            3795         BNE     _145
                       3796 ; rtxcobj.c  805           {
                       3797 ; rtxcobj.c  806            *TimeOut=-1;                          // Append Error.
000DA9 8C1712          3799         MOV.W   R1,[R7+18]
000DAC 8C0710          3800         MOV.W   R0,[R7+16]
000DAF 862C42          3801         MOV.B   ES,R1L
000DB2 9A08FFFF        3802         MOV.W   [R0],#0FFFFH
000DB6 9C0802FFFF      3803         MOV.W   [R0+2],#0FFFFH
                       3806 ; rtxcobj.c  807            return(0);
000DBB B910            3808         MOV.W   R1,#00H
000DBD B900            3809         MOV.W   R0,#00H
                       3811         BR      _156
000DBF D500EA         +3811         JMP.L   _156
                       3812 ; rtxcobj.c  808           }
                       3813 ; rtxcobj.c  809          }
                       3814 ; rtxcobj.c  810         }
000DC2                 3816 _145:
                       3824 ; rtxcobj.c  811         while(this->Events[index]!=0)   // Generate RTXC SEMA-list.
000DC2 8C1716          3826         MOV.W   R1,[R7+22]
000DC5 8C0714          3827         MOV.W   R0,[R7+20]
000DC8 9900001A        3828         ADD.W   R0,#01AH
000DCC 8C1F0A          3829         MOV.W   [R7+10],R1
000DCF 8C0F08          3830         MOV.W   [R7+8],R0
000DD2 8C1716          3831         MOV.W   R1,[R7+22]
000DD5 8C0714          3832         MOV.W   R0,[R7+20]
000DD8 862C42          3833         MOV.B   ES,R1L
000DDB 8C101C          3834         MOV.W   R1,[R0+28]
000DDE 8C001A          3835         MOV.W   R0,[R0+26]
000DE1 6910            3836         OR.W    R1,R0
000DE3 F337            3837         BEQ     _147
000DE5 8C1716          3838         MOV.W   R1,[R7+22]
000DE8 8C0714          3839         MOV.W   R0,[R7+20]
000DEB 9900005A        3840         ADD.W   R0,#05AH
000DEF 8C1F06          3841         MOV.W   [R7+6],R1
000DF2 8C0F04          3842         MOV.W   [R7+4],R0
000DF5 8C1716          3843         MOV.W   R1,[R7+22]
000DF8 8C0714          3844         MOV.W   R0,[R7+20]
000DFB 9900001A        3845         ADD.W   R0,#01AH
000DFB 9900001A00      3845         ADD.W   R0,#01AH
000E00                 3846 _146:
                       3847 ; rtxcobj.c  812         {
                       3848 ; rtxcobj.c  813          this->RTXCList[index]=this->Events[index]->ID;
000E00 8926            3850         MOV.W   R2,R6
000E02 D922            3851         ASL.W   R2,#02H
000E04 8942            3852         MOV.W   R4,R2
000E06 B950            3853         MOVS.W  R5,#00H
000E08 8931            3854         MOV.W   R3,R1
000E0A 8920            3855         MOV.W   R2,R0
000E0C 8C3F02          3856         MOV.W   [R7+2],R3
000E0F 8A2F            3857         MOV.W   [R7],R2
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  41

ADDR   CODE            LINE SOURCELINE
000E11 0924            3858         ADD.W   R2,R4
000E13 866C42          3859         MOV.B   ES,R3L
000E16 8C3202          3860         MOV.W   R3,[R2+2]
000E19 8A22            3861         MOV.W   R2,[R2]
000E1B 866C42          3862         MOV.B   ES,R3L
000E1E 84821A          3863         MOV.B   R4L,[R2+26]
000E21 8926            3864         MOV.W   R2,R6
000E23 9839            3865         SEXT.W  R3
000E25 8C1706          3866         MOV.W   R1,[R7+6]
000E28 8C0704          3867         MOV.W   R0,[R7+4]
000E2B 0902            3868         ADD.W   R0,R2
000E2D 862C42          3869         MOV.B   ES,R1L
000E30 8288            3870         MOV.B   [R0],R4L
                       3871 ; rtxcobj.c  814          index++;
000E32 A961            3873         ADDS.W  R6,#01H
000E34 8926            3877         MOV.W   R2,R6
000E36 D922            3878         ASL.W   R2,#02H
000E38 B930            3879         MOVS.W  R3,#00H
000E3A 8C5702          3880         MOV.W   R5,[R7+2]
000E3D 8A47            3881         MOV.W   R4,[R7]
000E3F 8915            3882         MOV.W   R1,R5
000E41 8904            3883         MOV.W   R0,R4
000E43 0942            3884         ADD.W   R4,R2
000E45 86AC42          3885         MOV.B   ES,R5L
000E48 8C5402          3886         MOV.W   R5,[R4+2]
000E4B 8A44            3887         MOV.W   R4,[R4]
000E4D 6954            3888         OR.W    R5,R4
000E4F F2D8            3889         BNE     _146
                       3890 ; rtxcobj.c  815         }
000E52                 3892 _147:
                       3893 ; rtxcobj.c  816         this->RTXCList[index]=0;
000E52 8C5716          3895         MOV.W   R5,[R7+22]
000E55 8C4714          3896         MOV.W   R4,[R7+20]
000E58 9940005A        3897         ADD.W   R4,#05AH
000E5C 8926            3898         MOV.W   R2,R6
000E5E 9839            3899         SEXT.W  R3
000E60 8915            3900         MOV.W   R1,R5
000E62 8904            3901         MOV.W   R0,R4
000E64 0902            3902         ADD.W   R0,R2
000E66 862C42          3903         MOV.B   ES,R1L
000E69 B200            3904         MOV.B   [R0],#00H
000E6B 8C5F06          3905         MOV.W   [R7+6],R5
000E6E 8C4F04          3906         MOV.W   [R7+4],R4
000E71 8915            3907         MOV.W   R1,R5
000E73 8904            3908         MOV.W   R0,R4
                       3909 ; rtxcobj.c  817        
                       3910 ; rtxcobj.c  818        
                       3911 ; rtxcobj.c  819         cause=KS_waitm(this->RTXCList); // Perform actual wait.
                       3913         CALL    _KS_waitm
000E75 C4rrrrrr       +3913 ;       FCALL   _KS_waitm
                       3915 ; rtxcobj.c  820        
                       3916 ; rtxcobj.c  821        
                       3917 ; rtxcobj.c  822         index=0;
000E79 B960            3919         MOV.W   R6,#00H
                       3922 ; rtxcobj.c  823         while(this->Events[index]!=0)   // Track event-souce from SEMA-list.
000E7B 8C370A          3924         MOV.W   R3,[R7+10]
000E7E 8C2708          3925         MOV.W   R2,[R7+8]
000E81 866C42          3926         MOV.B   ES,R3L
000E84 8C3202          3927         MOV.W   R3,[R2+2]
000E87 8A22            3928         MOV.W   R2,[R2]
000E89 6932            3929         OR.W    R3,R2
000E8B F322            3930         BEQ     _150
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  42

ADDR   CODE            LINE SOURCELINE
000E8D 8C3716          3931         MOV.W   R3,[R7+22]
000E90 8C2714          3932         MOV.W   R2,[R7+20]
000E93 9920001A        3933         ADD.W   R2,#01AH
000E97 8C3F0A          3934         MOV.W   [R7+10],R3
000E9A 8C2F08          3935         MOV.W   [R7+8],R2
000E9A 8C2F0800        3935         MOV.W   [R7+8],R2
000E9E                 3936 _148:
                       3937 ; rtxcobj.c  824         {
                       3938 ; rtxcobj.c  825          if(this->RTXCList[index]==cause)
000E9E 8946            3940         MOV.W   R4,R6
000EA0 9859            3941         SEXT.W  R5
000EA2 8C3706          3942         MOV.W   R3,[R7+6]
000EA5 8C2704          3943         MOV.W   R2,[R7+4]
000EA8 0924            3944         ADD.W   R2,R4
000EAA 866C42          3945         MOV.B   ES,R3L
000EAD 420A            3946         CMP.B   [R2],R0L
000EAF F310            3947         BEQ     _150
                       3948 ; rtxcobj.c  826           break;
                       3949 ; rtxcobj.c  827          index++;
000EB1 A961            3951         ADDS.W  R6,#01H
000EB3 8916            3955         MOV.W   R1,R6
000EB5 D912            3956         ASL.W   R1,#02H
000EB7 8921            3957         MOV.W   R2,R1
000EB9 B930            3958         MOVS.W  R3,#00H
000EBB 8C570A          3959         MOV.W   R5,[R7+10]
000EBE 8C4708          3960         MOV.W   R4,[R7+8]
000EC1 0942            3961         ADD.W   R4,R2
000EC3 86AC42          3962         MOV.B   ES,R5L
000EC6 8C5402          3963         MOV.W   R5,[R4+2]
000EC9 8A44            3964         MOV.W   R4,[R4]
000ECB 6954            3965         OR.W    R5,R4
000ECD F2E8            3966         BNE     _148
                       3967 ; rtxcobj.c  828         }
000ED0                 3969 _150:
                       3970 ; rtxcobj.c  829        
                       3971 ; rtxcobj.c  830         if(TMOTimer!=0)                  // TimeOut was used.
000ED0 8C170E          3973         MOV.W   R1,[R7+14]
000ED3 8C070C          3974         MOV.W   R0,[R7+12]
000ED6 8931            3975         MOV.W   R3,R1
000ED8 8920            3976         MOV.W   R2,R0
000EDA 6910            3977         OR.W    R1,R0
000EDC F34E            3981         BEQ     _152
                       3982 ; rtxcobj.c  831         {
                       3983 ; rtxcobj.c  832          if(this->Events[index]==TMOTimer->TimeOut)
000EDE 8906            3985         MOV.W   R0,R6
000EE0 D902            3986         ASL.W   R0,#02H
000EE2 B910            3987         MOVS.W  R1,#00H
000EE4 8C5716          3988         MOV.W   R5,[R7+22]
000EE7 8C4714          3989         MOV.W   R4,[R7+20]
000EEA 9940001A        3990         ADD.W   R4,#01AH
000EEE 0940            3991         ADD.W   R4,R0
000EF0 8913            3992         MOV.W   R1,R3
000EF2 8902            3993         MOV.W   R0,R2
000EF4 99000016        3994         ADD.W   R0,#016H
000EF8 8C1F0A          3995         MOV.W   [R7+10],R1
000EFB 8C0F08          3996         MOV.W   [R7+8],R0
000EFE 866C42          3997         MOV.B   ES,R3L
000F01 8C0216          3998         MOV.W   R0,[R2+22]
000F04 8C1218          3999         MOV.W   R1,[R2+24]
000F07 86AC42          4000         MOV.B   ES,R5L
000F0A 4C1C02          4001         CMP.W   [R4+2],R1
000F0D F202            4002         BNE     _160
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  43

ADDR   CODE            LINE SOURCELINE
000F0F 4A0C            4003         CMP.W   [R4],R0
000F0F 4A0C00          4003         CMP.W   [R4],R0
000F12                 4004 _160:
000F12 F207            4005         BNE     _151
                       4006 ; rtxcobj.c  833           *TimeOut=0;                    // TimeOut.
000F14 8C1712          4008         MOV.W   R1,[R7+18]
000F17 8C0710          4009         MOV.W   R0,[R7+16]
000F1A 862C42          4010         MOV.B   ES,R1L
000F1D BA00            4011         MOV.W   [R0],#00H
000F1F BC0002          4012         MOV.W   [R0+2],#00H
000F22                 4017 _151:
                       4018 ; rtxcobj.c  834          *TimeOut=CLKTICK*KS_inqtimer(TMOTimer->Handle);
000F22 8C3F0E          4020         MOV.W   [R7+14],R3
000F25 8C2F0C          4021         MOV.W   [R7+12],R2
000F28 866C42          4022         MOV.B   ES,R3L
000F2B 8C021C          4023         MOV.W   R0,[R2+28]
000F2E 8C121E          4024         MOV.W   R1,[R2+30]
                       4027         CALL    _KS_inqtimer
000F31 C4rrrrrr       +4027 ;       FCALL   _KS_inqtimer
000F35 D903            4028         ASL.W   R0,#03H
000F37 8900            4029         MOV.W   R0,R0
000F39 9819            4030         SEXT.W  R1
000F3B 8C3712          4031         MOV.W   R3,[R7+18]
000F3E 8C2710          4032         MOV.W   R2,[R7+16]
000F41 866C42          4033         MOV.B   ES,R3L
000F44 8A0A            4034         MOV.W   [R2],R0
000F46 8C1A02          4035         MOV.W   [R2+2],R1
                       4038 ; rtxcobj.c  835          this->Clear(this,TMOTimer->TimeOut);
000F49 8C1716          4040         MOV.W   R1,[R7+22]
000F4C 8C0714          4041         MOV.W   R0,[R7+20]
000F4F 862C42          4042         MOV.B   ES,R1L
000F52 8C400E          4043         MOV.W   R4,[R0+14]
000F55 8C5010          4044         MOV.W   R5,[R0+16]
000F58 8C370A          4045         MOV.W   R3,[R7+10]
000F5B 8C2708          4046         MOV.W   R2,[R7+8]
000F5E 866C42          4047         MOV.B   ES,R3L
000F61 8C3202          4048         MOV.W   R3,[R2+2]
000F64 8A22            4049         MOV.W   R2,[R2]
000F66 8C1716          4051         MOV.W   R1,[R7+22]
000F69 8C0714          4052         MOV.W   R0,[R7+20]
000F6C C4rrrrrr        4055         FCALL   __ICALL
                       4058 ; rtxcobj.c  836          deleteTTimer(TMOTimer);
000F70 8C170E          4060         MOV.W   R1,[R7+14]
000F73 8C070C          4061         MOV.W   R0,[R7+12]
000F76 C5FDAB          4062         CALL    _deleteTTimer
                       4066 ; rtxcobj.c  837         }  
000F7A                 4068 _152:
                       4069 ; rtxcobj.c  838         
                       4070 ; rtxcobj.c  839         return(this->Events[index]);
000F7A 8906            4072         MOV.W   R0,R6
000F7C D902            4073         ASL.W   R0,#02H
000F7E 8920            4077         MOV.W   R2,R0
000F80 B930            4078         MOVS.W  R3,#00H
000F82 8C1716          4079         MOV.W   R1,[R7+22]
000F85 8C0714          4080         MOV.W   R0,[R7+20]
000F88 9900001A        4081         ADD.W   R0,#01AH
000F8C 0902            4085         ADD.W   R0,R2
000F8E 862C42          4086         MOV.B   ES,R1L
000F91 8C1002          4087         MOV.W   R1,[R0+2]
000F94 8A00            4088         MOV.W   R0,[R0]
                       4089 ; rtxcobj.c  840        }
000F96                 4091 _156:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  44

ADDR   CODE            LINE SOURCELINE
000F96 99700018        4092         ADD.W   R7,#018H
000F9A 2F70            4094         POP.W   R4, R5, R6
000F9C D680            4096         RET
                       4099 ; rtxcobj.c  841        
                       4100 ; rtxcobj.c  842        
                       4101 ; rtxcobj.c  843        
                       4102 ; rtxcobj.c  844        TEventList      *newTEventList(void)
                       4103 ; rtxcobj.c  845        {
                       4104         ALIGN   1
                       4106         PUBLIC  _newTEventList
000F9E                 4107 _newTEventList:
000F9E 0F30            4113         PUSH.W  R4, R5
000FA0 A97C            4115         ADDS.W  R7,#0CH
                       4119 ; rtxcobj.c  846        
                       4120 ; rtxcobj.c  847        /* VAR */
                       4121 ; rtxcobj.c  848         TEventList *EventList;
                       4122 ; rtxcobj.c  849        
                       4123 ; rtxcobj.c  850        /* BEGIN */
                       4124 ; rtxcobj.c  851         if(TEventListMap==0)
000FA2 964842rr        4126         MOV.B   ES,#SEG( _TEventListMap )
000FA6 9908rrrr        4127         MOV.W   R0,#SOF( _TEventListMap )
000FAA 8200            4128         MOV.B   R0L,[R0]
000FAC F213            4129         BNE     _162
                       4130 ; rtxcobj.c  852         {
                       4131 ; rtxcobj.c  853          TEventListMap=KS_create_part(&TEventListPartition,
                       4132 ; rtxcobj.c  854                                       sizeof(struct TEventList),TEVENTLIST_COUNT
                            );
000FAE 9918rrrr        4134         MOV.W   R1,#SEG( _TEventListPartition )
000FB2 9908rrrr        4135         MOV.W   R0,#SOF( _TEventListPartition )
000FB6 9928006A        4136         MOV.W   R2,#06AH
000FBA B935            4137         MOV.W   R3,#05H
                       4138         CALL    _KS_create_part
000FBC C4rrrrrr       +4138 ;       FCALL   _KS_create_part
000FC0 964842rr        4139         MOV.B   ES,#SEG( _TEventListMap )
000FC4 9918rrrr        4140         MOV.W   R1,#SOF( _TEventListMap )
000FC8 8209            4141         MOV.B   [R1],R0L
                       4142 ; rtxcobj.c  855          if(TEventListMap==0)
000FCA 6100            4144         OR.B    R0L,R0L
000FCC F203            4145         BNE     _162
                       4146 ; rtxcobj.c  856           return(0);
000FCE B910            4148         MOV.W   R1,#00H
000FD0 B900            4149         MOV.W   R0,#00H
000FD2 FE5A            4150         BR      _165
                       4151 ; rtxcobj.c  857         }
000FD4                 4153 _162:
                       4154 ; rtxcobj.c  858         EventList=KS_alloc(TEventListMap);
000FD4 964842rr        4156         MOV.B   ES,#SEG( _TEventListMap )
000FD8 9908rrrr        4157         MOV.W   R0,#SOF( _TEventListMap )
000FDC 8200            4158         MOV.B   R0L,[R0]
                       4159         CALL    _KS_alloc
000FDE C4rrrrrr       +4159 ;       FCALL   _KS_alloc
                       4161 ; rtxcobj.c  859         if(EventList==0)
000FE2 8931            4163         MOV.W   R3,R1
000FE4 8920            4164         MOV.W   R2,R0
000FE6 6910            4165         OR.W    R1,R0
000FE8 F203            4168         BNE     _163
                       4169 ; rtxcobj.c  860          return(0);
000FEA B910            4171         MOV.W   R1,#00H
000FEC B900            4172         MOV.W   R0,#00H
000FEE FE4C            4173         BR      _165
000FEE FE4C            4173         BR      _165
000FF0                 4174 _163:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  45

ADDR   CODE            LINE SOURCELINE
                       4177 ; rtxcobj.c  861         EventList->TEventList=TEventList_TEventList;
000FF0 8913            4179         MOV.W   R1,R3
000FF2 8902            4180         MOV.W   R0,R2
000FF4 99000002        4181         ADD.W   R0,#02H
000FF8 862C42          4182         MOV.B   ES,R1L
000FFB 9A08rrrr        4183         MOV.W   [R0],#SOF( _TEventList_TEventList )
000FFF 9D080002rrrr    4184         MOV.W   [R0+2],#SEG( _TEventList_TEventList )
                       4185 ; rtxcobj.c  862         EventList->_TEventList=TEventList__TEventList;
001005 8953            4187         MOV.W   R5,R3
001007 8942            4188         MOV.W   R4,R2
001009 99400006        4189         ADD.W   R4,#06H
00100D 86AC42          4190         MOV.B   ES,R5L
001010 9A48rrrr        4191         MOV.W   [R4],#SOF( _TEventList__TEventList )
001014 9D480002rrrr    4192         MOV.W   [R4+2],#SEG( _TEventList__TEventList )
                       4193 ; rtxcobj.c  863         EventList->Append=TEventList_Append;
00101A 8953            4195         MOV.W   R5,R3
00101C 8942            4196         MOV.W   R4,R2
00101E 9940000A        4197         ADD.W   R4,#0AH
001022 86AC42          4198         MOV.B   ES,R5L
001025 9A48rrrr        4199         MOV.W   [R4],#SOF( _TEventList_Append )
001029 9D480002rrrr    4200         MOV.W   [R4+2],#SEG( _TEventList_Append )
                       4201 ; rtxcobj.c  864         EventList->Clear=TEventList_Clear;
00102F 8953            4203         MOV.W   R5,R3
001031 8942            4204         MOV.W   R4,R2
001033 9940000E        4205         ADD.W   R4,#0EH
001037 86AC42          4206         MOV.B   ES,R5L
00103A 9A48rrrr        4207         MOV.W   [R4],#SOF( _TEventList_Clear )
00103E 9D480002rrrr    4208         MOV.W   [R4+2],#SEG( _TEventList_Clear )
                       4209 ; rtxcobj.c  865         EventList->InList=TEventList_InList;
001044 8953            4211         MOV.W   R5,R3
001046 8942            4212         MOV.W   R4,R2
001048 99400012        4213         ADD.W   R4,#012H
00104C 86AC42          4214         MOV.B   ES,R5L
00104F 9A48rrrr        4215         MOV.W   [R4],#SOF( _TEventList_InList )
001053 9D480002rrrr    4216         MOV.W   [R4+2],#SEG( _TEventList_InList )
                       4217 ; rtxcobj.c  866         EventList->Wait=TEventList_Wait;
001059 8953            4219         MOV.W   R5,R3
00105B 8942            4220         MOV.W   R4,R2
00105D 99400016        4221         ADD.W   R4,#016H
001061 86AC42          4222         MOV.B   ES,R5L
001064 9A48rrrr        4223         MOV.W   [R4],#SOF( _TEventList_Wait )
001068 9D480002rrrr    4224         MOV.W   [R4+2],#SEG( _TEventList_Wait )
                       4225 ; rtxcobj.c  867         EventList->TEventList(EventList);
00106E 862C42          4227         MOV.B   ES,R1L
001071 8A40            4228         MOV.W   R4,[R0]
001073 8C5002          4229         MOV.W   R5,[R0+2]
001076 8C3F02          4230         MOV.W   [R7+2],R3
001079 8A2F            4231         MOV.W   [R7],R2
00107B 8913            4232         MOV.W   R1,R3
00107D 8902            4233         MOV.W   R0,R2
00107F C4rrrrrr        4238         FCALL   __ICALL
                       4241 ; rtxcobj.c  868         return(EventList);
001083 8C1702          4243         MOV.W   R1,[R7+2]
001086 8A07            4244         MOV.W   R0,[R7]
                       4247 ; rtxcobj.c  869        }
001088                 4249 _165:
001088 A974            4250         ADDS.W  R7,#04H
00108A 2F30            4252         POP.W   R4, R5
00108C D680            4254         RET
                       4257 ; rtxcobj.c  870        
                       4258 ; rtxcobj.c  871        
                       4259 ; rtxcobj.c  872        void deleteTEventList(TEventList *EventList)
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  46

ADDR   CODE            LINE SOURCELINE
                       4260 ; rtxcobj.c  873        {
                       4261         ALIGN   1
                       4263         PUBLIC  _deleteTEventList
00108E                 4264 _deleteTEventList:
00108E 0F30            4268         PUSH.W  R4, R5
001090 A97C            4270         ADDS.W  R7,#0CH
                       4274 ; rtxcobj.c  874         EventList->_TEventList(EventList);
001092 862C42          4276         MOV.B   ES,R1L
001095 8C4006          4277         MOV.W   R4,[R0+6]
001098 8C5008          4278         MOV.W   R5,[R0+8]
00109B 8C1F02          4279         MOV.W   [R7+2],R1
00109E 8A0F            4280         MOV.W   [R7],R0
0010A0 C4rrrrrr        4285         FCALL   __ICALL
                       4288 ; rtxcobj.c  875         KS_free(TEventListMap,EventList);
0010A4 964842rr        4290         MOV.B   ES,#SEG( _TEventListMap )
0010A8 9908rrrr        4291         MOV.W   R0,#SOF( _TEventListMap )
0010AC 8200            4292         MOV.B   R0L,[R0]
0010AE 8C3702          4293         MOV.W   R3,[R7+2]
0010B1 8A27            4294         MOV.W   R2,[R7]
                       4295         CALL    _KS_free
0010B3 C4rrrrrr       +4295 ;       FCALL   _KS_free
                       4299 ; rtxcobj.c  876        }
0010B7 A974            4301         ADDS.W  R7,#04H
0010B9 2F30            4303         POP.W   R4, R5
0010BB D680            4305         RET
                       4307 ; rtxcobj.c  877        
                       4308 ; rtxcobj.c  878        
                       4309 ; rtxcobj.c  879        
                       4310 ; rtxcobj.c  880        
                       4311 ; rtxcobj.c  881        typedef struct TStream {
                       4312 ; rtxcobj.c  882          /* Public: */
                       4313 ; rtxcobj.c  883                int             ObjectID;
                       4314 ; rtxcobj.c  884                void            (*TStream)(struct TStream *this, int width, int d
                            epth);
                       4315 ; rtxcobj.c  885                void            (*_TStream)(struct TStream *this);
                       4316 ; rtxcobj.c  886                char*           (*Get)(struct TStream *this, void* dest);
                       4317 ; rtxcobj.c  887                void            (*Put)(struct TStream *this, void* Source);
                       4318 ; rtxcobj.c  888                QUEUE           ID;
                       4319 ; rtxcobj.c  889          /* Private: */
                       4320 ; rtxcobj.c  890                int             Width;
                       4321 ; rtxcobj.c  891                int             Depth;
                       4322 ; rtxcobj.c  892                char*           Handle;
                       4323 ; rtxcobj.c  893        } TStream;
                       4324 ; rtxcobj.c  894        
                       4325 ; rtxcobj.c  895        
                       4326 ; rtxcobj.c  896        struct TStream TStreamPartition[DNQUEUES];
                       4327 ; rtxcobj.c  897        MAP              TStreamMap=0;
000005                 4328         RSEG    RTXCOBJ_INI_FA
                       4331         PUBLIC  _TStreamMap
000005                 4332 _TStreamMap:
                       4333 ; rtxcobj.c  898        
                       4334 ; rtxcobj.c  899        
                       4335 ; rtxcobj.c  900        void    TStream_TStream(struct TStream *this, int width, int depth)
                       4336 ; rtxcobj.c  901        {
000005 00              4337         DB      000H
0010BD                 4338         RSEG    RTXCOBJ_PR
0010BD 00              4339         ALIGN   1
                       4341         PUBLIC  _TStream_TStream
0010BE                 4342 _TStream_TStream:
0010BE 0F30            4370         PUSH.W  R4, R5
0010C0 9972000C        4372         SUB.W   R7,#0CH
                       4382 ; rtxcobj.c  902        
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  47

ADDR   CODE            LINE SOURCELINE
                       4383 ; rtxcobj.c  903         struct TStream *Ptr;
                       4384 ; rtxcobj.c  904        
                       4385 ; rtxcobj.c  905         if(this>(struct TStream *)0)
0010C4 8951            4387         MOV.W   R5,R1
0010C6 8940            4388         MOV.W   R4,R0
0010C8 99540000        4389         CMP.W   R5,#00H
0010CC F202            4390         BNE     _170
0010CE 99440000        4391         CMP.W   R4,#00H
0010CE 99440000        4391         CMP.W   R4,#00H
0010D2                 4392 _170:
0010D2 F966            4395         BL      _169
                       4396 ; rtxcobj.c  906         {
                       4397 ; rtxcobj.c  907          Ptr=this;
0010D4 8915            4399         MOV.W   R1,R5
0010D6 8904            4400         MOV.W   R0,R4
                       4402 ; rtxcobj.c  908          this->ID=NQUEUES+1;
0010D8 8C5F0A          4404         MOV.W   [R7+10],R5
0010DB 8C4F08          4405         MOV.W   [R7+8],R4
0010DE 99400012        4406         ADD.W   R4,#012H
0010E2 8C5F06          4409         MOV.W   [R7+6],R5
0010E5 8C4F04          4410         MOV.W   [R7+4],R4
0010E8 8C570A          4411         MOV.W   R5,[R7+10]
0010EB 8C4708          4412         MOV.W   R4,[R7+8]
0010EE 86AC42          4413         MOV.B   ES,R5L
0010F1 B44112          4414         MOV.B   [R4+18],#01H
                       4417 ; rtxcobj.c  909          while(Ptr!=&TStreamPartition[0])
0010F4 9954rrrr        4419         CMP.W   R5,#SEG( _TStreamPartition )
0010F8 F202            4420         BNE     _171
0010FA 9944rrrr        4421         CMP.W   R4,#SOF( _TStreamPartition )
0010FA 9944rrrr        4421         CMP.W   R4,#SOF( _TStreamPartition )
0010FE                 4422 _171:
0010FE F30E            4425         BEQ     _167
0010FE F30E            4425         BEQ     _167
001100                 4426 _166:
                       4427 ; rtxcobj.c  910          {
                       4428 ; rtxcobj.c  911           this->ID++;
001100 8C5706          4430         MOV.W   R5,[R7+6]
001103 8C4704          4431         MOV.W   R4,[R7+4]
001106 86AC42          4432         MOV.B   ES,R5L
001109 A241            4433         ADDS.B  [R4],#01H
                       4434 ; rtxcobj.c  912           Ptr--;
00110B 9902001C        4436         SUB.W   R0,#01CH
00110F 9914rrrr        4440         CMP.W   R1,#SEG( _TStreamPartition )
001113 F2F6            4441         BNE     _166
001115 9904rrrr        4442         CMP.W   R0,#SOF( _TStreamPartition )
001119 F2F3            4443         BNE     _166
                       4444 ; rtxcobj.c  913          }
00111C                 4446 _167:
                       4447 ; rtxcobj.c  914          this->ObjectID=TStreamID;
00111C 8C170A          4449         MOV.W   R1,[R7+10]
00111F 8C0708          4450         MOV.W   R0,[R7+8]
001122 862C42          4451         MOV.B   ES,R1L
001125 BA06            4452         MOV.W   [R0],#06H
                       4456 ; rtxcobj.c  915          this->Width=width;
001127 862C42          4458         MOV.B   ES,R1L
00112A 8C2814          4459         MOV.W   [R0+20],R2
                       4462 ; rtxcobj.c  916          this->Depth=depth;
00112D 8C170A          4464         MOV.W   R1,[R7+10]
001130 8C0708          4465         MOV.W   R0,[R7+8]
001133 862C42          4466         MOV.B   ES,R1L
001136 8C3816          4467         MOV.W   [R0+22],R3
                       4470 ; rtxcobj.c  917          this->Handle=new(this->Width*this->Depth);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  48

ADDR   CODE            LINE SOURCELINE
001139 862C42          4472         MOV.B   ES,R1L
00113C 8C0014          4473         MOV.W   R0,[R0+20]
00113F E403            4476         MULU.W  R0,R3
001141 8900            4477         MOV.W   R0,R0
001143 9819            4478         SEXT.W  R1
001145 C5F789          4479         CALL    _new
001148 8C370A          4482         MOV.W   R3,[R7+10]
00114B 8C2708          4483         MOV.W   R2,[R7+8]
00114E 866C42          4484         MOV.B   ES,R3L
001151 8C0A18          4485         MOV.W   [R2+24],R0
001154 8C1A1A          4486         MOV.W   [R2+26],R1
                       4489 ; rtxcobj.c  918          if (this->Handle)
001157 8913            4491         MOV.W   R1,R3
001159 8902            4492         MOV.W   R0,R2
00115B 862C42          4493         MOV.B   ES,R1L
00115E 8C101A          4494         MOV.W   R1,[R0+26]
001161 8C0018          4495         MOV.W   R0,[R0+24]
001164 8C1F02          4498         MOV.W   [R7+2],R1
001167 8A0F            4499         MOV.W   [R7],R0
001169 6910            4500         OR.W    R1,R0
00116B F31A            4501         BEQ     _169
                       4502 ; rtxcobj.c  919           KS_defqueue(this->ID,this->Width,this->Depth,this->Handle,0);
00116D 8C5706          4504         MOV.W   R5,[R7+6]
001170 8C4704          4505         MOV.W   R4,[R7+4]
001173 86AC42          4506         MOV.B   ES,R5L
001176 8204            4507         MOV.B   R0L,[R4]
001178 8C370A          4508         MOV.W   R3,[R7+10]
00117B 8C2708          4509         MOV.W   R2,[R7+8]
00117E 866C42          4510         MOV.B   ES,R3L
001181 8C1214          4511         MOV.W   R1,[R2+20]
001184 8C370A          4512         MOV.W   R3,[R7+10]
001187 8C2708          4513         MOV.W   R2,[R7+8]
00118A 866C42          4514         MOV.B   ES,R3L
00118D 8C2216          4515         MOV.W   R2,[R2+22]
001190 B930            4519         MOV.W   R3,#00H
001192 8C5702          4520         MOV.W   R5,[R7+2]
001195 8A47            4521         MOV.W   R4,[R7]
001197 0F30            4522         PUSH.W  R4, R5
                       4524         CALL    _KS_defqueue
001199 C4rrrrrr       +4524 ;       FCALL   _KS_defqueue
00119D A974            4525         ADDS.W  R7,#04H
                       4527 ; rtxcobj.c  920         }
0011A0                 4529 _169:
                       4530 ; rtxcobj.c  921        }
0011A0 9970000C        4532         ADD.W   R7,#0CH
0011A4 2F30            4534         POP.W   R4, R5
0011A6 D680            4536         RET
                       4538 ; rtxcobj.c  922        
                       4539 ; rtxcobj.c  923        
                       4540 ; rtxcobj.c  924        void            TStream__TStream(struct TStream *this)
                       4541 ; rtxcobj.c  925        {
                       4542         ALIGN   1
                       4544         PUBLIC  _TStream__TStream
0011A8                 4545 _TStream__TStream:
                       4551 ; rtxcobj.c  926         if(this>(struct TStream *)0)
0011A8 99140000        4553         CMP.W   R1,#00H
0011AC F202            4554         BNE     _175
0011AE 99040000        4555         CMP.W   R0,#00H
0011AE 99040000        4555         CMP.W   R0,#00H
0011B2                 4556 _175:
0011B2 F90D            4557         BL      _174
                       4558 ; rtxcobj.c  927         {
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  49

ADDR   CODE            LINE SOURCELINE
                       4559 ; rtxcobj.c  928          this->ID=0;
0011B4 862C42          4561         MOV.B   ES,R1L
0011B7 B40012          4562         MOV.B   [R0+18],#00H
                       4563 ; rtxcobj.c  929          if (this->Handle)
0011BA 862C42          4565         MOV.B   ES,R1L
0011BD 8C2018          4566         MOV.W   R2,[R0+24]
0011C0 8C301A          4567         MOV.W   R3,[R0+26]
0011C3 8913            4568         MOV.W   R1,R3
0011C5 8902            4569         MOV.W   R0,R2
0011C7 6932            4570         OR.W    R3,R2
0011C9 F302            4572         BEQ     _174
                       4573 ; rtxcobj.c  930           delete(this->Handle);
0011CB C5F75C          4575         CALL    _delete
                       4576 ; rtxcobj.c  931         }
0011CE                 4578 _174:
                       4579 ; rtxcobj.c  932        }
0011CE D680            4581         RET
                       4583 ; rtxcobj.c  933        
                       4584 ; rtxcobj.c  934        
                       4585 ; rtxcobj.c  935        char*           TStream_Get(struct TStream *this, void* Dest)
                       4586 ; rtxcobj.c  936        {
                       4587         ALIGN   1
                       4589         PUBLIC  _TStream_Get
0011D0                 4590 _TStream_Get:
0011D0 0F30            4594         PUSH.W  R4, R5
                       4600 ; rtxcobj.c  937         if(this>(struct TStream *)0)
0011D2 99140000        4602         CMP.W   R1,#00H
0011D6 F202            4603         BNE     _178
0011D8 99040000        4604         CMP.W   R0,#00H
0011D8 99040000        4604         CMP.W   R0,#00H
0011DC                 4605 _178:
0011DC F90A            4606         BL      _176
                       4607 ; rtxcobj.c  938         {
                       4608 ; rtxcobj.c  939          KS_dequeuew(this->ID,Dest);
0011DE 862C42          4610         MOV.B   ES,R1L
0011E1 840012          4611         MOV.B   R0L,[R0+18]
0011E4 8953            4613         MOV.W   R5,R3
0011E6 8942            4614         MOV.W   R4,R2
                       4619         CALL    _KS_dequeuew
0011E8 C4rrrrrr       +4619 ;       FCALL   _KS_dequeuew
                       4622 ; rtxcobj.c  940          return(Dest);
0011EC 8915            4624         MOV.W   R1,R5
0011EE 8904            4625         MOV.W   R0,R4
0011F0 FE02            4628         BR      _177
                       4629 ; rtxcobj.c  941         }
0011F2                 4631 _176:
                       4632 ; rtxcobj.c  942         return(0);
0011F2 B910            4634         MOV.W   R1,#00H
0011F4 B900            4635         MOV.W   R0,#00H
                       4637 ; rtxcobj.c  943        }       
0011F6                 4639 _177:
0011F6 2F30            4640         POP.W   R4, R5
0011F8 D680            4642         RET
                       4644 ; rtxcobj.c  944        
                       4645 ; rtxcobj.c  945        
                       4646 ; rtxcobj.c  946        void            TStream_Put(struct TStream *this, void* Source)
                       4647 ; rtxcobj.c  947        {
                       4648         ALIGN   1
                       4650         PUBLIC  _TStream_Put
0011FA                 4651 _TStream_Put:
                       4659 ; rtxcobj.c  948         if(this>(struct TStream *)0)
0011FA 99140000        4661         CMP.W   R1,#00H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  50

ADDR   CODE            LINE SOURCELINE
0011FE F202            4662         BNE     _180
001200 99040000        4663         CMP.W   R0,#00H
001200 99040000        4663         CMP.W   R0,#00H
001204                 4664 _180:
001204 F905            4665         BL      _179
                       4666 ; rtxcobj.c  949         {
                       4667 ; rtxcobj.c  950          KS_enqueuew(this->ID,Source);
001206 862C42          4669         MOV.B   ES,R1L
001209 840012          4670         MOV.B   R0L,[R0+18]
                       4672         CALL    _KS_enqueuew
00120C C4rrrrrr       +4672 ;       FCALL   _KS_enqueuew
                       4674 ; rtxcobj.c  951         }
001210                 4676 _179:
                       4677 ; rtxcobj.c  952        }       
001210 D680            4679         RET
                       4681 ; rtxcobj.c  953        
                       4682 ; rtxcobj.c  954        
                       4683 ; rtxcobj.c  955        
                       4684 ; rtxcobj.c  956        TStream *newTStream(int Width, int Depth)
                       4686 ; rtxcobj.c  957        {
                       4687         ALIGN   1
                       4689         PUBLIC  _newTStream
001212                 4690 _newTStream:
001212 0F70            4696         PUSH.W  R4, R5, R6
001214 A97A            4698         ADDS.W  R7,#0AH
001216 8961            4702         MOV.W   R6,R1
001218 8C0F04          4705         MOV.W   [R7+4],R0
                       4712 ; rtxcobj.c  958        
                       4713 ; rtxcobj.c  959        /* VAR */
                       4714 ; rtxcobj.c  960         TStream *Stream;
                       4715 ; rtxcobj.c  961        
                       4716 ; rtxcobj.c  962        /* BEGIN */
                       4717 ; rtxcobj.c  963         if(TStreamMap==0)
00121B 964842rr        4719         MOV.B   ES,#SEG( _TStreamMap )
00121F 9908rrrr        4720         MOV.W   R0,#SOF( _TStreamMap )
001223 8200            4721         MOV.B   R0L,[R0]
001225 F215            4722         BNE     _182
                       4723 ; rtxcobj.c  964         {
                       4724 ; rtxcobj.c  965          TStreamMap=KS_create_part(&TStreamPartition,
                       4725 ; rtxcobj.c  966                                       sizeof(struct TStream),DNQUEUES);
001227 9918rrrr        4727         MOV.W   R1,#SEG( _TStreamPartition )
00122B 9908rrrr        4728         MOV.W   R0,#SOF( _TStreamPartition )
00122F 9928001C        4729         MOV.W   R2,#01CH
001233 99380008        4730         MOV.W   R3,#08H
                       4731         CALL    _KS_create_part
001237 C4rrrrrr       +4731 ;       FCALL   _KS_create_part
00123B 964842rr        4732         MOV.B   ES,#SEG( _TStreamMap )
00123F 9918rrrr        4733         MOV.W   R1,#SOF( _TStreamMap )
001243 8209            4734         MOV.B   [R1],R0L
                       4735 ; rtxcobj.c  967          if(TStreamMap==0)
001245 6100            4737         OR.B    R0L,R0L
001247 F204            4738         BNE     _182
                       4739 ; rtxcobj.c  968           return(0);
001249 B910            4741         MOV.W   R1,#00H
00124B B900            4742         MOV.W   R0,#00H
00124D FE5D            4743         BR      _187
                       4744 ; rtxcobj.c  969         }
001250                 4746 _182:
                       4751 ; rtxcobj.c  970         Stream=KS_alloc(TStreamMap);
001250 964842rr        4753         MOV.B   ES,#SEG( _TStreamMap )
001254 9908rrrr        4754         MOV.W   R0,#SOF( _TStreamMap )
001258 8200            4755         MOV.B   R0L,[R0]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  51

ADDR   CODE            LINE SOURCELINE
                       4756         CALL    _KS_alloc
00125A C4rrrrrr       +4756 ;       FCALL   _KS_alloc
                       4758 ; rtxcobj.c  971         if(Stream==0)
00125E 8931            4760         MOV.W   R3,R1
001260 8920            4761         MOV.W   R2,R0
001262 6910            4762         OR.W    R1,R0
001264 F203            4765         BNE     _183
                       4766 ; rtxcobj.c  972         {
                       4767 ; rtxcobj.c  973        //  LogEvent(EventNoMoreStreams,0);
                       4768 ; rtxcobj.c  974          return(0);
001266 B910            4770         MOV.W   R1,#00H
001268 B900            4771         MOV.W   R0,#00H
00126A FE4E            4772         BR      _187
                       4773 ; rtxcobj.c  975         }
00126C                 4775 _183:
                       4782 ; rtxcobj.c  976         Stream->TStream=TStream_TStream;
00126C 8913            4784         MOV.W   R1,R3
00126E 8902            4785         MOV.W   R0,R2
001270 99000002        4786         ADD.W   R0,#02H
001274 862C42          4787         MOV.B   ES,R1L
001277 9A08rrrr        4788         MOV.W   [R0],#SOF( _TStream_TStream )
00127B 9D080002rrrr    4789         MOV.W   [R0+2],#SEG( _TStream_TStream )
                       4790 ; rtxcobj.c  977         Stream->_TStream=TStream__TStream;
001281 8953            4792         MOV.W   R5,R3
001283 8942            4793         MOV.W   R4,R2
001285 99400006        4794         ADD.W   R4,#06H
001289 86AC42          4795         MOV.B   ES,R5L
00128C 9A48rrrr        4796         MOV.W   [R4],#SOF( _TStream__TStream )
001290 9D480002rrrr    4797         MOV.W   [R4+2],#SEG( _TStream__TStream )
                       4798 ; rtxcobj.c  978         Stream->Put=TStream_Put;
001296 8953            4800         MOV.W   R5,R3
001298 8942            4801         MOV.W   R4,R2
00129A 9940000E        4802         ADD.W   R4,#0EH
00129E 86AC42          4803         MOV.B   ES,R5L
0012A1 9A48rrrr        4804         MOV.W   [R4],#SOF( _TStream_Put )
0012A5 9D480002rrrr    4805         MOV.W   [R4+2],#SEG( _TStream_Put )
                       4806 ; rtxcobj.c  979         Stream->Get=TStream_Get;
0012AB 8953            4808         MOV.W   R5,R3
0012AD 8942            4809         MOV.W   R4,R2
0012AF 9940000A        4810         ADD.W   R4,#0AH
0012B3 86AC42          4811         MOV.B   ES,R5L
0012B6 9A48rrrr        4812         MOV.W   [R4],#SOF( _TStream_Get )
0012BA 9D480002rrrr    4813         MOV.W   [R4+2],#SEG( _TStream_Get )
                       4814 ; rtxcobj.c  980         Stream->TStream(Stream,Width,Depth);
0012C0 862C42          4816         MOV.B   ES,R1L
0012C3 8A40            4817         MOV.W   R4,[R0]
0012C5 8C5002          4818         MOV.W   R5,[R0+2]
0012C8 8C3F02          4819         MOV.W   [R7+2],R3
0012CB 8A2F            4820         MOV.W   [R7],R2
0012CD 8913            4821         MOV.W   R1,R3
0012CF 8902            4822         MOV.W   R0,R2
0012D1 8C2704          4827         MOV.W   R2,[R7+4]
0012D4 8936            4828         MOV.W   R3,R6
0012D6 C4rrrrrr        4829         FCALL   __ICALL
                       4838 ; rtxcobj.c  981         if(Stream->ID>(NQUEUES+DNQUEUES+1))
0012DA 8C1702          4840         MOV.W   R1,[R7+2]
0012DD 8A07            4841         MOV.W   R0,[R7]
0012DF 862C42          4842         MOV.B   ES,R1L
0012E2 94041209        4843         CMP.B   [R0+18],#09H
0012E6 F90D            4844         BL      _184
                       4845 ; rtxcobj.c  982         {
                       4846 ; rtxcobj.c  983          KS_free(TStreamMap,Stream);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  52

ADDR   CODE            LINE SOURCELINE
0012E8 964842rr        4848         MOV.B   ES,#SEG( _TStreamMap )
0012EC 9908rrrr        4849         MOV.W   R0,#SOF( _TStreamMap )
0012F0 8200            4850         MOV.B   R0L,[R0]
0012F2 8C3702          4851         MOV.W   R3,[R7+2]
0012F5 8A27            4852         MOV.W   R2,[R7]
                       4853         CALL    _KS_free
0012F7 C4rrrrrr       +4853 ;       FCALL   _KS_free
                       4857 ; rtxcobj.c  984          return(0);
0012FB B910            4859         MOV.W   R1,#00H
0012FD B900            4860         MOV.W   R0,#00H
0012FF FE04            4861         BR      _187
                       4862 ; rtxcobj.c  985         }
001302                 4864 _184:
                       4866 ; rtxcobj.c  986         return(Stream);
001302 8C1702          4868         MOV.W   R1,[R7+2]
001305 8A07            4869         MOV.W   R0,[R7]
                       4872 ; rtxcobj.c  987        }
001308                 4874 _187:
001308 A976            4875         ADDS.W  R7,#06H
00130A 2F70            4877         POP.W   R4, R5, R6
00130C D680            4879         RET
                       4882 ; rtxcobj.c  988        
                       4883 ; rtxcobj.c  989        
                       4884 ; rtxcobj.c  990        void deleteTStream(TStream* Stream)
                       4885 ; rtxcobj.c  991        {
                       4886         ALIGN   1
                       4888         PUBLIC  _deleteTStream
00130E                 4889 _deleteTStream:
00130E 0F30            4893         PUSH.W  R4, R5
001310 A97C            4895         ADDS.W  R7,#0CH
                       4899 ; rtxcobj.c  992         Stream->_TStream(Stream);
001312 862C42          4901         MOV.B   ES,R1L
001315 8C4006          4902         MOV.W   R4,[R0+6]
001318 8C5008          4903         MOV.W   R5,[R0+8]
00131B 8C1F02          4904         MOV.W   [R7+2],R1
00131E 8A0F            4905         MOV.W   [R7],R0
001320 C4rrrrrr        4910         FCALL   __ICALL
                       4913 ; rtxcobj.c  993         KS_free(TStreamMap,Stream);
001324 964842rr        4915         MOV.B   ES,#SEG( _TStreamMap )
001328 9908rrrr        4916         MOV.W   R0,#SOF( _TStreamMap )
00132C 8200            4917         MOV.B   R0L,[R0]
00132E 8C3702          4918         MOV.W   R3,[R7+2]
001331 8A27            4919         MOV.W   R2,[R7]
                       4920         CALL    _KS_free
001333 C4rrrrrr       +4920 ;       FCALL   _KS_free
                       4924 ; rtxcobj.c  994        }
001337 A974            4926         ADDS.W  R7,#04H
001339 2F30            4928         POP.W   R4, R5
00133B D680            4930         RET
                       4932 ; rtxcobj.c  995        
                       4933 ; rtxcobj.c  996        
                       4938         EXTRN   HCODE(_KS_resume)
                       4941         EXTRN   HCODE(_KS_pend)
                       4944         EXTRN   HCODE(_KS_inqtimer)
                       4947         EXTRN   HCODE(_KS_alloc_timer)
                       4950         EXTRN   HCODE(_KS_waitt)
                       4953         EXTRN   HCODE(_KS_inqres)
                       4956         EXTRN   HCODE(_malloc)
                       4959         EXTRN   HCODE(_KS_dequeuew)
                       4962         EXTRN   HCODE(_KS_free)
                       4965         EXTRN   HCODE(_KS_wait)
                       4968         EXTRN   HCODE(_KS_defqueue)
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  53

ADDR   CODE            LINE SOURCELINE
                       4971         EXTRN   HCODE(_KS_alloc_task)
                       4974         EXTRN   HCODE(_KS_suspend)
                       4979         EXTRN   HCODE(_KS_waitm)
                       4982         EXTRN   HCODE(_KS_free_timer)
                       4985         EXTRN   HCODE(_free)
                       4988         EXTRN   HCODE(_KS_terminate)
                       4991         EXTRN   HCODE(_KS_defpriority)
                       4994         EXTRN   HCODE(_KS_alloc)
000000                 4998 RTXCOBJ_CLR_FA  SEGMENT HDATA INSEGMENT CLEAR
000000                 4999         RSEG    RTXCOBJ_CLR_FA
                       5000         PUBLIC  _TThreadPartition
                       5001         ALIGN   1
000000                 5002 _TThreadPartition:      DS      1152
   |  RESERVED             
00047F
                       5005         ALIGN   1
000480                 5006 _TTimerPartition:       DS      1024
   |  RESERVED             
00087F
                       5009         EXTRN   HCODE(_KS_unlock)
                       5012         EXTRN   HCODE(_KS_start_timer)
                       5018         EXTRN   HCODE(_KS_deftask)
                       5021         EXTRN   HCODE(_KS_stop_timer)
                       5025         PUBLIC  _TEventListPartition
                       5026         ALIGN   1
000880                 5027 _TEventListPartition:   DS      530
   |  RESERVED             
000A91
                       5028         EXTRN   HCODE(__ICALL)
                       5031         EXTRN   HCODE(_KS_inqpriority)
                       5034         PUBLIC  _HeapAlloc
                       5035         ALIGN   1
000A92                 5036 _HeapAlloc:     DS      4
   |  RESERVED             
000A95
                       5039         EXTRN   HCODE(_KS_signal)
                       5042         EXTRN   HCODE(_KS_delay)
                       5043         EXTRN   IDATA(__lc_bs)
                       5046         EXTRN   HCODE(_KS_restart_timer)
                       5050         PUBLIC  _TResourcePartition
                       5051         ALIGN   1
000A96                 5052 _TResourcePartition:    DS      3584
   |  RESERVED             
001895
                       5056         PUBLIC  _TEventPartition
                       5057         ALIGN   1
001896                 5058 _TEventPartition:       DS      4096
   |  RESERVED             
002895
                       5059         EXTRN   HCODE(__SDIVL)
                       5065         EXTRN   HCODE(_KS_user)
                       5068         EXTRN   HCODE(_KS_create_part)
                       5072         PUBLIC  _TStreamPartition
                       5073         ALIGN   1
002896                 5074 _TStreamPartition:      DS      224
   |  RESERVED             
002975
                       5079         PUBLIC  _stk
002976                 5080 _stk:   DS      16384
   |  RESERVED             
006975
                       5083         EXTRN   HCODE(_KS_lockw)
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  54

ADDR   CODE            LINE SOURCELINE
                       5086         EXTRN   HCODE(_KS_enqueuew)
                       5089         EXTRN   HCODE(_KS_inqsema)
                       5092         EXTRN   HCODE(_KS_execute)
                       5093         EXTRN   DATA(__lc_ub_xvwbuffer)
                       5094         EXTRN   DATA(__lc_ue_xvwbuffer)
                       5095         CALLS   'malloc2', 'malloc'
                       5096         CALLS   'new', 'KS_user'
                       5097         CALLS   'free2', 'free'
                       5098         CALLS   'delete', 'KS_user'
                       5099         CALLS   'Sleep', 'KS_delay'
                       5100         CALLS   'TEvent_Waitt', 'KS_wait'
                       5101         CALLS   'TEvent_Waitt', 'KS_waitt'
                       5102         CALLS   'TEvent_Waitt', 'KS_wait'
                       5103         CALLS   'TEvent_Signal', 'KS_signal'
                       5104         CALLS   'TEvent_Pend', 'KS_pend'
                       5105         CALLS   'TEvent_InqSema', 'KS_inqsema'
                       5106         CALLS   'newTEvent', 'KS_create_part'
                       5107         CALLS   'newTEvent', 'KS_alloc'
                       5108         CALLS   'newTEvent', 'KS_free'
                       5109         CALLS   'deleteTEvent', 'KS_free'
                       5110         CALLS   'TResource_Lock', 'KS_lockw'
                       5111         CALLS   'TResource_Unlock', 'KS_unlock'
                       5112         CALLS   'TResource_Owner', 'KS_inqres'
                       5113         CALLS   'newTResource', 'KS_create_part'
                       5114         CALLS   'newTResource', 'KS_alloc'
                       5115         CALLS   'newTResource', 'KS_free'
                       5116         CALLS   'deleteTResource', 'KS_free'
                       5117         CALLS   'TThread_TThread', 'KS_alloc_task'
                       5118         CALLS   'TThread_TThread', 'KS_deftask'
                       5119         CALLS   'TThread_Execute', 'KS_execute'
                       5120         CALLS   'TThread__TThread', 'KS_terminate'
                       5121         CALLS   'TThread_Suspend', 'KS_suspend'
                       5122         CALLS   'TThread_Suspend', 'KS_delay'
                       5123         CALLS   'TThread_Resume', 'KS_resume'
                       5124         CALLS   'TThread_GetPriority', 'KS_inqpriority'
                       5125         CALLS   'TThread_SetPriority', 'KS_defpriority'
                       5126         CALLS   'newTThread', 'KS_create_part'
                       5127         CALLS   'newTThread', 'KS_alloc'
                       5128         CALLS   'newTThread', 'KS_free'
                       5129         CALLS   'deleteTThread', 'KS_free'
                       5130         CALLS   'TTimer_TTimer', 'KS_alloc_timer'
                       5131         CALLS   'TTimer_TTimer', 'newTEvent'
                       5132         CALLS   'TTimer__TTimer', 'deleteTEvent'
                       5133         CALLS   'TTimer__TTimer', 'KS_free_timer'
                       5134         CALLS   'TTimer_SetPeriod', 'KS_start_timer'
                       5135         CALLS   'TTimer_SetPeriod', 'KS_stop_timer'
                       5136         CALLS   'TTimer_SetPeriod', 'KS_restart_timer'
                       5137         CALLS   'TTimer_Tick', 'KS_start_timer'
                       5138         CALLS   'TTimer_Tick', 'KS_restart_timer'
                       5139         CALLS   'newTTimer', 'KS_create_part'
                       5140         CALLS   'newTTimer', 'KS_alloc'
                       5141         CALLS   'newTTimer', 'KS_free'
                       5142         CALLS   'deleteTTimer', 'KS_free'
                       5143         CALLS   'TEventList_Wait', 'newTTimer'
                       5144         CALLS   'TEventList_Wait', 'KS_waitm'
                       5145         CALLS   'TEventList_Wait', 'KS_inqtimer'
                       5146         CALLS   'TEventList_Wait', 'deleteTTimer'
                       5147         CALLS   'newTEventList', 'KS_create_part'
                       5148         CALLS   'newTEventList', 'KS_alloc'
                       5149         CALLS   'deleteTEventList', 'KS_free'
                       5150         CALLS   'TStream_TStream', 'new'
                       5151         CALLS   'TStream_TStream', 'KS_defqueue'
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  55

ADDR   CODE            LINE SOURCELINE
                       5152         CALLS   'TStream__TStream', 'delete'
                       5153         CALLS   'TStream_Get', 'KS_dequeuew'
                       5154         CALLS   'TStream_Put', 'KS_enqueuew'
                       5155         CALLS   'newTStream', 'KS_create_part'
                       5156         CALLS   'newTStream', 'KS_alloc'
                       5157         CALLS   'newTStream', 'KS_free'
                       5158         CALLS   'deleteTStream', 'KS_free'
