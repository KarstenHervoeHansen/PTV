XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   1
U:\Pt5201\Design\DDD\SW\Master\Source\MAKE\2_1\temp\xa\unitprg.src
ADDR   CODE            LINE SOURCELINE
                          1 ; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
                          2 ; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -I..\..\rtxcdef\xa
                          3 ;          -I..\..\rtxc\xa\include -I..\..\code\include\1_0 -I..\..\app_spec\xa
                          4 ;          -Ml -O2 -s
                          6 $NOZPAGE
                          7         NAME    UNITPRG
                         11 ; unitprg.c    1        /************************************************************************
                            ****/
                         12 ; unitprg.c    2        /* MODULE:                                                               
                               */
                         13 ; unitprg.c    3        /*  unitprg.c -                                                          
                                                                         */
                         14 ; unitprg.c    4        /************************************************************************
                            ****/
                         15 ; unitprg.c    5        /* FUNCTIONS:                                                            
                               */
                         16 ; unitprg.c    6        /*                                                                       
                               */
                         17 ; unitprg.c    7        /*                                                                       
                               */
                         18 ; unitprg.c    8        /* TASKS:                                                                
                               */
                         19 ; unitprg.c    9        /*                                                                       
                               */
                         20 ; unitprg.c   10        /* NOTES:                                                                
                               */
                         21 ; unitprg.c   11        /*                                                                       
                               */
                         22 ; unitprg.c   12        /************************************************************************
                            ****/
                         23 ; unitprg.c   13        /*
                         24 ; unitprg.c   14         *   PTV software for PT5201    
                         25 ; unitprg.c   15         *   Copyright (c) 
                         26 ; unitprg.c   16         *   ProTeleVision Technologies A/S.
                         27 ; unitprg.c   17         *   ALL RIGHTS RESERVED
                         28 ; unitprg.c   18        */
                         29 ; unitprg.c   19        /************************************************************************
                            ****/
                         30 ; unitprg.c   20        #include <stdlib.h>
                         45 ; unitprg.c   21        #include <string.h>
                         48 ; unitprg.c   22        
                         49 ; unitprg.c   23        #include "define.h"        // Standard PTV defines
                         52 ; unitprg.c   24        #include "nv_drv.h"
                         56 ; unitprg.c   25        #include "unitprg.h"
                         63 ; unitprg.c   26        #include "led_hw.h"
                         66 ; unitprg.c   27        #include "rs232.h"
                        399 ; unitprg.c   28        
                        400 ; unitprg.c   29        volatile UI BBSPGResetPort _at( 0x6a018);               // Port defined i
                            n PLD
                        401 ; unitprg.c   30        
                        402 ; unitprg.c   31        _bit UnitPgmMode;
                        403 ; unitprg.c   32        
                        404 ; unitprg.c   33        /************************************************************************
                            **/
                        405 ; unitprg.c   34        /* BBSPGReset                                                            
                                                                                                                             
                                                                      UNITPRG.C     */
                        406 ; unitprg.c   35        /*                                                                       
                                                                                                                             
                                                                                                                             
                                                    */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   2

ADDR   CODE            LINE SOURCELINE
                        407 ; unitprg.c   36        /* Author:       Kim Engedahl, DEV, 000330                               
                                                                                                                             
                                            */
                        408 ; unitprg.c   37        /* Revised:      000330, KEn, DEV                                        
                                                                                                                             
                                                    */
                        409 ; unitprg.c   38        /*                                                                       
                                                                                                                             
                                                                                                                             
                                                    */
                        410 ; unitprg.c   39        /* Function:                                                             
                                                                                                                             
                                                                                                            */
                        411 ; unitprg.c   40        /* Remarks:                                                              
                                                                                                                             
                                                                                                                            *
                            /
                        412 ; unitprg.c   41        /* Returns:                                                              
                                                                                                                             
                                                                                                                            *
                            /
                        413 ; unitprg.c   42        /* Updates:                                                              
                                                                                                                             
                                                                                                                            *
                            /
                        414 ; unitprg.c   43        /************************************************************************
                            **/
                        415 ; unitprg.c   44        void BBSPGReset( bool SPGReset, bool BBReset, bool SPGPrg)
                        416 ; unitprg.c   45        {
000000                  417 UNITPRG_PR      SEGMENT HCODE
000000                  418         RSEG    UNITPRG_PR
                        419         ALIGN   1
                        421         PUBLIC  _BBSPGReset
000000                  422 _BBSPGReset:
                        434 ; unitprg.c   46                UI tmp = 3;
000000 B933             436         MOV.W   R3,#03H
                        438 ; unitprg.c   47        
                        439 ; unitprg.c   48                if ( SPGReset)
000002 6900             441         OR.W    R0,R0
000004 F301             442         BEQ     _3
                        443 ; unitprg.c   49                        tmp &= 0xFE;
000006 B932             445         MOV.W   R3,#02H
000008                  448 _3:
                        449 ; unitprg.c   50        
                        450 ; unitprg.c   51                if ( BBReset)
000008 6911             452         OR.W    R1,R1
00000A F302             453         BEQ     _4
                        454 ; unitprg.c   52                        tmp &= 0xFD;
00000C 993500FD         456         AND.W   R3,#0FDH
000010                  459 _4:
                        460 ; unitprg.c   53        
                        461 ; unitprg.c   54                if ( SPGPrg)
000010 6922             463         OR.W    R2,R2
000012 F302             464         BEQ     _5
                        465 ; unitprg.c   55                        tmp |= 0x04;
000014 99360004         467         OR.W    R3,#04H
000018                  470 _5:
                        471 ; unitprg.c   56        
                        472 ; unitprg.c   57                BBSPGResetPort = tmp;
000018 96484206         474         MOV.B   ES,#SEG( _BBSPGResetPort )
00001C 9908A018         475         MOV.W   R0,#SOF( _BBSPGResetPort )
000020 8A38             476         MOV.W   [R0],R3
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   3

ADDR   CODE            LINE SOURCELINE
                        477 ; unitprg.c   58        }
000022 D680             479         RET
                        485 ; unitprg.c   59        
                        486 ; unitprg.c   60        /************************************************************************
                            **/
                        487 ; unitprg.c   61        /* BBSPGCommunication                                                    
                                                                                                                             
                                              UNITPRG.C     */
                        488 ; unitprg.c   62        /*                                                                       
                                                                                                                             
                                                                                                                             
                                                    */
                        489 ; unitprg.c   63        /* Author:       Kim Engedahl, DEV, 000407                               
                                                                                                                             
                                            */
                        490 ; unitprg.c   64        /* Revised:      000607, KEn DEV                                         
                                                                                                                             
                                                            */
                        491 ; unitprg.c   65        /*                                                                       
                                                                                                                             
                                                                                                                            *
                            /
                        492 ; unitprg.c   66        /* Function:                                                             
                                                                                                                             
                                                                                                            */
                        493 ; unitprg.c   67        /* Remarks:                                                              
                                                                                                                             
                                                                                                                            *
                            /
                        494 ; unitprg.c   68        /* Returns:                                                              
                                                                                                                             
                                                                                                                            *
                            /
                        495 ; unitprg.c   69        /* Updates:                                                              
                                                                                                                             
                                                                                                                            *
                            /
                        496 ; unitprg.c   70        /************************************************************************
                            **/
                        497 ; unitprg.c   71        void BBSPGCommunication( int unit)
                        498 ; unitprg.c   72        {
                        499         ALIGN   1
                        501         PUBLIC  _BBSPGCommunication
000024                  502 _BBSPGCommunication:
000024 0F30             506         PUSH.W  R4, R5
000026 8950             509         MOV.W   R5,R0
                        517 ; unitprg.c   73                UI i;
                        518 ; unitprg.c   74                bool Test1LEDFlag = FALSE;
000028 B940             520         MOV.W   R4,#00H
                        522 ; unitprg.c   75        
                        523 ; unitprg.c   76                EA = 0;
00002A 080337           525         CLR     0337H
                        526 ; unitprg.c   77        
                        527 ; unitprg.c   78                BBSPGReset( true, true, true);                  // Set program bi
                            t and reset units
00002D 9908FFFF         529         MOV.W   R0,#0FFFFH
000031 9918FFFF         530         MOV.W   R1,#0FFFFH
000035 9928FFFF         531         MOV.W   R2,#0FFFFH
000039 C5FFE2           532         CALL    _BBSPGReset
                        533 ; unitprg.c   79        
                        534 ; unitprg.c   80                for ( i = 0; i < 60000; i++)                            //  Wait
00003C B900             536         MOV.W   R0,#00H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   4

ADDR   CODE            LINE SOURCELINE
00003E                  538 _6:
00003E A901             539         ADDS.W  R0,#01H
000040 9904EA60         542         CMP.W   R0,#0EA60H
000044 F1FC             543         BCS     _6
                        544 ; unitprg.c   81                        ;
                        545 ; unitprg.c   82        
                        546 ; unitprg.c   83                if ( unit == 0)
000046 6955             548         OR.W    R5,R5
000048 F208             549         BNE     _7
                        550 ; unitprg.c   84                        BBSPGReset( true, false, true);         // Release reset 
                            for unit to be programmed
00004A 9908FFFF         552         MOV.W   R0,#0FFFFH
00004E B910             554         MOV.W   R1,#00H
000050 9928FFFF         555         MOV.W   R2,#0FFFFH
000054 C5FFD5           556         CALL    _BBSPGReset
000057 FE08             557         BR      _8
000057 FE0800           557         BR      _8
00005A                  558 _7:
                        559 ; unitprg.c   85                else
                        560 ; unitprg.c   86                        BBSPGReset( false, true, true);         // Release reset 
                            for unit to be programmed
00005A 9918FFFF         562         MOV.W   R1,#0FFFFH
00005E B900             563         MOV.W   R0,#00H
000060 9928FFFF         564         MOV.W   R2,#0FFFFH
000064 C5FFCD           565         CALL    _BBSPGReset
000064 C5FFCD00         565         CALL    _BBSPGReset
000068                  566 _8:
                        567 ; unitprg.c   87        
                        568 ; unitprg.c   88                IEH = 0;                                                         
                                                    // Disable ALL interrupts
000068 B64027           570         MOV.B   0427H,#00H
                        571 ; unitprg.c   89                IEL = 0;
00006B B64026           573         MOV.B   0426H,#00H
                        574 ; unitprg.c   90        
                        575 ; unitprg.c   91                UnitPgmMode = 1;
00006E 081rrr           577         SETB    _UnitPgmMode
                        578 ; unitprg.c   92        
                        579 ; unitprg.c   93                TR2 = 0;                                                         
                                                    // Stop timer 2
000071 0802C2           581         CLR     02C2H
                        582 ; unitprg.c   94                T2CON &= 0xCF;                                                  /
                            / Use timer 1 as baud rate generator for both
000074 964518CF         584         AND.B   0418H,#0CFH
                        585 ; unitprg.c   95                T2MOD &= 0xCF;                                                  /
                            /  serial ports.
000078 964519CF         587         AND.B   0419H,#0CFH
                        588 ; unitprg.c   96        
                        589 ; unitprg.c   97                S0CON = 0xD8;                                                    
                                    // UART mode 1: 1 start, 9 data, 1 stop,
00007C 964820D8         591         MOV.B   0420H,#0D8H
                        592 ; unitprg.c   98                                                                                 
                                                                            //  (9th bit used as stop bit)
                        593 ; unitprg.c   99        
                        594 ; unitprg.c  100                S1CON = 0xD8;                                                    
                                    // UART mode 1: 1 start, 9 data, 1 stop,
000080 964824D8         596         MOV.B   0424H,#0D8H
                        597 ; unitprg.c  101                                                                                 
                                                                            //  (9th bit used as stop bit)
                        598 ; unitprg.c  102        
                        599 ; unitprg.c  103                TR1 = 0;                                                         
                                                    // Stop Timer 1, just in case you know
000084 080286           601         CLR     0286H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   5

ADDR   CODE            LINE SOURCELINE
                        602 ; unitprg.c  104        
                        603 ; unitprg.c  105                TMOD &= 0x0F;                                                    
                                    // Timer 1: 16-bit auto-reload timer
000087 96455C0F         605         AND.B   045CH,#0FH
                        606 ; unitprg.c  106        
                        607 ; unitprg.c  107                TH1 = RTH1 = 0xFF;                                      // 115200
                             baud
00008B 964857FF         609         MOV.B   0457H,#0FFH
00008F 97445357         610         MOV.B   0453H,0457H
                        611 ; unitprg.c  108                TL1 = RTL1 = 0xFC;
000093 964856FC         613         MOV.B   0456H,#0FCH
000097 97445256         614         MOV.B   0452H,0456H
                        615 ; unitprg.c  109        
                        616 ; unitprg.c  110                TR1 = 1;                                                         
                                                    // Start Timer 1
00009B 081286           618         SETB    0286H
                        619 ; unitprg.c  111        
                        620 ; unitprg.c  112                RI_0 = 0;                                                        
                                                    // Clear possible Interrupt flag RI_0
00009E 080300           622         CLR     0300H
                        623 ; unitprg.c  113                TI_0 = 0;                                                        
                                                    // Clear possible Interrupt flag TI_0
0000A1 080301           625         CLR     0301H
                        626 ; unitprg.c  114        
                        627 ; unitprg.c  115                RI_1 = 0;                                                        
                                                    // Clear possible Interrupt flag RI_1
0000A4 080320           629         CLR     0320H
                        630 ; unitprg.c  116                TI_1 = 0;                                                        
                                                    // Clear possible Interrupt flag TI_1
0000A7 080321           632         CLR     0321H
                        633 ; unitprg.c  117        
                        634 ; unitprg.c  118                ERI0 = 1;                                                        
                                                    // Enable SIO0 Rx-interrupt
0000AA 081338           636         SETB    0338H
                        637 ; unitprg.c  119                ETI0 = 1;                                                        
                                                    // Enable SIO0 Tx-interrupt
0000AD 081339           639         SETB    0339H
                        640 ; unitprg.c  120        
                        641 ; unitprg.c  121                ERI1 = 1;                                                        
                                                    // Enable SIO1 Rx-interrupt
0000B0 08133A           643         SETB    033AH
                        644 ; unitprg.c  122                ETI1 = 1;                                                        
                                                    // Enable SIO1 Tx-interrupt
0000B3 08133B           646         SETB    033BH
                        647 ; unitprg.c  123        
                        648 ; unitprg.c  124                EA = 1;
0000B6 081337           650         SETB    0337H
                        651 ; unitprg.c  125        
                        652 ; unitprg.c  126                while ( true)
0000BA                  654 _9:
                        655 ; unitprg.c  127                {
                        656 ; unitprg.c  128                        for ( i = 0; i < 60000; i++)
0000BA B900             658         MOV.W   R0,#00H
0000BC                  660 _10:
0000BC A901             661         ADDS.W  R0,#01H
0000BE 9904EA60         664         CMP.W   R0,#0EA60H
0000C2 F1FC             665         BCS     _10
                        666 ; unitprg.c  129                                ;
                        667 ; unitprg.c  130        
                        668 ; unitprg.c  131                        Test1LEDFlag ^= 1;
0000C4 99470001         670         XOR.W   R4,#01H
                        673 ; unitprg.c  132                        TestLEDSet( Test1LED, Test1LEDFlag);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   6

ADDR   CODE            LINE SOURCELINE
0000C8 B901             675         MOV.W   R0,#01H
0000CA 8914             677         MOV.W   R1,R4
                        680         CALL    _TestLEDSet
0000CC C4rrrrrr        +680 ;       FCALL   _TestLEDSet
0000D0 FEF4             684         BR      _9
                        685 ; unitprg.c  133                }
                        686 ; unitprg.c  134        }
0000D2 2F30             688         POP.W   R4, R5
0000D4 D680             690         RET
                        694 ; unitprg.c  135        
06A018                  699         HSEG AT 06A018H
                        700         PUBLIC  _BBSPGResetPort
                        701         ALIGN   1
06A018                  702 _BBSPGResetPort:        DS      2
   |  RESERVED             
06A019
                        705         EXTRN   HCODE(_TestLEDSet)
000000                  708 UNITPRG_CLR_BI@DS       SEGMENT BIT JOIN
000000                  709         RSEG    UNITPRG_CLR_BI@DS
                        710         PUBLIC  _UnitPgmMode
000000 RESERVED         711 _UnitPgmMode:   DBIT    1
000000
                        712         EXTRN   DATA(__lc_ub_xvwbuffer)
                        713         EXTRN   DATA(__lc_ue_xvwbuffer)
                        714         CALLS   'BBSPGCommunication', 'BBSPGReset'
                        715         CALLS   'BBSPGCommunication', 'TestLEDSet'
