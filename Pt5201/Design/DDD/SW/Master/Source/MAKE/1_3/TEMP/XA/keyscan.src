; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -I..\..\rtxcdef\xa
;          -I..\..\rtxc\xa\include -I..\..\code\include\1_0 -I..\..\app_spec\xa
;          -Ml -O2 -s
$CASE
$NOZPAGE
	NAME	KEYSCAN
	SYMB	TOOL, "XA C compiler v2.0", 1
	SYMB	TYPE, 256, "bit", 'g', 0, 1
	SYMB	FILE, "..\\..\\code\\front\\1_0\\keyscan.c"
; keyscan.c    1	// 990818 SAA Adjusted speed and delay in repeat
; keyscan.c    2	//
; keyscan.c    3	
; keyscan.c    4	#include "rtxcobj.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\rtxcobj.h"
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\rtxcapi.h"
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\typedef.h"
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 257, "KOBJNUM", 'T', #3
	SYMB	TYPE, 258, "TASK", 'T', #2
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\rtxstruc.h"
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 259, "KSNUM", 'T', #3
	SYMB	TYPE, 260, "PRIORITY", 'T', #258
	SYMB	TYPE, 261, "TSTATE", 'T', #5
	SYMB	TYPE, 262, "size_t", 'T', #18
	SYMB	TYPE, 263, "TSLICE", 'T', #3
	SYMB	TYPE, 265, 'n', #264, 130
	SYMB	TYPE, 266, 'P', #265
	SYMB	TYPE, 268, 'n', #267, 130
	SYMB	TYPE, 269, 'P', #268
	SYMB	TYPE, 270, 'n', #259, 130
	SYMB	TYPE, 271, 'P', #270
	SYMB	TYPE, 272, 'X', 12, #1, 30, 0
	SYMB	TYPE, 273, 'n', #272, 129
	SYMB	TYPE, 274, 'P', #273
	SYMB	TYPE, 275, "frame", 'S', 24,\
		 "es", #3, 0,\
		 "cs", #3, 1,\
		 "ssel", #3, 2,\
		 "ds", #3, 3,\
		 "pksnum", #271, 4,\
		 "R2", #18, 8,\
		 "R3", #18, 10,\
		 "R4", #18, 12,\
		 "R5", #18, 14,\
		 "R6", #18, 16,\
		 "psw", #18, 18,\
		 "pc", #274, 20
	SYMB	TYPE, 276, 'n', #275, 130
	SYMB	TYPE, 277, 'P', #276
	SYMB	TYPE, 278, 'X', 12, #1, 30, 0
	SYMB	TYPE, 279, 'n', #278, 129
	SYMB	TYPE, 280, 'P', #279
	SYMB	TYPE, 281, 'n', #2, 130
	SYMB	TYPE, 282, 'P', #281
	SYMB	TYPE, 283, 'n', #1, 130
	SYMB	TYPE, 284, 'P', #283
	SYMB	TYPE, 264, "tcb", 'S', 36,\
		 "flink", #266, 0,\
		 "blink", #266, 4,\
		 "pclkblk", #269, 8,\
		 "task", #258, 12,\
		 "priority", #260, 13,\
		 "sp", #277, 14,\
		 "status", #261, 18,\
		 "pc_t0", #280, 20,\
		 "stackbase", #282, 24,\
		 "stacksize", #262, 28,\
		 "tslice", #263, 30,\
		 "newslice", #263, 31,\
		 "arg", #284, 32
	SYMB	TYPE, 285, "TCB", 'T', #264
	SYMB	TYPE, 286, "SEMA", 'T', #257
	SYMB	TYPE, 287, "MAP", 'T', #257
	SYMB	TYPE, 289, 'n', #288, 130
	SYMB	TYPE, 290, 'P', #289
	SYMB	TYPE, 288, "rtxcmsg", 'S', 8,\
		 "link", #290, 0,\
		 "task", #258, 4,\
		 "priority", #260, 5,\
		 "sema", #286, 6
	SYMB	TYPE, 291, "RTXCMSG", 'T', #288
	SYMB	TYPE, 292, "TICKS", 'T', #16
	SYMB	TYPE, 293, 'N',\
		 "DELAY_OBJ", 0,\
		 "SEMAPHORE_OBJ", 1,\
		 "PARTITION_OBJ", 2,\
		 "QUEUE_OBJ", 3,\
		 "RESOURCE_OBJ", 4,\
		 "MAILBOX_OBJ", 5,\
		 "TIMER_OBJ", 6
	SYMB	TYPE, 294, "OBJTYPE", 'T', #293
	SYMB	TYPE, 267, "clkblk", 'S', 18,\
		 "flink", #269, 0,\
		 "blink", #269, 4,\
		 "remain", #292, 8,\
		 "recycle", #292, 10,\
		 "task", #258, 12,\
		 "state", #2, 13,\
		 "objtype", #294, 14,\
		 "objid", #257, 16
	SYMB	TYPE, 295, 'N',\
		 "PRIORITY_INVERSION_OFF", 0,\
		 "PRIORITY_INVERSION_ON", 1
	SYMB	TYPE, 296, "RESATTR", 'T', #295
	SYMB	ENDF
	SYMB	TYPE, 297, 'N',\
		 "RC_GOOD", 0,\
		 "RC_WAIT_CONFLICT", 1,\
		 "RC_NO_TIMERS", 2,\
		 "RC_TIMER_INACTIVE", 3,\
		 "RC_TIMER_ILLEGAL", 4,\
		 "RC_TIMEOUT", 5,\
		 "RC_QUEUE_FULL", 6,\
		 "RC_QUEUE_EMPTY", 7,\
		 "RC_ILLEGAL_QUEUE_SIZE", 8,\
		 "RC_BUSY", 9,\
		 "RC_NESTED", 10,\
		 "RC_ILLEGAL_TASK", 11,\
		 "RC_ACTIVE_TASK", 12,\
		 "RC_NO_YIELD", 13,\
		 "RC_MISSED_EVENT", 14
	SYMB	TYPE, 298, "KSRC", 'T', #297
	SYMB	TYPE, 299, "SSTATE", 'T', #258
	SYMB	TYPE, 300, "MBOX", 'T', #257
	SYMB	TYPE, 301, "QUEUE", 'T', #257
	SYMB	TYPE, 302, 'N',\
		 "QNE", 0,\
		 "QNF", 1,\
		 "QF", 2,\
		 "QE", 3
	SYMB	TYPE, 303, "QCOND", 'T', #302
	SYMB	TYPE, 304, "RESOURCE", 'T', #257
	SYMB	TYPE, 305, "CLKBLK", 'T', #267
	SYMB	TYPE, 306, "time_t", 'T', #6
	SYMB	TYPE, 307, "FRAME", 'T', #275
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\ctask.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\csema.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cres.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cqueue.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cpart.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cmbox.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cclock.h"
	SYMB	ENDF
	SYMB	TYPE, 309, 'n', #308, 130
	SYMB	TYPE, 310, 'P', #309
	SYMB	TYPE, 308, 'X', 12, #1, 30, 2, #310, #282
	SYMB	TYPE, 312, 'n', #311, 129
	SYMB	TYPE, 313, 'P', #312
	SYMB	TYPE, 314, 'X', 12, #1, 30, 1, #310
	SYMB	TYPE, 315, 'n', #314, 129
	SYMB	TYPE, 316, 'P', #315
	SYMB	TYPE, 317, 'n', #6, 130
	SYMB	TYPE, 318, 'P', #317
	SYMB	TYPE, 317, 'X', 12, #16, 30, 2, #310, #318
	SYMB	TYPE, 320, 'n', #319, 129
	SYMB	TYPE, 321, 'P', #320
	SYMB	TYPE, 322, 'X', 12, #1, 30, 1, #310
	SYMB	TYPE, 323, 'n', #322, 129
	SYMB	TYPE, 324, 'P', #323
	SYMB	TYPE, 325, 'X', 12, #1, 30, 1, #310
	SYMB	TYPE, 326, 'n', #325, 129
	SYMB	TYPE, 327, 'P', #326
	SYMB	TYPE, 328, 'X', 12, #16, 30, 1, #310
	SYMB	TYPE, 329, 'n', #328, 129
	SYMB	TYPE, 330, 'P', #329
	SYMB	TYPE, 308, "TEvent", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TEvent", #313, 2,\
		 "_TEvent", #316, 6,\
		 "Wait", #321, 10,\
		 "Set", #324, 14,\
		 "Clear", #327, 18,\
		 "IsSet", #330, 22,\
		 "ID", #286, 26,\
		 "Name", #282, 28
	SYMB	TYPE, 331, "TEvent", 'T', #308
	SYMB	TYPE, 333, 'n', #332, 130
	SYMB	TYPE, 334, 'P', #333
	SYMB	TYPE, 332, 'X', 12, #1, 30, 1, #334
	SYMB	TYPE, 336, 'n', #335, 129
	SYMB	TYPE, 337, 'P', #336
	SYMB	TYPE, 338, 'X', 12, #1, 30, 1, #334
	SYMB	TYPE, 339, 'n', #338, 129
	SYMB	TYPE, 340, 'P', #339
	SYMB	TYPE, 341, 'n', #331, 130
	SYMB	TYPE, 342, 'P', #341
	SYMB	TYPE, 341, 'X', 12, #16, 30, 2, #334, #342
	SYMB	TYPE, 344, 'n', #343, 129
	SYMB	TYPE, 345, 'P', #344
	SYMB	TYPE, 346, 'X', 12, #1, 30, 2, #334, #342
	SYMB	TYPE, 347, 'n', #346, 129
	SYMB	TYPE, 348, 'P', #347
	SYMB	TYPE, 349, 'X', 12, #16, 30, 2, #334, #342
	SYMB	TYPE, 350, 'n', #349, 129
	SYMB	TYPE, 351, 'P', #350
	SYMB	TYPE, 352, 'X', 12, #342, 30, 2, #334, #318
	SYMB	TYPE, 353, 'n', #352, 129
	SYMB	TYPE, 354, 'P', #353
	SYMB	TYPE, 355, 'Z', #2, 95
	SYMB	TYPE, 332, "TEventList", 'S', 122,\
		 "ObjectID", #16, 0,\
		 "TEventList", #337, 2,\
		 "_TEventList", #340, 6,\
		 "Append", #345, 10,\
		 "Clear", #348, 14,\
		 "InList", #351, 18,\
		 "Wait", #354, 22,\
		 "Align", #355, 26
	SYMB	TYPE, 357, "TEventList", 'T', #332
	SYMB	TYPE, 359, 'n', #358, 130
	SYMB	TYPE, 360, 'P', #359
	SYMB	TYPE, 358, 'X', 12, #1, 30, 2, #360, #282
	SYMB	TYPE, 362, 'n', #361, 129
	SYMB	TYPE, 363, 'P', #362
	SYMB	TYPE, 364, 'X', 12, #1, 30, 1, #360
	SYMB	TYPE, 365, 'n', #364, 129
	SYMB	TYPE, 366, 'P', #365
	SYMB	TYPE, 367, 'X', 12, #1, 30, 1, #360
	SYMB	TYPE, 368, 'n', #367, 129
	SYMB	TYPE, 369, 'P', #368
	SYMB	TYPE, 370, 'X', 12, #1, 30, 1, #360
	SYMB	TYPE, 371, 'n', #370, 129
	SYMB	TYPE, 372, 'P', #371
	SYMB	TYPE, 373, 'X', 12, #16, 30, 1, #360
	SYMB	TYPE, 374, 'n', #373, 129
	SYMB	TYPE, 375, 'P', #374
	SYMB	TYPE, 358, "TResource", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TResource", #363, 2,\
		 "_TResource", #366, 6,\
		 "Lock", #369, 10,\
		 "Unlock", #372, 14,\
		 "Owner", #375, 18,\
		 "ID", #304, 22,\
		 "Name", #282, 24
	SYMB	TYPE, 376, "TResource", 'T', #358
	SYMB	TYPE, 377, 'X', 12, #1, 30, 0
	SYMB	TYPE, 378, 'n', #377, 129
	SYMB	TYPE, 379, 'P', #378
	SYMB	TYPE, 381, 'n', #380, 130
	SYMB	TYPE, 382, 'P', #381
	SYMB	TYPE, 377, 'X', 12, #1, 30, 3, #382, #16, #379
	SYMB	TYPE, 384, 'n', #383, 129
	SYMB	TYPE, 385, 'P', #384
	SYMB	TYPE, 386, 'X', 12, #1, 30, 1, #382
	SYMB	TYPE, 387, 'n', #386, 129
	SYMB	TYPE, 388, 'P', #387
	SYMB	TYPE, 389, 'X', 12, #1, 30, 1, #382
	SYMB	TYPE, 390, 'n', #389, 129
	SYMB	TYPE, 391, 'P', #390
	SYMB	TYPE, 392, 'X', 12, #1, 30, 2, #382, #16
	SYMB	TYPE, 393, 'n', #392, 129
	SYMB	TYPE, 394, 'P', #393
	SYMB	TYPE, 395, 'X', 12, #1, 30, 1, #382
	SYMB	TYPE, 396, 'n', #395, 129
	SYMB	TYPE, 397, 'P', #396
	SYMB	TYPE, 398, 'X', 12, #16, 30, 1, #382
	SYMB	TYPE, 399, 'n', #398, 129
	SYMB	TYPE, 400, 'P', #399
	SYMB	TYPE, 401, 'X', 12, #1, 30, 2, #382, #16
	SYMB	TYPE, 402, 'n', #401, 129
	SYMB	TYPE, 403, 'P', #402
	SYMB	TYPE, 380, "TThread", 'S', 36,\
		 "ObjectID", #16, 0,\
		 "TThread", #385, 2,\
		 "Execute", #388, 6,\
		 "Terminate", #391, 10,\
		 "Suspend", #394, 14,\
		 "Resume", #397, 18,\
		 "GetPriority", #400, 22,\
		 "SetPriority", #403, 26,\
		 "ID", #258, 30,\
		 "Status", #2, 31,\
		 "Stack", #282, 32
	SYMB	TYPE, 404, "TThread", 'T', #380
	SYMB	TYPE, 406, 'n', #405, 130
	SYMB	TYPE, 407, 'P', #406
	SYMB	TYPE, 405, 'X', 12, #1, 30, 1, #407
	SYMB	TYPE, 409, 'n', #408, 129
	SYMB	TYPE, 410, 'P', #409
	SYMB	TYPE, 411, 'X', 12, #1, 30, 1, #407
	SYMB	TYPE, 412, 'n', #411, 129
	SYMB	TYPE, 413, 'P', #412
	SYMB	TYPE, 414, 'X', 12, #1, 30, 2, #407, #16
	SYMB	TYPE, 415, 'n', #414, 129
	SYMB	TYPE, 416, 'P', #415
	SYMB	TYPE, 417, 'X', 12, #16, 30, 1, #407
	SYMB	TYPE, 418, 'n', #417, 129
	SYMB	TYPE, 419, 'P', #418
	SYMB	TYPE, 420, 'X', 12, #1, 30, 2, #407, #16
	SYMB	TYPE, 421, 'n', #420, 129
	SYMB	TYPE, 422, 'P', #421
	SYMB	TYPE, 423, 'n', #305, 130
	SYMB	TYPE, 424, 'P', #423
	SYMB	TYPE, 405, "TTimer", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TTimer", #410, 2,\
		 "_TTimer", #413, 6,\
		 "SetPeriod", #416, 10,\
		 "GetPeriod", #419, 14,\
		 "Tick", #422, 18,\
		 "TimeOut", #342, 22,\
		 "Period", #4, 26,\
		 "Handle", #424, 28
	SYMB	TYPE, 425, "TTimer", 'T', #405
	SYMB	TYPE, 427, 'n', #426, 130
	SYMB	TYPE, 428, 'P', #427
	SYMB	TYPE, 426, 'X', 12, #1, 30, 3, #428, #16, #16
	SYMB	TYPE, 430, 'n', #429, 129
	SYMB	TYPE, 431, 'P', #430
	SYMB	TYPE, 432, 'X', 12, #1, 30, 1, #428
	SYMB	TYPE, 433, 'n', #432, 129
	SYMB	TYPE, 434, 'P', #433
	SYMB	TYPE, 435, 'X', 12, #282, 30, 2, #428, #284
	SYMB	TYPE, 436, 'n', #435, 129
	SYMB	TYPE, 437, 'P', #436
	SYMB	TYPE, 438, 'X', 12, #1, 30, 2, #428, #284
	SYMB	TYPE, 439, 'n', #438, 129
	SYMB	TYPE, 440, 'P', #439
	SYMB	TYPE, 426, "TStream", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TStream", #431, 2,\
		 "_TStream", #434, 6,\
		 "Get", #437, 10,\
		 "Put", #440, 14,\
		 "ID", #301, 18,\
		 "Width", #16, 20,\
		 "Depth", #16, 22,\
		 "Handle", #282, 24
	SYMB	TYPE, 441, "TStream", 'T', #426
	SYMB	ENDF
; keyscan.c    5	
; keyscan.c    6	#include "define.h"     			/* Standard PTV definitions */
	SYMB	FILE, "..\\..\\code\\include\\1_0\\define.h"
	SYMB	ENDF
; keyscan.c    7	#include "KeyCodes.h"					/* defines codes used for key queue */
	SYMB	FILE, "..\\..\\code\\include\\1_0\\KeyCodes.h"
	SYMB	ENDF
; keyscan.c    8	#include "Key_hw.h"     			/* Haedware interface to keyboard   */
	SYMB	FILE, "..\\..\\code\\include\\1_0\\Key_hw.h"
	SYMB	ENDF
; keyscan.c    9	
; keyscan.c   10	
; keyscan.c   11	/* Define parameters for keyboard scanning */
; keyscan.c   12	
; keyscan.c   13	#define ScanRate       	20 		/* Scanrate in Milliseconds */
; keyscan.c   14	
; keyscan.c   15	#define DebounceTimeout 1   	/* Number of readings identical
; keyscan.c   16	                               to the first before keyaccept */
; keyscan.c   17	
; keyscan.c   18	#define RepDelay        50  	/* Time (in scanrate units)  before repeating */
; keyscan.c   19	
; keyscan.c   20	#define AutoEscDelay    3000 	/* 60 sec = 1 minut */
; keyscan.c   21	
; keyscan.c   22	#define InitRepRate     15  	/* Time between each rep (initial value) */
; keyscan.c   23	#define Acc2RepRate     15   	/* Time between each rep acc level 2 */
; keyscan.c   24	#define Acc3RepRate     15   	/* Time between each rep acc level 3 */
; keyscan.c   25	#define Acc4RepRate     15   	/* Time between each rep acc level 4 */
; keyscan.c   26	
; keyscan.c   27	#define Acc2            10  	/* Number of keys sent before changing
; keyscan.c   28	                             		to acceleration level 2*/
; keyscan.c   29	
; keyscan.c   30	#define Acc3            50 	/* Number of keys sent before changing
; keyscan.c   31	                             		to acceleration level 3*/
; keyscan.c   32	
; keyscan.c   33	#define Acc4            300 	/* Number of keys sent before changing
; keyscan.c   34	                             		to acceleration level 4*/
; keyscan.c   35	
; keyscan.c   36	
; keyscan.c   37	/*#define Acc2            10  	 Number of keys sent before changing
; keyscan.c   38	                             		to acceleration level 2*/
; keyscan.c   39	
; keyscan.c   40	/*#define Acc3            19  	 Number of keys sent before changing
; keyscan.c   41	                             		to acceleration level 3*/
; keyscan.c   42	
; keyscan.c   43	/*#define Acc4            28  	 Number of keys sent before changing
; keyscan.c   44	                             		to acceleration level 4*/
; keyscan.c   45	
; keyscan.c   46	/* Define states for state-machine */
; keyscan.c   47	enum KeyStates{
; keyscan.c   48		KeyDebounce,
; keyscan.c   49		KeyStable,
; keyscan.c   50		KeyRepeat,
; keyscan.c   51		KeyFree
; keyscan.c   52	};
; keyscan.c   53	
; keyscan.c   54	/* Task definition */
; keyscan.c   55	TStream *KeyScanStream;
; keyscan.c   56	
; keyscan.c   57	static TTimer *KeyScanTimer;
; keyscan.c   58	
; keyscan.c   59	/*  Task for scanning keyboard */
; keyscan.c   60	void keyscan( void)
; keyscan.c   61	{
KEYSCAN_PR	SEGMENT	HCODE
	RSEG	KEYSCAN_PR
	ALIGN	1
	SYMB	LINE, 61
	SYMB	TYPE, 442, "keystruk", 'S', 2,\
		 "Code", #3, 0,\
		 "Repeat", #3, 1
	SYMB	TYPE, 443, "KeyPress", 'T', #442
KEYSCAN_CLR_FA	SEGMENT	HDATA INSEGMENT CLEAR
	RSEG	KEYSCAN_CLR_FA
	ALIGN	1
_3:	DS	2
	ALIGN	1
_4:	DS	2
	ALIGN	1
_5:	DS	2
_6:	DS	1
_7:	DS	1
_8:	DS	1
	PUBLIC	_keyscan
	RSEG	KEYSCAN_PR
_keyscan:
	SYMB	TYPE, 444, 'X', 12, #1, 30, 0
	SYMB	GFUN, "keyscan", _keyscan, #444, 0, 0, 48
	SYMB	ALAB, _keyscan, #444
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "KeyState", _8, #3, 130, 4
	SYMB	IDEN, "OldKeyCode", _7, #3, 130, 4
	SYMB	IDEN, "RepRate", _6, #3, 130, 4
	SYMB	IDEN, "Key", _5, #443, 130, 4
	SYMB	IDEN, "KeyCount", _4, #18, 130, 4
	SYMB	IDEN, "KeyTimer", _3, #18, 130, 4
; keyscan.c   62		/* Internal vars */
; keyscan.c   63	  static UC KeyState, OldKeyCode, RepRate;
; keyscan.c   64	  static KeyPress Key;
; keyscan.c   65	  static UI KeyCount, KeyTimer;
; keyscan.c   66	
; keyscan.c   67		KeyScanStream = newTStream( 2, 10);
	SYMB	LINE, 67
	MOV.W	R0,#02H
	MOV.W	R1,#0AH
	CALL	_newTStream
	MOV.B	ES,#SEG( _KeyScanStream )
	MOV.W	R2,#SOF( _KeyScanStream )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; keyscan.c   68		KS_purgequeue( KeyScanStream->ID);
	SYMB	LINE, 68
	MOV.B	ES,R1L
	MOV.B	R0L,[R0+18]
	CALL	_KS_purgequeue
; keyscan.c   69	
; keyscan.c   70		KeyScanTimer = newTTimer();
	SYMB	LINE, 70
	CALL	_newTTimer
	MOV.B	ES,#SEG( _KeyScanTimer )
	MOV.W	R2,#SOF( _KeyScanTimer )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; keyscan.c   71		KeyScanTimer->SetPeriod( KeyScanTimer, 20);
	SYMB	LINE, 71
	MOV.B	ES,R1L
	MOV.W	R4,[R0+10]
	MOV.W	R5,[R0+12]
	MOV.W	R2,#014H
	FCALL	__ICALL
; keyscan.c   72	
; keyscan.c   73		/* Initialisation part */
; keyscan.c   74	  KeyState   = KeyDebounce ;  /* Initial state */
	SYMB	LINE, 74
	MOV.B	ES,#SEG( _8 )
	MOV.W	R0,#SOF( _8 )
	MOV.B	[R0],#00H
; keyscan.c   75	  OldKeyCode = KeyNone;       /* Program last key as 'none' */
	SYMB	LINE, 75
	MOV.B	ES,#SEG( _7 )
	MOV.W	R0,#SOF( _7 )
	MOV.B	[R0],#0FFH
; keyscan.c   76	  Key.Repeat = RepeatOff;
	SYMB	LINE, 76
	MOV.B	ES,#SEG( _5+1 )
	MOV.W	R0,#SOF( _5+1 )
	MOV.B	[R0],#00H
; keyscan.c   77	  RepRate    = InitRepRate;
	SYMB	LINE, 77
	MOV.B	ES,#SEG( _6 )
	MOV.W	R0,#SOF( _6 )
	MOV.B	[R0],#0FH
; keyscan.c   78	  KeyTimer   = 1;
	SYMB	LINE, 78
	MOV.B	ES,#SEG( _3 )
	MOV.W	R0,#SOF( _3 )
	MOV.W	[R0],#01H
; keyscan.c   79	
; keyscan.c   80	  /* Get initial key press */
; keyscan.c   81	  /* OR : does above initialisation give the init key as the first ? */
; keyscan.c   82	  /* Set up timer for scan rate */
; keyscan.c   83	
; keyscan.c   84		/* Task loop start */
; keyscan.c   85		for (;;)
	SYMB	LINE, 85
_9:
; keyscan.c   86	  {
; keyscan.c   87	  	/* Wait for timeout */
; keyscan.c   88			KeyScanTimer->TimeOut->Wait( KeyScanTimer->TimeOut, 0);
	SYMB	LINE, 88
	MOV.B	ES,#SEG( _KeyScanTimer )
	MOV.W	R1,#SOF( _KeyScanTimer )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+22]
	MOV.W	R5,[R0+24]
	MOV.B	ES,R5L
	MOV.W	R5,[R4+12]
	MOV.W	R4,[R4+10]
	MOV.B	ES,R1L
	MOV.W	R1,[R0+24]
	MOV.W	R0,[R0+22]
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	FCALL	__ICALL
; keyscan.c   89	
; keyscan.c   90			/* Get actual key scan reading */
; keyscan.c   91	    switch ( KeyboardGet( &Key.Code) )
	SYMB	LINE, 91
	MOV.W	R1,#SEG( _5 )
	MOV.W	R0,#SOF( _5 )
	CALL	_KeyboardGet
; keyscan.c   92	    {
; keyscan.c   93	    	case OK:
; keyscan.c   94	      	break;
; keyscan.c   95	
; keyscan.c   96				default:
; keyscan.c   97	      	break;
; keyscan.c   98	    }/*end switch*/
; keyscan.c   99	
; keyscan.c  100	    /* Execute state machine */
; keyscan.c  101	    switch ( KeyState){
	SYMB	LINE, 101
	MOV.B	ES,#SEG( _8 )
	MOV.W	R0,#SOF( _8 )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#00H
	BEQ	_10
	CMP.B	R0L,#03H
	BEQ	_13
	CMP.B	R0L,#01H
	BEQ	_15
	CMP.B	R0L,#02H
	BEQ	_17
	BR	_36
; keyscan.c  102		    case KeyDebounce:
	SYMB	LINE, 102
_10:
; keyscan.c  103	  	    if (Key.Code != OldKeyCode)
	SYMB	LINE, 103
	MOV.B	ES,#SEG( _5 )
	MOV.W	R0,#SOF( _5 )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _7 )
	MOV.W	R1,#SOF( _7 )
	MOV.B	R0H,[R1]
	CMP.B	R0L,R0H
	BNE	_23
; keyscan.c  104	        {
; keyscan.c  105	    	    KeyTimer = DebounceTimeout;
; keyscan.c  106	        }
; keyscan.c  107	        else
; keyscan.c  108	        {
; keyscan.c  109	      	  if (0 == --KeyTimer)
	SYMB	LINE, 109
	MOV.B	ES,#SEG( _3 )
	MOV.W	R1,#SOF( _3 )
	MOV.W	R1,[R1]
	ADDS.W	R1,#0FH
	MOV.B	ES,#SEG( _3 )
	MOV.W	R2,#SOF( _3 )
	MOV.W	[R2],R1
	OR.W	R1,R1
	BNE	_36
; keyscan.c  110	          {
; keyscan.c  111	        	  if ( Key.Code == KeyNone )
	SYMB	LINE, 111
	CMP.B	R0L,#0FFH
	BNE	_11
; keyscan.c  112	            {
; keyscan.c  113	          	  KeyState     = KeyFree;
	SYMB	LINE, 113
	MOV.B	ES,#SEG( _8 )
	MOV.W	R0,#SOF( _8 )
	MOV.B	[R0],#03H
; keyscan.c  114	              KeyTimer     = AutoEscDelay;
	SYMB	LINE, 114
	MOV.B	ES,#SEG( _3 )
	MOV.W	R0,#SOF( _3 )
	MOV.W	[R0],#0BB8H
; keyscan.c  115	            }
	SYMB	LINE, 115
	BR	_12
_11:
; keyscan.c  116	            else
; keyscan.c  117	            {
; keyscan.c  118	            	KeyTimer     = RepDelay;
	SYMB	LINE, 118
	MOV.B	ES,#SEG( _3 )
	MOV.W	R0,#SOF( _3 )
	MOV.W	[R0],#032H
; keyscan.c  119	              KeyState     = KeyStable;
	SYMB	LINE, 119
	MOV.B	ES,#SEG( _8 )
	MOV.W	R0,#SOF( _8 )
	MOV.B	[R0],#01H
; keyscan.c  120	            }
	SYMB	LINE, 120
_12:
; keyscan.c  121	
; keyscan.c  122	            Key.Repeat   = RepeatOff;
	SYMB	LINE, 122
	MOV.B	ES,#SEG( _5+1 )
	MOV.W	R0,#SOF( _5+1 )
	MOV.B	[R0],#00H
; keyscan.c  123	            KeyCount     = 1;
	SYMB	LINE, 123
	MOV.B	ES,#SEG( _4 )
	MOV.W	R0,#SOF( _4 )
	MOV.W	[R0],#01H
; keyscan.c  124	            RepRate    = InitRepRate;
	SYMB	LINE, 124
	MOV.B	ES,#SEG( _6 )
	MOV.W	R0,#SOF( _6 )
	MOV.B	[R0],#0FH
; keyscan.c  125							KeyScanStream->Put( KeyScanStream, &Key);
	SYMB	LINE, 125
	MOV.B	ES,#SEG( _KeyScanStream )
	MOV.W	R1,#SOF( _KeyScanStream )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+14]
	MOV.W	R5,[R0+16]
	MOV.W	R3,#SEG( _5 )
	MOV.W	R2,#SOF( _5 )
	FCALL	__ICALL
; keyscan.c  126	          }
; keyscan.c  127	        }
; keyscan.c  128	        break;
	SYMB	LINE, 128
	BR	_36
; keyscan.c  129	
; keyscan.c  130				case KeyFree:
	SYMB	LINE, 130
_13:
; keyscan.c  131	      	if (Key.Code != OldKeyCode)
	SYMB	LINE, 131
	MOV.B	ES,#SEG( _5 )
	MOV.W	R0,#SOF( _5 )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _7 )
	MOV.W	R1,#SOF( _7 )
	MOV.B	R0H,[R1]
	CMP.B	R0L,R0H
	BEQ	_14
; keyscan.c  132	        {
; keyscan.c  133	        	KeyTimer = DebounceTimeout;
	SYMB	LINE, 133
	MOV.B	ES,#SEG( _3 )
	MOV.W	R0,#SOF( _3 )
	MOV.W	[R0],#01H
; keyscan.c  134	          KeyState = KeyDebounce;
	SYMB	LINE, 134
	MOV.B	ES,#SEG( _8 )
	MOV.W	R0,#SOF( _8 )
	MOV.B	[R0],#00H
; keyscan.c  135	        }
	SYMB	LINE, 135
	BR	_36
_14:
; keyscan.c  136	        else
; keyscan.c  137	        {
; keyscan.c  138	        	if (KeyTimer != 0)
	SYMB	LINE, 138
	MOV.B	ES,#SEG( _3 )
	MOV.W	R0,#SOF( _3 )
	MOV.W	R0,[R0]
	BEQ	_36
; keyscan.c  139	          {
; keyscan.c  140	          	KeyTimer--;
	SYMB	LINE, 140
	ADDS.W	R0,#0FH
	MOV.B	ES,#SEG( _3 )
	MOV.W	R1,#SOF( _3 )
	MOV.W	[R1],R0
; keyscan.c  141	            if (KeyTimer == 0)
	SYMB	LINE, 141
	OR.W	R0,R0
	BNE	_36
; keyscan.c  142	            {
; keyscan.c  143	            	Key.Code = KeyAutoEsc;
	SYMB	LINE, 143
	MOV.B	ES,#SEG( _5 )
	MOV.W	R0,#SOF( _5 )
	MOV.B	[R0],#01BH
; keyscan.c  144								KeyScanStream->Put( KeyScanStream, &Key);
	SYMB	LINE, 144
	MOV.B	ES,#SEG( _KeyScanStream )
	MOV.W	R1,#SOF( _KeyScanStream )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+14]
	MOV.W	R5,[R0+16]
	MOV.W	R3,#SEG( _5 )
	MOV.W	R2,#SOF( _5 )
	FCALL	__ICALL
; keyscan.c  145	              Key.Code = KeyNone;
	SYMB	LINE, 145
	MOV.B	ES,#SEG( _5 )
	MOV.W	R0,#SOF( _5 )
	MOV.B	[R0],#0FFH
; keyscan.c  146	            }
; keyscan.c  147	          }
; keyscan.c  148	        }
; keyscan.c  149	        break;
	SYMB	LINE, 149
	BR	_36
; keyscan.c  150	
; keyscan.c  151	      case KeyStable:
	SYMB	LINE, 151
_15:
; keyscan.c  152	      	if (Key.Code != OldKeyCode)
	SYMB	LINE, 152
	MOV.B	ES,#SEG( _5 )
	MOV.W	R0,#SOF( _5 )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _7 )
	MOV.W	R1,#SOF( _7 )
	MOV.B	R0H,[R1]
	CMP.B	R0L,R0H
	BEQ	_16
; keyscan.c  153	        {
; keyscan.c  154	        	KeyTimer = DebounceTimeout;
	SYMB	LINE, 154
	MOV.B	ES,#SEG( _3 )
	MOV.W	R0,#SOF( _3 )
	MOV.W	[R0],#01H
; keyscan.c  155	          KeyState = KeyDebounce;
	SYMB	LINE, 155
	MOV.B	ES,#SEG( _8 )
	MOV.W	R0,#SOF( _8 )
	MOV.B	[R0],#00H
; keyscan.c  156	        }
	SYMB	LINE, 156
	BR	_36
_16:
; keyscan.c  157	        else
; keyscan.c  158	        {
; keyscan.c  159	        	if (0 == KeyTimer--)
	SYMB	LINE, 159
	MOV.B	ES,#SEG( _3 )
	MOV.W	R0,#SOF( _3 )
	MOV.W	R0,[R0]
	MOV.W	R1,R0
	ADDS.W	R0,#0FH
	MOV.B	ES,#SEG( _3 )
	MOV.W	R2,#SOF( _3 )
	MOV.W	[R2],R0
	OR.W	R1,R1
	BNE	_36
; keyscan.c  160	          {
; keyscan.c  161	          	KeyState = KeyRepeat;
	SYMB	LINE, 161
	MOV.B	ES,#SEG( _8 )
	MOV.W	R0,#SOF( _8 )
	MOV.B	[R0],#02H
; keyscan.c  162	            KeyTimer = RepRate;
	SYMB	LINE, 162
	MOV.B	ES,#SEG( _3 )
	MOV.W	R0,#SOF( _3 )
	MOV.W	[R0],#0FH
; keyscan.c  163	            Key.Repeat = Repeat1;
	SYMB	LINE, 163
	MOV.B	ES,#SEG( _5+1 )
	MOV.W	R0,#SOF( _5+1 )
	MOV.B	[R0],#01H
; keyscan.c  164							KeyScanStream->Put( KeyScanStream, &Key);
	SYMB	LINE, 164
	MOV.B	ES,#SEG( _KeyScanStream )
	MOV.W	R1,#SOF( _KeyScanStream )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+14]
	MOV.W	R5,[R0+16]
	MOV.W	R3,#SEG( _5 )
	MOV.W	R2,#SOF( _5 )
	FCALL	__ICALL
; keyscan.c  165	            KeyCount++;
	SYMB	LINE, 165
	MOV.B	ES,#SEG( _4 )
	MOV.W	R0,#SOF( _4 )
	MOV.W	R0,[R0]
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _4 )
	MOV.W	R1,#SOF( _4 )
	MOV.W	[R1],R0
; keyscan.c  166	          }
; keyscan.c  167	        }
; keyscan.c  168	        break;
	SYMB	LINE, 168
	BR	_36
; keyscan.c  169	
; keyscan.c  170	      case KeyRepeat:
	SYMB	LINE, 170
_17:
; keyscan.c  171	      	if (Key.Code != OldKeyCode)
	SYMB	LINE, 171
	MOV.B	ES,#SEG( _5 )
	MOV.W	R0,#SOF( _5 )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _7 )
	MOV.W	R1,#SOF( _7 )
	MOV.B	R0H,[R1]
	CMP.B	R0L,R0H
	BEQ	_18
; keyscan.c  172	        {
; keyscan.c  173	        	KeyTimer   = DebounceTimeout;
	SYMB	LINE, 173
	MOV.B	ES,#SEG( _3 )
	MOV.W	R0,#SOF( _3 )
	MOV.W	[R0],#01H
; keyscan.c  174	          KeyState   = KeyDebounce;
	SYMB	LINE, 174
	MOV.B	ES,#SEG( _8 )
	MOV.W	R0,#SOF( _8 )
	MOV.B	[R0],#00H
; keyscan.c  175	        }
	SYMB	LINE, 175
	BR	_36
_18:
; keyscan.c  176	        else
; keyscan.c  177	        {
; keyscan.c  178	        	if (0 == KeyTimer--)
	SYMB	LINE, 178
	MOV.B	ES,#SEG( _3 )
	MOV.W	R0,#SOF( _3 )
	MOV.W	R0,[R0]
	MOV.W	R1,R0
	ADDS.W	R0,#0FH
	MOV.B	ES,#SEG( _3 )
	MOV.W	R2,#SOF( _3 )
	MOV.W	[R2],R0
	OR.W	R1,R1
	BNE	_36
; keyscan.c  179	          {
; keyscan.c  180	
; keyscan.c  181							if (KeyCount == Acc2)
	SYMB	LINE, 181
	MOV.B	ES,#SEG( _4 )
	MOV.W	R0,#SOF( _4 )
	MOV.W	R0,[R0]
	CMP.W	R0,#0AH
	BNE	_19
; keyscan.c  182	            {
; keyscan.c  183	            	Key.Repeat = Repeat2;
	SYMB	LINE, 183
	MOV.B	ES,#SEG( _5+1 )
	MOV.W	R1,#SOF( _5+1 )
	MOV.B	[R1],#02H
; keyscan.c  184	              RepRate    = Acc2RepRate;
	SYMB	LINE, 184
	MOV.B	ES,#SEG( _6 )
	MOV.W	R1,#SOF( _6 )
	MOV.B	[R1],#0FH
; keyscan.c  185	            }
	SYMB	LINE, 185
_19:
; keyscan.c  186	
; keyscan.c  187	            if (KeyCount == Acc3)
	SYMB	LINE, 187
	CMP.W	R0,#032H
	BNE	_20
; keyscan.c  188	            {
; keyscan.c  189	            	Key.Repeat = Repeat3;
	SYMB	LINE, 189
	MOV.B	ES,#SEG( _5+1 )
	MOV.W	R1,#SOF( _5+1 )
	MOV.B	[R1],#03H
; keyscan.c  190	         	    RepRate    = Acc3RepRate;
	SYMB	LINE, 190
	MOV.B	ES,#SEG( _6 )
	MOV.W	R1,#SOF( _6 )
	MOV.B	[R1],#0FH
; keyscan.c  191	            }
	SYMB	LINE, 191
_20:
; keyscan.c  192							
; keyscan.c  193							if (KeyCount == Acc4)
	SYMB	LINE, 193
	CMP.W	R0,#012CH
	BNE	_21
; keyscan.c  194	            {
; keyscan.c  195	            	Key.Repeat = Repeat4;
	SYMB	LINE, 195
	MOV.B	ES,#SEG( _5+1 )
	MOV.W	R1,#SOF( _5+1 )
	MOV.B	[R1],#04H
; keyscan.c  196	              RepRate    = Acc4RepRate;
	SYMB	LINE, 196
	MOV.B	ES,#SEG( _6 )
	MOV.W	R1,#SOF( _6 )
	MOV.B	[R1],#0FH
; keyscan.c  197	            }
	SYMB	LINE, 197
_21:
; keyscan.c  198	
; keyscan.c  199	            if (KeyCount < 1000)
	SYMB	LINE, 199
	CMP.W	R0,#03E8H
	BCC	_22
; keyscan.c  200	            	KeyCount++;
	SYMB	LINE, 200
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _4 )
	MOV.W	R1,#SOF( _4 )
	MOV.W	[R1],R0
_22:
; keyscan.c  201	
; keyscan.c  202	            KeyTimer = RepRate;
	SYMB	LINE, 202
	MOV.B	ES,#SEG( _3 )
	MOV.W	R0,#SOF( _3 )
	MOV.W	[R0],#0FH
; keyscan.c  203	
; keyscan.c  204							KeyScanStream->Put( KeyScanStream, &Key);
	SYMB	LINE, 204
	MOV.B	ES,#SEG( _KeyScanStream )
	MOV.W	R1,#SOF( _KeyScanStream )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+14]
	MOV.W	R5,[R0+16]
	MOV.W	R3,#SEG( _5 )
	MOV.W	R2,#SOF( _5 )
	FCALL	__ICALL
; keyscan.c  205						}
; keyscan.c  206	        }
; keyscan.c  207	        break;
	SYMB	LINE, 207
	BR	_36
	SYMB	LINE, 105
_23:
	MOV.B	ES,#SEG( _3 )
	MOV.W	R0,#SOF( _3 )
	MOV.W	[R0],#01H
; keyscan.c  208	
; keyscan.c  209	        default:
; keyscan.c  210		        break;
; keyscan.c  211				}/*end switch*/
	SYMB	LINE, 211
_36:
; keyscan.c  212	
; keyscan.c  213				OldKeyCode = Key.Code;
	SYMB	LINE, 213
	MOV.B	ES,#SEG( _5 )
	MOV.W	R0,#SOF( _5 )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _7 )
	MOV.W	R1,#SOF( _7 )
	MOV.B	[R1],R0L
	SYMB	LINE, 85
	BR	_9
; keyscan.c  214			}
; keyscan.c  215			/*End task loop*/
; keyscan.c  216	} /* End Keyscan task  */
	SYMB	LINE, 216
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; keyscan.c  217	
; keyscan.c  218	
; keyscan.c  219	
	SYMB	ENDF

	SYMB	TYPE, 445, 'n', #441, 130
	SYMB	TYPE, 446, 'P', #445
	SYMB	TYPE, 447, 'X', 12, #446, 30, 2, #16, #16
	SYMB	ALAB, _newTStream, #447
	EXTRN	HCODE(_newTStream)
	SYMB	TYPE, 448, 'n', #425, 130
	SYMB	TYPE, 449, 'P', #448
	SYMB	IDEN, "KeyScanTimer", _KeyScanTimer, #449, 130, 4
	RSEG	KEYSCAN_CLR_FA
	ALIGN	1
_KeyScanTimer:	DS	4
	SYMB	TYPE, 450, 'X', 12, #449, 30, 0
	SYMB	ALAB, _newTTimer, #450
	EXTRN	HCODE(_newTTimer)
	SYMB	TYPE, 451, 'X', 12, #1, 30, 1, #301
	SYMB	ALAB, _KS_purgequeue, #451
	EXTRN	HCODE(_KS_purgequeue)
	SYMB	TYPE, 453, 'n', #3, 130
	SYMB	TYPE, 454, 'P', #453
	SYMB	TYPE, 452, 'X', 12, #16, 30, 1, #454
	SYMB	ALAB, _KeyboardGet, #452
	EXTRN	HCODE(_KeyboardGet)
	SYMB	IDEN, "KeyScanStream", _KeyScanStream, #446, 130, 0
	SYMB	ALAB, _KeyScanStream, #446
	PUBLIC	_KeyScanStream
	ALIGN	1
_KeyScanStream:	DS	4
	EXTRN	HCODE(__ICALL)
	EXTRN	DATA(__lc_ub_xvwbuffer)
	EXTRN	DATA(__lc_ue_xvwbuffer)
	CALLS	'keyscan', 'newTStream'
	CALLS	'keyscan', 'KS_purgequeue'
	CALLS	'keyscan', 'newTTimer'
	CALLS	'keyscan', 'KeyboardGet'
	END
