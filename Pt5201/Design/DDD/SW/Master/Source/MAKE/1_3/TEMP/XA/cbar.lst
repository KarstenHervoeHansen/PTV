XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   1
U:\Pt5201\Design\DDD\SW\Master\Source\MAKE\2_1\temp\xa\cbar.src
ADDR   CODE            LINE SOURCELINE
                          1 ; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
                          2 ; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -I..\..\rtxcdef\xa
                          3 ;          -I..\..\rtxc\xa\include -I..\..\code\include\1_0 -I..\..\app_spec\xa
                          4 ;          -Ml -O2 -s
                          6 $NOZPAGE
                          7         NAME    CBAR
                         11 ; cbar.c      1 /****************************************************************************/
                         12 ; cbar.c      2 /* MODULE:                                                                  */
                         13 ; cbar.c      3 /*  cbar.c - ColorBar generator                                             */
                         14 ; cbar.c      4 /****************************************************************************/
                         15 ; cbar.c      5 /* FUNCTIONS:                                                               */
                         16 ; cbar.c      6 /*                                                                          */
                         17 ; cbar.c      7 /*      int WriteCBGain( UC gain)                                                
                                                            */
                         18 ; cbar.c      8 /*      int WriteCBChromaGain( UC gain)                                          
                                            */
                         19 ; cbar.c      9 /*      int SRAMVideoLoad( UC signal, UC bank)                                   
                                        */
                         20 ; cbar.c     10 /*      int SRAMSoundLoad( UC signal)                                            
                                                                */
                         21 ; cbar.c     11 /*      void CBLineInterrupt( void)                                              
                                                                */
                         22 ; cbar.c     12 /*      void CBDefaults( void)                                                   
                                                                */
                         23 ; cbar.c     13 /*      int CBInit( void)                                                        
                                                                                    */
                         24 ; cbar.c     14 /*      int CBUpdate( void)                                                      
                                                                            */
                         25 ; cbar.c     15 /*      int SetCBPattern( UI pattern)                                            
                                                                                                                             
                                    */
                         26 ; cbar.c     16 /*      int SetCBSystem( UC system)                                              
                                                    */
                         27 ; cbar.c     17 /*      int SetCBDelay( UL delay)                                                
                                                            */
                         28 ; cbar.c     18 /*      int SetCBScHPhase( int schphase)                                         
                                    */
                         29 ; cbar.c     19 /*      int SetCBEmbAudioSignal( UC signal)                                     *
                            /
                         30 ; cbar.c     20 /*      int ValidateCBPattern( UC system, UI *pattern)                           
                                                                                                    */      
                         31 ; cbar.c     21 /*                                                                          */
                         32 ; cbar.c     22 /* TASKS:                                                                   */
                         33 ; cbar.c     23 /*                                                                          */
                         34 ; cbar.c     24 /* NOTES:                                                                   */
                         35 ; cbar.c     25 /*                                                                          */
                         36 ; cbar.c     26 /****************************************************************************/
                         37 ; cbar.c     27 /*
                         38 ; cbar.c     28  *   PTV software for PT5201    
                         39 ; cbar.c     29  *   Copyright (c) 
                         40 ; cbar.c     30  *   ProTeleVision Technologies A/S.
                         41 ; cbar.c     31  *   ALL RIGHTS RESERVED
                         42 ; cbar.c     32 */
                         43 ; cbar.c     33 /****************************************************************************/
                         44 ; cbar.c     34 #include "define.h"        // Standard PTV defines
                         47 ; cbar.c     35 #include "rtxcobj.h"
                        377 ; cbar.c     36 #include "config.h" 
                        380 ; cbar.c     37 #include "audio.h"
                        391 ; cbar.c     38 #include "cbar.h"
                        401 ; cbar.c     39 #include "tables.h"
                        404 ; cbar.c     40 #include "led_hw.h"
                        411 ; cbar.c     41 #include "tvp6kdrv.h"
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   2

ADDR   CODE            LINE SOURCELINE
                        414 ; cbar.c     42 #include "i2c_drv.h"
                        417 ; cbar.c     43 #include "instru.h"
                        505 ; cbar.c     44 
                        506 ; cbar.c     45 #define SRAMBank0                       0x00
                        507 ; cbar.c     46 #define SRAMBank1                       0x10
                        508 ; cbar.c     47 #define SRAMBank2                       0x14
                        509 ; cbar.c     48 #define SRAMBank3                       0x18
                        510 ; cbar.c     49 #define SRAMBank4                       0x1C
                        511 ; cbar.c     50 #define SRAMBank5                       0x20
                        512 ; cbar.c     51 #define SRAMBank6                       0x24
                        513 ; cbar.c     52 #define SRAMBank7                       0x28
                        514 ; cbar.c     53 #define SRAMBank8                       0x2C
                        515 ; cbar.c     54 #define SRAMBank9                       0x30
                        516 ; cbar.c     55 #define SRAMBank10              0x34
                        517 ; cbar.c     56 #define SRAMBank11              0x38
                        518 ; cbar.c     57 #define SRAMBank12              0x3C
                        519 ; cbar.c     58 
                        520 ; cbar.c     59 #define dEBUCBar_8bit_625                                       0
                        521 ; cbar.c     60 #define dEBUCBar_625                                                    1
                        522 ; cbar.c     61 #define dSMPTECBar                                                              2
                            
                        523 ; cbar.c     62 #define dBlueBars                                                                
                                    3
                        524 ; cbar.c     63 #define dIWhiteQ                                                                 
                                    4
                        525 ; cbar.c     64 #define dCBar100_625                                                    5
                        526 ; cbar.c     65 #define dGrey75_625                                                             6
                            
                        527 ; cbar.c     66 #define dRed75_625                                                              7
                            
                        528 ; cbar.c     67 #define dRed75_525                                                              8
                            
                        529 ; cbar.c     68 #define dChroma_Multiburst                              9
                        530 ; cbar.c     69 #define d_CCIR18_625                                                    9
                        531 ; cbar.c     70 #define dFCC_Multiburst_525                             10
                        532 ; cbar.c     71 #define dChroma_Multiburst_525          11
                        533 ; cbar.c     72 #define dWhiteLine_625                                          11
                        534 ; cbar.c     73 #define dCrossHatch19_625                                       12
                        535 ; cbar.c     74 #define dWhiteLine_525                                          13
                        536 ; cbar.c     75 #define dCrossHatch17_525                                       14
                        537 ; cbar.c     76 #define dPlugeWhite_625                                         15
                        538 ; cbar.c     77 #define dPlugeGreyC_625                                         16
                        539 ; cbar.c     78 #define dPlugeGreyD_625                                         17
                        540 ; cbar.c     79 #define dPlugeGreyE_625                                         18
                        541 ; cbar.c     80 #define dPlugeWhite_525                                         19
                        542 ; cbar.c     81 #define dPlugeGreyC_525                                         20
                        543 ; cbar.c     82 #define dPlugeGreyD_525                                         21
                        544 ; cbar.c     83 #define dPlugeGreyE_525                                         22
                        545 ; cbar.c     84 #define dGreyScale5_625                                         23
                        546 ; cbar.c     85 #define dGreyScale5_525                                         24
                        547 ; cbar.c     86 #define dGreyScale10_625                                        25
                        548 ; cbar.c     87 #define dGreyScale10_525                                        26
                        549 ; cbar.c     88 #define dWindow50Marker                                         27
                        550 ; cbar.c     89 #define dMarkerLine                                                     28
                        551 ; cbar.c     90 #define dWindow15                                                               2
                            9
                        552 ; cbar.c     91 #define dMarker15                                                               3
                            0
                        553 ; cbar.c     92 #define dWindow20                                                               3
                            1
                        554 ; cbar.c     93 #define dMarker20                                                               3
                            2
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   3

ADDR   CODE            LINE SOURCELINE
                        555 ; cbar.c     94 #define dWindow100                                                      33
                        556 ; cbar.c     95 #define dMarker100                                                      34
                        557 ; cbar.c     96 #define dDigitalGrey_625                                        35
                        558 ; cbar.c     97 #define dDigitalGrey_525                                        36
                        559 ; cbar.c     98 #define dSDI_test_line1                                         37
                        560 ; cbar.c     99 #define dSDI_test_line2                                         38
                        561 ; cbar.c    100 #define dSDI_test_line3                                         39
                        562 ; cbar.c    101 #define dCBar75_STD_625                                         40
                        563 ; cbar.c    102 #define dFCC_CBar_525                                           41
                        564 ; cbar.c    103 #define dFCC_CBar100_525                                        42
                        565 ; cbar.c    104 #define dWindow10                                                               4
                            3
                        566 ; cbar.c    105 #define dMarker10                                                               4
                            4
                        567 ; cbar.c    106 #define dkHz15BlWh_625                                          45
                        568 ; cbar.c    107 #define dkHz15BlWh_525                                          46
                        569 ; cbar.c    108 #define dCCIR18_625                                                     47
                        570 ; cbar.c    109 
                        571 ; cbar.c    110 /****************************************************************************/
                        572 ; cbar.c    111 /*
                        573 ; cbar.c    112 The statusport is defined in the PLD as:
                        574 ; cbar.c    113 
                        575 ; cbar.c    114         bit 0:  S0                              Background system
                        576 ; cbar.c    115         bit 1:  S1
                        577 ; cbar.c    116 
                        578 ; cbar.c    117         bit 2:  S2                              Linetype
                        579 ; cbar.c    118         bit 3:  S3
                        580 ; cbar.c    119         bit 4:  S4
                        581 ; cbar.c    120         bit 5:  S5
                        582 ; cbar.c    121 
                        583 ; cbar.c    122         bit 6:  SYSSEL          System select ( 0:G, 1:M)
                        584 ; cbar.c    123         bit 7:  SOUND                   Sound ( 0:off, 1:on)
                        585 ; cbar.c    124 
                        586 ; cbar.c    125         bit 8:  3OR4                    Samples in sound ( 0:3 samples, 1:4 sampl
                            es)
                        587 ; cbar.c    126         bit 9:  FIELD1          Field one bit ( 1 in Field 1/line 1 (out of 8/4) 
                            otherwise 0)
                        588 ; cbar.c    127         bit 10: CB      
                        589 ; cbar.c    128         bit 11: EDHON                   EDH bit for future use ( 0:off, 1:on)
                        590 ; cbar.c    129 
                        591 ; cbar.c    130         bit 12: PS                              PS ( 0:disable writing in SRAM, 1
                            : enable writing in SRAM)
                        592 ; cbar.c    131         bit 13: Line7                   Line 7 pulse in PAL w/PAL_ID
                        593 ; cbar.c    132         bit 14: PhaseReg        Phase offset register select
                        594 ; cbar.c    133         bit 15: -                                       Not used
                        595 ; cbar.c    134 */
                        596 ; cbar.c    135 /****************************************************************************/
                        597 ; cbar.c    136                                                                                 
                        598 ; cbar.c    137 #define S1S0                    0x0003
                        599 ; cbar.c    138 #define S5S4S3S2                0x003C
                        600 ; cbar.c    139 #define SYSSEL                  0x0040
                        601 ; cbar.c    140 #define SOUNDON         0x0080
                        602 ; cbar.c    141 #define S3OR4                   0x0100
                        603 ; cbar.c    142 #define FIELD1                  0x0200
                        604 ; cbar.c    143 #define CB                              0x0400
                        605 ; cbar.c    144 #define EDHON                   0x0800
                        606 ; cbar.c    145 #define PS                              0x1000
                        607 ; cbar.c    146 #define LINE7PULSE      0x2000
                        608 ; cbar.c    147 #define PHASEREGSEL     0x4000
                        609 ; cbar.c    148 
                        610 ; cbar.c    149 #define SOUND                   (int)(SOUNDON + S3OR4)
                        611 ; cbar.c    150 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   4

ADDR   CODE            LINE SOURCELINE
                        612 ; cbar.c    151 #define SyncLineA               1
                        613 ; cbar.c    152 #define SyncLineB       0
                        614 ; cbar.c    153 #define SyncLineC       2
                        615 ; cbar.c    154 #define SyncLineD       3
                        616 ; cbar.c    155 
                        617 ; cbar.c    156 /****************************************************************************/
                        618 ; cbar.c    157 // Prototypes internal functions
                        619 ; cbar.c    158 
                        620 ; cbar.c    159 int ValidateCBPattern( UC system, UI *pattern);
                        621 ; cbar.c    160 
                        622 ; cbar.c    161 code UI Sound525[48] = {
000000                  623 CBAR_RO SEGMENT HCODE ROMDATA
000000                  624         RSEG    CBAR_RO
                        628         PUBLIC  _Sound525
                        629         ALIGN   1
000000                  630 _Sound525:
000000 83008101850003   631         DW      00083H,00181H,00085H,00003H,00086H,00181H,0008BH,00181H
       00860081018B00       
       8101                 
000010 8B0081018B0081   632         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
       018B0081018B00       
       8101                 
000020 8B0081018B0081   633         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
       018B0081018B00       
       8101                 
000030 8B0081018B0081   634         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
       018B0081018B00       
       8101                 
000040 8B0081018B0081   635         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
       018B0081018B00       
       8101                 
                        636 ; cbar.c    162         0x083, 0x181, 0x085, 0x003, 0x086, 0x181, 0x08B, 0x181,
                        637 ; cbar.c    163         0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181,
                        638 ; cbar.c    164         0x08B, 0x181,   0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181,
                        639 ; cbar.c    165         0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181,
                        640 ; cbar.c    166         0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181,
                        641 ; cbar.c    167         0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x083, 0x081
                        642 ; cbar.c    168 };
                        643 ; cbar.c    169 
                        644 ; cbar.c    170 code UI Sound625[65] = {
000050 8B0081018B0081   645         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,00083H,00081H
       018B0081018300       
       8100                 
                        649         PUBLIC  _Sound625
                        650         ALIGN   1
000060                  651 _Sound625:
000060 81018400030085   652         DW      00181H,00084H,00003H,00085H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000070 81018900810189   653         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000080 81018900810189   654         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000090 81018900810189   655         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
0000A0 81018900810189   656         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   5

ADDR   CODE            LINE SOURCELINE
0000B0 81018900810189   657         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
0000C0 81018900810189   658         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
0000D0 81018900810189   659         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00088H
       00810189008101       
       8800                 
                        660 ; cbar.c    171         0x181,  0x084,  0x003,  0x085,  0x181,  0x089,  0x181,  0x089,
                        661 ; cbar.c    172         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                        662 ; cbar.c    173         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                        663 ; cbar.c    174         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                        664 ; cbar.c    175         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                        665 ; cbar.c    176         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                        666 ; cbar.c    177         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                        667 ; cbar.c    178         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x088,
                        668 ; cbar.c    179         0x181
                        669 ; cbar.c    180 };
                        670 ; cbar.c    181 
                        671 ; cbar.c    182 code UI PALBlackTable[] = 
0000E0 8101             672         DW      00181H
                        676         PUBLIC  _PALBlackTable
                        677         ALIGN   1
0000E2                  678 _PALBlackTable:
0000E2 00160290029000   679         DW      01600H,09002H,09002H,00200H,01701H,09003H,09003H,00201H
       02011703900390       
       0102                 
                        680 ; cbar.c    183 {
                        681 ; cbar.c    184         22*256  +                                                       SyncLineB
                            ,
                        682 ; cbar.c    185         144*256 +                                                       SyncLineC
                            ,
                        683 ; cbar.c    186         144*256 +                                                       SyncLineC
                            ,
                        684 ; cbar.c    187         2*256           +                                                       S
                            yncLineB,
                        685 ; cbar.c    188 
                        686 ; cbar.c    189         23*256  +                                                       SyncLineA
                            ,
                        687 ; cbar.c    190         144*256 +                                                       SyncLineD
                            ,
                        688 ; cbar.c    191         144*256 +                                                       SyncLineD
                            ,
                        689 ; cbar.c    192         2*256           +                                                       S
                            yncLineA,
                        690 ; cbar.c    193         0
                        691 ; cbar.c    194 };
                        692 ; cbar.c    195 
                        693 ; cbar.c    196 code UI PALFullFieldTable[] = 
0000F2 0000             694         DW      00000H
                        697         PUBLIC  _PALFullFieldTable
                        698         ALIGN   1
0000F4                  699 _PALFullFieldTable:
0000F4 00161290129000   700         DW      01600H,09012H,09012H,00200H,01701H,09013H,09013H,00201H
       02011713901390       
       0102                 
                        701 ; cbar.c    197 {
                        702 ; cbar.c    198         22*256  +                                                       SyncLineB
                            ,
                        703 ; cbar.c    199         144*256 +       SRAMBank1 + SyncLineC,
                        704 ; cbar.c    200         144*256 +       SRAMBank1 + SyncLineC,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   6

ADDR   CODE            LINE SOURCELINE
                        705 ; cbar.c    201         2*256           +                                                       S
                            yncLineB,
                        706 ; cbar.c    202 
                        707 ; cbar.c    203         23*256  +                                                       SyncLineA
                            ,
                        708 ; cbar.c    204         144*256 +       SRAMBank1 + SyncLineD,
                        709 ; cbar.c    205         144*256 +       SRAMBank1 + SyncLineD,
                        710 ; cbar.c    206         2*256           +                                                       S
                            yncLineA,
                        711 ; cbar.c    207         0
                        712 ; cbar.c    208 };
                        713 ; cbar.c    209 
                        714 ; cbar.c    210 code UI PALSplitFieldTable[] = 
000104 0000             715         DW      00000H
                        718         PUBLIC  _PALSplitFieldTable
                        719         ALIGN   1
000106                  720 _PALSplitFieldTable:
000106 001612C0166000   721         DW      01600H,0C012H,06016H,00200H,01701H,0C013H,06017H,00201H
       02011713C01760       
       0102                 
                        722 ; cbar.c    211 {
                        723 ; cbar.c    212         22*256  +                                                       SyncLineB
                            ,
                        724 ; cbar.c    213         192*256 +       SRAMBank1 + SyncLineC,
                        725 ; cbar.c    214         96*256  +       SRAMBank2 + SyncLineC,
                        726 ; cbar.c    215         2*256           +                                                       S
                            yncLineB,
                        727 ; cbar.c    216 
                        728 ; cbar.c    217         23*256  +                                                       SyncLineA
                            ,
                        729 ; cbar.c    218         192*256 +       SRAMBank1 + SyncLineD,
                        730 ; cbar.c    219         96*256  +       SRAMBank2 + SyncLineD,
                        731 ; cbar.c    220         2*256           +                                                       S
                            yncLineA,
                        732 ; cbar.c    221         0
                        733 ; cbar.c    222 };
                        734 ; cbar.c    223 
                        735 ; cbar.c    224 code UI PALWindowTable[] = 
000116 0000             736         DW      00000H
                        739         PUBLIC  _PALWindowTable
                        740         ALIGN   1
000118                  741 _PALWindowTable:
000118 00160218120116   742         DW      01600H,01802H,00112H,00116H,00102H,0011AH,02C02H,0901EH
       0102011A01022C       
       1E90                 
000128 02480002011703   743         DW      04802H,00200H,01701H,01803H,00113H,00117H,00103H,0011BH
       18130117010301       
       1B01                 
                        744 ; cbar.c    225 {
                        745 ; cbar.c    226         22*256  +                                                       SyncLineB
                            ,
                        746 ; cbar.c    227         24*256  +                       SyncLineC,
                        747 ; cbar.c    228         1*256           +       SRAMBank1 + SyncLineC,
                        748 ; cbar.c    229         1*256           +       SRAMBank2 + SyncLineC,
                        749 ; cbar.c    230         1*256           +                             SyncLineC,
                        750 ; cbar.c    231         1*256           +       SRAMBank3 + SyncLineC,
                        751 ; cbar.c    232         44*256  +                         SyncLineC,
                        752 ; cbar.c    233         144*256 +       SRAMBank4 + SyncLineC,
                        753 ; cbar.c    234         72*256  +                           SyncLineC,
                        754 ; cbar.c    235         2*256           +                                                       S
                            yncLineB,
                        755 ; cbar.c    236 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   7

ADDR   CODE            LINE SOURCELINE
                        756 ; cbar.c    237         23*256  +                                                       SyncLineA
                            ,
                        757 ; cbar.c    238         24*256  +                       SyncLineD,
                        758 ; cbar.c    239         1*256           +       SRAMBank1 + SyncLineD,
                        759 ; cbar.c    240         1*256           +       SRAMBank2 + SyncLineD,
                        760 ; cbar.c    241         1*256           +                         SyncLineD,
                        761 ; cbar.c    242         1*256           +       SRAMBank3 + SyncLineD,
                        762 ; cbar.c    243         44*256  +                                     SyncLineD,
                        763 ; cbar.c    244         144*256 +       SRAMBank4 + SyncLineD,
                        764 ; cbar.c    245         72*256  +                         SyncLineD,
                        765 ; cbar.c    246         2*256           +                                                       S
                            yncLineA,
                        766 ; cbar.c    247         0
                        767 ; cbar.c    248 };
                        768 ; cbar.c    249 
                        769 ; cbar.c    250 code UI PALCheckfieldTable[] = 
000138 032C1F90034801   770         DW      02C03H,0901FH,04803H,00201H,00000H
       020000               
                        773         PUBLIC  _PALCheckfieldTable
                        774         ALIGN   1
000142                  775 _PALCheckfieldTable:
000142 00161201168F1A   776         DW      01600H,00112H,08F16H,0901AH,00200H,01701H,09017H,0901BH
       90000201171790       
       1B90                 
                        777 ; cbar.c    251 {
                        778 ; cbar.c    252         22*256  +                                                       SyncLineB
                            ,
                        779 ; cbar.c    253         1*256           +       SRAMBank1 + SyncLineC,
                        780 ; cbar.c    254         143*256 +       SRAMBank2 + SyncLineC,
                        781 ; cbar.c    255         144*256 +       SRAMBank3 + SyncLineC,
                        782 ; cbar.c    256         2*256           +                                                       S
                            yncLineB,
                        783 ; cbar.c    257 
                        784 ; cbar.c    258         23*256  +                                                       SyncLineA
                            ,
                        785 ; cbar.c    259         144*256 +       SRAMBank2 + SyncLineD,
                        786 ; cbar.c    260         144*256 +       SRAMBank3 + SyncLineD,
                        787 ; cbar.c    261         2*256           +                                                       S
                            yncLineA,
                        788 ; cbar.c    262         0
                        789 ; cbar.c    263 };
                        790 ; cbar.c    264 
                        791 ; cbar.c    265 code UI PALCrosshatchTable[] = 
000152 01020000         792         DW      00201H,00000H
                        795         PUBLIC  _PALCrosshatchTable
                        796         ALIGN   1
000156                  797 _PALCrosshatchTable:
000156 00161207160112   798         DW      01600H,00712H,00116H,01412H,00116H,01412H,00116H,01412H
       14160112141601       
       1214                 
000166 16011214160112   799         DW      00116H,01412H,00116H,01412H,00116H,01412H,00116H,01412H
       14160112141601       
       1214                 
000176 16011214160112   800         DW      00116H,01412H,00116H,01412H,00116H,01412H,00116H,01412H
       14160112141601       
       1214                 
000186 16011214160112   801         DW      00116H,01412H,00116H,01412H,00116H,00712H,00200H,01701H
       14160112070002       
       0117                 
000196 13071701131417   802         DW      00713H,00117H,01413H,00117H,01413H,00117H,01413H,00117H
       01131417011314       
       1701                 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   8

ADDR   CODE            LINE SOURCELINE
0001A6 13141701131417   803         DW      01413H,00117H,01413H,00117H,01413H,00117H,01413H,00117H
       01131417011314       
       1701                 
0001B6 13141701131417   804         DW      01413H,00117H,01413H,00117H,01413H,00117H,01413H,00117H
       01131417011314       
       1701                 
                        805 ; cbar.c    266 {
                        806 ; cbar.c    267         22*256  +                                                       SyncLineB
                            ,
                        807 ; cbar.c    268         7*256           + SRAMBank1 + SyncLineC,
                        808 ; cbar.c    269         1*256           +       SRAMBank2 + SyncLineC,
                        809 ; cbar.c    270         20*256  +       SRAMBank1 + SyncLineC,
                        810 ; cbar.c    271         1*256           +       SRAMBank2 + SyncLineC,
                        811 ; cbar.c    272         20*256  +       SRAMBank1 + SyncLineC,
                        812 ; cbar.c    273         1*256           +       SRAMBank2 + SyncLineC,
                        813 ; cbar.c    274         20*256  +       SRAMBank1 + SyncLineC,
                        814 ; cbar.c    275         1*256           +       SRAMBank2 + SyncLineC,
                        815 ; cbar.c    276         20*256  +       SRAMBank1 + SyncLineC,
                        816 ; cbar.c    277         1*256           +       SRAMBank2 + SyncLineC,
                        817 ; cbar.c    278         20*256  +       SRAMBank1 + SyncLineC,
                        818 ; cbar.c    279         1*256           +       SRAMBank2 + SyncLineC,
                        819 ; cbar.c    280         20*256  +       SRAMBank1 + SyncLineC,
                        820 ; cbar.c    281         1*256           +       SRAMBank2 + SyncLineC,
                        821 ; cbar.c    282         20*256  +       SRAMBank1 + SyncLineC,
                        822 ; cbar.c    283         1*256           +       SRAMBank2 + SyncLineC,
                        823 ; cbar.c    284         20*256  +       SRAMBank1 + SyncLineC,
                        824 ; cbar.c    285         1*256           +       SRAMBank2 + SyncLineC,
                        825 ; cbar.c    286         20*256  +       SRAMBank1 + SyncLineC,
                        826 ; cbar.c    287         1*256           +       SRAMBank2 + SyncLineC,
                        827 ; cbar.c    288         20*256  +       SRAMBank1 + SyncLineC,
                        828 ; cbar.c    289         1*256           +       SRAMBank2 + SyncLineC,
                        829 ; cbar.c    290         20*256  +       SRAMBank1 + SyncLineC,
                        830 ; cbar.c    291         1*256           +       SRAMBank2 + SyncLineC,
                        831 ; cbar.c    292         20*256  +       SRAMBank1 + SyncLineC,
                        832 ; cbar.c    293         1*256           +       SRAMBank2 + SyncLineC,
                        833 ; cbar.c    294         20*256  +       SRAMBank1 + SyncLineC,
                        834 ; cbar.c    295         1*256           +       SRAMBank2 + SyncLineC,
                        835 ; cbar.c    296         7*256     +     SRAMBank1 + SyncLineC,
                        836 ; cbar.c    297         2*256           +                                                       S
                            yncLineB,
                        837 ; cbar.c    298 
                        838 ; cbar.c    299         23*256  +                                                       SyncLineA
                            ,
                        839 ; cbar.c    300         7*256           + SRAMBank1 + SyncLineD,
                        840 ; cbar.c    301         1*256           +       SRAMBank2 + SyncLineD,
                        841 ; cbar.c    302         20*256  +       SRAMBank1 + SyncLineD,
                        842 ; cbar.c    303         1*256           +       SRAMBank2 + SyncLineD,
                        843 ; cbar.c    304         20*256  +       SRAMBank1 + SyncLineD,
                        844 ; cbar.c    305         1*256           +       SRAMBank2 + SyncLineD,
                        845 ; cbar.c    306         20*256  +       SRAMBank1 + SyncLineD,
                        846 ; cbar.c    307         1*256           +       SRAMBank2 + SyncLineD,
                        847 ; cbar.c    308         20*256  +       SRAMBank1 + SyncLineD,
                        848 ; cbar.c    309         1*256           +       SRAMBank2 + SyncLineD,
                        849 ; cbar.c    310         20*256  +       SRAMBank1 + SyncLineD,
                        850 ; cbar.c    311         1*256           +       SRAMBank2 + SyncLineD,
                        851 ; cbar.c    312         20*256  +       SRAMBank1 + SyncLineD,
                        852 ; cbar.c    313         1*256           +       SRAMBank2 + SyncLineD,
                        853 ; cbar.c    314         20*256  +       SRAMBank1 + SyncLineD,
                        854 ; cbar.c    315         1*256           +       SRAMBank2 + SyncLineD,
                        855 ; cbar.c    316         20*256  +       SRAMBank1 + SyncLineD,
                        856 ; cbar.c    317         1*256           +       SRAMBank2 + SyncLineD,
                        857 ; cbar.c    318         20*256  +       SRAMBank1 + SyncLineD,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   9

ADDR   CODE            LINE SOURCELINE
                        858 ; cbar.c    319         1*256           +       SRAMBank2 + SyncLineD,
                        859 ; cbar.c    320         20*256  +       SRAMBank1 + SyncLineD,
                        860 ; cbar.c    321         1*256           +       SRAMBank2 + SyncLineD,
                        861 ; cbar.c    322         20*256  +       SRAMBank1 + SyncLineD,
                        862 ; cbar.c    323         1*256           +       SRAMBank2 + SyncLineD,
                        863 ; cbar.c    324         20*256  +       SRAMBank1 + SyncLineD,
                        864 ; cbar.c    325         1*256           +       SRAMBank2 + SyncLineD,
                        865 ; cbar.c    326         20*256  +       SRAMBank1 + SyncLineD,
                        866 ; cbar.c    327         1*256           +       SRAMBank2 + SyncLineD,
                        867 ; cbar.c    328         7*256     +     SRAMBank1 + SyncLineD,
                        868 ; cbar.c    329         2*256           +                                                       S
                            yncLineA,
                        869 ; cbar.c    330         0
                        870 ; cbar.c    331 };
                        871 ; cbar.c    332 
                        872 ; cbar.c    333 code UI PALPLUGETable[] = 
0001C6 13141701131417   873         DW      01413H,00117H,01413H,00117H,00713H,00201H,00000H
       01130701020000       
                        876         PUBLIC  _PALPLUGETable
                        877         ALIGN   1
0001D4                  878 _PALPLUGETable:
0001D4 00160226123516   879         DW      01600H,02602H,03512H,03516H,0351AH,0351EH,02602H,00200H
       351A351E350226       
       0002                 
0001E4 01170326133517   880         DW      01701H,02603H,03513H,03517H,0351BH,0351FH,02603H,00201H
       351B351F350326       
       0102                 
                        881 ; cbar.c    334 {
                        882 ; cbar.c    335         22*256  +                                                       SyncLineB
                            ,
                        883 ; cbar.c    336         38*256  +                         SyncLineC,
                        884 ; cbar.c    337         53*256  +       SRAMBank1 + SyncLineC,
                        885 ; cbar.c    338         53*256  +       SRAMBank2 + SyncLineC,
                        886 ; cbar.c    339         53*256  +       SRAMBank3 + SyncLineC,
                        887 ; cbar.c    340         53*256  +       SRAMBank4 + SyncLineC,
                        888 ; cbar.c    341         38*256  +                             SyncLineC,
                        889 ; cbar.c    342         2*256           +                                                       S
                            yncLineB,
                        890 ; cbar.c    343 
                        891 ; cbar.c    344         23*256  +                                                       SyncLineA
                            ,
                        892 ; cbar.c    345         38*256  +                   SyncLineD,
                        893 ; cbar.c    346         53*256  +       SRAMBank1 + SyncLineD,
                        894 ; cbar.c    347         53*256  +       SRAMBank2 + SyncLineD,
                        895 ; cbar.c    348         53*256  +       SRAMBank3 + SyncLineD,
                        896 ; cbar.c    349         53*256  +       SRAMBank4 + SyncLineD,
                        897 ; cbar.c    350         38*256  +                                 SyncLineD,
                        898 ; cbar.c    351         2*256           +                                                       S
                            yncLineA,
                        899 ; cbar.c    352         0
                        900 ; cbar.c    353 };
                        901 ; cbar.c    354 
                        902 ; cbar.c    355 code UI NTSCBlackTable[] = 
0001F4 0000             903         DW      00000H
                        906         PUBLIC  _NTSCBlackTable
                        907         ALIGN   1
0001F6                  908 _NTSCBlackTable:
0001F6 01030010027A02   909         DW      00301H,01000H,07A02H,07A02H,00200H,01101H,07A03H,07903H
       7A00020111037A       
       0379                 
                        910 ; cbar.c    356 {
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  10

ADDR   CODE            LINE SOURCELINE
                        911 ; cbar.c    357         3*256   +                                                       SyncLineA
                            ,
                        912 ; cbar.c    358         16*256  +                                                       SyncLineB
                            ,
                        913 ; cbar.c    359         122*256 +                                                       SyncLineC
                            ,
                        914 ; cbar.c    360         122*256 +                                                       SyncLineC
                            ,
                        915 ; cbar.c    361 
                        916 ; cbar.c    362         2*256           +                                                       S
                            yncLineB,
                        917 ; cbar.c    363         17*256  +                                                       SyncLineA
                            ,
                        918 ; cbar.c    364         122*256 +                                                       SyncLineD
                            ,
                        919 ; cbar.c    365         121*256 +                                                       SyncLineD
                            ,
                        920 ; cbar.c    366         0
                        921 ; cbar.c    367 };
                        922 ; cbar.c    368 
                        923 ; cbar.c    369 code UI NTSCFullFieldTable[] = 
000206 0000             924         DW      00000H
                        927         PUBLIC  _NTSCFullFieldTable
                        928         ALIGN   1
000208                  929 _NTSCFullFieldTable:
000208 01030010127A12   930         DW      00301H,01000H,07A12H,07A12H,00200H,01101H,07A13H,07913H
       7A00020111137A       
       1379                 
                        931 ; cbar.c    370 {
                        932 ; cbar.c    371         3*256   +                                                       SyncLineA
                            ,
                        933 ; cbar.c    372         16*256  +                                                       SyncLineB
                            ,
                        934 ; cbar.c    373         122*256 +       SRAMBank1       +       SyncLineC,
                        935 ; cbar.c    374         122*256 +       SRAMBank1 + SyncLineC,
                        936 ; cbar.c    375 
                        937 ; cbar.c    376         2*256           +                                                       S
                            yncLineB,
                        938 ; cbar.c    377         17*256  +                                                       SyncLineA
                            ,
                        939 ; cbar.c    378         122*256 +       SRAMBank1 + SyncLineD,
                        940 ; cbar.c    379         121*256 +       SRAMBank1 + SyncLineD,
                        941 ; cbar.c    380         0
                        942 ; cbar.c    381 };
                        943 ; cbar.c    382 
                        944 ; cbar.c    383 code UI SMPTECBarTable[] = 
000218 0000             945         DW      00000H
                        948         PUBLIC  _SMPTECBarTable
                        949         ALIGN   1
00021A                  950 _SMPTECBarTable:
00021A 0103001012A416   951         DW      00301H,01000H,0A412H,01316H,03D1AH,00200H,01101H,0A313H
       131A3D00020111       
       13A3                 
                        952 ; cbar.c    384 {
                        953 ; cbar.c    385         3*256   +                                                       SyncLineA
                            ,
                        954 ; cbar.c    386         16*256  +                                                       SyncLineB
                            ,
                        955 ; cbar.c    387         164*256 +       SRAMBank1 + SyncLineC,
                        956 ; cbar.c    388         19*256  +       SRAMBank2 + SyncLineC,
                        957 ; cbar.c    389         61*256  +       SRAMBank3 + SyncLineC,
                        958 ; cbar.c    390 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  11

ADDR   CODE            LINE SOURCELINE
                        959 ; cbar.c    391         2*256           +                                                       S
                            yncLineB,
                        960 ; cbar.c    392         17*256  +                                                       SyncLineA
                            ,
                        961 ; cbar.c    393         163*256 +       SRAMBank1 + SyncLineD,
                        962 ; cbar.c    394         19*256  +       SRAMBank2 + SyncLineD,
                        963 ; cbar.c    395         61*256  +       SRAMBank3 + SyncLineD,
                        964 ; cbar.c    396         0
                        965 ; cbar.c    397 };
                        966 ; cbar.c    398 
                        967 ; cbar.c    399 code UI NTSCWindowTable[] = 
00022A 17131B3D0000     968         DW      01317H,03D1BH,00000H
                        971         PUBLIC  _NTSCWindowTable
                        972         ALIGN   1
000230                  973 _NTSCWindowTable:
000230 01030010021E12   974         DW      00301H,01000H,01E02H,00112H,00116H,00102H,0011AH,01D02H
       01160102011A01       
       021D                 
000240 1E77023E000201   975         DW      0771EH,03E02H,00200H,01101H,01D03H,00113H,00117H,00103H
       11031D13011701       
       0301                 
                        976 ; cbar.c    400 {
                        977 ; cbar.c    401         3*256   +                                                       SyncLineA
                            ,
                        978 ; cbar.c    402         16*256  +                                                       SyncLineB
                            ,
                        979 ; cbar.c    403         30*256  +                               SyncLineC,
                        980 ; cbar.c    404         1*256           +       SRAMBank1 + SyncLineC,
                        981 ; cbar.c    405         1*256           +       SRAMBank2 + SyncLineC,
                        982 ; cbar.c    406         1*256           +                           SyncLineC,
                        983 ; cbar.c    407         1*256           +       SRAMBank3 + SyncLineC,
                        984 ; cbar.c    408         29*256  +                                       SyncLineC,
                        985 ; cbar.c    409         119*256 +       SRAMBank4 + SyncLineC,
                        986 ; cbar.c    410         62*256  +                               SyncLineC,
                        987 ; cbar.c    411 
                        988 ; cbar.c    412         2*256           +                                                       S
                            yncLineB,
                        989 ; cbar.c    413         17*256  +                                                       SyncLineA
                            ,
                        990 ; cbar.c    414         29*256  +                               SyncLineD,
                        991 ; cbar.c    415         1*256           +       SRAMBank1 + SyncLineD,
                        992 ; cbar.c    416         1*256           +       SRAMBank2 + SyncLineD,
                        993 ; cbar.c    417         1*256           +                             SyncLineD,
                        994 ; cbar.c    418         1*256           +       SRAMBank3 + SyncLineD,
                        995 ; cbar.c    419         29*256  +                         SyncLineD,
                        996 ; cbar.c    420         119*256 +       SRAMBank4 + SyncLineD,
                        997 ; cbar.c    421         62*256  +                           SyncLineD,
                        998 ; cbar.c    422         0
                        999 ; cbar.c    423 };
                       1000 ; cbar.c    424 
                       1001 ; cbar.c    425 code UI NTSCCheckfieldTable[] = 
000250 1B01031D1F7703  1002         DW      0011BH,01D03H,0771FH,03E03H,00000H
       3E0000               
                       1005         PUBLIC  _NTSCCheckfieldTable
                       1006         ALIGN   1
00025A                 1007 _NTSCCheckfieldTable:
00025A 01030010120116  1008         DW      00301H,01000H,00112H,07916H,07A1AH,00200H,01101H,07A17H
       791A7A00020111       
       177A                 
                       1009 ; cbar.c    426 {
                       1010 ; cbar.c    427         3*256   +                                                       SyncLineA
                            ,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  12

ADDR   CODE            LINE SOURCELINE
                       1011 ; cbar.c    428         16*256  +                                                       SyncLineB
                            ,
                       1012 ; cbar.c    429         1*256           +       SRAMBank1 + SyncLineC,
                       1013 ; cbar.c    430         121*256 +       SRAMBank2 + SyncLineC,
                       1014 ; cbar.c    431         122*256 +       SRAMBank3 + SyncLineC,
                       1015 ; cbar.c    432 
                       1016 ; cbar.c    433         2*256           +                                                       S
                            yncLineB,
                       1017 ; cbar.c    434         17*256  +                                                       SyncLineA
                            ,
                       1018 ; cbar.c    435         122*256 +       SRAMBank2 + SyncLineD,
                       1019 ; cbar.c    436         121*256 +       SRAMBank3 + SyncLineD,
                       1020 ; cbar.c    437         0
                       1021 ; cbar.c    438 };
                       1022 ; cbar.c    439 
                       1023 ; cbar.c    440 code UI NTSCCrosshatchTable[] = 
00026A 1B790000        1024         DW      0791BH,00000H
                       1027         PUBLIC  _NTSCCrosshatchTable
                       1028         ALIGN   1
00026E                 1029 _NTSCCrosshatchTable:
00026E 01030010120916  1030         DW      00301H,01000H,00912H,00116H,01012H,00116H,01112H,00116H
       01121016011211       
       1601                 
00027E 12101601121116  1031         DW      01012H,00116H,01112H,00116H,01012H,00116H,01112H,00116H
       01121016011211       
       1601                 
00028E 12101601121116  1032         DW      01012H,00116H,01112H,00116H,01012H,00116H,01112H,00116H
       01121016011211       
       1601                 
00029E 12101601121116  1033         DW      01012H,00116H,01112H,00116H,01012H,00116H,00712H,00200H
       01121016011207       
       0002                 
0002AE 01111308170113  1034         DW      01101H,00813H,00117H,01113H,00117H,01013H,00117H,01113H
       11170113101701       
       1311                 
0002BE 17011310170113  1035         DW      00117H,01013H,00117H,01113H,00117H,01013H,00117H,01113H
       11170113101701       
       1311                 
0002CE 17011310170113  1036         DW      00117H,01013H,00117H,01113H,00117H,01013H,00117H,01113H
       11170113101701       
       1311                 
                       1037 ; cbar.c    441 {
                       1038 ; cbar.c    442         3*256   +                                                       SyncLineA
                            ,
                       1039 ; cbar.c    443         16*256  +                                                       SyncLineB
                            ,
                       1040 ; cbar.c    444         9*256           +       SRAMBank1 + SyncLineC,
                       1041 ; cbar.c    445         1*256           +       SRAMBank2 + SyncLineC,
                       1042 ; cbar.c    446         16*256  +       SRAMBank1 + SyncLineC,
                       1043 ; cbar.c    447         1*256           +       SRAMBank2 + SyncLineC,
                       1044 ; cbar.c    448         17*256  +       SRAMBank1 + SyncLineC,
                       1045 ; cbar.c    449         1*256           +       SRAMBank2 + SyncLineC,
                       1046 ; cbar.c    450         16*256  +       SRAMBank1 + SyncLineC,
                       1047 ; cbar.c    451         1*256           +       SRAMBank2 + SyncLineC,
                       1048 ; cbar.c    452         17*256  +       SRAMBank1 + SyncLineC,
                       1049 ; cbar.c    453         1*256           +       SRAMBank2 + SyncLineC,
                       1050 ; cbar.c    454         16*256  +       SRAMBank1 + SyncLineC,
                       1051 ; cbar.c    455         1*256           +       SRAMBank2 + SyncLineC,
                       1052 ; cbar.c    456         17*256  +       SRAMBank1 + SyncLineC,
                       1053 ; cbar.c    457         1*256           +       SRAMBank2 + SyncLineC,
                       1054 ; cbar.c    458         16*256  +       SRAMBank1 + SyncLineC,
                       1055 ; cbar.c    459         1*256           +       SRAMBank2 + SyncLineC,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  13

ADDR   CODE            LINE SOURCELINE
                       1056 ; cbar.c    460         17*256  +       SRAMBank1 + SyncLineC,
                       1057 ; cbar.c    461         1*256           +       SRAMBank2 + SyncLineC,
                       1058 ; cbar.c    462         16*256  +       SRAMBank1 + SyncLineC,
                       1059 ; cbar.c    463         1*256           +       SRAMBank2 + SyncLineC,
                       1060 ; cbar.c    464         17*256  +       SRAMBank1 + SyncLineC,
                       1061 ; cbar.c    465         1*256           +       SRAMBank2 + SyncLineC,
                       1062 ; cbar.c    466         16*256  +       SRAMBank1 + SyncLineC,
                       1063 ; cbar.c    467         1*256           +       SRAMBank2 + SyncLineC,
                       1064 ; cbar.c    468         17*256  +       SRAMBank1 + SyncLineC,
                       1065 ; cbar.c    469         1*256           +       SRAMBank2 + SyncLineC,
                       1066 ; cbar.c    470         16*256  +       SRAMBank1 + SyncLineC,
                       1067 ; cbar.c    471         1*256           +       SRAMBank2 + SyncLineC,
                       1068 ; cbar.c    472         7*256           +       SRAMBank1 + SyncLineC,
                       1069 ; cbar.c    473 
                       1070 ; cbar.c    474         2*256           +                                                       S
                            yncLineB,
                       1071 ; cbar.c    475         17*256  +                                                       SyncLineA
                            ,
                       1072 ; cbar.c    476         8*256           +       SRAMBank1 + SyncLineD,
                       1073 ; cbar.c    477         1*256           +       SRAMBank2 + SyncLineD,
                       1074 ; cbar.c    478         17*256  +       SRAMBank1 + SyncLineD,
                       1075 ; cbar.c    479         1*256           +       SRAMBank2 + SyncLineD,
                       1076 ; cbar.c    480         16*256  +       SRAMBank1 + SyncLineD,
                       1077 ; cbar.c    481         1*256           +       SRAMBank2 + SyncLineD,
                       1078 ; cbar.c    482         17*256  +       SRAMBank1 + SyncLineD,
                       1079 ; cbar.c    483         1*256           +       SRAMBank2 + SyncLineD,
                       1080 ; cbar.c    484         16*256  +       SRAMBank1 + SyncLineD,
                       1081 ; cbar.c    485         1*256           +       SRAMBank2 + SyncLineD,
                       1082 ; cbar.c    486         17*256  +       SRAMBank1 + SyncLineD,
                       1083 ; cbar.c    487         1*256           +       SRAMBank2 + SyncLineD,
                       1084 ; cbar.c    488         16*256  +       SRAMBank1 + SyncLineD,
                       1085 ; cbar.c    489         1*256           +       SRAMBank2 + SyncLineD,
                       1086 ; cbar.c    490         17*256  +       SRAMBank1 + SyncLineD,
                       1087 ; cbar.c    491         1*256           +       SRAMBank2 + SyncLineD,
                       1088 ; cbar.c    492         16*256  +       SRAMBank1 + SyncLineD,
                       1089 ; cbar.c    493         1*256           +       SRAMBank2 + SyncLineD,
                       1090 ; cbar.c    494         17*256  +       SRAMBank1 + SyncLineD,
                       1091 ; cbar.c    495         1*256           +       SRAMBank2 + SyncLineD,
                       1092 ; cbar.c    496         16*256  +       SRAMBank1 + SyncLineD,
                       1093 ; cbar.c    497         1*256           +       SRAMBank2 + SyncLineD,
                       1094 ; cbar.c    498         17*256  +       SRAMBank1 + SyncLineD,
                       1095 ; cbar.c    499         1*256           +       SRAMBank2 + SyncLineD,
                       1096 ; cbar.c    500         16*256  +       SRAMBank1 + SyncLineD,
                       1097 ; cbar.c    501         1*256           +       SRAMBank2 + SyncLineD,
                       1098 ; cbar.c    502         17*256  +       SRAMBank1 + SyncLineD,
                       1099 ; cbar.c    503         1*256           +       SRAMBank2 + SyncLineD,
                       1100 ; cbar.c    504         6*256           +       SRAMBank1 + SyncLineD,
                       1101 ; cbar.c    505         0
                       1102 ; cbar.c    506 };
                       1103 ; cbar.c    507 
                       1104 ; cbar.c    508 code UI NTSCPLUGETable[] = 
0002DE 17011310170113  1105         DW      00117H,01013H,00117H,01113H,00117H,00613H,00000H
       11170113060000       
                       1108         PUBLIC  _NTSCPLUGETable
                       1109         ALIGN   1
0002EC                 1110 _NTSCPLUGETable:
0002EC 01030010023512  1111         DW      00301H,01000H,03502H,03812H,01316H,0131AH,0131EH,04E02H
       3816131A131E13       
       024E                 
0002FC 00020111033413  1112         DW      00200H,01101H,03403H,03813H,01317H,0131BH,0131FH,04E03H
       3817131B131F13       
       034E                 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  14

ADDR   CODE            LINE SOURCELINE
                       1113 ; cbar.c    509 {
                       1114 ; cbar.c    510         3*256   +                                                       SyncLineA
                            ,
                       1115 ; cbar.c    511         16*256  +                                                       SyncLineB
                            ,
                       1116 ; cbar.c    512         53*256  +                               SyncLineC,
                       1117 ; cbar.c    513         56*256  +       SRAMBank1 + SyncLineC,
                       1118 ; cbar.c    514         19*256  +       SRAMBank2 + SyncLineC,
                       1119 ; cbar.c    515         19*256  +       SRAMBank3 + SyncLineC,
                       1120 ; cbar.c    516         19*256  +       SRAMBank4 + SyncLineC,
                       1121 ; cbar.c    517         78*256  +                           SyncLineC,
                       1122 ; cbar.c    518                                                                                 
                       1123 ; cbar.c    519         2*256           +                                                       S
                            yncLineB,
                       1124 ; cbar.c    520         17*256  +                                                       SyncLineA
                            ,
                       1125 ; cbar.c    521         52*256  +                           SyncLineD,
                       1126 ; cbar.c    522         56*256  +       SRAMBank1 + SyncLineD,
                       1127 ; cbar.c    523         19*256  +       SRAMBank2 + SyncLineD,
                       1128 ; cbar.c    524         19*256  +       SRAMBank3 + SyncLineD,
                       1129 ; cbar.c    525         19*256  +       SRAMBank4 + SyncLineD,
                       1130 ; cbar.c    526         78*256  +                               SyncLineD,
                       1131 ; cbar.c    527         0
                       1132 ; cbar.c    528 };
                       1133 ; cbar.c    529                                                                                  
                                                                                                                             
                                    // Signal array defined in ROM
                       1134 ; cbar.c    530                                                                                  
                                                                                                                             
                                    //  (size/start is specified in BYTES
                       1135 ; cbar.c    531                                                                                  
                                                                                                                             
                                    //  in config.h)
                       1136 ; cbar.c    532 code int VideoSignalArray[SizeOfCBVideoCode/2] _at( StartOfCBVideoCode);
                       1137 ; cbar.c    533 code int SoundSignalArray[SizeOfEmbAudioCode/2] _at( StartOfEmbAudioCode);
                       1138 ; cbar.c    534 
                       1139 ; cbar.c    535 volatile int SRAMVideoPort _at( 0x44000);                       // Port defined i
                            n PLD
                       1140 ; cbar.c    536 volatile int SRAMSoundPort _at( 0x40000);                       // Port defined i
                            n PLD
                       1141 ; cbar.c    537 volatile int StatusPort _at( 0x6a000);                          // Port defined i
                            n PLD
                       1142 ; cbar.c    538 volatile int HOffsetPort _at( 0x6a004);                         // Port defined i
                            n PLD
                       1143 ; cbar.c    539 volatile int ChromaGainPort _at( 0x6a008);      // Port defined in PLD
                       1144 ; cbar.c    540 
                       1145 ; cbar.c    541 volatile _near UI TimeTickCounter;
                       1146 ; cbar.c    542 volatile _near int LineOffset;
                       1147 ; cbar.c    543 
                       1148 ; cbar.c    544 volatile int PhaseOffset;
                       1149 ; cbar.c    545 
                       1150 ; cbar.c    546 CBObject CBSetup;
                       1151 ; cbar.c    547 
                       1152 ; cbar.c    548 static _near UI Status _at( 0x120);
                       1153 ; cbar.c    549 
                       1154 ; cbar.c    550 static code UI * _near TablePtr _at( 0x122);
                       1155 ; cbar.c    551 static code UI *newTablePtr;
                       1156 ; cbar.c    552 
                       1157 ; cbar.c    553 static _near UI LineCnt _at( 0x126);
                       1158 ; cbar.c    554 static _near UC FrameCnt _at( 0x128);
                       1159 ; cbar.c    555 
                       1160 ; cbar.c    556 static _near UC SyncLineCnt _at( 0x129);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  15

ADDR   CODE            LINE SOURCELINE
                       1161 ; cbar.c    557 static _near UC SyncLinePtr _at( 0x12A);
                       1162 ; cbar.c    558                                                                                  
                                                                             
                       1163 ; cbar.c    559 static _near UC SoundFrameCnt _at( 0x12B);
                       1164 ; cbar.c    560 static _near UC SoundCnt _at( 0x12C);
                       1165 ; cbar.c    561 static _near UC SoundPtr _at( 0x12D);
                       1166 ; cbar.c    562 static _near UC SoundPtrMax _at( 0x12E);
                       1167 ; cbar.c    563 
                       1168 ; cbar.c    564 static char Blanking, NewPattern, SoundEnable;
                       1169 ; cbar.c    565 
                       1170 ; cbar.c    566 /**************************************************************************/
                       1171 ; cbar.c    567 /* WriteCBGain                                                                   
                                                                                                                             
                                                               CBAR.C */
                       1172 ; cbar.c    568 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1173 ; cbar.c    569 /* Author:       Kim Engedahl, DEV, 000504                                       
                                                                                                                             
                                    */
                       1174 ; cbar.c    570 /* Revised:      000606, KEn, DEV                                                
                                                                                                                             
                                            */
                       1175 ; cbar.c    571 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1176 ; cbar.c    572 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       1177 ; cbar.c    573 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       1178 ; cbar.c    574 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       1179 ; cbar.c    575 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       1180 ; cbar.c    576 /**************************************************************************/
                       1181 ; cbar.c    577 int WriteCBGain( UC gain)
                       1182 ; cbar.c    578 {
00030C 0000            1183         DW      00000H
000000                 1184 CBAR_PR SEGMENT HCODE
000000                 1185         RSEG    CBAR_PR
                       1186         ALIGN   1
                       1188         PUBLIC  _WriteCBGain
000000                 1189 _WriteCBGain:
000000 A97E            1193         ADDS.W  R7,#0EH
                       1197 ; cbar.c    579         return( Write_AD8402( CBPotMeter, 0, gain));
000002 911800          1199         MOV.B   R0H,#00H
000005 8121            1200         MOV.B   R1L,R0H
000007 820F            1201         MOV.B   [R7],R0L
000009 8102            1204         MOV.B   R0L,R1L
00000B 8227            1205         MOV.B   R1L,[R7]
                       1206         CALL    _Write_AD8402
00000D C4rrrrrr       +1206 ;       FCALL   _Write_AD8402
                       1210 ; cbar.c    580 }
000011 A972            1212         ADDS.W  R7,#02H
000013 D680            1214         RET
                       1216 ; cbar.c    581 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  16

ADDR   CODE            LINE SOURCELINE
                       1217 ; cbar.c    582 /**************************************************************************/
                       1218 ; cbar.c    583 /* WriteCBChromaGain                                                             
                                                                                                                             
                                               CBAR.C */
                       1219 ; cbar.c    584 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1220 ; cbar.c    585 /* Author:       Kim Engedahl, DEV, 000504                                       
                                                                                                                             
                                    */
                       1221 ; cbar.c    586 /* Revised:      000603, KEn, DEV                                                
                                                                                                                             
                                            */
                       1222 ; cbar.c    587 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1223 ; cbar.c    588 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       1224 ; cbar.c    589 /* Remarks:      The resistor at V118 has been swapped ie. bit 0 is bit 3 etc.*/
                       1225 ; cbar.c    590 /*                                       The conversion is done in SW instead of 
                            correcting the parts    */
                       1226 ; cbar.c    591 /*                                       list.                                   
                                                                                                                             
                                                                                                                    */
                       1227 ; cbar.c    592 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       1228 ; cbar.c    593 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       1229 ; cbar.c    594 /**************************************************************************/
                       1230 ; cbar.c    595 int WriteCBChromaGain( UC gain)
                       1231 ; cbar.c    596 {
000015 00              1232         ALIGN   1
                       1234         PUBLIC  _WriteCBChromaGain
000016                 1235 _WriteCBChromaGain:
                       1243 ; cbar.c    597         UC tmp = 0;
000016 911800          1245         MOV.B   R0H,#00H
                       1247 ; cbar.c    598 
                       1248 ; cbar.c    599         // gain bit 1 = bit4
                       1249 ; cbar.c    600         // gain bit 2 = bit3
                       1250 ; cbar.c    601         // gain bit 3 = bit2
                       1251 ; cbar.c    602         // gain bit 4 = bit1
                       1252 ; cbar.c    603 
                       1253 ; cbar.c    604         if ( gain & 0x01)
000019 8120            1255         MOV.B   R1L,R0L
00001B 912501          1256         AND.B   R1L,#01H
00001E F302            1257         BEQ     _3
                       1258 ; cbar.c    605                 tmp += 0x08;
000020 911808          1260         MOV.B   R0H,#08H
000024                 1263 _3:
                       1264 ; cbar.c    606 
                       1265 ; cbar.c    607         if ( gain & 0x02)
000024 8120            1267         MOV.B   R1L,R0L
000026 912502          1268         AND.B   R1L,#02H
000029 F302            1269         BEQ     _4
                       1270 ; cbar.c    608                 tmp += 0x04;
00002B A114            1272         ADDS.B  R0H,#04H
00002E                 1275 _4:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  17

ADDR   CODE            LINE SOURCELINE
                       1276 ; cbar.c    609 
                       1277 ; cbar.c    610         if ( gain & 0x04)
00002E 912804          1279         MOV.B   R1L,#04H
000031 5120            1280         AND.B   R1L,R0L
000033 F302            1281         BEQ     _5
                       1282 ; cbar.c    611                 tmp += 0x02;
000035 A112            1284         ADDS.B  R0H,#02H
000038                 1287 _5:
                       1288 ; cbar.c    612 
                       1289 ; cbar.c    613         if ( gain & 0x08)
000038 910508          1291         AND.B   R0L,#08H
00003B F302            1293         BEQ     _6
                       1294 ; cbar.c    614                 tmp += 0x01;
00003D A111            1296         ADDS.B  R0H,#01H
000040                 1299 _6:
                       1300 ; cbar.c    615 
                       1301 ; cbar.c    616         ChromaGainPort = tmp;
000040 8101            1303         MOV.B   R0L,R0H
000042 B110            1304         MOVS.B  R0H,#00H
000044 96484206        1306         MOV.B   ES,#SEG( _ChromaGainPort )
000048 9918A008        1307         MOV.W   R1,#SOF( _ChromaGainPort )
00004C 8A09            1308         MOV.W   [R1],R0
                       1309 ; cbar.c    617 
                       1310 ; cbar.c    618         return( OK);
00004E 9908FFFF        1312         MOV.W   R0,#0FFFFH
                       1313 ; cbar.c    619 }
000052 D680            1315         RET
                       1317 ; cbar.c    620 
                       1318 ; cbar.c    621 /**************************************************************************/
                       1319 ; cbar.c    622 /* SRAMVideoLoad                                                                 
                                                                                                     CBAR.C */
                       1320 ; cbar.c    623 /*                                                                               
                                                                                                                             
                                              */
                       1321 ; cbar.c    624 /* Author:       Kim Engedahl, DEV, 000324                                       
                                                                                      */
                       1322 ; cbar.c    625 /* Revised:      000603, KEn, DEV                                                
                                                                                      */
                       1323 ; cbar.c    626 /*                                                                               
                                                                                                                             
                                              */
                       1324 ; cbar.c    627 /* Function: Copy video data to video RAM                                        
                                                                              */
                       1325 ; cbar.c    628 /* Remarks:      S5,S4,S3 and S2 should be kept at ZERO while loading AND the */
                       1326 ; cbar.c    629 /*                                       interrupt system should NOT clear the PS
                             bit.                             */
                       1327 ; cbar.c    630 /* Returns:                                                                      
                                                                                                                             
                             */
                       1328 ; cbar.c    631 /* Updates:                                                                      
                                                                                                                             
                             */
                       1329 ; cbar.c    632 /**************************************************************************/
                       1330 ; cbar.c    633 int SRAMVideoLoad( UC signal, UC bank)
                       1331 ; cbar.c    634 {
                       1332         ALIGN   1
                       1334         PUBLIC  _SRAMVideoLoad
000054                 1335 _SRAMVideoLoad:
000054 0F30            1339         PUSH.W  R4, R5
000056 A978            1341         ADDS.W  R7,#08H
                       1356 ; cbar.c    635         volatile int *VideoDstPtr;
                       1357 ; cbar.c    636         code int *VideoSrcPtr;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  18

ADDR   CODE            LINE SOURCELINE
                       1358 ; cbar.c    637         int i;
                       1359 ; cbar.c    638 
                       1360 ; cbar.c    639         Status |= PS;                                                            
                                            // Set PS bit while loading
000058 9E16201000      1362         OR.W    _Status,#01000H
                       1363 ; cbar.c    640         StatusPort = Status;
00005D 96484206        1365         MOV.B   ES,#SEG( _StatusPort )
000061 9918A000        1366         MOV.W   R1,#SOF( _StatusPort )
000065 A81120          1367         MOV.W   [R1],_Status
                       1368 ; cbar.c    641                                                                                  
                                                                                                                             
                                            
                       1369 ; cbar.c    642         VideoDstPtr = &SRAMVideoPort + (( bank/4)-4) * 0x0800;
000068 D012            1371         LSR.B   R0H,#02H
00006A 8121            1373         MOV.B   R1L,R0H
00006C B130            1374         MOVS.B  R1H,#00H
00006E D91C            1375         ASL.W   R1,#0CH
000070 8921            1376         MOV.W   R2,R1
000072 B930            1377         MOVS.W  R3,#00H
000074 99580004        1378         MOV.W   R5,#SEG( _SRAMVideoPort+-16384 )
000078 99480000        1379         MOV.W   R4,#SOF( _SRAMVideoPort+-16384 )
00007C 0942            1380         ADD.W   R4,R2
00007E 8C5F06          1381         MOV.W   [R7+6],R5
000081 8C4F04          1382         MOV.W   [R7+4],R4
                       1383 ; cbar.c    643         VideoSrcPtr = &VideoSignalArray[ 0x800 * (long)signal];
000084 B110            1385         MOVS.B  R0H,#00H
000086 B910            1386         MOVS.W  R1,#00H
000088 DD0C            1388         ASL.D   R0,#0CH
00008A 99380005        1389         MOV.W   R3,#SEG( _VideoSignalArray )
00008E 99280000        1390         MOV.W   R2,#SOF( _VideoSignalArray )
000092 0920            1391         ADD.W   R2,R0
000094 1931            1392         ADDC.W  R3,R1
                       1394 ; cbar.c    644 
                       1395 ; cbar.c    645         for ( i = 0; i < 2048; i++)
000096 B900            1397         MOV.W   R0,#00H
000098                 1399 _7:
                       1400 ; cbar.c    646                 *VideoDstPtr++ = *VideoSrcPtr++;
000098 8953            1402         MOV.W   R5,R3
00009A 8942            1403         MOV.W   R4,R2
00009C 8C5F02          1404         MOV.W   [R7+2],R5
00009F 8A4F            1405         MOV.W   [R7],R4
0000A1 86AC43          1406         MOV.B   CS,R5L
0000A4 8854            1407         MOVC.W  R5,[R4+]
0000A6 8C3706          1410         MOV.W   R3,[R7+6]
0000A9 8C2704          1411         MOV.W   R2,[R7+4]
0000AC 866C42          1412         MOV.B   ES,R3L
0000AF 8A5A            1413         MOV.W   [R2],R5
0000B1 8C3702          1414         MOV.W   R3,[R7+2]
0000B4 8A27            1415         MOV.W   R2,[R7]
0000B6 99200002        1416         ADD.W   R2,#02H
0000BA 99310000        1417         ADDC.W  R3,#00H
0000BE 9C70040002      1422         ADD.W   [R7+4],#02H
0000C3 A901            1424         ADDS.W  R0,#01H
0000C5 99040800        1427         CMP.W   R0,#0800H
0000C9 FBE7            1428         BLT     _7
                       1429 ; cbar.c    647 
                       1430 ; cbar.c    648         Status &= ~PS;                                                           
                                    // Clear PS bit again
0000CB 9E1520EFFF      1432         AND.W   _Status,#0EFFFH
                       1433 ; cbar.c    649         StatusPort = Status;
0000D0 96484206        1435         MOV.B   ES,#SEG( _StatusPort )
0000D4 9908A000        1436         MOV.W   R0,#SOF( _StatusPort )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  19

ADDR   CODE            LINE SOURCELINE
0000D8 A80120          1437         MOV.W   [R0],_Status
                       1438 ; cbar.c    650 
                       1439 ; cbar.c    651         return( OK);
0000DB 9908FFFF        1441         MOV.W   R0,#0FFFFH
                       1443 ; cbar.c    652 }
0000DF 99700008        1445         ADD.W   R7,#08H
0000E3 2F30            1447         POP.W   R4, R5
0000E5 D680            1449         RET
                       1452 ; cbar.c    653 
                       1453 ; cbar.c    654 /**************************************************************************/
                       1454 ; cbar.c    655 /* SRAMSoundLoad                                                                 
                                                                                                CBAR.C */
                       1455 ; cbar.c    656 /*                                                                               
                                                                                                                             
                                              */
                       1456 ; cbar.c    657 /* Author:       Kim Engedahl, DEV, 000410                                       
                                                                                      */
                       1457 ; cbar.c    658 /* Revised:      000603, KEn, DEV                                                
                                                                                      */
                       1458 ; cbar.c    659 /*                                                                               
                                                                                                                             
                                              */
                       1459 ; cbar.c    660 /* Function: Copy sound data to sound RAM                                        
                                                                              */
                       1460 ; cbar.c    661 /* Remarks:                                                                      
                                                                                                                             
                             */
                       1461 ; cbar.c    662 /* Returns:                                                                      
                                                                                                                             
                             */
                       1462 ; cbar.c    663 /* Updates:                                                                      
                                                                                                                             
                             */
                       1463 ; cbar.c    664 /**************************************************************************/
                       1464 ; cbar.c    665 int SRAMSoundLoad( UC signal)
                       1465 ; cbar.c    666 {
0000E7 00              1466         ALIGN   1
                       1468         PUBLIC  _SRAMSoundLoad
0000E8                 1469 _SRAMSoundLoad:
0000E8 0F30            1473         PUSH.W  R4, R5
0000EA A978            1475         ADDS.W  R7,#08H
                       1484 ; cbar.c    667         volatile int *SoundDstPtr;
                       1485 ; cbar.c    668         code int *SoundSrcPtr;
                       1486 ; cbar.c    669         int i;
                       1487 ; cbar.c    670 
                       1488 ; cbar.c    671         signal = ( signal == EmbAudioStereo1kHz);
0000EC 910402          1490         CMP.B   R0L,#02H
0000EF F203            1491         BNE     _10
0000F1 B101            1492         MOVS.B  R0L,#01H
0000F3 FE02            1493         BR      _12
0000F3 FE0200          1493         BR      _12
0000F6                 1494 _10:
0000F6 B100            1495         MOVS.B  R0L,#00H
0000F6 B100            1495         MOVS.B  R0L,#00H
0000F8                 1496 _12:
                       1499 ; cbar.c    672 
                       1500 ; cbar.c    673         Status |= PS;                                                            
                                    // Set PS bit while loading
0000F8 9E16201000      1502         OR.W    _Status,#01000H
                       1503 ; cbar.c    674         StatusPort = Status;
0000FD 96484206        1505         MOV.B   ES,#SEG( _StatusPort )
000101 9918A000        1506         MOV.W   R1,#SOF( _StatusPort )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  20

ADDR   CODE            LINE SOURCELINE
000105 A81120          1507         MOV.W   [R1],_Status
                       1508 ; cbar.c    675                                                                                  
                                                                                                                             
                            
                       1509 ; cbar.c    676         SoundDstPtr = &SRAMSoundPort;
000108 9D7800060004    1511         MOV.W   [R7+6],#SEG( _SRAMSoundPort )
00010E 9C78040000      1512         MOV.W   [R7+4],#SOF( _SRAMSoundPort )
                       1513 ; cbar.c    677         SoundSrcPtr = &SoundSignalArray[2304*signal];
000113 B110            1515         MOVS.B  R0H,#00H
000115 E9001200        1517         MULU.W  R0,#01200H
000119 B910            1518         MOVS.W  R1,#00H
00011B 99380004        1519         MOV.W   R3,#SEG( _SoundSignalArray )
00011F 9928A000        1520         MOV.W   R2,#SOF( _SoundSignalArray )
000123 0920            1521         ADD.W   R2,R0
000125 1931            1522         ADDC.W  R3,R1
                       1524 ; cbar.c    678 
                       1525 ; cbar.c    679         for ( i = 0; i < 2304; i++)
000127 B900            1527         MOV.W   R0,#00H
00012A                 1529 _9:
                       1530 ; cbar.c    680                 *SoundDstPtr++ = *SoundSrcPtr++;
00012A 8953            1532         MOV.W   R5,R3
00012C 8942            1533         MOV.W   R4,R2
00012E 8C5F02          1534         MOV.W   [R7+2],R5
000131 8A4F            1535         MOV.W   [R7],R4
000133 86AC43          1536         MOV.B   CS,R5L
000136 8854            1537         MOVC.W  R5,[R4+]
000138 8C3706          1540         MOV.W   R3,[R7+6]
00013B 8C2704          1541         MOV.W   R2,[R7+4]
00013E 866C42          1542         MOV.B   ES,R3L
000141 8A5A            1543         MOV.W   [R2],R5
000143 8C3702          1544         MOV.W   R3,[R7+2]
000146 8A27            1545         MOV.W   R2,[R7]
000148 99200002        1546         ADD.W   R2,#02H
00014C 99310000        1547         ADDC.W  R3,#00H
000150 9C70040002      1552         ADD.W   [R7+4],#02H
000155 A901            1554         ADDS.W  R0,#01H
000157 99040900        1557         CMP.W   R0,#0900H
00015B FBE7            1558         BLT     _9
                       1559 ; cbar.c    681 
                       1560 ; cbar.c    682         Status &= ~PS;                                                           
                                    // Clear PS bit again
00015D 9E1520EFFF      1562         AND.W   _Status,#0EFFFH
                       1563 ; cbar.c    683         StatusPort = Status;
000162 96484206        1565         MOV.B   ES,#SEG( _StatusPort )
000166 9908A000        1566         MOV.W   R0,#SOF( _StatusPort )
00016A A80120          1567         MOV.W   [R0],_Status
                       1568 ; cbar.c    684 
                       1569 ; cbar.c    685         return( OK);
00016D 9908FFFF        1571         MOV.W   R0,#0FFFFH
                       1573 ; cbar.c    686 }
000171 99700008        1575         ADD.W   R7,#08H
000175 2F30            1577         POP.W   R4, R5
000177 D680            1579         RET
                       1582 ; cbar.c    687 
                       1583 ; cbar.c    688 /**************************************************************************/
                       1584 ; cbar.c    689 /* CBLineInterrupt                                                               
                                                                                        CBAR.C */
                       1585 ; cbar.c    690 /*                                                                               
                                                                                                                             
                                              */
                       1586 ; cbar.c    691 /* Author:       Kim Engedahl, DEV, 000322                                       
                                                                                      */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  21

ADDR   CODE            LINE SOURCELINE
                       1587 ; cbar.c    692 /* Revised:      000603, KEn, DEV                                                
                                                                                      */
                       1588 ; cbar.c    693 /*                                                                               
                                                                                                                             
                                              */
                       1589 ; cbar.c    694 /* Function:                                                                     
                                                                                                                      */
                       1590 ; cbar.c    695 /* Remarks:      Delayed field interrupt is synchronized to line ??/??           
                             */
                       1591 ; cbar.c    696 /* Returns:                                                                      
                                                                                                                             
                             */
                       1592 ; cbar.c    697 /* Updates:                                                                      
                                                                                                                             
                             */
                       1593 ; cbar.c    698 /**************************************************************************/
                       1594 ; cbar.c    699 void CBLineInterrupt( void)
                       1595 ; cbar.c    700 {
000179 00              1596         ALIGN   1
000000                 1598 CBAR_CLR_FA     SEGMENT HDATA INSEGMENT CLEAR
000000                 1599         RSEG    CBAR_CLR_FA
                       1600         ALIGN   1
000000                 1601 _14:    DS      2
   |  RESERVED             
000001
                       1602         PUBLIC  _CBLineInterrupt
00017A                 1603         RSEG    CBAR_PR
00017A                 1603         RSEG    CBAR_PR
00017A                 1604 _CBLineInterrupt:
                       1609 ; cbar.c    701   static UI tmp;
                       1610 ; cbar.c    702 
                       1611 ; cbar.c    703         if ( CBSetup.System < NTSC)
00017A 964842rr        1613         MOV.B   ES,#SEG( _CBSetup )
00017E 9908rrrr        1614         MOV.W   R0,#SOF( _CBSetup )
000182 8200            1615         MOV.B   R0L,[R0]
000184 910402          1616         CMP.B   R0L,#02H
                       1617         BCC     _24
000187 F102           +1617 ;       BCS     _LG_14
000189 D50089         +1617 ;       JMP.L   _24
000189 D50089         +1617 ;       JMP.L   _24
00018C                +1617 _LG_14:
                       1618 ; cbar.c    704         {
                       1619 ; cbar.c    705                 if ( TF0)                                                        
                                            // If delayed field interrupt...
00018C 082285          1621         MOV     C,0285H
00018F F018            1622         BCC     _15
                       1623 ; cbar.c    706                 {
                       1624 ; cbar.c    707                         TF0 = 0;                                                 
                                                    // Clear delayed field interrupt
000191 080285          1626         CLR     0285H
                       1627 ; cbar.c    708 
                       1628 ; cbar.c    709                         SyncLineCnt = 19;                                        
                                    // Next interrupt in 19 lines
000194 96182913        1630         MOV.B   _SyncLineCnt,#013H
                       1631 ; cbar.c    710                         SyncLinePtr = 0;
000198 B6102A          1633         MOV.B   _SyncLinePtr,#00H
                       1634 ; cbar.c    711         
                       1635 ; cbar.c    712                         LineCnt = 3;
00019B BE1326          1637         MOV.W   _LineCnt,#03H
                       1638 ; cbar.c    713 
                       1639 ; cbar.c    714                         SoundCnt = 2;
00019E B6122C          1641         MOV.B   _SoundCnt,#02H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  22

ADDR   CODE            LINE SOURCELINE
                       1642 ; cbar.c    715                         SoundPtr = 2;
0001A1 B6122D          1644         MOV.B   _SoundPtr,#02H
                       1645 ; cbar.c    716 
                       1646 ; cbar.c    717                         SoundPtrMax = 64;
0001A4 96182E40        1648         MOV.B   _SoundPtrMax,#040H
                       1649 ; cbar.c    718 
                       1650 ; cbar.c    719                         Status |= FIELD1;                                        
                                    // This is field 1 of 8
0001A8 9E16200200      1652         OR.W    _Status,#0200H
                       1653 ; cbar.c    720                         Status &= ~SYSSEL;                                      
0001AD 9E1520FFBF      1655         AND.W   _Status,#0FFBFH
                       1656 ; cbar.c    721                         StatusPort = Status;
0001B2 96484206        1658         MOV.B   ES,#SEG( _StatusPort )
0001B6 9908A000        1659         MOV.W   R0,#SOF( _StatusPort )
0001BA A80120          1660         MOV.W   [R0],_Status
                       1661 ; cbar.c    722 
                       1662 ; cbar.c    723                         return;
0001BD D680            1664         RET
                       1665 ; cbar.c    724                 }
0001C0                 1667 _15:
                       1668 ; cbar.c    725                 else
                       1669 ; cbar.c    726                 {
                       1670 ; cbar.c    727                         if ( Status & FIELD1)
0001C0 99080200        1672         MOV.W   R0,#0200H
0001C4 5E0120          1673         AND.W   R0,_Status
0001C7 F309            1674         BEQ     _16
                       1675 ; cbar.c    728                         {
                       1676 ; cbar.c    729                                 Status &= ~FIELD1;
0001C9 9E1520FDFF      1678         AND.W   _Status,#0FDFFH
                       1679 ; cbar.c    730                                 StatusPort = Status;
0001CE 96484206        1681         MOV.B   ES,#SEG( _StatusPort )
0001D2 9908A000        1682         MOV.W   R0,#SOF( _StatusPort )
0001D6 A80120          1683         MOV.W   [R0],_Status
                       1684 ; cbar.c    731                         }
0001DA                 1686 _16:
                       1687 ; cbar.c    732 
                       1688 ; cbar.c    733                         LineCnt++;
0001DA AE1126          1690         ADDS.W  _LineCnt,#01H
                       1691 ; cbar.c    734 
                       1692 ; cbar.c    735                         if ( CBSetup.System == PAL_PALID)
0001DD 964842rr        1694         MOV.B   ES,#SEG( _CBSetup )
0001E1 9908rrrr        1695         MOV.W   R0,#SOF( _CBSetup )
0001E5 8200            1696         MOV.B   R0L,[R0]
0001E7 910401          1697         CMP.B   R0L,#01H
0001EA F218            1698         BNE     _19
                       1699 ; cbar.c    736                         {
                       1700 ; cbar.c    737                                 if ( LineCnt == 6)                              /
                            / Prepare for line 7
0001EC 9E14260006      1702         CMP.W   _LineCnt,#06H
0001F1 F209            1703         BNE     _17
                       1704 ; cbar.c    738                                 {
                       1705 ; cbar.c    739                                         Status |= LINE7PULSE;
0001F3 9E16202000      1707         OR.W    _Status,#02000H
                       1708 ; cbar.c    740                                         StatusPort = Status;                    /
                            / Update status port
0001F8 96484206        1710         MOV.B   ES,#SEG( _StatusPort )
0001FC 9908A000        1711         MOV.W   R0,#SOF( _StatusPort )
000200 A80120          1712         MOV.W   [R0],_Status
                       1713 ; cbar.c    741                                 }
000204                 1715 _17:
                       1716 ; cbar.c    742 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  23

ADDR   CODE            LINE SOURCELINE
                       1717 ; cbar.c    743                                 if ( LineCnt == 7)                              /
                            / Prepare for line 8
000204 9E14260007      1719         CMP.W   _LineCnt,#07H
000209 F209            1720         BNE     _19
                       1721 ; cbar.c    744                                 {
                       1722 ; cbar.c    745                                         Status &= ~LINE7PULSE;
00020B 9E1520DFFF      1724         AND.W   _Status,#0DFFFH
                       1725 ; cbar.c    746                                         StatusPort = Status;                    /
                            / Update status port
000210 96484206        1727         MOV.B   ES,#SEG( _StatusPort )
000214 9908A000        1728         MOV.W   R0,#SOF( _StatusPort )
000218 A80120          1729         MOV.W   [R0],_Status
                       1730 ; cbar.c    747                                 }
                       1731 ; cbar.c    748 
                       1732 ; cbar.c    749                         }               
00021C                 1734 _19:
                       1735 ; cbar.c    750 
                       1736 ; cbar.c    751                         if ( !--SoundCnt)
00021C A61F2C          1738         ADDS.B  _SoundCnt,#0FH
00021F 86012C          1739         MOV.B   R0L,_SoundCnt
                       1740         BNE     _38
000222 F302           +1740 ;       BEQ     _LG_26
000224 D500CD         +1740 ;       JMP.L   _38
000224 D500CD00       +1740 ;       JMP.L   _38
000228                +1740 _LG_26:
                       1741 ; cbar.c    752                         {
                       1742 ; cbar.c    753                                 if ( SoundPtr > SoundPtrMax)
000228 86012E          1744         MOV.B   R0L,_SoundPtrMax
00022B 46092D          1745         CMP.B   _SoundPtr,R0L
00022E F90B            1746         BL      _22
                       1747 ; cbar.c    754                                 {
                       1748 ; cbar.c    755                                         SoundPtr = 0;
000230 B6102D          1750         MOV.B   _SoundPtr,#00H
                       1751 ; cbar.c    756 
                       1752 ; cbar.c    757                                         if ( SoundPtrMax == 63)
000233 86092E          1754         MOV.B   _SoundPtrMax,R0L
000236 96142E3F        1755         CMP.B   _SoundPtrMax,#03FH
00023A F203            1756         BNE     _20
                       1757 ; cbar.c    758                                                 SoundPtrMax = 64;
00023C 96182E40        1759         MOV.B   _SoundPtrMax,#040H
000240 FE02            1760         BR      _22
000240 FE02            1760         BR      _22
000242                 1761 _20:
                       1762 ; cbar.c    759                                         else
                       1763 ; cbar.c    760                                                 SoundPtrMax = 63;
000242 96182E3F        1765         MOV.B   _SoundPtrMax,#03FH
                       1766 ; cbar.c    761                                 }
000246                 1768 _22:
                       1769 ; cbar.c    762                                 tmp = Sound625[SoundPtr++];     // Get sound info
                            rmation
000246 86012D          1771         MOV.B   R0L,_SoundPtr
000249 B110            1772         MOVS.B  R0H,#00H
00024B D901            1773         ASL.W   R0,#01H
00024D 8920            1774         MOV.W   R2,R0
00024F B930            1775         MOVS.W  R3,#00H
000251 9918rrrr        1776         MOV.W   R1,#SEG( _Sound625 )
000255 9908rrrr        1777         MOV.W   R0,#SOF( _Sound625 )
000259 0902            1778         ADD.W   R0,R2
00025B 1913            1779         ADDC.W  R1,R3
00025D 862C43          1780         MOV.B   CS,R1L
000260 8810            1781         MOVC.W  R1,[R0+]
000262 964842rr        1782         MOV.B   ES,#SEG( _14 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  24

ADDR   CODE            LINE SOURCELINE
000266 9908rrrr        1783         MOV.W   R0,#SOF( _14 )
00026A 8A18            1784         MOV.W   [R0],R1
00026C A6112D          1785         ADDS.B  _SoundPtr,#01H
                       1786 ; cbar.c    763                 
                       1787 ; cbar.c    764                                 Status &= ~SOUND;                                
                                    // Clear previous sound sample
00026F 9E1520FE7F      1789         AND.W   _Status,#0FE7FH
                       1790 ; cbar.c    765 
                       1791 ; cbar.c    766                                 if ( SoundEnable)                               /
                            / If embedded audio on..
000274 964842rr        1793         MOV.B   ES,#SEG( _SoundEnable )
000278 9908rrrr        1794         MOV.W   R0,#SOF( _SoundEnable )
00027C 8200            1795         MOV.B   R0L,[R0]
00027E F305            1796         BEQ     _23
                       1797 ; cbar.c    767                                         Status |= ( tmp & SOUND);       //  set s
                            ound samples
000280 99080180        1799         MOV.W   R0,#0180H
000284 5901            1800         AND.W   R0,R1
000286 6E0920          1801         OR.W    _Status,R0
000286 6E092000        1801         OR.W    _Status,R0
00028A                 1802 _23:
                       1803 ; cbar.c    768 
                       1804 ; cbar.c    769                                 SoundCnt = tmp & 0x0F;                  // Lines 
                            to next sound update
00028A 91250F          1806         AND.B   R1L,#0FH
00028D 86292C          1807         MOV.B   _SoundCnt,R1L
                       1808 ; cbar.c    770                                 StatusPort = Status;                            /
                            / Update status port
000290 96484206        1810         MOV.B   ES,#SEG( _StatusPort )
000294 9908A000        1811         MOV.W   R0,#SOF( _StatusPort )
000298 A80120          1812         MOV.W   [R0],_Status
                       1813 ; cbar.c    771                         }
                       1814 ; cbar.c    772                 }
                       1815 ; cbar.c    773         }
                       1817         BR      _38
00029B D50091         +1817         JMP.L   _38
00029B D50091         +1817         JMP.L   _38
00029E                 1818 _24:
                       1819 ; cbar.c    774         else
                       1820 ; cbar.c    775         {
                       1821 ; cbar.c    776                 if ( TF0)                                                        
                                            // If delayed field interrupt...
00029E 082285          1823         MOV     C,0285H
0002A1 F01E            1824         BCC     _26
                       1825 ; cbar.c    777                 {
                       1826 ; cbar.c    778                         TF0 = 0;                                                 
                                                    // Clear delayed field interrupt
0002A3 080285          1828         CLR     0285H
                       1829 ; cbar.c    779 
                       1830 ; cbar.c    780                         if ( FrameCnt > 9)
0002A6 96142809        1832         CMP.B   _FrameCnt,#09H
0002AA F903            1833         BL      _25
                       1834 ; cbar.c    781                         {
                       1835 ; cbar.c    782                                 FrameCnt = 1;
0002AC B61128          1837         MOV.B   _FrameCnt,#01H
                       1838 ; cbar.c    783                                 SoundFrameCnt = 1;
0002AF B6112B          1840         MOV.B   _SoundFrameCnt,#01H
                       1841 ; cbar.c    784                         }
0002B2                 1843 _25:
                       1844 ; cbar.c    785 
                       1845 ; cbar.c    786                         SyncLineCnt = 12;                                        
                                                    // Next interrupt in 12 lines
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  25

ADDR   CODE            LINE SOURCELINE
0002B2 9618290C        1847         MOV.B   _SyncLineCnt,#0CH
                       1848 ; cbar.c    787                         SyncLinePtr = 1;
0002B6 B6112A          1850         MOV.B   _SyncLinePtr,#01H
                       1851 ; cbar.c    788 
                       1852 ; cbar.c    789                         LineCnt = 6;
0002B9 BE1626          1854         MOV.W   _LineCnt,#06H
                       1855 ; cbar.c    790 
                       1856 ; cbar.c    791                         SoundCnt = 2;
0002BC B6122C          1858         MOV.B   _SoundCnt,#02H
                       1859 ; cbar.c    792                         SoundPtr = 3;
0002BF B6132D          1861         MOV.B   _SoundPtr,#03H
                       1862 ; cbar.c    793                         SoundPtrMax = 47;
0002C2 96182E2F        1864         MOV.B   _SoundPtrMax,#02FH
                       1865 ; cbar.c    794 
                       1866 ; cbar.c    795                         Status |= FIELD1;                                        
                                                    // This is field 1 of 4
0002C6 9E16200200      1868         OR.W    _Status,#0200H
                       1869 ; cbar.c    796                         Status |= SYSSEL;
0002CB 9E16200040      1871         OR.W    _Status,#040H
                       1872 ; cbar.c    797                         StatusPort = Status;
0002D0 96484206        1874         MOV.B   ES,#SEG( _StatusPort )
0002D4 9908A000        1875         MOV.W   R0,#SOF( _StatusPort )
0002D8 A80120          1876         MOV.W   [R0],_Status
                       1877 ; cbar.c    798 
                       1878 ; cbar.c    799                         return;
0002DB D680            1880         RET
                       1881 ; cbar.c    800                 }
0002DE                 1883 _26:
                       1884 ; cbar.c    801                 else
                       1885 ; cbar.c    802                 {
                       1886 ; cbar.c    803                         if ( Status & FIELD1)
0002DE 99080200        1888         MOV.W   R0,#0200H
0002E2 5E0120          1889         AND.W   R0,_Status
0002E5 F309            1890         BEQ     _27
                       1891 ; cbar.c    804                         {
                       1892 ; cbar.c    805                                 Status &= ~FIELD1;      
0002E7 9E1520FDFF      1894         AND.W   _Status,#0FDFFH
                       1895 ; cbar.c    806                                 StatusPort = Status;
0002EC 96484206        1897         MOV.B   ES,#SEG( _StatusPort )
0002F0 9908A000        1898         MOV.W   R0,#SOF( _StatusPort )
0002F4 A80120          1899         MOV.W   [R0],_Status
                       1900 ; cbar.c    807                         }
0002F8                 1902 _27:
                       1903 ; cbar.c    808 
                       1904 ; cbar.c    809                         if ( ++LineCnt >= 525)
0002F8 AE1126          1906         ADDS.W  _LineCnt,#01H
0002FB 9E1426020D      1907         CMP.W   _LineCnt,#020DH
000300 F109            1908         BCS     _29
                       1909 ; cbar.c    810                         {
                       1910 ; cbar.c    811                                 FrameCnt++;
000302 A61128          1912         ADDS.B  _FrameCnt,#01H
                       1913 ; cbar.c    812                                 LineCnt = 0;
000305 BE1026          1915         MOV.W   _LineCnt,#00H
                       1916 ; cbar.c    813 
                       1917 ; cbar.c    814                                 if ( ++SoundFrameCnt > 5)
000308 A6112B          1919         ADDS.B  _SoundFrameCnt,#01H
00030B 96142B05        1920         CMP.B   _SoundFrameCnt,#05H
00030F F902            1921         BL      _29
                       1922 ; cbar.c    815                                         SoundFrameCnt = 1;
000311 B6112B          1924         MOV.B   _SoundFrameCnt,#01H
                       1925 ; cbar.c    816                         }
000314                 1927 _29:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  26

ADDR   CODE            LINE SOURCELINE
                       1928 ; cbar.c    817 
                       1929 ; cbar.c    818                         if ( !--SoundCnt)
000314 A61F2C          1931         ADDS.B  _SoundCnt,#0FH
000317 86012C          1932         MOV.B   R0L,_SoundCnt
00031A F252            1933         BNE     _38
                       1934 ; cbar.c    819                         {
                       1935 ; cbar.c    820                                 if ( SoundPtr > SoundPtrMax)
00031C 86012E          1937         MOV.B   R0L,_SoundPtrMax
00031F 46092D          1938         CMP.B   _SoundPtr,R0L
000322 F90B            1939         BL      _32
                       1940 ; cbar.c    821                                 {
                       1941 ; cbar.c    822                                         SoundPtr = 0;
000324 B6102D          1943         MOV.B   _SoundPtr,#00H
                       1944 ; cbar.c    823 
                       1945 ; cbar.c    824                                         if ( SoundPtrMax == 46)
000327 86092E          1947         MOV.B   _SoundPtrMax,R0L
00032A 96142E2E        1948         CMP.B   _SoundPtrMax,#02EH
00032E F203            1949         BNE     _30
                       1950 ; cbar.c    825                                                 SoundPtrMax = 47;
000330 96182E2F        1952         MOV.B   _SoundPtrMax,#02FH
000334 FE02            1953         BR      _32
000334 FE02            1953         BR      _32
000336                 1954 _30:
                       1955 ; cbar.c    826                                         else
                       1956 ; cbar.c    827                                                 SoundPtrMax = 46;
000336 96182E2E        1958         MOV.B   _SoundPtrMax,#02EH
                       1959 ; cbar.c    828                                 }
00033A                 1961 _32:
                       1962 ; cbar.c    829                                 tmp = Sound525[SoundPtr];                       /
                            / Get sound information
00033A 86012D          1964         MOV.B   R0L,_SoundPtr
00033D B110            1965         MOVS.B  R0H,#00H
00033F D901            1966         ASL.W   R0,#01H
000341 8920            1967         MOV.W   R2,R0
000343 B930            1968         MOVS.W  R3,#00H
000345 9918rrrr        1969         MOV.W   R1,#SEG( _Sound525 )
000349 9908rrrr        1970         MOV.W   R0,#SOF( _Sound525 )
00034D 0902            1971         ADD.W   R0,R2
00034F 1913            1972         ADDC.W  R1,R3
000351 862C43          1973         MOV.B   CS,R1L
000354 8810            1974         MOVC.W  R1,[R0+]
000356 964842rr        1975         MOV.B   ES,#SEG( _14 )
00035A 9908rrrr        1976         MOV.W   R0,#SOF( _14 )
00035E 8A18            1977         MOV.W   [R0],R1
                       1978 ; cbar.c    830 
                       1979 ; cbar.c    831                                 if ( SoundPtr++ == 47)                          /
                            / Prepare for line 263
000360 86012D          1981         MOV.B   R0L,_SoundPtr
000363 A6112D          1982         ADDS.B  _SoundPtr,#01H
000366 91042F          1983         CMP.B   R0L,#02FH
000369 F20C            1984         BNE     _34
                       1985 ; cbar.c    832                                         if ( SoundFrameCnt & 0x01)      // Sound 
                            frames 1,3,5 are special
00036B 86012B          1987         MOV.B   R0L,_SoundFrameCnt
00036E 910501          1988         AND.B   R0L,#01H
000371 F308            1989         BEQ     _34
                       1990 ; cbar.c    833                                                 tmp |= S3OR4;
000373 99160100        1992         OR.W    R1,#0100H
000377 964842rr        1993         MOV.B   ES,#SEG( _14 )
00037B 9908rrrr        1994         MOV.W   R0,#SOF( _14 )
00037F 8A18            1995         MOV.W   [R0],R1
                       1996 ; cbar.c    834 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  27

ADDR   CODE            LINE SOURCELINE
                       1997 ; cbar.c    835                                 Status &= ~SOUND;                                
                                                    // Clear previous sound sample
000382                 1999 _34:
000382 9E1520FE7F      2000         AND.W   _Status,#0FE7FH
                       2001 ; cbar.c    836 
                       2002 ; cbar.c    837                                 if ( SoundEnable)
000387 964842rr        2004         MOV.B   ES,#SEG( _SoundEnable )
00038B 9908rrrr        2005         MOV.W   R0,#SOF( _SoundEnable )
00038F 8200            2006         MOV.B   R0L,[R0]
000391 F309            2007         BEQ     _35
                       2008 ; cbar.c    838                                         Status |= ( tmp & SOUND);               /
                            / Sound samples
000393 964842rr        2010         MOV.B   ES,#SEG( _14 )
000397 9908rrrr        2011         MOV.W   R0,#SOF( _14 )
00039B 8A00            2012         MOV.W   R0,[R0]
00039D 99050180        2013         AND.W   R0,#0180H
0003A1 6E0920          2014         OR.W    _Status,R0
0003A1 6E0920          2014         OR.W    _Status,R0
0003A4                 2015 _35:
                       2016 ; cbar.c    839 
                       2017 ; cbar.c    840                                 SoundCnt = tmp & 0x0F;                          /
                            / Lines to next sound update
0003A4 964842rr        2019         MOV.B   ES,#SEG( _14 )
0003A8 9908rrrr        2020         MOV.W   R0,#SOF( _14 )
0003AC 8A00            2021         MOV.W   R0,[R0]
0003AE 91050F          2022         AND.B   R0L,#0FH
0003B1 86092C          2023         MOV.B   _SoundCnt,R0L
                       2024 ; cbar.c    841                                 StatusPort = Status;                             
                                    // Update status port
0003B4 96484206        2026         MOV.B   ES,#SEG( _StatusPort )
0003B8 9908A000        2027         MOV.W   R0,#SOF( _StatusPort )
0003BC A80120          2028         MOV.W   [R0],_Status
                       2029 ; cbar.c    842                         }
                       2030 ; cbar.c    843                 }
                       2031 ; cbar.c    844         }
0003C0                 2033 _38:
                       2034 ; cbar.c    845 
                       2035 ; cbar.c    846         if ( --SyncLineCnt == 0)
0003C0 A61F29          2037         ADDS.B  _SyncLineCnt,#0FH
0003C3 860129          2038         MOV.B   R0L,_SyncLineCnt
0003C6 F265            2039         BNE     _44
                       2040 ; cbar.c    847         {
                       2041 ; cbar.c    848                 tmp = TablePtr[++SyncLinePtr];
0003C8 A6112A          2043         ADDS.B  _SyncLinePtr,#01H
0003CB 86012A          2044         MOV.B   R0L,_SyncLinePtr
0003CE B110            2045         MOVS.B  R0H,#00H
0003D0 D901            2046         ASL.W   R0,#01H
0003D2 8920            2047         MOV.W   R2,R0
0003D4 9839            2048         SEXT.W  R3
0003D6 8E1124          2049         MOV.W   R1,_TablePtr+2
0003D9 8E0122          2050         MOV.W   R0,_TablePtr
0003DC 0902            2051         ADD.W   R0,R2
0003DE 1913            2052         ADDC.W  R1,R3
0003E0 862C43          2053         MOV.B   CS,R1L
0003E3 8810            2054         MOVC.W  R1,[R0+]
0003E5 964842rr        2055         MOV.B   ES,#SEG( _14 )
0003E9 9908rrrr        2056         MOV.W   R0,#SOF( _14 )
0003ED 8A18            2057         MOV.W   [R0],R1
                       2058 ; cbar.c    849 
                       2059 ; cbar.c    850                 if ( tmp == 0)
0003EF 6911            2061         OR.W    R1,R1
0003F1 F226            2062         BNE     _40
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  28

ADDR   CODE            LINE SOURCELINE
                       2063 ; cbar.c    851                 {
                       2064 ; cbar.c    852                         if ( NewPattern)
0003F3 964842rr        2066         MOV.B   ES,#SEG( _NewPattern )
0003F7 9908rrrr        2067         MOV.W   R0,#SOF( _NewPattern )
0003FB 8200            2068         MOV.B   R0L,[R0]
0003FD F314            2069         BEQ     _39
                       2070 ; cbar.c    853                         {
                       2071 ; cbar.c    854                                 NewPattern = Blanking = FALSE;
0003FF 964842rr        2073         MOV.B   ES,#SEG( _Blanking )
000403 9908rrrr        2074         MOV.W   R0,#SOF( _Blanking )
000407 B200            2075         MOV.B   [R0],#00H
000409 964842rr        2076         MOV.B   ES,#SEG( _NewPattern )
00040D 9908rrrr        2077         MOV.W   R0,#SOF( _NewPattern )
000411 B200            2078         MOV.B   [R0],#00H
                       2079 ; cbar.c    855 
                       2080 ; cbar.c    856                                 TablePtr = newTablePtr;
000413 964842rr        2082         MOV.B   ES,#SEG( _newTablePtr )
000417 9918rrrr        2083         MOV.W   R1,#SOF( _newTablePtr )
00041B 8B01            2084         MOV.W   R0,[R1+]
00041D 8A11            2085         MOV.W   R1,[R1]
00041F 8E1924          2086         MOV.W   _TablePtr+2,R1
000422 8E0922          2087         MOV.W   _TablePtr,R0
                       2088 ; cbar.c    857                         }
000426                 2090 _39:
                       2091 ; cbar.c    858 
                       2092 ; cbar.c    859                         SyncLinePtr = 0;
000426 B6102A          2094         MOV.B   _SyncLinePtr,#00H
                       2095 ; cbar.c    860                         tmp = TablePtr[0];
000429 8E1124          2097         MOV.W   R1,_TablePtr+2
00042C 8E0122          2098         MOV.W   R0,_TablePtr
00042F 862C43          2099         MOV.B   CS,R1L
000432 8810            2100         MOVC.W  R1,[R0+]
000434 964842rr        2101         MOV.B   ES,#SEG( _14 )
000438 9908rrrr        2102         MOV.W   R0,#SOF( _14 )
00043C 8A18            2103         MOV.W   [R0],R1
                       2104 ; cbar.c    861                 }
00043E                 2106 _40:
                       2107 ; cbar.c    862 
                       2108 ; cbar.c    863                 SyncLineCnt = tmp / 256;
00043E 964842rr        2110         MOV.B   ES,#SEG( _14 )
000442 9908rrrr        2111         MOV.W   R0,#SOF( _14 )
000446 8A00            2112         MOV.W   R0,[R0]
000448 8920            2113         MOV.W   R2,R0
00044A D808            2114         LSR.W   R0,#08H
00044C 860929          2115         MOV.B   _SyncLineCnt,R0L
                       2116 ; cbar.c    864 
                       2117 ; cbar.c    865                 tmp %= 256;
00044F 7933            2119         XOR.W   R3,R3
000451 E9210100        2120         DIVU.D  R2,#0100H
000455 964842rr        2121         MOV.B   ES,#SEG( _14 )
000459 9908rrrr        2122         MOV.W   R0,#SOF( _14 )
00045D 8A38            2123         MOV.W   [R0],R3
                       2124 ; cbar.c    866                 tmp &= 0x3F;
00045F 9935003F        2126         AND.W   R3,#03FH
000463 964842rr        2127         MOV.B   ES,#SEG( _14 )
000467 9908rrrr        2128         MOV.W   R0,#SOF( _14 )
00046B 8A38            2129         MOV.W   [R0],R3
                       2130 ; cbar.c    867 
                       2131 ; cbar.c    868                 Status &= ~( S5S4S3S2 | S1S0);
00046D 9E1520FFC0      2133         AND.W   _Status,#0FFC0H
                       2134 ; cbar.c    869                 Status |= tmp;
000472 6E3920          2136         OR.W    _Status,R3
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  29

ADDR   CODE            LINE SOURCELINE
                       2137 ; cbar.c    870 
                       2138 ; cbar.c    871                 if ( Blanking)                                                   
                                                    // If blanking do NOT enable any
000475 964842rr        2140         MOV.B   ES,#SEG( _Blanking )
000479 9908rrrr        2141         MOV.W   R0,#SOF( _Blanking )
00047D 8200            2142         MOV.B   R0L,[R0]
00047F F303            2143         BEQ     _41
                       2144 ; cbar.c    872                         Status &= ~S5S4S3S2;                                     
                                    //  bank
000481 9E1520FFC3      2146         AND.W   _Status,#0FFC3H
000481 9E1520FFC3      2146         AND.W   _Status,#0FFC3H
000486                 2147 _41:
                       2148 ; cbar.c    873 
                       2149 ; cbar.c    874                 StatusPort = Status;
000486 96484206        2151         MOV.B   ES,#SEG( _StatusPort )
00048A 9908A000        2152         MOV.W   R0,#SOF( _StatusPort )
00048E A80120          2153         MOV.W   [R0],_Status
                       2154 ; cbar.c    875         }       
                       2155 ; cbar.c    876 }
000492                 2157 _44:
000492 D680            2158         RET
                       2160 ; cbar.c    877 
                       2161 ; cbar.c    878 /**************************************************************************/
                       2162 ; cbar.c    879 /* CBDefaults                                                                    
                                                                                                                             
                                                            CBAR.C  */
                       2163 ; cbar.c    880 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       2164 ; cbar.c    881 /* Author:       Kim Engedahl, DEV, 000526                                       
                                                                                                                             
                                    */
                       2165 ; cbar.c    882 /* Revised:      000617, KEn, DEV                                                
                                                                                                                             
                                            */
                       2166 ; cbar.c    883 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       2167 ; cbar.c    884 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       2168 ; cbar.c    885 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       2169 ; cbar.c    886 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       2170 ; cbar.c    887 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       2171 ; cbar.c    888 /**************************************************************************/
                       2172 ; cbar.c    889 void CBDefaults( void)
                       2173 ; cbar.c    890 {
                       2174         ALIGN   1
                       2176         PUBLIC  _CBDefaults
000494                 2177 _CBDefaults:
                       2181 ; cbar.c    891         Settings.CBSetup.System = CBSetup.System = Calibration.ResetSystem;
000494 964842rr        2183         MOV.B   ES,#SEG( _Calibration+97 )
000498 9908rrrr        2184         MOV.W   R0,#SOF( _Calibration+97 )
00049C 8200            2185         MOV.B   R0L,[R0]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  30

ADDR   CODE            LINE SOURCELINE
00049E 964842rr        2186         MOV.B   ES,#SEG( _CBSetup )
0004A2 9918rrrr        2187         MOV.W   R1,#SOF( _CBSetup )
0004A6 8209            2188         MOV.B   [R1],R0L
0004A8 964842rr        2189         MOV.B   ES,#SEG( _Settings+32 )
0004AC 9918rrrr        2190         MOV.W   R1,#SOF( _Settings+32 )
0004B0 8209            2191         MOV.B   [R1],R0L
                       2192 ; cbar.c    892 
                       2193 ; cbar.c    893         if ( CBSetup.System < NTSC)
0004B2 964842rr        2195         MOV.B   ES,#SEG( _CBSetup )
0004B6 9908rrrr        2196         MOV.W   R0,#SOF( _CBSetup )
0004BA 8200            2197         MOV.B   R0L,[R0]
0004BC 910402          2198         CMP.B   R0L,#02H
0004BF F00C            2199         BCC     _57
                       2200 ; cbar.c    894                 Settings.CBSetup.Pattern = CBSetup.Pattern = EBUCBar;
0004C1 964842rr        2202         MOV.B   ES,#SEG( _CBSetup+2 )
0004C5 9908rrrr        2203         MOV.W   R0,#SOF( _CBSetup+2 )
0004C9 BA01            2204         MOV.W   [R0],#01H
0004CB 964842rr        2205         MOV.B   ES,#SEG( _Settings+34 )
0004CF 9908rrrr        2206         MOV.W   R0,#SOF( _Settings+34 )
0004D3 BA01            2207         MOV.W   [R0],#01H
0004D5 FE0B            2208         BR      _58
0004D5 FE0B00          2208         BR      _58
0004D8                 2209 _57:
                       2210 ; cbar.c    895         else
                       2211 ; cbar.c    896                 Settings.CBSetup.Pattern = CBSetup.Pattern = SMPTECBar;
0004D8 964842rr        2213         MOV.B   ES,#SEG( _CBSetup+2 )
0004DC 9908rrrr        2214         MOV.W   R0,#SOF( _CBSetup+2 )
0004E0 BA00            2215         MOV.W   [R0],#00H
0004E2 964842rr        2216         MOV.B   ES,#SEG( _Settings+34 )
0004E6 9908rrrr        2217         MOV.W   R0,#SOF( _Settings+34 )
0004EA BA00            2218         MOV.W   [R0],#00H
0004EA BA00            2218         MOV.W   [R0],#00H
0004EC                 2219 _58:
                       2220 ; cbar.c    897 
                       2221 ; cbar.c    898         Settings.CBSetup.Delay = CBSetup.Delay = 0;
0004EC 964842rr        2223         MOV.B   ES,#SEG( _CBSetup+4 )
0004F0 9908rrrr        2224         MOV.W   R0,#SOF( _CBSetup+4 )
0004F4 BB00            2225         MOV.W   [R0+],#00H
0004F6 BA00            2226         MOV.W   [R0],#00H
0004F8 964842rr        2227         MOV.B   ES,#SEG( _Settings+36 )
0004FC 9908rrrr        2228         MOV.W   R0,#SOF( _Settings+36 )
000500 BB00            2229         MOV.W   [R0+],#00H
000502 BA00            2230         MOV.W   [R0],#00H
                       2231 ; cbar.c    899         Settings.CBSetup.ScHPhase = CBSetup.ScHPhase = 0;
000504 964842rr        2233         MOV.B   ES,#SEG( _CBSetup+8 )
000508 9908rrrr        2234         MOV.W   R0,#SOF( _CBSetup+8 )
00050C BA00            2235         MOV.W   [R0],#00H
00050E 964842rr        2236         MOV.B   ES,#SEG( _Settings+40 )
000512 9908rrrr        2237         MOV.W   R0,#SOF( _Settings+40 )
000516 BA00            2238         MOV.W   [R0],#00H
                       2239 ; cbar.c    900         Settings.CBSetup.EmbAudioSignal = CBSetup.EmbAudioSignal = EmbAudioOff;
000518 964842rr        2241         MOV.B   ES,#SEG( _CBSetup+10 )
00051C 9908rrrr        2242         MOV.W   R0,#SOF( _CBSetup+10 )
000520 B200            2243         MOV.B   [R0],#00H
000522 964842rr        2244         MOV.B   ES,#SEG( _Settings+42 )
000526 9908rrrr        2245         MOV.W   R0,#SOF( _Settings+42 )
00052A B200            2246         MOV.B   [R0],#00H
                       2247 ; cbar.c    901 
                       2248 ; cbar.c    902         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
00052C 9918rrrr        2250         MOV.W   R1,#SEG( _Settings )
000530 9908rrrr        2251         MOV.W   R0,#SOF( _Settings )
000534 964842rr        2252         MOV.B   ES,#SEG( _SettingsPtr )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  31

ADDR   CODE            LINE SOURCELINE
000538 9928rrrr        2253         MOV.W   R2,#SOF( _SettingsPtr )
00053C 8A22            2254         MOV.W   R2,[R2]
00053E 9938004A        2255         MOV.W   R3,#04AH
                       2256         CALL    _NV_Store
000542 C4rrrrrr       +2256 ;       FCALL   _NV_Store
                       2257 ; cbar.c    903 }
000546 D680            2259         RET
                       2261 ; cbar.c    904 
                       2262 ; cbar.c    905 /**************************************************************************/
                       2263 ; cbar.c    906 /* CBInit                                                                        
                                                                                                                             
                                                                            CBAR.C  */
                       2264 ; cbar.c    907 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       2265 ; cbar.c    908 /* Author:       Kim Engedahl, DEV, 000322                                       
                                                                                                                             
                                    */
                       2266 ; cbar.c    909 /* Revised:      0009145, KEn, DEV                                               
                                                                                                                             
                                            */
                       2267 ; cbar.c    910 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       2268 ; cbar.c    911 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       2269 ; cbar.c    912 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       2270 ; cbar.c    913 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       2271 ; cbar.c    914 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       2272 ; cbar.c    915 /**************************************************************************/
                       2273 ; cbar.c    916 int CBInit( void)
                       2274 ; cbar.c    917 {
                       2275         ALIGN   1
                       2277         PUBLIC  _CBInit
000548                 2278 _CBInit:
                       2282 ; cbar.c    918         SyncLinePtr = 0;
000548 B6102A          2284         MOV.B   _SyncLinePtr,#00H
                       2285 ; cbar.c    919         TablePtr = &NTSCFullFieldTable[0];
00054B 9E1824rrrr      2287         MOV.W   _TablePtr+2,#SEG( _NTSCFullFieldTable )
000550 9E1822rrrr      2288         MOV.W   _TablePtr,#SOF( _NTSCFullFieldTable )
                       2289 ; cbar.c    920 
                       2290 ; cbar.c    921         NewPattern = FALSE;
000555 964842rr        2292         MOV.B   ES,#SEG( _NewPattern )
000559 9908rrrr        2293         MOV.W   R0,#SOF( _NewPattern )
00055D B200            2294         MOV.B   [R0],#00H
                       2295 ; cbar.c    922         Blanking = TRUE;
00055F 964842rr        2297         MOV.B   ES,#SEG( _Blanking )
000563 9908rrrr        2298         MOV.W   R0,#SOF( _Blanking )
000567 9208FF          2299         MOV.B   [R0],#0FFH
                       2300 ; cbar.c    923         SoundEnable = FALSE;
00056A 964842rr        2302         MOV.B   ES,#SEG( _SoundEnable )
00056E 9908rrrr        2303         MOV.W   R0,#SOF( _SoundEnable )
000572 B200            2304         MOV.B   [R0],#00H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  32

ADDR   CODE            LINE SOURCELINE
                       2305 ; cbar.c    924 
                       2306 ; cbar.c    925         Status |= SYSSEL;
000574 9E16200040      2308         OR.W    _Status,#040H
                       2309 ; cbar.c    926         StatusPort = Status;
000579 96484206        2311         MOV.B   ES,#SEG( _StatusPort )
00057D 9908A000        2312         MOV.W   R0,#SOF( _StatusPort )
000581 A80120          2313         MOV.W   [R0],_Status
                       2314 ; cbar.c    927 
                       2315 ; cbar.c    928         SyncLineCnt = 1;                                                         
                                            // Interrupt in 1 line
000584 B61129          2317         MOV.B   _SyncLineCnt,#01H
                       2318 ; cbar.c    929 
                       2319 ; cbar.c    930         CBSetup.System = Settings.CBSetup.System;
000587 964842rr        2321         MOV.B   ES,#SEG( _Settings+32 )
00058B 9908rrrr        2322         MOV.W   R0,#SOF( _Settings+32 )
00058F 8200            2323         MOV.B   R0L,[R0]
000591 964842rr        2324         MOV.B   ES,#SEG( _CBSetup )
000595 9918rrrr        2325         MOV.W   R1,#SOF( _CBSetup )
000599 8209            2326         MOV.B   [R1],R0L
                       2327 ; cbar.c    931         CBSetup.Pattern = Settings.CBSetup.Pattern;
00059B 964842rr        2329         MOV.B   ES,#SEG( _Settings+34 )
00059F 9908rrrr        2330         MOV.W   R0,#SOF( _Settings+34 )
0005A3 8A00            2331         MOV.W   R0,[R0]
0005A5 964842rr        2332         MOV.B   ES,#SEG( _CBSetup+2 )
0005A9 9918rrrr        2333         MOV.W   R1,#SOF( _CBSetup+2 )
0005AD 8A09            2334         MOV.W   [R1],R0
                       2335 ; cbar.c    932         CBSetup.Delay = Settings.CBSetup.Delay;
0005AF 964842rr        2337         MOV.B   ES,#SEG( _Settings+36 )
0005B3 9918rrrr        2338         MOV.W   R1,#SOF( _Settings+36 )
0005B7 8B01            2339         MOV.W   R0,[R1+]
0005B9 8A11            2340         MOV.W   R1,[R1]
0005BB 964842rr        2341         MOV.B   ES,#SEG( _CBSetup+4 )
0005BF 9928rrrr        2342         MOV.W   R2,#SOF( _CBSetup+4 )
0005C3 8B0A            2343         MOV.W   [R2+],R0
0005C5 8A1A            2344         MOV.W   [R2],R1
                       2345 ; cbar.c    933         CBSetup.ScHPhase = Settings.CBSetup.ScHPhase;
0005C7 964842rr        2347         MOV.B   ES,#SEG( _Settings+40 )
0005CB 9908rrrr        2348         MOV.W   R0,#SOF( _Settings+40 )
0005CF 8A00            2349         MOV.W   R0,[R0]
0005D1 964842rr        2350         MOV.B   ES,#SEG( _CBSetup+8 )
0005D5 9918rrrr        2351         MOV.W   R1,#SOF( _CBSetup+8 )
0005D9 8A09            2352         MOV.W   [R1],R0
                       2353 ; cbar.c    934         CBSetup.EmbAudioSignal = Settings.CBSetup.EmbAudioSignal;
0005DB 964842rr        2355         MOV.B   ES,#SEG( _Settings+42 )
0005DF 9908rrrr        2356         MOV.W   R0,#SOF( _Settings+42 )
0005E3 8200            2357         MOV.B   R0L,[R0]
0005E5 964842rr        2358         MOV.B   ES,#SEG( _CBSetup+10 )
0005E9 9918rrrr        2359         MOV.W   R1,#SOF( _CBSetup+10 )
0005ED 8209            2360         MOV.B   [R1],R0L
                       2361 ; cbar.c    935 
                       2362 ; cbar.c    936         return( 0);
0005EF B900            2364         MOV.W   R0,#00H
                       2365 ; cbar.c    937 }
0005F1 D680            2367         RET
                       2369 ; cbar.c    938 
                       2370 ; cbar.c    939 /**************************************************************************/
                       2371 ; cbar.c    940 /* CBUpdate                                                                      
                                                                                                                             
                                                                     CBAR.C */
                       2372 ; cbar.c    941 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  33

ADDR   CODE            LINE SOURCELINE
                       2373 ; cbar.c    942 /* Author:       Kim Engedahl, DEV, 000413                                       
                                                                                                                             
                                    */
                       2374 ; cbar.c    943 /* Revised:      000603, KEn, DEV                                                
                                                                                                                             
                                            */
                       2375 ; cbar.c    944 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       2376 ; cbar.c    945 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       2377 ; cbar.c    946 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       2378 ; cbar.c    947 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       2379 ; cbar.c    948 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       2380 ; cbar.c    949 /**************************************************************************/
                       2381 ; cbar.c    950 int CBUpdate( void)
                       2382 ; cbar.c    951 {
0005F3 00              2383         ALIGN   1
                       2385         PUBLIC  _CBUpdate
0005F4                 2386 _CBUpdate:
                       2390 ; cbar.c    952         SetCBSystem( CBSetup.System);                   // Also updates pattern
0005F4 964842rr        2392         MOV.B   ES,#SEG( _CBSetup )
0005F8 9908rrrr        2393         MOV.W   R0,#SOF( _CBSetup )
0005FC 8200            2394         MOV.B   R0L,[R0]
0005FE C5032A          2395         CALL    _SetCBSystem
                       2396 ; cbar.c    953 
                       2397 ; cbar.c    954         SetCBDelay( CBSetup.Delay);
000601 964842rr        2399         MOV.B   ES,#SEG( _CBSetup+4 )
000605 9918rrrr        2400         MOV.W   R1,#SOF( _CBSetup+4 )
000609 8B01            2401         MOV.W   R0,[R1+]
00060B 8A11            2402         MOV.W   R1,[R1]
00060D C5039D          2403         CALL    _SetCBDelay
                       2404 ; cbar.c    955         SetCBScHPhase( CBSetup.ScHPhase);
000610 964842rr        2406         MOV.B   ES,#SEG( _CBSetup+8 )
000614 9908rrrr        2407         MOV.W   R0,#SOF( _CBSetup+8 )
000618 8A00            2408         MOV.W   R0,[R0]
00061A C50456          2409         CALL    _SetCBScHPhase
                       2410 ; cbar.c    956         SetCBEmbAudioSignal( CBSetup.EmbAudioSignal);
00061D 964842rr        2412         MOV.B   ES,#SEG( _CBSetup+10 )
000621 9908rrrr        2413         MOV.W   R0,#SOF( _CBSetup+10 )
000625 8200            2414         MOV.B   R0L,[R0]
000627 C504AC          2415         CALL    _SetCBEmbAudioSignal
                       2416 ; cbar.c    957 
                       2417 ; cbar.c    958         return( OK);
00062A 9908FFFF        2419         MOV.W   R0,#0FFFFH
                       2420 ; cbar.c    959 }
00062E D680            2422         RET
                       2424 ; cbar.c    960 
                       2425 ; cbar.c    961 /**************************************************************************/
                       2426 ; cbar.c    962 /* SetCBPattern                                                                  
                                                                                                                             
                                                         CBAR.C     */
                       2427 ; cbar.c    963 /*                                                                               
                                                                                                                             
                                                                                                                             
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  34

ADDR   CODE            LINE SOURCELINE
                                            */
                       2428 ; cbar.c    964 /* Author:       Kim Engedahl, DEV, 000331                                       
                                                                                                                             
                                    */
                       2429 ; cbar.c    965 /* Revised:      000618, KEn, DEV                                                
                                                                                                                             
                                            */
                       2430 ; cbar.c    966 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       2431 ; cbar.c    967 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       2432 ; cbar.c    968 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       2433 ; cbar.c    969 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       2434 ; cbar.c    970 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       2435 ; cbar.c    971 /**************************************************************************/
                       2436 ; cbar.c    972 int SetCBPattern( UI pattern)
                       2437 ; cbar.c    973 {
                       2438         ALIGN   1
                       2440         PUBLIC  _SetCBPattern
000630                 2441 _SetCBPattern:
000630 0F10            2445         PUSH.W  R4
000000                 2446 CBAR_IR SEGMENT HCODE INSEGMENT ROMDATA
000000                 2447         RSEG    CBAR_IR
                       2448         ALIGN   1
000000                 2449 __swtable142:
000000 rrrrrrrrrrrrrr  2450         DW      SOF _61,SEG _61
       rrrrrrrrrrrrrr       
       rrrr                 
000004 rrrrrrrrrrrrrr  2451         DW      SOF _62,SEG _62
       rrrrrrrrrrrrrr       
       rrrr                 
000008 rrrrrrrrrrrrrr  2452         DW      SOF _63,SEG _63
       rrrrrrrrrrrrrr       
       rrrr                 
00000C rrrrrrrrrrrrrr  2453         DW      SOF _64,SEG _64
       rrrrrrrrrrrrrr       
       rrrr                 
000010 rrrrrrrrrrrrrr  2454         DW      SOF _66,SEG _66
       rrrrrrrrrrrrrr       
       rrrr                 
000014 rrrrrrrrrrrrrr  2455         DW      SOF _68,SEG _68
       rrrrrrrrrrrrrr       
       rrrr                 
000018 rrrrrrrrrrrrrr  2456         DW      SOF _69,SEG _69
       rrrrrrrrrrrrrr       
       rrrr                 
00001C rrrrrrrrrrrrrr  2457         DW      SOF _70,SEG _70
       rrrrrrrrrrrrrr       
       rrrr                 
000020 rrrrrrrrrrrrrr  2458         DW      SOF _72,SEG _72
       rrrrrrrrrrrrrr       
       rrrr                 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  35

ADDR   CODE            LINE SOURCELINE
000024 rrrrrrrrrrrrrr  2459         DW      SOF _74,SEG _74
       rrrrrrrrrrrrrr       
       rrrr                 
000028 rrrrrrrrrrrrrr  2460         DW      SOF _75,SEG _75
       rrrrrrrrrrrrrr       
       rrrr                 
00002C rrrrrrrrrrrrrr  2461         DW      SOF _77,SEG _77
       rrrrrrrrrrrrrr       
       rrrr                 
000030 rrrrrrrrrrrrrr  2462         DW      SOF _79,SEG _79
       rrrrrrrrrrrrrr       
       rrrr                 
000034 rrrrrrrrrrrrrr  2463         DW      SOF _81,SEG _81
       rrrrrrrrrrrrrr       
       rrrr                 
000038 rrrrrrrrrrrrrr  2464         DW      SOF _83,SEG _83
       rrrrrrrrrrrrrr       
       rrrr                 
00003C rrrrrrrrrrrrrr  2465         DW      SOF _85,SEG _85
       rrrrrrrrrrrrrr       
       rrrr                 
000040 rrrrrrrrrrrrrr  2466         DW      SOF _87,SEG _87
       rrrrrrrrrrrrrr       
       rrrr                 
000044 rrrrrrrrrrrrrr  2467         DW      SOF _89,SEG _89
       rrrrrrrrrrrrrr       
       rrrr                 
000048 rrrrrrrrrrrrrr  2468         DW      SOF _91,SEG _91
       rrrrrrrrrrrrrr       
       rrrr                 
00004C rrrrrrrrrrrrrr  2469         DW      SOF _93,SEG _93
       rrrrrrrrrrrrrr       
       rrrr                 
000050 rrrrrrrrrrrrrr  2470         DW      SOF _95,SEG _95
       rrrrrrrrrrrrrr       
       rrrr                 
000054 rrrrrrrrrrrrrr  2471         DW      SOF _97,SEG _97
       rrrrrrrrrrrrrr       
       rrrr                 
000058 rrrrrrrrrrrrrr  2472         DW      SOF _99,SEG _99
       rrrrrrrrrrrrrr       
       rrrr                 
000632                 2473         RSEG    CBAR_PR
000632 A97E            2475         ADDS.W  R7,#0EH
                       2481 ; cbar.c    974         int system = CBSetup.System;
000634 8A0F            2483         MOV.W   [R7],R0
000636 964842rr        2484         MOV.B   ES,#SEG( _CBSetup )
00063A 9908rrrr        2485         MOV.W   R0,#SOF( _CBSetup )
00063E 8200            2486         MOV.B   R0L,[R0]
000640 8180            2487         MOV.B   R4L,R0L
000642 B190            2488         MOVS.B  R4H,#00H
                       2490 ; cbar.c    975 
                       2491 ; cbar.c    976         if ( ValidateCBPattern( system , &pattern) == FAIL)
000644 8904            2493         MOV.W   R0,R4
000646 9168rr          2494         MOV.B   R3L,#SEG( __lc_bs )
000649 7177            2495         XOR.B   R3H,R3H
00064B 8927            2496         MOV.W   R2,R7
00064D C504DE          2497         CALL    _ValidateCBPattern
000650 6900            2498         OR.W    R0,R0
000652 F203            2499         BNE     _60
                       2500 ; cbar.c    977                 return( FAIL);
000654 B900            2502         MOV.W   R0,#00H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  36

ADDR   CODE            LINE SOURCELINE
                       2503         BR      _141
000656 D502FB         +2503         JMP.L   _141
000656 D502FB00       +2503         JMP.L   _141
00065A                 2504 _60:
                       2506 ; cbar.c    978 
                       2507 ; cbar.c    979         Settings.ActivePreset = 0;
00065A 964842rr        2509         MOV.B   ES,#SEG( _Settings )
00065E 9908rrrr        2510         MOV.W   R0,#SOF( _Settings )
000662 BA00            2511         MOV.W   [R0],#00H
                       2512 ; cbar.c    980 
                       2513 ; cbar.c    981         Settings.CBSetup.Pattern = CBSetup.Pattern = pattern;
000664 8A07            2515         MOV.W   R0,[R7]
000666 964842rr        2517         MOV.B   ES,#SEG( _CBSetup+2 )
00066A 9918rrrr        2518         MOV.W   R1,#SOF( _CBSetup+2 )
00066E 8A09            2519         MOV.W   [R1],R0
000670 964842rr        2520         MOV.B   ES,#SEG( _Settings+34 )
000674 9918rrrr        2521         MOV.W   R1,#SOF( _Settings+34 )
000678 8A09            2522         MOV.W   [R1],R0
                       2523 ; cbar.c    982         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
00067A 9918rrrr        2525         MOV.W   R1,#SEG( _Settings )
00067E 9908rrrr        2526         MOV.W   R0,#SOF( _Settings )
000682 964842rr        2528         MOV.B   ES,#SEG( _SettingsPtr )
000686 9928rrrr        2529         MOV.W   R2,#SOF( _SettingsPtr )
00068A 8A22            2530         MOV.W   R2,[R2]
00068C 9938004A        2531         MOV.W   R3,#04AH
                       2532         CALL    _NV_Store
000690 C4rrrrrr       +2532 ;       FCALL   _NV_Store
                       2533 ; cbar.c    983 
                       2534 ; cbar.c    984         Blanking = TRUE;
000694 964842rr        2536         MOV.B   ES,#SEG( _Blanking )
000698 9908rrrr        2537         MOV.W   R0,#SOF( _Blanking )
00069C 9208FF          2538         MOV.B   [R0],#0FFH
                       2539 ; cbar.c    985 
                       2540 ; cbar.c    986         Status &= ~S5S4S3S2;                                                     
                                                                    // Blank line immediately
00069F 9E1520FFC3      2542         AND.W   _Status,#0FFC3H
                       2543 ; cbar.c    987         StatusPort = Status;
0006A4 96484206        2545         MOV.B   ES,#SEG( _StatusPort )
0006A8 9908A000        2546         MOV.W   R0,#SOF( _StatusPort )
0006AC A80120          2547         MOV.W   [R0],_Status
                       2549 ; cbar.c    988 
                       2550 ; cbar.c    989         switch ( pattern)
0006AF 8A17            2552         MOV.W   R1,[R7]
0006B1 99140016        2553         CMP.W   R1,#016H
                       2554         BG      _140
0006B5 F902           +2554 ;       BL      _LG_68
0006B7 D502C2         +2554 ;       JMP.L   _140
0006B7 D502C2         +2554 ;       JMP.L   _140
0006BA                +2554 _LG_68:
0006BA D912            2555         ASL.W   R1,#02H
0006BC 964843rr        2556         MOV.B   CS,#SEG( __swtable142 )
0006C0 9910rrrr        2557         ADD.W   R1,#SOF( __swtable142 )
0006C4 8801            2558         MOVC.W  R0,[R1+]
0006C6 0F01            2559         PUSH.W  R0
0006C8 8801            2560         MOVC.W  R0,[R1+]
0006CA 0F01            2561         PUSH.W  R0
0006CC D680            2562         RET
                       2565 ; cbar.c    990         {
                       2566 ; cbar.c    991                 case SMPTECBar:
0006CE                 2568 _61:
                       2569 ; cbar.c    992                         SRAMVideoLoad( dSMPTECBar, SRAMBank1);
0006CE 910802          2571         MOV.B   R0L,#02H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  37

ADDR   CODE            LINE SOURCELINE
0006D1 911810          2572         MOV.B   R0H,#010H
0006D4 C5FCBF          2573         CALL    _SRAMVideoLoad
                       2575 ; cbar.c    993                         SRAMVideoLoad( dBlueBars, SRAMBank2);
0006D7 910803          2577         MOV.B   R0L,#03H
0006DA 911814          2578         MOV.B   R0H,#014H
0006DD C5FCBA          2579         CALL    _SRAMVideoLoad
                       2580 ; cbar.c    994                         SRAMVideoLoad( dIWhiteQ, SRAMBank3);
0006E0 910804          2582         MOV.B   R0L,#04H
0006E3 911818          2583         MOV.B   R0H,#018H
0006E6 C5FCB6          2584         CALL    _SRAMVideoLoad
                       2585 ; cbar.c    995 
                       2586 ; cbar.c    996                         newTablePtr = &SMPTECBarTable[0];
0006E9 964842rr        2588         MOV.B   ES,#SEG( _newTablePtr )
0006ED 9908rrrr        2589         MOV.W   R0,#SOF( _newTablePtr )
0006F1 9B08rrrr        2590         MOV.W   [R0+],#SOF( _SMPTECBarTable )
0006F5 9A08rrrr        2591         MOV.W   [R0],#SEG( _SMPTECBarTable )
                       2592 ; cbar.c    997                         break;
                       2594         BR      _140
0006F9 D502A1         +2594         JMP.L   _140
                       2595 ; cbar.c    998 
                       2596 ; cbar.c    999                 case EBUCBar:
0006FC                 2598 _62:
                       2599 ; cbar.c   1000                         SRAMVideoLoad( dEBUCBar_625, SRAMBank1);
0006FC 910801          2601         MOV.B   R0L,#01H
0006FF 911810          2602         MOV.B   R0H,#010H
000702 C5FCA8          2603         CALL    _SRAMVideoLoad
                       2604 ; cbar.c   1001 
                       2605 ; cbar.c   1002                         newTablePtr = &PALFullFieldTable[0];
000705 964842rr        2607         MOV.B   ES,#SEG( _newTablePtr )
000709 9908rrrr        2608         MOV.W   R0,#SOF( _newTablePtr )
00070D 9B08rrrr        2609         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000711 9A08rrrr        2610         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2611 ; cbar.c   1003                         break;
                       2613         BR      _140
000715 D50293         +2613         JMP.L   _140
                       2614 ; cbar.c   1004 
                       2615 ; cbar.c   1005                 case FCCCBar:
000718                 2617 _63:
                       2618 ; cbar.c   1006                         SRAMVideoLoad( dFCC_CBar_525, SRAMBank1);
000718 910829          2620         MOV.B   R0L,#029H
00071B 911810          2621         MOV.B   R0H,#010H
00071E C5FC9A          2622         CALL    _SRAMVideoLoad
                       2623 ; cbar.c   1007 
                       2624 ; cbar.c   1008                         newTablePtr = &NTSCFullFieldTable[0];
000721 964842rr        2626         MOV.B   ES,#SEG( _newTablePtr )
000725 9908rrrr        2627         MOV.W   R0,#SOF( _newTablePtr )
000729 9B08rrrr        2628         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
00072D 9A08rrrr        2629         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2630 ; cbar.c   1009                         break;
                       2632         BR      _140
000731 D50285         +2632         JMP.L   _140
                       2633 ; cbar.c   1010 
                       2634 ; cbar.c   1011                 case EBUCBarITU:
000734                 2636 _64:
                       2637 ; cbar.c   1012                         SRAMVideoLoad( dEBUCBar_8bit_625, SRAMBank1);
000734 910800          2639         MOV.B   R0L,#00H
000737 911810          2640         MOV.B   R0H,#010H
00073A C5FC8C          2641         CALL    _SRAMVideoLoad
                       2642 ; cbar.c   1013 
                       2643 ; cbar.c   1014                         if ( system < NTSC)
00073D 99440002        2645         CMP.W   R4,#02H
000741 FA0A            2646         BGE     _65
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  38

ADDR   CODE            LINE SOURCELINE
                       2647 ; cbar.c   1015                                 newTablePtr = &PALFullFieldTable[0];
000743 964842rr        2649         MOV.B   ES,#SEG( _newTablePtr )
000747 9908rrrr        2650         MOV.W   R0,#SOF( _newTablePtr )
00074B 9B08rrrr        2651         MOV.W   [R0+],#SOF( _PALFullFieldTable )
00074F 9A08rrrr        2652         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2653         BR      _140
000753 D50274         +2653         JMP.L   _140
000753 D50274         +2653         JMP.L   _140
000756                 2654 _65:
                       2655 ; cbar.c   1016                         else
                       2656 ; cbar.c   1017                                 newTablePtr = &NTSCFullFieldTable[0];
000756 964842rr        2658         MOV.B   ES,#SEG( _newTablePtr )
00075A 9908rrrr        2659         MOV.W   R0,#SOF( _newTablePtr )
00075E 9B08rrrr        2660         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000762 9A08rrrr        2661         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2662 ; cbar.c   1018                         break;
                       2664         BR      _140
000766 D5026B         +2664         JMP.L   _140
                       2665 ; cbar.c   1019 
                       2666 ; cbar.c   1020                 case CBar100:
00076A                 2668 _66:
                       2669 ; cbar.c   1021                         if ( system < NTSC)
00076A 99440002        2671         CMP.W   R4,#02H
00076E FA0E            2672         BGE     _67
                       2673 ; cbar.c   1022                         {
                       2674 ; cbar.c   1023                                 SRAMVideoLoad( dCBar100_625, SRAMBank1);
000770 910805          2676         MOV.B   R0L,#05H
000773 911810          2677         MOV.B   R0H,#010H
000776 C5FC6E          2678         CALL    _SRAMVideoLoad
                       2679 ; cbar.c   1024 
                       2680 ; cbar.c   1025                                 newTablePtr = &PALFullFieldTable[0];
000779 964842rr        2682         MOV.B   ES,#SEG( _newTablePtr )
00077D 9908rrrr        2683         MOV.W   R0,#SOF( _newTablePtr )
000781 9B08rrrr        2684         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000785 9A08rrrr        2685         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2686 ; cbar.c   1026                         }
                       2688         BR      _140
000789 D50259         +2688         JMP.L   _140
000789 D50259         +2688         JMP.L   _140
00078C                 2689 _67:
                       2690 ; cbar.c   1027                         else
                       2691 ; cbar.c   1028                         {
                       2692 ; cbar.c   1029                                 SRAMVideoLoad( dFCC_CBar100_525, SRAMBank1);
00078C 91082A          2694         MOV.B   R0L,#02AH
00078F 911810          2695         MOV.B   R0H,#010H
000792 C5FC60          2696         CALL    _SRAMVideoLoad
                       2697 ; cbar.c   1030 
                       2698 ; cbar.c   1031                                 newTablePtr = &NTSCFullFieldTable[0];
000795 964842rr        2700         MOV.B   ES,#SEG( _newTablePtr )
000799 9908rrrr        2701         MOV.W   R0,#SOF( _newTablePtr )
00079D 9B08rrrr        2702         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
0007A1 9A08rrrr        2703         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2704 ; cbar.c   1032                         }
                       2705 ; cbar.c   1033                         break;
                       2707         BR      _140
0007A5 D5024B         +2707         JMP.L   _140
                       2708 ; cbar.c   1034 
                       2709 ; cbar.c   1035                 case CBarGrey75:
0007A8                 2711 _68:
                       2712 ; cbar.c   1036                         SRAMVideoLoad( dCBar75_STD_625, SRAMBank1);
0007A8 910828          2714         MOV.B   R0L,#028H
0007AB 911810          2715         MOV.B   R0H,#010H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  39

ADDR   CODE            LINE SOURCELINE
0007AE C5FC52          2716         CALL    _SRAMVideoLoad
                       2717 ; cbar.c   1037                         SRAMVideoLoad( dGrey75_625, SRAMBank2);
0007B1 910806          2719         MOV.B   R0L,#06H
0007B4 911814          2720         MOV.B   R0H,#014H
0007B7 C5FC4D          2721         CALL    _SRAMVideoLoad
                       2722 ; cbar.c   1038         
                       2723 ; cbar.c   1039                         newTablePtr = &PALSplitFieldTable[0];
0007BA 964842rr        2725         MOV.B   ES,#SEG( _newTablePtr )
0007BE 9908rrrr        2726         MOV.W   R0,#SOF( _newTablePtr )
0007C2 9B08rrrr        2727         MOV.W   [R0+],#SOF( _PALSplitFieldTable )
0007C6 9A08rrrr        2728         MOV.W   [R0],#SEG( _PALSplitFieldTable )
                       2729 ; cbar.c   1040                         break;
                       2731         BR      _140
0007CA D50239         +2731         JMP.L   _140
                       2732 ; cbar.c   1041 
                       2733 ; cbar.c   1042                 case CBarRed75:
0007CE                 2735 _69:
                       2736 ; cbar.c   1043                         SRAMVideoLoad( dEBUCBar_625, SRAMBank1);
0007CE 910801          2738         MOV.B   R0L,#01H
0007D1 911810          2739         MOV.B   R0H,#010H
0007D4 C5FC3F          2740         CALL    _SRAMVideoLoad
                       2741 ; cbar.c   1044                         SRAMVideoLoad( dRed75_625, SRAMBank2);
0007D7 910807          2743         MOV.B   R0L,#07H
0007DA 911814          2744         MOV.B   R0H,#014H
0007DD C5FC3A          2745         CALL    _SRAMVideoLoad
                       2746 ; cbar.c   1045 
                       2747 ; cbar.c   1046                         newTablePtr = &PALSplitFieldTable[0];
0007E0 964842rr        2749         MOV.B   ES,#SEG( _newTablePtr )
0007E4 9908rrrr        2750         MOV.W   R0,#SOF( _newTablePtr )
0007E8 9B08rrrr        2751         MOV.W   [R0+],#SOF( _PALSplitFieldTable )
0007EC 9A08rrrr        2752         MOV.W   [R0],#SEG( _PALSplitFieldTable )
                       2753 ; cbar.c   1047                         break;
                       2755         BR      _140
0007F0 D50226         +2755         JMP.L   _140
                       2756 ; cbar.c   1048                         
                       2757 ; cbar.c   1049                 case Red75:
0007F4                 2759 _70:
                       2760 ; cbar.c   1050                         if ( system < NTSC)
0007F4 99440002        2762         CMP.W   R4,#02H
0007F8 FA0E            2763         BGE     _71
                       2764 ; cbar.c   1051                         {
                       2765 ; cbar.c   1052                                 SRAMVideoLoad( dRed75_625, SRAMBank1);
0007FA 910807          2767         MOV.B   R0L,#07H
0007FD 911810          2768         MOV.B   R0H,#010H
000800 C5FC29          2769         CALL    _SRAMVideoLoad
                       2770 ; cbar.c   1053 
                       2771 ; cbar.c   1054                                 newTablePtr = &PALFullFieldTable[0];
000803 964842rr        2773         MOV.B   ES,#SEG( _newTablePtr )
000807 9908rrrr        2774         MOV.W   R0,#SOF( _newTablePtr )
00080B 9B08rrrr        2775         MOV.W   [R0+],#SOF( _PALFullFieldTable )
00080F 9A08rrrr        2776         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2777 ; cbar.c   1055                         }
                       2779         BR      _140
000813 D50214         +2779         JMP.L   _140
000813 D50214         +2779         JMP.L   _140
000816                 2780 _71:
                       2781 ; cbar.c   1056                         else
                       2782 ; cbar.c   1057                         {
                       2783 ; cbar.c   1058                                 SRAMVideoLoad( dRed75_525, SRAMBank1);
000816 910808          2785         MOV.B   R0L,#08H
000819 911810          2786         MOV.B   R0H,#010H
00081C C5FC1B          2787         CALL    _SRAMVideoLoad
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  40

ADDR   CODE            LINE SOURCELINE
                       2788 ; cbar.c   1059 
                       2789 ; cbar.c   1060                                 newTablePtr = &NTSCFullFieldTable[0];
00081F 964842rr        2791         MOV.B   ES,#SEG( _newTablePtr )
000823 9908rrrr        2792         MOV.W   R0,#SOF( _newTablePtr )
000827 9B08rrrr        2793         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
00082B 9A08rrrr        2794         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2795 ; cbar.c   1061                         }
                       2796 ; cbar.c   1062                         break;
                       2798         BR      _140
00082F D50206         +2798         JMP.L   _140
                       2799 ; cbar.c   1063 
                       2800 ; cbar.c   1064                 case Multiburst:
000832                 2802 _72:
                       2803 ; cbar.c   1065                         if ( system < NTSC)
000832 99440002        2805         CMP.W   R4,#02H
000836 FA0E            2806         BGE     _73
                       2807 ; cbar.c   1066                         {
                       2808 ; cbar.c   1067                                 SRAMVideoLoad( dChroma_Multiburst, SRAMBank1);
000838 910809          2810         MOV.B   R0L,#09H
00083B 911810          2811         MOV.B   R0H,#010H
00083E C5FC0A          2812         CALL    _SRAMVideoLoad
                       2813 ; cbar.c   1068 
                       2814 ; cbar.c   1069                                 newTablePtr = &PALFullFieldTable[0];
000841 964842rr        2816         MOV.B   ES,#SEG( _newTablePtr )
000845 9908rrrr        2817         MOV.W   R0,#SOF( _newTablePtr )
000849 9B08rrrr        2818         MOV.W   [R0+],#SOF( _PALFullFieldTable )
00084D 9A08rrrr        2819         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2820 ; cbar.c   1070                         }
                       2822         BR      _140
000851 D501F5         +2822         JMP.L   _140
000851 D501F5         +2822         JMP.L   _140
000854                 2823 _73:
                       2824 ; cbar.c   1071                         else
                       2825 ; cbar.c   1072                         {
                       2826 ; cbar.c   1073                                 SRAMVideoLoad( dFCC_Multiburst_525, SRAMBank1);
000854 91080A          2828         MOV.B   R0L,#0AH
000857 911810          2829         MOV.B   R0H,#010H
00085A C5FBFC          2830         CALL    _SRAMVideoLoad
                       2831 ; cbar.c   1074 
                       2832 ; cbar.c   1075                                 newTablePtr = &NTSCFullFieldTable[0];
00085D 964842rr        2834         MOV.B   ES,#SEG( _newTablePtr )
000861 9908rrrr        2835         MOV.W   R0,#SOF( _newTablePtr )
000865 9B08rrrr        2836         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000869 9A08rrrr        2837         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2838 ; cbar.c   1076                         }
                       2839 ; cbar.c   1077                         break;
                       2841         BR      _140
00086D D501E7         +2841         JMP.L   _140
                       2842 ; cbar.c   1078 
                       2843 ; cbar.c   1079                 case CCIR18:
000870                 2845 _74:
                       2846 ; cbar.c   1080                         SRAMVideoLoad( dCCIR18_625, SRAMBank1);
000870 91082F          2848         MOV.B   R0L,#02FH
000873 911810          2849         MOV.B   R0H,#010H
000876 C5FBEE          2850         CALL    _SRAMVideoLoad
                       2851 ; cbar.c   1081 
                       2852 ; cbar.c   1082                         newTablePtr = &PALFullFieldTable[0];
000879 964842rr        2854         MOV.B   ES,#SEG( _newTablePtr )
00087D 9908rrrr        2855         MOV.W   R0,#SOF( _newTablePtr )
000881 9B08rrrr        2856         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000885 9A08rrrr        2857         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2858 ; cbar.c   1083                         break;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  41

ADDR   CODE            LINE SOURCELINE
                       2860         BR      _140
000889 D501D9         +2860         JMP.L   _140
                       2861 ; cbar.c   1084 
                       2862 ; cbar.c   1085                 case Window10:
00088C                 2864 _75:
                       2865 ; cbar.c   1086                         SRAMVideoLoad( dWindow50Marker, SRAMBank1);
00088C 91081B          2867         MOV.B   R0L,#01BH
00088F 911810          2868         MOV.B   R0H,#010H
000892 C5FBE0          2869         CALL    _SRAMVideoLoad
                       2870 ; cbar.c   1087                         SRAMVideoLoad( dMarkerLine, SRAMBank2);
000895 911814          2872         MOV.B   R0H,#014H
000898 91081C          2873         MOV.B   R0L,#01CH
00089B C5FBDB          2874         CALL    _SRAMVideoLoad
                       2875 ; cbar.c   1088                         SRAMVideoLoad( dMarker10, SRAMBank3);
00089E 91082C          2877         MOV.B   R0L,#02CH
0008A1 911818          2878         MOV.B   R0H,#018H
0008A4 C5FBD7          2879         CALL    _SRAMVideoLoad
                       2880 ; cbar.c   1089                         SRAMVideoLoad( dWindow10, SRAMBank4);
0008A7 91082B          2882         MOV.B   R0L,#02BH
0008AA 91181C          2883         MOV.B   R0H,#01CH
0008AD C5FBD2          2884         CALL    _SRAMVideoLoad
                       2885 ; cbar.c   1090 
                       2886 ; cbar.c   1091                         if ( system < NTSC)                                      
                                                                                    
0008B0 99440002        2888         CMP.W   R4,#02H
0008B4 FA0A            2889         BGE     _76
                       2890 ; cbar.c   1092                                 newTablePtr = &PALWindowTable[0];
0008B6 964842rr        2892         MOV.B   ES,#SEG( _newTablePtr )
0008BA 9908rrrr        2893         MOV.W   R0,#SOF( _newTablePtr )
0008BE 9B08rrrr        2894         MOV.W   [R0+],#SOF( _PALWindowTable )
0008C2 9A08rrrr        2895         MOV.W   [R0],#SEG( _PALWindowTable )
                       2896         BR      _140
0008C6 D501BB         +2896         JMP.L   _140
0008C6 D501BB00       +2896         JMP.L   _140
0008CA                 2897 _76:
                       2898 ; cbar.c   1093                         else
                       2899 ; cbar.c   1094                                 newTablePtr = &NTSCWindowTable[0];
0008CA 964842rr        2901         MOV.B   ES,#SEG( _newTablePtr )
0008CE 9908rrrr        2902         MOV.W   R0,#SOF( _newTablePtr )
0008D2 9B08rrrr        2903         MOV.W   [R0+],#SOF( _NTSCWindowTable )
0008D6 9A08rrrr        2904         MOV.W   [R0],#SEG( _NTSCWindowTable )
                       2905 ; cbar.c   1095                         break;
                       2907         BR      _140
0008DA D501B1         +2907         JMP.L   _140
                       2908 ; cbar.c   1096 
                       2909 ; cbar.c   1097                 case Window15:
0008DE                 2911 _77:
                       2912 ; cbar.c   1098                         SRAMVideoLoad( dWindow50Marker, SRAMBank1);
0008DE 91081B          2914         MOV.B   R0L,#01BH
0008E1 911810          2915         MOV.B   R0H,#010H
0008E4 C5FBB7          2916         CALL    _SRAMVideoLoad
                       2917 ; cbar.c   1099                         SRAMVideoLoad( dMarkerLine, SRAMBank2);
0008E7 911814          2919         MOV.B   R0H,#014H
0008EA 91081C          2920         MOV.B   R0L,#01CH
0008ED C5FBB2          2921         CALL    _SRAMVideoLoad
                       2922 ; cbar.c   1100                         SRAMVideoLoad( dMarker15, SRAMBank3);
0008F0 91081E          2924         MOV.B   R0L,#01EH
0008F3 911818          2925         MOV.B   R0H,#018H
0008F6 C5FBAE          2926         CALL    _SRAMVideoLoad
                       2927 ; cbar.c   1101                         SRAMVideoLoad( dWindow15, SRAMBank4);
0008F9 91081D          2929         MOV.B   R0L,#01DH
0008FC 91181C          2930         MOV.B   R0H,#01CH
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  42

ADDR   CODE            LINE SOURCELINE
0008FF C5FBA9          2931         CALL    _SRAMVideoLoad
                       2932 ; cbar.c   1102 
                       2933 ; cbar.c   1103                         if ( system < NTSC)                                      
                                                                                    
000902 99440002        2935         CMP.W   R4,#02H
000906 FA0A            2936         BGE     _78
                       2937 ; cbar.c   1104                                 newTablePtr = &PALWindowTable[0];
000908 964842rr        2939         MOV.B   ES,#SEG( _newTablePtr )
00090C 9908rrrr        2940         MOV.W   R0,#SOF( _newTablePtr )
000910 9B08rrrr        2941         MOV.W   [R0+],#SOF( _PALWindowTable )
000914 9A08rrrr        2942         MOV.W   [R0],#SEG( _PALWindowTable )
                       2943         BR      _140
000918 D50192         +2943         JMP.L   _140
000918 D5019200       +2943         JMP.L   _140
00091C                 2944 _78:
                       2945 ; cbar.c   1105                         else
                       2946 ; cbar.c   1106                                 newTablePtr = &NTSCWindowTable[0];
00091C 964842rr        2948         MOV.B   ES,#SEG( _newTablePtr )
000920 9908rrrr        2949         MOV.W   R0,#SOF( _newTablePtr )
000924 9B08rrrr        2950         MOV.W   [R0+],#SOF( _NTSCWindowTable )
000928 9A08rrrr        2951         MOV.W   [R0],#SEG( _NTSCWindowTable )
                       2952 ; cbar.c   1107                         break;
                       2954         BR      _140
00092C D50188         +2954         JMP.L   _140
                       2955 ; cbar.c   1108 
                       2956 ; cbar.c   1109                 case Window20:
000930                 2958 _79:
                       2959 ; cbar.c   1110                         SRAMVideoLoad( dWindow50Marker, SRAMBank1);
000930 91081B          2961         MOV.B   R0L,#01BH
000933 911810          2962         MOV.B   R0H,#010H
000936 C5FB8E          2963         CALL    _SRAMVideoLoad
                       2964 ; cbar.c   1111                         SRAMVideoLoad( dMarkerLine, SRAMBank2);
000939 911814          2966         MOV.B   R0H,#014H
00093C 91081C          2967         MOV.B   R0L,#01CH
00093F C5FB89          2968         CALL    _SRAMVideoLoad
                       2969 ; cbar.c   1112                         SRAMVideoLoad( dMarker20, SRAMBank3);
000942 910820          2971         MOV.B   R0L,#020H
000945 911818          2972         MOV.B   R0H,#018H
000948 C5FB85          2973         CALL    _SRAMVideoLoad
                       2974 ; cbar.c   1113                         SRAMVideoLoad( dWindow20, SRAMBank4);
00094B 91081F          2976         MOV.B   R0L,#01FH
00094E 91181C          2977         MOV.B   R0H,#01CH
000951 C5FB80          2978         CALL    _SRAMVideoLoad
                       2979 ; cbar.c   1114 
                       2980 ; cbar.c   1115                         if ( system < NTSC)                                      
                                                                                    
000954 99440002        2982         CMP.W   R4,#02H
000958 FA0A            2983         BGE     _80
                       2984 ; cbar.c   1116                                 newTablePtr = &PALWindowTable[0];
00095A 964842rr        2986         MOV.B   ES,#SEG( _newTablePtr )
00095E 9908rrrr        2987         MOV.W   R0,#SOF( _newTablePtr )
000962 9B08rrrr        2988         MOV.W   [R0+],#SOF( _PALWindowTable )
000966 9A08rrrr        2989         MOV.W   [R0],#SEG( _PALWindowTable )
                       2990         BR      _140
00096A D50169         +2990         JMP.L   _140
00096A D5016900       +2990         JMP.L   _140
00096E                 2991 _80:
                       2992 ; cbar.c   1117                         else
                       2993 ; cbar.c   1118                                 newTablePtr = &NTSCWindowTable[0];
00096E 964842rr        2995         MOV.B   ES,#SEG( _newTablePtr )
000972 9908rrrr        2996         MOV.W   R0,#SOF( _newTablePtr )
000976 9B08rrrr        2997         MOV.W   [R0+],#SOF( _NTSCWindowTable )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  43

ADDR   CODE            LINE SOURCELINE
00097A 9A08rrrr        2998         MOV.W   [R0],#SEG( _NTSCWindowTable )
                       2999 ; cbar.c   1119                         break;
                       3001         BR      _140
00097E D5015F         +3001         JMP.L   _140
                       3002 ; cbar.c   1120 
                       3003 ; cbar.c   1121                 case Window100:
000982                 3005 _81:
                       3006 ; cbar.c   1122                         SRAMVideoLoad( dWindow50Marker, SRAMBank1);
000982 91081B          3008         MOV.B   R0L,#01BH
000985 911810          3009         MOV.B   R0H,#010H
000988 C5FB65          3010         CALL    _SRAMVideoLoad
                       3011 ; cbar.c   1123                         SRAMVideoLoad( dMarkerLine, SRAMBank2);
00098B 911814          3013         MOV.B   R0H,#014H
00098E 91081C          3014         MOV.B   R0L,#01CH
000991 C5FB60          3015         CALL    _SRAMVideoLoad
                       3016 ; cbar.c   1124                         SRAMVideoLoad( dMarker100, SRAMBank3);
000994 910822          3018         MOV.B   R0L,#022H
000997 911818          3019         MOV.B   R0H,#018H
00099A C5FB5C          3020         CALL    _SRAMVideoLoad
                       3021 ; cbar.c   1125                         SRAMVideoLoad( dWindow100, SRAMBank4);
00099D 910821          3023         MOV.B   R0L,#021H
0009A0 91181C          3024         MOV.B   R0H,#01CH
0009A3 C5FB57          3025         CALL    _SRAMVideoLoad
                       3026 ; cbar.c   1126 
                       3027 ; cbar.c   1127                         if ( system < NTSC)                                      
                                                                                    
0009A6 99440002        3029         CMP.W   R4,#02H
0009AA FA0A            3030         BGE     _82
                       3031 ; cbar.c   1128                                 newTablePtr = &PALWindowTable[0];
0009AC 964842rr        3033         MOV.B   ES,#SEG( _newTablePtr )
0009B0 9908rrrr        3034         MOV.W   R0,#SOF( _newTablePtr )
0009B4 9B08rrrr        3035         MOV.W   [R0+],#SOF( _PALWindowTable )
0009B8 9A08rrrr        3036         MOV.W   [R0],#SEG( _PALWindowTable )
                       3037         BR      _140
0009BC D50140         +3037         JMP.L   _140
0009BC D5014000       +3037         JMP.L   _140
0009C0                 3038 _82:
                       3039 ; cbar.c   1129                         else
                       3040 ; cbar.c   1130                                 newTablePtr = &NTSCWindowTable[0];
0009C0 964842rr        3042         MOV.B   ES,#SEG( _newTablePtr )
0009C4 9908rrrr        3043         MOV.W   R0,#SOF( _newTablePtr )
0009C8 9B08rrrr        3044         MOV.W   [R0+],#SOF( _NTSCWindowTable )
0009CC 9A08rrrr        3045         MOV.W   [R0],#SEG( _NTSCWindowTable )
                       3046 ; cbar.c   1131                         break;
                       3048         BR      _140
0009D0 D50136         +3048         JMP.L   _140
                       3049 ; cbar.c   1132 
                       3050 ; cbar.c   1133                 case BlWh15kHz:
0009D4                 3052 _83:
                       3053 ; cbar.c   1134                         if ( system < NTSC)                                      
                                                                                    
0009D4 99440002        3055         CMP.W   R4,#02H
0009D8 FA0E            3056         BGE     _84
                       3057 ; cbar.c   1135                         {
                       3058 ; cbar.c   1136                                 SRAMVideoLoad( dkHz15BlWh_625, SRAMBank1);
0009DA 91082D          3060         MOV.B   R0L,#02DH
0009DD 911810          3061         MOV.B   R0H,#010H
0009E0 C5FB39          3062         CALL    _SRAMVideoLoad
                       3063 ; cbar.c   1137 
                       3064 ; cbar.c   1138                                 newTablePtr = &PALFullFieldTable[0];
0009E3 964842rr        3066         MOV.B   ES,#SEG( _newTablePtr )
0009E7 9908rrrr        3067         MOV.W   R0,#SOF( _newTablePtr )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  44

ADDR   CODE            LINE SOURCELINE
0009EB 9B08rrrr        3068         MOV.W   [R0+],#SOF( _PALFullFieldTable )
0009EF 9A08rrrr        3069         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       3070 ; cbar.c   1139                         }
                       3072         BR      _140
0009F3 D50124         +3072         JMP.L   _140
0009F3 D50124         +3072         JMP.L   _140
0009F6                 3073 _84:
                       3074 ; cbar.c   1140                         else
                       3075 ; cbar.c   1141                         {
                       3076 ; cbar.c   1142                                 SRAMVideoLoad( dkHz15BlWh_525, SRAMBank1);
0009F6 91082E          3078         MOV.B   R0L,#02EH
0009F9 911810          3079         MOV.B   R0H,#010H
0009FC C5FB2B          3080         CALL    _SRAMVideoLoad
                       3081 ; cbar.c   1143 
                       3082 ; cbar.c   1144                                 newTablePtr = &NTSCFullFieldTable[0];
0009FF 964842rr        3084         MOV.B   ES,#SEG( _newTablePtr )
000A03 9908rrrr        3085         MOV.W   R0,#SOF( _newTablePtr )
000A07 9B08rrrr        3086         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000A0B 9A08rrrr        3087         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3088 ; cbar.c   1145                         }
                       3089 ; cbar.c   1146                         break;
                       3091         BR      _140
000A0F D50116         +3091         JMP.L   _140
                       3092 ; cbar.c   1147 
                       3093 ; cbar.c   1148                 case White100:
000A12                 3095 _85:
                       3096 ; cbar.c   1149                         if ( system < NTSC)
000A12 99440002        3098         CMP.W   R4,#02H
000A16 FA0E            3099         BGE     _86
                       3100 ; cbar.c   1150                         {
                       3101 ; cbar.c   1151                                 SRAMVideoLoad( dWhiteLine_625, SRAMBank1);
000A18 91080B          3103         MOV.B   R0L,#0BH
000A1B 911810          3104         MOV.B   R0H,#010H
000A1E C5FB1A          3105         CALL    _SRAMVideoLoad
                       3106 ; cbar.c   1152 
                       3107 ; cbar.c   1153                                 newTablePtr = &PALFullFieldTable[0];
000A21 964842rr        3109         MOV.B   ES,#SEG( _newTablePtr )
000A25 9908rrrr        3110         MOV.W   R0,#SOF( _newTablePtr )
000A29 9B08rrrr        3111         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000A2D 9A08rrrr        3112         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       3113 ; cbar.c   1154                         }
                       3115         BR      _140
000A31 D50105         +3115         JMP.L   _140
000A31 D50105         +3115         JMP.L   _140
000A34                 3116 _86:
                       3117 ; cbar.c   1155                         else
                       3118 ; cbar.c   1156                         {
                       3119 ; cbar.c   1157                                 SRAMVideoLoad( dWhiteLine_525, SRAMBank1);
000A34 91080D          3121         MOV.B   R0L,#0DH
000A37 911810          3122         MOV.B   R0H,#010H
000A3A C5FB0C          3123         CALL    _SRAMVideoLoad
                       3124 ; cbar.c   1158 
                       3125 ; cbar.c   1159                                 newTablePtr = &NTSCFullFieldTable[0];
000A3D 964842rr        3127         MOV.B   ES,#SEG( _newTablePtr )
000A41 9908rrrr        3128         MOV.W   R0,#SOF( _newTablePtr )
000A45 9B08rrrr        3129         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000A49 9A08rrrr        3130         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3131 ; cbar.c   1160                         }
                       3132 ; cbar.c   1161                         break;
                       3134         BR      _140
000A4D D500F7         +3134         JMP.L   _140
                       3135 ; cbar.c   1162 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  45

ADDR   CODE            LINE SOURCELINE
                       3136 ; cbar.c   1163                 case Black:
000A50                 3138 _87:
                       3139 ; cbar.c   1164                         if ( system < NTSC)
000A50 99440002        3141         CMP.W   R4,#02H
000A54 FA0A            3142         BGE     _88
                       3143 ; cbar.c   1165                                 newTablePtr = &PALBlackTable[0];
000A56 964842rr        3145         MOV.B   ES,#SEG( _newTablePtr )
000A5A 9908rrrr        3146         MOV.W   R0,#SOF( _newTablePtr )
000A5E 9B08rrrr        3147         MOV.W   [R0+],#SOF( _PALBlackTable )
000A62 9A08rrrr        3148         MOV.W   [R0],#SEG( _PALBlackTable )
                       3149         BR      _140
000A66 D500EB         +3149         JMP.L   _140
000A66 D500EB00       +3149         JMP.L   _140
000A6A                 3150 _88:
                       3151 ; cbar.c   1166                         else
                       3152 ; cbar.c   1167                                 newTablePtr = &NTSCBlackTable[0];
000A6A 964842rr        3154         MOV.B   ES,#SEG( _newTablePtr )
000A6E 9908rrrr        3155         MOV.W   R0,#SOF( _newTablePtr )
000A72 9B08rrrr        3156         MOV.W   [R0+],#SOF( _NTSCBlackTable )
000A76 9A08rrrr        3157         MOV.W   [R0],#SEG( _NTSCBlackTable )
                       3158 ; cbar.c   1168                         break;
                       3160         BR      _140
000A7A D500E1         +3160         JMP.L   _140
                       3161 ; cbar.c   1169 
                       3162 ; cbar.c   1170                 case CheckField:
000A7E                 3164 _89:
                       3165 ; cbar.c   1171                         SRAMVideoLoad( dSDI_test_line1, SRAMBank1);
000A7E 910825          3167         MOV.B   R0L,#025H
000A81 911810          3168         MOV.B   R0H,#010H
000A84 C5FAE7          3169         CALL    _SRAMVideoLoad
                       3170 ; cbar.c   1172                         SRAMVideoLoad( dSDI_test_line2, SRAMBank2);
000A87 910826          3172         MOV.B   R0L,#026H
000A8A 911814          3173         MOV.B   R0H,#014H
000A8D C5FAE2          3174         CALL    _SRAMVideoLoad
                       3175 ; cbar.c   1173                         SRAMVideoLoad( dSDI_test_line3, SRAMBank3);
000A90 910827          3177         MOV.B   R0L,#027H
000A93 911818          3178         MOV.B   R0H,#018H
000A96 C5FADE          3179         CALL    _SRAMVideoLoad
                       3180 ; cbar.c   1174 
                       3181 ; cbar.c   1175                         if ( system < NTSC)
000A99 99440002        3183         CMP.W   R4,#02H
000A9D FA0A            3184         BGE     _90
                       3185 ; cbar.c   1176                                 newTablePtr = &PALCheckfieldTable[0];
000A9F 964842rr        3187         MOV.B   ES,#SEG( _newTablePtr )
000AA3 9908rrrr        3188         MOV.W   R0,#SOF( _newTablePtr )
000AA7 9B08rrrr        3189         MOV.W   [R0+],#SOF( _PALCheckfieldTable )
000AAB 9A08rrrr        3190         MOV.W   [R0],#SEG( _PALCheckfieldTable )
                       3191         BR      _140
000AAF D500C6         +3191         JMP.L   _140
000AAF D500C6         +3191         JMP.L   _140
000AB2                 3192 _90:
                       3193 ; cbar.c   1177                         else
                       3194 ; cbar.c   1178                                 newTablePtr = &NTSCCheckfieldTable[0];
000AB2 964842rr        3196         MOV.B   ES,#SEG( _newTablePtr )
000AB6 9908rrrr        3197         MOV.W   R0,#SOF( _newTablePtr )
000ABA 9B08rrrr        3198         MOV.W   [R0+],#SOF( _NTSCCheckfieldTable )
000ABE 9A08rrrr        3199         MOV.W   [R0],#SEG( _NTSCCheckfieldTable )
                       3200 ; cbar.c   1179                         break;
                       3202         BR      _140
000AC2 D500BD         +3202         JMP.L   _140
                       3203 ; cbar.c   1180 
                       3204 ; cbar.c   1181                 case DigitalGrey:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  46

ADDR   CODE            LINE SOURCELINE
000AC6                 3206 _91:
                       3207 ; cbar.c   1182                         if ( system < NTSC)
000AC6 99440002        3209         CMP.W   R4,#02H
000ACA FA0E            3210         BGE     _92
                       3211 ; cbar.c   1183                         {
                       3212 ; cbar.c   1184                                 SRAMVideoLoad( dDigitalGrey_625, SRAMBank1);
000ACC 910823          3214         MOV.B   R0L,#023H
000ACF 911810          3215         MOV.B   R0H,#010H
000AD2 C5FAC0          3216         CALL    _SRAMVideoLoad
                       3217 ; cbar.c   1185 
                       3218 ; cbar.c   1186                                 newTablePtr = &PALFullFieldTable[0];
000AD5 964842rr        3220         MOV.B   ES,#SEG( _newTablePtr )
000AD9 9908rrrr        3221         MOV.W   R0,#SOF( _newTablePtr )
000ADD 9B08rrrr        3222         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000AE1 9A08rrrr        3223         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       3224 ; cbar.c   1187                         }
                       3226         BR      _140
000AE5 D500AB         +3226         JMP.L   _140
000AE5 D500AB         +3226         JMP.L   _140
000AE8                 3227 _92:
                       3228 ; cbar.c   1188                         else
                       3229 ; cbar.c   1189                         {
                       3230 ; cbar.c   1190                                 SRAMVideoLoad( dDigitalGrey_525, SRAMBank1);
000AE8 910824          3232         MOV.B   R0L,#024H
000AEB 911810          3233         MOV.B   R0H,#010H
000AEE C5FAB2          3234         CALL    _SRAMVideoLoad
                       3235 ; cbar.c   1191 
                       3236 ; cbar.c   1192                                 newTablePtr = &NTSCFullFieldTable[0];
000AF1 964842rr        3238         MOV.B   ES,#SEG( _newTablePtr )
000AF5 9908rrrr        3239         MOV.W   R0,#SOF( _newTablePtr )
000AF9 9B08rrrr        3240         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000AFD 9A08rrrr        3241         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3242 ; cbar.c   1193                         }
                       3243 ; cbar.c   1194                         break;
                       3245         BR      _140
000B01 D5009D         +3245         JMP.L   _140
                       3246 ; cbar.c   1195 
                       3247 ; cbar.c   1196                 case Stair5:
000B04                 3249 _93:
                       3250 ; cbar.c   1197                         if ( system < NTSC)
000B04 99440002        3252         CMP.W   R4,#02H
000B08 FA0E            3253         BGE     _94
                       3254 ; cbar.c   1198                         {
                       3255 ; cbar.c   1199                                 SRAMVideoLoad( dGreyScale5_625, SRAMBank1);
000B0A 910817          3257         MOV.B   R0L,#017H
000B0D 911810          3258         MOV.B   R0H,#010H
000B10 C5FAA1          3259         CALL    _SRAMVideoLoad
                       3260 ; cbar.c   1200 
                       3261 ; cbar.c   1201                                 newTablePtr = &PALFullFieldTable[0];
000B13 964842rr        3263         MOV.B   ES,#SEG( _newTablePtr )
000B17 9908rrrr        3264         MOV.W   R0,#SOF( _newTablePtr )
000B1B 9B08rrrr        3265         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000B1F 9A08rrrr        3266         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       3267 ; cbar.c   1202                         }
                       3269         BR      _140
000B23 D5008C         +3269         JMP.L   _140
000B23 D5008C         +3269         JMP.L   _140
000B26                 3270 _94:
                       3271 ; cbar.c   1203                         else
                       3272 ; cbar.c   1204                         {
                       3273 ; cbar.c   1205                                 SRAMVideoLoad( dGreyScale5_525, SRAMBank1);
000B26 910818          3275         MOV.B   R0L,#018H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  47

ADDR   CODE            LINE SOURCELINE
000B29 911810          3276         MOV.B   R0H,#010H
000B2C C5FA93          3277         CALL    _SRAMVideoLoad
                       3278 ; cbar.c   1206 
                       3279 ; cbar.c   1207                                 newTablePtr = &NTSCFullFieldTable[0];
000B2F 964842rr        3281         MOV.B   ES,#SEG( _newTablePtr )
000B33 9908rrrr        3282         MOV.W   R0,#SOF( _newTablePtr )
000B37 9B08rrrr        3283         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000B3B 9A08rrrr        3284         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3285 ; cbar.c   1208                         }
                       3286 ; cbar.c   1209                         break;
000B3F FE7F            3288         BR      _140
                       3289 ; cbar.c   1210 
                       3290 ; cbar.c   1211                 case Stair10:
000B42                 3292 _95:
                       3293 ; cbar.c   1212                         if ( system < NTSC)     
000B42 99440002        3295         CMP.W   R4,#02H
000B46 FA0E            3296         BGE     _96
                       3297 ; cbar.c   1213                         {
                       3298 ; cbar.c   1214                                 SRAMVideoLoad( dGreyScale10_625, SRAMBank1);
000B48 910819          3300         MOV.B   R0L,#019H
000B4B 911810          3301         MOV.B   R0H,#010H
000B4E C5FA82          3302         CALL    _SRAMVideoLoad
                       3303 ; cbar.c   1215 
                       3304 ; cbar.c   1216                                 newTablePtr = &PALFullFieldTable[0];
000B51 964842rr        3306         MOV.B   ES,#SEG( _newTablePtr )
000B55 9908rrrr        3307         MOV.W   R0,#SOF( _newTablePtr )
000B59 9B08rrrr        3308         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000B5D 9A08rrrr        3309         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       3310 ; cbar.c   1217                         }
000B61 FE6E            3312         BR      _140
000B61 FE6E00          3312         BR      _140
000B64                 3313 _96:
                       3314 ; cbar.c   1218                         else
                       3315 ; cbar.c   1219                         {
                       3316 ; cbar.c   1220                                 SRAMVideoLoad( dGreyScale10_525, SRAMBank1);
000B64 91081A          3318         MOV.B   R0L,#01AH
000B67 911810          3319         MOV.B   R0H,#010H
000B6A C5FA74          3320         CALL    _SRAMVideoLoad
                       3321 ; cbar.c   1221 
                       3322 ; cbar.c   1222                                 newTablePtr = &NTSCFullFieldTable[0];
000B6D 964842rr        3324         MOV.B   ES,#SEG( _newTablePtr )
000B71 9908rrrr        3325         MOV.W   R0,#SOF( _newTablePtr )
000B75 9B08rrrr        3326         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000B79 9A08rrrr        3327         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3328 ; cbar.c   1223                         }
                       3329 ; cbar.c   1224                         break;
000B7D FE60            3331         BR      _140
                       3332 ; cbar.c   1225 
                       3333 ; cbar.c   1226                 case Crosshatch:
000B80                 3335 _97:
                       3336 ; cbar.c   1227                         if ( system < NTSC)
000B80 99440002        3338         CMP.W   R4,#02H
000B84 FA12            3339         BGE     _98
                       3340 ; cbar.c   1228                         {
                       3341 ; cbar.c   1229                                 SRAMVideoLoad( dCrossHatch19_625, SRAMBank1);
000B86 91080C          3343         MOV.B   R0L,#0CH
000B89 911810          3344         MOV.B   R0H,#010H
000B8C C5FA63          3345         CALL    _SRAMVideoLoad
                       3346 ; cbar.c   1230                                 SRAMVideoLoad( dWhiteLine_625, SRAMBank2);
000B8F 91080B          3348         MOV.B   R0L,#0BH
000B92 911814          3349         MOV.B   R0H,#014H
000B95 C5FA5E          3350         CALL    _SRAMVideoLoad
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  48

ADDR   CODE            LINE SOURCELINE
                       3351 ; cbar.c   1231 
                       3352 ; cbar.c   1232                                 newTablePtr = &PALCrosshatchTable[0];
000B98 964842rr        3354         MOV.B   ES,#SEG( _newTablePtr )
000B9C 9908rrrr        3355         MOV.W   R0,#SOF( _newTablePtr )
000BA0 9B08rrrr        3356         MOV.W   [R0+],#SOF( _PALCrosshatchTable )
000BA4 9A08rrrr        3357         MOV.W   [R0],#SEG( _PALCrosshatchTable )
                       3358 ; cbar.c   1233                         }
000BA8 FE4A            3360         BR      _140
000BA8 FE4A            3360         BR      _140
000BAA                 3361 _98:
                       3362 ; cbar.c   1234                         else
                       3363 ; cbar.c   1235                         {
                       3364 ; cbar.c   1236                                 SRAMVideoLoad( dCrossHatch17_525, SRAMBank1);
000BAA 91080E          3366         MOV.B   R0L,#0EH
000BAD 911810          3367         MOV.B   R0H,#010H
000BB0 C5FA51          3368         CALL    _SRAMVideoLoad
                       3369 ; cbar.c   1237                                 SRAMVideoLoad( dWhiteLine_525, SRAMBank2);
000BB3 91080D          3371         MOV.B   R0L,#0DH
000BB6 911814          3372         MOV.B   R0H,#014H
000BB9 C5FA4C          3373         CALL    _SRAMVideoLoad
                       3374 ; cbar.c   1238 
                       3375 ; cbar.c   1239                                 newTablePtr = &NTSCCrosshatchTable[0];
000BBC 964842rr        3377         MOV.B   ES,#SEG( _newTablePtr )
000BC0 9908rrrr        3378         MOV.W   R0,#SOF( _newTablePtr )
000BC4 9B08rrrr        3379         MOV.W   [R0+],#SOF( _NTSCCrosshatchTable )
000BC8 9A08rrrr        3380         MOV.W   [R0],#SEG( _NTSCCrosshatchTable )
                       3381 ; cbar.c   1240                         }
                       3382 ; cbar.c   1241                         break;
000BCC FE38            3384         BR      _140
                       3385 ; cbar.c   1242 
                       3386 ; cbar.c   1243                 case PLUGE:
000BCE                 3388 _99:
                       3389 ; cbar.c   1244                         if ( system < NTSC)
000BCE 99440002        3391         CMP.W   R4,#02H
000BD2 FA1B            3392         BGE     _100
                       3393 ; cbar.c   1245                         {
                       3394 ; cbar.c   1246                                 SRAMVideoLoad( dPlugeWhite_625, SRAMBank1);
000BD4 91080F          3396         MOV.B   R0L,#0FH
000BD7 911810          3397         MOV.B   R0H,#010H
000BDA C5FA3C          3398         CALL    _SRAMVideoLoad
                       3399 ; cbar.c   1247                                 SRAMVideoLoad( dPlugeGreyC_625, SRAMBank2);
000BDD 911814          3401         MOV.B   R0H,#014H
000BE0 910810          3402         MOV.B   R0L,#010H
000BE3 C5FA37          3403         CALL    _SRAMVideoLoad
                       3404 ; cbar.c   1248                                 SRAMVideoLoad( dPlugeGreyD_625, SRAMBank3);
000BE6 910811          3406         MOV.B   R0L,#011H
000BE9 911818          3407         MOV.B   R0H,#018H
000BEC C5FA33          3408         CALL    _SRAMVideoLoad
                       3409 ; cbar.c   1249                                 SRAMVideoLoad( dPlugeGreyE_625, SRAMBank4);
000BEF 910812          3411         MOV.B   R0L,#012H
000BF2 91181C          3412         MOV.B   R0H,#01CH
000BF5 C5FA2E          3413         CALL    _SRAMVideoLoad
                       3414 ; cbar.c   1250 
                       3415 ; cbar.c   1251                                 newTablePtr = &PALPLUGETable[0];
000BF8 964842rr        3417         MOV.B   ES,#SEG( _newTablePtr )
000BFC 9908rrrr        3418         MOV.W   R0,#SOF( _newTablePtr )
000C00 9B08rrrr        3419         MOV.W   [R0+],#SOF( _PALPLUGETable )
000C04 9A08rrrr        3420         MOV.W   [R0],#SEG( _PALPLUGETable )
                       3421 ; cbar.c   1252                         }
000C08 FE1A            3423         BR      _140
000C08 FE1A            3423         BR      _140
000C0A                 3424 _100:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  49

ADDR   CODE            LINE SOURCELINE
                       3425 ; cbar.c   1253                         else
                       3426 ; cbar.c   1254                         {
                       3427 ; cbar.c   1255                                 SRAMVideoLoad( dPlugeWhite_525, SRAMBank1);
000C0A 910813          3429         MOV.B   R0L,#013H
000C0D 911810          3430         MOV.B   R0H,#010H
000C10 C5FA21          3431         CALL    _SRAMVideoLoad
                       3432 ; cbar.c   1256                                 SRAMVideoLoad( dPlugeGreyC_525, SRAMBank2);
000C13 911814          3434         MOV.B   R0H,#014H
000C16 8101            3435         MOV.B   R0L,R0H
000C18 C5FA1D          3436         CALL    _SRAMVideoLoad
                       3437 ; cbar.c   1257                                 SRAMVideoLoad( dPlugeGreyD_525, SRAMBank3);
000C1B 910815          3439         MOV.B   R0L,#015H
000C1E 911818          3440         MOV.B   R0H,#018H
000C21 C5FA18          3441         CALL    _SRAMVideoLoad
                       3442 ; cbar.c   1258                                 SRAMVideoLoad( dPlugeGreyE_525, SRAMBank4);
000C24 910816          3444         MOV.B   R0L,#016H
000C27 91181C          3445         MOV.B   R0H,#01CH
000C2A C5FA14          3446         CALL    _SRAMVideoLoad
                       3447 ; cbar.c   1259 
                       3448 ; cbar.c   1260                                 newTablePtr = &NTSCPLUGETable[0];
000C2D 964842rr        3450         MOV.B   ES,#SEG( _newTablePtr )
000C31 9908rrrr        3451         MOV.W   R0,#SOF( _newTablePtr )
000C35 9B08rrrr        3452         MOV.W   [R0+],#SOF( _NTSCPLUGETable )
000C39 9A08rrrr        3453         MOV.W   [R0],#SEG( _NTSCPLUGETable )
                       3454 ; cbar.c   1261                         }
                       3455 ; cbar.c   1262                         break;
                       3456 ; cbar.c   1263         }
000C3E                 3458 _140:
                       3459 ; cbar.c   1264 
                       3460 ; cbar.c   1265         NewPattern = TRUE;
000C3E 964842rr        3462         MOV.B   ES,#SEG( _NewPattern )
000C42 9908rrrr        3463         MOV.W   R0,#SOF( _NewPattern )
000C46 9208FF          3464         MOV.B   [R0],#0FFH
                       3465 ; cbar.c   1266 
                       3466 ; cbar.c   1267         return( OK);
000C49 9908FFFF        3468         MOV.W   R0,#0FFFFH
                       3469 ; cbar.c   1268 }
000C4E                 3471 _141:
000C4E A972            3472         ADDS.W  R7,#02H
000C50 2F10            3474         POP.W   R4
000C52 D680            3476         RET
                       3478 ; cbar.c   1269 
                       3479 ; cbar.c   1270 /**************************************************************************/
                       3480 ; cbar.c   1271 /* SetCBSystem                                                                   
                                                                                               CBAR.C  */
                       3481 ; cbar.c   1272 /*                                                                               
                                                                                                                             
                                              */
                       3482 ; cbar.c   1273 /* Author:       Kim Engedahl, DEV, 000331                                       
                                                                                      */
                       3483 ; cbar.c   1274 /* Revised:      000705, KEn, DEV                                                
                                                                                      */
                       3484 ; cbar.c   1275 /*                                                                               
                                                                                                                             
                                              */
                       3485 ; cbar.c   1276 /* Function:                                                                     
                                                                                                              */
                       3486 ; cbar.c   1277 /* Remarks:                                                                      
                                                                                                                             
                             */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  50

ADDR   CODE            LINE SOURCELINE
                       3487 ; cbar.c   1278 /* Returns:                                                                      
                                                                                                                             
                             */
                       3488 ; cbar.c   1279 /* Updates:                                                                      
                                                                                                                             
                             */
                       3489 ; cbar.c   1280 /**************************************************************************/
                       3490 ; cbar.c   1281 int SetCBSystem( UC system)
                       3491 ; cbar.c   1282 {
                       3492         ALIGN   1
                       3494         PUBLIC  _SetCBSystem
000C54                 3495 _SetCBSystem:
000C54 0F10            3499         PUSH.W  R4
                       3503 ; cbar.c   1283         Settings.ActivePreset = 0;
000C56 964842rr        3505         MOV.B   ES,#SEG( _Settings )
000C5A 9918rrrr        3506         MOV.W   R1,#SOF( _Settings )
000C5E BA10            3507         MOV.W   [R1],#00H
                       3508 ; cbar.c   1284 
                       3509 ; cbar.c   1285         Settings.CBSetup.System = CBSetup.System = system;
000C60 8180            3511         MOV.B   R4L,R0L
000C62 964842rr        3512         MOV.B   ES,#SEG( _CBSetup )
000C66 9908rrrr        3513         MOV.W   R0,#SOF( _CBSetup )
000C6A 8288            3514         MOV.B   [R0],R4L
000C6C 964842rr        3517         MOV.B   ES,#SEG( _Settings+32 )
000C70 9908rrrr        3518         MOV.W   R0,#SOF( _Settings+32 )
000C74 8288            3519         MOV.B   [R0],R4L
                       3520 ; cbar.c   1286         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
000C76 9918rrrr        3522         MOV.W   R1,#SEG( _Settings )
000C7A 9908rrrr        3523         MOV.W   R0,#SOF( _Settings )
000C7E 964842rr        3524         MOV.B   ES,#SEG( _SettingsPtr )
000C82 9928rrrr        3525         MOV.W   R2,#SOF( _SettingsPtr )
000C86 8A22            3526         MOV.W   R2,[R2]
000C88 9938004A        3527         MOV.W   R3,#04AH
                       3528         CALL    _NV_Store
000C8C C4rrrrrr       +3528 ;       FCALL   _NV_Store
                       3529 ; cbar.c   1287 
                       3530 ; cbar.c   1288         if ( system < NTSC)
000C90 918402          3532         CMP.B   R4L,#02H
000C93 F017            3533         BCC     _160
                       3534 ; cbar.c   1289         {
                       3535 ; cbar.c   1290                 Status &= ~SYSSEL;
000C95 9E1520FFBF      3537         AND.W   _Status,#0FFBFH
                       3538 ; cbar.c   1291                 StatusPort = Status;            // Select new (SDI) system
000C9A 96484206        3540         MOV.B   ES,#SEG( _StatusPort )
000C9E 9908A000        3541         MOV.W   R0,#SOF( _StatusPort )
000CA2 A80120          3542         MOV.W   [R0],_Status
                       3543 ; cbar.c   1292 
                       3544 ; cbar.c   1293                 WriteCBGain( Calibration.CBCalibration.GainG);
000CA5 964842rr        3546         MOV.B   ES,#SEG( _Calibration+213 )
000CA9 9908rrrr        3547         MOV.W   R0,#SOF( _Calibration+213 )
000CAD 8200            3548         MOV.B   R0L,[R0]
000CAF C5F9A7          3549         CALL    _WriteCBGain
                       3550 ; cbar.c   1294                 WriteCBChromaGain( Calibration.CBCalibration.ChromaGainG);
000CB2 964842rr        3552         MOV.B   ES,#SEG( _Calibration+214 )
000CB6 9908rrrr        3553         MOV.W   R0,#SOF( _Calibration+214 )
000CBA 8200            3554         MOV.B   R0L,[R0]
000CBC C5F9AC          3555         CALL    _WriteCBChromaGain
                       3556 ; cbar.c   1295         }
000CBF FE16            3558         BR      _161
000CBF FE1600          3558         BR      _161
000CC2                 3559 _160:
                       3560 ; cbar.c   1296         else
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  51

ADDR   CODE            LINE SOURCELINE
                       3561 ; cbar.c   1297         {
                       3562 ; cbar.c   1298                 Status |= SYSSEL;
000CC2 9E16200040      3564         OR.W    _Status,#040H
                       3565 ; cbar.c   1299                 StatusPort = Status;            // Select new (SDI) system
000CC7 96484206        3567         MOV.B   ES,#SEG( _StatusPort )
000CCB 9908A000        3568         MOV.W   R0,#SOF( _StatusPort )
000CCF A80120          3569         MOV.W   [R0],_Status
                       3570 ; cbar.c   1300 
                       3571 ; cbar.c   1301                 WriteCBGain( Calibration.CBCalibration.GainM);
000CD2 964842rr        3573         MOV.B   ES,#SEG( _Calibration+215 )
000CD6 9908rrrr        3574         MOV.W   R0,#SOF( _Calibration+215 )
000CDA 8200            3575         MOV.B   R0L,[R0]
000CDC C5F991          3576         CALL    _WriteCBGain
                       3577 ; cbar.c   1302                 WriteCBChromaGain( Calibration.CBCalibration.ChromaGainM);
000CDF 964842rr        3579         MOV.B   ES,#SEG( _Calibration+216 )
000CE3 9908rrrr        3580         MOV.W   R0,#SOF( _Calibration+216 )
000CE7 8200            3581         MOV.B   R0L,[R0]
000CE9 C5F995          3582         CALL    _WriteCBChromaGain
                       3583 ; cbar.c   1303         }
000CEC                 3585 _161:
                       3586 ; cbar.c   1304 
                       3587 ; cbar.c   1305 
                       3588 ; cbar.c   1306         tvp6k_system( system);  // Initialise the composite output
000CEC 8108            3590         MOV.B   R0L,R4L
000CEE B110            3591         MOVS.B  R0H,#00H
                       3592         CALL    _tvp6k_system
000CF0 C4rrrrrr       +3592 ;       FCALL   _tvp6k_system
                       3593 ; cbar.c   1307 
                       3594 ; cbar.c   1308                                                                                  
                                                    // Validate pattern and change if invalid in new system                  
                                                                                                                             
                                                    
                       3595 ; cbar.c   1309         ValidateCBPattern( system , &CBSetup.Pattern);
000CF4 9938rrrr        3597         MOV.W   R3,#SEG( _CBSetup+2 )
000CF8 9928rrrr        3598         MOV.W   R2,#SOF( _CBSetup+2 )
000CFC 8108            3599         MOV.B   R0L,R4L
000CFE C50186          3602         CALL    _ValidateCBPattern
                       3605 ; cbar.c   1310 
                       3606 ; cbar.c   1311                                                                                  
                                                    // This one initialises TablePtr;
                       3607 ; cbar.c   1312         SetCBPattern( CBSetup.Pattern);
000D01 964842rr        3609         MOV.B   ES,#SEG( _CBSetup+2 )
000D05 9908rrrr        3610         MOV.W   R0,#SOF( _CBSetup+2 )
000D09 8A00            3611         MOV.W   R0,[R0]
000D0B C5FC91          3612         CALL    _SetCBPattern
                       3613 ; cbar.c   1313 
                       3614 ; cbar.c   1314         SetCBScHPhase( CBSetup.ScHPhase);
000D0E 964842rr        3616         MOV.B   ES,#SEG( _CBSetup+8 )
000D12 9908rrrr        3617         MOV.W   R0,#SOF( _CBSetup+8 )
000D16 8A00            3618         MOV.W   R0,[R0]
000D18 C500D7          3619         CALL    _SetCBScHPhase
                       3620 ; cbar.c   1315 
                       3621 ; cbar.c   1316         LEDSet( CBPALLED, system < NTSC);
000D1B 99080040        3623         MOV.W   R0,#040H
000D1F 918402          3624         CMP.B   R4L,#02H
000D22 F002            3625         BCC     _163
000D24 B911            3626         MOVS.W  R1,#01H
000D26 FE01            3627         BR      _165
000D26 FE01            3627         BR      _165
000D28                 3628 _163:
000D28 B910            3629         MOVS.W  R1,#00H
000D28 B910            3629         MOVS.W  R1,#00H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  52

ADDR   CODE            LINE SOURCELINE
000D2A                 3630 _165:
                       3631         CALL    _LEDSet
000D2A C4rrrrrr       +3631 ;       FCALL   _LEDSet
                       3632 ; cbar.c   1317         LEDSet( CBNTSCLED, system >= NTSC);
000D2E 99080080        3634         MOV.W   R0,#080H
000D32 918402          3635         CMP.B   R4L,#02H
000D35 F103            3636         BCS     _166
000D37 B911            3637         MOVS.W  R1,#01H
000D39 FE02            3638         BR      _168
000D39 FE0200          3638         BR      _168
000D3C                 3639 _166:
000D3C B910            3640         MOVS.W  R1,#00H
000D3C B910            3640         MOVS.W  R1,#00H
000D3E                 3641 _168:
                       3642         CALL    _LEDSet
000D3E C4rrrrrr       +3642 ;       FCALL   _LEDSet
                       3643 ; cbar.c   1318 
                       3644 ; cbar.c   1319         return( OK);
000D42 9908FFFF        3646         MOV.W   R0,#0FFFFH
                       3647 ; cbar.c   1320 }
000D46 2F10            3649         POP.W   R4
000D48 D680            3651         RET
                       3654 ; cbar.c   1321 
                       3655 ; cbar.c   1322 /**************************************************************************/
                       3656 ; cbar.c   1323 /* SetCBDelay                                                                    
                                                                                                                             
                                                                       CBAR.C       */
                       3657 ; cbar.c   1324 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       3658 ; cbar.c   1325 /* Author:       Kim Engedahl, DEV, 000331                                       
                                                                                                                             
                                    */
                       3659 ; cbar.c   1326 /* Revised:      001009, KEn, DEV                                                
                                                                                                                             
                                            */
                       3660 ; cbar.c   1327 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       3661 ; cbar.c   1328 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       3662 ; cbar.c   1329 /* Remarks:      CB Delay resolution is 37ns                                     
                                                                                                                            *
                            /
                       3663 ; cbar.c   1330 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       3664 ; cbar.c   1331 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       3665 ; cbar.c   1332 /**************************************************************************/
                       3666 ; cbar.c   1333 int SetCBDelay( UL delay)
                       3667 ; cbar.c   1334 {
                       3668         ALIGN   1
                       3670         PUBLIC  _SetCBDelay
000D4A                 3671 _SetCBDelay:
000D4A 0F30            3675         PUSH.W  R4, R5
                       3681 ; cbar.c   1335         UL tmpOffset;
                       3682 ; cbar.c   1336 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  53

ADDR   CODE            LINE SOURCELINE
                       3683 ; cbar.c   1337         Settings.ActivePreset = 0;
000D4C 964842rr        3685         MOV.B   ES,#SEG( _Settings )
000D50 9928rrrr        3686         MOV.W   R2,#SOF( _Settings )
000D54 BA20            3687         MOV.W   [R2],#00H
                       3688 ; cbar.c   1338 
                       3689 ; cbar.c   1339         Settings.CBSetup.Delay = CBSetup.Delay = delay;
000D56 8951            3691         MOV.W   R5,R1
000D58 8940            3692         MOV.W   R4,R0
000D5A 964842rr        3693         MOV.B   ES,#SEG( _CBSetup+4 )
000D5E 9908rrrr        3694         MOV.W   R0,#SOF( _CBSetup+4 )
000D62 8B48            3695         MOV.W   [R0+],R4
000D64 8A58            3696         MOV.W   [R0],R5
000D66 964842rr        3699         MOV.B   ES,#SEG( _Settings+36 )
000D6A 9908rrrr        3700         MOV.W   R0,#SOF( _Settings+36 )
000D6E 8B48            3701         MOV.W   [R0+],R4
000D70 8A58            3702         MOV.W   [R0],R5
                       3703 ; cbar.c   1340         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
000D72 9918rrrr        3705         MOV.W   R1,#SEG( _Settings )
000D76 9908rrrr        3706         MOV.W   R0,#SOF( _Settings )
000D7A 964842rr        3707         MOV.B   ES,#SEG( _SettingsPtr )
000D7E 9928rrrr        3708         MOV.W   R2,#SOF( _SettingsPtr )
000D82 8A22            3709         MOV.W   R2,[R2]
000D84 9938004A        3710         MOV.W   R3,#04AH
                       3711         CALL    _NV_Store
000D88 C4rrrrrr       +3711 ;       FCALL   _NV_Store
                       3712 ; cbar.c   1341 
                       3713 ; cbar.c   1342         // Divide GenlockSetup.Delay with 256 as the resulotion is 27ns/256 where
                            as the
                       3714 ; cbar.c   1343         //  resolution of the TSG is 37ns.
                       3715 ; cbar.c   1344         tmpOffset = delay + GenlockSetup.Delay/256;
000D8C 964842rr        3717         MOV.B   ES,#SEG( _GenlockSetup+2 )
000D90 9918rrrr        3718         MOV.W   R1,#SOF( _GenlockSetup+2 )
000D94 8B01            3719         MOV.W   R0,[R1+]
000D96 8A11            3720         MOV.W   R1,[R1]
000D98 DC08            3721         LSR.D   R0,#08H
000D9A 0940            3722         ADD.W   R4,R0
000D9C 1951            3723         ADDC.W  R5,R1
000D9E 8935            3725         MOV.W   R3,R5
000DA0 8924            3726         MOV.W   R2,R4
                       3728 ; cbar.c   1345 
                       3729 ; cbar.c   1346         if ( CBSetup.System < NTSC)
000DA2 964842rr        3731         MOV.B   ES,#SEG( _CBSetup )
000DA6 9908rrrr        3732         MOV.W   R0,#SOF( _CBSetup )
000DAA 8200            3733         MOV.B   R0L,[R0]
000DAC 910402          3734         CMP.B   R0L,#02H
000DAF F02C            3735         BCC     _169
                       3736 ; cbar.c   1347         {
                       3737 ; cbar.c   1348                 tmpOffset += Calibration.CBCalibration.PhaseG;
000DB1 964842rr        3739         MOV.B   ES,#SEG( _Calibration+202 )
000DB5 9938rrrr        3740         MOV.W   R3,#SOF( _Calibration+202 )
000DB9 8B23            3741         MOV.W   R2,[R3+]
000DBB 8A33            3742         MOV.W   R3,[R3]
000DBD 0942            3744         ADD.W   R4,R2
000DBF 1953            3745         ADDC.W  R5,R3
000DC1 8915            3746         MOV.W   R1,R5
000DC3 8904            3747         MOV.W   R0,R4
                       3749 ; cbar.c   1349 
                       3750 ; cbar.c   1350                 tmpOffset %= 4320000L;                                          /
                            / 4*625*1728
000DC5 99380041        3752         MOV.W   R3,#041H
000DC9 9928EB00        3753         MOV.W   R2,#0EB00H
000DCD C4rrrrrr        3754         FCALL   __UMODL
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  54

ADDR   CODE            LINE SOURCELINE
                       3757 ; cbar.c   1351 
                       3758 ; cbar.c   1352                 LineOffset = 0xFFFF - ( tmpOffset / 1728L);                      
                                    
000DD1 B930            3760         MOV.W   R3,#00H
000DD3 992806C0        3761         MOV.W   R2,#06C0H
000DD7 8951            3762         MOV.W   R5,R1
000DD9 8940            3763         MOV.W   R4,R0
000DDB C4rrrrrr        3764         FCALL   __UDIVL
000DDF 9918FFFF        3767         MOV.W   R1,#0FFFFH
000DE3 2910            3768         SUB.W   R1,R0
000DE5 8E1rrr          3769         MOV.W   _LineOffset,R1
                       3770 ; cbar.c   1353                 PhaseOffset = 1727 - ( tmpOffset % 1728L);
000DE8 8915            3772         MOV.W   R1,R5
000DEA 8904            3773         MOV.W   R0,R4
000DEC B930            3774         MOV.W   R3,#00H
000DEE 992806C0        3775         MOV.W   R2,#06C0H
000DF2 C4rrrrrr        3776         FCALL   __UMODL
000DF6 991806BF        3780         MOV.W   R1,#06BFH
000DFA 2910            3781         SUB.W   R1,R0
000DFC 964842rr        3782         MOV.B   ES,#SEG( _PhaseOffset )
000E00 9908rrrr        3783         MOV.W   R0,#SOF( _PhaseOffset )
000E04 8A18            3784         MOV.W   [R0],R1
                       3785 ; cbar.c   1354         }
000E06 FE3D            3787         BR      _171
000E06 FE3D            3787         BR      _171
000E08                 3788 _169:
                       3790 ; cbar.c   1355         else 
                       3791 ; cbar.c   1356         {
                       3792 ; cbar.c   1357                 tmpOffset += Calibration.CBCalibration.PhaseM;
000E08 964842rr        3794         MOV.B   ES,#SEG( _Calibration+208 )
000E0C 9918rrrr        3795         MOV.W   R1,#SOF( _Calibration+208 )
000E10 8B01            3796         MOV.W   R0,[R1+]
000E12 8A11            3797         MOV.W   R1,[R1]
000E14 0902            3798         ADD.W   R0,R2
000E16 1913            3799         ADDC.W  R1,R3
                       3802 ; cbar.c   1358 
                       3803 ; cbar.c   1359                 tmpOffset %= 1801800L;                                          /
                            / 2*525*1716
000E18 9938001B        3805         MOV.W   R3,#01BH
000E1C 99287E48        3806         MOV.W   R2,#07E48H
000E20 C4rrrrrr        3807         FCALL   __UMODL
                       3810 ; cbar.c   1360 
                       3811 ; cbar.c   1361                 LineOffset = 0xFFFF - ( tmpOffset / 1716L);                      
                                    
000E24 B930            3813         MOV.W   R3,#00H
000E26 992806B4        3814         MOV.W   R2,#06B4H
000E2A 8951            3815         MOV.W   R5,R1
000E2C 8940            3816         MOV.W   R4,R0
000E2E C4rrrrrr        3817         FCALL   __UDIVL
000E32 9918FFFF        3820         MOV.W   R1,#0FFFFH
000E36 2910            3821         SUB.W   R1,R0
000E38 8E1rrr          3822         MOV.W   _LineOffset,R1
                       3823 ; cbar.c   1362                 PhaseOffset = 1715 - ( tmpOffset % 1716L);
000E3B B930            3825         MOV.W   R3,#00H
000E3D 992806B4        3826         MOV.W   R2,#06B4H
000E41 8915            3827         MOV.W   R1,R5
000E43 8904            3828         MOV.W   R0,R4
000E45 C4rrrrrr        3829         FCALL   __UMODL
000E49 991806B3        3833         MOV.W   R1,#06B3H
000E4D 2910            3834         SUB.W   R1,R0
000E4F 964842rr        3835         MOV.B   ES,#SEG( _PhaseOffset )
000E53 9908rrrr        3836         MOV.W   R0,#SOF( _PhaseOffset )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  55

ADDR   CODE            LINE SOURCELINE
000E57 8A18            3837         MOV.W   [R0],R1
                       3838 ; cbar.c   1363 
                       3839 ; cbar.c   1364                 if ( PhaseOffset > 1687)
000E59 964842rr        3841         MOV.B   ES,#SEG( _PhaseOffset )
000E5D 9908rrrr        3842         MOV.W   R0,#SOF( _PhaseOffset )
000E61 8A00            3843         MOV.W   R0,[R0]
000E63 99040697        3844         CMP.W   R0,#0697H
000E67 FD0D            3845         BLE     _171
                       3846 ; cbar.c   1365                         PhaseOffset += 12;
000E69 964842rr        3848         MOV.B   ES,#SEG( _PhaseOffset )
000E6D 9908rrrr        3849         MOV.W   R0,#SOF( _PhaseOffset )
000E71 8A00            3850         MOV.W   R0,[R0]
000E73 9900000C        3851         ADD.W   R0,#0CH
000E77 964842rr        3852         MOV.B   ES,#SEG( _PhaseOffset )
000E7B 9918rrrr        3853         MOV.W   R1,#SOF( _PhaseOffset )
000E7F 8A09            3854         MOV.W   [R1],R0
                       3855 ; cbar.c   1366         }
000E82                 3857 _171:
                       3858 ; cbar.c   1367 
                       3859 ; cbar.c   1368         if ( PhaseOffset >= 1443)
000E82 964842rr        3861         MOV.B   ES,#SEG( _PhaseOffset )
000E86 9908rrrr        3862         MOV.W   R0,#SOF( _PhaseOffset )
000E8A 8A00            3863         MOV.W   R0,[R0]
000E8C 990405A3        3864         CMP.W   R0,#05A3H
000E90 FB04            3865         BLT     _172
                       3866 ; cbar.c   1369                 Status |= PHASEREGSEL;                          // Set Phase Regi
                            ster Select
000E92 9E16204000      3868         OR.W    _Status,#04000H
000E97 FE04            3869         BR      _173
000E97 FE0400          3869         BR      _173
000E9A                 3870 _172:
                       3871 ; cbar.c   1370         else            
                       3872 ; cbar.c   1371                 Status &= ~PHASEREGSEL;                         // Clear Phase Re
                            gister Select
000E9A 9E1520BFFF      3874         AND.W   _Status,#0BFFFH
000E9A 9E1520BFFF00    3874         AND.W   _Status,#0BFFFH
000EA0                 3875 _173:
                       3876 ; cbar.c   1372                 
                       3877 ; cbar.c   1373         StatusPort = Status;
000EA0 96484206        3879         MOV.B   ES,#SEG( _StatusPort )
000EA4 9908A000        3880         MOV.W   R0,#SOF( _StatusPort )
000EA8 A80120          3881         MOV.W   [R0],_Status
                       3882 ; cbar.c   1374 
                       3883 ; cbar.c   1375         HOffsetPort = PhaseOffset;
000EAB 964842rr        3885         MOV.B   ES,#SEG( _PhaseOffset )
000EAF 9908rrrr        3886         MOV.W   R0,#SOF( _PhaseOffset )
000EB3 8A00            3887         MOV.W   R0,[R0]
000EB5 96484206        3888         MOV.B   ES,#SEG( _HOffsetPort )
000EB9 9918A004        3889         MOV.W   R1,#SOF( _HOffsetPort )
000EBD 8A09            3890         MOV.W   [R1],R0
                       3891 ; cbar.c   1376 
                       3892 ; cbar.c   1377         return( OK);
000EBF 9908FFFF        3894         MOV.W   R0,#0FFFFH
                       3895 ; cbar.c   1378 }
000EC3 2F30            3897         POP.W   R4, R5
000EC5 D680            3899         RET
                       3901 ; cbar.c   1379 
                       3902 ; cbar.c   1380 /**************************************************************************/
                       3903 ; cbar.c   1381 /* SetCBScHPhase                                                                 
                                                                                                                             
                                                               CBAR.C       */
                       3904 ; cbar.c   1382 /*                                                                               
                                                                                                                             
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  56

ADDR   CODE            LINE SOURCELINE
                                                                                                                             
                                            */
                       3905 ; cbar.c   1383 /* Author:       Kim Engedahl, DEV, 000331                                       
                                                                                                                             
                                    */
                       3906 ; cbar.c   1384 /* Revised:      000618, KEn, DEV                                                
                                                                                                                             
                                            */
                       3907 ; cbar.c   1385 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       3908 ; cbar.c   1386 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       3909 ; cbar.c   1387 /* Remarks:      Note that the resolution is different from BlackBurst, (1.4).*/
                       3910 ; cbar.c   1388 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       3911 ; cbar.c   1389 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       3912 ; cbar.c   1390 /**************************************************************************/
                       3913 ; cbar.c   1391 int SetCBScHPhase( int schphase)
                       3914 ; cbar.c   1392 {
000EC7 00              3915         ALIGN   1
                       3917         PUBLIC  _SetCBScHPhase
000EC8                 3918 _SetCBScHPhase:
000EC8 0F10            3922         PUSH.W  R4
000ECA A97E            3924         ADDS.W  R7,#0EH
                       3932 ; cbar.c   1393         long tmp;
                       3933 ; cbar.c   1394         UC buffer[2];
                       3934 ; cbar.c   1395 
                       3935 ; cbar.c   1396         Settings.ActivePreset = 0;
000ECC 964842rr        3937         MOV.B   ES,#SEG( _Settings )
000ED0 9918rrrr        3938         MOV.W   R1,#SOF( _Settings )
000ED4 BA10            3939         MOV.W   [R1],#00H
                       3940 ; cbar.c   1397 
                       3941 ; cbar.c   1398         Settings.CBSetup.ScHPhase = CBSetup.ScHPhase = schphase;
000ED6 8940            3943         MOV.W   R4,R0
000ED8 964842rr        3944         MOV.B   ES,#SEG( _CBSetup+8 )
000EDC 9908rrrr        3945         MOV.W   R0,#SOF( _CBSetup+8 )
000EE0 8A48            3946         MOV.W   [R0],R4
000EE2 964842rr        3949         MOV.B   ES,#SEG( _Settings+40 )
000EE6 9908rrrr        3950         MOV.W   R0,#SOF( _Settings+40 )
000EEA 8A48            3951         MOV.W   [R0],R4
                       3952 ; cbar.c   1399         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
000EEC 9918rrrr        3954         MOV.W   R1,#SEG( _Settings )
000EF0 9908rrrr        3955         MOV.W   R0,#SOF( _Settings )
000EF4 964842rr        3956         MOV.B   ES,#SEG( _SettingsPtr )
000EF8 9928rrrr        3957         MOV.W   R2,#SOF( _SettingsPtr )
000EFC 8A22            3958         MOV.W   R2,[R2]
000EFE 9938004A        3959         MOV.W   R3,#04AH
                       3960         CALL    _NV_Store
000F02 C4rrrrrr       +3960 ;       FCALL   _NV_Store
                       3961 ; cbar.c   1400   
                       3962 ; cbar.c   1401         if ( CBSetup.System < NTSC)
000F06 964842rr        3964         MOV.B   ES,#SEG( _CBSetup )
000F0A 9908rrrr        3965         MOV.W   R0,#SOF( _CBSetup )
000F0E 8200            3966         MOV.B   R0L,[R0]
000F10 910402          3967         CMP.B   R0L,#02H
000F13 F009            3968         BCC     _177
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  57

ADDR   CODE            LINE SOURCELINE
                       3969 ; cbar.c   1402                 tmp = (long) Calibration.CBCalibration.ScHPhaseG;
000F15 964842rr        3971         MOV.B   ES,#SEG( _Calibration+206 )
000F19 9908rrrr        3972         MOV.W   R0,#SOF( _Calibration+206 )
000F1D 8200            3973         MOV.B   R0L,[R0]
000F1F B110            3974         MOVS.B  R0H,#00H
000F21 B910            3975         MOVS.W  R1,#00H
000F23 FE08            3977         BR      _178
000F23 FE0800          3977         BR      _178
000F26                 3978 _177:
                       3979 ; cbar.c   1403         else 
                       3980 ; cbar.c   1404                 tmp = (long) Calibration.CBCalibration.ScHPhaseM;
000F26 964842rr        3982         MOV.B   ES,#SEG( _Calibration+212 )
000F2A 9908rrrr        3983         MOV.W   R0,#SOF( _Calibration+212 )
000F2E 8200            3984         MOV.B   R0L,[R0]
000F30 B110            3986         MOVS.B  R0H,#00H
000F32 B910            3987         MOVS.W  R1,#00H
000F34                 3989 _178:
                       3990 ; cbar.c   1405 
                       3991 ; cbar.c   1406         tmp += (long) schphase;
000F34 8924            3993         MOV.W   R2,R4
000F36 9839            3994         SEXT.W  R3
000F38 0902            3995         ADD.W   R0,R2
000F3A 1913            3996         ADDC.W  R1,R3
                       3999 ; cbar.c   1407 
                       4000 ; cbar.c   1408         if ( tmp < 0)                                                            
                                                    // -1 deg equ. 359 deg a.s.f.
000F3C 99140000        4002         CMP.W   R1,#00H
000F40 FC08            4003         BGT     _179
000F42 FB03            4004         BLT     _181
000F44 99040000        4005         CMP.W   R0,#00H
000F48 F004            4006         BCC     _179
000F48 F004            4006         BCC     _179
000F4A                 4007 _181:
                       4008 ; cbar.c   1409                 tmp += 360;
000F4A 99000168        4010         ADD.W   R0,#0168H
000F4E 99110000        4011         ADDC.W  R1,#00H
000F52                 4014 _179:
                       4015 ; cbar.c   1410 
                       4016 ; cbar.c   1411         tmp *= 256;
000F52 DD08            4018         ASL.D   R0,#08H
                       4021 ; cbar.c   1412         tmp /= 360;                                                              
                                                            // tmp = ( ScHPhase*256)/360;
000F54 B930            4023         MOV.W   R3,#00H
000F56 99280168        4024         MOV.W   R2,#0168H
000F5A C4rrrrrr        4025         FCALL   __SDIVL
                       4028 ; cbar.c   1413 
                       4029 ; cbar.c   1414         buffer[0] = C_PHASE_address;
000F5E 92785A          4031         MOV.B   [R7],#05AH
                       4033 ; cbar.c   1415         buffer[1] = tmp & 0xFF;
000F61 9105FF          4035         AND.B   R0L,#0FFH
000F64 840F01          4036         MOV.B   [R7+1],R0L
                       4037 ; cbar.c   1416         
                       4038 ; cbar.c   1417         return( TransmitIIC( TVP6K_IIC_address, 2, buffer, IIC_PTV));
000F67 910840          4040         MOV.B   R0L,#040H
000F6A 911802          4041         MOV.B   R0H,#02H
000F6D 9168rr          4042         MOV.B   R3L,#SEG( __lc_bs )
000F70 7177            4043         XOR.B   R3H,R3H
000F72 8927            4044         MOV.W   R2,R7
000F74 912800          4045         MOV.B   R1L,#00H
                       4046         CALL    _TransmitIIC
000F77 C4rrrrrr       +4046 ;       FCALL   _TransmitIIC
                       4047 ; cbar.c   1418 }
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  58

ADDR   CODE            LINE SOURCELINE
000F7B A972            4049         ADDS.W  R7,#02H
000F7D 2F10            4051         POP.W   R4
000F7F D680            4053         RET
                       4056 ; cbar.c   1419 
                       4057 ; cbar.c   1420 /**************************************************************************/
                       4058 ; cbar.c   1421 /* SetCBEmbAudioSignal                                                           
                                                                                                                             
                                       CBAR.C       */
                       4059 ; cbar.c   1422 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       4060 ; cbar.c   1423 /* Author:       Kim Engedahl, DEV, 000331                                       
                                                                                                                             
                                    */
                       4061 ; cbar.c   1424 /* Revised:      000618, KEn, DEV                                                
                                                                                                                             
                                            */
                       4062 ; cbar.c   1425 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       4063 ; cbar.c   1426 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       4064 ; cbar.c   1427 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       4065 ; cbar.c   1428 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       4066 ; cbar.c   1429 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       4067 ; cbar.c   1430 /**************************************************************************/
                       4068 ; cbar.c   1431 int SetCBEmbAudioSignal( UC signal)
                       4069 ; cbar.c   1432 {
000F81 00              4070         ALIGN   1
                       4072         PUBLIC  _SetCBEmbAudioSignal
000F82                 4073 _SetCBEmbAudioSignal:
000F82 0F10            4077         PUSH.W  R4
                       4081 ; cbar.c   1433         Settings.ActivePreset = 0;
000F84 964842rr        4083         MOV.B   ES,#SEG( _Settings )
000F88 9918rrrr        4084         MOV.W   R1,#SOF( _Settings )
000F8C BA10            4085         MOV.W   [R1],#00H
                       4086 ; cbar.c   1434 
                       4087 ; cbar.c   1435         Settings.CBSetup.EmbAudioSignal = CBSetup.EmbAudioSignal = signal;
000F8E 8180            4089         MOV.B   R4L,R0L
000F90 964842rr        4090         MOV.B   ES,#SEG( _CBSetup+10 )
000F94 9908rrrr        4091         MOV.W   R0,#SOF( _CBSetup+10 )
000F98 8288            4092         MOV.B   [R0],R4L
000F9A 964842rr        4095         MOV.B   ES,#SEG( _Settings+42 )
000F9E 9908rrrr        4096         MOV.W   R0,#SOF( _Settings+42 )
000FA2 8288            4097         MOV.B   [R0],R4L
                       4098 ; cbar.c   1436         NV_Store( &Settings, SettingsPtr, sizeof( Settings));
000FA4 9918rrrr        4100         MOV.W   R1,#SEG( _Settings )
000FA8 9908rrrr        4101         MOV.W   R0,#SOF( _Settings )
000FAC 964842rr        4102         MOV.B   ES,#SEG( _SettingsPtr )
000FB0 9928rrrr        4103         MOV.W   R2,#SOF( _SettingsPtr )
000FB4 8A22            4104         MOV.W   R2,[R2]
000FB6 9938004A        4105         MOV.W   R3,#04AH
                       4106         CALL    _NV_Store
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  59

ADDR   CODE            LINE SOURCELINE
000FBA C4rrrrrr       +4106 ;       FCALL   _NV_Store
                       4107 ; cbar.c   1437 
                       4108 ; cbar.c   1438         if ( signal == EmbAudioOff)
000FBE 6188            4110         OR.B    R4L,R4L
000FC0 F206            4111         BNE     _182
                       4112 ; cbar.c   1439                 SoundEnable = FALSE;
000FC2 964842rr        4114         MOV.B   ES,#SEG( _SoundEnable )
000FC6 9908rrrr        4115         MOV.W   R0,#SOF( _SoundEnable )
000FCA B200            4116         MOV.B   [R0],#00H
000FCC FE1B            4117         BR      _183
000FCC FE1B            4117         BR      _183
000FCE                 4118 _182:
                       4121 ; cbar.c   1440         else
                       4122 ; cbar.c   1441         {
                       4123 ; cbar.c   1442                 SoundEnable = TRUE;
000FCE 964842rr        4125         MOV.B   ES,#SEG( _SoundEnable )
000FD2 9908rrrr        4126         MOV.W   R0,#SOF( _SoundEnable )
000FD6 9208FF          4127         MOV.B   [R0],#0FFH
                       4128 ; cbar.c   1443 
                       4129 ; cbar.c   1444                 Blanking = TRUE;                                                 
                                            // Blank line while loading SRAM
000FD9 964842rr        4131         MOV.B   ES,#SEG( _Blanking )
000FDD 9908rrrr        4132         MOV.W   R0,#SOF( _Blanking )
000FE1 9208FF          4133         MOV.B   [R0],#0FFH
                       4134 ; cbar.c   1445 
                       4135 ; cbar.c   1446                 Status &= ~S5S4S3S2;                                            /
                            / Blank the line immediately
000FE4 9E1520FFC3      4137         AND.W   _Status,#0FFC3H
                       4138 ; cbar.c   1447                 StatusPort = Status;
000FE9 96484206        4140         MOV.B   ES,#SEG( _StatusPort )
000FED 9908A000        4141         MOV.W   R0,#SOF( _StatusPort )
000FF1 A80120          4142         MOV.W   [R0],_Status
                       4143 ; cbar.c   1448 
                       4144 ; cbar.c   1449                 SRAMSoundLoad( signal);                                 // Downlo
                            ad sound information
000FF4 8108            4146         MOV.B   R0L,R4L
000FF6 C5F878          4147         CALL    _SRAMSoundLoad
                       4151 ; cbar.c   1450 
                       4152 ; cbar.c   1451                 Blanking = FALSE;
000FF9 964842rr        4154         MOV.B   ES,#SEG( _Blanking )
000FFD 9908rrrr        4155         MOV.W   R0,#SOF( _Blanking )
001001 B200            4156         MOV.B   [R0],#00H
                       4157 ; cbar.c   1452         }
001004                 4159 _183:
                       4160 ; cbar.c   1453 
                       4161 ; cbar.c   1454         return( OK);
001004 9908FFFF        4163         MOV.W   R0,#0FFFFH
                       4164 ; cbar.c   1455 }
001008 2F10            4166         POP.W   R4
00100A D680            4168         RET
                       4170 ; cbar.c   1456 
                       4171 ; cbar.c   1457 /**************************************************************************/
                       4172 ; cbar.c   1458 /* ValidateCBPattern                                                             
                                                                                                                             
                                         CBAR.C     */
                       4173 ; cbar.c   1459 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       4174 ; cbar.c   1460 /* Author:       Kim Engedahl, DEV, 000405                                       
                                                                                                                             
                                    */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  60

ADDR   CODE            LINE SOURCELINE
                       4175 ; cbar.c   1461 /* Revised:      000603, KEn, DEV                                                
                                                                                                                             
                                            */
                       4176 ; cbar.c   1462 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       4177 ; cbar.c   1463 /* Function:                                                                     
                                                                                                                             
                                                                                                    */
                       4178 ; cbar.c   1464 /* Remarks:                                                                      
                                                                                                                             
                                                                                                                    */
                       4179 ; cbar.c   1465 /* Returns:                                                                      
                                                                                                                             
                                                                                                                    */
                       4180 ; cbar.c   1466 /* Updates:                                                                      
                                                                                                                             
                                                                                                                    */
                       4181 ; cbar.c   1467 /**************************************************************************/
                       4182 ; cbar.c   1468 int ValidateCBPattern( UC system, UI *pattern)
                       4183 ; cbar.c   1469 {
                       4184         ALIGN   1
                       4186         PUBLIC  _ValidateCBPattern
00100C                 4187 _ValidateCBPattern:
                       4197 ; cbar.c   1470         if ( system < NTSC)
00100C 910402          4199         CMP.B   R0L,#02H
00100F F011            4200         BCC     _187
                       4201 ; cbar.c   1471         {
                       4202 ; cbar.c   1472                 switch ( *pattern)
001011 866C42          4204         MOV.B   ES,R3L
001014 8A02            4205         MOV.W   R0,[R2]
001016 99040000        4207         CMP.W   R0,#00H
00101A F307            4208         BEQ     _186
00101C 99040002        4209         CMP.W   R0,#02H
001020 F304            4210         BEQ     _186
001022 FE00            4211         BR      _184
                       4212 ; cbar.c   1473                 {
                       4213 ; cbar.c   1474                         case SMPTECBar:
                       4214 ; cbar.c   1475                         case FCCCBar:
                       4215 ; cbar.c   1476                                 *pattern = EBUCBar;
                       4216 ; cbar.c   1477                                 break;
                       4217 ; cbar.c   1478 
                       4218 ; cbar.c   1479                         default:
001024                 4220 _184:
                       4221 ; cbar.c   1480                                 return( OK);
001024 9908FFFF        4223         MOV.W   R0,#0FFFFH
001028 D680            4224         RET
00102A                 4226 _186:
00102A 866C42          4230         MOV.B   ES,R3L
00102D BA21            4231         MOV.W   [R2],#01H
                       4232 ; cbar.c   1481                 }
                       4233 ; cbar.c   1482         }
00102F FE1C            4235         BR      _194
00102F FE1C00          4235         BR      _194
001032                 4236 _187:
                       4239 ; cbar.c   1483         else
                       4240 ; cbar.c   1484         {
                       4241 ; cbar.c   1485                 switch ( *pattern)
001032 866C42          4243         MOV.B   ES,R3L
001035 8A02            4244         MOV.W   R0,[R2]
001037 99040001        4245         CMP.W   R0,#01H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  61

ADDR   CODE            LINE SOURCELINE
00103B F313            4246         BEQ     _192
00103D 99040005        4247         CMP.W   R0,#05H
001041 F310            4248         BEQ     _192
001043 99040006        4249         CMP.W   R0,#06H
001047 F30D            4250         BEQ     _192
001049 99040009        4251         CMP.W   R0,#09H
00104D F302            4252         BEQ     _188
00104F FE06            4253         BR      _189
                       4254 ; cbar.c   1486                 {
                       4255 ; cbar.c   1487                         case EBUCBar:
                       4256 ; cbar.c   1488                         case CBarGrey75:
                       4257 ; cbar.c   1489                         case CBarRed75:
                       4258 ; cbar.c   1490                                 *pattern = SMPTECBar;
                       4259 ; cbar.c   1491                                 break;
                       4260 ; cbar.c   1492 
                       4261 ; cbar.c   1493                         case CCIR18:
001052                 4263 _188:
                       4264 ; cbar.c   1494                                 *pattern = Multiburst;
001052 866C42          4266         MOV.B   ES,R3L
001055 9A280008        4267         MOV.W   [R2],#08H
                       4268 ; cbar.c   1495                                 break;
001059 FE07            4270         BR      _194
                       4271 ; cbar.c   1496 
                       4272 ; cbar.c   1497                         default:
00105C                 4274 _189:
                       4275 ; cbar.c   1498                                 return( OK);
00105C 9908FFFF        4277         MOV.W   R0,#0FFFFH
001060 D680            4278         RET
001062                 4280 _192:
001062 866C42          4284         MOV.B   ES,R3L
001065 BA20            4285         MOV.W   [R2],#00H
                       4286 ; cbar.c   1499                 }
                       4287 ; cbar.c   1500         }
001068                 4289 _194:
                       4290 ; cbar.c   1501 
                       4291 ; cbar.c   1502         return( FAIL);
001068 B900            4293         MOV.W   R0,#00H
                       4294 ; cbar.c   1503 }
00106A                 4296 _196:
00106A D680            4297         RET
000122                 4305         DSEG AT 0122H
                       4306         ALIGN   1
000122                 4307 _TablePtr:      DS      4
   |  RESERVED             
000125
000002                 4309         RSEG    CBAR_CLR_FA
                       4310         ALIGN   1
000002                 4311 _newTablePtr:   DS      4
   |  RESERVED             
000005
                       4312         EXTRN   HCODE(__UMODL)
000006 RESERVED        4314 _SoundEnable:   DS      1
000006
00012C                 4316         DSEG AT 012CH
00012C RESERVED        4317 _SoundCnt:      DS      1
00012C
                       4322         EXTRN   HCODE(_TransmitIIC)
06A000                 4325         HSEG AT 06A000H
                       4326         PUBLIC  _StatusPort
                       4327         ALIGN   1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  62

ADDR   CODE            LINE SOURCELINE
06A000                 4328 _StatusPort:    DS      2
   |  RESERVED             
06A001
000128                 4330         DSEG AT 0128H
000128 RESERVED        4331 _FrameCnt:      DS      1
000128
06A004                 4334         HSEG AT 06A004H
                       4335         PUBLIC  _HOffsetPort
                       4336         ALIGN   1
06A004                 4337 _HOffsetPort:   DS      2
   |  RESERVED             
06A005
                       4340         EXTRN   HCODE(_tvp6k_system)
000007                 4343         RSEG    CBAR_CLR_FA
                       4344         PUBLIC  _CBSetup
000007 RESERVED        4345         ALIGN   1
000007
000008                 4346 _CBSetup:       DS      12
   |  RESERVED             
000013
00012B                 4348         DSEG AT 012BH
00012B RESERVED        4349 _SoundFrameCnt: DS      1
00012B
                       4352         EXTRN   HCODE(_LEDSet)
00012D                 4354         DSEG AT 012DH
00012D RESERVED        4355 _SoundPtr:      DS      1
00012D
000014                 4357         RSEG    CBAR_CLR_FA
000014 RESERVED        4358 _Blanking:      DS      1
000014
044000                 4361         HSEG AT 044000H
                       4362         PUBLIC  _SRAMVideoPort
                       4363         ALIGN   1
044000                 4364 _SRAMVideoPort: DS      2
   |  RESERVED             
044001
04A000                 4368         HCSEG AT 04A000H
                       4369         PUBLIC  _SoundSignalArray
                       4370         ALIGN   1
                       4370         ALIGN   1
04A000                 4371 _SoundSignalArray:      DS      9216
   |  RESERVED             
04C3FF
                       4374         EXTRN   HCODE(_Write_AD8402)
                       4376         EXTRN   HDATA(_SettingsPtr)
000015                 4379         RSEG    CBAR_CLR_FA
                       4380         PUBLIC  _PhaseOffset
000015 RESERVED        4381         ALIGN   1
000015
000016                 4382 _PhaseOffset:   DS      2
   |  RESERVED             
000017
                       4384         EXTRN   HDATA(_GenlockSetup)
                       4386         EXTRN   HDATA(_Settings)
000126                 4388         DSEG AT 0126H
                       4389         ALIGN   1
000126                 4390 _LineCnt:       DS      2
   |  RESERVED             
000127
00012A                 4392         DSEG AT 012AH
00012A RESERVED        4393 _SyncLinePtr:   DS      1
00012A
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  63

ADDR   CODE            LINE SOURCELINE
                       4396         EXTRN   HCODE(_NV_Store)
                       4398         EXTRN   HDATA(_Calibration)
000129                 4400         DSEG AT 0129H
000129 RESERVED        4401 _SyncLineCnt:   DS      1
000129
050000                 4405         HCSEG AT 050000H
                       4406         PUBLIC  _VideoSignalArray
                       4407         ALIGN   1
                       4407         ALIGN   1
050000                 4408 _VideoSignalArray:      DS      196608
   |  RESERVED             
07FFFF
00012E                 4410         DSEG AT 012EH
00012E RESERVED        4411 _SoundPtrMax:   DS      1
00012E
                       4412         EXTRN   IDATA(__lc_bs)
000120                 4414         DSEG AT 0120H
                       4415         ALIGN   1
000120                 4416 _Status:        DS      2
   |  RESERVED             
000121
                       4417         EXTRN   HCODE(__SDIVL)
040000                 4420         HSEG AT 040000H
                       4421         PUBLIC  _SRAMSoundPort
                       4422         ALIGN   1
040000                 4423 _SRAMSoundPort: DS      2
   |  RESERVED             
040001
000018                 4425         RSEG    CBAR_CLR_FA
000018 RESERVED        4426 _NewPattern:    DS      1
000018
000000                 4429 CBAR_CLR_NE@DS  SEGMENT DATA JOIN CLEAR
000000                 4430         RSEG    CBAR_CLR_NE@DS
                       4431         PUBLIC  _TimeTickCounter
                       4432         ALIGN   1
000000                 4433 _TimeTickCounter:       DS      2
   |  RESERVED             
000001
                       4434         EXTRN   HCODE(__UDIVL)
06A008                 4437         HSEG AT 06A008H
                       4438         PUBLIC  _ChromaGainPort
                       4439         ALIGN   1
06A008                 4440 _ChromaGainPort:        DS      2
   |  RESERVED             
06A009
000002                 4443         RSEG    CBAR_CLR_NE@DS
                       4444         PUBLIC  _LineOffset
                       4445         ALIGN   1
000002                 4446 _LineOffset:    DS      2
   |  RESERVED             
000003
                       4447         EXTRN   DATA(__lc_ub_xvwbuffer)
                       4448         EXTRN   DATA(__lc_ue_xvwbuffer)
                       4449         CALLS   'WriteCBGain', 'Write_AD8402'
                       4450         CALLS   'CBDefaults', 'NV_Store'
                       4451         CALLS   'CBUpdate', 'SetCBSystem'
                       4452         CALLS   'CBUpdate', 'SetCBDelay'
                       4453         CALLS   'CBUpdate', 'SetCBScHPhase'
                       4454         CALLS   'CBUpdate', 'SetCBEmbAudioSignal'
                       4455         CALLS   'SetCBPattern', 'ValidateCBPattern'
                       4456         CALLS   'SetCBPattern', 'NV_Store'
                       4457         CALLS   'SetCBPattern', 'SRAMVideoLoad'
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  64

ADDR   CODE            LINE SOURCELINE
                       4458         CALLS   'SetCBSystem', 'NV_Store'
                       4459         CALLS   'SetCBSystem', 'WriteCBGain'
                       4460         CALLS   'SetCBSystem', 'WriteCBChromaGain'
                       4461         CALLS   'SetCBSystem', 'WriteCBGain'
                       4462         CALLS   'SetCBSystem', 'WriteCBChromaGain'
                       4463         CALLS   'SetCBSystem', 'tvp6k_system'
                       4464         CALLS   'SetCBSystem', 'ValidateCBPattern'
                       4465         CALLS   'SetCBSystem', 'SetCBPattern'
                       4466         CALLS   'SetCBSystem', 'SetCBScHPhase'
                       4467         CALLS   'SetCBSystem', 'LEDSet'
                       4468         CALLS   'SetCBDelay', 'NV_Store'
                       4469         CALLS   'SetCBScHPhase', 'NV_Store'
                       4470         CALLS   'SetCBScHPhase', 'TransmitIIC'
                       4471         CALLS   'SetCBEmbAudioSignal', 'NV_Store'
                       4472         CALLS   'SetCBEmbAudioSignal', 'SRAMSoundLoad'
