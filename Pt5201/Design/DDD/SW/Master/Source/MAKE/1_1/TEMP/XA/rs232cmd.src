; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -I..\..\rtxcdef\xa
;          -I..\..\rtxc\xa\include -I..\..\code\include\1_0 -I..\..\app_spec\xa
;          -Ml -O2 -s
$CASE
$NOZPAGE
	NAME	RS232CMD
	SYMB	TOOL, "XA C compiler v2.0", 1
	SYMB	TYPE, 256, "bit", 'g', 0, 1
	SYMB	FILE, "..\\..\\code\\interp\\1_1\\rs232cmd.c"
; rs232cmd.c    1	/* MODULE:                                                                  */
; rs232cmd.c    2	/*   r232cmd.c - RS232 remote commands.                            			 */
; rs232cmd.c    3	/****************************************************************************/
; rs232cmd.c    4	/* FUNCTIONS:                                                               */
; rs232cmd.c    5	/*                                                                          */
; rs232cmd.c    6	/* TASKS:                                                                   */
; rs232cmd.c    7	/*                                                                          */
; rs232cmd.c    8	/* NOTES:                                                                   */
; rs232cmd.c    9	/*                                                                          */
; rs232cmd.c   10	/****************************************************************************/
; rs232cmd.c   11	/*
; rs232cmd.c   12	 *   PTV software for PT5201
; rs232cmd.c   13	 *   Copyright (c) 
; rs232cmd.c   14	 *   ProTeleVision Technologies A/S.
; rs232cmd.c   15	 *   ALL RIGHTS RESERVED
; rs232cmd.c   16	*/
; rs232cmd.c   17	/****************************************************************************/
; rs232cmd.c   18	
; rs232cmd.c   19	/****************************************************************************/
; rs232cmd.c   20	/* Include files:							  													 */
; rs232cmd.c   21	
; rs232cmd.c   22	#include <string.h>
	SYMB	FILE, "c:\\cxa\\include\\string.h"
	SYMB	TYPE, 257, "size_t", 'T', #18
	SYMB	ENDF
; rs232cmd.c   23	#include <ctype.h>
	SYMB	FILE, "c:\\cxa\\include\\ctype.h"
	SYMB	ENDF
; rs232cmd.c   24	#include <stdio.h>
	SYMB	FILE, "c:\\cxa\\include\\stdio.h"
	SYMB	FILE, "c:\\cxa\\include\\stdarg.h"
	SYMB	ENDF
	SYMB	TYPE, 258, 'n', #2, 130
	SYMB	TYPE, 259, 'P', #258
	SYMB	TYPE, 260, "_iobuf", 'S', 14,\
		 "_ptr", #259, 0,\
		 "_cnt", #16, 4,\
		 "_base", #259, 6,\
		 "_flag", #2, 10,\
		 "_file", #2, 11,\
		 "_bufsiz", #16, 12
	SYMB	TYPE, 261, "FILE", 'T', #260
	SYMB	TYPE, 262, 'n', #1, 130
	SYMB	TYPE, 263, 'P', #262
	SYMB	TYPE, 264, 'Z', #263, 0
	SYMB	TYPE, 266, "va_list", 'T', #264
	SYMB	TYPE, 267, "fpos_t", 'T', #7
	SYMB	ENDF
; rs232cmd.c   25	#include <stdlib.h>
	SYMB	FILE, "c:\\cxa\\include\\stdlib.h"
	SYMB	FILE, "c:\\cxa\\include\\limits.h"
	SYMB	ENDF
	SYMB	TYPE, 268, 'S', 4,\
		 "quot", #16, 0,\
		 "rem", #16, 2
	SYMB	TYPE, 269, "div_t", 'T', #268
	SYMB	TYPE, 270, 'S', 8,\
		 "quot", #6, 0,\
		 "rem", #6, 4
	SYMB	TYPE, 271, "ldiv_t", 'T', #270
	SYMB	TYPE, 272, "wchar_t", 'T', #5
	SYMB	ENDF
; rs232cmd.c   26	#include <math.h>
	SYMB	FILE, "c:\\cxa\\include\\math.h"
	SYMB	ENDF
; rs232cmd.c   27	
; rs232cmd.c   28	#include "config.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\config.h"
	SYMB	ENDF
; rs232cmd.c   29	#include "define.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\define.h"
	SYMB	ENDF
; rs232cmd.c   30	#include "rtxcobj.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\rtxcobj.h"
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\rtxcapi.h"
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\typedef.h"
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 273, "KOBJNUM", 'T', #3
	SYMB	TYPE, 274, "TASK", 'T', #2
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\rtxstruc.h"
	SYMB	FILE, "..\\..\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 275, "KSNUM", 'T', #3
	SYMB	TYPE, 276, "PRIORITY", 'T', #274
	SYMB	TYPE, 277, "TSTATE", 'T', #5
	SYMB	TYPE, 278, "TSLICE", 'T', #3
	SYMB	TYPE, 280, 'n', #279, 130
	SYMB	TYPE, 281, 'P', #280
	SYMB	TYPE, 283, 'n', #282, 130
	SYMB	TYPE, 284, 'P', #283
	SYMB	TYPE, 285, 'n', #275, 130
	SYMB	TYPE, 286, 'P', #285
	SYMB	TYPE, 287, 'X', 12, #1, 30, 0
	SYMB	TYPE, 288, 'n', #287, 129
	SYMB	TYPE, 289, 'P', #288
	SYMB	TYPE, 290, "frame", 'S', 24,\
		 "es", #3, 0,\
		 "cs", #3, 1,\
		 "ssel", #3, 2,\
		 "ds", #3, 3,\
		 "pksnum", #286, 4,\
		 "R2", #18, 8,\
		 "R3", #18, 10,\
		 "R4", #18, 12,\
		 "R5", #18, 14,\
		 "R6", #18, 16,\
		 "psw", #18, 18,\
		 "pc", #289, 20
	SYMB	TYPE, 291, 'n', #290, 130
	SYMB	TYPE, 292, 'P', #291
	SYMB	TYPE, 293, 'X', 12, #1, 30, 0
	SYMB	TYPE, 294, 'n', #293, 129
	SYMB	TYPE, 295, 'P', #294
	SYMB	TYPE, 279, "tcb", 'S', 36,\
		 "flink", #281, 0,\
		 "blink", #281, 4,\
		 "pclkblk", #284, 8,\
		 "task", #274, 12,\
		 "priority", #276, 13,\
		 "sp", #292, 14,\
		 "status", #277, 18,\
		 "pc_t0", #295, 20,\
		 "stackbase", #259, 24,\
		 "stacksize", #257, 28,\
		 "tslice", #278, 30,\
		 "newslice", #278, 31,\
		 "arg", #263, 32
	SYMB	TYPE, 296, "TCB", 'T', #279
	SYMB	TYPE, 297, "SEMA", 'T', #273
	SYMB	TYPE, 298, "MAP", 'T', #273
	SYMB	TYPE, 300, 'n', #299, 130
	SYMB	TYPE, 301, 'P', #300
	SYMB	TYPE, 299, "rtxcmsg", 'S', 8,\
		 "link", #301, 0,\
		 "task", #274, 4,\
		 "priority", #276, 5,\
		 "sema", #297, 6
	SYMB	TYPE, 302, "RTXCMSG", 'T', #299
	SYMB	TYPE, 303, "TICKS", 'T', #16
	SYMB	TYPE, 304, 'N',\
		 "DELAY_OBJ", 0,\
		 "SEMAPHORE_OBJ", 1,\
		 "PARTITION_OBJ", 2,\
		 "QUEUE_OBJ", 3,\
		 "RESOURCE_OBJ", 4,\
		 "MAILBOX_OBJ", 5,\
		 "TIMER_OBJ", 6
	SYMB	TYPE, 305, "OBJTYPE", 'T', #304
	SYMB	TYPE, 282, "clkblk", 'S', 18,\
		 "flink", #284, 0,\
		 "blink", #284, 4,\
		 "remain", #303, 8,\
		 "recycle", #303, 10,\
		 "task", #274, 12,\
		 "state", #2, 13,\
		 "objtype", #305, 14,\
		 "objid", #273, 16
	SYMB	TYPE, 306, 'N',\
		 "PRIORITY_INVERSION_OFF", 0,\
		 "PRIORITY_INVERSION_ON", 1
	SYMB	TYPE, 307, "RESATTR", 'T', #306
	SYMB	ENDF
	SYMB	TYPE, 308, 'N',\
		 "RC_GOOD", 0,\
		 "RC_WAIT_CONFLICT", 1,\
		 "RC_NO_TIMERS", 2,\
		 "RC_TIMER_INACTIVE", 3,\
		 "RC_TIMER_ILLEGAL", 4,\
		 "RC_TIMEOUT", 5,\
		 "RC_QUEUE_FULL", 6,\
		 "RC_QUEUE_EMPTY", 7,\
		 "RC_ILLEGAL_QUEUE_SIZE", 8,\
		 "RC_BUSY", 9,\
		 "RC_NESTED", 10,\
		 "RC_ILLEGAL_TASK", 11,\
		 "RC_ACTIVE_TASK", 12,\
		 "RC_NO_YIELD", 13,\
		 "RC_MISSED_EVENT", 14
	SYMB	TYPE, 309, "KSRC", 'T', #308
	SYMB	TYPE, 310, "SSTATE", 'T', #274
	SYMB	TYPE, 311, "MBOX", 'T', #273
	SYMB	TYPE, 312, "QUEUE", 'T', #273
	SYMB	TYPE, 313, 'N',\
		 "QNE", 0,\
		 "QNF", 1,\
		 "QF", 2,\
		 "QE", 3
	SYMB	TYPE, 314, "QCOND", 'T', #313
	SYMB	TYPE, 315, "RESOURCE", 'T', #273
	SYMB	TYPE, 316, "CLKBLK", 'T', #282
	SYMB	TYPE, 317, "time_t", 'T', #6
	SYMB	TYPE, 318, "FRAME", 'T', #290
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\ctask.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\csema.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cres.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cqueue.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cpart.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cmbox.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\rtxcdef\\xa\\cclock.h"
	SYMB	ENDF
	SYMB	TYPE, 320, 'n', #319, 130
	SYMB	TYPE, 321, 'P', #320
	SYMB	TYPE, 319, 'X', 12, #1, 30, 2, #321, #259
	SYMB	TYPE, 323, 'n', #322, 129
	SYMB	TYPE, 324, 'P', #323
	SYMB	TYPE, 325, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 326, 'n', #325, 129
	SYMB	TYPE, 327, 'P', #326
	SYMB	TYPE, 328, 'n', #6, 130
	SYMB	TYPE, 329, 'P', #328
	SYMB	TYPE, 328, 'X', 12, #16, 30, 2, #321, #329
	SYMB	TYPE, 331, 'n', #330, 129
	SYMB	TYPE, 332, 'P', #331
	SYMB	TYPE, 333, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 334, 'n', #333, 129
	SYMB	TYPE, 335, 'P', #334
	SYMB	TYPE, 336, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 337, 'n', #336, 129
	SYMB	TYPE, 338, 'P', #337
	SYMB	TYPE, 339, 'X', 12, #16, 30, 1, #321
	SYMB	TYPE, 340, 'n', #339, 129
	SYMB	TYPE, 341, 'P', #340
	SYMB	TYPE, 319, "TEvent", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TEvent", #324, 2,\
		 "_TEvent", #327, 6,\
		 "Wait", #332, 10,\
		 "Set", #335, 14,\
		 "Clear", #338, 18,\
		 "IsSet", #341, 22,\
		 "ID", #297, 26,\
		 "Name", #259, 28
	SYMB	TYPE, 342, "TEvent", 'T', #319
	SYMB	TYPE, 344, 'n', #343, 130
	SYMB	TYPE, 345, 'P', #344
	SYMB	TYPE, 343, 'X', 12, #1, 30, 1, #345
	SYMB	TYPE, 347, 'n', #346, 129
	SYMB	TYPE, 348, 'P', #347
	SYMB	TYPE, 349, 'X', 12, #1, 30, 1, #345
	SYMB	TYPE, 350, 'n', #349, 129
	SYMB	TYPE, 351, 'P', #350
	SYMB	TYPE, 352, 'n', #342, 130
	SYMB	TYPE, 353, 'P', #352
	SYMB	TYPE, 352, 'X', 12, #16, 30, 2, #345, #353
	SYMB	TYPE, 355, 'n', #354, 129
	SYMB	TYPE, 356, 'P', #355
	SYMB	TYPE, 357, 'X', 12, #1, 30, 2, #345, #353
	SYMB	TYPE, 358, 'n', #357, 129
	SYMB	TYPE, 359, 'P', #358
	SYMB	TYPE, 360, 'X', 12, #16, 30, 2, #345, #353
	SYMB	TYPE, 361, 'n', #360, 129
	SYMB	TYPE, 362, 'P', #361
	SYMB	TYPE, 363, 'X', 12, #353, 30, 2, #345, #329
	SYMB	TYPE, 364, 'n', #363, 129
	SYMB	TYPE, 365, 'P', #364
	SYMB	TYPE, 366, 'Z', #2, 95
	SYMB	TYPE, 343, "TEventList", 'S', 122,\
		 "ObjectID", #16, 0,\
		 "TEventList", #348, 2,\
		 "_TEventList", #351, 6,\
		 "Append", #356, 10,\
		 "Clear", #359, 14,\
		 "InList", #362, 18,\
		 "Wait", #365, 22,\
		 "Align", #366, 26
	SYMB	TYPE, 368, "TEventList", 'T', #343
	SYMB	TYPE, 370, 'n', #369, 130
	SYMB	TYPE, 371, 'P', #370
	SYMB	TYPE, 369, 'X', 12, #1, 30, 2, #371, #259
	SYMB	TYPE, 373, 'n', #372, 129
	SYMB	TYPE, 374, 'P', #373
	SYMB	TYPE, 375, 'X', 12, #1, 30, 1, #371
	SYMB	TYPE, 376, 'n', #375, 129
	SYMB	TYPE, 377, 'P', #376
	SYMB	TYPE, 378, 'X', 12, #1, 30, 1, #371
	SYMB	TYPE, 379, 'n', #378, 129
	SYMB	TYPE, 380, 'P', #379
	SYMB	TYPE, 381, 'X', 12, #1, 30, 1, #371
	SYMB	TYPE, 382, 'n', #381, 129
	SYMB	TYPE, 383, 'P', #382
	SYMB	TYPE, 384, 'X', 12, #16, 30, 1, #371
	SYMB	TYPE, 385, 'n', #384, 129
	SYMB	TYPE, 386, 'P', #385
	SYMB	TYPE, 369, "TResource", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TResource", #374, 2,\
		 "_TResource", #377, 6,\
		 "Lock", #380, 10,\
		 "Unlock", #383, 14,\
		 "Owner", #386, 18,\
		 "ID", #315, 22,\
		 "Name", #259, 24
	SYMB	TYPE, 387, "TResource", 'T', #369
	SYMB	TYPE, 388, 'X', 12, #1, 30, 0
	SYMB	TYPE, 389, 'n', #388, 129
	SYMB	TYPE, 390, 'P', #389
	SYMB	TYPE, 392, 'n', #391, 130
	SYMB	TYPE, 393, 'P', #392
	SYMB	TYPE, 388, 'X', 12, #1, 30, 3, #393, #16, #390
	SYMB	TYPE, 395, 'n', #394, 129
	SYMB	TYPE, 396, 'P', #395
	SYMB	TYPE, 397, 'X', 12, #1, 30, 1, #393
	SYMB	TYPE, 398, 'n', #397, 129
	SYMB	TYPE, 399, 'P', #398
	SYMB	TYPE, 400, 'X', 12, #1, 30, 1, #393
	SYMB	TYPE, 401, 'n', #400, 129
	SYMB	TYPE, 402, 'P', #401
	SYMB	TYPE, 403, 'X', 12, #1, 30, 2, #393, #16
	SYMB	TYPE, 404, 'n', #403, 129
	SYMB	TYPE, 405, 'P', #404
	SYMB	TYPE, 406, 'X', 12, #1, 30, 1, #393
	SYMB	TYPE, 407, 'n', #406, 129
	SYMB	TYPE, 408, 'P', #407
	SYMB	TYPE, 409, 'X', 12, #16, 30, 1, #393
	SYMB	TYPE, 410, 'n', #409, 129
	SYMB	TYPE, 411, 'P', #410
	SYMB	TYPE, 412, 'X', 12, #1, 30, 2, #393, #16
	SYMB	TYPE, 413, 'n', #412, 129
	SYMB	TYPE, 414, 'P', #413
	SYMB	TYPE, 391, "TThread", 'S', 36,\
		 "ObjectID", #16, 0,\
		 "TThread", #396, 2,\
		 "Execute", #399, 6,\
		 "Terminate", #402, 10,\
		 "Suspend", #405, 14,\
		 "Resume", #408, 18,\
		 "GetPriority", #411, 22,\
		 "SetPriority", #414, 26,\
		 "ID", #274, 30,\
		 "Status", #2, 31,\
		 "Stack", #259, 32
	SYMB	TYPE, 415, "TThread", 'T', #391
	SYMB	TYPE, 417, 'n', #416, 130
	SYMB	TYPE, 418, 'P', #417
	SYMB	TYPE, 416, 'X', 12, #1, 30, 1, #418
	SYMB	TYPE, 420, 'n', #419, 129
	SYMB	TYPE, 421, 'P', #420
	SYMB	TYPE, 422, 'X', 12, #1, 30, 1, #418
	SYMB	TYPE, 423, 'n', #422, 129
	SYMB	TYPE, 424, 'P', #423
	SYMB	TYPE, 425, 'X', 12, #1, 30, 2, #418, #16
	SYMB	TYPE, 426, 'n', #425, 129
	SYMB	TYPE, 427, 'P', #426
	SYMB	TYPE, 428, 'X', 12, #16, 30, 1, #418
	SYMB	TYPE, 429, 'n', #428, 129
	SYMB	TYPE, 430, 'P', #429
	SYMB	TYPE, 431, 'X', 12, #1, 30, 2, #418, #16
	SYMB	TYPE, 432, 'n', #431, 129
	SYMB	TYPE, 433, 'P', #432
	SYMB	TYPE, 434, 'n', #316, 130
	SYMB	TYPE, 435, 'P', #434
	SYMB	TYPE, 416, "TTimer", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TTimer", #421, 2,\
		 "_TTimer", #424, 6,\
		 "SetPeriod", #427, 10,\
		 "GetPeriod", #430, 14,\
		 "Tick", #433, 18,\
		 "TimeOut", #353, 22,\
		 "Period", #4, 26,\
		 "Handle", #435, 28
	SYMB	TYPE, 436, "TTimer", 'T', #416
	SYMB	TYPE, 438, 'n', #437, 130
	SYMB	TYPE, 439, 'P', #438
	SYMB	TYPE, 437, 'X', 12, #1, 30, 3, #439, #16, #16
	SYMB	TYPE, 441, 'n', #440, 129
	SYMB	TYPE, 442, 'P', #441
	SYMB	TYPE, 443, 'X', 12, #1, 30, 1, #439
	SYMB	TYPE, 444, 'n', #443, 129
	SYMB	TYPE, 445, 'P', #444
	SYMB	TYPE, 446, 'X', 12, #259, 30, 2, #439, #263
	SYMB	TYPE, 447, 'n', #446, 129
	SYMB	TYPE, 448, 'P', #447
	SYMB	TYPE, 449, 'X', 12, #1, 30, 2, #439, #263
	SYMB	TYPE, 450, 'n', #449, 129
	SYMB	TYPE, 451, 'P', #450
	SYMB	TYPE, 437, "TStream", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TStream", #442, 2,\
		 "_TStream", #445, 6,\
		 "Get", #448, 10,\
		 "Put", #451, 14,\
		 "ID", #312, 18,\
		 "Width", #16, 20,\
		 "Depth", #16, 22,\
		 "Handle", #259, 24
	SYMB	TYPE, 452, "TStream", 'T', #437
	SYMB	ENDF
; rs232cmd.c   31	#include "rs232par.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\rs232par.h"
	SYMB	ENDF
; rs232cmd.c   32	#include "rs232err.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\rs232err.h"
	SYMB	ENDF
; rs232cmd.c   33	#include "rs232cmd.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\rs232cmd.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\define.h"
	SYMB	ENDF
	SYMB	ENDF
; rs232cmd.c   34	#include "util.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\util.h"
	SYMB	ENDF
; rs232cmd.c   35	#include "rs232.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\rs232.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\define.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_0\\rtxcobj.h"
	SYMB	ENDF
	SYMB	ENDF
; rs232cmd.c   36	#include "i2c_drv.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\i2c_drv.h"
	SYMB	ENDF
; rs232cmd.c   37	#include "sio0drv.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\sio0drv.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\define.h"
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_0\\rtxcobj.h"
	SYMB	ENDF
	SYMB	ENDF
; rs232cmd.c   38	#include "instru.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\instru.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\nv_drv.h"
	SYMB	TYPE, 453, "NvPointer", 'T', #18
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_0\\genlock.h"
	SYMB	TYPE, 454, 'S', 6,\
		 "System", #3, 0,\
		 "Delay", #7, 2
	SYMB	TYPE, 455, "GenlockObject", 'T', #454
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_0\\bb.h"
	SYMB	TYPE, 456, 'S', 8,\
		 "System", #3, 0,\
		 "Delay", #7, 2,\
		 "ScHPhase", #16, 6
	SYMB	TYPE, 457, "BBObject", 'T', #456
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_0\\cbar.h"
	SYMB	TYPE, 458, 'S', 12,\
		 "System", #3, 0,\
		 "Pattern", #18, 2,\
		 "Delay", #7, 4,\
		 "ScHPhase", #16, 8,\
		 "EmbAudioSignal", #3, 10
	SYMB	TYPE, 459, "CBObject", 'T', #458
	SYMB	ENDF
	SYMB	FILE, "..\\..\\code\\include\\1_0\\audio.h"
	SYMB	TYPE, 460, 'S', 14,\
		 "System", #16, 0,\
		 "Signal", #16, 2,\
		 "Level", #16, 4,\
		 "Timing", #10, 6,\
		 "Frequency", #16, 10,\
		 "Click", #16, 12
	SYMB	TYPE, 461, "AudioObject", 'T', #460
	SYMB	ENDF
	SYMB	TYPE, 462, 'S', 32,\
		 "Date", #7, 0,\
		 "DACFactDate", #7, 4,\
		 "DACUserDate", #7, 8,\
		 "DACFactValue", #18, 12,\
		 "DACUserValue", #18, 14,\
		 "HPHZeroG", #7, 16,\
		 "PhaseG", #7, 20,\
		 "HPHZeroM", #7, 24,\
		 "PhaseM", #7, 28
	SYMB	TYPE, 463, "GenlockCalibrationObject", 'T', #462
	SYMB	TYPE, 464, 'S', 20,\
		 "Date", #7, 0,\
		 "PhaseG", #7, 4,\
		 "ScHPhaseG", #18, 8,\
		 "PhaseM", #7, 10,\
		 "ScHPhaseM", #18, 14,\
		 "DACGain", #3, 16,\
		 "DACOffset", #3, 17,\
		 "DACLevel", #3, 18
	SYMB	TYPE, 465, "BBCalibrationObject", 'T', #464
	SYMB	TYPE, 466, 'S', 20,\
		 "Date", #7, 0,\
		 "PhaseG", #7, 4,\
		 "ScHPhaseG", #3, 8,\
		 "PhaseM", #7, 10,\
		 "ScHPhaseM", #3, 14,\
		 "GainG", #3, 15,\
		 "ChromaGainG", #3, 16,\
		 "GainM", #3, 17,\
		 "ChromaGainM", #3, 18
	SYMB	TYPE, 467, "CBCalibrationObject", 'T', #466
	SYMB	TYPE, 468, 'S', 6,\
		 "Date", #7, 0,\
		 "AnalogLeftChannel", #3, 4,\
		 "AnalogRightChannel", #3, 5
	SYMB	TYPE, 469, "AudioCalibrationObject", 'T', #468
	SYMB	TYPE, 470, 'Z', #457, 2
	SYMB	TYPE, 472, 'Z', #461, 1
	SYMB	TYPE, 474, 'S', 74,\
		 "ActivePreset", #16, 0,\
		 "GenlockSetup", #455, 2,\
		 "BBSetup", #470, 8,\
		 "CBSetup", #459, 32,\
		 "AudioOutput", #16, 44,\
		 "AudioSetup", #472, 46
	SYMB	TYPE, 475, "SettingsObject", 'T', #474
	SYMB	TYPE, 476, 'Z', #2, 32
	SYMB	TYPE, 478, 'Z', #2, 8
	SYMB	TYPE, 480, 'Z', #2, 12
	SYMB	TYPE, 482, 'Z', #465, 2
	SYMB	TYPE, 484, 'S', 224,\
		 "Company", #476, 0,\
		 "Type", #476, 33,\
		 "KUNumber", #478, 66,\
		 "SWRevision", #478, 75,\
		 "NC12", #480, 84,\
		 "ResetSystem", #3, 97,\
		 "ProdDate", #7, 98,\
		 "UpdateDate", #7, 102,\
		 "GenlockCalibration", #463, 106,\
		 "BBCalibration", #482, 138,\
		 "CBCalibration", #467, 198,\
		 "AudioCalibration", #469, 218
	SYMB	TYPE, 485, "CalibrationObject", 'T', #484
	SYMB	ENDF
; rs232cmd.c   39	#include "tables.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\tables.h"
	SYMB	ENDF
; rs232cmd.c   40	#include "genlock.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\genlock.h"
	SYMB	ENDF
; rs232cmd.c   41	#include "bb.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\bb.h"
	SYMB	ENDF
; rs232cmd.c   42	#include "cbar.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\cbar.h"
	SYMB	ENDF
; rs232cmd.c   43	#include "audio.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\audio.h"
	SYMB	ENDF
; rs232cmd.c   44	#include "plddrv.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\plddrv.h"
	SYMB	ENDF
; rs232cmd.c   45	#include "unitprg.h"
	SYMB	FILE, "..\\..\\code\\include\\1_0\\unitprg.h"
	SYMB	TYPE, 486, 'N',\
		 "true", -1,\
		 "false", 0
	SYMB	TYPE, 487, "bool", 'T', #486
	SYMB	ENDF
; rs232cmd.c   46	
; rs232cmd.c   47	
; rs232cmd.c   48	UC code MasterSWVersion				 	= 11;
RS232CMD_RO	SEGMENT	HCODE ROMDATA
	RSEG	RS232CMD_RO
	SYMB	IDEN, "MasterSWVersion", _MasterSWVersion, #3, 129, 0
	SYMB	ALAB, _MasterSWVersion, #3
	PUBLIC	_MasterSWVersion
_MasterSWVersion:
; rs232cmd.c   49	
; rs232cmd.c   50	char code SystemVersionTxt[] 			= "1995.0";
	DB	00BH
	SYMB	TYPE, 488, 'Z', #2, -1
	SYMB	IDEN, "SystemVersionTxt", _SystemVersionTxt, #488, 129, 0
	SYMB	ALAB, _SystemVersionTxt, #488
	PUBLIC	_SystemVersionTxt
_SystemVersionTxt:
; rs232cmd.c   51	char code PasswordText[] 				= "PASS5201";
	DB	031H,039H,039H,035H,02EH,030H,000H
	SYMB	IDEN, "PasswordText", _PasswordText, #488, 129, 0
	SYMB	ALAB, _PasswordText, #488
	PUBLIC	_PasswordText
_PasswordText:
; rs232cmd.c   52	
; rs232cmd.c   53	char code CLSCmdTxt[] 	      		= "CLS";
	DB	050H,041H,053H,053H,035H,032H,030H,031H,000H
	SYMB	IDEN, "CLSCmdTxt", _CLSCmdTxt, #488, 129, 0
	SYMB	ALAB, _CLSCmdTxt, #488
	PUBLIC	_CLSCmdTxt
_CLSCmdTxt:
; rs232cmd.c   54	char code ESECmdTxt[] 	      		= "ESE";
	DB	043H,04CH,053H,000H
	SYMB	IDEN, "ESECmdTxt", _ESECmdTxt, #488, 129, 0
	SYMB	ALAB, _ESECmdTxt, #488
	PUBLIC	_ESECmdTxt
_ESECmdTxt:
; rs232cmd.c   55	char code ESRCmdTxt[] 	      		= "ESR";
	DB	045H,053H,045H,000H
	SYMB	IDEN, "ESRCmdTxt", _ESRCmdTxt, #488, 129, 0
	SYMB	ALAB, _ESRCmdTxt, #488
	PUBLIC	_ESRCmdTxt
_ESRCmdTxt:
; rs232cmd.c   56	char code OPCCmdTxt[] 	      		= "OPC";
	DB	045H,053H,052H,000H
	SYMB	IDEN, "OPCCmdTxt", _OPCCmdTxt, #488, 129, 0
	SYMB	ALAB, _OPCCmdTxt, #488
	PUBLIC	_OPCCmdTxt
_OPCCmdTxt:
; rs232cmd.c   57	char code SRECmdTxt[] 	      		= "SRE";
	DB	04FH,050H,043H,000H
	SYMB	IDEN, "SRECmdTxt", _SRECmdTxt, #488, 129, 0
	SYMB	ALAB, _SRECmdTxt, #488
	PUBLIC	_SRECmdTxt
_SRECmdTxt:
; rs232cmd.c   58	char code STBCmdTxt[] 	      		= "STB";
	DB	053H,052H,045H,000H
	SYMB	IDEN, "STBCmdTxt", _STBCmdTxt, #488, 129, 0
	SYMB	ALAB, _STBCmdTxt, #488
	PUBLIC	_STBCmdTxt
_STBCmdTxt:
; rs232cmd.c   59	char code TSTCmdTxt[] 	      		= "TST";
	DB	053H,054H,042H,000H
	SYMB	IDEN, "TSTCmdTxt", _TSTCmdTxt, #488, 129, 0
	SYMB	ALAB, _TSTCmdTxt, #488
	PUBLIC	_TSTCmdTxt
_TSTCmdTxt:
; rs232cmd.c   60	char code WAICmdTxt[] 	      		= "WAI";
	DB	054H,053H,054H,000H
	SYMB	IDEN, "WAICmdTxt", _WAICmdTxt, #488, 129, 0
	SYMB	ALAB, _WAICmdTxt, #488
	PUBLIC	_WAICmdTxt
_WAICmdTxt:
; rs232cmd.c   61	char code RSTCmdTxt[] 	      		= "RST";
	DB	057H,041H,049H,000H
	SYMB	IDEN, "RSTCmdTxt", _RSTCmdTxt, #488, 129, 0
	SYMB	ALAB, _RSTCmdTxt, #488
	PUBLIC	_RSTCmdTxt
_RSTCmdTxt:
; rs232cmd.c   62	char code IDNCmdTxt[] 	      		= "IDN";
	DB	052H,053H,054H,000H
	SYMB	IDEN, "IDNCmdTxt", _IDNCmdTxt, #488, 129, 0
	SYMB	ALAB, _IDNCmdTxt, #488
	PUBLIC	_IDNCmdTxt
_IDNCmdTxt:
; rs232cmd.c   63	char code RCLCmdTxt[] 	      		= "RCL";
	DB	049H,044H,04EH,000H
	SYMB	IDEN, "RCLCmdTxt", _RCLCmdTxt, #488, 129, 0
	SYMB	ALAB, _RCLCmdTxt, #488
	PUBLIC	_RCLCmdTxt
_RCLCmdTxt:
; rs232cmd.c   64	char code SAVCmdTxt[] 	      		= "SAV";
	DB	052H,043H,04CH,000H
	SYMB	IDEN, "SAVCmdTxt", _SAVCmdTxt, #488, 129, 0
	SYMB	ALAB, _SAVCmdTxt, #488
	PUBLIC	_SAVCmdTxt
_SAVCmdTxt:
; rs232cmd.c   65	
; rs232cmd.c   66	char code SYSTEMCmdTxt[] 	   	  	= "SYSTEM";
	DB	053H,041H,056H,000H
	SYMB	IDEN, "SYSTEMCmdTxt", _SYSTEMCmdTxt, #488, 129, 0
	SYMB	ALAB, _SYSTEMCmdTxt, #488
	PUBLIC	_SYSTEMCmdTxt
_SYSTEMCmdTxt:
; rs232cmd.c   67	char code SYSTCmdTxt[] 		    	 	= "SYST";
	DB	053H,059H,053H,054H,045H,04DH,000H
	SYMB	IDEN, "SYSTCmdTxt", _SYSTCmdTxt, #488, 129, 0
	SYMB	ALAB, _SYSTCmdTxt, #488
	PUBLIC	_SYSTCmdTxt
_SYSTCmdTxt:
; rs232cmd.c   68	char code STATUSCmdTxt[] 			  	= "STATUS";
	DB	053H,059H,053H,054H,000H
	SYMB	IDEN, "STATUSCmdTxt", _STATUSCmdTxt, #488, 129, 0
	SYMB	ALAB, _STATUSCmdTxt, #488
	PUBLIC	_STATUSCmdTxt
_STATUSCmdTxt:
; rs232cmd.c   69	char code STATCmdTxt[] 	 			  	= "STAT";
	DB	053H,054H,041H,054H,055H,053H,000H
	SYMB	IDEN, "STATCmdTxt", _STATCmdTxt, #488, 129, 0
	SYMB	ALAB, _STATCmdTxt, #488
	PUBLIC	_STATCmdTxt
_STATCmdTxt:
; rs232cmd.c   70	char code DIAGNOSTICCmdTxt[]			= "DIAGNOSTIC";
	DB	053H,054H,041H,054H,000H
	SYMB	IDEN, "DIAGNOSTICCmdTxt", _DIAGNOSTICCmdTxt, #488, 129, 0
	SYMB	ALAB, _DIAGNOSTICCmdTxt, #488
	PUBLIC	_DIAGNOSTICCmdTxt
_DIAGNOSTICCmdTxt:
; rs232cmd.c   71	char code DIAGCmdTxt[] 	    			= "DIAG";
	DB	044H,049H,041H,047H,04EH,04FH,053H,054H,049H,043H,000H
	SYMB	IDEN, "DIAGCmdTxt", _DIAGCmdTxt, #488, 129, 0
	SYMB	ALAB, _DIAGCmdTxt, #488
	PUBLIC	_DIAGCmdTxt
_DIAGCmdTxt:
; rs232cmd.c   72	char code MONITORCmdTxt[]			  	= "MONITOR";
	DB	044H,049H,041H,047H,000H
	SYMB	IDEN, "MONITORCmdTxt", _MONITORCmdTxt, #488, 129, 0
	SYMB	ALAB, _MONITORCmdTxt, #488
	PUBLIC	_MONITORCmdTxt
_MONITORCmdTxt:
; rs232cmd.c   73	char code MONCmdTxt[] 	    			= "MON";
	DB	04DH,04FH,04EH,049H,054H,04FH,052H,000H
	SYMB	IDEN, "MONCmdTxt", _MONCmdTxt, #488, 129, 0
	SYMB	ALAB, _MONCmdTxt, #488
	PUBLIC	_MONCmdTxt
_MONCmdTxt:
; rs232cmd.c   74	char code INPUTCmdTxt[] 	 		  	= "INPUT";
	DB	04DH,04FH,04EH,000H
	SYMB	IDEN, "INPUTCmdTxt", _INPUTCmdTxt, #488, 129, 0
	SYMB	ALAB, _INPUTCmdTxt, #488
	PUBLIC	_INPUTCmdTxt
_INPUTCmdTxt:
; rs232cmd.c   75	char code INPCmdTxt[] 	 			  	= "INP";
	DB	049H,04EH,050H,055H,054H,000H
	SYMB	IDEN, "INPCmdTxt", _INPCmdTxt, #488, 129, 0
	SYMB	ALAB, _INPCmdTxt, #488
	PUBLIC	_INPCmdTxt
_INPCmdTxt:
; rs232cmd.c   76	char code OUTPUTCmdTxt[] 			  	= "OUTPUT";
	DB	049H,04EH,050H,000H
	SYMB	IDEN, "OUTPUTCmdTxt", _OUTPUTCmdTxt, #488, 129, 0
	SYMB	ALAB, _OUTPUTCmdTxt, #488
	PUBLIC	_OUTPUTCmdTxt
_OUTPUTCmdTxt:
; rs232cmd.c   77	char code OUTPCmdTxt[] 				  	= "OUTP";
	DB	04FH,055H,054H,050H,055H,054H,000H
	SYMB	IDEN, "OUTPCmdTxt", _OUTPCmdTxt, #488, 129, 0
	SYMB	ALAB, _OUTPCmdTxt, #488
	PUBLIC	_OUTPCmdTxt
_OUTPCmdTxt:
; rs232cmd.c   78	char code USERCmdTxt[]				  	= "USER";
	DB	04FH,055H,054H,050H,000H
	SYMB	IDEN, "USERCmdTxt", _USERCmdTxt, #488, 129, 0
	SYMB	ALAB, _USERCmdTxt, #488
	PUBLIC	_USERCmdTxt
_USERCmdTxt:
; rs232cmd.c   79	char code MEASURECmdTxt[]			  	= "MEASURE";
	DB	055H,053H,045H,052H,000H
	SYMB	IDEN, "MEASURECmdTxt", _MEASURECmdTxt, #488, 129, 0
	SYMB	ALAB, _MEASURECmdTxt, #488
	PUBLIC	_MEASURECmdTxt
_MEASURECmdTxt:
; rs232cmd.c   80	char code MEASCmdTxt[] 	    			= "MEAS";
	DB	04DH,045H,041H,053H,055H,052H,045H,000H
	SYMB	IDEN, "MEASCmdTxt", _MEASCmdTxt, #488, 129, 0
	SYMB	ALAB, _MEASCmdTxt, #488
	PUBLIC	_MEASCmdTxt
_MEASCmdTxt:
; rs232cmd.c   81	char code FACTORYCmdTxt[]			  	= "FACTORY";
	DB	04DH,045H,041H,053H,000H
	SYMB	IDEN, "FACTORYCmdTxt", _FACTORYCmdTxt, #488, 129, 0
	SYMB	ALAB, _FACTORYCmdTxt, #488
	PUBLIC	_FACTORYCmdTxt
_FACTORYCmdTxt:
; rs232cmd.c   82	char code FACTCmdTxt[] 	    			= "FACT";
	DB	046H,041H,043H,054H,04FH,052H,059H,000H
	SYMB	IDEN, "FACTCmdTxt", _FACTCmdTxt, #488, 129, 0
	SYMB	ALAB, _FACTCmdTxt, #488
	PUBLIC	_FACTCmdTxt
_FACTCmdTxt:
; rs232cmd.c   83	
; rs232cmd.c   84	char code ERRORCmdTxt[] 	     		= "ERROR";
	DB	046H,041H,043H,054H,000H
	SYMB	IDEN, "ERRORCmdTxt", _ERRORCmdTxt, #488, 129, 0
	SYMB	ALAB, _ERRORCmdTxt, #488
	PUBLIC	_ERRORCmdTxt
_ERRORCmdTxt:
; rs232cmd.c   85	char code ERRCmdTxt[] 		     		= "ERR";
	DB	045H,052H,052H,04FH,052H,000H
	SYMB	IDEN, "ERRCmdTxt", _ERRCmdTxt, #488, 129, 0
	SYMB	ALAB, _ERRCmdTxt, #488
	PUBLIC	_ERRCmdTxt
_ERRCmdTxt:
; rs232cmd.c   86	char code VERSIONCmdTxt[] 	    		= "VERSION";
	DB	045H,052H,052H,000H
	SYMB	IDEN, "VERSIONCmdTxt", _VERSIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _VERSIONCmdTxt, #488
	PUBLIC	_VERSIONCmdTxt
_VERSIONCmdTxt:
; rs232cmd.c   87	char code VERSCmdTxt[] 	      		= "VERS";
	DB	056H,045H,052H,053H,049H,04FH,04EH,000H
	SYMB	IDEN, "VERSCmdTxt", _VERSCmdTxt, #488, 129, 0
	SYMB	ALAB, _VERSCmdTxt, #488
	PUBLIC	_VERSCmdTxt
_VERSCmdTxt:
; rs232cmd.c   88	char code PRESETCmdTxt[] 				= "PRESET";
	DB	056H,045H,052H,053H,000H
	SYMB	IDEN, "PRESETCmdTxt", _PRESETCmdTxt, #488, 129, 0
	SYMB	ALAB, _PRESETCmdTxt, #488
	PUBLIC	_PRESETCmdTxt
_PRESETCmdTxt:
; rs232cmd.c   89	char code PRESCmdTxt[] 					= "PRES";
	DB	050H,052H,045H,053H,045H,054H,000H
	SYMB	IDEN, "PRESCmdTxt", _PRESCmdTxt, #488, 129, 0
	SYMB	ALAB, _PRESCmdTxt, #488
	PUBLIC	_PRESCmdTxt
_PRESCmdTxt:
; rs232cmd.c   90	char code EVENTLOGCmdTxt[]				= "EVENTLOG";
	DB	050H,052H,045H,053H,000H
	SYMB	IDEN, "EVENTLOGCmdTxt", _EVENTLOGCmdTxt, #488, 129, 0
	SYMB	ALAB, _EVENTLOGCmdTxt, #488
	PUBLIC	_EVENTLOGCmdTxt
_EVENTLOGCmdTxt:
; rs232cmd.c   91	char code DATECmdTxt[]					= "DATE";
	DB	045H,056H,045H,04EH,054H,04CH,04FH,047H,000H
	SYMB	IDEN, "DATECmdTxt", _DATECmdTxt, #488, 129, 0
	SYMB	ALAB, _DATECmdTxt, #488
	PUBLIC	_DATECmdTxt
_DATECmdTxt:
; rs232cmd.c   92	char code TIMECmdTxt[]					= "TIME";
	DB	044H,041H,054H,045H,000H
	SYMB	IDEN, "TIMECmdTxt", _TIMECmdTxt, #488, 129, 0
	SYMB	ALAB, _TIMECmdTxt, #488
	PUBLIC	_TIMECmdTxt
_TIMECmdTxt:
; rs232cmd.c   93	
; rs232cmd.c   94	char code RECALLCmdTxt[] 				= "RECALL";
	DB	054H,049H,04DH,045H,000H
	SYMB	IDEN, "RECALLCmdTxt", _RECALLCmdTxt, #488, 129, 0
	SYMB	ALAB, _RECALLCmdTxt, #488
	PUBLIC	_RECALLCmdTxt
_RECALLCmdTxt:
; rs232cmd.c   95	char code RECCmdTxt[] 					= "REC";
	DB	052H,045H,043H,041H,04CH,04CH,000H
	SYMB	IDEN, "RECCmdTxt", _RECCmdTxt, #488, 129, 0
	SYMB	ALAB, _RECCmdTxt, #488
	PUBLIC	_RECCmdTxt
_RECCmdTxt:
; rs232cmd.c   96	char code STORECmdTxt[] 				= "STORE";
	DB	052H,045H,043H,000H
	SYMB	IDEN, "STORECmdTxt", _STORECmdTxt, #488, 129, 0
	SYMB	ALAB, _STORECmdTxt, #488
	PUBLIC	_STORECmdTxt
_STORECmdTxt:
; rs232cmd.c   97	char code STORCmdTxt[] 					= "STOR";
	DB	053H,054H,04FH,052H,045H,000H
	SYMB	IDEN, "STORCmdTxt", _STORCmdTxt, #488, 129, 0
	SYMB	ALAB, _STORCmdTxt, #488
	PUBLIC	_STORCmdTxt
_STORCmdTxt:
; rs232cmd.c   98	char code NAMECmdTxt[] 					= "NAME";
	DB	053H,054H,04FH,052H,000H
	SYMB	IDEN, "NAMECmdTxt", _NAMECmdTxt, #488, 129, 0
	SYMB	ALAB, _NAMECmdTxt, #488
	PUBLIC	_NAMECmdTxt
_NAMECmdTxt:
; rs232cmd.c   99	char code AUTHORCmdTxt[] 				= "AUTHOR";
	DB	04EH,041H,04DH,045H,000H
	SYMB	IDEN, "AUTHORCmdTxt", _AUTHORCmdTxt, #488, 129, 0
	SYMB	ALAB, _AUTHORCmdTxt, #488
	PUBLIC	_AUTHORCmdTxt
_AUTHORCmdTxt:
; rs232cmd.c  100	char code AUTHCmdTxt[] 					= "AUTH";
	DB	041H,055H,054H,048H,04FH,052H,000H
	SYMB	IDEN, "AUTHCmdTxt", _AUTHCmdTxt, #488, 129, 0
	SYMB	ALAB, _AUTHCmdTxt, #488
	PUBLIC	_AUTHCmdTxt
_AUTHCmdTxt:
; rs232cmd.c  101	char code DOWNLOADCmdTxt[] 			= "DOWNLOAD";
	DB	041H,055H,054H,048H,000H
	SYMB	IDEN, "DOWNLOADCmdTxt", _DOWNLOADCmdTxt, #488, 129, 0
	SYMB	ALAB, _DOWNLOADCmdTxt, #488
	PUBLIC	_DOWNLOADCmdTxt
_DOWNLOADCmdTxt:
; rs232cmd.c  102	char code DOWNCmdTxt[] 					= "DOWN";
	DB	044H,04FH,057H,04EH,04CH,04FH,041H,044H,000H
	SYMB	IDEN, "DOWNCmdTxt", _DOWNCmdTxt, #488, 129, 0
	SYMB	ALAB, _DOWNCmdTxt, #488
	PUBLIC	_DOWNCmdTxt
_DOWNCmdTxt:
; rs232cmd.c  103	char code UPLOADCmdTxt[] 				= "UPLOAd";
	DB	044H,04FH,057H,04EH,000H
	SYMB	IDEN, "UPLOADCmdTxt", _UPLOADCmdTxt, #488, 129, 0
	SYMB	ALAB, _UPLOADCmdTxt, #488
	PUBLIC	_UPLOADCmdTxt
_UPLOADCmdTxt:
; rs232cmd.c  104	char code UPLCmdTxt[] 					= "UPL";
	DB	055H,050H,04CH,04FH,041H,064H,000H
	SYMB	IDEN, "UPLCmdTxt", _UPLCmdTxt, #488, 129, 0
	SYMB	ALAB, _UPLCmdTxt, #488
	PUBLIC	_UPLCmdTxt
_UPLCmdTxt:
; rs232cmd.c  105	
; rs232cmd.c  106	char code OPERATIONCmdTxt[] 			= "OPERATION";
	DB	055H,050H,04CH,000H
	SYMB	IDEN, "OPERATIONCmdTxt", _OPERATIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _OPERATIONCmdTxt, #488
	PUBLIC	_OPERATIONCmdTxt
_OPERATIONCmdTxt:
; rs232cmd.c  107	char code OPERCmdTxt[] 	    			= "OPER";
	DB	04FH,050H,045H,052H,041H,054H,049H,04FH,04EH,000H
	SYMB	IDEN, "OPERCmdTxt", _OPERCmdTxt, #488, 129, 0
	SYMB	ALAB, _OPERCmdTxt, #488
	PUBLIC	_OPERCmdTxt
_OPERCmdTxt:
; rs232cmd.c  108	char code QUESTIONABLECmdTxt[]	 	= "QUESTIONABLE";
	DB	04FH,050H,045H,052H,000H
	SYMB	IDEN, "QUESTIONABLECmdTxt", _QUESTIONABLECmdTxt, #488, 129, 0
	SYMB	ALAB, _QUESTIONABLECmdTxt, #488
	PUBLIC	_QUESTIONABLECmdTxt
_QUESTIONABLECmdTxt:
	DB	051H,055H,045H,053H,054H,049H,04FH,04EH,041H,042H,04CH,045H
; rs232cmd.c  109	char code QUESCmdTxt[]		 			= "QUES";
	DB	000H
	SYMB	IDEN, "QUESCmdTxt", _QUESCmdTxt, #488, 129, 0
	SYMB	ALAB, _QUESCmdTxt, #488
	PUBLIC	_QUESCmdTxt
_QUESCmdTxt:
; rs232cmd.c  110	
; rs232cmd.c  111	char code EVENTCmdTxt[] 				= "EVENT";
	DB	051H,055H,045H,053H,000H
	SYMB	IDEN, "EVENTCmdTxt", _EVENTCmdTxt, #488, 129, 0
	SYMB	ALAB, _EVENTCmdTxt, #488
	PUBLIC	_EVENTCmdTxt
_EVENTCmdTxt:
; rs232cmd.c  112	char code EVENCmdTxt[]					= "EVEN";
	DB	045H,056H,045H,04EH,054H,000H
	SYMB	IDEN, "EVENCmdTxt", _EVENCmdTxt, #488, 129, 0
	SYMB	ALAB, _EVENCmdTxt, #488
	PUBLIC	_EVENCmdTxt
_EVENCmdTxt:
; rs232cmd.c  113	char code CONDITIONCmdTxt[]	 		= "CONDITION";
	DB	045H,056H,045H,04EH,000H
	SYMB	IDEN, "CONDITIONCmdTxt", _CONDITIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _CONDITIONCmdTxt, #488
	PUBLIC	_CONDITIONCmdTxt
_CONDITIONCmdTxt:
; rs232cmd.c  114	char code CONDCmdTxt[] 					= "COND";
	DB	043H,04FH,04EH,044H,049H,054H,049H,04FH,04EH,000H
	SYMB	IDEN, "CONDCmdTxt", _CONDCmdTxt, #488, 129, 0
	SYMB	ALAB, _CONDCmdTxt, #488
	PUBLIC	_CONDCmdTxt
_CONDCmdTxt:
; rs232cmd.c  115	char code ENABLECmdTxt[] 				= "ENABLE";
	DB	043H,04FH,04EH,044H,000H
	SYMB	IDEN, "ENABLECmdTxt", _ENABLECmdTxt, #488, 129, 0
	SYMB	ALAB, _ENABLECmdTxt, #488
	PUBLIC	_ENABLECmdTxt
_ENABLECmdTxt:
; rs232cmd.c  116	char code ENABCmdTxt[] 					= "ENAB";
	DB	045H,04EH,041H,042H,04CH,045H,000H
	SYMB	IDEN, "ENABCmdTxt", _ENABCmdTxt, #488, 129, 0
	SYMB	ALAB, _ENABCmdTxt, #488
	PUBLIC	_ENABCmdTxt
_ENABCmdTxt:
; rs232cmd.c  117	
; rs232cmd.c  118	char code DISPLAYCmdTxt[] 				= "DISPLAY";
	DB	045H,04EH,041H,042H,000H
	SYMB	IDEN, "DISPLAYCmdTxt", _DISPLAYCmdTxt, #488, 129, 0
	SYMB	ALAB, _DISPLAYCmdTxt, #488
	PUBLIC	_DISPLAYCmdTxt
_DISPLAYCmdTxt:
; rs232cmd.c  119	char code DISPCmdTxt[] 					= "DISP";
	DB	044H,049H,053H,050H,04CH,041H,059H,000H
	SYMB	IDEN, "DISPCmdTxt", _DISPCmdTxt, #488, 129, 0
	SYMB	ALAB, _DISPCmdTxt, #488
	PUBLIC	_DISPCmdTxt
_DISPCmdTxt:
; rs232cmd.c  120	char code ERRORQUEUECmdTxt[]  		= "ERRORQUEUE";
	DB	044H,049H,053H,050H,000H
	SYMB	IDEN, "ERRORQUEUECmdTxt", _ERRORQUEUECmdTxt, #488, 129, 0
	SYMB	ALAB, _ERRORQUEUECmdTxt, #488
	PUBLIC	_ERRORQUEUECmdTxt
_ERRORQUEUECmdTxt:
; rs232cmd.c  121	char code RESETCmdTxt[] 				= "RESET";
	DB	045H,052H,052H,04FH,052H,051H,055H,045H,055H,045H,000H
	SYMB	IDEN, "RESETCmdTxt", _RESETCmdTxt, #488, 129, 0
	SYMB	ALAB, _RESETCmdTxt, #488
	PUBLIC	_RESETCmdTxt
_RESETCmdTxt:
; rs232cmd.c  122	char code RESCmdTxt[] 					= "RES";
	DB	052H,045H,053H,045H,054H,000H
	SYMB	IDEN, "RESCmdTxt", _RESCmdTxt, #488, 129, 0
	SYMB	ALAB, _RESCmdTxt, #488
	PUBLIC	_RESCmdTxt
_RESCmdTxt:
; rs232cmd.c  123	
; rs232cmd.c  124	char code DEFAULTCmdTxt[] 			 	= "DEFAULT";
	DB	052H,045H,053H,000H
	SYMB	IDEN, "DEFAULTCmdTxt", _DEFAULTCmdTxt, #488, 129, 0
	SYMB	ALAB, _DEFAULTCmdTxt, #488
	PUBLIC	_DEFAULTCmdTxt
_DEFAULTCmdTxt:
; rs232cmd.c  125	char code DEFCmdTxt[] 					= "DEF";
	DB	044H,045H,046H,041H,055H,04CH,054H,000H
	SYMB	IDEN, "DEFCmdTxt", _DEFCmdTxt, #488, 129, 0
	SYMB	ALAB, _DEFCmdTxt, #488
	PUBLIC	_DEFCmdTxt
_DEFCmdTxt:
; rs232cmd.c  126	
; rs232cmd.c  127	char code GENLOCKCmdTxt[] 				= "GENLOCK";
	DB	044H,045H,046H,000H
	SYMB	IDEN, "GENLOCKCmdTxt", _GENLOCKCmdTxt, #488, 129, 0
	SYMB	ALAB, _GENLOCKCmdTxt, #488
	PUBLIC	_GENLOCKCmdTxt
_GENLOCKCmdTxt:
; rs232cmd.c  128	char code GENLCmdTxt[]			 		= "GENL";
	DB	047H,045H,04EH,04CH,04FH,043H,04BH,000H
	SYMB	IDEN, "GENLCmdTxt", _GENLCmdTxt, #488, 129, 0
	SYMB	ALAB, _GENLCmdTxt, #488
	PUBLIC	_GENLCmdTxt
_GENLCmdTxt:
; rs232cmd.c  129	
; rs232cmd.c  130	char code DELAYCmdTxt[] 				= "DELAY";
	DB	047H,045H,04EH,04CH,000H
	SYMB	IDEN, "DELAYCmdTxt", _DELAYCmdTxt, #488, 129, 0
	SYMB	ALAB, _DELAYCmdTxt, #488
	PUBLIC	_DELAYCmdTxt
_DELAYCmdTxt:
; rs232cmd.c  131	char code DELCmdTxt[] 					= "DEL";
	DB	044H,045H,04CH,041H,059H,000H
	SYMB	IDEN, "DELCmdTxt", _DELCmdTxt, #488, 129, 0
	SYMB	ALAB, _DELCmdTxt, #488
	PUBLIC	_DELCmdTxt
_DELCmdTxt:
; rs232cmd.c  132	
; rs232cmd.c  133	char code CALIBRATECmdTxt[] 		 	= "CALIBRATE";
	DB	044H,045H,04CH,000H
	SYMB	IDEN, "CALIBRATECmdTxt", _CALIBRATECmdTxt, #488, 129, 0
	SYMB	ALAB, _CALIBRATECmdTxt, #488
	PUBLIC	_CALIBRATECmdTxt
_CALIBRATECmdTxt:
; rs232cmd.c  134	char code CALCmdTxt[] 					= "CAL";
	DB	043H,041H,04CH,049H,042H,052H,041H,054H,045H,000H
	SYMB	IDEN, "CALCmdTxt", _CALCmdTxt, #488, 129, 0
	SYMB	ALAB, _CALCmdTxt, #488
	PUBLIC	_CALCmdTxt
_CALCmdTxt:
; rs232cmd.c  135	
; rs232cmd.c  136	char code ADJUSTCmdTxt[] 				= "ADJUST";
	DB	043H,041H,04CH,000H
	SYMB	IDEN, "ADJUSTCmdTxt", _ADJUSTCmdTxt, #488, 129, 0
	SYMB	ALAB, _ADJUSTCmdTxt, #488
	PUBLIC	_ADJUSTCmdTxt
_ADJUSTCmdTxt:
; rs232cmd.c  137	char code ADJCmdTxt[] 					= "ADJ";
	DB	041H,044H,04AH,055H,053H,054H,000H
	SYMB	IDEN, "ADJCmdTxt", _ADJCmdTxt, #488, 129, 0
	SYMB	ALAB, _ADJCmdTxt, #488
	PUBLIC	_ADJCmdTxt
_ADJCmdTxt:
; rs232cmd.c  138	
; rs232cmd.c  139	char code BBCmdTxt[] 					= "BB";
	DB	041H,044H,04AH,000H
	SYMB	IDEN, "BBCmdTxt", _BBCmdTxt, #488, 129, 0
	SYMB	ALAB, _BBCmdTxt, #488
	PUBLIC	_BBCmdTxt
_BBCmdTxt:
; rs232cmd.c  140	char code CBGENERATORCmdTxt[] 		= "CBGENERATOR";
	DB	042H,042H,000H
	SYMB	IDEN, "CBGENERATORCmdTxt", _CBGENERATORCmdTxt, #488, 129, 0
	SYMB	ALAB, _CBGENERATORCmdTxt, #488
	PUBLIC	_CBGENERATORCmdTxt
_CBGENERATORCmdTxt:
; rs232cmd.c  141	char code CBGCmdTxt[] 					= "CBG";
	DB	043H,042H,047H,045H,04EH,045H,052H,041H,054H,04FH,052H,000H
	SYMB	IDEN, "CBGCmdTxt", _CBGCmdTxt, #488, 129, 0
	SYMB	ALAB, _CBGCmdTxt, #488
	PUBLIC	_CBGCmdTxt
_CBGCmdTxt:
; rs232cmd.c  142	char code AUDIOCmdTxt[] 				= "AUDIO";
	DB	043H,042H,047H,000H
	SYMB	IDEN, "AUDIOCmdTxt", _AUDIOCmdTxt, #488, 129, 0
	SYMB	ALAB, _AUDIOCmdTxt, #488
	PUBLIC	_AUDIOCmdTxt
_AUDIOCmdTxt:
; rs232cmd.c  143	char code AUDCmdTxt[] 					= "AUD";
	DB	041H,055H,044H,049H,04FH,000H
	SYMB	IDEN, "AUDCmdTxt", _AUDCmdTxt, #488, 129, 0
	SYMB	ALAB, _AUDCmdTxt, #488
	PUBLIC	_AUDCmdTxt
_AUDCmdTxt:
; rs232cmd.c  144	
; rs232cmd.c  145	char code ANALOGCmdTxt[]				= "ANALOG";
	DB	041H,055H,044H,000H
	SYMB	IDEN, "ANALOGCmdTxt", _ANALOGCmdTxt, #488, 129, 0
	SYMB	ALAB, _ANALOGCmdTxt, #488
	PUBLIC	_ANALOGCmdTxt
_ANALOGCmdTxt:
; rs232cmd.c  146	char code ANALCmdTxt[]					= "ANAL";
	DB	041H,04EH,041H,04CH,04FH,047H,000H
	SYMB	IDEN, "ANALCmdTxt", _ANALCmdTxt, #488, 129, 0
	SYMB	ALAB, _ANALCmdTxt, #488
	PUBLIC	_ANALCmdTxt
_ANALCmdTxt:
; rs232cmd.c  147	
; rs232cmd.c  148	char code PATTERNCmdTxt[] 				= "PATTERN";
	DB	041H,04EH,041H,04CH,000H
	SYMB	IDEN, "PATTERNCmdTxt", _PATTERNCmdTxt, #488, 129, 0
	SYMB	ALAB, _PATTERNCmdTxt, #488
	PUBLIC	_PATTERNCmdTxt
_PATTERNCmdTxt:
; rs232cmd.c  149	char code PATTCmdTxt[] 					= "PATT";
	DB	050H,041H,054H,054H,045H,052H,04EH,000H
	SYMB	IDEN, "PATTCmdTxt", _PATTCmdTxt, #488, 129, 0
	SYMB	ALAB, _PATTCmdTxt, #488
	PUBLIC	_PATTCmdTxt
_PATTCmdTxt:
; rs232cmd.c  150	char code EMBAUDIOCmdTxt[] 			= "EMBAUDIO";
	DB	050H,041H,054H,054H,000H
	SYMB	IDEN, "EMBAUDIOCmdTxt", _EMBAUDIOCmdTxt, #488, 129, 0
	SYMB	ALAB, _EMBAUDIOCmdTxt, #488
	PUBLIC	_EMBAUDIOCmdTxt
_EMBAUDIOCmdTxt:
; rs232cmd.c  151	char code EMBCmdTxt[] 					= "EMB";
	DB	045H,04DH,042H,041H,055H,044H,049H,04FH,000H
	SYMB	IDEN, "EMBCmdTxt", _EMBCmdTxt, #488, 129, 0
	SYMB	ALAB, _EMBCmdTxt, #488
	PUBLIC	_EMBCmdTxt
_EMBCmdTxt:
; rs232cmd.c  152	
; rs232cmd.c  153	char code AESEBUCmdTxt[]				= "AESEBU";
	DB	045H,04DH,042H,000H
	SYMB	IDEN, "AESEBUCmdTxt", _AESEBUCmdTxt, #488, 129, 0
	SYMB	ALAB, _AESEBUCmdTxt, #488
	PUBLIC	_AESEBUCmdTxt
_AESEBUCmdTxt:
; rs232cmd.c  154	char code AESCmdTxt[]					= "AES";
	DB	041H,045H,053H,045H,042H,055H,000H
	SYMB	IDEN, "AESCmdTxt", _AESCmdTxt, #488, 129, 0
	SYMB	ALAB, _AESCmdTxt, #488
	PUBLIC	_AESCmdTxt
_AESCmdTxt:
; rs232cmd.c  155	
; rs232cmd.c  156	char code SCHPHASECmdTxt[] 			= "SCHPHASE";
	DB	041H,045H,053H,000H
	SYMB	IDEN, "SCHPHASECmdTxt", _SCHPHASECmdTxt, #488, 129, 0
	SYMB	ALAB, _SCHPHASECmdTxt, #488
	PUBLIC	_SCHPHASECmdTxt
_SCHPHASECmdTxt:
; rs232cmd.c  157	char code SCHPCmdTxt[] 					= "SCHP";
	DB	053H,043H,048H,050H,048H,041H,053H,045H,000H
	SYMB	IDEN, "SCHPCmdTxt", _SCHPCmdTxt, #488, 129, 0
	SYMB	ALAB, _SCHPCmdTxt, #488
	PUBLIC	_SCHPCmdTxt
_SCHPCmdTxt:
; rs232cmd.c  158	
; rs232cmd.c  159	char code SIGNALCmdTxt[] 				= "SIGNAL";
	DB	053H,043H,048H,050H,000H
	SYMB	IDEN, "SIGNALCmdTxt", _SIGNALCmdTxt, #488, 129, 0
	SYMB	ALAB, _SIGNALCmdTxt, #488
	PUBLIC	_SIGNALCmdTxt
_SIGNALCmdTxt:
; rs232cmd.c  160	char code SIGNCmdTxt[] 					= "SIGN";
	DB	053H,049H,047H,04EH,041H,04CH,000H
	SYMB	IDEN, "SIGNCmdTxt", _SIGNCmdTxt, #488, 129, 0
	SYMB	ALAB, _SIGNCmdTxt, #488
	PUBLIC	_SIGNCmdTxt
_SIGNCmdTxt:
; rs232cmd.c  161	char code LEVELCmdTxt[] 				= "LEVEL";
	DB	053H,049H,047H,04EH,000H
	SYMB	IDEN, "LEVELCmdTxt", _LEVELCmdTxt, #488, 129, 0
	SYMB	ALAB, _LEVELCmdTxt, #488
	PUBLIC	_LEVELCmdTxt
_LEVELCmdTxt:
; rs232cmd.c  162	char code LEVCmdTxt[] 					= "LEV";
	DB	04CH,045H,056H,045H,04CH,000H
	SYMB	IDEN, "LEVCmdTxt", _LEVCmdTxt, #488, 129, 0
	SYMB	ALAB, _LEVCmdTxt, #488
	PUBLIC	_LEVCmdTxt
_LEVCmdTxt:
; rs232cmd.c  163	char code EDHINSERTCmdTxt[] 			= "EDHINSERT";
	DB	04CH,045H,056H,000H
	SYMB	IDEN, "EDHINSERTCmdTxt", _EDHINSERTCmdTxt, #488, 129, 0
	SYMB	ALAB, _EDHINSERTCmdTxt, #488
	PUBLIC	_EDHINSERTCmdTxt
_EDHINSERTCmdTxt:
; rs232cmd.c  164	char code EDHCmdTxt[] 					= "EDH";
	DB	045H,044H,048H,049H,04EH,053H,045H,052H,054H,000H
	SYMB	IDEN, "EDHCmdTxt", _EDHCmdTxt, #488, 129, 0
	SYMB	ALAB, _EDHCmdTxt, #488
	PUBLIC	_EDHCmdTxt
_EDHCmdTxt:
; rs232cmd.c  165	
; rs232cmd.c  166	char code TIMINGCmdTxt[] 				= "TIMING";
	DB	045H,044H,048H,000H
	SYMB	IDEN, "TIMINGCmdTxt", _TIMINGCmdTxt, #488, 129, 0
	SYMB	ALAB, _TIMINGCmdTxt, #488
	PUBLIC	_TIMINGCmdTxt
_TIMINGCmdTxt:
; rs232cmd.c  167	char code TIMCmdTxt[] 					= "TIM";
	DB	054H,049H,04DH,049H,04EH,047H,000H
	SYMB	IDEN, "TIMCmdTxt", _TIMCmdTxt, #488, 129, 0
	SYMB	ALAB, _TIMCmdTxt, #488
	PUBLIC	_TIMCmdTxt
_TIMCmdTxt:
; rs232cmd.c  168	
; rs232cmd.c  169	char code WORDCLOCKCmdTxt[] 			= "WORDCLOCK";
	DB	054H,049H,04DH,000H
	SYMB	IDEN, "WORDCLOCKCmdTxt", _WORDCLOCKCmdTxt, #488, 129, 0
	SYMB	ALAB, _WORDCLOCKCmdTxt, #488
	PUBLIC	_WORDCLOCKCmdTxt
_WORDCLOCKCmdTxt:
; rs232cmd.c  170	char code WORDCmdTxt[] 					= "WORD";
	DB	057H,04FH,052H,044H,043H,04CH,04FH,043H,04BH,000H
	SYMB	IDEN, "WORDCmdTxt", _WORDCmdTxt, #488, 129, 0
	SYMB	ALAB, _WORDCmdTxt, #488
	PUBLIC	_WORDCmdTxt
_WORDCmdTxt:
; rs232cmd.c  171	
; rs232cmd.c  172	char code CLICKCmdTxt[] 				= "CLICK";
	DB	057H,04FH,052H,044H,000H
	SYMB	IDEN, "CLICKCmdTxt", _CLICKCmdTxt, #488, 129, 0
	SYMB	ALAB, _CLICKCmdTxt, #488
	PUBLIC	_CLICKCmdTxt
_CLICKCmdTxt:
; rs232cmd.c  173	char code CLICCmdTxt[] 					= "CLIC";
	DB	043H,04CH,049H,043H,04BH,000H
	SYMB	IDEN, "CLICCmdTxt", _CLICCmdTxt, #488, 129, 0
	SYMB	ALAB, _CLICCmdTxt, #488
	PUBLIC	_CLICCmdTxt
_CLICCmdTxt:
; rs232cmd.c  174	
; rs232cmd.c  175	char code PASSWORDCmdTxt[] 			= "PASSWORD";
	DB	043H,04CH,049H,043H,000H
	SYMB	IDEN, "PASSWORDCmdTxt", _PASSWORDCmdTxt, #488, 129, 0
	SYMB	ALAB, _PASSWORDCmdTxt, #488
	PUBLIC	_PASSWORDCmdTxt
_PASSWORDCmdTxt:
; rs232cmd.c  176	char code PASSCmdTxt[] 					= "PASS";
	DB	050H,041H,053H,053H,057H,04FH,052H,044H,000H
	SYMB	IDEN, "PASSCmdTxt", _PASSCmdTxt, #488, 129, 0
	SYMB	ALAB, _PASSCmdTxt, #488
	PUBLIC	_PASSCmdTxt
_PASSCmdTxt:
; rs232cmd.c  177	char code V24CIRCUITCmdTxt[] 			= "V24CIRCUIT";
	DB	050H,041H,053H,053H,000H
	SYMB	IDEN, "V24CIRCUITCmdTxt", _V24CIRCUITCmdTxt, #488, 129, 0
	SYMB	ALAB, _V24CIRCUITCmdTxt, #488
	PUBLIC	_V24CIRCUITCmdTxt
_V24CIRCUITCmdTxt:
; rs232cmd.c  178	char code V24CCmdTxt[] 					= "V24C";
	DB	056H,032H,034H,043H,049H,052H,043H,055H,049H,054H,000H
	SYMB	IDEN, "V24CCmdTxt", _V24CCmdTxt, #488, 129, 0
	SYMB	ALAB, _V24CCmdTxt, #488
	PUBLIC	_V24CCmdTxt
_V24CCmdTxt:
; rs232cmd.c  179	char code CHECKSUMCmdTxt[] 	 		= "CHECKSUM";
	DB	056H,032H,034H,043H,000H
	SYMB	IDEN, "CHECKSUMCmdTxt", _CHECKSUMCmdTxt, #488, 129, 0
	SYMB	ALAB, _CHECKSUMCmdTxt, #488
	PUBLIC	_CHECKSUMCmdTxt
_CHECKSUMCmdTxt:
; rs232cmd.c  180	char code CHECCmdTxt[] 	 				= "CHEC";
	DB	043H,048H,045H,043H,04BH,053H,055H,04DH,000H
	SYMB	IDEN, "CHECCmdTxt", _CHECCmdTxt, #488, 129, 0
	SYMB	ALAB, _CHECCmdTxt, #488
	PUBLIC	_CHECCmdTxt
_CHECCmdTxt:
; rs232cmd.c  181	char code CODECmdTxt[] 	 				= "CODE";
	DB	043H,048H,045H,043H,000H
	SYMB	IDEN, "CODECmdTxt", _CODECmdTxt, #488, 129, 0
	SYMB	ALAB, _CODECmdTxt, #488
	PUBLIC	_CODECmdTxt
_CODECmdTxt:
; rs232cmd.c  182	char code RANGECmdTxt[] 		 		= "RANGE";
	DB	043H,04FH,044H,045H,000H
	SYMB	IDEN, "RANGECmdTxt", _RANGECmdTxt, #488, 129, 0
	SYMB	ALAB, _RANGECmdTxt, #488
	PUBLIC	_RANGECmdTxt
_RANGECmdTxt:
; rs232cmd.c  183	char code RANGCmdTxt[] 	 				= "RANG";
	DB	052H,041H,04EH,047H,045H,000H
	SYMB	IDEN, "RANGCmdTxt", _RANGCmdTxt, #488, 129, 0
	SYMB	ALAB, _RANGCmdTxt, #488
	PUBLIC	_RANGCmdTxt
_RANGCmdTxt:
; rs232cmd.c  184	char code COMMANDCmdTxt[] 				= "COMMAND";
	DB	052H,041H,04EH,047H,000H
	SYMB	IDEN, "COMMANDCmdTxt", _COMMANDCmdTxt, #488, 129, 0
	SYMB	ALAB, _COMMANDCmdTxt, #488
	PUBLIC	_COMMANDCmdTxt
_COMMANDCmdTxt:
; rs232cmd.c  185	char code COMMCmdTxt[] 					= "COMM";
	DB	043H,04FH,04DH,04DH,041H,04EH,044H,000H
	SYMB	IDEN, "COMMCmdTxt", _COMMCmdTxt, #488, 129, 0
	SYMB	ALAB, _COMMCmdTxt, #488
	PUBLIC	_COMMCmdTxt
_COMMCmdTxt:
; rs232cmd.c  186	char code TRANSPARENTCmdTxt[]  		= "TRANSPARENT";
	DB	043H,04FH,04DH,04DH,000H
	SYMB	IDEN, "TRANSPARENTCmdTxt", _TRANSPARENTCmdTxt, #488, 129, 0
	SYMB	ALAB, _TRANSPARENTCmdTxt, #488
	PUBLIC	_TRANSPARENTCmdTxt
_TRANSPARENTCmdTxt:
; rs232cmd.c  187	char code TRANCmdTxt[] 				 	= "TRAN";
	DB	054H,052H,041H,04EH,053H,050H,041H,052H,045H,04EH,054H,000H
	SYMB	IDEN, "TRANCmdTxt", _TRANCmdTxt, #488, 129, 0
	SYMB	ALAB, _TRANCmdTxt, #488
	PUBLIC	_TRANCmdTxt
_TRANCmdTxt:
; rs232cmd.c  188	
; rs232cmd.c  189	char code MAINBOARDCmdTxt[] 			= "MAINBOARD";
	DB	054H,052H,041H,04EH,000H
	SYMB	IDEN, "MAINBOARDCmdTxt", _MAINBOARDCmdTxt, #488, 129, 0
	SYMB	ALAB, _MAINBOARDCmdTxt, #488
	PUBLIC	_MAINBOARDCmdTxt
_MAINBOARDCmdTxt:
; rs232cmd.c  190	char code MAINCmdTxt[] 					= "MAIN";
	DB	04DH,041H,049H,04EH,042H,04FH,041H,052H,044H,000H
	SYMB	IDEN, "MAINCmdTxt", _MAINCmdTxt, #488, 129, 0
	SYMB	ALAB, _MAINCmdTxt, #488
	PUBLIC	_MAINCmdTxt
_MAINCmdTxt:
; rs232cmd.c  191	char code COMPANYCmdTxt[] 				= "COMPANY";
	DB	04DH,041H,049H,04EH,000H
	SYMB	IDEN, "COMPANYCmdTxt", _COMPANYCmdTxt, #488, 129, 0
	SYMB	ALAB, _COMPANYCmdTxt, #488
	PUBLIC	_COMPANYCmdTxt
_COMPANYCmdTxt:
; rs232cmd.c  192	char code COMPCmdTxt[] 					= "COMP";
	DB	043H,04FH,04DH,050H,041H,04EH,059H,000H
	SYMB	IDEN, "COMPCmdTxt", _COMPCmdTxt, #488, 129, 0
	SYMB	ALAB, _COMPCmdTxt, #488
	PUBLIC	_COMPCmdTxt
_COMPCmdTxt:
; rs232cmd.c  193	char code TYPECmdTxt[] 					= "TYPE";
	DB	043H,04FH,04DH,050H,000H
	SYMB	IDEN, "TYPECmdTxt", _TYPECmdTxt, #488, 129, 0
	SYMB	ALAB, _TYPECmdTxt, #488
	PUBLIC	_TYPECmdTxt
_TYPECmdTxt:
; rs232cmd.c  194	char code KUNUMBERCmdTxt[] 			= "KUNUMBER";
	DB	054H,059H,050H,045H,000H
	SYMB	IDEN, "KUNUMBERCmdTxt", _KUNUMBERCmdTxt, #488, 129, 0
	SYMB	ALAB, _KUNUMBERCmdTxt, #488
	PUBLIC	_KUNUMBERCmdTxt
_KUNUMBERCmdTxt:
; rs232cmd.c  195	char code KUNCmdTxt[] 					= "KUN";
	DB	04BH,055H,04EH,055H,04DH,042H,045H,052H,000H
	SYMB	IDEN, "KUNCmdTxt", _KUNCmdTxt, #488, 129, 0
	SYMB	ALAB, _KUNCmdTxt, #488
	PUBLIC	_KUNCmdTxt
_KUNCmdTxt:
; rs232cmd.c  196	char code SWREVISIONCmdTxt[] 			= "SWREVISION";
	DB	04BH,055H,04EH,000H
	SYMB	IDEN, "SWREVISIONCmdTxt", _SWREVISIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _SWREVISIONCmdTxt, #488
	PUBLIC	_SWREVISIONCmdTxt
_SWREVISIONCmdTxt:
; rs232cmd.c  197	char code SWRCmdTxt[] 					= "SWR";
	DB	053H,057H,052H,045H,056H,049H,053H,049H,04FH,04EH,000H
	SYMB	IDEN, "SWRCmdTxt", _SWRCmdTxt, #488, 129, 0
	SYMB	ALAB, _SWRCmdTxt, #488
	PUBLIC	_SWRCmdTxt
_SWRCmdTxt:
; rs232cmd.c  198	
; rs232cmd.c  199	char code NCCmdTxt[] 					= "NC";
	DB	053H,057H,052H,000H
	SYMB	IDEN, "NCCmdTxt", _NCCmdTxt, #488, 129, 0
	SYMB	ALAB, _NCCmdTxt, #488
	PUBLIC	_NCCmdTxt
_NCCmdTxt:
; rs232cmd.c  200	char code FMSDATECmdTxt[] 				= "FMSDATE";
	DB	04EH,043H,000H
	SYMB	IDEN, "FMSDATECmdTxt", _FMSDATECmdTxt, #488, 129, 0
	SYMB	ALAB, _FMSDATECmdTxt, #488
	PUBLIC	_FMSDATECmdTxt
_FMSDATECmdTxt:
; rs232cmd.c  201	char code FMSDCmdTxt[] 					= "FMSD";
	DB	046H,04DH,053H,044H,041H,054H,045H,000H
	SYMB	IDEN, "FMSDCmdTxt", _FMSDCmdTxt, #488, 129, 0
	SYMB	ALAB, _FMSDCmdTxt, #488
	PUBLIC	_FMSDCmdTxt
_FMSDCmdTxt:
; rs232cmd.c  202	char code PRODUCTIONCmdTxt[] 			= "PRODUCTION";
	DB	046H,04DH,053H,044H,000H
	SYMB	IDEN, "PRODUCTIONCmdTxt", _PRODUCTIONCmdTxt, #488, 129, 0
	SYMB	ALAB, _PRODUCTIONCmdTxt, #488
	PUBLIC	_PRODUCTIONCmdTxt
_PRODUCTIONCmdTxt:
; rs232cmd.c  203	char code PRODCmdTxt[] 					= "PROD";
	DB	050H,052H,04FH,044H,055H,043H,054H,049H,04FH,04EH,000H
	SYMB	IDEN, "PRODCmdTxt", _PRODCmdTxt, #488, 129, 0
	SYMB	ALAB, _PRODCmdTxt, #488
	PUBLIC	_PRODCmdTxt
_PRODCmdTxt:
; rs232cmd.c  204	char code UPDATECmdTxt[] 				= "UPDATE";
	DB	050H,052H,04FH,044H,000H
	SYMB	IDEN, "UPDATECmdTxt", _UPDATECmdTxt, #488, 129, 0
	SYMB	ALAB, _UPDATECmdTxt, #488
	PUBLIC	_UPDATECmdTxt
_UPDATECmdTxt:
; rs232cmd.c  205	char code UPDCmdTxt[] 					= "UPD";
	DB	055H,050H,044H,041H,054H,045H,000H
	SYMB	IDEN, "UPDCmdTxt", _UPDCmdTxt, #488, 129, 0
	SYMB	ALAB, _UPDCmdTxt, #488
	PUBLIC	_UPDCmdTxt
_UPDCmdTxt:
; rs232cmd.c  206	
; rs232cmd.c  207	char code FREFERENCECmdTxt[] 		 	= "FREFERENCE";
	DB	055H,050H,044H,000H
	SYMB	IDEN, "FREFERENCECmdTxt", _FREFERENCECmdTxt, #488, 129, 0
	SYMB	ALAB, _FREFERENCECmdTxt, #488
	PUBLIC	_FREFERENCECmdTxt
_FREFERENCECmdTxt:
; rs232cmd.c  208	char code FREFCmdTxt[] 					= "FREF";
	DB	046H,052H,045H,046H,045H,052H,045H,04EH,043H,045H,000H
	SYMB	IDEN, "FREFCmdTxt", _FREFCmdTxt, #488, 129, 0
	SYMB	ALAB, _FREFCmdTxt, #488
	PUBLIC	_FREFCmdTxt
_FREFCmdTxt:
; rs232cmd.c  209	char code DACCmdTxt[] 					= "DAC";
	DB	046H,052H,045H,046H,000H
	SYMB	IDEN, "DACCmdTxt", _DACCmdTxt, #488, 129, 0
	SYMB	ALAB, _DACCmdTxt, #488
	PUBLIC	_DACCmdTxt
_DACCmdTxt:
; rs232cmd.c  210	char code UREFERENCECmdTxt[] 			= "UREFERENCE";
	DB	044H,041H,043H,000H
	SYMB	IDEN, "UREFERENCECmdTxt", _UREFERENCECmdTxt, #488, 129, 0
	SYMB	ALAB, _UREFERENCECmdTxt, #488
	PUBLIC	_UREFERENCECmdTxt
_UREFERENCECmdTxt:
; rs232cmd.c  211	char code UREFCmdTxt[] 					= "UREF";
	DB	055H,052H,045H,046H,045H,052H,045H,04EH,043H,045H,000H
	SYMB	IDEN, "UREFCmdTxt", _UREFCmdTxt, #488, 129, 0
	SYMB	ALAB, _UREFCmdTxt, #488
	PUBLIC	_UREFCmdTxt
_UREFCmdTxt:
; rs232cmd.c  212	char code HPHZEROCmdTxt[] 				= "HPHZERO";
	DB	055H,052H,045H,046H,000H
	SYMB	IDEN, "HPHZEROCmdTxt", _HPHZEROCmdTxt, #488, 129, 0
	SYMB	ALAB, _HPHZEROCmdTxt, #488
	PUBLIC	_HPHZEROCmdTxt
_HPHZEROCmdTxt:
; rs232cmd.c  213	char code HPHZCmdTxt[] 					= "HPHZ";
	DB	048H,050H,048H,05AH,045H,052H,04FH,000H
	SYMB	IDEN, "HPHZCmdTxt", _HPHZCmdTxt, #488, 129, 0
	SYMB	ALAB, _HPHZCmdTxt, #488
	PUBLIC	_HPHZCmdTxt
_HPHZCmdTxt:
; rs232cmd.c  214	char code PHASECmdTxt[] 				= "PHASE";
	DB	048H,050H,048H,05AH,000H
	SYMB	IDEN, "PHASECmdTxt", _PHASECmdTxt, #488, 129, 0
	SYMB	ALAB, _PHASECmdTxt, #488
	PUBLIC	_PHASECmdTxt
_PHASECmdTxt:
; rs232cmd.c  215	char code PHASCmdTxt[] 					= "PHAS";
	DB	050H,048H,041H,053H,045H,000H
	SYMB	IDEN, "PHASCmdTxt", _PHASCmdTxt, #488, 129, 0
	SYMB	ALAB, _PHASCmdTxt, #488
	PUBLIC	_PHASCmdTxt
_PHASCmdTxt:
; rs232cmd.c  216	
; rs232cmd.c  217	char code AGAINCmdTxt[] 				= "AGAIN";
	DB	050H,048H,041H,053H,000H
	SYMB	IDEN, "AGAINCmdTxt", _AGAINCmdTxt, #488, 129, 0
	SYMB	ALAB, _AGAINCmdTxt, #488
	PUBLIC	_AGAINCmdTxt
_AGAINCmdTxt:
; rs232cmd.c  218	char code AGACmdTxt[] 					= "AGA";
	DB	041H,047H,041H,049H,04EH,000H
	SYMB	IDEN, "AGACmdTxt", _AGACmdTxt, #488, 129, 0
	SYMB	ALAB, _AGACmdTxt, #488
	PUBLIC	_AGACmdTxt
_AGACmdTxt:
; rs232cmd.c  219	char code CGAINCmdTxt[] 				= "CGAIN";
	DB	041H,047H,041H,000H
	SYMB	IDEN, "CGAINCmdTxt", _CGAINCmdTxt, #488, 129, 0
	SYMB	ALAB, _CGAINCmdTxt, #488
	PUBLIC	_CGAINCmdTxt
_CGAINCmdTxt:
; rs232cmd.c  220	char code CGACmdTxt[] 					= "CGA";
	DB	043H,047H,041H,049H,04EH,000H
	SYMB	IDEN, "CGACmdTxt", _CGACmdTxt, #488, 129, 0
	SYMB	ALAB, _CGACmdTxt, #488
	PUBLIC	_CGACmdTxt
_CGACmdTxt:
; rs232cmd.c  221	char code ALEVELCmdTxt[] 				= "ALEVEL";
	DB	043H,047H,041H,000H
	SYMB	IDEN, "ALEVELCmdTxt", _ALEVELCmdTxt, #488, 129, 0
	SYMB	ALAB, _ALEVELCmdTxt, #488
	PUBLIC	_ALEVELCmdTxt
_ALEVELCmdTxt:
; rs232cmd.c  222	char code ALEVCmdTxt[] 					= "ALEV";
	DB	041H,04CH,045H,056H,045H,04CH,000H
	SYMB	IDEN, "ALEVCmdTxt", _ALEVCmdTxt, #488, 129, 0
	SYMB	ALAB, _ALEVCmdTxt, #488
	PUBLIC	_ALEVCmdTxt
_ALEVCmdTxt:
; rs232cmd.c  223	
; rs232cmd.c  224	char code PLDCmdTxt[] 					= "PLD";
	DB	041H,04CH,045H,056H,000H
	SYMB	IDEN, "PLDCmdTxt", _PLDCmdTxt, #488, 129, 0
	SYMB	ALAB, _PLDCmdTxt, #488
	PUBLIC	_PLDCmdTxt
_PLDCmdTxt:
; rs232cmd.c  225	char code TCXOCmdTxt[] 					= "TCXO";
	DB	050H,04CH,044H,000H
	SYMB	IDEN, "TCXOCmdTxt", _TCXOCmdTxt, #488, 129, 0
	SYMB	ALAB, _TCXOCmdTxt, #488
	PUBLIC	_TCXOCmdTxt
_TCXOCmdTxt:
; rs232cmd.c  226	char code MMCHIPCmdTxt[] 				= "MMCHIP";
	DB	054H,043H,058H,04FH,000H
	SYMB	IDEN, "MMCHIPCmdTxt", _MMCHIPCmdTxt, #488, 129, 0
	SYMB	ALAB, _MMCHIPCmdTxt, #488
	PUBLIC	_MMCHIPCmdTxt
_MMCHIPCmdTxt:
; rs232cmd.c  227	char code MMCHCmdTxt[] 					= "MMCH";
	DB	04DH,04DH,043H,048H,049H,050H,000H
	SYMB	IDEN, "MMCHCmdTxt", _MMCHCmdTxt, #488, 129, 0
	SYMB	ALAB, _MMCHCmdTxt, #488
	PUBLIC	_MMCHCmdTxt
_MMCHCmdTxt:
; rs232cmd.c  228	
; rs232cmd.c  229	char code SAVEParTxt[] 					= "SAVE";
	DB	04DH,04DH,043H,048H,000H
	SYMB	IDEN, "SAVEParTxt", _SAVEParTxt, #488, 129, 0
	SYMB	ALAB, _SAVEParTxt, #488
	PUBLIC	_SAVEParTxt
_SAVEParTxt:
; rs232cmd.c  230	
; rs232cmd.c  231	char code INTERNALParTxt[] 			= "INTERNAL";
	DB	053H,041H,056H,045H,000H
	SYMB	IDEN, "INTERNALParTxt", _INTERNALParTxt, #488, 129, 0
	SYMB	ALAB, _INTERNALParTxt, #488
	PUBLIC	_INTERNALParTxt
_INTERNALParTxt:
; rs232cmd.c  232	char code INTParTxt[] 					= "INT";
	DB	049H,04EH,054H,045H,052H,04EH,041H,04CH,000H
	SYMB	IDEN, "INTParTxt", _INTParTxt, #488, 129, 0
	SYMB	ALAB, _INTParTxt, #488
	PUBLIC	_INTParTxt
_INTParTxt:
; rs232cmd.c  233	char code PALBURSTParTxt[] 			= "PALBURST";
	DB	049H,04EH,054H,000H
	SYMB	IDEN, "PALBURSTParTxt", _PALBURSTParTxt, #488, 129, 0
	SYMB	ALAB, _PALBURSTParTxt, #488
	PUBLIC	_PALBURSTParTxt
_PALBURSTParTxt:
; rs232cmd.c  234	char code PALBParTxt[] 					= "PALB";
	DB	050H,041H,04CH,042H,055H,052H,053H,054H,000H
	SYMB	IDEN, "PALBParTxt", _PALBParTxt, #488, 129, 0
	SYMB	ALAB, _PALBParTxt, #488
	PUBLIC	_PALBParTxt
_PALBParTxt:
; rs232cmd.c  235	char code NTSCBURSTParTxt[] 			= "NTSCBURST";
	DB	050H,041H,04CH,042H,000H
	SYMB	IDEN, "NTSCBURSTParTxt", _NTSCBURSTParTxt, #488, 129, 0
	SYMB	ALAB, _NTSCBURSTParTxt, #488
	PUBLIC	_NTSCBURSTParTxt
_NTSCBURSTParTxt:
; rs232cmd.c  236	char code NTSCParTxt[] 					= "NTSC";
	DB	04EH,054H,053H,043H,042H,055H,052H,053H,054H,000H
	SYMB	IDEN, "NTSCParTxt", _NTSCParTxt, #488, 129, 0
	SYMB	ALAB, _NTSCParTxt, #488
	PUBLIC	_NTSCParTxt
_NTSCParTxt:
; rs232cmd.c  237	
; rs232cmd.c  238	char code F10MHzParTxt[] 				= "F10MHZ";
	DB	04EH,054H,053H,043H,000H
	SYMB	IDEN, "F10MHzParTxt", _F10MHzParTxt, #488, 129, 0
	SYMB	ALAB, _F10MHzParTxt, #488
	PUBLIC	_F10MHzParTxt
_F10MHzParTxt:
; rs232cmd.c  239	
; rs232cmd.c  240	char code PALParTxt[] 					= "PAL";
	DB	046H,031H,030H,04DH,048H,05AH,000H
	SYMB	IDEN, "PALParTxt", _PALParTxt, #488, 129, 0
	SYMB	ALAB, _PALParTxt, #488
	PUBLIC	_PALParTxt
_PALParTxt:
; rs232cmd.c  241	char code PAL_IDParTxt[] 				= "PAL_ID";
	DB	050H,041H,04CH,000H
	SYMB	IDEN, "PAL_IDParTxt", _PAL_IDParTxt, #488, 129, 0
	SYMB	ALAB, _PAL_IDParTxt, #488
	PUBLIC	_PAL_IDParTxt
_PAL_IDParTxt:
; rs232cmd.c  242	
; rs232cmd.c  243	char code CBSMPTEParTxt[]				= "CBSMPTE";			// SMPTE Colorbar
	DB	050H,041H,04CH,05FH,049H,044H,000H
	SYMB	IDEN, "CBSMPTEParTxt", _CBSMPTEParTxt, #488, 129, 0
	SYMB	ALAB, _CBSMPTEParTxt, #488
	PUBLIC	_CBSMPTEParTxt
_CBSMPTEParTxt:
; rs232cmd.c  244	char code CBSMParTxt[] 					= "CBSM";					
	DB	043H,042H,053H,04DH,050H,054H,045H,000H
	SYMB	IDEN, "CBSMParTxt", _CBSMParTxt, #488, 129, 0
	SYMB	ALAB, _CBSMParTxt, #488
	PUBLIC	_CBSMParTxt
_CBSMParTxt:
; rs232cmd.c  245	char code CBEBUParTxt[] 				= "CBEBU";  	    	// EBU Colorbar
	DB	043H,042H,053H,04DH,000H
	SYMB	IDEN, "CBEBUParTxt", _CBEBUParTxt, #488, 129, 0
	SYMB	ALAB, _CBEBUParTxt, #488
	PUBLIC	_CBEBUParTxt
_CBEBUParTxt:
; rs232cmd.c  246	char code CBEBParTxt[] 					= "CBEB";
	DB	043H,042H,045H,042H,055H,000H
	SYMB	IDEN, "CBEBParTxt", _CBEBParTxt, #488, 129, 0
	SYMB	ALAB, _CBEBParTxt, #488
	PUBLIC	_CBEBParTxt
_CBEBParTxt:
; rs232cmd.c  247	char code CBFCCParTxt[] 			  	= "CBFCC";				// FCC Colorbar
	DB	043H,042H,045H,042H,000H
	SYMB	IDEN, "CBFCCParTxt", _CBFCCParTxt, #488, 129, 0
	SYMB	ALAB, _CBFCCParTxt, #488
	PUBLIC	_CBFCCParTxt
_CBFCCParTxt:
; rs232cmd.c  248	char code CBFCParTxt[] 				  	= "CBFC";
	DB	043H,042H,046H,043H,043H,000H
	SYMB	IDEN, "CBFCParTxt", _CBFCParTxt, #488, 129, 0
	SYMB	ALAB, _CBFCParTxt, #488
	PUBLIC	_CBFCParTxt
_CBFCParTxt:
; rs232cmd.c  249	char code CBEBU8ParTxt[] 			  	= "CBEBU8";				// Colorbar ITU801
	DB	043H,042H,046H,043H,000H
	SYMB	IDEN, "CBEBU8ParTxt", _CBEBU8ParTxt, #488, 129, 0
	SYMB	ALAB, _CBEBU8ParTxt, #488
	PUBLIC	_CBEBU8ParTxt
_CBEBU8ParTxt:
; rs232cmd.c  250	char code CBEB8ParTxt[] 			  	= "CBEB8";
	DB	043H,042H,045H,042H,055H,038H,000H
	SYMB	IDEN, "CBEB8ParTxt", _CBEB8ParTxt, #488, 129, 0
	SYMB	ALAB, _CBEB8ParTxt, #488
	PUBLIC	_CBEB8ParTxt
_CBEB8ParTxt:
; rs232cmd.c  251	char code CB100ParTxt[]		 		  	= "CB100";				// 100% Colorbar
	DB	043H,042H,045H,042H,038H,000H
	SYMB	IDEN, "CB100ParTxt", _CB100ParTxt, #488, 129, 0
	SYMB	ALAB, _CB100ParTxt, #488
	PUBLIC	_CB100ParTxt
_CB100ParTxt:
; rs232cmd.c  252	char code CBGREY75ParTxt[] 		  	= "CBGREY75";			// Colorbar + 75% Grey
	DB	043H,042H,031H,030H,030H,000H
	SYMB	IDEN, "CBGREY75ParTxt", _CBGREY75ParTxt, #488, 129, 0
	SYMB	ALAB, _CBGREY75ParTxt, #488
	PUBLIC	_CBGREY75ParTxt
_CBGREY75ParTxt:
; rs232cmd.c  253	char code CBGR75ParTxt[]			  	= "CBGR75";
	DB	043H,042H,047H,052H,045H,059H,037H,035H,000H
	SYMB	IDEN, "CBGR75ParTxt", _CBGR75ParTxt, #488, 129, 0
	SYMB	ALAB, _CBGR75ParTxt, #488
	PUBLIC	_CBGR75ParTxt
_CBGR75ParTxt:
; rs232cmd.c  254	char code CBRED75ParTxt[]  		  	= "CBRED75";			// Colorbar + 75% Red
	DB	043H,042H,047H,052H,037H,035H,000H
	SYMB	IDEN, "CBRED75ParTxt", _CBRED75ParTxt, #488, 129, 0
	SYMB	ALAB, _CBRED75ParTxt, #488
	PUBLIC	_CBRED75ParTxt
_CBRED75ParTxt:
; rs232cmd.c  255	char code CBR75ParTxt[] 			  	= "CBR75";
	DB	043H,042H,052H,045H,044H,037H,035H,000H
	SYMB	IDEN, "CBR75ParTxt", _CBR75ParTxt, #488, 129, 0
	SYMB	ALAB, _CBR75ParTxt, #488
	PUBLIC	_CBR75ParTxt
_CBR75ParTxt:
; rs232cmd.c  256	char code RED75ParTxt[] 			  	= "RED75";				// 75% Red
	DB	043H,042H,052H,037H,035H,000H
	SYMB	IDEN, "RED75ParTxt", _RED75ParTxt, #488, 129, 0
	SYMB	ALAB, _RED75ParTxt, #488
	PUBLIC	_RED75ParTxt
_RED75ParTxt:
; rs232cmd.c  257	
; rs232cmd.c  258	char code MULTIBURSTParTxt[] 			= "MULTIBURST";		// Multi burst
	DB	052H,045H,044H,037H,035H,000H
	SYMB	IDEN, "MULTIBURSTParTxt", _MULTIBURSTParTxt, #488, 129, 0
	SYMB	ALAB, _MULTIBURSTParTxt, #488
	PUBLIC	_MULTIBURSTParTxt
_MULTIBURSTParTxt:
; rs232cmd.c  259	char code MULTParTxt[] 				 	= "MULT";
	DB	04DH,055H,04CH,054H,049H,042H,055H,052H,053H,054H,000H
	SYMB	IDEN, "MULTParTxt", _MULTParTxt, #488, 129, 0
	SYMB	ALAB, _MULTParTxt, #488
	PUBLIC	_MULTParTxt
_MULTParTxt:
; rs232cmd.c  260	char code CCIR18ParTxt[] 	 		 	= "CCIR18";
	DB	04DH,055H,04CH,054H,000H
	SYMB	IDEN, "CCIR18ParTxt", _CCIR18ParTxt, #488, 129, 0
	SYMB	ALAB, _CCIR18ParTxt, #488
	PUBLIC	_CCIR18ParTxt
_CCIR18ParTxt:
; rs232cmd.c  261	char code WIN10ParTxt[] 			 	= "WIN10";				// Window 10%
	DB	043H,043H,049H,052H,031H,038H,000H
	SYMB	IDEN, "WIN10ParTxt", _WIN10ParTxt, #488, 129, 0
	SYMB	ALAB, _WIN10ParTxt, #488
	PUBLIC	_WIN10ParTxt
_WIN10ParTxt:
; rs232cmd.c  262	char code WIN15ParTxt[] 			 	= "WIN15";				// Window 15%
	DB	057H,049H,04EH,031H,030H,000H
	SYMB	IDEN, "WIN15ParTxt", _WIN15ParTxt, #488, 129, 0
	SYMB	ALAB, _WIN15ParTxt, #488
	PUBLIC	_WIN15ParTxt
_WIN15ParTxt:
; rs232cmd.c  263	char code WIN20ParTxt[] 			 	= "WIN20";				// Window 20%
	DB	057H,049H,04EH,031H,035H,000H
	SYMB	IDEN, "WIN20ParTxt", _WIN20ParTxt, #488, 129, 0
	SYMB	ALAB, _WIN20ParTxt, #488
	PUBLIC	_WIN20ParTxt
_WIN20ParTxt:
; rs232cmd.c  264	char code WIN100ParTxt[] 			 	= "WIN100";				// Window 100%
	DB	057H,049H,04EH,032H,030H,000H
	SYMB	IDEN, "WIN100ParTxt", _WIN100ParTxt, #488, 129, 0
	SYMB	ALAB, _WIN100ParTxt, #488
	PUBLIC	_WIN100ParTxt
_WIN100ParTxt:
; rs232cmd.c  265	char code BLWH15ParTxt[] 			 	= "BLWH15KHZ";			// 15kHz Bl/Wh
	DB	057H,049H,04EH,031H,030H,030H,000H
	SYMB	IDEN, "BLWH15ParTxt", _BLWH15ParTxt, #488, 129, 0
	SYMB	ALAB, _BLWH15ParTxt, #488
	PUBLIC	_BLWH15ParTxt
_BLWH15ParTxt:
; rs232cmd.c  266	char code WHITE100ParTxt[] 		 	= "WHITE100";			// White 100%
	DB	042H,04CH,057H,048H,031H,035H,04BH,048H,05AH,000H
	SYMB	IDEN, "WHITE100ParTxt", _WHITE100ParTxt, #488, 129, 0
	SYMB	ALAB, _WHITE100ParTxt, #488
	PUBLIC	_WHITE100ParTxt
_WHITE100ParTxt:
; rs232cmd.c  267	char code WHIT100ParTxt[] 				= "WHIT100";
	DB	057H,048H,049H,054H,045H,031H,030H,030H,000H
	SYMB	IDEN, "WHIT100ParTxt", _WHIT100ParTxt, #488, 129, 0
	SYMB	ALAB, _WHIT100ParTxt, #488
	PUBLIC	_WHIT100ParTxt
_WHIT100ParTxt:
; rs232cmd.c  268	char code BLACKParTxt[] 		  		= "BLACK";				// Black
	DB	057H,048H,049H,054H,031H,030H,030H,000H
	SYMB	IDEN, "BLACKParTxt", _BLACKParTxt, #488, 129, 0
	SYMB	ALAB, _BLACKParTxt, #488
	PUBLIC	_BLACKParTxt
_BLACKParTxt:
; rs232cmd.c  269	char code BLACParTxt[]		 	  		= "BLAC";
	DB	042H,04CH,041H,043H,04BH,000H
	SYMB	IDEN, "BLACParTxt", _BLACParTxt, #488, 129, 0
	SYMB	ALAB, _BLACParTxt, #488
	PUBLIC	_BLACParTxt
_BLACParTxt:
; rs232cmd.c  270	
; rs232cmd.c  271	char code SDICHECKParTxt[] 	  		= "SDICHECK";			// Check field
	DB	042H,04CH,041H,043H,000H
	SYMB	IDEN, "SDICHECKParTxt", _SDICHECKParTxt, #488, 129, 0
	SYMB	ALAB, _SDICHECKParTxt, #488
	PUBLIC	_SDICHECKParTxt
_SDICHECKParTxt:
; rs232cmd.c  272	char code SDICParTxt[] 			  		= "SDIC";
	DB	053H,044H,049H,043H,048H,045H,043H,04BH,000H
	SYMB	IDEN, "SDICParTxt", _SDICParTxt, #488, 129, 0
	SYMB	ALAB, _SDICParTxt, #488
	PUBLIC	_SDICParTxt
_SDICParTxt:
; rs232cmd.c  273	char code DGREYParTxt[] 		  		= "DGREY";				// Digital grey
	DB	053H,044H,049H,043H,000H
	SYMB	IDEN, "DGREYParTxt", _DGREYParTxt, #488, 129, 0
	SYMB	ALAB, _DGREYParTxt, #488
	PUBLIC	_DGREYParTxt
_DGREYParTxt:
; rs232cmd.c  274	char code DGRParTxt[] 			  		= "DGR";
	DB	044H,047H,052H,045H,059H,000H
	SYMB	IDEN, "DGRParTxt", _DGRParTxt, #488, 129, 0
	SYMB	ALAB, _DGRParTxt, #488
	PUBLIC	_DGRParTxt
_DGRParTxt:
; rs232cmd.c  275	char code STAIRCASE5ParTxt[]			= "STAIRCASE5";	 	// 5-step staircase
	DB	044H,047H,052H,000H
	SYMB	IDEN, "STAIRCASE5ParTxt", _STAIRCASE5ParTxt, #488, 129, 0
	SYMB	ALAB, _STAIRCASE5ParTxt, #488
	PUBLIC	_STAIRCASE5ParTxt
_STAIRCASE5ParTxt:
; rs232cmd.c  276	char code STA5ParTxt[] 			  		= "STA5";
	DB	053H,054H,041H,049H,052H,043H,041H,053H,045H,035H,000H
	SYMB	IDEN, "STA5ParTxt", _STA5ParTxt, #488, 129, 0
	SYMB	ALAB, _STA5ParTxt, #488
	PUBLIC	_STA5ParTxt
_STA5ParTxt:
; rs232cmd.c  277	char code STAIRCASE10ParTxt[] 		= "STAIRCASE10";		// 10-step staircase
	DB	053H,054H,041H,035H,000H
	SYMB	IDEN, "STAIRCASE10ParTxt", _STAIRCASE10ParTxt, #488, 129, 0
	SYMB	ALAB, _STAIRCASE10ParTxt, #488
	PUBLIC	_STAIRCASE10ParTxt
_STAIRCASE10ParTxt:
; rs232cmd.c  278	char code STA10ParTxt[] 		  		= "STA10";
	DB	053H,054H,041H,049H,052H,043H,041H,053H,045H,031H,030H,000H
	SYMB	IDEN, "STA10ParTxt", _STA10ParTxt, #488, 129, 0
	SYMB	ALAB, _STA10ParTxt, #488
	PUBLIC	_STA10ParTxt
_STA10ParTxt:
; rs232cmd.c  279	char code CROSSHATCHParTxt[] 			= "CROSSHATCH";		// Cross hatch
	DB	053H,054H,041H,031H,030H,000H
	SYMB	IDEN, "CROSSHATCHParTxt", _CROSSHATCHParTxt, #488, 129, 0
	SYMB	ALAB, _CROSSHATCHParTxt, #488
	PUBLIC	_CROSSHATCHParTxt
_CROSSHATCHParTxt:
; rs232cmd.c  280	char code CROSParTxt[] 			  		= "CROS";
	DB	043H,052H,04FH,053H,053H,048H,041H,054H,043H,048H,000H
	SYMB	IDEN, "CROSParTxt", _CROSParTxt, #488, 129, 0
	SYMB	ALAB, _CROSParTxt, #488
	PUBLIC	_CROSParTxt
_CROSParTxt:
; rs232cmd.c  281	char code PLUGEParTxt[] 		  		= "PLUGE";				// PLUGE
	DB	043H,052H,04FH,053H,000H
	SYMB	IDEN, "PLUGEParTxt", _PLUGEParTxt, #488, 129, 0
	SYMB	ALAB, _PLUGEParTxt, #488
	PUBLIC	_PLUGEParTxt
_PLUGEParTxt:
; rs232cmd.c  282	char code PLUGParTxt[] 			  		= "PLUG";
	DB	050H,04CH,055H,047H,045H,000H
	SYMB	IDEN, "PLUGParTxt", _PLUGParTxt, #488, 129, 0
	SYMB	ALAB, _PLUGParTxt, #488
	PUBLIC	_PLUGParTxt
_PLUGParTxt:
; rs232cmd.c  283	
; rs232cmd.c  284	char code ANALOGParTxt[]		  		= "ANALOG";
	DB	050H,04CH,055H,047H,000H
	SYMB	IDEN, "ANALOGParTxt", _ANALOGParTxt, #488, 129, 0
	SYMB	ALAB, _ANALOGParTxt, #488
	PUBLIC	_ANALOGParTxt
_ANALOGParTxt:
; rs232cmd.c  285	char code ANALParTxt[]			  		= "ANAL";
	DB	041H,04EH,041H,04CH,04FH,047H,000H
	SYMB	IDEN, "ANALParTxt", _ANALParTxt, #488, 129, 0
	SYMB	ALAB, _ANALParTxt, #488
	PUBLIC	_ANALParTxt
_ANALParTxt:
; rs232cmd.c  286	char code AESEBUParTxt[]		  		= "AESEBU";
	DB	041H,04EH,041H,04CH,000H
	SYMB	IDEN, "AESEBUParTxt", _AESEBUParTxt, #488, 129, 0
	SYMB	ALAB, _AESEBUParTxt, #488
	PUBLIC	_AESEBUParTxt
_AESEBUParTxt:
; rs232cmd.c  287	char code AESParTxt[]			  		= "AES";
	DB	041H,045H,053H,045H,042H,055H,000H
	SYMB	IDEN, "AESParTxt", _AESParTxt, #488, 129, 0
	SYMB	ALAB, _AESParTxt, #488
	PUBLIC	_AESParTxt
_AESParTxt:
; rs232cmd.c  288	
; rs232cmd.c  289	char code F441KHZParTxt[]		 		= "F441KHZ";
	DB	041H,045H,053H,000H
	SYMB	IDEN, "F441KHZParTxt", _F441KHZParTxt, #488, 129, 0
	SYMB	ALAB, _F441KHZParTxt, #488
	PUBLIC	_F441KHZParTxt
_F441KHZParTxt:
; rs232cmd.c  290	char code F48KHZParTxt[] 				= "F48KHZ";
	DB	046H,034H,034H,031H,04BH,048H,05AH,000H
	SYMB	IDEN, "F48KHZParTxt", _F48KHZParTxt, #488, 129, 0
	SYMB	ALAB, _F48KHZParTxt, #488
	PUBLIC	_F48KHZParTxt
_F48KHZParTxt:
; rs232cmd.c  291	char code F45MHZParTxt[] 				= "F45MHZ";
	DB	046H,034H,038H,04BH,048H,05AH,000H
	SYMB	IDEN, "F45MHZParTxt", _F45MHZParTxt, #488, 129, 0
	SYMB	ALAB, _F45MHZParTxt, #488
	PUBLIC	_F45MHZParTxt
_F45MHZParTxt:
; rs232cmd.c  292	
; rs232cmd.c  293	char code S500HZParTxt[] 				= "S500HZ";				// Stereo 500 Hz
	DB	046H,034H,035H,04DH,048H,05AH,000H
	SYMB	IDEN, "S500HZParTxt", _S500HZParTxt, #488, 129, 0
	SYMB	ALAB, _S500HZParTxt, #488
	PUBLIC	_S500HZParTxt
_S500HZParTxt:
; rs232cmd.c  294	char code S1KHZParTxt[] 				= "S1KHZ";   			// Stereo 1 kHz
	DB	053H,035H,030H,030H,048H,05AH,000H
	SYMB	IDEN, "S1KHZParTxt", _S1KHZParTxt, #488, 129, 0
	SYMB	ALAB, _S1KHZParTxt, #488
	PUBLIC	_S1KHZParTxt
_S1KHZParTxt:
; rs232cmd.c  295	char code SEBU1KHZParTxt[]		 		= "SEBU1KHZ";			// Stereo EBU 1 kHz
	DB	053H,031H,04BH,048H,05AH,000H
	SYMB	IDEN, "SEBU1KHZParTxt", _SEBU1KHZParTxt, #488, 129, 0
	SYMB	ALAB, _SEBU1KHZParTxt, #488
	PUBLIC	_SEBU1KHZParTxt
_SEBU1KHZParTxt:
; rs232cmd.c  296	char code S8KHZParTxt[] 				= "S8KHZ";				// Stereo 8 kHz
	DB	053H,045H,042H,055H,031H,04BH,048H,05AH,000H
	SYMB	IDEN, "S8KHZParTxt", _S8KHZParTxt, #488, 129, 0
	SYMB	ALAB, _S8KHZParTxt, #488
	PUBLIC	_S8KHZParTxt
_S8KHZParTxt:
; rs232cmd.c  297	
; rs232cmd.c  298	char code SILENCEParTxt[] 				= "SILENCE";
	DB	053H,038H,04BH,048H,05AH,000H
	SYMB	IDEN, "SILENCEParTxt", _SILENCEParTxt, #488, 129, 0
	SYMB	ALAB, _SILENCEParTxt, #488
	PUBLIC	_SILENCEParTxt
_SILENCEParTxt:
; rs232cmd.c  299	char code SILParTxt[] 					= "SIL";
	DB	053H,049H,04CH,045H,04EH,043H,045H,000H
	SYMB	IDEN, "SILParTxt", _SILParTxt, #488, 129, 0
	SYMB	ALAB, _SILParTxt, #488
	PUBLIC	_SILParTxt
_SILParTxt:
; rs232cmd.c  300	
; rs232cmd.c  301	char code DMYParTxt[]					= "DMY";
	DB	053H,049H,04CH,000H
	SYMB	IDEN, "DMYParTxt", _DMYParTxt, #488, 129, 0
	SYMB	ALAB, _DMYParTxt, #488
	PUBLIC	_DMYParTxt
_DMYParTxt:
; rs232cmd.c  302	char code MDYParTxt[]					= "MDY";
	DB	044H,04DH,059H,000H
	SYMB	IDEN, "MDYParTxt", _MDYParTxt, #488, 129, 0
	SYMB	ALAB, _MDYParTxt, #488
	PUBLIC	_MDYParTxt
_MDYParTxt:
; rs232cmd.c  303	char code YMDParTxt[]					= "YMD";
	DB	04DH,044H,059H,000H
	SYMB	IDEN, "YMDParTxt", _YMDParTxt, #488, 129, 0
	SYMB	ALAB, _YMDParTxt, #488
	PUBLIC	_YMDParTxt
_YMDParTxt:
; rs232cmd.c  304	
; rs232cmd.c  305	char code BBParTxt[] 					= "BB";
	DB	059H,04DH,044H,000H
	SYMB	IDEN, "BBParTxt", _BBParTxt, #488, 129, 0
	SYMB	ALAB, _BBParTxt, #488
	PUBLIC	_BBParTxt
_BBParTxt:
; rs232cmd.c  306	char code SPGParTxt[]  					= "SPG";
	DB	042H,042H,000H
	SYMB	IDEN, "SPGParTxt", _SPGParTxt, #488, 129, 0
	SYMB	ALAB, _SPGParTxt, #488
	PUBLIC	_SPGParTxt
_SPGParTxt:
; rs232cmd.c  307	
; rs232cmd.c  308	char code OFFParTxt[] 					= "OFF";
	DB	053H,050H,047H,000H
	SYMB	IDEN, "OFFParTxt", _OFFParTxt, #488, 129, 0
	SYMB	ALAB, _OFFParTxt, #488
	PUBLIC	_OFFParTxt
_OFFParTxt:
; rs232cmd.c  309	char code ONParTxt[] 					= "ON";
	DB	04FH,046H,046H,000H
	SYMB	IDEN, "ONParTxt", _ONParTxt, #488, 129, 0
	SYMB	ALAB, _ONParTxt, #488
	PUBLIC	_ONParTxt
_ONParTxt:
; rs232cmd.c  310	
; rs232cmd.c  311	char code UPParTxt[] 					= "UP";
	DB	04FH,04EH,000H
	SYMB	IDEN, "UPParTxt", _UPParTxt, #488, 129, 0
	SYMB	ALAB, _UPParTxt, #488
	PUBLIC	_UPParTxt
_UPParTxt:
; rs232cmd.c  312	char code DOWNParTxt[] 				 	= "DOWN";
	DB	055H,050H,000H
	SYMB	IDEN, "DOWNParTxt", _DOWNParTxt, #488, 129, 0
	SYMB	ALAB, _DOWNParTxt, #488
	PUBLIC	_DOWNParTxt
_DOWNParTxt:
; rs232cmd.c  313	
; rs232cmd.c  314	char code NORMALParTxt[] 				= "NORMAL";
	DB	044H,04FH,057H,04EH,000H
	SYMB	IDEN, "NORMALParTxt", _NORMALParTxt, #488, 129, 0
	SYMB	ALAB, _NORMALParTxt, #488
	PUBLIC	_NORMALParTxt
_NORMALParTxt:
; rs232cmd.c  315	char code NORMParTxt[] 					= "NORM";
	DB	04EH,04FH,052H,04DH,041H,04CH,000H
	SYMB	IDEN, "NORMParTxt", _NORMParTxt, #488, 129, 0
	SYMB	ALAB, _NORMParTxt, #488
	PUBLIC	_NORMParTxt
_NORMParTxt:
; rs232cmd.c  316	
; rs232cmd.c  317	char code MINParTxt[] 					= "MIN";
	DB	04EH,04FH,052H,04DH,000H
	SYMB	IDEN, "MINParTxt", _MINParTxt, #488, 129, 0
	SYMB	ALAB, _MINParTxt, #488
	PUBLIC	_MINParTxt
_MINParTxt:
; rs232cmd.c  318	char code MAXParTxt[] 					= "MAX";
	DB	04DH,049H,04EH,000H
	SYMB	IDEN, "MAXParTxt", _MAXParTxt, #488, 129, 0
	SYMB	ALAB, _MAXParTxt, #488
	PUBLIC	_MAXParTxt
_MAXParTxt:
; rs232cmd.c  319	
; rs232cmd.c  320	
; rs232cmd.c  321	void CLSCommand( void);
; rs232cmd.c  322	void ESECommand( void);
; rs232cmd.c  323	void ESRCommand( void);
; rs232cmd.c  324	void OPCCommand( void);
; rs232cmd.c  325	void SRECommand( void);
; rs232cmd.c  326	void STBCommand( void);
; rs232cmd.c  327	void TSTCommand( void);
; rs232cmd.c  328	void WAICommand( void);
; rs232cmd.c  329	void RSTCommand( void);
; rs232cmd.c  330	void IDNCommand( void);
; rs232cmd.c  331	void RCLCommand( void);
; rs232cmd.c  332	void SAVCommand( void);
; rs232cmd.c  333	
; rs232cmd.c  334	void SystemError( void);
; rs232cmd.c  335	void SystemVersion( void);
; rs232cmd.c  336	void SystemTime( void);
; rs232cmd.c  337	void SystemDate( void);
; rs232cmd.c  338	
; rs232cmd.c  339	void SystemPresetName( void);
; rs232cmd.c  340	void SystemPresetAuthor( void);
; rs232cmd.c  341	void SystemPresetDate( void);
; rs232cmd.c  342	void SystemPresetDownload( void);
; rs232cmd.c  343	void SystemPresetUpload( void);
; rs232cmd.c  344	
; rs232cmd.c  345	void StatusOperEvent( void);
; rs232cmd.c  346	void StatusOperCondition( void);
; rs232cmd.c  347	void StatusOperEnable( void);
; rs232cmd.c  348	void StatusQuestEvent( void);
; rs232cmd.c  349	void StatusQuestCondition( void);
; rs232cmd.c  350	void StatusQuestEnable( void);
; rs232cmd.c  351	void StatusPreset( void);
; rs232cmd.c  352	
; rs232cmd.c  353	void GenlockGen( void);
; rs232cmd.c  354	void GenlockGenSystem( void);
; rs232cmd.c  355	void GenlockGenDelay( void);
; rs232cmd.c  356	void GenlockGenCalibrateEnable( void);
; rs232cmd.c  357	void GenlockGenCalibrateAdjust( void);
; rs232cmd.c  358	void GenlockGenCalibrateStore( void);
; rs232cmd.c  359	
; rs232cmd.c  360	void BBGenSuffix( void);
; rs232cmd.c  361	void BBGen( void);
; rs232cmd.c  362	void BBGenSystem( void);
; rs232cmd.c  363	void BBGenDelay( void);
; rs232cmd.c  364	void BBGenScHPhase( void);
; rs232cmd.c  365	
; rs232cmd.c  366	void CBGen( void);
; rs232cmd.c  367	void CBGenPattern( void);
; rs232cmd.c  368	void CBGenSystem( void);
; rs232cmd.c  369	void CBGenDelay( void);
; rs232cmd.c  370	void CBGenScHPhase( void);
; rs232cmd.c  371	void CBGenEmbAudioSignal( void);
; rs232cmd.c  372	
; rs232cmd.c  373	void AudioGenOutput( void);
; rs232cmd.c  374	
; rs232cmd.c  375	void AudioGenAnalog( void);
; rs232cmd.c  376	void AudioGenAnalogSignal( void);
; rs232cmd.c  377	void AudioGenAnalogLevel( void);
; rs232cmd.c  378	void AudioGenAnalogClick( void);
; rs232cmd.c  379	
; rs232cmd.c  380	void AudioGenAESEBU( void);
; rs232cmd.c  381	void AudioGenAESEBUSystem( void);
; rs232cmd.c  382	void AudioGenAESEBUSignal( void);
; rs232cmd.c  383	void AudioGenAESEBULevel( void);
; rs232cmd.c  384	void AudioGenAESEBUTiming( void);
; rs232cmd.c  385	void AudioGenAESEBUWordClock( void);
; rs232cmd.c  386	void AudioGenAESEBUClick( void);
; rs232cmd.c  387	
; rs232cmd.c  388	void FactPassword( void);
; rs232cmd.c  389	void FactReset( void);
; rs232cmd.c  390	void FactV24Command( void);
; rs232cmd.c  391	void FactV24Transparent( void);
; rs232cmd.c  392	
; rs232cmd.c  393	void FactChecksumCode( void);
; rs232cmd.c  394	void FactChecksumPLD( void);
; rs232cmd.c  395	void FactChecksumEmbAudio( void);
; rs232cmd.c  396	void FactChecksumPattern( void);
; rs232cmd.c  397	void FactChecksumRange( void);
; rs232cmd.c  398	
; rs232cmd.c  399	void FactMainVersion( void);
; rs232cmd.c  400	void FactMainIDNCompany( void);
; rs232cmd.c  401	void FactMainIDNType( void);
; rs232cmd.c  402	void FactMainIDNKUNumber( void);
; rs232cmd.c  403	void FactMainIDNSWRevision( void);
; rs232cmd.c  404	
; rs232cmd.c  405	void FactMainSystem( void);
; rs232cmd.c  406	void FactMainFMSDateProd( void);
; rs232cmd.c  407	void FactMainFMSDateUpd( void);
; rs232cmd.c  408	
; rs232cmd.c  409	void FactGenlockGenDate( void);
; rs232cmd.c  410	void FactGenlockGenVersion( void);
; rs232cmd.c  411	void FactGenlockGenFRefDate( void);
; rs232cmd.c  412	void FactGenlockGenFRefDAC( void);
; rs232cmd.c  413	void FactGenlockGenURefDate( void);
; rs232cmd.c  414	void FactGenlockGenURefDAC( void);
; rs232cmd.c  415	void FactGenlockGenHPHZero( void);
; rs232cmd.c  416	void FactGenlockGenPhase( void);
; rs232cmd.c  417	
; rs232cmd.c  418	void FactBBGenDate( void);
; rs232cmd.c  419	void FactBBGenVersion( void);
; rs232cmd.c  420	void FactBBGenSignal( void);
; rs232cmd.c  421	void FactBBGenPhase( void);
; rs232cmd.c  422	void FactBBGenScHPhase( void);
; rs232cmd.c  423	void FactBBGenDAC( void);
; rs232cmd.c  424	
; rs232cmd.c  425	void FactCBGenDate( void);
; rs232cmd.c  426	void FactCBGenAGain( void);
; rs232cmd.c  427	void FactCBGenCGain( void);
; rs232cmd.c  428	void FactCBGenPhase( void);
; rs232cmd.c  429	void FactCBGenScHPhase( void);
; rs232cmd.c  430	
; rs232cmd.c  431	void FactAudioGenStatus( void);
; rs232cmd.c  432	void FactAudioGenDate( void);
; rs232cmd.c  433	void FactAudioGenLevel( void);
; rs232cmd.c  434	
; rs232cmd.c  435	void FactPLDVersion( void);
; rs232cmd.c  436	void FactTCXOStatus( void);
; rs232cmd.c  437	void FactMultiMediaChip( void);
; rs232cmd.c  438	
; rs232cmd.c  439	int FindParameter( char* par, struct PAR_STRUCT code* TmpPtr);
; rs232cmd.c  440	
; rs232cmd.c  441	long FLTToSamples( UC system, int F, int L, float T);
; rs232cmd.c  442	void PrintSamplesToFLT( UC system, long samples);
; rs232cmd.c  443	
; rs232cmd.c  444	// **************************************************************************
; rs232cmd.c  445	struct CMD_STRUCT code Mandated[12] = {
	DB	04DH,041H,058H,000H
	SYMB	TYPE, 490, 'n', #2, 129
	SYMB	TYPE, 491, 'P', #490
	SYMB	TYPE, 493, 'n', #492, 129
	SYMB	TYPE, 494, 'P', #493
	SYMB	TYPE, 495, 'X', 12, #1, 30, 0
	SYMB	TYPE, 496, 'n', #495, 129
	SYMB	TYPE, 497, 'P', #496
	SYMB	TYPE, 498, 'X', 12, #1, 30, 0
	SYMB	TYPE, 499, 'n', #498, 129
	SYMB	TYPE, 500, 'P', #499
	SYMB	TYPE, 492, "CMD_STRUCT", 'S', 24,\
		 "LongName", #491, 0,\
		 "ShortName", #491, 4,\
		 "SameLevel", #494, 8,\
		 "NextLevel", #494, 12,\
		 "Suffix", #497, 16,\
		 "Function", #500, 20
	SYMB	TYPE, 501, 'Z', #492, 11
	SYMB	IDEN, "Mandated", _Mandated, #501, 129, 0
	SYMB	ALAB, _Mandated, #501
	PUBLIC	_Mandated
	ALIGN	1
_Mandated:
	DD	_CLSCmdTxt
	DD	000000000H
	DD	_Mandated+24
	DD	000000000H,000000000H
	DD	_CLSCommand,_ESECmdTxt
	DD	000000000H
	DD	_Mandated+48
	DD	000000000H,000000000H
	DD	_ESECommand,_ESRCmdTxt
	DD	000000000H
	DD	_Mandated+72
	DD	000000000H,000000000H
	DD	_ESRCommand,_IDNCmdTxt
	DD	000000000H
	DD	_Mandated+96
	DD	000000000H,000000000H
	DD	_IDNCommand,_OPCCmdTxt
	DD	000000000H
	DD	_Mandated+120
	DD	000000000H,000000000H
	DD	_OPCCommand,_RSTCmdTxt
	DD	000000000H
	DD	_Mandated+144
	DD	000000000H,000000000H
	DD	_RSTCommand,_SRECmdTxt
	DD	000000000H
	DD	_Mandated+168
	DD	000000000H,000000000H
	DD	_SRECommand,_STBCmdTxt
	DD	000000000H
	DD	_Mandated+192
	DD	000000000H,000000000H
	DD	_STBCommand,_TSTCmdTxt
	DD	000000000H
	DD	_Mandated+216
	DD	000000000H,000000000H
	DD	_TSTCommand,_RCLCmdTxt
	DD	000000000H
	DD	_Mandated+240
	DD	000000000H,000000000H
	DD	_RCLCommand,_SAVCmdTxt
	DD	000000000H
	DD	_Mandated+264
	DD	000000000H,000000000H
	DD	_SAVCommand,_WAICmdTxt
	DD	000000000H,000000000H,000000000H,000000000H
; rs232cmd.c  446		{ CLSCmdTxt, NULL, &Mandated[1],  NULL, NONE, CLSCommand},
; rs232cmd.c  447		{ ESECmdTxt, NULL, &Mandated[2],  NULL, NONE, ESECommand},
; rs232cmd.c  448		{ ESRCmdTxt, NULL, &Mandated[3],  NULL, NONE, ESRCommand},
; rs232cmd.c  449		{ IDNCmdTxt, NULL, &Mandated[4],  NULL, NONE, IDNCommand},
; rs232cmd.c  450		{ OPCCmdTxt, NULL, &Mandated[5],  NULL, NONE, OPCCommand},
; rs232cmd.c  451		{ RSTCmdTxt, NULL, &Mandated[6],  NULL, NONE, RSTCommand},
; rs232cmd.c  452		{ SRECmdTxt, NULL, &Mandated[7],  NULL, NONE, SRECommand},
; rs232cmd.c  453		{ STBCmdTxt, NULL, &Mandated[8],  NULL, NONE, STBCommand},
; rs232cmd.c  454		{ TSTCmdTxt, NULL, &Mandated[9],  NULL, NONE, TSTCommand},
; rs232cmd.c  455		{ RCLCmdTxt, NULL, &Mandated[10], NULL, NONE, RCLCommand},
; rs232cmd.c  456		{ SAVCmdTxt, NULL, &Mandated[11], NULL, NONE, SAVCommand},
; rs232cmd.c  457		{ WAICmdTxt, NULL, NULL         , NULL, NONE, WAICommand}
; rs232cmd.c  458	};
; rs232cmd.c  459	
; rs232cmd.c  460	struct CMD_STRUCT code Subsystem[9] = {
	DD	_WAICommand
	SYMB	TYPE, 503, 'Z', #492, 8
	SYMB	IDEN, "Subsystem", _Subsystem, #503, 129, 0
	SYMB	ALAB, _Subsystem, #503
	PUBLIC	_Subsystem
	ALIGN	1
_Subsystem:
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_Subsystem+24
	DD	_System
	DD	000000000H,000000000H
	DD	_STATUSCmdTxt,_STATCmdTxt
	DD	_Subsystem+48
	DD	_Status
	DD	000000000H,000000000H
	DD	_DIAGNOSTICCmdTxt,_DIAGCmdTxt
	DD	_Subsystem+72
	DD	000000000H,000000000H,000000000H
	DD	_MONITORCmdTxt,_MONCmdTxt
	DD	_Subsystem+96
	DD	000000000H,000000000H,000000000H
	DD	_INPUTCmdTxt,_INPCmdTxt
	DD	_Subsystem+120
	DD	_Input
	DD	000000000H,000000000H
	DD	_OUTPUTCmdTxt,_OUTPCmdTxt
	DD	_Subsystem+144
	DD	_Output
	DD	000000000H,000000000H
	DD	_USERCmdTxt,_USERCmdTxt
	DD	_Subsystem+168
	DD	000000000H,000000000H,000000000H
	DD	_MEASURECmdTxt,_MEASCmdTxt
	DD	_Subsystem+192
	DD	000000000H,000000000H,000000000H
	DD	_FACTORYCmdTxt,_FACTCmdTxt
	DD	000000000H
	DD	_Factory
; rs232cmd.c  461		{ SYSTEMCmdTxt,	  SYSTCmdTxt, &Subsystem[1], &System[0],  NONE, NONE},
; rs232cmd.c  462		{ STATUSCmdTxt, 	  STATCmdTxt, &Subsystem[2], &Status[0],  NONE, NONE},
; rs232cmd.c  463		{ DIAGNOSTICCmdTxt, DIAGCmdTxt, &Subsystem[3], NULL,		   NONE, NONE},
; rs232cmd.c  464		{ MONITORCmdTxt, 	  MONCmdTxt,  &Subsystem[4], NULL, 		   NONE, NONE},
; rs232cmd.c  465		{ INPUTCmdTxt, 	  INPCmdTxt,  &Subsystem[5], &Input[0],   NONE, NONE},
; rs232cmd.c  466		{ OUTPUTCmdTxt, 	  OUTPCmdTxt, &Subsystem[6], &Output[0],  NONE, NONE},
; rs232cmd.c  467		{ USERCmdTxt, 		  USERCmdTxt, &Subsystem[7], NULL, 		   NONE, NONE},
; rs232cmd.c  468		{ MEASURECmdTxt, 	  MEASCmdTxt, &Subsystem[8], NULL, 		   NONE, NONE},
; rs232cmd.c  469		{ FACTORYCmdTxt, 	  FACTCmdTxt, NULL, 			  &Factory[0], NONE, NONE},
; rs232cmd.c  470	};
; rs232cmd.c  471	
; rs232cmd.c  472	// **************************************************************************
; rs232cmd.c  473	/*	CMD:	SUB1:	SUB2:	SUB3:	PARM:
; rs232cmd.c  474			SYSTem
; rs232cmd.c  475				:ERRor?
; rs232cmd.c  476	    	:VERSion?
; rs232cmd.c  477		    :PRESet<?>
; rs232cmd.c  478	  	  	[:ACTIVE?]
; rs232cmd.c  479	  	  	:RECall<?>	1 .. 4
; rs232cmd.c  480	    	  :STORe			1 .. 4
; rs232cmd.c  481	      	:NAMe<?>		1 .. 4 , <name>
; rs232cmd.c  482	      	:AUTHor<?> 	1 .. 4 , <author name>
; rs232cmd.c  483		      :DATE<?>		1 .. 4[, <year>,<month>,<date>]
; rs232cmd.c  484					:DOWNload		1 .. 4
; rs232cmd.c  485					:UPLoad			1 .. 4
; rs232cmd.c  486	    	:EVENtlog
; rs232cmd.c  487	    	:DATE
; rs232cmd.c  488	    	:TIME
; rs232cmd.c  489	*/
; rs232cmd.c  490	struct CMD_STRUCT code System[6] = {
	DD	000000000H,000000000H
	SYMB	TYPE, 505, 'Z', #492, 5
	SYMB	IDEN, "System", _System, #505, 129, 0
	SYMB	ALAB, _System, #505
	PUBLIC	_System
	ALIGN	1
_System:
	DD	_ERRORCmdTxt,_ERRCmdTxt
	DD	_System+24
	DD	000000000H,000000000H
	DD	_SystemError,_VERSIONCmdTxt,_VERSCmdTxt
	DD	_System+48
	DD	000000000H,000000000H
	DD	_SystemVersion,_PRESETCmdTxt,_PRESCmdTxt
	DD	_System+72
	DD	_SystemLevel1
	DD	000000000H
	DD	_RCLCommand,_EVENTLOGCmdTxt,_EVENCmdTxt
	DD	_System+96
	DD	000000000H,000000000H,000000000H
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_System+120
	DD	000000000H,000000000H,000000000H
	DD	_TIMECmdTxt,_TIMECmdTxt
; rs232cmd.c  491		{ ERRORCmdTxt, 	ERRCmdTxt, 	&System[1], NULL, 				NONE, SystemError},
; rs232cmd.c  492		{ VERSIONCmdTxt,	VERSCmdTxt, &System[2], NULL, 				NONE, SystemVersion},
; rs232cmd.c  493		{ PRESETCmdTxt, 	PRESCmdTxt, &System[3], &SystemLevel1[0], NONE, RCLCommand},
; rs232cmd.c  494		{ EVENTLOGCmdTxt, EVENCmdTxt, &System[4], NULL, 				NONE, NONE},
; rs232cmd.c  495		{ DATECmdTxt, 		DATECmdTxt, &System[5], NULL, 				NONE, NONE},
; rs232cmd.c  496		{ TIMECmdTxt, 		TIMECmdTxt, NULL, 		NULL, 				NONE, NONE}
; rs232cmd.c  497	};
; rs232cmd.c  498	
; rs232cmd.c  499	struct CMD_STRUCT code SystemLevel1[7] = {
	DD	000000000H,000000000H,000000000H,000000000H
	SYMB	TYPE, 507, 'Z', #492, 6
	SYMB	IDEN, "SystemLevel1", _SystemLevel1, #507, 129, 0
	SYMB	ALAB, _SystemLevel1, #507
	PUBLIC	_SystemLevel1
	ALIGN	1
_SystemLevel1:
	DD	_RECALLCmdTxt,_RECCmdTxt
	DD	_SystemLevel1+24
	DD	000000000H,000000000H
	DD	_RCLCommand,_STORECmdTxt,_STORCmdTxt
	DD	_SystemLevel1+48
	DD	000000000H,000000000H
	DD	_SAVCommand,_NAMECmdTxt,_NAMECmdTxt
	DD	_SystemLevel1+72
	DD	000000000H,000000000H
	DD	_SystemPresetName,_AUTHORCmdTxt,_AUTHCmdTxt
	DD	_SystemLevel1+96
	DD	000000000H,000000000H
	DD	_SystemPresetAuthor,_DATECmdTxt,_DATECmdTxt
	DD	_SystemLevel1+120
	DD	000000000H,000000000H
	DD	_SystemPresetDate,_DOWNLOADCmdTxt,_DOWNCmdTxt
	DD	_SystemLevel1+144
	DD	000000000H,000000000H
	DD	_SystemPresetDownload,_UPLOADCmdTxt,_UPLCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  500		{ RECALLCmdTxt,   RECCmdTxt, 	&SystemLevel1[1], NULL, NONE, RCLCommand},
; rs232cmd.c  501		{ STORECmdTxt,    STORCmdTxt, &SystemLevel1[2], NULL, NONE, SAVCommand},
; rs232cmd.c  502		{ NAMECmdTxt, 	   NAMECmdTxt, &SystemLevel1[3],	NULL, NONE, SystemPresetName},
; rs232cmd.c  503		{ AUTHORCmdTxt,   AUTHCmdTxt, &SystemLevel1[4],	NULL, NONE, SystemPresetAuthor},
; rs232cmd.c  504		{ DATECmdTxt, 	   DATECmdTxt, &SystemLevel1[5],	NULL, NONE, SystemPresetDate},
; rs232cmd.c  505		{ DOWNLOADCmdTxt, DOWNCmdTxt,	&SystemLevel1[6],	NULL, NONE, SystemPresetDownload},
; rs232cmd.c  506		{ UPLOADCmdTxt, 	UPLCmdTxt,	NULL, 				NULL, NONE, SystemPresetUpload},
; rs232cmd.c  507	};
; rs232cmd.c  508	
; rs232cmd.c  509	// **************************************************************************
; rs232cmd.c  510	/*	CMD:	SUB1:	SUB2:	SUB3:	PARM:
; rs232cmd.c  511			STATus
; rs232cmd.c  512		 		:OPERation
; rs232cmd.c  513	  	 		:EVENt?
; rs232cmd.c  514		      :CONDition?
; rs232cmd.c  515	  	    :ENABle<?>	0 .. 65535
; rs232cmd.c  516	   		:QUEStionable
; rs232cmd.c  517	     		:EVENt?
; rs232cmd.c  518		      :CONDition?
; rs232cmd.c  519	  	    :ENABle<?>	0 .. 65535
; rs232cmd.c  520				:PRESet				TBD
; rs232cmd.c  521		    :PT5201?
; rs232cmd.c  522	*/
; rs232cmd.c  523	struct CMD_STRUCT code Status[3] = {
	DD	_SystemPresetUpload
	SYMB	TYPE, 509, 'Z', #492, 2
	SYMB	IDEN, "Status", _Status, #509, 129, 0
	SYMB	ALAB, _Status, #509
	PUBLIC	_Status
	ALIGN	1
_Status:
	DD	_OPERATIONCmdTxt,_OPERCmdTxt
	DD	_Status+24
	DD	_StatusLevel1_1
	DD	000000000H
	DD	_StatusOperEvent,_QUESTIONABLECmdTxt,_QUESCmdTxt
	DD	_Status+48
	DD	_StatusLevel1_2
	DD	000000000H
	DD	_StatusQuestEvent,_PRESETCmdTxt,_PRESCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  524		{ OPERATIONCmdTxt, 	 OPERCmdTxt, &Status[1], &StatusLevel1_1[0], NONE, StatusOperEvent},
; rs232cmd.c  525		{ QUESTIONABLECmdTxt, QUESCmdTxt, &Status[2], &StatusLevel1_2[0], NONE, StatusQuestEvent},
; rs232cmd.c  526		{ PRESETCmdTxt, 		 PRESCmdTxt, NULL, 		 NULL, 					NONE, StatusPreset},
; rs232cmd.c  527	};
; rs232cmd.c  528	
; rs232cmd.c  529	struct CMD_STRUCT code StatusLevel1_1[3] = {
	DD	_StatusPreset
	SYMB	IDEN, "StatusLevel1_1", _StatusLevel1_1, #509, 129, 0
	SYMB	ALAB, _StatusLevel1_1, #509
	PUBLIC	_StatusLevel1_1
	ALIGN	1
_StatusLevel1_1:
	DD	_EVENTCmdTxt,_EVENCmdTxt
	DD	_StatusLevel1_1+24
	DD	000000000H,000000000H
	DD	_StatusOperEvent,_CONDITIONCmdTxt,_CONDCmdTxt
	DD	_StatusLevel1_1+48
	DD	000000000H,000000000H
	DD	_StatusOperCondition,_ENABLECmdTxt,_ENABCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  530		{ EVENTCmdTxt, 	 EVENCmdTxt, &StatusLevel1_1[1], NULL, NONE, StatusOperEvent},
; rs232cmd.c  531		{ CONDITIONCmdTxt, CONDCmdTxt, &StatusLevel1_1[2], NULL, NONE, StatusOperCondition},
; rs232cmd.c  532		{ ENABLECmdTxt, 	 ENABCmdTxt, NULL, 				   NULL, NONE, StatusOperEnable},
; rs232cmd.c  533	};
; rs232cmd.c  534	
; rs232cmd.c  535	struct CMD_STRUCT code StatusLevel1_2[3] = {
	DD	_StatusOperEnable
	SYMB	IDEN, "StatusLevel1_2", _StatusLevel1_2, #509, 129, 0
	SYMB	ALAB, _StatusLevel1_2, #509
	PUBLIC	_StatusLevel1_2
	ALIGN	1
_StatusLevel1_2:
	DD	_EVENTCmdTxt,_EVENCmdTxt
	DD	_StatusLevel1_2+24
	DD	000000000H,000000000H
	DD	_StatusQuestEvent,_CONDITIONCmdTxt,_CONDCmdTxt
	DD	_StatusLevel1_2+48
	DD	000000000H,000000000H
	DD	_StatusQuestCondition,_ENABLECmdTxt,_ENABCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  536		{ EVENTCmdTxt,		 EVENCmdTxt, &StatusLevel1_2[1], NULL, NONE, StatusQuestEvent},
; rs232cmd.c  537		{ CONDITIONCmdTxt, CONDCmdTxt, &StatusLevel1_2[2], NULL, NONE, StatusQuestCondition},
; rs232cmd.c  538		{ ENABLECmdTxt, 	 ENABCmdTxt, NULL, 					NULL, NONE, StatusQuestEnable},
; rs232cmd.c  539	};
; rs232cmd.c  540	
; rs232cmd.c  541	
; rs232cmd.c  542	// **************************************************************************
; rs232cmd.c  543	/*	CMD:	SUB1:	SUB2:		PARM:
; rs232cmd.c  544			INPut
; rs232cmd.c  545				:GENLOCK<?>
; rs232cmd.c  546					:SYSTem			INTernal | PALBurst | NTSCburst |F10MHZ
; rs232cmd.c  547					:DELay			<Field>,<Line>,<Time>
; rs232cmd.c  548					:CALibrate
; rs232cmd.c  549						:ENABle		OFF|ON
; rs232cmd.c  550						:ADJust		UP|DOWN|MIN|MAX
; rs232cmd.c  551						:STORe
; rs232cmd.c  552											
; rs232cmd.c  553	*/
; rs232cmd.c  554	//**************************************************************************
; rs232cmd.c  555	struct CMD_STRUCT code Input[1] = {
	DD	_StatusQuestEnable
	SYMB	TYPE, 511, 'Z', #492, 0
	SYMB	IDEN, "Input", _Input, #511, 129, 0
	SYMB	ALAB, _Input, #511
	PUBLIC	_Input
	ALIGN	1
_Input:	DD	_GENLOCKCmdTxt,_GENLCmdTxt
	DD	000000000H
	DD	_GenlockLevel1
	DD	000000000H
; rs232cmd.c  556		{ GENLOCKCmdTxt, GENLCmdTxt, NULL, &GenlockLevel1[0], NONE, GenlockGen},
; rs232cmd.c  557	};
; rs232cmd.c  558	
; rs232cmd.c  559	struct CMD_STRUCT code GenlockLevel1[3] = {
	DD	_GenlockGen
	SYMB	IDEN, "GenlockLevel1", _GenlockLevel1, #509, 129, 0
	SYMB	ALAB, _GenlockLevel1, #509
	PUBLIC	_GenlockLevel1
	ALIGN	1
_GenlockLevel1:
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_GenlockLevel1+24
	DD	000000000H,000000000H
	DD	_GenlockGenSystem,_DELAYCmdTxt,_DELCmdTxt
	DD	_GenlockLevel1+48
	DD	000000000H,000000000H
	DD	_GenlockGenDelay,_CALIBRATECmdTxt,_CALCmdTxt
	DD	000000000H
	DD	_GenlockLevel1_1
; rs232cmd.c  560		{ SYSTEMCmdTxt, 	 SYSTCmdTxt, &GenlockLevel1[1], NULL, 					  NONE, GenlockGenSystem},
; rs232cmd.c  561		{ DELAYCmdTxt, 	 DELCmdTxt,  &GenlockLevel1[2], NULL, 					  NONE, GenlockGenDelay},
; rs232cmd.c  562		{ CALIBRATECmdTxt, CALCmdTxt,  NULL, 				  &GenlockLevel1_1[0], NONE, NONE},
; rs232cmd.c  563	};
; rs232cmd.c  564	
; rs232cmd.c  565	struct CMD_STRUCT code GenlockLevel1_1[3] = {
	DD	000000000H,000000000H
	SYMB	IDEN, "GenlockLevel1_1", _GenlockLevel1_1, #509, 129, 0
	SYMB	ALAB, _GenlockLevel1_1, #509
	PUBLIC	_GenlockLevel1_1
	ALIGN	1
_GenlockLevel1_1:
	DD	_ENABLECmdTxt,_ENABCmdTxt
	DD	_GenlockLevel1_1+24
	DD	000000000H,000000000H
	DD	_GenlockGenCalibrateEnable,_ADJUSTCmdTxt,_ADJCmdTxt
	DD	_GenlockLevel1_1+48
	DD	000000000H,000000000H
	DD	_GenlockGenCalibrateAdjust,_STORECmdTxt,_STORCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  566		{ ENABLECmdTxt, ENABCmdTxt, &GenlockLevel1_1[1], NULL, NONE, GenlockGenCalibrateEnable},
; rs232cmd.c  567		{ ADJUSTCmdTxt, ADJCmdTxt,  &GenlockLevel1_1[2], NULL, NONE, GenlockGenCalibrateAdjust},
; rs232cmd.c  568		{ STORECmdTxt,  STORCmdTxt, NULL, 					 NULL, NONE, GenlockGenCalibrateStore},
; rs232cmd.c  569	};
; rs232cmd.c  570	// **************************************************************************
; rs232cmd.c  571	/*	CMD:	SUB1:	SUB2:		PARM:
; rs232cmd.c  572			OUTPut
; rs232cmd.c  573				:BB1-3<?>
; rs232cmd.c  574					:SYSTem			INTernal | PALBurst | NTSCburst |F10MHZ
; rs232cmd.c  575					:DELay			<Field>,<Line>,<Time>
; rs232cmd.c  576					:SCHPhase		<-179to 180>
; rs232cmd.c  577	
; rs232cmd.c  578				:CBGenerator<?>
; rs232cmd.c  579					:PATTern 	  <pattern name>
; rs232cmd.c  580					:SYSTem			PAL|NTSC
; rs232cmd.c  581					:DELay			<Field>,<Line>,<Time>
; rs232cmd.c  582					:SCHPhase		<-179to 180>
; rs232cmd.c  583					:EMBaudio<?>
; rs232cmd.c  584						[:SIGNal]	OFF | SILence | F1KHZ
; rs232cmd.c  585						:LEVel
; rs232cmd.c  586	
; rs232cmd.c  587				:AUDio
; rs232cmd.c  588					:OUTPut
; rs232cmd.c  589					:ANALog<?>
; rs232cmd.c  590						:SIGNal
; rs232cmd.c  591						:LEVel
; rs232cmd.c  592						:CLICk
; rs232cmd.c  593					:AESebu<?>
; rs232cmd.c  594						:SYSTem
; rs232cmd.c  595						:SIGNal
; rs232cmd.c  596						:LEVel
; rs232cmd.c  597						:TIMing
; rs232cmd.c  598						:WORDclock
; rs232cmd.c  599						:CLICkperiod
; rs232cmd.c  600	*/
; rs232cmd.c  601	struct CMD_STRUCT code Output[3] = {
	DD	_GenlockGenCalibrateStore
	SYMB	IDEN, "Output", _Output, #509, 129, 0
	SYMB	ALAB, _Output, #509
	PUBLIC	_Output
	ALIGN	1
_Output:
	DD	_BBCmdTxt,_BBCmdTxt
	DD	_Output+24
	DD	_BBGenLevel1,_BBGenSuffix,_BBGen,_CBGENERATORCmdTxt
	DD	_CBGCmdTxt
	DD	_Output+48
	DD	_CBGenLevel1
	DD	000000000H
	DD	_CBGen,_AUDIOCmdTxt,_AUDCmdTxt
	DD	000000000H
	DD	_AudioGenLevel1
	DD	000000000H
; rs232cmd.c  602		{ BBCmdTxt, 			BBCmdTxt,  &Output[1], &BBGenLevel1[0],	 BBGenSuffix, BBGen},
; rs232cmd.c  603		{ CBGENERATORCmdTxt, CBGCmdTxt, &Output[2], &CBGenLevel1[0], 	 NONE,		  CBGen},
; rs232cmd.c  604		{ AUDIOCmdTxt, 		AUDCmdTxt, NULL,		  &AudioGenLevel1[0], NONE,		  AudioGenOutput},
; rs232cmd.c  605	};
; rs232cmd.c  606	
; rs232cmd.c  607	struct CMD_STRUCT code BBGenLevel1[3] = {
	DD	_AudioGenOutput
	SYMB	IDEN, "BBGenLevel1", _BBGenLevel1, #509, 129, 0
	SYMB	ALAB, _BBGenLevel1, #509
	PUBLIC	_BBGenLevel1
	ALIGN	1
_BBGenLevel1:
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_BBGenLevel1+24
	DD	000000000H,000000000H
	DD	_BBGenSystem,_DELAYCmdTxt,_DELCmdTxt
	DD	_BBGenLevel1+48
	DD	000000000H,000000000H
	DD	_BBGenDelay,_SCHPHASECmdTxt,_SCHPCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  608		{ SYSTEMCmdTxt, 	SYSTCmdTxt, &BBGenLevel1[1], NULL, NONE, BBGenSystem},
; rs232cmd.c  609		{ DELAYCmdTxt,	   DELCmdTxt,  &BBGenLevel1[2], NULL, NONE, BBGenDelay},
; rs232cmd.c  610		{ SCHPHASECmdTxt, SCHPCmdTxt, NULL, 			  NULL, NONE, BBGenScHPhase},
; rs232cmd.c  611	};
; rs232cmd.c  612	
; rs232cmd.c  613	struct CMD_STRUCT code CBGenLevel1[5] = {
	DD	_BBGenScHPhase
	SYMB	TYPE, 513, 'Z', #492, 4
	SYMB	IDEN, "CBGenLevel1", _CBGenLevel1, #513, 129, 0
	SYMB	ALAB, _CBGenLevel1, #513
	PUBLIC	_CBGenLevel1
	ALIGN	1
_CBGenLevel1:
	DD	_PATTERNCmdTxt,_PATTCmdTxt
	DD	_CBGenLevel1+24
	DD	000000000H,000000000H
	DD	_CBGenPattern,_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_CBGenLevel1+48
	DD	000000000H,000000000H
	DD	_CBGenSystem,_DELAYCmdTxt,_DELCmdTxt
	DD	_CBGenLevel1+72
	DD	000000000H,000000000H
	DD	_CBGenDelay,_SCHPHASECmdTxt,_SCHPCmdTxt
	DD	_CBGenLevel1+96
	DD	000000000H,000000000H
	DD	_CBGenScHPhase,_EMBAUDIOCmdTxt,_EMBCmdTxt
	DD	000000000H
	DD	_CBGenLevel1_1
	DD	000000000H
; rs232cmd.c  614		{ PATTERNCmdTxt, 	PATTCmdTxt, &CBGenLevel1[1], NULL, 					NONE, CBGenPattern},
; rs232cmd.c  615		{ SYSTEMCmdTxt, 	SYSTCmdTxt, &CBGenLevel1[2], NULL, 					NONE, CBGenSystem},
; rs232cmd.c  616		{ DELAYCmdTxt,	   DELCmdTxt,  &CBGenLevel1[3], NULL, 					NONE, CBGenDelay},
; rs232cmd.c  617		{ SCHPHASECmdTxt, SCHPCmdTxt, &CBGenLevel1[4], NULL, 					NONE, CBGenScHPhase},
; rs232cmd.c  618		{ EMBAUDIOCmdTxt, EMBCmdTxt, 	NULL, 			  &CBGenLevel1_1[0], NONE, CBGenEmbAudioSignal},
; rs232cmd.c  619	};
; rs232cmd.c  620	
; rs232cmd.c  621	struct CMD_STRUCT code CBGenLevel1_1[2] = {
	DD	_CBGenEmbAudioSignal
	SYMB	TYPE, 515, 'Z', #492, 1
	SYMB	IDEN, "CBGenLevel1_1", _CBGenLevel1_1, #515, 129, 0
	SYMB	ALAB, _CBGenLevel1_1, #515
	PUBLIC	_CBGenLevel1_1
	ALIGN	1
_CBGenLevel1_1:
	DD	_SIGNALCmdTxt,_SIGNCmdTxt
	DD	_CBGenLevel1_1+24
	DD	000000000H,000000000H
	DD	_CBGenEmbAudioSignal,_LEVELCmdTxt,_LEVCmdTxt
; rs232cmd.c  622		{ SIGNALCmdTxt, SIGNCmdTxt, &CBGenLevel1_1[1], NULL, NONE, CBGenEmbAudioSignal},
; rs232cmd.c  623		{ LEVELCmdTxt,  LEVCmdTxt,  NULL,				  NULL, NONE, NONE},
; rs232cmd.c  624	};
; rs232cmd.c  625	
; rs232cmd.c  626	struct CMD_STRUCT code AudioGenLevel1[3] = {
	DD	000000000H,000000000H,000000000H,000000000H
	SYMB	IDEN, "AudioGenLevel1", _AudioGenLevel1, #509, 129, 0
	SYMB	ALAB, _AudioGenLevel1, #509
	PUBLIC	_AudioGenLevel1
	ALIGN	1
_AudioGenLevel1:
	DD	_OUTPUTCmdTxt,_OUTPCmdTxt
	DD	_AudioGenLevel1+24
	DD	000000000H,000000000H
	DD	_AudioGenOutput,_ANALOGCmdTxt,_ANALCmdTxt
	DD	_AudioGenLevel1+48
	DD	_AudioGenLevel1_1
	DD	000000000H
	DD	_AudioGenAnalog,_AESEBUCmdTxt,_AESCmdTxt
	DD	000000000H
	DD	_AudioGenLevel1_2
	DD	000000000H
; rs232cmd.c  627		{ OUTPUTCmdTxt, OUTPCmdTxt, &AudioGenLevel1[1], NULL, 					 NONE, AudioGenOutput},
; rs232cmd.c  628		{ ANALOGCmdTxt, ANALCmdTxt, &AudioGenLevel1[2], &AudioGenLevel1_1[0], NONE, AudioGenAnalog},
; rs232cmd.c  629		{ AESEBUCmdTxt, AESCmdTxt,  NULL, 				   &AudioGenLevel1_2[0], NONE, AudioGenAESEBU},
; rs232cmd.c  630	};
; rs232cmd.c  631	
; rs232cmd.c  632	struct CMD_STRUCT code AudioGenLevel1_1[3] = {
	DD	_AudioGenAESEBU
	SYMB	IDEN, "AudioGenLevel1_1", _AudioGenLevel1_1, #509, 129, 0
	SYMB	ALAB, _AudioGenLevel1_1, #509
	PUBLIC	_AudioGenLevel1_1
	ALIGN	1
_AudioGenLevel1_1:
	DD	_SIGNALCmdTxt,_SIGNCmdTxt
	DD	_AudioGenLevel1_1+24
	DD	000000000H,000000000H
	DD	_AudioGenAnalogSignal,_LEVELCmdTxt,_LEVCmdTxt
	DD	_AudioGenLevel1_1+48
	DD	000000000H,000000000H
	DD	_AudioGenAnalogLevel,_CLICKCmdTxt,_CLICCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  633		{ SIGNALCmdTxt, SIGNCmdTxt, &AudioGenLevel1_1[1], NULL, NONE, AudioGenAnalogSignal},
; rs232cmd.c  634		{ LEVELCmdTxt,  LEVCmdTxt,  &AudioGenLevel1_1[2], NULL, NONE, AudioGenAnalogLevel},
; rs232cmd.c  635		{ CLICKCmdTxt,  CLICCmdTxt, NULL, 					  NULL, NONE, AudioGenAnalogClick},
; rs232cmd.c  636	};
; rs232cmd.c  637	
; rs232cmd.c  638	struct CMD_STRUCT code AudioGenLevel1_2[6] = {
	DD	_AudioGenAnalogClick
	SYMB	IDEN, "AudioGenLevel1_2", _AudioGenLevel1_2, #505, 129, 0
	SYMB	ALAB, _AudioGenLevel1_2, #505
	PUBLIC	_AudioGenLevel1_2
	ALIGN	1
_AudioGenLevel1_2:
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_AudioGenLevel1_2+24
	DD	000000000H,000000000H
	DD	_AudioGenAESEBUSystem,_SIGNALCmdTxt,_SIGNCmdTxt
	DD	_AudioGenLevel1_2+48
	DD	000000000H,000000000H
	DD	_AudioGenAESEBUSignal,_LEVELCmdTxt,_LEVCmdTxt
	DD	_AudioGenLevel1_2+72
	DD	000000000H,000000000H
	DD	_AudioGenAESEBULevel,_TIMINGCmdTxt,_TIMCmdTxt
	DD	_AudioGenLevel1_2+96
	DD	000000000H,000000000H
	DD	_AudioGenAESEBUTiming,_WORDCLOCKCmdTxt,_WORDCmdTxt
	DD	_AudioGenLevel1_2+120
	DD	000000000H,000000000H
	DD	_AudioGenAESEBUWordClock,_CLICKCmdTxt,_CLICCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  639		{ SYSTEMCmdTxt, 	 SYSTCmdTxt, &AudioGenLevel1_2[1], NULL, NONE, AudioGenAESEBUSystem},
; rs232cmd.c  640		{ SIGNALCmdTxt, 	 SIGNCmdTxt, &AudioGenLevel1_2[2], NULL, NONE, AudioGenAESEBUSignal},
; rs232cmd.c  641		{ LEVELCmdTxt, 	 LEVCmdTxt,  &AudioGenLevel1_2[3], NULL, NONE, AudioGenAESEBULevel},
; rs232cmd.c  642		{ TIMINGCmdTxt,	 TIMCmdTxt,  &AudioGenLevel1_2[4], NULL, NONE, AudioGenAESEBUTiming},
; rs232cmd.c  643		{ WORDCLOCKCmdTxt, WORDCmdTxt, &AudioGenLevel1_2[5], NULL, NONE, AudioGenAESEBUWordClock},
; rs232cmd.c  644		{ CLICKCmdTxt, 	 CLICCmdTxt, NULL, 					  NULL, NONE, AudioGenAESEBUClick},
; rs232cmd.c  645	};
; rs232cmd.c  646	
; rs232cmd.c  647	// **************************************************************************
; rs232cmd.c  648	/*	CMD:	SUB1:	SUB2:		PARM:
; rs232cmd.c  649			FACTORY
; rs232cmd.c  650				:PASSword
; rs232cmd.c  651	
; rs232cmd.c  652				:RESet
; rs232cmd.c  653	
; rs232cmd.c  654				:V24Circuit
; rs232cmd.c  655					:COMMand
; rs232cmd.c  656					:TRANsparent
; rs232cmd.c  657	
; rs232cmd.c  658				:CHECksum
; rs232cmd.c  659					:CODE
; rs232cmd.c  660					:PLD
; rs232cmd.c  661					:EMBaudio
; rs232cmd.c  662					:PATTern
; rs232cmd.c  663	
; rs232cmd.c  664				:MAINboard
; rs232cmd.c  665					:VERSion
; rs232cmd.c  666					:IDN
; rs232cmd.c  667						:COMPany
; rs232cmd.c  668						:TYPE
; rs232cmd.c  669						:KUNumber
; rs232cmd.c  670						:SWRevision
; rs232cmd.c  671					:SYSTem				PAL|NTSC
; rs232cmd.c  672					:FMSDate
; rs232cmd.c  673						:PRODuction	<year>,<month>,<day>
; rs232cmd.c  674						:UPDate			<year>,<month>,<day>
; rs232cmd.c  675	
; rs232cmd.c  676				:GENLock
; rs232cmd.c  677					[:DATE]				<year>,<month>,<day>
; rs232cmd.c  678					:VERSion
; rs232cmd.c  679					:FREFerence
; rs232cmd.c  680						[:DATE]			<year>,<month>,<day>
; rs232cmd.c  681						:DAC
; rs232cmd.c  682					:UREFerence
; rs232cmd.c  683						[:DATE]	 		<year>,<month>,<day>
; rs232cmd.c  684						:DAC
; rs232cmd.c  685					:HPHZero			<pal>,<ntsc>
; rs232cmd.c  686					:PHASe				<pal>,<ntsc>
; rs232cmd.c  687	
; rs232cmd.c  688				:BB 1
; rs232cmd.c  689					[:DATE]				<year>,<month>,<day>
; rs232cmd.c  690					:VERSion
; rs232cmd.c  691					:SIGNAL				NORMAL|F45MHZ
; rs232cmd.c  692					:PHASe				<pal>,<ntsc>
; rs232cmd.c  693					:SCHPhase			<pal>,<ntsc>
; rs232cmd.c  694					:DAC					<gain>,<offset>,<level>
; rs232cmd.c  695	
; rs232cmd.c  696				:BB 2-3
; rs232cmd.c  697					[:DATE]				<year>,<month>,<day>
; rs232cmd.c  698					:PHASe				<pal>,<ntsc>
; rs232cmd.c  699					:SCHPhase			<pal>,<ntsc>
; rs232cmd.c  700					:DAC					<gain>,<offset>,<level>
; rs232cmd.c  701	
; rs232cmd.c  702				:CBGenerator
; rs232cmd.c  703					[:DATE]				<year>,<month>,<day>
; rs232cmd.c  704					:AGAin				<pal>,<ntsc>
; rs232cmd.c  705					:CGAin				<pal>,<ntsc>
; rs232cmd.c  706					:PHASE				<pal>,<ntsc>
; rs232cmd.c  707					:SCHPhase			<pal>,<ntsc>
; rs232cmd.c  708	
; rs232cmd.c  709				:AUDio
; rs232cmd.c  710					[:STATus]
; rs232cmd.c  711					:DATE					<year>,<month>,<day>
; rs232cmd.c  712					:ALEVel				<left>,<right>
; rs232cmd.c  713	
; rs232cmd.c  714				:PLD
; rs232cmd.c  715					:VERSion			<video>,<audio>
; rs232cmd.c  716	
; rs232cmd.c  717				:TCXO
; rs232cmd.c  718					[:STATus]
; rs232cmd.c  719	
; rs232cmd.c  720				:MMCH						<subaddress>[,<data>]
; rs232cmd.c  721	
; rs232cmd.c  722	*/									
; rs232cmd.c  723	
; rs232cmd.c  724	struct CMD_STRUCT code Factory[12] = {
	DD	_AudioGenAESEBUClick
	SYMB	IDEN, "Factory", _Factory, #501, 129, 0
	SYMB	ALAB, _Factory, #501
	PUBLIC	_Factory
	ALIGN	1
_Factory:
	DD	_PASSWORDCmdTxt,_PASSCmdTxt
	DD	_Factory+24
	DD	000000000H,000000000H
	DD	_FactPassword,_RESETCmdTxt,_RESCmdTxt
	DD	_Factory+48
	DD	000000000H,000000000H
	DD	_FactReset,_V24CIRCUITCmdTxt,_V24CCmdTxt
	DD	_Factory+72
	DD	_FactoryLevel1
	DD	000000000H,000000000H
	DD	_CHECKSUMCmdTxt,_CHECCmdTxt
	DD	_Factory+96
	DD	_FactoryLevel9
	DD	000000000H,000000000H
	DD	_MAINBOARDCmdTxt,_MAINCmdTxt
	DD	_Factory+120
	DD	_FactoryLevel2
	DD	000000000H,000000000H
	DD	_GENLOCKCmdTxt,_GENLCmdTxt
	DD	_Factory+144
	DD	_FactoryLevel3
	DD	000000000H
	DD	_FactGenlockGenDate,_BBCmdTxt,_BBCmdTxt
	DD	_Factory+168
	DD	_FactoryLevel4,_BBGenSuffix,_FactBBGenDate
	DD	_CBGENERATORCmdTxt,_CBGCmdTxt
	DD	_Factory+192
	DD	_FactoryLevel5
	DD	000000000H
	DD	_FactCBGenDate,_AUDIOCmdTxt,_AUDCmdTxt
	DD	_Factory+216
	DD	_FactoryLevel6
	DD	000000000H
	DD	_FactAudioGenStatus,_PLDCmdTxt,_PLDCmdTxt
	DD	_Factory+240
	DD	_FactoryLevel7
	DD	000000000H
	DD	_FactPLDVersion,_TCXOCmdTxt,_TCXOCmdTxt
	DD	_Factory+264
	DD	_FactoryLevel8
	DD	000000000H
	DD	_FactTCXOStatus,_MMCHIPCmdTxt,_MMCHCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  725		{ PASSWORDCmdTxt, 	PASSCmdTxt, &Factory[1],  NULL,					NONE, 		 FactPassword},
; rs232cmd.c  726		{ RESETCmdTxt, 		RESCmdTxt,  &Factory[2],  NULL,					NONE, 		 FactReset},
; rs232cmd.c  727		{ V24CIRCUITCmdTxt, 	V24CCmdTxt, &Factory[3],  &FactoryLevel1[0], NONE, 		 NONE},
; rs232cmd.c  728		{ CHECKSUMCmdTxt, 	CHECCmdTxt, &Factory[4],  &FactoryLevel9[0], NONE,		  	 NONE},
; rs232cmd.c  729		{ MAINBOARDCmdTxt, 	MAINCmdTxt, &Factory[5],  &FactoryLevel2[0], NONE,		  	 NONE},
; rs232cmd.c  730		{ GENLOCKCmdTxt, 		GENLCmdTxt,	&Factory[6],  &FactoryLevel3[0], NONE,		  	 FactGenlockGenDate},
; rs232cmd.c  731		{ BBCmdTxt, 			BBCmdTxt, 	&Factory[7],  &FactoryLevel4[0], BBGenSuffix, FactBBGenDate},
; rs232cmd.c  732		{ CBGENERATORCmdTxt, CBGCmdTxt, 	&Factory[8],  &FactoryLevel5[0], NONE,		  	 FactCBGenDate},
; rs232cmd.c  733		{ AUDIOCmdTxt, 		AUDCmdTxt, 	&Factory[9],  &FactoryLevel6[0], NONE,		  	 FactAudioGenStatus},
; rs232cmd.c  734		{ PLDCmdTxt, 			PLDCmdTxt, 	&Factory[10], &FactoryLevel7[0], NONE,			 FactPLDVersion},
; rs232cmd.c  735		{ TCXOCmdTxt, 			TCXOCmdTxt,	&Factory[11], &FactoryLevel8[0], NONE,			 FactTCXOStatus},
; rs232cmd.c  736		{ MMCHIPCmdTxt, 		MMCHCmdTxt, NULL,			  NULL,					NONE,			 FactMultiMediaChip},
; rs232cmd.c  737	};
; rs232cmd.c  738	
; rs232cmd.c  739	struct CMD_STRUCT code FactoryLevel1[2] = {
	DD	_FactMultiMediaChip
	SYMB	IDEN, "FactoryLevel1", _FactoryLevel1, #515, 129, 0
	SYMB	ALAB, _FactoryLevel1, #515
	PUBLIC	_FactoryLevel1
	ALIGN	1
_FactoryLevel1:
	DD	_COMMANDCmdTxt,_COMMCmdTxt
	DD	_FactoryLevel1+24
	DD	000000000H,000000000H
	DD	_FactV24Command,_TRANSPARENTCmdTxt,_TRANCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  740		{ COMMANDCmdTxt, 		 COMMCmdTxt, &FactoryLevel1[1], NULL, NONE, FactV24Command},
; rs232cmd.c  741		{ TRANSPARENTCmdTxt, TRANCmdTxt, NULL,						  NULL, NONE, FactV24Transparent},
; rs232cmd.c  742	};
; rs232cmd.c  743	
; rs232cmd.c  744	struct CMD_STRUCT code FactoryLevel9[5] = {
	DD	_FactV24Transparent
	SYMB	IDEN, "FactoryLevel9", _FactoryLevel9, #513, 129, 0
	SYMB	ALAB, _FactoryLevel9, #513
	PUBLIC	_FactoryLevel9
	ALIGN	1
_FactoryLevel9:
	DD	_CODECmdTxt,_CODECmdTxt
	DD	_FactoryLevel9+24
	DD	000000000H,000000000H
	DD	_FactChecksumCode,_PLDCmdTxt,_PLDCmdTxt
	DD	_FactoryLevel9+48
	DD	000000000H,000000000H
	DD	_FactChecksumPLD,_EMBAUDIOCmdTxt,_EMBCmdTxt
	DD	_FactoryLevel9+72
	DD	000000000H,000000000H
	DD	_FactChecksumEmbAudio,_PATTERNCmdTxt,_PATTCmdTxt
	DD	_FactoryLevel9+96
	DD	000000000H,000000000H
	DD	_FactChecksumPattern,_RANGECmdTxt,_RANGCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  745		{ CODECmdTxt, 		CODECmdTxt, &FactoryLevel9[1], NULL, NONE, FactChecksumCode},
; rs232cmd.c  746		{ PLDCmdTxt,  	 	PLDCmdTxt,  &FactoryLevel9[2], NULL, NONE, FactChecksumPLD},
; rs232cmd.c  747		{ EMBAUDIOCmdTxt, EMBCmdTxt,  &FactoryLevel9[3], NULL, NONE, FactChecksumEmbAudio},
; rs232cmd.c  748		{ PATTERNCmdTxt, 	PATTCmdTxt, &FactoryLevel9[4], NULL, NONE, FactChecksumPattern},
; rs232cmd.c  749		{ RANGECmdTxt, 	RANGCmdTxt, NULL, 				 NULL, NONE, FactChecksumRange},
; rs232cmd.c  750	};
; rs232cmd.c  751	
; rs232cmd.c  752	struct CMD_STRUCT code FactoryLevel2[4] = {
	DD	_FactChecksumRange
	SYMB	TYPE, 517, 'Z', #492, 3
	SYMB	IDEN, "FactoryLevel2", _FactoryLevel2, #517, 129, 0
	SYMB	ALAB, _FactoryLevel2, #517
	PUBLIC	_FactoryLevel2
	ALIGN	1
_FactoryLevel2:
	DD	_VERSIONCmdTxt,_VERSCmdTxt
	DD	_FactoryLevel2+24
	DD	000000000H,000000000H
	DD	_FactMainVersion,_IDNCmdTxt,_IDNCmdTxt
	DD	_FactoryLevel2+48
	DD	_FactoryLevel2_2
	DD	000000000H,000000000H
	DD	_SYSTEMCmdTxt,_SYSTCmdTxt
	DD	_FactoryLevel2+72
	DD	000000000H,000000000H
	DD	_FactMainSystem,_FMSDATECmdTxt,_FMSDCmdTxt
	DD	000000000H
	DD	_FactoryLevel2_1
; rs232cmd.c  753		{ VERSIONCmdTxt, 	VERSCmdTxt, &FactoryLevel2[1], NULL, 					 NONE, FactMainVersion},
; rs232cmd.c  754		{ IDNCmdTxt,  	 	IDNCmdTxt,  &FactoryLevel2[2], &FactoryLevel2_2[0], NONE, NONE},
; rs232cmd.c  755		{ SYSTEMCmdTxt, 	SYSTCmdTxt, &FactoryLevel2[3], NULL, 					 NONE, FactMainSystem},
; rs232cmd.c  756		{ FMSDATECmdTxt, 	FMSDCmdTxt, NULL, 				 &FactoryLevel2_1[0], NONE, NONE},
; rs232cmd.c  757	};
; rs232cmd.c  758	
; rs232cmd.c  759	struct CMD_STRUCT code FactoryLevel2_1[2] = {
	DD	000000000H,000000000H
	SYMB	IDEN, "FactoryLevel2_1", _FactoryLevel2_1, #515, 129, 0
	SYMB	ALAB, _FactoryLevel2_1, #515
	PUBLIC	_FactoryLevel2_1
	ALIGN	1
_FactoryLevel2_1:
	DD	_PRODUCTIONCmdTxt,_PRODCmdTxt
	DD	_FactoryLevel2_1+24
	DD	000000000H,000000000H
	DD	_FactMainFMSDateProd,_UPDATECmdTxt,_UPDCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  760		{ PRODUCTIONCmdTxt, PRODCmdTxt, &FactoryLevel2_1[1], NULL, NONE, FactMainFMSDateProd},
; rs232cmd.c  761		{ UPDATECmdTxt, 	  UPDCmdTxt,  NULL, 					  NULL, NONE, FactMainFMSDateUpd},
; rs232cmd.c  762	};
; rs232cmd.c  763	
; rs232cmd.c  764	struct CMD_STRUCT code FactoryLevel2_2[4] = {
	DD	_FactMainFMSDateUpd
	SYMB	IDEN, "FactoryLevel2_2", _FactoryLevel2_2, #517, 129, 0
	SYMB	ALAB, _FactoryLevel2_2, #517
	PUBLIC	_FactoryLevel2_2
	ALIGN	1
_FactoryLevel2_2:
	DD	_COMPANYCmdTxt,_COMPCmdTxt
	DD	_FactoryLevel2_2+24
	DD	000000000H,000000000H
	DD	_FactMainIDNCompany,_TYPECmdTxt,_TYPECmdTxt
	DD	_FactoryLevel2_2+48
	DD	000000000H,000000000H
	DD	_FactMainIDNType,_KUNUMBERCmdTxt,_KUNCmdTxt
	DD	_FactoryLevel2_2+72
	DD	000000000H,000000000H
	DD	_FactMainIDNKUNumber,_SWREVISIONCmdTxt,_SWRCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  765		{ COMPANYCmdTxt,    COMPCmdTxt, &FactoryLevel2_2[1], NULL, NONE, FactMainIDNCompany},
; rs232cmd.c  766		{ TYPECmdTxt,  	  TYPECmdTxt, &FactoryLevel2_2[2], NULL, NONE, FactMainIDNType},
; rs232cmd.c  767		{ KUNUMBERCmdTxt,   KUNCmdTxt,  &FactoryLevel2_2[3], NULL, NONE, FactMainIDNKUNumber},
; rs232cmd.c  768		{ SWREVISIONCmdTxt, SWRCmdTxt,  NULL, 					  NULL, NONE, FactMainIDNSWRevision},
; rs232cmd.c  769	};
; rs232cmd.c  770	
; rs232cmd.c  771	struct CMD_STRUCT code FactoryLevel3[6] = {
	DD	_FactMainIDNSWRevision
	SYMB	IDEN, "FactoryLevel3", _FactoryLevel3, #505, 129, 0
	SYMB	ALAB, _FactoryLevel3, #505
	PUBLIC	_FactoryLevel3
	ALIGN	1
_FactoryLevel3:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel3+24
	DD	000000000H,000000000H
	DD	_FactGenlockGenDate,_VERSIONCmdTxt,_VERSCmdTxt
	DD	_FactoryLevel3+48
	DD	000000000H,000000000H
	DD	_FactGenlockGenVersion,_FREFERENCECmdTxt,_FREFCmdTxt
	DD	_FactoryLevel3+72
	DD	_FactoryLevel3_1
	DD	000000000H
	DD	_FactGenlockGenFRefDate,_UREFERENCECmdTxt,_UREFCmdTxt
	DD	_FactoryLevel3+96
	DD	_FactoryLevel3_2
	DD	000000000H
	DD	_FactGenlockGenURefDate,_HPHZEROCmdTxt,_HPHZCmdTxt
	DD	_FactoryLevel3+120
	DD	000000000H,000000000H
	DD	_FactGenlockGenHPHZero,_PHASECmdTxt,_PHASCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  772		{ DATECmdTxt,  	  DATECmdTxt, &FactoryLevel3[1], NULL, 					NONE, FactGenlockGenDate},
; rs232cmd.c  773		{ VERSIONCmdTxt,    VERSCmdTxt, &FactoryLevel3[2], NULL, 					NONE, FactGenlockGenVersion},
; rs232cmd.c  774		{ FREFERENCECmdTxt, FREFCmdTxt, &FactoryLevel3[3], &FactoryLevel3_1[0], NONE, FactGenlockGenFRefDate},
; rs232cmd.c  775		{ UREFERENCECmdTxt, UREFCmdTxt, &FactoryLevel3[4], &FactoryLevel3_2[0], NONE, FactGenlockGenURefDate},
; rs232cmd.c  776		{ HPHZEROCmdTxt,    HPHZCmdTxt, &FactoryLevel3[5], NULL,						NONE, FactGenlockGenHPHZero},
; rs232cmd.c  777		{ PHASECmdTxt,  	  PHASCmdTxt, NULL, 					NULL,						NONE, FactGenlockGenPhase},
; rs232cmd.c  778	};
; rs232cmd.c  779	
; rs232cmd.c  780	struct CMD_STRUCT code FactoryLevel3_1[2] = {
	DD	_FactGenlockGenPhase
	SYMB	IDEN, "FactoryLevel3_1", _FactoryLevel3_1, #515, 129, 0
	SYMB	ALAB, _FactoryLevel3_1, #515
	PUBLIC	_FactoryLevel3_1
	ALIGN	1
_FactoryLevel3_1:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel3_1+24
	DD	000000000H,000000000H
	DD	_FactGenlockGenFRefDate,_DACCmdTxt,_DACCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  781		{ DATECmdTxt, DATECmdTxt, &FactoryLevel3_1[1], NULL, NONE, FactGenlockGenFRefDate},
; rs232cmd.c  782		{ DACCmdTxt,  DACCmdTxt,  NULL, 					  NULL, NONE, FactGenlockGenFRefDAC},
; rs232cmd.c  783	};
; rs232cmd.c  784	
; rs232cmd.c  785	struct CMD_STRUCT code FactoryLevel3_2[2] = {
	DD	_FactGenlockGenFRefDAC
	SYMB	IDEN, "FactoryLevel3_2", _FactoryLevel3_2, #515, 129, 0
	SYMB	ALAB, _FactoryLevel3_2, #515
	PUBLIC	_FactoryLevel3_2
	ALIGN	1
_FactoryLevel3_2:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel3_2+24
	DD	000000000H,000000000H
	DD	_FactGenlockGenURefDate,_DACCmdTxt,_DACCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  786		{ DATECmdTxt, DATECmdTxt, &FactoryLevel3_2[1], NULL, NONE, FactGenlockGenURefDate},
; rs232cmd.c  787		{ DACCmdTxt,  DACCmdTxt,  NULL, 					  NULL, NONE, FactGenlockGenURefDAC},
; rs232cmd.c  788	};
; rs232cmd.c  789	
; rs232cmd.c  790	struct CMD_STRUCT code FactoryLevel4[6] = {
	DD	_FactGenlockGenURefDAC
	SYMB	IDEN, "FactoryLevel4", _FactoryLevel4, #505, 129, 0
	SYMB	ALAB, _FactoryLevel4, #505
	PUBLIC	_FactoryLevel4
	ALIGN	1
_FactoryLevel4:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel4+24
	DD	000000000H,000000000H
	DD	_FactBBGenDate,_VERSIONCmdTxt,_VERSCmdTxt
	DD	_FactoryLevel4+48
	DD	000000000H,000000000H
	DD	_FactBBGenVersion,_SIGNALCmdTxt,_SIGNCmdTxt
	DD	_FactoryLevel4+72
	DD	000000000H,000000000H
	DD	_FactBBGenSignal,_PHASECmdTxt,_PHASCmdTxt
	DD	_FactoryLevel4+96
	DD	000000000H,000000000H
	DD	_FactBBGenPhase,_SCHPHASECmdTxt,_SCHPCmdTxt
	DD	_FactoryLevel4+120
	DD	000000000H,000000000H
	DD	_FactBBGenScHPhase,_DACCmdTxt,_DACCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  791		{ DATECmdTxt,  	DATECmdTxt, &FactoryLevel4[1], NULL, NONE, FactBBGenDate},
; rs232cmd.c  792		{ VERSIONCmdTxt, 	VERSCmdTxt, &FactoryLevel4[2], NULL, NONE, FactBBGenVersion},
; rs232cmd.c  793		{ SIGNALCmdTxt, 	SIGNCmdTxt, &FactoryLevel4[3], NULL, NONE, FactBBGenSignal},
; rs232cmd.c  794		{ PHASECmdTxt, 	PHASCmdTxt, &FactoryLevel4[4], NULL, NONE, FactBBGenPhase},
; rs232cmd.c  795		{ SCHPHASECmdTxt,	SCHPCmdTxt, &FactoryLevel4[5], NULL, NONE, FactBBGenScHPhase},
; rs232cmd.c  796		{ DACCmdTxt,  		DACCmdTxt,  NULL, 				 NULL, NONE, FactBBGenDAC},
; rs232cmd.c  797	};
; rs232cmd.c  798	
; rs232cmd.c  799	struct CMD_STRUCT code FactoryLevel5[5] = {
	DD	_FactBBGenDAC
	SYMB	IDEN, "FactoryLevel5", _FactoryLevel5, #513, 129, 0
	SYMB	ALAB, _FactoryLevel5, #513
	PUBLIC	_FactoryLevel5
	ALIGN	1
_FactoryLevel5:
	DD	_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel5+24
	DD	000000000H,000000000H
	DD	_FactCBGenDate,_AGAINCmdTxt,_AGACmdTxt
	DD	_FactoryLevel5+48
	DD	000000000H,000000000H
	DD	_FactCBGenAGain,_CGAINCmdTxt,_CGACmdTxt
	DD	_FactoryLevel5+72
	DD	000000000H,000000000H
	DD	_FactCBGenCGain,_PHASECmdTxt,_PHASCmdTxt
	DD	_FactoryLevel5+96
	DD	000000000H,000000000H
	DD	_FactCBGenPhase,_SCHPHASECmdTxt,_SCHPCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  800		{ DATECmdTxt,  	DATECmdTxt, &FactoryLevel5[1], NULL, NONE, FactCBGenDate},
; rs232cmd.c  801		{ AGAINCmdTxt, 	AGACmdTxt, 	&FactoryLevel5[2], NULL, NONE, FactCBGenAGain},
; rs232cmd.c  802		{ CGAINCmdTxt, 	CGACmdTxt, 	&FactoryLevel5[3], NULL, NONE, FactCBGenCGain},
; rs232cmd.c  803		{ PHASECmdTxt, 	PHASCmdTxt, &FactoryLevel5[4], NULL, NONE, FactCBGenPhase},
; rs232cmd.c  804		{ SCHPHASECmdTxt,	SCHPCmdTxt, NULL, 				 NULL, NONE, FactCBGenScHPhase},
; rs232cmd.c  805	};
; rs232cmd.c  806	
; rs232cmd.c  807	struct CMD_STRUCT code FactoryLevel6[3] = {
	DD	_FactCBGenScHPhase
	SYMB	IDEN, "FactoryLevel6", _FactoryLevel6, #509, 129, 0
	SYMB	ALAB, _FactoryLevel6, #509
	PUBLIC	_FactoryLevel6
	ALIGN	1
_FactoryLevel6:
	DD	_STATUSCmdTxt,_STATCmdTxt
	DD	_FactoryLevel6+24
	DD	000000000H,000000000H
	DD	_FactAudioGenStatus,_DATECmdTxt,_DATECmdTxt
	DD	_FactoryLevel6+48
	DD	000000000H,000000000H
	DD	_FactAudioGenDate,_ALEVELCmdTxt,_ALEVCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  808		{ STATUSCmdTxt, STATCmdTxt, &FactoryLevel6[1], NULL, NONE, FactAudioGenStatus},
; rs232cmd.c  809		{ DATECmdTxt,   DATECmdTxt, &FactoryLevel6[2], NULL, NONE, FactAudioGenDate},
; rs232cmd.c  810		{ ALEVELCmdTxt, ALEVCmdTxt, NULL, 				  NULL, NONE, FactAudioGenLevel},
; rs232cmd.c  811	};
; rs232cmd.c  812	
; rs232cmd.c  813	struct CMD_STRUCT code FactoryLevel7[1] = {
	DD	_FactAudioGenLevel
	SYMB	IDEN, "FactoryLevel7", _FactoryLevel7, #511, 129, 0
	SYMB	ALAB, _FactoryLevel7, #511
	PUBLIC	_FactoryLevel7
	ALIGN	1
_FactoryLevel7:
	DD	_VERSIONCmdTxt,_VERSCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  814		{ VERSIONCmdTxt, 	VERSCmdTxt, NULL, NULL, NONE, FactPLDVersion},
; rs232cmd.c  815	};
; rs232cmd.c  816	
; rs232cmd.c  817	struct CMD_STRUCT code FactoryLevel8[1] = {
	DD	_FactPLDVersion
	SYMB	IDEN, "FactoryLevel8", _FactoryLevel8, #511, 129, 0
	SYMB	ALAB, _FactoryLevel8, #511
	PUBLIC	_FactoryLevel8
	ALIGN	1
_FactoryLevel8:
	DD	_STATUSCmdTxt,_STATCmdTxt
	DD	000000000H,000000000H,000000000H
; rs232cmd.c  818		{ STATUSCmdTxt, STATCmdTxt, NULL, NULL, NONE, FactTCXOStatus},
; rs232cmd.c  819	};
; rs232cmd.c  820	
; rs232cmd.c  821	//**************************************************************************
; rs232cmd.c  822	// The following parameter structures are based on the enumerated types
; rs232cmd.c  823	//  defined in TABLES.H, ie. DO NOT change the order of these names. If
; rs232cmd.c  824	//  the order is changed in TABLES.H it must also be changed here.
; rs232cmd.c  825	
; rs232cmd.c  826	struct PAR_STRUCT code SAVEPar[1] = {
	DD	_FactTCXOStatus
	SYMB	TYPE, 520, 'n', #519, 129
	SYMB	TYPE, 521, 'P', #520
	SYMB	TYPE, 519, "PAR_STRUCT", 'S', 12,\
		 "LongName", #491, 0,\
		 "ShortName", #491, 4,\
		 "SameLevel", #521, 8
	SYMB	TYPE, 522, 'Z', #519, 0
	SYMB	IDEN, "SAVEPar", _SAVEPar, #522, 129, 0
	SYMB	ALAB, _SAVEPar, #522
	PUBLIC	_SAVEPar
	ALIGN	1
_SAVEPar:
	DD	_SAVEParTxt,_SAVEParTxt
; rs232cmd.c  827		{ SAVEParTxt, SAVEParTxt, NULL}
; rs232cmd.c  828	};
; rs232cmd.c  829	
; rs232cmd.c  830	struct PAR_STRUCT code GenlockSystemPar[4] = {
	DD	000000000H
	SYMB	TYPE, 524, 'Z', #519, 3
	SYMB	IDEN, "GenlockSystemPar", _GenlockSystemPar, #524, 129, 0
	SYMB	ALAB, _GenlockSystemPar, #524
	PUBLIC	_GenlockSystemPar
	ALIGN	1
_GenlockSystemPar:
	DD	_INTERNALParTxt,_INTParTxt
	DD	_GenlockSystemPar+12
	DD	_PALBURSTParTxt,_PALBParTxt
	DD	_GenlockSystemPar+24
	DD	_NTSCBURSTParTxt,_NTSCParTxt
	DD	_GenlockSystemPar+36
	DD	_F10MHzParTxt,_F10MHzParTxt
; rs232cmd.c  831		{ INTERNALParTxt,  INTParTxt, 	&GenlockSystemPar[1]},
; rs232cmd.c  832		{ PALBURSTParTxt,  PALBParTxt, 	&GenlockSystemPar[2]},
; rs232cmd.c  833		{ NTSCBURSTParTxt, NTSCParTxt, 	&GenlockSystemPar[3]},
; rs232cmd.c  834		{ F10MHzParTxt, 	 F10MHzParTxt, NULL},
; rs232cmd.c  835	};
; rs232cmd.c  836	
; rs232cmd.c  837	struct PAR_STRUCT code SystemPar[3] = {
	DD	000000000H
	SYMB	TYPE, 526, 'Z', #519, 2
	SYMB	IDEN, "SystemPar", _SystemPar, #526, 129, 0
	SYMB	ALAB, _SystemPar, #526
	PUBLIC	_SystemPar
	ALIGN	1
_SystemPar:
	DD	_PALParTxt,_PALParTxt
	DD	_SystemPar+12
	DD	_PAL_IDParTxt,_PAL_IDParTxt
	DD	_SystemPar+24
	DD	_NTSCParTxt,_NTSCParTxt
; rs232cmd.c  838		{ PALParTxt, 	 PALParTxt, &SystemPar[1]},
; rs232cmd.c  839		{ PAL_IDParTxt, PAL_IDParTxt, &SystemPar[2]},
; rs232cmd.c  840		{ NTSCParTxt, 	 NTSCParTxt, NULL},
; rs232cmd.c  841	};
; rs232cmd.c  842	
; rs232cmd.c  843	struct PAR_STRUCT code CBPatternPar[23] = {
	DD	000000000H
	SYMB	TYPE, 528, 'Z', #519, 22
	SYMB	IDEN, "CBPatternPar", _CBPatternPar, #528, 129, 0
	SYMB	ALAB, _CBPatternPar, #528
	PUBLIC	_CBPatternPar
	ALIGN	1
_CBPatternPar:
	DD	_CBSMPTEParTxt,_CBSMParTxt
	DD	_CBPatternPar+12
	DD	_CBEBUParTxt,_CBEBParTxt
	DD	_CBPatternPar+24
	DD	_CBFCCParTxt,_CBFCParTxt
	DD	_CBPatternPar+36
	DD	_CBEBU8ParTxt,_CBEB8ParTxt
	DD	_CBPatternPar+48
	DD	_CB100ParTxt,_CB100ParTxt
	DD	_CBPatternPar+60
	DD	_CBGREY75ParTxt,_CBGR75ParTxt
	DD	_CBPatternPar+72
	DD	_CBRED75ParTxt,_CBR75ParTxt
	DD	_CBPatternPar+84
	DD	_RED75ParTxt,_RED75ParTxt
	DD	_CBPatternPar+96
	DD	_MULTIBURSTParTxt,_MULTParTxt
	DD	_CBPatternPar+108
	DD	_CCIR18ParTxt,_CCIR18ParTxt
	DD	_CBPatternPar+120
	DD	_WIN10ParTxt,_WIN10ParTxt
	DD	_CBPatternPar+132
	DD	_WIN15ParTxt,_WIN15ParTxt
	DD	_CBPatternPar+144
	DD	_WIN20ParTxt,_WIN20ParTxt
	DD	_CBPatternPar+156
	DD	_WIN100ParTxt,_WIN100ParTxt
	DD	_CBPatternPar+168
	DD	_BLWH15ParTxt,_BLWH15ParTxt
	DD	_CBPatternPar+180
	DD	_WHITE100ParTxt,_WHIT100ParTxt
	DD	_CBPatternPar+192
	DD	_BLACKParTxt,_BLACParTxt
	DD	_CBPatternPar+204
	DD	_SDICHECKParTxt,_SDICParTxt
	DD	_CBPatternPar+216
	DD	_DGREYParTxt,_DGRParTxt
	DD	_CBPatternPar+228
	DD	_STAIRCASE5ParTxt,_STA5ParTxt
	DD	_CBPatternPar+240
	DD	_STAIRCASE10ParTxt,_STA10ParTxt
	DD	_CBPatternPar+252
	DD	_CROSSHATCHParTxt,_CROSParTxt
	DD	_CBPatternPar+264
	DD	_PLUGEParTxt,_PLUGParTxt
; rs232cmd.c  844		{ CBSMPTEParTxt, 		CBSMParTxt, 	&CBPatternPar[1]},
; rs232cmd.c  845		{ CBEBUParTxt, 	 	CBEBParTxt, 	&CBPatternPar[2]},
; rs232cmd.c  846		{ CBFCCParTxt, 	 	CBFCParTxt, 	&CBPatternPar[3]},
; rs232cmd.c  847		{ CBEBU8ParTxt,  		CBEB8ParTxt, 	&CBPatternPar[4]},
; rs232cmd.c  848		{ CB100ParTxt, 	 	CB100ParTxt, 	&CBPatternPar[5]},
; rs232cmd.c  849		{ CBGREY75ParTxt, 	CBGR75ParTxt, 	&CBPatternPar[6]},
; rs232cmd.c  850		{ CBRED75ParTxt, 		CBR75ParTxt, 	&CBPatternPar[7]},
; rs232cmd.c  851		{ RED75ParTxt, 		RED75ParTxt, 	&CBPatternPar[8]},
; rs232cmd.c  852	
; rs232cmd.c  853		{ MULTIBURSTParTxt,	MULTParTxt, 	&CBPatternPar[9]},
; rs232cmd.c  854		{ CCIR18ParTxt,	 	CCIR18ParTxt,	&CBPatternPar[10]},
; rs232cmd.c  855																				
; rs232cmd.c  856		{ WIN10ParTxt, 		WIN10ParTxt, 	&CBPatternPar[11]},
; rs232cmd.c  857		{ WIN15ParTxt, 		WIN15ParTxt,	&CBPatternPar[12]},
; rs232cmd.c  858		{ WIN20ParTxt, 		WIN20ParTxt, 	&CBPatternPar[13]},
; rs232cmd.c  859		{ WIN100ParTxt, 		WIN100ParTxt, 	&CBPatternPar[14]},
; rs232cmd.c  860		{ BLWH15ParTxt, 		BLWH15ParTxt, 	&CBPatternPar[15]},
; rs232cmd.c  861		{ WHITE100ParTxt, 	WHIT100ParTxt, &CBPatternPar[16]},
; rs232cmd.c  862		{ BLACKParTxt, 		BLACParTxt, 	&CBPatternPar[17]},
; rs232cmd.c  863	
; rs232cmd.c  864		{ SDICHECKParTxt, 	SDICParTxt, 	&CBPatternPar[18]},
; rs232cmd.c  865		{ DGREYParTxt, 		DGRParTxt, 		&CBPatternPar[19]},
; rs232cmd.c  866	
; rs232cmd.c  867		{ STAIRCASE5ParTxt, 	STA5ParTxt, 	&CBPatternPar[20]},
; rs232cmd.c  868		{ STAIRCASE10ParTxt, STA10ParTxt, 	&CBPatternPar[21]},
; rs232cmd.c  869	
; rs232cmd.c  870		{ CROSSHATCHParTxt, 	CROSParTxt, 	&CBPatternPar[22]},
; rs232cmd.c  871		{ PLUGEParTxt, 		PLUGParTxt, 	NULL},
; rs232cmd.c  872	};
; rs232cmd.c  873	
; rs232cmd.c  874	struct PAR_STRUCT code EmbAudioSignalPar[3] = {
	DD	000000000H
	SYMB	IDEN, "EmbAudioSignalPar", _EmbAudioSignalPar, #526, 129, 0
	SYMB	ALAB, _EmbAudioSignalPar, #526
	PUBLIC	_EmbAudioSignalPar
	ALIGN	1
_EmbAudioSignalPar:
	DD	_OFFParTxt,_OFFParTxt
	DD	_EmbAudioSignalPar+12
	DD	_SILENCEParTxt,_SILParTxt
	DD	_EmbAudioSignalPar+24
	DD	_S1KHZParTxt,_S1KHZParTxt
; rs232cmd.c  875		{ OFFParTxt, 	  	OFFParTxt, 		&EmbAudioSignalPar[1]},
; rs232cmd.c  876		{ SILENCEParTxt, 	SILParTxt, 		&EmbAudioSignalPar[2]},
; rs232cmd.c  877		{ S1KHZParTxt,   	S1KHZParTxt, 	NULL},
; rs232cmd.c  878	};
; rs232cmd.c  879	
; rs232cmd.c  880	struct PAR_STRUCT code AudioOutputPar[2] = {
	DD	000000000H
	SYMB	TYPE, 530, 'Z', #519, 1
	SYMB	IDEN, "AudioOutputPar", _AudioOutputPar, #530, 129, 0
	SYMB	ALAB, _AudioOutputPar, #530
	PUBLIC	_AudioOutputPar
	ALIGN	1
_AudioOutputPar:
	DD	_ANALOGParTxt,_ANALParTxt
	DD	_AudioOutputPar+12
	DD	_AESEBUParTxt,_AESParTxt
; rs232cmd.c  881		{ ANALOGParTxt, ANALParTxt, &AudioOutputPar[1]},
; rs232cmd.c  882		{ AESEBUParTxt, AESParTxt,  NULL},
; rs232cmd.c  883	};
; rs232cmd.c  884	
; rs232cmd.c  885	struct PAR_STRUCT code AESEBUSystemPar[2] = {
	DD	000000000H
	SYMB	IDEN, "AESEBUSystemPar", _AESEBUSystemPar, #530, 129, 0
	SYMB	ALAB, _AESEBUSystemPar, #530
	PUBLIC	_AESEBUSystemPar
	ALIGN	1
_AESEBUSystemPar:
	DD	_PALParTxt,_PALParTxt
	DD	_AESEBUSystemPar+12
	DD	_NTSCParTxt,_NTSCParTxt
; rs232cmd.c  886		{ PALParTxt,  PALParTxt,  &AESEBUSystemPar[1]},
; rs232cmd.c  887		{ NTSCParTxt, NTSCParTxt, NULL},
; rs232cmd.c  888	};
; rs232cmd.c  889	
; rs232cmd.c  890	struct PAR_STRUCT code AudioSignalPar[4] = {
	DD	000000000H
	SYMB	IDEN, "AudioSignalPar", _AudioSignalPar, #524, 129, 0
	SYMB	ALAB, _AudioSignalPar, #524
	PUBLIC	_AudioSignalPar
	ALIGN	1
_AudioSignalPar:
	DD	_S500HZParTxt,_S500HZParTxt
	DD	_AudioSignalPar+12
	DD	_S1KHZParTxt,_S1KHZParTxt
	DD	_AudioSignalPar+24
	DD	_SEBU1KHZParTxt,_SEBU1KHZParTxt
	DD	_AudioSignalPar+36
	DD	_S8KHZParTxt,_S8KHZParTxt
; rs232cmd.c  891		{ S500HZParTxt, 	S500HZParTxt, 	 &AudioSignalPar[1]},
; rs232cmd.c  892		{ S1KHZParTxt, 	S1KHZParTxt, 	 &AudioSignalPar[2]},
; rs232cmd.c  893		{ SEBU1KHZParTxt, SEBU1KHZParTxt, &AudioSignalPar[3]},
; rs232cmd.c  894		{ S8KHZParTxt, 	S8KHZParTxt, 	 NULL},
; rs232cmd.c  895	};
; rs232cmd.c  896	
; rs232cmd.c  897	struct PAR_STRUCT code AnalogLevelPar[1] = {
	DD	000000000H
	SYMB	IDEN, "AnalogLevelPar", _AnalogLevelPar, #522, 129, 0
	SYMB	ALAB, _AnalogLevelPar, #522
	PUBLIC	_AnalogLevelPar
	ALIGN	1
_AnalogLevelPar:
	DD	_SILENCEParTxt,_SILParTxt
; rs232cmd.c  898		{ SILENCEParTxt, SILParTxt, NULL},
; rs232cmd.c  899	};
; rs232cmd.c  900	
; rs232cmd.c  901	struct PAR_STRUCT code AESEBULevelPar[1] = {
	DD	000000000H
	SYMB	IDEN, "AESEBULevelPar", _AESEBULevelPar, #522, 129, 0
	SYMB	ALAB, _AESEBULevelPar, #522
	PUBLIC	_AESEBULevelPar
	ALIGN	1
_AESEBULevelPar:
	DD	_SILENCEParTxt,_SILParTxt
; rs232cmd.c  902		{ SILENCEParTxt, SILParTxt, NULL},
; rs232cmd.c  903	};
; rs232cmd.c  904	
; rs232cmd.c  905	struct PAR_STRUCT code AudioFrequencyPar[2] = {
	DD	000000000H
	SYMB	IDEN, "AudioFrequencyPar", _AudioFrequencyPar, #530, 129, 0
	SYMB	ALAB, _AudioFrequencyPar, #530
	PUBLIC	_AudioFrequencyPar
	ALIGN	1
_AudioFrequencyPar:
	DD	_F441KHZParTxt,_F441KHZParTxt
	DD	_AudioFrequencyPar+12
	DD	_F48KHZParTxt,_F48KHZParTxt
; rs232cmd.c  906		{ F441KHZParTxt, F441KHZParTxt, &AudioFrequencyPar[1]},
; rs232cmd.c  907		{ F48KHZParTxt,  F48KHZParTxt,  NULL},
; rs232cmd.c  908	};
; rs232cmd.c  909	
; rs232cmd.c  910	struct PAR_STRUCT code UnitPar[2] = {
	DD	000000000H
	SYMB	IDEN, "UnitPar", _UnitPar, #530, 129, 0
	SYMB	ALAB, _UnitPar, #530
	PUBLIC	_UnitPar
	ALIGN	1
_UnitPar:
	DD	_BBParTxt,_BBParTxt
	DD	_UnitPar+12
	DD	_SPGParTxt,_SPGParTxt
; rs232cmd.c  911		{ BBParTxt,  BBParTxt,  &UnitPar[1]},
; rs232cmd.c  912		{ SPGParTxt, SPGParTxt, NULL},
; rs232cmd.c  913	};
; rs232cmd.c  914	
; rs232cmd.c  915	struct PAR_STRUCT code OffOnPar[2] = {
	DD	000000000H
	SYMB	IDEN, "OffOnPar", _OffOnPar, #530, 129, 0
	SYMB	ALAB, _OffOnPar, #530
	PUBLIC	_OffOnPar
	ALIGN	1
_OffOnPar:
	DD	_OFFParTxt,_OFFParTxt
	DD	_OffOnPar+12
	DD	_ONParTxt,_ONParTxt
; rs232cmd.c  916		{ OFFParTxt, OFFParTxt, &OffOnPar[1]},
; rs232cmd.c  917		{ ONParTxt,  ONParTxt,  NULL},
; rs232cmd.c  918	};
; rs232cmd.c  919	
; rs232cmd.c  920	struct PAR_STRUCT code FactBBGenSignalPar[2] = {
	DD	000000000H
	SYMB	IDEN, "FactBBGenSignalPar", _FactBBGenSignalPar, #530, 129, 0
	SYMB	ALAB, _FactBBGenSignalPar, #530
	PUBLIC	_FactBBGenSignalPar
	ALIGN	1
_FactBBGenSignalPar:
	DD	_NORMALParTxt,_NORMParTxt
	DD	_FactBBGenSignalPar+12
	DD	_F45MHZParTxt,_F45MHZParTxt
; rs232cmd.c  921		{ NORMALParTxt, NORMParTxt, 	&FactBBGenSignalPar[1]},
; rs232cmd.c  922		{ F45MHZParTxt, F45MHZParTxt, NULL},
; rs232cmd.c  923	};
; rs232cmd.c  924	
; rs232cmd.c  925	struct PAR_STRUCT code MinMaxPar[2] = {
	DD	000000000H
	SYMB	IDEN, "MinMaxPar", _MinMaxPar, #530, 129, 0
	SYMB	ALAB, _MinMaxPar, #530
	PUBLIC	_MinMaxPar
	ALIGN	1
_MinMaxPar:
	DD	_MINParTxt,_MINParTxt
	DD	_MinMaxPar+12
	DD	_MAXParTxt,_MAXParTxt
; rs232cmd.c  926		{ MINParTxt, MINParTxt, &MinMaxPar[1]},
; rs232cmd.c  927		{ MAXParTxt, MAXParTxt, NULL},
; rs232cmd.c  928	};
; rs232cmd.c  929	
; rs232cmd.c  930	struct PAR_STRUCT code UpDownPar[2] = {
	DD	000000000H
	SYMB	IDEN, "UpDownPar", _UpDownPar, #530, 129, 0
	SYMB	ALAB, _UpDownPar, #530
	PUBLIC	_UpDownPar
	ALIGN	1
_UpDownPar:
	DD	_UPParTxt,_UPParTxt
	DD	_UpDownPar+12
	DD	_DOWNParTxt,_DOWNParTxt
; rs232cmd.c  931		{ UPParTxt,   UPParTxt,   &UpDownPar[1]},
; rs232cmd.c  932		{ DOWNParTxt, DOWNParTxt, NULL},
; rs232cmd.c  933	};
; rs232cmd.c  934	
; rs232cmd.c  935	/***************************************************************************/
; rs232cmd.c  936	// Temporary variables PRIVATE NOT overlayable
; rs232cmd.c  937	
; rs232cmd.c  938	static unsigned int Suffix[4]=
	DD	000000000H
RS232CMD_INI_FA	SEGMENT	HDATA INSEGMENT INIT
	RSEG	RS232CMD_INI_FA
	SYMB	TYPE, 532, 'Z', #18, 3
	SYMB	IDEN, "Suffix", _Suffix, #532, 130, 4
	ALIGN	1
_Suffix:
; rs232cmd.c  939	{
; rs232cmd.c  940		1,1,1,1
; rs232cmd.c  941	};
; rs232cmd.c  942	
; rs232cmd.c  943	static bool PasswordProtected = true;
	DW	00001H,00001H,00001H,00001H
	SYMB	IDEN, "PasswordProtected", _PasswordProtected, #487, 130, 4
	ALIGN	1
_PasswordProtected:
; rs232cmd.c  944	static UC GenlockCalEnable = 0;
	DW	0FFFFH
	SYMB	IDEN, "GenlockCalEnable", _GenlockCalEnable, #3, 130, 4
_GenlockCalEnable:
; rs232cmd.c  945	static int GenlockCalValue = 0;
	DB	000H
	SYMB	IDEN, "GenlockCalValue", _GenlockCalValue, #16, 130, 4
	ALIGN	1
_GenlockCalValue:
; rs232cmd.c  946	
; rs232cmd.c  947	/**************************************************************************/
; rs232cmd.c  948	/* CLSCommand																	 								 RS232CMD.C */
; rs232cmd.c  949	/*																																				*/
; rs232cmd.c  950	/* Author: 		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c  951	/* Revised:		000413				     																					*/
; rs232cmd.c  952	/*																																				*/
; rs232cmd.c  953	/* Function:  Clear status command																				*/
; rs232cmd.c  954	/* Remarks:		No parameters																								*/
; rs232cmd.c  955	/* Returns:		-																														*/
; rs232cmd.c  956	/* Updates:																																*/
; rs232cmd.c  957	/**************************************************************************/
; rs232cmd.c  958	void CLSCommand( void)
; rs232cmd.c  959	{
	DW	00000H
RS232CMD_PR	SEGMENT	HCODE
	RSEG	RS232CMD_PR
	ALIGN	1
	SYMB	LINE, 959
	PUBLIC	_CLSCommand
_CLSCommand:
	SYMB	TYPE, 534, 'X', 12, #1, 30, 0
	SYMB	GFUN, "CLSCommand", _CLSCommand, #534, 0, 0, 0
	SYMB	ALAB, _CLSCommand, #534
; rs232cmd.c  960		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 960
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_8
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_8
; rs232cmd.c  961		{
; rs232cmd.c  962			if ( CmdRequest)
	SYMB	LINE, 962
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_3
; rs232cmd.c  963				SCPIError = SyntaxErr;
	SYMB	LINE, 963
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_3:
; rs232cmd.c  964			else
; rs232cmd.c  965			{
; rs232cmd.c  966				if ( ParCnt)
	SYMB	LINE, 966
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_4
; rs232cmd.c  967					SCPIError = ParNotAllowed;
	SYMB	LINE, 967
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_4:
; rs232cmd.c  968				else
; rs232cmd.c  969					ResetErrorEventQueue();
	SYMB	LINE, 969
	CALL	_ResetErrorEventQueue
; rs232cmd.c  970			}
; rs232cmd.c  971		}
	SYMB	LINE, 971
_8:
; rs232cmd.c  972	}
	SYMB	LINE, 972
	RET
	SYMB	EFUN
; rs232cmd.c  973	
; rs232cmd.c  974	/**************************************************************************/
; rs232cmd.c  975	/* ESECommand																	 								 RS232CMD.C */
; rs232cmd.c  976	/*																																				*/
; rs232cmd.c  977	/* Author:		Kim Engedahl, DEV, 970627	    															*/
; rs232cmd.c  978	/* Revised:		000413				     																					*/
; rs232cmd.c  979	/*																																				*/
; rs232cmd.c  980	/* Function:	Set/read the Standard Event Status Enable Register					*/
; rs232cmd.c  981	/* Remarks:		--																													*/
; rs232cmd.c  982	/* Returns:		-																														*/
; rs232cmd.c  983	/* Updates:																																*/
; rs232cmd.c  984	/**************************************************************************/
; rs232cmd.c  985	void ESECommand( void)
; rs232cmd.c  986	{
	ALIGN	1
	SYMB	LINE, 986
	PUBLIC	_ESECommand
_ESECommand:
	SYMB	TYPE, 535, 'X', 12, #1, 30, 0
	SYMB	GFUN, "ESECommand", _ESECommand, #535, 0, 0, 0
	SYMB	ALAB, _ESECommand, #535
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "Reg", -2, #16, 130, 5
; rs232cmd.c  987		int Reg;
; rs232cmd.c  988	
; rs232cmd.c  989		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 989
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_21
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_21
; rs232cmd.c  990		{
; rs232cmd.c  991			if ( CmdRequest)
	SYMB	LINE, 991
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_12
; rs232cmd.c  992			{
; rs232cmd.c  993				if ( ParCnt)
	SYMB	LINE, 993
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_11
; rs232cmd.c  994					SCPIError = ParNotAllowed;
	SYMB	LINE, 994
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_21
_11:
; rs232cmd.c  995				else
; rs232cmd.c  996					rs232printf( 12, "%d\n", ESEReg);
	SYMB	LINE, 996
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _ESEReg )
	MOV.W	R1,#SOF( _ESEReg )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c  997			}
	SYMB	LINE, 997
	BR	_21
_12:
; rs232cmd.c  998			else
; rs232cmd.c  999			{
; rs232cmd.c 1000				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1000
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_13
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_14
_13:
; rs232cmd.c 1001				{
; rs232cmd.c 1002					SCPIError = SyntaxErr;	
	SYMB	LINE, 1002
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1003					return;
	SYMB	LINE, 1003
	BR	_21
; rs232cmd.c 1004				}
	SYMB	LINE, 1004
_14:
; rs232cmd.c 1005	
; rs232cmd.c 1006				if ( Reg > 255)
	SYMB	LINE, 1006
	CMP.W	[R7],#0FFH
	BLE	_15
; rs232cmd.c 1007				{
; rs232cmd.c 1008					SCPIError = DataOutOfRange;
	SYMB	LINE, 1008
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1009					return;
	SYMB	LINE, 1009
	BR	_21
; rs232cmd.c 1010				}
	SYMB	LINE, 1010
_15:
; rs232cmd.c 1011	
; rs232cmd.c 1012				ESEReg = Reg & 0xFF;
	SYMB	LINE, 1012
	MOV.W	R0,[R7]
	AND.B	R0L,#0FFH
	MOV.B	ES,#SEG( _ESEReg )
	MOV.W	R1,#SOF( _ESEReg )
	MOV.B	[R1],R0L
; rs232cmd.c 1013			}
; rs232cmd.c 1014		}
; rs232cmd.c 1015	}
	SYMB	LINE, 1015
_21:
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1016	
; rs232cmd.c 1017	/**************************************************************************/
; rs232cmd.c 1018	/* ESRCommand																									 RS232CMD.C */
; rs232cmd.c 1019	/*																																				*/
; rs232cmd.c 1020	/* Author:		Kim Engedahl, DEV, 970627	    															*/
; rs232cmd.c 1021	/* Revised:		000413				     																					*/
; rs232cmd.c 1022	/*																																				*/
; rs232cmd.c 1023	/* Function:	Read and clear the Standard Event Status Register						*/
; rs232cmd.c 1024	/* Remarks:		No parameters																								*/
; rs232cmd.c 1025	/*						The register will reset to zero.														*/
; rs232cmd.c 1026	/* Returns:		-																														*/
; rs232cmd.c 1027	/* Updates:																																*/
; rs232cmd.c 1028	/**************************************************************************/
; rs232cmd.c 1029	void ESRCommand( void)
; rs232cmd.c 1030	{
	ALIGN	1
	SYMB	LINE, 1030
	PUBLIC	_ESRCommand
_ESRCommand:
	SYMB	TYPE, 536, 'X', 12, #1, 30, 0
	SYMB	GFUN, "ESRCommand", _ESRCommand, #536, 0, 0, 0
	SYMB	ALAB, _ESRCommand, #536
	SYMB	IDEN, "Reg", -1, #16, 130, 5
	SYMB	LTIM, "Reg", -1, 0, 69
; rs232cmd.c 1031		int Reg;
; rs232cmd.c 1032	
; rs232cmd.c 1033		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1033
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_30
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_30
; rs232cmd.c 1034		{
; rs232cmd.c 1035			if ( CmdRequest)
	SYMB	LINE, 1035
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_26
; rs232cmd.c 1036			{
; rs232cmd.c 1037				if ( ParCnt)
	SYMB	LINE, 1037
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_25
; rs232cmd.c 1038					SCPIError = ParNotAllowed;
	SYMB	LINE, 1038
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_25:
; rs232cmd.c 1039				else
; rs232cmd.c 1040				{
; rs232cmd.c 1041					rs232printf( 12, "%d\n", UpdateESRRegister());
	SYMB	LINE, 1041
	CALL	_UpdateESRRegister
	MOV.B	R1L,R0L
	MOVS.B	R1H,#00H
	MOV.W	R0,#0CH
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
; rs232cmd.c 1042	
; rs232cmd.c 1043					ESRReg = 0;
	SYMB	LINE, 1043
	MOV.B	ES,#SEG( _ESRReg )
	MOV.W	R0,#SOF( _ESRReg )
	MOV.B	[R0],#00H
; rs232cmd.c 1044				}
; rs232cmd.c 1045			}
	SYMB	LINE, 1045
	RET
_26:
; rs232cmd.c 1046			else
; rs232cmd.c 1047				SCPIError = SyntaxErr;
	SYMB	LINE, 1047
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1048		}
	SYMB	LINE, 1048
_30:
; rs232cmd.c 1049	}
	SYMB	LINE, 1049
	RET
	SYMB	EFUN
; rs232cmd.c 1050	
; rs232cmd.c 1051	/**************************************************************************/
; rs232cmd.c 1052	/* OPCCommand																	 								 RS232CMD.C */
; rs232cmd.c 1053	/*																																				*/
; rs232cmd.c 1054	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 1055	/* Revised:		000413				     																					*/
; rs232cmd.c 1056	/*																																				*/
; rs232cmd.c 1057	/* Function:	Operation Complete Command/Query														*/
; rs232cmd.c 1058	/* Remarks:		No parameters																								*/
; rs232cmd.c 1059	/* Returns:		-																														*/
; rs232cmd.c 1060	/* Updates:																																*/
; rs232cmd.c 1061	/**************************************************************************/
; rs232cmd.c 1062	void OPCCommand( void)
; rs232cmd.c 1063	{
	ALIGN	1
	SYMB	LINE, 1063
	PUBLIC	_OPCCommand
_OPCCommand:
	SYMB	TYPE, 537, 'X', 12, #1, 30, 0
	SYMB	GFUN, "OPCCommand", _OPCCommand, #537, 0, 0, 0
	SYMB	ALAB, _OPCCommand, #537
; rs232cmd.c 1064		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1064
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_36
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_36
; rs232cmd.c 1065		{
; rs232cmd.c 1066			if ( CmdRequest)
	SYMB	LINE, 1066
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_31
; rs232cmd.c 1067			{
; rs232cmd.c 1068				if ( ParCnt)
	SYMB	LINE, 1068
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_36
; rs232cmd.c 1069					SCPIError = ParNotAllowed;
	SYMB	LINE, 1069
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
; rs232cmd.c 1070			}
	SYMB	LINE, 1070
	RET
_31:
; rs232cmd.c 1071			else
; rs232cmd.c 1072			{
; rs232cmd.c 1073				if ( ParCnt)
	SYMB	LINE, 1073
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_36
; rs232cmd.c 1074					SCPIError = ParNotAllowed;
	SYMB	LINE, 1074
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
; rs232cmd.c 1075			}
; rs232cmd.c 1076		}
	SYMB	LINE, 1076
_36:
; rs232cmd.c 1077	}
	SYMB	LINE, 1077
	RET
	SYMB	EFUN
; rs232cmd.c 1078	
; rs232cmd.c 1079	/**************************************************************************/
; rs232cmd.c 1080	/* SRECommand															 		 								 RS232CMD.C */
; rs232cmd.c 1081	/*																																				*/
; rs232cmd.c 1082	/* Author:		Kim Engedahl, DEV, 970627	    															*/
; rs232cmd.c 1083	/* Revised:		000413				     																					*/
; rs232cmd.c 1084	/*																																				*/
; rs232cmd.c 1085	/* Function:	Set/read the Service Request Enable Register								*/
; rs232cmd.c 1086	/* Remarks:		Bit 6 in *SRE? register is always ZERO											*/
; rs232cmd.c 1087	/*						Bit 6 in *SRE register is ignored														*/
; rs232cmd.c 1088	/* Returns:		-																														*/
; rs232cmd.c 1089	/* Updates:																																*/
; rs232cmd.c 1090	/**************************************************************************/
; rs232cmd.c 1091	void SRECommand( void)
; rs232cmd.c 1092	{
	ALIGN	1
	SYMB	LINE, 1092
	PUBLIC	_SRECommand
_SRECommand:
	SYMB	TYPE, 538, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SRECommand", _SRECommand, #538, 0, 0, 0
	SYMB	ALAB, _SRECommand, #538
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "Reg", -2, #16, 130, 5
; rs232cmd.c 1093		int Reg;
; rs232cmd.c 1094	
; rs232cmd.c 1095		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1095
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_47
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_47
; rs232cmd.c 1096		{
; rs232cmd.c 1097			if ( CmdRequest)
	SYMB	LINE, 1097
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_38
; rs232cmd.c 1098			{
; rs232cmd.c 1099				if ( ParCnt)
	SYMB	LINE, 1099
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_37
; rs232cmd.c 1100					SCPIError = ParNotAllowed;
	SYMB	LINE, 1100
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_47
_37:
; rs232cmd.c 1101				else
; rs232cmd.c 1102					rs232printf( 12, "%d\n", SREReg);
	SYMB	LINE, 1102
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _SREReg )
	MOV.W	R1,#SOF( _SREReg )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 1103			}
	SYMB	LINE, 1103
	BR	_47
_38:
; rs232cmd.c 1104			else
; rs232cmd.c 1105			{
; rs232cmd.c 1106				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1106
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_39
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_40
_39:
; rs232cmd.c 1107				{
; rs232cmd.c 1108					SCPIError = SyntaxErr;	
	SYMB	LINE, 1108
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1109					return;
	SYMB	LINE, 1109
	BR	_47
; rs232cmd.c 1110				}
	SYMB	LINE, 1110
_40:
; rs232cmd.c 1111	
; rs232cmd.c 1112				if ( Reg > 255)
	SYMB	LINE, 1112
	CMP.W	[R7],#0FFH
	BLE	_41
; rs232cmd.c 1113				{
; rs232cmd.c 1114					SCPIError = DataOutOfRange;
	SYMB	LINE, 1114
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1115					return;
	SYMB	LINE, 1115
	BR	_47
; rs232cmd.c 1116				}
	SYMB	LINE, 1116
_41:
; rs232cmd.c 1117	
; rs232cmd.c 1118				SREReg = Reg & 0xBF;
	SYMB	LINE, 1118
	MOV.W	R0,[R7]
	AND.B	R0L,#0BFH
	MOV.B	ES,#SEG( _SREReg )
	MOV.W	R1,#SOF( _SREReg )
	MOV.B	[R1],R0L
; rs232cmd.c 1119			}
; rs232cmd.c 1120		}
; rs232cmd.c 1121	}
	SYMB	LINE, 1121
_47:
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1122	
; rs232cmd.c 1123	/**************************************************************************/
; rs232cmd.c 1124	/* STBCommand																									 RS232CMD.C */
; rs232cmd.c 1125	/*																																				*/
; rs232cmd.c 1126	/* Author:		Kim Engedahl, DEV, 970627	    															*/
; rs232cmd.c 1127	/* Revised:		000413				     																					*/
; rs232cmd.c 1128	/*																																				*/
; rs232cmd.c 1129	/* Function:	Read the Status Byte Register																*/
; rs232cmd.c 1130	/* Remarks:		No parameters																								*/
; rs232cmd.c 1131	/* Returns:																																*/
; rs232cmd.c 1132	/* Updates:																																*/
; rs232cmd.c 1133	/**************************************************************************/
; rs232cmd.c 1134	void STBCommand( void)
; rs232cmd.c 1135	{
	ALIGN	1
	SYMB	LINE, 1135
	PUBLIC	_STBCommand
_STBCommand:
	SYMB	TYPE, 539, 'X', 12, #1, 30, 0
	SYMB	GFUN, "STBCommand", _STBCommand, #539, 0, 0, 0
	SYMB	ALAB, _STBCommand, #539
; rs232cmd.c 1136		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1136
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_56
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_56
; rs232cmd.c 1137		{
; rs232cmd.c 1138			if ( CmdRequest)
	SYMB	LINE, 1138
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_52
; rs232cmd.c 1139			{
; rs232cmd.c 1140				if ( ParCnt)
	SYMB	LINE, 1140
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_51
; rs232cmd.c 1141					SCPIError = ParNotAllowed;
	SYMB	LINE, 1141
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_51:
; rs232cmd.c 1142				else
; rs232cmd.c 1143				{
; rs232cmd.c 1144					UpdateSTBRegister();
	SYMB	LINE, 1144
	CALL	_UpdateSTBRegister
; rs232cmd.c 1145	
; rs232cmd.c 1146					rs232printf( 12, "%d\n", STBReg);
	SYMB	LINE, 1146
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _STBReg )
	MOV.W	R1,#SOF( _STBReg )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
; rs232cmd.c 1147				}
; rs232cmd.c 1148			}
	SYMB	LINE, 1148
	RET
_52:
; rs232cmd.c 1149			else
; rs232cmd.c 1150				SCPIError = SyntaxErr;
	SYMB	LINE, 1150
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1151		}
	SYMB	LINE, 1151
_56:
; rs232cmd.c 1152	}
	SYMB	LINE, 1152
	RET
	SYMB	EFUN
; rs232cmd.c 1153	
; rs232cmd.c 1154	/**************************************************************************/
; rs232cmd.c 1155	/* TSTCommand																									 RS232CMD.C */
; rs232cmd.c 1156	/*																																				*/
; rs232cmd.c 1157	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1158	/* Revised:		000505				     																					*/
; rs232cmd.c 1159	/*																																				*/
; rs232cmd.c 1160	/* Function:	Selftest query																							*/
; rs232cmd.c 1161	/* Remarks:		No parameters																								*/
; rs232cmd.c 1162	/* Returns:		-																														*/
; rs232cmd.c 1163	/* Updates:																																*/
; rs232cmd.c 1164	/**************************************************************************/
; rs232cmd.c 1165	void TSTCommand( void)
; rs232cmd.c 1166	{
	ALIGN	1
	SYMB	LINE, 1166
	PUBLIC	_TSTCommand
_TSTCommand:
	SYMB	TYPE, 540, 'X', 12, #1, 30, 0
	SYMB	GFUN, "TSTCommand", _TSTCommand, #540, 0, 0, 0
	SYMB	ALAB, _TSTCommand, #540
; rs232cmd.c 1167		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1167
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_61
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_61
; rs232cmd.c 1168		{
; rs232cmd.c 1169			if ( CmdRequest)
	SYMB	LINE, 1169
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_57
; rs232cmd.c 1170			{
; rs232cmd.c 1171				if ( ParCnt)
	SYMB	LINE, 1171
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_61
; rs232cmd.c 1172					SCPIError = ParNotAllowed;
	SYMB	LINE, 1172
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
; rs232cmd.c 1173				else
; rs232cmd.c 1174				{
; rs232cmd.c 1175					;
; rs232cmd.c 1176				}
; rs232cmd.c 1177			}
	SYMB	LINE, 1177
	RET
_57:
; rs232cmd.c 1178			else
; rs232cmd.c 1179				SCPIError = SyntaxErr;
	SYMB	LINE, 1179
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1180		}
	SYMB	LINE, 1180
_61:
; rs232cmd.c 1181	}
	SYMB	LINE, 1181
	RET
	SYMB	EFUN
; rs232cmd.c 1182	
; rs232cmd.c 1183	/**************************************************************************/
; rs232cmd.c 1184	/* WAICommand																									 RS232CMD.C */
; rs232cmd.c 1185	/*																																				*/
; rs232cmd.c 1186	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1187	/* Revised:		000505				     																					*/
; rs232cmd.c 1188	/*																																				*/
; rs232cmd.c 1189	/* Function:	Wait-to-continue command																		*/
; rs232cmd.c 1190	/* Remarks:		No parameters																								*/
; rs232cmd.c 1191	/* Returns:		-																														*/
; rs232cmd.c 1192	/* Updates:																																*/
; rs232cmd.c 1193	/**************************************************************************/
; rs232cmd.c 1194	void WAICommand( void)
; rs232cmd.c 1195	{
	ALIGN	1
	SYMB	LINE, 1195
	PUBLIC	_WAICommand
_WAICommand:
	SYMB	TYPE, 541, 'X', 12, #1, 30, 0
	SYMB	GFUN, "WAICommand", _WAICommand, #541, 0, 0, 0
	SYMB	ALAB, _WAICommand, #541
; rs232cmd.c 1196		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1196
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_66
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_66
; rs232cmd.c 1197		{
; rs232cmd.c 1198			if ( CmdRequest)
	SYMB	LINE, 1198
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_62
; rs232cmd.c 1199				SCPIError = SyntaxErr;
	SYMB	LINE, 1199
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_62:
; rs232cmd.c 1200			else
; rs232cmd.c 1201			{
; rs232cmd.c 1202				if ( ParCnt)
	SYMB	LINE, 1202
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_66
; rs232cmd.c 1203					SCPIError = ParNotAllowed;
	SYMB	LINE, 1203
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
; rs232cmd.c 1204				else
; rs232cmd.c 1205				{
; rs232cmd.c 1206					;
; rs232cmd.c 1207				}
; rs232cmd.c 1208			}
; rs232cmd.c 1209		}
	SYMB	LINE, 1209
_66:
; rs232cmd.c 1210	}
	SYMB	LINE, 1210
	RET
	SYMB	EFUN
; rs232cmd.c 1211	
; rs232cmd.c 1212	/**************************************************************************/
; rs232cmd.c 1213	/* RSTCommand																									 RS232CMD.C */
; rs232cmd.c 1214	/*																																				*/
; rs232cmd.c 1215	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 1216	/* Revised:		000617				     																					*/
; rs232cmd.c 1217	/*																																				*/
; rs232cmd.c 1218	/* Function:	Reset comamnd																								*/
; rs232cmd.c 1219	/* Remarks:		No parameters																								*/
; rs232cmd.c 1220	/* Returns:																																*/
; rs232cmd.c 1221	/* Updates:																																*/
; rs232cmd.c 1222	/**************************************************************************/
; rs232cmd.c 1223	void RSTCommand( void)
; rs232cmd.c 1224	{
	ALIGN	1
	SYMB	LINE, 1224
	PUBLIC	_RSTCommand
_RSTCommand:
	SYMB	TYPE, 542, 'X', 12, #1, 30, 0
	SYMB	GFUN, "RSTCommand", _RSTCommand, #542, 0, 0, 0
	SYMB	ALAB, _RSTCommand, #542
; rs232cmd.c 1225		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1225
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_72
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_72
; rs232cmd.c 1226		{
; rs232cmd.c 1227			if ( CmdRequest)
	SYMB	LINE, 1227
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_67
; rs232cmd.c 1228				SCPIError = SyntaxErr;
	SYMB	LINE, 1228
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_67:
; rs232cmd.c 1229			else
; rs232cmd.c 1230			{
; rs232cmd.c 1231				if ( ParCnt)
	SYMB	LINE, 1231
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_68
; rs232cmd.c 1232					SCPIError = ParNotAllowed;
	SYMB	LINE, 1232
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_68:
; rs232cmd.c 1233				else
; rs232cmd.c 1234					ResetInstrument();
	SYMB	LINE, 1234
	CALL	_ResetInstrument
; rs232cmd.c 1235			}
; rs232cmd.c 1236		}
	SYMB	LINE, 1236
_72:
; rs232cmd.c 1237	}
	SYMB	LINE, 1237
	RET
	SYMB	EFUN
; rs232cmd.c 1238	
; rs232cmd.c 1239	/**************************************************************************/
; rs232cmd.c 1240	/* IDNCommand																								   RS232CMD.C */
; rs232cmd.c 1241	/*																																				*/
; rs232cmd.c 1242	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 1243	/* Revised:		000614				     																					*/
; rs232cmd.c 1244	/*																																				*/
; rs232cmd.c 1245	/* Function:	Identification query																				*/
; rs232cmd.c 1246	/* Remarks:		No parameter, Query only																		*/
; rs232cmd.c 1247	/* Returns:		-																														*/
; rs232cmd.c 1248	/* Updates:		-																														*/
; rs232cmd.c 1249	/**************************************************************************/
; rs232cmd.c 1250	void IDNCommand( void)
; rs232cmd.c 1251	{
	ALIGN	1
	SYMB	LINE, 1251
	PUBLIC	_IDNCommand
_IDNCommand:
	SYMB	TYPE, 543, 'X', 12, #1, 30, 0
	SYMB	GFUN, "IDNCommand", _IDNCommand, #543, 0, 0, 0
	SYMB	ALAB, _IDNCommand, #543
; rs232cmd.c 1252		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1252
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_78
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_78
; rs232cmd.c 1253		{
; rs232cmd.c 1254			if ( CmdRequest)
	SYMB	LINE, 1254
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_74
; rs232cmd.c 1255			{
; rs232cmd.c 1256				if ( ParCnt)
	SYMB	LINE, 1256
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_73
; rs232cmd.c 1257					SCPIError = ParNotAllowed;
	SYMB	LINE, 1257
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_73:
; rs232cmd.c 1258				else
; rs232cmd.c 1259				{
; rs232cmd.c 1260					rs232puts( Calibration.Company);
	SYMB	LINE, 1260
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	CALL	_rs232puts
; rs232cmd.c 1261	
; rs232cmd.c 1262					rs232putchar( ',');
	SYMB	LINE, 1262
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 1263	
; rs232cmd.c 1264					rs232puts( Calibration.Type);
	SYMB	LINE, 1264
	MOV.W	R1,#SEG( _Calibration+33 )
	MOV.W	R0,#SOF( _Calibration+33 )
	CALL	_rs232puts
	MOV.B	R0L,#02CH
; rs232cmd.c 1265	
; rs232cmd.c 1266					rs232putchar( ',');
	SYMB	LINE, 1266
	CALL	_rs232putchar
; rs232cmd.c 1267	
; rs232cmd.c 1268					rs232puts( Calibration.KUNumber);
	SYMB	LINE, 1268
	MOV.W	R1,#SEG( _Calibration+66 )
	MOV.W	R0,#SOF( _Calibration+66 )
	CALL	_rs232puts
; rs232cmd.c 1269	
; rs232cmd.c 1270					rs232putchar( ',');
	SYMB	LINE, 1270
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 1271	
; rs232cmd.c 1272					rs232puts( Calibration.SWRevision);
	SYMB	LINE, 1272
	MOV.W	R1,#SEG( _Calibration+75 )
	MOV.W	R0,#SOF( _Calibration+75 )
	CALL	_rs232puts
; rs232cmd.c 1273	
; rs232cmd.c 1274					rs232putchar( '\n');
	SYMB	LINE, 1274
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1275				}
; rs232cmd.c 1276			}
	SYMB	LINE, 1276
	RET
_74:
; rs232cmd.c 1277			else
; rs232cmd.c 1278				SCPIError = SyntaxErr;
	SYMB	LINE, 1278
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1279		}
	SYMB	LINE, 1279
_78:
; rs232cmd.c 1280	}
	SYMB	LINE, 1280
	RET
	SYMB	EFUN
; rs232cmd.c 1281	
; rs232cmd.c 1282	/**************************************************************************/
; rs232cmd.c 1283	/* RCLCommand																									 RS232CMD.C */
; rs232cmd.c 1284	/*																																				*/
; rs232cmd.c 1285	/* Author:		Sten A. Andersen/Thomas Kappelgaard, DEV, xxxxxx 						*/
; rs232cmd.c 1286	/* Revised:		Kim Engedahl, DEV, 000617																		*/
; rs232cmd.c 1287	/*																																				*/
; rs232cmd.c 1288	/* Function:																															*/
; rs232cmd.c 1289	/* Remarks:																																*/
; rs232cmd.c 1290	/* Returns:		-																														*/
; rs232cmd.c 1291	/* Updates:		-																														*/
; rs232cmd.c 1292	/**************************************************************************/
; rs232cmd.c 1293	void RCLCommand(void) 
; rs232cmd.c 1294	{
	ALIGN	1
	SYMB	LINE, 1294
	PUBLIC	_RCLCommand
_RCLCommand:
	SYMB	TYPE, 544, 'X', 12, #1, 30, 0
	SYMB	GFUN, "RCLCommand", _RCLCommand, #544, 0, 0, 0
	SYMB	ALAB, _RCLCommand, #544
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "Reg", -2, #16, 130, 5
; rs232cmd.c 1295		int	Reg = 0;
	SYMB	LINE, 1295
	MOV.W	[R7],#00H
; rs232cmd.c 1296	
; rs232cmd.c 1297		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1297
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_89
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_89
; rs232cmd.c 1298		{
; rs232cmd.c 1299			if ( CmdRequest)
	SYMB	LINE, 1299
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_79
; rs232cmd.c 1300			{
; rs232cmd.c 1301				SCPIError = SyntaxErr;
	SYMB	LINE, 1301
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1302			}
	SYMB	LINE, 1302
	BR	_89
_79:
; rs232cmd.c 1303			else
; rs232cmd.c 1304			{
; rs232cmd.c 1305				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1305
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_80
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_81
_80:
; rs232cmd.c 1306				{
; rs232cmd.c 1307					SCPIError = SyntaxErr;	
	SYMB	LINE, 1307
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1308					return;
	SYMB	LINE, 1308
	BR	_89
; rs232cmd.c 1309				}
	SYMB	LINE, 1309
_81:
; rs232cmd.c 1310	
; rs232cmd.c 1311				if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1311
	MOV.W	R0,[R7]
	BEQ	_82
	CMP.W	[R7],#04H
	BLE	_83
_82:
; rs232cmd.c 1312					SCPIError = DataOutOfRange;
	SYMB	LINE, 1312
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_89
_83:
; rs232cmd.c 1313				else
; rs232cmd.c 1314				{
; rs232cmd.c 1315					if ( RecallPreset( Reg) != OK)
	SYMB	LINE, 1315
	MOV.W	R0,[R7]
	CALL	_RecallPreset
	CMP.W	R0,#0FFFFH
	BEQ	_89
; rs232cmd.c 1316						SCPIError = ExecErr;
	SYMB	LINE, 1316
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 1317				}
; rs232cmd.c 1318			}
; rs232cmd.c 1319		}
; rs232cmd.c 1320	}
	SYMB	LINE, 1320
_89:
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1321	
; rs232cmd.c 1322	/**************************************************************************/
; rs232cmd.c 1323	/* SAVCommand																									 RS232CMD.C */
; rs232cmd.c 1324	/*																																				*/
; rs232cmd.c 1325	/* Author:		Sten A. Andersen/Thomas Kappelgaard, DEV, xxxxxx 						*/
; rs232cmd.c 1326	/* Revised:		Kim Engedahl, DEV, 000502																		*/
; rs232cmd.c 1327	/*																																				*/
; rs232cmd.c 1328	/* Function:																															*/
; rs232cmd.c 1329	/* Remarks:																																*/
; rs232cmd.c 1330	/* Returns:		-																														*/
; rs232cmd.c 1331	/* Updates:		-																														*/
; rs232cmd.c 1332	/**************************************************************************/
; rs232cmd.c 1333	void SAVCommand(void) 
; rs232cmd.c 1334	{
	ALIGN	1
	SYMB	LINE, 1334
	PUBLIC	_SAVCommand
_SAVCommand:
	SYMB	TYPE, 545, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SAVCommand", _SAVCommand, #545, 0, 0, 0
	SYMB	ALAB, _SAVCommand, #545
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "Reg", -2, #16, 130, 5
; rs232cmd.c 1335		int	Reg = 0;
	SYMB	LINE, 1335
	MOV.W	[R7],#00H
; rs232cmd.c 1336	
; rs232cmd.c 1337		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1337
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_104
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_104
; rs232cmd.c 1338		{
; rs232cmd.c 1339			if ( CmdRequest)
	SYMB	LINE, 1339
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_94
; rs232cmd.c 1340				SCPIError = SyntaxErr;
	SYMB	LINE, 1340
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_104
_94:
; rs232cmd.c 1341			else
; rs232cmd.c 1342			{
; rs232cmd.c 1343				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1343
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_95
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_96
_95:
; rs232cmd.c 1344				{
; rs232cmd.c 1345					SCPIError = SyntaxErr;	
	SYMB	LINE, 1345
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1346					return;
	SYMB	LINE, 1346
	BR	_104
; rs232cmd.c 1347				}
	SYMB	LINE, 1347
_96:
; rs232cmd.c 1348	
; rs232cmd.c 1349				if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1349
	MOV.W	R0,[R7]
	BEQ	_97
	CMP.W	[R7],#04H
	BLE	_98
_97:
; rs232cmd.c 1350					SCPIError = DataOutOfRange;
	SYMB	LINE, 1350
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_104
_98:
; rs232cmd.c 1351				else
; rs232cmd.c 1352				{
; rs232cmd.c 1353					if ( StorePreset( Reg) != OK)
	SYMB	LINE, 1353
	MOV.W	R0,[R7]
	CALL	_StorePreset
	CMP.W	R0,#0FFFFH
	BEQ	_104
; rs232cmd.c 1354						SCPIError = ExecErr;
	SYMB	LINE, 1354
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 1355				}
; rs232cmd.c 1356			}
; rs232cmd.c 1357		}
; rs232cmd.c 1358	}
	SYMB	LINE, 1358
_104:
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1359	
; rs232cmd.c 1360	/**************************************************************************/
; rs232cmd.c 1361	/* SystemError																								 RS232CMD.C */
; rs232cmd.c 1362	/*																																				*/
; rs232cmd.c 1363	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 1364	/* Revised:		000401				     																					*/
; rs232cmd.c 1365	/*																																				*/
; rs232cmd.c 1366	/* Function:	Write the next entry in the error queue (FIFO) to RS232 		*/
; rs232cmd.c 1367	/* Remarks:		No parameters, Query only																		*/
; rs232cmd.c 1368	/* Returns:		-																														*/
; rs232cmd.c 1369	/* Updates:		-																														*/
; rs232cmd.c 1370	/**************************************************************************/
; rs232cmd.c 1371	void SystemError( void)
; rs232cmd.c 1372	{
	ALIGN	1
	SYMB	LINE, 1372
	PUBLIC	_SystemError
_SystemError:
	SYMB	TYPE, 546, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemError", _SystemError, #546, 0, 0, 48
	SYMB	ALAB, _SystemError, #546
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#0CH
	SYMB	SOFF, 16
	SYMB	IDEN, "i", -1, #16, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
	SYMB	IDEN, "ptr", -1, #491, 130, 5
	SYMB	LTIM, "ptr", -1, 0, 69
	SYMB	TYPE, 547, 'Z', #2, 11
	SYMB	IDEN, "buf", -16, #547, 130, 5
; rs232cmd.c 1373		int i;
; rs232cmd.c 1374		code char *ptr;
; rs232cmd.c 1375		char buf[12];
; rs232cmd.c 1376	
; rs232cmd.c 1377		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1377
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_119
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_119
; rs232cmd.c 1378		{
; rs232cmd.c 1379			if ( CmdRequest)
	SYMB	LINE, 1379
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_114
; rs232cmd.c 1380			{
; rs232cmd.c 1381				if ( ParCnt > 0)
	SYMB	LINE, 1381
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#00H
	BL	_111
; rs232cmd.c 1382					SCPIError = ParNotAllowed;
	SYMB	LINE, 1382
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_119
_111:
; rs232cmd.c 1383				else
; rs232cmd.c 1384				{
; rs232cmd.c 1385					if (( i = ReadErrorEventQueue()) >= 0)
	SYMB	LINE, 1385
	CALL	_ReadErrorEventQueue
	MOV.W	R4,R0
	MOV.W	R1,R0
	CMP.W	R1,#00H
	BLT	_119
; rs232cmd.c 1386					{
; rs232cmd.c 1387						sprintf( buf, "%d,\"", ErrorTxt_Array[i].ErrorNo);
	SYMB	LINE, 1387
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	MOV.W	R0,R7
	MULU.W	R4,#06H
	MOV.W	R2,R4
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _ErrorTxt_Array )
	MOV.W	R0,#SOF( _ErrorTxt_Array )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	SYMB	SOFF, 18
	MOV.W	R1,#SEG( _109 )
	MOV.W	R0,#SOF( _109 )
	PUSH.W	R0, R1
	SYMB	SOFF, 22
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+6
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 16
; rs232cmd.c 1388						rs232puts( buf);
	SYMB	LINE, 1388
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	MOV.W	R0,R7
	CALL	_rs232puts
; rs232cmd.c 1389	
; rs232cmd.c 1390						ptr = ErrorTxt_Array[i].ErrorTxt;
	SYMB	LINE, 1390
	MOV.W	R2,R4
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _ErrorTxt_Array+2 )
	MOV.W	R0,#SOF( _ErrorTxt_Array+2 )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_122
	ADDS.B	CS,#01H
_122:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "ptr", 19, 0, 205
; rs232cmd.c 1391	
; rs232cmd.c 1392						while ( *ptr)
	SYMB	LINE, 1392
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_113
_112:
; rs232cmd.c 1393							rs232putchar( *ptr++);
	SYMB	LINE, 1393
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "ptr", 19, 0, 77
	SYMB	LTIM, "ptr", 19, 0, 205
	SYMB	LINE, 1392
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_112
	SYMB	LINE, 1393
_113:
; rs232cmd.c 1394	
; rs232cmd.c 1395						 rs232puts( "\"\n");
	SYMB	LINE, 1395
	MOV.W	R1,#SEG( _110 )
	MOV.W	R0,#SOF( _110 )
	CALL	_rs232puts
; rs232cmd.c 1396					}
; rs232cmd.c 1397				}
; rs232cmd.c 1398			}
	SYMB	LINE, 1398
	BR	_119
_114:
; rs232cmd.c 1399			else
; rs232cmd.c 1400				SCPIError = SyntaxErr;
	SYMB	LINE, 1400
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1401		}
	SYMB	LINE, 1401
_119:
; rs232cmd.c 1402	}
	SYMB	LINE, 1402
	ADD.W	R7,#0CH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "ptr", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 1403	
; rs232cmd.c 1404	/**************************************************************************/
; rs232cmd.c 1405	/* SystemVersion																							 RS232CMD.C */
; rs232cmd.c 1406	/*																																				*/
; rs232cmd.c 1407	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 1408	/* Revised:		000401				     																					*/
; rs232cmd.c 1409	/*																																				*/
; rs232cmd.c 1410	/* Function:	Write the SCPI version to RS232															*/
; rs232cmd.c 1411	/* Remarks:		No parameter, Query only																		*/
; rs232cmd.c 1412	/* Returns:		-																														*/
; rs232cmd.c 1413	/* Updates:		-																														*/
; rs232cmd.c 1414	/**************************************************************************/
; rs232cmd.c 1415	void SystemVersion( void)
; rs232cmd.c 1416	{
	ALIGN	1
	SYMB	LINE, 1416
	PUBLIC	_SystemVersion
_SystemVersion:
	SYMB	TYPE, 549, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemVersion", _SystemVersion, #549, 0, 0, 48
	SYMB	ALAB, _SystemVersion, #549
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 1417		char code *str;
; rs232cmd.c 1418	
; rs232cmd.c 1419		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1419
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_130
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_130
; rs232cmd.c 1420		{
; rs232cmd.c 1421			if ( CmdRequest)
	SYMB	LINE, 1421
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_126
; rs232cmd.c 1422			{
; rs232cmd.c 1423				if ( ParCnt)
	SYMB	LINE, 1423
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_123
; rs232cmd.c 1424					SCPIError = ParNotAllowed;
	SYMB	LINE, 1424
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_130
_123:
; rs232cmd.c 1425				else
; rs232cmd.c 1426				{
; rs232cmd.c 1427					str = SystemVersionTxt;
	SYMB	LINE, 1427
	MOV.W	R5,#SEG( _SystemVersionTxt )
	MOV.W	R4,#SOF( _SystemVersionTxt )
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 1428	
; rs232cmd.c 1429					while ( *str)
	SYMB	LINE, 1429
	MOV.B	CS,#SEG( _SystemVersionTxt )
	MOV.W	R0,#SOF( _SystemVersionTxt )
	MOVC.B	R1L,[R0+]
	BEQ	_125
_124:
; rs232cmd.c 1430						rs232putchar( *str++);
	SYMB	LINE, 1430
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 1429
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_124
	SYMB	LINE, 1430
_125:
; rs232cmd.c 1431	
; rs232cmd.c 1432					rs232putchar( '\n');
	SYMB	LINE, 1432
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1433				}
; rs232cmd.c 1434			}
	SYMB	LINE, 1434
	BR	_130
_126:
; rs232cmd.c 1435			else
; rs232cmd.c 1436				SCPIError = SyntaxErr;
	SYMB	LINE, 1436
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1437		}
	SYMB	LINE, 1437
_130:
; rs232cmd.c 1438	}
	SYMB	LINE, 1438
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 1439	
; rs232cmd.c 1440	/**************************************************************************/
; rs232cmd.c 1441	/* SystemPresetName																						 RS232CMD.C */
; rs232cmd.c 1442	/*																																				*/
; rs232cmd.c 1443	/* Author:		Kim Engedahl, DEV, 970206	    															*/
; rs232cmd.c 1444	/* Revised:		000503					     																				*/
; rs232cmd.c 1445	/*																																				*/								
; rs232cmd.c 1446	/* Function:	Name a specific preset number.															*/
; rs232cmd.c 1447	/* Remarks:		the scanf function can not used MaxPresetNameLength, i.e.		*/
; rs232cmd.c 1448	/*						this define should be inserted as a value. The value is			*/
; rs232cmd.c 1449	/*						defined	in INSTRU.H								 													*/
; rs232cmd.c 1450	/* Returns:		-																														*/
; rs232cmd.c 1451	/* Updates:		-																														*/
; rs232cmd.c 1452	/**************************************************************************/
; rs232cmd.c 1453	void SystemPresetName( void)
; rs232cmd.c 1454	{
	ALIGN	1
	SYMB	LINE, 1454
	SYMB	TYPE, 550, 'Z', #2, 16
	SYMB	TYPE, 552, 'Z', #2, 6
	SYMB	TYPE, 554, 'Z', #457, 2
	SYMB	TYPE, 556, 'Z', #461, 1
	SYMB	TYPE, 558, 'S', 100,\
		 "Name", #550, 0,\
		 "Author", #552, 17,\
		 "Date", #7, 24,\
		 "GenlockSetup", #455, 28,\
		 "BBSetup", #554, 34,\
		 "CBSetup", #459, 58,\
		 "AudioOutput", #16, 70,\
		 "AudioSetup", #556, 72
	SYMB	TYPE, 559, "PresetObject", 'T', #558
	PUBLIC	_SystemPresetName
_SystemPresetName:
	SYMB	TYPE, 560, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetName", _SystemPresetName, #560, 0, 0, 48
	SYMB	ALAB, _SystemPresetName, #560
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#078H
	SYMB	SOFF, 124
	SYMB	IDEN, "Reg", -124, #16, 130, 5
	SYMB	IDEN, "Name", -122, #550, 130, 5
	SYMB	IDEN, "Preset", -104, #559, 130, 5
; rs232cmd.c 1455		int Reg;
; rs232cmd.c 1456		char Name[MaxPresetNameLength];
; rs232cmd.c 1457		PresetObject Preset;
; rs232cmd.c 1458	
; rs232cmd.c 1459		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1459
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_149
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_149
; rs232cmd.c 1460		{
; rs232cmd.c 1461			if ( CmdRequest)
	SYMB	LINE, 1461
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_136
; rs232cmd.c 1462			{
; rs232cmd.c 1463				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1463
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_132
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 128
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 132
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 124
	CMP.W	R0,#01H
	BEQ	_133
_132:
; rs232cmd.c 1464					SCPIError = SyntaxErr;
	SYMB	LINE, 1464
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_149
_133:
; rs232cmd.c 1465				else
; rs232cmd.c 1466				{
; rs232cmd.c 1467					if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1467
	MOV.W	R0,[R7]
	BEQ	_134
	CMP.W	[R7],#04H
	BLE	_135
_134:
; rs232cmd.c 1468						SCPIError = DataOutOfRange;
	SYMB	LINE, 1468
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_149
_135:
; rs232cmd.c 1469					else
; rs232cmd.c 1470					{
; rs232cmd.c 1471						NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1471
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+20
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_NV_Recall
; rs232cmd.c 1472	
; rs232cmd.c 1473						rs232puts( Preset.Name);
	SYMB	LINE, 1473
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 1474						rs232putchar( '\n');
	SYMB	LINE, 1474
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1475					}
; rs232cmd.c 1476				}
; rs232cmd.c 1477			}
	SYMB	LINE, 1477
	BR	_149
_136:
; rs232cmd.c 1478			else
; rs232cmd.c 1479			{
; rs232cmd.c 1480																	// The second parameter, the string, in scanf
; rs232cmd.c 1481																	// should be limited to the definition of
; rs232cmd.c 1482																	// MaxPresetNameLength
; rs232cmd.c 1483				if (( ParCnt != 2) || (( sscanf( Cmd, "%d,%17s", &Reg, Name)) != 2))
	SYMB	LINE, 1483
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_137
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 128
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+4
	PUSH.W	R2, R3
	SYMB	SOFF, 132
	MOV.W	R3,#SEG( _131 )
	MOV.W	R2,#SOF( _131 )
	PUSH.W	R2, R3
	SYMB	SOFF, 136
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 124
	CMP.W	R0,#02H
	BEQ	_138
_137:
; rs232cmd.c 1484					SCPIError = SyntaxErr;
	SYMB	LINE, 1484
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_149
_138:
	MOV.W	R1,R5
	MOV.W	R0,R4
; rs232cmd.c 1485				else
; rs232cmd.c 1486				{
; rs232cmd.c 1487					if ( strlen( Name) == MaxPresetNameLength)
	SYMB	LINE, 1487
	CALL	_strlen
	CMP.W	R0,#011H
	BNE	_139
; rs232cmd.c 1488						SCPIError = SyntaxErr;
	SYMB	LINE, 1488
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_149
_139:
; rs232cmd.c 1489					else
; rs232cmd.c 1490					{
; rs232cmd.c 1491						if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1491
	MOV.W	R0,[R7]
	BEQ	_140
	CMP.W	[R7],#04H
	BLE	_141
_140:
; rs232cmd.c 1492							SCPIError = DataOutOfRange;
	SYMB	LINE, 1492
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_149
_141:
; rs232cmd.c 1493						else
; rs232cmd.c 1494						{
; rs232cmd.c 1495							NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1495
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+20
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_NV_Recall
	MOV.W	R1,R5
	MOV.W	R0,R4
; rs232cmd.c 1496							strcpy( Preset.Name, Name);
	SYMB	LINE, 1496
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+2
	CALL	_strcpy
; rs232cmd.c 1497							NV_Store( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1497
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#064H
	CALL	_NV_Store
; rs232cmd.c 1498						}
; rs232cmd.c 1499					}
; rs232cmd.c 1500				}
; rs232cmd.c 1501			}
; rs232cmd.c 1502		}
	SYMB	LINE, 1502
_149:
; rs232cmd.c 1503	}
	SYMB	LINE, 1503
	ADD.W	R7,#078H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1504	
; rs232cmd.c 1505	/**************************************************************************/
; rs232cmd.c 1506	/* SystemPresetAuthor																					 RS232CMD.C */
; rs232cmd.c 1507	/*																																				*/
; rs232cmd.c 1508	/* Author:		Kim Engedahl, DEV, 000502	    															*/
; rs232cmd.c 1509	/* Revised:		000503					     																				*/
; rs232cmd.c 1510	/*																																				*/								
; rs232cmd.c 1511	/* Function:	Name the author of a specific preset number. 								*/
; rs232cmd.c 1512	/* Remarks:		the scanf function can not used MaxPresetAuthorLength, i.e.	*/
; rs232cmd.c 1513	/*						this define should be inserted as a value. The value is			*/
; rs232cmd.c 1514	/*						defined	in INSTRU.H								 													*/
; rs232cmd.c 1515	/* Returns:		-																														*/
; rs232cmd.c 1516	/* Updates:		-																														*/
; rs232cmd.c 1517	/**************************************************************************/
; rs232cmd.c 1518	void SystemPresetAuthor( void)
; rs232cmd.c 1519	{
	ALIGN	1
	SYMB	LINE, 1519
	PUBLIC	_SystemPresetAuthor
_SystemPresetAuthor:
	SYMB	TYPE, 561, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetAuthor", _SystemPresetAuthor, #561, 0, 0, 48
	SYMB	ALAB, _SystemPresetAuthor, #561
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#06EH
	SYMB	SOFF, 114
	SYMB	IDEN, "Reg", -114, #16, 130, 5
	SYMB	IDEN, "Author", -112, #552, 130, 5
	SYMB	IDEN, "Preset", -104, #559, 130, 5
; rs232cmd.c 1520		int Reg;
; rs232cmd.c 1521		char Author[MaxPresetAuthorLength];
; rs232cmd.c 1522		PresetObject Preset;
; rs232cmd.c 1523	
; rs232cmd.c 1524		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1524
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_175
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_175
; rs232cmd.c 1525		{
; rs232cmd.c 1526			if ( CmdRequest)
	SYMB	LINE, 1526
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_162
; rs232cmd.c 1527			{
; rs232cmd.c 1528				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1528
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_158
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 118
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 122
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 114
	CMP.W	R0,#01H
	BEQ	_159
_158:
; rs232cmd.c 1529					SCPIError = SyntaxErr;
	SYMB	LINE, 1529
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_175
_159:
; rs232cmd.c 1530				else
; rs232cmd.c 1531				{
; rs232cmd.c 1532					if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1532
	MOV.W	R0,[R7]
	BEQ	_160
	CMP.W	[R7],#04H
	BLE	_161
_160:
; rs232cmd.c 1533						SCPIError = DataOutOfRange;
	SYMB	LINE, 1533
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_175
_161:
; rs232cmd.c 1534					else
; rs232cmd.c 1535					{
; rs232cmd.c 1536						NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1536
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+10
	MOV.W	R2,[R7]
	ASL.W	R2,#01H
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	CALL	_NV_Recall
; rs232cmd.c 1537	
; rs232cmd.c 1538						rs232puts( Preset.Author);
	SYMB	LINE, 1538
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+27
	CALL	_rs232puts
; rs232cmd.c 1539						rs232putchar( '\n');
	SYMB	LINE, 1539
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1540					}
; rs232cmd.c 1541				}
; rs232cmd.c 1542			}
	SYMB	LINE, 1542
	BR	_175
_162:
; rs232cmd.c 1543			else
; rs232cmd.c 1544			{
; rs232cmd.c 1545																	// The second parameter, the string, in scanf
; rs232cmd.c 1546																	// should be limited to the definition of
; rs232cmd.c 1547																	// MaxPresetAuthorLength
; rs232cmd.c 1548				if (( ParCnt != 2) || (( sscanf( Cmd, "%d,%7s", &Reg, Author)) != 2))
	SYMB	LINE, 1548
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_163
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 118
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+4
	PUSH.W	R2, R3
	SYMB	SOFF, 122
	MOV.W	R3,#SEG( _157 )
	MOV.W	R2,#SOF( _157 )
	PUSH.W	R2, R3
	SYMB	SOFF, 126
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 114
	CMP.W	R0,#02H
	BEQ	_164
_163:
; rs232cmd.c 1549					SCPIError = SyntaxErr;
	SYMB	LINE, 1549
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_175
_164:
	MOV.W	R1,R5
	MOV.W	R0,R4
; rs232cmd.c 1550				else
; rs232cmd.c 1551				{
; rs232cmd.c 1552					if ( strlen( Author) == MaxPresetAuthorLength)
	SYMB	LINE, 1552
	CALL	_strlen
	CMP.W	R0,#07H
	BNE	_165
; rs232cmd.c 1553						SCPIError = SyntaxErr;
	SYMB	LINE, 1553
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_175
_165:
; rs232cmd.c 1554					else
; rs232cmd.c 1555					{
; rs232cmd.c 1556						if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1556
	MOV.W	R0,[R7]
	BEQ	_166
	CMP.W	[R7],#04H
	BLE	_167
_166:
; rs232cmd.c 1557							SCPIError = DataOutOfRange;
	SYMB	LINE, 1557
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_175
_167:
; rs232cmd.c 1558						else
; rs232cmd.c 1559						{
; rs232cmd.c 1560							NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1560
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+10
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_NV_Recall
; rs232cmd.c 1561							strcpy( Preset.Author, Author);
	SYMB	LINE, 1561
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+27
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+2
	CALL	_strcpy
; rs232cmd.c 1562							NV_Store( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1562
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#064H
	CALL	_NV_Store
; rs232cmd.c 1563						}
; rs232cmd.c 1564					}
; rs232cmd.c 1565				}
; rs232cmd.c 1566			}
; rs232cmd.c 1567		}
	SYMB	LINE, 1567
_175:
; rs232cmd.c 1568	}
	SYMB	LINE, 1568
	ADD.W	R7,#06EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1569	
; rs232cmd.c 1570	/**************************************************************************/
; rs232cmd.c 1571	/* SystemPresetDate																						 RS232CMD.C */
; rs232cmd.c 1572	/*																																				*/
; rs232cmd.c 1573	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 1574	/* Revised:		000617					     																				*/
; rs232cmd.c 1575	/*																																				*/								
; rs232cmd.c 1576	/* Function:	-																														*/
; rs232cmd.c 1577	/* Remarks:		-																														*/
; rs232cmd.c 1578	/* Returns:		-																														*/
; rs232cmd.c 1579	/* Updates:		-																														*/
; rs232cmd.c 1580	/**************************************************************************/
; rs232cmd.c 1581	void SystemPresetDate( void)
; rs232cmd.c 1582	{
	ALIGN	1
	SYMB	LINE, 1582
	PUBLIC	_SystemPresetDate
_SystemPresetDate:
	SYMB	TYPE, 562, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetDate", _SystemPresetDate, #562, 0, 0, 48
	SYMB	ALAB, _SystemPresetDate, #562
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#080H
	SYMB	SOFF, 132
	SYMB	IDEN, "Reg", -132, #16, 130, 5
	SYMB	IDEN, "Preset", -130, #559, 130, 5
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	TYPE, 563, 'Z', #2, 19
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 1583		int Reg;
; rs232cmd.c 1584		PresetObject Preset;
; rs232cmd.c 1585		UI year, month, day;
; rs232cmd.c 1586		char buffer[20];
; rs232cmd.c 1587	
; rs232cmd.c 1588		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1588
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_202
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_202
; rs232cmd.c 1589		{
; rs232cmd.c 1590			if ( CmdRequest)
	SYMB	LINE, 1590
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_189
; rs232cmd.c 1591			{
; rs232cmd.c 1592				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &Reg) != 1))
	SYMB	LINE, 1592
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_185
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 136
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 140
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 132
	CMP.W	R0,#01H
	BEQ	_186
_185:
; rs232cmd.c 1593					SCPIError = SyntaxErr;
	SYMB	LINE, 1593
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_202
_186:
; rs232cmd.c 1594				else
; rs232cmd.c 1595				{
; rs232cmd.c 1596					if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1596
	MOV.W	R0,[R7]
	BEQ	_187
	CMP.W	[R7],#04H
	BLE	_188
_187:
; rs232cmd.c 1597						SCPIError = DataOutOfRange;
	SYMB	LINE, 1597
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_202
_188:
; rs232cmd.c 1598					else
; rs232cmd.c 1599					{
; rs232cmd.c 1600						NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1600
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+2
	MOV.W	R2,[R7]
	ASL.W	R2,#01H
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	CALL	_NV_Recall
; rs232cmd.c 1601	
; rs232cmd.c 1602						day = Preset.Date % 100;
	SYMB	LINE, 1602
	MOV.W	R1,[R7+28]
	MOV.W	R0,[R7+26]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	[R7+28],R1
	MOV.W	[R7+26],R0
	FCALL	__UMODL
	MOV.W	[R7+106],R0
; rs232cmd.c 1603						month = ( Preset.Date / 100) % 100;
	SYMB	LINE, 1603
	MOV.W	R1,[R7+28]
	MOV.W	R0,[R7+26]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+104],R0
; rs232cmd.c 1604						year = ( Preset.Date / 10000);
	SYMB	LINE, 1604
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.W	R1,[R7+28]
	MOV.W	R0,[R7+26]
	FCALL	__UDIVL
	MOV.W	[R7+102],R0
; rs232cmd.c 1605	
; rs232cmd.c 1606						sprintf( buffer, "%d,%d,%d\n", year, month, day);
	SYMB	LINE, 1606
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+108
	MOV.W	R0,[R7+106]
	PUSH.W	R0
	SYMB	SOFF, 134
	MOV.W	R0,[R7+106]
	PUSH.W	R0
	SYMB	SOFF, 136
	MOV.W	R0,[R7+106]
	PUSH.W	R0
	SYMB	SOFF, 138
	MOV.W	R1,#SEG( _183 )
	MOV.W	R0,#SOF( _183 )
	PUSH.W	R0, R1
	SYMB	SOFF, 142
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 132
; rs232cmd.c 1607	
; rs232cmd.c 1608						rs232puts( buffer);
	SYMB	LINE, 1608
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 1609					}
; rs232cmd.c 1610				}
; rs232cmd.c 1611			}
	SYMB	LINE, 1611
	BR	_202
_189:
; rs232cmd.c 1612			else
; rs232cmd.c 1613			{
; rs232cmd.c 1614				if (( ParCnt != 3) || (( sscanf( Cmd, "%d,%d,%d", &year, &month, &day)) != 3))
	SYMB	LINE, 1614
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_190
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+102
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+104
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+106
	PUSH.W	R0, R1
	SYMB	SOFF, 136
	PUSH.W	R4, R5
	SYMB	SOFF, 140
	PUSH.W	R2, R3
	SYMB	SOFF, 144
	MOV.W	R3,#SEG( _184 )
	MOV.W	R2,#SOF( _184 )
	PUSH.W	R2, R3
	SYMB	SOFF, 148
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 132
	CMP.W	R0,#03H
	BEQ	_191
_190:
; rs232cmd.c 1615					SCPIError = SyntaxErr;
	SYMB	LINE, 1615
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_202
_191:
; rs232cmd.c 1616				else
; rs232cmd.c 1617				{
; rs232cmd.c 1618					if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 1618
	MOV.W	R0,[R7+102]
	MOV.W	R1,[R7+104]
	MOV.W	R2,[R7+106]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_192
; rs232cmd.c 1619						SCPIError = ExecErr;
	SYMB	LINE, 1619
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_202
_192:
; rs232cmd.c 1620					else
; rs232cmd.c 1621					{
; rs232cmd.c 1622						if (( Reg == 0) || ( Reg > NoOfPresets))
	SYMB	LINE, 1622
	MOV.W	R0,[R7]
	BEQ	_193
	CMP.W	[R7],#04H
	BLE	_194
_193:
; rs232cmd.c 1623							SCPIError = DataOutOfRange;
	SYMB	LINE, 1623
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_202
_194:
; rs232cmd.c 1624						else
; rs232cmd.c 1625						{
; rs232cmd.c 1626							NV_Recall( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1626
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#064H
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_NV_Recall
; rs232cmd.c 1627							Preset.Date = day + 100*month + 10000*year;
	SYMB	LINE, 1627
	MOV.W	R0,[R7+104]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+106]
	MOV.W	R2,[R7+102]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.W	[R7+28],R1
	MOV.W	[R7+26],R0
; rs232cmd.c 1628							NV_Store( &Preset, PresetPtr[Reg-1], sizeof( Preset));
	SYMB	LINE, 1628
	MOV.W	R0,[R7]
	ASL.W	R0,#01H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#064H
	CALL	_NV_Store
; rs232cmd.c 1629						}
; rs232cmd.c 1630					}				
; rs232cmd.c 1631				}
; rs232cmd.c 1632			}
; rs232cmd.c 1633		}
	SYMB	LINE, 1633
_202:
; rs232cmd.c 1634	}
	SYMB	LINE, 1634
	ADD.W	R7,#080H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1635	
; rs232cmd.c 1636	/**************************************************************************/
; rs232cmd.c 1637	/* SystemPresetDownload																				 RS232CMD.C */
; rs232cmd.c 1638	/*																																				*/
; rs232cmd.c 1639	/* Author:		Kim Engedahl, DEV, 000413	    															*/
; rs232cmd.c 1640	/* Revised:		000413					     																				*/
; rs232cmd.c 1641	/*																																				*/								
; rs232cmd.c 1642	/* Function:	Download a setup to a specific preset withouth disturbing		*/
; rs232cmd.c 1643	/*						the setting/function of the PT5201.										 			*/
; rs232cmd.c 1644	/* Remarks:		--																													*/
; rs232cmd.c 1645	/* Returns:		-																														*/
; rs232cmd.c 1646	/* Updates:		-																														*/
; rs232cmd.c 1647	/**************************************************************************/
; rs232cmd.c 1648	void SystemPresetDownload( void)
; rs232cmd.c 1649	{
	ALIGN	1
	SYMB	LINE, 1649
	PUBLIC	_SystemPresetDownload
_SystemPresetDownload:
	SYMB	TYPE, 565, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetDownload", _SystemPresetDownload, #565, 0, 0, 0
	SYMB	ALAB, _SystemPresetDownload, #565
; rs232cmd.c 1650		;
; rs232cmd.c 1651	}
	SYMB	LINE, 1651
	RET
	SYMB	EFUN
; rs232cmd.c 1652	
; rs232cmd.c 1653	/**************************************************************************/
; rs232cmd.c 1654	/* SystemPresetUpload																					 RS232CMD.C */
; rs232cmd.c 1655	/*																																				*/
; rs232cmd.c 1656	/* Author:		Kim Engedahl, DEV, 000413	    															*/
; rs232cmd.c 1657	/* Revised:		000413					     																				*/
; rs232cmd.c 1658	/*																																				*/								
; rs232cmd.c 1659	/* Function:	Upload a setup from a specific preset withouth disturbing		*/
; rs232cmd.c 1660	/*						the setting/function of the PT5201.											 		*/
; rs232cmd.c 1661	/* Remarks:		--																													*/
; rs232cmd.c 1662	/* Returns:		-																														*/
; rs232cmd.c 1663	/* Updates:		-																														*/
; rs232cmd.c 1664	/**************************************************************************/
; rs232cmd.c 1665	void SystemPresetUpload( void)
; rs232cmd.c 1666	{
	ALIGN	1
	SYMB	LINE, 1666
	PUBLIC	_SystemPresetUpload
_SystemPresetUpload:
	SYMB	TYPE, 566, 'X', 12, #1, 30, 0
	SYMB	GFUN, "SystemPresetUpload", _SystemPresetUpload, #566, 0, 0, 0
	SYMB	ALAB, _SystemPresetUpload, #566
; rs232cmd.c 1667		;
; rs232cmd.c 1668	}
	SYMB	LINE, 1668
	RET
	SYMB	EFUN
; rs232cmd.c 1669	
; rs232cmd.c 1670	/**************************************************************************/
; rs232cmd.c 1671	/* StatusOperEvent																						 RS232CMD.C */
; rs232cmd.c 1672	/*																																				*/
; rs232cmd.c 1673	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1674	/* Revised:		000402				     																					*/
; rs232cmd.c 1675	/*																																				*/
; rs232cmd.c 1676	/* Function:	Set/read the status operation event register								*/
; rs232cmd.c 1677	/* Remarks:		Reading the event register clears it												*/
; rs232cmd.c 1678	/* Returns:		-																														*/
; rs232cmd.c 1679	/* Updates:		OperEventReg																								*/
; rs232cmd.c 1680	/**************************************************************************/
; rs232cmd.c 1681	void StatusOperEvent( void)
; rs232cmd.c 1682	{
	ALIGN	1
	SYMB	LINE, 1682
	PUBLIC	_StatusOperEvent
_StatusOperEvent:
	SYMB	TYPE, 567, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusOperEvent", _StatusOperEvent, #567, 0, 0, 0
	SYMB	ALAB, _StatusOperEvent, #567
; rs232cmd.c 1683		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1683
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_214
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_214
; rs232cmd.c 1684		{
; rs232cmd.c 1685			if ( ParCnt)
	SYMB	LINE, 1685
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_209
; rs232cmd.c 1686				SCPIError = ParNotAllowed;
	SYMB	LINE, 1686
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_209:
; rs232cmd.c 1687			else
; rs232cmd.c 1688			{
; rs232cmd.c 1689				if ( CmdRequest) {
	SYMB	LINE, 1689
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_210
; rs232cmd.c 1690					rs232printf( 12, "%d\n", OperEventReg);
	SYMB	LINE, 1690
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _OperEventReg )
	MOV.W	R1,#SOF( _OperEventReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
; rs232cmd.c 1691	
; rs232cmd.c 1692					OperEventReg = 0;
	SYMB	LINE, 1692
	MOV.B	ES,#SEG( _OperEventReg )
	MOV.W	R0,#SOF( _OperEventReg )
	MOV.W	[R0],#00H
; rs232cmd.c 1693				}
	SYMB	LINE, 1693
	RET
_210:
; rs232cmd.c 1694				else
; rs232cmd.c 1695					SCPIError = SyntaxErr;
	SYMB	LINE, 1695
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1696			}
; rs232cmd.c 1697		}
	SYMB	LINE, 1697
_214:
; rs232cmd.c 1698	}
	SYMB	LINE, 1698
	RET
	SYMB	EFUN
; rs232cmd.c 1699	
; rs232cmd.c 1700	/**************************************************************************/
; rs232cmd.c 1701	/* StatusOperCondition																				 RS232CMD.C */
; rs232cmd.c 1702	/*																																				*/
; rs232cmd.c 1703	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1704	/* Revised:		000413				     																					*/
; rs232cmd.c 1705	/*																																				*/
; rs232cmd.c 1706	/* Function:	Read the status questionable condition register							*/
; rs232cmd.c 1707	/* Remarks:		No parameters																								*/
; rs232cmd.c 1708	/* Returns:																																*/
; rs232cmd.c 1709	/* Updates:																																*/
; rs232cmd.c 1710	/**************************************************************************/
; rs232cmd.c 1711	void StatusOperCondition( void)
; rs232cmd.c 1712	{
	ALIGN	1
	SYMB	LINE, 1712
	PUBLIC	_StatusOperCondition
_StatusOperCondition:
	SYMB	TYPE, 568, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusOperCondition", _StatusOperCondition, #568, 0, 0, 0
	SYMB	ALAB, _StatusOperCondition, #568
; rs232cmd.c 1713		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1713
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_220
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_220
; rs232cmd.c 1714		{
; rs232cmd.c 1715			if ( ParCnt)
	SYMB	LINE, 1715
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_215
; rs232cmd.c 1716				SCPIError = ParNotAllowed;
	SYMB	LINE, 1716
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_215:
; rs232cmd.c 1717			else
; rs232cmd.c 1718			{
; rs232cmd.c 1719				if ( CmdRequest)
	SYMB	LINE, 1719
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_216
; rs232cmd.c 1720					rs232printf( 12, "%d\n", OperConditionReg);
	SYMB	LINE, 1720
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _OperConditionReg )
	MOV.W	R1,#SOF( _OperConditionReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
	RET
_216:
; rs232cmd.c 1721				else
; rs232cmd.c 1722					SCPIError = SyntaxErr;
	SYMB	LINE, 1722
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1723			}
; rs232cmd.c 1724		}
	SYMB	LINE, 1724
_220:
; rs232cmd.c 1725	}
	SYMB	LINE, 1725
	RET
	SYMB	EFUN
; rs232cmd.c 1726	
; rs232cmd.c 1727	/**************************************************************************/
; rs232cmd.c 1728	/* StatusOperEnable																						 RS232CMD.C */
; rs232cmd.c 1729	/*																																				*/
; rs232cmd.c 1730	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1731	/* Revised:		000413				     																					*/
; rs232cmd.c 1732	/*																																				*/
; rs232cmd.c 1733	/* Function:	Set/read the status operaion enable register								*/
; rs232cmd.c 1734	/* Remarks:		--																													*/
; rs232cmd.c 1735	/* Returns:		-																														*/
; rs232cmd.c 1736	/* Updates:		-																														*/
; rs232cmd.c 1737	/**************************************************************************/
; rs232cmd.c 1738	void StatusOperEnable( void)
; rs232cmd.c 1739	{
	ALIGN	1
	SYMB	LINE, 1739
	PUBLIC	_StatusOperEnable
_StatusOperEnable:
	SYMB	TYPE, 569, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusOperEnable", _StatusOperEnable, #569, 0, 0, 0
	SYMB	ALAB, _StatusOperEnable, #569
	ADDS.W	R7,#0CH
	SYMB	SOFF, 4
	SYMB	IDEN, "Reg", -4, #6, 130, 5
; rs232cmd.c 1740		long	Reg;
; rs232cmd.c 1741	
; rs232cmd.c 1742		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1742
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_232
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_232
; rs232cmd.c 1743		{
; rs232cmd.c 1744			if ( CmdRequest)
	SYMB	LINE, 1744
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_223
; rs232cmd.c 1745			{
; rs232cmd.c 1746				if ( ParCnt)
	SYMB	LINE, 1746
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_222
; rs232cmd.c 1747					SCPIError = ParNotAllowed;
	SYMB	LINE, 1747
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_232
_222:
; rs232cmd.c 1748				else
; rs232cmd.c 1749					rs232printf( 12, "%d\n", OperEnableReg);
	SYMB	LINE, 1749
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _OperEnableReg )
	MOV.W	R1,#SOF( _OperEnableReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 1750			}
	SYMB	LINE, 1750
	BR	_232
_223:
; rs232cmd.c 1751			else
; rs232cmd.c 1752			{
; rs232cmd.c 1753				if (( ParCnt != 1) || ( sscanf( Cmd, "%l", &Reg) != 1))
	SYMB	LINE, 1753
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_224
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _221 )
	MOV.W	R2,#SOF( _221 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	CMP.W	R0,#01H
	BEQ	_225
_224:
; rs232cmd.c 1754				{
; rs232cmd.c 1755					SCPIError = SyntaxErr;	
	SYMB	LINE, 1755
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1756					return;
	SYMB	LINE, 1756
	BR	_232
; rs232cmd.c 1757				}
	SYMB	LINE, 1757
_225:
; rs232cmd.c 1758	
; rs232cmd.c 1759				if ( Reg > 65535)
	SYMB	LINE, 1759
	CMP.W	[R7+2],#00H
	BLT	_226
	BGT	_235
	CMP.W	[R7],#0FFFFH
	BL	_226
_235:
; rs232cmd.c 1760				{
; rs232cmd.c 1761					SCPIError = DataOutOfRange;
	SYMB	LINE, 1761
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1762					return;
	SYMB	LINE, 1762
	BR	_232
; rs232cmd.c 1763				}
	SYMB	LINE, 1763
_226:
; rs232cmd.c 1764	
; rs232cmd.c 1765				OperEnableReg = Reg & 0xEFFF;
	SYMB	LINE, 1765
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	AND.W	R0,#0EFFFH
	MOV.B	ES,#SEG( _OperEnableReg )
	MOV.W	R1,#SOF( _OperEnableReg )
	MOV.W	[R1],R0
; rs232cmd.c 1766			}
; rs232cmd.c 1767		}
; rs232cmd.c 1768	}
	SYMB	LINE, 1768
_232:
	ADDS.W	R7,#04H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1769	
; rs232cmd.c 1770	/***************************************************************************/
; rs232cmd.c 1771	/* StatusQuestEvent																			 			 RS232CMD.C */
; rs232cmd.c 1772	/*																																				*/
; rs232cmd.c 1773	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1774	/* Revised:		000413				     																					*/
; rs232cmd.c 1775	/*																																				*/
; rs232cmd.c 1776	/* Function:	Set/read the status questionablen event register						*/
; rs232cmd.c 1777	/* Remarks:		Reading the event register clears it												*/
; rs232cmd.c 1778	/* Returns:		-																														*/
; rs232cmd.c 1779	/* Updates:		QuestEventReg																								*/
; rs232cmd.c 1780	/***************************************************************************/
; rs232cmd.c 1781	void StatusQuestEvent( void)
; rs232cmd.c 1782	{
	ALIGN	1
	SYMB	LINE, 1782
	PUBLIC	_StatusQuestEvent
_StatusQuestEvent:
	SYMB	TYPE, 570, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusQuestEvent", _StatusQuestEvent, #570, 0, 0, 0
	SYMB	ALAB, _StatusQuestEvent, #570
; rs232cmd.c 1783		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1783
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_241
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_241
; rs232cmd.c 1784		{
; rs232cmd.c 1785			if ( ParCnt)
	SYMB	LINE, 1785
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_236
; rs232cmd.c 1786				SCPIError = ParNotAllowed;
	SYMB	LINE, 1786
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_236:
; rs232cmd.c 1787			else
; rs232cmd.c 1788			{
; rs232cmd.c 1789				if ( CmdRequest)
	SYMB	LINE, 1789
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_237
; rs232cmd.c 1790				{
; rs232cmd.c 1791					rs232printf( 12, "%d\n", QuestEventReg);
	SYMB	LINE, 1791
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _QuestEventReg )
	MOV.W	R1,#SOF( _QuestEventReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
; rs232cmd.c 1792	
; rs232cmd.c 1793					QuestEventReg = 0;
	SYMB	LINE, 1793
	MOV.B	ES,#SEG( _QuestEventReg )
	MOV.W	R0,#SOF( _QuestEventReg )
	MOV.W	[R0],#00H
; rs232cmd.c 1794				}
	SYMB	LINE, 1794
	RET
_237:
; rs232cmd.c 1795				else
; rs232cmd.c 1796					SCPIError = SyntaxErr;
	SYMB	LINE, 1796
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1797			}
; rs232cmd.c 1798		}
	SYMB	LINE, 1798
_241:
; rs232cmd.c 1799	}
	SYMB	LINE, 1799
	RET
	SYMB	EFUN
; rs232cmd.c 1800	
; rs232cmd.c 1801	/**************************************************************************/
; rs232cmd.c 1802	/* StatusQuestCondition																		 		 RS232CMD.C */
; rs232cmd.c 1803	/*																																				*/
; rs232cmd.c 1804	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1805	/* Revised:		000413				     																					*/
; rs232cmd.c 1806	/*																																				*/
; rs232cmd.c 1807	/* Function:	Read the status operation condition register								*/
; rs232cmd.c 1808	/* Remarks:		No parameters																								*/
; rs232cmd.c 1809	/* Returns:		-																														*/
; rs232cmd.c 1810	/* Updates:		-																														*/
; rs232cmd.c 1811	/**************************************************************************/
; rs232cmd.c 1812	void StatusQuestCondition( void)
; rs232cmd.c 1813	{
	ALIGN	1
	SYMB	LINE, 1813
	PUBLIC	_StatusQuestCondition
_StatusQuestCondition:
	SYMB	TYPE, 571, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusQuestCondition", _StatusQuestCondition, #571, 0, 0, 0
	SYMB	ALAB, _StatusQuestCondition, #571
; rs232cmd.c 1814		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1814
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_247
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_247
; rs232cmd.c 1815		{
; rs232cmd.c 1816			if ( ParCnt)
	SYMB	LINE, 1816
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_242
; rs232cmd.c 1817				SCPIError = ParNotAllowed;
	SYMB	LINE, 1817
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_242:
; rs232cmd.c 1818			else
; rs232cmd.c 1819			{
; rs232cmd.c 1820				if ( CmdRequest)
	SYMB	LINE, 1820
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_243
; rs232cmd.c 1821				rs232printf( 12, "%d\n", QuestConditionReg);
	SYMB	LINE, 1821
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _QuestConditionReg )
	MOV.W	R1,#SOF( _QuestConditionReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 2
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 0
	RET
_243:
; rs232cmd.c 1822				else
; rs232cmd.c 1823					SCPIError = SyntaxErr;
	SYMB	LINE, 1823
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1824			}
; rs232cmd.c 1825		}
	SYMB	LINE, 1825
_247:
; rs232cmd.c 1826	}
	SYMB	LINE, 1826
	RET
	SYMB	EFUN
; rs232cmd.c 1827	
; rs232cmd.c 1828	/**************************************************************************/
; rs232cmd.c 1829	/* StatusQuestEnable																					 RS232CMD.C */
; rs232cmd.c 1830	/*																																				*/
; rs232cmd.c 1831	/* Author:		Kim Engedahl, DEV, 970630	    															*/
; rs232cmd.c 1832	/* Revised:		000413				     																					*/
; rs232cmd.c 1833	/*																																				*/
; rs232cmd.c 1834	/* Function:	Set/read the status questionable enable register						*/
; rs232cmd.c 1835	/* Remarks:		--																													*/
; rs232cmd.c 1836	/* Returns:																																*/
; rs232cmd.c 1837	/* Updates:																																*/
; rs232cmd.c 1838	/**************************************************************************/
; rs232cmd.c 1839	void StatusQuestEnable( void)
; rs232cmd.c 1840	{
	ALIGN	1
	SYMB	LINE, 1840
	PUBLIC	_StatusQuestEnable
_StatusQuestEnable:
	SYMB	TYPE, 572, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusQuestEnable", _StatusQuestEnable, #572, 0, 0, 0
	SYMB	ALAB, _StatusQuestEnable, #572
	ADDS.W	R7,#0CH
	SYMB	SOFF, 4
	SYMB	IDEN, "Reg", -4, #6, 130, 5
; rs232cmd.c 1841		long	Reg;
; rs232cmd.c 1842	
; rs232cmd.c 1843		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1843
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_258
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_258
; rs232cmd.c 1844		{
; rs232cmd.c 1845			if ( CmdRequest)
	SYMB	LINE, 1845
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_249
; rs232cmd.c 1846			{
; rs232cmd.c 1847				if ( ParCnt)
	SYMB	LINE, 1847
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_248
; rs232cmd.c 1848					SCPIError = ParNotAllowed;
	SYMB	LINE, 1848
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_258
_248:
; rs232cmd.c 1849				else
; rs232cmd.c 1850					rs232printf( 12, "%d\n", QuestEnableReg);
	SYMB	LINE, 1850
	MOV.W	R0,#0CH
	MOV.B	ES,#SEG( _QuestEnableReg )
	MOV.W	R1,#SOF( _QuestEnableReg )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 1851			}
	SYMB	LINE, 1851
	BR	_258
_249:
; rs232cmd.c 1852			else
; rs232cmd.c 1853			{
; rs232cmd.c 1854				if (( ParCnt != 1) || ( sscanf( Cmd, "%l", &Reg) != 1))
	SYMB	LINE, 1854
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_250
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _221 )
	MOV.W	R2,#SOF( _221 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	CMP.W	R0,#01H
	BEQ	_251
_250:
; rs232cmd.c 1855				{
; rs232cmd.c 1856					SCPIError = SyntaxErr;	
	SYMB	LINE, 1856
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1857					return;
	SYMB	LINE, 1857
	BR	_258
; rs232cmd.c 1858				}
	SYMB	LINE, 1858
_251:
; rs232cmd.c 1859	
; rs232cmd.c 1860				if ( Reg > 65535)
	SYMB	LINE, 1860
	CMP.W	[R7+2],#00H
	BLT	_252
	BGT	_261
	CMP.W	[R7],#0FFFFH
	BL	_252
_261:
; rs232cmd.c 1861				{
; rs232cmd.c 1862					SCPIError = DataOutOfRange;
	SYMB	LINE, 1862
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1863					return;
	SYMB	LINE, 1863
	BR	_258
; rs232cmd.c 1864				}
	SYMB	LINE, 1864
_252:
; rs232cmd.c 1865	
; rs232cmd.c 1866				QuestEnableReg = Reg & 0xEFFF;
	SYMB	LINE, 1866
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	AND.W	R0,#0EFFFH
	MOV.B	ES,#SEG( _QuestEnableReg )
	MOV.W	R1,#SOF( _QuestEnableReg )
	MOV.W	[R1],R0
; rs232cmd.c 1867			}
; rs232cmd.c 1868		}
; rs232cmd.c 1869	}
	SYMB	LINE, 1869
_258:
	ADDS.W	R7,#04H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 1870	
; rs232cmd.c 1871	/**************************************************************************/
; rs232cmd.c 1872	/* StatusPreset																								 RS232CMD.C */
; rs232cmd.c 1873	/*																																				*/
; rs232cmd.c 1874	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 1875	/* Revised:		000617				     																					*/
; rs232cmd.c 1876	/*																																				*/
; rs232cmd.c 1877	/* Function:																															*/
; rs232cmd.c 1878	/* Remarks:																																*/
; rs232cmd.c 1879	/* Returns:																																*/
; rs232cmd.c 1880	/* Updates:																																*/
; rs232cmd.c 1881	/**************************************************************************/
; rs232cmd.c 1882	void StatusPreset( void)
; rs232cmd.c 1883	{
	ALIGN	1
	SYMB	LINE, 1883
	PUBLIC	_StatusPreset
_StatusPreset:
	SYMB	TYPE, 573, 'X', 12, #1, 30, 0
	SYMB	GFUN, "StatusPreset", _StatusPreset, #573, 0, 0, 0
	SYMB	ALAB, _StatusPreset, #573
; rs232cmd.c 1884		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1884
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_270
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_270
; rs232cmd.c 1885		{
; rs232cmd.c 1886			if ( CmdRequest)
	SYMB	LINE, 1886
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_266
; rs232cmd.c 1887			{
; rs232cmd.c 1888				if ( ParCnt)
	SYMB	LINE, 1888
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_263
; rs232cmd.c 1889					SCPIError = SyntaxErr;
	SYMB	LINE, 1889
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_263:
; rs232cmd.c 1890				else
; rs232cmd.c 1891				{
; rs232cmd.c 1892					if ( Settings.ActivePreset)
	SYMB	LINE, 1892
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.W	R0,[R0]
	BEQ	_264
; rs232cmd.c 1893						rs232putchar( '0' + Settings.ActivePreset);
	SYMB	LINE, 1893
	ADD.B	R0L,#030H
	CALL	_rs232putchar
	BR	_265
_264:
; rs232cmd.c 1894					else
; rs232cmd.c 1895						rs232puts( "OFF");
	SYMB	LINE, 1895
	MOV.W	R1,#SEG( _262 )
	MOV.W	R0,#SOF( _262 )
	CALL	_rs232puts
_265:
; rs232cmd.c 1896	
; rs232cmd.c 1897					rs232putchar( '\n');
	SYMB	LINE, 1897
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1898				}
; rs232cmd.c 1899			}
	SYMB	LINE, 1899
	RET
_266:
; rs232cmd.c 1900			else
; rs232cmd.c 1901				SCPIError = SyntaxErr;
	SYMB	LINE, 1901
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 1902		}
	SYMB	LINE, 1902
_270:
; rs232cmd.c 1903	}
	SYMB	LINE, 1903
	RET
	SYMB	EFUN
; rs232cmd.c 1904	
; rs232cmd.c 1905	/**************************************************************************/
; rs232cmd.c 1906	/* GenlockGen															 	   								 RS232CMD.C	*/
; rs232cmd.c 1907	/*																																				*/
; rs232cmd.c 1908	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 1909	/* Revised:		000525				     																					*/
; rs232cmd.c 1910	/*																																				*/
; rs232cmd.c 1911	/* Function:	Return the Genlock Configuration.														*/
; rs232cmd.c 1912	/* Remarks:		Request only																								*/
; rs232cmd.c 1913	/* Returns:		--																													*/
; rs232cmd.c 1914	/* Updates:	  --																													*/
; rs232cmd.c 1915	/**************************************************************************/
; rs232cmd.c 1916	void GenlockGen( void)
; rs232cmd.c 1917	{
	ALIGN	1
	SYMB	LINE, 1917
	PUBLIC	_GenlockGen
_GenlockGen:
	SYMB	TYPE, 574, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGen", _GenlockGen, #574, 0, 0, 48
	SYMB	ALAB, _GenlockGen, #574
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 1918		char code *str;
; rs232cmd.c 1919	
; rs232cmd.c 1920		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1920
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_278
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_278
; rs232cmd.c 1921		{
; rs232cmd.c 1922			if ( !CmdRequest)
	SYMB	LINE, 1922
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_271
; rs232cmd.c 1923					SCPIError = SyntaxErr;
	SYMB	LINE, 1923
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_278
_271:
; rs232cmd.c 1924			else
; rs232cmd.c 1925			{
; rs232cmd.c 1926				if ( ParCnt)
	SYMB	LINE, 1926
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_272
; rs232cmd.c 1927					SCPIError = ParNotAllowed;
	SYMB	LINE, 1927
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_278
_272:
; rs232cmd.c 1928				else
; rs232cmd.c 1929				{
; rs232cmd.c 1930					str = GenlockSystemPar[GenlockSetup.System].LongName;
	SYMB	LINE, 1930
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _GenlockSystemPar )
	MOV.W	R0,#SOF( _GenlockSystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_279
	ADDS.B	CS,#01H
_279:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 1931	
; rs232cmd.c 1932					while ( *str)
	SYMB	LINE, 1932
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_274
_273:
; rs232cmd.c 1933						rs232putchar( *str++);
	SYMB	LINE, 1933
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 1932
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_273
	SYMB	LINE, 1933
_274:
; rs232cmd.c 1934	
; rs232cmd.c 1935					rs232putchar(',');
	SYMB	LINE, 1935
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 1936	
; rs232cmd.c 1937					PrintSamplesToFLT( GenlockSetup.System, GenlockSetup.Delay);
	SYMB	LINE, 1937
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _GenlockSetup+2 )
	MOV.W	R3,#SOF( _GenlockSetup+2 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	CALL	_PrintSamplesToFLT
; rs232cmd.c 1938	
; rs232cmd.c 1939					rs232putchar ( '\n');
	SYMB	LINE, 1939
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1940				}
; rs232cmd.c 1941			}
; rs232cmd.c 1942		}
	SYMB	LINE, 1942
_278:
; rs232cmd.c 1943	}
	SYMB	LINE, 1943
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 1944	
; rs232cmd.c 1945	/**************************************************************************/
; rs232cmd.c 1946	/* GenlockGenSystem																		 	   		 RS232CMD.C	*/
; rs232cmd.c 1947	/*																																				*/
; rs232cmd.c 1948	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 1949	/* Revised:		000525				     																					*/
; rs232cmd.c 1950	/*																																				*/
; rs232cmd.c 1951	/* Function:	Handle the genlock system command														*/
; rs232cmd.c 1952	/* Remarks:		--																													*/
; rs232cmd.c 1953	/* Returns:		--																													*/
; rs232cmd.c 1954	/* Updates:		--																													*/
; rs232cmd.c 1955	/**************************************************************************/
; rs232cmd.c 1956	void GenlockGenSystem( void)
; rs232cmd.c 1957	{
	ALIGN	1
	SYMB	LINE, 1957
	PUBLIC	_GenlockGenSystem
_GenlockGenSystem:
	SYMB	TYPE, 575, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenSystem", _GenlockGenSystem, #575, 0, 0, 48
	SYMB	ALAB, _GenlockGenSystem, #575
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 1958		int system;
; rs232cmd.c 1959		char code *str;
; rs232cmd.c 1960	
; rs232cmd.c 1961		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 1961
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_291
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_291
; rs232cmd.c 1962		{
; rs232cmd.c 1963			if ( CmdRequest)
	SYMB	LINE, 1963
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_283
; rs232cmd.c 1964			{
; rs232cmd.c 1965				if ( ParCnt)
	SYMB	LINE, 1965
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_280
; rs232cmd.c 1966					SCPIError = ParNotAllowed;
	SYMB	LINE, 1966
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_291
_280:
; rs232cmd.c 1967				else
; rs232cmd.c 1968				{
; rs232cmd.c 1969					str = GenlockSystemPar[GenlockSetup.System].LongName;
	SYMB	LINE, 1969
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _GenlockSystemPar )
	MOV.W	R0,#SOF( _GenlockSystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_292
	ADDS.B	CS,#01H
_292:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 1970	
; rs232cmd.c 1971					while ( *str)
	SYMB	LINE, 1971
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_282
_281:
; rs232cmd.c 1972						rs232putchar( *str++);
	SYMB	LINE, 1972
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 1971
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_281
	SYMB	LINE, 1972
_282:
; rs232cmd.c 1973	
; rs232cmd.c 1974					rs232putchar('\n');
	SYMB	LINE, 1974
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 1975				}
; rs232cmd.c 1976			}
	SYMB	LINE, 1976
	BR	_291
_283:
; rs232cmd.c 1977			else
; rs232cmd.c 1978			{
; rs232cmd.c 1979				if ( ParCnt != 1)
	SYMB	LINE, 1979
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_284
; rs232cmd.c 1980					SCPIError = SyntaxErr;
	SYMB	LINE, 1980
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_291
_284:
; rs232cmd.c 1981				else
; rs232cmd.c 1982				{
; rs232cmd.c 1983					system = FindParameter( Cmd, GenlockSystemPar);
	SYMB	LINE, 1983
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _GenlockSystemPar )
	MOV.W	R2,#SOF( _GenlockSystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 1984		
; rs232cmd.c 1985					if ( system > -1)
	SYMB	LINE, 1985
	CMP.W	R0,#0FFFFH
	BLE	_285
; rs232cmd.c 1986						SetGenlockSystem( system);
	SYMB	LINE, 1986
	CALL	_SetGenlockSystem
	SYMB	LTIM, "system", 2, 0, 77
	BR	_291
_285:
; rs232cmd.c 1987					else
; rs232cmd.c 1988						SCPIError = DataOutOfRange;
	SYMB	LINE, 1988
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 1989				}
; rs232cmd.c 1990			}
; rs232cmd.c 1991		}
	SYMB	LINE, 1991
_291:
; rs232cmd.c 1992	}
	SYMB	LINE, 1992
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 1993	
; rs232cmd.c 1994	/**************************************************************************/
; rs232cmd.c 1995	/* GenlockGenDelay		 								  		 								   RS232CMD.C */
; rs232cmd.c 1996	/*																																				*/
; rs232cmd.c 1997	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 1998	/* Revised:		000525				     																					*/
; rs232cmd.c 1999	/*																																				*/
; rs232cmd.c 2000	/* Function:	Handle the genlock timing command														*/
; rs232cmd.c 2001	/* Remarks:		--																													*/
; rs232cmd.c 2002	/* Returns:		--																													*/
; rs232cmd.c 2003	/* Updates:		--																													*/
; rs232cmd.c 2004	/**************************************************************************/
; rs232cmd.c 2005	void GenlockGenDelay( void)
; rs232cmd.c 2006	{
	ALIGN	1
	SYMB	LINE, 2006
	PUBLIC	_GenlockGenDelay
_GenlockGenDelay:
	SYMB	TYPE, 576, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenDelay", _GenlockGenDelay, #576, 0, 0, 48
	SYMB	ALAB, _GenlockGenDelay, #576
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	IDEN, "field", -12, #16, 130, 5
	SYMB	IDEN, "line", -10, #16, 130, 5
	SYMB	IDEN, "offset", -8, #10, 130, 5
	SYMB	IDEN, "samples", -1, #6, 130, 5
	SYMB	LTIM, "samples", -1, 0, 69
; rs232cmd.c 2007		int field, line;
; rs232cmd.c 2008		float offset;
; rs232cmd.c 2009		long samples;
; rs232cmd.c 2010	
; rs232cmd.c 2011		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2011
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_306
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_306
; rs232cmd.c 2012		{
; rs232cmd.c 2013			if ( CmdRequest)
	SYMB	LINE, 2013
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_297
; rs232cmd.c 2014			{
; rs232cmd.c 2015				if ( ParCnt)
	SYMB	LINE, 2015
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_296
; rs232cmd.c 2016					SCPIError = ParNotAllowed;
	SYMB	LINE, 2016
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_306
_296:
; rs232cmd.c 2017				else
; rs232cmd.c 2018				{
; rs232cmd.c 2019					PrintSamplesToFLT( GenlockSetup.System, GenlockSetup.Delay);
	SYMB	LINE, 2019
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _GenlockSetup+2 )
	MOV.W	R3,#SOF( _GenlockSetup+2 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2020	
; rs232cmd.c 2021					rs232putchar ( '\n');
	SYMB	LINE, 2021
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2022				}
; rs232cmd.c 2023			}
	SYMB	LINE, 2023
	BR	_306
_297:
; rs232cmd.c 2024			else
; rs232cmd.c 2025			{
; rs232cmd.c 2026				if (( ParCnt != 3) || ( sscanf( Cmd, "%d,%d,%f", &field, &line, &offset) != 3))
	SYMB	LINE, 2026
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_298
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 16
	PUSH.W	R4, R5
	SYMB	SOFF, 20
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	MOV.W	R3,#SEG( _295 )
	MOV.W	R2,#SOF( _295 )
	PUSH.W	R2, R3
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 12
	CMP.W	R0,#03H
	BEQ	_299
_298:
; rs232cmd.c 2027					SCPIError = SyntaxErr;
	SYMB	LINE, 2027
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_306
_299:
; rs232cmd.c 2028				else
; rs232cmd.c 2029				{
; rs232cmd.c 2030					if (( samples = FLTToSamples( GenlockSetup.System, field, line, offset)) == -1)
	SYMB	LINE, 2030
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	MOV.W	R1,[R7]
	MOV.W	R2,[R7+2]
	MOV.W	R5,[R7+6]
	MOV.W	R4,[R7+4]
	PUSH.W	R4, R5
	SYMB	SOFF, 16
	CALL	_FLTToSamples
	ADDS.W	R7,#04H
	SYMB	SOFF, 12
	MOV.W	R3,R1
	MOV.W	R2,R0
	CMP.W	R3,#0FFFFH
	BNE	_309
	CMP.W	R2,#0FFFFH
_309:
	BNE	_300
; rs232cmd.c 2031						SCPIError = ExecErr;
	SYMB	LINE, 2031
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_306
_300:
; rs232cmd.c 2032					else
; rs232cmd.c 2033						SetGenlockDelay( samples);
	SYMB	LINE, 2033
	CALL	_SetGenlockDelay
; rs232cmd.c 2034				}
; rs232cmd.c 2035			}
; rs232cmd.c 2036		}
	SYMB	LINE, 2036
_306:
; rs232cmd.c 2037	}
	SYMB	LINE, 2037
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2038	
; rs232cmd.c 2039	/**************************************************************************/
; rs232cmd.c 2040	/* GenlockGenCalibrateEnable	 				  		 								   RS232CMD.C */
; rs232cmd.c 2041	/*																																				*/
; rs232cmd.c 2042	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 2043	/* Revised:		000622				     																					*/
; rs232cmd.c 2044	/*																																				*/
; rs232cmd.c 2045	/* Function:	Handle the genlock calibration															*/
; rs232cmd.c 2046	/* Remarks:		--																													*/
; rs232cmd.c 2047	/* Returns:		--																													*/
; rs232cmd.c 2048	/* Updates:		--																													*/
; rs232cmd.c 2049	/**************************************************************************/
; rs232cmd.c 2050	void GenlockGenCalibrateEnable( void)
; rs232cmd.c 2051	{
	ALIGN	1
	SYMB	LINE, 2051
	PUBLIC	_GenlockGenCalibrateEnable
_GenlockGenCalibrateEnable:
	SYMB	TYPE, 577, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenCalibrateEnable", _GenlockGenCalibrateEnable, #577, 0, 0, 48
	SYMB	ALAB, _GenlockGenCalibrateEnable, #577
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; rs232cmd.c 2052		char code *str;
; rs232cmd.c 2053		int tmp;
; rs232cmd.c 2054	
; rs232cmd.c 2055		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2055
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_326
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_326
; rs232cmd.c 2056		{
; rs232cmd.c 2057			if ( CmdRequest)
	SYMB	LINE, 2057
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_316
; rs232cmd.c 2058			{
; rs232cmd.c 2059				if ( ParCnt)
	SYMB	LINE, 2059
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_313
; rs232cmd.c 2060					SCPIError = SyntaxErr;
	SYMB	LINE, 2060
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_326
_313:
; rs232cmd.c 2061				else
; rs232cmd.c 2062				{
; rs232cmd.c 2063					str = OffOnPar[GenlockCalEnable].LongName;
	SYMB	LINE, 2063
	MOV.B	ES,#SEG( _GenlockCalEnable )
	MOV.W	R0,#SOF( _GenlockCalEnable )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _OffOnPar )
	MOV.W	R0,#SOF( _OffOnPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_327
	ADDS.B	CS,#01H
_327:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2064	
; rs232cmd.c 2065					while ( *str)
	SYMB	LINE, 2065
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_315
_314:
; rs232cmd.c 2066						rs232putchar( *str++);
	SYMB	LINE, 2066
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2065
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_314
	SYMB	LINE, 2066
_315:
; rs232cmd.c 2067	
; rs232cmd.c 2068					rs232putchar('\n');
	SYMB	LINE, 2068
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2069				}
; rs232cmd.c 2070			}
	SYMB	LINE, 2070
	BR	_326
_316:
; rs232cmd.c 2071			else
; rs232cmd.c 2072			{
; rs232cmd.c 2073				if ( ParCnt != 1)
	SYMB	LINE, 2073
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_317
; rs232cmd.c 2074					SCPIError = SyntaxErr;
	SYMB	LINE, 2074
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_326
_317:
; rs232cmd.c 2075				else
; rs232cmd.c 2076				{
; rs232cmd.c 2077					tmp = FindParameter( Cmd, OffOnPar);
	SYMB	LINE, 2077
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _OffOnPar )
	MOV.W	R2,#SOF( _OffOnPar )
	CALL	_FindParameter
	SYMB	LTIM, "tmp", 2, 0, 205
; rs232cmd.c 2078		
; rs232cmd.c 2079					if ( tmp > -1)
	SYMB	LINE, 2079
	CMP.W	R0,#0FFFFH
	BLE	_319
; rs232cmd.c 2080					{
; rs232cmd.c 2081						GenlockCalEnable = tmp;
	SYMB	LINE, 2081
	MOV.W	R1,R0
	MOV.B	ES,#SEG( _GenlockCalEnable )
	MOV.W	R2,#SOF( _GenlockCalEnable )
	MOV.B	[R2],R1L
; rs232cmd.c 2082	
; rs232cmd.c 2083						if ( tmp == 0)
	SYMB	LINE, 2083
	OR.W	R0,R0
	BNE	_318
; rs232cmd.c 2084						{
; rs232cmd.c 2085							SetGenlockSystem( GenlockSetup.System);
	SYMB	LINE, 2085
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R0L,[R0]
	SYMB	LTIM, "tmp", 2, 0, 77
	MOVS.B	R0H,#00H
	CALL	_SetGenlockSystem
; rs232cmd.c 2086	
; rs232cmd.c 2087							SetBBSystem( BBOutput1, BBSetup[BBOutput1].System);
	SYMB	LINE, 2087
	MOV.B	ES,#SEG( _BBSetup )
	MOV.W	R0,#SOF( _BBSetup )
	MOV.B	R0L,[R0]
	MOV.B	R1L,R0L
	MOVS.B	R1H,#00H
	MOV.W	R0,#00H
	CALL	_SetBBSystem
; rs232cmd.c 2088	
; rs232cmd.c 2089							BBControlPort = 0;
	SYMB	LINE, 2089
	MOV.B	ES,#SEG( _BBControlPort )
	MOV.W	R0,#SOF( _BBControlPort )
	MOV.W	[R0],#00H
; rs232cmd.c 2090						}
	SYMB	LINE, 2090
	BR	_326
_318:
; rs232cmd.c 2091						else
; rs232cmd.c 2092						{
; rs232cmd.c 2093																								// Force genlock internal mode
; rs232cmd.c 2094							sio0SndCommand( 12, SPG_V24_address, "GM0");
	SYMB	LINE, 2094
	MOV.W	R0,#0CH
	MOV.W	R3,#SEG( _310 )
	MOV.W	R2,#SOF( _310 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	MOV.W	R1,#015H
	CALL	_sio0SndCommand
	ADDS.W	R7,#04H
	SYMB	SOFF, 4
; rs232cmd.c 2095	
; rs232cmd.c 2096																								// Force BB1 PAL mode
; rs232cmd.c 2097							sio0SndCommand( 20, BB_V24_address, "HG%ld;", BBSetup[BBOutput1].Delay);
	SYMB	LINE, 2097
	MOV.W	R1,#034H
	MOV.B	ES,#SEG( _BBSetup+2 )
	MOV.W	R3,#SOF( _BBSetup+2 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _311 )
	MOV.W	R2,#SOF( _311 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	MOV.W	R0,#014H
	CALL	_sio0SndCommand
	ADD.W	R7,#08H
	SYMB	SOFF, 4
; rs232cmd.c 2098	
; rs232cmd.c 2099							BBControlPort = 1;								// Set BB1 to F45MHz
	SYMB	LINE, 2099
	MOV.B	ES,#SEG( _BBControlPort )
	MOV.W	R0,#SOF( _BBControlPort )
	MOV.W	[R0],#01H
; rs232cmd.c 2100	
; rs232cmd.c 2101							GenlockCalValue = Calibration.GenlockCalibration.DACUserValue;
	SYMB	LINE, 2101
	MOV.B	ES,#SEG( _Calibration+120 )
	MOV.W	R0,#SOF( _Calibration+120 )
	MOV.W	R0,[R0]
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R1,#SOF( _GenlockCalValue )
	MOV.W	[R1],R0
; rs232cmd.c 2102	
; rs232cmd.c 2103							sio0SndCommand( 20, SPG_V24_address, "GX%d;", GenlockCalValue);
	SYMB	LINE, 2103
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	R0,[R0]
	PUSH.W	R0
	SYMB	SOFF, 6
	MOV.W	R1,#SEG( _312 )
	MOV.W	R0,#SOF( _312 )
	PUSH.W	R0, R1
	SYMB	SOFF, 10
	MOV.W	R0,#014H
	MOV.W	R1,#015H
	CALL	_sio0SndCommand
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2104						}
; rs232cmd.c 2105					}
	SYMB	LINE, 2105
	BR	_326
_319:
; rs232cmd.c 2106					else
; rs232cmd.c 2107						SCPIError = DataOutOfRange;
	SYMB	LINE, 2107
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2108				}
; rs232cmd.c 2109			}
; rs232cmd.c 2110		}
	SYMB	LINE, 2110
_326:
; rs232cmd.c 2111	}
	SYMB	LINE, 2111
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2112	
; rs232cmd.c 2113	/**************************************************************************/
; rs232cmd.c 2114	/* GenlockGenCalibrateAdjust 	 				  		 								   RS232CMD.C */
; rs232cmd.c 2115	/*																																				*/
; rs232cmd.c 2116	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 2117	/* Revised:		000622				     																					*/
; rs232cmd.c 2118	/*																																				*/
; rs232cmd.c 2119	/* Function:	Handle the genlock calibration															*/
; rs232cmd.c 2120	/* Remarks:		--																													*/
; rs232cmd.c 2121	/* Returns:		--																													*/
; rs232cmd.c 2122	/* Updates:		--																													*/
; rs232cmd.c 2123	/**************************************************************************/
; rs232cmd.c 2124	void GenlockGenCalibrateAdjust( void)
; rs232cmd.c 2125	{
	ALIGN	1
	SYMB	LINE, 2125
	PUBLIC	_GenlockGenCalibrateAdjust
_GenlockGenCalibrateAdjust:
	SYMB	TYPE, 578, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenCalibrateAdjust", _GenlockGenCalibrateAdjust, #578, 0, 0, 48
	SYMB	ALAB, _GenlockGenCalibrateAdjust, #578
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
	SYMB	IDEN, "MinVal", -1, #18, 130, 5
	SYMB	LTIM, "MinVal", -1, 0, 69
	SYMB	IDEN, "MaxVal", -1, #18, 130, 5
	SYMB	LTIM, "MaxVal", -1, 0, 69
; rs232cmd.c 2126		int tmp;
; rs232cmd.c 2127		UI MinVal, MaxVal;
; rs232cmd.c 2128	
; rs232cmd.c 2129		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2129
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_346
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_346
; rs232cmd.c 2130		{
; rs232cmd.c 2131			if ( CmdRequest)
	SYMB	LINE, 2131
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_331
; rs232cmd.c 2132				SCPIError = SyntaxErr;
	SYMB	LINE, 2132
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_346
_331:
; rs232cmd.c 2133			else
; rs232cmd.c 2134			{
; rs232cmd.c 2135				if ( ParCnt == 0)
	SYMB	LINE, 2135
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BNE	_332
; rs232cmd.c 2136					SCPIError = SyntaxErr;
	SYMB	LINE, 2136
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_346
_332:
; rs232cmd.c 2137				else
; rs232cmd.c 2138				{
; rs232cmd.c 2139					MinVal = Calibration.GenlockCalibration.DACFactValue - 150;
	SYMB	LINE, 2139
	MOV.B	ES,#SEG( _Calibration+118 )
	MOV.W	R0,#SOF( _Calibration+118 )
	MOV.W	R0,[R0]
	MOV.W	R5,R0
	MOV.W	R4,R5
	SUB.W	R5,#096H
	SYMB	LTIM, "MinVal", 22, 0, 205
; rs232cmd.c 2140					MaxVal = Calibration.GenlockCalibration.DACFactValue + 150;
	SYMB	LINE, 2140
	ADD.W	R4,#096H
	SYMB	LTIM, "MaxVal", 18, 0, 205
; rs232cmd.c 2141	
; rs232cmd.c 2142					tmp = FindParameter( Cmd, MinMaxPar);
	SYMB	LINE, 2142
	MOV.W	R3,#SEG( _MinMaxPar )
	MOV.W	R2,#SOF( _MinMaxPar )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_FindParameter
	SYMB	LTIM, "tmp", 2, 0, 205
; rs232cmd.c 2143		
; rs232cmd.c 2144					if ( tmp > -1)
	SYMB	LINE, 2144
	CMP.W	R0,#0FFFFH
	BLE	_335
; rs232cmd.c 2145					{
; rs232cmd.c 2146						if ( tmp == 0)
	SYMB	LINE, 2146
	OR.W	R0,R0
	BNE	_333
; rs232cmd.c 2147							GenlockCalValue = MaxVal;
	SYMB	LINE, 2147
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	[R0],R4
	BR	_334
_333:
	SYMB	LTIM, "MinVal", 22, 0, 77
; rs232cmd.c 2148						else
; rs232cmd.c 2149							GenlockCalValue = MinVal;
	SYMB	LINE, 2149
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	[R0],R5
_334:
; rs232cmd.c 2150	
; rs232cmd.c 2151						sio0SndCommand( 20, SPG_V24_address, "GX%u;", GenlockCalValue);	
	SYMB	LINE, 2151
	MOV.W	R0,#014H
	SYMB	LTIM, "tmp", 2, 0, 77
	MOV.W	R1,#015H
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R2,#SOF( _GenlockCalValue )
	MOV.W	R2,[R2]
	PUSH.W	R2
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _330 )
	MOV.W	R2,#SOF( _330 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sio0SndCommand
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2152					}
	SYMB	LINE, 2152
	BR	_346
_335:
	SYMB	LTIM, "MaxVal", 18, 0, 77
; rs232cmd.c 2153					else
; rs232cmd.c 2154					{
; rs232cmd.c 2155						tmp = FindParameter( Cmd, UpDownPar);
	SYMB	LINE, 2155
	MOV.W	R3,#SEG( _UpDownPar )
	MOV.W	R2,#SOF( _UpDownPar )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_FindParameter
	SYMB	LTIM, "tmp", 2, 0, 205
; rs232cmd.c 2156	
; rs232cmd.c 2157						if ( tmp > -1)
	SYMB	LINE, 2157
	CMP.W	R0,#0FFFFH
	BLE	_340
; rs232cmd.c 2158						{
; rs232cmd.c 2159							if ( tmp == 0)
	SYMB	LINE, 2159
	OR.W	R0,R0
	BNE	_336
; rs232cmd.c 2160							{
; rs232cmd.c 2161								if ( GenlockCalValue > MinVal)
	SYMB	LINE, 2161
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	R0,[R0]
	SYMB	LTIM, "tmp", 2, 0, 77
	CMP.W	R0,R5
	BL	_339
; rs232cmd.c 2162									GenlockCalValue--;
	SYMB	LINE, 2162
	ADDS.W	R0,#0FH
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R1,#SOF( _GenlockCalValue )
	MOV.W	[R1],R0
; rs232cmd.c 2163							}
	SYMB	LINE, 2163
	BR	_339
_336:
; rs232cmd.c 2164							else
; rs232cmd.c 2165							{
; rs232cmd.c 2166								if ( GenlockCalValue < MaxVal)
	SYMB	LINE, 2166
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	R0,[R0]
	CMP.W	R0,R4
	BCC	_339
; rs232cmd.c 2167									GenlockCalValue++;
	SYMB	LINE, 2167
	ADDS.W	R0,#01H
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R1,#SOF( _GenlockCalValue )
	MOV.W	[R1],R0
; rs232cmd.c 2168							}
	SYMB	LINE, 2168
_339:
; rs232cmd.c 2169	
; rs232cmd.c 2170							sio0SndCommand( 20, SPG_V24_address, "GX%u;", GenlockCalValue);
	SYMB	LINE, 2170
	MOV.W	R0,#014H
	MOV.W	R1,#015H
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R2,#SOF( _GenlockCalValue )
	MOV.W	R2,[R2]
	PUSH.W	R2
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _330 )
	MOV.W	R2,#SOF( _330 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sio0SndCommand
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2171						}
	SYMB	LINE, 2171
	BR	_346
_340:
; rs232cmd.c 2172						else
; rs232cmd.c 2173							SCPIError = DataOutOfRange;
	SYMB	LINE, 2173
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2174					}	
; rs232cmd.c 2175				}
; rs232cmd.c 2176			}
; rs232cmd.c 2177		}
	SYMB	LINE, 2177
_346:
; rs232cmd.c 2178	}
	SYMB	LINE, 2178
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2179	
; rs232cmd.c 2180	/**************************************************************************/
; rs232cmd.c 2181	/* GenlockGenCalibrateStore 	 				  		 								   RS232CMD.C */
; rs232cmd.c 2182	/*																																				*/
; rs232cmd.c 2183	/* Author:		Kim Engedahl, DEV, 000525	    															*/
; rs232cmd.c 2184	/* Revised:		000622				     																					*/
; rs232cmd.c 2185	/*																																				*/
; rs232cmd.c 2186	/* Function:	Handle the genlock calibration															*/
; rs232cmd.c 2187	/* Remarks:		--																													*/
; rs232cmd.c 2188	/* Returns:		--																													*/
; rs232cmd.c 2189	/* Updates:		--																													*/
; rs232cmd.c 2190	/**************************************************************************/
; rs232cmd.c 2191	void GenlockGenCalibrateStore( void)
; rs232cmd.c 2192	{
	ALIGN	1
	SYMB	LINE, 2192
	PUBLIC	_GenlockGenCalibrateStore
_GenlockGenCalibrateStore:
	SYMB	TYPE, 579, 'X', 12, #1, 30, 0
	SYMB	GFUN, "GenlockGenCalibrateStore", _GenlockGenCalibrateStore, #579, 0, 0, 0
	SYMB	ALAB, _GenlockGenCalibrateStore, #579
; rs232cmd.c 2193		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2193
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_358
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_358
; rs232cmd.c 2194		{
; rs232cmd.c 2195			if ( CmdRequest)
	SYMB	LINE, 2195
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_351
; rs232cmd.c 2196					SCPIError = SyntaxErr;
	SYMB	LINE, 2196
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_351:
; rs232cmd.c 2197			else
; rs232cmd.c 2198			{
; rs232cmd.c 2199				if ( ParCnt)
	SYMB	LINE, 2199
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_352
; rs232cmd.c 2200					SCPIError = ParNotAllowed;
	SYMB	LINE, 2200
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_352:
; rs232cmd.c 2201				else
; rs232cmd.c 2202				{
; rs232cmd.c 2203					if ( GenlockCalEnable)
	SYMB	LINE, 2203
	MOV.B	ES,#SEG( _GenlockCalEnable )
	MOV.W	R0,#SOF( _GenlockCalEnable )
	MOV.B	R0L,[R0]
	BEQ	_353
; rs232cmd.c 2204					{
; rs232cmd.c 2205						Calibration.GenlockCalibration.DACUserValue = GenlockCalValue;
	SYMB	LINE, 2205
	MOV.B	ES,#SEG( _GenlockCalValue )
	MOV.W	R0,#SOF( _GenlockCalValue )
	MOV.W	R0,[R0]
	MOV.B	ES,#SEG( _Calibration+120 )
	MOV.W	R1,#SOF( _Calibration+120 )
	MOV.W	[R1],R0
; rs232cmd.c 2206								
; rs232cmd.c 2207						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 2207
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 2208					}
	SYMB	LINE, 2208
	RET
_353:
; rs232cmd.c 2209					else
; rs232cmd.c 2210						SCPIError = ExecErr;					
	SYMB	LINE, 2210
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 2211				}
; rs232cmd.c 2212			}
; rs232cmd.c 2213		}
	SYMB	LINE, 2213
_358:
; rs232cmd.c 2214	}
	SYMB	LINE, 2214
	RET
	SYMB	EFUN
; rs232cmd.c 2215	
; rs232cmd.c 2216	/**************************************************************************/
; rs232cmd.c 2217	/* BBSuffix																 	  						 	   RS232CMD.C	*/
; rs232cmd.c 2218	/*																																				*/
; rs232cmd.c 2219	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 2220	/* Revised:		000604				     																					*/
; rs232cmd.c 2221	/*																																				*/
; rs232cmd.c 2222	/* Function:	Get suffix of the Black Burst generator											*/
; rs232cmd.c 2223	/* Remarks:		--																													*/
; rs232cmd.c 2224	/* Returns:		--																													*/
; rs232cmd.c 2225	/* Updates:		Suffix																									 		*/
; rs232cmd.c 2226	/**************************************************************************/
; rs232cmd.c 2227	void BBGenSuffix( void)
; rs232cmd.c 2228	{
	ALIGN	1
	SYMB	LINE, 2228
	PUBLIC	_BBGenSuffix
_BBGenSuffix:
	SYMB	TYPE, 580, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGenSuffix", _BBGenSuffix, #580, 0, 0, 0
	SYMB	ALAB, _BBGenSuffix, #580
; rs232cmd.c 2229		if ( NumSuffix > 3)
	SYMB	LINE, 2229
	MOV.B	ES,#SEG( _NumSuffix )
	MOV.W	R0,#SOF( _NumSuffix )
	MOV.W	R0,[R0]
	CMP.W	R0,#03H
	BL	_359
; rs232cmd.c 2230			SCPIError = HdrSuffixOutOfRange;
	SYMB	LINE, 2230
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#0CH
	RET
_359:
; rs232cmd.c 2231		else
; rs232cmd.c 2232			Suffix[0] = NumSuffix-1;
	SYMB	LINE, 2232
	ADDS.W	R0,#0FH
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R1,#SOF( _Suffix )
	MOV.W	[R1],R0
_360:
; rs232cmd.c 2233	
; rs232cmd.c 2234	}
	SYMB	LINE, 2234
	RET
	SYMB	EFUN
; rs232cmd.c 2235	
; rs232cmd.c 2236	/**************************************************************************/
; rs232cmd.c 2237	/* BBGen																								 	     RS232CMD.C	*/
; rs232cmd.c 2238	/*																																				*/
; rs232cmd.c 2239	/* Author:		Kim Engedahl, DEV, 000524	    															*/
; rs232cmd.c 2240	/* Revised:		000604				     																					*/
; rs232cmd.c 2241	/*																																				*/
; rs232cmd.c 2242	/* Function:	Handle the Black Burst command.															*/
; rs232cmd.c 2243	/* Remarks:		Request only																								*/
; rs232cmd.c 2244	/* Returns:		--																													*/
; rs232cmd.c 2245	/* Updates:		--																												 	*/
; rs232cmd.c 2246	/**************************************************************************/
; rs232cmd.c 2247	void BBGen( void)
; rs232cmd.c 2248	{
	ALIGN	1
	SYMB	LINE, 2248
	PUBLIC	_BBGen
_BBGen:
	SYMB	TYPE, 581, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGen", _BBGen, #581, 0, 0, 48
	SYMB	ALAB, _BBGen, #581
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2249		char code *str;
; rs232cmd.c 2250	
; rs232cmd.c 2251		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2251
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_370
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_370
; rs232cmd.c 2252		{
; rs232cmd.c 2253			if ( !CmdRequest)
	SYMB	LINE, 2253
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_363
; rs232cmd.c 2254					SCPIError = SyntaxErr;
	SYMB	LINE, 2254
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_370
_363:
; rs232cmd.c 2255			else
; rs232cmd.c 2256			{
; rs232cmd.c 2257				if ( ParCnt)
	SYMB	LINE, 2257
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_364
; rs232cmd.c 2258					SCPIError = ParNotAllowed;
	SYMB	LINE, 2258
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_370
_364:
; rs232cmd.c 2259				else
; rs232cmd.c 2260				{
; rs232cmd.c 2261					str = SystemPar[BBSetup[Suffix[0]].System].LongName;
	SYMB	LINE, 2261
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	ASL.W	R0,#03H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_371
	ADDS.B	CS,#01H
_371:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2262	
; rs232cmd.c 2263					while ( *str)
	SYMB	LINE, 2263
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_366
_365:
; rs232cmd.c 2264						rs232putchar( *str++);
	SYMB	LINE, 2264
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2263
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_365
	SYMB	LINE, 2264
_366:
; rs232cmd.c 2265	
; rs232cmd.c 2266					rs232putchar( ',');
	SYMB	LINE, 2266
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2267	
; rs232cmd.c 2268					PrintSamplesToFLT( BBSetup[Suffix[0]].System, BBSetup[Suffix[0]].Delay);
	SYMB	LINE, 2268
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R2,#SOF( _Suffix )
	MOV.W	R2,[R2]
	ASL.W	R2,#03H
	MOV.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup+2 )
	MOV.W	R3,[R2+SOF( _BBSetup+4 )]
	MOV.W	R2,[R2+SOF( _BBSetup+2 )]
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2269	
; rs232cmd.c 2270					rs232printf( 6, ",%d\n", BBSetup[Suffix[0]].ScHPhase);
	SYMB	LINE, 2270
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R1,#SOF( _Suffix )
	MOV.W	R1,[R1]
	ASL.W	R1,#03H
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup+6 )
	MOV.W	R1,[R2+SOF( _BBSetup+6 )]
	PUSH.W	R1
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _362 )
	MOV.W	R2,#SOF( _362 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2271				}
; rs232cmd.c 2272			}
; rs232cmd.c 2273		}
	SYMB	LINE, 2273
_370:
; rs232cmd.c 2274	}
	SYMB	LINE, 2274
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2275	
; rs232cmd.c 2276	/**************************************************************************/
; rs232cmd.c 2277	/* BBGenSystem		 												 	    							 RS232CMD.C	*/
; rs232cmd.c 2278	/*																																				*/
; rs232cmd.c 2279	/* Author:		Kim Engedahl, DEV, 000524	    															*/
; rs232cmd.c 2280	/* Revised:		000604				     																					*/
; rs232cmd.c 2281	/*																																				*/
; rs232cmd.c 2282	/* Function:	Handle the Black Burst system-command.											*/
; rs232cmd.c 2283	/* Remarks:		--																													*/
; rs232cmd.c 2284	/* Returns:		--																													*/
; rs232cmd.c 2285	/* Updates:		--																													*/
; rs232cmd.c 2286	/**************************************************************************/
; rs232cmd.c 2287	void BBGenSystem( void)
; rs232cmd.c 2288	{
	ALIGN	1
	SYMB	LINE, 2288
	PUBLIC	_BBGenSystem
_BBGenSystem:
	SYMB	TYPE, 582, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGenSystem", _BBGenSystem, #582, 0, 0, 48
	SYMB	ALAB, _BBGenSystem, #582
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2289		int system;
; rs232cmd.c 2290		char code *str;
; rs232cmd.c 2291	
; rs232cmd.c 2292		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2292
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_383
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_383
; rs232cmd.c 2293		{
; rs232cmd.c 2294			if ( CmdRequest)
	SYMB	LINE, 2294
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_375
; rs232cmd.c 2295			{
; rs232cmd.c 2296				if ( ParCnt)
	SYMB	LINE, 2296
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_372
; rs232cmd.c 2297					SCPIError = ParNotAllowed;
	SYMB	LINE, 2297
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_383
_372:
; rs232cmd.c 2298				else
; rs232cmd.c 2299				{
; rs232cmd.c 2300					str = SystemPar[BBSetup[Suffix[0]].System].LongName;
	SYMB	LINE, 2300
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	ASL.W	R0,#03H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_384
	ADDS.B	CS,#01H
_384:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2301	
; rs232cmd.c 2302					while ( *str)
	SYMB	LINE, 2302
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_374
_373:
; rs232cmd.c 2303						rs232putchar( *str++);
	SYMB	LINE, 2303
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2302
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_373
	SYMB	LINE, 2303
_374:
; rs232cmd.c 2304	
; rs232cmd.c 2305					rs232putchar('\n');
	SYMB	LINE, 2305
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2306				}
; rs232cmd.c 2307			}
	SYMB	LINE, 2307
	BR	_383
_375:
; rs232cmd.c 2308			else
; rs232cmd.c 2309			{
; rs232cmd.c 2310				if ( ParCnt != 1)
	SYMB	LINE, 2310
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_376
; rs232cmd.c 2311					SCPIError = SyntaxErr;
	SYMB	LINE, 2311
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_383
_376:
; rs232cmd.c 2312				else
; rs232cmd.c 2313				{
; rs232cmd.c 2314					system = FindParameter( Cmd, SystemPar);
	SYMB	LINE, 2314
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _SystemPar )
	MOV.W	R2,#SOF( _SystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 2315	
; rs232cmd.c 2316					if ( system > -1)
	SYMB	LINE, 2316
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "system", 2, 0, 77
	SYMB	LTIM, "system", 6, 0, 205
	BLE	_377
; rs232cmd.c 2317						SetBBSystem( Suffix[0], system);
	SYMB	LINE, 2317
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	CALL	_SetBBSystem
	SYMB	LTIM, "system", 6, 0, 77
	BR	_383
_377:
; rs232cmd.c 2318					else
; rs232cmd.c 2319						SCPIError = DataOutOfRange;
	SYMB	LINE, 2319
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2320				}
; rs232cmd.c 2321			}
; rs232cmd.c 2322		}
	SYMB	LINE, 2322
_383:
; rs232cmd.c 2323	}
	SYMB	LINE, 2323
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2324	
; rs232cmd.c 2325	/**************************************************************************/
; rs232cmd.c 2326	/* BBGenDelay	 														 	    							 RS232CMD.C	*/
; rs232cmd.c 2327	/*																																				*/
; rs232cmd.c 2328	/* Author:		Kim Engedahl, DEV, 000524	    															*/
; rs232cmd.c 2329	/* Revised:		000604				     																					*/				
; rs232cmd.c 2330	/*																																				*/
; rs232cmd.c 2331	/* Function:	Handle the Black Burst timing command.											*/
; rs232cmd.c 2332	/* Remarks:		--																													*/
; rs232cmd.c 2333	/* Returns:		--																													*/
; rs232cmd.c 2334	/* Updates:		--																													*/
; rs232cmd.c 2335	/**************************************************************************/
; rs232cmd.c 2336	void BBGenDelay( void)
; rs232cmd.c 2337	{
	ALIGN	1
	SYMB	LINE, 2337
	PUBLIC	_BBGenDelay
_BBGenDelay:
	SYMB	TYPE, 583, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGenDelay", _BBGenDelay, #583, 0, 0, 48
	SYMB	ALAB, _BBGenDelay, #583
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	IDEN, "field", -12, #16, 130, 5
	SYMB	IDEN, "line", -10, #16, 130, 5
	SYMB	IDEN, "offset", -8, #10, 130, 5
	SYMB	IDEN, "samples", -1, #6, 130, 5
	SYMB	LTIM, "samples", -1, 0, 69
; rs232cmd.c 2338		int field, line;
; rs232cmd.c 2339		float offset;
; rs232cmd.c 2340		long samples;
; rs232cmd.c 2341	
; rs232cmd.c 2342		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2342
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_397
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_397
; rs232cmd.c 2343		{
; rs232cmd.c 2344			if ( CmdRequest)
	SYMB	LINE, 2344
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_388
; rs232cmd.c 2345			{
; rs232cmd.c 2346				if ( ParCnt)
	SYMB	LINE, 2346
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_387
; rs232cmd.c 2347					SCPIError = ParNotAllowed;
	SYMB	LINE, 2347
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_397
_387:
; rs232cmd.c 2348				else
; rs232cmd.c 2349				{
; rs232cmd.c 2350					PrintSamplesToFLT( BBSetup[Suffix[0]].System, BBSetup[Suffix[0]].Delay);
	SYMB	LINE, 2350
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MOV.W	R1,R0
	ASL.W	R1,#03H
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R2+SOF( _BBSetup )]
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup+2 )
	MOV.W	R3,[R2+SOF( _BBSetup+4 )]
	MOV.W	R2,[R2+SOF( _BBSetup+2 )]
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2351	
; rs232cmd.c 2352					rs232putchar ( '\n');
	SYMB	LINE, 2352
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2353				}
; rs232cmd.c 2354			}
	SYMB	LINE, 2354
	BR	_397
_388:
; rs232cmd.c 2355			else
; rs232cmd.c 2356			{
; rs232cmd.c 2357				if (( ParCnt != 3) || ( sscanf( Cmd, "%d,%d,%f", &field, &line, &offset) != 3))
	SYMB	LINE, 2357
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_389
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 16
	PUSH.W	R4, R5
	SYMB	SOFF, 20
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	MOV.W	R3,#SEG( _295 )
	MOV.W	R2,#SOF( _295 )
	PUSH.W	R2, R3
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 12
	CMP.W	R0,#03H
	BEQ	_390
_389:
; rs232cmd.c 2358					SCPIError = SyntaxErr;
	SYMB	LINE, 2358
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_397
_390:
; rs232cmd.c 2359				else
; rs232cmd.c 2360				{
; rs232cmd.c 2361					if (( samples = FLTToSamples( BBSetup[Suffix[0]].System, field, line, offset)) == -1)
	SYMB	LINE, 2361
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	ASL.W	R0,#03H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _BBSetup )
	MOV.B	R0L,[R0+SOF( _BBSetup )]
	MOV.W	R1,[R7]
	MOV.W	R2,[R7+2]
	MOV.W	R5,[R7+6]
	MOV.W	R4,[R7+4]
	PUSH.W	R4, R5
	SYMB	SOFF, 16
	CALL	_FLTToSamples
	ADDS.W	R7,#04H
	SYMB	SOFF, 12
	MOV.W	R3,R1
	MOV.W	R2,R0
	MOV.W	R1,R3
	MOV.W	R0,R2
	CMP.W	R1,#0FFFFH
	BNE	_400
	CMP.W	R0,#0FFFFH
_400:
	BNE	_391
; rs232cmd.c 2362						SCPIError = ExecErr;
	SYMB	LINE, 2362
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_397
_391:
; rs232cmd.c 2363					else
; rs232cmd.c 2364						SetBBDelay( Suffix[0], (UL) samples);
	SYMB	LINE, 2364
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	CALL	_SetBBDelay
; rs232cmd.c 2365				}
; rs232cmd.c 2366			}
; rs232cmd.c 2367		}
	SYMB	LINE, 2367
_397:
; rs232cmd.c 2368	}
	SYMB	LINE, 2368
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2369	
; rs232cmd.c 2370	/**************************************************************************/
; rs232cmd.c 2371	/* BBGenScHPhase													 	   								 RS232CMD.C	*/
; rs232cmd.c 2372	/*																																				*/
; rs232cmd.c 2373	/* Author:		Kim Engedahl, DEV, 000524	    															*/			
; rs232cmd.c 2374	/* Revised:		000604				     																					*/
; rs232cmd.c 2375	/*																																				*/
; rs232cmd.c 2376	/* Function:	Handle the Black Burst ScH-Phase command.										*/
; rs232cmd.c 2377	/* Remarks:		--																													*/
; rs232cmd.c 2378	/* Returns:		--																													*/
; rs232cmd.c 2379	/* Updates:		--																													*/
; rs232cmd.c 2380	/**************************************************************************/
; rs232cmd.c 2381	void BBGenScHPhase( void)
; rs232cmd.c 2382	{
	ALIGN	1
	SYMB	LINE, 2382
	PUBLIC	_BBGenScHPhase
_BBGenScHPhase:
	SYMB	TYPE, 584, 'X', 12, #1, 30, 0
	SYMB	GFUN, "BBGenScHPhase", _BBGenScHPhase, #584, 0, 0, 0
	SYMB	ALAB, _BBGenScHPhase, #584
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "schphase", -2, #16, 130, 5
; rs232cmd.c 2383		int schphase;
; rs232cmd.c 2384	
; rs232cmd.c 2385		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2385
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_412
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_412
; rs232cmd.c 2386		{
; rs232cmd.c 2387			if ( CmdRequest)
	SYMB	LINE, 2387
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_402
; rs232cmd.c 2388			{
; rs232cmd.c 2389				if ( ParCnt)
	SYMB	LINE, 2389
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_401
; rs232cmd.c 2390					SCPIError = ParNotAllowed;
	SYMB	LINE, 2390
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_412
_401:
; rs232cmd.c 2391				else
; rs232cmd.c 2392					rs232printf( 6, "%d\n", BBSetup[Suffix[0]].ScHPhase);
	SYMB	LINE, 2392
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R1,#SOF( _Suffix )
	MOV.W	R1,[R1]
	ASL.W	R1,#03H
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _BBSetup+6 )
	MOV.W	R1,[R2+SOF( _BBSetup+6 )]
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 2393			}
	SYMB	LINE, 2393
	BR	_412
_402:
; rs232cmd.c 2394			else
; rs232cmd.c 2395			{
; rs232cmd.c 2396				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &schphase) != 1))
	SYMB	LINE, 2396
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_403
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_404
_403:
; rs232cmd.c 2397					SCPIError = SyntaxErr;
	SYMB	LINE, 2397
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_412
_404:
; rs232cmd.c 2398				else
; rs232cmd.c 2399				{
; rs232cmd.c 2400					if (( schphase < ScHPhaseLow) || ( schphase > ScHPhaseHigh))
	SYMB	LINE, 2400
	CMP.W	[R7],#0FF4DH
	BLT	_405
	CMP.W	[R7],#0B4H
	BLE	_406
_405:
; rs232cmd.c 2401						SCPIError = DataOutOfRange;
	SYMB	LINE, 2401
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_412
_406:
; rs232cmd.c 2402					else
; rs232cmd.c 2403						SetBBScHPhase( Suffix[0], schphase);
	SYMB	LINE, 2403
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MOV.W	R1,[R7]
	CALL	_SetBBScHPhase
; rs232cmd.c 2404				}
; rs232cmd.c 2405			}
; rs232cmd.c 2406		}
	SYMB	LINE, 2406
_412:
; rs232cmd.c 2407	}
	SYMB	LINE, 2407
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2408	
; rs232cmd.c 2409	/**************************************************************************/
; rs232cmd.c 2410	/* CBGen																									 	   RS232CMD.C */
; rs232cmd.c 2411	/*																																				*/
; rs232cmd.c 2412	/* Author:		Kim Engedahl, DEV, 000524	    															*/
; rs232cmd.c 2413	/* Revised:		000606				     																					*/
; rs232cmd.c 2414	/*																																				*/
; rs232cmd.c 2415	/* Function:	Return the setting of a Analog-TPG.													*/
; rs232cmd.c 2416	/* Remarks:		Request only.																								*/
; rs232cmd.c 2417	/* Returns:		--																													*/
; rs232cmd.c 2418	/* Updates:		--																													*/
; rs232cmd.c 2419	/***************************************************************************/
; rs232cmd.c 2420	void CBGen( void)
; rs232cmd.c 2421	{
	ALIGN	1
	SYMB	LINE, 2421
	PUBLIC	_CBGen
_CBGen:
	SYMB	TYPE, 585, 'X', 12, #1, 30, 0
	SYMB	GFUN, "CBGen", _CBGen, #585, 0, 0, 48
	SYMB	ALAB, _CBGen, #585
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2422		char code *str;
; rs232cmd.c 2423	
; rs232cmd.c 2424		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2424
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_429
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_429
; rs232cmd.c 2425		{
; rs232cmd.c 2426			if ( !CmdRequest)
	SYMB	LINE, 2426
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_418
; rs232cmd.c 2427					SCPIError = SyntaxErr;
	SYMB	LINE, 2427
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_429
_418:
; rs232cmd.c 2428			else
; rs232cmd.c 2429			{
; rs232cmd.c 2430				if ( ParCnt)
	SYMB	LINE, 2430
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_419
; rs232cmd.c 2431					SCPIError = ParNotAllowed;
	SYMB	LINE, 2431
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_429
_419:
; rs232cmd.c 2432				else
; rs232cmd.c 2433				{
; rs232cmd.c 2434					str = CBPatternPar[CBSetup.Pattern].LongName;
	SYMB	LINE, 2434
	MOV.B	ES,#SEG( _CBSetup+2 )
	MOV.W	R0,#SOF( _CBSetup+2 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _CBPatternPar )
	MOV.W	R0,#SOF( _CBPatternPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_430
	ADDS.B	CS,#01H
_430:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2435	
; rs232cmd.c 2436					while ( *str)
	SYMB	LINE, 2436
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_421
_420:
; rs232cmd.c 2437						rs232putchar( *str++);
	SYMB	LINE, 2437
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2436
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_420
	SYMB	LINE, 2437
_421:
; rs232cmd.c 2438	
; rs232cmd.c 2439					rs232putchar( ',');
	SYMB	LINE, 2439
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2440	
; rs232cmd.c 2441	
; rs232cmd.c 2442					str = SystemPar[CBSetup.System].LongName;
	SYMB	LINE, 2442
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_431
	ADDS.B	CS,#01H
_431:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2443	
; rs232cmd.c 2444					while ( *str)
	SYMB	LINE, 2444
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_423
_422:
; rs232cmd.c 2445						rs232putchar( *str++);
	SYMB	LINE, 2445
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2444
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_422
	SYMB	LINE, 2445
_423:
; rs232cmd.c 2446	
; rs232cmd.c 2447					rs232putchar( ',');
	SYMB	LINE, 2447
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2448	
; rs232cmd.c 2449	
; rs232cmd.c 2450					PrintSamplesToFLT( CBSetup.System, CBSetup.Delay*256);
	SYMB	LINE, 2450
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _CBSetup+4 )
	MOV.W	R3,#SOF( _CBSetup+4 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	ASL.D	R2,#08H
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2451	
; rs232cmd.c 2452	
; rs232cmd.c 2453					rs232printf( 6, ",%d,", CBSetup.ScHPhase);
	SYMB	LINE, 2453
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R1,#SOF( _CBSetup+8 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _417 )
	MOV.W	R2,#SOF( _417 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
; rs232cmd.c 2454	
; rs232cmd.c 2455	
; rs232cmd.c 2456					str = EmbAudioSignalPar[CBSetup.EmbAudioSignal].LongName;
	SYMB	LINE, 2456
	MOV.B	ES,#SEG( _CBSetup+10 )
	MOV.W	R0,#SOF( _CBSetup+10 )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _EmbAudioSignalPar )
	MOV.W	R0,#SOF( _EmbAudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_432
	ADDS.B	CS,#01H
_432:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2457	
; rs232cmd.c 2458					while ( *str)
	SYMB	LINE, 2458
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_425
_424:
; rs232cmd.c 2459						rs232putchar( *str++);
	SYMB	LINE, 2459
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2458
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_424
	SYMB	LINE, 2459
_425:
; rs232cmd.c 2460	
; rs232cmd.c 2461					rs232putchar( '\n');
	SYMB	LINE, 2461
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2462				}
; rs232cmd.c 2463			}
; rs232cmd.c 2464		}
	SYMB	LINE, 2464
_429:
; rs232cmd.c 2465	}
	SYMB	LINE, 2465
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2466	
; rs232cmd.c 2467	/**************************************************************************/
; rs232cmd.c 2468	/* CBGenPattern																					 	     RS232CMD.C	*/
; rs232cmd.c 2469	/*																																				*/
; rs232cmd.c 2470	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 2471	/* Revised:		000604				     																					*/
; rs232cmd.c 2472	/*																																				*/
; rs232cmd.c 2473	/* Function:	Handle the Colorbar pattern command.												*/
; rs232cmd.c 2474	/* Remarks:		--																													*/
; rs232cmd.c 2475	/* Returns:		--																													*/
; rs232cmd.c 2476	/* Updates:		--																													*/
; rs232cmd.c 2477	/**************************************************************************/
; rs232cmd.c 2478	void CBGenPattern( void)
; rs232cmd.c 2479	{
	ALIGN	1
	SYMB	LINE, 2479
	PUBLIC	_CBGenPattern
_CBGenPattern:
	SYMB	TYPE, 586, 'X', 12, #1, 30, 0
	SYMB	GFUN, "CBGenPattern", _CBGenPattern, #586, 0, 0, 48
	SYMB	ALAB, _CBGenPattern, #586
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "pattern", -1, #16, 130, 5
	SYMB	LTIM, "pattern", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2480		int pattern;
; rs232cmd.c 2481		char code *str;
; rs232cmd.c 2482	
; rs232cmd.c 2483		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2483
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_445
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_445
; rs232cmd.c 2484		{
; rs232cmd.c 2485			if ( CmdRequest)
	SYMB	LINE, 2485
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_436
; rs232cmd.c 2486			{
; rs232cmd.c 2487				if ( ParCnt)
	SYMB	LINE, 2487
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_433
; rs232cmd.c 2488					SCPIError = ParNotAllowed;
	SYMB	LINE, 2488
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_445
_433:
; rs232cmd.c 2489				else
; rs232cmd.c 2490				{
; rs232cmd.c 2491					str = CBPatternPar[CBSetup.Pattern].LongName;
	SYMB	LINE, 2491
	MOV.B	ES,#SEG( _CBSetup+2 )
	MOV.W	R0,#SOF( _CBSetup+2 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _CBPatternPar )
	MOV.W	R0,#SOF( _CBPatternPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_446
	ADDS.B	CS,#01H
_446:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2492	
; rs232cmd.c 2493					while ( *str)
	SYMB	LINE, 2493
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_435
_434:
; rs232cmd.c 2494						rs232putchar( *str++);
	SYMB	LINE, 2494
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2493
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_434
	SYMB	LINE, 2494
_435:
; rs232cmd.c 2495	
; rs232cmd.c 2496					rs232putchar('\n');
	SYMB	LINE, 2496
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2497				}
; rs232cmd.c 2498			}
	SYMB	LINE, 2498
	BR	_445
_436:
; rs232cmd.c 2499			else
; rs232cmd.c 2500			{
; rs232cmd.c 2501				pattern = FindParameter( Cmd, CBPatternPar);
	SYMB	LINE, 2501
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _CBPatternPar )
	MOV.W	R2,#SOF( _CBPatternPar )
	CALL	_FindParameter
	SYMB	LTIM, "pattern", 2, 0, 205
; rs232cmd.c 2502	
; rs232cmd.c 2503				if ( ParCnt != 1)
	SYMB	LINE, 2503
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R1,#SOF( _ParCnt )
	MOV.B	R1L,[R1]
	CMP.B	R1L,#01H
	BEQ	_437
; rs232cmd.c 2504					SCPIError = SyntaxErr;
	SYMB	LINE, 2504
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_445
_437:
	SYMB	LTIM, "pattern", 2, 0, 77
; rs232cmd.c 2505				else
; rs232cmd.c 2506				{
; rs232cmd.c 2507					if ( pattern > -1)
	SYMB	LINE, 2507
	CMP.W	R0,#0FFFFH
	BLE	_438
; rs232cmd.c 2508					{
; rs232cmd.c 2509						if ( SetCBPattern( pattern) != OK)
	SYMB	LINE, 2509
	CALL	_SetCBPattern
	CMP.W	R0,#0FFFFH
	BEQ	_445
; rs232cmd.c 2510							SCPIError = ExecErr;
	SYMB	LINE, 2510
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 2511					}
	SYMB	LINE, 2511
	BR	_445
_438:
; rs232cmd.c 2512					else
; rs232cmd.c 2513						SCPIError = DataOutOfRange;
	SYMB	LINE, 2513
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2514				}
; rs232cmd.c 2515			}
; rs232cmd.c 2516		}
	SYMB	LINE, 2516
_445:
; rs232cmd.c 2517	}
	SYMB	LINE, 2517
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2518	
; rs232cmd.c 2519	/**************************************************************************/
; rs232cmd.c 2520	/* CBGenSystem														 	    							 RS232CMD.C	*/
; rs232cmd.c 2521	/*																																				*/
; rs232cmd.c 2522	/* Author:		Kim Engedahl, DEV, 98021	    															*/
; rs232cmd.c 2523	/* Revised:		000616				     																					*/
; rs232cmd.c 2524	/*																																				*/
; rs232cmd.c 2525	/* Function:	Handle the Colobar system-command.													*/
; rs232cmd.c 2526	/* Remarks:		This command will possibly change pattern and/or delay if	 	*/
; rs232cmd.c 2527	/*            these are not valid in the selected system									*/
; rs232cmd.c 2528	/* Returns:		--																													*/
; rs232cmd.c 2529	/* Updates:	   --																													*/
; rs232cmd.c 2530	/**************************************************************************/
; rs232cmd.c 2531	void CBGenSystem( void)
; rs232cmd.c 2532	{
	ALIGN	1
	SYMB	LINE, 2532
	PUBLIC	_CBGenSystem
_CBGenSystem:
	SYMB	TYPE, 587, 'X', 12, #1, 30, 0
	SYMB	GFUN, "CBGenSystem", _CBGenSystem, #587, 0, 0, 48
	SYMB	ALAB, _CBGenSystem, #587
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2533		int system;
; rs232cmd.c 2534		char code *str;
; rs232cmd.c 2535	
; rs232cmd.c 2536		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2536
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_463
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_463
; rs232cmd.c 2537		{
; rs232cmd.c 2538			if ( CmdRequest)
	SYMB	LINE, 2538
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_453
; rs232cmd.c 2539			{
; rs232cmd.c 2540				if ( ParCnt)
	SYMB	LINE, 2540
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_450
; rs232cmd.c 2541					SCPIError = ParNotAllowed;
	SYMB	LINE, 2541
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_463
_450:
; rs232cmd.c 2542				else
; rs232cmd.c 2543				{
; rs232cmd.c 2544					str = SystemPar[CBSetup.System].LongName;
	SYMB	LINE, 2544
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_464
	ADDS.B	CS,#01H
_464:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2545	
; rs232cmd.c 2546					while ( *str)										 
	SYMB	LINE, 2546
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_452
_451:
; rs232cmd.c 2547						rs232putchar( *str++);
	SYMB	LINE, 2547
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2546
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_451
	SYMB	LINE, 2547
_452:
; rs232cmd.c 2548	
; rs232cmd.c 2549					rs232putchar('\n');
	SYMB	LINE, 2549
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2550				}
; rs232cmd.c 2551			}
	SYMB	LINE, 2551
	BR	_463
_453:
; rs232cmd.c 2552			else
; rs232cmd.c 2553			{
; rs232cmd.c 2554				if ( ParCnt != 1)
	SYMB	LINE, 2554
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_454
; rs232cmd.c 2555					SCPIError = SyntaxErr;
	SYMB	LINE, 2555
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_463
_454:
; rs232cmd.c 2556				else
; rs232cmd.c 2557				{
; rs232cmd.c 2558					system = FindParameter( Cmd, SystemPar);
	SYMB	LINE, 2558
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _SystemPar )
	MOV.W	R2,#SOF( _SystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 2559	
; rs232cmd.c 2560					if ( system == PAL_PALID)						// If line7, (PAL w/ID) ever should
	SYMB	LINE, 2560
	CMP.W	R0,#01H
	BNE	_455
; rs232cmd.c 2561						SCPIError = DataOutOfRange;				//  be supported remove this exception
	SYMB	LINE, 2561
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_463
_455:
	SYMB	LTIM, "system", 2, 0, 77
; rs232cmd.c 2562					else						
; rs232cmd.c 2563					{
; rs232cmd.c 2564						if ( system > -1)
	SYMB	LINE, 2564
	CMP.W	R0,#0FFFFH
	BLE	_456
; rs232cmd.c 2565							SetCBSystem( system);
	SYMB	LINE, 2565
	CALL	_SetCBSystem
	BR	_463
_456:
; rs232cmd.c 2566						else
; rs232cmd.c 2567							SCPIError = DataOutOfRange;
	SYMB	LINE, 2567
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2568					}
; rs232cmd.c 2569				}
; rs232cmd.c 2570			}
; rs232cmd.c 2571		}
	SYMB	LINE, 2571
_463:
; rs232cmd.c 2572	}
	SYMB	LINE, 2572
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2573	
; rs232cmd.c 2574	/**************************************************************************/
; rs232cmd.c 2575	/* CBGenDelay															 	    							 RS232CMD.C */
; rs232cmd.c 2576	/*																																				*/
; rs232cmd.c 2577	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 2578	/* Revised:		000604				     																					*/
; rs232cmd.c 2579	/*																																				*/
; rs232cmd.c 2580	/* Function:	Handle the Colorbar delay command.													*/
; rs232cmd.c 2581	/* Remarks:		Delay should be multiplied/divided with/by 256 to conform		*/
; rs232cmd.c 2582	/*						with the black burst timing as the functions								*/
; rs232cmd.c 2583	/*						PrintSamplesToFLT/FLTToSamples are common to both the CBar	*/
; rs232cmd.c 2584	/*						and BB timing. The CBar timing equals 1728/1716 samples			*/
; rs232cmd.c 2585	/*						(app. 37ns/sample), while the BB timing equals 1728*256/		*/
; rs232cmd.c 2586	/*						1716*256 samples (app. 0.14 ns/sample).											*/
; rs232cmd.c 2587	/* Returns:		--																													*/
; rs232cmd.c 2588	/* Updates:		--																													*/
; rs232cmd.c 2589	/**************************************************************************/
; rs232cmd.c 2590	void CBGenDelay( void)
; rs232cmd.c 2591	{
	ALIGN	1
	SYMB	LINE, 2591
	PUBLIC	_CBGenDelay
_CBGenDelay:
	SYMB	TYPE, 588, 'X', 12, #1, 30, 0
	SYMB	GFUN, "CBGenDelay", _CBGenDelay, #588, 0, 0, 48
	SYMB	ALAB, _CBGenDelay, #588
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	IDEN, "field", -12, #16, 130, 5
	SYMB	IDEN, "line", -10, #16, 130, 5
	SYMB	IDEN, "offset", -8, #10, 130, 5
	SYMB	IDEN, "samples", -1, #6, 130, 5
	SYMB	LTIM, "samples", -1, 0, 69
; rs232cmd.c 2592		int field, line;
; rs232cmd.c 2593		float offset;
; rs232cmd.c 2594		long samples;
; rs232cmd.c 2595	
; rs232cmd.c 2596		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2596
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_478
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_478
; rs232cmd.c 2597		{
; rs232cmd.c 2598			if ( CmdRequest)
	SYMB	LINE, 2598
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_469
; rs232cmd.c 2599			{
; rs232cmd.c 2600				if ( ParCnt)
	SYMB	LINE, 2600
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_468
; rs232cmd.c 2601					SCPIError = ParNotAllowed;
	SYMB	LINE, 2601
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_478
_468:
; rs232cmd.c 2602				else
; rs232cmd.c 2603				{
; rs232cmd.c 2604					PrintSamplesToFLT( CBSetup.System, CBSetup.Delay*256);
	SYMB	LINE, 2604
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MOV.B	ES,#SEG( _CBSetup+4 )
	MOV.W	R3,#SOF( _CBSetup+4 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	ASL.D	R2,#08H
	CALL	_PrintSamplesToFLT
; rs232cmd.c 2605	
; rs232cmd.c 2606					rs232putchar ( '\n');
	SYMB	LINE, 2606
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2607				}
; rs232cmd.c 2608			}
	SYMB	LINE, 2608
	BR	_478
_469:
; rs232cmd.c 2609			else
; rs232cmd.c 2610			{
; rs232cmd.c 2611				if (( ParCnt != 3) || ( sscanf( Cmd, "%d,%d,%f", &field, &line, &offset) != 3))
	SYMB	LINE, 2611
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_470
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 16
	PUSH.W	R4, R5
	SYMB	SOFF, 20
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	MOV.W	R3,#SEG( _295 )
	MOV.W	R2,#SOF( _295 )
	PUSH.W	R2, R3
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 12
	CMP.W	R0,#03H
	BEQ	_471
_470:
; rs232cmd.c 2612					SCPIError = SyntaxErr;
	SYMB	LINE, 2612
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_478
_471:
; rs232cmd.c 2613				else
; rs232cmd.c 2614				{
; rs232cmd.c 2615					if (( samples = FLTToSamples( CBSetup.System, field, line, offset)) == -1)
	SYMB	LINE, 2615
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	MOV.W	R1,[R7]
	MOV.W	R2,[R7+2]
	MOV.W	R5,[R7+6]
	MOV.W	R4,[R7+4]
	PUSH.W	R4, R5
	SYMB	SOFF, 16
	CALL	_FLTToSamples
	ADDS.W	R7,#04H
	SYMB	SOFF, 12
	MOV.W	R3,R1
	MOV.W	R2,R0
	CMP.W	R3,#0FFFFH
	BNE	_481
	CMP.W	R2,#0FFFFH
_481:
	BNE	_472
; rs232cmd.c 2616						SCPIError = ExecErr;
	SYMB	LINE, 2616
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_478
_472:
; rs232cmd.c 2617					else		
; rs232cmd.c 2618						SetCBDelay( samples/256);
	SYMB	LINE, 2618
	MOV.W	R3,#00H
	MOV.W	R2,#0100H
	FCALL	__SDIVL
	CALL	_SetCBDelay
; rs232cmd.c 2619				}
; rs232cmd.c 2620			}
; rs232cmd.c 2621		}
	SYMB	LINE, 2621
_478:
; rs232cmd.c 2622	}
	SYMB	LINE, 2622
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2623	
; rs232cmd.c 2624	/**************************************************************************/
; rs232cmd.c 2625	/* CBGenScHPhase														 	   							 RS232CMD.C	*/
; rs232cmd.c 2626	/*																																				*/
; rs232cmd.c 2627	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 2628	/* Revised:		000604				     																					*/
; rs232cmd.c 2629	/*																																				*/
; rs232cmd.c 2630	/* Function:	Handle the Colorbar ScH-Phase-command.											*/
; rs232cmd.c 2631	/* Remarks:		--																													*/
; rs232cmd.c 2632	/* Returns:		--																													*/
; rs232cmd.c 2633	/* Updates:		--																													*/
; rs232cmd.c 2634	/**************************************************************************/
; rs232cmd.c 2635	void CBGenScHPhase( void)
; rs232cmd.c 2636	{
	ALIGN	1
	SYMB	LINE, 2636
	PUBLIC	_CBGenScHPhase
_CBGenScHPhase:
	SYMB	TYPE, 589, 'X', 12, #1, 30, 0
	SYMB	GFUN, "CBGenScHPhase", _CBGenScHPhase, #589, 0, 0, 0
	SYMB	ALAB, _CBGenScHPhase, #589
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "schphase", -2, #16, 130, 5
; rs232cmd.c 2637		int schphase;
; rs232cmd.c 2638	
; rs232cmd.c 2639		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2639
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_493
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_493
; rs232cmd.c 2640		{
; rs232cmd.c 2641			if ( CmdRequest)
	SYMB	LINE, 2641
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_483
; rs232cmd.c 2642			{
; rs232cmd.c 2643				if ( ParCnt)
	SYMB	LINE, 2643
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_482
; rs232cmd.c 2644					SCPIError = ParNotAllowed;
	SYMB	LINE, 2644
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_493
_482:
; rs232cmd.c 2645				else
; rs232cmd.c 2646					rs232printf( 6, "%d\n", CBSetup.ScHPhase);
	SYMB	LINE, 2646
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R1,#SOF( _CBSetup+8 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 2647			}
	SYMB	LINE, 2647
	BR	_493
_483:
; rs232cmd.c 2648			else
; rs232cmd.c 2649			{
; rs232cmd.c 2650				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &schphase) != 1))
	SYMB	LINE, 2650
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_484
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_485
_484:
; rs232cmd.c 2651					SCPIError = SyntaxErr;
	SYMB	LINE, 2651
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_493
_485:
; rs232cmd.c 2652				else
; rs232cmd.c 2653				{
; rs232cmd.c 2654					if (( schphase < ScHPhaseLow) || ( schphase > ScHPhaseHigh))
	SYMB	LINE, 2654
	CMP.W	[R7],#0FF4DH
	BLT	_486
	CMP.W	[R7],#0B4H
	BLE	_487
_486:
; rs232cmd.c 2655						SCPIError = DataOutOfRange;
	SYMB	LINE, 2655
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_493
_487:
; rs232cmd.c 2656					else
; rs232cmd.c 2657						SetCBScHPhase( schphase);
	SYMB	LINE, 2657
	MOV.W	R0,[R7]
	CALL	_SetCBScHPhase
; rs232cmd.c 2658				}
; rs232cmd.c 2659			}
; rs232cmd.c 2660		}
	SYMB	LINE, 2660
_493:
; rs232cmd.c 2661	}
	SYMB	LINE, 2661
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 2662	
; rs232cmd.c 2663	/**************************************************************************/
; rs232cmd.c 2664	/* CBGenEmbAudioSignal											 	   							 RS232CMD.C	*/
; rs232cmd.c 2665	/*																																				*/
; rs232cmd.c 2666	/* Author:		Kim Engedahl, DEV, 980211	    															*/
; rs232cmd.c 2667	/* Revised:		000604				     																					*/
; rs232cmd.c 2668	/*																																				*/
; rs232cmd.c 2669	/* Function:	Handle the Colorbar embedded audio signal										*/
; rs232cmd.c 2670	/* Remarks:		--																													*/
; rs232cmd.c 2671	/* Returns:		--																													*/
; rs232cmd.c 2672	/* Updates:		--																													*/
; rs232cmd.c 2673	/**************************************************************************/
; rs232cmd.c 2674	void CBGenEmbAudioSignal( void)
; rs232cmd.c 2675	{
	ALIGN	1
	SYMB	LINE, 2675
	PUBLIC	_CBGenEmbAudioSignal
_CBGenEmbAudioSignal:
	SYMB	TYPE, 590, 'X', 12, #1, 30, 0
	SYMB	GFUN, "CBGenEmbAudioSignal", _CBGenEmbAudioSignal, #590, 0, 0, 48
	SYMB	ALAB, _CBGenEmbAudioSignal, #590
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "signal", -1, #16, 130, 5
	SYMB	LTIM, "signal", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2676		int signal;
; rs232cmd.c 2677		char code *str;
; rs232cmd.c 2678	
; rs232cmd.c 2679		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2679
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_509
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_509
; rs232cmd.c 2680		{
; rs232cmd.c 2681			if ( CmdRequest)
	SYMB	LINE, 2681
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_501
; rs232cmd.c 2682			{
; rs232cmd.c 2683				if ( ParCnt)
	SYMB	LINE, 2683
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_498
; rs232cmd.c 2684					SCPIError = ParNotAllowed;
	SYMB	LINE, 2684
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_509
_498:
; rs232cmd.c 2685				else
; rs232cmd.c 2686				{
; rs232cmd.c 2687					str = EmbAudioSignalPar[CBSetup.EmbAudioSignal].LongName;
	SYMB	LINE, 2687
	MOV.B	ES,#SEG( _CBSetup+10 )
	MOV.W	R0,#SOF( _CBSetup+10 )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _EmbAudioSignalPar )
	MOV.W	R0,#SOF( _EmbAudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_510
	ADDS.B	CS,#01H
_510:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2688	
; rs232cmd.c 2689					while ( *str)
	SYMB	LINE, 2689
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_500
_499:
; rs232cmd.c 2690						rs232putchar( *str++);
	SYMB	LINE, 2690
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2689
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_499
	SYMB	LINE, 2690
_500:
; rs232cmd.c 2691	
; rs232cmd.c 2692					rs232putchar('\n');
	SYMB	LINE, 2692
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2693				}
; rs232cmd.c 2694			}
	SYMB	LINE, 2694
	BR	_509
_501:
; rs232cmd.c 2695			else
; rs232cmd.c 2696			{
; rs232cmd.c 2697				if ( ParCnt != 1)
	SYMB	LINE, 2697
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_502
; rs232cmd.c 2698					SCPIError = SyntaxErr;
	SYMB	LINE, 2698
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_509
_502:
; rs232cmd.c 2699				else
; rs232cmd.c 2700				{
; rs232cmd.c 2701					signal = FindParameter( Cmd, EmbAudioSignalPar);
	SYMB	LINE, 2701
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _EmbAudioSignalPar )
	MOV.W	R2,#SOF( _EmbAudioSignalPar )
	CALL	_FindParameter
	SYMB	LTIM, "signal", 2, 0, 205
; rs232cmd.c 2702		
; rs232cmd.c 2703					if ( signal > -1)
	SYMB	LINE, 2703
	CMP.W	R0,#0FFFFH
	BLE	_503
	SYMB	LTIM, "signal", 2, 0, 77
; rs232cmd.c 2704						SetCBEmbAudioSignal( signal);
	SYMB	LINE, 2704
	CALL	_SetCBEmbAudioSignal
	BR	_509
_503:
; rs232cmd.c 2705					else
; rs232cmd.c 2706						SCPIError = DataOutOfRange;
	SYMB	LINE, 2706
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2707				}
; rs232cmd.c 2708			}
; rs232cmd.c 2709		}
	SYMB	LINE, 2709
_509:
; rs232cmd.c 2710	}
	SYMB	LINE, 2710
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2711	
; rs232cmd.c 2712	/**************************************************************************/
; rs232cmd.c 2713	/* AudioGenOutput																				 	     RS232CMD.C	*/
; rs232cmd.c 2714	/*																																				*/
; rs232cmd.c 2715	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 2716	/* Revised:		000603				     																					*/
; rs232cmd.c 2717	/*																																				*/
; rs232cmd.c 2718	/* Function:	--																													*/
; rs232cmd.c 2719	/* Remarks:		--																													*/
; rs232cmd.c 2720	/* Returns:		--																													*/
; rs232cmd.c 2721	/* Updates:		--																													*/
; rs232cmd.c 2722	/**************************************************************************/
; rs232cmd.c 2723	void AudioGenOutput( void)
; rs232cmd.c 2724	{
	ALIGN	1
	SYMB	LINE, 2724
	PUBLIC	_AudioGenOutput
_AudioGenOutput:
	SYMB	TYPE, 591, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenOutput", _AudioGenOutput, #591, 0, 0, 48
	SYMB	ALAB, _AudioGenOutput, #591
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "output", -1, #16, 130, 5
	SYMB	LTIM, "output", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2725		int output;
; rs232cmd.c 2726		char code *str;
; rs232cmd.c 2727	
; rs232cmd.c 2728		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2728
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_525
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_525
; rs232cmd.c 2729		{
; rs232cmd.c 2730			if ( CmdRequest)
	SYMB	LINE, 2730
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_516
; rs232cmd.c 2731			{
; rs232cmd.c 2732				if ( ParCnt)
	SYMB	LINE, 2732
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_513
; rs232cmd.c 2733					SCPIError = ParNotAllowed;
	SYMB	LINE, 2733
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_525
_513:
; rs232cmd.c 2734				else
; rs232cmd.c 2735				{
; rs232cmd.c 2736					str = AudioOutputPar[AudioOutput].LongName;
	SYMB	LINE, 2736
	MOV.B	ES,#SEG( _AudioOutput )
	MOV.W	R0,#SOF( _AudioOutput )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioOutputPar )
	MOV.W	R0,#SOF( _AudioOutputPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_526
	ADDS.B	CS,#01H
_526:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2737	
; rs232cmd.c 2738					while ( *str)
	SYMB	LINE, 2738
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_515
_514:
; rs232cmd.c 2739						rs232putchar( *str++);
	SYMB	LINE, 2739
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2738
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_514
	SYMB	LINE, 2739
_515:
; rs232cmd.c 2740	
; rs232cmd.c 2741					rs232putchar('\n');
	SYMB	LINE, 2741
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2742				}
; rs232cmd.c 2743			}
	SYMB	LINE, 2743
	BR	_525
_516:
; rs232cmd.c 2744			else
; rs232cmd.c 2745			{
; rs232cmd.c 2746				if ( ParCnt != 1)
	SYMB	LINE, 2746
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_517
; rs232cmd.c 2747					SCPIError = SyntaxErr;
	SYMB	LINE, 2747
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_525
_517:
; rs232cmd.c 2748				else
; rs232cmd.c 2749				{
; rs232cmd.c 2750					output = FindParameter( Cmd, AudioOutputPar);
	SYMB	LINE, 2750
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AudioOutputPar )
	MOV.W	R2,#SOF( _AudioOutputPar )
	CALL	_FindParameter
	SYMB	LTIM, "output", 2, 0, 205
; rs232cmd.c 2751		
; rs232cmd.c 2752					if ( output > -1)
	SYMB	LINE, 2752
	CMP.W	R0,#0FFFFH
	BLE	_518
; rs232cmd.c 2753					{
; rs232cmd.c 2754						if ( SetAudioOutput( output) == FAIL)
	SYMB	LINE, 2754
	CALL	_SetAudioOutput
	SYMB	LTIM, "output", 2, 0, 77
	OR.W	R0,R0
	BNE	_525
; rs232cmd.c 2755							SCPIError = ExecErr;
	SYMB	LINE, 2755
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 2756					}
	SYMB	LINE, 2756
	BR	_525
_518:
; rs232cmd.c 2757					else
; rs232cmd.c 2758						SCPIError = DataOutOfRange;
	SYMB	LINE, 2758
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2759				}
; rs232cmd.c 2760			}
; rs232cmd.c 2761		}
	SYMB	LINE, 2761
_525:
; rs232cmd.c 2762	}
	SYMB	LINE, 2762
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2763	
; rs232cmd.c 2764	/**************************************************************************/
; rs232cmd.c 2765	/* AudioGenAnalog																				 	     RS232CMD.C	*/
; rs232cmd.c 2766	/*																																				*/
; rs232cmd.c 2767	/* Author:		Kim Engedahl, DEV, 000526	    															*/
; rs232cmd.c 2768	/* Revised:		000705				     																					*/
; rs232cmd.c 2769	/*																																				*/
; rs232cmd.c 2770	/* Function:	--																													*/
; rs232cmd.c 2771	/* Remarks:		Request only.																								*/
; rs232cmd.c 2772	/* Returns:	  --																													*/
; rs232cmd.c 2773	/* Updates:		--																													*/
; rs232cmd.c 2774	/**************************************************************************/
; rs232cmd.c 2775	void AudioGenAnalog( void)
; rs232cmd.c 2776	{
	ALIGN	1
	SYMB	LINE, 2776
	PUBLIC	_AudioGenAnalog
_AudioGenAnalog:
	SYMB	TYPE, 592, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAnalog", _AudioGenAnalog, #592, 0, 0, 112
	SYMB	ALAB, _AudioGenAnalog, #592
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "level", -1, #16, 130, 5
	SYMB	LTIM, "level", -1, 0, 69
; rs232cmd.c 2777		char code *str;
; rs232cmd.c 2778		int level;
; rs232cmd.c 2779	
; rs232cmd.c 2780		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2780
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_601
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_601
; rs232cmd.c 2781		{
; rs232cmd.c 2782			if ( !CmdRequest)
	SYMB	LINE, 2782
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_530
; rs232cmd.c 2783					SCPIError = SyntaxErr;
	SYMB	LINE, 2783
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_601
_530:
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2784			else
; rs232cmd.c 2785			{
; rs232cmd.c 2786				if ( ParCnt)
	SYMB	LINE, 2786
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_531
; rs232cmd.c 2787					SCPIError = ParNotAllowed;
	SYMB	LINE, 2787
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_601
_531:
	SYMB	LTIM, "level", 26, 0, 77
RS232CMD_IR	SEGMENT	HCODE INSEGMENT ROMDATA
	RSEG	RS232CMD_IR
	ALIGN	1
__swtable603:
	DW	SOF _534,SEG _534
	DW	SOF _535,SEG _535
	DW	SOF _536,SEG _536
	DW	SOF _537,SEG _537
	DW	SOF _538,SEG _538
	DW	SOF _539,SEG _539
	DW	SOF _540,SEG _540
	DW	SOF _541,SEG _541
	DW	SOF _542,SEG _542
	DW	SOF _543,SEG _543
	DW	SOF _544,SEG _544
	DW	SOF _545,SEG _545
	DW	SOF _546,SEG _546
	DW	SOF _547,SEG _547
	DW	SOF _548,SEG _548
	DW	SOF _549,SEG _549
	DW	SOF _550,SEG _550
	DW	SOF _551,SEG _551
	DW	SOF _552,SEG _552
	DW	SOF _553,SEG _553
	DW	SOF _554,SEG _554
	DW	SOF _555,SEG _555
	DW	SOF _556,SEG _556
	DW	SOF _557,SEG _557
	DW	SOF _558,SEG _558
	DW	SOF _559,SEG _559
	DW	SOF _560,SEG _560
	DW	SOF _561,SEG _561
	DW	SOF _562,SEG _562
	DW	SOF _563,SEG _563
	RSEG	RS232CMD_PR
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2788				else
; rs232cmd.c 2789				{
; rs232cmd.c 2790					str = AudioSignalPar[AudioSetup[AnalogAudio].Signal].LongName;
	SYMB	LINE, 2790
	MOV.B	ES,#SEG( _AudioSetup+2 )
	MOV.W	R0,#SOF( _AudioSetup+2 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioSignalPar )
	MOV.W	R0,#SOF( _AudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_602
	ADDS.B	CS,#01H
_602:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2791	
; rs232cmd.c 2792					while ( *str)
	SYMB	LINE, 2792
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_533
_532:
; rs232cmd.c 2793						rs232putchar( *str++);
	SYMB	LINE, 2793
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2792
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_532
	SYMB	LINE, 2793
_533:
; rs232cmd.c 2794	
; rs232cmd.c 2795					rs232putchar(',');
	SYMB	LINE, 2795
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2796	
; rs232cmd.c 2797					str = NULL;
	SYMB	LINE, 2797
	MOV.W	R5,#00H
	MOV.W	R4,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2798	
; rs232cmd.c 2799					switch ( AudioSetup[AnalogAudio].Level)
	SYMB	LINE, 2799
	MOV.B	ES,#SEG( _AudioSetup+4 )
	MOV.W	R0,#SOF( _AudioSetup+4 )
	MOV.W	R0,[R0]
	ADDS.W	R0,#0FH
	CMP.W	R0,#01DH
	BG	_564
	ASL.W	R0,#02H
	MOV.B	CS,#SEG( __swtable603 )
	ADD.W	R0,#SOF( __swtable603 )
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	RET
; rs232cmd.c 2800					{
; rs232cmd.c 2801					 	case P10dBm:
	SYMB	LINE, 2801
_534:
; rs232cmd.c 2802							level = 10;
	SYMB	LINE, 2802
	MOV.W	R6,#0AH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2803							break;
	SYMB	LINE, 2803
	BR	_596
; rs232cmd.c 2804	
; rs232cmd.c 2805					 	case P8dBm:
	SYMB	LINE, 2805
_535:
; rs232cmd.c 2806							level = 8;
	SYMB	LINE, 2806
	MOV.W	R6,#08H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2807							break;
	SYMB	LINE, 2807
	BR	_596
; rs232cmd.c 2808	
; rs232cmd.c 2809					 	case P7dBm:
	SYMB	LINE, 2809
_536:
; rs232cmd.c 2810							level = 7;
	SYMB	LINE, 2810
	MOV.W	R6,#07H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2811							break;
	SYMB	LINE, 2811
	BR	_596
; rs232cmd.c 2812	
; rs232cmd.c 2813					 	case P6dBm:
	SYMB	LINE, 2813
_537:
; rs232cmd.c 2814							level = 6;
	SYMB	LINE, 2814
	MOV.W	R6,#06H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2815							break;
	SYMB	LINE, 2815
	BR	_596
; rs232cmd.c 2816	
; rs232cmd.c 2817					 	case P5dBm:
	SYMB	LINE, 2817
_538:
; rs232cmd.c 2818							level = 5;
	SYMB	LINE, 2818
	MOV.W	R6,#05H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2819							break;
	SYMB	LINE, 2819
	BR	_596
; rs232cmd.c 2820	
; rs232cmd.c 2821					 	case P4dBm:
	SYMB	LINE, 2821
_539:
; rs232cmd.c 2822							level = 4;
	SYMB	LINE, 2822
	MOV.W	R6,#04H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2823							break;
	SYMB	LINE, 2823
	BR	_596
; rs232cmd.c 2824	
; rs232cmd.c 2825					 	case P3dBm:
	SYMB	LINE, 2825
_540:
; rs232cmd.c 2826							level = 3;
	SYMB	LINE, 2826
	MOV.W	R6,#03H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2827							break;
	SYMB	LINE, 2827
	BR	_596
; rs232cmd.c 2828	
; rs232cmd.c 2829					 	case P2dBm:
	SYMB	LINE, 2829
_541:
; rs232cmd.c 2830							level = 2;
	SYMB	LINE, 2830
	MOV.W	R6,#02H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2831							break;
	SYMB	LINE, 2831
	BR	_596
; rs232cmd.c 2832	
; rs232cmd.c 2833					 	case P1dBm:
	SYMB	LINE, 2833
_542:
; rs232cmd.c 2834							level = 1;
	SYMB	LINE, 2834
	MOV.W	R6,#01H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2835							break;
	SYMB	LINE, 2835
	BR	_596
; rs232cmd.c 2836	
; rs232cmd.c 2837					 	case M0dBm:
	SYMB	LINE, 2837
_543:
; rs232cmd.c 2838							level = 0;
	SYMB	LINE, 2838
	MOV.W	R6,#00H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2839							break;
	SYMB	LINE, 2839
	BR	_596
; rs232cmd.c 2840	
; rs232cmd.c 2841					 	case M1dBm:
	SYMB	LINE, 2841
_544:
; rs232cmd.c 2842							level = -1;
	SYMB	LINE, 2842
	MOV.W	R6,#0FFFFH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2843							break;
	SYMB	LINE, 2843
	BR	_596
; rs232cmd.c 2844	
; rs232cmd.c 2845					 	case M2dBm:
	SYMB	LINE, 2845
_545:
; rs232cmd.c 2846							level = -2;
	SYMB	LINE, 2846
	MOV.W	R6,#0FFFEH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2847							break;
	SYMB	LINE, 2847
	BR	_596
; rs232cmd.c 2848	
; rs232cmd.c 2849					 	case M3dBm:
	SYMB	LINE, 2849
_546:
; rs232cmd.c 2850							level = -3;
	SYMB	LINE, 2850
	MOV.W	R6,#0FFFDH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2851							break;
	SYMB	LINE, 2851
	BR	_596
; rs232cmd.c 2852	
; rs232cmd.c 2853					 	case M4dBm:
	SYMB	LINE, 2853
_547:
; rs232cmd.c 2854							level = -4;
	SYMB	LINE, 2854
	MOV.W	R6,#0FFFCH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2855							break;
	SYMB	LINE, 2855
	BR	_596
; rs232cmd.c 2856	
; rs232cmd.c 2857					 	case M5dBm:
	SYMB	LINE, 2857
_548:
; rs232cmd.c 2858							level = -5;
	SYMB	LINE, 2858
	MOV.W	R6,#0FFFBH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2859							break;
	SYMB	LINE, 2859
	BR	_596
; rs232cmd.c 2860	
; rs232cmd.c 2861					 	case M6dBm:
	SYMB	LINE, 2861
_549:
; rs232cmd.c 2862							level = -6;
	SYMB	LINE, 2862
	MOV.W	R6,#0FFFAH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2863							break;
	SYMB	LINE, 2863
	BR	_596
; rs232cmd.c 2864	
; rs232cmd.c 2865					 	case M7dBm:
	SYMB	LINE, 2865
_550:
; rs232cmd.c 2866							level = -7;
	SYMB	LINE, 2866
	MOV.W	R6,#0FFF9H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2867							break;
	SYMB	LINE, 2867
	BR	_596
; rs232cmd.c 2868	
; rs232cmd.c 2869					 	case M8dBm:
	SYMB	LINE, 2869
_551:
; rs232cmd.c 2870							level = -8;
	SYMB	LINE, 2870
	MOV.W	R6,#0FFF8H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2871							break;
	SYMB	LINE, 2871
	BR	_596
; rs232cmd.c 2872	
; rs232cmd.c 2873					 	case M9dBm:
	SYMB	LINE, 2873
_552:
; rs232cmd.c 2874							level = -9;
	SYMB	LINE, 2874
	MOV.W	R6,#0FFF7H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2875							break;
	SYMB	LINE, 2875
	BR	_596
; rs232cmd.c 2876	
; rs232cmd.c 2877					 	case M10dBm:
	SYMB	LINE, 2877
_553:
; rs232cmd.c 2878							level = -10;
	SYMB	LINE, 2878
	MOV.W	R6,#0FFF6H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2879							break;
	SYMB	LINE, 2879
	BR	_596
; rs232cmd.c 2880	
; rs232cmd.c 2881					 	case M11dBm:
	SYMB	LINE, 2881
_554:
; rs232cmd.c 2882							level = -11;
	SYMB	LINE, 2882
	MOV.W	R6,#0FFF5H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2883							break;
	SYMB	LINE, 2883
	BR	_596
; rs232cmd.c 2884	
; rs232cmd.c 2885					 	case M12dBm:
	SYMB	LINE, 2885
_555:
; rs232cmd.c 2886							level = -12;
	SYMB	LINE, 2886
	MOV.W	R6,#0FFF4H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2887							break;
	SYMB	LINE, 2887
	BR	_596
; rs232cmd.c 2888	
; rs232cmd.c 2889					 	case M15dBm:
	SYMB	LINE, 2889
_556:
; rs232cmd.c 2890							level = -15;
	SYMB	LINE, 2890
	MOV.W	R6,#0FFF1H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2891							break;
	SYMB	LINE, 2891
	BR	_596
; rs232cmd.c 2892	
; rs232cmd.c 2893					 	case M18dBm:
	SYMB	LINE, 2893
_557:
; rs232cmd.c 2894							level = -18;
	SYMB	LINE, 2894
	MOV.W	R6,#0FFEEH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2895							break;
	SYMB	LINE, 2895
	BR	_596
; rs232cmd.c 2896	
; rs232cmd.c 2897						case M21dBm:
	SYMB	LINE, 2897
_558:
; rs232cmd.c 2898							level = -21;
	SYMB	LINE, 2898
	MOV.W	R6,#0FFEBH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2899							break;
	SYMB	LINE, 2899
	BR	_596
; rs232cmd.c 2900	
; rs232cmd.c 2901					 	case M24dBm:
	SYMB	LINE, 2901
_559:
; rs232cmd.c 2902							level = -24;
	SYMB	LINE, 2902
	MOV.W	R6,#0FFE8H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2903							break;
	SYMB	LINE, 2903
	BR	_596
; rs232cmd.c 2904	
; rs232cmd.c 2905					 	case M27dBm:
	SYMB	LINE, 2905
_560:
; rs232cmd.c 2906							level = -27;
	SYMB	LINE, 2906
	MOV.W	R6,#0FFE5H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2907							break;
	SYMB	LINE, 2907
	BR	_596
; rs232cmd.c 2908	
; rs232cmd.c 2909					 	case M30dBm:
	SYMB	LINE, 2909
_561:
; rs232cmd.c 2910							level = -30;
	SYMB	LINE, 2910
	MOV.W	R6,#0FFE2H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2911							break;
	SYMB	LINE, 2911
	BR	_596
; rs232cmd.c 2912	
; rs232cmd.c 2913					 	case M33dBm:
	SYMB	LINE, 2913
_562:
; rs232cmd.c 2914							level = -33;
	SYMB	LINE, 2914
	MOV.W	R6,#0FFDFH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2915							break;
	SYMB	LINE, 2915
	BR	_596
; rs232cmd.c 2916	
; rs232cmd.c 2917						case M36dBm:
	SYMB	LINE, 2917
_563:
; rs232cmd.c 2918							level = -36;
	SYMB	LINE, 2918
	MOV.W	R6,#0FFDCH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 2919							break;
	SYMB	LINE, 2919
	BR	_596
; rs232cmd.c 2920	
; rs232cmd.c 2921						default:
	SYMB	LINE, 2921
_564:
; rs232cmd.c 2922							str = SILENCEParTxt;
	SYMB	LINE, 2922
	MOV.W	R5,#SEG( _SILENCEParTxt )
	MOV.W	R4,#SOF( _SILENCEParTxt )
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2923	
; rs232cmd.c 2924							while ( *str)
	SYMB	LINE, 2924
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_566
_565:
; rs232cmd.c 2925								rs232putchar( *str++);
	SYMB	LINE, 2925
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2924
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_565
	SYMB	LINE, 2925
_566:
; rs232cmd.c 2926	
; rs232cmd.c 2927							rs232putchar(',');
	SYMB	LINE, 2927
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 2928							break;
; rs232cmd.c 2929						}
	SYMB	LINE, 2929
_596:
; rs232cmd.c 2930	
; rs232cmd.c 2931					if ( str == NULL)
	SYMB	LINE, 2931
	OR.W	R5,R4
	BNE	_597
; rs232cmd.c 2932						rs232printf( 6, "%d,", level);
	SYMB	LINE, 2932
	MOV.W	R0,#06H
	PUSH.W	R6
	SYMB	SOFF, 8
	SYMB	LTIM, "level", 26, 0, 77
	MOV.W	R3,#SEG( _529 )
	MOV.W	R2,#SOF( _529 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
_597:
; rs232cmd.c 2933	
; rs232cmd.c 2934					rs232printf( 6, "%d\n", AudioSetup[AnalogAudio].Click);			
	SYMB	LINE, 2934
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _AudioSetup+12 )
	MOV.W	R1,#SOF( _AudioSetup+12 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
; rs232cmd.c 2935				}
; rs232cmd.c 2936			}
; rs232cmd.c 2937		}
	SYMB	LINE, 2937
_601:
; rs232cmd.c 2938	}
	SYMB	LINE, 2938
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2939	
; rs232cmd.c 2940	/**************************************************************************/
; rs232cmd.c 2941	/* AudioGenAnalogSignal		 															 	     RS232CMD.C	*/
; rs232cmd.c 2942	/*																																				*/
; rs232cmd.c 2943	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 2944	/* Revised:		000603				     																					*/
; rs232cmd.c 2945	/*																																				*/
; rs232cmd.c 2946	/* Function:	--																													*/
; rs232cmd.c 2947	/* Remarks:		--																													*/
; rs232cmd.c 2948	/* Returns:		--																													*/
; rs232cmd.c 2949	/* Updates:		--																													*/
; rs232cmd.c 2950	/**************************************************************************/
; rs232cmd.c 2951	void AudioGenAnalogSignal( void)
; rs232cmd.c 2952	{
	ALIGN	1
	SYMB	LINE, 2952
	PUBLIC	_AudioGenAnalogSignal
_AudioGenAnalogSignal:
	SYMB	TYPE, 593, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAnalogSignal", _AudioGenAnalogSignal, #593, 0, 0, 48
	SYMB	ALAB, _AudioGenAnalogSignal, #593
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "signal", -1, #16, 130, 5
	SYMB	LTIM, "signal", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 2953		int signal;
; rs232cmd.c 2954		char code *str;
; rs232cmd.c 2955	
; rs232cmd.c 2956		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 2956
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_616
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_616
; rs232cmd.c 2957		{
; rs232cmd.c 2958			if ( CmdRequest)
	SYMB	LINE, 2958
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_607
; rs232cmd.c 2959			{
; rs232cmd.c 2960				if ( ParCnt)
	SYMB	LINE, 2960
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_604
; rs232cmd.c 2961					SCPIError = ParNotAllowed;
	SYMB	LINE, 2961
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_616
_604:
; rs232cmd.c 2962				else
; rs232cmd.c 2963				{
; rs232cmd.c 2964					str = AudioSignalPar[AudioSetup[AnalogAudio].Signal].LongName;
	SYMB	LINE, 2964
	MOV.B	ES,#SEG( _AudioSetup+2 )
	MOV.W	R0,#SOF( _AudioSetup+2 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioSignalPar )
	MOV.W	R0,#SOF( _AudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_617
	ADDS.B	CS,#01H
_617:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 2965	
; rs232cmd.c 2966					while ( *str)
	SYMB	LINE, 2966
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_606
_605:
; rs232cmd.c 2967						rs232putchar( *str++);
	SYMB	LINE, 2967
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 2966
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_605
	SYMB	LINE, 2967
_606:
; rs232cmd.c 2968	
; rs232cmd.c 2969					rs232putchar('\n');
	SYMB	LINE, 2969
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 2970				}
; rs232cmd.c 2971			}
	SYMB	LINE, 2971
	BR	_616
_607:
; rs232cmd.c 2972			else
; rs232cmd.c 2973			{
; rs232cmd.c 2974				if ( ParCnt != 1)
	SYMB	LINE, 2974
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_608
; rs232cmd.c 2975					SCPIError = SyntaxErr;
	SYMB	LINE, 2975
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_616
_608:
; rs232cmd.c 2976				else
; rs232cmd.c 2977				{
; rs232cmd.c 2978					signal = FindParameter( Cmd, AudioSignalPar);
	SYMB	LINE, 2978
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AudioSignalPar )
	MOV.W	R2,#SOF( _AudioSignalPar )
	CALL	_FindParameter
	SYMB	LTIM, "signal", 2, 0, 205
; rs232cmd.c 2979		
; rs232cmd.c 2980					if ( signal > -1)
	SYMB	LINE, 2980
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "signal", 2, 0, 77
	SYMB	LTIM, "signal", 6, 0, 205
	BLE	_609
; rs232cmd.c 2981					{
; rs232cmd.c 2982						if ( SetAudioSignal( AnalogAudio, signal) == FAIL)
	SYMB	LINE, 2982
	MOV.W	R0,#00H
	CALL	_SetAudioSignal
	SYMB	LTIM, "signal", 6, 0, 77
	OR.W	R0,R0
	BNE	_616
; rs232cmd.c 2983								SCPIError = ExecErr;
	SYMB	LINE, 2983
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 2984					}
	SYMB	LINE, 2984
	BR	_616
_609:
; rs232cmd.c 2985					else
; rs232cmd.c 2986						SCPIError = DataOutOfRange;
	SYMB	LINE, 2986
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 2987				}
; rs232cmd.c 2988			}
; rs232cmd.c 2989		}
	SYMB	LINE, 2989
_616:
; rs232cmd.c 2990	}
	SYMB	LINE, 2990
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 2991	
; rs232cmd.c 2992	/**************************************************************************/
; rs232cmd.c 2993	/* AudioGenAnalogLevel																	 	     RS232CMD.C	*/
; rs232cmd.c 2994	/*																																				*/
; rs232cmd.c 2995	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 2996	/* Revised:		000705				     																					*/
; rs232cmd.c 2997	/*																																				*/
; rs232cmd.c 2998	/* Function:	--																													*/
; rs232cmd.c 2999	/* Remarks:		--																													*/
; rs232cmd.c 3000	/* Returns:		--																													*/
; rs232cmd.c 3001	/* Updates:		--																													*/
; rs232cmd.c 3002	/**************************************************************************/
; rs232cmd.c 3003	void AudioGenAnalogLevel( void)
; rs232cmd.c 3004	{
	ALIGN	1
	SYMB	LINE, 3004
	PUBLIC	_AudioGenAnalogLevel
_AudioGenAnalogLevel:
	SYMB	TYPE, 594, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAnalogLevel", _AudioGenAnalogLevel, #594, 0, 0, 48
	SYMB	ALAB, _AudioGenAnalogLevel, #594
	RSEG	RS232CMD_IR
	ALIGN	1
__swtable758:
	DW	SOF _653,SEG _653
	DW	SOF _621,SEG _621
	DW	SOF _622,SEG _622
	DW	SOF _623,SEG _623
	DW	SOF _624,SEG _624
	DW	SOF _625,SEG _625
	DW	SOF _626,SEG _626
	DW	SOF _627,SEG _627
	DW	SOF _628,SEG _628
	DW	SOF _629,SEG _629
	DW	SOF _630,SEG _630
	DW	SOF _631,SEG _631
	DW	SOF _632,SEG _632
	DW	SOF _633,SEG _633
	DW	SOF _634,SEG _634
	DW	SOF _635,SEG _635
	DW	SOF _636,SEG _636
	DW	SOF _637,SEG _637
	DW	SOF _638,SEG _638
	DW	SOF _639,SEG _639
	DW	SOF _640,SEG _640
	DW	SOF _641,SEG _641
	DW	SOF _642,SEG _642
	DW	SOF _643,SEG _643
	DW	SOF _644,SEG _644
	DW	SOF _645,SEG _645
	DW	SOF _646,SEG _646
	DW	SOF _647,SEG _647
	DW	SOF _648,SEG _648
	DW	SOF _649,SEG _649
	RSEG	RS232CMD_PR
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0EH
	SYMB	SOFF, 6
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "level", -6, #16, 130, 5
; rs232cmd.c 3005		code char *str;
; rs232cmd.c 3006		int level;
; rs232cmd.c 3007	
; rs232cmd.c 3008		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3008
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_757
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_757
; rs232cmd.c 3009		{
; rs232cmd.c 3010			if ( CmdRequest)
	SYMB	LINE, 3010
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_683
; rs232cmd.c 3011			{
; rs232cmd.c 3012				if ( ParCnt)
	SYMB	LINE, 3012
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_620
; rs232cmd.c 3013					SCPIError = ParNotAllowed;
	SYMB	LINE, 3013
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_757
_620:
; rs232cmd.c 3014				else
; rs232cmd.c 3015				{
; rs232cmd.c 3016					switch ( AudioSetup[AnalogAudio].Level)
	SYMB	LINE, 3016
	MOV.B	ES,#SEG( _AudioSetup+4 )
	MOV.W	R0,#SOF( _AudioSetup+4 )
	MOV.W	R0,[R0]
	ADDS.W	R0,#0FH
	CMP.W	R0,#01DH
	BG	_650
	ASL.W	R0,#02H
	MOV.B	CS,#SEG( __swtable758 )
	ADD.W	R0,#SOF( __swtable758 )
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	MOVC.W	R1,[R0+]
	PUSH.W	R1
	RET
; rs232cmd.c 3017					{
; rs232cmd.c 3018					 	case P10dBm:
; rs232cmd.c 3019							level = 10;
; rs232cmd.c 3020							break;
; rs232cmd.c 3021	
; rs232cmd.c 3022					 	case P8dBm:
	SYMB	LINE, 3022
_621:
; rs232cmd.c 3023							level = 8;
	SYMB	LINE, 3023
	MOV.W	[R7],#08H
; rs232cmd.c 3024							break;
	SYMB	LINE, 3024
	BR	_682
; rs232cmd.c 3025	
; rs232cmd.c 3026					 	case P7dBm:
	SYMB	LINE, 3026
_622:
; rs232cmd.c 3027							level = 7;
	SYMB	LINE, 3027
	MOV.W	[R7],#07H
; rs232cmd.c 3028							break;
	SYMB	LINE, 3028
	BR	_682
; rs232cmd.c 3029	
; rs232cmd.c 3030					 	case P6dBm:
	SYMB	LINE, 3030
_623:
; rs232cmd.c 3031							level = 6;
	SYMB	LINE, 3031
	MOV.W	[R7],#06H
; rs232cmd.c 3032							break;
	SYMB	LINE, 3032
	BR	_682
; rs232cmd.c 3033	
; rs232cmd.c 3034					 	case P5dBm:
	SYMB	LINE, 3034
_624:
; rs232cmd.c 3035							level = 5;
	SYMB	LINE, 3035
	MOV.W	[R7],#05H
; rs232cmd.c 3036							break;
	SYMB	LINE, 3036
	BR	_682
; rs232cmd.c 3037	
; rs232cmd.c 3038					 	case P4dBm:
	SYMB	LINE, 3038
_625:
; rs232cmd.c 3039							level = 4;
	SYMB	LINE, 3039
	MOV.W	[R7],#04H
; rs232cmd.c 3040							break;
	SYMB	LINE, 3040
	BR	_682
; rs232cmd.c 3041	
; rs232cmd.c 3042					 	case P3dBm:
	SYMB	LINE, 3042
_626:
; rs232cmd.c 3043							level = 3;
	SYMB	LINE, 3043
	MOV.W	[R7],#03H
; rs232cmd.c 3044							break;
	SYMB	LINE, 3044
	BR	_682
; rs232cmd.c 3045	
; rs232cmd.c 3046					 	case P2dBm:
	SYMB	LINE, 3046
_627:
; rs232cmd.c 3047							level = 2;
	SYMB	LINE, 3047
	MOV.W	[R7],#02H
; rs232cmd.c 3048							break;
	SYMB	LINE, 3048
	BR	_682
; rs232cmd.c 3049	
; rs232cmd.c 3050					 	case P1dBm:
	SYMB	LINE, 3050
_628:
; rs232cmd.c 3051							level = 1;
	SYMB	LINE, 3051
	MOV.W	[R7],#01H
; rs232cmd.c 3052							break;
	SYMB	LINE, 3052
	BR	_682
; rs232cmd.c 3053	
; rs232cmd.c 3054					 	case M0dBm:
	SYMB	LINE, 3054
_629:
; rs232cmd.c 3055							level = 0;
	SYMB	LINE, 3055
	MOV.W	[R7],#00H
; rs232cmd.c 3056							break;
	SYMB	LINE, 3056
	BR	_682
; rs232cmd.c 3057	
; rs232cmd.c 3058					 	case M1dBm:
	SYMB	LINE, 3058
_630:
; rs232cmd.c 3059							level = -1;
	SYMB	LINE, 3059
	MOV.W	[R7],#0FFFFH
; rs232cmd.c 3060							break;
	SYMB	LINE, 3060
	BR	_682
; rs232cmd.c 3061	
; rs232cmd.c 3062					 	case M2dBm:
	SYMB	LINE, 3062
_631:
; rs232cmd.c 3063							level = -2;
	SYMB	LINE, 3063
	MOV.W	[R7],#0FFFEH
; rs232cmd.c 3064							break;
	SYMB	LINE, 3064
	BR	_682
; rs232cmd.c 3065	
; rs232cmd.c 3066					 	case M3dBm:
	SYMB	LINE, 3066
_632:
; rs232cmd.c 3067							level = -3;
	SYMB	LINE, 3067
	MOV.W	[R7],#0FFFDH
; rs232cmd.c 3068							break;
	SYMB	LINE, 3068
	BR	_682
; rs232cmd.c 3069	
; rs232cmd.c 3070					 	case M4dBm:
	SYMB	LINE, 3070
_633:
; rs232cmd.c 3071							level = -4;
	SYMB	LINE, 3071
	MOV.W	[R7],#0FFFCH
; rs232cmd.c 3072							break;
	SYMB	LINE, 3072
	BR	_682
; rs232cmd.c 3073	
; rs232cmd.c 3074					 	case M5dBm:
	SYMB	LINE, 3074
_634:
; rs232cmd.c 3075							level = -5;
	SYMB	LINE, 3075
	MOV.W	[R7],#0FFFBH
; rs232cmd.c 3076							break;
	SYMB	LINE, 3076
	BR	_682
; rs232cmd.c 3077	
; rs232cmd.c 3078					 	case M6dBm:
	SYMB	LINE, 3078
_635:
; rs232cmd.c 3079							level = -6;
	SYMB	LINE, 3079
	MOV.W	[R7],#0FFFAH
; rs232cmd.c 3080							break;
	SYMB	LINE, 3080
	BR	_682
; rs232cmd.c 3081	
; rs232cmd.c 3082					 	case M7dBm:
	SYMB	LINE, 3082
_636:
; rs232cmd.c 3083							level = -7;
	SYMB	LINE, 3083
	MOV.W	[R7],#0FFF9H
; rs232cmd.c 3084							break;
	SYMB	LINE, 3084
	BR	_682
; rs232cmd.c 3085	
; rs232cmd.c 3086					 	case M8dBm:
	SYMB	LINE, 3086
_637:
; rs232cmd.c 3087							level = -8;
	SYMB	LINE, 3087
	MOV.W	[R7],#0FFF8H
; rs232cmd.c 3088							break;
	SYMB	LINE, 3088
	BR	_682
; rs232cmd.c 3089	
; rs232cmd.c 3090					 	case M9dBm:
	SYMB	LINE, 3090
_638:
; rs232cmd.c 3091							level = -9;
	SYMB	LINE, 3091
	MOV.W	[R7],#0FFF7H
; rs232cmd.c 3092							break;
	SYMB	LINE, 3092
	BR	_682
; rs232cmd.c 3093	
; rs232cmd.c 3094					 	case M10dBm:
	SYMB	LINE, 3094
_639:
; rs232cmd.c 3095							level = -10;
	SYMB	LINE, 3095
	MOV.W	[R7],#0FFF6H
; rs232cmd.c 3096							break;
	SYMB	LINE, 3096
	BR	_682
; rs232cmd.c 3097	
; rs232cmd.c 3098					 	case M11dBm:
	SYMB	LINE, 3098
_640:
; rs232cmd.c 3099							level = -11;
	SYMB	LINE, 3099
	MOV.W	[R7],#0FFF5H
; rs232cmd.c 3100							break;
	SYMB	LINE, 3100
	BR	_682
; rs232cmd.c 3101	
; rs232cmd.c 3102					 	case M12dBm:
	SYMB	LINE, 3102
_641:
; rs232cmd.c 3103							level = -12;
	SYMB	LINE, 3103
	MOV.W	[R7],#0FFF4H
; rs232cmd.c 3104							break;
	SYMB	LINE, 3104
	BR	_682
; rs232cmd.c 3105	
; rs232cmd.c 3106					 	case M15dBm:
	SYMB	LINE, 3106
_642:
; rs232cmd.c 3107							level = -15;
	SYMB	LINE, 3107
	MOV.W	[R7],#0FFF1H
; rs232cmd.c 3108							break;
	SYMB	LINE, 3108
	BR	_682
; rs232cmd.c 3109	
; rs232cmd.c 3110					 	case M18dBm:
	SYMB	LINE, 3110
_643:
; rs232cmd.c 3111							level = -18;
	SYMB	LINE, 3111
	MOV.W	[R7],#0FFEEH
; rs232cmd.c 3112							break;
	SYMB	LINE, 3112
	BR	_682
; rs232cmd.c 3113	
; rs232cmd.c 3114						case M21dBm:
	SYMB	LINE, 3114
_644:
; rs232cmd.c 3115							level = -21;
	SYMB	LINE, 3115
	MOV.W	[R7],#0FFEBH
; rs232cmd.c 3116							break;
	SYMB	LINE, 3116
	BR	_682
; rs232cmd.c 3117	
; rs232cmd.c 3118					 	case M24dBm:
	SYMB	LINE, 3118
_645:
; rs232cmd.c 3119							level = -24;
	SYMB	LINE, 3119
	MOV.W	[R7],#0FFE8H
; rs232cmd.c 3120							break;
	SYMB	LINE, 3120
	BR	_682
; rs232cmd.c 3121	
; rs232cmd.c 3122					 	case M27dBm:
	SYMB	LINE, 3122
_646:
; rs232cmd.c 3123							level = -27;
	SYMB	LINE, 3123
	MOV.W	[R7],#0FFE5H
; rs232cmd.c 3124							break;
	SYMB	LINE, 3124
	BR	_682
; rs232cmd.c 3125	
; rs232cmd.c 3126					 	case M30dBm:
	SYMB	LINE, 3126
_647:
; rs232cmd.c 3127							level = -30;
	SYMB	LINE, 3127
	MOV.W	[R7],#0FFE2H
; rs232cmd.c 3128							break;
	SYMB	LINE, 3128
	BR	_682
; rs232cmd.c 3129	
; rs232cmd.c 3130					 	case M33dBm:
	SYMB	LINE, 3130
_648:
; rs232cmd.c 3131							level = -33;
	SYMB	LINE, 3131
	MOV.W	[R7],#0FFDFH
; rs232cmd.c 3132							break;
	SYMB	LINE, 3132
	BR	_682
; rs232cmd.c 3133	
; rs232cmd.c 3134						case M36dBm:
	SYMB	LINE, 3134
_649:
; rs232cmd.c 3135							level = -36;
	SYMB	LINE, 3135
	MOV.W	[R7],#0FFDCH
; rs232cmd.c 3136							break;
	SYMB	LINE, 3136
	BR	_682
; rs232cmd.c 3137	
; rs232cmd.c 3138						default:
	SYMB	LINE, 3138
_650:
; rs232cmd.c 3139							str = SILENCEParTxt;
	SYMB	LINE, 3139
	MOV.W	R5,#SEG( _SILENCEParTxt )
	MOV.W	R4,#SOF( _SILENCEParTxt )
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3140	
; rs232cmd.c 3141							while ( *str)
	SYMB	LINE, 3141
	MOV.B	CS,#SEG( _SILENCEParTxt )
	MOV.W	R0,#SOF( _SILENCEParTxt )
	MOVC.B	R1L,[R0+]
	BEQ	_652
_651:
; rs232cmd.c 3142								rs232putchar( *str++);
	SYMB	LINE, 3142
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3141
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_651
	SYMB	LINE, 3142
_652:
; rs232cmd.c 3143	
; rs232cmd.c 3144							rs232putchar('\n');
	SYMB	LINE, 3144
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3145							return;
	SYMB	LINE, 3145
	BR	_757
	SYMB	LINE, 3018
_653:
	SYMB	LINE, 3019
	MOV.W	[R7],#0AH
; rs232cmd.c 3146						}
	SYMB	LINE, 3146
_682:
; rs232cmd.c 3147	
; rs232cmd.c 3148					rs232printf( 6, "%d\n", level);
	SYMB	LINE, 3148
	MOV.W	R0,#06H
	MOV.W	R1,[R7]
	PUSH.W	R1
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	RSEG	RS232CMD_IR
	ALIGN	1
__swtable763:
	DW	SOF _716,SEG _716
	DW	SOF _717,SEG _717
	DW	SOF _717,SEG _717
	DW	SOF _715,SEG _715
	DW	SOF _717,SEG _717
	DW	SOF _717,SEG _717
	DW	SOF _714,SEG _714
	DW	SOF _717,SEG _717
	DW	SOF _717,SEG _717
	DW	SOF _713,SEG _713
	DW	SOF _717,SEG _717
	DW	SOF _717,SEG _717
	DW	SOF _712,SEG _712
	DW	SOF _717,SEG _717
	DW	SOF _717,SEG _717
	DW	SOF _711,SEG _711
	DW	SOF _717,SEG _717
	DW	SOF _717,SEG _717
	DW	SOF _710,SEG _710
	DW	SOF _717,SEG _717
	DW	SOF _717,SEG _717
	DW	SOF _709,SEG _709
	DW	SOF _717,SEG _717
	DW	SOF _717,SEG _717
	DW	SOF _708,SEG _708
	DW	SOF _707,SEG _707
	DW	SOF _706,SEG _706
	DW	SOF _705,SEG _705
	DW	SOF _704,SEG _704
	DW	SOF _703,SEG _703
	DW	SOF _702,SEG _702
	DW	SOF _701,SEG _701
	DW	SOF _700,SEG _700
	DW	SOF _699,SEG _699
	DW	SOF _698,SEG _698
	DW	SOF _697,SEG _697
	DW	SOF _696,SEG _696
	DW	SOF _695,SEG _695
	DW	SOF _694,SEG _694
	DW	SOF _693,SEG _693
	DW	SOF _692,SEG _692
	DW	SOF _691,SEG _691
	DW	SOF _690,SEG _690
	DW	SOF _689,SEG _689
	DW	SOF _688,SEG _688
	DW	SOF _717,SEG _717
	DW	SOF _718,SEG _718
	RSEG	RS232CMD_PR
	SYMB	SOFF, 6
; rs232cmd.c 3149				}
; rs232cmd.c 3150			}
	SYMB	LINE, 3150
	BR	_757
_683:
; rs232cmd.c 3151			else
; rs232cmd.c 3152			{
; rs232cmd.c 3153				if ( ParCnt != 1)
	SYMB	LINE, 3153
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_684
; rs232cmd.c 3154					SCPIError = SyntaxErr;
	SYMB	LINE, 3154
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_757
_684:
; rs232cmd.c 3155				else
; rs232cmd.c 3156				{
; rs232cmd.c 3157					level = FindParameter( Cmd, AnalogLevelPar);
	SYMB	LINE, 3157
	MOV.W	R3,#SEG( _AnalogLevelPar )
	MOV.W	R2,#SOF( _AnalogLevelPar )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_FindParameter
	MOV.W	[R7],R0
; rs232cmd.c 3158		
; rs232cmd.c 3159					if ( level > -1)
	SYMB	LINE, 3159
	CMP.W	[R7],#0FFFFH
	BLE	_685
; rs232cmd.c 3160						level = AnalogSilence;
	SYMB	LINE, 3160
	MOV.W	[R7],#01FH
	BR	_749
_685:
; rs232cmd.c 3161					else
; rs232cmd.c 3162					{
; rs232cmd.c 3163						if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &level) != 1))
	SYMB	LINE, 3163
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_686
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	MOV.W	R0,R7
	PUSH.W	R0, R1
	SYMB	SOFF, 10
	MOV.W	R1,#SEG( _10 )
	MOV.W	R0,#SOF( _10 )
	PUSH.W	R0, R1
	SYMB	SOFF, 14
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 6
	CMP.W	R0,#01H
	BEQ	_687
_686:
; rs232cmd.c 3164							SCPIError = SyntaxErr;
	SYMB	LINE, 3164
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_749
_687:
; rs232cmd.c 3165						else
; rs232cmd.c 3166						{
; rs232cmd.c 3167							switch ( level)
	SYMB	LINE, 3167
	MOV.W	R1,[R7]
	ADD.W	R1,#024H
	CMP.W	R1,#02EH
	BG	_717
	ASL.W	R1,#02H
	MOV.B	CS,#SEG( __swtable763 )
	ADD.W	R1,#SOF( __swtable763 )
	MOVC.W	R0,[R1+]
	PUSH.W	R0
	MOVC.W	R0,[R1+]
	PUSH.W	R0
	RET
; rs232cmd.c 3168							{
; rs232cmd.c 3169							 	case 10:
; rs232cmd.c 3170									level = P10dBm;
; rs232cmd.c 3171									break;
; rs232cmd.c 3172	
; rs232cmd.c 3173							 	case 8:
	SYMB	LINE, 3173
_688:
; rs232cmd.c 3174									level = P8dBm;
	SYMB	LINE, 3174
	MOV.W	[R7],#02H
; rs232cmd.c 3175									break;
	SYMB	LINE, 3175
	BR	_749
; rs232cmd.c 3176	
; rs232cmd.c 3177							 	case 7:
	SYMB	LINE, 3177
_689:
; rs232cmd.c 3178									level = P7dBm;
	SYMB	LINE, 3178
	MOV.W	[R7],#03H
; rs232cmd.c 3179									break;
	SYMB	LINE, 3179
	BR	_749
; rs232cmd.c 3180	
; rs232cmd.c 3181							 	case 6:
	SYMB	LINE, 3181
_690:
; rs232cmd.c 3182									level = P6dBm;
	SYMB	LINE, 3182
	MOV.W	[R7],#04H
; rs232cmd.c 3183									break;
	SYMB	LINE, 3183
	BR	_749
; rs232cmd.c 3184	
; rs232cmd.c 3185							 	case 5:
	SYMB	LINE, 3185
_691:
; rs232cmd.c 3186									level = P5dBm;
	SYMB	LINE, 3186
	MOV.W	[R7],#05H
; rs232cmd.c 3187									break;
	SYMB	LINE, 3187
	BR	_749
; rs232cmd.c 3188	
; rs232cmd.c 3189							 	case 4:
	SYMB	LINE, 3189
_692:
; rs232cmd.c 3190									level = P4dBm;
	SYMB	LINE, 3190
	MOV.W	[R7],#06H
; rs232cmd.c 3191									break;
	SYMB	LINE, 3191
	BR	_749
; rs232cmd.c 3192	
; rs232cmd.c 3193							 	case 3:
	SYMB	LINE, 3193
_693:
; rs232cmd.c 3194									level = P3dBm;
	SYMB	LINE, 3194
	MOV.W	[R7],#07H
; rs232cmd.c 3195									break;
	SYMB	LINE, 3195
	BR	_749
; rs232cmd.c 3196	
; rs232cmd.c 3197							 	case 2:
	SYMB	LINE, 3197
_694:
; rs232cmd.c 3198									level = P2dBm;
	SYMB	LINE, 3198
	MOV.W	[R7],#08H
; rs232cmd.c 3199									break;
	SYMB	LINE, 3199
	BR	_749
; rs232cmd.c 3200	
; rs232cmd.c 3201							 	case 1:
	SYMB	LINE, 3201
_695:
; rs232cmd.c 3202									level = P1dBm;
	SYMB	LINE, 3202
	MOV.W	[R7],#09H
; rs232cmd.c 3203									break;
	SYMB	LINE, 3203
	BR	_749
; rs232cmd.c 3204	
; rs232cmd.c 3205							 	case 0:
	SYMB	LINE, 3205
_696:
; rs232cmd.c 3206									level = M0dBm;
	SYMB	LINE, 3206
	MOV.W	[R7],#0AH
; rs232cmd.c 3207									break;
	SYMB	LINE, 3207
	BR	_749
; rs232cmd.c 3208	
; rs232cmd.c 3209							 	case -1:
	SYMB	LINE, 3209
_697:
; rs232cmd.c 3210									level = M1dBm;
	SYMB	LINE, 3210
	MOV.W	[R7],#0BH
; rs232cmd.c 3211									break;
	SYMB	LINE, 3211
	BR	_749
; rs232cmd.c 3212	
; rs232cmd.c 3213							 	case -2:
	SYMB	LINE, 3213
_698:
; rs232cmd.c 3214									level = M2dBm;
	SYMB	LINE, 3214
	MOV.W	[R7],#0CH
; rs232cmd.c 3215									break;
	SYMB	LINE, 3215
	BR	_749
; rs232cmd.c 3216	
; rs232cmd.c 3217							 	case -3:
	SYMB	LINE, 3217
_699:
; rs232cmd.c 3218									level = M3dBm;
	SYMB	LINE, 3218
	MOV.W	[R7],#0DH
; rs232cmd.c 3219									break;
	SYMB	LINE, 3219
	BR	_749
; rs232cmd.c 3220	
; rs232cmd.c 3221							 	case -4:
	SYMB	LINE, 3221
_700:
; rs232cmd.c 3222									level = M4dBm;
	SYMB	LINE, 3222
	MOV.W	[R7],#0EH
; rs232cmd.c 3223									break;
	SYMB	LINE, 3223
	BR	_749
; rs232cmd.c 3224	
; rs232cmd.c 3225							 	case -5:
	SYMB	LINE, 3225
_701:
; rs232cmd.c 3226									level = M5dBm;
	SYMB	LINE, 3226
	MOV.W	[R7],#0FH
; rs232cmd.c 3227									break;
	SYMB	LINE, 3227
	BR	_749
; rs232cmd.c 3228	
; rs232cmd.c 3229							 	case -6:
	SYMB	LINE, 3229
_702:
; rs232cmd.c 3230									level = M6dBm;
	SYMB	LINE, 3230
	MOV.W	[R7],#010H
; rs232cmd.c 3231									break;
	SYMB	LINE, 3231
	BR	_749
; rs232cmd.c 3232	
; rs232cmd.c 3233							 	case -7:
	SYMB	LINE, 3233
_703:
; rs232cmd.c 3234									level = M7dBm;
	SYMB	LINE, 3234
	MOV.W	[R7],#011H
; rs232cmd.c 3235									break;
	SYMB	LINE, 3235
	BR	_749
; rs232cmd.c 3236	
; rs232cmd.c 3237							 	case -8:
	SYMB	LINE, 3237
_704:
; rs232cmd.c 3238									level = M8dBm;
	SYMB	LINE, 3238
	MOV.W	[R7],#012H
; rs232cmd.c 3239									break;
	SYMB	LINE, 3239
	BR	_749
; rs232cmd.c 3240	
; rs232cmd.c 3241							 	case -9:
	SYMB	LINE, 3241
_705:
; rs232cmd.c 3242									level = M9dBm;
	SYMB	LINE, 3242
	MOV.W	[R7],#013H
; rs232cmd.c 3243									break;
	SYMB	LINE, 3243
	BR	_749
; rs232cmd.c 3244	
; rs232cmd.c 3245							 	case -10:
	SYMB	LINE, 3245
_706:
; rs232cmd.c 3246									level = M10dBm;
	SYMB	LINE, 3246
	MOV.W	[R7],#014H
; rs232cmd.c 3247									break;
	SYMB	LINE, 3247
	BR	_749
; rs232cmd.c 3248	
; rs232cmd.c 3249							 	case -11:
	SYMB	LINE, 3249
_707:
; rs232cmd.c 3250									level = M11dBm;
	SYMB	LINE, 3250
	MOV.W	[R7],#015H
; rs232cmd.c 3251									break;
	SYMB	LINE, 3251
	BR	_749
; rs232cmd.c 3252	
; rs232cmd.c 3253							 	case -12:
	SYMB	LINE, 3253
_708:
; rs232cmd.c 3254									level = M12dBm;
	SYMB	LINE, 3254
	MOV.W	[R7],#016H
; rs232cmd.c 3255									break;
	SYMB	LINE, 3255
	BR	_749
; rs232cmd.c 3256	
; rs232cmd.c 3257							 	case -15:
	SYMB	LINE, 3257
_709:
; rs232cmd.c 3258									level = M15dBm;
	SYMB	LINE, 3258
	MOV.W	[R7],#017H
; rs232cmd.c 3259									break;
	SYMB	LINE, 3259
	BR	_749
; rs232cmd.c 3260	
; rs232cmd.c 3261							 	case -18:
	SYMB	LINE, 3261
_710:
; rs232cmd.c 3262									level = M18dBm;
	SYMB	LINE, 3262
	MOV.W	[R7],#018H
; rs232cmd.c 3263									break;
	SYMB	LINE, 3263
	BR	_749
; rs232cmd.c 3264	
; rs232cmd.c 3265								case -21:
	SYMB	LINE, 3265
_711:
; rs232cmd.c 3266									level = M21dBm;
	SYMB	LINE, 3266
	MOV.W	[R7],#019H
; rs232cmd.c 3267									break;
	SYMB	LINE, 3267
	BR	_749
; rs232cmd.c 3268	
; rs232cmd.c 3269							 	case -24:
	SYMB	LINE, 3269
_712:
; rs232cmd.c 3270									level = M24dBm;
	SYMB	LINE, 3270
	MOV.W	[R7],#01AH
; rs232cmd.c 3271									break;
	SYMB	LINE, 3271
	BR	_749
; rs232cmd.c 3272	
; rs232cmd.c 3273							 	case -27:
	SYMB	LINE, 3273
_713:
; rs232cmd.c 3274									level = M27dBm;
	SYMB	LINE, 3274
	MOV.W	[R7],#01BH
; rs232cmd.c 3275									break;
	SYMB	LINE, 3275
	BR	_749
; rs232cmd.c 3276	
; rs232cmd.c 3277							 	case -30:
	SYMB	LINE, 3277
_714:
; rs232cmd.c 3278									level = M30dBm;
	SYMB	LINE, 3278
	MOV.W	[R7],#01CH
; rs232cmd.c 3279									break;
	SYMB	LINE, 3279
	BR	_749
; rs232cmd.c 3280	
; rs232cmd.c 3281							 	case -33:
	SYMB	LINE, 3281
_715:
; rs232cmd.c 3282									level = M33dBm;
	SYMB	LINE, 3282
	MOV.W	[R7],#01DH
; rs232cmd.c 3283									break;
	SYMB	LINE, 3283
	BR	_749
; rs232cmd.c 3284	
; rs232cmd.c 3285								case -36:
	SYMB	LINE, 3285
_716:
; rs232cmd.c 3286									level = M36dBm;
	SYMB	LINE, 3286
	MOV.W	[R7],#01EH
; rs232cmd.c 3287									break;
	SYMB	LINE, 3287
	BR	_749
; rs232cmd.c 3288	
; rs232cmd.c 3289								default:
	SYMB	LINE, 3289
_717:
; rs232cmd.c 3290									SCPIError = DataOutOfRange;
	SYMB	LINE, 3290
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3291									return;
	SYMB	LINE, 3291
	BR	_757
	SYMB	LINE, 3169
_718:
	SYMB	LINE, 3170
	MOV.W	[R7],#01H
; rs232cmd.c 3292							}
; rs232cmd.c 3293						}
; rs232cmd.c 3294					}
	SYMB	LINE, 3294
_749:
; rs232cmd.c 3295	
; rs232cmd.c 3296					if ( SetAudioLevel( AnalogAudio, level) == FAIL)
	SYMB	LINE, 3296
	MOV.W	R0,#00H
	MOV.W	R1,[R7]
	CALL	_SetAudioLevel
	OR.W	R0,R0
	BNE	_757
; rs232cmd.c 3297						SCPIError = ExecErr;
	SYMB	LINE, 3297
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3298				}
; rs232cmd.c 3299			}
; rs232cmd.c 3300		}
; rs232cmd.c 3301	}
	SYMB	LINE, 3301
_757:
	ADDS.W	R7,#02H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3302	
; rs232cmd.c 3303	/**************************************************************************/
; rs232cmd.c 3304	/* AudioGenAnalogClick 																	 	     RS232CMD.C	*/
; rs232cmd.c 3305	/*																																				*/
; rs232cmd.c 3306	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3307	/* Revised:		000603				     																					*/
; rs232cmd.c 3308	/*																																				*/
; rs232cmd.c 3309	/* Function:	--																													*/
; rs232cmd.c 3310	/* Remarks:		--																													*/
; rs232cmd.c 3311	/* Returns:		--																													*/
; rs232cmd.c 3312	/* Updates:		--																													*/
; rs232cmd.c 3313	/**************************************************************************/
; rs232cmd.c 3314	void AudioGenAnalogClick( void)
; rs232cmd.c 3315	{
	ALIGN	1
	SYMB	LINE, 3315
	PUBLIC	_AudioGenAnalogClick
_AudioGenAnalogClick:
	SYMB	TYPE, 595, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAnalogClick", _AudioGenAnalogClick, #595, 0, 0, 0
	SYMB	ALAB, _AudioGenAnalogClick, #595
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "click", -2, #16, 130, 5
; rs232cmd.c 3316		int click;
; rs232cmd.c 3317	
; rs232cmd.c 3318		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3318
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_776
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_776
; rs232cmd.c 3319		{
; rs232cmd.c 3320			if ( CmdRequest)
	SYMB	LINE, 3320
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_765
; rs232cmd.c 3321			{
; rs232cmd.c 3322				if ( ParCnt)
	SYMB	LINE, 3322
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_764
; rs232cmd.c 3323					SCPIError = ParNotAllowed;
	SYMB	LINE, 3323
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_776
_764:
; rs232cmd.c 3324				else
; rs232cmd.c 3325					rs232printf( 6, "%d\n", AudioSetup[AnalogAudio].Click);
	SYMB	LINE, 3325
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _AudioSetup+12 )
	MOV.W	R1,#SOF( _AudioSetup+12 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 3326			}
	SYMB	LINE, 3326
	BR	_776
_765:
; rs232cmd.c 3327			else
; rs232cmd.c 3328			{
; rs232cmd.c 3329				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &click) != 1))
	SYMB	LINE, 3329
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_766
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_767
_766:
; rs232cmd.c 3330					SCPIError = SyntaxErr;
	SYMB	LINE, 3330
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_776
_767:
; rs232cmd.c 3331				else {
; rs232cmd.c 3332					if (( click != click1s) && ( click != click3s))
	SYMB	LINE, 3332
	CMP.W	[R7],#01H
	BEQ	_769
	CMP.W	[R7],#03H
	BEQ	_769
; rs232cmd.c 3333						SCPIError = DataOutOfRange;
	SYMB	LINE, 3333
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_776
_769:
; rs232cmd.c 3334					else
; rs232cmd.c 3335					{
; rs232cmd.c 3336						if ( SetAudioClick( AnalogAudio, click) == FAIL)
	SYMB	LINE, 3336
	MOV.W	R0,#00H
	MOV.W	R1,[R7]
	CALL	_SetAudioClick
	OR.W	R0,R0
	BNE	_776
; rs232cmd.c 3337							SCPIError = ExecErr;
	SYMB	LINE, 3337
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3338					}
; rs232cmd.c 3339				}
; rs232cmd.c 3340			}
; rs232cmd.c 3341		}
	SYMB	LINE, 3341
_776:
; rs232cmd.c 3342	}
	SYMB	LINE, 3342
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 3343	
; rs232cmd.c 3344	
; rs232cmd.c 3345	/**************************************************************************/
; rs232cmd.c 3346	/* AudioGenAESEBU																				 	     RS232CMD.C	*/
; rs232cmd.c 3347	/*																																				*/
; rs232cmd.c 3348	/* Author:		Kim Engedahl, DEV, 000526	    															*/
; rs232cmd.c 3349	/* Revised:		000617				     																					*/
; rs232cmd.c 3350	/*																																				*/
; rs232cmd.c 3351	/* Function:	--																													*/
; rs232cmd.c 3352	/* Remarks:		Request only.																								*/
; rs232cmd.c 3353	/* Returns:	  --																													*/
; rs232cmd.c 3354	/* Updates:		--																													*/
; rs232cmd.c 3355	/**************************************************************************/
; rs232cmd.c 3356	void AudioGenAESEBU( void)
; rs232cmd.c 3357	{
	ALIGN	1
	SYMB	LINE, 3357
	PUBLIC	_AudioGenAESEBU
_AudioGenAESEBU:
	SYMB	TYPE, 596, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBU", _AudioGenAESEBU, #596, 0, 0, 112
	SYMB	ALAB, _AudioGenAESEBU, #596
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "level", -1, #16, 130, 5
	SYMB	LTIM, "level", -1, 0, 69
; rs232cmd.c 3358		char code *str;
; rs232cmd.c 3359		int level;
; rs232cmd.c 3360	
; rs232cmd.c 3361		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3361
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_811
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_811
; rs232cmd.c 3362		{
; rs232cmd.c 3363			if ( !CmdRequest)
	SYMB	LINE, 3363
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BNE	_782
; rs232cmd.c 3364					SCPIError = SyntaxErr;
	SYMB	LINE, 3364
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_811
_782:
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3365			else
; rs232cmd.c 3366			{
; rs232cmd.c 3367				if ( ParCnt)
	SYMB	LINE, 3367
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_783
; rs232cmd.c 3368					SCPIError = ParNotAllowed;
	SYMB	LINE, 3368
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_811
_783:
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3369				else
; rs232cmd.c 3370				{
; rs232cmd.c 3371					str = AESEBUSystemPar[AudioSetup[AESEBUAudio].System].LongName;
	SYMB	LINE, 3371
	MOV.B	ES,#SEG( _AudioSetup+14 )
	MOV.W	R0,#SOF( _AudioSetup+14 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AESEBUSystemPar )
	MOV.W	R0,#SOF( _AESEBUSystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_812
	ADDS.B	CS,#01H
_812:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3372	
; rs232cmd.c 3373					while ( *str)
	SYMB	LINE, 3373
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_785
_784:
; rs232cmd.c 3374						rs232putchar( *str++);
	SYMB	LINE, 3374
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3373
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_784
	SYMB	LINE, 3374
_785:
; rs232cmd.c 3375	
; rs232cmd.c 3376					rs232putchar( ',');
	SYMB	LINE, 3376
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 3377	
; rs232cmd.c 3378					str = AudioSignalPar[AudioSetup[AESEBUAudio].Signal].LongName;
	SYMB	LINE, 3378
	MOV.B	ES,#SEG( _AudioSetup+16 )
	MOV.W	R0,#SOF( _AudioSetup+16 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOVS.W	R1,#00H
	MOV.W	R5,#SEG( _AudioSignalPar )
	MOV.W	R4,#SOF( _AudioSignalPar )
	SYMB	LTIM, "str", 19, 0, 77
	ADD.W	R4,R0
	ADDC.W	R5,R1
	MOV.B	CS,R5L
	MOVC.W	R0,[R4+]
	CMP.W	R4,#00H
	BNE	_813
	ADDS.B	CS,#01H
_813:
	MOVC.W	R1,[R4+]
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3379	
; rs232cmd.c 3380					while ( *str)
	SYMB	LINE, 3380
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_787
_786:
; rs232cmd.c 3381						rs232putchar( *str++);
	SYMB	LINE, 3381
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3380
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_786
	SYMB	LINE, 3381
_787:
	MOV.B	R0L,#02CH
; rs232cmd.c 3382	
; rs232cmd.c 3383					rs232putchar( ',');
	SYMB	LINE, 3383
	CALL	_rs232putchar
; rs232cmd.c 3384	
; rs232cmd.c 3385					str = NULL;
	SYMB	LINE, 3385
	MOV.W	R5,#00H
	MOV.W	R4,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3386	
; rs232cmd.c 3387					switch ( AudioSetup[AESEBUAudio].Level)
	SYMB	LINE, 3387
	MOV.B	ES,#SEG( _AudioSetup+18 )
	MOV.W	R0,#SOF( _AudioSetup+18 )
	MOV.W	R0,[R0]
	CMP.W	R0,#00H
	BEQ	_788
	CMP.W	R0,#01H
	BEQ	_789
	CMP.W	R0,#02H
	BEQ	_790
	CMP.W	R0,#03H
	BEQ	_791
	CMP.W	R0,#04H
	BEQ	_792
	CMP.W	R0,#05H
	BEQ	_793
	CMP.W	R0,#06H
	BEQ	_794
	BR	_795
; rs232cmd.c 3388					{
; rs232cmd.c 3389						case M0dBFS:
	SYMB	LINE, 3389
_788:
; rs232cmd.c 3390							level = 0;
	SYMB	LINE, 3390
	MOV.W	R6,#00H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3391							break;
	SYMB	LINE, 3391
	BR	_804
; rs232cmd.c 3392	
; rs232cmd.c 3393						case M9dBFS:
	SYMB	LINE, 3393
_789:
; rs232cmd.c 3394							level = -9;
	SYMB	LINE, 3394
	MOV.W	R6,#0FFF7H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3395							break;
	SYMB	LINE, 3395
	BR	_804
; rs232cmd.c 3396	
; rs232cmd.c 3397						case M12dBFS:
	SYMB	LINE, 3397
_790:
; rs232cmd.c 3398							level = -12;
	SYMB	LINE, 3398
	MOV.W	R6,#0FFF4H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3399							break;
	SYMB	LINE, 3399
	BR	_804
; rs232cmd.c 3400	
; rs232cmd.c 3401						case M15dBFS:
	SYMB	LINE, 3401
_791:
; rs232cmd.c 3402							level = -15;
	SYMB	LINE, 3402
	MOV.W	R6,#0FFF1H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3403							break;
	SYMB	LINE, 3403
	BR	_804
; rs232cmd.c 3404	
; rs232cmd.c 3405						case M16dBFS:
	SYMB	LINE, 3405
_792:
; rs232cmd.c 3406							level = -16;
	SYMB	LINE, 3406
	MOV.W	R6,#0FFF0H
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3407							break;
	SYMB	LINE, 3407
	BR	_804
; rs232cmd.c 3408	
; rs232cmd.c 3409						case M18dBFS:
	SYMB	LINE, 3409
_793:
; rs232cmd.c 3410							level = -18;
	SYMB	LINE, 3410
	MOV.W	R6,#0FFEEH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3411							break;
	SYMB	LINE, 3411
	BR	_804
; rs232cmd.c 3412	
; rs232cmd.c 3413						case M21dBFS:
	SYMB	LINE, 3413
_794:
; rs232cmd.c 3414							level = -21;
	SYMB	LINE, 3414
	MOV.W	R6,#0FFEBH
	SYMB	LTIM, "level", 26, 0, 77
	SYMB	LTIM, "level", 26, 0, 205
; rs232cmd.c 3415							break;
	SYMB	LINE, 3415
	BR	_804
; rs232cmd.c 3416	
; rs232cmd.c 3417						default:
	SYMB	LINE, 3417
_795:
; rs232cmd.c 3418							str = SILENCEParTxt;
	SYMB	LINE, 3418
	MOV.W	R5,#SEG( _SILENCEParTxt )
	MOV.W	R4,#SOF( _SILENCEParTxt )
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3419	
; rs232cmd.c 3420							while ( *str)
	SYMB	LINE, 3420
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_797
_796:
; rs232cmd.c 3421								rs232putchar( *str++);
	SYMB	LINE, 3421
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3420
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_796
	SYMB	LINE, 3421
_797:
	MOV.B	R0L,#02CH
; rs232cmd.c 3422	
; rs232cmd.c 3423							rs232putchar( ',');
	SYMB	LINE, 3423
	CALL	_rs232putchar
; rs232cmd.c 3424							break;
; rs232cmd.c 3425						}
	SYMB	LINE, 3425
_804:
; rs232cmd.c 3426	
; rs232cmd.c 3427					if ( str == NULL)
	SYMB	LINE, 3427
	OR.W	R5,R4
	BNE	_805
; rs232cmd.c 3428						rs232printf( 6, "%d,", level);
	SYMB	LINE, 3428
	MOV.W	R0,#06H
	PUSH.W	R6
	SYMB	SOFF, 8
	SYMB	LTIM, "level", 26, 0, 77
	MOV.W	R3,#SEG( _529 )
	MOV.W	R2,#SOF( _529 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
_805:
; rs232cmd.c 3429	
; rs232cmd.c 3430					rs232printf( 6, "%.1f,", AudioSetup[AESEBUAudio].Timing);
	SYMB	LINE, 3430
	MOV.B	ES,#SEG( _AudioSetup+20 )
	MOV.W	R1,#SOF( _AudioSetup+20 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__SPF2DPF
	PUSH.W	R0, R1, R2, R3
	SYMB	SOFF, 14
	MOV.W	R1,#SEG( _781 )
	MOV.W	R0,#SOF( _781 )
	PUSH.W	R0, R1
	SYMB	SOFF, 18
	MOV.W	R0,#06H
	CALL	_rs232printf
	ADD.W	R7,#0CH
	SYMB	SOFF, 6
; rs232cmd.c 3431	
; rs232cmd.c 3432					str = AudioFrequencyPar[AudioSetup[AESEBUAudio].Frequency].LongName;
	SYMB	LINE, 3432
	MOV.B	ES,#SEG( _AudioSetup+24 )
	MOV.W	R0,#SOF( _AudioSetup+24 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioFrequencyPar )
	MOV.W	R0,#SOF( _AudioFrequencyPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R4,[R0+]
	CMP.W	R0,#00H
	BNE	_814
	ADDS.B	CS,#01H
_814:
	MOVC.W	R5,[R0+]
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3433	
; rs232cmd.c 3434					while ( *str)
	SYMB	LINE, 3434
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BEQ	_807
_806:
; rs232cmd.c 3435						rs232putchar( *str++);
	SYMB	LINE, 3435
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3434
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_806
	SYMB	LINE, 3435
_807:
; rs232cmd.c 3436	
; rs232cmd.c 3437					rs232putchar( ',');
	SYMB	LINE, 3437
	MOV.B	R0L,#02CH
	CALL	_rs232putchar
; rs232cmd.c 3438	
; rs232cmd.c 3439					rs232printf( 6, "%d\n", AudioSetup[AESEBUAudio].Click);
	SYMB	LINE, 3439
	MOV.B	ES,#SEG( _AudioSetup+26 )
	MOV.W	R0,#SOF( _AudioSetup+26 )
	MOV.W	R0,[R0]
	PUSH.W	R0
	SYMB	SOFF, 8
	MOV.W	R1,#SEG( _9 )
	MOV.W	R0,#SOF( _9 )
	PUSH.W	R0, R1
	SYMB	SOFF, 12
	MOV.W	R0,#06H
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
; rs232cmd.c 3440				}
; rs232cmd.c 3441			}
; rs232cmd.c 3442		}
	SYMB	LINE, 3442
_811:
; rs232cmd.c 3443	}
	SYMB	LINE, 3443
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3444	
; rs232cmd.c 3445	/**************************************************************************/
; rs232cmd.c 3446	/* AudioGenAESEBUSystem																	 	     RS232CMD.C	*/
; rs232cmd.c 3447	/*																																				*/
; rs232cmd.c 3448	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3449	/* Revised:		000603				     																					*/
; rs232cmd.c 3450	/*																																				*/
; rs232cmd.c 3451	/* Function:	--																													*/
; rs232cmd.c 3452	/* Remarks:		--																													*/
; rs232cmd.c 3453	/* Returns:		--																													*/
; rs232cmd.c 3454	/* Updates:		--																													*/
; rs232cmd.c 3455	/**************************************************************************/
; rs232cmd.c 3456	void AudioGenAESEBUSystem( void)
; rs232cmd.c 3457	{
	ALIGN	1
	SYMB	LINE, 3457
	PUBLIC	_AudioGenAESEBUSystem
_AudioGenAESEBUSystem:
	SYMB	TYPE, 597, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUSystem", _AudioGenAESEBUSystem, #597, 0, 0, 48
	SYMB	ALAB, _AudioGenAESEBUSystem, #597
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 3458		int system;
; rs232cmd.c 3459		char code *str;
; rs232cmd.c 3460	
; rs232cmd.c 3461		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3461
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_827
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_827
; rs232cmd.c 3462		{
; rs232cmd.c 3463			if ( CmdRequest)
	SYMB	LINE, 3463
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_818
; rs232cmd.c 3464			{
; rs232cmd.c 3465				if ( ParCnt)
	SYMB	LINE, 3465
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_815
; rs232cmd.c 3466					SCPIError = ParNotAllowed;
	SYMB	LINE, 3466
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_827
_815:
; rs232cmd.c 3467				else
; rs232cmd.c 3468				{
; rs232cmd.c 3469					str = AESEBUSystemPar[AudioSetup[AESEBUAudio].System].LongName;
	SYMB	LINE, 3469
	MOV.B	ES,#SEG( _AudioSetup+14 )
	MOV.W	R0,#SOF( _AudioSetup+14 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AESEBUSystemPar )
	MOV.W	R0,#SOF( _AESEBUSystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_828
	ADDS.B	CS,#01H
_828:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3470	
; rs232cmd.c 3471					while ( *str)
	SYMB	LINE, 3471
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_817
_816:
; rs232cmd.c 3472						rs232putchar( *str++);
	SYMB	LINE, 3472
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3471
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_816
	SYMB	LINE, 3472
_817:
; rs232cmd.c 3473	
; rs232cmd.c 3474					rs232putchar('\n');
	SYMB	LINE, 3474
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3475				}
; rs232cmd.c 3476			}
	SYMB	LINE, 3476
	BR	_827
_818:
; rs232cmd.c 3477			else
; rs232cmd.c 3478			{
; rs232cmd.c 3479				if ( ParCnt != 1)
	SYMB	LINE, 3479
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_819
; rs232cmd.c 3480					SCPIError = SyntaxErr;
	SYMB	LINE, 3480
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_827
_819:
; rs232cmd.c 3481				else
; rs232cmd.c 3482				{
; rs232cmd.c 3483					system = FindParameter( Cmd, AESEBUSystemPar);
	SYMB	LINE, 3483
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AESEBUSystemPar )
	MOV.W	R2,#SOF( _AESEBUSystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 3484		
; rs232cmd.c 3485					if ( system > -1)
	SYMB	LINE, 3485
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "system", 2, 0, 77
	SYMB	LTIM, "system", 6, 0, 205
	BLE	_820
; rs232cmd.c 3486					{
; rs232cmd.c 3487						if ( SetAudioSystem( AESEBUAudio, system) == FAIL)
	SYMB	LINE, 3487
	MOV.W	R0,#01H
	CALL	_SetAudioSystem
	SYMB	LTIM, "system", 6, 0, 77
	OR.W	R0,R0
	BNE	_827
; rs232cmd.c 3488							SCPIError = ExecErr;
	SYMB	LINE, 3488
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3489					}
	SYMB	LINE, 3489
	BR	_827
_820:
; rs232cmd.c 3490					else
; rs232cmd.c 3491						SCPIError = DataOutOfRange;
	SYMB	LINE, 3491
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3492				}
; rs232cmd.c 3493			}
; rs232cmd.c 3494		}
	SYMB	LINE, 3494
_827:
; rs232cmd.c 3495	}
	SYMB	LINE, 3495
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3496	
; rs232cmd.c 3497	/**************************************************************************/
; rs232cmd.c 3498	/* AudioGenAESEBUSignal		 															 	     RS232CMD.C	*/
; rs232cmd.c 3499	/*																																				*/
; rs232cmd.c 3500	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3501	/* Revised:		000603				     																					*/
; rs232cmd.c 3502	/*																																				*/
; rs232cmd.c 3503	/* Function:	--																													*/
; rs232cmd.c 3504	/* Remarks:		--																													*/
; rs232cmd.c 3505	/* Returns:		--																													*/
; rs232cmd.c 3506	/* Updates:		--																													*/
; rs232cmd.c 3507	/**************************************************************************/
; rs232cmd.c 3508	void AudioGenAESEBUSignal( void)
; rs232cmd.c 3509	{
	ALIGN	1
	SYMB	LINE, 3509
	PUBLIC	_AudioGenAESEBUSignal
_AudioGenAESEBUSignal:
	SYMB	TYPE, 598, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUSignal", _AudioGenAESEBUSignal, #598, 0, 0, 48
	SYMB	ALAB, _AudioGenAESEBUSignal, #598
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "signal", -1, #16, 130, 5
	SYMB	LTIM, "signal", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 3510		int signal;
; rs232cmd.c 3511		char code *str;
; rs232cmd.c 3512	
; rs232cmd.c 3513		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3513
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_843
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_843
; rs232cmd.c 3514		{
; rs232cmd.c 3515			if ( CmdRequest)
	SYMB	LINE, 3515
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_834
; rs232cmd.c 3516			{
; rs232cmd.c 3517				if ( ParCnt)
	SYMB	LINE, 3517
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_831
; rs232cmd.c 3518					SCPIError = ParNotAllowed;
	SYMB	LINE, 3518
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_843
_831:
; rs232cmd.c 3519				else
; rs232cmd.c 3520				{
; rs232cmd.c 3521					str = AudioSignalPar[AudioSetup[AESEBUAudio].Signal].LongName;
	SYMB	LINE, 3521
	MOV.B	ES,#SEG( _AudioSetup+16 )
	MOV.W	R0,#SOF( _AudioSetup+16 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioSignalPar )
	MOV.W	R0,#SOF( _AudioSignalPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_844
	ADDS.B	CS,#01H
_844:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3522	
; rs232cmd.c 3523					while ( *str)
	SYMB	LINE, 3523
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_833
_832:
; rs232cmd.c 3524						rs232putchar( *str++);
	SYMB	LINE, 3524
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3523
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_832
	SYMB	LINE, 3524
_833:
; rs232cmd.c 3525	
; rs232cmd.c 3526					rs232putchar('\n');
	SYMB	LINE, 3526
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3527				}
; rs232cmd.c 3528			}
	SYMB	LINE, 3528
	BR	_843
_834:
; rs232cmd.c 3529			else
; rs232cmd.c 3530			{
; rs232cmd.c 3531				if ( ParCnt != 1)
	SYMB	LINE, 3531
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_835
; rs232cmd.c 3532					SCPIError = SyntaxErr;
	SYMB	LINE, 3532
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_843
_835:
; rs232cmd.c 3533				else
; rs232cmd.c 3534				{
; rs232cmd.c 3535					signal = FindParameter( Cmd, AudioSignalPar);
	SYMB	LINE, 3535
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AudioSignalPar )
	MOV.W	R2,#SOF( _AudioSignalPar )
	CALL	_FindParameter
	SYMB	LTIM, "signal", 2, 0, 205
; rs232cmd.c 3536		
; rs232cmd.c 3537					if ( signal > -1)
	SYMB	LINE, 3537
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "signal", 2, 0, 77
	SYMB	LTIM, "signal", 6, 0, 205
	BLE	_836
; rs232cmd.c 3538					{
; rs232cmd.c 3539						if ( SetAudioSignal( AESEBUAudio, signal) == FAIL)
	SYMB	LINE, 3539
	MOV.W	R0,#01H
	CALL	_SetAudioSignal
	SYMB	LTIM, "signal", 6, 0, 77
	OR.W	R0,R0
	BNE	_843
; rs232cmd.c 3540							SCPIError = ExecErr;
	SYMB	LINE, 3540
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3541					}
	SYMB	LINE, 3541
	BR	_843
_836:
; rs232cmd.c 3542					else
; rs232cmd.c 3543						SCPIError = DataOutOfRange;
	SYMB	LINE, 3543
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3544				}
; rs232cmd.c 3545			}
; rs232cmd.c 3546		}
	SYMB	LINE, 3546
_843:
; rs232cmd.c 3547	}
	SYMB	LINE, 3547
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3548	
; rs232cmd.c 3549	/**************************************************************************/
; rs232cmd.c 3550	/* AudioGenAESEBULevel 																	 	     RS232CMD.C	*/
; rs232cmd.c 3551	/*																																				*/
; rs232cmd.c 3552	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3553	/* Revised:		0000628				     																					*/
; rs232cmd.c 3554	/*																																				*/
; rs232cmd.c 3555	/* Function:	--																													*/
; rs232cmd.c 3556	/* Remarks:		--																													*/
; rs232cmd.c 3557	/* Returns:		--																													*/
; rs232cmd.c 3558	/* Updates:		--																													*/
; rs232cmd.c 3559	/**************************************************************************/
; rs232cmd.c 3560	void AudioGenAESEBULevel( void)
; rs232cmd.c 3561	{
	ALIGN	1
	SYMB	LINE, 3561
	PUBLIC	_AudioGenAESEBULevel
_AudioGenAESEBULevel:
	SYMB	TYPE, 599, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBULevel", _AudioGenAESEBULevel, #599, 0, 0, 48
	SYMB	ALAB, _AudioGenAESEBULevel, #599
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0EH
	SYMB	SOFF, 6
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
	SYMB	IDEN, "level", -6, #16, 130, 5
; rs232cmd.c 3562		code char *str;
; rs232cmd.c 3563		int level;
; rs232cmd.c 3564	
; rs232cmd.c 3565		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3565
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_892
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_892
; rs232cmd.c 3566		{
; rs232cmd.c 3567			if ( CmdRequest)
	SYMB	LINE, 3567
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_864
; rs232cmd.c 3568			{
; rs232cmd.c 3569				if ( ParCnt)
	SYMB	LINE, 3569
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_847
; rs232cmd.c 3570					SCPIError = ParNotAllowed;
	SYMB	LINE, 3570
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_892
_847:
; rs232cmd.c 3571				else
; rs232cmd.c 3572				{
; rs232cmd.c 3573					switch ( AudioSetup[AESEBUAudio].Level)
	SYMB	LINE, 3573
	MOV.B	ES,#SEG( _AudioSetup+18 )
	MOV.W	R0,#SOF( _AudioSetup+18 )
	MOV.W	R0,[R0]
	CMP.W	R0,#00H
	BEQ	_857
	CMP.W	R0,#01H
	BEQ	_848
	CMP.W	R0,#02H
	BEQ	_849
	CMP.W	R0,#03H
	BEQ	_850
	CMP.W	R0,#04H
	BEQ	_851
	CMP.W	R0,#05H
	BEQ	_852
	CMP.W	R0,#06H
	BEQ	_853
	BR	_854
; rs232cmd.c 3574					{
; rs232cmd.c 3575						case M0dBFS:
; rs232cmd.c 3576							level = 0;
; rs232cmd.c 3577							break;
; rs232cmd.c 3578	
; rs232cmd.c 3579						case M9dBFS:
	SYMB	LINE, 3579
_848:
; rs232cmd.c 3580							level = -9;
	SYMB	LINE, 3580
	MOV.W	[R7],#0FFF7H
; rs232cmd.c 3581							break;
	SYMB	LINE, 3581
	BR	_863
; rs232cmd.c 3582	
; rs232cmd.c 3583						case M12dBFS:
	SYMB	LINE, 3583
_849:
; rs232cmd.c 3584							level = -12;
	SYMB	LINE, 3584
	MOV.W	[R7],#0FFF4H
; rs232cmd.c 3585							break;
	SYMB	LINE, 3585
	BR	_863
; rs232cmd.c 3586	
; rs232cmd.c 3587						case M15dBFS:
	SYMB	LINE, 3587
_850:
; rs232cmd.c 3588							level = -15;
	SYMB	LINE, 3588
	MOV.W	[R7],#0FFF1H
; rs232cmd.c 3589							break;
	SYMB	LINE, 3589
	BR	_863
; rs232cmd.c 3590	
; rs232cmd.c 3591						case M16dBFS:
	SYMB	LINE, 3591
_851:
; rs232cmd.c 3592							level = -16;
	SYMB	LINE, 3592
	MOV.W	[R7],#0FFF0H
; rs232cmd.c 3593							break;
	SYMB	LINE, 3593
	BR	_863
; rs232cmd.c 3594	
; rs232cmd.c 3595						case M18dBFS:
	SYMB	LINE, 3595
_852:
; rs232cmd.c 3596							level = -18;
	SYMB	LINE, 3596
	MOV.W	[R7],#0FFEEH
; rs232cmd.c 3597							break;
	SYMB	LINE, 3597
	BR	_863
; rs232cmd.c 3598	
; rs232cmd.c 3599						case M21dBFS:
	SYMB	LINE, 3599
_853:
; rs232cmd.c 3600							level = -21;
	SYMB	LINE, 3600
	MOV.W	[R7],#0FFEBH
; rs232cmd.c 3601							break;
	SYMB	LINE, 3601
	BR	_863
; rs232cmd.c 3602	
; rs232cmd.c 3603						default:
	SYMB	LINE, 3603
_854:
; rs232cmd.c 3604							str = SILENCEParTxt;
	SYMB	LINE, 3604
	MOV.W	R5,#SEG( _SILENCEParTxt )
	MOV.W	R4,#SOF( _SILENCEParTxt )
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3605	
; rs232cmd.c 3606							while ( *str)
	SYMB	LINE, 3606
	MOV.B	CS,#SEG( _SILENCEParTxt )
	MOV.W	R0,#SOF( _SILENCEParTxt )
	MOVC.B	R1L,[R0+]
	BEQ	_856
_855:
; rs232cmd.c 3607								rs232putchar( *str++);
	SYMB	LINE, 3607
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3606
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_855
	SYMB	LINE, 3607
_856:
; rs232cmd.c 3608	
; rs232cmd.c 3609							rs232putchar('\n');
	SYMB	LINE, 3609
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3610							return;
	SYMB	LINE, 3610
	BR	_892
	SYMB	LINE, 3575
_857:
	SYMB	LINE, 3576
	MOV.W	[R7],#00H
; rs232cmd.c 3611						}
	SYMB	LINE, 3611
_863:
; rs232cmd.c 3612	
; rs232cmd.c 3613					rs232printf( 6, "%d\n", level);
	SYMB	LINE, 3613
	MOV.W	R0,#06H
	MOV.W	R1,[R7]
	PUSH.W	R1
	SYMB	SOFF, 8
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 12
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
; rs232cmd.c 3614				}
; rs232cmd.c 3615			}
	SYMB	LINE, 3615
	BR	_892
_864:
; rs232cmd.c 3616			else
; rs232cmd.c 3617			{
; rs232cmd.c 3618				if ( ParCnt != 1)
	SYMB	LINE, 3618
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_865
; rs232cmd.c 3619					SCPIError = SyntaxErr;
	SYMB	LINE, 3619
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_892
_865:
; rs232cmd.c 3620				else
; rs232cmd.c 3621				{
; rs232cmd.c 3622					level = FindParameter( Cmd, AESEBULevelPar);
	SYMB	LINE, 3622
	MOV.W	R3,#SEG( _AESEBULevelPar )
	MOV.W	R2,#SOF( _AESEBULevelPar )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_FindParameter
	MOV.W	[R7],R0
; rs232cmd.c 3623		
; rs232cmd.c 3624					if ( level > -1)
	SYMB	LINE, 3624
	CMP.W	[R7],#0FFFFH
	BLE	_866
; rs232cmd.c 3625						level = AESEBUSilence;
	SYMB	LINE, 3625
	MOV.W	[R7],#07H
	BR	_884
_866:
; rs232cmd.c 3626					else
; rs232cmd.c 3627					{
; rs232cmd.c 3628						if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &level) != 1))
	SYMB	LINE, 3628
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_867
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	MOV.W	R0,R7
	PUSH.W	R0, R1
	SYMB	SOFF, 10
	MOV.W	R1,#SEG( _10 )
	MOV.W	R0,#SOF( _10 )
	PUSH.W	R0, R1
	SYMB	SOFF, 14
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 6
	CMP.W	R0,#01H
	BEQ	_868
_867:
; rs232cmd.c 3629							SCPIError = SyntaxErr;
	SYMB	LINE, 3629
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_884
_868:
; rs232cmd.c 3630						else {
; rs232cmd.c 3631							switch ( level)
	SYMB	LINE, 3631
	CMP.W	[R7],#00H
	BEQ	_876
	CMP.W	[R7],#0FFF7H
	BEQ	_869
	CMP.W	[R7],#0FFF4H
	BEQ	_870
	CMP.W	[R7],#0FFF1H
	BEQ	_871
	CMP.W	[R7],#0FFF0H
	BEQ	_872
	CMP.W	[R7],#0FFEEH
	BEQ	_873
	CMP.W	[R7],#0FFEBH
	BEQ	_874
	BR	_875
; rs232cmd.c 3632							{
; rs232cmd.c 3633								case 0:
; rs232cmd.c 3634									level = M0dBFS;
; rs232cmd.c 3635									break;
; rs232cmd.c 3636	
; rs232cmd.c 3637							 	case -9:
	SYMB	LINE, 3637
_869:
; rs232cmd.c 3638									level = M9dBFS;
	SYMB	LINE, 3638
	MOV.W	[R7],#01H
; rs232cmd.c 3639									break;
	SYMB	LINE, 3639
	BR	_884
; rs232cmd.c 3640	
; rs232cmd.c 3641							 	case -12:
	SYMB	LINE, 3641
_870:
; rs232cmd.c 3642									level = M12dBFS;
	SYMB	LINE, 3642
	MOV.W	[R7],#02H
; rs232cmd.c 3643									break;
	SYMB	LINE, 3643
	BR	_884
; rs232cmd.c 3644	
; rs232cmd.c 3645							 	case -15:
	SYMB	LINE, 3645
_871:
; rs232cmd.c 3646									level = M15dBFS;
	SYMB	LINE, 3646
	MOV.W	[R7],#03H
; rs232cmd.c 3647									break;
	SYMB	LINE, 3647
	BR	_884
; rs232cmd.c 3648	
; rs232cmd.c 3649							 	case -16:
	SYMB	LINE, 3649
_872:
; rs232cmd.c 3650									level = M16dBFS;
	SYMB	LINE, 3650
	MOV.W	[R7],#04H
; rs232cmd.c 3651									break;
	SYMB	LINE, 3651
	BR	_884
; rs232cmd.c 3652	
; rs232cmd.c 3653							 	case -18:
	SYMB	LINE, 3653
_873:
; rs232cmd.c 3654									level = M18dBFS;
	SYMB	LINE, 3654
	MOV.W	[R7],#05H
; rs232cmd.c 3655									break;
	SYMB	LINE, 3655
	BR	_884
; rs232cmd.c 3656	
; rs232cmd.c 3657							 	case -21:
	SYMB	LINE, 3657
_874:
; rs232cmd.c 3658									level = M21dBFS;
	SYMB	LINE, 3658
	MOV.W	[R7],#06H
; rs232cmd.c 3659									break;
	SYMB	LINE, 3659
	BR	_884
; rs232cmd.c 3660	
; rs232cmd.c 3661								default:
	SYMB	LINE, 3661
_875:
; rs232cmd.c 3662									SCPIError = DataOutOfRange;
	SYMB	LINE, 3662
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3663									return;
	SYMB	LINE, 3663
	BR	_892
	SYMB	LINE, 3633
_876:
	SYMB	LINE, 3634
	MOV.W	[R7],#00H
; rs232cmd.c 3664							}
; rs232cmd.c 3665						}
; rs232cmd.c 3666					}
	SYMB	LINE, 3666
_884:
; rs232cmd.c 3667	
; rs232cmd.c 3668					if ( SetAudioLevel( AESEBUAudio, level) == FAIL)
	SYMB	LINE, 3668
	MOV.W	R0,#01H
	MOV.W	R1,[R7]
	CALL	_SetAudioLevel
	OR.W	R0,R0
	BNE	_892
; rs232cmd.c 3669						SCPIError = ExecErr;
	SYMB	LINE, 3669
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3670				}
; rs232cmd.c 3671			}
; rs232cmd.c 3672		}
; rs232cmd.c 3673	}
	SYMB	LINE, 3673
_892:
	ADDS.W	R7,#02H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3674	
; rs232cmd.c 3675	/**************************************************************************/
; rs232cmd.c 3676	/* AudioGenAESEBUTiming	 																 	     RS232CMD.C	*/
; rs232cmd.c 3677	/*																																				*/
; rs232cmd.c 3678	/* Author:		Kim Engedahl, DEV, 000616	    															*/
; rs232cmd.c 3679	/* Revised:		000616				     																					*/
; rs232cmd.c 3680	/*																																				*/
; rs232cmd.c 3681	/* Function:	--																													*/
; rs232cmd.c 3682	/* Remarks:		--																													*/
; rs232cmd.c 3683	/* Returns:		--																													*/
; rs232cmd.c 3684	/* Updates:		--																													*/
; rs232cmd.c 3685	/**************************************************************************/
; rs232cmd.c 3686	void AudioGenAESEBUTiming( void)
; rs232cmd.c 3687	{
	ALIGN	1
	SYMB	LINE, 3687
	PUBLIC	_AudioGenAESEBUTiming
_AudioGenAESEBUTiming:
	SYMB	TYPE, 600, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUTiming", _AudioGenAESEBUTiming, #600, 0, 0, 112
	SYMB	ALAB, _AudioGenAESEBUTiming, #600
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#014H
	SYMB	SOFF, 26
	SYMB	IDEN, "timing", -10, #10, 130, 5
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; rs232cmd.c 3688		float timing;
; rs232cmd.c 3689		int tmp;
; rs232cmd.c 3690	
; rs232cmd.c 3691		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3691
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_914
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_914
; rs232cmd.c 3692		{
; rs232cmd.c 3693			if ( CmdRequest)
	SYMB	LINE, 3693
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_903
; rs232cmd.c 3694			{
; rs232cmd.c 3695				if ( ParCnt)
	SYMB	LINE, 3695
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_902
; rs232cmd.c 3696					SCPIError = ParNotAllowed;
	SYMB	LINE, 3696
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_914
_902:
; rs232cmd.c 3697				else
; rs232cmd.c 3698					rs232printf( 6, "%.1f\n", AudioSetup[AESEBUAudio].Timing);
	SYMB	LINE, 3698
	MOV.B	ES,#SEG( _AudioSetup+20 )
	MOV.W	R1,#SOF( _AudioSetup+20 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__SPF2DPF
	PUSH.W	R0, R1, R2, R3
	SYMB	SOFF, 34
	MOV.W	R1,#SEG( _897 )
	MOV.W	R0,#SOF( _897 )
	PUSH.W	R0, R1
	SYMB	SOFF, 38
	MOV.W	R0,#06H
	CALL	_rs232printf
	ADD.W	R7,#0CH
	SYMB	SOFF, 26
; rs232cmd.c 3699			}
	SYMB	LINE, 3699
	BR	_914
_903:
; rs232cmd.c 3700			else
; rs232cmd.c 3701			{
; rs232cmd.c 3702				if (( ParCnt != 1) || ( sscanf( Cmd, "%f", &timing) != 1))
	SYMB	LINE, 3702
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_904
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+16
	PUSH.W	R2, R3
	SYMB	SOFF, 30
	MOV.W	R3,#SEG( _898 )
	MOV.W	R2,#SOF( _898 )
	PUSH.W	R2, R3
	SYMB	SOFF, 34
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 26
	CMP.W	R0,#01H
	BEQ	_905
_904:
; rs232cmd.c 3703					SCPIError = SyntaxErr;
	SYMB	LINE, 3703
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_914
_905:
; rs232cmd.c 3704				else
; rs232cmd.c 3705				{
; rs232cmd.c 3706					tmp = (int)(( timing / 0.8) + 0.5 - ( 1*( timing < 0)));
	SYMB	LINE, 3706
	MOV.W	R1,[R7+18]
	MOV.W	R0,[R7+16]
	FCALL	__SPF2DPF
	MOV.W	[R7+14],#03FE9H
	MOV.W	[R7+12],#09999H
	MOV.W	[R7+10],#09999H
	MOV.W	[R7+8],#0999AH
	LEA	R6,R7+8
	FCALL	__DIV_DPF
	MOV.W	[R7+14],#03FE0H
	MOV.W	[R7+12],#00H
	MOV.W	[R7+10],#00H
	MOV.W	[R7+8],#00H
	LEA	R6,R7+8
	FCALL	__ADD_DPF
	MOV.W	[R7+6],R3
	MOV.W	[R7+4],R2
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.W	R1,[R7+18]
	MOV.W	R0,[R7+16]
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	FCALL	__CMP_SPF
	CMP.B	R0L,#0FFH
	BNE	_917
	MOVS.W	R0,#00H
	MOVS.W	R1,#00H
	MOVS.W	R2,#00H
	MOV.W	R3,#03FF0H
	BR	_918
_917:
	MOVS.W	R0,#00H
	MOVS.W	R1,#00H
	MOVS.W	R2,#00H
	MOVS.W	R3,#00H
_918:
	MOV.W	R6,R7
	FCALL	__SUBR_DPF
	FCALL	__DPF2S
	SYMB	LTIM, "tmp", 2, 0, 205
; rs232cmd.c 3707	
; rs232cmd.c 3708					if (( tmp < -12) || ( tmp > 13))
	SYMB	LINE, 3708
	CMP.W	R0,#0FFF4H
	BLT	_906
	CMP.W	R0,#0DH
	BLE	_907
_906:
; rs232cmd.c 3709						SCPIError = DataOutOfRange;
	SYMB	LINE, 3709
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_914
_907:
; rs232cmd.c 3710					else
; rs232cmd.c 3711					{
; rs232cmd.c 3712						if ( SetAudioTiming( AESEBUAudio, timing) == FAIL)
	SYMB	LINE, 3712
	MOV.W	R0,#01H
	SYMB	LTIM, "tmp", 2, 0, 77
	MOV.W	R3,[R7+18]
	MOV.W	R2,[R7+16]
	CALL	_SetAudioTiming
	OR.W	R0,R0
	BNE	_914
; rs232cmd.c 3713							SCPIError = ExecErr;
	SYMB	LINE, 3713
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3714					}
; rs232cmd.c 3715				}
; rs232cmd.c 3716			}
; rs232cmd.c 3717		}
	SYMB	LINE, 3717
_914:
; rs232cmd.c 3718	}
	SYMB	LINE, 3718
	ADD.W	R7,#014H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 3719	
; rs232cmd.c 3720	/**************************************************************************/
; rs232cmd.c 3721	/* AudioGenAESEBUWordClock	 														 	     RS232CMD.C	*/
; rs232cmd.c 3722	/*																																				*/
; rs232cmd.c 3723	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3724	/* Revised:		000603				     																					*/
; rs232cmd.c 3725	/*																																				*/
; rs232cmd.c 3726	/* Function:	--																													*/
; rs232cmd.c 3727	/* Remarks:		--																													*/
; rs232cmd.c 3728	/* Returns:		--																													*/
; rs232cmd.c 3729	/* Updates:		--																													*/
; rs232cmd.c 3730	/**************************************************************************/
; rs232cmd.c 3731	void AudioGenAESEBUWordClock( void)
; rs232cmd.c 3732	{
	ALIGN	1
	SYMB	LINE, 3732
	PUBLIC	_AudioGenAESEBUWordClock
_AudioGenAESEBUWordClock:
	SYMB	TYPE, 601, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUWordClock", _AudioGenAESEBUWordClock, #601, 0, 0, 48
	SYMB	ALAB, _AudioGenAESEBUWordClock, #601
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "frequency", -1, #16, 130, 5
	SYMB	LTIM, "frequency", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 3733		int frequency;
; rs232cmd.c 3734		char code *str;
; rs232cmd.c 3735	
; rs232cmd.c 3736		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3736
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_933
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_933
; rs232cmd.c 3737		{
; rs232cmd.c 3738			if ( CmdRequest)
	SYMB	LINE, 3738
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_924
; rs232cmd.c 3739			{
; rs232cmd.c 3740				if ( ParCnt)
	SYMB	LINE, 3740
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_921
; rs232cmd.c 3741					SCPIError = ParNotAllowed;
	SYMB	LINE, 3741
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_933
_921:
; rs232cmd.c 3742				else
; rs232cmd.c 3743				{
; rs232cmd.c 3744					str = AudioFrequencyPar[AudioSetup[AESEBUAudio].Frequency].LongName;
	SYMB	LINE, 3744
	MOV.B	ES,#SEG( _AudioSetup+24 )
	MOV.W	R0,#SOF( _AudioSetup+24 )
	MOV.W	R0,[R0]
	MULU.W	R0,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioFrequencyPar )
	MOV.W	R0,#SOF( _AudioFrequencyPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_934
	ADDS.B	CS,#01H
_934:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 3745	
; rs232cmd.c 3746					while ( *str)
	SYMB	LINE, 3746
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_923
_922:
; rs232cmd.c 3747						rs232putchar( *str++);
	SYMB	LINE, 3747
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 3746
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_922
	SYMB	LINE, 3747
_923:
; rs232cmd.c 3748	
; rs232cmd.c 3749					rs232putchar('\n');
	SYMB	LINE, 3749
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 3750				}
; rs232cmd.c 3751			}
	SYMB	LINE, 3751
	BR	_933
_924:
; rs232cmd.c 3752			else
; rs232cmd.c 3753			{
; rs232cmd.c 3754				if ( ParCnt != 1)
	SYMB	LINE, 3754
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_925
; rs232cmd.c 3755					SCPIError = SyntaxErr;
	SYMB	LINE, 3755
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_933
_925:
; rs232cmd.c 3756				else
; rs232cmd.c 3757				{
; rs232cmd.c 3758					frequency = FindParameter( Cmd, AudioFrequencyPar);
	SYMB	LINE, 3758
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _AudioFrequencyPar )
	MOV.W	R2,#SOF( _AudioFrequencyPar )
	CALL	_FindParameter
	SYMB	LTIM, "frequency", 2, 0, 205
; rs232cmd.c 3759		
; rs232cmd.c 3760					if ( frequency > -1)
	SYMB	LINE, 3760
	MOV.W	R1,R0
	CMP.W	R1,#0FFFFH
	SYMB	LTIM, "frequency", 2, 0, 77
	SYMB	LTIM, "frequency", 6, 0, 205
	BLE	_926
; rs232cmd.c 3761					{
; rs232cmd.c 3762						if ( SetAudioWordClock( AESEBUAudio, frequency) == FAIL)
	SYMB	LINE, 3762
	MOV.W	R0,#01H
	CALL	_SetAudioWordClock
	SYMB	LTIM, "frequency", 6, 0, 77
	OR.W	R0,R0
	BNE	_933
; rs232cmd.c 3763							SCPIError = ExecErr;
	SYMB	LINE, 3763
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3764					}
	SYMB	LINE, 3764
	BR	_933
_926:
; rs232cmd.c 3765					else
; rs232cmd.c 3766						SCPIError = DataOutOfRange;
	SYMB	LINE, 3766
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3767				}
; rs232cmd.c 3768			}
; rs232cmd.c 3769		}
	SYMB	LINE, 3769
_933:
; rs232cmd.c 3770	}
	SYMB	LINE, 3770
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 3771	
; rs232cmd.c 3772	/**************************************************************************/
; rs232cmd.c 3773	/* AudioGenAESEBUClick	 																 	     RS232CMD.C	*/
; rs232cmd.c 3774	/*																																				*/
; rs232cmd.c 3775	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3776	/* Revised:		000603				     																					*/
; rs232cmd.c 3777	/*																																				*/
; rs232cmd.c 3778	/* Function:	--																													*/
; rs232cmd.c 3779	/* Remarks:		--																													*/
; rs232cmd.c 3780	/* Returns:		--																													*/
; rs232cmd.c 3781	/* Updates:		--																													*/
; rs232cmd.c 3782	/**************************************************************************/
; rs232cmd.c 3783	void AudioGenAESEBUClick( void)
; rs232cmd.c 3784	{
	ALIGN	1
	SYMB	LINE, 3784
	PUBLIC	_AudioGenAESEBUClick
_AudioGenAESEBUClick:
	SYMB	TYPE, 602, 'X', 12, #1, 30, 0
	SYMB	GFUN, "AudioGenAESEBUClick", _AudioGenAESEBUClick, #602, 0, 0, 0
	SYMB	ALAB, _AudioGenAESEBUClick, #602
	ADDS.W	R7,#0EH
	SYMB	SOFF, 2
	SYMB	IDEN, "click", -2, #16, 130, 5
; rs232cmd.c 3785		int click;
; rs232cmd.c 3786	
; rs232cmd.c 3787		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3787
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_949
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_949
; rs232cmd.c 3788		{
; rs232cmd.c 3789			if ( CmdRequest)
	SYMB	LINE, 3789
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_938
; rs232cmd.c 3790			{
; rs232cmd.c 3791				if ( ParCnt)
	SYMB	LINE, 3791
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_937
; rs232cmd.c 3792					SCPIError = ParNotAllowed;
	SYMB	LINE, 3792
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_949
_937:
; rs232cmd.c 3793				else
; rs232cmd.c 3794					rs232printf( 6, "%d\n", AudioSetup[AESEBUAudio].Click);
	SYMB	LINE, 3794
	MOV.W	R0,#06H
	MOV.B	ES,#SEG( _AudioSetup+26 )
	MOV.W	R1,#SOF( _AudioSetup+26 )
	MOV.W	R1,[R1]
	PUSH.W	R1
	SYMB	SOFF, 4
	MOV.W	R3,#SEG( _9 )
	MOV.W	R2,#SOF( _9 )
	PUSH.W	R2, R3
	SYMB	SOFF, 8
	CALL	_rs232printf
	ADDS.W	R7,#06H
	SYMB	SOFF, 2
; rs232cmd.c 3795			}
	SYMB	LINE, 3795
	BR	_949
_938:
; rs232cmd.c 3796			else
; rs232cmd.c 3797			{
; rs232cmd.c 3798				if (( ParCnt != 1) || ( sscanf( Cmd, "%d", &click) != 1))
	SYMB	LINE, 3798
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_939
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 6
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 10
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 2
	CMP.W	R0,#01H
	BEQ	_940
_939:
; rs232cmd.c 3799					SCPIError = SyntaxErr;
	SYMB	LINE, 3799
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_949
_940:
; rs232cmd.c 3800				else
; rs232cmd.c 3801				{
; rs232cmd.c 3802					if (( click != click1s) && ( click != click3s))
	SYMB	LINE, 3802
	CMP.W	[R7],#01H
	BEQ	_942
	CMP.W	[R7],#03H
	BEQ	_942
; rs232cmd.c 3803						SCPIError = DataOutOfRange;
	SYMB	LINE, 3803
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_949
_942:
; rs232cmd.c 3804					else
; rs232cmd.c 3805					{
; rs232cmd.c 3806						if ( SetAudioClick( AESEBUAudio, click) == FAIL)
	SYMB	LINE, 3806
	MOV.W	R0,#01H
	MOV.W	R1,[R7]
	CALL	_SetAudioClick
	OR.W	R0,R0
	BNE	_949
; rs232cmd.c 3807							SCPIError = ExecErr;
	SYMB	LINE, 3807
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3808					}
; rs232cmd.c 3809				}
; rs232cmd.c 3810			}
; rs232cmd.c 3811		}
	SYMB	LINE, 3811
_949:
; rs232cmd.c 3812	}
	SYMB	LINE, 3812
	ADDS.W	R7,#02H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 3813	
; rs232cmd.c 3814	/**************************************************************************/
; rs232cmd.c 3815	/* FactPassword																					 	     RS232CMD.C	*/
; rs232cmd.c 3816	/*																																				*/
; rs232cmd.c 3817	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3818	/* Revised:	  000614				     																					*/
; rs232cmd.c 3819	/*																																				*/
; rs232cmd.c 3820	/* Function:	--																													*/
; rs232cmd.c 3821	/* Remarks:		--																													*/
; rs232cmd.c 3822	/* Returns:		--																													*/
; rs232cmd.c 3823	/* Updates:		--																													*/
; rs232cmd.c 3824	/**************************************************************************/
; rs232cmd.c 3825	void FactPassword( void)
; rs232cmd.c 3826	{
	ALIGN	1
	SYMB	LINE, 3826
	PUBLIC	_FactPassword
_FactPassword:
	SYMB	TYPE, 603, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactPassword", _FactPassword, #603, 0, 0, 0
	SYMB	ALAB, _FactPassword, #603
; rs232cmd.c 3827		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3827
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_970
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_970
; rs232cmd.c 3828		{
; rs232cmd.c 3829			if ( CmdRequest)
	SYMB	LINE, 3829
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_959
; rs232cmd.c 3830			{
; rs232cmd.c 3831				if ( ParCnt)
	SYMB	LINE, 3831
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_957
; rs232cmd.c 3832					SCPIError = ParNotAllowed;
	SYMB	LINE, 3832
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	RET
_957:
; rs232cmd.c 3833				else
; rs232cmd.c 3834				{
; rs232cmd.c 3835					if ( PasswordProtected)
	SYMB	LINE, 3835
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BEQ	_958
; rs232cmd.c 3836						rs232puts( "ON\n");
	SYMB	LINE, 3836
	MOV.W	R1,#SEG( _954 )
	MOV.W	R0,#SOF( _954 )
	CALL	_rs232puts
	RET
_958:
; rs232cmd.c 3837					else
; rs232cmd.c 3838						rs232puts( "OFF\n");
	SYMB	LINE, 3838
	MOV.W	R1,#SEG( _955 )
	MOV.W	R0,#SOF( _955 )
	CALL	_rs232puts
; rs232cmd.c 3839				}
; rs232cmd.c 3840			}
	SYMB	LINE, 3840
	RET
_959:
; rs232cmd.c 3841			else
; rs232cmd.c 3842			{
; rs232cmd.c 3843				if ( ParCnt != 1)
	SYMB	LINE, 3843
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_960
; rs232cmd.c 3844					SCPIError = SyntaxErr;
	SYMB	LINE, 3844
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_960:
; rs232cmd.c 3845				else
; rs232cmd.c 3846				{
; rs232cmd.c 3847					if ( !strcmp( Cmd, "ON"))
	SYMB	LINE, 3847
	MOV.W	R3,#SEG( _956 )
	MOV.W	R2,#SOF( _956 )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_strcmp
	OR.W	R0,R0
	BNE	_961
; rs232cmd.c 3848						PasswordProtected = true;
	SYMB	LINE, 3848
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	[R0],#0FFFFH
	RET
_961:
; rs232cmd.c 3849					else
; rs232cmd.c 3850						if ( !Cstrcmp( Cmd, PasswordText))
	SYMB	LINE, 3850
	MOV.W	R3,#SEG( _PasswordText )
	MOV.W	R2,#SOF( _PasswordText )
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_Cstrcmp
	OR.W	R0,R0
	BNE	_962
; rs232cmd.c 3851							PasswordProtected = false;
	SYMB	LINE, 3851
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	[R0],#00H
	RET
_962:
; rs232cmd.c 3852					else
; rs232cmd.c 3853						SCPIError = IllegalParValue;
	SYMB	LINE, 3853
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#023H
; rs232cmd.c 3854				}
; rs232cmd.c 3855			}
; rs232cmd.c 3856		}
	SYMB	LINE, 3856
_970:
; rs232cmd.c 3857	}
	SYMB	LINE, 3857
	RET
	SYMB	EFUN
; rs232cmd.c 3858	
; rs232cmd.c 3859	/**************************************************************************/
; rs232cmd.c 3860	/* FactReset																						 	     RS232CMD.C	*/
; rs232cmd.c 3861	/*																																				*/
; rs232cmd.c 3862	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 3863	/* Revised:	  000620				     																					*/
; rs232cmd.c 3864	/*																																				*/
; rs232cmd.c 3865	/* Function:	--																													*/
; rs232cmd.c 3866	/* Remarks:		--																													*/
; rs232cmd.c 3867	/* Returns:		--																													*/
; rs232cmd.c 3868	/* Updates:		--																													*/
; rs232cmd.c 3869	/**************************************************************************/
; rs232cmd.c 3870	void FactReset( void)
; rs232cmd.c 3871	{
	ALIGN	1
	SYMB	LINE, 3871
	PUBLIC	_FactReset
_FactReset:
	SYMB	TYPE, 604, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactReset", _FactReset, #604, 0, 0, 16
	SYMB	ALAB, _FactReset, #604
	PUSH.W	R4
	SYMB	SOFF, 2
	SYMB	IDEN, "i", -1, #16, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
; rs232cmd.c 3872		int i;
; rs232cmd.c 3873	
; rs232cmd.c 3874		if ( !PasswordProtected)
	SYMB	LINE, 3874
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_979
; rs232cmd.c 3875		{
; rs232cmd.c 3876			if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3876
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_979
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_979
; rs232cmd.c 3877			{
; rs232cmd.c 3878				if ( CmdRequest)
	SYMB	LINE, 3878
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_972
; rs232cmd.c 3879						SCPIError = SyntaxErr;
	SYMB	LINE, 3879
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_979
_972:
; rs232cmd.c 3880				else
; rs232cmd.c 3881				{
; rs232cmd.c 3882					if ( ParCnt)
	SYMB	LINE, 3882
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_973
; rs232cmd.c 3883						SCPIError = SyntaxErr;
	SYMB	LINE, 3883
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_979
_973:
; rs232cmd.c 3884					else
; rs232cmd.c 3885					{
; rs232cmd.c 3886						GenlockDefaults();				// 
	SYMB	LINE, 3886
	CALL	_GenlockDefaults
; rs232cmd.c 3887						GenlockInit();	 		 			// init the genlock setup
	SYMB	LINE, 3887
	CALL	_GenlockInit
; rs232cmd.c 3888	
; rs232cmd.c 3889						BBDefaults();				 			// 
	SYMB	LINE, 3889
	CALL	_BBDefaults
; rs232cmd.c 3890						BBInit();						 			// init the black burst setups
	SYMB	LINE, 3890
	CALL	_BBInit
; rs232cmd.c 3891	
; rs232cmd.c 3892						CBDefaults();				 			//
	SYMB	LINE, 3892
	CALL	_CBDefaults
; rs232cmd.c 3893						CBInit();						 			// init the colorbar generator (PAL,EBU ColorBar)
	SYMB	LINE, 3893
	CALL	_CBInit
; rs232cmd.c 3894	
; rs232cmd.c 3895						AudioDefaults();				 	//
	SYMB	LINE, 3895
	CALL	_AudioDefaults
; rs232cmd.c 3896						AudioInit();				 			// init the audio setup, (this includes an AudioTimer)				
	SYMB	LINE, 3896
	CALL	_AudioInit
; rs232cmd.c 3897	
; rs232cmd.c 3898	
; rs232cmd.c 3899						for ( i = 1; i <= NoOfPresets; i++)
	SYMB	LINE, 3899
	MOV.W	R4,#01H
	SYMB	LTIM, "i", 18, 0, 205
_974:
; rs232cmd.c 3900							StorePreset( i);
	SYMB	LINE, 3900
	MOV.W	R0,R4
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 2, 0, 205
	CALL	_StorePreset
	SYMB	LTIM, "i", 2, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
	SYMB	LINE, 3899
	ADDS.W	R4,#01H
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
	CMP.W	R4,#04H
	BLE	_974
; rs232cmd.c 3901	
; rs232cmd.c 3902						Settings.ActivePreset = 0;
	SYMB	LINE, 3902
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.W	[R0],#00H
; rs232cmd.c 3903						NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 3903
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	CALL	_NV_Store
; rs232cmd.c 3904					}
; rs232cmd.c 3905				}
; rs232cmd.c 3906			}
; rs232cmd.c 3907		}
	SYMB	LINE, 3907
_979:
; rs232cmd.c 3908	}
	SYMB	LINE, 3908
	POP.W	R4
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	EFUN
; rs232cmd.c 3909	
; rs232cmd.c 3910	/**************************************************************************/
; rs232cmd.c 3911	/* FactV24Command																				 	     RS232CMD.C	*/
; rs232cmd.c 3912	/*																																				*/
; rs232cmd.c 3913	/* Author:		Kim Engedahl, DEV, 000402	    															*/
; rs232cmd.c 3914	/* Revised:	  000614				     																					*/
; rs232cmd.c 3915	/*																																				*/
; rs232cmd.c 3916	/* Function:	--																													*/
; rs232cmd.c 3917	/* Remarks:		--																													*/
; rs232cmd.c 3918	/* Returns:		--																													*/
; rs232cmd.c 3919	/* Updates:		--																													*/
; rs232cmd.c 3920	/**************************************************************************/
; rs232cmd.c 3921	void FactV24Command( void)
; rs232cmd.c 3922	{
	ALIGN	1
	SYMB	LINE, 3922
	PUBLIC	_FactV24Command
_FactV24Command:
	SYMB	TYPE, 605, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactV24Command", _FactV24Command, #605, 0, 0, 48
	SYMB	ALAB, _FactV24Command, #605
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#03EH
	SYMB	SOFF, 66
	SYMB	IDEN, "address", -66, #3, 130, 5
	SYMB	TYPE, 606, 'Z', #2, 29
	SYMB	IDEN, "command", -64, #606, 130, 5
	SYMB	IDEN, "result", -34, #606, 130, 5
; rs232cmd.c 3923		UC address;
; rs232cmd.c 3924		char command[30], result[30];;
; rs232cmd.c 3925	
; rs232cmd.c 3926		if ( !PasswordProtected)
	SYMB	LINE, 3926
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_996
; rs232cmd.c 3927		{
; rs232cmd.c 3928			if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3928
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_996
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_996
; rs232cmd.c 3929			{
; rs232cmd.c 3930				if ( CmdRequest)
	SYMB	LINE, 3930
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_984
; rs232cmd.c 3931					SCPIError = SyntaxErr;
	SYMB	LINE, 3931
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_996
_984:
; rs232cmd.c 3932				else
; rs232cmd.c 3933				{
; rs232cmd.c 3934					if (( ParCnt != 2) || ( sscanf( Cmd, "%d,%s", &address, command) != 2))
	SYMB	LINE, 3934
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_985
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	PUSH.W	R4, R5
	SYMB	SOFF, 70
	PUSH.W	R2, R3
	SYMB	SOFF, 74
	MOV.W	R3,#SEG( _981 )
	MOV.W	R2,#SOF( _981 )
	PUSH.W	R2, R3
	SYMB	SOFF, 78
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 66
	CMP.W	R0,#02H
	BEQ	_986
_985:
; rs232cmd.c 3935						SCPIError = SyntaxErr;
	SYMB	LINE, 3935
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_996
_986:
; rs232cmd.c 3936					else
; rs232cmd.c 3937					{
; rs232cmd.c 3938						if ( command[2] == '?')
	SYMB	LINE, 3938
	CMP.B	[R7+4],#03FH
	BNE	_988
; rs232cmd.c 3939						{
; rs232cmd.c 3940							if ( sio0SndRequest( 12, address, result, "%s", command) == OK)
	SYMB	LINE, 3940
	MOV.W	R0,#0CH
	MOV.B	R1L,[R7]
	MOVS.B	R1H,#00H
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+32
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+2
	PUSH.W	R2, R3
	SYMB	SOFF, 70
	MOV.W	R3,#SEG( _982 )
	MOV.W	R2,#SOF( _982 )
	PUSH.W	R2, R3
	SYMB	SOFF, 74
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_sio0SndRequest
	ADD.W	R7,#08H
	SYMB	SOFF, 66
	CMP.W	R0,#0FFFFH
	BNE	_987
; rs232cmd.c 3941								rs232puts( result);
	SYMB	LINE, 3941
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
	BR	_996
_987:
; rs232cmd.c 3942							else
; rs232cmd.c 3943								SCPIError = ExecErr;
	SYMB	LINE, 3943
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3944						}
	SYMB	LINE, 3944
	BR	_996
_988:
; rs232cmd.c 3945						else
; rs232cmd.c 3946						{
; rs232cmd.c 3947							if ( sio0SndCommand( 20, address, "%s;", command) == FAIL)
	SYMB	LINE, 3947
	MOV.W	R0,#014H
	MOV.B	R1L,[R7]
	MOVS.B	R1H,#00H
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+2
	PUSH.W	R2, R3
	SYMB	SOFF, 70
	MOV.W	R3,#SEG( _983 )
	MOV.W	R2,#SOF( _983 )
	PUSH.W	R2, R3
	SYMB	SOFF, 74
	CALL	_sio0SndCommand
	ADD.W	R7,#08H
	SYMB	SOFF, 66
	OR.W	R0,R0
	BNE	_996
; rs232cmd.c 3948								SCPIError = ExecErr;
	SYMB	LINE, 3948
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 3949						}
; rs232cmd.c 3950					}
; rs232cmd.c 3951				}
; rs232cmd.c 3952			}
; rs232cmd.c 3953		}
	SYMB	LINE, 3953
_996:
; rs232cmd.c 3954	}
	SYMB	LINE, 3954
	ADD.W	R7,#03EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 3955	
; rs232cmd.c 3956	/**************************************************************************/
; rs232cmd.c 3957	/* FactV24Transparent																		 	     RS232CMD.C	*/
; rs232cmd.c 3958	/*																																				*/
; rs232cmd.c 3959	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 3960	/* Revised:	  000614				     																					*/
; rs232cmd.c 3961	/*																																				*/
; rs232cmd.c 3962	/* Function:	--																													*/
; rs232cmd.c 3963	/* Remarks:		--																													*/
; rs232cmd.c 3964	/* Returns:		--																													*/
; rs232cmd.c 3965	/* Updates:		--																													*/
; rs232cmd.c 3966	/**************************************************************************/
; rs232cmd.c 3967	void FactV24Transparent( void)
; rs232cmd.c 3968	{
	ALIGN	1
	SYMB	LINE, 3968
	PUBLIC	_FactV24Transparent
_FactV24Transparent:
	SYMB	TYPE, 608, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactV24Transparent", _FactV24Transparent, #608, 0, 0, 0
	SYMB	ALAB, _FactV24Transparent, #608
	SYMB	IDEN, "unit", -1, #16, 130, 5
	SYMB	LTIM, "unit", -1, 0, 69
; rs232cmd.c 3969		int unit;
; rs232cmd.c 3970	
; rs232cmd.c 3971		if ( !PasswordProtected)
	SYMB	LINE, 3971
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1007
; rs232cmd.c 3972		{
; rs232cmd.c 3973			if ( CmdExecute && !SCPIError)
	SYMB	LINE, 3973
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1007
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1007
; rs232cmd.c 3974			{
; rs232cmd.c 3975				if ( CmdRequest)
	SYMB	LINE, 3975
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1001
; rs232cmd.c 3976					SCPIError = SyntaxErr;
	SYMB	LINE, 3976
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_1001:
; rs232cmd.c 3977				else
; rs232cmd.c 3978				{
; rs232cmd.c 3979					unit = FindParameter( Cmd, UnitPar);
	SYMB	LINE, 3979
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _UnitPar )
	MOV.W	R2,#SOF( _UnitPar )
	CALL	_FindParameter
	SYMB	LTIM, "unit", 2, 0, 205
; rs232cmd.c 3980		
; rs232cmd.c 3981					if ( unit > -1)
	SYMB	LINE, 3981
	CMP.W	R0,#0FFFFH
	BLE	_1002
; rs232cmd.c 3982						BBSPGCommunication( unit);
	SYMB	LINE, 3982
	CALL	_BBSPGCommunication
	SYMB	LTIM, "unit", 2, 0, 77
	RET
_1002:
; rs232cmd.c 3983					else
; rs232cmd.c 3984						SCPIError = DataOutOfRange;
	SYMB	LINE, 3984
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 3985				}
; rs232cmd.c 3986			}
; rs232cmd.c 3987		}
	SYMB	LINE, 3987
_1007:
; rs232cmd.c 3988	}
	SYMB	LINE, 3988
	RET
	SYMB	EFUN
; rs232cmd.c 3989	
; rs232cmd.c 3990	/**************************************************************************/
; rs232cmd.c 3991	/* FactChecksumCode																			 	     RS232CMD.C	*/
; rs232cmd.c 3992	/*																																				*/
; rs232cmd.c 3993	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 3994	/* Revised:	  000705			     																						*/
; rs232cmd.c 3995	/*																																				*/
; rs232cmd.c 3996	/* Function:	--																													*/
; rs232cmd.c 3997	/* Remarks:		--																													*/
; rs232cmd.c 3998	/* Returns:		--																													*/
; rs232cmd.c 3999	/* Updates:		--																													*/
; rs232cmd.c 4000	/**************************************************************************/
; rs232cmd.c 4001	void FactChecksumCode( void)
; rs232cmd.c 4002	{
	ALIGN	1
	SYMB	LINE, 4002
	PUBLIC	_FactChecksumCode
_FactChecksumCode:
	SYMB	TYPE, 609, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumCode", _FactChecksumCode, #609, 0, 0, 48
	SYMB	ALAB, _FactChecksumCode, #609
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4003		char buffer[30];
; rs232cmd.c 4004	
; rs232cmd.c 4005		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4005
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1015
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1015
; rs232cmd.c 4006		{
; rs232cmd.c 4007			if ( CmdRequest)
	SYMB	LINE, 4007
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1011
; rs232cmd.c 4008			{
; rs232cmd.c 4009				if ( ParCnt)
	SYMB	LINE, 4009
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1010
; rs232cmd.c 4010					SCPIError = SyntaxErr;
	SYMB	LINE, 4010
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1015
_1010:
; rs232cmd.c 4011				else
; rs232cmd.c 4012				{		
; rs232cmd.c 4013					sprintf( buffer, "%u\n", ROMChecksum( StartOfPROMCode, StartOfPROMCode+SizeOfPROMCode-1));
	SYMB	LINE, 4013
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	MOV.W	R3,#03H
	MOV.W	R2,#0FFFFH
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 34
; rs232cmd.c 4014					rs232puts( buffer);
	SYMB	LINE, 4014
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4015				}
; rs232cmd.c 4016			}
	SYMB	LINE, 4016
	BR	_1015
_1011:
; rs232cmd.c 4017			else
; rs232cmd.c 4018				SCPIError = SyntaxErr;
	SYMB	LINE, 4018
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4019		}
	SYMB	LINE, 4019
_1015:
; rs232cmd.c 4020	}
	SYMB	LINE, 4020
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4021	
; rs232cmd.c 4022	/**************************************************************************/
; rs232cmd.c 4023	/* FactChecksumPLD																			 	     RS232CMD.C	*/
; rs232cmd.c 4024	/*																																				*/
; rs232cmd.c 4025	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4026	/* Revised:	  000705			     																						*/
; rs232cmd.c 4027	/*																																				*/
; rs232cmd.c 4028	/* Function:	--																													*/
; rs232cmd.c 4029	/* Remarks:		--																													*/
; rs232cmd.c 4030	/* Returns:		--																													*/
; rs232cmd.c 4031	/* Updates:		--																													*/
; rs232cmd.c 4032	/**************************************************************************/
; rs232cmd.c 4033	void FactChecksumPLD( void)
; rs232cmd.c 4034	{
	ALIGN	1
	SYMB	LINE, 4034
	PUBLIC	_FactChecksumPLD
_FactChecksumPLD:
	SYMB	TYPE, 610, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumPLD", _FactChecksumPLD, #610, 0, 0, 48
	SYMB	ALAB, _FactChecksumPLD, #610
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4035		char buffer[30];
; rs232cmd.c 4036	
; rs232cmd.c 4037		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4037
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1021
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1021
; rs232cmd.c 4038		{
; rs232cmd.c 4039			if ( CmdRequest)
	SYMB	LINE, 4039
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1017
; rs232cmd.c 4040			{
; rs232cmd.c 4041				if ( ParCnt)
	SYMB	LINE, 4041
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1016
; rs232cmd.c 4042					SCPIError = SyntaxErr;
	SYMB	LINE, 4042
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1021
_1016:
; rs232cmd.c 4043				else
; rs232cmd.c 4044				{		
; rs232cmd.c 4045					sprintf( buffer, "%u\n", ROMChecksum( StartOfPLDCode, StartOfPLDCode+SizeOfPLDCode-1));
	SYMB	LINE, 4045
	MOV.W	R1,#04H
	MOV.W	R0,#00H
	MOV.W	R3,#04H
	MOV.W	R2,#09FFFH
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 34
; rs232cmd.c 4046					rs232puts( buffer);
	SYMB	LINE, 4046
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4047				}
; rs232cmd.c 4048			}
	SYMB	LINE, 4048
	BR	_1021
_1017:
; rs232cmd.c 4049			else
; rs232cmd.c 4050				SCPIError = SyntaxErr;
	SYMB	LINE, 4050
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4051		}
	SYMB	LINE, 4051
_1021:
; rs232cmd.c 4052	}
	SYMB	LINE, 4052
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4053	
; rs232cmd.c 4054	/**************************************************************************/
; rs232cmd.c 4055	/* FactChecksumEmbAudio																	 	     RS232CMD.C	*/
; rs232cmd.c 4056	/*																																				*/
; rs232cmd.c 4057	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4058	/* Revised:	  000705			     																						*/
; rs232cmd.c 4059	/*																																				*/
; rs232cmd.c 4060	/* Function:	--																													*/
; rs232cmd.c 4061	/* Remarks:		--																													*/
; rs232cmd.c 4062	/* Returns:		--																													*/
; rs232cmd.c 4063	/* Updates:		--																													*/
; rs232cmd.c 4064	/**************************************************************************/
; rs232cmd.c 4065	void FactChecksumEmbAudio( void)
; rs232cmd.c 4066	{
	ALIGN	1
	SYMB	LINE, 4066
	PUBLIC	_FactChecksumEmbAudio
_FactChecksumEmbAudio:
	SYMB	TYPE, 611, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumEmbAudio", _FactChecksumEmbAudio, #611, 0, 0, 48
	SYMB	ALAB, _FactChecksumEmbAudio, #611
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4067		char buffer[30];
; rs232cmd.c 4068	
; rs232cmd.c 4069		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4069
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1027
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1027
; rs232cmd.c 4070		{
; rs232cmd.c 4071			if ( CmdRequest)
	SYMB	LINE, 4071
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1023
; rs232cmd.c 4072			{
; rs232cmd.c 4073				if ( ParCnt)
	SYMB	LINE, 4073
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1022
; rs232cmd.c 4074					SCPIError = SyntaxErr;
	SYMB	LINE, 4074
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1027
_1022:
; rs232cmd.c 4075				else
; rs232cmd.c 4076				{		
; rs232cmd.c 4077					sprintf( buffer, "%u\n", ROMChecksum( StartOfEmbAudioCode, StartOfEmbAudioCode+SizeOfEmbAudioCode-1));
	SYMB	LINE, 4077
	MOV.W	R1,#04H
	MOV.W	R0,#0A000H
	MOV.W	R3,#04H
	MOV.W	R2,#0C3FFH
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 34
; rs232cmd.c 4078					rs232puts( buffer);
	SYMB	LINE, 4078
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4079				}
; rs232cmd.c 4080			}
	SYMB	LINE, 4080
	BR	_1027
_1023:
; rs232cmd.c 4081			else
; rs232cmd.c 4082				SCPIError = SyntaxErr;
	SYMB	LINE, 4082
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4083		}
	SYMB	LINE, 4083
_1027:
; rs232cmd.c 4084	}
	SYMB	LINE, 4084
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4085	
; rs232cmd.c 4086	/**************************************************************************/
; rs232cmd.c 4087	/* FactChecksumPattern																	 	     RS232CMD.C	*/
; rs232cmd.c 4088	/*																																				*/
; rs232cmd.c 4089	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4090	/* Revised:	  000705			     																						*/
; rs232cmd.c 4091	/*																																				*/
; rs232cmd.c 4092	/* Function:	--																													*/
; rs232cmd.c 4093	/* Remarks:		--																													*/
; rs232cmd.c 4094	/* Returns:		--																													*/
; rs232cmd.c 4095	/* Updates:		--																													*/
; rs232cmd.c 4096	/**************************************************************************/
; rs232cmd.c 4097	void FactChecksumPattern( void)
; rs232cmd.c 4098	{
	ALIGN	1
	SYMB	LINE, 4098
	PUBLIC	_FactChecksumPattern
_FactChecksumPattern:
	SYMB	TYPE, 612, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumPattern", _FactChecksumPattern, #612, 0, 0, 48
	SYMB	ALAB, _FactChecksumPattern, #612
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4099		char buffer[30];
; rs232cmd.c 4100	
; rs232cmd.c 4101		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4101
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1033
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1033
; rs232cmd.c 4102		{
; rs232cmd.c 4103			if ( CmdRequest)
	SYMB	LINE, 4103
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1029
; rs232cmd.c 4104			{
; rs232cmd.c 4105				if ( ParCnt)
	SYMB	LINE, 4105
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1028
; rs232cmd.c 4106					SCPIError = SyntaxErr;
	SYMB	LINE, 4106
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1033
_1028:
; rs232cmd.c 4107				else
; rs232cmd.c 4108				{		
; rs232cmd.c 4109					sprintf( buffer, "%u\n", ROMChecksum( StartOfCBVideoCode, StartOfCBVideoCode+SizeOfCBVideoCode-1));
	SYMB	LINE, 4109
	MOV.W	R1,#05H
	MOV.W	R0,#00H
	MOV.W	R3,#07H
	MOV.W	R2,#0FFFFH
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 34
; rs232cmd.c 4110					rs232puts( buffer);
	SYMB	LINE, 4110
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4111				}
; rs232cmd.c 4112			}
	SYMB	LINE, 4112
	BR	_1033
_1029:
; rs232cmd.c 4113			else
; rs232cmd.c 4114				SCPIError = SyntaxErr;
	SYMB	LINE, 4114
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4115		}
	SYMB	LINE, 4115
_1033:
; rs232cmd.c 4116	}
	SYMB	LINE, 4116
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4117	
; rs232cmd.c 4118	/**************************************************************************/
; rs232cmd.c 4119	/* FactChecksumRange																		 	     RS232CMD.C	*/
; rs232cmd.c 4120	/*																																				*/
; rs232cmd.c 4121	/* Author:		Kim Engedahl, DEV, 000705	    															*/
; rs232cmd.c 4122	/* Revised:	  000705			     																						*/
; rs232cmd.c 4123	/*																																				*/
; rs232cmd.c 4124	/* Function:	--																													*/
; rs232cmd.c 4125	/* Remarks:		--																													*/
; rs232cmd.c 4126	/* Returns:		--																													*/
; rs232cmd.c 4127	/* Updates:		--																													*/
; rs232cmd.c 4128	/**************************************************************************/
; rs232cmd.c 4129	void FactChecksumRange( void)
; rs232cmd.c 4130	{
	ALIGN	1
	SYMB	LINE, 4130
	PUBLIC	_FactChecksumRange
_FactChecksumRange:
	SYMB	TYPE, 613, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactChecksumRange", _FactChecksumRange, #613, 0, 0, 48
	SYMB	ALAB, _FactChecksumRange, #613
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "StartAddr", -42, #7, 130, 5
	SYMB	IDEN, "EndAddr", -38, #7, 130, 5
	SYMB	IDEN, "buffer", -34, #606, 130, 5
; rs232cmd.c 4131		UL StartAddr, EndAddr;
; rs232cmd.c 4132	
; rs232cmd.c 4133		char buffer[30];
; rs232cmd.c 4134	
; rs232cmd.c 4135		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4135
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1041
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1041
; rs232cmd.c 4136		{
; rs232cmd.c 4137			if ( CmdRequest)
	SYMB	LINE, 4137
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1037
; rs232cmd.c 4138			{
; rs232cmd.c 4139				if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &StartAddr, &EndAddr)) != 2))
	SYMB	LINE, 4139
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1035
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+4
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1034 )
	MOV.W	R2,#SOF( _1034 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1036
_1035:
; rs232cmd.c 4140					SCPIError = SyntaxErr;
	SYMB	LINE, 4140
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1041
_1036:
; rs232cmd.c 4141				else
; rs232cmd.c 4142				{
; rs232cmd.c 4143					sprintf( buffer, "%u\n", ROMChecksum( StartAddr, EndAddr));
	SYMB	LINE, 4143
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	MOV.W	R3,[R7+6]
	MOV.W	R2,[R7+4]
	CALL	_ROMChecksum
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+8
	PUSH.W	R0
	SYMB	SOFF, 44
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 48
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 42
; rs232cmd.c 4144					rs232puts( buffer);
	SYMB	LINE, 4144
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4145				}
; rs232cmd.c 4146			}
	SYMB	LINE, 4146
	BR	_1041
_1037:
; rs232cmd.c 4147			else
; rs232cmd.c 4148				SCPIError = SyntaxErr;
	SYMB	LINE, 4148
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4149		}
	SYMB	LINE, 4149
_1041:
; rs232cmd.c 4150	}
	SYMB	LINE, 4150
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4151	
; rs232cmd.c 4152	/**************************************************************************/
; rs232cmd.c 4153	/* FactMainVersion																			 	     RS232CMD.C	*/
; rs232cmd.c 4154	/*																																				*/
; rs232cmd.c 4155	/* Author:		Kim Engedahl, DEV, 000620	    															*/
; rs232cmd.c 4156	/* Revised:	  000620				     																					*/
; rs232cmd.c 4157	/*																																				*/
; rs232cmd.c 4158	/* Function:	--																													*/
; rs232cmd.c 4159	/* Remarks:		--																													*/
; rs232cmd.c 4160	/* Returns:		--																													*/
; rs232cmd.c 4161	/* Updates:		--																													*/
; rs232cmd.c 4162	/**************************************************************************/
; rs232cmd.c 4163	void FactMainVersion( void)
; rs232cmd.c 4164	{
	ALIGN	1
	SYMB	LINE, 4164
	PUBLIC	_FactMainVersion
_FactMainVersion:
	SYMB	TYPE, 614, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainVersion", _FactMainVersion, #614, 0, 0, 48
	SYMB	ALAB, _FactMainVersion, #614
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#014H
	SYMB	SOFF, 24
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4165		char buffer[20];
; rs232cmd.c 4166	
; rs232cmd.c 4167		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4167
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1049
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1049
; rs232cmd.c 4168		{
; rs232cmd.c 4169			if ( CmdRequest)
	SYMB	LINE, 4169
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1045
; rs232cmd.c 4170			{
; rs232cmd.c 4171				if ( ParCnt)
	SYMB	LINE, 4171
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1044
; rs232cmd.c 4172					SCPIError = SyntaxErr;
	SYMB	LINE, 4172
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1049
_1044:
; rs232cmd.c 4173				else
; rs232cmd.c 4174				{
; rs232cmd.c 4175					sprintf( buffer, "%u\n", MasterSWVersion);
	SYMB	LINE, 4175
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R0,#0BH
	PUSH.W	R0
	SYMB	SOFF, 26
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 30
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 24
; rs232cmd.c 4176					rs232puts( buffer);
	SYMB	LINE, 4176
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4177				}
; rs232cmd.c 4178			}
	SYMB	LINE, 4178
	BR	_1049
_1045:
; rs232cmd.c 4179			else
; rs232cmd.c 4180				SCPIError = SyntaxErr;
	SYMB	LINE, 4180
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4181		}
	SYMB	LINE, 4181
_1049:
; rs232cmd.c 4182	}
	SYMB	LINE, 4182
	ADD.W	R7,#014H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4183	
; rs232cmd.c 4184	/**************************************************************************/
; rs232cmd.c 4185	/* FactMainIDNCompany																		 	     RS232CMD.C	*/
; rs232cmd.c 4186	/*																																				*/
; rs232cmd.c 4187	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4188	/* Revised:	  000616				     																					*/
; rs232cmd.c 4189	/*																																				*/
; rs232cmd.c 4190	/* Function:	--																													*/
; rs232cmd.c 4191	/* Remarks:		--																													*/
; rs232cmd.c 4192	/* Returns:		--																													*/
; rs232cmd.c 4193	/* Updates:		--																													*/
; rs232cmd.c 4194	/**************************************************************************/
; rs232cmd.c 4195	void FactMainIDNCompany( void)
; rs232cmd.c 4196	{
	ALIGN	1
	SYMB	LINE, 4196
	PUBLIC	_FactMainIDNCompany
_FactMainIDNCompany:
	SYMB	TYPE, 615, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainIDNCompany", _FactMainIDNCompany, #615, 0, 0, 112
	SYMB	ALAB, _FactMainIDNCompany, #615
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#022H
	SYMB	SOFF, 40
	SYMB	IDEN, "Company", -40, #476, 130, 5
; rs232cmd.c 4197		char Company[33];
; rs232cmd.c 4198	
; rs232cmd.c 4199		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4199
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1060
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1060
; rs232cmd.c 4200		{
; rs232cmd.c 4201			if ( CmdRequest)
	SYMB	LINE, 4201
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1052
; rs232cmd.c 4202			{
; rs232cmd.c 4203				if ( ParCnt)
	SYMB	LINE, 4203
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1051
; rs232cmd.c 4204					SCPIError = SyntaxErr;
	SYMB	LINE, 4204
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1060
_1051:
; rs232cmd.c 4205				else
; rs232cmd.c 4206				{
; rs232cmd.c 4207					rs232puts( Calibration.Company);
	SYMB	LINE, 4207
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	CALL	_rs232puts
; rs232cmd.c 4208					rs232putchar( '\n');
	SYMB	LINE, 4208
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4209				}
; rs232cmd.c 4210			}
	SYMB	LINE, 4210
	BR	_1060
_1052:
; rs232cmd.c 4211			else
; rs232cmd.c 4212			{
; rs232cmd.c 4213				if ( !PasswordProtected)
	SYMB	LINE, 4213
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1060
; rs232cmd.c 4214				{
; rs232cmd.c 4215					if (( ParCnt != 1) || ( sscanf( Cmd, "%32s", Company) != 1))
	SYMB	LINE, 4215
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1053
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 44
	MOV.W	R3,#SEG( _1050 )
	MOV.W	R2,#SOF( _1050 )
	PUSH.W	R2, R3
	SYMB	SOFF, 48
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 40
	CMP.W	R0,#01H
	BEQ	_1054
_1053:
; rs232cmd.c 4216						SCPIError = SyntaxErr;
	SYMB	LINE, 4216
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1060
_1054:
; rs232cmd.c 4217					else
; rs232cmd.c 4218					{
; rs232cmd.c 4219						strncpy( Calibration.Company, Company, 32);
	SYMB	LINE, 4219
	MOV.W	R6,#020H
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_strncpy
; rs232cmd.c 4220	
; rs232cmd.c 4221					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4221
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	CALL	_NV_Store
; rs232cmd.c 4222					}
; rs232cmd.c 4223				}
; rs232cmd.c 4224			}
; rs232cmd.c 4225		}
	SYMB	LINE, 4225
_1060:
; rs232cmd.c 4226	}
	SYMB	LINE, 4226
	ADD.W	R7,#022H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4227	
; rs232cmd.c 4228	/**************************************************************************/
; rs232cmd.c 4229	/* FactMainIDNType																			 	     RS232CMD.C	*/
; rs232cmd.c 4230	/*																																				*/
; rs232cmd.c 4231	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4232	/* Revised:	  000616				     																					*/
; rs232cmd.c 4233	/*																																				*/
; rs232cmd.c 4234	/* Function:	--																													*/
; rs232cmd.c 4235	/* Remarks:		--																													*/
; rs232cmd.c 4236	/* Returns:		--																													*/
; rs232cmd.c 4237	/* Updates:		--																													*/
; rs232cmd.c 4238	/**************************************************************************/
; rs232cmd.c 4239	void FactMainIDNType( void)
; rs232cmd.c 4240	{
	ALIGN	1
	SYMB	LINE, 4240
	PUBLIC	_FactMainIDNType
_FactMainIDNType:
	SYMB	TYPE, 616, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainIDNType", _FactMainIDNType, #616, 0, 0, 112
	SYMB	ALAB, _FactMainIDNType, #616
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#022H
	SYMB	SOFF, 40
	SYMB	IDEN, "Type", -40, #476, 130, 5
; rs232cmd.c 4241		char Type[33];
; rs232cmd.c 4242	
; rs232cmd.c 4243		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4243
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1072
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1072
; rs232cmd.c 4244		{
; rs232cmd.c 4245			if ( CmdRequest)
	SYMB	LINE, 4245
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1064
; rs232cmd.c 4246			{
; rs232cmd.c 4247				if ( ParCnt)
	SYMB	LINE, 4247
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1063
; rs232cmd.c 4248					SCPIError = SyntaxErr;
	SYMB	LINE, 4248
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1072
_1063:
; rs232cmd.c 4249				else
; rs232cmd.c 4250				{
; rs232cmd.c 4251					rs232puts( Calibration.Type);
	SYMB	LINE, 4251
	MOV.W	R1,#SEG( _Calibration+33 )
	MOV.W	R0,#SOF( _Calibration+33 )
	CALL	_rs232puts
; rs232cmd.c 4252					rs232putchar( '\n');
	SYMB	LINE, 4252
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4253				}
; rs232cmd.c 4254			}
	SYMB	LINE, 4254
	BR	_1072
_1064:
; rs232cmd.c 4255			else
; rs232cmd.c 4256			{
; rs232cmd.c 4257				if ( !PasswordProtected)
	SYMB	LINE, 4257
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1072
; rs232cmd.c 4258				{
; rs232cmd.c 4259					if (( ParCnt != 1) || ( sscanf( Cmd, "%32s", Type) != 1))
	SYMB	LINE, 4259
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1065
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 44
	MOV.W	R3,#SEG( _1050 )
	MOV.W	R2,#SOF( _1050 )
	PUSH.W	R2, R3
	SYMB	SOFF, 48
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 40
	CMP.W	R0,#01H
	BEQ	_1066
_1065:
; rs232cmd.c 4260						SCPIError = SyntaxErr;
	SYMB	LINE, 4260
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1072
_1066:
; rs232cmd.c 4261					else
; rs232cmd.c 4262					{
; rs232cmd.c 4263						strncpy( Calibration.Type, Type, 32);
	SYMB	LINE, 4263
	MOV.W	R1,#SEG( _Calibration+33 )
	MOV.W	R0,#SOF( _Calibration+33 )
	MOV.W	R6,#020H
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_strncpy
; rs232cmd.c 4264	
; rs232cmd.c 4265					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4265
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4266					}
; rs232cmd.c 4267				}
; rs232cmd.c 4268			}
; rs232cmd.c 4269		}
	SYMB	LINE, 4269
_1072:
; rs232cmd.c 4270	}
	SYMB	LINE, 4270
	ADD.W	R7,#022H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4271	
; rs232cmd.c 4272	/**************************************************************************/
; rs232cmd.c 4273	/* FactMainIDNNumber																	 	     RS232CMD.C	*/
; rs232cmd.c 4274	/*																																				*/
; rs232cmd.c 4275	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4276	/* Revised:	  000614				     																					*/
; rs232cmd.c 4277	/*																																				*/
; rs232cmd.c 4278	/* Function:	--																													*/
; rs232cmd.c 4279	/* Remarks:		--																													*/
; rs232cmd.c 4280	/* Returns:		--																													*/
; rs232cmd.c 4281	/* Updates:		--																													*/
; rs232cmd.c 4282	/**************************************************************************/
; rs232cmd.c 4283	void FactMainIDNKUNumber( void)
; rs232cmd.c 4284	{
	ALIGN	1
	SYMB	LINE, 4284
	PUBLIC	_FactMainIDNKUNumber
_FactMainIDNKUNumber:
	SYMB	TYPE, 617, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainIDNKUNumber", _FactMainIDNKUNumber, #617, 0, 0, 112
	SYMB	ALAB, _FactMainIDNKUNumber, #617
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#0AH
	SYMB	SOFF, 16
	SYMB	TYPE, 618, 'Z', #2, 8
	SYMB	IDEN, "KUNumber", -16, #618, 130, 5
; rs232cmd.c 4285		char KUNumber[9];
; rs232cmd.c 4286	
; rs232cmd.c 4287		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4287
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1085
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1085
; rs232cmd.c 4288		{
; rs232cmd.c 4289			if ( CmdRequest)
	SYMB	LINE, 4289
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1077
; rs232cmd.c 4290			{
; rs232cmd.c 4291				if ( ParCnt)
	SYMB	LINE, 4291
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1076
; rs232cmd.c 4292					SCPIError = SyntaxErr;
	SYMB	LINE, 4292
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1085
_1076:
; rs232cmd.c 4293				else
; rs232cmd.c 4294				{
; rs232cmd.c 4295					rs232puts( Calibration.KUNumber);
	SYMB	LINE, 4295
	MOV.W	R1,#SEG( _Calibration+66 )
	MOV.W	R0,#SOF( _Calibration+66 )
	CALL	_rs232puts
; rs232cmd.c 4296					rs232putchar( '\n');
	SYMB	LINE, 4296
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4297				}
; rs232cmd.c 4298			}
	SYMB	LINE, 4298
	BR	_1085
_1077:
; rs232cmd.c 4299			else
; rs232cmd.c 4300			{
; rs232cmd.c 4301				if ( !PasswordProtected)
	SYMB	LINE, 4301
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1085
; rs232cmd.c 4302				{
; rs232cmd.c 4303					if (( ParCnt != 1) || ( sscanf( Cmd, "%8s", KUNumber) != 1))
	SYMB	LINE, 4303
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1078
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 20
	MOV.W	R3,#SEG( _1075 )
	MOV.W	R2,#SOF( _1075 )
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 16
	CMP.W	R0,#01H
	BEQ	_1079
_1078:
; rs232cmd.c 4304						SCPIError = SyntaxErr;
	SYMB	LINE, 4304
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1085
_1079:
; rs232cmd.c 4305					else
; rs232cmd.c 4306					{
; rs232cmd.c 4307						strncpy( Calibration.KUNumber, KUNumber, 9);
	SYMB	LINE, 4307
	MOV.W	R1,#SEG( _Calibration+66 )
	MOV.W	R0,#SOF( _Calibration+66 )
	MOV.W	R6,#09H
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_strncpy
; rs232cmd.c 4308	
; rs232cmd.c 4309					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4309
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4310					}
; rs232cmd.c 4311				}
; rs232cmd.c 4312			}
; rs232cmd.c 4313		}
	SYMB	LINE, 4313
_1085:
; rs232cmd.c 4314	}
	SYMB	LINE, 4314
	ADD.W	R7,#0AH
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4315	
; rs232cmd.c 4316	/**************************************************************************/
; rs232cmd.c 4317	/* FactMainIDNSWRevision																 	     RS232CMD.C	*/
; rs232cmd.c 4318	/*																																				*/
; rs232cmd.c 4319	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4320	/* Revised:	  000616				     																					*/
; rs232cmd.c 4321	/*																																				*/
; rs232cmd.c 4322	/* Function:	--																													*/
; rs232cmd.c 4323	/* Remarks:		--																													*/
; rs232cmd.c 4324	/* Returns:		--																													*/
; rs232cmd.c 4325	/* Updates:		--																													*/
; rs232cmd.c 4326	/**************************************************************************/
; rs232cmd.c 4327	void FactMainIDNSWRevision( void)
; rs232cmd.c 4328	{
	ALIGN	1
	SYMB	LINE, 4328
	PUBLIC	_FactMainIDNSWRevision
_FactMainIDNSWRevision:
	SYMB	TYPE, 620, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainIDNSWRevision", _FactMainIDNSWRevision, #620, 0, 0, 112
	SYMB	ALAB, _FactMainIDNSWRevision, #620
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#0AH
	SYMB	SOFF, 16
	SYMB	IDEN, "SWRevision", -16, #618, 130, 5
; rs232cmd.c 4329		char SWRevision[9];
; rs232cmd.c 4330	
; rs232cmd.c 4331		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4331
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1097
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1097
; rs232cmd.c 4332		{
; rs232cmd.c 4333			if ( CmdRequest)
	SYMB	LINE, 4333
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1089
; rs232cmd.c 4334			{
; rs232cmd.c 4335				if ( ParCnt)
	SYMB	LINE, 4335
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1088
; rs232cmd.c 4336					SCPIError = SyntaxErr;
	SYMB	LINE, 4336
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1097
_1088:
; rs232cmd.c 4337				else
; rs232cmd.c 4338				{
; rs232cmd.c 4339					rs232puts( Calibration.SWRevision);
	SYMB	LINE, 4339
	MOV.W	R1,#SEG( _Calibration+75 )
	MOV.W	R0,#SOF( _Calibration+75 )
	CALL	_rs232puts
; rs232cmd.c 4340					rs232putchar( '\n');
	SYMB	LINE, 4340
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4341				}
; rs232cmd.c 4342			}
	SYMB	LINE, 4342
	BR	_1097
_1089:
; rs232cmd.c 4343			else
; rs232cmd.c 4344			{
; rs232cmd.c 4345				if ( !PasswordProtected)
	SYMB	LINE, 4345
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1097
; rs232cmd.c 4346				{
; rs232cmd.c 4347					if (( ParCnt != 1) || ( sscanf( Cmd, "%8s", SWRevision) != 1))
	SYMB	LINE, 4347
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1090
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,R5
	MOV.W	R2,R4
	PUSH.W	R2, R3
	SYMB	SOFF, 20
	MOV.W	R3,#SEG( _1075 )
	MOV.W	R2,#SOF( _1075 )
	PUSH.W	R2, R3
	SYMB	SOFF, 24
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 16
	CMP.W	R0,#01H
	BEQ	_1091
_1090:
; rs232cmd.c 4348						SCPIError = SyntaxErr;
	SYMB	LINE, 4348
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1097
_1091:
; rs232cmd.c 4349					else
; rs232cmd.c 4350					{
; rs232cmd.c 4351						strncpy( Calibration.SWRevision, SWRevision, 8);
	SYMB	LINE, 4351
	MOV.W	R1,#SEG( _Calibration+75 )
	MOV.W	R0,#SOF( _Calibration+75 )
	MOV.W	R6,#08H
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_strncpy
; rs232cmd.c 4352	
; rs232cmd.c 4353					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4353
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4354					}
; rs232cmd.c 4355				}
; rs232cmd.c 4356			}
; rs232cmd.c 4357		}
	SYMB	LINE, 4357
_1097:
; rs232cmd.c 4358	}
	SYMB	LINE, 4358
	ADD.W	R7,#0AH
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4359	
; rs232cmd.c 4360	/**************************************************************************/
; rs232cmd.c 4361	/* FactMainSystem	 																			 	     RS232CMD.C	*/
; rs232cmd.c 4362	/*																																				*/
; rs232cmd.c 4363	/* Author:		Kim Engedahl, DEV, 000617	    															*/
; rs232cmd.c 4364	/* Revised:	  000617				     																					*/
; rs232cmd.c 4365	/*																																				*/
; rs232cmd.c 4366	/* Function:	--																													*/
; rs232cmd.c 4367	/* Remarks:		--																													*/
; rs232cmd.c 4368	/* Returns:		--																													*/
; rs232cmd.c 4369	/* Updates:		--																													*/
; rs232cmd.c 4370	/**************************************************************************/
; rs232cmd.c 4371	void FactMainSystem( void)
; rs232cmd.c 4372	{
	ALIGN	1
	SYMB	LINE, 4372
	PUBLIC	_FactMainSystem
_FactMainSystem:
	SYMB	TYPE, 621, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainSystem", _FactMainSystem, #621, 0, 0, 48
	SYMB	ALAB, _FactMainSystem, #621
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "system", -1, #16, 130, 5
	SYMB	LTIM, "system", -1, 0, 69
	SYMB	IDEN, "str", -1, #491, 130, 5
	SYMB	LTIM, "str", -1, 0, 69
; rs232cmd.c 4373		int system;
; rs232cmd.c 4374		char code *str;
; rs232cmd.c 4375	
; rs232cmd.c 4376		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4376
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1113
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1113
; rs232cmd.c 4377		{
; rs232cmd.c 4378			if ( CmdRequest)
	SYMB	LINE, 4378
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1103
; rs232cmd.c 4379			{
; rs232cmd.c 4380				if ( ParCnt)
	SYMB	LINE, 4380
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1100
; rs232cmd.c 4381					SCPIError = ParNotAllowed;
	SYMB	LINE, 4381
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#06H
	BR	_1113
_1100:
; rs232cmd.c 4382				else
; rs232cmd.c 4383				{
; rs232cmd.c 4384					str = SystemPar[Calibration.ResetSystem].LongName;
	SYMB	LINE, 4384
	MOV.B	ES,#SEG( _Calibration+97 )
	MOV.W	R0,#SOF( _Calibration+97 )
	MOV.B	R0L,[R0]
	MULU.B	R0L,#0CH
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _SystemPar )
	MOV.W	R0,#SOF( _SystemPar )
	ADD.W	R0,R2
	ADDC.W	R1,R3
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_1114
	ADDS.B	CS,#01H
_1114:
	MOVC.W	R3,[R0+]
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "str", 19, 0, 205
; rs232cmd.c 4385	
; rs232cmd.c 4386					while ( *str)
	SYMB	LINE, 4386
	MOV.B	CS,R3L
	MOVC.B	R3L,[R2+]
	BEQ	_1102
_1101:
; rs232cmd.c 4387						rs232putchar( *str++);
	SYMB	LINE, 4387
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	MOV.B	R0L,R1L
	CALL	_rs232putchar
	ADD.W	R4,#01H
	ADDC.W	R5,#00H
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	LTIM, "str", 19, 0, 205
	SYMB	LINE, 4386
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	CS,R1L
	MOVC.B	R1L,[R0+]
	BNE	_1101
	SYMB	LINE, 4387
_1102:
; rs232cmd.c 4388	
; rs232cmd.c 4389					rs232putchar('\n');
	SYMB	LINE, 4389
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4390				}
; rs232cmd.c 4391			}
	SYMB	LINE, 4391
	BR	_1113
_1103:
; rs232cmd.c 4392			else
; rs232cmd.c 4393			{
; rs232cmd.c 4394				if ( ParCnt != 1)
	SYMB	LINE, 4394
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_1104
; rs232cmd.c 4395					SCPIError = SyntaxErr;
	SYMB	LINE, 4395
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1113
_1104:
; rs232cmd.c 4396				else
; rs232cmd.c 4397				{
; rs232cmd.c 4398					system = FindParameter( Cmd, SystemPar);
	SYMB	LINE, 4398
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _SystemPar )
	MOV.W	R2,#SOF( _SystemPar )
	CALL	_FindParameter
	SYMB	LTIM, "system", 2, 0, 205
; rs232cmd.c 4399	
; rs232cmd.c 4400					if ( system == PAL_PALID)						// If line7, (PAL w/ID), ever should
	SYMB	LINE, 4400
	CMP.W	R0,#01H
	BNE	_1105
; rs232cmd.c 4401						SCPIError = DataOutOfRange;				//  be supported remove this exception
	SYMB	LINE, 4401
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
	BR	_1113
_1105:
	SYMB	LTIM, "system", 2, 0, 77
; rs232cmd.c 4402					else						
; rs232cmd.c 4403					{	
; rs232cmd.c 4404						if ( system > -1)
	SYMB	LINE, 4404
	CMP.W	R0,#0FFFFH
	BLE	_1106
; rs232cmd.c 4405						{
; rs232cmd.c 4406							Calibration.ResetSystem = system;
	SYMB	LINE, 4406
	MOV.B	ES,#SEG( _Calibration+97 )
	MOV.W	R1,#SOF( _Calibration+97 )
	MOV.B	[R1],R0L
; rs232cmd.c 4407	
; rs232cmd.c 4408						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4408
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4409						}
	SYMB	LINE, 4409
	BR	_1113
_1106:
; rs232cmd.c 4410						else
; rs232cmd.c 4411							SCPIError = DataOutOfRange;
	SYMB	LINE, 4411
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 4412					}
; rs232cmd.c 4413				}
; rs232cmd.c 4414			}
; rs232cmd.c 4415		}
	SYMB	LINE, 4415
_1113:
; rs232cmd.c 4416	}
	SYMB	LINE, 4416
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "str", 19, 0, 77
	SYMB	EFUN
; rs232cmd.c 4417	
; rs232cmd.c 4418	/**************************************************************************/
; rs232cmd.c 4419	/* FactMainFMSDateProd																	 	     RS232CMD.C	*/
; rs232cmd.c 4420	/*																																				*/
; rs232cmd.c 4421	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4422	/* Revised:	  0006014				     																					*/
; rs232cmd.c 4423	/*																																				*/
; rs232cmd.c 4424	/* Function:	--																													*/
; rs232cmd.c 4425	/* Remarks:		--																													*/
; rs232cmd.c 4426	/* Returns:		--																													*/
; rs232cmd.c 4427	/* Updates:		--																													*/
; rs232cmd.c 4428	/**************************************************************************/
; rs232cmd.c 4429	void FactMainFMSDateProd( void)
; rs232cmd.c 4430	{
	ALIGN	1
	SYMB	LINE, 4430
	PUBLIC	_FactMainFMSDateProd
_FactMainFMSDateProd:
	SYMB	TYPE, 622, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainFMSDateProd", _FactMainFMSDateProd, #622, 0, 0, 48
	SYMB	ALAB, _FactMainFMSDateProd, #622
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4431		UI year, month, day;
; rs232cmd.c 4432		char buffer[20];
; rs232cmd.c 4433	
; rs232cmd.c 4434		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4434
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1129
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1129
; rs232cmd.c 4435		{
; rs232cmd.c 4436			if ( CmdRequest)
	SYMB	LINE, 4436
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1119
; rs232cmd.c 4437			{
; rs232cmd.c 4438				if ( ParCnt)
	SYMB	LINE, 4438
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1118
; rs232cmd.c 4439					SCPIError = SyntaxErr;
	SYMB	LINE, 4439
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1129
_1118:
; rs232cmd.c 4440				else
; rs232cmd.c 4441				{
; rs232cmd.c 4442					day = Calibration.ProdDate % 100;
	SYMB	LINE, 4442
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R1,#SOF( _Calibration+98 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R4,#SOF( _Calibration+98 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R1,#SOF( _Calibration+98 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4443					month = ( Calibration.ProdDate / 100) % 100;
	SYMB	LINE, 4443
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4444					year = ( Calibration.ProdDate / 10000);
	SYMB	LINE, 4444
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R1,#SOF( _Calibration+98 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4445	
; rs232cmd.c 4446					sprintf( buffer, "%d,%d,%d\n", year, month, day);
	SYMB	LINE, 4446
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _183 )
	MOV.W	R0,#SOF( _183 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4447	
; rs232cmd.c 4448					rs232puts( buffer);
	SYMB	LINE, 4448
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4449				}
; rs232cmd.c 4450			}
	SYMB	LINE, 4450
	BR	_1129
_1119:
; rs232cmd.c 4451			else
; rs232cmd.c 4452			{
; rs232cmd.c 4453				if ( !PasswordProtected)
	SYMB	LINE, 4453
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1129
; rs232cmd.c 4454				{
; rs232cmd.c 4455					if (( ParCnt != 3) || (( sscanf( Cmd, "%d,%d,%d", &year, &month, &day)) != 3))
	SYMB	LINE, 4455
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1120
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _184 )
	MOV.W	R2,#SOF( _184 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1121
_1120:
; rs232cmd.c 4456						SCPIError = SyntaxErr;
	SYMB	LINE, 4456
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1129
_1121:
; rs232cmd.c 4457					else
; rs232cmd.c 4458					{
; rs232cmd.c 4459						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4459
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1122
; rs232cmd.c 4460							SCPIError = ExecErr;
	SYMB	LINE, 4460
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1129
_1122:
; rs232cmd.c 4461						else
; rs232cmd.c 4462						{
; rs232cmd.c 4463							Calibration.ProdDate = day + 100*month + 10000*year;
	SYMB	LINE, 4463
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+98 )
	MOV.W	R2,#SOF( _Calibration+98 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4464						
; rs232cmd.c 4465						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4465
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4466						}
; rs232cmd.c 4467					}				
; rs232cmd.c 4468				}
; rs232cmd.c 4469			}
; rs232cmd.c 4470		}
	SYMB	LINE, 4470
_1129:
; rs232cmd.c 4471	}
	SYMB	LINE, 4471
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4472	
; rs232cmd.c 4473	/**************************************************************************/
; rs232cmd.c 4474	/* FactMainFMSDateUpd																		 	     RS232CMD.C	*/
; rs232cmd.c 4475	/*																																				*/
; rs232cmd.c 4476	/* Author:		Kim Engedahl, DEV, 000407	    															*/
; rs232cmd.c 4477	/* Revised:	  000614				     																					*/
; rs232cmd.c 4478	/*																																				*/
; rs232cmd.c 4479	/* Function:	--																													*/
; rs232cmd.c 4480	/* Remarks:		--																													*/
; rs232cmd.c 4481	/* Returns:		--																													*/
; rs232cmd.c 4482	/* Updates:		--																													*/
; rs232cmd.c 4483	/**************************************************************************/
; rs232cmd.c 4484	void FactMainFMSDateUpd( void)
; rs232cmd.c 4485	{
	ALIGN	1
	SYMB	LINE, 4485
	PUBLIC	_FactMainFMSDateUpd
_FactMainFMSDateUpd:
	SYMB	TYPE, 623, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMainFMSDateUpd", _FactMainFMSDateUpd, #623, 0, 0, 48
	SYMB	ALAB, _FactMainFMSDateUpd, #623
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4486		UI year, month, day;
; rs232cmd.c 4487		char buffer[20];
; rs232cmd.c 4488	
; rs232cmd.c 4489		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4489
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1143
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1143
; rs232cmd.c 4490		{
; rs232cmd.c 4491			if ( CmdRequest)
	SYMB	LINE, 4491
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1133
; rs232cmd.c 4492			{
; rs232cmd.c 4493				if ( ParCnt)
	SYMB	LINE, 4493
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1132
; rs232cmd.c 4494					SCPIError = SyntaxErr;
	SYMB	LINE, 4494
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1143
_1132:
; rs232cmd.c 4495				else
; rs232cmd.c 4496				{
; rs232cmd.c 4497					day = Calibration.UpdateDate % 100;
	SYMB	LINE, 4497
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R1,#SOF( _Calibration+102 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R4,#SOF( _Calibration+102 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R1,#SOF( _Calibration+102 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4498					month = ( Calibration.UpdateDate / 100) % 100;
	SYMB	LINE, 4498
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4499					year = ( Calibration.UpdateDate / 10000);
	SYMB	LINE, 4499
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R1,#SOF( _Calibration+102 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4500	
; rs232cmd.c 4501					sprintf( buffer, "%d,%d,%d\n", year, month, day);
	SYMB	LINE, 4501
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _183 )
	MOV.W	R0,#SOF( _183 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4502	
; rs232cmd.c 4503					rs232puts( buffer);
	SYMB	LINE, 4503
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4504				}
; rs232cmd.c 4505			}
	SYMB	LINE, 4505
	BR	_1143
_1133:
; rs232cmd.c 4506			else
; rs232cmd.c 4507			{
; rs232cmd.c 4508				if ( !PasswordProtected)
	SYMB	LINE, 4508
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1143
; rs232cmd.c 4509				{
; rs232cmd.c 4510					if (( ParCnt != 3) || (( sscanf( Cmd, "%d,%d,%d", &year, &month, &day)) != 3))
	SYMB	LINE, 4510
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1134
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _184 )
	MOV.W	R2,#SOF( _184 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1135
_1134:
; rs232cmd.c 4511						SCPIError = SyntaxErr;
	SYMB	LINE, 4511
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1143
_1135:
; rs232cmd.c 4512					else
; rs232cmd.c 4513					{
; rs232cmd.c 4514						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4514
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1136
; rs232cmd.c 4515							SCPIError = ExecErr;
	SYMB	LINE, 4515
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1143
_1136:
; rs232cmd.c 4516						else
; rs232cmd.c 4517						{
; rs232cmd.c 4518							Calibration.UpdateDate = day + 100*month + 10000*year;
	SYMB	LINE, 4518
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+102 )
	MOV.W	R2,#SOF( _Calibration+102 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4519						
; rs232cmd.c 4520						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4520
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4521						}
; rs232cmd.c 4522					}				
; rs232cmd.c 4523				}
; rs232cmd.c 4524			}
; rs232cmd.c 4525		}
	SYMB	LINE, 4525
_1143:
; rs232cmd.c 4526	}
	SYMB	LINE, 4526
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4527	
; rs232cmd.c 4528	/**************************************************************************/
; rs232cmd.c 4529	/* FactGenlockGenDate		 																 	     RS232CMD.C	*/
; rs232cmd.c 4530	/*																																				*/
; rs232cmd.c 4531	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 4532	/* Revised:	  000614				     																					*/
; rs232cmd.c 4533	/*																																				*/
; rs232cmd.c 4534	/* Function:	--																													*/
; rs232cmd.c 4535	/* Remarks:		--																													*/
; rs232cmd.c 4536	/* Returns:		--																													*/
; rs232cmd.c 4537	/* Updates:		--																													*/
; rs232cmd.c 4538	/**************************************************************************/
; rs232cmd.c 4539	void FactGenlockGenDate( void)
; rs232cmd.c 4540	{
	ALIGN	1
	SYMB	LINE, 4540
	PUBLIC	_FactGenlockGenDate
_FactGenlockGenDate:
	SYMB	TYPE, 624, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenDate", _FactGenlockGenDate, #624, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenDate, #624
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4541		UI year, month, day;
; rs232cmd.c 4542		char buffer[20];
; rs232cmd.c 4543	
; rs232cmd.c 4544		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4544
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1157
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1157
; rs232cmd.c 4545		{
; rs232cmd.c 4546			if ( CmdRequest)
	SYMB	LINE, 4546
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1147
; rs232cmd.c 4547			{
; rs232cmd.c 4548				if ( ParCnt)
	SYMB	LINE, 4548
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1146
; rs232cmd.c 4549					SCPIError = SyntaxErr;
	SYMB	LINE, 4549
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1157
_1146:
; rs232cmd.c 4550				else
; rs232cmd.c 4551				{
; rs232cmd.c 4552					day = Calibration.GenlockCalibration.Date % 100;
	SYMB	LINE, 4552
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R1,#SOF( _Calibration+106 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R4,#SOF( _Calibration+106 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R1,#SOF( _Calibration+106 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4553					month = ( Calibration.GenlockCalibration.Date / 100) % 100;
	SYMB	LINE, 4553
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4554					year = ( Calibration.GenlockCalibration.Date / 10000);
	SYMB	LINE, 4554
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R1,#SOF( _Calibration+106 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4555	
; rs232cmd.c 4556					sprintf( buffer, "%d,%d,%d\n", year, month, day);
	SYMB	LINE, 4556
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _183 )
	MOV.W	R0,#SOF( _183 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4557	
; rs232cmd.c 4558					rs232puts( buffer);
	SYMB	LINE, 4558
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4559				}
; rs232cmd.c 4560			}
	SYMB	LINE, 4560
	BR	_1157
_1147:
; rs232cmd.c 4561			else
; rs232cmd.c 4562			{
; rs232cmd.c 4563				if ( !PasswordProtected)
	SYMB	LINE, 4563
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1157
; rs232cmd.c 4564				{
; rs232cmd.c 4565					if (( ParCnt != 3) || (( sscanf( Cmd, "%d,%d,%d", &year, &month, &day)) != 3))
	SYMB	LINE, 4565
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1148
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _184 )
	MOV.W	R2,#SOF( _184 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1149
_1148:
; rs232cmd.c 4566						SCPIError = SyntaxErr;
	SYMB	LINE, 4566
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1157
_1149:
; rs232cmd.c 4567					else
; rs232cmd.c 4568					{
; rs232cmd.c 4569						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4569
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1150
; rs232cmd.c 4570							SCPIError = ExecErr;
	SYMB	LINE, 4570
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1157
_1150:
; rs232cmd.c 4571						else
; rs232cmd.c 4572						{
; rs232cmd.c 4573							Calibration.GenlockCalibration.Date = day + 100*month + 10000*year;
	SYMB	LINE, 4573
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+106 )
	MOV.W	R2,#SOF( _Calibration+106 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4574						
; rs232cmd.c 4575						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4575
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4576						}
; rs232cmd.c 4577					}				
; rs232cmd.c 4578				}
; rs232cmd.c 4579			}
; rs232cmd.c 4580		}
	SYMB	LINE, 4580
_1157:
; rs232cmd.c 4581	}
	SYMB	LINE, 4581
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4582	
; rs232cmd.c 4583	/**************************************************************************/
; rs232cmd.c 4584	/* FactGenlockGenVersion 																 	     RS232CMD.C	*/
; rs232cmd.c 4585	/*																																				*/
; rs232cmd.c 4586	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4587	/* Revised:	  000614				     																					*/
; rs232cmd.c 4588	/*																																				*/
; rs232cmd.c 4589	/* Function:	--																													*/
; rs232cmd.c 4590	/* Remarks:		--																													*/
; rs232cmd.c 4591	/* Returns:		--																													*/
; rs232cmd.c 4592	/* Updates:		--																													*/
; rs232cmd.c 4593	/**************************************************************************/
; rs232cmd.c 4594	void FactGenlockGenVersion( void)
; rs232cmd.c 4595	{
	ALIGN	1
	SYMB	LINE, 4595
	PUBLIC	_FactGenlockGenVersion
_FactGenlockGenVersion:
	SYMB	TYPE, 625, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenVersion", _FactGenlockGenVersion, #625, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenVersion, #625
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#0AH
	SYMB	SOFF, 14
	SYMB	TYPE, 626, 'Z', #2, 9
	SYMB	IDEN, "result", -14, #626, 130, 5
; rs232cmd.c 4596		char result[10];
; rs232cmd.c 4597	
; rs232cmd.c 4598		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4598
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1167
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1167
; rs232cmd.c 4599		{
; rs232cmd.c 4600			if ( CmdRequest)
	SYMB	LINE, 4600
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1162
; rs232cmd.c 4601			{
; rs232cmd.c 4602				if ( ParCnt)
	SYMB	LINE, 4602
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1160
; rs232cmd.c 4603					SCPIError = SyntaxErr;
	SYMB	LINE, 4603
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1167
_1160:
; rs232cmd.c 4604				else
; rs232cmd.c 4605				{
; rs232cmd.c 4606					if ( GenlockVersion( result) == OK)
	SYMB	LINE, 4606
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_GenlockVersion
	CMP.W	R0,#0FFFFH
	BNE	_1161
; rs232cmd.c 4607					{
; rs232cmd.c 4608						rs232puts( result);
	SYMB	LINE, 4608
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4609						rs232putchar( '\n');
	SYMB	LINE, 4609
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4610					}
	SYMB	LINE, 4610
	BR	_1167
_1161:
; rs232cmd.c 4611					else
; rs232cmd.c 4612						SCPIError = ExecErr;			
	SYMB	LINE, 4612
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 4613				}
; rs232cmd.c 4614			}
	SYMB	LINE, 4614
	BR	_1167
_1162:
; rs232cmd.c 4615			else
; rs232cmd.c 4616				SCPIError = SyntaxErr;
	SYMB	LINE, 4616
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4617		}
	SYMB	LINE, 4617
_1167:
; rs232cmd.c 4618	}
	SYMB	LINE, 4618
	ADD.W	R7,#0AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4619	
; rs232cmd.c 4620	/**************************************************************************/
; rs232cmd.c 4621	/* FactGenlockGenFRefDate																 	     RS232CMD.C	*/
; rs232cmd.c 4622	/*																																				*/
; rs232cmd.c 4623	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4624	/* Revised:	  000622				     																					*/
; rs232cmd.c 4625	/*																																				*/
; rs232cmd.c 4626	/* Function:	--																													*/
; rs232cmd.c 4627	/* Remarks:		--																													*/
; rs232cmd.c 4628	/* Returns:		--																													*/
; rs232cmd.c 4629	/* Updates:		--																													*/
; rs232cmd.c 4630	/**************************************************************************/
; rs232cmd.c 4631	void FactGenlockGenFRefDate( void)
; rs232cmd.c 4632	{
	ALIGN	1
	SYMB	LINE, 4632
	PUBLIC	_FactGenlockGenFRefDate
_FactGenlockGenFRefDate:
	SYMB	TYPE, 628, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenFRefDate", _FactGenlockGenFRefDate, #628, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenFRefDate, #628
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4633		UI year, month, day;
; rs232cmd.c 4634		char buffer[20];
; rs232cmd.c 4635	
; rs232cmd.c 4636		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4636
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1182
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1182
; rs232cmd.c 4637		{
; rs232cmd.c 4638			if ( CmdRequest)
	SYMB	LINE, 4638
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1172
; rs232cmd.c 4639			{
; rs232cmd.c 4640				if ( ParCnt)
	SYMB	LINE, 4640
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1171
; rs232cmd.c 4641					SCPIError = SyntaxErr;
	SYMB	LINE, 4641
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1182
_1171:
; rs232cmd.c 4642				else
; rs232cmd.c 4643				{
; rs232cmd.c 4644					day = Calibration.GenlockCalibration.DACFactDate % 100;
	SYMB	LINE, 4644
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R1,#SOF( _Calibration+110 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R4,#SOF( _Calibration+110 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R1,#SOF( _Calibration+110 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4645					month = ( Calibration.GenlockCalibration.DACFactDate / 100) % 100;
	SYMB	LINE, 4645
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4646					year = ( Calibration.GenlockCalibration.DACFactDate / 10000);
	SYMB	LINE, 4646
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R1,#SOF( _Calibration+110 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4647	
; rs232cmd.c 4648					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 4648
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1169 )
	MOV.W	R0,#SOF( _1169 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4649	
; rs232cmd.c 4650					rs232puts( buffer);
	SYMB	LINE, 4650
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4651				}
; rs232cmd.c 4652			}
	SYMB	LINE, 4652
	BR	_1182
_1172:
; rs232cmd.c 4653			else
; rs232cmd.c 4654			{
; rs232cmd.c 4655				if ( !PasswordProtected)
	SYMB	LINE, 4655
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1182
; rs232cmd.c 4656				{
; rs232cmd.c 4657					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 4657
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1173
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1170 )
	MOV.W	R2,#SOF( _1170 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1174
_1173:
; rs232cmd.c 4658						SCPIError = SyntaxErr;
	SYMB	LINE, 4658
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1182
_1174:
; rs232cmd.c 4659					else
; rs232cmd.c 4660					{
; rs232cmd.c 4661						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4661
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1175
; rs232cmd.c 4662							SCPIError = ExecErr;
	SYMB	LINE, 4662
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1182
_1175:
; rs232cmd.c 4663						else
; rs232cmd.c 4664						{
; rs232cmd.c 4665							Calibration.GenlockCalibration.DACFactDate = day + 100*month + 10000*year;
	SYMB	LINE, 4665
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+110 )
	MOV.W	R2,#SOF( _Calibration+110 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4666						
; rs232cmd.c 4667						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4667
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4668						}
; rs232cmd.c 4669					}				
; rs232cmd.c 4670				}
; rs232cmd.c 4671			}
; rs232cmd.c 4672		}
	SYMB	LINE, 4672
_1182:
; rs232cmd.c 4673	}
	SYMB	LINE, 4673
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4674	
; rs232cmd.c 4675	/**************************************************************************/
; rs232cmd.c 4676	/* FactGenlockGenFRefDAC 																 	     RS232CMD.C	*/
; rs232cmd.c 4677	/*																																				*/
; rs232cmd.c 4678	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4679	/* Revised:	  000622				     																					*/
; rs232cmd.c 4680	/*																																				*/
; rs232cmd.c 4681	/* Function:	--																													*/
; rs232cmd.c 4682	/* Remarks:		--																													*/
; rs232cmd.c 4683	/* Returns:		--																													*/
; rs232cmd.c 4684	/* Updates:		--																													*/
; rs232cmd.c 4685	/**************************************************************************/
; rs232cmd.c 4686	void FactGenlockGenFRefDAC( void)
; rs232cmd.c 4687	{
	ALIGN	1
	SYMB	LINE, 4687
	PUBLIC	_FactGenlockGenFRefDAC
_FactGenlockGenFRefDAC:
	SYMB	TYPE, 629, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenFRefDAC", _FactGenlockGenFRefDAC, #629, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenFRefDAC, #629
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#016H
	SYMB	SOFF, 26
	SYMB	IDEN, "buffer", -26, #563, 130, 5
	SYMB	IDEN, "DACValue", -6, #18, 130, 5
; rs232cmd.c 4688		char buffer[20];
; rs232cmd.c 4689		UI DACValue;
; rs232cmd.c 4690	
; rs232cmd.c 4691		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4691
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1195
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1195
; rs232cmd.c 4692		{
; rs232cmd.c 4693			if ( CmdRequest)
	SYMB	LINE, 4693
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1187
; rs232cmd.c 4694			{
; rs232cmd.c 4695				if ( ParCnt)
	SYMB	LINE, 4695
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1186
; rs232cmd.c 4696					SCPIError = SyntaxErr;
	SYMB	LINE, 4696
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1195
_1186:
; rs232cmd.c 4697				else
; rs232cmd.c 4698				{
; rs232cmd.c 4699					sprintf( buffer, "%u\n", Calibration.GenlockCalibration.DACFactValue);
	SYMB	LINE, 4699
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+118 )
	MOV.W	R0,#SOF( _Calibration+118 )
	MOV.W	R0,[R0]
	PUSH.W	R0
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 32
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 26
; rs232cmd.c 4700	
; rs232cmd.c 4701					rs232puts( buffer);
	SYMB	LINE, 4701
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4702				}
; rs232cmd.c 4703			}
	SYMB	LINE, 4703
	BR	_1195
_1187:
; rs232cmd.c 4704			else
; rs232cmd.c 4705			{
; rs232cmd.c 4706				if ( !PasswordProtected)
	SYMB	LINE, 4706
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1195
; rs232cmd.c 4707				{
; rs232cmd.c 4708					if (( ParCnt != 1) || (( sscanf( Cmd, "%u", &DACValue)) != 1))
	SYMB	LINE, 4708
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1188
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	PUSH.W	R2, R3
	SYMB	SOFF, 30
	MOV.W	R3,#SEG( _1185 )
	MOV.W	R2,#SOF( _1185 )
	PUSH.W	R2, R3
	SYMB	SOFF, 34
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 26
	CMP.W	R0,#01H
	BEQ	_1189
_1188:
; rs232cmd.c 4709						SCPIError = SyntaxErr;
	SYMB	LINE, 4709
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1195
_1189:
; rs232cmd.c 4710					else
; rs232cmd.c 4711					{
; rs232cmd.c 4712						Calibration.GenlockCalibration.DACFactValue = DACValue;
	SYMB	LINE, 4712
	MOV.W	R0,[R7+20]
	MOV.B	ES,#SEG( _Calibration+118 )
	MOV.W	R1,#SOF( _Calibration+118 )
	MOV.W	[R1],R0
; rs232cmd.c 4713								
; rs232cmd.c 4714						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4714
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4715					}
; rs232cmd.c 4716				}
; rs232cmd.c 4717			}
; rs232cmd.c 4718		}
	SYMB	LINE, 4718
_1195:
; rs232cmd.c 4719	}
	SYMB	LINE, 4719
	ADD.W	R7,#016H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4720	
; rs232cmd.c 4721	/**************************************************************************/
; rs232cmd.c 4722	/* FactGenlockGenURefDate																 	     RS232CMD.C	*/
; rs232cmd.c 4723	/*																																				*/
; rs232cmd.c 4724	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4725	/* Revised:	  000622				     																					*/
; rs232cmd.c 4726	/*																																				*/
; rs232cmd.c 4727	/* Function:	--																													*/
; rs232cmd.c 4728	/* Remarks:		--																													*/
; rs232cmd.c 4729	/* Returns:		--																													*/
; rs232cmd.c 4730	/* Updates:		--																													*/
; rs232cmd.c 4731	/**************************************************************************/
; rs232cmd.c 4732	void FactGenlockGenURefDate( void)
; rs232cmd.c 4733	{
	ALIGN	1
	SYMB	LINE, 4733
	PUBLIC	_FactGenlockGenURefDate
_FactGenlockGenURefDate:
	SYMB	TYPE, 630, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenURefDate", _FactGenlockGenURefDate, #630, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenURefDate, #630
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4734		UI year, month, day;
; rs232cmd.c 4735		char buffer[20];
; rs232cmd.c 4736	
; rs232cmd.c 4737		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4737
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1208
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1208
; rs232cmd.c 4738		{
; rs232cmd.c 4739			if ( CmdRequest)
	SYMB	LINE, 4739
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1199
; rs232cmd.c 4740			{
; rs232cmd.c 4741				if ( ParCnt)
	SYMB	LINE, 4741
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1198
; rs232cmd.c 4742					SCPIError = SyntaxErr;
	SYMB	LINE, 4742
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1208
_1198:
; rs232cmd.c 4743				else
; rs232cmd.c 4744				{
; rs232cmd.c 4745					day = Calibration.GenlockCalibration.DACUserDate % 100;
	SYMB	LINE, 4745
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R1,#SOF( _Calibration+114 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R4,#SOF( _Calibration+114 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R1,#SOF( _Calibration+114 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 4746					month = ( Calibration.GenlockCalibration.DACUserDate / 100) % 100;
	SYMB	LINE, 4746
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 4747					year = ( Calibration.GenlockCalibration.DACUserDate / 10000);
	SYMB	LINE, 4747
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R1,#SOF( _Calibration+114 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 4748	
; rs232cmd.c 4749					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 4749
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1169 )
	MOV.W	R0,#SOF( _1169 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 4750	
; rs232cmd.c 4751					rs232puts( buffer);
	SYMB	LINE, 4751
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4752				}
; rs232cmd.c 4753			}
	SYMB	LINE, 4753
	BR	_1208
_1199:
; rs232cmd.c 4754			else
; rs232cmd.c 4755			{
; rs232cmd.c 4756				if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 4756
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1200
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1170 )
	MOV.W	R2,#SOF( _1170 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1201
_1200:
; rs232cmd.c 4757					SCPIError = SyntaxErr;
	SYMB	LINE, 4757
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1208
_1201:
; rs232cmd.c 4758				else
; rs232cmd.c 4759				{
; rs232cmd.c 4760					if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4760
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1202
; rs232cmd.c 4761						SCPIError = ExecErr;
	SYMB	LINE, 4761
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1208
_1202:
; rs232cmd.c 4762					else
; rs232cmd.c 4763					{
; rs232cmd.c 4764						Calibration.GenlockCalibration.DACUserDate = day + 100*month + 10000*year;
	SYMB	LINE, 4764
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+114 )
	MOV.W	R2,#SOF( _Calibration+114 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4765						
; rs232cmd.c 4766					 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4766
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4767					}				
; rs232cmd.c 4768				}
; rs232cmd.c 4769			}
; rs232cmd.c 4770		}
	SYMB	LINE, 4770
_1208:
; rs232cmd.c 4771	}
	SYMB	LINE, 4771
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4772	
; rs232cmd.c 4773	/**************************************************************************/
; rs232cmd.c 4774	/* FactGenlockGenURefDAC																 	     RS232CMD.C	*/
; rs232cmd.c 4775	/*																																				*/
; rs232cmd.c 4776	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4777	/* Revised:	  000622				     																					*/
; rs232cmd.c 4778	/*																																				*/
; rs232cmd.c 4779	/* Function:	--																													*/
; rs232cmd.c 4780	/* Remarks:		--																													*/
; rs232cmd.c 4781	/* Returns:		--																													*/
; rs232cmd.c 4782	/* Updates:		--																													*/
; rs232cmd.c 4783	/**************************************************************************/
; rs232cmd.c 4784	void FactGenlockGenURefDAC( void)
; rs232cmd.c 4785	{
	ALIGN	1
	SYMB	LINE, 4785
	PUBLIC	_FactGenlockGenURefDAC
_FactGenlockGenURefDAC:
	SYMB	TYPE, 631, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenURefDAC", _FactGenlockGenURefDAC, #631, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenURefDAC, #631
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#016H
	SYMB	SOFF, 26
	SYMB	IDEN, "buffer", -26, #563, 130, 5
	SYMB	IDEN, "DACValue", -6, #18, 130, 5
; rs232cmd.c 4786		char buffer[20];
; rs232cmd.c 4787		UI DACValue;
; rs232cmd.c 4788	
; rs232cmd.c 4789		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4789
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1219
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1219
; rs232cmd.c 4790		{
; rs232cmd.c 4791			if ( CmdRequest)
	SYMB	LINE, 4791
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1212
; rs232cmd.c 4792			{
; rs232cmd.c 4793				if ( ParCnt)
	SYMB	LINE, 4793
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1211
; rs232cmd.c 4794					SCPIError = SyntaxErr;
	SYMB	LINE, 4794
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1219
_1211:
; rs232cmd.c 4795				else
; rs232cmd.c 4796				{
; rs232cmd.c 4797					sprintf( buffer, "%u\n", Calibration.GenlockCalibration.DACUserValue);
	SYMB	LINE, 4797
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+120 )
	MOV.W	R0,#SOF( _Calibration+120 )
	MOV.W	R0,[R0]
	PUSH.W	R0
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 32
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 26
; rs232cmd.c 4798	
; rs232cmd.c 4799					rs232puts( buffer);
	SYMB	LINE, 4799
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4800				}
; rs232cmd.c 4801			}
	SYMB	LINE, 4801
	BR	_1219
_1212:
; rs232cmd.c 4802			else
; rs232cmd.c 4803			{
; rs232cmd.c 4804				if (( ParCnt != 1) || (( sscanf( Cmd, "%u", &DACValue)) != 1))
	SYMB	LINE, 4804
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BNE	_1213
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	PUSH.W	R2, R3
	SYMB	SOFF, 30
	MOV.W	R3,#SEG( _1185 )
	MOV.W	R2,#SOF( _1185 )
	PUSH.W	R2, R3
	SYMB	SOFF, 34
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 26
	CMP.W	R0,#01H
	BEQ	_1214
_1213:
; rs232cmd.c 4805					SCPIError = SyntaxErr;
	SYMB	LINE, 4805
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1219
_1214:
; rs232cmd.c 4806				else
; rs232cmd.c 4807				{
; rs232cmd.c 4808					Calibration.GenlockCalibration.DACUserValue = DACValue;
	SYMB	LINE, 4808
	MOV.W	R0,[R7+20]
	MOV.B	ES,#SEG( _Calibration+120 )
	MOV.W	R1,#SOF( _Calibration+120 )
	MOV.W	[R1],R0
; rs232cmd.c 4809								
; rs232cmd.c 4810					NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4810
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4811				}
; rs232cmd.c 4812			}
; rs232cmd.c 4813		}
	SYMB	LINE, 4813
_1219:
; rs232cmd.c 4814	}
	SYMB	LINE, 4814
	ADD.W	R7,#016H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4815	
; rs232cmd.c 4816	/**************************************************************************/
; rs232cmd.c 4817	/* FactGenlockGenHPHZero 																 	     RS232CMD.C	*/
; rs232cmd.c 4818	/*																																				*/
; rs232cmd.c 4819	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 4820	/* Revised:	  000622				     																					*/
; rs232cmd.c 4821	/*																																				*/
; rs232cmd.c 4822	/* Function:	--																													*/
; rs232cmd.c 4823	/* Remarks:		--																													*/
; rs232cmd.c 4824	/* Returns:		--																													*/
; rs232cmd.c 4825	/* Updates:		--																													*/
; rs232cmd.c 4826	/**************************************************************************/
; rs232cmd.c 4827	void FactGenlockGenHPHZero( void)
; rs232cmd.c 4828	{
	ALIGN	1
	SYMB	LINE, 4828
	PUBLIC	_FactGenlockGenHPHZero
_FactGenlockGenHPHZero:
	SYMB	TYPE, 632, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenHPHZero", _FactGenlockGenHPHZero, #632, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenHPHZero, #632
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "buffer", -42, #606, 130, 5
	SYMB	IDEN, "HPHZeroG", -12, #7, 130, 5
	SYMB	IDEN, "HPHZeroM", -8, #7, 130, 5
; rs232cmd.c 4829		char buffer[30];
; rs232cmd.c 4830		UL HPHZeroG, HPHZeroM;
; rs232cmd.c 4831	
; rs232cmd.c 4832		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4832
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1232
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1232
; rs232cmd.c 4833		{
; rs232cmd.c 4834			if ( CmdRequest)
	SYMB	LINE, 4834
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1224
; rs232cmd.c 4835			{
; rs232cmd.c 4836				if ( ParCnt)
	SYMB	LINE, 4836
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1223
; rs232cmd.c 4837					SCPIError = SyntaxErr;
	SYMB	LINE, 4837
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1232
_1223:
; rs232cmd.c 4838				else
; rs232cmd.c 4839				{
; rs232cmd.c 4840					sprintf( buffer, "%lu,%lu\n", Calibration.GenlockCalibration.HPHZeroG, 
; rs232cmd.c 4841																		    Calibration.GenlockCalibration.HPHZeroM);
	SYMB	LINE, 4841
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+122 )
	MOV.W	R1,#SOF( _Calibration+122 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _Calibration+130 )
	MOV.W	R3,#SOF( _Calibration+130 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	PUSH.W	R0, R1
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _1222 )
	MOV.W	R0,#SOF( _1222 )
	PUSH.W	R0, R1
	SYMB	SOFF, 54
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
; rs232cmd.c 4842					rs232puts( buffer);
	SYMB	LINE, 4842
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4843				}
; rs232cmd.c 4844			}
	SYMB	LINE, 4844
	BR	_1232
_1224:
; rs232cmd.c 4845			else
; rs232cmd.c 4846			{
; rs232cmd.c 4847				if ( !PasswordProtected)
	SYMB	LINE, 4847
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1232
; rs232cmd.c 4848				{
; rs232cmd.c 4849					if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &HPHZeroG, &HPHZeroM)) != 2))
	SYMB	LINE, 4849
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1225
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+34
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1034 )
	MOV.W	R2,#SOF( _1034 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1226
_1225:
; rs232cmd.c 4850						SCPIError = SyntaxErr;
	SYMB	LINE, 4850
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1232
_1226:
; rs232cmd.c 4851					else
; rs232cmd.c 4852					{
; rs232cmd.c 4853						Calibration.GenlockCalibration.HPHZeroG = HPHZeroG;
	SYMB	LINE, 4853
	MOV.W	R1,[R7+32]
	MOV.W	R0,[R7+30]
	MOV.B	ES,#SEG( _Calibration+122 )
	MOV.W	R2,#SOF( _Calibration+122 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4854						Calibration.GenlockCalibration.HPHZeroM = HPHZeroM;
	SYMB	LINE, 4854
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	MOV.B	ES,#SEG( _Calibration+130 )
	MOV.W	R2,#SOF( _Calibration+130 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4855					
; rs232cmd.c 4856						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4856
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4857					}
; rs232cmd.c 4858				}
; rs232cmd.c 4859			}
; rs232cmd.c 4860		}
	SYMB	LINE, 4860
_1232:
; rs232cmd.c 4861	}
	SYMB	LINE, 4861
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4862	
; rs232cmd.c 4863	/**************************************************************************/
; rs232cmd.c 4864	/* FactGenlockGenPhase	 																 	     RS232CMD.C	*/
; rs232cmd.c 4865	/*																																				*/
; rs232cmd.c 4866	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 4867	/* Revised:	  000622				     																					*/
; rs232cmd.c 4868	/*																																				*/
; rs232cmd.c 4869	/* Function:	--																													*/
; rs232cmd.c 4870	/* Remarks:		--																													*/
; rs232cmd.c 4871	/* Returns:		--																													*/
; rs232cmd.c 4872	/* Updates:		--																													*/
; rs232cmd.c 4873	/**************************************************************************/
; rs232cmd.c 4874	void FactGenlockGenPhase( void)
; rs232cmd.c 4875	{
	ALIGN	1
	SYMB	LINE, 4875
	PUBLIC	_FactGenlockGenPhase
_FactGenlockGenPhase:
	SYMB	TYPE, 633, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactGenlockGenPhase", _FactGenlockGenPhase, #633, 0, 0, 48
	SYMB	ALAB, _FactGenlockGenPhase, #633
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "buffer", -42, #606, 130, 5
	SYMB	IDEN, "PhaseG", -12, #7, 130, 5
	SYMB	IDEN, "PhaseM", -8, #7, 130, 5
; rs232cmd.c 4876		char buffer[30];
; rs232cmd.c 4877		UL PhaseG, PhaseM;
; rs232cmd.c 4878	
; rs232cmd.c 4879		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4879
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1244
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1244
; rs232cmd.c 4880		{
; rs232cmd.c 4881			if ( CmdRequest)
	SYMB	LINE, 4881
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1236
; rs232cmd.c 4882			{
; rs232cmd.c 4883				if ( ParCnt)
	SYMB	LINE, 4883
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1235
; rs232cmd.c 4884					SCPIError = SyntaxErr;
	SYMB	LINE, 4884
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1244
_1235:
; rs232cmd.c 4885				else
; rs232cmd.c 4886				{
; rs232cmd.c 4887					sprintf( buffer, "%lu,%lu\n", Calibration.GenlockCalibration.PhaseG, 
; rs232cmd.c 4888																		    Calibration.GenlockCalibration.PhaseM);
	SYMB	LINE, 4888
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+126 )
	MOV.W	R1,#SOF( _Calibration+126 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _Calibration+134 )
	MOV.W	R3,#SOF( _Calibration+134 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	PUSH.W	R0, R1
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _1222 )
	MOV.W	R0,#SOF( _1222 )
	PUSH.W	R0, R1
	SYMB	SOFF, 54
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
; rs232cmd.c 4889					rs232puts( buffer);
	SYMB	LINE, 4889
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4890				}
; rs232cmd.c 4891			}
	SYMB	LINE, 4891
	BR	_1244
_1236:
; rs232cmd.c 4892			else
; rs232cmd.c 4893			{
; rs232cmd.c 4894				if ( !PasswordProtected)
	SYMB	LINE, 4894
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1244
; rs232cmd.c 4895				{
; rs232cmd.c 4896					if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &PhaseG, &PhaseM)) != 2))
	SYMB	LINE, 4896
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1237
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+34
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1034 )
	MOV.W	R2,#SOF( _1034 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1238
_1237:
; rs232cmd.c 4897						SCPIError = SyntaxErr;
	SYMB	LINE, 4897
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1244
_1238:
; rs232cmd.c 4898					else
; rs232cmd.c 4899					{
; rs232cmd.c 4900						Calibration.GenlockCalibration.PhaseG = PhaseG;
	SYMB	LINE, 4900
	MOV.W	R1,[R7+32]
	MOV.W	R0,[R7+30]
	MOV.B	ES,#SEG( _Calibration+126 )
	MOV.W	R2,#SOF( _Calibration+126 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4901						Calibration.GenlockCalibration.PhaseM = PhaseM;
	SYMB	LINE, 4901
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	MOV.B	ES,#SEG( _Calibration+134 )
	MOV.W	R2,#SOF( _Calibration+134 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 4902					
; rs232cmd.c 4903						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4903
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4904					}
; rs232cmd.c 4905				}
; rs232cmd.c 4906			}
; rs232cmd.c 4907		}
	SYMB	LINE, 4907
_1244:
; rs232cmd.c 4908	}
	SYMB	LINE, 4908
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4909	
; rs232cmd.c 4910	/**************************************************************************/
; rs232cmd.c 4911	/* FactBBGenDate	 																			 	     RS232CMD.C	*/
; rs232cmd.c 4912	/*																																				*/
; rs232cmd.c 4913	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 4914	/* Revised:	  000622				     																					*/
; rs232cmd.c 4915	/*																																				*/
; rs232cmd.c 4916	/* Function:	--																													*/
; rs232cmd.c 4917	/* Remarks:		--																													*/
; rs232cmd.c 4918	/* Returns:		--																													*/
; rs232cmd.c 4919	/* Updates:		--																													*/
; rs232cmd.c 4920	/**************************************************************************/
; rs232cmd.c 4921	void FactBBGenDate( void)
; rs232cmd.c 4922	{
	ALIGN	1
	SYMB	LINE, 4922
	PUBLIC	_FactBBGenDate
_FactBBGenDate:
	SYMB	TYPE, 634, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenDate", _FactBBGenDate, #634, 0, 0, 48
	SYMB	ALAB, _FactBBGenDate, #634
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01EH
	SYMB	SOFF, 34
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 4923		UI year, month, day;
; rs232cmd.c 4924		char buffer[20];
; rs232cmd.c 4925	
; rs232cmd.c 4926		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4926
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1258
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1258
; rs232cmd.c 4927		{
; rs232cmd.c 4928			if ( CmdRequest)
	SYMB	LINE, 4928
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1248
; rs232cmd.c 4929			{
; rs232cmd.c 4930				if ( ParCnt)
	SYMB	LINE, 4930
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1247
; rs232cmd.c 4931					SCPIError = SyntaxErr;
	SYMB	LINE, 4931
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1258
_1247:
; rs232cmd.c 4932				else
; rs232cmd.c 4933				{
; rs232cmd.c 4934					day = Calibration.BBCalibration[Suffix[0]].Date % 100;
	SYMB	LINE, 4934
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+138 )
	MOV.W	R1,[R0+SOF( _Calibration+140 )]
	MOV.W	R0,[R0+SOF( _Calibration+138 )]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	FCALL	__UMODL
	MOV.W	[R7+8],R0
; rs232cmd.c 4935					month = ( Calibration.BBCalibration[Suffix[0]].Date / 100) % 100;
	SYMB	LINE, 4935
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+6],R0
; rs232cmd.c 4936					year = ( Calibration.BBCalibration[Suffix[0]].Date / 10000);
	SYMB	LINE, 4936
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	FCALL	__UDIVL
	MOV.W	[R7+4],R0
; rs232cmd.c 4937	
; rs232cmd.c 4938					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 4938
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+10
	MOV.W	R0,[R7+8]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R0,[R7+8]
	PUSH.W	R0
	SYMB	SOFF, 38
	MOV.W	R0,[R7+8]
	PUSH.W	R0
	SYMB	SOFF, 40
	MOV.W	R1,#SEG( _1169 )
	MOV.W	R0,#SOF( _1169 )
	PUSH.W	R0, R1
	SYMB	SOFF, 44
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 34
; rs232cmd.c 4939	
; rs232cmd.c 4940					rs232puts( buffer);
	SYMB	LINE, 4940
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4941				}
; rs232cmd.c 4942			}
	SYMB	LINE, 4942
	BR	_1258
_1248:
; rs232cmd.c 4943			else
; rs232cmd.c 4944			{
; rs232cmd.c 4945				if ( !PasswordProtected)
	SYMB	LINE, 4945
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1258
; rs232cmd.c 4946				{
; rs232cmd.c 4947					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 4947
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1249
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+4
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+8
	PUSH.W	R0, R1
	SYMB	SOFF, 38
	PUSH.W	R4, R5
	SYMB	SOFF, 42
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R3,#SEG( _1170 )
	MOV.W	R2,#SOF( _1170 )
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 34
	CMP.W	R0,#03H
	BEQ	_1250
_1249:
; rs232cmd.c 4948						SCPIError = SyntaxErr;
	SYMB	LINE, 4948
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1258
_1250:
; rs232cmd.c 4949					else
; rs232cmd.c 4950					{
; rs232cmd.c 4951						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 4951
	MOV.W	R0,[R7+4]
	MOV.W	R1,[R7+6]
	MOV.W	R2,[R7+8]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1251
; rs232cmd.c 4952							SCPIError = ExecErr;
	SYMB	LINE, 4952
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1258
_1251:
; rs232cmd.c 4953						else
; rs232cmd.c 4954						{
; rs232cmd.c 4955							Calibration.BBCalibration[Suffix[0]].Date = day + 100*month + 10000*year;
	SYMB	LINE, 4955
	MOV.W	R0,[R7+6]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+8]
	MOV.W	R2,[R7+4]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R2,#SOF( _Suffix )
	MOV.W	R2,[R2]
	MULU.W	R2,#014H
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _Calibration+138 )
	MOV.W	[R2+SOF( _Calibration+138 )],R0
	MOV.W	[R2+SOF( _Calibration+140 )],R1
; rs232cmd.c 4956						
; rs232cmd.c 4957						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 4957
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 4958						}
; rs232cmd.c 4959					}				
; rs232cmd.c 4960				}
; rs232cmd.c 4961			}
; rs232cmd.c 4962		}
	SYMB	LINE, 4962
_1258:
; rs232cmd.c 4963	}
	SYMB	LINE, 4963
	ADD.W	R7,#01EH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 4964	
; rs232cmd.c 4965	/**************************************************************************/
; rs232cmd.c 4966	/* FactBBGenVersion																			 	     RS232CMD.C	*/
; rs232cmd.c 4967	/*																																				*/
; rs232cmd.c 4968	/* Author:		Kim Engedahl, DEV, 000504	    															*/
; rs232cmd.c 4969	/* Revised:	  000614				     																					*/
; rs232cmd.c 4970	/*																																				*/
; rs232cmd.c 4971	/* Function:	--																													*/
; rs232cmd.c 4972	/* Remarks:		--																													*/
; rs232cmd.c 4973	/* Returns:		--																													*/
; rs232cmd.c 4974	/* Updates:		--																													*/
; rs232cmd.c 4975	/**************************************************************************/
; rs232cmd.c 4976	void FactBBGenVersion( void)
; rs232cmd.c 4977	{
	ALIGN	1
	SYMB	LINE, 4977
	PUBLIC	_FactBBGenVersion
_FactBBGenVersion:
	SYMB	TYPE, 635, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenVersion", _FactBBGenVersion, #635, 0, 0, 48
	SYMB	ALAB, _FactBBGenVersion, #635
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#0AH
	SYMB	SOFF, 14
	SYMB	IDEN, "result", -14, #626, 130, 5
; rs232cmd.c 4978		char result[10];
; rs232cmd.c 4979	
; rs232cmd.c 4980		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 4980
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1269
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1269
; rs232cmd.c 4981		{
; rs232cmd.c 4982			if ( CmdRequest)
	SYMB	LINE, 4982
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1264
; rs232cmd.c 4983			{
; rs232cmd.c 4984				if ( ParCnt || Suffix[0])
	SYMB	LINE, 4984
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BNE	_1261
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	BEQ	_1262
_1261:
; rs232cmd.c 4985					SCPIError = SyntaxErr;
	SYMB	LINE, 4985
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1269
_1262:
; rs232cmd.c 4986				else
; rs232cmd.c 4987				{
; rs232cmd.c 4988					if ( BBVersion( result) == OK)
	SYMB	LINE, 4988
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_BBVersion
	CMP.W	R0,#0FFFFH
	BNE	_1263
; rs232cmd.c 4989					{
; rs232cmd.c 4990						rs232puts( result);
	SYMB	LINE, 4990
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 4991						rs232putchar( '\n');
	SYMB	LINE, 4991
	MOV.B	R0L,#0AH
	CALL	_rs232putchar
; rs232cmd.c 4992					}
	SYMB	LINE, 4992
	BR	_1269
_1263:
; rs232cmd.c 4993					else
; rs232cmd.c 4994						SCPIError = ExecErr;			
	SYMB	LINE, 4994
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
; rs232cmd.c 4995				}
; rs232cmd.c 4996			}
	SYMB	LINE, 4996
	BR	_1269
_1264:
; rs232cmd.c 4997			else
; rs232cmd.c 4998				SCPIError = SyntaxErr;
	SYMB	LINE, 4998
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 4999		}
	SYMB	LINE, 4999
_1269:
; rs232cmd.c 5000	}
	SYMB	LINE, 5000
	ADD.W	R7,#0AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5001	
; rs232cmd.c 5002	/**************************************************************************/
; rs232cmd.c 5003	/* FactBBGenSignal																			 	     RS232CMD.C	*/
; rs232cmd.c 5004	/*																																				*/
; rs232cmd.c 5005	/* Author:		Kim Engedahl, DEV, 000503	    															*/
; rs232cmd.c 5006	/* Revised:	  000614			     																						*/
; rs232cmd.c 5007	/*																																				*/
; rs232cmd.c 5008	/* Function:	--																													*/
; rs232cmd.c 5009	/* Remarks:		--																													*/
; rs232cmd.c 5010	/* Returns:		--																													*/
; rs232cmd.c 5011	/* Updates:		--																													*/
; rs232cmd.c 5012	/**************************************************************************/
; rs232cmd.c 5013	void FactBBGenSignal( void)
; rs232cmd.c 5014	{
	ALIGN	1
	SYMB	LINE, 5014
	PUBLIC	_FactBBGenSignal
_FactBBGenSignal:
	SYMB	TYPE, 636, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenSignal", _FactBBGenSignal, #636, 0, 0, 0
	SYMB	ALAB, _FactBBGenSignal, #636
	SYMB	IDEN, "signal", -1, #16, 130, 5
	SYMB	LTIM, "signal", -1, 0, 69
; rs232cmd.c 5015		int signal;
; rs232cmd.c 5016	
; rs232cmd.c 5017		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5017
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1282
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1282
; rs232cmd.c 5018		{
; rs232cmd.c 5019			if ( CmdRequest)
	SYMB	LINE, 5019
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1271
; rs232cmd.c 5020				SCPIError = SyntaxErr;
	SYMB	LINE, 5020
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_1271:
; rs232cmd.c 5021			else
; rs232cmd.c 5022			{
; rs232cmd.c 5023				if ( !PasswordProtected)
	SYMB	LINE, 5023
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1282
; rs232cmd.c 5024				{
; rs232cmd.c 5025					if ( ParCnt != 1)
	SYMB	LINE, 5025
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_1272
; rs232cmd.c 5026						SCPIError = SyntaxErr;
	SYMB	LINE, 5026
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	RET
_1272:
; rs232cmd.c 5027					else
; rs232cmd.c 5028					{
; rs232cmd.c 5029						signal = FindParameter( Cmd, FactBBGenSignalPar);
	SYMB	LINE, 5029
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.W	R3,#SEG( _FactBBGenSignalPar )
	MOV.W	R2,#SOF( _FactBBGenSignalPar )
	CALL	_FindParameter
	SYMB	LTIM, "signal", 2, 0, 205
; rs232cmd.c 5030		
; rs232cmd.c 5031						switch ( signal)
	SYMB	LINE, 5031
	CMP.W	R0,#00H
	BEQ	_1273
	CMP.W	R0,#01H
	BEQ	_1274
	BR	_1275
; rs232cmd.c 5032						{
; rs232cmd.c 5033							case 0:
	SYMB	LINE, 5033
_1273:
; rs232cmd.c 5034								BBControlPort = 0;
	SYMB	LINE, 5034
	MOV.B	ES,#SEG( _BBControlPort )
	MOV.W	R0,#SOF( _BBControlPort )
	MOV.W	[R0],#00H
; rs232cmd.c 5035								break;
	SYMB	LINE, 5035
	RET
; rs232cmd.c 5036	
; rs232cmd.c 5037							case 1:
	SYMB	LINE, 5037
_1274:
; rs232cmd.c 5038								BBControlPort = 1;
	SYMB	LINE, 5038
	MOV.B	ES,#SEG( _BBControlPort )
	MOV.W	R0,#SOF( _BBControlPort )
	MOV.W	[R0],#01H
; rs232cmd.c 5039								break;
	SYMB	LINE, 5039
	RET
; rs232cmd.c 5040	
; rs232cmd.c 5041							default:
	SYMB	LINE, 5041
_1275:
; rs232cmd.c 5042								SCPIError = DataOutOfRange;
	SYMB	LINE, 5042
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#021H
; rs232cmd.c 5043								break;
; rs232cmd.c 5044						}
; rs232cmd.c 5045					}
; rs232cmd.c 5046				}
; rs232cmd.c 5047			}
; rs232cmd.c 5048		}
	SYMB	LINE, 5048
_1282:
; rs232cmd.c 5049	}
	SYMB	LINE, 5049
	RET
	SYMB	LTIM, "signal", 2, 0, 77
	SYMB	EFUN
; rs232cmd.c 5050	
; rs232cmd.c 5051	/**************************************************************************/
; rs232cmd.c 5052	/* FactBBGenPhase																				 	     RS232CMD.C	*/
; rs232cmd.c 5053	/*																																				*/
; rs232cmd.c 5054	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5055	/* Revised:	  000622				     																					*/
; rs232cmd.c 5056	/*																																				*/
; rs232cmd.c 5057	/* Function:	--																													*/
; rs232cmd.c 5058	/* Remarks:		--																													*/
; rs232cmd.c 5059	/* Returns:		--																													*/
; rs232cmd.c 5060	/* Updates:		--																													*/
; rs232cmd.c 5061	/**************************************************************************/
; rs232cmd.c 5062	void FactBBGenPhase( void)
; rs232cmd.c 5063	{
	ALIGN	1
	SYMB	LINE, 5063
	PUBLIC	_FactBBGenPhase
_FactBBGenPhase:
	SYMB	TYPE, 637, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenPhase", _FactBBGenPhase, #637, 0, 0, 48
	SYMB	ALAB, _FactBBGenPhase, #637
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "buffer", -42, #606, 130, 5
	SYMB	IDEN, "PhaseG", -12, #7, 130, 5
	SYMB	IDEN, "PhaseM", -8, #7, 130, 5
; rs232cmd.c 5064		char buffer[30];
; rs232cmd.c 5065		UL PhaseG, PhaseM;
; rs232cmd.c 5066	
; rs232cmd.c 5067		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5067
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1293
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1293
; rs232cmd.c 5068		{
; rs232cmd.c 5069			if ( CmdRequest)
	SYMB	LINE, 5069
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1285
; rs232cmd.c 5070			{
; rs232cmd.c 5071				if ( ParCnt)
	SYMB	LINE, 5071
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1284
; rs232cmd.c 5072					SCPIError = SyntaxErr;
	SYMB	LINE, 5072
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1293
_1284:
; rs232cmd.c 5073				else
; rs232cmd.c 5074				{
; rs232cmd.c 5075					sprintf( buffer, "%lu,%lu\n", Calibration.BBCalibration[Suffix[0]].PhaseG, 
; rs232cmd.c 5076																		    Calibration.BBCalibration[Suffix[0]].PhaseM);
	SYMB	LINE, 5076
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+142 )
	MOV.W	R2,[R0+SOF( _Calibration+142 )]
	MOV.W	R3,[R0+SOF( _Calibration+144 )]
	MOV.B	ES,#SEG( _Calibration+148 )
	MOV.W	R1,[R0+SOF( _Calibration+150 )]
	MOV.W	R0,[R0+SOF( _Calibration+148 )]
	PUSH.W	R0, R1
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _1222 )
	MOV.W	R0,#SOF( _1222 )
	PUSH.W	R0, R1
	SYMB	SOFF, 54
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
; rs232cmd.c 5077					rs232puts( buffer);
	SYMB	LINE, 5077
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5078				}
; rs232cmd.c 5079			}
	SYMB	LINE, 5079
	BR	_1293
_1285:
; rs232cmd.c 5080			else
; rs232cmd.c 5081			{
; rs232cmd.c 5082				if ( !PasswordProtected)
	SYMB	LINE, 5082
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1293
; rs232cmd.c 5083				{
; rs232cmd.c 5084					if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &PhaseG, &PhaseM)) != 2))
	SYMB	LINE, 5084
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1286
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+34
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1034 )
	MOV.W	R2,#SOF( _1034 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1287
_1286:
; rs232cmd.c 5085						SCPIError = SyntaxErr;
	SYMB	LINE, 5085
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1293
_1287:
; rs232cmd.c 5086					else
; rs232cmd.c 5087					{
; rs232cmd.c 5088						Calibration.BBCalibration[Suffix[0]].PhaseG = PhaseG;
	SYMB	LINE, 5088
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.W	R3,[R7+32]
	MOV.W	R2,[R7+30]
	MOV.B	ES,#SEG( _Calibration+142 )
	MOV.W	[R0+SOF( _Calibration+142 )],R2
	MOV.W	[R0+SOF( _Calibration+144 )],R3
; rs232cmd.c 5089						Calibration.BBCalibration[Suffix[0]].PhaseM = PhaseM;
	SYMB	LINE, 5089
	MOV.W	R3,[R7+36]
	MOV.W	R2,[R7+34]
	MOV.B	ES,#SEG( _Calibration+148 )
	MOV.W	[R0+SOF( _Calibration+148 )],R2
	MOV.W	[R0+SOF( _Calibration+150 )],R3
; rs232cmd.c 5090					
; rs232cmd.c 5091						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5091
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5092					}
; rs232cmd.c 5093				}
; rs232cmd.c 5094			}
; rs232cmd.c 5095		}
	SYMB	LINE, 5095
_1293:
; rs232cmd.c 5096	}
	SYMB	LINE, 5096
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5097	
; rs232cmd.c 5098	/**************************************************************************/
; rs232cmd.c 5099	/* FactBBGenScHPhase																		 	     RS232CMD.C	*/
; rs232cmd.c 5100	/*																																				*/
; rs232cmd.c 5101	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5102	/* Revised:	  000622				     																					*/
; rs232cmd.c 5103	/*																																				*/
; rs232cmd.c 5104	/* Function:	--																													*/
; rs232cmd.c 5105	/* Remarks:		--																													*/
; rs232cmd.c 5106	/* Returns:		--																													*/
; rs232cmd.c 5107	/* Updates:		--																													*/
; rs232cmd.c 5108	/**************************************************************************/
; rs232cmd.c 5109	void FactBBGenScHPhase( void)
; rs232cmd.c 5110	{
	ALIGN	1
	SYMB	LINE, 5110
	PUBLIC	_FactBBGenScHPhase
_FactBBGenScHPhase:
	SYMB	TYPE, 638, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenScHPhase", _FactBBGenScHPhase, #638, 0, 0, 48
	SYMB	ALAB, _FactBBGenScHPhase, #638
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#022H
	SYMB	SOFF, 38
	SYMB	IDEN, "buffer", -38, #606, 130, 5
	SYMB	IDEN, "ScHPhaseG", -8, #18, 130, 5
	SYMB	IDEN, "ScHPhaseM", -6, #18, 130, 5
; rs232cmd.c 5111		char buffer[30];
; rs232cmd.c 5112		UI ScHPhaseG, ScHPhaseM;
; rs232cmd.c 5113	
; rs232cmd.c 5114		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5114
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1307
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1307
; rs232cmd.c 5115		{
; rs232cmd.c 5116			if ( CmdRequest)
	SYMB	LINE, 5116
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1299
; rs232cmd.c 5117			{
; rs232cmd.c 5118				if ( ParCnt)
	SYMB	LINE, 5118
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1298
; rs232cmd.c 5119					SCPIError = SyntaxErr;
	SYMB	LINE, 5119
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1307
_1298:
; rs232cmd.c 5120				else
; rs232cmd.c 5121				{
; rs232cmd.c 5122					sprintf( buffer, "%u,%u\n", Calibration.BBCalibration[Suffix[0]].ScHPhaseG, 
; rs232cmd.c 5123																	    Calibration.BBCalibration[Suffix[0]].ScHPhaseM);
	SYMB	LINE, 5123
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+146 )
	MOV.W	R2,[R0+SOF( _Calibration+146 )]
	MOV.B	ES,#SEG( _Calibration+152 )
	MOV.W	R0,[R0+SOF( _Calibration+152 )]
	PUSH.W	R0
	SYMB	SOFF, 40
	PUSH.W	R2
	SYMB	SOFF, 42
	MOV.W	R1,#SEG( _1296 )
	MOV.W	R0,#SOF( _1296 )
	PUSH.W	R0, R1
	SYMB	SOFF, 46
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 38
; rs232cmd.c 5124					rs232puts( buffer);
	SYMB	LINE, 5124
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5125				}
; rs232cmd.c 5126			}
	SYMB	LINE, 5126
	BR	_1307
_1299:
; rs232cmd.c 5127			else
; rs232cmd.c 5128			{
; rs232cmd.c 5129				if ( !PasswordProtected)
	SYMB	LINE, 5129
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1307
; rs232cmd.c 5130				{
; rs232cmd.c 5131					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &ScHPhaseG, &ScHPhaseM)) != 2))
	SYMB	LINE, 5131
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1300
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+32
	PUSH.W	R4, R5
	SYMB	SOFF, 42
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R3,#SEG( _1297 )
	MOV.W	R2,#SOF( _1297 )
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 38
	CMP.W	R0,#02H
	BEQ	_1301
_1300:
; rs232cmd.c 5132						SCPIError = SyntaxErr;
	SYMB	LINE, 5132
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1307
_1301:
; rs232cmd.c 5133					else
; rs232cmd.c 5134					{
; rs232cmd.c 5135						Calibration.BBCalibration[Suffix[0]].ScHPhaseG = ScHPhaseG;
	SYMB	LINE, 5135
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.W	R2,[R7+30]
	MOV.B	ES,#SEG( _Calibration+146 )
	MOV.W	[R0+SOF( _Calibration+146 )],R2
; rs232cmd.c 5136						Calibration.BBCalibration[Suffix[0]].ScHPhaseM = ScHPhaseM;
	SYMB	LINE, 5136
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.W	R2,[R7+32]
	MOV.B	ES,#SEG( _Calibration+152 )
	MOV.W	[R0+SOF( _Calibration+152 )],R2
; rs232cmd.c 5137					
; rs232cmd.c 5138						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5138
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5139					}
; rs232cmd.c 5140				}
; rs232cmd.c 5141			}
; rs232cmd.c 5142		}
	SYMB	LINE, 5142
_1307:
; rs232cmd.c 5143	}
	SYMB	LINE, 5143
	ADD.W	R7,#022H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5144	
; rs232cmd.c 5145	/**************************************************************************/
; rs232cmd.c 5146	/* FactBBGenDAC																					 	     RS232CMD.C	*/
; rs232cmd.c 5147	/*																																				*/
; rs232cmd.c 5148	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5149	/* Revised:	  000622				     																					*/
; rs232cmd.c 5150	/*																																				*/
; rs232cmd.c 5151	/* Function:	--																													*/
; rs232cmd.c 5152	/* Remarks:		--																													*/
; rs232cmd.c 5153	/* Returns:		--																													*/
; rs232cmd.c 5154	/* Updates:		--																													*/
; rs232cmd.c 5155	/**************************************************************************/
; rs232cmd.c 5156	void FactBBGenDAC( void)
; rs232cmd.c 5157	{
	ALIGN	1
	SYMB	LINE, 5157
	PUBLIC	_FactBBGenDAC
_FactBBGenDAC:
	SYMB	TYPE, 639, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactBBGenDAC", _FactBBGenDAC, #639, 0, 0, 48
	SYMB	ALAB, _FactBBGenDAC, #639
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#024H
	SYMB	SOFF, 40
	SYMB	IDEN, "buffer", -40, #606, 130, 5
	SYMB	IDEN, "DACGain", -10, #18, 130, 5
	SYMB	IDEN, "DACOffset", -8, #18, 130, 5
	SYMB	IDEN, "DACLevel", -6, #18, 130, 5
; rs232cmd.c 5158		char buffer[30];
; rs232cmd.c 5159		UI DACGain, DACOffset, DACLevel;
; rs232cmd.c 5160	
; rs232cmd.c 5161		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5161
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1319
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1319
; rs232cmd.c 5162		{
; rs232cmd.c 5163			if ( CmdRequest)
	SYMB	LINE, 5163
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1311
; rs232cmd.c 5164			{
; rs232cmd.c 5165				if ( ParCnt)
	SYMB	LINE, 5165
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1310
; rs232cmd.c 5166					SCPIError = SyntaxErr;
	SYMB	LINE, 5166
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1319
_1310:
; rs232cmd.c 5167				else
; rs232cmd.c 5168				{
; rs232cmd.c 5169					sprintf( buffer, "%u,%u,%u\n", Calibration.BBCalibration[Suffix[0]].DACGain, 
; rs232cmd.c 5170																		     Calibration.BBCalibration[Suffix[0]].DACOffset,
; rs232cmd.c 5171																		     Calibration.BBCalibration[Suffix[0]].DACLevel);
	SYMB	LINE, 5171
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+154 )
	MOV.B	R2L,[R0+SOF( _Calibration+154 )]
	MOVS.B	R2H,#00H
	MOV.B	ES,#SEG( _Calibration+155 )
	MOV.B	R3L,[R0+SOF( _Calibration+155 )]
	MOVS.B	R3H,#00H
	MOV.B	ES,#SEG( _Calibration+156 )
	MOV.B	R0L,[R0+SOF( _Calibration+156 )]
	MOVS.B	R0H,#00H
	PUSH.W	R0
	SYMB	SOFF, 42
	PUSH.W	R3
	SYMB	SOFF, 44
	PUSH.W	R2
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _1169 )
	MOV.W	R0,#SOF( _1169 )
	PUSH.W	R0, R1
	SYMB	SOFF, 50
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 40
; rs232cmd.c 5172					rs232puts( buffer);
	SYMB	LINE, 5172
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5173				}
; rs232cmd.c 5174			}
	SYMB	LINE, 5174
	BR	_1319
_1311:
; rs232cmd.c 5175			else
; rs232cmd.c 5176			{
; rs232cmd.c 5177				if ( !PasswordProtected)
	SYMB	LINE, 5177
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1319
; rs232cmd.c 5178				{
; rs232cmd.c 5179					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &DACGain, &DACOffset, &DACLevel)) != 3))
	SYMB	LINE, 5179
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1312
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+32
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+34
	PUSH.W	R0, R1
	SYMB	SOFF, 44
	PUSH.W	R4, R5
	SYMB	SOFF, 48
	PUSH.W	R2, R3
	SYMB	SOFF, 52
	MOV.W	R3,#SEG( _1170 )
	MOV.W	R2,#SOF( _1170 )
	PUSH.W	R2, R3
	SYMB	SOFF, 56
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 40
	CMP.W	R0,#03H
	BEQ	_1313
_1312:
; rs232cmd.c 5180						SCPIError = SyntaxErr;
	SYMB	LINE, 5180
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1319
_1313:
; rs232cmd.c 5181					else
; rs232cmd.c 5182					{
; rs232cmd.c 5183						Calibration.BBCalibration[Suffix[0]].DACGain = DACGain;
	SYMB	LINE, 5183
	MOV.W	R2,[R7+30]
	MOV.B	ES,#SEG( _Suffix )
	MOV.W	R0,#SOF( _Suffix )
	MOV.W	R0,[R0]
	MULU.W	R0,#014H
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+154 )
	MOV.B	[R0+SOF( _Calibration+154 )],R2L
; rs232cmd.c 5184						Calibration.BBCalibration[Suffix[0]].DACOffset = DACOffset;
	SYMB	LINE, 5184
	MOV.W	R2,[R7+32]
	MOV.B	ES,#SEG( _Calibration+155 )
	MOV.B	[R0+SOF( _Calibration+155 )],R2L
; rs232cmd.c 5185						Calibration.BBCalibration[Suffix[0]].DACLevel = DACLevel;	
	SYMB	LINE, 5185
	MOV.W	R2,[R7+34]
	MOV.B	ES,#SEG( _Calibration+156 )
	MOV.B	[R0+SOF( _Calibration+156 )],R2L
; rs232cmd.c 5186								
; rs232cmd.c 5187						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5187
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5188					}
; rs232cmd.c 5189				}
; rs232cmd.c 5190			}
; rs232cmd.c 5191		}
	SYMB	LINE, 5191
_1319:
; rs232cmd.c 5192	}
	SYMB	LINE, 5192
	ADD.W	R7,#024H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5193	
; rs232cmd.c 5194	/**************************************************************************/
; rs232cmd.c 5195	/* FactCBGenDate																				 	     RS232CMD.C	*/
; rs232cmd.c 5196	/*																																				*/
; rs232cmd.c 5197	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5198	/* Revised:	  000622				     																					*/
; rs232cmd.c 5199	/*																																				*/
; rs232cmd.c 5200	/* Function:	--																													*/
; rs232cmd.c 5201	/* Remarks:		--																													*/
; rs232cmd.c 5202	/* Returns:		--																													*/
; rs232cmd.c 5203	/* Updates:		--																													*/
; rs232cmd.c 5204	/**************************************************************************/
; rs232cmd.c 5205	void FactCBGenDate( void)
; rs232cmd.c 5206	{
	ALIGN	1
	SYMB	LINE, 5206
	PUBLIC	_FactCBGenDate
_FactCBGenDate:
	SYMB	TYPE, 640, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactCBGenDate", _FactCBGenDate, #640, 0, 0, 48
	SYMB	ALAB, _FactCBGenDate, #640
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5207		UI year, month, day;
; rs232cmd.c 5208		char buffer[20];
; rs232cmd.c 5209	
; rs232cmd.c 5210		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5210
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1333
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1333
; rs232cmd.c 5211		{
; rs232cmd.c 5212			if ( CmdRequest)
	SYMB	LINE, 5212
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1323
; rs232cmd.c 5213			{
; rs232cmd.c 5214				if ( ParCnt)
	SYMB	LINE, 5214
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1322
; rs232cmd.c 5215					SCPIError = SyntaxErr;
	SYMB	LINE, 5215
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1333
_1322:
; rs232cmd.c 5216				else
; rs232cmd.c 5217				{
; rs232cmd.c 5218					day = Calibration.CBCalibration.Date % 100;
	SYMB	LINE, 5218
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R1,#SOF( _Calibration+198 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R4,#SOF( _Calibration+198 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R1,#SOF( _Calibration+198 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 5219					month = ( Calibration.CBCalibration.Date / 100) % 100;
	SYMB	LINE, 5219
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 5220					year = ( Calibration.CBCalibration.Date / 10000);
	SYMB	LINE, 5220
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R1,#SOF( _Calibration+198 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 5221	
; rs232cmd.c 5222					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 5222
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1169 )
	MOV.W	R0,#SOF( _1169 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 5223	
; rs232cmd.c 5224					rs232puts( buffer);
	SYMB	LINE, 5224
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5225				}
; rs232cmd.c 5226			}
	SYMB	LINE, 5226
	BR	_1333
_1323:
; rs232cmd.c 5227			else
; rs232cmd.c 5228			{
; rs232cmd.c 5229				if ( !PasswordProtected)
	SYMB	LINE, 5229
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1333
; rs232cmd.c 5230				{
; rs232cmd.c 5231					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 5231
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1324
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1170 )
	MOV.W	R2,#SOF( _1170 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1325
_1324:
; rs232cmd.c 5232						SCPIError = SyntaxErr;
	SYMB	LINE, 5232
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1333
_1325:
; rs232cmd.c 5233					else
; rs232cmd.c 5234					{
; rs232cmd.c 5235						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 5235
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1326
; rs232cmd.c 5236							SCPIError = ExecErr;
	SYMB	LINE, 5236
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1333
_1326:
; rs232cmd.c 5237						else
; rs232cmd.c 5238						{
; rs232cmd.c 5239							Calibration.CBCalibration.Date = day + 100*month + 10000*year;
	SYMB	LINE, 5239
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+198 )
	MOV.W	R2,#SOF( _Calibration+198 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 5240						
; rs232cmd.c 5241						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5241
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5242						}
; rs232cmd.c 5243					}				
; rs232cmd.c 5244				}
; rs232cmd.c 5245			}
; rs232cmd.c 5246		}
	SYMB	LINE, 5246
_1333:
; rs232cmd.c 5247	}
	SYMB	LINE, 5247
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5248	
; rs232cmd.c 5249	/**************************************************************************/
; rs232cmd.c 5250	/* FactCBGenAGain																				 	     RS232CMD.C	*/
; rs232cmd.c 5251	/*																																				*/
; rs232cmd.c 5252	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5253	/* Revised:	  000705,				     																					*/
; rs232cmd.c 5254	/*																																				*/
; rs232cmd.c 5255	/* Function:	--																													*/
; rs232cmd.c 5256	/* Remarks:		--																													*/
; rs232cmd.c 5257	/* Returns:		--																													*/
; rs232cmd.c 5258	/* Updates:		--																													*/
; rs232cmd.c 5259	/**************************************************************************/
; rs232cmd.c 5260	void FactCBGenAGain( void)
; rs232cmd.c 5261	{
	ALIGN	1
	SYMB	LINE, 5261
	PUBLIC	_FactCBGenAGain
_FactCBGenAGain:
	SYMB	TYPE, 641, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactCBGenAGain", _FactCBGenAGain, #641, 0, 0, 48
	SYMB	ALAB, _FactCBGenAGain, #641
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#018H
	SYMB	SOFF, 28
	SYMB	IDEN, "buffer", -28, #563, 130, 5
	SYMB	IDEN, "GainG", -8, #3, 130, 5
	SYMB	IDEN, "GainM", -6, #3, 130, 5
; rs232cmd.c 5262		char buffer[20];
; rs232cmd.c 5263		UC GainG, GainM;
; rs232cmd.c 5264	
; rs232cmd.c 5265		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5265
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1347
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1347
; rs232cmd.c 5266		{
; rs232cmd.c 5267			if ( CmdRequest)
	SYMB	LINE, 5267
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1337
; rs232cmd.c 5268			{
; rs232cmd.c 5269				if ( ParCnt)
	SYMB	LINE, 5269
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1336
; rs232cmd.c 5270					SCPIError = SyntaxErr;
	SYMB	LINE, 5270
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1347
_1336:
; rs232cmd.c 5271				else
; rs232cmd.c 5272				{
; rs232cmd.c 5273					sprintf( buffer, "%u,%u\n", Calibration.CBCalibration.GainG, 
; rs232cmd.c 5274																	    Calibration.CBCalibration.GainM);
	SYMB	LINE, 5274
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+213 )
	MOV.W	R0,#SOF( _Calibration+213 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOV.B	ES,#SEG( _Calibration+215 )
	MOV.W	R1,#SOF( _Calibration+215 )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 30
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R1,#SEG( _1296 )
	MOV.W	R0,#SOF( _1296 )
	PUSH.W	R0, R1
	SYMB	SOFF, 36
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 28
; rs232cmd.c 5275					rs232puts( buffer);
	SYMB	LINE, 5275
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5276				}
; rs232cmd.c 5277			}
	SYMB	LINE, 5277
	BR	_1347
_1337:
; rs232cmd.c 5278			else
; rs232cmd.c 5279			{
; rs232cmd.c 5280				if ( !PasswordProtected)
	SYMB	LINE, 5280
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1347
; rs232cmd.c 5281				{
; rs232cmd.c 5282					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &GainG, &GainM)) != 2))
	SYMB	LINE, 5282
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1338
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+22
	PUSH.W	R4, R5
	SYMB	SOFF, 32
	PUSH.W	R2, R3
	SYMB	SOFF, 36
	MOV.W	R3,#SEG( _1297 )
	MOV.W	R2,#SOF( _1297 )
	PUSH.W	R2, R3
	SYMB	SOFF, 40
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 28
	CMP.W	R0,#02H
	BEQ	_1339
_1338:
; rs232cmd.c 5283						SCPIError = SyntaxErr;
	SYMB	LINE, 5283
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1347
_1339:
; rs232cmd.c 5284					else
; rs232cmd.c 5285					{
; rs232cmd.c 5286						Calibration.CBCalibration.GainG = GainG;
	SYMB	LINE, 5286
	MOV.B	R0L,[R7+20]
	MOV.B	ES,#SEG( _Calibration+213 )
	MOV.W	R1,#SOF( _Calibration+213 )
	MOV.B	[R1],R0L
; rs232cmd.c 5287						Calibration.CBCalibration.GainM = GainM;
	SYMB	LINE, 5287
	MOV.B	R0L,[R7+22]
	MOV.B	ES,#SEG( _Calibration+215 )
	MOV.W	R1,#SOF( _Calibration+215 )
	MOV.B	[R1],R0L
; rs232cmd.c 5288																																		
; rs232cmd.c 5289						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5289
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5290	
; rs232cmd.c 5291						if ( CBSetup.System < NTSC)
	SYMB	LINE, 5291
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BCC	_1340
; rs232cmd.c 5292							WriteCBGain( GainG);
	SYMB	LINE, 5292
	MOV.B	R0L,[R7+20]
	CALL	_WriteCBGain
	BR	_1347
_1340:
; rs232cmd.c 5293						else
; rs232cmd.c 5294							WriteCBGain( GainM);
	SYMB	LINE, 5294
	MOV.B	R0L,[R7+22]
	CALL	_WriteCBGain
; rs232cmd.c 5295					}
; rs232cmd.c 5296				}
; rs232cmd.c 5297			}
; rs232cmd.c 5298		}
	SYMB	LINE, 5298
_1347:
; rs232cmd.c 5299	}
	SYMB	LINE, 5299
	ADD.W	R7,#018H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5300	
; rs232cmd.c 5301	/**************************************************************************/
; rs232cmd.c 5302	/* FactCBGenCGain																				 	     RS232CMD.C	*/
; rs232cmd.c 5303	/*																																				*/
; rs232cmd.c 5304	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5305	/* Revised:	  000705,				     																					*/
; rs232cmd.c 5306	/*																																				*/
; rs232cmd.c 5307	/* Function:	--																													*/
; rs232cmd.c 5308	/* Remarks:		--																													*/
; rs232cmd.c 5309	/* Returns:		--																													*/
; rs232cmd.c 5310	/* Updates:		--																													*/
; rs232cmd.c 5311	/**************************************************************************/
; rs232cmd.c 5312	void FactCBGenCGain( void)
; rs232cmd.c 5313	{
	ALIGN	1
	SYMB	LINE, 5313
	PUBLIC	_FactCBGenCGain
_FactCBGenCGain:
	SYMB	TYPE, 642, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactCBGenCGain", _FactCBGenCGain, #642, 0, 0, 48
	SYMB	ALAB, _FactCBGenCGain, #642
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#018H
	SYMB	SOFF, 28
	SYMB	IDEN, "buffer", -28, #563, 130, 5
	SYMB	IDEN, "ChromaGainG", -8, #3, 130, 5
	SYMB	IDEN, "ChromaGainM", -6, #3, 130, 5
; rs232cmd.c 5314		char buffer[20];
; rs232cmd.c 5315		UC ChromaGainG, ChromaGainM;
; rs232cmd.c 5316	
; rs232cmd.c 5317		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5317
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1362
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1362
; rs232cmd.c 5318		{
; rs232cmd.c 5319			if ( CmdRequest)
	SYMB	LINE, 5319
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1352
; rs232cmd.c 5320			{
; rs232cmd.c 5321				if ( ParCnt)
	SYMB	LINE, 5321
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1351
; rs232cmd.c 5322					SCPIError = SyntaxErr;
	SYMB	LINE, 5322
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1362
_1351:
; rs232cmd.c 5323				else
; rs232cmd.c 5324				{
; rs232cmd.c 5325					sprintf( buffer, "%u,%u\n", Calibration.CBCalibration.ChromaGainG, 
; rs232cmd.c 5326																	    Calibration.CBCalibration.ChromaGainM);
	SYMB	LINE, 5326
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+214 )
	MOV.W	R0,#SOF( _Calibration+214 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOV.B	ES,#SEG( _Calibration+216 )
	MOV.W	R1,#SOF( _Calibration+216 )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 30
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R1,#SEG( _1296 )
	MOV.W	R0,#SOF( _1296 )
	PUSH.W	R0, R1
	SYMB	SOFF, 36
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 28
; rs232cmd.c 5327					rs232puts( buffer);
	SYMB	LINE, 5327
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5328				}
; rs232cmd.c 5329			}
	SYMB	LINE, 5329
	BR	_1362
_1352:
; rs232cmd.c 5330			else
; rs232cmd.c 5331			{
; rs232cmd.c 5332				if ( !PasswordProtected)
	SYMB	LINE, 5332
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1362
; rs232cmd.c 5333				{
; rs232cmd.c 5334					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &ChromaGainG, &ChromaGainM)) != 2))
	SYMB	LINE, 5334
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1353
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+22
	PUSH.W	R4, R5
	SYMB	SOFF, 32
	PUSH.W	R2, R3
	SYMB	SOFF, 36
	MOV.W	R3,#SEG( _1297 )
	MOV.W	R2,#SOF( _1297 )
	PUSH.W	R2, R3
	SYMB	SOFF, 40
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 28
	CMP.W	R0,#02H
	BEQ	_1354
_1353:
; rs232cmd.c 5335						SCPIError = SyntaxErr;
	SYMB	LINE, 5335
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1362
_1354:
; rs232cmd.c 5336					else
; rs232cmd.c 5337					{
; rs232cmd.c 5338						Calibration.CBCalibration.ChromaGainG = ChromaGainG;
	SYMB	LINE, 5338
	MOV.B	R0L,[R7+20]
	MOV.B	ES,#SEG( _Calibration+214 )
	MOV.W	R1,#SOF( _Calibration+214 )
	MOV.B	[R1],R0L
; rs232cmd.c 5339						Calibration.CBCalibration.ChromaGainM = ChromaGainM;
	SYMB	LINE, 5339
	MOV.B	R0L,[R7+22]
	MOV.B	ES,#SEG( _Calibration+216 )
	MOV.W	R1,#SOF( _Calibration+216 )
	MOV.B	[R1],R0L
; rs232cmd.c 5340																																		
; rs232cmd.c 5341						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5341
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5342	
; rs232cmd.c 5343						if ( CBSetup.System < NTSC)
	SYMB	LINE, 5343
	MOV.B	ES,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BCC	_1355
; rs232cmd.c 5344							WriteCBChromaGain( ChromaGainG);
	SYMB	LINE, 5344
	MOV.B	R0L,[R7+20]
	CALL	_WriteCBChromaGain
	BR	_1362
_1355:
; rs232cmd.c 5345						else
; rs232cmd.c 5346							WriteCBChromaGain( ChromaGainM);
	SYMB	LINE, 5346
	MOV.B	R0L,[R7+22]
	CALL	_WriteCBChromaGain
; rs232cmd.c 5347					}
; rs232cmd.c 5348				}
; rs232cmd.c 5349			}
; rs232cmd.c 5350		}
	SYMB	LINE, 5350
_1362:
; rs232cmd.c 5351	}
	SYMB	LINE, 5351
	ADD.W	R7,#018H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5352	
; rs232cmd.c 5353	/**************************************************************************/
; rs232cmd.c 5354	/* FactCBGenPhase																				 	     RS232CMD.C	*/
; rs232cmd.c 5355	/*																																				*/
; rs232cmd.c 5356	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5357	/* Revised:	  000622				     																					*/
; rs232cmd.c 5358	/*																																				*/
; rs232cmd.c 5359	/* Function:	--																													*/
; rs232cmd.c 5360	/* Remarks:		PAL range: 0-4*625*1728, NTSC range: 0-2*525*1716						*/
; rs232cmd.c 5361	/* Returns:		--																													*/
; rs232cmd.c 5362	/* Updates:		--																													*/
; rs232cmd.c 5363	/**************************************************************************/
; rs232cmd.c 5364	void FactCBGenPhase( void)
; rs232cmd.c 5365	{
	ALIGN	1
	SYMB	LINE, 5365
	PUBLIC	_FactCBGenPhase
_FactCBGenPhase:
	SYMB	TYPE, 643, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactCBGenPhase", _FactCBGenPhase, #643, 0, 0, 48
	SYMB	ALAB, _FactCBGenPhase, #643
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#026H
	SYMB	SOFF, 42
	SYMB	IDEN, "buffer", -42, #606, 130, 5
	SYMB	IDEN, "PhaseG", -12, #7, 130, 5
	SYMB	IDEN, "PhaseM", -8, #7, 130, 5
; rs232cmd.c 5366		char buffer[30];
; rs232cmd.c 5367		UL PhaseG, PhaseM;
; rs232cmd.c 5368	
; rs232cmd.c 5369		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5369
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1375
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1375
; rs232cmd.c 5370		{
; rs232cmd.c 5371			if ( CmdRequest)
	SYMB	LINE, 5371
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1367
; rs232cmd.c 5372			{
; rs232cmd.c 5373				if ( ParCnt)
	SYMB	LINE, 5373
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1366
; rs232cmd.c 5374					SCPIError = SyntaxErr;
	SYMB	LINE, 5374
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1375
_1366:
; rs232cmd.c 5375				else
; rs232cmd.c 5376				{
; rs232cmd.c 5377					sprintf( buffer, "%lu,%lu\n", Calibration.CBCalibration.PhaseG, 
; rs232cmd.c 5378																		    Calibration.CBCalibration.PhaseM);
	SYMB	LINE, 5378
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+202 )
	MOV.W	R1,#SOF( _Calibration+202 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _Calibration+208 )
	MOV.W	R3,#SOF( _Calibration+208 )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	PUSH.W	R0, R1
	SYMB	SOFF, 50
	MOV.W	R1,#SEG( _1222 )
	MOV.W	R0,#SOF( _1222 )
	PUSH.W	R0, R1
	SYMB	SOFF, 54
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
; rs232cmd.c 5379					rs232puts( buffer);
	SYMB	LINE, 5379
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5380				}
; rs232cmd.c 5381			}
	SYMB	LINE, 5381
	BR	_1375
_1367:
; rs232cmd.c 5382			else
; rs232cmd.c 5383			{
; rs232cmd.c 5384				if ( !PasswordProtected)
	SYMB	LINE, 5384
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1375
; rs232cmd.c 5385				{
; rs232cmd.c 5386					if (( ParCnt != 2) || (( sscanf( Cmd, "%lu,%lu", &PhaseG, &PhaseM)) != 2))
	SYMB	LINE, 5386
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1368
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+34
	PUSH.W	R4, R5
	SYMB	SOFF, 46
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	MOV.W	R3,#SEG( _1034 )
	MOV.W	R2,#SOF( _1034 )
	PUSH.W	R2, R3
	SYMB	SOFF, 54
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 42
	CMP.W	R0,#02H
	BEQ	_1369
_1368:
; rs232cmd.c 5387						SCPIError = SyntaxErr;
	SYMB	LINE, 5387
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1375
_1369:
; rs232cmd.c 5388					else
; rs232cmd.c 5389					{
; rs232cmd.c 5390						Calibration.CBCalibration.PhaseG = PhaseG;
	SYMB	LINE, 5390
	MOV.W	R1,[R7+32]
	MOV.W	R0,[R7+30]
	MOV.B	ES,#SEG( _Calibration+202 )
	MOV.W	R2,#SOF( _Calibration+202 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 5391						Calibration.CBCalibration.PhaseM = PhaseM;
	SYMB	LINE, 5391
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	MOV.B	ES,#SEG( _Calibration+208 )
	MOV.W	R2,#SOF( _Calibration+208 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 5392					
; rs232cmd.c 5393						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5393
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5394	
; rs232cmd.c 5395						SetCBDelay( CBSetup.Delay);
	SYMB	LINE, 5395
	MOV.B	ES,#SEG( _CBSetup+4 )
	MOV.W	R1,#SOF( _CBSetup+4 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	CALL	_SetCBDelay
; rs232cmd.c 5396					}
; rs232cmd.c 5397				}
; rs232cmd.c 5398			}
; rs232cmd.c 5399		}
	SYMB	LINE, 5399
_1375:
; rs232cmd.c 5400	}
	SYMB	LINE, 5400
	ADD.W	R7,#026H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5401	
; rs232cmd.c 5402	/**************************************************************************/
; rs232cmd.c 5403	/* FactCBGenScHPhase																		 	     RS232CMD.C	*/
; rs232cmd.c 5404	/*																																				*/
; rs232cmd.c 5405	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5406	/* Revised:	  000622				     																					*/
; rs232cmd.c 5407	/*																																				*/
; rs232cmd.c 5408	/* Function:	--																													*/
; rs232cmd.c 5409	/* Remarks:		--																													*/
; rs232cmd.c 5410	/* Returns:		--																													*/
; rs232cmd.c 5411	/* Updates:		--																													*/
; rs232cmd.c 5412	/**************************************************************************/
; rs232cmd.c 5413	void FactCBGenScHPhase( void)
; rs232cmd.c 5414	{
	ALIGN	1
	SYMB	LINE, 5414
	PUBLIC	_FactCBGenScHPhase
_FactCBGenScHPhase:
	SYMB	TYPE, 644, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactCBGenScHPhase", _FactCBGenScHPhase, #644, 0, 0, 48
	SYMB	ALAB, _FactCBGenScHPhase, #644
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#022H
	SYMB	SOFF, 38
	SYMB	IDEN, "buffer", -38, #606, 130, 5
	SYMB	IDEN, "ScHPhaseG", -8, #3, 130, 5
	SYMB	IDEN, "ScHPhaseM", -6, #3, 130, 5
; rs232cmd.c 5415		char buffer[30];
; rs232cmd.c 5416		UC ScHPhaseG, ScHPhaseM;
; rs232cmd.c 5417	
; rs232cmd.c 5418		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5418
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1387
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1387
; rs232cmd.c 5419		{
; rs232cmd.c 5420			if ( CmdRequest)
	SYMB	LINE, 5420
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1379
; rs232cmd.c 5421			{
; rs232cmd.c 5422				if ( ParCnt)
	SYMB	LINE, 5422
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1378
; rs232cmd.c 5423					SCPIError = SyntaxErr;
	SYMB	LINE, 5423
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1387
_1378:
; rs232cmd.c 5424				else
; rs232cmd.c 5425				{
; rs232cmd.c 5426					sprintf( buffer, "%u,%u\n", Calibration.CBCalibration.ScHPhaseG, 
; rs232cmd.c 5427																	    Calibration.CBCalibration.ScHPhaseM);
	SYMB	LINE, 5427
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+206 )
	MOV.W	R0,#SOF( _Calibration+206 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOV.B	ES,#SEG( _Calibration+212 )
	MOV.W	R1,#SOF( _Calibration+212 )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 40
	PUSH.W	R0
	SYMB	SOFF, 42
	MOV.W	R1,#SEG( _1296 )
	MOV.W	R0,#SOF( _1296 )
	PUSH.W	R0, R1
	SYMB	SOFF, 46
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 38
; rs232cmd.c 5428					rs232puts( buffer);
	SYMB	LINE, 5428
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5429				}
; rs232cmd.c 5430			}
	SYMB	LINE, 5430
	BR	_1387
_1379:
; rs232cmd.c 5431			else
; rs232cmd.c 5432			{
; rs232cmd.c 5433				if ( !PasswordProtected)
	SYMB	LINE, 5433
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1387
; rs232cmd.c 5434				{
; rs232cmd.c 5435					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &ScHPhaseG, &ScHPhaseM)) != 2))
	SYMB	LINE, 5435
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1380
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+30
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+32
	PUSH.W	R4, R5
	SYMB	SOFF, 42
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R3,#SEG( _1297 )
	MOV.W	R2,#SOF( _1297 )
	PUSH.W	R2, R3
	SYMB	SOFF, 50
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 38
	CMP.W	R0,#02H
	BEQ	_1381
_1380:
; rs232cmd.c 5436						SCPIError = SyntaxErr;
	SYMB	LINE, 5436
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1387
_1381:
; rs232cmd.c 5437					else
; rs232cmd.c 5438					{
; rs232cmd.c 5439						Calibration.CBCalibration.ScHPhaseG = ScHPhaseG;
	SYMB	LINE, 5439
	MOV.B	R0L,[R7+30]
	MOV.B	ES,#SEG( _Calibration+206 )
	MOV.W	R1,#SOF( _Calibration+206 )
	MOV.B	[R1],R0L
; rs232cmd.c 5440						Calibration.CBCalibration.ScHPhaseM = ScHPhaseM;
	SYMB	LINE, 5440
	MOV.B	R0L,[R7+32]
	MOV.B	ES,#SEG( _Calibration+212 )
	MOV.W	R1,#SOF( _Calibration+212 )
	MOV.B	[R1],R0L
; rs232cmd.c 5441					
; rs232cmd.c 5442						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5442
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5443	
; rs232cmd.c 5444						SetCBScHPhase( CBSetup.ScHPhase);
	SYMB	LINE, 5444
	MOV.B	ES,#SEG( _CBSetup+8 )
	MOV.W	R0,#SOF( _CBSetup+8 )
	MOV.W	R0,[R0]
	CALL	_SetCBScHPhase
; rs232cmd.c 5445					}
; rs232cmd.c 5446				}
; rs232cmd.c 5447			}
; rs232cmd.c 5448		}
	SYMB	LINE, 5448
_1387:
; rs232cmd.c 5449	}
	SYMB	LINE, 5449
	ADD.W	R7,#022H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5450	
; rs232cmd.c 5451	/**************************************************************************/
; rs232cmd.c 5452	/* FactAudioGenStatus																		 	     RS232CMD.C	*/
; rs232cmd.c 5453	/*																																				*/
; rs232cmd.c 5454	/* Author:		Kim Engedahl, DEV, 000505	    															*/
; rs232cmd.c 5455	/* Revised:	  000625				     																					*/
; rs232cmd.c 5456	/*																																				*/
; rs232cmd.c 5457	/* Function:	--																													*/
; rs232cmd.c 5458	/* Remarks:																																*/
; rs232cmd.c 5459	/* Returns:		--																													*/
; rs232cmd.c 5460	/* Updates:		--																													*/
; rs232cmd.c 5461	/**************************************************************************/
; rs232cmd.c 5462	void FactAudioGenStatus( void)
; rs232cmd.c 5463	{
	ALIGN	1
	SYMB	LINE, 5463
	PUBLIC	_FactAudioGenStatus
_FactAudioGenStatus:
	SYMB	TYPE, 645, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactAudioGenStatus", _FactAudioGenStatus, #645, 0, 0, 48
	SYMB	ALAB, _FactAudioGenStatus, #645
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#014H
	SYMB	SOFF, 24
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5464		char buffer[20];
; rs232cmd.c 5465	
; rs232cmd.c 5466		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5466
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1395
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1395
; rs232cmd.c 5467		{
; rs232cmd.c 5468			if ( CmdRequest)
	SYMB	LINE, 5468
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1391
; rs232cmd.c 5469			{
; rs232cmd.c 5470				if ( ParCnt)
	SYMB	LINE, 5470
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1390
; rs232cmd.c 5471					SCPIError = SyntaxErr;
	SYMB	LINE, 5471
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1395
_1390:
; rs232cmd.c 5472				else
; rs232cmd.c 5473				{
; rs232cmd.c 5474					sprintf( buffer, "%u\n", 0, AudioStatus());
	SYMB	LINE, 5474
	CALL	_AudioStatus
	MOVS.B	R0H,#00H
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 26
	MOV.W	R0,#00H
	PUSH.W	R0
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 32
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 24
; rs232cmd.c 5475					rs232puts( buffer);
	SYMB	LINE, 5475
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5476				}
; rs232cmd.c 5477			}
	SYMB	LINE, 5477
	BR	_1395
_1391:
; rs232cmd.c 5478			else
; rs232cmd.c 5479				SCPIError = SyntaxErr;
	SYMB	LINE, 5479
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 5480		}
	SYMB	LINE, 5480
_1395:
; rs232cmd.c 5481	}
	SYMB	LINE, 5481
	ADD.W	R7,#014H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5482	
; rs232cmd.c 5483	/**************************************************************************/
; rs232cmd.c 5484	/* FactAudioGenDate																			 	     RS232CMD.C	*/
; rs232cmd.c 5485	/*																																				*/
; rs232cmd.c 5486	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5487	/* Revised:	  000622				     																					*/
; rs232cmd.c 5488	/*																																				*/
; rs232cmd.c 5489	/* Function:	--																													*/
; rs232cmd.c 5490	/* Remarks:		--																													*/
; rs232cmd.c 5491	/* Returns:		--																													*/
; rs232cmd.c 5492	/* Updates:		--																													*/
; rs232cmd.c 5493	/**************************************************************************/
; rs232cmd.c 5494	void FactAudioGenDate( void)
; rs232cmd.c 5495	{
	ALIGN	1
	SYMB	LINE, 5495
	PUBLIC	_FactAudioGenDate
_FactAudioGenDate:
	SYMB	TYPE, 646, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactAudioGenDate", _FactAudioGenDate, #646, 0, 0, 48
	SYMB	ALAB, _FactAudioGenDate, #646
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#01AH
	SYMB	SOFF, 30
	SYMB	IDEN, "year", -30, #18, 130, 5
	SYMB	IDEN, "month", -28, #18, 130, 5
	SYMB	IDEN, "day", -26, #18, 130, 5
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5496		UI year, month, day;
; rs232cmd.c 5497		char buffer[20];
; rs232cmd.c 5498	
; rs232cmd.c 5499		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5499
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1407
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1407
; rs232cmd.c 5500		{
; rs232cmd.c 5501			if ( CmdRequest)
	SYMB	LINE, 5501
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1397
; rs232cmd.c 5502			{
; rs232cmd.c 5503				if ( ParCnt)
	SYMB	LINE, 5503
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1396
; rs232cmd.c 5504					SCPIError = SyntaxErr;
	SYMB	LINE, 5504
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1407
_1396:
; rs232cmd.c 5505				else
; rs232cmd.c 5506				{
; rs232cmd.c 5507					day = Calibration.AudioCalibration.Date % 100;
	SYMB	LINE, 5507
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R1,#SOF( _Calibration+218 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R4,#SOF( _Calibration+218 )
	MOV.W	[R4+],R0
	MOV.W	[R4],R1
	FCALL	__UMODL
	MOV.W	[R7+4],R0
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R1,#SOF( _Calibration+218 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
; rs232cmd.c 5508					month = ( Calibration.AudioCalibration.Date / 100) % 100;
	SYMB	LINE, 5508
	MOV.W	R3,#00H
	MOV.W	R2,#064H
	MOV.W	R5,R3
	MOV.W	R4,R2
	FCALL	__UDIVL
	MOV.W	R3,R5
	MOV.W	R2,R4
	FCALL	__UMODL
	MOV.W	[R7+2],R0
; rs232cmd.c 5509					year = ( Calibration.AudioCalibration.Date / 10000);
	SYMB	LINE, 5509
	MOV.W	R3,#00H
	MOV.W	R2,#02710H
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R1,#SOF( _Calibration+218 )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__UDIVL
	MOV.W	[R7],R0
; rs232cmd.c 5510	
; rs232cmd.c 5511					sprintf( buffer, "%u,%u,%u\n", year, month, day);
	SYMB	LINE, 5511
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 34
	MOV.W	R0,[R7+4]
	PUSH.W	R0
	SYMB	SOFF, 36
	MOV.W	R1,#SEG( _1169 )
	MOV.W	R0,#SOF( _1169 )
	PUSH.W	R0, R1
	SYMB	SOFF, 40
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#0AH
	SYMB	SOFF, 30
; rs232cmd.c 5512	
; rs232cmd.c 5513					rs232puts( buffer);
	SYMB	LINE, 5513
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5514				}
; rs232cmd.c 5515			}
	SYMB	LINE, 5515
	BR	_1407
_1397:
; rs232cmd.c 5516			else
; rs232cmd.c 5517			{
; rs232cmd.c 5518				if ( !PasswordProtected)
	SYMB	LINE, 5518
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1407
; rs232cmd.c 5519				{
; rs232cmd.c 5520					if (( ParCnt != 3) || (( sscanf( Cmd, "%u,%u,%u", &year, &month, &day)) != 3))
	SYMB	LINE, 5520
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#03H
	BNE	_1398
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	PUSH.W	R0, R1
	SYMB	SOFF, 34
	PUSH.W	R4, R5
	SYMB	SOFF, 38
	PUSH.W	R2, R3
	SYMB	SOFF, 42
	MOV.W	R3,#SEG( _1170 )
	MOV.W	R2,#SOF( _1170 )
	PUSH.W	R2, R3
	SYMB	SOFF, 46
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	CALL	_sscanf
	ADD.W	R7,#010H
	SYMB	SOFF, 30
	CMP.W	R0,#03H
	BEQ	_1399
_1398:
; rs232cmd.c 5521						SCPIError = SyntaxErr;
	SYMB	LINE, 5521
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1407
_1399:
; rs232cmd.c 5522					else
; rs232cmd.c 5523					{
; rs232cmd.c 5524						if ( ValidateDate( year, month, day) == FAIL)
	SYMB	LINE, 5524
	MOV.W	R0,[R7]
	MOV.W	R1,[R7+2]
	MOV.W	R2,[R7+4]
	CALL	_ValidateDate
	OR.W	R0,R0
	BNE	_1400
; rs232cmd.c 5525							SCPIError = ExecErr;
	SYMB	LINE, 5525
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#01DH
	BR	_1407
_1400:
; rs232cmd.c 5526						else
; rs232cmd.c 5527						{
; rs232cmd.c 5528							Calibration.AudioCalibration.Date = day + 100*month + 10000*year;
	SYMB	LINE, 5528
	MOV.W	R0,[R7+2]
	MULU.W	R0,#064H
	ADD.W	R0,[R7+4]
	MOV.W	R2,[R7]
	MULU.W	R2,#02710H
	ADD.W	R0,R2
	MOVS.W	R1,#00H
	MOV.B	ES,#SEG( _Calibration+218 )
	MOV.W	R2,#SOF( _Calibration+218 )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; rs232cmd.c 5529						
; rs232cmd.c 5530						 	NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5530
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5531						}
; rs232cmd.c 5532					}				
; rs232cmd.c 5533				}
; rs232cmd.c 5534			}
; rs232cmd.c 5535		}
	SYMB	LINE, 5535
_1407:
; rs232cmd.c 5536	}
	SYMB	LINE, 5536
	ADD.W	R7,#01AH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5537	
; rs232cmd.c 5538	/**************************************************************************/
; rs232cmd.c 5539	/* FactAudioGenLevel																		 	     RS232CMD.C	*/
; rs232cmd.c 5540	/*																																				*/
; rs232cmd.c 5541	/* Author:		Kim Engedahl, DEV, 000411	    															*/
; rs232cmd.c 5542	/* Revised:	  000622				     																					*/
; rs232cmd.c 5543	/*																																				*/
; rs232cmd.c 5544	/* Function:	--																													*/
; rs232cmd.c 5545	/* Remarks:		--																													*/
; rs232cmd.c 5546	/* Returns:		--																													*/
; rs232cmd.c 5547	/* Updates:		--																													*/
; rs232cmd.c 5548	/**************************************************************************/
; rs232cmd.c 5549	void FactAudioGenLevel( void)
; rs232cmd.c 5550	{
	ALIGN	1
	SYMB	LINE, 5550
	PUBLIC	_FactAudioGenLevel
_FactAudioGenLevel:
	SYMB	TYPE, 647, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactAudioGenLevel", _FactAudioGenLevel, #647, 0, 0, 48
	SYMB	ALAB, _FactAudioGenLevel, #647
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#018H
	SYMB	SOFF, 28
	SYMB	IDEN, "buffer", -28, #563, 130, 5
	SYMB	IDEN, "AnalogLeft", -8, #3, 130, 5
	SYMB	IDEN, "AnalogRight", -6, #3, 130, 5
; rs232cmd.c 5551		char buffer[20];
; rs232cmd.c 5552		UC AnalogLeft, AnalogRight;
; rs232cmd.c 5553	
; rs232cmd.c 5554		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5554
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1419
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1419
; rs232cmd.c 5555		{
; rs232cmd.c 5556			if ( CmdRequest)
	SYMB	LINE, 5556
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1411
; rs232cmd.c 5557			{
; rs232cmd.c 5558				if ( ParCnt)
	SYMB	LINE, 5558
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1410
; rs232cmd.c 5559					SCPIError = SyntaxErr;
	SYMB	LINE, 5559
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1419
_1410:
; rs232cmd.c 5560				else
; rs232cmd.c 5561				{
; rs232cmd.c 5562					sprintf( buffer, "%u,%u\n", Calibration.AudioCalibration.AnalogLeftChannel, 
; rs232cmd.c 5563																	    Calibration.AudioCalibration.AnalogRightChannel);
	SYMB	LINE, 5563
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.B	ES,#SEG( _Calibration+222 )
	MOV.W	R0,#SOF( _Calibration+222 )
	MOV.B	R0L,[R0]
	MOVS.B	R0H,#00H
	MOV.B	ES,#SEG( _Calibration+223 )
	MOV.W	R1,#SOF( _Calibration+223 )
	MOV.B	R1L,[R1]
	MOVS.B	R1H,#00H
	PUSH.W	R1
	SYMB	SOFF, 30
	PUSH.W	R0
	SYMB	SOFF, 32
	MOV.W	R1,#SEG( _1296 )
	MOV.W	R0,#SOF( _1296 )
	PUSH.W	R0, R1
	SYMB	SOFF, 36
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 28
; rs232cmd.c 5564					rs232puts( buffer);
	SYMB	LINE, 5564
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5565				}
; rs232cmd.c 5566			}
	SYMB	LINE, 5566
	BR	_1419
_1411:
; rs232cmd.c 5567			else
; rs232cmd.c 5568			{
; rs232cmd.c 5569				if ( !PasswordProtected)
	SYMB	LINE, 5569
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1419
; rs232cmd.c 5570				{
; rs232cmd.c 5571					if (( ParCnt != 2) || (( sscanf( Cmd, "%u,%u", &AnalogLeft, &AnalogRight)) != 2))
	SYMB	LINE, 5571
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BNE	_1412
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+20
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+22
	PUSH.W	R4, R5
	SYMB	SOFF, 32
	PUSH.W	R2, R3
	SYMB	SOFF, 36
	MOV.W	R3,#SEG( _1297 )
	MOV.W	R2,#SOF( _1297 )
	PUSH.W	R2, R3
	SYMB	SOFF, 40
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 28
	CMP.W	R0,#02H
	BEQ	_1413
_1412:
; rs232cmd.c 5572						SCPIError = SyntaxErr;
	SYMB	LINE, 5572
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1419
_1413:
; rs232cmd.c 5573					else
; rs232cmd.c 5574					{
; rs232cmd.c 5575						Calibration.AudioCalibration.AnalogLeftChannel = AnalogLeft;
	SYMB	LINE, 5575
	MOV.B	R0L,[R7+20]
	MOV.B	ES,#SEG( _Calibration+222 )
	MOV.W	R1,#SOF( _Calibration+222 )
	MOV.B	[R1],R0L
; rs232cmd.c 5576						Calibration.AudioCalibration.AnalogRightChannel = AnalogRight;
	SYMB	LINE, 5576
	MOV.B	R0L,[R7+22]
	MOV.B	ES,#SEG( _Calibration+223 )
	MOV.W	R1,#SOF( _Calibration+223 )
	MOV.B	[R1],R0L
; rs232cmd.c 5577								
; rs232cmd.c 5578						NV_Store( &Calibration, CalibrationPtr, sizeof( Calibration));
	SYMB	LINE, 5578
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R2,#SOF( _CalibrationPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#0E0H
	CALL	_NV_Store
; rs232cmd.c 5579	
; rs232cmd.c 5580						WriteAnlAudioDACLevel( AnalogLeft, AnalogRight);
	SYMB	LINE, 5580
	MOV.B	R0L,[R7+20]
	MOV.B	R0H,[R7+22]
	CALL	_WriteAnlAudioDACLevel
; rs232cmd.c 5581					}
; rs232cmd.c 5582				}
; rs232cmd.c 5583			}
; rs232cmd.c 5584		}
	SYMB	LINE, 5584
_1419:
; rs232cmd.c 5585	}
	SYMB	LINE, 5585
	ADD.W	R7,#018H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5586	
; rs232cmd.c 5587	/**************************************************************************/
; rs232cmd.c 5588	/* FactPLDVersion																				 	     RS232CMD.C	*/
; rs232cmd.c 5589	/*																																				*/
; rs232cmd.c 5590	/* Author:		Kim Engedahl, DEV, 000505	    															*/
; rs232cmd.c 5591	/* Revised:	  000625				     																					*/
; rs232cmd.c 5592	/*																																				*/
; rs232cmd.c 5593	/* Function:	--																													*/
; rs232cmd.c 5594	/* Remarks:		NOTE! The video PLD version has not been implemented at this*/
; rs232cmd.c 5595	/*						this time, hence the return value of 0 does NOT reflect the	*/
; rs232cmd.c 5596	/*						video PLD version.																					*/
; rs232cmd.c 5597	/* Returns:		--																													*/
; rs232cmd.c 5598	/* Updates:		--																													*/
; rs232cmd.c 5599	/**************************************************************************/
; rs232cmd.c 5600	void FactPLDVersion( void)
; rs232cmd.c 5601	{
	ALIGN	1
	SYMB	LINE, 5601
	PUBLIC	_FactPLDVersion
_FactPLDVersion:
	SYMB	TYPE, 648, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactPLDVersion", _FactPLDVersion, #648, 0, 0, 48
	SYMB	ALAB, _FactPLDVersion, #648
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#014H
	SYMB	SOFF, 24
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5602		char buffer[20];
; rs232cmd.c 5603	
; rs232cmd.c 5604		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5604
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1427
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1427
; rs232cmd.c 5605		{
; rs232cmd.c 5606			if ( CmdRequest)
	SYMB	LINE, 5606
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1423
; rs232cmd.c 5607			{
; rs232cmd.c 5608				if ( ParCnt)
	SYMB	LINE, 5608
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1422
; rs232cmd.c 5609					SCPIError = SyntaxErr;
	SYMB	LINE, 5609
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1427
_1422:
; rs232cmd.c 5610				else
; rs232cmd.c 5611				{
; rs232cmd.c 5612					sprintf( buffer, "%u,%u\n", 0, pld_version());
	SYMB	LINE, 5612
	CALL	_pld_version
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 26
	MOV.W	R0,#00H
	PUSH.W	R0
	SYMB	SOFF, 28
	MOV.W	R1,#SEG( _1296 )
	MOV.W	R0,#SOF( _1296 )
	PUSH.W	R0, R1
	SYMB	SOFF, 32
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADD.W	R7,#08H
	SYMB	SOFF, 24
; rs232cmd.c 5613					rs232puts( buffer);
	SYMB	LINE, 5613
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5614				}
; rs232cmd.c 5615			}
	SYMB	LINE, 5615
	BR	_1427
_1423:
; rs232cmd.c 5616			else
; rs232cmd.c 5617				SCPIError = SyntaxErr;
	SYMB	LINE, 5617
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 5618		}
	SYMB	LINE, 5618
_1427:
; rs232cmd.c 5619	}
	SYMB	LINE, 5619
	ADD.W	R7,#014H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5620	
; rs232cmd.c 5621	/**************************************************************************/
; rs232cmd.c 5622	/* FactTCXOStatus																				 	     RS232CMD.C	*/
; rs232cmd.c 5623	/*																																				*/
; rs232cmd.c 5624	/* Author:		Kim Engedahl, DEV, 000628	    															*/
; rs232cmd.c 5625	/* Revised:	  000628				     																					*/
; rs232cmd.c 5626	/*																																				*/
; rs232cmd.c 5627	/* Function:	--																													*/
; rs232cmd.c 5628	/* Remarks:																																*/
; rs232cmd.c 5629	/* Returns:		--																													*/
; rs232cmd.c 5630	/* Updates:		--																													*/
; rs232cmd.c 5631	/**************************************************************************/
; rs232cmd.c 5632	void FactTCXOStatus( void)
; rs232cmd.c 5633	{
	ALIGN	1
	SYMB	LINE, 5633
	PUBLIC	_FactTCXOStatus
_FactTCXOStatus:
	SYMB	TYPE, 649, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactTCXOStatus", _FactTCXOStatus, #649, 0, 0, 48
	SYMB	ALAB, _FactTCXOStatus, #649
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#014H
	SYMB	SOFF, 24
	SYMB	IDEN, "buffer", -24, #563, 130, 5
; rs232cmd.c 5634		char buffer[20];
; rs232cmd.c 5635	
; rs232cmd.c 5636		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5636
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1433
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1433
; rs232cmd.c 5637		{
; rs232cmd.c 5638			if ( CmdRequest)
	SYMB	LINE, 5638
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1429
; rs232cmd.c 5639			{
; rs232cmd.c 5640				if ( ParCnt)
	SYMB	LINE, 5640
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	BEQ	_1428
; rs232cmd.c 5641					SCPIError = SyntaxErr;
	SYMB	LINE, 5641
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1433
_1428:
; rs232cmd.c 5642				else
; rs232cmd.c 5643				{
; rs232cmd.c 5644					sprintf( buffer, "%u\n", tcxo_status());
	SYMB	LINE, 5644
	CALL	_tcxo_status
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	PUSH.W	R0
	SYMB	SOFF, 26
	MOV.W	R1,#SEG( _1009 )
	MOV.W	R0,#SOF( _1009 )
	PUSH.W	R0, R1
	SYMB	SOFF, 30
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_sprintf
	ADDS.W	R7,#06H
	SYMB	SOFF, 24
; rs232cmd.c 5645					rs232puts( buffer);
	SYMB	LINE, 5645
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_rs232puts
; rs232cmd.c 5646				}
; rs232cmd.c 5647			}
	SYMB	LINE, 5647
	BR	_1433
_1429:
; rs232cmd.c 5648			else
; rs232cmd.c 5649				SCPIError = SyntaxErr;
	SYMB	LINE, 5649
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
; rs232cmd.c 5650		}
	SYMB	LINE, 5650
_1433:
; rs232cmd.c 5651	}
	SYMB	LINE, 5651
	ADD.W	R7,#014H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5652	
; rs232cmd.c 5653	/**************************************************************************/
; rs232cmd.c 5654	/* FactMultiMediaChip																		 	     RS232CMD.C	*/
; rs232cmd.c 5655	/*																																				*/
; rs232cmd.c 5656	/* Author:		Kim Engedahl, DEV, 000505	    															*/
; rs232cmd.c 5657	/* Revised:	  000614				     																					*/
; rs232cmd.c 5658	/*																																				*/
; rs232cmd.c 5659	/* Function:	--																													*/
; rs232cmd.c 5660	/* Remarks:		--																													*/
; rs232cmd.c 5661	/* Returns:		--																													*/
; rs232cmd.c 5662	/* Updates:		--																													*/
; rs232cmd.c 5663	/**************************************************************************/
; rs232cmd.c 5664	void FactMultiMediaChip( void)
; rs232cmd.c 5665	{
	ALIGN	1
	SYMB	LINE, 5665
	PUBLIC	_FactMultiMediaChip
_FactMultiMediaChip:
	SYMB	TYPE, 650, 'X', 12, #1, 30, 0
	SYMB	GFUN, "FactMultiMediaChip", _FactMultiMediaChip, #650, 0, 0, 48
	SYMB	ALAB, _FactMultiMediaChip, #650
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0AH
	SYMB	SOFF, 10
	SYMB	TYPE, 651, 'Z', #18, 1
	SYMB	IDEN, "test", -10, #651, 130, 5
	SYMB	TYPE, 653, 'Z', #3, 1
	SYMB	IDEN, "tmp", -6, #653, 130, 5
; rs232cmd.c 5666		UI test[2];
; rs232cmd.c 5667		UC tmp[2];
; rs232cmd.c 5668	
; rs232cmd.c 5669		if ( CmdExecute && !SCPIError)
	SYMB	LINE, 5669
	MOV.B	ES,#SEG( _CmdExecute )
	MOV.W	R0,#SOF( _CmdExecute )
	MOV.B	R0L,[R0]
	BEQ	_1444
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	R0,[R0]
	BNE	_1444
; rs232cmd.c 5670		{
; rs232cmd.c 5671			if ( CmdRequest)
	SYMB	LINE, 5671
	MOV.B	ES,#SEG( _CmdRequest )
	MOV.W	R0,#SOF( _CmdRequest )
	MOV.B	R0L,[R0]
	BEQ	_1437
; rs232cmd.c 5672			{
; rs232cmd.c 5673				if ( ParCnt != 1)
	SYMB	LINE, 5673
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#01H
	BEQ	_1436
; rs232cmd.c 5674					SCPIError = SyntaxErr;
	SYMB	LINE, 5674
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1444
_1436:
; rs232cmd.c 5675				else
; rs232cmd.c 5676				{
; rs232cmd.c 5677					sscanf( Cmd, "%d", &test[0]);
	SYMB	LINE, 5677
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	PUSH.W	R2, R3
	SYMB	SOFF, 14
	MOV.W	R3,#SEG( _10 )
	MOV.W	R2,#SOF( _10 )
	PUSH.W	R2, R3
	SYMB	SOFF, 18
	CALL	_sscanf
	ADD.W	R7,#08H
	SYMB	SOFF, 10
; rs232cmd.c 5678	
; rs232cmd.c 5679					tmp[0] = test[0] & 0x0FF;
	SYMB	LINE, 5679
	MOV.W	R0,[R7]
	AND.B	R0L,#0FFH
	MOV.B	[R7+4],R0L
; rs232cmd.c 5680	
; rs232cmd.c 5681					TransmitIIC( 0x40, 1, tmp, IIC_PTV);
	SYMB	LINE, 5681
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+4
	MOV.B	R1L,#00H
	MOV.B	R0H,#01H
	MOV.B	R0L,#040H
	CALL	_TransmitIIC
; rs232cmd.c 5682					ReceiveIIC( 0x40, 1, &tmp[1], IIC_PTV);
	SYMB	LINE, 5682
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+5
	MOV.B	R0L,#040H
	MOV.B	R0H,#01H
	MOV.B	R1L,#00H
	CALL	_ReceiveIIC
; rs232cmd.c 5683	
; rs232cmd.c 5684					rs232printf( 12,"%03d,%03d\n", ( int) tmp[0], ( int) tmp[1]);
	SYMB	LINE, 5684
	MOV.W	R0,#0CH
	MOV.B	R1L,[R7+4]
	MOVS.B	R1H,#00H
	MOV.B	R2L,[R7+5]
	MOVS.B	R2H,#00H
	PUSH.W	R2
	SYMB	SOFF, 12
	PUSH.W	R1
	SYMB	SOFF, 14
	MOV.W	R3,#SEG( _1434 )
	MOV.W	R2,#SOF( _1434 )
	PUSH.W	R2, R3
	SYMB	SOFF, 18
	CALL	_rs232printf
	ADD.W	R7,#08H
	SYMB	SOFF, 10
; rs232cmd.c 5685				}
; rs232cmd.c 5686			}
	SYMB	LINE, 5686
	BR	_1444
_1437:
; rs232cmd.c 5687			else
; rs232cmd.c 5688			{
; rs232cmd.c 5689				if ( !PasswordProtected)
	SYMB	LINE, 5689
	MOV.B	ES,#SEG( _PasswordProtected )
	MOV.W	R0,#SOF( _PasswordProtected )
	MOV.W	R0,[R0]
	BNE	_1444
; rs232cmd.c 5690				{
; rs232cmd.c 5691					if ( ParCnt != 2)
	SYMB	LINE, 5691
	MOV.B	ES,#SEG( _ParCnt )
	MOV.W	R0,#SOF( _ParCnt )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#02H
	BEQ	_1438
; rs232cmd.c 5692						SCPIError = SyntaxErr;	
	SYMB	LINE, 5692
	MOV.B	ES,#SEG( _SCPIError )
	MOV.W	R0,#SOF( _SCPIError )
	MOV.W	[R0],#03H
	BR	_1444
_1438:
; rs232cmd.c 5693					else
; rs232cmd.c 5694					{
; rs232cmd.c 5695						sscanf( Cmd, "%d,%d", &test[0], &test[1]);
	SYMB	LINE, 5695
	MOV.W	R1,#SEG( _Cmd )
	MOV.W	R0,#SOF( _Cmd )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+2
	PUSH.W	R4, R5
	SYMB	SOFF, 14
	PUSH.W	R2, R3
	SYMB	SOFF, 18
	MOV.W	R3,#SEG( _1435 )
	MOV.W	R2,#SOF( _1435 )
	PUSH.W	R2, R3
	SYMB	SOFF, 22
	CALL	_sscanf
	ADD.W	R7,#0CH
	SYMB	SOFF, 10
; rs232cmd.c 5696	
; rs232cmd.c 5697						tmp[0] = test[0] & 0x0FF;
	SYMB	LINE, 5697
	MOV.W	R0,[R7]
	AND.B	R0L,#0FFH
	MOV.B	[R7+4],R0L
; rs232cmd.c 5698						tmp[1] = test[1] & 0x0FF;
	SYMB	LINE, 5698
	MOV.W	R0,[R7+2]
	AND.B	R0L,#0FFH
	MOV.B	[R7+5],R0L
; rs232cmd.c 5699	
; rs232cmd.c 5700						TransmitIIC( 0x40, 2, tmp, IIC_PTV);
	SYMB	LINE, 5700
	MOV.B	R0H,#02H
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+4
	MOV.B	R1L,#00H
	MOV.W	R3,R5
	MOV.W	R2,R4
	MOV.B	R0L,#040H
	CALL	_TransmitIIC
; rs232cmd.c 5701	
; rs232cmd.c 5702						TransmitIIC( 0x40, 1, tmp, IIC_PTV);
	SYMB	LINE, 5702
	MOV.B	R1L,#00H
	MOV.B	R0H,#01H
	MOV.B	R0L,#040H
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_TransmitIIC
; rs232cmd.c 5703						ReceiveIIC( 0x40, 1, &tmp[1], IIC_PTV);
	SYMB	LINE, 5703
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+5
	MOV.B	R0L,#040H
	MOV.B	R0H,#01H
	MOV.B	R1L,#00H
	CALL	_ReceiveIIC
; rs232cmd.c 5704	
; rs232cmd.c 5705						rs232printf( 12,"%03d,%03d\n", ( int) tmp[0], ( int) tmp[1]);
	SYMB	LINE, 5705
	MOV.W	R0,#0CH
	MOV.B	R1L,[R7+4]
	MOVS.B	R1H,#00H
	MOV.B	R2L,[R7+5]
	MOVS.B	R2H,#00H
	PUSH.W	R2
	SYMB	SOFF, 12
	PUSH.W	R1
	SYMB	SOFF, 14
	MOV.W	R3,#SEG( _1434 )
	MOV.W	R2,#SOF( _1434 )
	PUSH.W	R2, R3
	SYMB	SOFF, 18
	CALL	_rs232printf
	ADD.W	R7,#08H
	SYMB	SOFF, 10
; rs232cmd.c 5706					}
; rs232cmd.c 5707				}
; rs232cmd.c 5708			}
; rs232cmd.c 5709		}
	SYMB	LINE, 5709
_1444:
; rs232cmd.c 5710	}
	SYMB	LINE, 5710
	ADDS.W	R7,#06H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5711	
; rs232cmd.c 5712	/**************************************************************************/
; rs232cmd.c 5713	/* FindParameter														 							     RS232CMD.C	*/
; rs232cmd.c 5714	/*																																				*/
; rs232cmd.c 5715	/* Author:		Kim Engedahl, DEV, 941124	    															*/
; rs232cmd.c 5716	/* Revised:		000603				     																					*/
; rs232cmd.c 5717	/*																																				*/
; rs232cmd.c 5718	/* Function:	Find the character defined parameter												*/
; rs232cmd.c 5719	/* Remarks:		--																													*/
; rs232cmd.c 5720	/* Returns:		The array number containing the parameter or max. array+1		*/
; rs232cmd.c 5721	/* Updates:		--																													*/
; rs232cmd.c 5722	/**************************************************************************/
; rs232cmd.c 5723	int FindParameter( char* par, struct PAR_STRUCT code* ParPtr)
; rs232cmd.c 5724	{
	ALIGN	1
	SYMB	LINE, 5724
	PUBLIC	_FindParameter
_FindParameter:
	SYMB	TYPE, 655, 'X', 12, #16, 30, 2, #259, #521
	SYMB	GFUN, "FindParameter", _FindParameter, #655, 0, 0, 112
	SYMB	ALAB, _FindParameter, #655
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#0CH
	SYMB	SOFF, 10
	SYMB	LTIM, "par", 3, 0, 2253
	SYMB	LTIM, "ParPtr", 11, 0, 2253
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "par", 3, 0, 2125
	SYMB	LTIM, "par", 19, 0, 2253
	SYMB	IDEN, "par", 19, #259, 0, 2061
	SYMB	IDEN, "ParPtr", 11, #521, 0, 2061
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; rs232cmd.c 5725		int tmp = 0;
	SYMB	LINE, 5725
	MOV.W	R6,#00H
	SYMB	LTIM, "tmp", 26, 0, 205
; rs232cmd.c 5726	
; rs232cmd.c 5727		while ( ParPtr)
	SYMB	LINE, 5727
	MOV.W	R1,R3
	MOV.W	R0,R2
	OR.W	R3,R2
	SYMB	LTIM, "ParPtr", 11, 0, 2125
	SYMB	LTIM, "ParPtr", 3, 0, 2253
	BEQ	_1451
_1447:
; rs232cmd.c 5728		{
; rs232cmd.c 5729			if (( !Cstrcmp( par, ParPtr->LongName)) || ( !Cstrcmp( par, ParPtr->ShortName)))
	SYMB	LINE, 5729
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_1453
	ADDS.B	CS,#01H
_1453:
	MOVC.W	R3,[R0+]
	SYMB	LTIM, "ParPtr", 3, 0, 2125
	SYMB	LTIM, "ParPtr", -10, 130, 2245
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "par", 19, 0, 2125
	SYMB	LTIM, "par", 3, 0, 2253
	CALL	_Cstrcmp
	SYMB	LTIM, "par", 3, 0, 2125
	SYMB	LTIM, "par", 19, 0, 2253
	OR.W	R0,R0
	BEQ	_1448
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	ADD.W	R0,#04H
	ADDC.W	R1,#00H
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_1454
	ADDS.B	CS,#01H
_1454:
	MOVC.W	R3,[R0+]
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "par", 19, 0, 2125
	SYMB	LTIM, "par", 3, 0, 2253
	CALL	_Cstrcmp
	SYMB	LTIM, "par", 3, 0, 2125
	SYMB	LTIM, "par", 19, 0, 2253
	OR.W	R0,R0
	BNE	_1449
_1448:
; rs232cmd.c 5730				return( tmp);
	SYMB	LINE, 5730
	MOV.W	R0,R6
	SYMB	LTIM, "tmp", 26, 0, 77
	SYMB	LTIM, "tmp", 2, 0, 205
	BR	_1452
_1449:
	SYMB	LTIM, "par", 19, 0, 2125
	SYMB	LTIM, "par", 19, 0, 2253
	SYMB	LTIM, "ParPtr", -10, 130, 2117
	SYMB	LTIM, "ParPtr", -10, 130, 2245
	SYMB	LTIM, "tmp", 2, 0, 77
	SYMB	LTIM, "tmp", 26, 0, 205
; rs232cmd.c 5731	
; rs232cmd.c 5732			ParPtr = ParPtr->SameLevel;
	SYMB	LINE, 5732
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	ADD.W	R0,#08H
	ADDC.W	R1,#00H
	SYMB	LTIM, "ParPtr", -10, 130, 2117
	SYMB	LTIM, "ParPtr", 3, 0, 2253
	SYMB	LTIM, "ParPtr", 3, 0, 2125
	MOV.B	CS,R1L
	MOVC.W	R2,[R0+]
	CMP.W	R0,#00H
	BNE	_1455
	ADDS.B	CS,#01H
_1455:
	MOVC.W	R3,[R0+]
	SYMB	LTIM, "ParPtr", 11, 0, 2253
; rs232cmd.c 5733	
; rs232cmd.c 5734			if ( tmp < 255)
	SYMB	LINE, 5734
	CMP.W	R6,#0FFH
	BGE	_1451
; rs232cmd.c 5735				tmp++;
	SYMB	LINE, 5735
	ADDS.W	R6,#01H
	SYMB	LTIM, "tmp", 26, 0, 77
	SYMB	LTIM, "tmp", 26, 0, 205
	SYMB	LINE, 5727
	MOV.W	R1,R3
	MOV.W	R0,R2
	OR.W	R3,R2
	SYMB	LTIM, "ParPtr", 11, 0, 2125
	SYMB	LTIM, "ParPtr", 3, 0, 2253
	BNE	_1447
; rs232cmd.c 5736			else
; rs232cmd.c 5737				break;
; rs232cmd.c 5738		}
	SYMB	LINE, 5738
_1451:
; rs232cmd.c 5739	
; rs232cmd.c 5740		return( -1);
	SYMB	LINE, 5740
	MOV.W	R0,#0FFFFH
	SYMB	LTIM, "ParPtr", 3, 0, 2125
; rs232cmd.c 5741	}
	SYMB	LINE, 5741
_1452:
	ADDS.W	R7,#04H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "tmp", 26, 0, 77
	SYMB	LTIM, "par", 19, 0, 2125
	SYMB	EFUN
; rs232cmd.c 5742	
; rs232cmd.c 5743	
; rs232cmd.c 5744	/**************************************************************************/
; rs232cmd.c 5745	/* FLTToSamples															  								 RS232CMD.C */
; rs232cmd.c 5746	/*																																				*/
; rs232cmd.c 5747	/* Author:		Kim Engedahl, DEV, 970211	    															*/
; rs232cmd.c 5748	/* Revised:		000530				     																					*/
; rs232cmd.c 5749	/*																																				*/	
; rs232cmd.c 5750	/* Function:	--																													*/
; rs232cmd.c 5751	/* Remarks:		PAL Range: 1728*256, NTSC Range: 1716*256										*/
; rs232cmd.c 5752	/* Returns:		FLT in samples, or -1 if illegal														*/
; rs232cmd.c 5753	/* Updates:		--																													*/
; rs232cmd.c 5754	/***************************************************************************/
; rs232cmd.c 5755	long FLTToSamples( UC system, int F, int L, float T) {
	ALIGN	1
	SYMB	LINE, 5755
	PUBLIC	_FLTToSamples
_FLTToSamples:
	SYMB	TYPE, 656, 'X', 12, #6, 30, 4, #3, #16, #16, #10
	SYMB	GFUN, "FLTToSamples", _FLTToSamples, #656, 0, 0, 112
	SYMB	ALAB, _FLTToSamples, #656
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#018H
	SYMB	SOFF, 30
	SYMB	LTIM, "system", 0, 0, 2253
	MOV.B	[R7+18],R0L
	SYMB	LTIM, "system", 0, 0, 2125
	SYMB	LTIM, "system", -12, 130, 2245
	MOV.W	[R7+14],R2
	SYMB	IDEN, "system", -7, #3, 130, 2053
	SYMB	IDEN, "F", -1, #16, 130, 2053
	SYMB	LTIM, "F", -1, 0, 2117
	SYMB	IDEN, "L", -1, #16, 130, 2053
	SYMB	LTIM, "L", -1, 0, 2117
	SYMB	IDEN, "T", 4, #10, 130, 2053
	SYMB	IDEN, "samples", -10, #6, 130, 5
	SYMB	IDEN, "minus", -1, #2, 130, 5
	SYMB	LTIM, "minus", -1, 0, 69
; rs232cmd.c 5756	
; rs232cmd.c 5757		long samples;
; rs232cmd.c 5758		char minus;
; rs232cmd.c 5759	
; rs232cmd.c 5760		if (( F == 0) && ( L == 0) && ( T == 0))
	SYMB	LINE, 5760
	MOV.W	[R7+16],R1
	OR.W	R1,R1
	BNE	_1462
	MOV.W	R0,[R7+14]
	BNE	_1462
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BNE	_1462
; rs232cmd.c 5761			return( 0);
	SYMB	LINE, 5761
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_1529
_1462:
	SYMB	LTIM, "system", -12, 130, 2117
	SYMB	LTIM, "system", -12, 130, 2245
; rs232cmd.c 5762	
; rs232cmd.c 5763		if (( F <= 0) && ( L <= 0) && ( T <= 0))
	SYMB	LINE, 5763
	CMP.W	[R7+16],#00H
	BGT	_1465
	CMP.W	[R7+14],#00H
	BGT	_1465
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BGT	_1465
; rs232cmd.c 5764		{
; rs232cmd.c 5765			minus = 1;
	SYMB	LINE, 5765
	MOV.B	[R7+12],#01H
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5766		}
	SYMB	LINE, 5766
	BR	_1469
_1465:
; rs232cmd.c 5767		else
; rs232cmd.c 5768		{
; rs232cmd.c 5769			if (( F >= 0) && ( L >= 0) && ( T >= 0))
	SYMB	LINE, 5769
	CMP.W	[R7+16],#00H
	BLT	_1467
	CMP.W	[R7+14],#00H
	BLT	_1467
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BGE	_1468
; rs232cmd.c 5770				minus = 0;
	SYMB	LINE, 5770
_1467:
; rs232cmd.c 5771			else
; rs232cmd.c 5772				return( -1);
	SYMB	LINE, 5772
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1529
	SYMB	LINE, 5770
_1468:
	SYMB	LTIM, "system", -12, 130, 2117
	SYMB	LTIM, "system", -12, 130, 2245
	MOV.B	[R7+12],#00H
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5773		}
	SYMB	LINE, 5773
_1469:
; rs232cmd.c 5774	
; rs232cmd.c 5775																				// 1 sample = (1/27MHz)/256
; rs232cmd.c 5776		samples = ( long)(( T*6912L)/1000L + 0.5);	
	SYMB	LINE, 5776
	MOV.W	R1,#045D8H
	MOV.W	R0,#00H
	MOV.W	R3,[R7+36]
	MOV.W	R2,[R7+34]
	FCALL	__MUL_SPF
	MOV.W	R3,#0447AH
	MOV.W	R2,#00H
	FCALL	__DIV_SPF
	FCALL	__SPF2DPF
	MOV.W	[R7+10],#03FE0H
	MOV.W	[R7+8],#00H
	MOV.W	[R7+6],#00H
	MOV.W	[R7+4],#00H
	LEA	R6,R7+4
	FCALL	__ADD_DPF
	FCALL	__DPF2L
	MOV.W	[R7+22],R1
	MOV.W	[R7+20],R0
; rs232cmd.c 5777	
; rs232cmd.c 5778		if ( system < NTSC)									// If selected system is PAL..
	SYMB	LINE, 5778
	MOV.B	R2L,[R7+18]
	CMP.B	R2L,#02H
	SYMB	LTIM, "system", -12, 130, 2117
	SYMB	LTIM, "system", 8, 0, 2253
	BCC	_1494
	MOV.W	[R7+10],R1
	MOV.W	[R7+8],R0
; rs232cmd.c 5779		{
; rs232cmd.c 5780	
; rs232cmd.c 5781			if ( labs( samples) > 442367L)	 	// Test for illegal time var
	SYMB	LINE, 5781
	CALL	_labs
	SYMB	LTIM, "system", 8, 0, 2125
	CMP.W	R1,#06H
	BLT	_1470
	BGT	_1535
	CMP.W	R0,#0BFFFH
	BL	_1470
_1535:
; rs232cmd.c 5782				return( -1);
	SYMB	LINE, 5782
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1529
_1470:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5783	
; rs232cmd.c 5784			switch ( F)												// Test for illegal field & line
	SYMB	LINE, 5784
	CMP.W	[R7+16],#00H
	BEQ	_1471
	CMP.W	[R7+16],#0FFFFH
	BEQ	_1476
	CMP.W	[R7+16],#0FFFDH
	BEQ	_1476
	CMP.W	[R7+16],#02H
	BEQ	_1476
	CMP.W	[R7+16],#0FFFEH
	BEQ	_1479
	CMP.W	[R7+16],#01H
	BEQ	_1479
	CMP.W	[R7+16],#03H
	BEQ	_1479
	CMP.W	[R7+16],#04H
	BEQ	_1480
	BR	_1482
; rs232cmd.c 5785			{
; rs232cmd.c 5786				case 0:
	SYMB	LINE, 5786
_1471:
; rs232cmd.c 5787					if (( minus && ( L < -311)) || ( !minus && ( L > 312)))
	SYMB	LINE, 5787
	MOV.B	R0L,[R7+12]
	BEQ	_1472
	CMP.W	[R7+14],#0FEC9H
	BLT	_1473
_1472:
	MOV.B	R0L,[R7+12]
	BNE	_1487
	CMP.W	[R7+14],#0138H
	BLE	_1487
_1473:
; rs232cmd.c 5788						return( -1);
	SYMB	LINE, 5788
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1529
; rs232cmd.c 5789					break;
; rs232cmd.c 5790	
; rs232cmd.c 5791				case -1:
; rs232cmd.c 5792				case -3:
; rs232cmd.c 5793				case 2:
	SYMB	LINE, 5793
_1476:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5794					if ( abs( L) > 312)
	SYMB	LINE, 5794
	MOV.W	R0,[R7+14]
	CALL	_abs
	CMP.W	R0,#0138H
	BLE	_1487
; rs232cmd.c 5795						return( -1);
	SYMB	LINE, 5795
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1529
; rs232cmd.c 5796					break;
; rs232cmd.c 5797	
; rs232cmd.c 5798				case -2:
; rs232cmd.c 5799				case 1:
; rs232cmd.c 5800				case 3:
	SYMB	LINE, 5800
_1479:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5801					if ( abs( L) > 311)
	SYMB	LINE, 5801
	MOV.W	R0,[R7+14]
	CALL	_abs
	CMP.W	R0,#0137H
	BLE	_1487
; rs232cmd.c 5802						return( -1);
	SYMB	LINE, 5802
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1529
; rs232cmd.c 5803					break;
; rs232cmd.c 5804	
; rs232cmd.c 5805				case 4:
	SYMB	LINE, 5805
_1480:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5806					if (( L > 0) || ( T > 0.0))
	SYMB	LINE, 5806
	CMP.W	[R7+14],#00H
	BGT	_1481
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__SPF2DPF
	MOV.W	[R7+6],#00H
	MOV.W	[R7+4],#00H
	MOV.W	[R7+2],#00H
	MOV.W	[R7],#00H
	MOV.W	R6,R7
	FCALL	__CMP_DPF
	CMP.B	R0L,#01H
	BNE	_1487
_1481:
; rs232cmd.c 5807						return( -1);
	SYMB	LINE, 5807
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1529
; rs232cmd.c 5808					break;
; rs232cmd.c 5809	
; rs232cmd.c 5810				default:
	SYMB	LINE, 5810
_1482:
; rs232cmd.c 5811					return( -1);
	SYMB	LINE, 5811
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1529
; rs232cmd.c 5812			}
	SYMB	LINE, 5812
_1487:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5813	
; rs232cmd.c 5814			if ( !minus)											// if posistive delay..
	SYMB	LINE, 5814
	MOV.B	R0L,[R7+12]
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", 0, 0, 205
	BNE	_1488
; rs232cmd.c 5815			{
; rs232cmd.c 5816				if ( F % 2)
	SYMB	LINE, 5816
	MOV.W	R0,[R7+16]
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#02H
	OR.W	R1,R1
	BEQ	_1493
; rs232cmd.c 5817				{
; rs232cmd.c 5818					L += 313;
	SYMB	LINE, 5818
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0139H
	SYMB	LTIM, "minus", 0, 0, 77
	MOV.W	[R7+14],R0
; rs232cmd.c 5819					F--;
	SYMB	LINE, 5819
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#0FH
	MOV.W	[R7+16],R0
; rs232cmd.c 5820				}
; rs232cmd.c 5821			}
	SYMB	LINE, 5821
	BR	_1493
_1488:
; rs232cmd.c 5822			else															// ..else delay is negative
; rs232cmd.c 5823			{
; rs232cmd.c 5824				F += 7;
	SYMB	LINE, 5824
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#07H
; rs232cmd.c 5825	
; rs232cmd.c 5826				samples += 442367L;
	SYMB	LINE, 5826
	MOV.W	R3,[R7+10]
	MOV.W	R2,[R7+8]
	ADD.W	R2,#0BFFFH
	ADDC.W	R3,#06H
	MOV.W	[R7+22],R3
	MOV.W	[R7+20],R2
; rs232cmd.c 5827	
; rs232cmd.c 5828				if ( F % 2) {
	SYMB	LINE, 5828
	MOV.W	[R7+16],R0
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#02H
	OR.W	R1,R1
	BEQ	_1489
; rs232cmd.c 5829					L += 624;
	SYMB	LINE, 5829
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0270H
	MOV.W	[R7+14],R0
; rs232cmd.c 5830					F--;
	SYMB	LINE, 5830
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#0FH
	MOV.W	[R7+16],R0
; rs232cmd.c 5831				}
	SYMB	LINE, 5831
	BR	_1490
_1489:
; rs232cmd.c 5832				else
; rs232cmd.c 5833					L += 312;
	SYMB	LINE, 5833
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0138H
	MOV.W	[R7+14],R0
_1490:
; rs232cmd.c 5834	
; rs232cmd.c 5835				if ( T == 0)
	SYMB	LINE, 5835
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BNE	_1493
; rs232cmd.c 5836					samples++;
	SYMB	LINE, 5836
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,#01H
	ADDC.W	R1,#00H
	MOV.W	[R7+22],R1
	MOV.W	[R7+20],R0
; rs232cmd.c 5837			}
	SYMB	LINE, 5837
_1493:
; rs232cmd.c 5838	
; rs232cmd.c 5839			samples += F*138240000L + L*442368L;
	SYMB	LINE, 5839
	MOV.W	R0,[R7+16]
	SEXT.W	R1
	MOV.W	R3,R1
	MOV.W	R2,R0
	ASL.D	R2,#05H
	ADD.W	R2,R0
	ADDC.W	R3,R1
	ASL.D	R2,#05H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#02H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#02H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#0DH
	MOV.W	R0,[R7+14]
	MOV.W	R4,R0
	SEXT.W	R5
	MOV.W	R1,R5
	MOV.W	R0,R4
	ASL.D	R0,#03H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#0EH
	ADD.W	R2,R0
	ADDC.W	R3,R1
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,R2
	ADDC.W	R1,R3
; rs232cmd.c 5840		}
	SYMB	LINE, 5840
	BR	_1515
_1494:
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5841		else																// ..else system is NTSC
; rs232cmd.c 5842		{
; rs232cmd.c 5843	
; rs232cmd.c 5844			if ( labs( samples) > 439295L)		// Test for illegal time var
	SYMB	LINE, 5844
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	CALL	_labs
	CMP.W	R1,#06H
	BLT	_1495
	BGT	_1541
	CMP.W	R0,#0B3FFH
	BL	_1495
_1541:
; rs232cmd.c 5845				return( -1);
	SYMB	LINE, 5845
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1529
_1495:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5846	
; rs232cmd.c 5847			switch ( F)												// Test for illegal field & line
	SYMB	LINE, 5847
	CMP.W	[R7+16],#00H
	BEQ	_1496
	CMP.W	[R7+16],#0FFFFH
	BEQ	_1499
	CMP.W	[R7+16],#01H
	BEQ	_1500
	CMP.W	[R7+16],#02H
	BEQ	_1501
	BR	_1503
; rs232cmd.c 5848			{
; rs232cmd.c 5849				case 0:
	SYMB	LINE, 5849
_1496:
; rs232cmd.c 5850					if (( minus && ( L < -261)) || ( !minus && ( L > 262)))
	SYMB	LINE, 5850
	MOV.B	R0L,[R7+12]
	BEQ	_1497
	CMP.W	[R7+14],#0FEFBH
	BLT	_1498
_1497:
	MOV.B	R0L,[R7+12]
	BNE	_1508
	CMP.W	[R7+14],#0106H
	BLE	_1508
_1498:
; rs232cmd.c 5851						return( -1);
	SYMB	LINE, 5851
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1529
; rs232cmd.c 5852					break;
; rs232cmd.c 5853	
; rs232cmd.c 5854				case -1:
	SYMB	LINE, 5854
_1499:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5855					if ( abs( L) > 262)
	SYMB	LINE, 5855
	MOV.W	R0,[R7+14]
	CALL	_abs
	CMP.W	R0,#0106H
	BLE	_1508
; rs232cmd.c 5856						return( -1);
	SYMB	LINE, 5856
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1529
; rs232cmd.c 5857					break;
; rs232cmd.c 5858	
; rs232cmd.c 5859				case 1:
	SYMB	LINE, 5859
_1500:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5860					if ( abs( L) > 261)
	SYMB	LINE, 5860
	MOV.W	R0,[R7+14]
	CALL	_abs
	CMP.W	R0,#0105H
	BLE	_1508
; rs232cmd.c 5861						return( -1);
	SYMB	LINE, 5861
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1529
; rs232cmd.c 5862					break;
; rs232cmd.c 5863	
; rs232cmd.c 5864				case 2:
	SYMB	LINE, 5864
_1501:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5865					if (( L > 0) || ( T > 0.0))
	SYMB	LINE, 5865
	CMP.W	[R7+14],#00H
	BGT	_1502
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__SPF2DPF
	MOV.W	[R7+10],#00H
	MOV.W	[R7+8],#00H
	MOV.W	[R7+6],#00H
	MOV.W	[R7+4],#00H
	LEA	R6,R7+4
	FCALL	__CMP_DPF
	CMP.B	R0L,#01H
	BNE	_1508
_1502:
; rs232cmd.c 5866						return( -1);
	SYMB	LINE, 5866
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1529
; rs232cmd.c 5867					break;
; rs232cmd.c 5868	
; rs232cmd.c 5869				default:
	SYMB	LINE, 5869
_1503:
; rs232cmd.c 5870					return( -1);
	SYMB	LINE, 5870
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#0FFFFH
	BR	_1529
; rs232cmd.c 5871			}
	SYMB	LINE, 5871
_1508:
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", -18, 130, 197
; rs232cmd.c 5872	
; rs232cmd.c 5873			if ( !minus)										// if posistive delay..
	SYMB	LINE, 5873
	MOV.B	R0L,[R7+12]
	SYMB	LTIM, "minus", -18, 130, 69
	SYMB	LTIM, "minus", 0, 0, 205
	BNE	_1509
; rs232cmd.c 5874			{						
; rs232cmd.c 5875	
; rs232cmd.c 5876				if ( F % 2)
	SYMB	LINE, 5876
	MOV.W	R0,[R7+16]
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#02H
	OR.W	R1,R1
	BEQ	_1514
; rs232cmd.c 5877				{
; rs232cmd.c 5878					L += 263;
	SYMB	LINE, 5878
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0107H
	SYMB	LTIM, "minus", 0, 0, 77
	MOV.W	[R7+14],R0
; rs232cmd.c 5879					F--;
	SYMB	LINE, 5879
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#0FH
	MOV.W	[R7+16],R0
; rs232cmd.c 5880				}
; rs232cmd.c 5881			}
	SYMB	LINE, 5881
	BR	_1514
_1509:
; rs232cmd.c 5882			else															// ..else delay is negative
; rs232cmd.c 5883			{																	
; rs232cmd.c 5884				F += 3;
	SYMB	LINE, 5884
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#03H
; rs232cmd.c 5885	
; rs232cmd.c 5886				samples += 439295;
	SYMB	LINE, 5886
	MOV.W	R3,[R7+22]
	MOV.W	R2,[R7+20]
	ADD.W	R2,#0B3FFH
	ADDC.W	R3,#06H
	MOV.W	[R7+22],R3
	MOV.W	[R7+20],R2
; rs232cmd.c 5887	
; rs232cmd.c 5888				if ( F % 2)
	SYMB	LINE, 5888
	MOV.W	[R7+16],R0
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#02H
	OR.W	R1,R1
	BEQ	_1510
; rs232cmd.c 5889				{
; rs232cmd.c 5890					L += 524;
	SYMB	LINE, 5890
	MOV.W	R0,[R7+14]
	ADD.W	R0,#020CH
	MOV.W	[R7+14],R0
; rs232cmd.c 5891					F--;
	SYMB	LINE, 5891
	MOV.W	R0,[R7+16]
	ADDS.W	R0,#0FH
	MOV.W	[R7+16],R0
; rs232cmd.c 5892				}
	SYMB	LINE, 5892
	BR	_1511
_1510:
; rs232cmd.c 5893				else
; rs232cmd.c 5894					L += 262;
	SYMB	LINE, 5894
	MOV.W	R0,[R7+14]
	ADD.W	R0,#0106H
	MOV.W	[R7+14],R0
_1511:
; rs232cmd.c 5895	
; rs232cmd.c 5896				if ( T == 0)
	SYMB	LINE, 5896
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	MOV.W	R1,[R7+36]
	MOV.W	R0,[R7+34]
	FCALL	__CMP_SPF
	CMP.B	R0L,#00H
	BNE	_1514
; rs232cmd.c 5897					samples++;
	SYMB	LINE, 5897
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,#01H
	ADDC.W	R1,#00H
	MOV.W	[R7+22],R1
	MOV.W	[R7+20],R0
; rs232cmd.c 5898			}
	SYMB	LINE, 5898
_1514:
; rs232cmd.c 5899	
; rs232cmd.c 5900			samples += F*115315200L + L*439296L;
	SYMB	LINE, 5900
	MOV.W	R0,[R7+16]
	SEXT.W	R1
	MOV.W	R3,R1
	MOV.W	R2,R0
	ASL.D	R2,#03H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#03H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#06H
	SUB.W	R2,R0
	SUBB.W	R3,R1
	ASL.D	R2,#03H
	ADD.W	R2,R0
	ADDC.W	R3,R1
	ASL.D	R2,#03H
	ADD.W	R2,R0
	ADDC.W	R3,R1
	ASL.D	R2,#09H
	MOV.W	R0,[R7+14]
	MOV.W	R4,R0
	SEXT.W	R5
	MOV.W	R1,R5
	MOV.W	R0,R4
	ASL.D	R0,#03H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	ADD.W	R0,R4
	ADDC.W	R1,R5
	ASL.D	R0,#0AH
	ADD.W	R2,R0
	ADDC.W	R3,R1
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,R2
	ADDC.W	R1,R3
; rs232cmd.c 5901		}
	SYMB	LINE, 5901
_1515:
; rs232cmd.c 5902	
; rs232cmd.c 5903		return( samples);
; rs232cmd.c 5904	}
	SYMB	LINE, 5904
_1529:
	ADD.W	R7,#018H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rs232cmd.c 5905	
; rs232cmd.c 5906	/**************************************************************************/
; rs232cmd.c 5907	/* PrintSamplesToFLT												  								 RS232CMD.C */
; rs232cmd.c 5908	/*																																				*/
; rs232cmd.c 5909	/* Author:		Kim Engedahl, DEV, 970211	    															*/
; rs232cmd.c 5910	/* Revised:		000530												     													*/
; rs232cmd.c 5911	/*																																				*/
; rs232cmd.c 5912	/* Function:	--																													*/
; rs232cmd.c 5913	/* Remarks:		PAL Range: 1728*256, NTSC Range: 1716*256										*/
; rs232cmd.c 5914	/* Returns:		--																													*/
; rs232cmd.c 5915	/* Updates:		--																													*/
; rs232cmd.c 5916	/**************************************************************************/
; rs232cmd.c 5917	void PrintSamplesToFLT( UC system, long samples) {
	ALIGN	1
	SYMB	LINE, 5917
	PUBLIC	_PrintSamplesToFLT
_PrintSamplesToFLT:
	SYMB	TYPE, 657, 'X', 12, #1, 30, 2, #3, #6
	SYMB	GFUN, "PrintSamplesToFLT", _PrintSamplesToFLT, #657, 0, 0, 112
	SYMB	ALAB, _PrintSamplesToFLT, #657
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#0AH
	SYMB	SOFF, 12
	SYMB	LTIM, "system", 0, 0, 2253
	SYMB	IDEN, "system", 0, #3, 0, 2061
	SYMB	IDEN, "samples", -1, #6, 130, 2053
	SYMB	LTIM, "samples", -1, 0, 2117
	SYMB	IDEN, "sign", -1, #2, 130, 5
	SYMB	LTIM, "sign", -1, 0, 69
	SYMB	IDEN, "frame", -1, #16, 130, 5
	SYMB	LTIM, "frame", -1, 0, 69
	SYMB	IDEN, "field", -1, #16, 130, 5
	SYMB	LTIM, "field", -1, 0, 69
	SYMB	IDEN, "line", -8, #16, 130, 5
; rs232cmd.c 5918	
; rs232cmd.c 5919		char sign;
; rs232cmd.c 5920		int frame, field, line;
; rs232cmd.c 5921	
; rs232cmd.c 5922		sign = '+';
	SYMB	LINE, 5922
	MOV.B	[R7+2],#02BH
	SYMB	LTIM, "sign", -10, 130, 197
; rs232cmd.c 5923	
; rs232cmd.c 5924		if ( system < NTSC)												// If system selected is PAL..
	SYMB	LINE, 5924
	CMP.B	R0L,#02H
	BCC	_1552
; rs232cmd.c 5925		{
; rs232cmd.c 5926			// 552960000 = 2*625*1728*256
; rs232cmd.c 5927			// 276480000 = 625*1728*256
; rs232cmd.c 5928			// 442368    = 1728*256
; rs232cmd.c 5929	
; rs232cmd.c 5930			if ( samples >= 552960000L)
	SYMB	LINE, 5930
	MOV.W	R5,R3
	MOV.W	R4,R2
	CMP.W	R3,#020F5H
	BLT	_1551
	BGT	_1564
	CMP.W	R2,#08000H
	BCS	_1551
_1564:
; rs232cmd.c 5931			{
; rs232cmd.c 5932				samples--;
	SYMB	LINE, 5932
	SUB.W	R4,#01H
	SUBB.W	R5,#00H
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "system", 0, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
; rs232cmd.c 5933	
; rs232cmd.c 5934				frame = samples / 276480000L;
	SYMB	LINE, 5934
	MOV.W	R3,#0107AH
	MOV.W	R2,#0C000H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	SYMB	LTIM, "samples", 3, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
	MOV.W	[R7],R0
	SYMB	LTIM, "frame", -12, 130, 197
; rs232cmd.c 5935				line = ( samples % 276480000L) /  442368L;
	SYMB	LINE, 5935
	MOV.W	R3,#0107AH
	MOV.W	R2,#0C000H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
	SYMB	LTIM, "samples", 3, 0, 2125
	MOV.W	R3,#06H
	MOV.W	R2,#0C000H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	MOV.W	R6,R0
	MOV.W	[R7+4],R6
; rs232cmd.c 5936				samples = ( samples % 276480000L) %  442368L;
	SYMB	LINE, 5936
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#06H
	MOV.W	R2,#0C000H
	FCALL	__SMODL
	SYMB	LTIM, "samples", 3, 0, 2253
; rs232cmd.c 5937				field = 2*frame;
	SYMB	LINE, 5937
	MOV.W	R2,[R7]
	ASL.W	R2,#01H
	SYMB	LTIM, "frame", -12, 130, 69
	SYMB	LTIM, "frame", 10, 0, 205
	SYMB	LTIM, "frame", 10, 0, 77
	MOV.W	R3,R2
	SYMB	LTIM, "field", 14, 0, 205
; rs232cmd.c 5938	
; rs232cmd.c 5939				if ( line > 312)
	SYMB	LINE, 5939
	MOV.W	R4,#0138H
	CMP.W	R6,#0138H
	BLE	_1549
; rs232cmd.c 5940				{
; rs232cmd.c 5941					field++;
	SYMB	LINE, 5941
	ADDS.W	R2,#01H
	MOV.W	R3,R2
	SYMB	LTIM, "field", 14, 0, 77
	SYMB	LTIM, "field", 14, 0, 205
; rs232cmd.c 5942					line = 624-line;
	SYMB	LINE, 5942
	MOV.W	R2,#0270H
	SUB.W	R2,R6
	MOV.W	[R7+4],R2
; rs232cmd.c 5943				}
	SYMB	LINE, 5943
	BR	_1550
_1549:
; rs232cmd.c 5944				else
; rs232cmd.c 5945					line = 312-line;
	SYMB	LINE, 5945
	MOV.W	R2,[R7+4]
	SUB.W	R4,R2
	MOV.W	[R7+4],R4
_1550:
; rs232cmd.c 5946	
; rs232cmd.c 5947				samples = 442368L - 1 - samples;
	SYMB	LINE, 5947
	MOV.W	R5,#06H
	MOV.W	R4,#0BFFFH
	SUB.W	R4,R0
	SUBB.W	R5,R1
	SYMB	LTIM, "samples", 3, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 5948				field = 7-field;
	SYMB	LINE, 5948
	MOV.W	R1,#07H
	SUB.W	R1,R3
	MOV.W	R0,R1
	SYMB	LTIM, "field", 14, 0, 77
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 5949	
; rs232cmd.c 5950				if ( field != 4)
	SYMB	LINE, 5950
	CMP.W	R1,#04H
	BEQ	_1562
; rs232cmd.c 5951					sign = '-';
	SYMB	LINE, 5951
	MOV.B	[R7+2],#02DH
	SYMB	LTIM, "sign", -10, 130, 69
	SYMB	LTIM, "sign", -10, 130, 197
; rs232cmd.c 5952			}
	SYMB	LINE, 5952
	BR	_1562
_1551:
; rs232cmd.c 5953			else
; rs232cmd.c 5954			{
; rs232cmd.c 5955				frame = samples / 276480000L;
	SYMB	LINE, 5955
	MOV.W	R3,#0107AH
	MOV.W	R2,#0C000H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SDIVL
	SYMB	LTIM, "field", 2, 0, 77
	MOV.W	[R7],R0
	SYMB	LTIM, "frame", -12, 130, 197
; rs232cmd.c 5956				line = ( samples % 276480000L) / 442368L;
	SYMB	LINE, 5956
	MOV.W	R3,#0107AH
	MOV.W	R2,#0C000H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
	SYMB	LTIM, "samples", 3, 0, 2125
	MOV.W	R3,#06H
	MOV.W	R2,#0C000H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	MOV.W	R6,R0
	MOV.W	[R7+4],R6
; rs232cmd.c 5957				samples = ( samples % 276480000L) % 442368L;
	SYMB	LINE, 5957
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#06H
	MOV.W	R2,#0C000H
	FCALL	__SMODL
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 5958				field = 2*frame;
	SYMB	LINE, 5958
	MOV.W	R1,[R7]
	ASL.W	R1,#01H
	SYMB	LTIM, "frame", -12, 130, 69
	SYMB	LTIM, "frame", 6, 0, 205
	SYMB	LTIM, "frame", 6, 0, 77
	MOV.W	R0,R1
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 5959	
; rs232cmd.c 5960				if ( line > 312)
	SYMB	LINE, 5960
	CMP.W	R6,#0138H
	BLE	_1562
; rs232cmd.c 5961				{
; rs232cmd.c 5962					field++;
	SYMB	LINE, 5962
	ADDS.W	R1,#01H
	MOV.W	R0,R1
	SYMB	LTIM, "field", 2, 0, 77
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 5963					line -= 313;
	SYMB	LINE, 5963
	SUB.W	R6,#0139H
	MOV.W	[R7+4],R6
; rs232cmd.c 5964				}
; rs232cmd.c 5965			}
; rs232cmd.c 5966		}
	SYMB	LINE, 5966
	BR	_1562
_1552:
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 11, 0, 2253
; rs232cmd.c 5967		else {                  									// ..system selected is NTSC
; rs232cmd.c 5968			if ( samples >= 230630400L)
	SYMB	LINE, 5968
	MOV.W	R5,R3
	MOV.W	R4,R2
	CMP.W	R3,#0DBFH
	BLT	_1555
	BGT	_1568
	CMP.W	R2,#02400H
	BCS	_1555
_1568:
	SYMB	LTIM, "samples", 11, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 5969			{
; rs232cmd.c 5970				// 230630400 = 525*1716*256
; rs232cmd.c 5971				// 439296    = 1716*256
; rs232cmd.c 5972	
; rs232cmd.c 5973				samples--;
	SYMB	LINE, 5973
	SUB.W	R4,#01H
	SUBB.W	R5,#00H
	SYMB	LTIM, "samples", 19, 0, 2125
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "field", 2, 0, 77
	SYMB	LTIM, "samples", 3, 0, 2253
; rs232cmd.c 5974	
; rs232cmd.c 5975				frame = samples / 230630400L;
	SYMB	LINE, 5975
	MOV.W	R3,#0DBFH
	MOV.W	R2,#02400H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	SYMB	LTIM, "samples", 3, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
	MOV.W	[R7],R0
	SYMB	LTIM, "frame", -12, 130, 197
; rs232cmd.c 5976				line = ( samples % 230630400L) / 439296L;
	SYMB	LINE, 5976
	MOV.W	R3,#0DBFH
	MOV.W	R2,#02400H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
	SYMB	LTIM, "samples", 3, 0, 2125
	MOV.W	R3,#06H
	MOV.W	R2,#0B400H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	MOV.W	R6,R0
	MOV.W	[R7+4],R6
; rs232cmd.c 5977				samples = ( samples % 230630400L) % 439296L;
	SYMB	LINE, 5977
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.W	R3,#06H
	MOV.W	R2,#0B400H
	FCALL	__SMODL
	SYMB	LTIM, "samples", 3, 0, 2253
; rs232cmd.c 5978	
; rs232cmd.c 5979				field = 2*frame;
	SYMB	LINE, 5979
	MOV.W	R2,[R7]
	ASL.W	R2,#01H
	SYMB	LTIM, "frame", -12, 130, 69
	SYMB	LTIM, "frame", 10, 0, 205
	SYMB	LTIM, "frame", 10, 0, 77
	MOV.W	R3,R2
	SYMB	LTIM, "field", 14, 0, 205
; rs232cmd.c 5980	
; rs232cmd.c 5981				if ( line > 262)
	SYMB	LINE, 5981
	MOV.W	R4,#0106H
	CMP.W	R6,#0106H
	BLE	_1553
; rs232cmd.c 5982				{
; rs232cmd.c 5983					field++;
	SYMB	LINE, 5983
	ADDS.W	R2,#01H
	MOV.W	R3,R2
	SYMB	LTIM, "field", 14, 0, 77
	SYMB	LTIM, "field", 14, 0, 205
; rs232cmd.c 5984					line = 524-line;
	SYMB	LINE, 5984
	MOV.W	R2,#020CH
	SUB.W	R2,R6
	MOV.W	[R7+4],R2
; rs232cmd.c 5985				}
	SYMB	LINE, 5985
	BR	_1554
_1553:
; rs232cmd.c 5986				else
; rs232cmd.c 5987					line = 262-line;
	SYMB	LINE, 5987
	MOV.W	R2,[R7+4]
	SUB.W	R4,R2
	MOV.W	[R7+4],R4
_1554:
; rs232cmd.c 5988	
; rs232cmd.c 5989				samples = 439296L - 1 - samples;
	SYMB	LINE, 5989
	MOV.W	R5,#06H
	MOV.W	R4,#0B3FFH
	SUB.W	R4,R0
	SUBB.W	R5,R1
	SYMB	LTIM, "samples", 3, 0, 2125
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 5990				field = 3 - field;
	SYMB	LINE, 5990
	MOV.W	R1,#03H
	SUB.W	R1,R3
	MOV.W	R0,R1
	SYMB	LTIM, "field", 14, 0, 77
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 5991	
; rs232cmd.c 5992				if ( field != 2)
	SYMB	LINE, 5992
	CMP.W	R1,#02H
	BEQ	_1562
; rs232cmd.c 5993					sign = '-';
	SYMB	LINE, 5993
	MOV.B	[R7+2],#02DH
	SYMB	LTIM, "sign", -10, 130, 69
	SYMB	LTIM, "sign", -10, 130, 197
; rs232cmd.c 5994			}
	SYMB	LINE, 5994
	BR	_1562
_1555:
; rs232cmd.c 5995			else
; rs232cmd.c 5996			{
; rs232cmd.c 5997				frame = samples / 230630400L;
	SYMB	LINE, 5997
	MOV.W	R3,#0DBFH
	MOV.W	R2,#02400H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SDIVL
	SYMB	LTIM, "field", 2, 0, 77
	MOV.W	[R7],R0
	SYMB	LTIM, "frame", -12, 130, 197
; rs232cmd.c 5998				line = ( samples % 230630400L) / 439296L;
	SYMB	LINE, 5998
	MOV.W	R3,#0DBFH
	MOV.W	R2,#02400H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	LTIM, "samples", 3, 0, 2253
	SYMB	LTIM, "samples", 3, 0, 2125
	MOV.W	R3,#06H
	MOV.W	R2,#0B400H
	MOV.W	R5,R1
	MOV.W	R4,R0
	FCALL	__SDIVL
	MOV.W	R6,R0
	MOV.W	[R7+4],R6
; rs232cmd.c 5999				samples = ( samples % 230630400L) % 439296L;
	SYMB	LINE, 5999
	MOV.W	R3,#06H
	MOV.W	R2,#0B400H
	MOV.W	R1,R5
	MOV.W	R0,R4
	FCALL	__SMODL
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "samples", 19, 0, 2253
; rs232cmd.c 6000				field = 2*frame;
	SYMB	LINE, 6000
	MOV.W	R1,[R7]
	ASL.W	R1,#01H
	SYMB	LTIM, "frame", -12, 130, 69
	SYMB	LTIM, "frame", 6, 0, 205
	SYMB	LTIM, "frame", 6, 0, 77
	MOV.W	R0,R1
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 6001	
; rs232cmd.c 6002				if ( line > 262)
	SYMB	LINE, 6002
	CMP.W	R6,#0106H
	BLE	_1562
; rs232cmd.c 6003				{
; rs232cmd.c 6004					field++;
	SYMB	LINE, 6004
	ADDS.W	R1,#01H
	MOV.W	R0,R1
	SYMB	LTIM, "field", 2, 0, 77
	SYMB	LTIM, "field", 2, 0, 205
; rs232cmd.c 6005					line -= 263;
	SYMB	LINE, 6005
	SUB.W	R6,#0107H
	MOV.W	[R7+4],R6
; rs232cmd.c 6006				}
; rs232cmd.c 6007			}
; rs232cmd.c 6008		}
	SYMB	LINE, 6008
_1562:
; rs232cmd.c 6009	
; rs232cmd.c 6010		rs232printf( 12, "%c%d,", sign, abs( field));
	SYMB	LINE, 6010
	CALL	_abs
	SYMB	LTIM, "field", 2, 0, 77
	MOV.B	R1L,[R7+2]
	SEXT.B	R1H
	SYMB	LTIM, "sign", -10, 130, 69
	SYMB	LTIM, "sign", 4, 0, 205
	SYMB	LTIM, "sign", 4, 0, 77
	PUSH.W	R0
	SYMB	SOFF, 14
	MOV.W	R6,R1
	PUSH.W	R1
	SYMB	SOFF, 16
	MOV.W	R1,#SEG( _1547 )
	MOV.W	R0,#SOF( _1547 )
	PUSH.W	R0, R1
	SYMB	SOFF, 20
	MOV.W	R0,#0CH
	CALL	_rs232printf
	ADD.W	R7,#08H
	SYMB	SOFF, 12
; rs232cmd.c 6011		rs232printf( 12, "%c%d,", sign, abs( line));
	SYMB	LINE, 6011
	MOV.W	R0,[R7+4]
	CALL	_abs
	PUSH.W	R0
	SYMB	SOFF, 14
	MOV.W	[R7+2],R6
	PUSH.W	R6
	SYMB	SOFF, 16
	MOV.W	R1,#SEG( _1547 )
	MOV.W	R0,#SOF( _1547 )
	PUSH.W	R0, R1
	SYMB	SOFF, 20
	MOV.W	R0,#0CH
	CALL	_rs232printf
	ADD.W	R7,#08H
	SYMB	SOFF, 12
; rs232cmd.c 6012		rs232printf( 12, "%c%.1f", sign, fabs((float) ( samples*1000L)/6912L));
	SYMB	LINE, 6012
	MOV.W	R1,R5
	MOV.W	R0,R4
	ASL.D	R0,#05H
	SUB.W	R0,R4
	SUBB.W	R1,R5
	ASL.D	R0,#02H
	ADD.W	R0,R4
	ADDC.W	R1,R5
	ASL.D	R0,#03H
	FCALL	__L2SPF
	MOV.W	R3,#045D8H
	MOV.W	R2,#00H
	FCALL	__DIV_SPF
	FCALL	__SPF2DPF
	CALL	_fabs
	PUSH.W	R0, R1, R2, R3
	SYMB	SOFF, 20
	MOV.W	R0,[R7+8]
	PUSH.W	R0
	SYMB	SOFF, 22
	MOV.W	R1,#SEG( _1548 )
	MOV.W	R0,#SOF( _1548 )
	PUSH.W	R0, R1
	SYMB	SOFF, 26
	MOV.W	R0,#0CH
	CALL	_rs232printf
	ADD.W	R7,#0EH
	SYMB	SOFF, 12
; rs232cmd.c 6013	}
	SYMB	LINE, 6013
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "samples", 19, 0, 2125
	SYMB	EFUN
; rs232cmd.c 6014	
	SYMB	ENDF

	RSEG	RS232CMD_INI_FA
_362:	DB	02CH,025H,064H,00AH,000H
	SYMB	TYPE, 658, 'Z', #453, 3
	SYMB	ALAB, _PresetPtr, #658
	EXTRN	HDATA(_PresetPtr)
	SYMB	ALAB, _CmdExecute, #2
	EXTRN	HDATA(_CmdExecute)
_1222:	DB	025H,06CH,075H,02CH,025H,06CH,075H,00AH,000H
	SYMB	TYPE, 660, 'X', 12, #16, 30, 3, #18, #18, #18
	SYMB	ALAB, _ValidateDate, #660
	EXTRN	HCODE(_ValidateDate)
	SYMB	TYPE, 661, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _SetGenlockSystem, #661
	EXTRN	HCODE(_SetGenlockSystem)
	SYMB	TYPE, 662, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _StorePreset, #662
	EXTRN	HCODE(_StorePreset)
	SYMB	TYPE, 663, 'X', 12, #1, 30, 0
	SYMB	ALAB, _UpdateSTBRegister, #663
	EXTRN	HCODE(_UpdateSTBRegister)
_983:	DB	025H,073H,03BH,000H
_9:	DB	025H,064H,00AH,000H
	SYMB	TYPE, 664, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetBBSystem, #664
	EXTRN	HCODE(_SetBBSystem)
_110:	DB	022H,00AH,000H
	SYMB	TYPE, 665, 'X', 12, #16, 30, 2, #16, #7
	SYMB	ALAB, _SetBBDelay, #665
	EXTRN	HCODE(_SetBBDelay)
	SYMB	TYPE, 666, 'X', 12, #257, 30, 1, #259
	SYMB	ALAB, _strlen, #666
	EXTRN	HCODE(_strlen)
_1169:	DB	025H,075H,02CH,025H,075H,02CH,025H,075H,00AH,000H
	SYMB	TYPE, 667, 'X', 12, #16, 30, 1, #7
	SYMB	ALAB, _SetCBDelay, #667
	EXTRN	HCODE(_SetCBDelay)
_1547:	DB	025H,063H,025H,064H,02CH,000H
	SYMB	TYPE, 668, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetBBScHPhase, #668
	EXTRN	HCODE(_SetBBScHPhase)
	EXTRN	HCODE(__UMODL)
	SYMB	TYPE, 669, 'X', 12, #1, 30, 0
	SYMB	ALAB, _ResetErrorEventQueue, #669
	EXTRN	HCODE(_ResetErrorEventQueue)
	SYMB	TYPE, 670, 'X', 12, #16, 30, 1, #259
	SYMB	ALAB, _GenlockVersion, #670
	EXTRN	HCODE(_GenlockVersion)
	SYMB	TYPE, 671, 'X', 12, #16, 30, 2, #259, #491
	SYMB	ALAB, _Cstrcmp, #671
	EXTRN	HCODE(_Cstrcmp)
	SYMB	TYPE, 672, 'X', 12, #16, 30, 2, #16, #10
	SYMB	ALAB, _SetAudioTiming, #672
	EXTRN	HCODE(_SetAudioTiming)
_1170:	DB	025H,075H,02CH,025H,075H,02CH,025H,075H,000H
	SYMB	TYPE, 673, 'X', 12, #259, 30, 3, #259, #259, #257
	SYMB	ALAB, _strncpy, #673
	EXTRN	HCODE(_strncpy)
	SYMB	ALAB, _AudioOutput, #16
	EXTRN	HDATA(_AudioOutput)
	SYMB	TYPE, 674, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioWordClock, #674
	EXTRN	HCODE(_SetAudioWordClock)
	EXTRN	HCODE(__DIV_DPF)
_781:	DB	025H,02EH,031H,066H,02CH,000H
	SYMB	TYPE, 675, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _abs, #675
	EXTRN	HCODE(_abs)
_1009:	DB	025H,075H,00AH,000H
	SYMB	TYPE, 676, 'X', 12, #16, 30, 0
	SYMB	ALAB, _ReadErrorEventQueue, #676
	EXTRN	HCODE(_ReadErrorEventQueue)
	SYMB	TYPE, 678, 'n', #3, 130
	SYMB	TYPE, 679, 'P', #678
	SYMB	TYPE, 677, 'X', 12, #16, 30, 4, #3, #3, #679, #3
	SYMB	ALAB, _TransmitIIC, #677
	EXTRN	HCODE(_TransmitIIC)
	SYMB	TYPE, 680, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioSystem, #680
	EXTRN	HCODE(_SetAudioSystem)
	SYMB	TYPE, 681, 'X', 12, #16, 30, 4, #16, #16, #259, #1
	SYMB	ALAB, _sio0SndCommand, #681
	EXTRN	HCODE(_sio0SndCommand)
	SYMB	TYPE, 682, 'X', 12, #16, 30, 2, #259, #259
	SYMB	ALAB, _strcmp, #682
	EXTRN	HCODE(_strcmp)
	SYMB	TYPE, 683, 'X', 12, #3, 30, 0
	SYMB	ALAB, _AudioStatus, #683
	EXTRN	HCODE(_AudioStatus)
_1296:	DB	025H,075H,02CH,025H,075H,00AH,000H
	SYMB	TYPE, 684, 'X', 12, #16, 30, 3, #259, #259, #1
	SYMB	ALAB, _sscanf, #684
	EXTRN	HCODE(_sscanf)
_1434:	DB	025H,030H,033H,064H,02CH,025H,030H,033H,064H,00AH,000H
_1297:	DB	025H,075H,02CH,025H,075H,000H
_10:	DB	025H,064H,000H
_898:	DB	025H,066H,000H
	EXTRN	HCODE(__MUL_SPF)
	SYMB	TYPE, 685, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _SetCBSystem, #685
	EXTRN	HCODE(_SetCBSystem)
	SYMB	ALAB, _CBSetup, #459
	EXTRN	HDATA(_CBSetup)
	SYMB	ALAB, _BBSetup, #554
	EXTRN	HDATA(_BBSetup)
_221:	DB	025H,06CH,000H
	SYMB	ALAB, _OperEnableReg, #18
	EXTRN	HDATA(_OperEnableReg)
_312:	DB	047H,058H,025H,064H,03BH,000H
	EXTRN	HCODE(__SUBR_DPF)
_982:	DB	025H,073H,000H
	SYMB	TYPE, 686, 'X', 12, #16, 30, 0
	SYMB	ALAB, _GenlockInit, #686
	EXTRN	HCODE(_GenlockInit)
	SYMB	TYPE, 687, 'Z', #2, 511
	SYMB	ALAB, _Cmd, #687
	EXTRN	HDATA(_Cmd)
_956:	DB	04FH,04EH,000H
_1185:	DB	025H,075H,000H
	SYMB	TYPE, 689, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioSignal, #689
	EXTRN	HCODE(_SetAudioSignal)
	EXTRN	HCODE(__SPF2DPF)
	SYMB	TYPE, 690, 'X', 12, #16, 30, 0
	SYMB	ALAB, _CBInit, #690
	EXTRN	HCODE(_CBInit)
	SYMB	TYPE, 691, 'X', 12, #259, 30, 2, #259, #259
	SYMB	ALAB, _strcpy, #691
	EXTRN	HCODE(_strcpy)
_897:	DB	025H,02EH,031H,066H,00AH,000H
	SYMB	TYPE, 692, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _WriteCBChromaGain, #692
	EXTRN	HCODE(_WriteCBChromaGain)
	SYMB	TYPE, 693, 'X', 12, #11, 30, 1, #11
	SYMB	ALAB, _fabs, #693
	EXTRN	HCODE(_fabs)
	SYMB	ALAB, _ParCnt, #3
	EXTRN	HDATA(_ParCnt)
	SYMB	TYPE, 694, 'X', 12, #16, 30, 3, #263, #453, #16
	SYMB	ALAB, _NV_Recall, #694
	EXTRN	HCODE(_NV_Recall)
	SYMB	TYPE, 695, 'X', 12, #6, 30, 1, #6
	SYMB	ALAB, _labs, #695
	EXTRN	HCODE(_labs)
_262:	DB	04FH,046H,046H,000H
	SYMB	TYPE, 696, 'X', 12, #16, 30, 4, #3, #3, #679, #3
	SYMB	ALAB, _ReceiveIIC, #696
	EXTRN	HCODE(_ReceiveIIC)
	SYMB	TYPE, 697, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _SetAudioOutput, #697
	EXTRN	HCODE(_SetAudioOutput)
	SYMB	ALAB, _NumSuffix, #18
	EXTRN	HDATA(_NumSuffix)
	SYMB	TYPE, 698, 'X', 12, #16, 30, 1, #259
	SYMB	ALAB, _rs232puts, #698
	EXTRN	HCODE(_rs232puts)
	SYMB	ALAB, _CalibrationPtr, #453
	EXTRN	HDATA(_CalibrationPtr)
	SYMB	ALAB, _CmdRequest, #2
	EXTRN	HDATA(_CmdRequest)
	SYMB	ALAB, _ESRReg, #3
	EXTRN	HDATA(_ESRReg)
	SYMB	ALAB, _STBReg, #3
	EXTRN	HDATA(_STBReg)
	SYMB	ALAB, _AudioSetup, #556
	EXTRN	HDATA(_AudioSetup)
_1034:	DB	025H,06CH,075H,02CH,025H,06CH,075H,000H
	SYMB	TYPE, 699, "ERROR_STRUCT", 'S', 6,\
		 "ErrorNo", #16, 0,\
		 "ErrorTxt", #491, 2
	SYMB	TYPE, 700, 'Z', #699, 47
	SYMB	ALAB, _ErrorTxt_Array, #700
	EXTRN	HCODE(_ErrorTxt_Array)
	SYMB	TYPE, 702, 'X', 12, #16, 30, 1, #7
	SYMB	ALAB, _SetGenlockDelay, #702
	EXTRN	HCODE(_SetGenlockDelay)
	SYMB	TYPE, 703, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _WriteCBGain, #703
	EXTRN	HCODE(_WriteCBGain)
_1435:	DB	025H,064H,02CH,025H,064H,000H
_1548:	DB	025H,063H,025H,02EH,031H,066H,000H
	SYMB	ALAB, _BBControlPort, #16
	EXTRN	HDATA(_BBControlPort)
_311:	DB	048H,047H,025H,06CH,064H,03BH,000H
	SYMB	TYPE, 704, 'X', 12, #1, 30, 0
	SYMB	ALAB, _BBDefaults, #704
	EXTRN	HCODE(_BBDefaults)
	SYMB	ALAB, _SettingsPtr, #453
	EXTRN	HDATA(_SettingsPtr)
_310:	DB	047H,04DH,030H,000H
	EXTRN	HCODE(__L2SPF)
	SYMB	ALAB, _ESEReg, #3
	EXTRN	HDATA(_ESEReg)
	SYMB	TYPE, 705, 'X', 12, #16, 30, 1, #259
	SYMB	ALAB, _BBVersion, #705
	EXTRN	HCODE(_BBVersion)
_955:	DB	04FH,046H,046H,00AH,000H
	SYMB	TYPE, 706, 'X', 12, #16, 30, 0
	SYMB	ALAB, _BBInit, #706
	EXTRN	HCODE(_BBInit)
	SYMB	TYPE, 707, 'X', 12, #1, 30, 0
	SYMB	ALAB, _CBDefaults, #707
	EXTRN	HCODE(_CBDefaults)
_981:	DB	025H,064H,02CH,025H,073H,000H
_330:	DB	047H,058H,025H,075H,03BH,000H
	SYMB	ALAB, _GenlockSetup, #455
	EXTRN	HDATA(_GenlockSetup)
	SYMB	TYPE, 708, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _SetCBEmbAudioSignal, #708
	EXTRN	HCODE(_SetCBEmbAudioSignal)
	SYMB	TYPE, 709, 'X', 12, #16, 30, 3, #16, #259, #1
	SYMB	ALAB, _rs232printf, #709
	EXTRN	HCODE(_rs232printf)
	SYMB	ALAB, _Settings, #475
	EXTRN	HDATA(_Settings)
	SYMB	TYPE, 710, 'X', 12, #16, 30, 3, #259, #259, #1
	SYMB	ALAB, _sprintf, #710
	EXTRN	HCODE(_sprintf)
	SYMB	ALAB, _OperEventReg, #18
	EXTRN	HDATA(_OperEventReg)
	EXTRN	HCODE(__CMP_SPF)
	EXTRN	HCODE(__DIV_SPF)
	SYMB	ALAB, _SREReg, #3
	EXTRN	HDATA(_SREReg)
	SYMB	TYPE, 711, 'X', 12, #16, 30, 3, #263, #453, #16
	SYMB	ALAB, _NV_Store, #711
	EXTRN	HCODE(_NV_Store)
	SYMB	TYPE, 712, 'X', 12, #16, 30, 0
	SYMB	ALAB, _pld_version, #712
	EXTRN	HCODE(_pld_version)
	SYMB	TYPE, 713, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _RecallPreset, #713
	EXTRN	HCODE(_RecallPreset)
	SYMB	TYPE, 714, 'X', 12, #16, 30, 0
	SYMB	ALAB, _AudioInit, #714
	EXTRN	HCODE(_AudioInit)
	SYMB	ALAB, _Calibration, #485
	EXTRN	HDATA(_Calibration)
	SYMB	TYPE, 715, 'X', 12, #1, 30, 1, #16
	SYMB	ALAB, _BBSPGCommunication, #715
	EXTRN	HCODE(_BBSPGCommunication)
_184:	DB	025H,064H,02CH,025H,064H,02CH,025H,064H,000H
_295:	DB	025H,064H,02CH,025H,064H,02CH,025H,066H,000H
	EXTRN	HCODE(__ADD_DPF)
	EXTRN	HCODE(__SMODL)
	SYMB	TYPE, 716, 'X', 12, #16, 30, 0
	SYMB	ALAB, _tcxo_status, #716
	EXTRN	HCODE(_tcxo_status)
_157:	DB	025H,064H,02CH,025H,037H,073H,000H
	SYMB	ALAB, _QuestEnableReg, #18
	EXTRN	HDATA(_QuestEnableReg)
	EXTRN	IDATA(__lc_bs)
	SYMB	TYPE, 717, 'X', 12, #16, 30, 0
	SYMB	ALAB, _ResetInstrument, #717
	EXTRN	HCODE(_ResetInstrument)
	SYMB	ALAB, _QuestConditionReg, #18
	EXTRN	HDATA(_QuestConditionReg)
	SYMB	TYPE, 718, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioClick, #718
	EXTRN	HCODE(_SetAudioClick)
_1075:	DB	025H,038H,073H,000H
	SYMB	TYPE, 719, 'X', 12, #16, 30, 1, #18
	SYMB	ALAB, _SetCBPattern, #719
	EXTRN	HCODE(_SetCBPattern)
	EXTRN	HCODE(__SDIVL)
_1050:	DB	025H,033H,032H,073H,000H
	SYMB	TYPE, 720, 'X', 12, #1, 30, 0
	SYMB	ALAB, _GenlockDefaults, #720
	EXTRN	HCODE(_GenlockDefaults)
_529:	DB	025H,064H,02CH,000H
	SYMB	TYPE, 721, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _rs232putchar, #721
	EXTRN	HCODE(_rs232putchar)
	EXTRN	HCODE(__DPF2L)
	EXTRN	HCODE(__CMP_DPF)
	SYMB	ALAB, _OperConditionReg, #18
	EXTRN	HDATA(_OperConditionReg)
	SYMB	TYPE, 722, 'X', 12, #1, 30, 0
	SYMB	ALAB, _AudioDefaults, #722
	EXTRN	HCODE(_AudioDefaults)
_183:	DB	025H,064H,02CH,025H,064H,02CH,025H,064H,00AH,000H
_131:	DB	025H,064H,02CH,025H,031H,037H,073H,000H
	SYMB	ALAB, _SCPIError, #16
	EXTRN	HDATA(_SCPIError)
	EXTRN	HCODE(__UDIVL)
	SYMB	TYPE, 723, 'X', 12, #18, 30, 2, #7, #7
	SYMB	ALAB, _ROMChecksum, #723
	EXTRN	HCODE(_ROMChecksum)
	SYMB	TYPE, 724, 'X', 12, #16, 30, 2, #3, #3
	SYMB	ALAB, _WriteAnlAudioDACLevel, #724
	EXTRN	HCODE(_WriteAnlAudioDACLevel)
_109:	DB	025H,064H,02CH,022H,000H
_954:	DB	04FH,04EH,00AH,000H
	SYMB	TYPE, 725, 'X', 12, #16, 30, 2, #16, #16
	SYMB	ALAB, _SetAudioLevel, #725
	EXTRN	HCODE(_SetAudioLevel)
_417:	DB	02CH,025H,064H,02CH,000H
	EXTRN	HCODE(__DPF2S)
	SYMB	TYPE, 726, 'X', 12, #16, 30, 5, #16, #16, #259, #259, #1
	SYMB	ALAB, _sio0SndRequest, #726
	EXTRN	HCODE(_sio0SndRequest)
	SYMB	TYPE, 727, 'X', 12, #3, 30, 0
	SYMB	ALAB, _UpdateESRRegister, #727
	EXTRN	HCODE(_UpdateESRRegister)
	SYMB	ALAB, _QuestEventReg, #18
	EXTRN	HDATA(_QuestEventReg)
	SYMB	TYPE, 728, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _SetCBScHPhase, #728
	EXTRN	HCODE(_SetCBScHPhase)
	EXTRN	DATA(__lc_ub_xvwbuffer)
	EXTRN	DATA(__lc_ue_xvwbuffer)
	CALLS	'CLSCommand', 'ResetErrorEventQueue'
	CALLS	'ESECommand', 'rs232printf'
	CALLS	'ESECommand', 'sscanf'
	CALLS	'ESRCommand', 'UpdateESRRegister'
	CALLS	'ESRCommand', 'rs232printf'
	CALLS	'SRECommand', 'rs232printf'
	CALLS	'SRECommand', 'sscanf'
	CALLS	'STBCommand', 'UpdateSTBRegister'
	CALLS	'STBCommand', 'rs232printf'
	CALLS	'RSTCommand', 'ResetInstrument'
	CALLS	'IDNCommand', 'rs232puts'
	CALLS	'IDNCommand', 'rs232putchar'
	CALLS	'IDNCommand', 'rs232puts'
	CALLS	'IDNCommand', 'rs232putchar'
	CALLS	'IDNCommand', 'rs232puts'
	CALLS	'IDNCommand', 'rs232putchar'
	CALLS	'IDNCommand', 'rs232puts'
	CALLS	'IDNCommand', 'rs232putchar'
	CALLS	'RCLCommand', 'sscanf'
	CALLS	'RCLCommand', 'RecallPreset'
	CALLS	'SAVCommand', 'sscanf'
	CALLS	'SAVCommand', 'StorePreset'
	CALLS	'SystemError', 'ReadErrorEventQueue'
	CALLS	'SystemError', 'sprintf'
	CALLS	'SystemError', 'rs232puts'
	CALLS	'SystemError', 'rs232putchar'
	CALLS	'SystemError', 'rs232puts'
	CALLS	'SystemVersion', 'rs232putchar'
	CALLS	'SystemPresetName', 'sscanf'
	CALLS	'SystemPresetName', 'NV_Recall'
	CALLS	'SystemPresetName', 'rs232puts'
	CALLS	'SystemPresetName', 'rs232putchar'
	CALLS	'SystemPresetName', 'sscanf'
	CALLS	'SystemPresetName', 'strlen'
	CALLS	'SystemPresetName', 'NV_Recall'
	CALLS	'SystemPresetName', 'strcpy'
	CALLS	'SystemPresetName', 'NV_Store'
	CALLS	'SystemPresetAuthor', 'sscanf'
	CALLS	'SystemPresetAuthor', 'NV_Recall'
	CALLS	'SystemPresetAuthor', 'rs232puts'
	CALLS	'SystemPresetAuthor', 'rs232putchar'
	CALLS	'SystemPresetAuthor', 'sscanf'
	CALLS	'SystemPresetAuthor', 'strlen'
	CALLS	'SystemPresetAuthor', 'NV_Recall'
	CALLS	'SystemPresetAuthor', 'strcpy'
	CALLS	'SystemPresetAuthor', 'NV_Store'
	CALLS	'SystemPresetDate', 'sscanf'
	CALLS	'SystemPresetDate', 'NV_Recall'
	CALLS	'SystemPresetDate', 'sprintf'
	CALLS	'SystemPresetDate', 'rs232puts'
	CALLS	'SystemPresetDate', 'sscanf'
	CALLS	'SystemPresetDate', 'ValidateDate'
	CALLS	'SystemPresetDate', 'NV_Recall'
	CALLS	'SystemPresetDate', 'NV_Store'
	CALLS	'StatusOperEvent', 'rs232printf'
	CALLS	'StatusOperCondition', 'rs232printf'
	CALLS	'StatusOperEnable', 'rs232printf'
	CALLS	'StatusOperEnable', 'sscanf'
	CALLS	'StatusQuestEvent', 'rs232printf'
	CALLS	'StatusQuestCondition', 'rs232printf'
	CALLS	'StatusQuestEnable', 'rs232printf'
	CALLS	'StatusQuestEnable', 'sscanf'
	CALLS	'StatusPreset', 'rs232putchar'
	CALLS	'StatusPreset', 'rs232puts'
	CALLS	'StatusPreset', 'rs232putchar'
	CALLS	'GenlockGen', 'rs232putchar'
	CALLS	'GenlockGen', 'PrintSamplesToFLT'
	CALLS	'GenlockGen', 'rs232putchar'
	CALLS	'GenlockGenSystem', 'rs232putchar'
	CALLS	'GenlockGenSystem', 'FindParameter'
	CALLS	'GenlockGenSystem', 'SetGenlockSystem'
	CALLS	'GenlockGenDelay', 'PrintSamplesToFLT'
	CALLS	'GenlockGenDelay', 'rs232putchar'
	CALLS	'GenlockGenDelay', 'sscanf'
	CALLS	'GenlockGenDelay', 'FLTToSamples'
	CALLS	'GenlockGenDelay', 'SetGenlockDelay'
	CALLS	'GenlockGenCalibrateEnable', 'rs232putchar'
	CALLS	'GenlockGenCalibrateEnable', 'FindParameter'
	CALLS	'GenlockGenCalibrateEnable', 'SetGenlockSystem'
	CALLS	'GenlockGenCalibrateEnable', 'SetBBSystem'
	CALLS	'GenlockGenCalibrateEnable', 'sio0SndCommand'
	CALLS	'GenlockGenCalibrateAdjust', 'FindParameter'
	CALLS	'GenlockGenCalibrateAdjust', 'sio0SndCommand'
	CALLS	'GenlockGenCalibrateAdjust', 'FindParameter'
	CALLS	'GenlockGenCalibrateAdjust', 'sio0SndCommand'
	CALLS	'GenlockGenCalibrateStore', 'NV_Store'
	CALLS	'BBGen', 'rs232putchar'
	CALLS	'BBGen', 'PrintSamplesToFLT'
	CALLS	'BBGen', 'rs232printf'
	CALLS	'BBGenSystem', 'rs232putchar'
	CALLS	'BBGenSystem', 'FindParameter'
	CALLS	'BBGenSystem', 'SetBBSystem'
	CALLS	'BBGenDelay', 'PrintSamplesToFLT'
	CALLS	'BBGenDelay', 'rs232putchar'
	CALLS	'BBGenDelay', 'sscanf'
	CALLS	'BBGenDelay', 'FLTToSamples'
	CALLS	'BBGenDelay', 'SetBBDelay'
	CALLS	'BBGenScHPhase', 'rs232printf'
	CALLS	'BBGenScHPhase', 'sscanf'
	CALLS	'BBGenScHPhase', 'SetBBScHPhase'
	CALLS	'CBGen', 'rs232putchar'
	CALLS	'CBGen', 'PrintSamplesToFLT'
	CALLS	'CBGen', 'rs232printf'
	CALLS	'CBGen', 'rs232putchar'
	CALLS	'CBGenPattern', 'rs232putchar'
	CALLS	'CBGenPattern', 'FindParameter'
	CALLS	'CBGenPattern', 'SetCBPattern'
	CALLS	'CBGenSystem', 'rs232putchar'
	CALLS	'CBGenSystem', 'FindParameter'
	CALLS	'CBGenSystem', 'SetCBSystem'
	CALLS	'CBGenDelay', 'PrintSamplesToFLT'
	CALLS	'CBGenDelay', 'rs232putchar'
	CALLS	'CBGenDelay', 'sscanf'
	CALLS	'CBGenDelay', 'FLTToSamples'
	CALLS	'CBGenDelay', 'SetCBDelay'
	CALLS	'CBGenScHPhase', 'rs232printf'
	CALLS	'CBGenScHPhase', 'sscanf'
	CALLS	'CBGenScHPhase', 'SetCBScHPhase'
	CALLS	'CBGenEmbAudioSignal', 'rs232putchar'
	CALLS	'CBGenEmbAudioSignal', 'FindParameter'
	CALLS	'CBGenEmbAudioSignal', 'SetCBEmbAudioSignal'
	CALLS	'AudioGenOutput', 'rs232putchar'
	CALLS	'AudioGenOutput', 'FindParameter'
	CALLS	'AudioGenOutput', 'SetAudioOutput'
	CALLS	'AudioGenAnalog', 'rs232putchar'
	CALLS	'AudioGenAnalog', 'rs232printf'
	CALLS	'AudioGenAnalogSignal', 'rs232putchar'
	CALLS	'AudioGenAnalogSignal', 'FindParameter'
	CALLS	'AudioGenAnalogSignal', 'SetAudioSignal'
	CALLS	'AudioGenAnalogLevel', 'rs232putchar'
	CALLS	'AudioGenAnalogLevel', 'rs232printf'
	CALLS	'AudioGenAnalogLevel', 'FindParameter'
	CALLS	'AudioGenAnalogLevel', 'sscanf'
	CALLS	'AudioGenAnalogLevel', 'SetAudioLevel'
	CALLS	'AudioGenAnalogClick', 'rs232printf'
	CALLS	'AudioGenAnalogClick', 'sscanf'
	CALLS	'AudioGenAnalogClick', 'SetAudioClick'
	CALLS	'AudioGenAESEBU', 'rs232putchar'
	CALLS	'AudioGenAESEBU', 'rs232printf'
	CALLS	'AudioGenAESEBU', 'rs232putchar'
	CALLS	'AudioGenAESEBU', 'rs232printf'
	CALLS	'AudioGenAESEBUSystem', 'rs232putchar'
	CALLS	'AudioGenAESEBUSystem', 'FindParameter'
	CALLS	'AudioGenAESEBUSystem', 'SetAudioSystem'
	CALLS	'AudioGenAESEBUSignal', 'rs232putchar'
	CALLS	'AudioGenAESEBUSignal', 'FindParameter'
	CALLS	'AudioGenAESEBUSignal', 'SetAudioSignal'
	CALLS	'AudioGenAESEBULevel', 'rs232putchar'
	CALLS	'AudioGenAESEBULevel', 'rs232printf'
	CALLS	'AudioGenAESEBULevel', 'FindParameter'
	CALLS	'AudioGenAESEBULevel', 'sscanf'
	CALLS	'AudioGenAESEBULevel', 'SetAudioLevel'
	CALLS	'AudioGenAESEBUTiming', 'rs232printf'
	CALLS	'AudioGenAESEBUTiming', 'sscanf'
	CALLS	'AudioGenAESEBUTiming', 'SetAudioTiming'
	CALLS	'AudioGenAESEBUWordClock', 'rs232putchar'
	CALLS	'AudioGenAESEBUWordClock', 'FindParameter'
	CALLS	'AudioGenAESEBUWordClock', 'SetAudioWordClock'
	CALLS	'AudioGenAESEBUClick', 'rs232printf'
	CALLS	'AudioGenAESEBUClick', 'sscanf'
	CALLS	'AudioGenAESEBUClick', 'SetAudioClick'
	CALLS	'FactPassword', 'rs232puts'
	CALLS	'FactPassword', 'strcmp'
	CALLS	'FactPassword', 'Cstrcmp'
	CALLS	'FactReset', 'GenlockDefaults'
	CALLS	'FactReset', 'GenlockInit'
	CALLS	'FactReset', 'BBDefaults'
	CALLS	'FactReset', 'BBInit'
	CALLS	'FactReset', 'CBDefaults'
	CALLS	'FactReset', 'CBInit'
	CALLS	'FactReset', 'AudioDefaults'
	CALLS	'FactReset', 'AudioInit'
	CALLS	'FactReset', 'StorePreset'
	CALLS	'FactReset', 'NV_Store'
	CALLS	'FactV24Command', 'sscanf'
	CALLS	'FactV24Command', 'sio0SndRequest'
	CALLS	'FactV24Command', 'rs232puts'
	CALLS	'FactV24Command', 'sio0SndCommand'
	CALLS	'FactV24Transparent', 'FindParameter'
	CALLS	'FactV24Transparent', 'BBSPGCommunication'
	CALLS	'FactChecksumCode', 'ROMChecksum'
	CALLS	'FactChecksumCode', 'sprintf'
	CALLS	'FactChecksumCode', 'rs232puts'
	CALLS	'FactChecksumPLD', 'ROMChecksum'
	CALLS	'FactChecksumPLD', 'sprintf'
	CALLS	'FactChecksumPLD', 'rs232puts'
	CALLS	'FactChecksumEmbAudio', 'ROMChecksum'
	CALLS	'FactChecksumEmbAudio', 'sprintf'
	CALLS	'FactChecksumEmbAudio', 'rs232puts'
	CALLS	'FactChecksumPattern', 'ROMChecksum'
	CALLS	'FactChecksumPattern', 'sprintf'
	CALLS	'FactChecksumPattern', 'rs232puts'
	CALLS	'FactChecksumRange', 'sscanf'
	CALLS	'FactChecksumRange', 'ROMChecksum'
	CALLS	'FactChecksumRange', 'sprintf'
	CALLS	'FactChecksumRange', 'rs232puts'
	CALLS	'FactMainVersion', 'sprintf'
	CALLS	'FactMainVersion', 'rs232puts'
	CALLS	'FactMainIDNCompany', 'rs232puts'
	CALLS	'FactMainIDNCompany', 'rs232putchar'
	CALLS	'FactMainIDNCompany', 'sscanf'
	CALLS	'FactMainIDNCompany', 'strncpy'
	CALLS	'FactMainIDNCompany', 'NV_Store'
	CALLS	'FactMainIDNType', 'rs232puts'
	CALLS	'FactMainIDNType', 'rs232putchar'
	CALLS	'FactMainIDNType', 'sscanf'
	CALLS	'FactMainIDNType', 'strncpy'
	CALLS	'FactMainIDNType', 'NV_Store'
	CALLS	'FactMainIDNKUNumber', 'rs232puts'
	CALLS	'FactMainIDNKUNumber', 'rs232putchar'
	CALLS	'FactMainIDNKUNumber', 'sscanf'
	CALLS	'FactMainIDNKUNumber', 'strncpy'
	CALLS	'FactMainIDNKUNumber', 'NV_Store'
	CALLS	'FactMainIDNSWRevision', 'rs232puts'
	CALLS	'FactMainIDNSWRevision', 'rs232putchar'
	CALLS	'FactMainIDNSWRevision', 'sscanf'
	CALLS	'FactMainIDNSWRevision', 'strncpy'
	CALLS	'FactMainIDNSWRevision', 'NV_Store'
	CALLS	'FactMainSystem', 'rs232putchar'
	CALLS	'FactMainSystem', 'FindParameter'
	CALLS	'FactMainSystem', 'NV_Store'
	CALLS	'FactMainFMSDateProd', 'sprintf'
	CALLS	'FactMainFMSDateProd', 'rs232puts'
	CALLS	'FactMainFMSDateProd', 'sscanf'
	CALLS	'FactMainFMSDateProd', 'ValidateDate'
	CALLS	'FactMainFMSDateProd', 'NV_Store'
	CALLS	'FactMainFMSDateUpd', 'sprintf'
	CALLS	'FactMainFMSDateUpd', 'rs232puts'
	CALLS	'FactMainFMSDateUpd', 'sscanf'
	CALLS	'FactMainFMSDateUpd', 'ValidateDate'
	CALLS	'FactMainFMSDateUpd', 'NV_Store'
	CALLS	'FactGenlockGenDate', 'sprintf'
	CALLS	'FactGenlockGenDate', 'rs232puts'
	CALLS	'FactGenlockGenDate', 'sscanf'
	CALLS	'FactGenlockGenDate', 'ValidateDate'
	CALLS	'FactGenlockGenDate', 'NV_Store'
	CALLS	'FactGenlockGenVersion', 'GenlockVersion'
	CALLS	'FactGenlockGenVersion', 'rs232puts'
	CALLS	'FactGenlockGenVersion', 'rs232putchar'
	CALLS	'FactGenlockGenFRefDate', 'sprintf'
	CALLS	'FactGenlockGenFRefDate', 'rs232puts'
	CALLS	'FactGenlockGenFRefDate', 'sscanf'
	CALLS	'FactGenlockGenFRefDate', 'ValidateDate'
	CALLS	'FactGenlockGenFRefDate', 'NV_Store'
	CALLS	'FactGenlockGenFRefDAC', 'sprintf'
	CALLS	'FactGenlockGenFRefDAC', 'rs232puts'
	CALLS	'FactGenlockGenFRefDAC', 'sscanf'
	CALLS	'FactGenlockGenFRefDAC', 'NV_Store'
	CALLS	'FactGenlockGenURefDate', 'sprintf'
	CALLS	'FactGenlockGenURefDate', 'rs232puts'
	CALLS	'FactGenlockGenURefDate', 'sscanf'
	CALLS	'FactGenlockGenURefDate', 'ValidateDate'
	CALLS	'FactGenlockGenURefDate', 'NV_Store'
	CALLS	'FactGenlockGenURefDAC', 'sprintf'
	CALLS	'FactGenlockGenURefDAC', 'rs232puts'
	CALLS	'FactGenlockGenURefDAC', 'sscanf'
	CALLS	'FactGenlockGenURefDAC', 'NV_Store'
	CALLS	'FactGenlockGenHPHZero', 'sprintf'
	CALLS	'FactGenlockGenHPHZero', 'rs232puts'
	CALLS	'FactGenlockGenHPHZero', 'sscanf'
	CALLS	'FactGenlockGenHPHZero', 'NV_Store'
	CALLS	'FactGenlockGenPhase', 'sprintf'
	CALLS	'FactGenlockGenPhase', 'rs232puts'
	CALLS	'FactGenlockGenPhase', 'sscanf'
	CALLS	'FactGenlockGenPhase', 'NV_Store'
	CALLS	'FactBBGenDate', 'sprintf'
	CALLS	'FactBBGenDate', 'rs232puts'
	CALLS	'FactBBGenDate', 'sscanf'
	CALLS	'FactBBGenDate', 'ValidateDate'
	CALLS	'FactBBGenDate', 'NV_Store'
	CALLS	'FactBBGenVersion', 'BBVersion'
	CALLS	'FactBBGenVersion', 'rs232puts'
	CALLS	'FactBBGenVersion', 'rs232putchar'
	CALLS	'FactBBGenSignal', 'FindParameter'
	CALLS	'FactBBGenPhase', 'sprintf'
	CALLS	'FactBBGenPhase', 'rs232puts'
	CALLS	'FactBBGenPhase', 'sscanf'
	CALLS	'FactBBGenPhase', 'NV_Store'
	CALLS	'FactBBGenScHPhase', 'sprintf'
	CALLS	'FactBBGenScHPhase', 'rs232puts'
	CALLS	'FactBBGenScHPhase', 'sscanf'
	CALLS	'FactBBGenScHPhase', 'NV_Store'
	CALLS	'FactBBGenDAC', 'sprintf'
	CALLS	'FactBBGenDAC', 'rs232puts'
	CALLS	'FactBBGenDAC', 'sscanf'
	CALLS	'FactBBGenDAC', 'NV_Store'
	CALLS	'FactCBGenDate', 'sprintf'
	CALLS	'FactCBGenDate', 'rs232puts'
	CALLS	'FactCBGenDate', 'sscanf'
	CALLS	'FactCBGenDate', 'ValidateDate'
	CALLS	'FactCBGenDate', 'NV_Store'
	CALLS	'FactCBGenAGain', 'sprintf'
	CALLS	'FactCBGenAGain', 'rs232puts'
	CALLS	'FactCBGenAGain', 'sscanf'
	CALLS	'FactCBGenAGain', 'NV_Store'
	CALLS	'FactCBGenAGain', 'WriteCBGain'
	CALLS	'FactCBGenCGain', 'sprintf'
	CALLS	'FactCBGenCGain', 'rs232puts'
	CALLS	'FactCBGenCGain', 'sscanf'
	CALLS	'FactCBGenCGain', 'NV_Store'
	CALLS	'FactCBGenCGain', 'WriteCBChromaGain'
	CALLS	'FactCBGenPhase', 'sprintf'
	CALLS	'FactCBGenPhase', 'rs232puts'
	CALLS	'FactCBGenPhase', 'sscanf'
	CALLS	'FactCBGenPhase', 'NV_Store'
	CALLS	'FactCBGenPhase', 'SetCBDelay'
	CALLS	'FactCBGenScHPhase', 'sprintf'
	CALLS	'FactCBGenScHPhase', 'rs232puts'
	CALLS	'FactCBGenScHPhase', 'sscanf'
	CALLS	'FactCBGenScHPhase', 'NV_Store'
	CALLS	'FactCBGenScHPhase', 'SetCBScHPhase'
	CALLS	'FactAudioGenStatus', 'AudioStatus'
	CALLS	'FactAudioGenStatus', 'sprintf'
	CALLS	'FactAudioGenStatus', 'rs232puts'
	CALLS	'FactAudioGenDate', 'sprintf'
	CALLS	'FactAudioGenDate', 'rs232puts'
	CALLS	'FactAudioGenDate', 'sscanf'
	CALLS	'FactAudioGenDate', 'ValidateDate'
	CALLS	'FactAudioGenDate', 'NV_Store'
	CALLS	'FactAudioGenLevel', 'sprintf'
	CALLS	'FactAudioGenLevel', 'rs232puts'
	CALLS	'FactAudioGenLevel', 'sscanf'
	CALLS	'FactAudioGenLevel', 'NV_Store'
	CALLS	'FactAudioGenLevel', 'WriteAnlAudioDACLevel'
	CALLS	'FactPLDVersion', 'pld_version'
	CALLS	'FactPLDVersion', 'sprintf'
	CALLS	'FactPLDVersion', 'rs232puts'
	CALLS	'FactTCXOStatus', 'tcxo_status'
	CALLS	'FactTCXOStatus', 'sprintf'
	CALLS	'FactTCXOStatus', 'rs232puts'
	CALLS	'FactMultiMediaChip', 'sscanf'
	CALLS	'FactMultiMediaChip', 'TransmitIIC'
	CALLS	'FactMultiMediaChip', 'ReceiveIIC'
	CALLS	'FactMultiMediaChip', 'rs232printf'
	CALLS	'FactMultiMediaChip', 'sscanf'
	CALLS	'FactMultiMediaChip', 'TransmitIIC'
	CALLS	'FactMultiMediaChip', 'ReceiveIIC'
	CALLS	'FactMultiMediaChip', 'rs232printf'
	CALLS	'FindParameter', 'Cstrcmp'
	CALLS	'FLTToSamples', 'labs'
	CALLS	'FLTToSamples', 'abs'
	CALLS	'FLTToSamples', 'labs'
	CALLS	'FLTToSamples', 'abs'
	CALLS	'PrintSamplesToFLT', 'abs'
	CALLS	'PrintSamplesToFLT', 'rs232printf'
	CALLS	'PrintSamplesToFLT', 'abs'
	CALLS	'PrintSamplesToFLT', 'rs232printf'
	CALLS	'PrintSamplesToFLT', 'fabs'
	CALLS	'PrintSamplesToFLT', 'rs232printf'
	END
