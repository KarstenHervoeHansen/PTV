Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 1
.\rtxcapi.asm



      1					     .286
      2					     ifndef  ??version
      3				     ?debug  macro
      4					     endm
      5				     publicdll macro name
      6					     public  name
      7					     endm
      8				     $comm   macro   name,dist,size,count
      9					     comm    dist name:BYTE:count*size
     10					     endm
     11					     else
     12				     $comm   macro   name,dist,size,count
     13					     comm    dist name[size]:BYTE:count
     14					     endm
     15					     endif
     16					     ?debug  V 301h
     17					     ?debug  S "rtxcapi.c"
     18					     ?debug  C E9684F932609727478636170692E63
     19					     ?debug  C E95C6F2B26172E2E5C2E2E5C496E636C7564655C74797065646566+
     20					     ?debug  C 2E68
     21					     ?debug  C E9734F9326182E2E5C2E2E5C496E636C7564655C727478636F7074+
     22					     ?debug  C 732E68
     23					     ?debug  C E912599326172E2E5C2E2E5C496E636C7564655C62696E64696E67+
     24					     ?debug  C 2E68
     25					     ?debug  C E9F46CF222182E2E5C2E2E5C496E636C7564655C72747873747275+
     26					     ?debug  C 632E68
     27					     ?debug  C E9734F9326182E2E5C2E2E5C496E636C7564655C727478636F7074+
     28					     ?debug  C 732E68
     29					     ?debug  C E980639724172E2E5C2E2E5C496E636C7564655C72747863617267+
     30					     ?debug  C 2E68
     31					     ?debug  C E906948923162E2E5C2E2E5C496E636C7564655C656E61626C652E+
     32					     ?debug  C 68
     33					     ?debug  C E9734F9326182E2E5C2E2E5C496E636C7564655C727478636F7074+
     34					     ?debug  C 732E68
     35	0000			     RTXC_TEXT	     segment byte public 'CODE'
     36	0000			     RTXC_TEXT	     ends
     37				     DGROUP  group   _DATA,_BSS
     38					     assume  cs:RTXC_TEXT,ds:DGROUP
     39	0000			     _DATA   segment word public 'DATA'
     40	0000			     d@	     label   byte
     41	0000			     d@w     label   word
     42	0000			     _DATA   ends
     43	0000			     _BSS    segment word public 'BSS'
     44	0000			     b@	     label   byte
     45	0000			     b@w     label   word
     46	0000			     _BSS    ends
     47	0000			     RTXC_TEXT	     segment byte public 'CODE'
     48					     ?debug  C E80109727478636170692E63684F9326
     49					;
     50					;    void KSAPI	KS_block(TASK starttask, TASK endtask)
     51					;
     52					     ?debug  L 108
     53					     assume  cs:RTXC_TEXT,ds:DGROUP
     54	0000			     _KS_block	     proc    far
     55					     ?debug  B
     56	0000  55			     push    bp
     57	0001  8B EC			     mov     bp,sp
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 2
.\rtxcapi.asm



     58	0003  83 EC 06			     sub     sp,6
     59					     ?debug  C E607656E647461736B040A080000000973746172+
     60					     ?debug  C 747461736B040A06000000
     61					     ?debug  B
     62					;
     63					;    {
     64					;	struct blkarg p;
     65					;
     66					;	p.ksnum	= RTXC_BLOCK;
     67					;
     68					     ?debug  L 112
     69	0006  C7 46 FA 001D		     mov     word ptr [bp-6],29
     70					;
     71					;	p.starttask = starttask;
     72					;
     73					     ?debug  L 113
     74	000B  8B 46 06			     mov     ax,word ptr [bp+6]
     75	000E  89 46 FC			     mov     word ptr [bp-4],ax
     76					;
     77					;	p.endtask = endtask;
     78					;
     79					     ?debug  L 114
     80	0011  8B 46 08			     mov     ax,word ptr [bp+8]
     81	0014  89 46 FE			     mov     word ptr [bp-2],ax
     82					;
     83					;	KS(p);
     84					;
     85					     ?debug  L 115
     86	0017  8D 4E FA			     lea      cx,[bp-6]
     87	001A  CD 40			     int      64
     88					;
     89					;    }
     90					;
     91					     ?debug  L 116
     92	001C  C9			     leave
     93	001D  CB			     ret
     94					     ?debug  C E31806626C6B61726706001E01
     95					     ?debug  C E601701802FAFF00000973746172747461736B04+
     96					     ?debug  C 0A0600000007656E647461736B040A08000000
     97					     ?debug  E
     98					     ?debug  E
     99	001E			     _KS_block	     endp
    100					;
    101					;    const char	* KSAPI	KS_version(void)
    102					;
    103					     ?debug  L 120
    104					     assume  cs:RTXC_TEXT,ds:DGROUP
    105	001E			     _KS_version     proc    far
    106					     ?debug  B
    107					     ?debug  B
    108					;
    109					;    {
    110					;	return("RTXC 3.2c for x86 - Borland v5.0x Oct-29-97 Key: 22359");
    111					;
    112					     ?debug  L 122
    113	001E  8C DA			     mov     dx,ds
    114	0020  B8 0000r			     mov     ax,offset DGROUP:s@
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 3
.\rtxcapi.asm



    115					;
    116					;    }
    117					;
    118					     ?debug  L 123
    119	0023  CB			     ret
    120					     ?debug  E
    121					     ?debug  E
    122	0024			     _KS_version     endp
    123					;
    124					;    void KSAPI	KS_nop(void)
    125					;
    126					     ?debug  L 127
    127					     assume  cs:RTXC_TEXT,ds:DGROUP
    128	0024			     _KS_nop proc    far
    129					     ?debug  B
    130	0024  55			     push    bp
    131	0025  8B EC			     mov     bp,sp
    132	0027  83 EC 08			     sub     sp,8
    133					     ?debug  B
    134					;
    135					;    {
    136					;	struct targ p;
    137					;
    138					;	p.ksnum	= RTXC_NOP;
    139					;
    140					     ?debug  L 131
    141	002A  C7 46 F8 0000		     mov     word ptr [bp-8],0
    142					;
    143					;	KS(p);
    144					;
    145					     ?debug  L 132
    146	002F  8D 4E F8			     lea      cx,[bp-8]
    147	0032  CD 40			     int      64
    148					;
    149					;    }
    150					;
    151					     ?debug  L 133
    152	0034  C9			     leave
    153	0035  CB			     ret
    154					     ?debug  C E319047461726708001E05
    155					     ?debug  C E31A044B535243020022000080FF7F0A
    156					     ?debug  C E601701902F8FF0000
    157					     ?debug  E
    158					     ?debug  E
    159	0036			     _KS_nop endp
    160					;
    161					;    void * KSAPI KS_alloc(MAP map)
    162					;
    163					     ?debug  L 138
    164					     assume  cs:RTXC_TEXT,ds:DGROUP
    165	0036			     _KS_alloc	     proc    far
    166					     ?debug  B
    167	0036  55			     push    bp
    168	0037  8B EC			     mov     bp,sp
    169	0039  83 EC 1C			     sub     sp,28
    170					     ?debug  C E6036D6170040A06000000
    171					     ?debug  B
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 4
.\rtxcapi.asm



    172					;
    173					;    {
    174					;	struct parg p;
    175					;    #ifdef FASTALLOC /* { */
    176					;	PHEADER	near *pph;
    177					;	FLAG_STORAGE;
    178					;
    179					;	pph = &pheader[map];
    180					;
    181					;	     SAVE_FLAGS;
    182					;	DISABLE;
    183					;
    184					;	if ( (p.val = (char *)pph->next) != NULL ) /* if any available */
    185					;	{
    186					;	   pph->next = ((struct	xmap *)p.val)->link; /*	unlink 1st from	list */
    187					;    #ifdef CBUG /* { */
    188					;	   if (++pph->cur > pph->worst)	/* check for new worst case */
    189					;	      pph->worst = pph->cur;	      /* useage	level */
    190					;    #endif /* } CBUG */
    191					;	}
    192					;	RESTORE_FLAGS;
    193					;    #else /* }	FASTALLOC { */
    194					;	p.ksnum	= RTXC_ALLOC;
    195					;
    196					     ?debug  L 160
    197	003C  C7 46 E4 0006		     mov     word ptr [bp-28],6
    198					;
    199					;	p.map =	map;
    200					;
    201					     ?debug  L 161
    202	0041  8B 46 06			     mov     ax,word ptr [bp+6]
    203	0044  89 46 E8			     mov     word ptr [bp-24],ax
    204					;
    205					;    #ifdef PARTITION_WAITERS /* { */
    206					;	p.wait = 0;
    207					;
    208					     ?debug  L 163
    209	0047  C7 46 F0 0000		     mov     word ptr [bp-16],0
    210					;
    211					;    #endif /* } PARTITION_WAITERS */
    212					;	KS(p);
    213					;
    214					     ?debug  L 165
    215	004C  8D 4E E4			     lea      cx,[bp-28]
    216	004F  CD 40			     int      64
    217					;
    218					;    #endif /* } FASTALLOC */
    219					;	return(p.val);
    220					;
    221					     ?debug  L 167
    222	0051  8B 56 EC			     mov     dx,word ptr [bp-20]
    223	0054  8B 46 EA			     mov     ax,word ptr [bp-22]
    224					;
    225					;    }
    226					;
    227					     ?debug  L 168
    228	0057  C9			     leave
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 5
.\rtxcapi.asm



    229	0058  CB			     ret
    230					     ?debug  C E31C04706172671C001E19
    231					     ?debug  C E31D000400160100
    232					     ?debug  C E31F06636C6B626C6B18001E24
    233					     ?debug  C E320074F424A54595045020022000080FF7F2E
    234					     ?debug  C E31E000400161F00
    235					     ?debug  C E322000400160200
    236					     ?debug  C E601701C02E4FF0000036D6170040A06000000
    237					     ?debug  E
    238					     ?debug  E
    239	0059			     _KS_alloc	     endp
    240					;
    241					;    CLKBLK ks_clk * KSAPI KS_alloc_timer(void)
    242					;
    243					     ?debug  L 173
    244					     assume  cs:RTXC_TEXT,ds:DGROUP
    245	0059			     _KS_alloc_timer proc    far
    246					     ?debug  B
    247	0059  55			     push    bp
    248	005A  8B EC			     mov     bp,sp
    249	005C  83 EC 12			     sub     sp,18
    250					     ?debug  B
    251					;
    252					;    {
    253					;	struct clkarg p;
    254					;
    255					;	p.ksnum	= RTXC_ALLOC_TIMER;
    256					;
    257					     ?debug  L 177
    258	005F  C7 46 EE 0010		     mov     word ptr [bp-18],16
    259					;
    260					;	KS(p);
    261					;
    262					     ?debug  L 178
    263	0064  8D 4E EE			     lea      cx,[bp-18]
    264	0067  CD 40			     int      64
    265					;
    266					;	return(p.pclkblk);
    267					;
    268					     ?debug  L 179
    269	0069  8B 56 FE			     mov     dx,word ptr [bp-2]
    270	006C  8B 46 FC			     mov     ax,word ptr [bp-4]
    271					;
    272					;    }
    273					;
    274					     ?debug  L 180
    275	006F  C9			     leave
    276	0070  CB			     ret
    277					     ?debug  C E32306636C6B61726712001E35
    278					     ?debug  C E601702302EEFF0000
    279					     ?debug  E
    280					     ?debug  E
    281	0071			     _KS_alloc_timer endp
    282					;
    283					;    void KSAPI	KS_defpriority(TASK task, PRIORITY priority)
    284					;
    285					     ?debug  L 185
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 6
.\rtxcapi.asm



    286					     assume  cs:RTXC_TEXT,ds:DGROUP
    287	0071			     _KS_defpriority proc    far
    288					     ?debug  B
    289	0071  55			     push    bp
    290	0072  8B EC			     mov     bp,sp
    291	0074  83 EC 08			     sub     sp,8
    292					     ?debug  C E6087072696F72697479040A0800000004746173+
    293					     ?debug  C 6B040A06000000
    294					     ?debug  B
    295					;
    296					;    {
    297					;	struct targ p;
    298					;
    299					;	p.ksnum	= RTXC_DEFPRIORITY;
    300					;
    301					     ?debug  L 189
    302	0077  C7 46 F8 001B		     mov     word ptr [bp-8],27
    303					;
    304					;	p.task = task;
    305					;
    306					     ?debug  L 190
    307	007C  8B 46 06			     mov     ax,word ptr [bp+6]
    308	007F  89 46 FC			     mov     word ptr [bp-4],ax
    309					;
    310					;	p.priority = priority;
    311					;
    312					     ?debug  L 191
    313	0082  8B 46 08			     mov     ax,word ptr [bp+8]
    314	0085  89 46 FE			     mov     word ptr [bp-2],ax
    315					;
    316					;	KS(p);
    317					;
    318					     ?debug  L 192
    319	0088  8D 4E F8			     lea      cx,[bp-8]
    320	008B  CD 40			     int      64
    321					;
    322					;    }
    323					;
    324					     ?debug  L 193
    325	008D  C9			     leave
    326	008E  CB			     ret
    327					     ?debug  C E601701902F8FF0000047461736B040A06000000+
    328					     ?debug  C 087072696F72697479040A08000000
    329					     ?debug  E
    330					     ?debug  E
    331	008F			     _KS_defpriority endp
    332					;
    333					;    void KSAPI	KS_defslice(TASK task, TICKS ticks)
    334					;
    335					     ?debug  L 198
    336					     assume  cs:RTXC_TEXT,ds:DGROUP
    337	008F			     _KS_defslice    proc    far
    338					     ?debug  B
    339	008F  55			     push    bp
    340	0090  8B EC			     mov     bp,sp
    341	0092  83 EC 02			     sub     sp,2
    342					     ?debug  C E6057469636B73060A08000000047461736B040A+
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 7
.\rtxcapi.asm



    343					     ?debug  C 06000000
    344					     ?debug  B
    345					;
    346					;    {
    347					;	TCB near *ptcb;
    348					;
    349					;	if (task == SELFTASK)
    350					;
    351					     ?debug  L 202
    352	0095  83 7E 06 00		     cmp     word ptr [bp+6],0
    353	0099  75 05			     jne     short @7@86
    354					;
    355					;	   ptcb	= hipritsk;
    356					;
    357					     ?debug  L 203
    358	009B  A1 0000e			     mov     ax,word ptr DGROUP:_hipritsk
    359	009E  EB 09			     jmp     short @7@114
    360	00A0			     @7@86:
    361					;
    362					;	else
    363					;	   ptcb	= &rtxtcb[task];
    364					;
    365					     ?debug  L 205
    366	00A0  8B 46 06			     mov     ax,word ptr [bp+6]
    367	00A3  6B C0 28			     imul    ax,ax,40
    368	00A6  05 0000e			     add     ax,offset DGROUP:_rtxtcb
    369	00A9			     @7@114:
    370	00A9  89 46 FE			     mov     word ptr [bp-2],ax
    371					;
    372					;
    373					;	/* if slicing is just becoming active */
    374					;	if (ptcb->newslice == 0)
    375					;
    376					     ?debug  L 208
    377	00AC  8B 5E FE			     mov     bx,word ptr [bp-2]
    378	00AF  8B 47 20			     mov     ax,word ptr [bx+32]
    379	00B2  0B 47 22			     or	     ax,word ptr [bx+34]
    380	00B5  75 0C			     jne     short @7@198
    381					;
    382					;	{
    383					;	   ptcb->tslice	= ticks;
    384					;
    385					     ?debug  L 210
    386	00B7  8B 56 0A			     mov     dx,word ptr [bp+10]
    387	00BA  8B 46 08			     mov     ax,word ptr [bp+8]
    388	00BD  89 57 1E			     mov     word ptr [bx+30],dx
    389	00C0  89 47 1C			     mov     word ptr [bx+28],ax
    390	00C3			     @7@198:
    391					;
    392					;	}
    393					;	ptcb->newslice = ticks;
    394					;
    395					     ?debug  L 212
    396	00C3  8B 5E FE			     mov     bx,word ptr [bp-2]
    397	00C6  8B 56 0A			     mov     dx,word ptr [bp+10]
    398	00C9  8B 46 08			     mov     ax,word ptr [bp+8]
    399	00CC  89 57 22			     mov     word ptr [bx+34],dx
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 8
.\rtxcapi.asm



    400	00CF  89 47 20			     mov     word ptr [bx+32],ax
    401					;
    402					;    }
    403					;
    404					     ?debug  L 213
    405	00D2  C9			     leave
    406	00D3  CB			     ret
    407					     ?debug  C E3250374636228001E3C
    408					     ?debug  C E327056672616D651A001E4A
    409					     ?debug  C E328000400160400
    410					     ?debug  C E32A00000023010400
    411					     ?debug  C E329000400162A00
    412					     ?debug  C E326000400162700
    413					     ?debug  C E32C00000023010400
    414					     ?debug  C E32B000400162C00
    415					     ?debug  C E324000200152504
    416					     ?debug  C E604707463622402FEFF0000047461736B040A06+
    417					     ?debug  C 000000057469636B73060A08000000
    418					     ?debug  E
    419					     ?debug  E
    420	00D4			     _KS_defslice    endp
    421					;
    422					;    void KSAPI	KS_delay(TASK task, TICKS ticks)
    423					;
    424					     ?debug  L 218
    425					     assume  cs:RTXC_TEXT,ds:DGROUP
    426	00D4			     _KS_delay	     proc    far
    427					     ?debug  B
    428	00D4  55			     push    bp
    429	00D5  8B EC			     mov     bp,sp
    430	00D7  83 EC 24			     sub     sp,36
    431					     ?debug  C E6057469636B73060A08000000047461736B040A+
    432					     ?debug  C 06000000
    433					     ?debug  B
    434					;
    435					;    {
    436					;	struct delayarg	p;
    437					;	CLKBLK clkblk;
    438					;
    439					;	p.ksnum	= RTXC_DELAY;
    440					;
    441					     ?debug  L 223
    442	00DA  C7 46 F4 0014		     mov     word ptr [bp-12],20
    443					;
    444					;	p.task = task;
    445					;
    446					     ?debug  L 224
    447	00DF  8B 46 06			     mov     ax,word ptr [bp+6]
    448	00E2  89 46 F6			     mov     word ptr [bp-10],ax
    449					;
    450					;	p.ticks	= ticks;
    451					;
    452					     ?debug  L 225
    453	00E5  8B 56 0A			     mov     dx,word ptr [bp+10]
    454	00E8  8B 46 08			     mov     ax,word ptr [bp+8]
    455	00EB  89 56 FA			     mov     word ptr [bp-6],dx
    456	00EE  89 46 F8			     mov     word ptr [bp-8],ax
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 9
.\rtxcapi.asm



    457					;
    458					;	p.pclkblk = (CLKBLK ks_clk *)&clkblk;
    459					;
    460					     ?debug  L 226
    461	00F1  8D 46 DC			     lea     ax,word ptr [bp-36]
    462	00F4  8C 56 FE			     mov     word ptr [bp-2],ss
    463	00F7  89 46 FC			     mov     word ptr [bp-4],ax
    464					;
    465					;
    466					;	KS(p);
    467					;
    468					     ?debug  L 228
    469	00FA  8D 4E F4			     lea      cx,[bp-12]
    470	00FD  CD 40			     int      64
    471					;
    472					;    }
    473					;
    474					     ?debug  L 229
    475	00FF  C9			     leave
    476	0100  CB			     ret
    477					     ?debug  C E32D0864656C61796172670C001E56
    478					     ?debug  C E606636C6B626C6B1F02DCFF000001702D02F4FF+
    479					     ?debug  C 0000047461736B040A06000000057469636B7306+
    480					     ?debug  C 0A08000000
    481					     ?debug  E
    482					     ?debug  E
    483	0101			     _KS_delay	     endp
    484					;
    485					;    KSRC KSAPI	KS_dequeue(QUEUE queue,	void *data)
    486					;
    487					     ?debug  L 234
    488					     assume  cs:RTXC_TEXT,ds:DGROUP
    489	0101			     _KS_dequeue     proc    far
    490					     ?debug  B
    491	0101  55			     push    bp
    492	0102  8B EC			     mov     bp,sp
    493	0104  83 EC 16			     sub     sp,22
    494					     ?debug  C E604646174611D0A08000000057175657565040A+
    495					     ?debug  C 06000000
    496					     ?debug  B
    497					;
    498					;    {
    499					;	struct qarg p;
    500					;
    501					;	p.ksnum	= RTXC_DEQUEUE;
    502					;
    503					     ?debug  L 238
    504	0107  C7 46 EA 000D		     mov     word ptr [bp-22],13
    505					;
    506					;	p.queue	= queue;
    507					;
    508					     ?debug  L 239
    509	010C  8B 46 06			     mov     ax,word ptr [bp+6]
    510	010F  89 46 F0			     mov     word ptr [bp-16],ax
    511					;
    512					;	p.data = data;
    513					;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 10
.\rtxcapi.asm



    514					     ?debug  L 240
    515	0112  8B 56 0A			     mov     dx,word ptr [bp+10]
    516	0115  8B 46 08			     mov     ax,word ptr [bp+8]
    517	0118  89 56 F4			     mov     word ptr [bp-12],dx
    518	011B  89 46 F2			     mov     word ptr [bp-14],ax
    519					;
    520					;    #ifdef QUEUE_WAITERS /* { */
    521					;	p.wait = 0;
    522					;
    523					     ?debug  L 242
    524	011E  C7 46 F6 0000		     mov     word ptr [bp-10],0
    525					;
    526					;    #endif /* } QUEUE_WAITERS */
    527					;	p.ksrc = RC_QUEUE_EMPTY;
    528					;
    529					     ?debug  L 244
    530	0123  C7 46 EC 0007		     mov     word ptr [bp-20],7
    531					;
    532					;	KS(p);
    533					;
    534					     ?debug  L 245
    535	0128  8D 4E EA			     lea      cx,[bp-22]
    536	012B  CD 40			     int      64
    537					;
    538					;	return(p.ksrc);
    539					;
    540					     ?debug  L 246
    541	012D  8B 46 EC			     mov     ax,word ptr [bp-20]
    542					;
    543					;    }
    544					;
    545					     ?debug  L 247
    546	0130  C9			     leave
    547	0131  CB			     ret
    548					     ?debug  C E32E047161726716001E5B
    549					     ?debug  C E601702E02EAFF0000057175657565040A060000+
    550					     ?debug  C 0004646174611D0A08000000
    551					     ?debug  E
    552					     ?debug  E
    553	0132			     _KS_dequeue     endp
    554					;
    555					;    KSRC KSAPI	KS_enqueue(QUEUE queue,	void *data)
    556					;
    557					     ?debug  L 252
    558					     assume  cs:RTXC_TEXT,ds:DGROUP
    559	0132			     _KS_enqueue     proc    far
    560					     ?debug  B
    561	0132  55			     push    bp
    562	0133  8B EC			     mov     bp,sp
    563	0135  83 EC 16			     sub     sp,22
    564					     ?debug  C E604646174611D0A08000000057175657565040A+
    565					     ?debug  C 06000000
    566					     ?debug  B
    567					;
    568					;    {
    569					;	struct qarg p;
    570					;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 11
.\rtxcapi.asm



    571					;	p.ksnum	= RTXC_ENQUEUE;
    572					;
    573					     ?debug  L 256
    574	0138  C7 46 EA 000C		     mov     word ptr [bp-22],12
    575					;
    576					;	p.queue	= queue;
    577					;
    578					     ?debug  L 257
    579	013D  8B 46 06			     mov     ax,word ptr [bp+6]
    580	0140  89 46 F0			     mov     word ptr [bp-16],ax
    581					;
    582					;	p.data = data;
    583					;
    584					     ?debug  L 258
    585	0143  8B 56 0A			     mov     dx,word ptr [bp+10]
    586	0146  8B 46 08			     mov     ax,word ptr [bp+8]
    587	0149  89 56 F4			     mov     word ptr [bp-12],dx
    588	014C  89 46 F2			     mov     word ptr [bp-14],ax
    589					;
    590					;    #ifdef QUEUE_WAITERS /* { */
    591					;	p.wait = 0;
    592					;
    593					     ?debug  L 260
    594	014F  C7 46 F6 0000		     mov     word ptr [bp-10],0
    595					;
    596					;    #endif /* } QUEUE_WAITERS */
    597					;	p.ksrc = RC_QUEUE_FULL;
    598					;
    599					     ?debug  L 262
    600	0154  C7 46 EC 0006		     mov     word ptr [bp-20],6
    601					;
    602					;	KS(p);
    603					;
    604					     ?debug  L 263
    605	0159  8D 4E EA			     lea      cx,[bp-22]
    606	015C  CD 40			     int      64
    607					;
    608					;	return(p.ksrc);
    609					;
    610					     ?debug  L 264
    611	015E  8B 46 EC			     mov     ax,word ptr [bp-20]
    612					;
    613					;    }
    614					;
    615					     ?debug  L 265
    616	0161  C9			     leave
    617	0162  CB			     ret
    618					     ?debug  C E601702E02EAFF0000057175657565040A060000+
    619					     ?debug  C 0004646174611D0A08000000
    620					     ?debug  E
    621					     ?debug  E
    622	0163			     _KS_enqueue     endp
    623					;
    624					;    void KSAPI	KS_execute(TASK	task)
    625					;
    626					     ?debug  L 269
    627					     assume  cs:RTXC_TEXT,ds:DGROUP
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 12
.\rtxcapi.asm



    628	0163			     _KS_execute     proc    far
    629					     ?debug  B
    630	0163  55			     push    bp
    631	0164  8B EC			     mov     bp,sp
    632	0166  83 EC 08			     sub     sp,8
    633					     ?debug  C E6047461736B040A06000000
    634					     ?debug  B
    635					;
    636					;    {
    637					;	struct targ p;
    638					;
    639					;	p.ksnum	= RTXC_EXECUTE;
    640					;
    641					     ?debug  L 273
    642	0169  C7 46 F8 0015		     mov     word ptr [bp-8],21
    643					;
    644					;	p.task = task;
    645					;
    646					     ?debug  L 274
    647	016E  8B 46 06			     mov     ax,word ptr [bp+6]
    648	0171  89 46 FC			     mov     word ptr [bp-4],ax
    649					;
    650					;	KS(p);
    651					;
    652					     ?debug  L 275
    653	0174  8D 4E F8			     lea      cx,[bp-8]
    654	0177  CD 40			     int      64
    655					;
    656					;    }
    657					;
    658					     ?debug  L 276
    659	0179  C9			     leave
    660	017A  CB			     ret
    661					     ?debug  C E601701902F8FF0000047461736B040A06000000
    662					     ?debug  E
    663					     ?debug  E
    664	017B			     _KS_execute     endp
    665					;
    666					;    KSRC KSAPI	KS_deftask(TASK	task, PRIORITY priority,
    667					;
    668					     ?debug  L 280
    669					     assume  cs:RTXC_TEXT,ds:DGROUP
    670	017B			     _KS_deftask     proc    far
    671					     ?debug  B
    672	017B  55			     push    bp
    673	017C  8B EC			     mov     bp,sp
    674	017E  83 EC 16			     sub     sp,22
    675					     ?debug  C E33000000023010400
    676					     ?debug  C E32F000400163000
    677					     ?debug  C E605656E7472792F0A1000000009737461636B73+
    678					     ?debug  C 697A650A0A0E00000009737461636B6261736522+
    679					     ?debug  C 0A0A000000087072696F72697479040A08000000+
    680					     ?debug  C 047461736B040A06000000
    681					     ?debug  B
    682					;
    683					;		     char ks_stk *stackbase, size_t stacksize,
    684					;		     void (far *entry)(void))
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 13
.\rtxcapi.asm



    685					;    {
    686					;	struct deftaskarg p;
    687					;
    688					;    #ifdef CBUG /* { */
    689					;	stkinit((int ks_stk *)stackbase, stacksize);
    690					;    #endif /* } CBUG */
    691					;
    692					;	p.ksnum	= RTXC_DEFTASK;
    693					;
    694					     ?debug  L 290
    695	0181  C7 46 EA 0016		     mov     word ptr [bp-22],22
    696					;
    697					;	p.task = task;
    698					;
    699					     ?debug  L 291
    700	0186  8B 46 06			     mov     ax,word ptr [bp+6]
    701	0189  89 46 EE			     mov     word ptr [bp-18],ax
    702					;
    703					;	p.priority = priority;
    704					;
    705					     ?debug  L 292
    706	018C  8B 46 08			     mov     ax,word ptr [bp+8]
    707	018F  89 46 F0			     mov     word ptr [bp-16],ax
    708					;
    709					;	p.stackbase = stackbase;
    710					;
    711					     ?debug  L 293
    712	0192  8B 56 0C			     mov     dx,word ptr [bp+12]
    713	0195  8B 46 0A			     mov     ax,word ptr [bp+10]
    714	0198  89 56 F4			     mov     word ptr [bp-12],dx
    715	019B  89 46 F2			     mov     word ptr [bp-14],ax
    716					;
    717					;	p.stacksize = stacksize;
    718					;
    719					     ?debug  L 294
    720	019E  8B 46 0E			     mov     ax,word ptr [bp+14]
    721	01A1  89 46 F6			     mov     word ptr [bp-10],ax
    722					;
    723					;	p.entry	= entry;
    724					;
    725					     ?debug  L 295
    726	01A4  8B 56 12			     mov     dx,word ptr [bp+18]
    727	01A7  8B 46 10			     mov     ax,word ptr [bp+16]
    728	01AA  89 56 FA			     mov     word ptr [bp-6],dx
    729	01AD  89 46 F8			     mov     word ptr [bp-8],ax
    730					;
    731					;	p.ksrc = RC_GOOD;
    732					;
    733					     ?debug  L 296
    734	01B0  C7 46 EC 0000		     mov     word ptr [bp-20],0
    735					;
    736					;	KS(p);
    737					;
    738					     ?debug  L 297
    739	01B5  8D 4E EA			     lea      cx,[bp-22]
    740	01B8  CD 40			     int      64
    741					;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 14
.\rtxcapi.asm



    742					;
    743					;	return(p.ksrc);
    744					;
    745					     ?debug  L 299
    746	01BA  8B 46 EC			     mov     ax,word ptr [bp-20]
    747					;
    748					;    }
    749					;
    750					     ?debug  L 300
    751	01BD  C9			     leave
    752	01BE  CB			     ret
    753					     ?debug  C E3310A6465667461736B61726716001E64
    754					     ?debug  C E33300000023010400
    755					     ?debug  C E332000400163300
    756					     ?debug  C E601703102EAFF0000047461736B040A06000000+
    757					     ?debug  C 087072696F72697479040A080000000973746163+
    758					     ?debug  C 6B62617365220A0A00000009737461636B73697A+
    759					     ?debug  C 650A0A0E00000005656E7472792F0A10000000
    760					     ?debug  E
    761					     ?debug  E
    762	01BF			     _KS_deftask     endp
    763					;
    764					;    TASK KSAPI	KS_alloc_task(void)
    765					;
    766					     ?debug  L 305
    767					     assume  cs:RTXC_TEXT,ds:DGROUP
    768	01BF			     _KS_alloc_task  proc    far
    769					     ?debug  B
    770	01BF  55			     push    bp
    771	01C0  8B EC			     mov     bp,sp
    772	01C2  83 EC 08			     sub     sp,8
    773					     ?debug  B
    774					;
    775					;    {
    776					;	struct targ p;
    777					;
    778					;	p.ksnum	= RTXC_ALLOC_TASK;
    779					;
    780					     ?debug  L 309
    781	01C5  C7 46 F8 0017		     mov     word ptr [bp-8],23
    782					;
    783					;	KS(p);
    784					;
    785					     ?debug  L 310
    786	01CA  8D 4E F8			     lea      cx,[bp-8]
    787	01CD  CD 40			     int      64
    788					;
    789					;
    790					;	/* return task # (0 = no tasks available) */
    791					;	return(p.task);
    792					;
    793					     ?debug  L 313
    794	01CF  8B 46 FC			     mov     ax,word ptr [bp-4]
    795					;
    796					;    }
    797					;
    798					     ?debug  L 314
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 15
.\rtxcapi.asm



    799	01D2  C9			     leave
    800	01D3  CB			     ret
    801					     ?debug  C E601701902F8FF0000
    802					     ?debug  E
    803					     ?debug  E
    804	01D4			     _KS_alloc_task  endp
    805					;
    806					;    void KSAPI	KS_free(MAP map, void *val)
    807					;
    808					     ?debug  L 319
    809					     assume  cs:RTXC_TEXT,ds:DGROUP
    810	01D4			     _KS_free	     proc    far
    811					     ?debug  B
    812	01D4  55			     push    bp
    813	01D5  8B EC			     mov     bp,sp
    814	01D7  83 EC 1C			     sub     sp,28
    815					     ?debug  C E60376616C1D0A08000000036D6170040A060000+
    816					     ?debug  C 00
    817					     ?debug  B
    818					;
    819					;    {
    820					;	struct parg p;
    821					;
    822					;	p.ksnum	= RTXC_FREE;
    823					;
    824					     ?debug  L 323
    825	01DA  C7 46 E4 0007		     mov     word ptr [bp-28],7
    826					;
    827					;	p.map =	map;
    828					;
    829					     ?debug  L 324
    830	01DF  8B 46 06			     mov     ax,word ptr [bp+6]
    831	01E2  89 46 E8			     mov     word ptr [bp-24],ax
    832					;
    833					;	p.val =	val;
    834					;
    835					     ?debug  L 325
    836	01E5  8B 56 0A			     mov     dx,word ptr [bp+10]
    837	01E8  8B 46 08			     mov     ax,word ptr [bp+8]
    838	01EB  89 56 EC			     mov     word ptr [bp-20],dx
    839	01EE  89 46 EA			     mov     word ptr [bp-22],ax
    840					;
    841					;	KS(p);
    842					;
    843					     ?debug  L 326
    844	01F1  8D 4E E4			     lea      cx,[bp-28]
    845	01F4  CD 40			     int      64
    846					;
    847					;    }
    848					;
    849					     ?debug  L 327
    850	01F6  C9			     leave
    851	01F7  CB			     ret
    852					     ?debug  C E601701C02E4FF0000036D6170040A0600000003+
    853					     ?debug  C 76616C1D0A08000000
    854					     ?debug  E
    855					     ?debug  E
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 16
.\rtxcapi.asm



    856	01F8			     _KS_free	     endp
    857					;
    858					;    MAP KSAPI KS_alloc_part(void)
    859					;
    860					     ?debug  L 332
    861					     assume  cs:RTXC_TEXT,ds:DGROUP
    862	01F8			     _KS_alloc_part  proc    far
    863					     ?debug  B
    864	01F8  55			     push    bp
    865	01F9  8B EC			     mov     bp,sp
    866	01FB  83 EC 1C			     sub     sp,28
    867					     ?debug  B
    868					;
    869					;    {
    870					;	struct parg p;
    871					;
    872					;	p.ksnum	= RTXC_ALLOC_PART;
    873					;
    874					     ?debug  L 336
    875	01FE  C7 46 E4 0009		     mov     word ptr [bp-28],9
    876					;
    877					;
    878					;	KS(p);
    879					;
    880					     ?debug  L 338
    881	0203  8D 4E E4			     lea      cx,[bp-28]
    882	0206  CD 40			     int      64
    883					;
    884					;
    885					;	/* return map #	(0 = no	dynamic	partition headers available) */
    886					;	return(p.map);
    887					;
    888					     ?debug  L 341
    889	0208  8B 46 E8			     mov     ax,word ptr [bp-24]
    890					;
    891					;    }
    892					;
    893					     ?debug  L 342
    894	020B  C9			     leave
    895	020C  CB			     ret
    896					     ?debug  C E601701C02E4FF0000
    897					     ?debug  E
    898					     ?debug  E
    899	020D			     _KS_alloc_part  endp
    900					;
    901					;    void KSAPI	KS_defpart(MAP map, void *addr,	size_t blksize,	size_t nblocks)
    902					;
    903					     ?debug  L 347
    904					     assume  cs:RTXC_TEXT,ds:DGROUP
    905	020D			     _KS_defpart     proc    far
    906					     ?debug  B
    907	020D  55			     push    bp
    908	020E  8B EC			     mov     bp,sp
    909	0210  83 EC 1C			     sub     sp,28
    910					     ?debug  C E6076E626C6F636B730A0A0E00000007626C6B73+
    911					     ?debug  C 697A650A0A0C00000004616464721D0A08000000+
    912					     ?debug  C 036D6170040A06000000
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 17
.\rtxcapi.asm



    913					     ?debug  B
    914					;
    915					;    {
    916					;	struct parg p;
    917					;
    918					;	p.ksnum	= RTXC_DEFPART;
    919					;
    920					     ?debug  L 351
    921	0213  C7 46 E4 000A		     mov     word ptr [bp-28],10
    922					;
    923					;	p.map =	map;
    924					;
    925					     ?debug  L 352
    926	0218  8B 46 06			     mov     ax,word ptr [bp+6]
    927	021B  89 46 E8			     mov     word ptr [bp-24],ax
    928					;
    929					;	p.addr = (char *)addr;
    930					;
    931					     ?debug  L 353
    932	021E  8B 56 0A			     mov     dx,word ptr [bp+10]
    933	0221  8B 46 08			     mov     ax,word ptr [bp+8]
    934	0224  89 56 FC			     mov     word ptr [bp-4],dx
    935	0227  89 46 FA			     mov     word ptr [bp-6],ax
    936					;
    937					;	p.size = blksize;
    938					;
    939					     ?debug  L 354
    940	022A  8B 46 0C			     mov     ax,word ptr [bp+12]
    941	022D  89 46 EE			     mov     word ptr [bp-18],ax
    942					;
    943					;	p.nblocks = nblocks;
    944					;
    945					     ?debug  L 355
    946	0230  8B 46 0E			     mov     ax,word ptr [bp+14]
    947	0233  89 46 FE			     mov     word ptr [bp-2],ax
    948					;
    949					;	KS(p);
    950					;
    951					     ?debug  L 356
    952	0236  8D 4E E4			     lea      cx,[bp-28]
    953	0239  CD 40			     int      64
    954					;
    955					;    }
    956					;
    957					     ?debug  L 357
    958	023B  C9			     leave
    959	023C  CB			     ret
    960					     ?debug  C E601701C02E4FF0000036D6170040A0600000004+
    961					     ?debug  C 616464721D0A0800000007626C6B73697A650A0A+
    962					     ?debug  C 0C000000076E626C6F636B730A0A0E000000
    963					     ?debug  E
    964					     ?debug  E
    965	023D			     _KS_defpart     endp
    966					;
    967					;    void * KSAPI KS_free_part(MAP map)
    968					;
    969					     ?debug  L 362
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 18
.\rtxcapi.asm



    970					     assume  cs:RTXC_TEXT,ds:DGROUP
    971	023D			     _KS_free_part   proc    far
    972					     ?debug  B
    973	023D  55			     push    bp
    974	023E  8B EC			     mov     bp,sp
    975	0240  83 EC 1C			     sub     sp,28
    976					     ?debug  C E6036D6170040A06000000
    977					     ?debug  B
    978					;
    979					;    {
    980					;	struct parg p;
    981					;
    982					;	p.ksnum	= RTXC_FREE_PART;
    983					;
    984					     ?debug  L 366
    985	0243  C7 46 E4 000B		     mov     word ptr [bp-28],11
    986					;
    987					;	p.map =	map;
    988					;
    989					     ?debug  L 367
    990	0248  8B 46 06			     mov     ax,word ptr [bp+6]
    991	024B  89 46 E8			     mov     word ptr [bp-24],ax
    992					;
    993					;	KS(p);
    994					;
    995					     ?debug  L 368
    996	024E  8D 4E E4			     lea      cx,[bp-28]
    997	0251  CD 40			     int      64
    998					;
    999					;	return(p.addr);
   1000					;
   1001					     ?debug  L 369
   1002	0253  8B 56 FC			     mov     dx,word ptr [bp-4]
   1003	0256  8B 46 FA			     mov     ax,word ptr [bp-6]
   1004					;
   1005					;    }
   1006					;
   1007					     ?debug  L 370
   1008	0259  C9			     leave
   1009	025A  CB			     ret
   1010					     ?debug  C E601701C02E4FF0000036D6170040A06000000
   1011					     ?debug  E
   1012					     ?debug  E
   1013	025B			     _KS_free_part   endp
   1014					;
   1015					;    void KSAPI	KS_free_timer(CLKBLK ks_clk *pclkblk)
   1016					;
   1017					     ?debug  L 375
   1018					     assume  cs:RTXC_TEXT,ds:DGROUP
   1019	025B			     _KS_free_timer  proc    far
   1020					     ?debug  B
   1021	025B  55			     push    bp
   1022	025C  8B EC			     mov     bp,sp
   1023	025E  83 EC 12			     sub     sp,18
   1024					     ?debug  C E60770636C6B626C6B1E0A06000000
   1025					     ?debug  B
   1026					;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 19
.\rtxcapi.asm



   1027					;    {
   1028					;	struct clkarg p;
   1029					;
   1030					;	p.ksnum	= RTXC_FREE_TIMER;
   1031					;
   1032					     ?debug  L 379
   1033	0261  C7 46 EE 0011		     mov     word ptr [bp-18],17
   1034					;
   1035					;	if ( (p.pclkblk	= pclkblk) != NULLCLK)
   1036					;
   1037					     ?debug  L 380
   1038	0266  8B 56 08			     mov     dx,word ptr [bp+8]
   1039	0269  8B 46 06			     mov     ax,word ptr [bp+6]
   1040	026C  89 56 FE			     mov     word ptr [bp-2],dx
   1041	026F  89 46 FC			     mov     word ptr [bp-4],ax
   1042	0272  0B C2			     or	     ax,dx
   1043	0274  74 05			     je	     short @18@114
   1044					;
   1045					;	{
   1046					;	   KS(p);
   1047					;
   1048					     ?debug  L 382
   1049	0276  8D 4E EE			     lea      cx,[bp-18]
   1050	0279  CD 40			     int      64
   1051	027B			     @18@114:
   1052					;
   1053					;	}
   1054					;    }
   1055					;
   1056					     ?debug  L 384
   1057	027B  C9			     leave
   1058	027C  CB			     ret
   1059					     ?debug  C E601702302EEFF00000770636C6B626C6B1E0A06+
   1060					     ?debug  C 000000
   1061					     ?debug  E
   1062					     ?debug  E
   1063	027D			     _KS_free_timer  endp
   1064					;
   1065					;    KSRC KSAPI	KS_lock(RESOURCE resource)
   1066					;
   1067					     ?debug  L 389
   1068					     assume  cs:RTXC_TEXT,ds:DGROUP
   1069	027D			     _KS_lock	     proc    far
   1070					     ?debug  B
   1071	027D  55			     push    bp
   1072	027E  8B EC			     mov     bp,sp
   1073	0280  83 EC 14			     sub     sp,20
   1074					     ?debug  C E6087265736F75726365040A06000000
   1075					     ?debug  B
   1076					;
   1077					;    {
   1078					;	struct larg p;
   1079					;    #ifdef FASTLOCK /*	{ */
   1080					;	RHEADER	near *prh;
   1081					;	FLAG_STORAGE;
   1082					;
   1083					;	prh = &rheader[resource];
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 20
.\rtxcapi.asm



   1084					;
   1085					;	     SAVE_FLAGS;
   1086					;	DISABLE;
   1087					;
   1088					;	if (prh->owner == NULLTCB)  /* if resource not currently owned */
   1089					;	{
   1090					;    #ifdef CBUG /* { */
   1091					;	   prh->count++;	   /* update statistics	*/
   1092					;    #endif /* } CBUG */
   1093					;	   prh->owner =	hipritsk; /* lock resource with	task # */
   1094					;	   prh->level =	1;	   /* set nesting level	= 1 */
   1095					;	   RESTORE_FLAGS;		  /* fast return */
   1096					;	   return(RC_GOOD);	   /* mark successful */
   1097					;	}
   1098					;
   1099					;	if (prh->owner == hipritsk) /* if already owned	by caller */
   1100					;	{
   1101					;    #ifdef CBUG /* { */
   1102					;	   prh->count++;	   /* update statistics	*/
   1103					;    #endif /* } CBUG */
   1104					;	   prh->level++;	   /* bump nesting level */
   1105					;	   RESTORE_FLAGS;		  /* fast return */
   1106					;	   return(RC_NESTED);	   /* mark successful */
   1107					;	}
   1108					;	RESTORE_FLAGS;
   1109					;    #endif /* } FASTLOCK */
   1110					;
   1111					;	p.ksnum	= RTXC_LOCK;
   1112					;
   1113					     ?debug  L 424
   1114	0283  C7 46 EC 000E		     mov     word ptr [bp-20],14
   1115					;
   1116					;	p.resource = resource;
   1117					;
   1118					     ?debug  L 425
   1119	0288  8B 46 06			     mov     ax,word ptr [bp+6]
   1120	028B  89 46 F0			     mov     word ptr [bp-16],ax
   1121					;
   1122					;    #ifdef RESOURCE_WAITERS /*	{ */
   1123					;	p.wait = 0;
   1124					;
   1125					     ?debug  L 427
   1126	028E  C7 46 F2 0000		     mov     word ptr [bp-14],0
   1127					;
   1128					;    #endif /* } RESOURCE_WAITERS */
   1129					;	p.ksrc = RC_GOOD;
   1130					;
   1131					     ?debug  L 429
   1132	0293  C7 46 EE 0000		     mov     word ptr [bp-18],0
   1133					;
   1134					;	KS(p);
   1135					;
   1136					     ?debug  L 430
   1137	0298  8D 4E EC			     lea      cx,[bp-20]
   1138	029B  CD 40			     int      64
   1139					;
   1140					;	return(p.ksrc);
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 21
.\rtxcapi.asm



   1141					;
   1142					     ?debug  L 431
   1143	029D  8B 46 EE			     mov     ax,word ptr [bp-18]
   1144					;
   1145					;    }
   1146					;
   1147					     ?debug  L 432
   1148	02A0  C9			     leave
   1149	02A1  CB			     ret
   1150					     ?debug  C E334046C61726714001E6D
   1151					     ?debug  C E3350752455341545452020022000080FF7F76
   1152					     ?debug  C E601703402ECFF0000087265736F75726365040A+
   1153					     ?debug  C 06000000
   1154					     ?debug  E
   1155					     ?debug  E
   1156	02A2			     _KS_lock	     endp
   1157					;
   1158					;    void KSAPI	KS_pend(SEMA sema)
   1159					;
   1160					     ?debug  L 437
   1161					     assume  cs:RTXC_TEXT,ds:DGROUP
   1162	02A2			     _KS_pend	     proc    far
   1163					     ?debug  B
   1164	02A2  55			     push    bp
   1165	02A3  8B EC			     mov     bp,sp
   1166	02A5  83 EC 0E			     sub     sp,14
   1167					     ?debug  C E60473656D61040A06000000
   1168					     ?debug  B
   1169					;
   1170					;    {
   1171					;	struct sarg p;
   1172					;
   1173					;	p.ksnum	= RTXC_PEND;
   1174					;
   1175					     ?debug  L 441
   1176	02A8  C7 46 F2 0003		     mov     word ptr [bp-14],3
   1177					;
   1178					;	p.sema = sema;
   1179					;
   1180					     ?debug  L 442
   1181	02AD  8B 46 06			     mov     ax,word ptr [bp+6]
   1182	02B0  89 46 F6			     mov     word ptr [bp-10],ax
   1183					;
   1184					;	KS(p);
   1185					;
   1186					     ?debug  L 443
   1187	02B3  8D 4E F2			     lea      cx,[bp-14]
   1188	02B6  CD 40			     int      64
   1189					;
   1190					;    }
   1191					;
   1192					     ?debug  L 444
   1193	02B8  C9			     leave
   1194	02B9  CB			     ret
   1195					     ?debug  C E33704736172670E001E78
   1196					     ?debug  C E601703702F2FF00000473656D61040A06000000
   1197					     ?debug  E
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 22
.\rtxcapi.asm



   1198					     ?debug  E
   1199	02BA			     _KS_pend	     endp
   1200					;
   1201					;    RTXCMSG * KSAPI KS_receive(MBOX mbox, TASK	task)
   1202					;
   1203					     ?debug  L 449
   1204					     assume  cs:RTXC_TEXT,ds:DGROUP
   1205	02BA			     _KS_receive     proc    far
   1206					     ?debug  B
   1207	02BA  55			     push    bp
   1208	02BB  8B EC			     mov     bp,sp
   1209	02BD  83 EC 1A			     sub     sp,26
   1210					     ?debug  C E6047461736B040A08000000046D626F78040A06+
   1211					     ?debug  C 000000
   1212					     ?debug  B
   1213					;
   1214					;    {
   1215					;	struct msgarg p;
   1216					;
   1217					;	p.ksnum	= RTXC_RECEIVE;
   1218					;
   1219					     ?debug  L 453
   1220	02C0  C7 46 E6 0005		     mov     word ptr [bp-26],5
   1221					;
   1222					;	p.mbox = mbox;
   1223					;
   1224					     ?debug  L 454
   1225	02C5  8B 46 06			     mov     ax,word ptr [bp+6]
   1226	02C8  89 46 EC			     mov     word ptr [bp-20],ax
   1227					;
   1228					;	p.task = task;
   1229					;
   1230					     ?debug  L 455
   1231	02CB  8B 46 08			     mov     ax,word ptr [bp+8]
   1232	02CE  89 46 EE			     mov     word ptr [bp-18],ax
   1233					;
   1234					;    #ifdef MAILBOX_WAITERS /* { */
   1235					;	p.wait = 0;
   1236					;
   1237					     ?debug  L 457
   1238	02D1  C7 46 F6 0000		     mov     word ptr [bp-10],0
   1239					;
   1240					;    #endif /* } MAILBOX_WAITERS */
   1241					;	KS(p);
   1242					;
   1243					     ?debug  L 459
   1244	02D6  8D 4E E6			     lea      cx,[bp-26]
   1245	02D9  CD 40			     int      64
   1246					;
   1247					;	return(p.prtxcmsg);
   1248					;
   1249					     ?debug  L 460
   1250	02DB  8B 56 F4			     mov     dx,word ptr [bp-12]
   1251	02DE  8B 46 F2			     mov     ax,word ptr [bp-14]
   1252					;
   1253					;    }
   1254					;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 23
.\rtxcapi.asm



   1255					     ?debug  L 461
   1256	02E1  C9			     leave
   1257	02E2  CB			     ret
   1258					     ?debug  C E338066D73676172671A001E7E
   1259					     ?debug  C E33A07727478636D73670A001E8089
   1260					     ?debug  C E339000400163A00
   1261					     ?debug  C E601703802E6FF0000046D626F78040A06000000+
   1262					     ?debug  C 047461736B040A08000000
   1263					     ?debug  E
   1264					     ?debug  E
   1265	02E3			     _KS_receive     endp
   1266					;
   1267					;    void KSAPI	KS_resume(TASK task)
   1268					;
   1269					     ?debug  L 466
   1270					     assume  cs:RTXC_TEXT,ds:DGROUP
   1271	02E3			     _KS_resume	     proc    far
   1272					     ?debug  B
   1273	02E3  55			     push    bp
   1274	02E4  8B EC			     mov     bp,sp
   1275	02E6  83 EC 08			     sub     sp,8
   1276					     ?debug  C E6047461736B040A06000000
   1277					     ?debug  B
   1278					;
   1279					;    {
   1280					;	struct targ p;
   1281					;
   1282					;	p.ksnum	= RTXC_RESUME;
   1283					;
   1284					     ?debug  L 470
   1285	02E9  C7 46 F8 001A		     mov     word ptr [bp-8],26
   1286					;
   1287					;	p.task = task;
   1288					;
   1289					     ?debug  L 471
   1290	02EE  8B 46 06			     mov     ax,word ptr [bp+6]
   1291	02F1  89 46 FC			     mov     word ptr [bp-4],ax
   1292					;
   1293					;	KS(p);
   1294					;
   1295					     ?debug  L 472
   1296	02F4  8D 4E F8			     lea      cx,[bp-8]
   1297	02F7  CD 40			     int      64
   1298					;
   1299					;    }
   1300					;
   1301					     ?debug  L 473
   1302	02F9  C9			     leave
   1303	02FA  CB			     ret
   1304					     ?debug  C E601701902F8FF0000047461736B040A06000000
   1305					     ?debug  E
   1306					     ?debug  E
   1307	02FB			     _KS_resume	     endp
   1308					;
   1309					;    void KSAPI	KS_send(MBOX mbox, RTXCMSG *prtxcmsg, PRIORITY priority, SEMA sema)
   1310					;
   1311					     ?debug  L 478
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 24
.\rtxcapi.asm



   1312					     assume  cs:RTXC_TEXT,ds:DGROUP
   1313	02FB			     _KS_send	     proc    far
   1314					     ?debug  B
   1315	02FB  55			     push    bp
   1316	02FC  8B EC			     mov     bp,sp
   1317	02FE  83 EC 1A			     sub     sp,26
   1318					     ?debug  C E60473656D61040A0E000000087072696F726974+
   1319					     ?debug  C 79040A0C0000000870727478636D7367390A0800+
   1320					     ?debug  C 0000046D626F78040A06000000
   1321					     ?debug  B
   1322					;
   1323					;    {
   1324					;	struct msgarg p;
   1325					;
   1326					;	p.ksnum	= RTXC_SEND;
   1327					;
   1328					     ?debug  L 482
   1329	0301  C7 46 E6 0004		     mov     word ptr [bp-26],4
   1330					;
   1331					;	p.mbox = mbox;
   1332					;
   1333					     ?debug  L 483
   1334	0306  8B 46 06			     mov     ax,word ptr [bp+6]
   1335	0309  89 46 EC			     mov     word ptr [bp-20],ax
   1336					;
   1337					;	p.prtxcmsg = prtxcmsg;
   1338					;
   1339					     ?debug  L 484
   1340	030C  8B 56 0A			     mov     dx,word ptr [bp+10]
   1341	030F  8B 46 08			     mov     ax,word ptr [bp+8]
   1342	0312  89 56 F4			     mov     word ptr [bp-12],dx
   1343	0315  89 46 F2			     mov     word ptr [bp-14],ax
   1344					;
   1345					;	p.priority = priority;
   1346					;
   1347					     ?debug  L 485
   1348	0318  8B 46 0C			     mov     ax,word ptr [bp+12]
   1349	031B  89 46 F0			     mov     word ptr [bp-16],ax
   1350					;
   1351					;	p.sema = sema;
   1352					;
   1353					     ?debug  L 486
   1354	031E  8B 46 0E			     mov     ax,word ptr [bp+14]
   1355	0321  89 46 EA			     mov     word ptr [bp-22],ax
   1356					;
   1357					;	p.wait = 0;
   1358					;
   1359					     ?debug  L 487
   1360	0324  C7 46 F6 0000		     mov     word ptr [bp-10],0
   1361					;
   1362					;	KS(p);
   1363					;
   1364					     ?debug  L 488
   1365	0329  8D 4E E6			     lea      cx,[bp-26]
   1366	032C  CD 40			     int      64
   1367					;
   1368					;    }
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 25
.\rtxcapi.asm



   1369					;
   1370					     ?debug  L 489
   1371	032E  C9			     leave
   1372	032F  CB			     ret
   1373					     ?debug  C E601703802E6FF0000046D626F78040A06000000+
   1374					     ?debug  C 0870727478636D7367390A08000000087072696F+
   1375					     ?debug  C 72697479040A0C0000000473656D61040A0E0000+
   1376					     ?debug  C 00
   1377					     ?debug  E
   1378					     ?debug  E
   1379	0330			     _KS_send	     endp
   1380					;
   1381					;    KSRC KSAPI	KS_signal(SEMA sema)
   1382					;
   1383					     ?debug  L 493
   1384					     assume  cs:RTXC_TEXT,ds:DGROUP
   1385	0330			     _KS_signal	     proc    far
   1386					     ?debug  B
   1387	0330  55			     push    bp
   1388	0331  8B EC			     mov     bp,sp
   1389	0333  83 EC 0E			     sub     sp,14
   1390					     ?debug  C E60473656D61040A06000000
   1391					     ?debug  B
   1392					;
   1393					;    {
   1394					;	struct sarg p;
   1395					;
   1396					;	p.ksnum	= RTXC_SIGNAL;
   1397					;
   1398					     ?debug  L 497
   1399	0336  C7 46 F2 0002		     mov     word ptr [bp-14],2
   1400					;
   1401					;	p.sema = sema;
   1402					;
   1403					     ?debug  L 498
   1404	033B  8B 46 06			     mov     ax,word ptr [bp+6]
   1405	033E  89 46 F6			     mov     word ptr [bp-10],ax
   1406					;
   1407					;	p.ksrc = RC_GOOD;
   1408					;
   1409					     ?debug  L 499
   1410	0341  C7 46 F4 0000		     mov     word ptr [bp-12],0
   1411					;
   1412					;	KS(p);
   1413					;
   1414					     ?debug  L 500
   1415	0346  8D 4E F2			     lea      cx,[bp-14]
   1416	0349  CD 40			     int      64
   1417					;
   1418					;	return(p.ksrc);
   1419					;
   1420					     ?debug  L 501
   1421	034B  8B 46 F4			     mov     ax,word ptr [bp-12]
   1422					;
   1423					;    }
   1424					;
   1425					     ?debug  L 502
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 26
.\rtxcapi.asm



   1426	034E  C9			     leave
   1427	034F  CB			     ret
   1428					     ?debug  C E601703702F2FF00000473656D61040A06000000
   1429					     ?debug  E
   1430					     ?debug  E
   1431	0350			     _KS_signal	     endp
   1432					;
   1433					;    void KSAPI	KS_ack(RTXCMSG *prtxcmsg)
   1434					;
   1435					     ?debug  L 506
   1436					     assume  cs:RTXC_TEXT,ds:DGROUP
   1437	0350			     _KS_ack proc    far
   1438					     ?debug  B
   1439	0350  55			     push    bp
   1440	0351  8B EC			     mov     bp,sp
   1441					     ?debug  C E60870727478636D7367390A06000000
   1442					     ?debug  B
   1443					;
   1444					;    {
   1445					;
   1446					;	KS_signal(prtxcmsg->sema);
   1447					;
   1448					     ?debug  L 509
   1449	0353  C4 5E 06			     les     bx,dword ptr [bp+6]
   1450	0356  26: FF 77	08		     push    word ptr es:[bx+8]
   1451	035A  0E			     push    cs
   1452	035B  E8 FFD2			     call    near ptr _KS_signal
   1453	035E  83 C4 02			     add     sp,2
   1454					;
   1455					;
   1456					;    }
   1457					;
   1458					     ?debug  L 511
   1459	0361  5D			     pop     bp
   1460	0362  CB			     ret
   1461					     ?debug  C E60870727478636D7367390A06000000
   1462					     ?debug  E
   1463					     ?debug  E
   1464	0363			     _KS_ack endp
   1465					;
   1466					;    KSRC KSAPI	KS_stop_timer(CLKBLK ks_clk *pclkblk)
   1467					;
   1468					     ?debug  L 516
   1469					     assume  cs:RTXC_TEXT,ds:DGROUP
   1470	0363			     _KS_stop_timer  proc    far
   1471					     ?debug  B
   1472	0363  55			     push    bp
   1473	0364  8B EC			     mov     bp,sp
   1474	0366  83 EC 12			     sub     sp,18
   1475					     ?debug  C E60770636C6B626C6B1E0A06000000
   1476					     ?debug  B
   1477					;
   1478					;    {
   1479					;	struct clkarg p;
   1480					;
   1481					;	p.ksnum	= RTXC_STOP_TIMER;
   1482					;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 27
.\rtxcapi.asm



   1483					     ?debug  L 520
   1484	0369  C7 46 EE 0013		     mov     word ptr [bp-18],19
   1485					;
   1486					;	p.pclkblk = pclkblk;
   1487					;
   1488					     ?debug  L 521
   1489	036E  8B 56 08			     mov     dx,word ptr [bp+8]
   1490	0371  8B 46 06			     mov     ax,word ptr [bp+6]
   1491	0374  89 56 FE			     mov     word ptr [bp-2],dx
   1492	0377  89 46 FC			     mov     word ptr [bp-4],ax
   1493					;
   1494					;	p.ksrc = RC_GOOD;
   1495					;
   1496					     ?debug  L 522
   1497	037A  C7 46 F0 0000		     mov     word ptr [bp-16],0
   1498					;
   1499					;	KS(p);
   1500					;
   1501					     ?debug  L 523
   1502	037F  8D 4E EE			     lea      cx,[bp-18]
   1503	0382  CD 40			     int      64
   1504					;
   1505					;	return(p.ksrc);
   1506					;
   1507					     ?debug  L 524
   1508	0384  8B 46 F0			     mov     ax,word ptr [bp-16]
   1509					;
   1510					;    }
   1511					;
   1512					     ?debug  L 525
   1513	0387  C9			     leave
   1514	0388  CB			     ret
   1515					     ?debug  C E601702302EEFF00000770636C6B626C6B1E0A06+
   1516					     ?debug  C 000000
   1517					     ?debug  E
   1518					     ?debug  E
   1519	0389			     _KS_stop_timer  endp
   1520					;
   1521					;    CLKBLK ks_clk * KSAPI KS_start_timer(CLKBLK ks_clk	*pclkblk, TICKS	ticks,
   1522					;
   1523					     ?debug  L 530
   1524					     assume  cs:RTXC_TEXT,ds:DGROUP
   1525	0389			     _KS_start_timer proc    far
   1526					     ?debug  B
   1527	0389  55			     push    bp
   1528	038A  8B EC			     mov     bp,sp
   1529	038C  83 EC 12			     sub     sp,18
   1530					     ?debug  C E60473656D61040A1200000006706572696F6406+
   1531					     ?debug  C 0A0E000000057469636B73060A0A000000077063+
   1532					     ?debug  C 6C6B626C6B1E0A06000000
   1533					     ?debug  B
   1534					;
   1535					;					 TICKS period, SEMA sema)
   1536					;    {
   1537					;	struct clkarg p;
   1538					;
   1539					;	p.ksnum	= RTXC_START_TIMER;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 28
.\rtxcapi.asm



   1540					;
   1541					     ?debug  L 535
   1542	038F  C7 46 EE 0012		     mov     word ptr [bp-18],18
   1543					;
   1544					;	p.pclkblk = pclkblk;
   1545					;
   1546					     ?debug  L 536
   1547	0394  8B 56 08			     mov     dx,word ptr [bp+8]
   1548	0397  8B 46 06			     mov     ax,word ptr [bp+6]
   1549	039A  89 56 FE			     mov     word ptr [bp-2],dx
   1550	039D  89 46 FC			     mov     word ptr [bp-4],ax
   1551					;
   1552					;	p.ticks	= ticks;
   1553					;
   1554					     ?debug  L 537
   1555	03A0  8B 56 0C			     mov     dx,word ptr [bp+12]
   1556	03A3  8B 46 0A			     mov     ax,word ptr [bp+10]
   1557	03A6  89 56 F6			     mov     word ptr [bp-10],dx
   1558	03A9  89 46 F4			     mov     word ptr [bp-12],ax
   1559					;
   1560					;	p.period = period;
   1561					;
   1562					     ?debug  L 538
   1563	03AC  8B 56 10			     mov     dx,word ptr [bp+16]
   1564	03AF  8B 46 0E			     mov     ax,word ptr [bp+14]
   1565	03B2  89 56 FA			     mov     word ptr [bp-6],dx
   1566	03B5  89 46 F8			     mov     word ptr [bp-8],ax
   1567					;
   1568					;	p.sema = sema;
   1569					;
   1570					     ?debug  L 539
   1571	03B8  8B 46 12			     mov     ax,word ptr [bp+18]
   1572	03BB  89 46 F2			     mov     word ptr [bp-14],ax
   1573					;
   1574					;	KS(p);
   1575					;
   1576					     ?debug  L 540
   1577	03BE  8D 4E EE			     lea      cx,[bp-18]
   1578	03C1  CD 40			     int      64
   1579					;
   1580					;	return(p.pclkblk);
   1581					;
   1582					     ?debug  L 541
   1583	03C3  8B 56 FE			     mov     dx,word ptr [bp-2]
   1584	03C6  8B 46 FC			     mov     ax,word ptr [bp-4]
   1585					;
   1586					;    }
   1587					;
   1588					     ?debug  L 542
   1589	03C9  C9			     leave
   1590	03CA  CB			     ret
   1591					     ?debug  C E601702302EEFF00000770636C6B626C6B1E0A06+
   1592					     ?debug  C 000000057469636B73060A0A0000000670657269+
   1593					     ?debug  C 6F64060A0E0000000473656D61040A12000000
   1594					     ?debug  E
   1595					     ?debug  E
   1596	03CB			     _KS_start_timer endp
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 29
.\rtxcapi.asm



   1597					;
   1598					;    void KSAPI	KS_suspend(TASK	task)
   1599					;
   1600					     ?debug  L 547
   1601					     assume  cs:RTXC_TEXT,ds:DGROUP
   1602	03CB			     _KS_suspend     proc    far
   1603					     ?debug  B
   1604	03CB  55			     push    bp
   1605	03CC  8B EC			     mov     bp,sp
   1606	03CE  83 EC 08			     sub     sp,8
   1607					     ?debug  C E6047461736B040A06000000
   1608					     ?debug  B
   1609					;
   1610					;    {
   1611					;	struct targ p;
   1612					;
   1613					;	p.ksnum	= RTXC_SUSPEND;
   1614					;
   1615					     ?debug  L 551
   1616	03D1  C7 46 F8 0019		     mov     word ptr [bp-8],25
   1617					;
   1618					;	p.task = task;
   1619					;
   1620					     ?debug  L 552
   1621	03D6  8B 46 06			     mov     ax,word ptr [bp+6]
   1622	03D9  89 46 FC			     mov     word ptr [bp-4],ax
   1623					;
   1624					;	KS(p);
   1625					;
   1626					     ?debug  L 553
   1627	03DC  8D 4E F8			     lea      cx,[bp-8]
   1628	03DF  CD 40			     int      64
   1629					;
   1630					;    }
   1631					;
   1632					     ?debug  L 554
   1633	03E1  C9			     leave
   1634	03E2  CB			     ret
   1635					     ?debug  C E601701902F8FF0000047461736B040A06000000
   1636					     ?debug  E
   1637					     ?debug  E
   1638	03E3			     _KS_suspend     endp
   1639					;
   1640					;    void KSAPI	KS_terminate(TASK task)
   1641					;
   1642					     ?debug  L 559
   1643					     assume  cs:RTXC_TEXT,ds:DGROUP
   1644	03E3			     _KS_terminate   proc    far
   1645					     ?debug  B
   1646	03E3  55			     push    bp
   1647	03E4  8B EC			     mov     bp,sp
   1648	03E6  83 EC 08			     sub     sp,8
   1649					     ?debug  C E6047461736B040A06000000
   1650					     ?debug  B
   1651					;
   1652					;    {
   1653					;	struct targ p;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 30
.\rtxcapi.asm



   1654					;
   1655					;	p.ksnum	= RTXC_TERMINATE;
   1656					;
   1657					     ?debug  L 563
   1658	03E9  C7 46 F8 0018		     mov     word ptr [bp-8],24
   1659					;
   1660					;	p.task = task;
   1661					;
   1662					     ?debug  L 564
   1663	03EE  8B 46 06			     mov     ax,word ptr [bp+6]
   1664	03F1  89 46 FC			     mov     word ptr [bp-4],ax
   1665					;
   1666					;	KS(p);
   1667					;
   1668					     ?debug  L 565
   1669	03F4  8D 4E F8			     lea      cx,[bp-8]
   1670	03F7  CD 40			     int      64
   1671					;
   1672					;    }
   1673					;
   1674					     ?debug  L 566
   1675	03F9  C9			     leave
   1676	03FA  CB			     ret
   1677					     ?debug  C E601701902F8FF0000047461736B040A06000000
   1678					     ?debug  E
   1679					     ?debug  E
   1680	03FB			     _KS_terminate   endp
   1681					;
   1682					;    void KSAPI	KS_unblock(TASK	starttask, TASK	endtask)
   1683					;
   1684					     ?debug  L 571
   1685					     assume  cs:RTXC_TEXT,ds:DGROUP
   1686	03FB			     _KS_unblock     proc    far
   1687					     ?debug  B
   1688	03FB  55			     push    bp
   1689	03FC  8B EC			     mov     bp,sp
   1690	03FE  83 EC 06			     sub     sp,6
   1691					     ?debug  C E607656E647461736B040A080000000973746172+
   1692					     ?debug  C 747461736B040A06000000
   1693					     ?debug  B
   1694					;
   1695					;    {
   1696					;	struct blkarg p;
   1697					;
   1698					;	p.ksnum	= RTXC_UNBLOCK;
   1699					;
   1700					     ?debug  L 575
   1701	0401  C7 46 FA 001E		     mov     word ptr [bp-6],30
   1702					;
   1703					;	p.starttask = starttask;
   1704					;
   1705					     ?debug  L 576
   1706	0406  8B 46 06			     mov     ax,word ptr [bp+6]
   1707	0409  89 46 FC			     mov     word ptr [bp-4],ax
   1708					;
   1709					;	p.endtask = endtask;
   1710					;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 31
.\rtxcapi.asm



   1711					     ?debug  L 577
   1712	040C  8B 46 08			     mov     ax,word ptr [bp+8]
   1713	040F  89 46 FE			     mov     word ptr [bp-2],ax
   1714					;
   1715					;	KS(p);
   1716					;
   1717					     ?debug  L 578
   1718	0412  8D 4E FA			     lea      cx,[bp-6]
   1719	0415  CD 40			     int      64
   1720					;
   1721					;    }
   1722					;
   1723					     ?debug  L 579
   1724	0417  C9			     leave
   1725	0418  CB			     ret
   1726					     ?debug  C E601701802FAFF00000973746172747461736B04+
   1727					     ?debug  C 0A0600000007656E647461736B040A08000000
   1728					     ?debug  E
   1729					     ?debug  E
   1730	0419			     _KS_unblock     endp
   1731					;
   1732					;    KSRC KSAPI	KS_unlock(RESOURCE resource)
   1733					;
   1734					     ?debug  L 584
   1735					     assume  cs:RTXC_TEXT,ds:DGROUP
   1736	0419			     _KS_unlock	     proc    far
   1737					     ?debug  B
   1738	0419  55			     push    bp
   1739	041A  8B EC			     mov     bp,sp
   1740	041C  83 EC 14			     sub     sp,20
   1741					     ?debug  C E6087265736F75726365040A06000000
   1742					     ?debug  B
   1743					;
   1744					;    {
   1745					;	struct larg p;
   1746					;    #ifdef FASTLOCK /*	{ */
   1747					;	RHEADER	near *prh;
   1748					;	FLAG_STORAGE;
   1749					;
   1750					;	prh = &rheader[resource];
   1751					;
   1752					;	     SAVE_FLAGS;
   1753					;	DISABLE;
   1754					;
   1755					;	if (prh->owner != hipritsk) /* if hipritsk not owner, then nop */
   1756					;	{
   1757					;	   RESTORE_FLAGS; /* fast return */
   1758					;	   return(RC_BUSY);
   1759					;	}
   1760					;
   1761					;	if (prh->level > 1) /* if nesting level	> 1 */
   1762					;	{
   1763					;	   prh->level--;   /* decrement	nesting	level */
   1764					;	   RESTORE_FLAGS;	       /* fast return */
   1765					;	   return(RC_NESTED);
   1766					;	}
   1767					;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 32
.\rtxcapi.asm



   1768					;    #ifdef RESOURCE_WAITERS /*	{ */
   1769					;	if (prh->waiters == NULLTCB) /*	if no tasks are	waiting	*/
   1770					;	{
   1771					;	   prh->level =	0;  /* zero nesting level */
   1772					;	   prh->owner =	NULLTCB; /* mark resource not owned */
   1773					;	   RESTORE_FLAGS;	       /* fast return */
   1774					;	   return(RC_GOOD);
   1775					;	}
   1776					;    #endif /* } RESOURCE_WAITERS */
   1777					;
   1778					;	RESTORE_FLAGS;		    /* fast return */
   1779					;    #endif /* } FASTLOCK */
   1780					;
   1781					;	p.ksnum	= RTXC_UNLOCK;
   1782					;
   1783					     ?debug  L 622
   1784	041F  C7 46 EC 000F		     mov     word ptr [bp-20],15
   1785					;
   1786					;	p.ksrc = RC_GOOD;
   1787					;
   1788					     ?debug  L 623
   1789	0424  C7 46 EE 0000		     mov     word ptr [bp-18],0
   1790					;
   1791					;	p.resource = resource;
   1792					;
   1793					     ?debug  L 624
   1794	0429  8B 46 06			     mov     ax,word ptr [bp+6]
   1795	042C  89 46 F0			     mov     word ptr [bp-16],ax
   1796					;
   1797					;	KS(p);
   1798					;
   1799					     ?debug  L 625
   1800	042F  8D 4E EC			     lea      cx,[bp-20]
   1801	0432  CD 40			     int      64
   1802					;
   1803					;	return(p.ksrc);
   1804					;
   1805					     ?debug  L 626
   1806	0434  8B 46 EE			     mov     ax,word ptr [bp-18]
   1807					;
   1808					;    }
   1809					;
   1810					     ?debug  L 627
   1811	0437  C9			     leave
   1812	0438  CB			     ret
   1813					     ?debug  C E601703402ECFF0000087265736F75726365040A+
   1814					     ?debug  C 06000000
   1815					     ?debug  E
   1816					     ?debug  E
   1817	0439			     _KS_unlock	     endp
   1818					;
   1819					;    int KSAPI KS_user(int (*fun)(void *), void	*arg)
   1820					;
   1821					     ?debug  L 632
   1822					     assume  cs:RTXC_TEXT,ds:DGROUP
   1823	0439			     _KS_user	     proc    far
   1824					     ?debug  B
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 33
.\rtxcapi.asm



   1825	0439  55			     push    bp
   1826	043A  8B EC			     mov     bp,sp
   1827	043C  83 EC 0C			     sub     sp,12
   1828					     ?debug  C E33C00000023040400
   1829					     ?debug  C E33B000400163C00
   1830					     ?debug  C E6036172671D0A0A0000000366756E3B0A060000+
   1831					     ?debug  C 00
   1832					     ?debug  B
   1833					;
   1834					;    {
   1835					;	struct userarg p;
   1836					;
   1837					;	p.ksnum	= RTXC_USER;
   1838					;
   1839					     ?debug  L 636
   1840	043F  C7 46 F4 002F		     mov     word ptr [bp-12],47
   1841					;
   1842					;	p.fun =	fun;
   1843					;
   1844					     ?debug  L 637
   1845	0444  8B 56 08			     mov     dx,word ptr [bp+8]
   1846	0447  8B 46 06			     mov     ax,word ptr [bp+6]
   1847	044A  89 56 FC			     mov     word ptr [bp-4],dx
   1848	044D  89 46 FA			     mov     word ptr [bp-6],ax
   1849					;
   1850					;	p.arg =	arg;
   1851					;
   1852					     ?debug  L 638
   1853	0450  8B 56 0C			     mov     dx,word ptr [bp+12]
   1854	0453  8B 46 0A			     mov     ax,word ptr [bp+10]
   1855	0456  89 56 F8			     mov     word ptr [bp-8],dx
   1856	0459  89 46 F6			     mov     word ptr [bp-10],ax
   1857					;
   1858					;	KS(p);
   1859					;
   1860					     ?debug  L 639
   1861	045C  8D 4E F4			     lea      cx,[bp-12]
   1862	045F  CD 40			     int      64
   1863					;
   1864					;	return(p.val);
   1865					;
   1866					     ?debug  L 640
   1867	0461  8B 46 FE			     mov     ax,word ptr [bp-2]
   1868					;
   1869					;    }
   1870					;
   1871					     ?debug  L 641
   1872	0464  C9			     leave
   1873	0465  CB			     ret
   1874					     ?debug  C E33D07757365726172670C001E808E
   1875					     ?debug  C E33F00000023040400
   1876					     ?debug  C E33E000400163F00
   1877					     ?debug  C E601703D02F4FF00000366756E3B0A0600000003+
   1878					     ?debug  C 6172671D0A0A000000
   1879					     ?debug  E
   1880					     ?debug  E
   1881	0466			     _KS_user	     endp
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 34
.\rtxcapi.asm



   1882					;
   1883					;    KSRC KSAPI	KS_wait(SEMA sema)
   1884					;
   1885					     ?debug  L 645
   1886					     assume  cs:RTXC_TEXT,ds:DGROUP
   1887	0466			     _KS_wait	     proc    far
   1888					     ?debug  B
   1889	0466  55			     push    bp
   1890	0467  8B EC			     mov     bp,sp
   1891	0469  83 EC 0E			     sub     sp,14
   1892					     ?debug  C E60473656D61040A06000000
   1893					     ?debug  B
   1894					;
   1895					;    {
   1896					;	struct sarg p;
   1897					;
   1898					;	p.ksnum	= RTXC_WAIT;
   1899					;
   1900					     ?debug  L 649
   1901	046C  C7 46 F2 0001		     mov     word ptr [bp-14],1
   1902					;
   1903					;	p.sema = sema;
   1904					;
   1905					     ?debug  L 650
   1906	0471  8B 46 06			     mov     ax,word ptr [bp+6]
   1907	0474  89 46 F6			     mov     word ptr [bp-10],ax
   1908					;
   1909					;	p.ticks	= (TICKS)0;
   1910					;
   1911					     ?debug  L 651
   1912	0477  C7 46 FA 0000		     mov     word ptr [bp-6],0
   1913	047C  C7 46 F8 0000		     mov     word ptr [bp-8],0
   1914					;
   1915					;	p.ksrc = RC_GOOD;
   1916					;
   1917					     ?debug  L 652
   1918	0481  C7 46 F4 0000		     mov     word ptr [bp-12],0
   1919					;
   1920					;	KS(p);
   1921					;
   1922					     ?debug  L 653
   1923	0486  8D 4E F2			     lea      cx,[bp-14]
   1924	0489  CD 40			     int      64
   1925					;
   1926					;	return(p.ksrc);
   1927					;
   1928					     ?debug  L 654
   1929	048B  8B 46 F4			     mov     ax,word ptr [bp-12]
   1930					;
   1931					;    }
   1932					;
   1933					     ?debug  L 655
   1934	048E  C9			     leave
   1935	048F  CB			     ret
   1936					     ?debug  C E601703702F2FF00000473656D61040A06000000
   1937					     ?debug  E
   1938					     ?debug  E
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 35
.\rtxcapi.asm



   1939	0490			     _KS_wait	     endp
   1940					;
   1941					;    KSRC KSAPI	KS_yield(void)
   1942					;
   1943					     ?debug  L 659
   1944					     assume  cs:RTXC_TEXT,ds:DGROUP
   1945	0490			     _KS_yield	     proc    far
   1946					     ?debug  B
   1947	0490  55			     push    bp
   1948	0491  8B EC			     mov     bp,sp
   1949	0493  83 EC 08			     sub     sp,8
   1950					     ?debug  B
   1951					;
   1952					;    {
   1953					;	struct targ p;
   1954					;
   1955					;	p.ksnum	= RTXC_YIELD;
   1956					;
   1957					     ?debug  L 663
   1958	0496  C7 46 F8 001C		     mov     word ptr [bp-8],28
   1959					;
   1960					;	p.ksrc = RC_NO_YIELD;
   1961					;
   1962					     ?debug  L 664
   1963	049B  C7 46 FA 000D		     mov     word ptr [bp-6],13
   1964					;
   1965					;	KS(p);
   1966					;
   1967					     ?debug  L 665
   1968	04A0  8D 4E F8			     lea      cx,[bp-8]
   1969	04A3  CD 40			     int      64
   1970					;
   1971					;	return(p.ksrc);
   1972					;
   1973					     ?debug  L 666
   1974	04A5  8B 46 FA			     mov     ax,word ptr [bp-6]
   1975					;
   1976					;    }
   1977					;
   1978					     ?debug  L 667
   1979	04A8  C9			     leave
   1980	04A9  CB			     ret
   1981					     ?debug  C E601701902F8FF0000
   1982					     ?debug  E
   1983					     ?debug  E
   1984	04AA			     _KS_yield	     endp
   1985					;
   1986					;    void * KSAPI KS_allocw(MAP	map)
   1987					;
   1988					     ?debug  L 675
   1989					     assume  cs:RTXC_TEXT,ds:DGROUP
   1990	04AA			     _KS_allocw	     proc    far
   1991					     ?debug  B
   1992	04AA  55			     push    bp
   1993	04AB  8B EC			     mov     bp,sp
   1994	04AD  83 EC 1C			     sub     sp,28
   1995					     ?debug  C E6036D6170040A06000000
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 36
.\rtxcapi.asm



   1996					     ?debug  B
   1997					;
   1998					;    {
   1999					;	struct parg p;
   2000					;    #ifdef FASTALLOC /* { */
   2001					;	PHEADER	near *pph;
   2002					;	FLAG_STORAGE;
   2003					;
   2004					;	pph = &pheader[map];
   2005					;
   2006					;	     SAVE_FLAGS;
   2007					;	DISABLE;
   2008					;
   2009					;	if ( (p.val = (char *)pph->next) != NULL ) /* if any available */
   2010					;	{
   2011					;	   pph->next = ((struct	xmap *)p.val)->link; /*	unlink 1st from	list */
   2012					;    #ifdef CBUG /* { */
   2013					;	   if (++pph->cur > pph->worst)	/* check for new worst case */
   2014					;	      pph->worst = pph->cur;	      /* useage	level */
   2015					;    #endif /* } CBUG */
   2016					;	   RESTORE_FLAGS;
   2017					;	   return(p.val);
   2018					;	}
   2019					;	RESTORE_FLAGS;
   2020					;    #endif /* } FASTALLOC */
   2021					;
   2022					;	p.ksnum	= RTXC_ALLOC;
   2023					;
   2024					     ?debug  L 700
   2025	04B0  C7 46 E4 0006		     mov     word ptr [bp-28],6
   2026					;
   2027					;	p.map =	map;
   2028					;
   2029					     ?debug  L 701
   2030	04B5  8B 46 06			     mov     ax,word ptr [bp+6]
   2031	04B8  89 46 E8			     mov     word ptr [bp-24],ax
   2032					;
   2033					;	p.wait = 1;
   2034					;
   2035					     ?debug  L 702
   2036	04BB  C7 46 F0 0001		     mov     word ptr [bp-16],1
   2037					;
   2038					;    #ifdef PARTITION_TIMEOUTS /* { */
   2039					;	p.ticks	= (TICKS)0; /* indicate	NO timeout */
   2040					;
   2041					     ?debug  L 704
   2042	04C0  C7 46 F4 0000		     mov     word ptr [bp-12],0
   2043	04C5  C7 46 F2 0000		     mov     word ptr [bp-14],0
   2044					;
   2045					;    #endif /* } PARTITION_TIMEOUTS */
   2046					;	KS(p);
   2047					;
   2048					     ?debug  L 706
   2049	04CA  8D 4E E4			     lea      cx,[bp-28]
   2050	04CD  CD 40			     int      64
   2051					;
   2052					;	return(p.val);
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 37
.\rtxcapi.asm



   2053					;
   2054					     ?debug  L 707
   2055	04CF  8B 56 EC			     mov     dx,word ptr [bp-20]
   2056	04D2  8B 46 EA			     mov     ax,word ptr [bp-22]
   2057					;
   2058					;    }
   2059					;
   2060					     ?debug  L 708
   2061	04D5  C9			     leave
   2062	04D6  CB			     ret
   2063					     ?debug  C E601701C02E4FF0000036D6170040A06000000
   2064					     ?debug  E
   2065					     ?debug  E
   2066	04D7			     _KS_allocw	     endp
   2067					;
   2068					;    MAP KSAPI KS_create_part(void *addr, size_t blksize, size_t nblocks)
   2069					;
   2070					     ?debug  L 713
   2071					     assume  cs:RTXC_TEXT,ds:DGROUP
   2072	04D7			     _KS_create_part proc    far
   2073					     ?debug  B
   2074	04D7  55			     push    bp
   2075	04D8  8B EC			     mov     bp,sp
   2076	04DA  83 EC 1C			     sub     sp,28
   2077					     ?debug  C E6076E626C6F636B730A0A0C00000007626C6B73+
   2078					     ?debug  C 697A650A0A0A00000004616464721D0A06000000
   2079					     ?debug  B
   2080					;
   2081					;    {
   2082					;	struct parg p;
   2083					;
   2084					;	p.ksnum	= RTXC_CREATE_PART;
   2085					;
   2086					     ?debug  L 717
   2087	04DD  C7 46 E4 0008		     mov     word ptr [bp-28],8
   2088					;
   2089					;	p.addr = (char *)addr;
   2090					;
   2091					     ?debug  L 718
   2092	04E2  8B 56 08			     mov     dx,word ptr [bp+8]
   2093	04E5  8B 46 06			     mov     ax,word ptr [bp+6]
   2094	04E8  89 56 FC			     mov     word ptr [bp-4],dx
   2095	04EB  89 46 FA			     mov     word ptr [bp-6],ax
   2096					;
   2097					;	p.size = blksize;
   2098					;
   2099					     ?debug  L 719
   2100	04EE  8B 46 0A			     mov     ax,word ptr [bp+10]
   2101	04F1  89 46 EE			     mov     word ptr [bp-18],ax
   2102					;
   2103					;	p.nblocks = nblocks;
   2104					;
   2105					     ?debug  L 720
   2106	04F4  8B 46 0C			     mov     ax,word ptr [bp+12]
   2107	04F7  89 46 FE			     mov     word ptr [bp-2],ax
   2108					;
   2109					;	KS(p);
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 38
.\rtxcapi.asm



   2110					;
   2111					     ?debug  L 721
   2112	04FA  8D 4E E4			     lea      cx,[bp-28]
   2113	04FD  CD 40			     int      64
   2114					;
   2115					;
   2116					;	/* return map #	(0 = no	dynamic	partition headers available) */
   2117					;	return(p.map);
   2118					;
   2119					     ?debug  L 724
   2120	04FF  8B 46 E8			     mov     ax,word ptr [bp-24]
   2121					;
   2122					;    }
   2123					;
   2124					     ?debug  L 725
   2125	0502  C9			     leave
   2126	0503  CB			     ret
   2127					     ?debug  C E601701C02E4FF000004616464721D0A06000000+
   2128					     ?debug  C 07626C6B73697A650A0A0A000000076E626C6F63+
   2129					     ?debug  C 6B730A0A0C000000
   2130					     ?debug  E
   2131					     ?debug  E
   2132	0504			     _KS_create_part endp
   2133					;
   2134					;    TASK KSAPI	KS_inqres(RESOURCE resource)
   2135					;
   2136					     ?debug  L 730
   2137					     assume  cs:RTXC_TEXT,ds:DGROUP
   2138	0504			     _KS_inqres	     proc    far
   2139					     ?debug  B
   2140	0504  55			     push    bp
   2141	0505  8B EC			     mov     bp,sp
   2142	0507  83 EC 14			     sub     sp,20
   2143					     ?debug  C E6087265736F75726365040A06000000
   2144					     ?debug  B
   2145					;
   2146					;    {
   2147					;	struct larg p;
   2148					;
   2149					;	p.ksnum	= RTXC_INQRES;
   2150					;
   2151					     ?debug  L 734
   2152	050A  C7 46 EC 0026		     mov     word ptr [bp-20],38
   2153					;
   2154					;	p.resource = resource;
   2155					;
   2156					     ?debug  L 735
   2157	050F  8B 46 06			     mov     ax,word ptr [bp+6]
   2158	0512  89 46 F0			     mov     word ptr [bp-16],ax
   2159					;
   2160					;	p.task = (TASK)0; /* initialize	in case	no owner exists	*/
   2161					;
   2162					     ?debug  L 736
   2163	0515  C7 46 FC 0000		     mov     word ptr [bp-4],0
   2164					;
   2165					;	KS(p);
   2166					;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 39
.\rtxcapi.asm



   2167					     ?debug  L 737
   2168	051A  8D 4E EC			     lea      cx,[bp-20]
   2169	051D  CD 40			     int      64
   2170					;
   2171					;	return(p.task);
   2172					;
   2173					     ?debug  L 738
   2174	051F  8B 46 FC			     mov     ax,word ptr [bp-4]
   2175					;
   2176					;    }
   2177					;
   2178					     ?debug  L 739
   2179	0522  C9			     leave
   2180	0523  CB			     ret
   2181					     ?debug  C E601703402ECFF0000087265736F75726365040A+
   2182					     ?debug  C 06000000
   2183					     ?debug  E
   2184					     ?debug  E
   2185	0524			     _KS_inqres	     endp
   2186					;
   2187					;    KSRC KSAPI	KS_defres(RESOURCE resource, RESATTR resattr)
   2188					;
   2189					     ?debug  L 745
   2190					     assume  cs:RTXC_TEXT,ds:DGROUP
   2191	0524			     _KS_defres	     proc    far
   2192					     ?debug  B
   2193	0524  55			     push    bp
   2194	0525  8B EC			     mov     bp,sp
   2195	0527  83 EC 14			     sub     sp,20
   2196					     ?debug  C E60772657361747472350A08000000087265736F+
   2197					     ?debug  C 75726365040A06000000
   2198					     ?debug  B
   2199					;
   2200					;    {
   2201					;	struct larg p;
   2202					;
   2203					;	p.ksnum	= RTXC_DEFRES;
   2204					;
   2205					     ?debug  L 749
   2206	052A  C7 46 EC 0027		     mov     word ptr [bp-20],39
   2207					;
   2208					;	p.resource = resource;
   2209					;
   2210					     ?debug  L 750
   2211	052F  8B 46 06			     mov     ax,word ptr [bp+6]
   2212	0532  89 46 F0			     mov     word ptr [bp-16],ax
   2213					;
   2214					;	p.resattr = resattr;
   2215					;
   2216					     ?debug  L 751
   2217	0535  8B 46 08			     mov     ax,word ptr [bp+8]
   2218	0538  89 46 FE			     mov     word ptr [bp-2],ax
   2219					;
   2220					;	p.ksrc = RC_GOOD;
   2221					;
   2222					     ?debug  L 752
   2223	053B  C7 46 EE 0000		     mov     word ptr [bp-18],0
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 40
.\rtxcapi.asm



   2224					;
   2225					;	KS(p);
   2226					;
   2227					     ?debug  L 753
   2228	0540  8D 4E EC			     lea      cx,[bp-20]
   2229	0543  CD 40			     int      64
   2230					;
   2231					;	return(p.ksrc);
   2232					;
   2233					     ?debug  L 754
   2234	0545  8B 46 EE			     mov     ax,word ptr [bp-18]
   2235					;
   2236					;    }
   2237					;
   2238					     ?debug  L 755
   2239	0548  C9			     leave
   2240	0549  CB			     ret
   2241					     ?debug  C E601703402ECFF0000087265736F75726365040A+
   2242					     ?debug  C 060000000772657361747472350A08000000
   2243					     ?debug  E
   2244					     ?debug  E
   2245	054A			     _KS_defres	     endp
   2246					;
   2247					;    void * KSAPI KS_inqtask_arg(TASK task)
   2248					;
   2249					     ?debug  L 761
   2250					     assume  cs:RTXC_TEXT,ds:DGROUP
   2251	054A			     _KS_inqtask_arg proc    far
   2252					     ?debug  B
   2253	054A  55			     push    bp
   2254	054B  8B EC			     mov     bp,sp
   2255	054D  83 EC 16			     sub     sp,22
   2256					     ?debug  C E6047461736B040A06000000
   2257					     ?debug  B
   2258					;
   2259					;    {
   2260					;	struct deftaskarg p;
   2261					;
   2262					;	p.ksnum	= RTXC_INQTASK_ARG;
   2263					;
   2264					     ?debug  L 765
   2265	0550  C7 46 EA 0028		     mov     word ptr [bp-22],40
   2266					;
   2267					;	p.task = task;
   2268					;
   2269					     ?debug  L 766
   2270	0555  8B 46 06			     mov     ax,word ptr [bp+6]
   2271	0558  89 46 EE			     mov     word ptr [bp-18],ax
   2272					;
   2273					;	KS(p);
   2274					;
   2275					     ?debug  L 767
   2276	055B  8D 4E EA			     lea      cx,[bp-22]
   2277	055E  CD 40			     int      64
   2278					;
   2279					;	return(p.arg);
   2280					;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 41
.\rtxcapi.asm



   2281					     ?debug  L 768
   2282	0560  8B 56 FE			     mov     dx,word ptr [bp-2]
   2283	0563  8B 46 FC			     mov     ax,word ptr [bp-4]
   2284					;
   2285					;    }
   2286					;
   2287					     ?debug  L 769
   2288	0566  C9			     leave
   2289	0567  CB			     ret
   2290					     ?debug  C E601703102EAFF0000047461736B040A06000000
   2291					     ?debug  E
   2292					     ?debug  E
   2293	0568			     _KS_inqtask_arg endp
   2294					;
   2295					;    void KSAPI	KS_deftask_arg(TASK task, void *arg)
   2296					;
   2297					     ?debug  L 774
   2298					     assume  cs:RTXC_TEXT,ds:DGROUP
   2299	0568			     _KS_deftask_arg proc    far
   2300					     ?debug  B
   2301	0568  55			     push    bp
   2302	0569  8B EC			     mov     bp,sp
   2303	056B  83 EC 16			     sub     sp,22
   2304					     ?debug  C E6036172671D0A08000000047461736B040A0600+
   2305					     ?debug  C 0000
   2306					     ?debug  B
   2307					;
   2308					;    {
   2309					;	struct deftaskarg p;
   2310					;
   2311					;	p.ksnum	= RTXC_DEFTASK_ARG;
   2312					;
   2313					     ?debug  L 778
   2314	056E  C7 46 EA 0029		     mov     word ptr [bp-22],41
   2315					;
   2316					;	p.task = task;
   2317					;
   2318					     ?debug  L 779
   2319	0573  8B 46 06			     mov     ax,word ptr [bp+6]
   2320	0576  89 46 EE			     mov     word ptr [bp-18],ax
   2321					;
   2322					;	p.arg =	arg;
   2323					;
   2324					     ?debug  L 780
   2325	0579  8B 56 0A			     mov     dx,word ptr [bp+10]
   2326	057C  8B 46 08			     mov     ax,word ptr [bp+8]
   2327	057F  89 56 FE			     mov     word ptr [bp-2],dx
   2328	0582  89 46 FC			     mov     word ptr [bp-4],ax
   2329					;
   2330					;	KS(p);
   2331					;
   2332					     ?debug  L 781
   2333	0585  8D 4E EA			     lea      cx,[bp-22]
   2334	0588  CD 40			     int      64
   2335					;
   2336					;    }
   2337					;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 42
.\rtxcapi.asm



   2338					     ?debug  L 782
   2339	058A  C9			     leave
   2340	058B  CB			     ret
   2341					     ?debug  C E601703102EAFF0000047461736B040A06000000+
   2342					     ?debug  C 036172671D0A08000000
   2343					     ?debug  E
   2344					     ?debug  E
   2345	058C			     _KS_deftask_arg endp
   2346					;
   2347					;    void KSAPI	KS_defmboxsema(MBOX mbox, SEMA sema)
   2348					;
   2349					     ?debug  L 788
   2350					     assume  cs:RTXC_TEXT,ds:DGROUP
   2351	058C			     _KS_defmboxsema proc    far
   2352					     ?debug  B
   2353	058C  55			     push    bp
   2354	058D  8B EC			     mov     bp,sp
   2355	058F  83 EC 1A			     sub     sp,26
   2356					     ?debug  C E60473656D61040A08000000046D626F78040A06+
   2357					     ?debug  C 000000
   2358					     ?debug  B
   2359					;
   2360					;    {
   2361					;	struct msgarg p;
   2362					;
   2363					;	p.ksnum	= RTXC_DEFMBOXSEMA;
   2364					;
   2365					     ?debug  L 792
   2366	0592  C7 46 E6 001F		     mov     word ptr [bp-26],31
   2367					;
   2368					;	p.mbox = mbox;
   2369					;
   2370					     ?debug  L 793
   2371	0597  8B 46 06			     mov     ax,word ptr [bp+6]
   2372	059A  89 46 EC			     mov     word ptr [bp-20],ax
   2373					;
   2374					;	p.sema = sema;
   2375					;
   2376					     ?debug  L 794
   2377	059D  8B 46 08			     mov     ax,word ptr [bp+8]
   2378	05A0  89 46 EA			     mov     word ptr [bp-22],ax
   2379					;
   2380					;	KS(p);
   2381					;
   2382					     ?debug  L 795
   2383	05A3  8D 4E E6			     lea      cx,[bp-26]
   2384	05A6  CD 40			     int      64
   2385					;
   2386					;    }
   2387					;
   2388					     ?debug  L 796
   2389	05A8  C9			     leave
   2390	05A9  CB			     ret
   2391					     ?debug  C E601703802E6FF0000046D626F78040A06000000+
   2392					     ?debug  C 0473656D61040A08000000
   2393					     ?debug  E
   2394					     ?debug  E
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 43
.\rtxcapi.asm



   2395	05AA			     _KS_defmboxsema endp
   2396					;
   2397					;    void KSAPI	KS_defqsema(QUEUE queue, SEMA sema, QCOND qcond)
   2398					;
   2399					     ?debug  L 802
   2400					     assume  cs:RTXC_TEXT,ds:DGROUP
   2401	05AA			     _KS_defqsema    proc    far
   2402					     ?debug  B
   2403	05AA  55			     push    bp
   2404	05AB  8B EC			     mov     bp,sp
   2405	05AD  83 EC 14			     sub     sp,20
   2406					     ?debug  C E3400551434F4E44020022000080FF7F8093
   2407					     ?debug  C E60571636F6E64400A0A0000000473656D61040A+
   2408					     ?debug  C 08000000057175657565040A06000000
   2409					     ?debug  B
   2410					;
   2411					;    {
   2412					;	struct qdefarg p;
   2413					;
   2414					;	p.ksnum	= RTXC_DEFQSEMA;
   2415					;
   2416					     ?debug  L 806
   2417	05B0  C7 46 EC 0021		     mov     word ptr [bp-20],33
   2418					;
   2419					;	p.queue	= queue;
   2420					;
   2421					     ?debug  L 807
   2422	05B5  8B 46 06			     mov     ax,word ptr [bp+6]
   2423	05B8  89 46 F0			     mov     word ptr [bp-16],ax
   2424					;
   2425					;	p.sema = sema;
   2426					;
   2427					     ?debug  L 808
   2428	05BB  8B 46 08			     mov     ax,word ptr [bp+8]
   2429	05BE  89 46 FC			     mov     word ptr [bp-4],ax
   2430					;
   2431					;	p.qcond	= qcond;
   2432					;
   2433					     ?debug  L 809
   2434	05C1  8B 46 0A			     mov     ax,word ptr [bp+10]
   2435	05C4  89 46 FE			     mov     word ptr [bp-2],ax
   2436					;
   2437					;	KS(p);
   2438					;
   2439					     ?debug  L 810
   2440	05C7  8D 4E EC			     lea      cx,[bp-20]
   2441	05CA  CD 40			     int      64
   2442					;
   2443					;    }
   2444					;
   2445					     ?debug  L 811
   2446	05CC  C9			     leave
   2447	05CD  CB			     ret
   2448					     ?debug  C E342077164656661726714001E8097
   2449					     ?debug  C E601704202ECFF0000057175657565040A060000+
   2450					     ?debug  C 000473656D61040A080000000571636F6E64400A+
   2451					     ?debug  C 0A000000
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 44
.\rtxcapi.asm



   2452					     ?debug  E
   2453					     ?debug  E
   2454	05CE			     _KS_defqsema    endp
   2455					;
   2456					;    void KSAPI	KS_dequeuew(QUEUE queue, void *data)
   2457					;
   2458					     ?debug  L 816
   2459					     assume  cs:RTXC_TEXT,ds:DGROUP
   2460	05CE			     _KS_dequeuew    proc    far
   2461					     ?debug  B
   2462	05CE  55			     push    bp
   2463	05CF  8B EC			     mov     bp,sp
   2464	05D1  83 EC 16			     sub     sp,22
   2465					     ?debug  C E604646174611D0A08000000057175657565040A+
   2466					     ?debug  C 06000000
   2467					     ?debug  B
   2468					;
   2469					;    {
   2470					;	struct qarg p;
   2471					;
   2472					;	p.ksnum	= RTXC_DEQUEUE;
   2473					;
   2474					     ?debug  L 820
   2475	05D4  C7 46 EA 000D		     mov     word ptr [bp-22],13
   2476					;
   2477					;	p.queue	= queue;
   2478					;
   2479					     ?debug  L 821
   2480	05D9  8B 46 06			     mov     ax,word ptr [bp+6]
   2481	05DC  89 46 F0			     mov     word ptr [bp-16],ax
   2482					;
   2483					;	p.data = data;
   2484					;
   2485					     ?debug  L 822
   2486	05DF  8B 56 0A			     mov     dx,word ptr [bp+10]
   2487	05E2  8B 46 08			     mov     ax,word ptr [bp+8]
   2488	05E5  89 56 F4			     mov     word ptr [bp-12],dx
   2489	05E8  89 46 F2			     mov     word ptr [bp-14],ax
   2490					;
   2491					;    #ifdef QUEUE_TIMEOUTS /* {	*/
   2492					;	p.ticks	= (TICKS)0;
   2493					;
   2494					     ?debug  L 824
   2495	05EB  C7 46 FA 0000		     mov     word ptr [bp-6],0
   2496	05F0  C7 46 F8 0000		     mov     word ptr [bp-8],0
   2497					;
   2498					;    #endif /* } QUEUE_TIMEOUTS	*/
   2499					;	p.wait = 1;
   2500					;
   2501					     ?debug  L 826
   2502	05F5  C7 46 F6 0001		     mov     word ptr [bp-10],1
   2503					;
   2504					;	KS(p);
   2505					;
   2506					     ?debug  L 827
   2507	05FA  8D 4E EA			     lea      cx,[bp-22]
   2508	05FD  CD 40			     int      64
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 45
.\rtxcapi.asm



   2509					;
   2510					;    }
   2511					;
   2512					     ?debug  L 828
   2513	05FF  C9			     leave
   2514	0600  CB			     ret
   2515					     ?debug  C E601702E02EAFF0000057175657565040A060000+
   2516					     ?debug  C 0004646174611D0A08000000
   2517					     ?debug  E
   2518					     ?debug  E
   2519	0601			     _KS_dequeuew    endp
   2520					;
   2521					;    TICKS KSAPI KS_elapse(TICKS *stamp)
   2522					;
   2523					     ?debug  L 833
   2524					     assume  cs:RTXC_TEXT,ds:DGROUP
   2525	0601			     _KS_elapse	     proc    far
   2526					     ?debug  B
   2527	0601  55			     push    bp
   2528	0602  8B EC			     mov     bp,sp
   2529	0604  83 EC 0A			     sub     sp,10
   2530					     ?debug  C E343000400160600
   2531					     ?debug  C E6057374616D70430A06000000
   2532					     ?debug  B
   2533					;
   2534					;    {
   2535					;	struct etarg p;
   2536					;
   2537					;	p.ksnum	= RTXC_ELAPSE;
   2538					;
   2539					     ?debug  L 837
   2540	0607  C7 46 F6 0023		     mov     word ptr [bp-10],35
   2541					;
   2542					;	p.stamp	= stamp;
   2543					;
   2544					     ?debug  L 838
   2545	060C  8B 56 08			     mov     dx,word ptr [bp+8]
   2546	060F  8B 46 06			     mov     ax,word ptr [bp+6]
   2547	0612  89 56 FA			     mov     word ptr [bp-6],dx
   2548	0615  89 46 F8			     mov     word ptr [bp-8],ax
   2549					;
   2550					;	KS(p);
   2551					;
   2552					     ?debug  L 839
   2553	0618  8D 4E F6			     lea      cx,[bp-10]
   2554	061B  CD 40			     int      64
   2555					;
   2556					;	return(p.val);
   2557					;
   2558					     ?debug  L 840
   2559	061D  8B 56 FE			     mov     dx,word ptr [bp-2]
   2560	0620  8B 46 FC			     mov     ax,word ptr [bp-4]
   2561					;
   2562					;    }
   2563					;
   2564					     ?debug  L 841
   2565	0623  C9			     leave
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 46
.\rtxcapi.asm



   2566	0624  CB			     ret
   2567					     ?debug  C E3440565746172670A001E80A1
   2568					     ?debug  C E601704402F6FF0000057374616D70430A060000+
   2569					     ?debug  C 00
   2570					     ?debug  E
   2571					     ?debug  E
   2572	0625			     _KS_elapse	     endp
   2573					;
   2574					;    void KSAPI	KS_enqueuew(QUEUE queue, void *data)
   2575					;
   2576					     ?debug  L 846
   2577					     assume  cs:RTXC_TEXT,ds:DGROUP
   2578	0625			     _KS_enqueuew    proc    far
   2579					     ?debug  B
   2580	0625  55			     push    bp
   2581	0626  8B EC			     mov     bp,sp
   2582	0628  83 EC 16			     sub     sp,22
   2583					     ?debug  C E604646174611D0A08000000057175657565040A+
   2584					     ?debug  C 06000000
   2585					     ?debug  B
   2586					;
   2587					;    {
   2588					;	struct qarg p;
   2589					;
   2590					;	p.ksnum	= RTXC_ENQUEUE;
   2591					;
   2592					     ?debug  L 850
   2593	062B  C7 46 EA 000C		     mov     word ptr [bp-22],12
   2594					;
   2595					;	p.queue	= queue;
   2596					;
   2597					     ?debug  L 851
   2598	0630  8B 46 06			     mov     ax,word ptr [bp+6]
   2599	0633  89 46 F0			     mov     word ptr [bp-16],ax
   2600					;
   2601					;	p.data = data;
   2602					;
   2603					     ?debug  L 852
   2604	0636  8B 56 0A			     mov     dx,word ptr [bp+10]
   2605	0639  8B 46 08			     mov     ax,word ptr [bp+8]
   2606	063C  89 56 F4			     mov     word ptr [bp-12],dx
   2607	063F  89 46 F2			     mov     word ptr [bp-14],ax
   2608					;
   2609					;    #ifdef QUEUE_TIMEOUTS /* {	*/
   2610					;	p.ticks	= (TICKS)0;
   2611					;
   2612					     ?debug  L 854
   2613	0642  C7 46 FA 0000		     mov     word ptr [bp-6],0
   2614	0647  C7 46 F8 0000		     mov     word ptr [bp-8],0
   2615					;
   2616					;    #endif /* } QUEUE_TIMEOUTS	*/
   2617					;	p.wait = 1;
   2618					;
   2619					     ?debug  L 856
   2620	064C  C7 46 F6 0001		     mov     word ptr [bp-10],1
   2621					;
   2622					;	KS(p);
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 47
.\rtxcapi.asm



   2623					;
   2624					     ?debug  L 857
   2625	0651  8D 4E EA			     lea      cx,[bp-22]
   2626	0654  CD 40			     int      64
   2627					;
   2628					;    }
   2629					;
   2630					     ?debug  L 858
   2631	0656  C9			     leave
   2632	0657  CB			     ret
   2633					     ?debug  C E601702E02EAFF0000057175657565040A060000+
   2634					     ?debug  C 0004646174611D0A08000000
   2635					     ?debug  E
   2636					     ?debug  E
   2637	0658			     _KS_enqueuew    endp
   2638					;
   2639					;    size_t KSAPI KS_inqmap(MAP	map)
   2640					;
   2641					     ?debug  L 863
   2642					     assume  cs:RTXC_TEXT,ds:DGROUP
   2643	0658			     _KS_inqmap	     proc    far
   2644					     ?debug  B
   2645	0658  55			     push    bp
   2646	0659  8B EC			     mov     bp,sp
   2647					     ?debug  C E6036D6170040A06000000
   2648					     ?debug  B
   2649					;
   2650					;    {
   2651					;	return(pheader[map].size);
   2652					;
   2653					     ?debug  L 865
   2654	065B  8B 5E 06			     mov     bx,word ptr [bp+6]
   2655	065E  6B DB 12			     imul    bx,bx,18
   2656	0661  8B 87 0004e		     mov     ax,word ptr DGROUP:_pheader[bx+4]
   2657					;
   2658					;    }
   2659					;
   2660					     ?debug  L 866
   2661	0665  5D			     pop     bp
   2662	0666  CB			     ret
   2663					     ?debug  C E6036D6170040A06000000
   2664					     ?debug  E
   2665					     ?debug  E
   2666	0667			     _KS_inqmap	     endp
   2667					;
   2668					;    KSRC KSAPI	KS_lockw(RESOURCE resource)
   2669					;
   2670					     ?debug  L 871
   2671					     assume  cs:RTXC_TEXT,ds:DGROUP
   2672	0667			     _KS_lockw	     proc    far
   2673					     ?debug  B
   2674	0667  55			     push    bp
   2675	0668  8B EC			     mov     bp,sp
   2676	066A  83 EC 14			     sub     sp,20
   2677					     ?debug  C E6087265736F75726365040A06000000
   2678					     ?debug  B
   2679					;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 48
.\rtxcapi.asm



   2680					;    {
   2681					;	struct larg p;
   2682					;    #ifdef FASTLOCK /*	{ */
   2683					;	RHEADER	near *prh;
   2684					;	FLAG_STORAGE;
   2685					;
   2686					;	prh = &rheader[resource];
   2687					;
   2688					;	     SAVE_FLAGS;
   2689					;	DISABLE;
   2690					;
   2691					;	if (prh->owner == NULLTCB)  /* if resource not currently owned */
   2692					;	{
   2693					;    #ifdef CBUG /* { */
   2694					;	   prh->count++;	   /* update statistics	*/
   2695					;    #endif /* } CBUG */
   2696					;	   prh->owner =	hipritsk; /* lock resource with	task # */
   2697					;	   prh->level =	1;	   /* set nesting level	= 1 */
   2698					;	   RESTORE_FLAGS;		  /* fast return */
   2699					;	   return(RC_GOOD);
   2700					;	}
   2701					;
   2702					;	if (prh->owner == hipritsk) /* if already owned	by caller */
   2703					;	{
   2704					;    #ifdef CBUG /* { */
   2705					;	   prh->count++;	   /* update statistics	*/
   2706					;    #endif /* } CBUG */
   2707					;	   prh->level++;	   /* bump nesting level */
   2708					;	   RESTORE_FLAGS;		  /* fast return */
   2709					;	   return(RC_NESTED);
   2710					;	}
   2711					;	RESTORE_FLAGS;
   2712					;    #endif /* } FASTLOCK */
   2713					;
   2714					;	p.ksnum	= RTXC_LOCK;
   2715					;
   2716					     ?debug  L 906
   2717	066D  C7 46 EC 000E		     mov     word ptr [bp-20],14
   2718					;
   2719					;	p.resource = resource;
   2720					;
   2721					     ?debug  L 907
   2722	0672  8B 46 06			     mov     ax,word ptr [bp+6]
   2723	0675  89 46 F0			     mov     word ptr [bp-16],ax
   2724					;
   2725					;	p.wait = 1;
   2726					;
   2727					     ?debug  L 908
   2728	0678  C7 46 F2 0001		     mov     word ptr [bp-14],1
   2729					;
   2730					;	p.ksrc = RC_GOOD;
   2731					;
   2732					     ?debug  L 909
   2733	067D  C7 46 EE 0000		     mov     word ptr [bp-18],0
   2734					;
   2735					;    #ifdef RESOURCE_TIMEOUTS /* { */
   2736					;	p.ticks	= (TICKS)0;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 49
.\rtxcapi.asm



   2737					;
   2738					     ?debug  L 911
   2739	0682  C7 46 F6 0000		     mov     word ptr [bp-10],0
   2740	0687  C7 46 F4 0000		     mov     word ptr [bp-12],0
   2741					;
   2742					;    #endif /* } RESOURCE_TIMEOUTS */
   2743					;	KS(p);
   2744					;
   2745					     ?debug  L 913
   2746	068C  8D 4E EC			     lea      cx,[bp-20]
   2747	068F  CD 40			     int      64
   2748					;
   2749					;	return(p.ksrc);
   2750					;
   2751					     ?debug  L 914
   2752	0691  8B 46 EE			     mov     ax,word ptr [bp-18]
   2753					;
   2754					;    }
   2755					;
   2756					     ?debug  L 915
   2757	0694  C9			     leave
   2758	0695  CB			     ret
   2759					     ?debug  C E601703402ECFF0000087265736F75726365040A+
   2760					     ?debug  C 06000000
   2761					     ?debug  E
   2762					     ?debug  E
   2763	0696			     _KS_lockw	     endp
   2764					;
   2765					;    void KSAPI	KS_purgequeue(QUEUE queue)
   2766					;
   2767					     ?debug  L 920
   2768					     assume  cs:RTXC_TEXT,ds:DGROUP
   2769	0696			     _KS_purgequeue  proc    far
   2770					     ?debug  B
   2771	0696  55			     push    bp
   2772	0697  8B EC			     mov     bp,sp
   2773	0699  83 EC 16			     sub     sp,22
   2774					     ?debug  C E6057175657565040A06000000
   2775					     ?debug  B
   2776					;
   2777					;    {
   2778					;	struct qarg p;
   2779					;
   2780					;	p.ksnum	= RTXC_PURGEQUEUE;
   2781					;
   2782					     ?debug  L 924
   2783	069C  C7 46 EA 0020		     mov     word ptr [bp-22],32
   2784					;
   2785					;	p.queue	= queue;
   2786					;
   2787					     ?debug  L 925
   2788	06A1  8B 46 06			     mov     ax,word ptr [bp+6]
   2789	06A4  89 46 F0			     mov     word ptr [bp-16],ax
   2790					;
   2791					;	KS(p);
   2792					;
   2793					     ?debug  L 926
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 50
.\rtxcapi.asm



   2794	06A7  8D 4E EA			     lea      cx,[bp-22]
   2795	06AA  CD 40			     int      64
   2796					;
   2797					;    }
   2798					;
   2799					     ?debug  L 927
   2800	06AC  C9			     leave
   2801	06AD  CB			     ret
   2802					     ?debug  C E601702E02EAFF0000057175657565040A060000+
   2803					     ?debug  C 00
   2804					     ?debug  E
   2805					     ?debug  E
   2806	06AE			     _KS_purgequeue  endp
   2807					;
   2808					;    RTXCMSG * KSAPI KS_receivew(MBOX mbox, TASK task)
   2809					;
   2810					     ?debug  L 932
   2811					     assume  cs:RTXC_TEXT,ds:DGROUP
   2812	06AE			     _KS_receivew    proc    far
   2813					     ?debug  B
   2814	06AE  55			     push    bp
   2815	06AF  8B EC			     mov     bp,sp
   2816	06B1  83 EC 1A			     sub     sp,26
   2817					     ?debug  C E6047461736B040A08000000046D626F78040A06+
   2818					     ?debug  C 000000
   2819					     ?debug  B
   2820					;
   2821					;    {
   2822					;	struct msgarg p;
   2823					;
   2824					;	p.ksnum	= RTXC_RECEIVE;
   2825					;
   2826					     ?debug  L 936
   2827	06B4  C7 46 E6 0005		     mov     word ptr [bp-26],5
   2828					;
   2829					;	p.mbox = mbox;
   2830					;
   2831					     ?debug  L 937
   2832	06B9  8B 46 06			     mov     ax,word ptr [bp+6]
   2833	06BC  89 46 EC			     mov     word ptr [bp-20],ax
   2834					;
   2835					;	p.task = task;
   2836					;
   2837					     ?debug  L 938
   2838	06BF  8B 46 08			     mov     ax,word ptr [bp+8]
   2839	06C2  89 46 EE			     mov     word ptr [bp-18],ax
   2840					;
   2841					;	p.prtxcmsg = (RTXCMSG *)0; /* preset in	case timeout */
   2842					;
   2843					     ?debug  L 939
   2844	06C5  C7 46 F4 0000		     mov     word ptr [bp-12],0
   2845	06CA  C7 46 F2 0000		     mov     word ptr [bp-14],0
   2846					;
   2847					;	p.wait = 1;
   2848					;
   2849					     ?debug  L 940
   2850	06CF  C7 46 F6 0001		     mov     word ptr [bp-10],1
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 51
.\rtxcapi.asm



   2851					;
   2852					;    #ifdef MAILBOX_TIMEOUTS /*	{ */
   2853					;	p.ticks	= (TICKS)0;
   2854					;
   2855					     ?debug  L 942
   2856	06D4  C7 46 FA 0000		     mov     word ptr [bp-6],0
   2857	06D9  C7 46 F8 0000		     mov     word ptr [bp-8],0
   2858					;
   2859					;    #endif /* } MAILBOX_TIMEOUTS */
   2860					;	KS(p);
   2861					;
   2862					     ?debug  L 944
   2863	06DE  8D 4E E6			     lea      cx,[bp-26]
   2864	06E1  CD 40			     int      64
   2865					;
   2866					;	return(p.prtxcmsg);
   2867					;
   2868					     ?debug  L 945
   2869	06E3  8B 56 F4			     mov     dx,word ptr [bp-12]
   2870	06E6  8B 46 F2			     mov     ax,word ptr [bp-14]
   2871					;
   2872					;    }
   2873					;
   2874					     ?debug  L 946
   2875	06E9  C9			     leave
   2876	06EA  CB			     ret
   2877					     ?debug  C E601703802E6FF0000046D626F78040A06000000+
   2878					     ?debug  C 047461736B040A08000000
   2879					     ?debug  E
   2880					     ?debug  E
   2881	06EB			     _KS_receivew    endp
   2882					;
   2883					;    void KSAPI	KS_sendw(MBOX mbox, RTXCMSG *prtxcmsg, PRIORITY	priority, SEMA sema)
   2884					;
   2885					     ?debug  L 951
   2886					     assume  cs:RTXC_TEXT,ds:DGROUP
   2887	06EB			     _KS_sendw	     proc    far
   2888					     ?debug  B
   2889	06EB  55			     push    bp
   2890	06EC  8B EC			     mov     bp,sp
   2891	06EE  83 EC 1A			     sub     sp,26
   2892					     ?debug  C E60473656D61040A0E000000087072696F726974+
   2893					     ?debug  C 79040A0C0000000870727478636D7367390A0800+
   2894					     ?debug  C 0000046D626F78040A06000000
   2895					     ?debug  B
   2896					;
   2897					;    {
   2898					;	struct msgarg p;
   2899					;
   2900					;	p.ksnum	= RTXC_SEND;
   2901					;
   2902					     ?debug  L 955
   2903	06F1  C7 46 E6 0004		     mov     word ptr [bp-26],4
   2904					;
   2905					;	p.mbox = mbox;
   2906					;
   2907					     ?debug  L 956
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 52
.\rtxcapi.asm



   2908	06F6  8B 46 06			     mov     ax,word ptr [bp+6]
   2909	06F9  89 46 EC			     mov     word ptr [bp-20],ax
   2910					;
   2911					;	p.prtxcmsg = prtxcmsg;
   2912					;
   2913					     ?debug  L 957
   2914	06FC  8B 56 0A			     mov     dx,word ptr [bp+10]
   2915	06FF  8B 46 08			     mov     ax,word ptr [bp+8]
   2916	0702  89 56 F4			     mov     word ptr [bp-12],dx
   2917	0705  89 46 F2			     mov     word ptr [bp-14],ax
   2918					;
   2919					;	p.priority = priority;
   2920					;
   2921					     ?debug  L 958
   2922	0708  8B 46 0C			     mov     ax,word ptr [bp+12]
   2923	070B  89 46 F0			     mov     word ptr [bp-16],ax
   2924					;
   2925					;	p.sema = sema;
   2926					;
   2927					     ?debug  L 959
   2928	070E  8B 46 0E			     mov     ax,word ptr [bp+14]
   2929	0711  89 46 EA			     mov     word ptr [bp-22],ax
   2930					;
   2931					;	p.wait = 1;
   2932					;
   2933					     ?debug  L 960
   2934	0714  C7 46 F6 0001		     mov     word ptr [bp-10],1
   2935					;
   2936					;    #ifdef MAILBOX_TIMEOUTS /*	{ */
   2937					;	p.ticks	= (TICKS)0; /* indicate	NO timeout */
   2938					;
   2939					     ?debug  L 962
   2940	0719  C7 46 FA 0000		     mov     word ptr [bp-6],0
   2941	071E  C7 46 F8 0000		     mov     word ptr [bp-8],0
   2942					;
   2943					;    #endif /* } MAILBOX_TIMEOUTS */
   2944					;	KS(p);
   2945					;
   2946					     ?debug  L 964
   2947	0723  8D 4E E6			     lea      cx,[bp-26]
   2948	0726  CD 40			     int      64
   2949					;
   2950					;    }
   2951					;
   2952					     ?debug  L 965
   2953	0728  C9			     leave
   2954	0729  CB			     ret
   2955					     ?debug  C E601703802E6FF0000046D626F78040A06000000+
   2956					     ?debug  C 0870727478636D7367390A08000000087072696F+
   2957					     ?debug  C 72697479040A0C0000000473656D61040A0E0000+
   2958					     ?debug  C 00
   2959					     ?debug  E
   2960					     ?debug  E
   2961	072A			     _KS_sendw	     endp
   2962					;
   2963					;    SEMA KSAPI	KS_waitm(const SEMA *semalist)
   2964					;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 53
.\rtxcapi.asm



   2965					     ?debug  L 970
   2966					     assume  cs:RTXC_TEXT,ds:DGROUP
   2967	072A			     _KS_waitm	     proc    far
   2968					     ?debug  B
   2969	072A  55			     push    bp
   2970	072B  8B EC			     mov     bp,sp
   2971	072D  83 EC 0A			     sub     sp,10
   2972					     ?debug  C E345000400160400
   2973					     ?debug  C E60873656D616C697374450A06000000
   2974					     ?debug  B
   2975					;
   2976					;    {
   2977					;	struct sargm p;
   2978					;
   2979					;	p.ksnum	= RTXC_WAITM;
   2980					;
   2981					     ?debug  L 974
   2982	0730  C7 46 F6 0022		     mov     word ptr [bp-10],34
   2983					;
   2984					;	p.list = semalist;
   2985					;
   2986					     ?debug  L 975
   2987	0735  8B 56 08			     mov     dx,word ptr [bp+8]
   2988	0738  8B 46 06			     mov     ax,word ptr [bp+6]
   2989	073B  89 56 FE			     mov     word ptr [bp-2],dx
   2990	073E  89 46 FC			     mov     word ptr [bp-4],ax
   2991					;
   2992					;	KS(p);
   2993					;
   2994					     ?debug  L 976
   2995	0741  8D 4E F6			     lea      cx,[bp-10]
   2996	0744  CD 40			     int      64
   2997					;
   2998					;	return(p.sema);
   2999					;
   3000					     ?debug  L 977
   3001	0746  8B 46 FA			     mov     ax,word ptr [bp-6]
   3002					;
   3003					;    }
   3004					;
   3005					     ?debug  L 978
   3006	0749  C9			     leave
   3007	074A  CB			     ret
   3008					     ?debug  C E34605736172676D0A001E80A5
   3009					     ?debug  C E601704602F6FF00000873656D616C697374450A+
   3010					     ?debug  C 06000000
   3011					     ?debug  E
   3012					     ?debug  E
   3013	074B			     _KS_waitm	     endp
   3014					;
   3015					;    time_t KSAPI KS_inqtime(void)
   3016					;
   3017					     ?debug  L 983
   3018					     assume  cs:RTXC_TEXT,ds:DGROUP
   3019	074B			     _KS_inqtime     proc    far
   3020					     ?debug  B
   3021	074B  55			     push    bp
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 54
.\rtxcapi.asm



   3022	074C  8B EC			     mov     bp,sp
   3023	074E  83 EC 06			     sub     sp,6
   3024					     ?debug  B
   3025					;
   3026					;    {
   3027					;	struct timearg p;
   3028					;
   3029					;	p.ksnum	= RTXC_INQTIME;
   3030					;
   3031					     ?debug  L 987
   3032	0751  C7 46 FA 0024		     mov     word ptr [bp-6],36
   3033					;
   3034					;	KS(p);
   3035					;
   3036					     ?debug  L 988
   3037	0756  8D 4E FA			     lea      cx,[bp-6]
   3038	0759  CD 40			     int      64
   3039					;
   3040					;	return(p.time);
   3041					;
   3042					     ?debug  L 989
   3043	075B  8B 56 FE			     mov     dx,word ptr [bp-2]
   3044	075E  8B 46 FC			     mov     ax,word ptr [bp-4]
   3045					;
   3046					;    }
   3047					;
   3048					     ?debug  L 990
   3049	0761  C9			     leave
   3050	0762  CB			     ret
   3051					     ?debug  C E3470774696D6561726706001E80AA
   3052					     ?debug  C E601704702FAFF0000
   3053					     ?debug  E
   3054					     ?debug  E
   3055	0763			     _KS_inqtime     endp
   3056					;
   3057					;    void KSAPI	KS_deftime(time_t time)
   3058					;
   3059					     ?debug  L 995
   3060					     assume  cs:RTXC_TEXT,ds:DGROUP
   3061	0763			     _KS_deftime     proc    far
   3062					     ?debug  B
   3063	0763  55			     push    bp
   3064	0764  8B EC			     mov     bp,sp
   3065	0766  83 EC 06			     sub     sp,6
   3066					     ?debug  C E60474696D65060A06000000
   3067					     ?debug  B
   3068					;
   3069					;    {
   3070					;	struct timearg p;
   3071					;
   3072					;	p.ksnum	= RTXC_DEFTIME;
   3073					;
   3074					     ?debug  L 999
   3075	0769  C7 46 FA 0025		     mov     word ptr [bp-6],37
   3076					;
   3077					;	p.time = time;
   3078					;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 55
.\rtxcapi.asm



   3079					     ?debug  L 1000
   3080	076E  8B 56 08			     mov     dx,word ptr [bp+8]
   3081	0771  8B 46 06			     mov     ax,word ptr [bp+6]
   3082	0774  89 56 FE			     mov     word ptr [bp-2],dx
   3083	0777  89 46 FC			     mov     word ptr [bp-4],ax
   3084					;
   3085					;	KS(p);
   3086					;
   3087					     ?debug  L 1001
   3088	077A  8D 4E FA			     lea      cx,[bp-6]
   3089	077D  CD 40			     int      64
   3090					;
   3091					;    }
   3092					;
   3093					     ?debug  L 1002
   3094	077F  C9			     leave
   3095	0780  CB			     ret
   3096					     ?debug  C E601704702FAFF00000474696D65060A06000000
   3097					     ?debug  E
   3098					     ?debug  E
   3099	0781			     _KS_deftime     endp
   3100					;
   3101					;    TICKS KSAPI KS_inqtimer(CLKBLK ks_clk *pclkblk)
   3102					;
   3103					     ?debug  L 1012
   3104					     assume  cs:RTXC_TEXT,ds:DGROUP
   3105	0781			     _KS_inqtimer    proc    far
   3106					     ?debug  B
   3107	0781  55			     push    bp
   3108	0782  8B EC			     mov     bp,sp
   3109	0784  83 EC 12			     sub     sp,18
   3110					     ?debug  C E60770636C6B626C6B1E0A06000000
   3111					     ?debug  B
   3112					;
   3113					;    {
   3114					;	struct clkarg p;
   3115					;
   3116					;	p.ksnum	= RTXC_INQTIMER;
   3117					;
   3118					     ?debug  L 1016
   3119	0787  C7 46 EE 002A		     mov     word ptr [bp-18],42
   3120					;
   3121					;	p.pclkblk = pclkblk;
   3122					;
   3123					     ?debug  L 1017
   3124	078C  8B 56 08			     mov     dx,word ptr [bp+8]
   3125	078F  8B 46 06			     mov     ax,word ptr [bp+6]
   3126	0792  89 56 FE			     mov     word ptr [bp-2],dx
   3127	0795  89 46 FC			     mov     word ptr [bp-4],ax
   3128					;
   3129					;	KS(p);
   3130					;
   3131					     ?debug  L 1018
   3132	0798  8D 4E EE			     lea      cx,[bp-18]
   3133	079B  CD 40			     int      64
   3134					;
   3135					;	return(p.ticks);
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 56
.\rtxcapi.asm



   3136					;
   3137					     ?debug  L 1019
   3138	079D  8B 56 F6			     mov     dx,word ptr [bp-10]
   3139	07A0  8B 46 F4			     mov     ax,word ptr [bp-12]
   3140					;
   3141					;    }
   3142					;
   3143					     ?debug  L 1020
   3144	07A3  C9			     leave
   3145	07A4  CB			     ret
   3146					     ?debug  C E601702302EEFF00000770636C6B626C6B1E0A06+
   3147					     ?debug  C 000000
   3148					     ?debug  E
   3149					     ?debug  E
   3150	07A5			     _KS_inqtimer    endp
   3151					;
   3152					;    void * KSAPI KS_alloct(MAP	map, TICKS ticks, KSRC *pksrc)
   3153					;
   3154					     ?debug  L 1025
   3155					     assume  cs:RTXC_TEXT,ds:DGROUP
   3156	07A5			     _KS_alloct	     proc    far
   3157					     ?debug  B
   3158	07A5  55			     push    bp
   3159	07A6  8B EC			     mov     bp,sp
   3160	07A8  83 EC 34			     sub     sp,52
   3161					     ?debug  C E348000400161A00
   3162					     ?debug  C E605706B737263480A0C000000057469636B7306+
   3163					     ?debug  C 0A08000000036D6170040A06000000
   3164					     ?debug  B
   3165					;
   3166					;    {
   3167					;	struct parg p;
   3168					;	CLKBLK clkblk;
   3169					;    #ifdef FASTALLOC /* { */
   3170					;	PHEADER	near *pph;
   3171					;	FLAG_STORAGE;
   3172					;
   3173					;	pph = &pheader[map];
   3174					;
   3175					;	     SAVE_FLAGS;
   3176					;	DISABLE;
   3177					;
   3178					;	if ( (p.val = (char *)pph->next) != NULL ) /* if any available */
   3179					;	{
   3180					;	   pph->next = ((struct	xmap *)p.val)->link; /*	unlink 1st from	list */
   3181					;    #ifdef CBUG /* { */
   3182					;	   if (++pph->cur > pph->worst)	/* check for new worst case */
   3183					;	      pph->worst = pph->cur;	      /* useage	level */
   3184					;    #endif /* } CBUG */
   3185					;	   RESTORE_FLAGS;
   3186					;	   *pksrc = RC_GOOD;
   3187					;	   return(p.val);
   3188					;	}
   3189					;	RESTORE_FLAGS;
   3190					;    #endif /* } FASTALLOC */
   3191					;
   3192					;	p.ksnum	= RTXC_ALLOC;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 57
.\rtxcapi.asm



   3193					;
   3194					     ?debug  L 1052
   3195	07AB  C7 46 E4 0006		     mov     word ptr [bp-28],6
   3196					;
   3197					;	p.map =	map;
   3198					;
   3199					     ?debug  L 1053
   3200	07B0  8B 46 06			     mov     ax,word ptr [bp+6]
   3201	07B3  89 46 E8			     mov     word ptr [bp-24],ax
   3202					;
   3203					;	p.wait = 1;
   3204					;
   3205					     ?debug  L 1054
   3206	07B6  C7 46 F0 0001		     mov     word ptr [bp-16],1
   3207					;
   3208					;	p.ticks	= ticks;
   3209					;
   3210					     ?debug  L 1055
   3211	07BB  8B 56 0A			     mov     dx,word ptr [bp+10]
   3212	07BE  8B 46 08			     mov     ax,word ptr [bp+8]
   3213	07C1  89 56 F4			     mov     word ptr [bp-12],dx
   3214	07C4  89 46 F2			     mov     word ptr [bp-14],ax
   3215					;
   3216					;	p.ksrc = RC_GOOD;
   3217					;
   3218					     ?debug  L 1056
   3219	07C7  C7 46 E6 0000		     mov     word ptr [bp-26],0
   3220					;
   3221					;	p.pclkblk = (CLKBLK ks_clk *)&clkblk;
   3222					;
   3223					     ?debug  L 1057
   3224	07CC  8D 46 CC			     lea     ax,word ptr [bp-52]
   3225	07CF  8C 56 F8			     mov     word ptr [bp-8],ss
   3226	07D2  89 46 F6			     mov     word ptr [bp-10],ax
   3227					;
   3228					;	KS(p);
   3229					;
   3230					     ?debug  L 1058
   3231	07D5  8D 4E E4			     lea      cx,[bp-28]
   3232	07D8  CD 40			     int      64
   3233					;
   3234					;	*pksrc = p.ksrc;
   3235					;
   3236					     ?debug  L 1059
   3237	07DA  C4 5E 0C			     les     bx,dword ptr [bp+12]
   3238	07DD  8B 46 E6			     mov     ax,word ptr [bp-26]
   3239	07E0  26: 89 07			     mov     word ptr es:[bx],ax
   3240					;
   3241					;	return(p.val);
   3242					;
   3243					     ?debug  L 1060
   3244	07E3  8B 56 EC			     mov     dx,word ptr [bp-20]
   3245	07E6  8B 46 EA			     mov     ax,word ptr [bp-22]
   3246					;
   3247					;    }
   3248					;
   3249					     ?debug  L 1061
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 58
.\rtxcapi.asm



   3250	07E9  C9			     leave
   3251	07EA  CB			     ret
   3252					     ?debug  C E606636C6B626C6B1F02CCFF000001701C02E4FF+
   3253					     ?debug  C 0000036D6170040A06000000057469636B73060A+
   3254					     ?debug  C 0800000005706B737263480A0C000000
   3255					     ?debug  E
   3256					     ?debug  E
   3257	07EB			     _KS_alloct	     endp
   3258					;
   3259					;    KSRC KSAPI	KS_defqueue(QUEUE queue, size_t	width, int depth,
   3260					;
   3261					     ?debug  L 1066
   3262					     assume  cs:RTXC_TEXT,ds:DGROUP
   3263	07EB			     _KS_defqueue    proc    far
   3264					     ?debug  B
   3265	07EB  55			     push    bp
   3266	07EC  8B EC			     mov     bp,sp
   3267	07EE  83 EC 14			     sub     sp,20
   3268					     ?debug  C E60C63757272656E745F73697A65040A10000000+
   3269					     ?debug  C 0462617365220A0C000000056465707468040A0A+
   3270					     ?debug  C 0000000577696474680A0A080000000571756575+
   3271					     ?debug  C 65040A06000000
   3272					     ?debug  B
   3273					;
   3274					;			   char	*base, int current_size)
   3275					;    {
   3276					;	struct qdefarg p;
   3277					;
   3278					;	p.ksnum	= RTXC_DEFQUEUE;
   3279					;
   3280					     ?debug  L 1071
   3281	07F1  C7 46 EC 002E		     mov     word ptr [bp-20],46
   3282					;
   3283					;	p.queue	= queue;
   3284					;
   3285					     ?debug  L 1072
   3286	07F6  8B 46 06			     mov     ax,word ptr [bp+6]
   3287	07F9  89 46 F0			     mov     word ptr [bp-16],ax
   3288					;
   3289					;	p.width	= width;
   3290					;
   3291					     ?debug  L 1073
   3292	07FC  8B 46 08			     mov     ax,word ptr [bp+8]
   3293	07FF  89 46 F6			     mov     word ptr [bp-10],ax
   3294					;
   3295					;	p.depth	= depth;
   3296					;
   3297					     ?debug  L 1074
   3298	0802  8B 46 0A			     mov     ax,word ptr [bp+10]
   3299	0805  89 46 F8			     mov     word ptr [bp-8],ax
   3300					;
   3301					;	p.base = base;
   3302					;
   3303					     ?debug  L 1075
   3304	0808  8B 56 0E			     mov     dx,word ptr [bp+14]
   3305	080B  8B 46 0C			     mov     ax,word ptr [bp+12]
   3306	080E  89 56 F4			     mov     word ptr [bp-12],dx
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 59
.\rtxcapi.asm



   3307	0811  89 46 F2			     mov     word ptr [bp-14],ax
   3308					;
   3309					;	p.current_size = current_size;
   3310					;
   3311					     ?debug  L 1076
   3312	0814  8B 46 10			     mov     ax,word ptr [bp+16]
   3313	0817  89 46 FA			     mov     word ptr [bp-6],ax
   3314					;
   3315					;	p.ksrc = RC_GOOD;
   3316					;
   3317					     ?debug  L 1077
   3318	081A  C7 46 EE 0000		     mov     word ptr [bp-18],0
   3319					;
   3320					;	KS(p);
   3321					;
   3322					     ?debug  L 1078
   3323	081F  8D 4E EC			     lea      cx,[bp-20]
   3324	0822  CD 40			     int      64
   3325					;
   3326					;	return(p.ksrc);
   3327					;
   3328					     ?debug  L 1079
   3329	0824  8B 46 EE			     mov     ax,word ptr [bp-18]
   3330					;
   3331					;    }
   3332					;
   3333					     ?debug  L 1080
   3334	0827  C9			     leave
   3335	0828  CB			     ret
   3336					     ?debug  C E601704202ECFF0000057175657565040A060000+
   3337					     ?debug  C 000577696474680A0A0800000005646570746804+
   3338					     ?debug  C 0A0A0000000462617365220A0C0000000C637572+
   3339					     ?debug  C 72656E745F73697A65040A10000000
   3340					     ?debug  E
   3341					     ?debug  E
   3342	0829			     _KS_defqueue    endp
   3343					;
   3344					;    KSRC KSAPI	KS_dequeuet(QUEUE queue, void *data, TICKS ticks)
   3345					;
   3346					     ?debug  L 1085
   3347					     assume  cs:RTXC_TEXT,ds:DGROUP
   3348	0829			     _KS_dequeuet    proc    far
   3349					     ?debug  B
   3350	0829  55			     push    bp
   3351	082A  8B EC			     mov     bp,sp
   3352	082C  83 EC 2E			     sub     sp,46
   3353					     ?debug  C E6057469636B73060A0C00000004646174611D0A+
   3354					     ?debug  C 08000000057175657565040A06000000
   3355					     ?debug  B
   3356					;
   3357					;    {
   3358					;	struct qarg p;
   3359					;	CLKBLK clkblk;
   3360					;
   3361					;	p.ksnum	= RTXC_DEQUEUE;
   3362					;
   3363					     ?debug  L 1090
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 60
.\rtxcapi.asm



   3364	082F  C7 46 EA 000D		     mov     word ptr [bp-22],13
   3365					;
   3366					;	p.queue	= queue;
   3367					;
   3368					     ?debug  L 1091
   3369	0834  8B 46 06			     mov     ax,word ptr [bp+6]
   3370	0837  89 46 F0			     mov     word ptr [bp-16],ax
   3371					;
   3372					;	p.data = data;
   3373					;
   3374					     ?debug  L 1092
   3375	083A  8B 56 0A			     mov     dx,word ptr [bp+10]
   3376	083D  8B 46 08			     mov     ax,word ptr [bp+8]
   3377	0840  89 56 F4			     mov     word ptr [bp-12],dx
   3378	0843  89 46 F2			     mov     word ptr [bp-14],ax
   3379					;
   3380					;	p.ticks	= ticks;
   3381					;
   3382					     ?debug  L 1093
   3383	0846  8B 56 0E			     mov     dx,word ptr [bp+14]
   3384	0849  8B 46 0C			     mov     ax,word ptr [bp+12]
   3385	084C  89 56 FA			     mov     word ptr [bp-6],dx
   3386	084F  89 46 F8			     mov     word ptr [bp-8],ax
   3387					;
   3388					;	p.wait = 1;
   3389					;
   3390					     ?debug  L 1094
   3391	0852  C7 46 F6 0001		     mov     word ptr [bp-10],1
   3392					;
   3393					;	p.ksrc = RC_TIMEOUT;
   3394					;
   3395					     ?debug  L 1095
   3396	0857  C7 46 EC 0005		     mov     word ptr [bp-20],5
   3397					;
   3398					;	p.pclkblk = (CLKBLK ks_clk *)&clkblk;
   3399					;
   3400					     ?debug  L 1096
   3401	085C  8D 46 D2			     lea     ax,word ptr [bp-46]
   3402	085F  8C 56 FE			     mov     word ptr [bp-2],ss
   3403	0862  89 46 FC			     mov     word ptr [bp-4],ax
   3404					;
   3405					;	KS(p);
   3406					;
   3407					     ?debug  L 1097
   3408	0865  8D 4E EA			     lea      cx,[bp-22]
   3409	0868  CD 40			     int      64
   3410					;
   3411					;	return(p.ksrc);
   3412					;
   3413					     ?debug  L 1098
   3414	086A  8B 46 EC			     mov     ax,word ptr [bp-20]
   3415					;
   3416					;    }
   3417					;
   3418					     ?debug  L 1099
   3419	086D  C9			     leave
   3420	086E  CB			     ret
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 61
.\rtxcapi.asm



   3421					     ?debug  C E606636C6B626C6B1F02D2FF000001702E02EAFF+
   3422					     ?debug  C 0000057175657565040A0600000004646174611D+
   3423					     ?debug  C 0A08000000057469636B73060A0C000000
   3424					     ?debug  E
   3425					     ?debug  E
   3426	086F			     _KS_dequeuet    endp
   3427					;
   3428					;    KSRC KSAPI	KS_enqueuet(QUEUE queue, void *data, TICKS ticks)
   3429					;
   3430					     ?debug  L 1104
   3431					     assume  cs:RTXC_TEXT,ds:DGROUP
   3432	086F			     _KS_enqueuet    proc    far
   3433					     ?debug  B
   3434	086F  55			     push    bp
   3435	0870  8B EC			     mov     bp,sp
   3436	0872  83 EC 2E			     sub     sp,46
   3437					     ?debug  C E6057469636B73060A0C00000004646174611D0A+
   3438					     ?debug  C 08000000057175657565040A06000000
   3439					     ?debug  B
   3440					;
   3441					;    {
   3442					;	struct qarg p;
   3443					;	CLKBLK clkblk;
   3444					;
   3445					;	p.ksnum	= RTXC_ENQUEUE;
   3446					;
   3447					     ?debug  L 1109
   3448	0875  C7 46 EA 000C		     mov     word ptr [bp-22],12
   3449					;
   3450					;	p.queue	= queue;
   3451					;
   3452					     ?debug  L 1110
   3453	087A  8B 46 06			     mov     ax,word ptr [bp+6]
   3454	087D  89 46 F0			     mov     word ptr [bp-16],ax
   3455					;
   3456					;	p.data = data;
   3457					;
   3458					     ?debug  L 1111
   3459	0880  8B 56 0A			     mov     dx,word ptr [bp+10]
   3460	0883  8B 46 08			     mov     ax,word ptr [bp+8]
   3461	0886  89 56 F4			     mov     word ptr [bp-12],dx
   3462	0889  89 46 F2			     mov     word ptr [bp-14],ax
   3463					;
   3464					;	p.ticks	= ticks;
   3465					;
   3466					     ?debug  L 1112
   3467	088C  8B 56 0E			     mov     dx,word ptr [bp+14]
   3468	088F  8B 46 0C			     mov     ax,word ptr [bp+12]
   3469	0892  89 56 FA			     mov     word ptr [bp-6],dx
   3470	0895  89 46 F8			     mov     word ptr [bp-8],ax
   3471					;
   3472					;	p.wait = 1;
   3473					;
   3474					     ?debug  L 1113
   3475	0898  C7 46 F6 0001		     mov     word ptr [bp-10],1
   3476					;
   3477					;	p.ksrc = RC_TIMEOUT;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 62
.\rtxcapi.asm



   3478					;
   3479					     ?debug  L 1114
   3480	089D  C7 46 EC 0005		     mov     word ptr [bp-20],5
   3481					;
   3482					;	p.pclkblk = (CLKBLK ks_clk *)&clkblk;
   3483					;
   3484					     ?debug  L 1115
   3485	08A2  8D 46 D2			     lea     ax,word ptr [bp-46]
   3486	08A5  8C 56 FE			     mov     word ptr [bp-2],ss
   3487	08A8  89 46 FC			     mov     word ptr [bp-4],ax
   3488					;
   3489					;	KS(p);
   3490					;
   3491					     ?debug  L 1116
   3492	08AB  8D 4E EA			     lea      cx,[bp-22]
   3493	08AE  CD 40			     int      64
   3494					;
   3495					;	return(p.ksrc);
   3496					;
   3497					     ?debug  L 1117
   3498	08B0  8B 46 EC			     mov     ax,word ptr [bp-20]
   3499					;
   3500					;    }
   3501					;
   3502					     ?debug  L 1118
   3503	08B3  C9			     leave
   3504	08B4  CB			     ret
   3505					     ?debug  C E606636C6B626C6B1F02D2FF000001702E02EAFF+
   3506					     ?debug  C 0000057175657565040A0600000004646174611D+
   3507					     ?debug  C 0A08000000057469636B73060A0C000000
   3508					     ?debug  E
   3509					     ?debug  E
   3510	08B5			     _KS_enqueuet    endp
   3511					;
   3512					;    PRIORITY KSAPI KS_inqpriority(TASK	task)
   3513					;
   3514					     ?debug  L 1123
   3515					     assume  cs:RTXC_TEXT,ds:DGROUP
   3516	08B5			     _KS_inqpriority proc    far
   3517					     ?debug  B
   3518	08B5  55			     push    bp
   3519	08B6  8B EC			     mov     bp,sp
   3520					     ?debug  C E6047461736B040A06000000
   3521					     ?debug  B
   3522					;
   3523					;    {
   3524					;	if (task == SELFTASK)
   3525					;
   3526					     ?debug  L 1125
   3527	08B8  83 7E 06 00		     cmp     word ptr [bp+6],0
   3528	08BC  75 09			     jne     short @59@86
   3529					;
   3530					;	   return(hipritsk->priority);
   3531					;
   3532					     ?debug  L 1126
   3533	08BE  8B 1E 0000e		     mov     bx,word ptr DGROUP:_hipritsk
   3534	08C2  8B 47 0A			     mov     ax,word ptr [bx+10]
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 63
.\rtxcapi.asm



   3535	08C5  5D			     pop     bp
   3536	08C6  CB			     ret
   3537	08C7			     @59@86:
   3538					;
   3539					;	else
   3540					;	   return(rtxtcb[task].priority);
   3541					;
   3542					     ?debug  L 1128
   3543	08C7  8B 5E 06			     mov     bx,word ptr [bp+6]
   3544	08CA  6B DB 28			     imul    bx,bx,40
   3545	08CD  8B 87 000Ae		     mov     ax,word ptr DGROUP:_rtxtcb[bx+10]
   3546					;
   3547					;    }
   3548					;
   3549					     ?debug  L 1129
   3550	08D1  5D			     pop     bp
   3551	08D2  CB			     ret
   3552					     ?debug  C E6047461736B040A06000000
   3553					     ?debug  E
   3554					     ?debug  E
   3555	08D3			     _KS_inqpriority endp
   3556					;
   3557					;    int KSAPI KS_inqqueue(QUEUE queue)
   3558					;
   3559					     ?debug  L 1134
   3560					     assume  cs:RTXC_TEXT,ds:DGROUP
   3561	08D3			     _KS_inqqueue    proc    far
   3562					     ?debug  B
   3563	08D3  55			     push    bp
   3564	08D4  8B EC			     mov     bp,sp
   3565					     ?debug  C E6057175657565040A06000000
   3566					     ?debug  B
   3567					;
   3568					;    {
   3569					;	return(qheader[queue].curndx);
   3570					;
   3571					     ?debug  L 1136
   3572	08D6  8B 5E 06			     mov     bx,word ptr [bp+6]
   3573	08D9  6B DB 18			     imul    bx,bx,24
   3574	08DC  8B 87 000Ae		     mov     ax,word ptr DGROUP:_qheader[bx+10]
   3575					;
   3576					;    }
   3577					;
   3578					     ?debug  L 1137
   3579	08E0  5D			     pop     bp
   3580	08E1  CB			     ret
   3581					     ?debug  C E6057175657565040A06000000
   3582					     ?debug  E
   3583					     ?debug  E
   3584	08E2			     _KS_inqqueue    endp
   3585					;
   3586					;    SSTATE KSAPI KS_inqsema(SEMA sema)
   3587					;
   3588					     ?debug  L 1142
   3589					     assume  cs:RTXC_TEXT,ds:DGROUP
   3590	08E2			     _KS_inqsema     proc    far
   3591					     ?debug  B
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 64
.\rtxcapi.asm



   3592	08E2  55			     push    bp
   3593	08E3  8B EC			     mov     bp,sp
   3594					     ?debug  C E60473656D61040A06000000
   3595					     ?debug  B
   3596					;
   3597					;    {
   3598					;	return(semat[sema]);
   3599					;
   3600					     ?debug  L 1144
   3601	08E5  8B 5E 06			     mov     bx,word ptr [bp+6]
   3602	08E8  03 DB			     add     bx,bx
   3603	08EA  8B 87 0000e		     mov     ax,word ptr DGROUP:_semat[bx]
   3604					;
   3605					;    }
   3606					;
   3607					     ?debug  L 1145
   3608	08EE  5D			     pop     bp
   3609	08EF  CB			     ret
   3610					     ?debug  C E60473656D61040A06000000
   3611					     ?debug  E
   3612					     ?debug  E
   3613	08F0			     _KS_inqsema     endp
   3614					;
   3615					;    TASK KSAPI	KS_inqtask(void)
   3616					;
   3617					     ?debug  L 1150
   3618					     assume  cs:RTXC_TEXT,ds:DGROUP
   3619	08F0			     _KS_inqtask     proc    far
   3620					     ?debug  B
   3621					     ?debug  B
   3622					;
   3623					;    {
   3624					;	return(hipritsk->task);
   3625					;
   3626					     ?debug  L 1152
   3627	08F0  8B 1E 0000e		     mov     bx,word ptr DGROUP:_hipritsk
   3628	08F4  8B 47 08			     mov     ax,word ptr [bx+8]
   3629					;
   3630					;    }
   3631					;
   3632					     ?debug  L 1153
   3633	08F7  CB			     ret
   3634					     ?debug  E
   3635					     ?debug  E
   3636	08F8			     _KS_inqtask     endp
   3637					;
   3638					;    KSRC KSAPI	KS_lockt(RESOURCE resource, TICKS ticks)
   3639					;
   3640					     ?debug  L 1158
   3641					     assume  cs:RTXC_TEXT,ds:DGROUP
   3642	08F8			     _KS_lockt	     proc    far
   3643					     ?debug  B
   3644	08F8  55			     push    bp
   3645	08F9  8B EC			     mov     bp,sp
   3646	08FB  83 EC 2C			     sub     sp,44
   3647					     ?debug  C E6057469636B73060A08000000087265736F7572+
   3648					     ?debug  C 6365040A06000000
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 65
.\rtxcapi.asm



   3649					     ?debug  B
   3650					;
   3651					;    {
   3652					;	struct larg p;
   3653					;	CLKBLK clkblk;
   3654					;    #ifdef FASTLOCK /*	{ */
   3655					;	RHEADER	near *prh;
   3656					;	FLAG_STORAGE;
   3657					;
   3658					;	prh = &rheader[resource];
   3659					;
   3660					;	     SAVE_FLAGS;
   3661					;	DISABLE;
   3662					;
   3663					;	if (prh->owner == NULLTCB)  /* if resource not currently owned */
   3664					;	{
   3665					;    #ifdef CBUG /* { */
   3666					;	   prh->count++;	   /* update statistics	*/
   3667					;    #endif /* } CBUG */
   3668					;	   prh->owner =	hipritsk; /* lock resource with	task # */
   3669					;	   prh->level =	1;	   /* set nesting level	= 1 */
   3670					;	   RESTORE_FLAGS;		  /* fast return */
   3671					;	   return(RC_GOOD);	   /* mark successful */
   3672					;	}
   3673					;
   3674					;	if (prh->owner == hipritsk) /* if already owned	by caller */
   3675					;	{
   3676					;    #ifdef CBUG /* { */
   3677					;	   prh->count++;	   /* update statistics	*/
   3678					;    #endif /* } CBUG */
   3679					;	   prh->level++;	   /* bump nesting level */
   3680					;	   RESTORE_FLAGS;		  /* fast return */
   3681					;	   return(RC_NESTED);	   /* mark successful */
   3682					;	}
   3683					;	RESTORE_FLAGS;
   3684					;    #endif /* } FASTLOCK */
   3685					;
   3686					;	p.ksnum	= RTXC_LOCK;
   3687					;
   3688					     ?debug  L 1194
   3689	08FE  C7 46 EC 000E		     mov     word ptr [bp-20],14
   3690					;
   3691					;	p.resource = resource;
   3692					;
   3693					     ?debug  L 1195
   3694	0903  8B 46 06			     mov     ax,word ptr [bp+6]
   3695	0906  89 46 F0			     mov     word ptr [bp-16],ax
   3696					;
   3697					;	p.wait = 1;
   3698					;
   3699					     ?debug  L 1196
   3700	0909  C7 46 F2 0001		     mov     word ptr [bp-14],1
   3701					;
   3702					;	p.ticks	= ticks;
   3703					;
   3704					     ?debug  L 1197
   3705	090E  8B 56 0A			     mov     dx,word ptr [bp+10]
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 66
.\rtxcapi.asm



   3706	0911  8B 46 08			     mov     ax,word ptr [bp+8]
   3707	0914  89 56 F6			     mov     word ptr [bp-10],dx
   3708	0917  89 46 F4			     mov     word ptr [bp-12],ax
   3709					;
   3710					;	p.ksrc = RC_GOOD;
   3711					;
   3712					     ?debug  L 1198
   3713	091A  C7 46 EE 0000		     mov     word ptr [bp-18],0
   3714					;
   3715					;	p.pclkblk = (CLKBLK ks_clk *)&clkblk;
   3716					;
   3717					     ?debug  L 1199
   3718	091F  8D 46 D4			     lea     ax,word ptr [bp-44]
   3719	0922  8C 56 FA			     mov     word ptr [bp-6],ss
   3720	0925  89 46 F8			     mov     word ptr [bp-8],ax
   3721					;
   3722					;	KS(p);
   3723					;
   3724					     ?debug  L 1200
   3725	0928  8D 4E EC			     lea      cx,[bp-20]
   3726	092B  CD 40			     int      64
   3727					;
   3728					;	return(p.ksrc);
   3729					;
   3730					     ?debug  L 1201
   3731	092D  8B 46 EE			     mov     ax,word ptr [bp-18]
   3732					;
   3733					;    }
   3734					;
   3735					     ?debug  L 1202
   3736	0930  C9			     leave
   3737	0931  CB			     ret
   3738					     ?debug  C E606636C6B626C6B1F02D4FF000001703402ECFF+
   3739					     ?debug  C 0000087265736F75726365040A06000000057469+
   3740					     ?debug  C 636B73060A08000000
   3741					     ?debug  E
   3742					     ?debug  E
   3743	0932			     _KS_lockt	     endp
   3744					;
   3745					;    void KSAPI	KS_pendm(const SEMA *semalist)
   3746					;
   3747					     ?debug  L 1207
   3748					     assume  cs:RTXC_TEXT,ds:DGROUP
   3749	0932			     _KS_pendm	     proc    far
   3750					     ?debug  B
   3751	0932  55			     push    bp
   3752	0933  8B EC			     mov     bp,sp
   3753	0935  83 EC 0A			     sub     sp,10
   3754					     ?debug  C E60873656D616C697374450A06000000
   3755					     ?debug  B
   3756					;
   3757					;    {
   3758					;	struct sargm p;
   3759					;
   3760					;	p.ksnum	= RTXC_PENDM;
   3761					;
   3762					     ?debug  L 1211
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 67
.\rtxcapi.asm



   3763	0938  C7 46 F6 002C		     mov     word ptr [bp-10],44
   3764					;
   3765					;	p.list = semalist;
   3766					;
   3767					     ?debug  L 1212
   3768	093D  8B 56 08			     mov     dx,word ptr [bp+8]
   3769	0940  8B 46 06			     mov     ax,word ptr [bp+6]
   3770	0943  89 56 FE			     mov     word ptr [bp-2],dx
   3771	0946  89 46 FC			     mov     word ptr [bp-4],ax
   3772					;
   3773					;	KS(p);
   3774					;
   3775					     ?debug  L 1213
   3776	0949  8D 4E F6			     lea      cx,[bp-10]
   3777	094C  CD 40			     int      64
   3778					;
   3779					;    }
   3780					;
   3781					     ?debug  L 1214
   3782	094E  C9			     leave
   3783	094F  CB			     ret
   3784					     ?debug  C E601704602F6FF00000873656D616C697374450A+
   3785					     ?debug  C 06000000
   3786					     ?debug  E
   3787					     ?debug  E
   3788	0950			     _KS_pendm	     endp
   3789					;
   3790					;    RTXCMSG * KSAPI KS_receivet(MBOX mbox, TASK task, TICKS ticks, KSRC *pksrc)
   3791					;
   3792					     ?debug  L 1219
   3793					     assume  cs:RTXC_TEXT,ds:DGROUP
   3794	0950			     _KS_receivet    proc    far
   3795					     ?debug  B
   3796	0950  55			     push    bp
   3797	0951  8B EC			     mov     bp,sp
   3798	0953  83 EC 32			     sub     sp,50
   3799					     ?debug  C E605706B737263480A0E000000057469636B7306+
   3800					     ?debug  C 0A0A000000047461736B040A08000000046D626F+
   3801					     ?debug  C 78040A06000000
   3802					     ?debug  B
   3803					;
   3804					;    {
   3805					;	struct msgarg p;
   3806					;	CLKBLK clkblk;
   3807					;
   3808					;	p.ksnum	= RTXC_RECEIVE;
   3809					;
   3810					     ?debug  L 1224
   3811	0956  C7 46 E6 0005		     mov     word ptr [bp-26],5
   3812					;
   3813					;	p.mbox = mbox;
   3814					;
   3815					     ?debug  L 1225
   3816	095B  8B 46 06			     mov     ax,word ptr [bp+6]
   3817	095E  89 46 EC			     mov     word ptr [bp-20],ax
   3818					;
   3819					;	p.task = task;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 68
.\rtxcapi.asm



   3820					;
   3821					     ?debug  L 1226
   3822	0961  8B 46 08			     mov     ax,word ptr [bp+8]
   3823	0964  89 46 EE			     mov     word ptr [bp-18],ax
   3824					;
   3825					;	p.prtxcmsg = (RTXCMSG *)0; /* preset in	case timeout */
   3826					;
   3827					     ?debug  L 1227
   3828	0967  C7 46 F4 0000		     mov     word ptr [bp-12],0
   3829	096C  C7 46 F2 0000		     mov     word ptr [bp-14],0
   3830					;
   3831					;	p.wait = 1;
   3832					;
   3833					     ?debug  L 1228
   3834	0971  C7 46 F6 0001		     mov     word ptr [bp-10],1
   3835					;
   3836					;	p.ticks	= ticks;
   3837					;
   3838					     ?debug  L 1229
   3839	0976  8B 56 0C			     mov     dx,word ptr [bp+12]
   3840	0979  8B 46 0A			     mov     ax,word ptr [bp+10]
   3841	097C  89 56 FA			     mov     word ptr [bp-6],dx
   3842	097F  89 46 F8			     mov     word ptr [bp-8],ax
   3843					;
   3844					;	p.ksrc = RC_GOOD;
   3845					;
   3846					     ?debug  L 1230
   3847	0982  C7 46 E8 0000		     mov     word ptr [bp-24],0
   3848					;
   3849					;	p.pclkblk = (CLKBLK ks_clk *)&clkblk;
   3850					;
   3851					     ?debug  L 1231
   3852	0987  8D 46 CE			     lea     ax,word ptr [bp-50]
   3853	098A  8C 56 FE			     mov     word ptr [bp-2],ss
   3854	098D  89 46 FC			     mov     word ptr [bp-4],ax
   3855					;
   3856					;	KS(p);
   3857					;
   3858					     ?debug  L 1232
   3859	0990  8D 4E E6			     lea      cx,[bp-26]
   3860	0993  CD 40			     int      64
   3861					;
   3862					;	*pksrc = p.ksrc;
   3863					;
   3864					     ?debug  L 1233
   3865	0995  C4 5E 0E			     les     bx,dword ptr [bp+14]
   3866	0998  8B 46 E8			     mov     ax,word ptr [bp-24]
   3867	099B  26: 89 07			     mov     word ptr es:[bx],ax
   3868					;
   3869					;	return(p.prtxcmsg);
   3870					;
   3871					     ?debug  L 1234
   3872	099E  8B 56 F4			     mov     dx,word ptr [bp-12]
   3873	09A1  8B 46 F2			     mov     ax,word ptr [bp-14]
   3874					;
   3875					;    }
   3876					;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 69
.\rtxcapi.asm



   3877					     ?debug  L 1235
   3878	09A4  C9			     leave
   3879	09A5  CB			     ret
   3880					     ?debug  C E606636C6B626C6B1F02CEFF000001703802E6FF+
   3881					     ?debug  C 0000046D626F78040A06000000047461736B040A+
   3882					     ?debug  C 08000000057469636B73060A0A00000005706B73+
   3883					     ?debug  C 7263480A0E000000
   3884					     ?debug  E
   3885					     ?debug  E
   3886	09A6			     _KS_receivet    endp
   3887					;
   3888					;    KSRC KSAPI	KS_restart_timer(CLKBLK	ks_clk *pclkblk, TICKS ticks, TICKS period)
   3889					;
   3890					     ?debug  L 1240
   3891					     assume  cs:RTXC_TEXT,ds:DGROUP
   3892	09A6			     _KS_restart_timer	     proc    far
   3893					     ?debug  B
   3894	09A6  55			     push    bp
   3895	09A7  8B EC			     mov     bp,sp
   3896	09A9  83 EC 12			     sub     sp,18
   3897					     ?debug  C E606706572696F64060A0E000000057469636B73+
   3898					     ?debug  C 060A0A0000000770636C6B626C6B1E0A06000000
   3899					     ?debug  B
   3900					;
   3901					;    {
   3902					;	struct clkarg p;
   3903					;
   3904					;	p.ksnum	= RTXC_RESTART_TIMER;
   3905					;
   3906					     ?debug  L 1244
   3907	09AC  C7 46 EE 002D		     mov     word ptr [bp-18],45
   3908					;
   3909					;	p.pclkblk = pclkblk;
   3910					;
   3911					     ?debug  L 1245
   3912	09B1  8B 56 08			     mov     dx,word ptr [bp+8]
   3913	09B4  8B 46 06			     mov     ax,word ptr [bp+6]
   3914	09B7  89 56 FE			     mov     word ptr [bp-2],dx
   3915	09BA  89 46 FC			     mov     word ptr [bp-4],ax
   3916					;
   3917					;	p.ticks	= ticks;
   3918					;
   3919					     ?debug  L 1246
   3920	09BD  8B 56 0C			     mov     dx,word ptr [bp+12]
   3921	09C0  8B 46 0A			     mov     ax,word ptr [bp+10]
   3922	09C3  89 56 F6			     mov     word ptr [bp-10],dx
   3923	09C6  89 46 F4			     mov     word ptr [bp-12],ax
   3924					;
   3925					;	p.period = period;
   3926					;
   3927					     ?debug  L 1247
   3928	09C9  8B 56 10			     mov     dx,word ptr [bp+16]
   3929	09CC  8B 46 0E			     mov     ax,word ptr [bp+14]
   3930	09CF  89 56 FA			     mov     word ptr [bp-6],dx
   3931	09D2  89 46 F8			     mov     word ptr [bp-8],ax
   3932					;
   3933					;	p.ksrc = RC_GOOD;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 70
.\rtxcapi.asm



   3934					;
   3935					     ?debug  L 1248
   3936	09D5  C7 46 F0 0000		     mov     word ptr [bp-16],0
   3937					;
   3938					;	KS(p);
   3939					;
   3940					     ?debug  L 1249
   3941	09DA  8D 4E EE			     lea      cx,[bp-18]
   3942	09DD  CD 40			     int      64
   3943					;
   3944					;	return(p.ksrc);
   3945					;
   3946					     ?debug  L 1250
   3947	09DF  8B 46 F0			     mov     ax,word ptr [bp-16]
   3948					;
   3949					;    }
   3950					;
   3951					     ?debug  L 1251
   3952	09E2  C9			     leave
   3953	09E3  CB			     ret
   3954					     ?debug  C E601702302EEFF00000770636C6B626C6B1E0A06+
   3955					     ?debug  C 000000057469636B73060A0A0000000670657269+
   3956					     ?debug  C 6F64060A0E000000
   3957					     ?debug  E
   3958					     ?debug  E
   3959	09E4			     _KS_restart_timer	     endp
   3960					;
   3961					;    KSRC KSAPI	KS_sendt(MBOX mbox, RTXCMSG *prtxcmsg, PRIORITY	priority, SEMA sema,
   3962					;
   3963					     ?debug  L 1256
   3964					     assume  cs:RTXC_TEXT,ds:DGROUP
   3965	09E4			     _KS_sendt	     proc    far
   3966					     ?debug  B
   3967	09E4  55			     push    bp
   3968	09E5  8B EC			     mov     bp,sp
   3969	09E7  83 EC 32			     sub     sp,50
   3970					     ?debug  C E6057469636B73060A100000000473656D61040A+
   3971					     ?debug  C 0E000000087072696F72697479040A0C00000008+
   3972					     ?debug  C 70727478636D7367390A08000000046D626F7804+
   3973					     ?debug  C 0A06000000
   3974					     ?debug  B
   3975					;
   3976					;			TICKS ticks)
   3977					;    {
   3978					;	struct msgarg p;
   3979					;	CLKBLK clkblk;
   3980					;
   3981					;	p.ksnum	= RTXC_SEND;
   3982					;
   3983					     ?debug  L 1262
   3984	09EA  C7 46 E6 0004		     mov     word ptr [bp-26],4
   3985					;
   3986					;	p.mbox = mbox;
   3987					;
   3988					     ?debug  L 1263
   3989	09EF  8B 46 06			     mov     ax,word ptr [bp+6]
   3990	09F2  89 46 EC			     mov     word ptr [bp-20],ax
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 71
.\rtxcapi.asm



   3991					;
   3992					;	p.prtxcmsg = prtxcmsg;
   3993					;
   3994					     ?debug  L 1264
   3995	09F5  8B 56 0A			     mov     dx,word ptr [bp+10]
   3996	09F8  8B 46 08			     mov     ax,word ptr [bp+8]
   3997	09FB  89 56 F4			     mov     word ptr [bp-12],dx
   3998	09FE  89 46 F2			     mov     word ptr [bp-14],ax
   3999					;
   4000					;	p.priority = priority;
   4001					;
   4002					     ?debug  L 1265
   4003	0A01  8B 46 0C			     mov     ax,word ptr [bp+12]
   4004	0A04  89 46 F0			     mov     word ptr [bp-16],ax
   4005					;
   4006					;	p.sema = sema;
   4007					;
   4008					     ?debug  L 1266
   4009	0A07  8B 46 0E			     mov     ax,word ptr [bp+14]
   4010	0A0A  89 46 EA			     mov     word ptr [bp-22],ax
   4011					;
   4012					;	p.wait = 1;
   4013					;
   4014					     ?debug  L 1267
   4015	0A0D  C7 46 F6 0001		     mov     word ptr [bp-10],1
   4016					;
   4017					;	p.ticks	= ticks;
   4018					;
   4019					     ?debug  L 1268
   4020	0A12  8B 56 12			     mov     dx,word ptr [bp+18]
   4021	0A15  8B 46 10			     mov     ax,word ptr [bp+16]
   4022	0A18  89 56 FA			     mov     word ptr [bp-6],dx
   4023	0A1B  89 46 F8			     mov     word ptr [bp-8],ax
   4024					;
   4025					;	p.ksrc = RC_GOOD;
   4026					;
   4027					     ?debug  L 1269
   4028	0A1E  C7 46 E8 0000		     mov     word ptr [bp-24],0
   4029					;
   4030					;	p.pclkblk = (CLKBLK ks_clk *)&clkblk;
   4031					;
   4032					     ?debug  L 1270
   4033	0A23  8D 46 CE			     lea     ax,word ptr [bp-50]
   4034	0A26  8C 56 FE			     mov     word ptr [bp-2],ss
   4035	0A29  89 46 FC			     mov     word ptr [bp-4],ax
   4036					;
   4037					;	KS(p);
   4038					;
   4039					     ?debug  L 1271
   4040	0A2C  8D 4E E6			     lea      cx,[bp-26]
   4041	0A2F  CD 40			     int      64
   4042					;
   4043					;	return(p.ksrc);
   4044					;
   4045					     ?debug  L 1272
   4046	0A31  8B 46 E8			     mov     ax,word ptr [bp-24]
   4047					;
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 72
.\rtxcapi.asm



   4048					;    }
   4049					;
   4050					     ?debug  L 1273
   4051	0A34  C9			     leave
   4052	0A35  CB			     ret
   4053					     ?debug  C E606636C6B626C6B1F02CEFF000001703802E6FF+
   4054					     ?debug  C 0000046D626F78040A060000000870727478636D+
   4055					     ?debug  C 7367390A08000000087072696F72697479040A0C+
   4056					     ?debug  C 0000000473656D61040A0E000000057469636B73+
   4057					     ?debug  C 060A10000000
   4058					     ?debug  E
   4059					     ?debug  E
   4060	0A36			     _KS_sendt	     endp
   4061					;
   4062					;    void KSAPI	KS_signalm(const SEMA *semalist)
   4063					;
   4064					     ?debug  L 1278
   4065					     assume  cs:RTXC_TEXT,ds:DGROUP
   4066	0A36			     _KS_signalm     proc    far
   4067					     ?debug  B
   4068	0A36  55			     push    bp
   4069	0A37  8B EC			     mov     bp,sp
   4070	0A39  83 EC 0A			     sub     sp,10
   4071					     ?debug  C E60873656D616C697374450A06000000
   4072					     ?debug  B
   4073					;
   4074					;    {
   4075					;	struct sargm p;
   4076					;
   4077					;	p.ksnum	= RTXC_SIGNALM;
   4078					;
   4079					     ?debug  L 1282
   4080	0A3C  C7 46 F6 002B		     mov     word ptr [bp-10],43
   4081					;
   4082					;	p.list = semalist;
   4083					;
   4084					     ?debug  L 1283
   4085	0A41  8B 56 08			     mov     dx,word ptr [bp+8]
   4086	0A44  8B 46 06			     mov     ax,word ptr [bp+6]
   4087	0A47  89 56 FE			     mov     word ptr [bp-2],dx
   4088	0A4A  89 46 FC			     mov     word ptr [bp-4],ax
   4089					;
   4090					;	KS(p);
   4091					;
   4092					     ?debug  L 1284
   4093	0A4D  8D 4E F6			     lea      cx,[bp-10]
   4094	0A50  CD 40			     int      64
   4095					;
   4096					;    }
   4097					;
   4098					     ?debug  L 1285
   4099	0A52  C9			     leave
   4100	0A53  CB			     ret
   4101					     ?debug  C E601704602F6FF00000873656D616C697374450A+
   4102					     ?debug  C 06000000
   4103					     ?debug  E
   4104					     ?debug  E
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 73
.\rtxcapi.asm



   4105	0A54			     _KS_signalm     endp
   4106					;
   4107					;    KSRC KSAPI	KS_waitt(SEMA sema, TICKS ticks)
   4108					;
   4109					     ?debug  L 1290
   4110					     assume  cs:RTXC_TEXT,ds:DGROUP
   4111	0A54			     _KS_waitt	     proc    far
   4112					     ?debug  B
   4113	0A54  55			     push    bp
   4114	0A55  8B EC			     mov     bp,sp
   4115	0A57  83 EC 26			     sub     sp,38
   4116					     ?debug  C E6057469636B73060A080000000473656D61040A+
   4117					     ?debug  C 06000000
   4118					     ?debug  B
   4119					;
   4120					;    {
   4121					;	struct sarg p;
   4122					;	CLKBLK clkblk;
   4123					;
   4124					;	p.ksnum	= RTXC_WAIT;
   4125					;
   4126					     ?debug  L 1295
   4127	0A5A  C7 46 F2 0001		     mov     word ptr [bp-14],1
   4128					;
   4129					;	p.sema = sema;
   4130					;
   4131					     ?debug  L 1296
   4132	0A5F  8B 46 06			     mov     ax,word ptr [bp+6]
   4133	0A62  89 46 F6			     mov     word ptr [bp-10],ax
   4134					;
   4135					;	p.ticks	= ticks;
   4136					;
   4137					     ?debug  L 1297
   4138	0A65  8B 56 0A			     mov     dx,word ptr [bp+10]
   4139	0A68  8B 46 08			     mov     ax,word ptr [bp+8]
   4140	0A6B  89 56 FA			     mov     word ptr [bp-6],dx
   4141	0A6E  89 46 F8			     mov     word ptr [bp-8],ax
   4142					;
   4143					;	p.ksrc = RC_GOOD;
   4144					;
   4145					     ?debug  L 1298
   4146	0A71  C7 46 F4 0000		     mov     word ptr [bp-12],0
   4147					;
   4148					;	p.pclkblk = (CLKBLK ks_clk *)&clkblk;
   4149					;
   4150					     ?debug  L 1299
   4151	0A76  8D 46 DA			     lea     ax,word ptr [bp-38]
   4152	0A79  8C 56 FE			     mov     word ptr [bp-2],ss
   4153	0A7C  89 46 FC			     mov     word ptr [bp-4],ax
   4154					;
   4155					;	KS(p);
   4156					;
   4157					     ?debug  L 1300
   4158	0A7F  8D 4E F2			     lea      cx,[bp-14]
   4159	0A82  CD 40			     int      64
   4160					;
   4161					;	return(p.ksrc);
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 74
.\rtxcapi.asm



   4162					;
   4163					     ?debug  L 1301
   4164	0A84  8B 46 F4			     mov     ax,word ptr [bp-12]
   4165					;
   4166					;    }
   4167					;
   4168					     ?debug  L 1302
   4169	0A87  C9			     leave
   4170	0A88  CB			     ret
   4171					     ?debug  C E606636C6B626C6B1F02DAFF000001703702F2FF+
   4172					     ?debug  C 00000473656D61040A06000000057469636B7306+
   4173					     ?debug  C 0A08000000
   4174					     ?debug  E
   4175					     ?debug  E
   4176	0A89			     _KS_waitt	     endp
   4177					;
   4178					;    TICKS KSAPI KS_inqslice(TASK task)
   4179					;
   4180					     ?debug  L 1308
   4181					     assume  cs:RTXC_TEXT,ds:DGROUP
   4182	0A89			     _KS_inqslice    proc    far
   4183					     ?debug  B
   4184	0A89  55			     push    bp
   4185	0A8A  8B EC			     mov     bp,sp
   4186					     ?debug  C E6047461736B040A06000000
   4187					     ?debug  B
   4188					;
   4189					;    {
   4190					;	if (task == SELFTASK)
   4191					;
   4192					     ?debug  L 1310
   4193	0A8C  83 7E 06 00		     cmp     word ptr [bp+6],0
   4194	0A90  75 0A			     jne     short @70@86
   4195					;
   4196					;	   task	= hipritsk->task;
   4197					;
   4198					     ?debug  L 1311
   4199	0A92  8B 1E 0000e		     mov     bx,word ptr DGROUP:_hipritsk
   4200	0A96  8B 47 08			     mov     ax,word ptr [bx+8]
   4201	0A99  89 46 06			     mov     word ptr [bp+6],ax
   4202	0A9C			     @70@86:
   4203					;
   4204					;
   4205					;	return(rtxtcb[task].newslice);
   4206					;
   4207					     ?debug  L 1313
   4208	0A9C  8B 5E 06			     mov     bx,word ptr [bp+6]
   4209	0A9F  6B DB 28			     imul    bx,bx,40
   4210	0AA2  8B 97 0022e		     mov     dx,word ptr DGROUP:_rtxtcb[bx+34]
   4211	0AA6  8B 87 0020e		     mov     ax,word ptr DGROUP:_rtxtcb[bx+32]
   4212					;
   4213					;    }
   4214					;
   4215					     ?debug  L 1314
   4216	0AAA  5D			     pop     bp
   4217	0AAB  CB			     ret
   4218					     ?debug  C E6047461736B040A06000000
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 75
.\rtxcapi.asm



   4219					     ?debug  E
   4220					     ?debug  E
   4221	0AAC			     _KS_inqslice    endp
   4222					;
   4223					;    void KSAPI	init_FPU(TASK task)
   4224					;
   4225					     ?debug  L 1347
   4226					     assume  cs:RTXC_TEXT,ds:DGROUP
   4227	0AAC			     _init_FPU	     proc    far
   4228					     ?debug  B
   4229	0AAC  55			     push    bp
   4230	0AAD  8B EC			     mov     bp,sp
   4231					     ?debug  C E6047461736B040A06000000
   4232					     ?debug  B
   4233					;
   4234					;    {
   4235					;	if (task == SELFTASK)
   4236					;
   4237					     ?debug  L 1349
   4238	0AAF  83 7E 06 00		     cmp     word ptr [bp+6],0
   4239	0AB3  75 0A			     jne     short @71@86
   4240					;
   4241					;	  task = hipritsk->task;
   4242					;
   4243					     ?debug  L 1350
   4244	0AB5  8B 1E 0000e		     mov     bx,word ptr DGROUP:_hipritsk
   4245	0AB9  8B 47 08			     mov     ax,word ptr [bx+8]
   4246	0ABC  89 46 06			     mov     word ptr [bp+6],ax
   4247	0ABF			     @71@86:
   4248					;
   4249					;	memcpy(rtxtcb[task].stackbase, &_emu[0]	- FPU_STACK_OFFSET,
   4250					;
   4251					     ?debug  L 1351
   4252					;
   4253					;		     FPU_STACK_OFFSET +	FPU_STRUCT_SIZE	+ _fpstklen);
   4254					;
   4255					     ?debug  L 1352
   4256	0ABF  A1 0000e			     mov     ax,word ptr DGROUP:__fpstklen
   4257	0AC2  05 0064			     add     ax,100
   4258	0AC5  50			     push    ax
   4259	0AC6  B8 0000e			     mov     ax,offset __emu
   4260	0AC9  05 FFE0			     add     ax,-32
   4261	0ACC  68 0000s			     push    seg __emu
   4262	0ACF  50			     push    ax
   4263	0AD0  8B 5E 06			     mov     bx,word ptr [bp+6]
   4264	0AD3  6B DB 28			     imul    bx,bx,40
   4265	0AD6  FF B7 0018e		     push    word ptr DGROUP:_rtxtcb[bx+24]
   4266	0ADA  FF B7 0016e		     push    word ptr DGROUP:_rtxtcb[bx+22]
   4267	0ADE  9A 00000000se		     call    far ptr _memcpy
   4268	0AE3  83 C4 0A			     add     sp,10
   4269					;
   4270					;    }
   4271					;
   4272					     ?debug  L 1353
   4273	0AE6  5D			     pop     bp
   4274	0AE7  CB			     ret
   4275					     ?debug  C E6047461736B040A06000000
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 76
.\rtxcapi.asm



   4276					     ?debug  E
   4277					     ?debug  E
   4278	0AE8			     _init_FPU	     endp
   4279					     ?debug  C E9
   4280					     ?debug  C FA00000000
   4281	0AE8			     RTXC_TEXT	     ends
   4282	0000			     _DATA   segment word public 'DATA'
   4283	0000			     s@	     label   byte
   4284	0000  52 54 58 43 20 33	2E+	     db	     'RTXC 3.2c	for x86	- Borland v5.0x	Oct-29-97 Key: 22359'
   4285	      32 63 20 66 6F 72	20+
   4286	      78 38 36 20 2D 20	42+
   4287	      6F 72 6C 61 6E 64	20+
   4288	      76 35 2E 30 78 20	4F+
   4289	      63 74 2D 32 39 2D	39+
   4290	      37 20 4B 65 79 3A	20+
   4291	      32 32 33 35 39
   4292	0036  00			     db	     0
   4293	0037			     _DATA   ends
   4294	0AE8			     RTXC_TEXT	     segment byte public 'CODE'
   4295	0AE8			     RTXC_TEXT	     ends
   4296				     _s@     equ     s@
   4297					     extrn   _semat:word
   4298					     extrn   _rtxtcb:word
   4299					     extrn   _hipritsk:word
   4300					     extrn   _pheader:word
   4301					     extrn   _qheader:word
   4302					     public  _KS_block
   4303					     public  _KS_version
   4304					     public  _KS_nop
   4305					     public  _KS_alloc
   4306					     public  _KS_alloc_timer
   4307					     public  _KS_defpriority
   4308					     public  _KS_defslice
   4309					     public  _KS_delay
   4310					     public  _KS_dequeue
   4311					     public  _KS_enqueue
   4312					     public  _KS_execute
   4313					     public  _KS_deftask
   4314					     public  _KS_alloc_task
   4315					     public  _KS_free
   4316					     public  _KS_alloc_part
   4317					     public  _KS_defpart
   4318					     public  _KS_free_part
   4319					     public  _KS_free_timer
   4320					     public  _KS_lock
   4321					     public  _KS_pend
   4322					     public  _KS_receive
   4323					     public  _KS_resume
   4324					     public  _KS_send
   4325					     public  _KS_signal
   4326					     public  _KS_ack
   4327					     public  _KS_stop_timer
   4328					     public  _KS_start_timer
   4329					     public  _KS_suspend
   4330					     public  _KS_terminate
   4331					     public  _KS_unblock
   4332					     public  _KS_unlock
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 77
.\rtxcapi.asm



   4333					     public  _KS_user
   4334					     public  _KS_wait
   4335					     public  _KS_yield
   4336					     public  _KS_allocw
   4337					     public  _KS_create_part
   4338					     public  _KS_inqres
   4339					     public  _KS_defres
   4340					     public  _KS_inqtask_arg
   4341					     public  _KS_deftask_arg
   4342					     public  _KS_defmboxsema
   4343					     public  _KS_defqsema
   4344					     public  _KS_dequeuew
   4345					     public  _KS_elapse
   4346					     public  _KS_enqueuew
   4347					     public  _KS_inqmap
   4348					     public  _KS_lockw
   4349					     public  _KS_purgequeue
   4350					     public  _KS_receivew
   4351					     public  _KS_sendw
   4352					     public  _KS_waitm
   4353					     public  _KS_inqtime
   4354					     public  _KS_deftime
   4355					     public  _KS_inqtimer
   4356					     public  _KS_alloct
   4357					     public  _KS_defqueue
   4358					     public  _KS_dequeuet
   4359					     public  _KS_enqueuet
   4360					     public  _KS_inqpriority
   4361					     public  _KS_inqqueue
   4362					     public  _KS_inqsema
   4363					     public  _KS_inqtask
   4364					     public  _KS_lockt
   4365					     public  _KS_pendm
   4366					     public  _KS_receivet
   4367					     public  _KS_restart_timer
   4368					     public  _KS_sendt
   4369					     public  _KS_signalm
   4370					     public  _KS_waitt
   4371					     public  _KS_inqslice
   4372					     extrn   _memcpy:far
   4373					     extrn   __emu:byte
   4374					     extrn   __fpstklen:word
   4375					     public  _init_FPU
   4376					     ?debug  C EA010C
   4377					     ?debug  C E3490000001A04
   4378					     ?debug  C EB065F73656D6174490000
   4379					     ?debug  C E34A0000001A25
   4380					     ?debug  C EB075F7274787463624A0000
   4381					     ?debug  C EB095F686970726974736B240000
   4382					     ?debug  C E34C077068656164657212001E80AD
   4383					     ?debug  C E34E04786D617004001E80B5
   4384					     ?debug  C E34D000400164E00
   4385					     ?debug  C E34B0000001A4C
   4386					     ?debug  C EB085F706865616465724B0000
   4387					     ?debug  C E350077168656164657218001E80B7
   4388					     ?debug  C E34F0000001A50
   4389					     ?debug  C EB085F716865616465724F0000
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 78
.\rtxcapi.asm



   4390					     ?debug  C E35100000023010400
   4391					     ?debug  C EC095F4B535F626C6F636B51180000
   4392					     ?debug  C E353000400160200
   4393					     ?debug  C E35200000023530400
   4394					     ?debug  C EC0B5F4B535F76657273696F6E52180000
   4395					     ?debug  C E35400000023010400
   4396					     ?debug  C EC075F4B535F6E6F7054180000
   4397					     ?debug  C E355000000231D0400
   4398					     ?debug  C EC095F4B535F616C6C6F6355180000
   4399					     ?debug  C E356000000231E0400
   4400					     ?debug  C EC0F5F4B535F616C6C6F635F74696D6572561800+
   4401					     ?debug  C 00
   4402					     ?debug  C E35700000023010400
   4403					     ?debug  C EC0F5F4B535F6465667072696F72697479571800+
   4404					     ?debug  C 00
   4405					     ?debug  C E35800000023010400
   4406					     ?debug  C EC0C5F4B535F646566736C69636558180000
   4407					     ?debug  C E35900000023010400
   4408					     ?debug  C EC095F4B535F64656C617959180000
   4409					     ?debug  C E35A000000231A0400
   4410					     ?debug  C EC0B5F4B535F646571756575655A180000
   4411					     ?debug  C E35B000000231A0400
   4412					     ?debug  C EC0B5F4B535F656E71756575655B180000
   4413					     ?debug  C E35C00000023010400
   4414					     ?debug  C EC0B5F4B535F657865637574655C180000
   4415					     ?debug  C E35D000000231A0400
   4416					     ?debug  C EC0B5F4B535F6465667461736B5D180000
   4417					     ?debug  C E35E00000023040400
   4418					     ?debug  C EC0E5F4B535F616C6C6F635F7461736B5E180000
   4419					     ?debug  C E35F00000023010400
   4420					     ?debug  C EC085F4B535F667265655F180000
   4421					     ?debug  C E36000000023040400
   4422					     ?debug  C EC0E5F4B535F616C6C6F635F7061727460180000
   4423					     ?debug  C E36100000023010400
   4424					     ?debug  C EC0B5F4B535F6465667061727461180000
   4425					     ?debug  C E362000000231D0400
   4426					     ?debug  C EC0D5F4B535F667265655F7061727462180000
   4427					     ?debug  C E36300000023010400
   4428					     ?debug  C EC0E5F4B535F667265655F74696D657263180000
   4429					     ?debug  C E364000000231A0400
   4430					     ?debug  C EC085F4B535F6C6F636B64180000
   4431					     ?debug  C E36500000023010400
   4432					     ?debug  C EC085F4B535F70656E6465180000
   4433					     ?debug  C E36600000023390400
   4434					     ?debug  C EC0B5F4B535F7265636569766566180000
   4435					     ?debug  C E36700000023010400
   4436					     ?debug  C EC0A5F4B535F726573756D6567180000
   4437					     ?debug  C E36800000023010400
   4438					     ?debug  C EC085F4B535F73656E6468180000
   4439					     ?debug  C E369000000231A0400
   4440					     ?debug  C EC0A5F4B535F7369676E616C69180000
   4441					     ?debug  C E36A00000023010400
   4442					     ?debug  C EC075F4B535F61636B6A180000
   4443					     ?debug  C E36B000000231A0400
   4444					     ?debug  C EC0E5F4B535F73746F705F74696D65726B180000
   4445					     ?debug  C E36C000000231E0400
   4446					     ?debug  C EC0F5F4B535F73746172745F74696D65726C1800+
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 79
.\rtxcapi.asm



   4447					     ?debug  C 00
   4448					     ?debug  C E36D00000023010400
   4449					     ?debug  C EC0B5F4B535F73757370656E646D180000
   4450					     ?debug  C E36E00000023010400
   4451					     ?debug  C EC0D5F4B535F7465726D696E6174656E180000
   4452					     ?debug  C E36F00000023010400
   4453					     ?debug  C EC0B5F4B535F756E626C6F636B6F180000
   4454					     ?debug  C E370000000231A0400
   4455					     ?debug  C EC0A5F4B535F756E6C6F636B70180000
   4456					     ?debug  C E37100000023040400
   4457					     ?debug  C EC085F4B535F7573657271180000
   4458					     ?debug  C E372000000231A0400
   4459					     ?debug  C EC085F4B535F7761697472180000
   4460					     ?debug  C E373000000231A0400
   4461					     ?debug  C EC095F4B535F7969656C6473180000
   4462					     ?debug  C E374000000231D0400
   4463					     ?debug  C EC0A5F4B535F616C6C6F637774180000
   4464					     ?debug  C E37500000023040400
   4465					     ?debug  C EC0F5F4B535F6372656174655F70617274751800+
   4466					     ?debug  C 00
   4467					     ?debug  C E37600000023040400
   4468					     ?debug  C EC0A5F4B535F696E7172657376180000
   4469					     ?debug  C E377000000231A0400
   4470					     ?debug  C EC0A5F4B535F64656672657377180000
   4471					     ?debug  C E378000000231D0400
   4472					     ?debug  C EC0F5F4B535F696E717461736B5F617267781800+
   4473					     ?debug  C 00
   4474					     ?debug  C E37900000023010400
   4475					     ?debug  C EC0F5F4B535F6465667461736B5F617267791800+
   4476					     ?debug  C 00
   4477					     ?debug  C E37A00000023010400
   4478					     ?debug  C EC0F5F4B535F6465666D626F7873656D617A1800+
   4479					     ?debug  C 00
   4480					     ?debug  C E37B00000023010400
   4481					     ?debug  C EC0C5F4B535F6465667173656D617B180000
   4482					     ?debug  C E37C00000023010400
   4483					     ?debug  C EC0C5F4B535F64657175657565777C180000
   4484					     ?debug  C E37D00000023060400
   4485					     ?debug  C EC0A5F4B535F656C617073657D180000
   4486					     ?debug  C E37E00000023010400
   4487					     ?debug  C EC0C5F4B535F656E7175657565777E180000
   4488					     ?debug  C E37F000000230A0400
   4489					     ?debug  C EC0A5F4B535F696E716D61707F180000
   4490					     ?debug  C E38080000000231A0400
   4491					     ?debug  C EC095F4B535F6C6F636B778080180000
   4492					     ?debug  C E3808100000023010400
   4493					     ?debug  C EC0E5F4B535F7075726765717565756580811800+
   4494					     ?debug  C 00
   4495					     ?debug  C E3808200000023390400
   4496					     ?debug  C EC0C5F4B535F72656365697665778082180000
   4497					     ?debug  C E3808300000023010400
   4498					     ?debug  C EC095F4B535F73656E64778083180000
   4499					     ?debug  C E3808400000023040400
   4500					     ?debug  C EC095F4B535F776169746D8084180000
   4501					     ?debug  C E3808500000023060400
   4502					     ?debug  C EC0B5F4B535F696E7174696D658085180000
   4503					     ?debug  C E3808600000023010400
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 80
.\rtxcapi.asm



   4504					     ?debug  C EC0B5F4B535F64656674696D658086180000
   4505					     ?debug  C E3808700000023060400
   4506					     ?debug  C EC0C5F4B535F696E7174696D65728087180000
   4507					     ?debug  C E38088000000231D0400
   4508					     ?debug  C EC0A5F4B535F616C6C6F63748088180000
   4509					     ?debug  C E38089000000231A0400
   4510					     ?debug  C EC0C5F4B535F64656671756575658089180000
   4511					     ?debug  C E3808A000000231A0400
   4512					     ?debug  C EC0C5F4B535F6465717565756574808A180000
   4513					     ?debug  C E3808B000000231A0400
   4514					     ?debug  C EC0C5F4B535F656E717565756574808B180000
   4515					     ?debug  C E3808C00000023040400
   4516					     ?debug  C EC0F5F4B535F696E717072696F72697479808C18+
   4517					     ?debug  C 0000
   4518					     ?debug  C E3808D00000023040400
   4519					     ?debug  C EC0C5F4B535F696E717175657565808D180000
   4520					     ?debug  C E3808E00000023040400
   4521					     ?debug  C EC0B5F4B535F696E7173656D61808E180000
   4522					     ?debug  C E3808F00000023040400
   4523					     ?debug  C EC0B5F4B535F696E717461736B808F180000
   4524					     ?debug  C E38090000000231A0400
   4525					     ?debug  C EC095F4B535F6C6F636B748090180000
   4526					     ?debug  C E3809100000023010400
   4527					     ?debug  C EC095F4B535F70656E646D8091180000
   4528					     ?debug  C E3809200000023390400
   4529					     ?debug  C EC0C5F4B535F72656365697665748092180000
   4530					     ?debug  C E38093000000231A0400
   4531					     ?debug  C EC115F4B535F726573746172745F74696D657280+
   4532					     ?debug  C 93180000
   4533					     ?debug  C E38094000000231A0400
   4534					     ?debug  C EC095F4B535F73656E64748094180000
   4535					     ?debug  C E3809500000023010400
   4536					     ?debug  C EC0B5F4B535F7369676E616C6D8095180000
   4537					     ?debug  C E38096000000231A0400
   4538					     ?debug  C EC095F4B535F77616974748096180000
   4539					     ?debug  C E3809700000023060400
   4540					     ?debug  C EC0C5F4B535F696E71736C6963658097180000
   4541					     ?debug  C E38098000000231D0400
   4542					     ?debug  C EB075F6D656D63707980980000
   4543					     ?debug  C E380990000001A02
   4544					     ?debug  C EB055F5F656D7580990000
   4545					     ?debug  C EB0A5F5F667073746B6C656E0A0000
   4546					     ?debug  C E3809A00000023010400
   4547					     ?debug  C EC095F696E69745F465055809A180000
   4548					     ?debug  C E60673697A655F740A060000064F424A4E554D04+
   4549					     ?debug  C 060000044D424F5804060000034D415004060000+
   4550					     ?debug  C 05515545554504060000085245534F5552434504+
   4551					     ?debug  C 060000045441534B040600000453454D41040600+
   4552					     ?debug  C 00055449434B53060600000674696D655F740606+
   4553					     ?debug  C 0000085052494F52495459040600000654535441+
   4554					     ?debug  C 54450A0600000653535441544504060000055143+
   4555					     ?debug  C 4F4E4440060000044B5352431A060000074F424A+
   4556					     ?debug  C 5459504520060000075245534154545235060000+
   4557					     ?debug  C 054B534E554D04060000054652414D4527060000+
   4558					     ?debug  C 0354434225060000075148454144455250060000+
   4559					     ?debug  C 07504845414445524C06000007525458434D5347+
   4560					     ?debug  C 3A06000006434C4B424C4B1F060000056672616D+
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 81
.\rtxcapi.asm



   4561					     ?debug  C 6527070000037463622507000006636C6B626C6B+
   4562					     ?debug  C 1F07000007716865616465725007000004786D61+
   4563					     ?debug  C 704E07000007706865616465724C070000077274+
   4564					     ?debug  C 78636D73673A0700000473617267370700000573+
   4565					     ?debug  C 6172676D4607000004716172672E070000077164+
   4566					     ?debug  C 65666172674207000004706172671C070000066D+
   4567					     ?debug  C 7367617267380700000474617267190700000663+
   4568					     ?debug  C 6C6B617267230700000774696D65617267470700+
   4569					     ?debug  C 000864656C61796172672D070000056574617267+
   4570					     ?debug  C 4407000006626C6B61726718070000046C617267+
   4571					     ?debug  C 3407000007757365726172673D0700000A646566+
   4572					     ?debug  C 7461736B61726731070000
   4573					     ?debug  C E200056B736E756D04000973746172747461736B+
   4574					     ?debug  C 040007656E647461736B04C006000000
   4575					     ?debug  C E200056B736E756D0400046B7372631A00047461+
   4576					     ?debug  C 736B0400087072696F7269747904C008000000
   4577					     ?debug  C E4000752435F474F4F440000001052435F574149+
   4578					     ?debug  C 545F434F4E464C4943540100000C52435F4E4F5F+
   4579					     ?debug  C 54494D4552530200001152435F54494D45525F49+
   4580					     ?debug  C 4E4143544956450300001052435F54494D45525F+
   4581					     ?debug  C 494C4C4547414C0400000A52435F54494D454F55+
   4582					     ?debug  C 540500000D52435F51554555455F46554C4C0600+
   4583					     ?debug  C 000E52435F51554555455F454D50545907000015+
   4584					     ?debug  C 52435F494C4C4547414C5F51554555455F53495A+
   4585					     ?debug  C 450800000752435F425553590900000952435F4E+
   4586					     ?debug  C 45535445440A00000F52435F494C4C4547414C5F+
   4587					     ?debug  C 5441534B0B00000E52435F4143544956455F5441+
   4588					     ?debug  C 534B0C00000B52435F4E4F5F5949454C440D0080+
   4589					     ?debug  C 0F52435F4D49535345445F4556454E540E00
   4590					     ?debug  C E200056B736E756D0400046B7372631A00036D61+
   4591					     ?debug  C 7004000376616C1D000473697A650A0004776169+
   4592					     ?debug  C 740400057469636B7306000770636C6B626C6B1E+
   4593					     ?debug  C 0004616464722200076E626C6F636B730AC01C00+
   4594					     ?debug  C 0000
   4595					     ?debug  C E20005666C696E6B1E0005626C696E6B1E000672+
   4596					     ?debug  C 656D61696E06000772656379636C650600047461+
   4597					     ?debug  C 736B04000573746174650208000000076F626A74+
   4598					     ?debug  C 7970652000056F626A696404C018000000
   4599					     ?debug  C E4000944454C41595F4F424A0000000D53454D41+
   4600					     ?debug  C 50484F52455F4F424A0100000D50415254495449+
   4601					     ?debug  C 4F4E5F4F424A0200000951554555455F4F424A03+
   4602					     ?debug  C 00000C5245534F555243455F4F424A0400000B4D+
   4603					     ?debug  C 41494C424F585F4F424A0500800954494D45525F+
   4604					     ?debug  C 4F424A0600
   4605					     ?debug  C E200056B736E756D0400046B7372631A00047365+
   4606					     ?debug  C 6D610400057469636B73060006706572696F6406+
   4607					     ?debug  C 000770636C6B626C6B1EC012000000
   4608					     ?debug  C E20005666C696E6B240005626C696E6B24000770+
   4609					     ?debug  C 636C6B626C6B1E00047461736B0400087072696F+
   4610					     ?debug  C 7269747904000273702600067374617475730A00+
   4611					     ?debug  C 0570635F74302B0009737461636B626173652200+
   4612					     ?debug  C 09737461636B73697A650A000674736C69636506+
   4613					     ?debug  C 00086E6577736C6963650600036172671DC02800+
   4614					     ?debug  C 0000
   4615					     ?debug  C E2000264690A000273690A000262700A00027370+
   4616					     ?debug  C 0A000262780A000264780A0006706B736E756D28+
   4617					     ?debug  C 000265730A000264730A00027063290003636372+
Turbo Assembler	 Version 3.0	    19/04/99 11:06:17	    Page 82
.\rtxcapi.asm



   4618					     ?debug  C 0AC01A000000
   4619					     ?debug  C E200056B736E756D0400047461736B0400057469+
   4620					     ?debug  C 636B7306000770636C6B626C6B1EC00C000000
   4621					     ?debug  C E200056B736E756D0400046B7372631A00047365+
   4622					     ?debug  C 6D610400057175657565040004646174611D0004+
   4623					     ?debug  C 776169740400057469636B7306000770636C6B62+
   4624					     ?debug  C 6C6B1EC016000000
   4625					     ?debug  C E200056B736E756D0400046B7372631A00047461+
   4626					     ?debug  C 736B0400087072696F7269747904000973746163+
   4627					     ?debug  C 6B62617365220009737461636B73697A650A0005+
   4628					     ?debug  C 656E7472793200036172671DC016000000
   4629					     ?debug  C E200056B736E756D0400046B7372631A00087265+
   4630					     ?debug  C 736F75726365040004776169740400057469636B+
   4631					     ?debug  C 7306000770636C6B626C6B1E00047461736B0400+
   4632					     ?debug  C 077265736174747235C014000000
   4633					     ?debug  C E400165052494F524954595F494E56455253494F+
   4634					     ?debug  C 4E5F4F4646000080155052494F524954595F494E+
   4635					     ?debug  C 56455253494F4E5F4F4E0100
   4636					     ?debug  C E200056B736E756D0400046B7372631A00047365+
   4637					     ?debug  C 6D610400057469636B7306000770636C6B626C6B+
   4638					     ?debug  C 1EC00E000000
   4639					     ?debug  C E200056B736E756D0400046B7372631A00047365+
   4640					     ?debug  C 6D610400046D626F780400047461736B04000870+
   4641					     ?debug  C 72696F7269747904000870727478636D73673900+
   4642					     ?debug  C 04776169740400057469636B7306000770636C6B+
   4643					     ?debug  C 626C6B1EC01A000000
   4644					     ?debug  C E200046C696E6B3900047461736B040008707269+
   4645					     ?debug  C 6F7269747904000473656D6104C00A000000
   4646					     ?debug  C E200056B736E756D0400036172671D000366756E+
   4647					     ?debug  C 3E000376616C04C00C000000
   4648					     ?debug  C E40003514E4500000003514E4601000002514602+
   4649					     ?debug  C 00800251450300
   4650					     ?debug  C E200056B736E756D0400046B7372631A00057175+
   4651					     ?debug  C 6575650400046261736522000577696474680A00+
   4652					     ?debug  C 05646570746804000C63757272656E745F73697A+
   4653					     ?debug  C 6504000473656D6104000571636F6E6440C01400+
   4654					     ?debug  C 0000
   4655					     ?debug  C E200056B736E756D0400057374616D7043000376+
   4656					     ?debug  C 616C06C00A000000
   4657					     ?debug  C E200056B736E756D0400046B7372631A00047365+
   4658					     ?debug  C 6D610400046C69737445C00A000000
   4659					     ?debug  C E200056B736E756D04000474696D6506C0060000+
   4660					     ?debug  C 00
   4661					     ?debug  C E200046E6578744D000473697A650A0005636F75+
   4662					     ?debug  C 6E740400077761697465727324000564756D6D79+
   4663					     ?debug  C 2400036D61700400046164647222C012000000
   4664					     ?debug  C E200046C696E6B4DC004000000
   4665					     ?debug  C E200046261736522000577696474680A00056465+
   4666					     ?debug  C 7074680400067075746E64780400066375726E64+
   4667					     ?debug  C 780400077761697465727324000564756D6D7924+
   4668					     ?debug  C 00056673656D610400066E6573656D6104000565+
   4669					     ?debug  C 73656D610400066E6673656D6104C018000000
   4670					     end
