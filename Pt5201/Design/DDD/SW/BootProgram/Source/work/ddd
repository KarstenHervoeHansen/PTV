struct CMD_STRUCT code Mandated[12] = {
	{ CLSCmdTxt, NULL, &Mandated[1], NULL, NONE, CLSCommand},
	{ ESECmdTxt, NULL, &Mandated[2], NULL, NONE, ESECommand},
	{ ESRCmdTxt, NULL, &Mandated[3], NULL, NONE, ESRCommand},
	{ IDNCmdTxt, NULL, &Mandated[4], NULL, NONE, IDNCommand},
	{ OPCCmdTxt, NULL, &Mandated[5], NULL, NONE, OPCCommand},
	{ RSTCmdTxt, NULL, &Mandated[6], NULL, NONE, RSTCommand},
	{ SRECmdTxt, NULL, &Mandated[7], NULL, NONE, SRECommand},
	{ STBCmdTxt, NULL, &Mandated[8], NULL, NONE, STBCommand},
	{ TSTCmdTxt, NULL, &Mandated[9], NULL, NONE, TSTCommand},
	{ RCLCmdTxt, NULL, &Mandated[10], NULL, NONE, RCLCommand},
	{ SAVCmdTxt, NULL, &Mandated[11], NULL, NONE, SAVCommand},
	{ WAICmdTxt, NULL, NULL         , NULL, NONE, WAICommand}
};

struct CMD_STRUCT code Subsystem[9] = {
	{ SYSTEMCmdTxt, SYSTCmdTxt, &Subsystem[1], &System[0], NONE, NONE},
	{ STATUSCmdTxt, STATCmdTxt, &Subsystem[2], &Status[0], NONE, NONE},
	{ DIAGNOSTICCmdTxt, DIAGCmdTxt, &Subsystem[3], &Diagnostic[0], NONE, NONE},
	{ MONITORCmdTxt, MONCmdTxt, &Subsystem[4], &Monitor[0], NONE, NONE},
	{ INPUTCmdTxt, INPCmdTxt, &Subsystem[5], &Inputt[0], NONE, NONE},
	{ OUTPUTCmdTxt, OUTPCmdTxt, &Subsystem[6], NULL, NONE, NONE},
	{ USERCmdTxt, USERCmdTxt, &Subsystem[7], &User[0], NONE, NONE},
	{ MEASURECmdTxt, MEASCmdTxt, &Subsystem[8], &Measure[0], NONE, NONE},
	{ FACTORYCmdTxt, FACTCmdTxt, NULL, &Factory[0], NONE, NONE},
};

// **************************************************************************
/*	CMD:	SUB1:	SUB2:	SUB3:	PARM:
	SYSTem
        	:ERRor?
                :VERSion?
                :PRESet<?>
                	:RECall<?>	1 .. 3
                        :STORe		1 .. 3
                        :NAMe<?>	1 .. 3 , <name>
                :DATE<?>		<year>,<month>,<date>
                :TIME<?>		<hour>,<min>,<sec>
*/
struct CMD_STRUCT code System[6] = {
	{ ERRORCmdTxt, ERRCmdTxt, &System[1], NULL, NONE, SystemError},
	{ VERSIONCmdTxt, VERSCmdTxt, &System[2], NULL, NONE, SystemVersion},
	{ PRESETCmdTxt, PRESCmdTxt, &System[3], &SystemLevel1[0], NONE, SystemPreset},
	{ EVENTLOGCmdTxt, EVENCmdTxt, &System[4], NULL, NONE, NONE},
	{ DATECmdTxt, DATECmdTxt, &System[5], NULL, NONE, SystemDate},
	{ TIMECmdTxt, TIMECmdTxt, NULL, NULL, NONE, SystemTime}
};

struct CMD_STRUCT code SystemLevel1[3] = {
	{ RECALLCmdTxt, RECCmdTxt, &SystemLevel1[1], NULL, NONE, SystemPreset},
	{ STORECmdTxt, STORCmdTxt, &SystemLevel1[2], NULL, NONE, SystemPresetStore},
	{ NAMECmdTxt, NAMCmdTxt, NULL, NULL, NONE, SystemPresetName},
};

// **************************************************************************
/*	CMD:	SUB1:	SUB2:	SUB3:	PARM:
	STATus
        	:OPERation
                	:EVENt?
                        :CONDition?
                        :ENABle<?>	0 .. 65535
        	:QUEStionable
                	:EVENt?
                        :CONDition?
                        :ENABle<?>	0 .. 65535
		:PRESet			TBD
                :PT5765?
*/
struct CMD_STRUCT code Status[4] = {
	{ OPERATIONCmdTxt, OPERCmdTxt, &Status[1], &StatusLevel1_1[0], NONE, StatusOperEvent},
	{ QUESTIONABLECmdTxt, QUESCmdTxt, &Status[2], &StatusLevel1_2[0], NONE, StatusQuestEvent},
	{ PRESETCmdTxt, PRESCmdTxt, &Status[3], NULL, NONE, StatusPreset},
	{ PTCmdTxt, PTCmdTxt, NULL, NULL, StatusPTSuffix, StatusPT},
};

struct CMD_STRUCT code StatusLevel1_1[3] = {
	{ EVENTCmdTxt, EVENCmdTxt, &StatusLevel1_1[1], NULL, NONE, StatusOperEvent},
	{ CONDITIONCmdTxt, CONDCmdTxt, &StatusLevel1_1[2], NULL, NONE, StatusOperCondition},
	{ ENABLECmdTxt, ENABCmdTxt, NULL, NULL, NONE, StatusOperEnable},
};

struct CMD_STRUCT code StatusLevel1_2[3] = {
	{ EVENTCmdTxt, EVENCmdTxt, &StatusLevel1_2[1], NULL, NONE, StatusQuestEvent},
	{ CONDITIONCmdTxt, CONDCmdTxt, &StatusLevel1_2[2], NULL, NONE, StatusQuestCondition},
	{ ENABLECmdTxt, ENABCmdTxt, NULL, NULL, NONE, StatusQuestEnable},
};

// **************************************************************************
/*	CMD:	SUB1:	SUB2:	SUB3:	PARM:
	DIAGnostic
        	:DISPlay		TBD
                :ERRorqueue?
                	:RESet
*/
struct CMD_STRUCT code Diagnostic[2] = {
	{ DISPLAYCmdTxt, DISPCmdTxt, &Diagnostic[1], NULL, NONE, DiagnosticDisplay},
	{ ERRORQUEUECmdTxt, ERRCmdTxt, NULL, &DiagnosticLevel1[0], NONE, DiagnosticErrorQueue},
};

struct CMD_STRUCT code DiagnosticLevel1[1] = {
	{ RESETCmdTxt, RESCmdTxt, NULL, NULL, NONE, DiagnosticErrorQueueReset},
};

// **************************************************************************
/*	CMD:	SUB1:	SUB2:	SUB3:	PARM:
	USER
        	:DEFault		SAV
                	
*/

struct CMD_STRUCT code User[1] = {
	{ DEFAULTCmdTxt, DEFCmdTxt, NULL, NULL, NONE, User_Default_Save}
};

struct PAR_STRUCT code SAVPar[1] = {
	{ SAVParTxt, SAVParTxt, NULL}
};


// **************************************************************************
/*	CMD:	SUB1:	SUB2:	SUB3:	PARM:
	MONitor
		:EVENtlog		
                	:NEXT?		
                        :CONFigure<?>	TBD.
		:ALARm<S>			
			:EVENt?
                        :CONDition?
                        :ENABle<?>	0 .. 15 / Syncloss / ILEVel / BER / UCERror
			:LIMits<?>
                        	:ILEVel<?> 20.0 .. 110.0
                                :BER<S><?> 1E-8 .. 1E-1
                                :UCE<?>	0 .. 9999
*/

struct CMD_STRUCT code Monitor[2] = {
	{ EVENTLOGCmdTxt, EVENCmdTxt, &Monitor[1], &Eventlog[0], NONE, NONE},
	{ ALARMCmdTxt, ALARCmdTxt, NULL, &Alarm[0], Alarm_Suffix, NONE}
};

struct CMD_STRUCT code Eventlog[4] = {
	{ NEXTCmdTxt, NEXTCmdTxt, &Eventlog[1], NULL, NONE, RGetNextEvent},
	{ FIRSTCmdTxt, FIRSCmdTxt, &Eventlog[2], NULL, NONE, RGetFirstEvent},
	{ CLEARCmdTxt, CLECmdTxt, &Eventlog[3], NULL, NONE, ClearEventlog},
	{ CONFIGURECmdTxt, CONFCmdTxt, NULL, NULL, NONE, NONE}
};

struct CMD_STRUCT code Alarm[4] = {
	{ EVENTCmdTxt, EVENCmdTxt, &Alarm[1], NULL, NONE, AlarmEvent},
	{ CONDITIONCmdTxt, CONDCmdTxt, &Alarm[2], NULL, NONE, AlarmCondition},
	{ ENABLECmdTxt, ENABCmdTxt, &Alarm[3], NULL, NONE, AlarmEnable},
	{ LIMITSCmdTxt, LIMCmdTxt, NULL, &Limits[0], NONE, NONE}
};







// CHANGE BELOW THIS LINE FOR NEW INSTRUMENTS

struct CMD_STRUCT code Limits[3] = {
	{ ILEVELCmdTxt, ILEVCmdTxt, &Limits[1], NULL, NONE, LimitLevel},
	{ BERCmdTxt, BERCmdTxt, &Limits[2], NULL, Limit_BER_Suffix, LimitBER},
	{ UCECmdTxt, UCECmdTxt, NULL, NULL, NONE, LimitUCE}
};


// **************************************************************************
/*	CMD:	SUB1:	SUB2:		PARM:
	INPut
		:SELect<?>		RF / BASeband
		:FREQuency<?>		470.00 .. 850.00
			:LOCKed?
		:MODe<?>		AUTO / MANual
                	:FFT<?>		F2K / F8K
                	:POLarity<?>	NORMal / INVerted
                	:CONStell<?>	QPSK / QAM16 / QAM64
                	:GUARd<?>	G1_4 / G1_8 / G1_16 / G1_32
			:CODerate?
			:LPCoderate?
			:HIERarchy?
			:LOCKed?
		:NOISe<?>		ON / OFF
                	:VALue<?>	1 .. 31
		:LOCKed?
*/

struct CMD_STRUCT code Inputt[5] = {
	{ SELECTCmdTxt, SELCmdTxt, &Inputt[1], NULL, NONE, Input_Select},
	{ FREQUENCYCmdTxt, FREQCmdTxt, &Inputt[2], &FLocked[0], NONE, Input_Frequency},
	{ MODECmdTxt, MODCmdTxt, &Inputt[3], &Mode[0], NONE, Input_Mode},
	{ LOCKEDCmdTxt, LOCKCmdTxt, &Inputt[4], NULL, NONE, Input_Locked},
	{ NOISECmdTxt, NOISCmdTxt, NULL, &NoiseValue[0], NONE, Input_Noise}
};

struct PAR_STRUCT code InputSelPar[2] = {
	{ RFParTxt, RFParTxt, &InputSelPar[1]},
	{ BASEBANDParTxt, BASParTxt, NULL},
};

struct PAR_STRUCT code AutoManPar[2] = {
	{ MANUALParTxt, MANParTxt, &AutoManPar[1]},
	{ AUTOParTxt, AUTOParTxt, NULL},
};

struct PAR_STRUCT code OffOnPar[2] = {
	{ OFFParTxt, OFFParTxt, &OffOnPar[1]},
	{ ONParTxt, ONParTxt, NULL},
};

struct PAR_STRUCT code LockPar[2] = {
	{ UNLOCKEDParTxt, UNLOCKEDParTxt, &LockPar[1]},
	{ LOCKEDParTxt, LOCKEDParTxt, NULL},
};

struct CMD_STRUCT code FLocked[1] = {
	{ LOCKEDCmdTxt, LOCKCmdTxt, NULL, NULL, NONE, Input_Freq_Locked}
};

struct CMD_STRUCT code Mode[8] = {
	{ FFTCmdTxt, FFTCmdTxt, &Mode[1], NULL, NONE, Input_Mode_FFT},
	{ POLARITYCmdTxt, POLCmdTxt, &Mode[2], NULL, NONE, Input_Mode_Pol},
	{ CONSTELLATIONCmdTxt, CONSCmdTxt, &Mode[3], NULL, NONE, Input_Mode_Const},
	{ GUARDCmdTxt, GUARCmdTxt, &Mode[4], NULL, NONE, Input_Mode_Guard},
	{ CODERATECmdTxt, CODCmdTxt, &Mode[5], NULL, NONE, Input_Mode_Code},
	{ LPCODERATECmdTxt, LPCCmdTxt, &Mode[6], NULL, NONE, Input_Mode_CodeLP},
	{ HIERARCHYCmdTxt, HIERCmdTxt, &Mode[7], NULL, NONE, Input_Mode_Hier},
	{ LOCKEDCmdTxt, LOCKCmdTxt, NULL, NULL, NONE, Input_Mode_Locked}
};

struct PAR_STRUCT code FFTPar[2] = {
	{ F2KParTxt, F2KParTxt, &FFTPar[1]},
	{ F8KParTxt, F8KParTxt, NULL},
};

struct PAR_STRUCT code PolarityPar[5] = {
	{ NORMALParTxt, NORMParTxt, &PolarityPar[1]},
	{ INVERTEDParTxt, INVParTxt, NULL},
};

struct PAR_STRUCT code ConstPar[3] = {
	{ QPSKParTxt, QPSKParTxt, &ConstPar[1]},
	{ QAM16ParTxt, QAM16ParTxt, &ConstPar[2]},
	{ QAM64ParTxt, QAM64ParTxt, NULL},
};

struct PAR_STRUCT code GuardPar[4] = {
	{ G1_4ParTxt, G1_4ParTxt, &GuardPar[1]},
	{ G1_8ParTxt, G1_8ParTxt, &GuardPar[2]},
	{ G1_16ParTxt, G1_16ParTxt, &GuardPar[3]},
	{ G1_32ParTxt, G1_32ParTxt, NULL},
};

struct PAR_STRUCT code CodePar[6] = {
	{ R1_2ParTxt, R1_2ParTxt, &CodePar[1]},
	{ R2_3ParTxt, R2_3ParTxt, &CodePar[2]},
	{ R3_4ParTxt, R3_4ParTxt, &CodePar[3]},
	{ R5_6ParTxt, R5_6ParTxt, &CodePar[4]},
	{ R7_8ParTxt, R7_8ParTxt, &CodePar[5]},
	{ UNLOCKEDParTxt, UNLOCKEDParTxt, NULL},
};

struct PAR_STRUCT code HierPar[5] = {
	{ OFFParTxt, OFFParTxt, &HierPar[1]},
	{ ALPHA1ParTxt, ALPHA1ParTxt, &HierPar[2]},
	{ ALPHA2ParTxt, ALPHA2ParTxt, &HierPar[3]},
	{ ALPHA4ParTxt, ALPHA4ParTxt, &HierPar[4]},
	{ UNLOCKEDParTxt, UNLOCKEDParTxt, NULL},
};

struct CMD_STRUCT code NoiseValue[1] = {
	{ VALUECmdTxt, VALCmdTxt, NULL, NULL, NONE, Input_Noise_Value}
};

// **************************************************************************
/*	CMD:	SUB1:	SUB2:	SUB3	PARM:
	OUTPut
*/
/*struct CMD_STRUCT code Output[0] = {
};*/




// **************************************************************************
/*	CMD:	SUB1:	SUB2:	SUB3	PARM:
	MEASure
		:BER<S>?
		:UCE?
		:ILEVel?
*/
struct CMD_STRUCT code Measure[3] = 
{
//	{ BER1CmdTxt, BER1CmdTxt, &Measure[1], NULL, NONE, Measure_BER1},
	{ BERCmdTxt, BERCmdTxt, &Measure[1], NULL, Measure_BER_Suffix, Measure_BER1},
	{ UCECmdTxt, UCECmdTxt, &Measure[2], &MeasureLevel1[0], NONE, Measure_UCE},
	{ ILEVELCmdTxt, ILEVCmdTxt, NULL, NULL, NONE, Input_Level},
};


struct CMD_STRUCT code MeasureLevel1[1] = {
	{ RESETCmdTxt, RESCmdTxt, NULL, NULL, NONE, Measure_UCE_Reset},
};


