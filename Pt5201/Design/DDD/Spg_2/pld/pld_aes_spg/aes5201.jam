' Copyright (C) 1988-1999 Altera Corporation
' Any megafunction design, and related net list (encrypted or decrypted),
' support information, device programming or simulation file, and any other
' associated documentation or information provided by Altera or a partner
' under Altera's Megafunction Partnership Program may be used only to
' program PLD devices (but not masked PLD devices) from Altera.  Any other
' use of such megafunction design, net list, support information, device
' programming or simulation file, or any other related documentation or
' information is prohibited for any other purpose, including, but not
' limited to modification, reverse engineering, de-compiling, or use with
' any other silicon devices, unless such use is explicitly licensed under
' a separate agreement with Altera or a megafunction partner.  Title to
' the intellectual property, including patents, copyrights, trademarks,
' trade secrets, or maskworks, embodied in any such megafunction design,
' net list, support information, device programming or simulation file, or
' any other related documentation or information provided by Altera or a
' megafunction partner, remains with Altera, the megafunction partner, or
' their respective licensors.  No other licenses, including any licenses
' needed under any third party's intellectual property, are provided herein.

NOTE "CREATOR" "POF to JAM converter Version 9.3 7/23/1999";

NOTE "DEVICE" "EPM3128A";

NOTE "FILE" "aes5201.pof";

NOTE "USERCODE" "FFFFFFFF";


'Device #1: EPM3128A - d:\5201\pld_aes\aes5201.pof Mon Dec 06 10:17:28 1999

BOOLEAN A50[66588] = ACA
42200u@@@NlM@l@@lSNh@@UfMhz@QlxNBzoUlsFZzIVDsxzqVlNr@zUPjtxrz@@l
@@@N@@@@76eX1_@@@z@@VR@@@t@@@l@@rQQzNh_r@lyN@zx_ltt@zUF@tRV@@@tM
h@@z@N_fr@@dMhrlVjtVhrUlktx@qUjVpwzUslthj@Ul6txzU_@@@z@@xNh7y@jz
wl@@t@@@l@NhLrVj_M@@wTzt@v@U@ttxzkVlzV@lPli_@_zVvNJ@@Pzi6mQltowj
VDhsETjUh@shr_TlNxTM36x3dj2jr@zUMx@rRjsRhz@tzVlcy@@VVvNgdL2Qitxv
zVjhslzsUl@hpr_FlNxzyUl@z@z@dM9e@@@@5Dm@nuVAQ0rQjUNh@wUj_hzzV@ht
d__iCmxzQTpQW@VjspY1RdUlkr@jyQwtogzKNlt_l@@@T@@@t_@y@RsAOfK_9bVv
tN@bh_l@RQ@Tlkr_ji@@@xvro@iIG@@QCyNhnpA1F_xnqUhtLYzUHl@@t_@_gdF_
VjEz@BE3db1Dh7y@oxvzVlr@@@lUjU@p23_rQgjtxzxQlsNxzUF@twLfUhLsJzQT
x@@x@@_tzl@l@@@Vx@x@pm4ix@@VMOWVvtlx@MxPe1_@jljM__VMOmQjsxPX1VzU
9itRzy@z@h@l_dlh@l@V@@Oa1_@@@z@@TkGDO6MX@@lNMR@@slyhRMIetxftUlsl
xzQAltxzg@_@kiIaPhGpv@McD1T@@@PM9KxtURlN@rzQ@dthrUUlt@wt@zz@@@x@
lVt@@@lW@@@mi1_lt@z@@@xx@@Fpc0lVvTz_ttDh4y@@xF3PWtxzUpo0tx@UUj@x
vrUhhtx@tth@l@@@Vpzzy_@@lz@@@@cDuVRW@lVMMhrVQjN@zrPThlxPM_@tx@s3
VxzUU@txfvVlhspzsU@@j@@@V__@ztUFet@@N@@@l@@FDjM@rqRz@K@rNRZ@xrtU
ltPH2_@@oTjy@xbIfs@hzkVfqJxzS@kofTrSltp@zULwtwbzKlNtkg_edw@zzzjM
6sYrwVzoG6iMxrwUjV3xb_Djtxzc53A3DOYCXcb4y@3yE3vnof1q@FJRMauVZXoG
FyNhlkSYX@@Mhc59SlsRvzQldNwzV6P5_at@l4DOvi2@tBrbXFC3zmov3pGCuhz@
FcT6VxzUE@txNEDGU@@VWQ5oz@@RM2Pvq0@lcwni6uQlsMwzUF@twLfNhLsJzMRM
C8J_XBvMyhr_V9dmof1sxzIOlNxv@l@tl_@@Iz3pGXmw@@sVbNTCx3yQ@q@tCmzU
fdtxzUx@l@_N@_vs@lW@@@tFz@F@@@TzU@@ztIet_lttx@x@69PM9u@xxN@@@Pj_
3PMLet@Rk@s0@rhbM@@@L_bwF3vXx@@lNF6_xDmtx@l@t@V@@@hiMh@qwd_FspWz
@@znU9uNjMxV36sxl@z@zVx@@NV3O2_t@@z@@@gt@Vt@@@l@@UDjM@rqUz@L@qVv
l_hb@VjcM@roP8FiSY1jtxTztImjl@h_@@VR@zxrzO8Pe1_@z@xlPWVz@B@bVxkz
RjyVhro_jst@@@zOl7I6QWshzh@DFO@z@dzVjTP86YPPW@@V@aXCu@U@Dc59BdCW
wzUlVy@Ty@@@_@F@@tmmBI3y@l@xNBbYVf_B@@wFPtxzOEl@VHcW_@_@NaCezUkb
t_r_C46uzUVhNU_pVk@d@xjdOMF4kmWNa9uxZ_NllUTCB9Gv@B5po0zTbJniCmhz
VFlsxLTU@__@V@z@@@n@l@t@@@1_@@@AdsesxrsJiNQCh4KxTMRll@t@tVd@z@@@
Dgu@@@JlM_l@@lSNA@@NoCmlMwvbC6gSQWxl@UzNV@zJJmz@ll@@@V@llpxJVmVz
plxtMR@txjyVhzFBKnbC9y@shZ@@VH@@Fld@@Vt@@@_@@xz@@lx@FxTwg1_DjMtd
cW@wz@zf6u@_xjo96QjM@jthzgUlspxbUltV@Vlx@@Ek@Ny@@@xl_@VAg1XPPmUj
EB@NwEzt@z_Mx@rxj_Rlz@tVVlMOM6gSoWzU@NrhfVMhsJvzUx@bL2@z@@LEJmQj
M7grVTFNlrnismx@QDjtxz_RsuhVw@uR5_Hhrq@lsp@rQk@s9@RIm@@lcMhVQwd_
@g@wdRMaGom7y@IlxNAz_593Zzsm@@zTBP3S@lMtIkbOMCa7k2@@Dl_@@_hSoGoG
9yNvL@YC1MwrUUiVZvbkDEsZ1V@@__Vz_zxy@R_@@pFz@F@t@TzUl@_tvzdKdGCh
4Cz_@FfU3M@NxNoImxrU7ltxVlNtl_@@NxoQW@@xV@V@@_@@VzTl@xzV@t@@@drQ
jUJhlw_h_hzyV@Ffs0t_@VUiNhdKRGBv4unUFgFZSwi03wz_@i@lVx@@wtpn@@_K
3UWRWlt@_yt6mQj_9@j1wN_kfz@jgMxto_@@R_x4yaMhb@E1RrUjDBE9CR2qNz@L
@rVxltxr@Mlt_K6Si_@@Lt0@Qftsxz_TjNxgvUllov9_@NB9rVjwN@@oVvt@Nz4y
@@VM6Y4V@@V_Vt@z@lxdP1ZzfRG@@7zux3wzUVjtZz@Lt0@t@V_@_t3KzGn_4yZr
QbPn6UltVwh@@Sz@@Y_@@FCxCVrPWN@rwzfaGlt@d@z@R@@@lwxV_N1C7ylMxl8L
1ztzV@qt@_3@@F_23wl__h0oW@@@RzQPzl8zWzMl@mia8i83guw1w@@@H6YX@lzP
hr_@_@B@qw@tNvq6V3MX@@lslwsm@@sBhv@@ZlgGltxjzUf@839nlMgrzY68x_hr
tQ@@BI6usdNJU@@llyBrp2UGjVvjzU@MthzVUlsvfzU@NaO5Jg9Xldx@x5Jm@rQT
BPau@z@tx@@l@@V_p8PWtx@l@@x@83DGh@wll_BDzV@sniqYz_TVVx_@N0QGnU9u
@@llBo7K@rFxl@urJVldtVzslwOeC49cKB1t@@V_lz@rh@@FgZ13NYX@olVtzzs3
NQW@@wxk8VuhkAylh@h@@@tr@nu8b9u@@_lC4Fy@@jMiN2Arw@FBe2lrxzVSoWVw
@V_@@@wz_@z@tJ@qf1wrQjyNhTEs365xTYt@z@ZlIe713y@@@FSf1_c_hJva1lth
rJgnGCB9aPX1Vr9naQ64rf1x6QmbC9uh@wL@tljz@dt7HDmphrVbJOuzRldq@zUc
5Fu@x@VmX4wpoW7HVm@Pltmb6eNh@9oG6EBW1_fthFYIY@@bwwJJmTVlVzf6u@l@
sQzt_zYOutxb_V39wYyXwJnm@_tBh@@V@NUrh0goGf9u@ltVdB3yhrQvjMtb@Vjt
MhCu@hNB@j7MEXaDADmlTkVEi6OjMhprwlk@hlwjMPmzzQjt@@@wJJGx@QzmbCGr
_lVhrDyT_@Nbe1iMh@qQj_xg@w@hE6yzQzg_@@AOM3q@lcdo93U@thxYS3@@@@wT
@@z@@@x@VMJhrMTNaOiFL2_bIFitZzpOdqjo93a_zUPFrxDOsJEnr3hrUhxJvnC4
dSlu3MxfVPjdxb@M2sxrsTlNxnzUlFjF6yJ@@x@@@N@t@VZlCuhMlb@SjKZlRmUz
NJxrUFjNZzKEDmzQ_NAdFu@V@Vhr4IvC1hrQjkMtrzBTNlrw3_s@@L_rwxlMhDbp
JssD1Ul@@p3R0hrwEjkh@_wh_d7E1x@@t_UjyD@@VnlK@txQjsnNgu@l@tx@_lU@
@@KEDGhrRDzN@VrUztJgjXVjsRhrUzkMhrqUjMp@zULVtxbzUFtvXPeOl4y@@0db
iDpG4IbJj4Cx3MxrwTjMxfzUj_iWFRM81Mx@Qd5GbljUFl@xzq_jtRMWgjMhuIx4
cXOcytUO62aOjtw5Ch7PMerMhgqiGKktVzM1adOMQfnNIA3P3@rV_E@pvzVEdZ@v
qlC4yoimZHujPvaVShtx10@@70y@lt@@Qx1txwrxlnP@zA7xtmByUFltuTzcrtuR
rUT@vwuyU@lrg4qxzU8ltxrzUldtxzUeSsxwzUljtx1htx5qU1tFm5S1kWBuy20t
rxzURXG84aG8WGAbEG9288K844Ge8805YWGG4422nGG442YGK4C51X098002n@VD
_6u@@XWG8C22XG8842XWG8CC4WGG8421XGeaG8W22eW2AW2e0K052GeGG8YYXpvS
F7ZnzyUldrnuSQ7ZnmvCE7dnuCSEZpmuCEDZpvuSEdZpuSEEdnOvy@@fxRW@@pPv
SkdcpvSSEdpnvSk7dpviSEdJpvUEEdxvuUktZxvEM7tnezE63ZxOq_xzUzlt@vzU
@d@_zU506uV@ztUztlxzVFz_@zyVz_r@z_Rl_xl7@4y@x@wwl@R105K103yhtVxl
tldtx@d_@zQV@N@ktxzzU@tpxz@xJVLi2WAsyd1_@F@bp@yRE@pn@yFl@pvVyFd@
o@V_D@@@x@@dt@v@@yiIm@@F00;

NOTE "JAM_VERSION" "1.0";
NOTE "ALG_VERSION" "1.5";
INTEGER A0[23] =
791, 237, 253, 261, 273, 281, 293, 317, 791, 791, 791, 791, 15, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95;
INTEGER A1[23] =
3144, 80, 160, 240, 320, 400, 480, 640, 160, 200, 240, 280, 64, 183, 360, 716, 1574, 0, 3144, 183, 360, 716, 1574;
INTEGER A2[23] =
165, 0, 0, 0, 0, 0, 0, 0, 165, 165, 165, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
INTEGER A3[23] =
112, 0, 0, 0, 0, 0, 0, 0, 64, 80, 96, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
INTEGER A4[23] =
648, 0, 0, 0, 0, 0, 0, 0, 504, 552, 600, 648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
INTEGER A5[23] =
3144, 16, 32, 48, 64, 80, 96, 128, 32, 40, 48, 56, 64, 183, 360, 716, 1574, 0, 3144, 183, 360, 716, 1574;
INTEGER A6[23] =
32, 2, 4, 6, 8, 10, 12, 16, 0, 0, 0, 0, 0, 2, 4, 8, 16, 24, 32, 2, 4, 8, 16;
INTEGER A7[23] =
7, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
INTEGER A8[23] =
560, 32, 64, 96, 128, 160, 192, 256, 320, 400, 480, 560, 0, 32, 64, 128, 256, 384, 512, 32, 64, 128, 256;
INTEGER A51[10] =
2, 20, 38, 148, 0, 294, 2, 20, 38, 148;
INTEGER A11[5 * 3 * 22] =
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
98, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
98, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
99, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
99, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
98, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
98, 0, 1, 99, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
98, 0, 1, 99, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
99, 0, 1, 99, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
99, 0, 1, 99, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0;
INTEGER A14[64] =
20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240,
260, 280, 300, 340, 360, 380, 400, 440, 480, 520, 560, 600,
660, 720, 800, 900, 1000, 1300, 1600, 2000,
3, 4, 5, 7, 9, 11, 12, 14, 16, 20, 24, 28,
36, 50, 64, 86, 116, 154, 200, 280, 360, 480, 640, 860,
1140, 1540, 2000, 2800, 3600, 4800, 6400, 8600;
INTEGER A15[16] =
10, 20, 30, 40, 60, 100, 200, 500,
100, 260, 660, 1660, 4200, 10800, 28000, 60000;
INTEGER A54[30] =
65, 255, 76, 255, 84, 255, 69, 255, 82, 255,
65, 255, 32, 0, 32, 0, 0, 0, 16, 31,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0;
' VARIABLES
INTEGER V0 = 1;
INTEGER A12[V0] = 21;
INTEGER A13[V0] = 256 | 4;
INTEGER A25[V0] = 10;
INTEGER V1 = V0 - 1;
INTEGER V2 = 0;
INTEGER V3 = 0;
INTEGER V4 = 256;
INTEGER A17[V0];
INTEGER A48[V0];
INTEGER V85[8];
BOOLEAN b;
INTEGER i;
INTEGER j;
INTEGER k;
INTEGER l;
INTEGER V10;
INTEGER V11;
INTEGER V12;
INTEGER V13;
BOOLEAN A18[10];
INTEGER V89;
INTEGER V87;
INTEGER V18;
INTEGER V19;
INTEGER V20;
INTEGER V88;
INTEGER V23;
INTEGER V24;
INTEGER V25;
INTEGER V26;
INTEGER V27;
INTEGER V28;
INTEGER V29 = 1;
INTEGER A16[15];
INTEGER V30;
INTEGER V31;
INTEGER V32 = 0;
INTEGER V33 = 0;
INTEGER V34 = 1;
INTEGER V35 = 0;
INTEGER V36 = 0;
INTEGER V37 = 0;
INTEGER V38 = 0;
INTEGER V72 = 0;
INTEGER V73 = 0;
BOOLEAN V39 = 0;
BOOLEAN V40 = 0;
INTEGER V41 = 0;
INTEGER V42 = 0;
BOOLEAN V43 = 0;
BOOLEAN V44 = 0;
BOOLEAN V45 = 0;
INTEGER V46;
INTEGER V47;
INTEGER V48;
BOOLEAN V49 = 0;
INTEGER V51 = -1;
INTEGER V52 = -1;
BOOLEAN V74 = 0;
BOOLEAN V75 = 0;
BOOLEAN V56 = 0;
INTEGER V83 = 5;
INTEGER V84 = 0;
INTEGER V86 = 0;
BOOLEAN V91 = 0;
INTEGER V68 = 0;
INTEGER V69 = 1;
BOOLEAN DO_ERASE = 0;
BOOLEAN DO_BLANKCHECK = 0;
BOOLEAN DO_PROGRAM = 0;
BOOLEAN DO_VERIFY = 0;
BOOLEAN DO_READ_UES = 0;
BOOLEAN DO_READ_USERCODE = 0;
BOOLEAN DO_SECURE = 0;
BOOLEAN DO_SECURE_ALL = 0;
BOOLEAN ALWAYS_RELOAD_DR = 1;
BOOLEAN USE_EXTEND_IR_DELAY_METHOD = 0;
BOOLEAN USE_FIXED_ALGORITHM = 0;
L0:
CALL L6;
LET V4 = 256;
CALL L26;
IF (V2 == 0) THEN GOTO L1;
IF (V42 == 0) THEN CALL L107;
IF ((V42 == 0) && DO_ERASE) THEN CALL L73;
IF ((V42 == 0) && DO_BLANKCHECK) THEN CALL L93;
IF ((V42 == 0) && DO_PROGRAM) THEN CALL L57;
IF ((V42 == 0) && DO_VERIFY) THEN CALL L79;
IF ((V42 == 0) && DO_SECURE) THEN CALL L252;
IF ((V42 == 0) && DO_PROGRAM) THEN CALL L58;
L1:
IF ((V42 == 0) && DO_READ_USERCODE) THEN CALL L35;
CALL L21;
EXIT V42;
L6:
INTEGER V90 = 0;
IF (DO_PROGRAM) THEN LET DO_ERASE = 1;
IF (DO_SECURE_ALL) THEN LET DO_SECURE = 1;
IF ((DO_ERASE || DO_BLANKCHECK) && !DO_PROGRAM &&
(DO_VERIFY || DO_SECURE)) THEN LET V42 = 1;
IF (V42 != 0) THEN GOTO L16;
LET V88 = 0;
FOR i = 0 TO V1;
LET j = 1;
LET k = 1;
IF (((A13[i] & 256) == 0) ||
((A13[i] & 4) == 0)) THEN GOTO L7;
LET V2 = A12[i];
LET j = A1[V2];
LET k = A5[V2];
L7:
LET V88 = V88 + j;
LET V90 = V90 + k;
NEXT i;
LET V87 = 0;
FOR i = 0 TO V1;
LET j = 1;
IF (((A13[i] & 256) == 0) ||
((A13[i] & 4) == 0)) THEN GOTO L13;
LET V2 = A12[i];
LET j = A0[V2];
L13:
LET V87 = V87 + j;
NEXT i;
LET V18 = V87;
BOOLEAN A28[V18];
LET V19 = V18;
IF (V88 > V19) THEN LET V19 = V88;
BOOLEAN A29[V19];
BOOLEAN A30[V19];
FOR i = 0 TO (V19 - 1);
LET A30[i] = 1;
NEXT i;
LET V20 = V90;
BOOLEAN A31[V20];
BOOLEAN A57[V20];
LET V12 = 0;
LET V13 = 0;
FOR i = 0 TO V1;
LET V12 = V12 + A25[i];
IF (A25[i] > V13) THEN LET V13 = A25[i];
NEXT i;
BOOLEAN A32[V12 + 50];
BOOLEAN A39[V13];
BOOLEAN A33[V13];
FOR i = 0 TO (V13 - 1);
LET A39[i] = 1;
NEXT i;
INTEGER A52[V0];
FOR i = 0 TO V1;
LET A52[i] = 0;
IF (((A13[i] & 256) == 0) ||
((A13[i] & 4) == 0)) THEN GOTO L14;
LET V2 = A12[i];
LET A52[i] =
A5[V2] - (80 * A6[V2]);
L14:
NEXT i;
CALL L30;
IRSTOP IRPAUSE;
DRSTOP IDLE;
STATE IDLE;
LET A18[0..9] = 0332;
LET V4 = 256;
CALL L267;
WAIT 10000 USEC;
L16:
RETURN;
L21:
IF (V42 == 1) THEN GOTO L22;
IF (DO_READ_USERCODE) THEN GOTO L22;
CALL L31;
LET A18[0..9] = 006;
CALL L267;
WAIT 10000 USEC;
LET A18[0..9] = 03FF;
CALL L267;
STATE IDLE;
L22:
IF (V42 == 0) THEN
PRINT "DONE";
IF (V42 == 1) THEN
PRINT "Invalid option combination specified";
IF (V42 == 2) THEN
PRINT "Unrecognized device";
IF (V42 == 3) THEN
PRINT "Device revision is not supported";
IF (V42 == 4) THEN
PRINT "Device programming failure";
IF (V42 == 5) THEN
PRINT "Device is not blank";
IF (V42 == 6) THEN
PRINT "Device verify failure";
IF (V42 == 8) THEN
PRINT "Unable to read USERCODE/UES from device #", V84 + 1;
RETURN;
L26:
LET j = 0;
FOR i = 0 TO V1;
IF ((j <= V3) &&
((A13[i] & V4) != 0) &&
((A13[i] & 4) != 0)) THEN LET j = i + 1;
NEXT i;
IF (j > V3) THEN GOTO L27;
LET V2 = 0;
LET V3 = 0;
GOTO L28;
L27:
LET V2 = A12[j - 1];
LET V3 = j;
L28:
RETURN;
L30:
CALL L31;
IF (V32 == 0) THEN CALL L265;
LET V10 = 0;
LET V89 = 0;
LET V49 = 1;
LET V34 = 0;
LET V29 = 1;
IF (DO_PROGRAM) THEN LET V29 = 0;
IF (DO_ERASE && V74) THEN LET V29 = 2;
RETURN;
L31:
FOR i = 0 TO V1;
LET A17[i] = (A13[i] | A48[i]);
NEXT i;
RETURN;
L35:
LET j = 0;
LET k = V1;
LET V84 = V84 - 1;
IF (V84 == -1) THEN GOTO L37;
IF ((V84 < 0) || (V84 > V1) ||
((A17[V1 - V84] & 256) == 0)) THEN
LET V42 = 8;
IF (V42 != 0) THEN GOTO L38;
L36:
LET j = V84;
LET k = V84;
L37:
CALL L31;
LET A18[0..9] = 006;
CALL L267;
WAIT 10000 USEC;
LET A18[0..9] = 03FF;
CALL L267;
STATE IDLE;
FOR i = j TO k;
LET V84 = i;
PUSH i; PUSH j; PUSH k;
CALL L31;
LET V86 = 0;
IF (((A17[V1 - V84] & 256) != 0) &&
((A17[V1 - V84] & 4) != 0)) THEN
CALL L39;
POP k; POP j; POP i;
NEXT i;
L38:
RETURN;
L39:
LET V4 = 256;
LET A18[0..9] = 007;
CALL L267;
LET j = V1 - V84;
FOR i = 0 TO V1;
IF (((A17[i] & 256) != 0) && ((A17[i] & 4) != 0) &&
(i != j)) THEN LET A17[i] = A17[i] | 8;
NEXT i;
CALL L278;
L40:
DRSCAN 32 + j, A30[0..(32 + j - 1)], CAPTURE A31[0..(32 + j - 1)];
FOR i = 0 TO 31;
IF (A31[i + j]) THEN
LET V86 = V86 | (1 << i);
NEXT i;
CALL L41;
RETURN;
L41:
EXPORT "USERCODE", V86;
FOR i = 0 TO 7;
LET V27 = 0;
LET V85[i] = V86 & 15;
IF (V85[i] > 9) THEN LET V27 = 7;
LET V85[i] = V85[i] + 48 + V27;
LET V86 = V86 >> 4;
NEXT i;
PRINT "Device #", V84 + 1, " USERCODE code is ",
CHR$(V85[7]), CHR$(V85[6]),
CHR$(V85[5]), CHR$(V85[4]),
CHR$(V85[3]), CHR$(V85[2]),
CHR$(V85[1]), CHR$(V85[0]);
RETURN;
L57:
PRINT "programming 7KAE/3KA device(s)...";
CALL L30;
LET V11 = 2;
CALL L214;
LET A18[0..9] = 012;
LET V91 = 1;
CALL L267;
LET V91 = 0;
FOR V10 = 2 TO 94;
CALL L239;
NEXT V10;
RETURN;
L58:
CALL L30;
LET V11 = 0;
CALL L214;
LET A18[0..9] = 012;
LET V91 = 1;
CALL L267;
LET V91 = 0;
LET V75 = 1;
CALL L239;
LET V75 = 0;
RETURN;
L252:
IF (DO_SECURE == 0) THEN GOTO L257;
CALL L30;
FOR i = 0 TO V1;
IF (((A17[i] & V4) == 0) ||
((A17[i] & 4) == 0)) THEN GOTO L253;
IF ((A17[i] & 16) == 0) THEN
LET A17[i] = A17[i] | 8;
IF ((A17[i] & 16) != 0) THEN
LET V75 = 1;
L253:
NEXT i;
IF (!DO_SECURE_ALL && (V75 == 0)) THEN
GOTO L257;
IF (DO_SECURE_ALL && (V75 == 0)) THEN
GOTO L254;
CALL L278;
LET V11 = 1;
CALL L214;
LET b = 0;
CALL L294;
LET A18[0..9] = 012;
LET V91 = 1;
CALL L267;
LET V91 = 0;
LET V44 = 1;
CALL L239;
LET b = 1;
CALL L294;
L254:
IF (!DO_SECURE_ALL) THEN GOTO L257;
LET A18[0..9] = 03FF;
CALL L267;
CALL L30;
LET V75 = 0;
FOR i = 0 TO V1;
IF (((A17[i] & V4) == 0) ||
((A17[i] & 4) == 0)) THEN GOTO L256;
IF ((A17[i] & 16) != 0) THEN GOTO L255;
LET A17[i] = A17[i] | 16;
LET V75 = 1;
GOTO L256;
L255:
LET A17[i] = A17[i] & ~16;
LET A17[i] = A17[i] | 8;
L256:
NEXT i;
IF (V75 == 0) THEN GOTO L257;
CALL L278;
LET V11 = 1;
CALL L214;
LET b = 0;
CALL L294;
LET A18[0..9] = 012;
LET V91 = 1;
CALL L267;
LET V91 = 0;
LET V44 = 1;
CALL L239;
LET b = 1;
CALL L294;
L257:
LET V75 = 0;
LET V44 = 0;
RETURN;
L73:
LET A18[0..9] = 00A;
CALL L267;
WAIT (V38 * 1000) USEC;
RETURN;
L79:
INTEGER V92 = 0;
IF (V74) THEN PRINT "blank checking 7KAE/3KA device(s)...";
IF (!V74) THEN PRINT "verifying 7KAE/3KA device(s)...";
L80:
CALL L30;
IF (V92 == 1) THEN LET V29 = 2;
LET V11 = 2;
CALL L214;
IF (V29 != 0) THEN GOTO L81;
LET A18[0..9] = 01E;
L81:
IF (V29 != 1) THEN GOTO L82;
LET A18[0..9] = 016;
L82:
IF (V29 != 2) THEN GOTO L83;
LET A18[0..9] = 01A;
L83:
CALL L267;
LET V45 = 1;
FOR V10 = 2 TO 6;
CALL L169;
NEXT V10;
IF (V42 != 0) THEN GOTO L84;
LET V45 = 0;
FOR V10 = 7 TO 94;
CALL L169;
NEXT V10;
IF (!DO_PROGRAM || (V29 != 0)) THEN
GOTO L84;
LET V92 = 1;
GOTO L80;
L84:
RETURN;
L93:
LET V74 = 1;
CALL L79;
LET V74 = 0;
RETURN;
L107:
CALL L30;
LET V37 = 300;
LET V38 = 100;
LET V29 = 1;
LET V11 = 1;
CALL L214;
LET A18[0..9] = 016;
CALL L267;
LET V34 = 1;
IF (USE_FIXED_ALGORITHM) THEN GOTO L108;
CALL L169;
GOTO L109;
L108:
FOR i = 0 TO V20 - 1;
LET A31[i] = 0;
LET A57[i] = 0;
NEXT i;
L109:
FOR i = V1 TO 0 STEP -1;
LET A48[i] = 0;
IF (((A17[i] & 256) == 0) ||
((A17[i] & 4) == 0)) THEN GOTO L118;
LET V68 = 0;
FOR j = 0 TO i;
LET V26 = 0;
LET V2 = A12[j];
IF (i == j) THEN GOTO L110;
LET V26 = 1;
IF (((A17[j] & 256) == 0) ||
((A17[j] & 4) == 0)) THEN GOTO L110;
LET V26 = A5[V2];
L110:
LET V68 = V68 + V26;
NEXT j;
FOR j = 0 TO 14;
LET A16[j] = 0;
LET V46 = A6[V2];
LET V47 = j / (V46 << 1);
LET V48 = (j % (V46 << 1)) >> 1;
LET V69 = 1;
CALL L302;
IF (V48 < (V46 >> 1)) THEN GOTO L111;
LET V69 = 0;
LET V48 = V46 - V48 - 1;
L111:
LET V27 = V68 +
(V69 * ((80 * (V46 >> 1)) + A52[i])) +
(80 * V48) + (40 * (~j & 1)) + (4 - V47);
FOR k = 0 TO 7;
IF (USE_FIXED_ALGORITHM) THEN GOTO L112;
IF (A31[V27 + (5 * k)]) THEN
LET A16[j] = A16[j] | (1 << k);
GOTO L113;
L112:
IF ((A54[j << 1] & (1 << k)) != 0) THEN
LET A31[V27 + (5 * k)] = 1;
IF ((A54[(j << 1) + 1] & (1 << k)) != 0) THEN
LET A57[V27 + (5 * k)] = 1;
L113:
NEXT k;
IF (USE_FIXED_ALGORITHM) THEN
LET A16[j] = A54[j << 1];
NEXT j;
IF (!USE_FIXED_ALGORITHM) THEN GOTO L114;
PUSH i;
CALL L169;
POP i;
IF (V39) THEN LET V42 = 2;
L114:
IF ((A16[0] != 65) ||
(A16[1] != 76) ||
(A16[2] != 84) ||
(A16[3] != 69) ||
(A16[4] != 82) ||
(A16[5] != 65))
THEN LET V42 = 2;
IF (V42 != 0) THEN GOTO L118;
LET V35 = ((A16[6] - 48) * 10) + (A16[7] - 48);
LET V36 = A16[9] & 31;
LET V27 = 5 * 3 * (V2 - 1);
LET V40 = 0;
LET V72 = 300;
LET V73 = 100;
IF ((V36 & 24) == 16) THEN
LET V40 = 1;
FOR j = 0 TO (5 - 1);
IF (V40 ||
(V35 != A11[V27]) ||
(V36 != A11[V27 + 1])) THEN
GOTO L117;
LET V40 = 1;
IF ((A11[V27 + 2] & 1) != 1) THEN
GOTO L115;
LET V72 = A14[A16[8] & 31];
LET V73 = A15[(A16[8] >> 5) & 7];
L115:
IF ((A11[V27 + 2] & 2) != 2) THEN
GOTO L116;
LET k = 14;
IF ((V2 == 14) || (V2 == 20)) THEN LET k = 11;
LET V72 = A14[((A16[k] >> 3) & 31) + 32];
LET V73 = A15[(A16[k] & 7) + 8];
L116:
IF ((A11[V27 + 2] & 4) != 4) THEN
GOTO L117;
LET V72 = 500;
LET V73 = 500;
L117:
LET V27 = V27 + 3;
NEXT j;
LET V27 = 0;
IF ((V36 & 15) > 9) THEN LET V27 = 7;
PRINT "Device #", V0 - i ," Silicon ID is ",
CHR$(A16[0]), CHR$(A16[1]), CHR$(A16[2]), CHR$(A16[3]),
CHR$(A16[4]), CHR$(A16[5]), CHR$(A16[6]), CHR$(A16[7]),
"(", CHR$(((V36 >> 4) & 1) + 48),
CHR$((V36 & 15) + 48 + V27), ")"
;
IF (V72 > V37) THEN LET V37 = V72;
IF (V73 > V38) THEN LET V38 = V73;
IF (!V40) THEN LET V42 = 3;
L118:
NEXT i;
RETURN;
L165:
IF (V34 == 0) THEN GOTO L166;
IF (!USE_FIXED_ALGORITHM) THEN
DRSCAN V24, A30[0..(V24 - 1)], CAPTURE A31[V30..V31];
IF (USE_FIXED_ALGORITHM) THEN
DRSCAN V24, A30[0..(V24 - 1)], COMPARE A31[V30..V31],
A57[V30..V31], V40;
GOTO L168;
L166:
IF (V74) THEN GOTO L167;
DRSCAN V24, A30[0..(V24 - 1)], COMPARE A50[V30..V31],
A30[0..(V24 - 1)], V40;
GOTO L168;
L167:
DRSCAN V24, A30[0..(V24 - 1)],
COMPARE A30[0..(V24 - 1)], A30[0..(V24 - 1)],
V40;
L168:
IF (!V40) THEN LET V39 = 1;
RETURN;
L169:
LET V39 = 0;
LET V40 = 1;
IF (V49) THEN CALL L278;
IF (V34 == 1) THEN GOTO L170;
LET V30 = V89;
LET V31 = V30 + (V24 - 1);
GOTO L171;
L170:
LET V30 = 0;
LET V31 = V24 - 1;
L171:
IF (!V45) THEN GOTO L172;
LET b = 0;
CALL L294;
L172:
CALL L165;
IF (!V45) THEN GOTO L173;
LET b = 1;
CALL L294;
L173:
LET V89 = V89 + V24;
IF (!V39 || (V34 == 1)) THEN
GOTO L174;
IF (V74) THEN LET V42 = 5;
IF (!V74) THEN LET V42 = 6;
L174:
RETURN;
L214:
LET V30 = 0;
FOR j = 0 TO V1;
LET V31 = V30;
IF (((A17[j] & 256) == 0) ||
((A17[j] & 4) == 0) ||
((A17[j] & 8) != 0)) THEN GOTO L216;
LET V2 = A12[j];
IF (V11 >= A0[V2]) THEN GOTO L215;
LET V31 = V31 + (A0[V2] - 1);
LET A28[V31 - V11] = 1;
GOTO L216;
L215:
IF ((A17[j] & 8) == 0) THEN LET V49 = 1;
LET A17[j] = A17[j] | 8;
L216:
LET V30 = V31 + 1;
NEXT j;
LET A18[0..9] = 00E;
CALL L267;
DRSCAN V30, A28[0..(V30 - 1)];
LET V30 = 0;
FOR j = 0 TO V1;
LET V31 = V30;
LET V2 = A12[j];
IF (((A17[j] & 256) == 0) ||
((A17[j] & 4) == 0) ||
((A17[j] & 8) != 0)) THEN GOTO L217;
LET V31 = V31 + (A0[V2] - 1);
LET A28[V31 - V11] = 0;
L217:
LET V30 = V31 + 1;
NEXT j;
LET V10 = V11;
RETURN;
L239:
LET V30 = V89;
IF (V49) THEN CALL L278;
LET V31 = V30 + (V23 - 1);
IF (V75) THEN GOTO L240;
DRSCAN V23, A50[V30..V31];
GOTO L241;
L240:
IF (V44) THEN DRSCAN V23, A30[0..(V23 - 1)];
IF (!V44) THEN DRSCAN V23, A29[0..(V23 - 1)];
L241:
WAIT (V37 * 100) USEC;
LET V89 = V89 + V23;
RETURN;
L265:
FOR i = 0 TO V1;
LET V2 = A12[i];
IF (((A17[i] & 256) != 0) &&
((A17[i] & 4) != 0)) THEN
IF (A0[V2] > V32) THEN
LET V32 = A0[V2];
NEXT i;
RETURN;
L267:
LET V41 = 0;
LET V27 = 0;
IF (!V56) THEN GOTO L268;
LET V56 = 0;
LET V41 = 50;
IF (!USE_EXTEND_IR_DELAY_METHOD) THEN GOTO L268;
LET V27 = 50;
LET A32[0..49] = A30[0..49];
L268:
FOR i = 0 TO V1;
IF ((A17[i] & 8) != 0) THEN GOTO L269;
IF (((A17[i] & V4) != 0) &&
((A17[i] & 4) != 0)) THEN GOTO L270;
LET A33[0..(A25[i] - 1)] = A39[0..(A25[i] - 1)];
LET A32[V27..(V27 + (A25[i] - 1))] = A33[0..(A25[i] - 1)];
LET V27 = V27 + A25[i];
GOTO L271;
L269:
LET A32[V27..(V27 + 9)] = 03FF;
LET V27 = V27 + 10;
GOTO L271;
L270:
LET A32[V27..(V27 + 9)] = A18[0..9];
LET V27 = V27 + 10;
L271:
NEXT i;
IF ((V41 == 0) || USE_EXTEND_IR_DELAY_METHOD) THEN
GOTO L272;
STATE DRPAUSE;
WAIT DRPAUSE, 5 USEC, DRPAUSE;
L272:
IRSCAN V27, A32[0..(V27 - 1)];
WAIT IRPAUSE, V83 USEC, IRPAUSE;
IF (V91) THEN GOTO L273;
STATE IDLE;
WAIT 3 CYCLES;
L273:
RETURN;
L278:
LET V23 = 0;
LET V24 = 0;
FOR i = 0 TO (V19 - 1);
LET A30[i] = 1;
NEXT i;
FOR i = 0 TO V1;
LET V25 = 1;
LET V26 = 1;
IF (((A17[i] & 256) == 0) ||
((A17[i] & 4) == 0) ||
((A17[i] & 8) != 0)) THEN GOTO L279;
LET V2 = A12[i];
LET V25 = A1[V2];
LET V26 = A5[V2];
GOTO L280;
L279:
IF (V74) THEN LET A30[V24] = 0;
L280:
LET V23 = V23 + V25;
LET V24 = V24 + V26;
NEXT i;
LET V49 = 0;
RETURN;
L294:
LET j = 0;
LET l = 0;
IF (V75) THEN LET l = 1;
FOR i = 0 TO V1;
LET k = j;
IF (((A17[i] & 256) == 0) ||
((A17[i] & 4) == 0)) THEN GOTO L295;
LET V2 = A12[i];
LET k = k + (A5[V2] - 1);
LET V27 = (80 * (A6[V2] >> 1)) + A52[i] -
A51[V2 - 13] - 1 + l;
LET A30[V27 + j] = b;
L295:
LET j = k + 1;
NEXT i;
RETURN;
L302:
INTEGER V93 = V48;
IF ((V2 != 16) && (V2 != 17) && (V2 != 18) && (V2 != 22)) THEN GOTO L303;
LET V93 = V93 >> 1;
IF (((V48 & 3) % 3) != 0) THEN
LET V93 = V93 | (A6[V2] >> 2);
L303:
LET V48 = V93;
RETURN;
' END OF FILE
CRC C04F;
