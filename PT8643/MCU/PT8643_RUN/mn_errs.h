//-----------------------------------------------------------------------------
// mn_errs.h
//-----------------------------------------------------------------------------
// Copyright 2006 Silicon Laboratories, Inc.
//
// Description:
// 	This file contains error code constants defined by the TCP/IP Stack.
//
// Generated by TCP/IP Configuration Wizard Version 3.23.
//

#ifndef  MN_ERRS_H
#define  MN_ERRS_H   1

#include "mn_userconst.h"
#include "mn_stackconst.h"

//-----------------------------------------------------------------------------
// Error Codes
//-----------------------------------------------------------------------------
//
// These error codes are returned by functions in the stack when a failure or
// error occurs.
//

#define NOT_ENOUGH_SOCKETS       -128     // 0xFF80
#define SOCKET_ALREADY_EXISTS    -127     // 0xFF81
#define NOT_SUPPORTED            -126     // 0xFF82
#define PPP_OPEN_FAILED          -125     // 0xFF83
#define TCP_OPEN_FAILED          -124     // 0xFF84
#define BAD_SOCKET_DATA          -123     // 0xFF85
#define SOCKET_NOT_FOUND         -122     // 0xFF86
#define SOCKET_TIMED_OUT         -121     // 0xFF87
#define BAD_IP_HEADER            -120     // 0xFF88
#define NEED_TO_LISTEN           -119     // 0xFF89
#define RECV_TIMED_OUT           -118     // 0xFF8A
#define ETHER_INIT_ERROR         -117     // 0xFF8B
#define ETHER_SEND_ERROR         -116     // 0xFF8C
#define ETHER_RECV_ERROR         -115     // 0xFF8D
#define NEED_TO_SEND             -114     // 0xFF8E
#define UNABLE_TO_SEND           -113     // 0xFF8F
#define VFILE_ENTRY_IN_USE       -112     // 0xFF90
#define TFTP_FILE_NOT_FOUND      -111     // 0xFF91
#define TFTP_NO_FILE_SPECIFIED   -110     // 0xFF92
#define TFTP_FILE_TOO_BIG        -109     // 0xFF93
#define TFTP_FAILED              -108     // 0xFF94
#define SMTP_ALREADY_OPEN        -107     // 0xFF95
#define SMTP_OPEN_FAILED         -106     // 0xFF96
#define SMTP_NOT_OPEN            -105     // 0xFF97
#define SMTP_BAD_PARAM_ERR       -104     // 0xFF98
#define SMTP_ERROR               -103     // 0xFF99
#define NEED_TO_EXIT             -102     // 0xFF9A
#define FTP_FILE_MAXOUT          -101     // 0xFF9B
#define DHCP_ERROR               -100     // 0xFF9C
#define DHCP_LEASE_EXPIRED       -99      // 0xFF9D
#define PPP_LINK_DOWN            -98      // 0xFF9E
#define GET_FUNC_ERROR           -97      // 0xFF9F
#define FTP_SERVER_DOWN          -96      // 0xFFA0
#define ARP_REQUEST_FAILED       -95      // 0xFFA1
#define NEED_IGNORE_PACKET       -94      // 0xFFA2
#define TASK_DID_NOT_START       -93      // 0xFFA3
#define DHCP_LEASE_RENEWING      -92      // 0xFFA4
#define IGMP_ERROR               -91      // 0xFFA5
#define MN_INIT_ERROR            -90      // 0xFFA6
#define MN_VERIFY_ERROR          -89      // 0xFFA7
#define INVALID_DUPLEX_MODE      -88      // 0xFFA8
#define INVALID_MAC_ADDRESS      -87      // 0xFFA9
#define AUTO_NEG_FAIL            -86      // 0xFFAA
#define LINK_FAIL                -85      // 0xFFAB
#define DNS_ID_ERROR             -75      // 0xFFB5
#define DNS_OPCODE_ERROR         -74      // 0xFFB6
#define DNS_RCODE_ERROR          -73      // 0xFFB7
#define DNS_COUNT_ERROR          -72      // 0xFFB8
#define DNS_TYPE_ERROR           -71      // 0xFFB9
#define DNS_CLASS_ERROR          -70      // 0xFFBA
#define DNS_NOT_FOUND            -69      // 0xFFBB
#define DNS_BUFFER_OVERFLOW      -68      // 0xFFBC

// TCP error codes
#define TCP_ERROR       -1
#define TCP_TOO_LONG    -2
#define TCP_BAD_HEADER  -3
#define TCP_BAD_CSUM    -4
#define TCP_BAD_FCS     -5
#define TCP_NO_CONNECT  -6

// UDP error codes
#define UDP_ERROR       -1
#define UDP_BAD_CSUM    -4
#define UDP_BAD_FCS     -5

//-----------------------------------------------------------------------------
// Error Messages
//-----------------------------------------------------------------------------
//
// These error messages will be given at compilation if invalid values are
// selected for constants.
// 

#if (num_sockets < 2)
#error At least two sockets are required when using ARP or PING
#endif

#if (num_sockets < 1 || num_sockets > 127)
#error Number of sockets must be between 1 and 127
#endif

#if (recv_buff_size < 64)
#error recv_buff_size is too small!
#endif

#if (xmit_buff_size < 64)
#error xmit_buff_size is too small!
#endif

#if (tcp_window > recv_buff_size)
#error tcp_window too large for buffers
#endif

#if (arp_cache_size < 1 || arp_cache_size > 255)
#error Invalid arp_cache_size
#endif

#if ((device_id != C8051F340) && (c8051f340_usb_fifo == 1))
#error USB FIFO space can only be used as TX buffer on the C8051F340
#endif

#endif   // MN_ERRS_H