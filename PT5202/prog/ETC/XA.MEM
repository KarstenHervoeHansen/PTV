/**************************************************************************
**
**      FILE        :  @(#)xa.mem	1.7
**
**      VERSION     :  97/10/29
**
**      DESCRIPTION :  External memory description for XA
**
**      COPYRIGHT   :  1997 TASKING, Inc.
**
**************************************************************************/

//	This part specifies where external ROM and RAM is.
//
//	The following macros are used (set by EDE or user include file):
//	
//	_X_DATA_RAM	specify DATA RAM area(s): chip-name, start address, size
//	_X_CODE_ROM	specify CODE ROM area(s): chip-name, start address, size
//
//	Next is not available for unified code and data bus
//	_X_DATA_ROM	specify DATA ROM area(s): chip-name, start address, size 

//	Set default end address of external code, external ram data and
//	external rom data.
//
#ifndef EDE
#ifdef _UNIFIED_BUS
#ifndef _ECODE
#define	_ECODE		0x7FFF	// assume end address first 32k
#endif
#ifndef _ERAMDATA
#define _ERAMDATA	0xFFFF	// assume end address first segment
#endif
#else
#ifndef _ECODE
#define	_ECODE		0xFFFF	// assume end address first segment
#endif
#ifndef _ERAMDATA
#define _ERAMDATA	0xFFFF	// assume end address first segment
#endif				
#ifndef _EROMDATA
#define _EROMDATA	0xFFFF	// assume end address first segment
#endif
#endif
#endif
 
memory {

#ifdef _UNIFIED_BUS
	/////////////////////////////////////////////////////////
	//
	// external_data_bus
	//
	bus external_data_bus {
		mau 8;
		map src=0 size=_ARANGE dst=0 bus=external_unified_bus;
	}

	/////////////////////////////////////////////////////////
	//
	// external_code_bus
	//
	bus external_code_bus {
		mau 8;
		map src=0 size=_ARANGE dst=0 bus=external_unified_bus;
	}

#define _X_DATA_RAM(_name,_start,_end) mem addr=_start chips=_name;
#define _X_CODE_ROM(_name,_start,_end) mem addr=_start-_ICODE chips=_name;

	/////////////////////////////////////////////////////////
	//
	// external_unified_bus
	//
	bus external_unified_bus {
		mau 8;
#ifdef EDE
#include EDE	// User include file or generated by EDE: <project>.i 
#else
		// Default if you are not using EDE or a user include file
		_X_CODE_ROM(x_code,_ICODE,_ECODE)
		_X_DATA_RAM(x_ram_data,(_ECODE+1),_ERAMDATA)
#endif
	}

#undef	_X_DATA_RAM
#undef	_X_CODE_ROM
#define _X_DATA_RAM(_name,_start,_end)  chips _name attr=w mau=8 size=(_end-_start)+1;
#define _X_CODE_ROM(_name,_start,_end)  chips _name attr=r mau=8 size=(_end-_start)+1;

	/////////////////////////////////////////////////////////
	//
	// chips
	//
#ifdef EDE
#include EDE	// User include file or generated by EDE: <project>.i 
#else
		// Default if you are not using EDE or a user include file
		_X_CODE_ROM(x_code,_ICODE,_ECODE)
		_X_DATA_RAM(x_ram_data,(_ECODE+1),_ERAMDATA)
#endif

#else		// _UNIFIED_BUS

#define _X_DATA_RAM(_name,_start,_end) mem addr=_start chips=_name;
#define _X_DATA_ROM(_name,_start,_end) mem addr=_start chips=_name;
#define _X_CODE_ROM(_name,_start,_end)

	/////////////////////////////////////////////////////////
	//
	// external_data_bus
	//
	bus external_data_bus {
		mau 8;
#ifdef EDE
#include EDE	// User include file or generated by EDE: <project>.i 
#else
		// Default if you are not using EDE or a user include file
		_X_DATA_RAM(x_ram_data,0x0,_ERAMDATA)
		_X_DATA_ROM(x_rom_data,(_ERAMDATA+1),_EROMDATA)
#endif
	}

#undef	_X_DATA_RAM
#undef	_X_DATA_ROM
#undef	_X_CODE_ROM
#define _X_DATA_RAM(_name,_start,_end)
#define _X_DATA_ROM(_name,_start,_end)
#define _X_CODE_ROM(_name,_start,_end) mem addr=_start-_ICODE chips=_name;

	/////////////////////////////////////////////////////////
	//
	// external_code_bus
	//
	bus external_code_bus {
		mau 8;
#ifdef EDE
#include EDE	// User include file or generated by EDE: <project>.i 
#else
		// Default if you are not using EDE or a user include file
		_X_CODE_ROM(x_code,_ICODE,_ECODE)
#endif
	}

#undef	_X_DATA_RAM
#undef	_X_DATA_ROM
#undef	_X_CODE_ROM
#define _X_DATA_RAM(_name,_start,_end)  chips _name attr=w mau=8 size=_end-_start+1;
#define _X_DATA_ROM(_name,_start,_end)  chips _name attr=r mau=8 size=_end-_start+1;
#define _X_CODE_ROM(_name,_start,_end)  chips _name attr=r mau=8 size=_end-_start+1;

	/////////////////////////////////////////////////////////
	//
	// chips
	//
#ifdef EDE
#include EDE	// User include file or generated by EDE: <project>.i 
#else
		// Default if you are not using EDE or a user include file
		_X_DATA_RAM(x_ram_data,0x0,_ERAMDATA)
		_X_DATA_ROM(x_rom_data,(_ERAMDATA+1),_EROMDATA)
		_X_CODE_ROM(x_code,_ICODE,_ECODE)
#endif

#endif		// _UNIFIED_BUS
}
