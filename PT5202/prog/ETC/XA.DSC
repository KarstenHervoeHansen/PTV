/**************************************************************************
**      This file was received from KEN 21.03.2001
**
**      FILE        :  @(#)xa.dsc	1.9
**
**      VERSION     :  97/11/21
**
**      DESCRIPTION :  software description for XA processor
**
**      COPYRIGHT   :  1997 TASKING, Inc.
**
**************************************************************************/
#ifdef EDE
#include EDE			// User include file or generated by EDE as: <project>.i 
#endif

#ifndef _REGSFR
#define _REGSFR regxag3.dat	// default SFR's of XA-G3
#endif

#ifndef _ICODE
#define	_ICODE	0x8000		// default for XA-G3
#endif

#ifndef	_IRAM
#define	_IRAM	0x200		// default for XA-G3
#endif

//	Page Zero mode is supported by memory model tiny and small
//	Large Memory mode is supported by memory model medium and large
//
#ifndef _ZPAGE
#define _ZPAGE	1		// assume Page Zero mode
#endif

#ifndef _XMEM
#define	_XMEM	1		// assume some external memory specified by default
#endif

#ifndef _RESET_VECTOR
#define _RESET_VECTOR	0x0	// default use CPU reset vector
#endif

#ifndef _XVWBUF
#define _XVWBUF		0x8	// Buffer for CrossView Pro: strings in target memory
#endif

software {
	layout {
#if _XMEM
		space XA_short {
			block xshort {
				cluster ram_short_clstr {
					amode xshort {
						section selection=w;
					}
#ifdef _XSORDER
					amode xshort {
#define _XSHORT(a)				section a;
#include EDE
#undef _XSHORT
					}
#endif
				}
			}
		}
#endif
		space XA_data {
			block data {
				cluster ram_data_clstr {
					attribute w;
					amode bitaddr {
						section selection=w;
					}
#ifdef _BAORDER
					amode bitaddr {
#define _BITADDR(a)				section a;
#include EDE
#undef _BITADDR
					}
#endif
					amode bit {
						section selection=w;
					}
#ifdef _BORDER
					amode bit {
#define _BIT(a)					section a;
#include EDE
#undef _BIT
					}
#endif
					amode data {
						section selection=w;
						// needed for CrossView Pro XA debugger
						// set length to 0 when using other debugger (e.g. ICE)
						reserved label=xvwbuffer length=_XVWBUF;
#ifdef _MODEL_TINY
#ifndef _HEAP_LC
	#ifndef	_HEAP_SZ
						heap;
	#else
						heap length=_HEAP_SZ;
	#endif
#else
	#ifndef	_HEAP_SZ
						error;	// not allowed
	#else
					}
					amode data {
						heap addr=_HEAP_LC length=_HEAP_SZ;
	#endif
#endif
#endif
					}
#ifdef _DORDER
					amode data {
#define _DATA(a)				section a;
#include EDE
#undef _DATA
					}
#endif
					amode idata {
						section selection=w;
#if defined( _MODEL_SMALL ) || defined( _MODEL_MEDIUM )
#ifndef _HEAP_LC
	#ifndef	_HEAP_SZ
						heap;
	#else
						heap length=_HEAP_SZ;
	#endif
#else
	#ifndef	_HEAP_SZ
						error;	// not allowed
	#else
					}
					amode idata {
						heap addr=_HEAP_LC length=_HEAP_SZ;
					}
					amode idata {
	#endif
#endif
#endif
#ifndef _STACK_LC
	#ifndef	_STACK_SZ
						stack;
	#else
						stack length=_STACK_SZ;
	#endif
#else
	#ifndef	_STACK_SZ
						error;	// not allowed
	#else
					}
					amode idata {
						stack addr=_STACK_LC length=_STACK_SZ;
	#endif
#endif
					}
#ifdef _IORDER
					amode idata {
#define _IDATA(a)				section a;
#include EDE
#undef _IDATA
					}
#endif

#if _XMEM
					amode xdata {
						section selection=w;
					}
#endif
#if _ZPAGE==0
					amode hdata {
#ifdef _MODEL_LARGE
						section selection=w;
#ifndef _HEAP_LC
	#ifndef	_HEAP_SZ
						heap;
	#else
						heap length=_HEAP_SZ;
	#endif
#else
	#ifndef	_HEAP_SZ
						error;	// not allowed
	#else
					}
					amode hdata {
						heap addr=_HEAP_LC length=_HEAP_SZ;
					}
					amode hdata {
						section selection=w;
	#endif
#endif
#else
						section selection=w;
#endif
					}
#ifdef _HORDER
					amode hdata {
#define _HDATA(a)				section a;
#include EDE
#undef _HDATA
					}
#endif
#endif
#ifdef _DRESERVES
#if _ZPAGE==0
					amode hdata
#else
					amode idata
#endif
					{
#define _DRESERVED(a,b)	reserved addr=a length=b-a+1;
#include EDE
#undef  _DRESERVED
				        }
#endif
				}
				cluster rom_data_clstr {
					attribute r;
					amode data {
						section selection=r;
					}
#ifdef _RDORDER
					amode data {
#define _RDATA(a)				section a;
#include EDE
#undef _RDATA
					}
#endif
					amode idata {
						section selection=r;
					}
#ifdef _RIORDER
					amode idata {
#define _RIDATA(a)				section a;
#include EDE
#undef _RIDATA
					}
#endif
#if _ZPAGE==0
					amode hdata {
						section selection=r;
					}
#ifdef _RHORDER
					amode hdata {
#define _RHDATA(a)				section a;
#include EDE
#undef _RHDATA
					}
#endif
#endif
				}
			}
		}
		space XA_code {
			block program {
				cluster code_clstr {
					attribute r;
					amode code {
						// 
						// set RESET_VECTOR at address 0x0
						// reserve area for interrupt vector table
						//
						section RESET_VECTOR addr=_RESET_VECTOR;
						reserved addr=0x4 length=0x118;
					}
					amode code {
						section selection=x;
						section selection=r;
#if _ZPAGE
						copy;
#endif
					}
#ifdef _CORDER
					amode code {
#define _CODE(a)				section a;
#define _CCOPY(a)				copy a;
#define _CTABLE(a)				table addr = a;
#include EDE
#undef _CODE
#undef _CCOPY
#undef _CTABLE
					}
#endif
#if _ZPAGE==0
					amode hcode {
						section selection=x;
						section selection=r;
						copy;
					}
#ifdef _HCORDER
					amode hcode {
#define _HCODE(a)				section a;
#define _HCOPY(a)				copy a;
#define _HTABLE(a)				table addr = a;
#include EDE
#undef _HCODE
#undef _HCOPY
#undef _HTABLE
					}
#endif
#endif
#ifdef _CRESERVES
#if _ZPAGE==0
					amode hcode
#else
					amode code
#endif
					{
#define _CRESERVED(a,b)	reserved addr=a length=b-a+1;
#include EDE
#undef  _CRESERVED
				        }
#endif
				}
			}

		}
	}
}

#include "xa.cpu"
#if _XMEM
#include "xa.mem"
#endif
