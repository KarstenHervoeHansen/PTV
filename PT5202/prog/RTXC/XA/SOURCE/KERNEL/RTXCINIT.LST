XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   1
D:\PROJECT\pt5201\master\source\RTXC\XA\SOURCE\KERNEL\cc71504b.src
ADDR   CODE            LINE SOURCELINE
                          1 ; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
                          2 ; options: -e -gn -O2 -err -Ic:\cxa\\include -I..\..\include -s -Cxag3 -Ml
                          4 $NOZPAGE
                          5         NAME    RTXCINIT
                          6 ; rtxcinit.c    1       /* rtxcinit.c - RTXC initialization */
                          7 ; rtxcinit.c    2       
                          8 ; rtxcinit.c    3       /*
                          9 ; rtxcinit.c    4        *   RTXC    
                         10 ; rtxcinit.c    5        *   Copyright (c)
                         11 ; rtxcinit.c    6        *   Embedded System Products, Inc.
                         12 ; rtxcinit.c    7        *   ALL RIGHTS RESERVED
                         13 ; rtxcinit.c    8       */
                         14 ; rtxcinit.c    9       
                         15 ; rtxcinit.c   10       #include "rtxcopts.h"
                         16 ; rtxcinit.c   11       
                         17 ; rtxcinit.c   12       extern void clockinit(void); /* link clock blocks */
                         18 ; rtxcinit.c   13       extern void semainit(void);  /* pend semaphores */
                         19 ; rtxcinit.c   14       extern void taskinit(void);  /* set tasks inactive */
                         20 ; rtxcinit.c   15       
                         21 ; rtxcinit.c   16       #ifdef HAS_MAILBOXES
                         22 ; rtxcinit.c   17       extern void mboxinit(void);  /* init mailboxes empty */
                         23 ; rtxcinit.c   18       #endif /* } HAS_MAILBOXES */
                         24 ; rtxcinit.c   19       
                         25 ; rtxcinit.c   20       #ifdef HAS_QUEUES
                         26 ; rtxcinit.c   21       extern void queueinit(void); /* init width/depth/base/semas */
                         27 ; rtxcinit.c   22       #endif /* } HAS_QUEUES */
                         28 ; rtxcinit.c   23       
                         29 ; rtxcinit.c   24       #ifdef HAS_PARTITIONS
                         30 ; rtxcinit.c   25       extern void partinit(void);  /* link partition blocks */
                         31 ; rtxcinit.c   26       #endif /* } HAS_PARTITIONS */
                         32 ; rtxcinit.c   27       
                         33 ; rtxcinit.c   28       #ifdef HAS_RESOURCES
                         34 ; rtxcinit.c   29       extern void resinit(void);   /* clear resources */
                         35 ; rtxcinit.c   30       #endif /* } HAS RESOURCES */
                         36 ; rtxcinit.c   31       
                         37 ; rtxcinit.c   32       void rtxcinit(void);
                         38 ; rtxcinit.c   33       
                         39 ; rtxcinit.c   34       
                         40 ; rtxcinit.c   35       /*
                         41 ; rtxcinit.c   36        * RTXC internal data structure initialization
                         42 ; rtxcinit.c   37        *
                         43 ; rtxcinit.c   38        * note: rtxcinit() must be called by main().
                         44 ; rtxcinit.c   39       */
                         45 ; rtxcinit.c   40       
                         46 ; rtxcinit.c   41       void rtxcinit(void)
                         47 ; rtxcinit.c   42       {
                         48         PUBLIC  _rtxcinit
000000                   49 RTXCINIT_PR     SEGMENT HCODE
000000                   50         RSEG    RTXCINIT_PR
000000                   50         RSEG    RTXCINIT_PR
000000                   51 _rtxcinit:
                         52 ; rtxcinit.c   43          clockinit(); /* thread timer control blocks */
                         53         CALL    _clockinit
000000 C4rrrrrr         +53 ;       FCALL   _clockinit
                         54 ; rtxcinit.c   44       
                         55 ; rtxcinit.c   45          semainit();  /* pend semaphores */
                         56         CALL    _semainit
000004 C4rrrrrr         +56 ;       FCALL   _semainit
                         57 ; rtxcinit.c   46       
                         58 ; rtxcinit.c   47          taskinit();  /* initialize task state info */
                         59         CALL    _taskinit
000008 C4rrrrrr         +59 ;       FCALL   _taskinit
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   2

ADDR   CODE            LINE SOURCELINE
                         60 ; rtxcinit.c   48       
                         61 ; rtxcinit.c   49       #ifdef HAS_MAILBOXES
                         62 ; rtxcinit.c   50          mboxinit();  /* initialize mailboxes */
                         63         CALL    _mboxinit
00000C C4rrrrrr         +63 ;       FCALL   _mboxinit
                         64 ; rtxcinit.c   51       #endif /* } HAS_MAILBOXES */
                         65 ; rtxcinit.c   52       
                         66 ; rtxcinit.c   53       #ifdef HAS_PARTITIONS
                         67 ; rtxcinit.c   54          partinit();  /* thread partition blocks */
                         68         CALL    _partinit
000010 C4rrrrrr         +68 ;       FCALL   _partinit
                         69 ; rtxcinit.c   55       #endif /* } HAS_PARTITIONS */
                         70 ; rtxcinit.c   56       
                         71 ; rtxcinit.c   57       #ifdef HAS_QUEUES
                         72 ; rtxcinit.c   58          queueinit(); /* initialize queue headers */
                         73         CALL    _queueinit
000014 C4rrrrrr         +73 ;       FCALL   _queueinit
                         74 ; rtxcinit.c   59       #endif /* } HAS_QUEUES */
                         75 ; rtxcinit.c   60       
                         76 ; rtxcinit.c   61       #ifdef HAS_RESOURCES
                         77 ; rtxcinit.c   62          resinit();   /* initialize resources */
                         78 ; rtxcinit.c   63       #endif /* } HAS_RESOURCES */
                         79 ; rtxcinit.c   64       
                         80 ; rtxcinit.c   65       }
                         81         JMP     _resinit
000018 D4rrrrrr         +81 ;       FJMP    _resinit
                         82 ; rtxcinit.c   66       
                         83 ; rtxcinit.c   67       /* end of rtxcinit.c */
                         85         EXTRN   HCODE(_mboxinit)
                         86         EXTRN   HCODE(_partinit)
                         87         EXTRN   HCODE(_resinit)
                         88         EXTRN   HCODE(_clockinit)
                         89         EXTRN   HCODE(_queueinit)
                         90         EXTRN   HCODE(_taskinit)
                         91         EXTRN   HCODE(_semainit)
                         92         CALLS   'rtxcinit', 'clockinit'
                         93         CALLS   'rtxcinit', 'semainit'
                         94         CALLS   'rtxcinit', 'taskinit'
                         95         CALLS   'rtxcinit', 'mboxinit'
                         96         CALLS   'rtxcinit', 'partinit'
                         97         CALLS   'rtxcinit', 'queueinit'
                         98         CALLS   'rtxcinit', 'resinit'
