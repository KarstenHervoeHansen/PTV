; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -Ic:\LT428\rtxc\xa\include -I. -Ml
;          -O2 -s
$CASE
$NOZPAGE
	NAME	SIO0DRV
	SYMB	TOOL, "XA C compiler v2.0", 1
	SYMB	TYPE, 256, "bit", 'g', 0, 1
	SYMB	FILE, "sio0drv.c"
; sio0drv.c    1	/****************************************************************************/
; sio0drv.c    2	/* MODULE:                                                                  */
; sio0drv.c    3	/*  sio0drv.c - seriel channel driver using UART0 and Timer2                */
; sio0drv.c    4	/****************************************************************************/
; sio0drv.c    5	/* FUNCTIONS:                                                               */
; sio0drv.c    6	/*                                                                          */
; sio0drv.c    7	/*  void sio0_init( void);                                                  */
; sio0drv.c    8	/*  int sio0WaitAcknowledge( int addr, char *cmdbuf)                        */
; sio0drv.c    9	/*  int sio0WaitAnswer( void *buf)                                          */
; sio0drv.c   10	/*  int sio0SndCommand( int cnt, int addr, const char *format, ...)         */
; sio0drv.c   11	/*  int sio0SndRequest( int cnt, int addr, char *result, \                  */
; sio0drv.c   12	/*                                                 const char *format, ...) */
; sio0drv.c   13	/*                                                                          */
; sio0drv.c   14	/* TASKS:                                                                   */
; sio0drv.c   15	    void sio0i( void);
; sio0drv.c   16	    void sio0o( void);
; sio0drv.c   17	/*                                                                          */
; sio0drv.c   18	/* NOTES:                                                                   */
; sio0drv.c   19	/*                                                                          */
; sio0drv.c   20	/****************************************************************************/
; sio0drv.c   21	/*
; sio0drv.c   22	 *   PTV software for PT5201    
; sio0drv.c   23	 *   Copyright (c) 
; sio0drv.c   24	 *   ProTeleVision Technologies A/S.
; sio0drv.c   25	 *   ALL RIGHTS RESERVED
; sio0drv.c   26	*/
; sio0drv.c   27	/****************************************************************************/
; sio0drv.c   28	
; sio0drv.c   29	#include <stdarg.h>
	SYMB	FILE, "c:\\LT428\\include\\stdarg.h"
	SYMB	ENDF
; sio0drv.c   30	#include <stdio.h>
	SYMB	FILE, "c:\\LT428\\include\\stdio.h"
	SYMB	FILE, "c:\\LT428\\include\\stdarg.h"
	SYMB	ENDF
	SYMB	TYPE, 257, 'n', #2, 130
	SYMB	TYPE, 258, 'P', #257
	SYMB	TYPE, 259, "_iobuf", 'S', 14,\
		 "_ptr", #258, 0,\
		 "_cnt", #16, 4,\
		 "_base", #258, 6,\
		 "_flag", #2, 10,\
		 "_file", #2, 11,\
		 "_bufsiz", #16, 12
	SYMB	TYPE, 260, "FILE", 'T', #259
	SYMB	TYPE, 261, 'n', #1, 130
	SYMB	TYPE, 262, 'P', #261
	SYMB	TYPE, 263, 'Z', #262, 0
	SYMB	TYPE, 265, "va_list", 'T', #263
	SYMB	TYPE, 266, "size_t", 'T', #18
	SYMB	TYPE, 267, "fpos_t", 'T', #7
	SYMB	ENDF
; sio0drv.c   31	#include <string.h>
	SYMB	FILE, "c:\\LT428\\include\\string.h"
	SYMB	ENDF
; sio0drv.c   32	#include <periphal.h>
	SYMB	FILE, "c:\\LT428\\rtxc\\xa\\include\\periphal.h"
	SYMB	ENDF
; sio0drv.c   33	
; sio0drv.c   34	#include "reg8051.h"
	SYMB	FILE, "reg8051.h"
	SYMB	ENDF
; sio0drv.c   35	#include "define.h"
	SYMB	FILE, "define.h"
	SYMB	ENDF
; sio0drv.c   36	#include "crystal.h"
	SYMB	FILE, "c:\\LT428\\rtxc\\xa\\include\\crystal.h"
	SYMB	ENDF
; sio0drv.c   37	#include "sio0drv.h"
	SYMB	FILE, "sio0drv.h"
	SYMB	FILE, "define.h"
	SYMB	ENDF
	SYMB	FILE, "rtxcobj.h"
	SYMB	FILE, "c:\\LT428\\rtxc\\xa\\include\\rtxcapi.h"
	SYMB	FILE, "c:\\LT428\\rtxc\\xa\\include\\typedef.h"
	SYMB	FILE, "c:\\LT428\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 268, "KOBJNUM", 'T', #3
	SYMB	TYPE, 269, "TASK", 'T', #2
	SYMB	ENDF
	SYMB	FILE, "c:\\LT428\\rtxc\\xa\\include\\rtxstruc.h"
	SYMB	FILE, "c:\\LT428\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 270, "KSNUM", 'T', #3
	SYMB	TYPE, 271, "PRIORITY", 'T', #269
	SYMB	TYPE, 272, "TSTATE", 'T', #5
	SYMB	TYPE, 273, "TSLICE", 'T', #3
	SYMB	TYPE, 275, 'n', #274, 130
	SYMB	TYPE, 276, 'P', #275
	SYMB	TYPE, 278, 'n', #277, 130
	SYMB	TYPE, 279, 'P', #278
	SYMB	TYPE, 280, 'n', #270, 130
	SYMB	TYPE, 281, 'P', #280
	SYMB	TYPE, 282, 'X', 12, #1, 30, 0
	SYMB	TYPE, 283, 'n', #282, 129
	SYMB	TYPE, 284, 'P', #283
	SYMB	TYPE, 285, "frame", 'S', 24,\
		 "es", #3, 0,\
		 "cs", #3, 1,\
		 "ssel", #3, 2,\
		 "ds", #3, 3,\
		 "pksnum", #281, 4,\
		 "R2", #18, 8,\
		 "R3", #18, 10,\
		 "R4", #18, 12,\
		 "R5", #18, 14,\
		 "R6", #18, 16,\
		 "psw", #18, 18,\
		 "pc", #284, 20
	SYMB	TYPE, 286, 'n', #285, 130
	SYMB	TYPE, 287, 'P', #286
	SYMB	TYPE, 288, 'X', 12, #1, 30, 0
	SYMB	TYPE, 289, 'n', #288, 129
	SYMB	TYPE, 290, 'P', #289
	SYMB	TYPE, 274, "tcb", 'S', 36,\
		 "flink", #276, 0,\
		 "blink", #276, 4,\
		 "pclkblk", #279, 8,\
		 "task", #269, 12,\
		 "priority", #271, 13,\
		 "sp", #287, 14,\
		 "status", #272, 18,\
		 "pc_t0", #290, 20,\
		 "stackbase", #258, 24,\
		 "stacksize", #266, 28,\
		 "tslice", #273, 30,\
		 "newslice", #273, 31,\
		 "arg", #262, 32
	SYMB	TYPE, 291, "TCB", 'T', #274
	SYMB	TYPE, 292, "SEMA", 'T', #268
	SYMB	TYPE, 293, "MAP", 'T', #268
	SYMB	TYPE, 295, 'n', #294, 130
	SYMB	TYPE, 296, 'P', #295
	SYMB	TYPE, 294, "rtxcmsg", 'S', 8,\
		 "link", #296, 0,\
		 "task", #269, 4,\
		 "priority", #271, 5,\
		 "sema", #292, 6
	SYMB	TYPE, 297, "RTXCMSG", 'T', #294
	SYMB	TYPE, 298, "TICKS", 'T', #16
	SYMB	TYPE, 299, 'N',\
		 "DELAY_OBJ", 0,\
		 "SEMAPHORE_OBJ", 1,\
		 "PARTITION_OBJ", 2,\
		 "QUEUE_OBJ", 3,\
		 "RESOURCE_OBJ", 4,\
		 "MAILBOX_OBJ", 5,\
		 "TIMER_OBJ", 6
	SYMB	TYPE, 300, "OBJTYPE", 'T', #299
	SYMB	TYPE, 277, "clkblk", 'S', 18,\
		 "flink", #279, 0,\
		 "blink", #279, 4,\
		 "remain", #298, 8,\
		 "recycle", #298, 10,\
		 "task", #269, 12,\
		 "state", #2, 13,\
		 "objtype", #300, 14,\
		 "objid", #268, 16
	SYMB	TYPE, 301, 'N',\
		 "PRIORITY_INVERSION_OFF", 0,\
		 "PRIORITY_INVERSION_ON", 1
	SYMB	TYPE, 302, "RESATTR", 'T', #301
	SYMB	ENDF
	SYMB	TYPE, 303, 'N',\
		 "RC_GOOD", 0,\
		 "RC_WAIT_CONFLICT", 1,\
		 "RC_NO_TIMERS", 2,\
		 "RC_TIMER_INACTIVE", 3,\
		 "RC_TIMER_ILLEGAL", 4,\
		 "RC_TIMEOUT", 5,\
		 "RC_QUEUE_FULL", 6,\
		 "RC_QUEUE_EMPTY", 7,\
		 "RC_ILLEGAL_QUEUE_SIZE", 8,\
		 "RC_BUSY", 9,\
		 "RC_NESTED", 10,\
		 "RC_ILLEGAL_TASK", 11,\
		 "RC_ACTIVE_TASK", 12,\
		 "RC_NO_YIELD", 13,\
		 "RC_MISSED_EVENT", 14
	SYMB	TYPE, 304, "KSRC", 'T', #303
	SYMB	TYPE, 305, "SSTATE", 'T', #269
	SYMB	TYPE, 306, "MBOX", 'T', #268
	SYMB	TYPE, 307, "QUEUE", 'T', #268
	SYMB	TYPE, 308, 'N',\
		 "QNE", 0,\
		 "QNF", 1,\
		 "QF", 2,\
		 "QE", 3
	SYMB	TYPE, 309, "QCOND", 'T', #308
	SYMB	TYPE, 310, "RESOURCE", 'T', #268
	SYMB	TYPE, 311, "CLKBLK", 'T', #277
	SYMB	TYPE, 312, "time_t", 'T', #6
	SYMB	TYPE, 313, "FRAME", 'T', #285
	SYMB	ENDF
	SYMB	FILE, "ctask.h"
	SYMB	ENDF
	SYMB	FILE, "csema.h"
	SYMB	ENDF
	SYMB	FILE, "cres.h"
	SYMB	ENDF
	SYMB	FILE, "cqueue.h"
	SYMB	ENDF
	SYMB	FILE, "cpart.h"
	SYMB	ENDF
	SYMB	FILE, "cmbox.h"
	SYMB	ENDF
	SYMB	FILE, "cclock.h"
	SYMB	ENDF
	SYMB	TYPE, 315, 'n', #314, 130
	SYMB	TYPE, 316, 'P', #315
	SYMB	TYPE, 314, 'X', 12, #1, 30, 2, #316, #258
	SYMB	TYPE, 318, 'n', #317, 129
	SYMB	TYPE, 319, 'P', #318
	SYMB	TYPE, 320, 'X', 12, #1, 30, 1, #316
	SYMB	TYPE, 321, 'n', #320, 129
	SYMB	TYPE, 322, 'P', #321
	SYMB	TYPE, 323, 'n', #6, 130
	SYMB	TYPE, 324, 'P', #323
	SYMB	TYPE, 323, 'X', 12, #16, 30, 2, #316, #324
	SYMB	TYPE, 326, 'n', #325, 129
	SYMB	TYPE, 327, 'P', #326
	SYMB	TYPE, 328, 'X', 12, #1, 30, 1, #316
	SYMB	TYPE, 329, 'n', #328, 129
	SYMB	TYPE, 330, 'P', #329
	SYMB	TYPE, 331, 'X', 12, #1, 30, 1, #316
	SYMB	TYPE, 332, 'n', #331, 129
	SYMB	TYPE, 333, 'P', #332
	SYMB	TYPE, 334, 'X', 12, #16, 30, 1, #316
	SYMB	TYPE, 335, 'n', #334, 129
	SYMB	TYPE, 336, 'P', #335
	SYMB	TYPE, 314, "TEvent", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TEvent", #319, 2,\
		 "_TEvent", #322, 6,\
		 "Wait", #327, 10,\
		 "Set", #330, 14,\
		 "Clear", #333, 18,\
		 "IsSet", #336, 22,\
		 "ID", #292, 26,\
		 "Name", #258, 28
	SYMB	TYPE, 337, "TEvent", 'T', #314
	SYMB	TYPE, 339, 'n', #338, 130
	SYMB	TYPE, 340, 'P', #339
	SYMB	TYPE, 338, 'X', 12, #1, 30, 1, #340
	SYMB	TYPE, 342, 'n', #341, 129
	SYMB	TYPE, 343, 'P', #342
	SYMB	TYPE, 344, 'X', 12, #1, 30, 1, #340
	SYMB	TYPE, 345, 'n', #344, 129
	SYMB	TYPE, 346, 'P', #345
	SYMB	TYPE, 347, 'n', #337, 130
	SYMB	TYPE, 348, 'P', #347
	SYMB	TYPE, 347, 'X', 12, #16, 30, 2, #340, #348
	SYMB	TYPE, 350, 'n', #349, 129
	SYMB	TYPE, 351, 'P', #350
	SYMB	TYPE, 352, 'X', 12, #1, 30, 2, #340, #348
	SYMB	TYPE, 353, 'n', #352, 129
	SYMB	TYPE, 354, 'P', #353
	SYMB	TYPE, 355, 'X', 12, #16, 30, 2, #340, #348
	SYMB	TYPE, 356, 'n', #355, 129
	SYMB	TYPE, 357, 'P', #356
	SYMB	TYPE, 358, 'X', 12, #348, 30, 2, #340, #324
	SYMB	TYPE, 359, 'n', #358, 129
	SYMB	TYPE, 360, 'P', #359
	SYMB	TYPE, 361, 'Z', #2, 95
	SYMB	TYPE, 338, "TEventList", 'S', 122,\
		 "ObjectID", #16, 0,\
		 "TEventList", #343, 2,\
		 "_TEventList", #346, 6,\
		 "Append", #351, 10,\
		 "Clear", #354, 14,\
		 "InList", #357, 18,\
		 "Wait", #360, 22,\
		 "Align", #361, 26
	SYMB	TYPE, 363, "TEventList", 'T', #338
	SYMB	TYPE, 365, 'n', #364, 130
	SYMB	TYPE, 366, 'P', #365
	SYMB	TYPE, 364, 'X', 12, #1, 30, 2, #366, #258
	SYMB	TYPE, 368, 'n', #367, 129
	SYMB	TYPE, 369, 'P', #368
	SYMB	TYPE, 370, 'X', 12, #1, 30, 1, #366
	SYMB	TYPE, 371, 'n', #370, 129
	SYMB	TYPE, 372, 'P', #371
	SYMB	TYPE, 373, 'X', 12, #1, 30, 1, #366
	SYMB	TYPE, 374, 'n', #373, 129
	SYMB	TYPE, 375, 'P', #374
	SYMB	TYPE, 376, 'X', 12, #1, 30, 1, #366
	SYMB	TYPE, 377, 'n', #376, 129
	SYMB	TYPE, 378, 'P', #377
	SYMB	TYPE, 379, 'X', 12, #16, 30, 1, #366
	SYMB	TYPE, 380, 'n', #379, 129
	SYMB	TYPE, 381, 'P', #380
	SYMB	TYPE, 364, "TResource", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TResource", #369, 2,\
		 "_TResource", #372, 6,\
		 "Lock", #375, 10,\
		 "Unlock", #378, 14,\
		 "Owner", #381, 18,\
		 "ID", #310, 22,\
		 "Name", #258, 24
	SYMB	TYPE, 382, "TResource", 'T', #364
	SYMB	TYPE, 383, 'X', 12, #1, 30, 0
	SYMB	TYPE, 384, 'n', #383, 129
	SYMB	TYPE, 385, 'P', #384
	SYMB	TYPE, 387, 'n', #386, 130
	SYMB	TYPE, 388, 'P', #387
	SYMB	TYPE, 383, 'X', 12, #1, 30, 3, #388, #16, #385
	SYMB	TYPE, 390, 'n', #389, 129
	SYMB	TYPE, 391, 'P', #390
	SYMB	TYPE, 392, 'X', 12, #1, 30, 1, #388
	SYMB	TYPE, 393, 'n', #392, 129
	SYMB	TYPE, 394, 'P', #393
	SYMB	TYPE, 395, 'X', 12, #1, 30, 1, #388
	SYMB	TYPE, 396, 'n', #395, 129
	SYMB	TYPE, 397, 'P', #396
	SYMB	TYPE, 398, 'X', 12, #1, 30, 2, #388, #16
	SYMB	TYPE, 399, 'n', #398, 129
	SYMB	TYPE, 400, 'P', #399
	SYMB	TYPE, 401, 'X', 12, #1, 30, 1, #388
	SYMB	TYPE, 402, 'n', #401, 129
	SYMB	TYPE, 403, 'P', #402
	SYMB	TYPE, 404, 'X', 12, #16, 30, 1, #388
	SYMB	TYPE, 405, 'n', #404, 129
	SYMB	TYPE, 406, 'P', #405
	SYMB	TYPE, 407, 'X', 12, #1, 30, 2, #388, #16
	SYMB	TYPE, 408, 'n', #407, 129
	SYMB	TYPE, 409, 'P', #408
	SYMB	TYPE, 386, "TThread", 'S', 36,\
		 "ObjectID", #16, 0,\
		 "TThread", #391, 2,\
		 "Execute", #394, 6,\
		 "Terminate", #397, 10,\
		 "Suspend", #400, 14,\
		 "Resume", #403, 18,\
		 "GetPriority", #406, 22,\
		 "SetPriority", #409, 26,\
		 "ID", #269, 30,\
		 "Status", #2, 31,\
		 "Stack", #258, 32
	SYMB	TYPE, 410, "TThread", 'T', #386
	SYMB	TYPE, 412, 'n', #411, 130
	SYMB	TYPE, 413, 'P', #412
	SYMB	TYPE, 411, 'X', 12, #1, 30, 1, #413
	SYMB	TYPE, 415, 'n', #414, 129
	SYMB	TYPE, 416, 'P', #415
	SYMB	TYPE, 417, 'X', 12, #1, 30, 1, #413
	SYMB	TYPE, 418, 'n', #417, 129
	SYMB	TYPE, 419, 'P', #418
	SYMB	TYPE, 420, 'X', 12, #1, 30, 2, #413, #16
	SYMB	TYPE, 421, 'n', #420, 129
	SYMB	TYPE, 422, 'P', #421
	SYMB	TYPE, 423, 'X', 12, #16, 30, 1, #413
	SYMB	TYPE, 424, 'n', #423, 129
	SYMB	TYPE, 425, 'P', #424
	SYMB	TYPE, 426, 'X', 12, #1, 30, 2, #413, #16
	SYMB	TYPE, 427, 'n', #426, 129
	SYMB	TYPE, 428, 'P', #427
	SYMB	TYPE, 429, 'n', #311, 130
	SYMB	TYPE, 430, 'P', #429
	SYMB	TYPE, 411, "TTimer", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TTimer", #416, 2,\
		 "_TTimer", #419, 6,\
		 "SetPeriod", #422, 10,\
		 "GetPeriod", #425, 14,\
		 "Tick", #428, 18,\
		 "TimeOut", #348, 22,\
		 "Period", #4, 26,\
		 "Handle", #430, 28
	SYMB	TYPE, 431, "TTimer", 'T', #411
	SYMB	TYPE, 433, 'n', #432, 130
	SYMB	TYPE, 434, 'P', #433
	SYMB	TYPE, 432, 'X', 12, #1, 30, 3, #434, #16, #16
	SYMB	TYPE, 436, 'n', #435, 129
	SYMB	TYPE, 437, 'P', #436
	SYMB	TYPE, 438, 'X', 12, #1, 30, 1, #434
	SYMB	TYPE, 439, 'n', #438, 129
	SYMB	TYPE, 440, 'P', #439
	SYMB	TYPE, 441, 'X', 12, #258, 30, 2, #434, #262
	SYMB	TYPE, 442, 'n', #441, 129
	SYMB	TYPE, 443, 'P', #442
	SYMB	TYPE, 444, 'X', 12, #1, 30, 2, #434, #262
	SYMB	TYPE, 445, 'n', #444, 129
	SYMB	TYPE, 446, 'P', #445
	SYMB	TYPE, 432, "TStream", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TStream", #437, 2,\
		 "_TStream", #440, 6,\
		 "Get", #443, 10,\
		 "Put", #446, 14,\
		 "ID", #307, 18,\
		 "Width", #16, 20,\
		 "Depth", #16, 22,\
		 "Handle", #258, 24
	SYMB	TYPE, 447, "TStream", 'T', #432
	SYMB	ENDF
	SYMB	ENDF
; sio0drv.c   38	#include "eventdef.h"
	SYMB	FILE, "eventdef.h"
	SYMB	ENDF
; sio0drv.c   39	
; sio0drv.c   40	#define RxBufferLen  (unsigned char)64		//
; sio0drv.c   41	#define RxTimeout    (unsigned char)30       // Timeout pr. character in milliseconds
; sio0drv.c   42	#define RxRetransmit (unsigned char)3        // Number of retransmission if failure
; sio0drv.c   43	
; sio0drv.c   44	#define TIMER2_RANGE	(unsigned long)65536
; sio0drv.c   45	
; sio0drv.c   46	#define PRESCALER		(unsigned long)4     	// selected also in SCR. NOTE!!! This value 
; sio0drv.c   47	                                             //  MUST be the same as deinfed in start.asm
; sio0drv.c   48	
; sio0drv.c   49	#define BAUDRATE    	(unsigned long)57600    // select 57600 baud
; sio0drv.c   50	
; sio0drv.c   51	#define RELOAD2      (unsigned short)(TIMER2_RANGE-(CRYSTAL/(BAUDRATE*PRESCALER*(unsigned long)16)))
; sio0drv.c   52	
; sio0drv.c   53	#define THI2_RESET  ( RELOAD2 >> 8) & 0xFF
; sio0drv.c   54	#define TLOW2_RESET ( RELOAD2 & 0xFF)
; sio0drv.c   55	
; sio0drv.c   56	
; sio0drv.c   57	/* ==================== */
; sio0drv.c   58	/* S0CON - bit settings */
; sio0drv.c   59	/* -------------------- */
; sio0drv.c   60	/* UART0                */
; sio0drv.c   61	/* -------------------- */
; sio0drv.c   62	#define U0_SM0   (1 << 7)   /* allow for 8-bit UART */
; sio0drv.c   63	#define U0_SM1   (1 << 6)   /* allow for 8-bit UART */
; sio0drv.c   64	#define U0_SM2   (0 << 5)   /* set to enable multiprocessor communication */
; sio0drv.c   65	#define U0_REN   (1 << 4)   /* enable serial reception */
; sio0drv.c   66	     
; sio0drv.c   67	#define U0_TB8   (0 << 3)   /* the 9th databit transmitted in mode 2 or 3 */
; sio0drv.c   68	#define U0_RB8   (0 << 2)   /* the 9th databit received in mode 2 or 3 */
; sio0drv.c   69	
; sio0drv.c   70	#define U0_TI    (0 << 1)   /* set the transmit interrupt flag */
; sio0drv.c   71	#define U0_RI    (0 << 0)   /* set the receive interrupt flag */ 
; sio0drv.c   72	
; sio0drv.c   73	#define xS0CON (U0_SM0 | U0_SM1 | U0_SM2 | U0_REN | U0_TB8 | U0_RB8 | U0_TI | U0_RI )
; sio0drv.c   74	/* =================== */
; sio0drv.c   75	
; sio0drv.c   76	/* =================== */
; sio0drv.c   77	/* TMOD - bit settings */
; sio0drv.c   78	/* ------------------- */
; sio0drv.c   79	/* TIMER 2             */
; sio0drv.c   80	/* ------------------- */
; sio0drv.c   81	#define T2_RCLK1  (0 << 5)   /* set to use timer 2 as clock source for UART1,(AND select autoreload) */
; sio0drv.c   82	#define T2_TCLK1  (0 << 4)   /* set to use timer 2 as clock source for UART1,(AND select autoreload) */
; sio0drv.c   83	#define T2_T2OE   (0 << 1)   /* not applicable - OR in a zero (0) */
; sio0drv.c   84	#define T2_DCEN   (1 << 0)   /* set to count up for Timer 2 in auto reload mode */
; sio0drv.c   85	
; sio0drv.c   86	#define T2_TMOD   (T2_RCLK1 | T2_TCLK1 | T2_T2OE | T2_DCEN)
; sio0drv.c   87	
; sio0drv.c   88	#define xTMOD     T2_TMOD
; sio0drv.c   89	/* =================== */
; sio0drv.c   90	
; sio0drv.c   91	/* =================== */
; sio0drv.c   92	/* TCON - bit settings */
; sio0drv.c   93	/* ------------------- */
; sio0drv.c   94	/* TIMER 2             */
; sio0drv.c   95	/* ------------------- */
; sio0drv.c   96	#define T2_TF2    (0 << 7)   /* overflow flag - NOT cleared by hardware */
; sio0drv.c   97	#define T2_EXF2   (0 << 6)   /* not applicable - OR in a zero (0) */
; sio0drv.c   98	#define T2_RCLK0  (1 << 5)   /* set to use timer 2 as clock source for UART0,(AND select autoreload) */
; sio0drv.c   99	#define T2_TCLK0  (1 << 4)   /* set to use timer 2 as clock source for UART0,(AND select autoreload) */
; sio0drv.c  100	#define T2_EXEN2  (0 << 3)   /* not applicable - OR in a zero (0) */
; sio0drv.c  101	#define T2_TR2    (0 << 2)   /* not applicable - OR in a zero (0) */
; sio0drv.c  102	#define T2_CT2    (0 << 1)   /* not applicable - OR in a zero (0) */
; sio0drv.c  103	#define T2_CPRL2  (0 << 0)   /* not applicable - OR in a zero (0) */
; sio0drv.c  104	
; sio0drv.c  105	#define T2_CON    (T2_TF2 | T2_EXF2 | T2_RCLK0| T2_TCLK0 | T2_EXEN2 | T2_TR2 | T2_CT2 | T2_CPRL2)
; sio0drv.c  106	
; sio0drv.c  107	#define xTCON     T2_CON
; sio0drv.c  108	/* =================== */
; sio0drv.c  109	
; sio0drv.c  110	                               
; sio0drv.c  111	/*
; sio0drv.c  112	 *
; sio0drv.c  113	 * DO NOT ALTER THE FOLLOWING VARIABLES: THEY ARE ALSO USED
; sio0drv.c  114	 * IN ISRS.ASM
; sio0drv.c  115	*/
; sio0drv.c  116	volatile _near unsigned char RxInput, RxOutput; // These are defined _near to minimize
; sio0drv.c  117	volatile unsigned char RxBuffer[RxBufferLen];   //  time used in receive 0 interrupt
; sio0drv.c  118	
; sio0drv.c  119	
; sio0drv.c  120	static TEvent			*sio0iEvent, *sio0oEvent;
; sio0drv.c  121	static TThread		*sio0iThread, *sio0oThread;
; sio0drv.c  122	static TStream		*sio0iStream, *sio0oStream;
; sio0drv.c  123	static TResource	*sio0Res;
; sio0drv.c  124	
; sio0drv.c  125	
; sio0drv.c  126	/*
; sio0drv.c  127	 *
; sio0drv.c  128	 * interrupt service for transmit 0 (TI_0)
; sio0drv.c  129	 *
; sio0drv.c  130	*/
; sio0drv.c  131	FRAME ks_stk *intsio0o( FRAME ks_stk *frame)
; sio0drv.c  132	{
SIO0DRV_PR	SEGMENT	HCODE
	RSEG	SIO0DRV_PR
	ALIGN	1
	SYMB	LINE, 132
	PUBLIC	_intsio0o
_intsio0o:
	SYMB	TYPE, 448, 'n', #313, 130
	SYMB	TYPE, 449, 'P', #448
	SYMB	TYPE, 450, 'X', 12, #449, 30, 1, #449
	SYMB	GFUN, "intsio0o", _intsio0o, #450, 0, 0, 0
	SYMB	ALAB, _intsio0o, #450
	SYMB	LTIM, "frame", 3, 0, 2253
	SYMB	IDEN, "frame", 3, #449, 0, 2061
; sio0drv.c  133	  TI_0 = 0;
	SYMB	LINE, 133
	CLR	0301H
; sio0drv.c  134	
; sio0drv.c  135	  return( KS_ISRexit( frame, sio0oEvent->ID));  // wake up output task
	SYMB	LINE, 135
	MOV.B	ES,#SEG( _sio0oEvent )
	MOV.W	R3,#SOF( _sio0oEvent )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	MOV.B	ES,R3L
	MOV.B	R2L,[R2+26]
	CALL	_KS_ISRexit
	SYMB	LTIM, "frame", 3, 0, 2125
; sio0drv.c  136	}
	SYMB	LINE, 136
	RET
	SYMB	EFUN
; sio0drv.c  137	
; sio0drv.c  138	/*
; sio0drv.c  139	 *
; sio0drv.c  140	 * interrupt service for receive 0 (SWR6)
; sio0drv.c  141	 *
; sio0drv.c  142	*/
; sio0drv.c  143	FRAME ks_stk *intsio0i( FRAME ks_stk *frame)
; sio0drv.c  144	{
	ALIGN	1
	SYMB	LINE, 144
	PUBLIC	_intsio0i
_intsio0i:
	SYMB	TYPE, 451, 'X', 12, #449, 30, 1, #449
	SYMB	GFUN, "intsio0i", _intsio0i, #451, 0, 0, 0
	SYMB	ALAB, _intsio0i, #451
	SYMB	LTIM, "frame", 3, 0, 2253
	SYMB	IDEN, "frame", 3, #449, 0, 2061
; sio0drv.c  145	  SWR6 = 0;
	SYMB	LINE, 145
	CLR	0355H
; sio0drv.c  146	
; sio0drv.c  147	  return( KS_ISRexit( frame, sio0iEvent->ID));
	SYMB	LINE, 147
	MOV.B	ES,#SEG( _sio0iEvent )
	MOV.W	R3,#SOF( _sio0iEvent )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	MOV.B	ES,R3L
	MOV.B	R2L,[R2+26]
	CALL	_KS_ISRexit
	SYMB	LTIM, "frame", 3, 0, 2125
; sio0drv.c  148	}
	SYMB	LINE, 148
	RET
	SYMB	EFUN
; sio0drv.c  149	
; sio0drv.c  150	
; sio0drv.c  151	void sio0_init( void)
; sio0drv.c  152	{
	ALIGN	1
	SYMB	LINE, 152
	PUBLIC	_sio0_init
_sio0_init:
	SYMB	TYPE, 452, 'X', 12, #1, 30, 0
	SYMB	GFUN, "sio0_init", _sio0_init, #452, 0, 0, 48
	SYMB	ALAB, _sio0_init, #452
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	IDEN, "tmp", -1, #3, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; sio0drv.c  153	  unsigned char tmp;
; sio0drv.c  154	
; sio0drv.c  155	  sio0iEvent=newTEvent( 0);
	SYMB	LINE, 155
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	CALL	_newTEvent
	MOV.B	ES,#SEG( _sio0iEvent )
	MOV.W	R2,#SOF( _sio0iEvent )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
	MOV.W	R1,#00H
	MOV.W	R0,#00H
; sio0drv.c  156	  sio0oEvent=newTEvent( 0);
	SYMB	LINE, 156
	CALL	_newTEvent
	MOV.B	ES,#SEG( _sio0oEvent )
	MOV.W	R2,#SOF( _sio0oEvent )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; sio0drv.c  157	
; sio0drv.c  158	  sio0Res=newTResource( 0);
	SYMB	LINE, 158
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	CALL	_newTResource
	MOV.B	ES,#SEG( _sio0Res )
	MOV.W	R2,#SOF( _sio0Res )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; sio0drv.c  159	
; sio0drv.c  160	  sio0iStream=newTStream( 1, 128);
	SYMB	LINE, 160
	MOV.W	R0,#01H
	MOV.W	R1,#080H
	CALL	_newTStream
	MOV.B	ES,#SEG( _sio0iStream )
	MOV.W	R2,#SOF( _sio0iStream )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; sio0drv.c  161	  sio0oStream=newTStream( 2, 64);
	SYMB	LINE, 161
	MOV.W	R1,#040H
	MOV.W	R0,#02H
	CALL	_newTStream
	MOV.B	ES,#SEG( _sio0oStream )
	MOV.W	R2,#SOF( _sio0oStream )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; sio0drv.c  162	
; sio0drv.c  163	  sio0iThread=newTThread( 2, sio0i);
	SYMB	LINE, 163
	MOV.W	R3,#SEG( _sio0i )
	MOV.W	R2,#SOF( _sio0i )
	MOV.W	R0,#02H
	CALL	_newTThread
	MOV.B	ES,#SEG( _sio0iThread )
	MOV.W	R2,#SOF( _sio0iThread )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; sio0drv.c  164	  sio0oThread=newTThread( 4, sio0o);
	SYMB	LINE, 164
	MOV.W	R0,#04H
	MOV.W	R3,#SEG( _sio0o )
	MOV.W	R2,#SOF( _sio0o )
	CALL	_newTThread
	MOV.B	ES,#SEG( _sio0oThread )
	MOV.W	R2,#SOF( _sio0oThread )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; sio0drv.c  165	
; sio0drv.c  166	  sio0iThread->Execute( sio0iThread);
	SYMB	LINE, 166
	MOV.B	ES,#SEG( _sio0iThread )
	MOV.W	R1,#SOF( _sio0iThread )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+6]
	MOV.W	R5,[R0+8]
	FCALL	__ICALL
; sio0drv.c  167	  sio0oThread->Execute( sio0oThread);
	SYMB	LINE, 167
	MOV.B	ES,#SEG( _sio0oThread )
	MOV.W	R1,#SOF( _sio0oThread )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+6]
	MOV.W	R5,[R0+8]
	FCALL	__ICALL
; sio0drv.c  168	
; sio0drv.c  169	  // S0CON - serial port 0 control register
; sio0drv.c  170	  S0CON = xS0CON;
	SYMB	LINE, 170
	MOV.B	0420H,#0D0H
; sio0drv.c  171	
; sio0drv.c  172	  // Timer/Counter 2 Mode Control Register
; sio0drv.c  173	  T2MOD = xTMOD;
	SYMB	LINE, 173
	MOV.B	0419H,#01H
; sio0drv.c  174	
; sio0drv.c  175	  // Timer/Counter 2 Control Register
; sio0drv.c  176	  T2CON = xTCON;
	SYMB	LINE, 176
	MOV.B	0418H,#030H
; sio0drv.c  177	
; sio0drv.c  178	  // Interrupt priority 4
; sio0drv.c  179	  IPA4 = ( TX0INTLVL << 4) + RX0INTLVL;
	SYMB	LINE, 179
	MOV.B	04A4H,#0BEH
; sio0drv.c  180	
; sio0drv.c  181	  T2CAPH = THI2_RESET;
	SYMB	LINE, 181
	MOV.B	045BH,#0FFH
; sio0drv.c  182	  T2CAPL = TLOW2_RESET;
	SYMB	LINE, 182
	MOV.B	045AH,#0F8H
; sio0drv.c  183		
; sio0drv.c  184	  RxInput = 0;				 // 
	SYMB	LINE, 184
	MOV.B	_RxInput,#00H
; sio0drv.c  185	  RxOutput = 0;
	SYMB	LINE, 185
	MOV.B	_RxOutput,#00H
; sio0drv.c  186	
; sio0drv.c  187	  tmp = S0BUF;           // read input to clear
; sio0drv.c  188	  tmp = S0BUF;           // read input to clear
; sio0drv.c  189	
; sio0drv.c  190	  KS_purgequeue( sio0oStream->ID);
	SYMB	LINE, 190
	MOV.B	ES,#SEG( _sio0oStream )
	MOV.W	R1,#SOF( _sio0oStream )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.B	R0L,[R0+18]
	CALL	_KS_purgequeue
; sio0drv.c  191	  KS_purgequeue( sio0iStream->ID);
	SYMB	LINE, 191
	MOV.B	ES,#SEG( _sio0iStream )
	MOV.W	R1,#SOF( _sio0iStream )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.B	R0L,[R0+18]
	CALL	_KS_purgequeue
; sio0drv.c  192	
; sio0drv.c  193	  SWE |= 0x20;           // Enable SW interrupt 6
	SYMB	LINE, 193
	OR.B	047AH,#020H
; sio0drv.c  194	
; sio0drv.c  195	  TR2  = 1;              // Start Timer 2
	SYMB	LINE, 195
	SETB	02C2H
; sio0drv.c  196	  REN_0 = 1;             // Enable seriel reception
	SYMB	LINE, 196
	SETB	0304H
; sio0drv.c  197	
; sio0drv.c  198	  TI_0 = 0;              // Clear possible transmit interrupt 
	SYMB	LINE, 198
	CLR	0301H
; sio0drv.c  199	  RI_0 = 0;              // Clear possible receive interrupt 
	SYMB	LINE, 199
	CLR	0300H
; sio0drv.c  200	
; sio0drv.c  201	  ERI0 = 1;              // Receive port 0 - enabled
	SYMB	LINE, 201
	SETB	0338H
; sio0drv.c  202	  ETI0 = 1;              // Transmit port 0 - enabled
	SYMB	LINE, 202
	SETB	0339H
; sio0drv.c  203	}
	SYMB	LINE, 203
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; sio0drv.c  204	
; sio0drv.c  205	
; sio0drv.c  206	/* TASK */
; sio0drv.c  207	void sio0i( void)
; sio0drv.c  208	{
	ALIGN	1
	SYMB	LINE, 208
	PUBLIC	_sio0i
_sio0i:
	SYMB	TYPE, 453, 'X', 12, #1, 30, 0
	SYMB	GFUN, "sio0i", _sio0i, #453, 0, 0, 48
	SYMB	ALAB, _sio0i, #453
	PUSH.W	R4, R5
	SYMB	SOFF, 4
; sio0drv.c  209		for (;;)
	SYMB	LINE, 209
_8:
_9:
; sio0drv.c  210	  {
; sio0drv.c  211	  	sio0iEvent->Wait( sio0iEvent, 0);
	SYMB	LINE, 211
	MOV.B	ES,#SEG( _sio0iEvent )
	MOV.W	R1,#SOF( _sio0iEvent )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+10]
	MOV.W	R5,[R0+12]
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	FCALL	__ICALL
; sio0drv.c  212	
; sio0drv.c  213	    EA = 0;
	SYMB	LINE, 213
	CLR	0337H
; sio0drv.c  214	    RxOutput = ++RxOutput % RxBufferLen;
	SYMB	LINE, 214
	ADDS.B	_RxOutput,#01H
	MOV.B	R0L,_RxOutput
	DIVU.B	R0L,#040H
	MOV.B	_RxOutput,R0H
; sio0drv.c  215	    	EA = 1;
	SYMB	LINE, 215
	SETB	0337H
; sio0drv.c  216	
; sio0drv.c  217	    sio0iStream->Put( sio0iStream, &RxBuffer[ RxOutput]);
	SYMB	LINE, 217
	MOV.B	ES,#SEG( _sio0iStream )
	MOV.W	R1,#SOF( _sio0iStream )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,#SEG( _sio0iStream )
	MOV.W	R2,#SOF( _sio0iStream )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
	MOV.B	ES,R1L
	MOV.W	R4,[R0+14]
	MOV.W	R5,[R0+16]
	MOV.B	R0L,_RxOutput
	MOVS.B	R0H,#00H
	MOVS.W	R1,#00H
	MOV.W	R3,#SEG( _RxBuffer )
	MOV.W	R2,#SOF( _RxBuffer )
	ADD.W	R2,R0
	MOV.B	ES,#SEG( _sio0iStream )
	MOV.W	R1,#SOF( _sio0iStream )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	FCALL	__ICALL
; sio0drv.c  218	    
; sio0drv.c  219		 	if ( RxOutput - RxInput) // If more input data
	SYMB	LINE, 219
	MOV.B	R0L,_RxOutput
	MOVS.B	R0H,#00H
	MOV.B	R1L,_RxInput
	MOVS.B	R1H,#00H
	SUB.W	R0,R1
	OR.W	R0,R0
	BEQ	_9
; sio0drv.c  220	      SWR6 = 1;              //  enable SW6 interrupt again
	SYMB	LINE, 220
	SETB	0355H
	SYMB	LINE, 209
	BR	_8
; sio0drv.c  221	  }
; sio0drv.c  222	}
	SYMB	LINE, 222
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; sio0drv.c  223	
; sio0drv.c  224	
; sio0drv.c  225	/* TASK */
; sio0drv.c  226	void sio0o( void)
; sio0drv.c  227	{
	ALIGN	1
	SYMB	LINE, 227
	PUBLIC	_sio0o
_sio0o:
	SYMB	TYPE, 454, 'X', 12, #1, 30, 0
	SYMB	GFUN, "sio0o", _sio0o, #454, 0, 0, 48
	SYMB	ALAB, _sio0o, #454
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0EH
	SYMB	SOFF, 6
	SYMB	IDEN, "ochar", -6, #16, 130, 5
; sio0drv.c  228	  int ochar;
; sio0drv.c  229	
; sio0drv.c  230	  for (;;)
	SYMB	LINE, 230
_10:
; sio0drv.c  231	  {
; sio0drv.c  232	    sio0oStream->Get( sio0oStream, &ochar);
	SYMB	LINE, 232
	MOV.B	ES,#SEG( _sio0oStream )
	MOV.W	R1,#SOF( _sio0oStream )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+10]
	MOV.W	R5,[R0+12]
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	FCALL	__ICALL
; sio0drv.c  233	
; sio0drv.c  234	    TB8_0 = ( ochar >> 8) & 0x01;
	SYMB	LINE, 234
	MOV.W	R0,[R7]
	ASR.W	R0,#08H
	AND.W	R0,#01H
	CLR	R0.0
	BEQ	_11
	SETB	R0.0
_11:
	MOV	C,R0.0
	MOV	0303H,C
; sio0drv.c  235	
; sio0drv.c  236	    S0BUF = ochar & 0xFF;    // Write char to port
	SYMB	LINE, 236
	MOV.W	R0,[R7]
	AND.B	R0L,#0FFH
	MOV.B	0460H,R0L
; sio0drv.c  237	    TI_0 = 0;                // Clear interrupt IMMEDIATELY to disable
	SYMB	LINE, 237
	CLR	0301H
; sio0drv.c  238	                             //  double buffering
; sio0drv.c  239	
; sio0drv.c  240	    sio0oEvent->Wait( sio0oEvent, 0);
	SYMB	LINE, 240
	MOV.B	ES,#SEG( _sio0oEvent )
	MOV.W	R1,#SOF( _sio0oEvent )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+10]
	MOV.W	R5,[R0+12]
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	FCALL	__ICALL
	SYMB	LINE, 230
	BR	_10
; sio0drv.c  241	  }
; sio0drv.c  242	}
	SYMB	LINE, 242
	ADDS.W	R7,#02H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; sio0drv.c  243	
; sio0drv.c  244	/**************************************************************************/
; sio0drv.c  245	/* sio0WaitAcknowledge																				  SIO0DRV.C	*/
; sio0drv.c  246	/*																																				*/
; sio0drv.c  247	/* Author:		Kim Engedahl, DEV, 000120																		*/
; sio0drv.c  248	/* Revised:		000409, KEn, DEV     																				*/
; sio0drv.c  249	/*																																				*/
; sio0drv.c  250	/* Function:	Transmit <cmdbuf> to <addr> and wait for an acknowledge	 		*/
; sio0drv.c  251	/* Remarks:   Resource should be locked BEFORE entering this function			*/
; sio0drv.c  252	/* Returns:		sio0NoError, sio0TxCksumError, sio0NoAcknowledge or					*/
; sio0drv.c  253	/*            sioUnknowError.																							*/ 
; sio0drv.c  254	/* Updates:		--																													*/
; sio0drv.c  255	/**************************************************************************/
; sio0drv.c  256	int sio0WaitAcknowledge( int addr, char *cmdbuf)
; sio0drv.c  257	{
	ALIGN	1
	SYMB	LINE, 257
	PUBLIC	_sio0WaitAcknowledge
_sio0WaitAcknowledge:
	SYMB	TYPE, 455, 'X', 12, #16, 30, 2, #16, #258
	SYMB	GFUN, "sio0WaitAcknowledge", _sio0WaitAcknowledge, #455, 0, 0, 112
	SYMB	ALAB, _sio0WaitAcknowledge, #455
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#010H
	SYMB	SOFF, 22
	SYMB	LTIM, "addr", 2, 0, 2253
	SYMB	LTIM, "cmdbuf", 11, 0, 2253
	SYMB	IDEN, "addr", 2, #16, 0, 2061
	SYMB	IDEN, "cmdbuf", 11, #258, 0, 2061
	SYMB	IDEN, "ptr", -1, #258, 130, 5
	SYMB	LTIM, "ptr", -1, 0, 69
	SYMB	IDEN, "tmp", -8, #16, 130, 5
	SYMB	IDEN, "checksum", -1, #3, 130, 5
	SYMB	LTIM, "checksum", -1, 0, 69
	SYMB	IDEN, "retransmit", -1, #3, 130, 5
	SYMB	LTIM, "retransmit", -1, 0, 69
; sio0drv.c  258	  char *ptr;
; sio0drv.c  259	  int tmp;
; sio0drv.c  260	  UC checksum, retransmit = RxRetransmit;
	SYMB	LINE, 260
	MOV.B	R6H,#03H
	SYMB	LTIM, "retransmit", 25, 0, 205
; sio0drv.c  261	
; sio0drv.c  262	  do
	SYMB	LINE, 262
	ADD.W	R0,#0100H
	SYMB	LTIM, "addr", 2, 0, 2125
	MOV.W	[R7+8],R0
	MOV.W	[R7+12],R3
	MOV.W	[R7+10],R2
	ADD.W	R2,#01H
	SYMB	LTIM, "cmdbuf", 11, 0, 2125
	SYMB	LTIM, "cmdbuf", -12, 130, 2245
	MOV.W	[R7+6],R3
	MOV.W	[R7+4],R2
_22:
; sio0drv.c  263	  {
; sio0drv.c  264	    tmp  = addr + 0x100;		// Transmit unit address
	SYMB	LINE, 264
	MOV.W	R0,[R7+8]
	MOV.W	[R7+14],R0
; sio0drv.c  265	    sio0oStream->Put( sio0oStream, &tmp);
	SYMB	LINE, 265
	MOV.B	ES,#SEG( _sio0oStream )
	MOV.W	R1,#SOF( _sio0oStream )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+14]
	MOV.W	R5,[R0+16]
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+14
	FCALL	__ICALL
; sio0drv.c  266	
; sio0drv.c  267	    checksum = 0;
	SYMB	LINE, 267
	MOV.B	R6L,#00H
	SYMB	LTIM, "checksum", 24, 0, 205
; sio0drv.c  268	    ptr = cmdbuf;
; sio0drv.c  269	
; sio0drv.c  270	    while ( tmp = *ptr++)
	SYMB	LINE, 270
	MOV.W	R1,[R7+12]
	MOV.W	R0,[R7+10]
	MOV.B	ES,R1L
	MOV.B	R0L,[R0]
	SEXT.B	R0H
	MOV.W	[R7+14],R0
	MOV.W	R3,[R7+6]
	MOV.W	R2,[R7+4]
	SYMB	LTIM, "ptr", 11, 0, 205
	MOV.W	[R7+2],R3
	MOV.W	[R7],R2
	SYMB	LTIM, "ptr", 11, 0, 77
	SYMB	LTIM, "ptr", -22, 130, 197
	OR.W	R0,R0
	BEQ	_24
_23:
; sio0drv.c  271			{
; sio0drv.c  272	      sio0oStream->Put( sio0oStream, &tmp);
	SYMB	LINE, 272
	MOV.B	ES,#SEG( _sio0oStream )
	MOV.W	R1,#SOF( _sio0oStream )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+14]
	MOV.W	R5,[R0+16]
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+14
	FCALL	__ICALL
; sio0drv.c  273	
; sio0drv.c  274	      checksum += tmp;
	SYMB	LINE, 274
	MOV.W	R0,[R7+14]
	ADD.B	R6L,R0L
	SYMB	LTIM, "checksum", 24, 0, 77
	SYMB	LTIM, "checksum", 24, 0, 205
	SYMB	LINE, 270
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	MOV.B	ES,R1L
	MOV.B	R0L,[R0]
	SEXT.B	R0H
	MOV.W	[R7+14],R0
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	ADD.W	R2,#01H
	SYMB	LTIM, "ptr", -22, 130, 69
	SYMB	LTIM, "ptr", 11, 0, 205
	SYMB	LTIM, "ptr", 11, 0, 77
	MOV.W	[R7+2],R3
	MOV.W	[R7],R2
	SYMB	LTIM, "ptr", -22, 130, 197
	OR.W	R0,R0
	BNE	_23
; sio0drv.c  275	    }
	SYMB	LINE, 275
_24:
; sio0drv.c  276	
; sio0drv.c  277	    tmp = checksum & 0x7F;		// Transmit checksum
	SYMB	LINE, 277
	AND.B	R6L,#07FH
	SYMB	LTIM, "checksum", 24, 0, 77
	MOV.B	R0L,R6L
	MOVS.B	R0H,#00H
	MOV.W	[R7+14],R0
; sio0drv.c  278	    sio0oStream->Put( sio0oStream, &tmp);
	SYMB	LINE, 278
	MOV.B	ES,#SEG( _sio0oStream )
	MOV.W	R1,#SOF( _sio0oStream )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+14]
	MOV.W	R5,[R0+16]
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+14
	FCALL	__ICALL
; sio0drv.c  279	
; sio0drv.c  280	                              // Wait for unit to acknowledge
; sio0drv.c  281	    if ( KS_dequeuet( sio0iStream->ID, &tmp, RxTimeout/CLKTICK) == RC_GOOD)
	SYMB	LINE, 281
	MOV.B	ES,#SEG( _sio0iStream )
	MOV.W	R1,#SOF( _sio0iStream )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.B	R0L,[R0+18]
	MOV.W	R1,#03H
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+14
	CALL	_KS_dequeuet
	OR.W	R0,R0
	BNE	_28
; sio0drv.c  282	    {
; sio0drv.c  283	      switch ( tmp)
	SYMB	LINE, 283
	CMP.W	[R7+14],#080H
	BEQ	_25
	CMP.W	[R7+14],#081H
	BEQ	_26
	BR	_27
; sio0drv.c  284				{
; sio0drv.c  285	        case 0x80:
	SYMB	LINE, 285
_25:
; sio0drv.c  286	          return( OK);
	SYMB	LINE, 286
	MOV.W	R0,#0FFFFH
	BR	_31
; sio0drv.c  287	
; sio0drv.c  288	        case 0x81:
	SYMB	LINE, 288
_26:
; sio0drv.c  289	          return( EventSIO0TxCksumErr);
	SYMB	LINE, 289
	MOV.W	R0,#0D4AH
	BR	_31
; sio0drv.c  290	
; sio0drv.c  291	        default:
	SYMB	LINE, 291
_27:
; sio0drv.c  292	          return( EventSIO0Error);
	SYMB	LINE, 292
	MOV.W	R0,#0D48H
	BR	_31
; sio0drv.c  293				}
; sio0drv.c  294	    }
	SYMB	LINE, 294
_28:
	SYMB	LTIM, "cmdbuf", -12, 130, 2117
	SYMB	LTIM, "cmdbuf", -12, 130, 2245
	SYMB	LTIM, "retransmit", 25, 0, 77
	SYMB	LTIM, "retransmit", 25, 0, 205
; sio0drv.c  295	  } while ( retransmit--);
	SYMB	LINE, 295
	MOV.B	R0L,R6H
	SYMB	LTIM, "retransmit", 25, 0, 77
	SYMB	LTIM, "retransmit", 0, 0, 205
	ADDS.B	R6H,#0FH
	SYMB	LTIM, "retransmit", 0, 0, 77
	SYMB	LTIM, "retransmit", 25, 0, 205
	OR.B	R0L,R0L
	BNE	_22
; sio0drv.c  296	
; sio0drv.c  297	  return( EventSIO0NoAck);
	SYMB	LINE, 297
	MOV.W	R0,#0D49H
; sio0drv.c  298	}										
	SYMB	LINE, 298
_31:
	ADD.W	R7,#010H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "retransmit", 25, 0, 77
	SYMB	LTIM, "cmdbuf", -12, 130, 2117
	SYMB	LTIM, "ptr", -22, 130, 69
	SYMB	EFUN
; sio0drv.c  299	
; sio0drv.c  300	/**************************************************************************/
; sio0drv.c  301	/* sio0WaitAnswer																						  	SIO0DRV.C	*/
; sio0drv.c  302	/*																																				*/
; sio0drv.c  303	/* Author:		Kim Engedahl, DEV, 000119																		*/
; sio0drv.c  304	/* Revised:		000409, KEn, DEV     																				*/
; sio0drv.c  305	/*																																				*/
; sio0drv.c  306	/* Function:	Wait for an answer																					*/
; sio0drv.c  307	/* Remarks:   Resource should be locked BEFORE entering this function			*/
; sio0drv.c  308	/* Returns:		sio0Noerror, sio0RxTimeout, sio0CksumError									*/
; sio0drv.c  309	/* Updates:		--																													*/
; sio0drv.c  310	/**************************************************************************/
; sio0drv.c  311	int sio0WaitAnswer( void *buf)
; sio0drv.c  312	{
	ALIGN	1
	SYMB	LINE, 312
	PUBLIC	_sio0WaitAnswer
_sio0WaitAnswer:
	SYMB	TYPE, 456, 'X', 12, #16, 30, 1, #262
	SYMB	GFUN, "sio0WaitAnswer", _sio0WaitAnswer, #456, 0, 0, 112
	SYMB	ALAB, _sio0WaitAnswer, #456
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#0EH
	SYMB	SOFF, 8
	SYMB	LTIM, "buf", 3, 0, 2253
	SYMB	IDEN, "buf", 3, #262, 0, 2061
	SYMB	IDEN, "timeout", -1, #16, 130, 5
	SYMB	LTIM, "timeout", -1, 0, 69
	SYMB	IDEN, "tmp", -8, #2, 130, 5
	SYMB	IDEN, "next", -1, #2, 130, 5
	SYMB	LTIM, "next", -1, 0, 69
; sio0drv.c  313	  int  timeout;
; sio0drv.c  314	  char tmp, next = TRUE;
	SYMB	LINE, 314
	MOV.B	R6L,#0FFH
	SYMB	LTIM, "next", 24, 0, 205
	SYMB	IDEN, "checksum", -1, #3, 130, 5
	SYMB	LTIM, "checksum", -1, 0, 69
; sio0drv.c  315	  UC checksum = 0;
	SYMB	LINE, 315
	MOV.B	R6H,#00H
	SYMB	LTIM, "checksum", 25, 0, 205
	SYMB	IDEN, "ptr", -1, #258, 130, 5
	SYMB	LTIM, "ptr", -1, 0, 69
; sio0drv.c  316	  char *ptr = buf;
	SYMB	LINE, 316
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "ptr", 19, 0, 205
; sio0drv.c  317	
; sio0drv.c  318	  do
	SYMB	LINE, 318
_32:
; sio0drv.c  319	  {
; sio0drv.c  320	    if (( timeout = KS_dequeuet( sio0iStream->ID, &tmp, RxTimeout/CLKTICK)) == RC_GOOD)
	SYMB	LINE, 320
	MOV.B	ES,#SEG( _sio0iStream )
	MOV.W	R1,#SOF( _sio0iStream )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	SYMB	LTIM, "buf", 3, 0, 2125
	MOV.B	ES,R1L
	MOV.B	R0L,[R0+18]
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.W	R1,#03H
	CALL	_KS_dequeuet
	MOV.W	R1,R0
	BNE	_40
; sio0drv.c  321	    {
; sio0drv.c  322	      checksum += tmp;
	SYMB	LINE, 322
	ADD.B	R6H,[R7]
	SYMB	LTIM, "checksum", 25, 0, 77
	SYMB	LTIM, "checksum", 25, 0, 205
; sio0drv.c  323				*ptr++ = tmp;
	SYMB	LINE, 323
	MOV.B	R1L,[R7]
	MOV.B	ES,R5L
	MOV.B	[R4],R1L
	ADD.W	R4,#01H
	SYMB	LTIM, "ptr", 19, 0, 77
	SYMB	LTIM, "ptr", 19, 0, 205
; sio0drv.c  324	      
; sio0drv.c  325	      switch ( tmp)
	SYMB	LINE, 325
	CMP.B	[R7],#0AH
	BEQ	_38
	CMP.B	[R7],#0DH
	BEQ	_38
	CMP.B	[R7],#03BH
	BEQ	_38
	CMP.B	[R7],#021H
	BEQ	_38
	CMP.B	[R7],#03FH
	BEQ	_38
	CMP.B	[R7],#024H
	BEQ	_38
	BR	_40
; sio0drv.c  326	      {
; sio0drv.c  327				  case 0x0A:
; sio0drv.c  328				  case 0x0D:
; sio0drv.c  329			  	case ';':
; sio0drv.c  330				  case '!':
; sio0drv.c  331				  case '?':
; sio0drv.c  332				  case '$':
	SYMB	LINE, 332
_38:
; sio0drv.c  333						next = FALSE;
	SYMB	LINE, 333
	MOV.B	R6L,#00H
	SYMB	LTIM, "next", 24, 0, 77
	SYMB	LTIM, "next", 24, 0, 205
; sio0drv.c  334				    break;
; sio0drv.c  335	
; sio0drv.c  336	  		  default:
; sio0drv.c  337				    break;
; sio0drv.c  338				}
; sio0drv.c  339			} 
	SYMB	LINE, 339
_40:
; sio0drv.c  340	  } while ( next && ( timeout != RC_TIMEOUT));
	SYMB	LINE, 340
	OR.B	R6L,R6L
	BEQ	_41
	CMP.W	R0,#05H
	BNE	_32
_41:
; sio0drv.c  341	
; sio0drv.c  342	  if ( timeout != RC_TIMEOUT) {
	SYMB	LINE, 342
	CMP.W	R0,#05H
	BEQ	_44
; sio0drv.c  343	
; sio0drv.c  344	    *(--ptr) = 0;			  			// Remove delimiter
	SYMB	LINE, 344
	SUB.W	R4,#01H
	SYMB	LTIM, "ptr", 19, 0, 77
	MOV.B	ES,R5L
	MOV.B	[R4],#00H
; sio0drv.c  345	
; sio0drv.c  346	                              // Wait for checksum
; sio0drv.c  347	    if ( KS_dequeuet( sio0iStream->ID, &tmp, RxTimeout/CLKTICK) == RC_GOOD)
	SYMB	LINE, 347
	MOV.B	ES,#SEG( _sio0iStream )
	MOV.W	R1,#SOF( _sio0iStream )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.B	R0L,[R0+18]
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	MOV.W	R1,#03H
	CALL	_KS_dequeuet
	OR.W	R0,R0
	BNE	_44
; sio0drv.c  348	    {
; sio0drv.c  349	      if ( tmp - ( checksum & 0x7F))
	SYMB	LINE, 349
	MOV.B	R0L,[R7]
	SEXT.B	R0H
	AND.B	R6H,#07FH
	SYMB	LTIM, "checksum", 25, 0, 77
	MOV.B	R6L,R6H
	MOVS.B	R6H,#00H
	SYMB	LTIM, "next", 24, 0, 77
	SUB.W	R0,R6
	OR.W	R0,R0
	BEQ	_42
; sio0drv.c  350				  return( EventSIO0RxCksumErr);
	SYMB	LINE, 350
	MOV.W	R0,#0D4BH
	BR	_46
_42:
; sio0drv.c  351	
; sio0drv.c  352	      return( OK);
	SYMB	LINE, 352
	MOV.W	R0,#0FFFFH
	BR	_46
; sio0drv.c  353	    }
; sio0drv.c  354	  }
	SYMB	LINE, 354
_44:
; sio0drv.c  355	                             
; sio0drv.c  356	  return( EventSIO0RxTimeout);
	SYMB	LINE, 356
	MOV.W	R0,#0D4CH
; sio0drv.c  357	}										
	SYMB	LINE, 357
_46:
	ADDS.W	R7,#02H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; sio0drv.c  358	
; sio0drv.c  359	/**************************************************************************/
; sio0drv.c  360	/* sio0SndCommand		 																				 	 SIO0DRV.C	*/
; sio0drv.c  361	/*																																				*/
; sio0drv.c  362	/* Author:		Kim Engedahl, DEV, 000119																		*/
; sio0drv.c  363	/* Revised:		000404, KEn, DEV     																				*/
; sio0drv.c  364	/*																																				*/
; sio0drv.c  365	/* Function:   																														*/
; sio0drv.c  366	/* Remarks:																																*/
; sio0drv.c  367	/* Returns:																																*/
; sio0drv.c  368	/* Updates:																																*/
; sio0drv.c  369	/**************************************************************************/
; sio0drv.c  370	int sio0SndCommand( int cnt, int addr, const char *format, ...)
; sio0drv.c  371	{
	ALIGN	1
	SYMB	LINE, 371
	PUBLIC	_sio0SndCommand
_sio0SndCommand:
	SYMB	TYPE, 457, 'X', 12, #16, 30, 4, #16, #16, #258, #1
	SYMB	GFUN, "sio0SndCommand", _sio0SndCommand, #457, 0, 0, 112
	SYMB	ALAB, _sio0SndCommand, #457
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#0AH
	SYMB	SOFF, 16
	SYMB	LTIM, "cnt", 2, 0, 2253
	SYMB	LTIM, "addr", 6, 0, 2253
	MOV.W	[R7+4],R1
	SYMB	LTIM, "addr", 6, 0, 2125
	SYMB	LTIM, "addr", -12, 130, 2245
	MOV.W	R6,R0
	SYMB	LTIM, "cnt", 2, 0, 2125
	SYMB	LTIM, "cnt", 26, 0, 2253
	SYMB	IDEN, "cnt", 26, #16, 0, 2061
	SYMB	IDEN, "addr", -7, #16, 130, 2053
	SYMB	IDEN, "format", 4, #258, 130, 2053
	SYMB	IDEN, "va_ptr", -10, #265, 130, 5
	SYMB	IDEN, "buf", -1, #258, 130, 5
	SYMB	LTIM, "buf", -1, 0, 69
	SYMB	IDEN, "ret", -1, #16, 130, 5
	SYMB	LTIM, "ret", -1, 0, 69
; sio0drv.c  372	  va_list va_ptr;
; sio0drv.c  373	  char *buf;
; sio0drv.c  374	  int ret;
; sio0drv.c  375	
; sio0drv.c  376	  sio0Res->Lock( sio0Res);
	SYMB	LINE, 376
	MOV.B	ES,#SEG( _sio0Res )
	MOV.W	R1,#SOF( _sio0Res )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+10]
	MOV.W	R5,[R0+12]
	FCALL	__ICALL
; sio0drv.c  377	
; sio0drv.c  378	  buf = new( cnt+16);
	SYMB	LINE, 378
	ADD.W	R6,#010H
	SYMB	LTIM, "cnt", 26, 0, 2125
	MOV.W	R0,R6
	SEXT.W	R1
	CALL	_new
	SYMB	LTIM, "buf", 3, 0, 205
; sio0drv.c  379	
; sio0drv.c  380	  va_start( va_ptr, format);
	SYMB	LINE, 380
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+24
	MOV.W	[R7+8],R3
	MOV.W	[R7+6],R2
; sio0drv.c  381	  ret = vsprintf( buf, format, va_ptr);
	SYMB	LINE, 381
	MOV.W	R3,[R7+22]
	MOV.W	R2,[R7+20]
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+6
	PUSH.W	R4, R5
	SYMB	SOFF, 20
	MOV.W	[R7+6],R1
	MOV.W	[R7+4],R0
	SYMB	LTIM, "buf", 3, 0, 77
	SYMB	LTIM, "buf", -16, 130, 197
	SYMB	LTIM, "buf", -16, 130, 69
	SYMB	LTIM, "buf", 3, 0, 205
	CALL	_vsprintf
	ADDS.W	R7,#04H
	SYMB	SOFF, 16
	SYMB	LTIM, "buf", 3, 0, 77
	SYMB	LTIM, "buf", -16, 130, 197
	SYMB	LTIM, "ret", 2, 0, 205
; sio0drv.c  382	  va_end( va_ptr);
	SYMB	LINE, 382
	MOV.W	[R7+8],#00H
	MOV.W	[R7+6],#00H
; sio0drv.c  383	
; sio0drv.c  384	  if (( ret == EOF) || ( ret > cnt+16))
	SYMB	LINE, 384
	CMP.W	R0,#0FFFFH
	BEQ	_49
	CMP.W	R0,R6
	BLE	_50
_49:
; sio0drv.c  385	  {
; sio0drv.c  386		  sio0Res->Unlock( sio0Res);
	SYMB	LINE, 386
	MOV.B	ES,#SEG( _sio0Res )
	MOV.W	R1,#SOF( _sio0Res )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	SYMB	LTIM, "ret", 2, 0, 77
	MOV.B	ES,R1L
	MOV.W	R4,[R0+14]
	MOV.W	R5,[R0+16]
	FCALL	__ICALL
; sio0drv.c  387	
; sio0drv.c  388	    delete( buf);
	SYMB	LINE, 388
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	CALL	_delete
	SYMB	LTIM, "buf", -16, 130, 69
	SYMB	LTIM, "buf", 3, 0, 205
	SYMB	LTIM, "buf", 3, 0, 77
; sio0drv.c  389	
; sio0drv.c  390	    return( EOF);				   // EOF is -1
	SYMB	LINE, 390
	MOV.W	R0,#0FFFFH
	BR	_51
; sio0drv.c  391	  }
	SYMB	LINE, 391
_50:
	SYMB	LTIM, "addr", -12, 130, 2117
	SYMB	LTIM, "addr", -12, 130, 2245
	SYMB	LTIM, "buf", -16, 130, 197
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	SYMB	LTIM, "buf", -16, 130, 69
	SYMB	LTIM, "buf", 11, 0, 205
; sio0drv.c  392	
; sio0drv.c  393	  ret = sio0WaitAcknowledge( addr, buf);
	SYMB	LINE, 393
	MOV.W	R0,[R7+4]
	CALL	_sio0WaitAcknowledge
	SYMB	LTIM, "buf", 11, 0, 77
	SYMB	LTIM, "buf", -16, 130, 197
	SYMB	LTIM, "addr", -12, 130, 2117
	SYMB	LTIM, "addr", 2, 0, 2253
	SYMB	LTIM, "addr", 2, 0, 2125
	MOV.W	R6,R0
	SYMB	LTIM, "ret", 26, 0, 205
; sio0drv.c  394	
; sio0drv.c  395	  delete( buf);
	SYMB	LINE, 395
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	CALL	_delete
	SYMB	LTIM, "buf", -16, 130, 69
	SYMB	LTIM, "buf", 3, 0, 205
	SYMB	LTIM, "buf", 3, 0, 77
; sio0drv.c  396	
; sio0drv.c  397	  sio0Res->Unlock( sio0Res);
	SYMB	LINE, 397
	MOV.B	ES,#SEG( _sio0Res )
	MOV.W	R1,#SOF( _sio0Res )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+14]
	MOV.W	R5,[R0+16]
	FCALL	__ICALL
; sio0drv.c  398	
; sio0drv.c  399	  return( ret);
	SYMB	LINE, 399
	MOV.W	R0,R6
	SYMB	LTIM, "ret", 26, 0, 77
	SYMB	LTIM, "ret", 2, 0, 205
; sio0drv.c  400	}
	SYMB	LINE, 400
_51:
	ADD.W	R7,#0AH
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "ret", 2, 0, 77
	SYMB	EFUN
; sio0drv.c  401	
; sio0drv.c  402	/**************************************************************************/
; sio0drv.c  403	/* sio0SndRequest	 																					  	SIO0DRV.C	*/
; sio0drv.c  404	/*																																				*/
; sio0drv.c  405	/* Author:		Kim Engedahl, DEV, 000119																		*/
; sio0drv.c  406	/* Revised:		000404, KEn, DEV     																				*/
; sio0drv.c  407	/*																																				*/
; sio0drv.c  408	/* Function:   																														*/
; sio0drv.c  409	/* Remarks:																																*/
; sio0drv.c  410	/* Returns:																																*/
; sio0drv.c  411	/* Updates:																																*/
; sio0drv.c  412	/***************************************************************************/
; sio0drv.c  413	int sio0SndRequest( int cnt, int addr, char *result, const char *format, ...)
; sio0drv.c  414	{
	ALIGN	1
	SYMB	LINE, 414
	PUBLIC	_sio0SndRequest
_sio0SndRequest:
	SYMB	TYPE, 458, 'X', 12, #16, 30, 5, #16, #16, #258, #258, #1
	SYMB	GFUN, "sio0SndRequest", _sio0SndRequest, #458, 0, 0, 112
	SYMB	ALAB, _sio0SndRequest, #458
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#0EH
	SYMB	SOFF, 20
	SYMB	LTIM, "cnt", 2, 0, 2253
	SYMB	LTIM, "addr", 6, 0, 2253
	SYMB	LTIM, "result", 11, 0, 2253
	MOV.W	[R7+6],R3
	MOV.W	[R7+4],R2
	SYMB	LTIM, "result", 11, 0, 2125
	SYMB	LTIM, "result", -16, 130, 2245
	MOV.W	[R7+8],R1
	SYMB	LTIM, "addr", 6, 0, 2125
	SYMB	LTIM, "addr", -12, 130, 2245
	MOV.W	R6,R0
	SYMB	LTIM, "cnt", 2, 0, 2125
	SYMB	LTIM, "cnt", 26, 0, 2253
	SYMB	IDEN, "cnt", 26, #16, 0, 2061
	SYMB	IDEN, "addr", -7, #16, 130, 2053
	SYMB	IDEN, "result", -7, #258, 130, 2053
	SYMB	IDEN, "format", 4, #258, 130, 2053
	SYMB	IDEN, "va_ptr", -10, #265, 130, 5
	SYMB	IDEN, "buf", -1, #258, 130, 5
	SYMB	LTIM, "buf", -1, 0, 69
	SYMB	IDEN, "ret", -1, #16, 130, 5
	SYMB	LTIM, "ret", -1, 0, 69
; sio0drv.c  415	  va_list va_ptr;
; sio0drv.c  416	  char *buf;
; sio0drv.c  417	  int ret;
; sio0drv.c  418	
; sio0drv.c  419	  sio0Res->Lock( sio0Res);
	SYMB	LINE, 419
	MOV.B	ES,#SEG( _sio0Res )
	MOV.W	R1,#SOF( _sio0Res )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+10]
	MOV.W	R5,[R0+12]
	FCALL	__ICALL
; sio0drv.c  420	
; sio0drv.c  421	  buf = new( cnt+16);
	SYMB	LINE, 421
	ADD.W	R6,#010H
	SYMB	LTIM, "cnt", 26, 0, 2125
	MOV.W	R0,R6
	SEXT.W	R1
	CALL	_new
	SYMB	LTIM, "buf", 3, 0, 205
; sio0drv.c  422	
; sio0drv.c  423	  va_start( va_ptr, format);
	SYMB	LINE, 423
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+28
	MOV.W	[R7+12],R3
	MOV.W	[R7+10],R2
; sio0drv.c  424	  ret = vsprintf( buf, format, va_ptr);
	SYMB	LINE, 424
	MOV.W	R3,[R7+26]
	MOV.W	R2,[R7+24]
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	LEA	R4,R7+10
	PUSH.W	R4, R5
	SYMB	SOFF, 24
	MOV.W	[R7+6],R1
	MOV.W	[R7+4],R0
	SYMB	LTIM, "buf", 3, 0, 77
	SYMB	LTIM, "buf", -20, 130, 197
	SYMB	LTIM, "buf", -20, 130, 69
	SYMB	LTIM, "buf", 3, 0, 205
	CALL	_vsprintf
	ADDS.W	R7,#04H
	SYMB	SOFF, 20
	SYMB	LTIM, "buf", 3, 0, 77
	SYMB	LTIM, "buf", -20, 130, 197
	SYMB	LTIM, "ret", 2, 0, 205
; sio0drv.c  425	  va_end( va_ptr);
	SYMB	LINE, 425
	MOV.W	[R7+12],#00H
	MOV.W	[R7+10],#00H
; sio0drv.c  426	
; sio0drv.c  427	  if (( ret == EOF) || ( ret > cnt+16))
	SYMB	LINE, 427
	CMP.W	R0,#0FFFFH
	BEQ	_54
	CMP.W	R0,R6
	BLE	_55
_54:
; sio0drv.c  428	  {
; sio0drv.c  429		  sio0Res->Unlock( sio0Res);
	SYMB	LINE, 429
	MOV.B	ES,#SEG( _sio0Res )
	MOV.W	R1,#SOF( _sio0Res )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	SYMB	LTIM, "ret", 2, 0, 77
	MOV.B	ES,R1L
	MOV.W	R4,[R0+14]
	MOV.W	R5,[R0+16]
	FCALL	__ICALL
; sio0drv.c  430	
; sio0drv.c  431	    delete( buf);
	SYMB	LINE, 431
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	CALL	_delete
	SYMB	LTIM, "buf", -20, 130, 69
	SYMB	LTIM, "buf", 3, 0, 205
	SYMB	LTIM, "buf", 3, 0, 77
; sio0drv.c  432	
; sio0drv.c  433	    return( EOF);				   // EOF is -1
	SYMB	LINE, 433
	MOV.W	R0,#0FFFFH
	BR	_57
; sio0drv.c  434	  }
	SYMB	LINE, 434
_55:
	SYMB	LTIM, "addr", -12, 130, 2117
	SYMB	LTIM, "addr", -12, 130, 2245
	SYMB	LTIM, "result", -16, 130, 2117
	SYMB	LTIM, "result", -16, 130, 2245
	SYMB	LTIM, "buf", -20, 130, 197
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	SYMB	LTIM, "buf", -20, 130, 69
	SYMB	LTIM, "buf", 11, 0, 205
; sio0drv.c  435	
; sio0drv.c  436	  ret = sio0WaitAcknowledge( addr, buf);
	SYMB	LINE, 436
	MOV.W	R0,[R7+8]
	CALL	_sio0WaitAcknowledge
	SYMB	LTIM, "addr", -12, 130, 2117
	SYMB	LTIM, "addr", 2, 0, 2253
	SYMB	LTIM, "addr", 2, 0, 2125
	SYMB	LTIM, "buf", 11, 0, 77
	SYMB	LTIM, "buf", -20, 130, 197
; sio0drv.c  437	
; sio0drv.c  438	  delete( buf);
	SYMB	LINE, 438
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	CALL	_delete
	SYMB	LTIM, "buf", -20, 130, 69
	SYMB	LTIM, "buf", 3, 0, 205
	SYMB	LTIM, "buf", 3, 0, 77
; sio0drv.c  439	
; sio0drv.c  440	  buf = new( 50);
	SYMB	LINE, 440
	MOV.W	R1,#00H
	MOV.W	R0,#032H
	CALL	_new
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "buf", 19, 0, 205
; sio0drv.c  441	
; sio0drv.c  442	  if (( ret = sio0WaitAnswer( buf)) == OK)
	SYMB	LINE, 442
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "buf", 19, 0, 77
	SYMB	LTIM, "buf", 3, 0, 205
	CALL	_sio0WaitAnswer
	SYMB	LTIM, "buf", 3, 0, 77
	SYMB	LTIM, "buf", 19, 0, 205
	MOV.W	R6,R0
	SYMB	LTIM, "ret", 26, 0, 205
	CMP.W	R6,#0FFFFH
	BNE	_56
	MOV.W	R3,R5
	MOV.W	R2,R4
	SYMB	LTIM, "buf", 19, 0, 77
	SYMB	LTIM, "buf", 11, 0, 205
; sio0drv.c  443			strcpy( result, buf);
	SYMB	LINE, 443
	MOV.W	R1,[R7+6]
	MOV.W	R0,[R7+4]
	CALL	_strcpy
	SYMB	LTIM, "buf", 11, 0, 77
	SYMB	LTIM, "buf", 19, 0, 205
	SYMB	LTIM, "result", -16, 130, 2117
	SYMB	LTIM, "result", 3, 0, 2253
	SYMB	LTIM, "result", 3, 0, 2125
_56:
; sio0drv.c  444	
; sio0drv.c  445	  delete( buf);
	SYMB	LINE, 445
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_delete
	SYMB	LTIM, "buf", 19, 0, 77
	SYMB	LTIM, "buf", 3, 0, 205
	SYMB	LTIM, "buf", 3, 0, 77
; sio0drv.c  446	
; sio0drv.c  447	  sio0Res->Unlock( sio0Res);
	SYMB	LINE, 447
	MOV.B	ES,#SEG( _sio0Res )
	MOV.W	R1,#SOF( _sio0Res )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+14]
	MOV.W	R5,[R0+16]
	FCALL	__ICALL
; sio0drv.c  448	
; sio0drv.c  449	  return( ret);
	SYMB	LINE, 449
	MOV.W	R0,R6
	SYMB	LTIM, "ret", 26, 0, 77
	SYMB	LTIM, "ret", 2, 0, 205
; sio0drv.c  450	}
	SYMB	LINE, 450
_57:
	ADD.W	R7,#0EH
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "ret", 2, 0, 77
	SYMB	EFUN
; sio0drv.c  451	
; sio0drv.c  452	
; sio0drv.c  453	
; sio0drv.c  454	
	SYMB	ENDF

	SYMB	IDEN, "sio0iEvent", _sio0iEvent, #348, 130, 4
SIO0DRV_CLR_FA	SEGMENT	HDATA INSEGMENT CLEAR
	RSEG	SIO0DRV_CLR_FA
	ALIGN	1
_sio0iEvent:	DS	4
	SYMB	TYPE, 459, 'n', #447, 130
	SYMB	TYPE, 460, 'P', #459
	SYMB	IDEN, "sio0oStream", _sio0oStream, #460, 130, 4
	ALIGN	1
_sio0oStream:	DS	4
	SYMB	TYPE, 461, 'X', 12, #304, 30, 3, #307, #262, #298
	SYMB	ALAB, _KS_dequeuet, #461
	EXTRN	HCODE(_KS_dequeuet)
	SYMB	TYPE, 462, 'X', 12, #460, 30, 2, #16, #16
	SYMB	ALAB, _newTStream, #462
	EXTRN	HCODE(_newTStream)
	SYMB	TYPE, 463, 'X', 12, #449, 30, 2, #449, #292
	SYMB	ALAB, _KS_ISRexit, #463
	EXTRN	HCODE(_KS_ISRexit)
	SYMB	TYPE, 464, 'Z', #3, 63
	SYMB	IDEN, "RxBuffer", _RxBuffer, #464, 130, 0
	SYMB	ALAB, _RxBuffer, #464
	PUBLIC	_RxBuffer
_RxBuffer:	DS	64
	SYMB	TYPE, 466, 'n', #382, 130
	SYMB	TYPE, 467, 'P', #466
	SYMB	IDEN, "sio0Res", _sio0Res, #467, 130, 4
	ALIGN	1
_sio0Res:	DS	4
	SYMB	TYPE, 468, 'X', 12, #16, 30, 3, #258, #258, #265
	SYMB	ALAB, _vsprintf, #468
	EXTRN	HCODE(_vsprintf)
	SYMB	TYPE, 469, 'X', 12, #1, 30, 1, #262
	SYMB	ALAB, _delete, #469
	EXTRN	HCODE(_delete)
	SYMB	TYPE, 470, 'X', 12, #258, 30, 2, #258, #258
	SYMB	ALAB, _strcpy, #470
	EXTRN	HCODE(_strcpy)
	SYMB	TYPE, 471, 'X', 12, #1, 30, 1, #307
	SYMB	ALAB, _KS_purgequeue, #471
	EXTRN	HCODE(_KS_purgequeue)
	SYMB	TYPE, 472, 'X', 12, #467, 30, 1, #258
	SYMB	ALAB, _newTResource, #472
	EXTRN	HCODE(_newTResource)
	SYMB	IDEN, "RxOutput", _RxOutput, #3, 130, 0
	SYMB	ALAB, _RxOutput, #3
SIO0DRV_CLR_NE@DS	SEGMENT	DATA JOIN CLEAR
	RSEG	SIO0DRV_CLR_NE@DS
	PUBLIC	_RxOutput
_RxOutput:	DS	1
	EXTRN	HCODE(__ICALL)
	SYMB	IDEN, "sio0oEvent", _sio0oEvent, #348, 130, 4
	RSEG	SIO0DRV_CLR_FA
	ALIGN	1
_sio0oEvent:	DS	4
	SYMB	TYPE, 473, 'X', 12, #262, 30, 1, #6
	SYMB	ALAB, _new, #473
	EXTRN	HCODE(_new)
	EXTRN	IDATA(__lc_bs)
	SYMB	TYPE, 474, 'n', #410, 130
	SYMB	TYPE, 475, 'P', #474
	SYMB	IDEN, "sio0iThread", _sio0iThread, #475, 130, 4
	ALIGN	1
_sio0iThread:	DS	4
	SYMB	TYPE, 477, 'X', 12, #1, 30, 0
	SYMB	TYPE, 478, 'n', #477, 129
	SYMB	TYPE, 479, 'P', #478
	SYMB	TYPE, 476, 'X', 12, #475, 30, 2, #16, #479
	SYMB	ALAB, _newTThread, #476
	EXTRN	HCODE(_newTThread)
	SYMB	TYPE, 480, 'X', 12, #348, 30, 1, #258
	SYMB	ALAB, _newTEvent, #480
	EXTRN	HCODE(_newTEvent)
	SYMB	IDEN, "sio0oThread", _sio0oThread, #475, 130, 4
	ALIGN	1
_sio0oThread:	DS	4
	SYMB	IDEN, "RxInput", _RxInput, #3, 130, 0
	SYMB	ALAB, _RxInput, #3
	RSEG	SIO0DRV_CLR_NE@DS
	PUBLIC	_RxInput
_RxInput:	DS	1
	SYMB	IDEN, "sio0iStream", _sio0iStream, #460, 130, 4
	RSEG	SIO0DRV_CLR_FA
	ALIGN	1
_sio0iStream:	DS	4
	EXTRN	DATA(__lc_ub_xvwbuffer)
	EXTRN	DATA(__lc_ue_xvwbuffer)
	CALLS	'intsio0o', 'KS_ISRexit'
	CALLS	'intsio0i', 'KS_ISRexit'
	CALLS	'sio0_init', 'newTEvent'
	CALLS	'sio0_init', 'newTResource'
	CALLS	'sio0_init', 'newTStream'
	CALLS	'sio0_init', 'newTThread'
	CALLS	'sio0_init', 'KS_purgequeue'
	CALLS	'sio0WaitAcknowledge', 'KS_dequeuet'
	CALLS	'sio0WaitAnswer', 'KS_dequeuet'
	CALLS	'sio0SndCommand', 'new'
	CALLS	'sio0SndCommand', 'vsprintf'
	CALLS	'sio0SndCommand', 'delete'
	CALLS	'sio0SndCommand', 'sio0WaitAcknowledge'
	CALLS	'sio0SndCommand', 'delete'
	CALLS	'sio0SndRequest', 'new'
	CALLS	'sio0SndRequest', 'vsprintf'
	CALLS	'sio0SndRequest', 'delete'
	CALLS	'sio0SndRequest', 'sio0WaitAcknowledge'
	CALLS	'sio0SndRequest', 'delete'
	CALLS	'sio0SndRequest', 'new'
	CALLS	'sio0SndRequest', 'sio0WaitAnswer'
	CALLS	'sio0SndRequest', 'strcpy'
	CALLS	'sio0SndRequest', 'delete'
	END
