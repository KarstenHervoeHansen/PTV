XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   1
C:\LT428\work\ver.4_9\temp\xa\cbar.src
ADDR   CODE            LINE SOURCELINE
                          1 ; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
                          2 ; options: -A1 -Cxag3 -e -g -Ic:\LT428\include -Ic:\LT428\rtxc\xa\include -I.
                          3 ;          -Ml -O2 -s
                          5 $NOZPAGE
                          6         NAME    CBAR
                         10 ; cbar.c      1 /****************************************************************************/
                         11 ; cbar.c      2 /* MODULE:                                                                  */
                         12 ; cbar.c      3 /*  cbar.c - ColorBar generator                                             */
                         13 ; cbar.c      4 /****************************************************************************/
                         14 ; cbar.c      5 /* FUNCTIONS:                                                               */
                         15 ; cbar.c      6 /*                                                                          */
                         16 ; cbar.c      7 /*  int WriteCBGain( UC gain)                                               */
                         17 ; cbar.c      8 /*  int WriteCBChromaGain( UC gain)                                          */
                         18 ; cbar.c      9 /*  int SRAMVideoLoad( UC signal, UC bank)                                  */
                         19 ; cbar.c     10 /*  int SRAMSoundLoad( UC signal)                                           */
                         20 ; cbar.c     11 /*  void CBLineInterrupt( void)                                             */
                         21 ; cbar.c     12 /*  void CBDefaults( void)                                                  */
                         22 ; cbar.c     13 /*  int CBInit( void)                                                        */
                         23 ; cbar.c     14 /*  int CBUpdate( void)                                                      */
                         24 ; cbar.c     15 /*  int SetCBPattern( UI pattern)                                            */
                         25 ; cbar.c     16 /*  int SetCBSystem( UC system)                                              */
                         26 ; cbar.c     17 /*  int SetCBDelay( UL delay)                                                */
                         27 ; cbar.c     18 /*  int SetCBScHPhase( int schphase)                                        */
                         28 ; cbar.c     19 /*  int SetCBEmbAudioSignal( UC signal)                                     */
                         29 ; cbar.c     20 /*  int ValidateCBPattern( UC system, UI *pattern)                          */  
                         30 ; cbar.c     21 /*                                                                          */
                         31 ; cbar.c     22 /* TASKS:                                                                   */
                         32 ; cbar.c     23 /*                                                                          */
                         33 ; cbar.c     24 /* NOTES: CB Tables defined at absolute address of 0x2000: 14.03.02         */
                         34 ; cbar.c     25 /*                                                                          */
                         35 ; cbar.c     26 /****************************************************************************/
                         36 ; cbar.c     27 /*
                         37 ; cbar.c     28  *   PTV software for PT5201    
                         38 ; cbar.c     29  *   Copyright (c) 
                         39 ; cbar.c     30  *   ProTeleVision Technologies A/S.
                         40 ; cbar.c     31  *   ALL RIGHTS RESERVED
                         41 ; cbar.c     32 */
                         42 ; cbar.c     33 /****************************************************************************/
                         43 ; cbar.c     34 
                         44 ; cbar.c     35 #include "reg8051.h"
                         47 ; cbar.c     36 #include "define.h"        // Standard PTV defines
                         50 ; cbar.c     37 #include "rtxcobj.h"
                        380 ; cbar.c     38 #include "config.h" 
                        383 ; cbar.c     39 #include "audio.h"
                        394 ; cbar.c     40 #include "cbar.h"
                        404 ; cbar.c     41 #include "tables.h"
                        407 ; cbar.c     42 #include "led_hw.h"
                        414 ; cbar.c     43 #include "tvp6kdrv.h"
                        417 ; cbar.c     44 #include "i2c_drv.h"
                        420 ; cbar.c     45 #include "instru.h"
                        509 ; cbar.c     46 
                        510 ; cbar.c     47 #define SRAMBank0      0x00
                        511 ; cbar.c     48 #define SRAMBank1      0x10
                        512 ; cbar.c     49 #define SRAMBank2      0x14
                        513 ; cbar.c     50 #define SRAMBank3      0x18
                        514 ; cbar.c     51 #define SRAMBank4      0x1C
                        515 ; cbar.c     52 #define SRAMBank5      0x20
                        516 ; cbar.c     53 #define SRAMBank6      0x24
                        517 ; cbar.c     54 #define SRAMBank7      0x28
                        518 ; cbar.c     55 #define SRAMBank8      0x2C
                        519 ; cbar.c     56 #define SRAMBank9      0x30
                        520 ; cbar.c     57 #define SRAMBank10    0x34
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   2

ADDR   CODE            LINE SOURCELINE
                        521 ; cbar.c     58 #define SRAMBank11    0x38
                        522 ; cbar.c     59 #define SRAMBank12    0x3C
                        523 ; cbar.c     60 
                        524 ; cbar.c     61 #define dEBUCBar_8bit_625           0
                        525 ; cbar.c     62 #define dEBUCBar_625              1
                        526 ; cbar.c     63 #define dSMPTECBar                2
                        527 ; cbar.c     64 #define dBlueBars                  3
                        528 ; cbar.c     65 #define dIWhiteQ                  4
                        529 ; cbar.c     66 #define dCBar100_625              5
                        530 ; cbar.c     67 #define dGrey75_625                6
                        531 ; cbar.c     68 #define dRed75_625                7
                        532 ; cbar.c     69 #define dRed75_525                8
                        533 ; cbar.c     70 #define dChroma_Multiburst        9
                        534 ; cbar.c     71 #define d_CCIR18_625              9
                        535 ; cbar.c     72 #define dFCC_Multiburst_525        10
                        536 ; cbar.c     73 #define dChroma_Multiburst_525    11
                        537 ; cbar.c     74 #define dWhiteLine_625            11
                        538 ; cbar.c     75 #define dCrossHatch19_625          12
                        539 ; cbar.c     76 #define dWhiteLine_525            13
                        540 ; cbar.c     77 #define dCrossHatch17_525          14
                        541 ; cbar.c     78 #define dPlugeWhite_625            15
                        542 ; cbar.c     79 #define dPlugeGreyC_625            16
                        543 ; cbar.c     80 #define dPlugeGreyD_625            17
                        544 ; cbar.c     81 #define dPlugeGreyE_625            18
                        545 ; cbar.c     82 #define dPlugeWhite_525            19
                        546 ; cbar.c     83 #define dPlugeGreyC_525            20
                        547 ; cbar.c     84 #define dPlugeGreyD_525            21
                        548 ; cbar.c     85 #define dPlugeGreyE_525            22
                        549 ; cbar.c     86 #define dGreyScale5_625            23
                        550 ; cbar.c     87 #define dGreyScale5_525            24
                        551 ; cbar.c     88 #define dGreyScale10_625          25
                        552 ; cbar.c     89 #define dGreyScale10_525          26
                        553 ; cbar.c     90 #define dWindow50Marker            27
                        554 ; cbar.c     91 #define dMarkerLine              28
                        555 ; cbar.c     92 #define dWindow15                29
                        556 ; cbar.c     93 #define dMarker15                30
                        557 ; cbar.c     94 #define dWindow20                31
                        558 ; cbar.c     95 #define dMarker20                32
                        559 ; cbar.c     96 #define dWindow100              33
                        560 ; cbar.c     97 #define dMarker100              34
                        561 ; cbar.c     98 #define dDigitalGrey_625          35
                        562 ; cbar.c     99 #define dDigitalGrey_525          36
                        563 ; cbar.c    100 #define dSDI_test_line1            37
                        564 ; cbar.c    101 #define dSDI_test_line2            38
                        565 ; cbar.c    102 #define dSDI_test_line3            39
                        566 ; cbar.c    103 #define dCBar75_STD_625             40
                        567 ; cbar.c    104 #define dFCC_CBar_525              41
                        568 ; cbar.c    105 #define dFCC_CBar100_525          42
                        569 ; cbar.c    106 #define dWindow10                  43
                        570 ; cbar.c    107 #define dMarker10                  44
                        571 ; cbar.c    108 #define dkHz15BlWh_625            45
                        572 ; cbar.c    109 #define dkHz15BlWh_525            46
                        573 ; cbar.c    110 #define dCCIR18_625                47
                        574 ; cbar.c    111 
                        575 ; cbar.c    112 /****************************************************************************/
                        576 ; cbar.c    113 /*
                        577 ; cbar.c    114 The statusport is defined in the PLD as:
                        578 ; cbar.c    115 
                        579 ; cbar.c    116   bit 0:  S0        Background system
                        580 ; cbar.c    117   bit 1:  S1
                        581 ; cbar.c    118 
                        582 ; cbar.c    119   bit 2:  S2        Linetype
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   3

ADDR   CODE            LINE SOURCELINE
                        583 ; cbar.c    120   bit 3:  S3
                        584 ; cbar.c    121   bit 4:  S4
                        585 ; cbar.c    122   bit 5:  S5
                        586 ; cbar.c    123 
                        587 ; cbar.c    124   bit 6:  SYSSEL    System select ( 0:G, 1:M)
                        588 ; cbar.c    125   bit 7:  SOUND      Sound ( 0:off, 1:on)
                        589 ; cbar.c    126 
                        590 ; cbar.c    127   bit 8:  3OR4      Samples in sound ( 0:3 samples, 1:4 samples)
                        591 ; cbar.c    128   bit 9:  FIELD1    Field one bit ( 1 in Field 1/line 1 (out of 8/4) otherwise 0)
                            
                        592 ; cbar.c    129   bit 10: CB  
                        593 ; cbar.c    130   bit 11: EDHON      EDH bit for future use ( 0:off, 1:on)
                        594 ; cbar.c    131 
                        595 ; cbar.c    132   bit 12: PS        PS ( 0:disable writing in SRAM, 1: enable writing in SRAM)
                        596 ; cbar.c    133   bit 13: Line7      Line 7 pulse in PAL w/PAL_ID
                        597 ; cbar.c    134   bit 14: PhaseReg  Phase offset register select
                        598 ; cbar.c    135   bit 15: -          Not used
                        599 ; cbar.c    136 */
                        600 ; cbar.c    137 /****************************************************************************/
                        601 ; cbar.c    138                     
                        602 ; cbar.c    139 #define S1S0        0x0003
                        603 ; cbar.c    140 #define S5S4S3S2    0x003C
                        604 ; cbar.c    141 #define SYSSEL      0x0040
                        605 ; cbar.c    142 #define SOUNDON      0x0080
                        606 ; cbar.c    143 #define S3OR4        0x0100
                        607 ; cbar.c    144 #define FIELD1      0x0200
                        608 ; cbar.c    145 #define CB          0x0400
                        609 ; cbar.c    146 #define EDHON        0x0800
                        610 ; cbar.c    147 #define PS          0x1000
                        611 ; cbar.c    148 #define LINE7PULSE  0x2000
                        612 ; cbar.c    149 #define PHASEREGSEL  0x4000
                        613 ; cbar.c    150 
                        614 ; cbar.c    151 #define SOUND        (int)(SOUNDON + S3OR4)
                        615 ; cbar.c    152 
                        616 ; cbar.c    153 #define SyncLineA    1
                        617 ; cbar.c    154 #define SyncLineB   0
                        618 ; cbar.c    155 #define SyncLineC   2
                        619 ; cbar.c    156 #define SyncLineD   3
                        620 ; cbar.c    157 
                        621 ; cbar.c    158 /****************************************************************************/
                        622 ; cbar.c    159 // Prototypes internal functions
                        623 ; cbar.c    160 
                        624 ; cbar.c    161 int ValidateCBPattern( UC, UI *);
                        625 ; cbar.c    162 int Update_StatusPort(UI);
                        626 ; cbar.c    163 
                        627 ; cbar.c    164 /* The tables used for control of test patterns are in ctable.c.
                        628 ; cbar.c    165    These tables are defined at absolute addresses, starting at
                        629 ; cbar.c    166    0x2000.  It was found that address line A15 is sometimes
                        630 ; cbar.c    167    asserted incorrectly, probably due to RTXC.  If the tables 
                        631 ; cbar.c    168    lay at such position that A15 is involved in reading them,
                        632 ; cbar.c    169    a reading failure occured and pictures were displayed incorrectly.
                        633 ; cbar.c    170    By moving the tables to a lower address where A15 is not needed 
                        634 ; cbar.c    171    under read operation, this problem no longer exists.
                        635 ; cbar.c    172    14.03.02
                        636 ; cbar.c    173 */   
                        637 ; cbar.c    174 #include "ctable.c"
000800                  639         HCSEG AT 0800H
                        643         PUBLIC  _TEST_SMPTECBarTable
                        644         ALIGN   1
                        644         ALIGN   1
000800                  645 _TEST_SMPTECBarTable:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   4

ADDR   CODE            LINE SOURCELINE
000800 0103001012A416   646         DW      00301H,01000H,0A412H,01316H,03D1AH,00200H,01101H,0A313H
       131A3D00020111       
       13A3                 
000810 17131B3D0000     647         DW      01317H,03D1BH,00000H
000816                  648         HCSEG AT 0816H
                        651         PUBLIC  _PALBlackTable
                        652         ALIGN   1
                        652         ALIGN   1
000816                  653 _PALBlackTable:
000816 00160290029000   654         DW      01600H,09002H,09002H,00200H,01701H,09003H,09003H,00201H
       02011703900390       
       0102                 
000826 0000             655         DW      00000H
000828                  656         HCSEG AT 0828H
                        659         PUBLIC  _PALFullFieldTable
                        660         ALIGN   1
                        660         ALIGN   1
000828                  661 _PALFullFieldTable:
000828 00161290129000   662         DW      01600H,09012H,09012H,00200H,01701H,09013H,09013H,00201H
       02011713901390       
       0102                 
000838 0000             663         DW      00000H
00083A                  664         HCSEG AT 083AH
                        667         PUBLIC  _PALSplitFieldTable
                        668         ALIGN   1
                        668         ALIGN   1
00083A                  669 _PALSplitFieldTable:
00083A 001612C0166000   670         DW      01600H,0C012H,06016H,00200H,01701H,0C013H,06017H,00201H
       02011713C01760       
       0102                 
00084A 0000             671         DW      00000H
00084C                  672         HCSEG AT 084CH
                        675         PUBLIC  _PALWindowTable
                        676         ALIGN   1
                        676         ALIGN   1
00084C                  677 _PALWindowTable:
00084C 00160218120116   678         DW      01600H,01802H,00112H,00116H,00102H,0011AH,02C02H,0901EH
       0102011A01022C       
       1E90                 
00085C 02480002011703   679         DW      04802H,00200H,01701H,01803H,00113H,00117H,00103H,0011BH
       18130117010301       
       1B01                 
00086C 032C1F90034801   680         DW      02C03H,0901FH,04803H,00201H,00000H
       020000               
000876                  681         HCSEG AT 0876H
                        684         PUBLIC  _PALCheckfieldTable
                        685         ALIGN   1
                        685         ALIGN   1
000876                  686 _PALCheckfieldTable:
000876 00161201168F1A   687         DW      01600H,00112H,08F16H,0901AH,00200H,01701H,09017H,0901BH
       90000201171790       
       1B90                 
000886 01020000         688         DW      00201H,00000H
00088A                  689         HCSEG AT 088AH
                        692         PUBLIC  _PALCrosshatchTable
                        693         ALIGN   1
                        693         ALIGN   1
00088A                  694 _PALCrosshatchTable:
00088A 00161207160112   695         DW      01600H,00712H,00116H,01412H,00116H,01412H,00116H,01412H
       14160112141601       
       1214                 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   5

ADDR   CODE            LINE SOURCELINE
00089A 16011214160112   696         DW      00116H,01412H,00116H,01412H,00116H,01412H,00116H,01412H
       14160112141601       
       1214                 
0008AA 16011214160112   697         DW      00116H,01412H,00116H,01412H,00116H,01412H,00116H,01412H
       14160112141601       
       1214                 
0008BA 16011214160112   698         DW      00116H,01412H,00116H,01412H,00116H,00712H,00200H,01701H
       14160112070002       
       0117                 
0008CA 13071701131417   699         DW      00713H,00117H,01413H,00117H,01413H,00117H,01413H,00117H
       01131417011314       
       1701                 
0008DA 13141701131417   700         DW      01413H,00117H,01413H,00117H,01413H,00117H,01413H,00117H
       01131417011314       
       1701                 
0008EA 13141701131417   701         DW      01413H,00117H,01413H,00117H,01413H,00117H,01413H,00117H
       01131417011314       
       1701                 
0008FA 13141701131417   702         DW      01413H,00117H,01413H,00117H,00713H,00201H,00000H
       01130701020000       
000908                  703         HCSEG AT 0908H
                        706         PUBLIC  _PALPLUGETable
                        707         ALIGN   1
                        707         ALIGN   1
000908                  708 _PALPLUGETable:
000908 00160226123516   709         DW      01600H,02602H,03512H,03516H,0351AH,0351EH,02602H,00200H
       351A351E350226       
       0002                 
000918 01170326133517   710         DW      01701H,02603H,03513H,03517H,0351BH,0351FH,02603H,00201H
       351B351F350326       
       0102                 
000928 0000             711         DW      00000H
00092A                  712         HCSEG AT 092AH
                        715         PUBLIC  _NTSCBlackTable
                        716         ALIGN   1
                        716         ALIGN   1
00092A                  717 _NTSCBlackTable:
00092A 01030010027A02   718         DW      00301H,01000H,07A02H,07A02H,00200H,01101H,07A03H,07903H
       7A00020111037A       
       0379                 
00093A 0000             719         DW      00000H
00093C                  720         HCSEG AT 093CH
                        723         PUBLIC  _NTSCFullFieldTable
                        724         ALIGN   1
                        724         ALIGN   1
00093C                  725 _NTSCFullFieldTable:
00093C 01030010127A12   726         DW      00301H,01000H,07A12H,07A12H,00200H,01101H,07A13H,07913H
       7A00020111137A       
       1379                 
00094C 0000             727         DW      00000H
00094E                  728         HCSEG AT 094EH
                        731         PUBLIC  _SMPTECBarTable
                        732         ALIGN   1
                        732         ALIGN   1
00094E                  733 _SMPTECBarTable:
00094E 0103001012A416   734         DW      00301H,01000H,0A412H,01316H,03D1AH,00200H,01101H,0A313H
       131A3D00020111       
       13A3                 
00095E 17131B3D0000     735         DW      01317H,03D1BH,00000H
000964                  736         HCSEG AT 0964H
                        739         PUBLIC  _NTSCWindowTable
                        740         ALIGN   1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   6

ADDR   CODE            LINE SOURCELINE
                        740         ALIGN   1
000964                  741 _NTSCWindowTable:
000964 01030010021E12   742         DW      00301H,01000H,01E02H,00112H,00116H,00102H,0011AH,01D02H
       01160102011A01       
       021D                 
000974 1E77023E000201   743         DW      0771EH,03E02H,00200H,01101H,01D03H,00113H,00117H,00103H
       11031D13011701       
       0301                 
000984 1B01031D1F7703   744         DW      0011BH,01D03H,0771FH,03E03H,00000H
       3E0000               
00098E                  745         HCSEG AT 098EH
                        748         PUBLIC  _NTSCCheckfieldTable
                        749         ALIGN   1
                        749         ALIGN   1
00098E                  750 _NTSCCheckfieldTable:
00098E 01030010120116   751         DW      00301H,01000H,00112H,07916H,07A1AH,00200H,01101H,07A17H
       791A7A00020111       
       177A                 
00099E 1B790000         752         DW      0791BH,00000H
0009A2                  753         HCSEG AT 09A2H
                        756         PUBLIC  _NTSCCrosshatchTable
                        757         ALIGN   1
                        757         ALIGN   1
0009A2                  758 _NTSCCrosshatchTable:
0009A2 01030010120916   759         DW      00301H,01000H,00912H,00116H,01012H,00116H,01112H,00116H
       01121016011211       
       1601                 
0009B2 12101601121116   760         DW      01012H,00116H,01112H,00116H,01012H,00116H,01112H,00116H
       01121016011211       
       1601                 
0009C2 12101601121116   761         DW      01012H,00116H,01112H,00116H,01012H,00116H,01112H,00116H
       01121016011211       
       1601                 
0009D2 12101601121116   762         DW      01012H,00116H,01112H,00116H,01012H,00116H,00712H,00200H
       01121016011207       
       0002                 
0009E2 01111308170113   763         DW      01101H,00813H,00117H,01113H,00117H,01013H,00117H,01113H
       11170113101701       
       1311                 
0009F2 17011310170113   764         DW      00117H,01013H,00117H,01113H,00117H,01013H,00117H,01113H
       11170113101701       
       1311                 
000A02 17011310170113   765         DW      00117H,01013H,00117H,01113H,00117H,01013H,00117H,01113H
       11170113101701       
       1311                 
000A12 17011310170113   766         DW      00117H,01013H,00117H,01113H,00117H,00613H,00000H
       11170113060000       
000A20                  767         HCSEG AT 0A20H
                        770         PUBLIC  _NTSCPLUGETable
                        771         ALIGN   1
                        771         ALIGN   1
000A20                  772 _NTSCPLUGETable:
000A20 01030010023512   773         DW      00301H,01000H,03502H,03812H,01316H,0131AH,0131EH,04E02H
       3816131A131E13       
       024E                 
000A30 00020111033413   774         DW      00200H,01101H,03403H,03813H,01317H,0131BH,0131FH,04E03H
       3817131B131F13       
       034E                 
000A40 0000             775         DW      00000H
000A42                  776         HCSEG AT 0A42H
                        779         PUBLIC  _Sound525
                        780         ALIGN   1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   7

ADDR   CODE            LINE SOURCELINE
                        780         ALIGN   1
000A42                  781 _Sound525:
000A42 83008101850003   782         DW      00083H,00181H,00085H,00003H,00086H,00181H,0008BH,00181H
       00860081018B00       
       8101                 
000A52 8B0081018B0081   783         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
       018B0081018B00       
       8101                 
000A62 8B0081018B0081   784         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
       018B0081018B00       
       8101                 
000A72 8B0081018B0081   785         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
       018B0081018B00       
       8101                 
000A82 8B0081018B0081   786         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
       018B0081018B00       
       8101                 
000A92 8B0081018B0081   787         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,00083H,00081H
       018B0081018300       
       8100                 
000AA2                  788         HCSEG AT 0AA2H
                        792         PUBLIC  _Sound625
                        793         ALIGN   1
                        793         ALIGN   1
000AA2                  794 _Sound625:
000AA2 81018400030085   795         DW      00181H,00084H,00003H,00085H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000AB2 81018900810189   796         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000AC2 81018900810189   797         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000AD2 81018900810189   798         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000AE2 81018900810189   799         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000AF2 81018900810189   800         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000B02 81018900810189   801         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000B12 81018900810189   802         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00088H
       00810189008101       
       8800                 
                        804 ; cbar.c    175 
                        805 ; cbar.c    176                                               // Signal array defined in ROM
                        806 ; cbar.c    177                                               //  (size/start is specified in BYT
                            ES
                        807 ; cbar.c    178                                               //  in config.h)
                        808 ; cbar.c    179 _ROM_ int VideoSignalArray[SizeOfCBVideoCode/2] _at( StartOfCBVideoCode);
                        809 ; cbar.c    180 _ROM_ int SoundSignalArray[SizeOfEmbAudioCode/2] _at( StartOfEmbAudioCode);
                        810 ; cbar.c    181 
                        811 ; cbar.c    182 volatile int SRAMVideoPort _at( 0x44000);       // Port defined in PLD
                        812 ; cbar.c    183 volatile int SRAMSoundPort _at( 0x40000);       // Port defined in PLD
                        813 ; cbar.c    184 //volatile int StatusPort _at( 0x6a000);         // Port defined in PLD
                        814 ; cbar.c    185 volatile int PLD_StatusPort _at( 0x6a000);         // Port defined in PLD
                        815 ; cbar.c    186 volatile int HOffsetPort _at( 0x6a004);       // Port defined in PLD
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   8

ADDR   CODE            LINE SOURCELINE
                        816 ; cbar.c    187 volatile int ChromaGainPort _at( 0x6a008);    // Port defined in PLD
                        817 ; cbar.c    188 
                        818 ; cbar.c    189 /***/
                        819 ; cbar.c    190 volatile UI LEDPort _at( 0x6a00C);        // Port defined in PLD
                        820 ; cbar.c    191 volatile UI TestLEDPort _at( 0x6a014);  // Port defined in PLD
                        821 ; cbar.c    192 
                        822 ; cbar.c    193 
                        823 ; cbar.c    194 volatile _near UI TimeTickCounter;
                        824 ; cbar.c    195 volatile _near int LineOffset;
                        825 ; cbar.c    196 
                        826 ; cbar.c    197 volatile int PhaseOffset;
                        827 ; cbar.c    198 
                        828 ; cbar.c    199 CBObject CBSetup;
                        829 ; cbar.c    200 
                        830 ; cbar.c    201 static _near UI Status _at( 0x120);
                        831 ; cbar.c    202 
                        832 ; cbar.c    203 static _ROM_  UI * _near TablePtr _at( 0x122);
                        833 ; cbar.c    204 static _ROM_  UI *newTablePtr;
                        834 ; cbar.c    205 
                        835 ; cbar.c    206 static _near UI LineCnt _at( 0x126);
                        836 ; cbar.c    207 static _near UC FrameCnt _at( 0x128);
                        837 ; cbar.c    208 
                        838 ; cbar.c    209 static _near UC SyncLineCnt _at( 0x129);
                        839 ; cbar.c    210 static _near UC SyncLinePtr _at( 0x12A);
                        840 ; cbar.c    211                                  
                        841 ; cbar.c    212 static _near UC SoundFrameCnt _at( 0x12B);
                        842 ; cbar.c    213 static _near UC SoundCnt _at( 0x12C);
                        843 ; cbar.c    214 static _near UC SoundPtr _at( 0x12D);
                        844 ; cbar.c    215 static _near UC SoundPtrMax _at( 0x12E);
                        845 ; cbar.c    216 
                        846 ; cbar.c    217 static char Blanking, NewPattern, SoundEnable;
                        847 ; cbar.c    218 extern       _bit JKflag;
                        848 ; cbar.c    219 _sfrbit    JKpin   _atbit(P1,5);    // P1^5
                        849 ; cbar.c    220 _sfrbit    SDApin  _atbit(P1,6);    // P1^6
                        850 ; cbar.c    221 
                        851 ; cbar.c    222 extern UI LEDMirror;
                        852 ; cbar.c    223 extern UI TestLEDMirror;
                        853 ; cbar.c    224 //UI temp_status;                       //KS. To force compiler to use a R-regist
                            er when writing out 
                        854 ; cbar.c    225                                 //to the Status port.
                        855 ; cbar.c    226 
                        856 ; cbar.c    227 /**************************************************************************/
                        857 ; cbar.c    228 /* WriteCBGain                                                       CBAR.C */
                        858 ; cbar.c    229 /*                                                                        */
                        859 ; cbar.c    230 /* Author:   Kim Engedahl, DEV, 000504                                    */
                        860 ; cbar.c    231 /* Revised:   000606, KEn, DEV                                             */
                        861 ; cbar.c    232 /*                                                                        */
                        862 ; cbar.c    233 /* Function:                                                               */
                        863 ; cbar.c    234 /* Remarks:                                                                 */
                        864 ; cbar.c    235 /* Returns:                                                                */
                        865 ; cbar.c    236 /* Updates:                                                                */
                        866 ; cbar.c    237 /**************************************************************************/
                        867 ; cbar.c    238 int WriteCBGain( UC gain)
                        868 ; cbar.c    239 {
000B22 8101             869         DW      00181H
000000                  870 CBAR_PR SEGMENT HCODE
000000                  871         RSEG    CBAR_PR
                        872         ALIGN   1
                        874         PUBLIC  _WriteCBGain
000000                  875 _WriteCBGain:
000000 A97E             879         ADDS.W  R7,#0EH
                        883 ; cbar.c    240   return( Write_AD8402( CBPotMeter, 0, gain));
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   9

ADDR   CODE            LINE SOURCELINE
000002 911800           885         MOV.B   R0H,#00H
000005 8121             886         MOV.B   R1L,R0H
000007 820F             887         MOV.B   [R7],R0L
000009 8102             890         MOV.B   R0L,R1L
00000B 8227             891         MOV.B   R1L,[R7]
                        892         CALL    _Write_AD8402
00000D C4rrrrrr        +892 ;       FCALL   _Write_AD8402
                        896 ; cbar.c    241 }
000011 A972             898         ADDS.W  R7,#02H
000013 D680             900         RET
                        902 ; cbar.c    242 
                        903 ; cbar.c    243 /**************************************************************************/
                        904 ; cbar.c    244 /* WriteCBChromaGain                                                 CBAR.C */
                        905 ; cbar.c    245 /*                                                                        */
                        906 ; cbar.c    246 /* Author:   Kim Engedahl, DEV, 000504                                    */
                        907 ; cbar.c    247 /* Revised:   000603, KEn, DEV                                             */
                        908 ; cbar.c    248 /*                                                                        */
                        909 ; cbar.c    249 /* Function:                                                               */
                        910 ; cbar.c    250 /* Remarks:   The resistor at V118 has been swapped ie. bit 0 is bit 3 etc.*/
                        911 ; cbar.c    251 /*           The conversion is done in SW instead of correcting the parts  */
                        912 ; cbar.c    252 /*           list.                                                        */
                        913 ; cbar.c    253 /* Returns:                                                                */
                        914 ; cbar.c    254 /* Updates:                                                                */
                        915 ; cbar.c    255 /**************************************************************************/
                        916 ; cbar.c    256 int WriteCBChromaGain( UC gain)
                        917 ; cbar.c    257 {
000015 00               918         ALIGN   1
                        920         PUBLIC  _WriteCBChromaGain
000016                  921 _WriteCBChromaGain:
                        929 ; cbar.c    258   UC tmp = 0;
000016 911800           931         MOV.B   R0H,#00H
                        933 ; cbar.c    259 
                        934 ; cbar.c    260   // gain bit 1 = bit4
                        935 ; cbar.c    261   // gain bit 2 = bit3
                        936 ; cbar.c    262   // gain bit 3 = bit2
                        937 ; cbar.c    263   // gain bit 4 = bit1
                        938 ; cbar.c    264 
                        939 ; cbar.c    265   if ( gain & 0x01)
000019 8120             941         MOV.B   R1L,R0L
00001B 912501           942         AND.B   R1L,#01H
00001E F302             943         BEQ     _3
                        944 ; cbar.c    266     tmp += 0x08;
000020 911808           946         MOV.B   R0H,#08H
000024                  949 _3:
                        950 ; cbar.c    267 
                        951 ; cbar.c    268   if ( gain & 0x02)
000024 8120             953         MOV.B   R1L,R0L
000026 912502           954         AND.B   R1L,#02H
000029 F302             955         BEQ     _4
                        956 ; cbar.c    269     tmp += 0x04;
00002B A114             958         ADDS.B  R0H,#04H
00002E                  961 _4:
                        962 ; cbar.c    270 
                        963 ; cbar.c    271   if ( gain & 0x04)
00002E 912804           965         MOV.B   R1L,#04H
000031 5120             966         AND.B   R1L,R0L
000033 F302             967         BEQ     _5
                        968 ; cbar.c    272     tmp += 0x02;
000035 A112             970         ADDS.B  R0H,#02H
000038                  973 _5:
                        974 ; cbar.c    273 
                        975 ; cbar.c    274   if ( gain & 0x08)
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  10

ADDR   CODE            LINE SOURCELINE
000038 910508           977         AND.B   R0L,#08H
00003B F302             979         BEQ     _6
                        980 ; cbar.c    275     tmp += 0x01;
00003D A111             982         ADDS.B  R0H,#01H
000040                  985 _6:
                        986 ; cbar.c    276 
                        987 ; cbar.c    277   ChromaGainPort = tmp;
000040 8101             989         MOV.B   R0L,R0H
000042 B110             990         MOVS.B  R0H,#00H
000044 96484206         992         MOV.B   ES,#SEG( _ChromaGainPort )
000048 9918A008         993         MOV.W   R1,#SOF( _ChromaGainPort )
00004C 8A09             994         MOV.W   [R1],R0
                        995 ; cbar.c    278 
                        996 ; cbar.c    279   return( OK);
00004E 9908FFFF         998         MOV.W   R0,#0FFFFH
                        999 ; cbar.c    280 }
000052 D680            1001         RET
                       1003 ; cbar.c    281 
                       1004 ; cbar.c    282 
                       1005 ; cbar.c    283 
                       1006 ; cbar.c    284 /**************************************************************************/
                       1007 ; cbar.c    285 /* SRAMVideoLoad                                    CBAR.C */
                       1008 ; cbar.c    286 /*                                                  */
                       1009 ; cbar.c    287 /* Author:   Kim Engedahl, DEV, 000324                          */
                       1010 ; cbar.c    288 /* Revised:   000603, KEn, DEV                                 */
                       1011 ; cbar.c    289 /*                                                  */
                       1012 ; cbar.c    290 /* Function: Copy video data to video RAM                        */
                       1013 ; cbar.c    291 /* Remarks:   S5,S4,S3 and S2 should be kept at ZERO while loading AND the */
                       1014 ; cbar.c    292 /*           interrupt system should NOT clear the PS bit.          */
                       1015 ; cbar.c    293 /* Returns:                                            */
                       1016 ; cbar.c    294 /* Updates:                                            */
                       1017 ; cbar.c    295 /**************************************************************************/
                       1018 ; cbar.c    296 int SRAMVideoLoad( UC signal, UC bank)
                       1019 ; cbar.c    297 {
                       1020         ALIGN   1
                       1022         PUBLIC  _SRAMVideoLoad
000054                 1023 _SRAMVideoLoad:
000054 0F30            1027         PUSH.W  R4, R5
000056 A978            1029         ADDS.W  R7,#08H
000058 8191            1033         MOV.B   R4H,R0H
00005A 8180            1036         MOV.B   R4L,R0L
                       1050 ; cbar.c    298   volatile int *VideoDstPtr;
                       1051 ; cbar.c    299   _ROM_  int *VideoSrcPtr;
                       1052 ; cbar.c    300   int i;
                       1053 ; cbar.c    301 
                       1054 ; cbar.c    302   Status |= PS;                    // Set PS bit while loading
00005C 8E0120          1056         MOV.W   R0,_Status
00005F 99061000        1057         OR.W    R0,#01000H
000063 8E0920          1058         MOV.W   _Status,R0
                       1059 ; cbar.c    303   //PLD_StatusPort = Status;
                       1060 ; cbar.c    304   Update_StatusPort(Status);
000066 8E0120          1062         MOV.W   R0,_Status
000069 C507A7          1063         CALL    _Update_StatusPort
                       1064 ; cbar.c    305                                                  
                       1065 ; cbar.c    306   VideoDstPtr = &SRAMVideoPort + (( bank/4)-4) * 0x0800;
00006C D092            1067         LSR.B   R4H,#02H
00006E 8109            1069         MOV.B   R0L,R4H
000070 B110            1070         MOVS.B  R0H,#00H
000072 D90C            1071         ASL.W   R0,#0CH
000074 B910            1072         MOVS.W  R1,#00H
000076 99380004        1073         MOV.W   R3,#SEG( _SRAMVideoPort+-16384 )
00007A 99280000        1074         MOV.W   R2,#SOF( _SRAMVideoPort+-16384 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  11

ADDR   CODE            LINE SOURCELINE
00007E 0920            1075         ADD.W   R2,R0
000080 8C3F06          1076         MOV.W   [R7+6],R3
000083 8C2F04          1077         MOV.W   [R7+4],R2
                       1078 ; cbar.c    307   VideoSrcPtr = &VideoSignalArray[ 0x800 * (long)signal];
000086 8108            1080         MOV.B   R0L,R4L
000088 B110            1081         MOVS.B  R0H,#00H
00008A B910            1082         MOVS.W  R1,#00H
00008C DD0C            1083         ASL.D   R0,#0CH
00008E 99380005        1084         MOV.W   R3,#SEG( _VideoSignalArray )
000092 99280000        1085         MOV.W   R2,#SOF( _VideoSignalArray )
000096 0920            1086         ADD.W   R2,R0
000098 1931            1087         ADDC.W  R3,R1
                       1089 ; cbar.c    308 
                       1090 ; cbar.c    309   for ( i = 0; i < 2048; i++)
00009A B900            1092         MOV.W   R0,#00H
00009C                 1094 _7:
                       1095 ; cbar.c    310     *VideoDstPtr++ = *VideoSrcPtr++;
00009C 8953            1097         MOV.W   R5,R3
00009E 8942            1098         MOV.W   R4,R2
0000A0 8C5F02          1099         MOV.W   [R7+2],R5
0000A3 8A4F            1100         MOV.W   [R7],R4
0000A5 86AC43          1101         MOV.B   CS,R5L
0000A8 8854            1102         MOVC.W  R5,[R4+]
0000AA 8C3706          1106         MOV.W   R3,[R7+6]
0000AD 8C2704          1107         MOV.W   R2,[R7+4]
0000B0 866C42          1108         MOV.B   ES,R3L
0000B3 8A5A            1109         MOV.W   [R2],R5
0000B5 8C3702          1110         MOV.W   R3,[R7+2]
0000B8 8A27            1111         MOV.W   R2,[R7]
0000BA 99200002        1112         ADD.W   R2,#02H
0000BE 99310000        1113         ADDC.W  R3,#00H
0000C2 9C70040002      1118         ADD.W   [R7+4],#02H
0000C7 A901            1120         ADDS.W  R0,#01H
0000C9 99040800        1123         CMP.W   R0,#0800H
0000CD FBE7            1124         BLT     _7
                       1125 ; cbar.c    311 
                       1126 ; cbar.c    312   Status &= ~PS;                  // Clear PS bit again
0000CF 9E1520EFFF      1128         AND.W   _Status,#0EFFFH
                       1129 ; cbar.c    313   //PLD_StatusPort = Status;
                       1130 ; cbar.c    314   Update_StatusPort(Status);
0000D4 8E0120          1132         MOV.W   R0,_Status
0000D7 C50770          1134         CALL    _Update_StatusPort
                       1136 ; cbar.c    315 
                       1137 ; cbar.c    316   return( OK);
0000DA 9908FFFF        1139         MOV.W   R0,#0FFFFH
                       1140 ; cbar.c    317 }
0000DE 99700008        1142         ADD.W   R7,#08H
0000E2 2F30            1144         POP.W   R4, R5
0000E4 D680            1146         RET
                       1148 ; cbar.c    318 
                       1149 ; cbar.c    319 /**************************************************************************/
                       1150 ; cbar.c    320 /* SRAMSoundLoad                                    CBAR.C */
                       1151 ; cbar.c    321 /*                                                  */
                       1152 ; cbar.c    322 /* Author:   Kim Engedahl, DEV, 000410                          */
                       1153 ; cbar.c    323 /* Revised:   000603, KEn, DEV                                 */
                       1154 ; cbar.c    324 /*                                                  */
                       1155 ; cbar.c    325 /* Function: Copy sound data to sound RAM                        */
                       1156 ; cbar.c    326 /* Remarks:                                             */
                       1157 ; cbar.c    327 /* Returns:                                            */
                       1158 ; cbar.c    328 /* Updates:                                            */
                       1159 ; cbar.c    329 /**************************************************************************/
                       1160 ; cbar.c    330 int SRAMSoundLoad( UC signal)
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  12

ADDR   CODE            LINE SOURCELINE
                       1161 ; cbar.c    331 {
                       1162         ALIGN   1
                       1164         PUBLIC  _SRAMSoundLoad
0000E6                 1165 _SRAMSoundLoad:
0000E6 0F30            1169         PUSH.W  R4, R5
0000E8 A978            1171         ADDS.W  R7,#08H
                       1180 ; cbar.c    332   volatile int *SoundDstPtr;
                       1181 ; cbar.c    333   _ROM_  int *SoundSrcPtr;
                       1182 ; cbar.c    334   int i;
                       1183 ; cbar.c    335 
                       1184 ; cbar.c    336   signal = ( signal == EmbAudioStereo1kHz);
0000EA 910402          1186         CMP.B   R0L,#02H
0000ED F203            1187         BNE     _10
0000EF B181            1188         MOVS.B  R4L,#01H
0000F1 FE02            1189         BR      _12
0000F1 FE0200          1189         BR      _12
0000F4                 1190 _10:
0000F4 B180            1191         MOVS.B  R4L,#00H
0000F4 B180            1191         MOVS.B  R4L,#00H
0000F6                 1192 _12:
                       1195 ; cbar.c    337 
                       1196 ; cbar.c    338   Status |= PS;                  // Set PS bit while loading
0000F6 8E0120          1198         MOV.W   R0,_Status
0000F9 99061000        1199         OR.W    R0,#01000H
0000FD 8E0920          1200         MOV.W   _Status,R0
                       1201 ; cbar.c    339   //PLD_StatusPort = Status;
                       1202 ; cbar.c    340   Update_StatusPort(Status);
000100 8E0120          1204         MOV.W   R0,_Status
000103 C5075A          1205         CALL    _Update_StatusPort
                       1206 ; cbar.c    341                                              
                       1207 ; cbar.c    342   SoundDstPtr = &SRAMSoundPort;
000106 9D7800060004    1209         MOV.W   [R7+6],#SEG( _SRAMSoundPort )
00010C 9C78040000      1210         MOV.W   [R7+4],#SOF( _SRAMSoundPort )
                       1211 ; cbar.c    343   SoundSrcPtr = &SoundSignalArray[2304*signal];
000111 8108            1213         MOV.B   R0L,R4L
000113 B110            1214         MOVS.B  R0H,#00H
000115 E9001200        1215         MULU.W  R0,#01200H
000119 B910            1216         MOVS.W  R1,#00H
00011B 99380004        1217         MOV.W   R3,#SEG( _SoundSignalArray )
00011F 9928A000        1218         MOV.W   R2,#SOF( _SoundSignalArray )
000123 0920            1219         ADD.W   R2,R0
000125 1931            1220         ADDC.W  R3,R1
                       1222 ; cbar.c    344 
                       1223 ; cbar.c    345   for ( i = 0; i < 2304; i++)
000127 B900            1225         MOV.W   R0,#00H
00012A                 1227 _9:
                       1228 ; cbar.c    346     *SoundDstPtr++ = *SoundSrcPtr++;
00012A 8953            1230         MOV.W   R5,R3
00012C 8942            1231         MOV.W   R4,R2
00012E 8C5F02          1232         MOV.W   [R7+2],R5
000131 8A4F            1233         MOV.W   [R7],R4
000133 86AC43          1234         MOV.B   CS,R5L
000136 8854            1235         MOVC.W  R5,[R4+]
000138 8C3706          1239         MOV.W   R3,[R7+6]
00013B 8C2704          1240         MOV.W   R2,[R7+4]
00013E 866C42          1241         MOV.B   ES,R3L
000141 8A5A            1242         MOV.W   [R2],R5
000143 8C3702          1243         MOV.W   R3,[R7+2]
000146 8A27            1244         MOV.W   R2,[R7]
000148 99200002        1245         ADD.W   R2,#02H
00014C 99310000        1246         ADDC.W  R3,#00H
000150 9C70040002      1251         ADD.W   [R7+4],#02H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  13

ADDR   CODE            LINE SOURCELINE
000155 A901            1253         ADDS.W  R0,#01H
000157 99040900        1256         CMP.W   R0,#0900H
00015B FBE7            1257         BLT     _9
                       1258 ; cbar.c    347 
                       1259 ; cbar.c    348   Status &= ~PS;                  // Clear PS bit again
00015D 9E1520EFFF      1261         AND.W   _Status,#0EFFFH
                       1262 ; cbar.c    349   //PLD_StatusPort = Status;
                       1263 ; cbar.c    350   Update_StatusPort(Status);
000162 8E0120          1265         MOV.W   R0,_Status
000165 C50729          1267         CALL    _Update_StatusPort
                       1269 ; cbar.c    351 
                       1270 ; cbar.c    352   return( OK);
000168 9908FFFF        1272         MOV.W   R0,#0FFFFH
                       1273 ; cbar.c    353 }
00016C 99700008        1275         ADD.W   R7,#08H
000170 2F30            1277         POP.W   R4, R5
000172 D680            1279         RET
                       1281 ; cbar.c    354 
                       1282 ; cbar.c    355 
                       1283 ; cbar.c    356 /**************************************************************************/
                       1284 ; cbar.c    357 /* CBLineInterrupt                                  CBAR.C */
                       1285 ; cbar.c    358 /*                                                  */
                       1286 ; cbar.c    359 /* Author:   Kim Engedahl, DEV, 000322                          */
                       1287 ; cbar.c    360 /* Revised:   000603, KEn, DEV                                 */
                       1288 ; cbar.c    361 /*                                                  */
                       1289 ; cbar.c    362 /* Function:                                           */
                       1290 ; cbar.c    363 /* Remarks:   Delayed field interrupt is synchronized to line ??/??      */
                       1291 ; cbar.c    364 /* Returns:                                            */
                       1292 ; cbar.c    365 /* Updates:                                            */
                       1293 ; cbar.c    366 /**************************************************************************/
                       1294 ; cbar.c    367 void CBLineInterrupt( void)
                       1295 ; cbar.c    368   {
                       1296         ALIGN   1
000000                 1298 CBAR_CLR_FA     SEGMENT HDATA INSEGMENT CLEAR
000000                 1299         RSEG    CBAR_CLR_FA
                       1300         ALIGN   1
000000                 1301 _14:    DS      2
   |  RESERVED             
000001
                       1302         PUBLIC  _CBLineInterrupt
000174                 1303         RSEG    CBAR_PR
000174                 1303         RSEG    CBAR_PR
000174                 1304 _CBLineInterrupt:
                       1309 ; cbar.c    369   static UI tmp;
                       1310 ; cbar.c    370 
                       1311 ; cbar.c    371   if ( CBSetup.System < NTSC_US)
000174 964842rr        1313         MOV.B   ES,#SEG( _CBSetup )
000178 9908rrrr        1314         MOV.W   R0,#SOF( _CBSetup )
00017C 8200            1315         MOV.B   R0L,[R0]
00017E 910402          1316         CMP.B   R0L,#02H
000181 F067            1317         BCC     _22
                       1318 ; cbar.c    372     {
                       1319 ; cbar.c    373     if ( TF0)                  // If delayed field interrupt...
000183 082285          1321         MOV     C,0285H
000186 F015            1322         BCC     _15
                       1323 ; cbar.c    374       {
                       1324 ; cbar.c    375       TF0 = 0;                  // Clear delayed field interrupt
000188 080285          1326         CLR     0285H
                       1327 ; cbar.c    376 
                       1328 ; cbar.c    377       SyncLineCnt = 19;            // Next interrupt in 19 lines
00018B 96182913        1330         MOV.B   _SyncLineCnt,#013H
                       1331 ; cbar.c    378       SyncLinePtr = 0;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  14

ADDR   CODE            LINE SOURCELINE
00018F B6102A          1333         MOV.B   _SyncLinePtr,#00H
                       1334 ; cbar.c    379   
                       1335 ; cbar.c    380       LineCnt = 3;
000192 BE1326          1337         MOV.W   _LineCnt,#03H
                       1338 ; cbar.c    381 
                       1339 ; cbar.c    382       SoundCnt = 2;
000195 B6122C          1341         MOV.B   _SoundCnt,#02H
                       1342 ; cbar.c    383       SoundPtr = 2;
000198 B6122D          1344         MOV.B   _SoundPtr,#02H
                       1345 ; cbar.c    384 
                       1346 ; cbar.c    385       SoundPtrMax = 64;
00019B 96182E40        1348         MOV.B   _SoundPtrMax,#040H
                       1349 ; cbar.c    386 
                       1350 ; cbar.c    387       Status |= FIELD1;            // This is field 1 of 8
00019F 9E16200200      1352         OR.W    _Status,#0200H
                       1353 ; cbar.c    388       Status &= ~SYSSEL;          
0001A4 9E1520FFBF      1355         AND.W   _Status,#0FFBFH
                       1356 ; cbar.c    389       //PLD_StatusPort = Status;
                       1357 ; cbar.c    390       Update_StatusPort(Status);
0001A9 8E0120          1359         MOV.W   R0,_Status
0001AC C50706          1360         CALL    _Update_StatusPort
                       1361 ; cbar.c    391 
                       1362 ; cbar.c    392       return;
0001AF D680            1364         RET
                       1365 ; cbar.c    393       }
0001B2                 1367 _15:
                       1368 ; cbar.c    394     else
                       1369 ; cbar.c    395       {
                       1370 ; cbar.c    396       if ( Status & FIELD1)
0001B2 99080200        1372         MOV.W   R0,#0200H
0001B6 5E0120          1373         AND.W   R0,_Status
0001B9 F306            1374         BEQ     _16
                       1375 ; cbar.c    397         {
                       1376 ; cbar.c    398         Status &= ~FIELD1;
0001BB 9E1520FDFF      1378         AND.W   _Status,#0FDFFH
                       1379 ; cbar.c    399         //PLD_StatusPort = Status;
                       1380 ; cbar.c    400         Update_StatusPort(Status);
0001C0 8E0120          1382         MOV.W   R0,_Status
0001C3 C506FA          1383         CALL    _Update_StatusPort
                       1384 ; cbar.c    401 
                       1385 ; cbar.c    402         }
0001C6                 1387 _16:
                       1388 ; cbar.c    403 
                       1389 ; cbar.c    404       if (++LineCnt >= 625)
0001C6 AE1126          1391         ADDS.W  _LineCnt,#01H
0001C9 9E14260271      1392         CMP.W   _LineCnt,#0271H
0001CE F102            1393         BCS     _17
                       1394 ; cbar.c    405         LineCnt = 0;
0001D0 BE1026          1396         MOV.W   _LineCnt,#00H
0001D0 BE102600        1396         MOV.W   _LineCnt,#00H
0001D4                 1397 _17:
                       1398 ; cbar.c    406         
                       1399 ; cbar.c    407       if ( !--SoundCnt)
0001D4 A61F2C          1401         ADDS.B  _SoundCnt,#0FH
0001D7 86012C          1402         MOV.B   R0L,_SoundCnt
                       1403         BNE     _36
0001DA F302           +1403 ;       BEQ     _LG_22
0001DC D500C0         +1403 ;       JMP.L   _36
0001DC D500C000       +1403 ;       JMP.L   _36
0001E0                +1403 _LG_22:
                       1404 ; cbar.c    408         {
                       1405 ; cbar.c    409         if ( SoundPtr > SoundPtrMax)
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  15

ADDR   CODE            LINE SOURCELINE
0001E0 86012E          1407         MOV.B   R0L,_SoundPtrMax
0001E3 46092D          1408         CMP.B   _SoundPtr,R0L
0001E6 F90B            1409         BL      _20
                       1410 ; cbar.c    410           {
                       1411 ; cbar.c    411           SoundPtr = 0;
0001E8 B6102D          1413         MOV.B   _SoundPtr,#00H
                       1414 ; cbar.c    412 
                       1415 ; cbar.c    413           if ( SoundPtrMax == 63)
0001EB 86092E          1417         MOV.B   _SoundPtrMax,R0L
0001EE 96142E3F        1418         CMP.B   _SoundPtrMax,#03FH
0001F2 F203            1419         BNE     _18
                       1420 ; cbar.c    414             SoundPtrMax = 64;
0001F4 96182E40        1422         MOV.B   _SoundPtrMax,#040H
0001F8 FE02            1423         BR      _20
0001F8 FE02            1423         BR      _20
0001FA                 1424 _18:
                       1425 ; cbar.c    415           else
                       1426 ; cbar.c    416             SoundPtrMax = 63;
0001FA 96182E3F        1428         MOV.B   _SoundPtrMax,#03FH
                       1429 ; cbar.c    417           }
0001FE                 1431 _20:
                       1432 ; cbar.c    418         tmp = Sound625[SoundPtr++];  // Get sound information
0001FE 86012D          1434         MOV.B   R0L,_SoundPtr
000201 B110            1435         MOVS.B  R0H,#00H
000203 D901            1436         ASL.W   R0,#01H
000205 8920            1437         MOV.W   R2,R0
000207 B930            1438         MOVS.W  R3,#00H
000209 B910            1439         MOV.W   R1,#SEG( _Sound625 )
00020B 99080AA2        1440         MOV.W   R0,#SOF( _Sound625 )
00020F 0902            1441         ADD.W   R0,R2
000211 1913            1442         ADDC.W  R1,R3
000213 862C43          1443         MOV.B   CS,R1L
000216 8810            1444         MOVC.W  R1,[R0+]
000218 964842rr        1445         MOV.B   ES,#SEG( _14 )
00021C 9908rrrr        1446         MOV.W   R0,#SOF( _14 )
000220 8A18            1447         MOV.W   [R0],R1
000222 A6112D          1448         ADDS.B  _SoundPtr,#01H
                       1449 ; cbar.c    419     
                       1450 ; cbar.c    420         Status &= ~SOUND;            // Clear previous sound sample
000225 9E1520FE7F      1452         AND.W   _Status,#0FE7FH
                       1453 ; cbar.c    421 
                       1454 ; cbar.c    422         if ( SoundEnable)           // If embedded audio on..
00022A 964842rr        1456         MOV.B   ES,#SEG( _SoundEnable )
00022E 9908rrrr        1457         MOV.W   R0,#SOF( _SoundEnable )
000232 8200            1458         MOV.B   R0L,[R0]
000234 F305            1459         BEQ     _21
                       1460 ; cbar.c    423            Status |= ( tmp & SOUND);  //  set sound samples
000236 99080180        1462         MOV.W   R0,#0180H
00023A 5901            1463         AND.W   R0,R1
00023C 6E0920          1464         OR.W    _Status,R0
00023C 6E092000        1464         OR.W    _Status,R0
000240                 1465 _21:
                       1466 ; cbar.c    424 
                       1467 ; cbar.c    425         SoundCnt = tmp & 0x0F;      // Lines to next sound update
000240 91250F          1469         AND.B   R1L,#0FH
000243 86292C          1470         MOV.B   _SoundCnt,R1L
                       1471 ; cbar.c    426         //PLD_StatusPort = Status;        // Update status port
                       1472 ; cbar.c    427         Update_StatusPort(Status);
000246 8E0120          1474         MOV.W   R0,_Status
000249 C506B7          1475         CALL    _Update_StatusPort
                       1476 ; cbar.c    428 
                       1477 ; cbar.c    429         }
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  16

ADDR   CODE            LINE SOURCELINE
                       1478 ; cbar.c    430       }
                       1479 ; cbar.c    431     }
                       1481         BR      _36
00024C D50088         +1481         JMP.L   _36
00024C D5008800       +1481         JMP.L   _36
000250                 1482 _22:
                       1483 ; cbar.c    432   else    // NTSC
                       1484 ; cbar.c    433     {
                       1485 ; cbar.c    434     if ( TF0)                        // If delayed field interrupt...
000250 082285          1487         MOV     C,0285H
000253 F01B            1488         BCC     _24
                       1489 ; cbar.c    435       {
                       1490 ; cbar.c    436       TF0 = 0;                      // Clear delayed field interrupt
000255 080285          1492         CLR     0285H
                       1493 ; cbar.c    437 
                       1494 ; cbar.c    438       if ( FrameCnt > 9)
000258 96142809        1496         CMP.B   _FrameCnt,#09H
00025C F903            1497         BL      _23
                       1498 ; cbar.c    439         {
                       1499 ; cbar.c    440         FrameCnt = 1;
00025E B61128          1501         MOV.B   _FrameCnt,#01H
                       1502 ; cbar.c    441         SoundFrameCnt = 1;
000261 B6112B          1504         MOV.B   _SoundFrameCnt,#01H
                       1505 ; cbar.c    442         }
000264                 1507 _23:
                       1508 ; cbar.c    443 
                       1509 ; cbar.c    444       SyncLineCnt = 12;              // Next interrupt in 12 lines
000264 9618290C        1511         MOV.B   _SyncLineCnt,#0CH
                       1512 ; cbar.c    445       SyncLinePtr = 1;
000268 B6112A          1514         MOV.B   _SyncLinePtr,#01H
                       1515 ; cbar.c    446 
                       1516 ; cbar.c    447       LineCnt = 6;
00026B BE1626          1518         MOV.W   _LineCnt,#06H
                       1519 ; cbar.c    448 
                       1520 ; cbar.c    449       SoundCnt = 2;
00026E B6122C          1522         MOV.B   _SoundCnt,#02H
                       1523 ; cbar.c    450       SoundPtr = 3;
000271 B6132D          1525         MOV.B   _SoundPtr,#03H
                       1526 ; cbar.c    451       SoundPtrMax = 47;
000274 96182E2F        1528         MOV.B   _SoundPtrMax,#02FH
                       1529 ; cbar.c    452 
                       1530 ; cbar.c    453       Status |= FIELD1;                // This is field 1 of 4
000278 9E16200200      1532         OR.W    _Status,#0200H
                       1533 ; cbar.c    454       Status |= SYSSEL;
00027D 9E16200040      1535         OR.W    _Status,#040H
                       1536 ; cbar.c    455       //PLD_StatusPort = Status;
                       1537 ; cbar.c    456       Update_StatusPort(Status);
000282 8E0120          1539         MOV.W   R0,_Status
000285 C50699          1540         CALL    _Update_StatusPort
                       1541 ; cbar.c    457 
                       1542 ; cbar.c    458       return;
000288 D680            1544         RET
                       1545 ; cbar.c    459       }
00028A                 1547 _24:
                       1548 ; cbar.c    460     else
                       1549 ; cbar.c    461       {
                       1550 ; cbar.c    462       if ( Status & FIELD1)
00028A 99080200        1552         MOV.W   R0,#0200H
00028E 5E0120          1553         AND.W   R0,_Status
000291 F306            1554         BEQ     _25
                       1555 ; cbar.c    463         {
                       1556 ; cbar.c    464         Status &= ~FIELD1;  
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  17

ADDR   CODE            LINE SOURCELINE
000293 9E1520FDFF      1558         AND.W   _Status,#0FDFFH
                       1559 ; cbar.c    465         //PLD_StatusPort = Status;
                       1560 ; cbar.c    466         Update_StatusPort(Status);
000298 8E0120          1562         MOV.W   R0,_Status
00029B C5068E          1563         CALL    _Update_StatusPort
                       1564 ; cbar.c    467 
                       1565 ; cbar.c    468         }
00029E                 1567 _25:
                       1568 ; cbar.c    469 
                       1569 ; cbar.c    470       if ( ++LineCnt >= 525)
00029E AE1126          1571         ADDS.W  _LineCnt,#01H
0002A1 9E1426020D      1572         CMP.W   _LineCnt,#020DH
0002A6 F109            1573         BCS     _27
                       1574 ; cbar.c    471         {
                       1575 ; cbar.c    472         FrameCnt++;
0002A8 A61128          1577         ADDS.B  _FrameCnt,#01H
                       1578 ; cbar.c    473         LineCnt = 0;
0002AB BE1026          1580         MOV.W   _LineCnt,#00H
                       1581 ; cbar.c    474 
                       1582 ; cbar.c    475         if ( ++SoundFrameCnt > 5)
0002AE A6112B          1584         ADDS.B  _SoundFrameCnt,#01H
0002B1 96142B05        1585         CMP.B   _SoundFrameCnt,#05H
0002B5 F902            1586         BL      _27
                       1587 ; cbar.c    476           SoundFrameCnt = 1;
0002B7 B6112B          1589         MOV.B   _SoundFrameCnt,#01H
                       1590 ; cbar.c    477         }
0002BA                 1592 _27:
                       1593 ; cbar.c    478 
                       1594 ; cbar.c    479       if ( !--SoundCnt)
0002BA A61F2C          1596         ADDS.B  _SoundCnt,#0FH
0002BD 86012C          1597         MOV.B   R0L,_SoundCnt
0002C0 F24E            1598         BNE     _36
                       1599 ; cbar.c    480         {
                       1600 ; cbar.c    481         if ( SoundPtr > SoundPtrMax)
0002C2 86012E          1602         MOV.B   R0L,_SoundPtrMax
0002C5 46092D          1603         CMP.B   _SoundPtr,R0L
0002C8 F90B            1604         BL      _30
                       1605 ; cbar.c    482           {
                       1606 ; cbar.c    483           SoundPtr = 0;
0002CA B6102D          1608         MOV.B   _SoundPtr,#00H
                       1609 ; cbar.c    484 
                       1610 ; cbar.c    485           if ( SoundPtrMax == 46)
0002CD 86092E          1612         MOV.B   _SoundPtrMax,R0L
0002D0 96142E2E        1613         CMP.B   _SoundPtrMax,#02EH
0002D4 F203            1614         BNE     _28
                       1615 ; cbar.c    486             SoundPtrMax = 47;
0002D6 96182E2F        1617         MOV.B   _SoundPtrMax,#02FH
0002DA FE02            1618         BR      _30
0002DA FE02            1618         BR      _30
0002DC                 1619 _28:
                       1620 ; cbar.c    487           else
                       1621 ; cbar.c    488             SoundPtrMax = 46;
0002DC 96182E2E        1623         MOV.B   _SoundPtrMax,#02EH
                       1624 ; cbar.c    489           }
0002E0                 1626 _30:
                       1627 ; cbar.c    490         tmp = Sound525[SoundPtr];      // Get sound information
0002E0 86012D          1629         MOV.B   R0L,_SoundPtr
0002E3 B110            1630         MOVS.B  R0H,#00H
0002E5 D901            1631         ASL.W   R0,#01H
0002E7 8920            1632         MOV.W   R2,R0
0002E9 B930            1633         MOVS.W  R3,#00H
0002EB B910            1634         MOV.W   R1,#SEG( _Sound525 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  18

ADDR   CODE            LINE SOURCELINE
0002ED 99080A42        1635         MOV.W   R0,#SOF( _Sound525 )
0002F1 0902            1636         ADD.W   R0,R2
0002F3 1913            1637         ADDC.W  R1,R3
0002F5 862C43          1638         MOV.B   CS,R1L
0002F8 8810            1639         MOVC.W  R1,[R0+]
0002FA 964842rr        1640         MOV.B   ES,#SEG( _14 )
0002FE 9908rrrr        1641         MOV.W   R0,#SOF( _14 )
000302 8A18            1642         MOV.W   [R0],R1
                       1643 ; cbar.c    491 
                       1644 ; cbar.c    492         if ( SoundPtr++ == 47)        // Prepare for line 263
000304 86012D          1646         MOV.B   R0L,_SoundPtr
000307 A6112D          1647         ADDS.B  _SoundPtr,#01H
00030A 91042F          1648         CMP.B   R0L,#02FH
00030D F20C            1649         BNE     _32
                       1650 ; cbar.c    493           if ( SoundFrameCnt & 0x01)  // Sound frames 1,3,5 are special
00030F 86012B          1652         MOV.B   R0L,_SoundFrameCnt
000312 910501          1653         AND.B   R0L,#01H
000315 F308            1654         BEQ     _32
                       1655 ; cbar.c    494             tmp |= S3OR4;
000317 99160100        1657         OR.W    R1,#0100H
00031B 964842rr        1658         MOV.B   ES,#SEG( _14 )
00031F 9908rrrr        1659         MOV.W   R0,#SOF( _14 )
000323 8A18            1660         MOV.W   [R0],R1
                       1661 ; cbar.c    495 
                       1662 ; cbar.c    496         Status &= ~SOUND;              // Clear previous sound sample
000326                 1664 _32:
000326 9E1520FE7F      1665         AND.W   _Status,#0FE7FH
                       1666 ; cbar.c    497 
                       1667 ; cbar.c    498         if ( SoundEnable)
00032B 964842rr        1669         MOV.B   ES,#SEG( _SoundEnable )
00032F 9908rrrr        1670         MOV.W   R0,#SOF( _SoundEnable )
000333 8200            1671         MOV.B   R0L,[R0]
000335 F309            1672         BEQ     _33
                       1673 ; cbar.c    499           Status |= ( tmp & SOUND);    // Sound samples
000337 964842rr        1675         MOV.B   ES,#SEG( _14 )
00033B 9908rrrr        1676         MOV.W   R0,#SOF( _14 )
00033F 8A00            1677         MOV.W   R0,[R0]
000341 99050180        1678         AND.W   R0,#0180H
000345 6E0920          1679         OR.W    _Status,R0
000345 6E0920          1679         OR.W    _Status,R0
000348                 1680 _33:
                       1681 ; cbar.c    500 
                       1682 ; cbar.c    501         SoundCnt = tmp & 0x0F;         // Lines to next sound update
000348 964842rr        1684         MOV.B   ES,#SEG( _14 )
00034C 9908rrrr        1685         MOV.W   R0,#SOF( _14 )
000350 8A00            1686         MOV.W   R0,[R0]
000352 91050F          1687         AND.B   R0L,#0FH
000355 86092C          1688         MOV.B   _SoundCnt,R0L
                       1689 ; cbar.c    502         //PLD_StatusPort = Status;          // Update status port
                       1690 ; cbar.c    503         Update_StatusPort(Status);
000358 8E0120          1692         MOV.W   R0,_Status
00035B C5062E          1693         CALL    _Update_StatusPort
                       1694 ; cbar.c    504         }
                       1695 ; cbar.c    505       }
                       1696 ; cbar.c    506     } // if NTSC
00035E                 1698 _36:
                       1699 ; cbar.c    507 #if 0 
                       1700 ; cbar.c    508   if ( CBSetup.System < NTSC_US)
                       1701 ; cbar.c    509     {   
                       1702 ; cbar.c    510     switch (LineCnt)  //<-PAL
                       1703 ; cbar.c    511       {
                       1704 ; cbar.c    512       case 311:       // Context switching via SWI7 happens only after
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  19

ADDR   CODE            LINE SOURCELINE
                       1705 ; cbar.c    513       case 624:       // line 311 or line 624 are done in case of PAL
                       1706 ; cbar.c    514         JKflag = 1;
                       1707 ; cbar.c    515         break;
                       1708 ; cbar.c    516       }
                       1709 ; cbar.c    517     }
                       1710 ; cbar.c    518   else
                       1711 ; cbar.c    519     {
                       1712 ; cbar.c    520     switch (LineCnt)  //<- NTSC
                       1713 ; cbar.c    521       {
                       1714 ; cbar.c    522       case 262:       // Context switching via SWI7 happens only after
                       1715 ; cbar.c    523       case 524:       // line 265 or line 524 are done in case of NTSC
                       1716 ; cbar.c    524         JKflag = 1;
                       1717 ; cbar.c    525         break;
                       1718 ; cbar.c    526       }
                       1719 ; cbar.c    527     }
                       1720 ; cbar.c    528 #endif       
                       1721 ; cbar.c    529   if ( --SyncLineCnt == 0)
00035E A61F29          1723         ADDS.B  _SyncLineCnt,#0FH
000361 860129          1724         MOV.B   R0L,_SyncLineCnt
000364 F262            1725         BNE     _40
                       1726 ; cbar.c    530     {
                       1727 ; cbar.c    531      tmp = TablePtr[++SyncLinePtr];
000366 A6112A          1729         ADDS.B  _SyncLinePtr,#01H
000369 86012A          1730         MOV.B   R0L,_SyncLinePtr
00036C B110            1731         MOVS.B  R0H,#00H
00036E D901            1732         ASL.W   R0,#01H
000370 8920            1733         MOV.W   R2,R0
000372 9839            1734         SEXT.W  R3
000374 8E1124          1735         MOV.W   R1,_TablePtr+2
000377 8E0122          1736         MOV.W   R0,_TablePtr
00037A 0902            1737         ADD.W   R0,R2
00037C 1913            1738         ADDC.W  R1,R3
00037E 862C43          1739         MOV.B   CS,R1L
000381 8810            1740         MOVC.W  R1,[R0+]
000383 964842rr        1741         MOV.B   ES,#SEG( _14 )
000387 9908rrrr        1742         MOV.W   R0,#SOF( _14 )
00038B 8A18            1743         MOV.W   [R0],R1
                       1744 ; cbar.c    532     if ( tmp == 0)
00038D 6911            1746         OR.W    R1,R1
00038F F226            1747         BNE     _38
                       1748 ; cbar.c    533       {
                       1749 ; cbar.c    534       if ( NewPattern)
000391 964842rr        1751         MOV.B   ES,#SEG( _NewPattern )
000395 9908rrrr        1752         MOV.W   R0,#SOF( _NewPattern )
000399 8200            1753         MOV.B   R0L,[R0]
00039B F314            1754         BEQ     _37
                       1755 ; cbar.c    535         {
                       1756 ; cbar.c    536         NewPattern = Blanking = FALSE;
00039D 964842rr        1758         MOV.B   ES,#SEG( _Blanking )
0003A1 9908rrrr        1759         MOV.W   R0,#SOF( _Blanking )
0003A5 B200            1760         MOV.B   [R0],#00H
0003A7 964842rr        1761         MOV.B   ES,#SEG( _NewPattern )
0003AB 9908rrrr        1762         MOV.W   R0,#SOF( _NewPattern )
0003AF B200            1763         MOV.B   [R0],#00H
                       1764 ; cbar.c    537 
                       1765 ; cbar.c    538         TablePtr = newTablePtr;
0003B1 964842rr        1767         MOV.B   ES,#SEG( _newTablePtr )
0003B5 9918rrrr        1768         MOV.W   R1,#SOF( _newTablePtr )
0003B9 8B01            1769         MOV.W   R0,[R1+]
0003BB 8A11            1770         MOV.W   R1,[R1]
0003BD 8E1924          1771         MOV.W   _TablePtr+2,R1
0003C0 8E0922          1772         MOV.W   _TablePtr,R0
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  20

ADDR   CODE            LINE SOURCELINE
                       1773 ; cbar.c    539         }
0003C4                 1775 _37:
                       1776 ; cbar.c    540       SyncLinePtr = 0;
0003C4 B6102A          1778         MOV.B   _SyncLinePtr,#00H
                       1779 ; cbar.c    541       tmp = TablePtr[0];
0003C7 8E1124          1781         MOV.W   R1,_TablePtr+2
0003CA 8E0122          1782         MOV.W   R0,_TablePtr
0003CD 862C43          1783         MOV.B   CS,R1L
0003D0 8810            1784         MOVC.W  R1,[R0+]
0003D2 964842rr        1785         MOV.B   ES,#SEG( _14 )
0003D6 9908rrrr        1786         MOV.W   R0,#SOF( _14 )
0003DA 8A18            1787         MOV.W   [R0],R1
                       1788 ; cbar.c    542       }
0003DC                 1790 _38:
                       1791 ; cbar.c    543 
                       1792 ; cbar.c    544     SyncLineCnt = tmp / 256; // extract line cnt to SyncLineCnt
0003DC 964842rr        1794         MOV.B   ES,#SEG( _14 )
0003E0 9908rrrr        1795         MOV.W   R0,#SOF( _14 )
0003E4 8A00            1796         MOV.W   R0,[R0]
0003E6 8920            1797         MOV.W   R2,R0
0003E8 D808            1798         LSR.W   R0,#08H
0003EA 860929          1799         MOV.B   _SyncLineCnt,R0L
                       1800 ; cbar.c    545     tmp %= 256;              // extract SramBankX + SyncLineX tmp
0003ED 7933            1802         XOR.W   R3,R3
0003EF E9210100        1803         DIVU.D  R2,#0100H
0003F3 964842rr        1804         MOV.B   ES,#SEG( _14 )
0003F7 9908rrrr        1805         MOV.W   R0,#SOF( _14 )
0003FB 8A38            1806         MOV.W   [R0],R3
                       1807 ; cbar.c    546     tmp &= 0x3F;
0003FD 9935003F        1809         AND.W   R3,#03FH
000401 964842rr        1810         MOV.B   ES,#SEG( _14 )
000405 9908rrrr        1811         MOV.W   R0,#SOF( _14 )
000409 8A38            1812         MOV.W   [R0],R3
                       1813 ; cbar.c    547     Status &= ~( S5S4S3S2 | S1S0);
00040B 9E1520FFC0      1815         AND.W   _Status,#0FFC0H
                       1816 ; cbar.c    548     Status |= tmp;
000410 6E3920          1818         OR.W    _Status,R3
                       1819 ; cbar.c    549 
                       1820 ; cbar.c    550     if ( Blanking)                    // If blanking do NOT enable any
000413 964842rr        1822         MOV.B   ES,#SEG( _Blanking )
000417 9908rrrr        1823         MOV.W   R0,#SOF( _Blanking )
00041B 8200            1824         MOV.B   R0L,[R0]
00041D F303            1825         BEQ     _39
                       1826 ; cbar.c    551       Status &= ~S5S4S3S2;            //  bank
00041F 9E1520FFC3      1828         AND.W   _Status,#0FFC3H
00041F 9E1520FFC3      1828         AND.W   _Status,#0FFC3H
000424                 1829 _39:
                       1830 ; cbar.c    552     
                       1831 ; cbar.c    553 
                       1832 ; cbar.c    554 /*It have been determend that under some conditions             */
                       1833 ; cbar.c    555 /*when writing to contens of status to the StatusPort           */      
                       1834 ; cbar.c    556 /*a addressing error i introduced !                             */
                       1835 ; cbar.c    557 /*To awoid this problem a the following routine forces the      */
                       1836 ; cbar.c    558 /*C-compiler to use a R register as the source.                 */         
                       1837 ; cbar.c    559 
                       1838 ; cbar.c    560    //temp_status = Status;
                       1839 ; cbar.c    561    //temp_status &= 0xFF;       // Forsing the compiler to write from a register 
                            instead from a
                       1840 ; cbar.c    562                                 // internal memory lacation.
                       1841 ; cbar.c    563     //PLD_StatusPort = temp_status;
                       1842 ; cbar.c    564     //JKpin = 1;
                       1843 ; cbar.c    565     Update_StatusPort(Status);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  21

ADDR   CODE            LINE SOURCELINE
000424 8E0120          1845         MOV.W   R0,_Status
000427 C505C8          1846         CALL    _Update_StatusPort
                       1847 ; cbar.c    566     //JKpin = 0;    
                       1848 ; cbar.c    567    }
00042A                 1850 _40:
                       1851 ; cbar.c    568   LEDPort     = LEDMirror;
00042A 964842rr        1853         MOV.B   ES,#SEG( _LEDMirror )
00042E 9908rrrr        1854         MOV.W   R0,#SOF( _LEDMirror )
000432 8A00            1855         MOV.W   R0,[R0]
000434 96484206        1856         MOV.B   ES,#SEG( _LEDPort )
000438 9918A00C        1857         MOV.W   R1,#SOF( _LEDPort )
00043C 8A09            1858         MOV.W   [R1],R0
                       1859 ; cbar.c    569   TestLEDPort = TestLEDMirror;
00043E 964842rr        1861         MOV.B   ES,#SEG( _TestLEDMirror )
000442 9908rrrr        1862         MOV.W   R0,#SOF( _TestLEDMirror )
000446 8A00            1863         MOV.W   R0,[R0]
000448 96484206        1864         MOV.B   ES,#SEG( _TestLEDPort )
00044C 9918A014        1865         MOV.W   R1,#SOF( _TestLEDPort )
000450 8A09            1866         MOV.W   [R1],R0
                       1867 ; cbar.c    570   }
000452                 1869 _42:
000452 D680            1870         RET
                       1872 ; cbar.c    571 
                       1873 ; cbar.c    572 /**************************************************************************/
                       1874 ; cbar.c    573 /* CBDefaults                                                       CBAR.C  */
                       1875 ; cbar.c    574 /*                                                                        */
                       1876 ; cbar.c    575 /* Author:   Kim Engedahl, DEV, 000526                                    */
                       1877 ; cbar.c    576 /* Revised:   000617, KEn, DEV                                             */
                       1878 ; cbar.c    577 /*                                                                        */
                       1879 ; cbar.c    578 /* Function:                                                               */
                       1880 ; cbar.c    579 /* Remarks:                                                                */
                       1881 ; cbar.c    580 /* Returns:                                                                */
                       1882 ; cbar.c    581 /* Updates:                                                                */
                       1883 ; cbar.c    582 /**************************************************************************/
                       1884 ; cbar.c    583 void CBDefaults( void)
                       1885 ; cbar.c    584 {
                       1886         ALIGN   1
                       1888         PUBLIC  _CBDefaults
000454                 1889 _CBDefaults:
                       1893 ; cbar.c    585   Settings.CBSetup.System = CBSetup.System = Calibration.ResetSystem;
000454 964842rr        1895         MOV.B   ES,#SEG( _Calibration+97 )
000458 9908rrrr        1896         MOV.W   R0,#SOF( _Calibration+97 )
00045C 8200            1897         MOV.B   R0L,[R0]
00045E 964842rr        1898         MOV.B   ES,#SEG( _CBSetup )
000462 9918rrrr        1899         MOV.W   R1,#SOF( _CBSetup )
000466 8209            1900         MOV.B   [R1],R0L
000468 964842rr        1901         MOV.B   ES,#SEG( _Settings+32 )
00046C 9918rrrr        1902         MOV.W   R1,#SOF( _Settings+32 )
000470 8209            1903         MOV.B   [R1],R0L
                       1904 ; cbar.c    586 
                       1905 ; cbar.c    587   if ( CBSetup.System < NTSC_US)
000472 964842rr        1907         MOV.B   ES,#SEG( _CBSetup )
000476 9908rrrr        1908         MOV.W   R0,#SOF( _CBSetup )
00047A 8200            1909         MOV.B   R0L,[R0]
00047C 910402          1910         CMP.B   R0L,#02H
00047F F00C            1911         BCC     _53
                       1912 ; cbar.c    588     Settings.CBSetup.Pattern = CBSetup.Pattern = EBUCBar;
000481 964842rr        1914         MOV.B   ES,#SEG( _CBSetup+2 )
000485 9908rrrr        1915         MOV.W   R0,#SOF( _CBSetup+2 )
000489 BA01            1916         MOV.W   [R0],#01H
00048B 964842rr        1917         MOV.B   ES,#SEG( _Settings+34 )
00048F 9908rrrr        1918         MOV.W   R0,#SOF( _Settings+34 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  22

ADDR   CODE            LINE SOURCELINE
000493 BA01            1919         MOV.W   [R0],#01H
000495 FE0B            1920         BR      _54
000495 FE0B00          1920         BR      _54
000498                 1921 _53:
                       1922 ; cbar.c    589   else
                       1923 ; cbar.c    590     Settings.CBSetup.Pattern = CBSetup.Pattern = SMPTECBar;
000498 964842rr        1925         MOV.B   ES,#SEG( _CBSetup+2 )
00049C 9908rrrr        1926         MOV.W   R0,#SOF( _CBSetup+2 )
0004A0 BA00            1927         MOV.W   [R0],#00H
0004A2 964842rr        1928         MOV.B   ES,#SEG( _Settings+34 )
0004A6 9908rrrr        1929         MOV.W   R0,#SOF( _Settings+34 )
0004AA BA00            1930         MOV.W   [R0],#00H
0004AA BA00            1930         MOV.W   [R0],#00H
0004AC                 1931 _54:
                       1932 ; cbar.c    591 
                       1933 ; cbar.c    592   Settings.CBSetup.Delay = CBSetup.Delay = 0;
0004AC 964842rr        1935         MOV.B   ES,#SEG( _CBSetup+4 )
0004B0 9908rrrr        1936         MOV.W   R0,#SOF( _CBSetup+4 )
0004B4 BB00            1937         MOV.W   [R0+],#00H
0004B6 BA00            1938         MOV.W   [R0],#00H
0004B8 964842rr        1939         MOV.B   ES,#SEG( _Settings+36 )
0004BC 9908rrrr        1940         MOV.W   R0,#SOF( _Settings+36 )
0004C0 BB00            1941         MOV.W   [R0+],#00H
0004C2 BA00            1942         MOV.W   [R0],#00H
                       1943 ; cbar.c    593   Settings.CBSetup.ScHPhase = CBSetup.ScHPhase = 0;
0004C4 964842rr        1945         MOV.B   ES,#SEG( _CBSetup+8 )
0004C8 9908rrrr        1946         MOV.W   R0,#SOF( _CBSetup+8 )
0004CC BA00            1947         MOV.W   [R0],#00H
0004CE 964842rr        1948         MOV.B   ES,#SEG( _Settings+40 )
0004D2 9908rrrr        1949         MOV.W   R0,#SOF( _Settings+40 )
0004D6 BA00            1950         MOV.W   [R0],#00H
                       1951 ; cbar.c    594   Settings.CBSetup.EmbAudioSignal = CBSetup.EmbAudioSignal = EmbAudioOff;
0004D8 964842rr        1953         MOV.B   ES,#SEG( _CBSetup+10 )
0004DC 9908rrrr        1954         MOV.W   R0,#SOF( _CBSetup+10 )
0004E0 B200            1955         MOV.B   [R0],#00H
0004E2 964842rr        1956         MOV.B   ES,#SEG( _Settings+42 )
0004E6 9908rrrr        1957         MOV.W   R0,#SOF( _Settings+42 )
0004EA B200            1958         MOV.B   [R0],#00H
                       1959 ; cbar.c    595 
                       1960 ; cbar.c    596   NV_Store( &Settings, SettingsPtr, sizeof( Settings));
0004EC 9918rrrr        1962         MOV.W   R1,#SEG( _Settings )
0004F0 9908rrrr        1963         MOV.W   R0,#SOF( _Settings )
0004F4 964842rr        1964         MOV.B   ES,#SEG( _SettingsPtr )
0004F8 9928rrrr        1965         MOV.W   R2,#SOF( _SettingsPtr )
0004FC 8A22            1966         MOV.W   R2,[R2]
0004FE 9938004A        1967         MOV.W   R3,#04AH
                       1968         CALL    _NV_Store
000502 C4rrrrrr       +1968 ;       FCALL   _NV_Store
                       1969 ; cbar.c    597 }
000506 D680            1971         RET
                       1973 ; cbar.c    598 
                       1974 ; cbar.c    599 /**************************************************************************/
                       1975 ; cbar.c    600 /* CBInit                                                           CBAR.C  */
                       1976 ; cbar.c    601 /*                                                                        */
                       1977 ; cbar.c    602 /* Author:   Kim Engedahl, DEV, 000322                                    */
                       1978 ; cbar.c    603 /* Revised:   0009145, KEn, DEV                                             */
                       1979 ; cbar.c    604 /*                                                                        */
                       1980 ; cbar.c    605 /* Function:                                                               */
                       1981 ; cbar.c    606 /* Remarks:                                                                 */
                       1982 ; cbar.c    607 /* Returns:                                                                */
                       1983 ; cbar.c    608 /* Updates:                                                                */
                       1984 ; cbar.c    609 /**************************************************************************/
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  23

ADDR   CODE            LINE SOURCELINE
                       1985 ; cbar.c    610 int CBInit( void)
                       1986 ; cbar.c    611 {
                       1987         ALIGN   1
                       1989         PUBLIC  _CBInit
000508                 1990 _CBInit:
                       1994 ; cbar.c    612   SyncLinePtr = 0;
000508 B6102A          1996         MOV.B   _SyncLinePtr,#00H
                       1997 ; cbar.c    613   TablePtr = &NTSCFullFieldTable[0];
00050B BE1024          1999         MOV.W   _TablePtr+2,#SEG( _NTSCFullFieldTable )
00050E 9E1822093C      2000         MOV.W   _TablePtr,#SOF( _NTSCFullFieldTable )
                       2001 ; cbar.c    614 
                       2002 ; cbar.c    615   NewPattern = FALSE;
000513 964842rr        2004         MOV.B   ES,#SEG( _NewPattern )
000517 9908rrrr        2005         MOV.W   R0,#SOF( _NewPattern )
00051B B200            2006         MOV.B   [R0],#00H
                       2007 ; cbar.c    616   Blanking = TRUE;
00051D 964842rr        2009         MOV.B   ES,#SEG( _Blanking )
000521 9908rrrr        2010         MOV.W   R0,#SOF( _Blanking )
000525 9208FF          2011         MOV.B   [R0],#0FFH
                       2012 ; cbar.c    617   SoundEnable = FALSE;
000528 964842rr        2014         MOV.B   ES,#SEG( _SoundEnable )
00052C 9908rrrr        2015         MOV.W   R0,#SOF( _SoundEnable )
000530 B200            2016         MOV.B   [R0],#00H
                       2017 ; cbar.c    618 
                       2018 ; cbar.c    619   Status |= SYSSEL;
000532 9E16200040      2020         OR.W    _Status,#040H
                       2021 ; cbar.c    620   //PLD_StatusPort = Status;
                       2022 ; cbar.c    621   Update_StatusPort(Status);
000537 8E0120          2024         MOV.W   R0,_Status
00053A C5053F          2025         CALL    _Update_StatusPort
                       2026 ; cbar.c    622 
                       2027 ; cbar.c    623   SyncLineCnt = 1;                  // Interrupt in 1 line
00053D B61129          2029         MOV.B   _SyncLineCnt,#01H
                       2030 ; cbar.c    624 
                       2031 ; cbar.c    625   CBSetup.System = Settings.CBSetup.System;
000540 964842rr        2033         MOV.B   ES,#SEG( _Settings+32 )
000544 9908rrrr        2034         MOV.W   R0,#SOF( _Settings+32 )
000548 8200            2035         MOV.B   R0L,[R0]
00054A 964842rr        2036         MOV.B   ES,#SEG( _CBSetup )
00054E 9918rrrr        2037         MOV.W   R1,#SOF( _CBSetup )
000552 8209            2038         MOV.B   [R1],R0L
                       2039 ; cbar.c    626   CBSetup.Pattern = Settings.CBSetup.Pattern;
000554 964842rr        2041         MOV.B   ES,#SEG( _Settings+34 )
000558 9908rrrr        2042         MOV.W   R0,#SOF( _Settings+34 )
00055C 8A00            2043         MOV.W   R0,[R0]
00055E 964842rr        2044         MOV.B   ES,#SEG( _CBSetup+2 )
000562 9918rrrr        2045         MOV.W   R1,#SOF( _CBSetup+2 )
000566 8A09            2046         MOV.W   [R1],R0
                       2047 ; cbar.c    627   CBSetup.Delay = Settings.CBSetup.Delay;
000568 964842rr        2049         MOV.B   ES,#SEG( _Settings+36 )
00056C 9918rrrr        2050         MOV.W   R1,#SOF( _Settings+36 )
000570 8B01            2051         MOV.W   R0,[R1+]
000572 8A11            2052         MOV.W   R1,[R1]
000574 964842rr        2053         MOV.B   ES,#SEG( _CBSetup+4 )
000578 9928rrrr        2054         MOV.W   R2,#SOF( _CBSetup+4 )
00057C 8B0A            2055         MOV.W   [R2+],R0
00057E 8A1A            2056         MOV.W   [R2],R1
                       2057 ; cbar.c    628   CBSetup.ScHPhase = Settings.CBSetup.ScHPhase;
000580 964842rr        2059         MOV.B   ES,#SEG( _Settings+40 )
000584 9908rrrr        2060         MOV.W   R0,#SOF( _Settings+40 )
000588 8A00            2061         MOV.W   R0,[R0]
00058A 964842rr        2062         MOV.B   ES,#SEG( _CBSetup+8 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  24

ADDR   CODE            LINE SOURCELINE
00058E 9918rrrr        2063         MOV.W   R1,#SOF( _CBSetup+8 )
000592 8A09            2064         MOV.W   [R1],R0
                       2065 ; cbar.c    629   CBSetup.EmbAudioSignal = Settings.CBSetup.EmbAudioSignal;
000594 964842rr        2067         MOV.B   ES,#SEG( _Settings+42 )
000598 9908rrrr        2068         MOV.W   R0,#SOF( _Settings+42 )
00059C 8200            2069         MOV.B   R0L,[R0]
00059E 964842rr        2070         MOV.B   ES,#SEG( _CBSetup+10 )
0005A2 9918rrrr        2071         MOV.W   R1,#SOF( _CBSetup+10 )
0005A6 8209            2072         MOV.B   [R1],R0L
                       2073 ; cbar.c    630 
                       2074 ; cbar.c    631   return( 0);
0005A8 B900            2076         MOV.W   R0,#00H
                       2077 ; cbar.c    632 }
0005AA D680            2079         RET
                       2081 ; cbar.c    633 
                       2082 ; cbar.c    634 /**************************************************************************/
                       2083 ; cbar.c    635 /* CBUpdate                                                          CBAR.C  */
                       2084 ; cbar.c    636 /*                                                                        */
                       2085 ; cbar.c    637 /* Author:   Kim Engedahl, DEV, 000413                                    */
                       2086 ; cbar.c    638 /* Revised:   000603, KEn, DEV                                             */
                       2087 ; cbar.c    639 /*                                                                        */
                       2088 ; cbar.c    640 /* Function:                                                               */
                       2089 ; cbar.c    641 /* Remarks:                                                                */
                       2090 ; cbar.c    642 /* Returns:                                                                */
                       2091 ; cbar.c    643 /* Updates:                                                                */
                       2092 ; cbar.c    644 /**************************************************************************/
                       2093 ; cbar.c    645 int CBUpdate( void)
                       2094 ; cbar.c    646 {
                       2095         ALIGN   1
                       2097         PUBLIC  _CBUpdate
0005AC                 2098 _CBUpdate:
                       2102 ; cbar.c    647   SetCBSystem( CBSetup.System);      // Also updates pattern
0005AC 964842rr        2104         MOV.B   ES,#SEG( _CBSetup )
0005B0 9908rrrr        2105         MOV.W   R0,#SOF( _CBSetup )
0005B4 8200            2106         MOV.B   R0L,[R0]
0005B6 C50300          2107         CALL    _SetCBSystem
                       2108 ; cbar.c    648 
                       2109 ; cbar.c    649   SetCBDelay( CBSetup.Delay);
0005B9 964842rr        2111         MOV.B   ES,#SEG( _CBSetup+4 )
0005BD 9918rrrr        2112         MOV.W   R1,#SOF( _CBSetup+4 )
0005C1 8B01            2113         MOV.W   R0,[R1+]
0005C3 8A11            2114         MOV.W   R1,[R1]
0005C5 C5036E          2115         CALL    _SetCBDelay
                       2116 ; cbar.c    650   SetCBScHPhase( CBSetup.ScHPhase);
0005C8 964842rr        2118         MOV.B   ES,#SEG( _CBSetup+8 )
0005CC 9908rrrr        2119         MOV.W   R0,#SOF( _CBSetup+8 )
0005D0 8A00            2120         MOV.W   R0,[R0]
0005D2 C50424          2121         CALL    _SetCBScHPhase
                       2122 ; cbar.c    651   SetCBEmbAudioSignal( CBSetup.EmbAudioSignal);
0005D5 964842rr        2124         MOV.B   ES,#SEG( _CBSetup+10 )
0005D9 9908rrrr        2125         MOV.W   R0,#SOF( _CBSetup+10 )
0005DD 8200            2126         MOV.B   R0L,[R0]
0005DF C5047A          2127         CALL    _SetCBEmbAudioSignal
                       2128 ; cbar.c    652 
                       2129 ; cbar.c    653   return( OK);
0005E2 9908FFFF        2131         MOV.W   R0,#0FFFFH
                       2132 ; cbar.c    654 }
0005E6 D680            2134         RET
                       2136 ; cbar.c    655 
                       2137 ; cbar.c    656 /**************************************************************************/
                       2138 ; cbar.c    657 /* SetCBPattern                                                     CBAR.C  */
                       2139 ; cbar.c    658 /*                                                                        */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  25

ADDR   CODE            LINE SOURCELINE
                       2140 ; cbar.c    659 /* Author:   Kim Engedahl, DEV, 000331                                    */
                       2141 ; cbar.c    660 /* Revised:   000618, KEn, DEV                                             */
                       2142 ; cbar.c    661 /*                                                                        */
                       2143 ; cbar.c    662 /* Function:                                                               */
                       2144 ; cbar.c    663 /* Remarks:                                                                 */
                       2145 ; cbar.c    664 /* Returns:                                                                */
                       2146 ; cbar.c    665 /* Updates:                                                                */
                       2147 ; cbar.c    666 /**************************************************************************/
                       2148 ; cbar.c    667 int SetCBPattern( UI pattern)
                       2149 ; cbar.c    668 {
                       2150         ALIGN   1
                       2152         PUBLIC  _SetCBPattern
0005E8                 2153 _SetCBPattern:
000000                 2157 CBAR_IR SEGMENT HCODE INSEGMENT ROMDATA
000000                 2158         RSEG    CBAR_IR
                       2159         ALIGN   1
000000                 2160 __swtable138:
000000 rrrrrrrrrrrrrr  2161         DW      SOF _57,SEG _57
       rrrrrrrrrrrrrr       
       rrrr                 
000004 rrrrrrrrrrrrrr  2162         DW      SOF _58,SEG _58
       rrrrrrrrrrrrrr       
       rrrr                 
000008 rrrrrrrrrrrrrr  2163         DW      SOF _59,SEG _59
       rrrrrrrrrrrrrr       
       rrrr                 
00000C rrrrrrrrrrrrrr  2164         DW      SOF _60,SEG _60
       rrrrrrrrrrrrrr       
       rrrr                 
000010 rrrrrrrrrrrrrr  2165         DW      SOF _62,SEG _62
       rrrrrrrrrrrrrr       
       rrrr                 
000014 rrrrrrrrrrrrrr  2166         DW      SOF _64,SEG _64
       rrrrrrrrrrrrrr       
       rrrr                 
000018 rrrrrrrrrrrrrr  2167         DW      SOF _65,SEG _65
       rrrrrrrrrrrrrr       
       rrrr                 
00001C rrrrrrrrrrrrrr  2168         DW      SOF _66,SEG _66
       rrrrrrrrrrrrrr       
       rrrr                 
000020 rrrrrrrrrrrrrr  2169         DW      SOF _68,SEG _68
       rrrrrrrrrrrrrr       
       rrrr                 
000024 rrrrrrrrrrrrrr  2170         DW      SOF _70,SEG _70
       rrrrrrrrrrrrrr       
       rrrr                 
000028 rrrrrrrrrrrrrr  2171         DW      SOF _71,SEG _71
       rrrrrrrrrrrrrr       
       rrrr                 
00002C rrrrrrrrrrrrrr  2172         DW      SOF _73,SEG _73
       rrrrrrrrrrrrrr       
       rrrr                 
000030 rrrrrrrrrrrrrr  2173         DW      SOF _75,SEG _75
       rrrrrrrrrrrrrr       
       rrrr                 
000034 rrrrrrrrrrrrrr  2174         DW      SOF _77,SEG _77
       rrrrrrrrrrrrrr       
       rrrr                 
000038 rrrrrrrrrrrrrr  2175         DW      SOF _79,SEG _79
       rrrrrrrrrrrrrr       
       rrrr                 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  26

ADDR   CODE            LINE SOURCELINE
00003C rrrrrrrrrrrrrr  2176         DW      SOF _81,SEG _81
       rrrrrrrrrrrrrr       
       rrrr                 
000040 rrrrrrrrrrrrrr  2177         DW      SOF _83,SEG _83
       rrrrrrrrrrrrrr       
       rrrr                 
000044 rrrrrrrrrrrrrr  2178         DW      SOF _85,SEG _85
       rrrrrrrrrrrrrr       
       rrrr                 
000048 rrrrrrrrrrrrrr  2179         DW      SOF _87,SEG _87
       rrrrrrrrrrrrrr       
       rrrr                 
00004C rrrrrrrrrrrrrr  2180         DW      SOF _89,SEG _89
       rrrrrrrrrrrrrr       
       rrrr                 
000050 rrrrrrrrrrrrrr  2181         DW      SOF _91,SEG _91
       rrrrrrrrrrrrrr       
       rrrr                 
000054 rrrrrrrrrrrrrr  2182         DW      SOF _93,SEG _93
       rrrrrrrrrrrrrr       
       rrrr                 
000058 rrrrrrrrrrrrrr  2183         DW      SOF _95,SEG _95
       rrrrrrrrrrrrrr       
       rrrr                 
0005E8                 2184         RSEG    CBAR_PR
0005E8 0F10            2185         PUSH.W  R4
0005EA A97E            2187         ADDS.W  R7,#0EH
                       2193 ; cbar.c    669   int system = CBSetup.System;
0005EC 8A0F            2195         MOV.W   [R7],R0
0005EE 964842rr        2196         MOV.B   ES,#SEG( _CBSetup )
0005F2 9908rrrr        2197         MOV.W   R0,#SOF( _CBSetup )
0005F6 8200            2198         MOV.B   R0L,[R0]
0005F8 8180            2199         MOV.B   R4L,R0L
0005FA B190            2200         MOVS.B  R4H,#00H
                       2202 ; cbar.c    670 
                       2203 ; cbar.c    671   if ( ValidateCBPattern( system , &pattern) == FAIL)
0005FC 8904            2205         MOV.W   R0,R4
0005FE 9168rr          2206         MOV.B   R3L,#SEG( __lc_bs )
000601 7177            2207         XOR.B   R3H,R3H
000603 8927            2208         MOV.W   R2,R7
000605 C504A9          2209         CALL    _ValidateCBPattern
000608 6900            2210         OR.W    R0,R0
00060A F203            2211         BNE     _56
                       2212 ; cbar.c    672     return( FAIL);
00060C B900            2214         MOV.W   R0,#00H
                       2215         BR      _137
00060E D502D1         +2215         JMP.L   _137
00060E D502D100       +2215         JMP.L   _137
000612                 2216 _56:
                       2218 ; cbar.c    673 
                       2219 ; cbar.c    674   Settings.ActivePreset = 0;
000612 964842rr        2221         MOV.B   ES,#SEG( _Settings )
000616 9908rrrr        2222         MOV.W   R0,#SOF( _Settings )
00061A BA00            2223         MOV.W   [R0],#00H
                       2224 ; cbar.c    675 
                       2225 ; cbar.c    676   Settings.CBSetup.Pattern = CBSetup.Pattern = pattern;
00061C 8A07            2227         MOV.W   R0,[R7]
00061E 964842rr        2229         MOV.B   ES,#SEG( _CBSetup+2 )
000622 9918rrrr        2230         MOV.W   R1,#SOF( _CBSetup+2 )
000626 8A09            2231         MOV.W   [R1],R0
000628 964842rr        2232         MOV.B   ES,#SEG( _Settings+34 )
00062C 9918rrrr        2233         MOV.W   R1,#SOF( _Settings+34 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  27

ADDR   CODE            LINE SOURCELINE
000630 8A09            2234         MOV.W   [R1],R0
                       2235 ; cbar.c    677   NV_Store( &Settings, SettingsPtr, sizeof( Settings));
000632 9918rrrr        2237         MOV.W   R1,#SEG( _Settings )
000636 9908rrrr        2238         MOV.W   R0,#SOF( _Settings )
00063A 964842rr        2240         MOV.B   ES,#SEG( _SettingsPtr )
00063E 9928rrrr        2241         MOV.W   R2,#SOF( _SettingsPtr )
000642 8A22            2242         MOV.W   R2,[R2]
000644 9938004A        2243         MOV.W   R3,#04AH
                       2244         CALL    _NV_Store
000648 C4rrrrrr       +2244 ;       FCALL   _NV_Store
                       2245 ; cbar.c    678 
                       2246 ; cbar.c    679   Blanking = TRUE;
00064C 964842rr        2248         MOV.B   ES,#SEG( _Blanking )
000650 9908rrrr        2249         MOV.W   R0,#SOF( _Blanking )
000654 9208FF          2250         MOV.B   [R0],#0FFH
                       2251 ; cbar.c    680 
                       2252 ; cbar.c    681   Status &= ~S5S4S3S2;                         // Blank line immediately
000657 9E1520FFC3      2254         AND.W   _Status,#0FFC3H
                       2255 ; cbar.c    682   //PLD_StatusPort = Status;
                       2256 ; cbar.c    683   Update_StatusPort(Status);
00065C 8E0120          2258         MOV.W   R0,_Status
00065F C504AC          2259         CALL    _Update_StatusPort
                       2261 ; cbar.c    684 
                       2262 ; cbar.c    685   switch ( pattern)
000662 8A17            2264         MOV.W   R1,[R7]
000664 99140016        2265         CMP.W   R1,#016H
                       2266         BG      _136
000668 F902           +2266 ;       BL      _LG_64
00066A D5029B         +2266 ;       JMP.L   _136
00066A D5029B00       +2266 ;       JMP.L   _136
00066E                +2266 _LG_64:
00066E D912            2267         ASL.W   R1,#02H
000670 964843rr        2268         MOV.B   CS,#SEG( __swtable138 )
000674 9910rrrr        2269         ADD.W   R1,#SOF( __swtable138 )
000678 8801            2270         MOVC.W  R0,[R1+]
00067A 0F01            2271         PUSH.W  R0
00067C 8801            2272         MOVC.W  R0,[R1+]
00067E 0F01            2273         PUSH.W  R0
000680 D680            2274         RET
                       2277 ; cbar.c    686   {
                       2278 ; cbar.c    687     case SMPTECBar:
000682                 2280 _57:
                       2281 ; cbar.c    688       SRAMVideoLoad( dSMPTECBar, SRAMBank1);
000682 910802          2283         MOV.B   R0L,#02H
000685 911810          2284         MOV.B   R0H,#010H
000688 C5FCE5          2285         CALL    _SRAMVideoLoad
                       2287 ; cbar.c    689       SRAMVideoLoad( dBlueBars, SRAMBank2);
00068B 910803          2289         MOV.B   R0L,#03H
00068E 911814          2290         MOV.B   R0H,#014H
000691 C5FCE0          2291         CALL    _SRAMVideoLoad
                       2292 ; cbar.c    690       SRAMVideoLoad( dIWhiteQ, SRAMBank3);
000694 910804          2294         MOV.B   R0L,#04H
000697 911818          2295         MOV.B   R0H,#018H
00069A C5FCDC          2296         CALL    _SRAMVideoLoad
                       2297 ; cbar.c    691 
                       2298 ; cbar.c    692       newTablePtr = &SMPTECBarTable[0];
00069D 964842rr        2300         MOV.B   ES,#SEG( _newTablePtr )
0006A1 9908rrrr        2301         MOV.W   R0,#SOF( _newTablePtr )
0006A5 9B08094E        2302         MOV.W   [R0+],#SOF( _SMPTECBarTable )
0006A9 BA00            2303         MOV.W   [R0],#SEG( _SMPTECBarTable )
                       2304 ; cbar.c    693       break;
                       2306         BR      _136
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  28

ADDR   CODE            LINE SOURCELINE
0006AB D5027A         +2306         JMP.L   _136
                       2307 ; cbar.c    694 
                       2308 ; cbar.c    695     case EBUCBar:
0006AE                 2310 _58:
                       2311 ; cbar.c    696       SRAMVideoLoad( dEBUCBar_625, SRAMBank1);
0006AE 910801          2313         MOV.B   R0L,#01H
0006B1 911810          2314         MOV.B   R0H,#010H
0006B4 C5FCCF          2315         CALL    _SRAMVideoLoad
                       2316 ; cbar.c    697 
                       2317 ; cbar.c    698       newTablePtr = &PALFullFieldTable[0];
0006B7 964842rr        2319         MOV.B   ES,#SEG( _newTablePtr )
0006BB 9908rrrr        2320         MOV.W   R0,#SOF( _newTablePtr )
0006BF 9B080828        2321         MOV.W   [R0+],#SOF( _PALFullFieldTable )
0006C3 BA00            2322         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2323 ; cbar.c    699       break;
                       2325         BR      _136
0006C5 D5026D         +2325         JMP.L   _136
                       2326 ; cbar.c    700 
                       2327 ; cbar.c    701     case FCCCBar:
0006C8                 2329 _59:
                       2330 ; cbar.c    702       SRAMVideoLoad( dFCC_CBar_525, SRAMBank1);
0006C8 910829          2332         MOV.B   R0L,#029H
0006CB 911810          2333         MOV.B   R0H,#010H
0006CE C5FCC2          2334         CALL    _SRAMVideoLoad
                       2335 ; cbar.c    703 
                       2336 ; cbar.c    704       newTablePtr = &NTSCFullFieldTable[0];
0006D1 964842rr        2338         MOV.B   ES,#SEG( _newTablePtr )
0006D5 9908rrrr        2339         MOV.W   R0,#SOF( _newTablePtr )
0006D9 9B08093C        2340         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
0006DD BA00            2341         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2342 ; cbar.c    705       break;
                       2344         BR      _136
0006DF D50260         +2344         JMP.L   _136
                       2345 ; cbar.c    706 
                       2346 ; cbar.c    707     case EBUCBarITU:
0006E2                 2348 _60:
                       2349 ; cbar.c    708       SRAMVideoLoad( dEBUCBar_8bit_625, SRAMBank1);
0006E2 910800          2351         MOV.B   R0L,#00H
0006E5 911810          2352         MOV.B   R0H,#010H
0006E8 C5FCB5          2353         CALL    _SRAMVideoLoad
                       2354 ; cbar.c    709 
                       2355 ; cbar.c    710       if ( system < NTSC_US)
0006EB 99440002        2357         CMP.W   R4,#02H
0006EF FA09            2358         BGE     _61
                       2359 ; cbar.c    711         newTablePtr = &PALFullFieldTable[0];
0006F1 964842rr        2361         MOV.B   ES,#SEG( _newTablePtr )
0006F5 9908rrrr        2362         MOV.W   R0,#SOF( _newTablePtr )
0006F9 9B080828        2363         MOV.W   [R0+],#SOF( _PALFullFieldTable )
0006FD BA00            2364         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2365         BR      _136
0006FF D50250         +2365         JMP.L   _136
0006FF D50250         +2365         JMP.L   _136
000702                 2366 _61:
                       2367 ; cbar.c    712       else
                       2368 ; cbar.c    713         newTablePtr = &NTSCFullFieldTable[0];
000702 964842rr        2370         MOV.B   ES,#SEG( _newTablePtr )
000706 9908rrrr        2371         MOV.W   R0,#SOF( _newTablePtr )
00070A 9B08093C        2372         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
00070E BA00            2373         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2374 ; cbar.c    714       break;
                       2376         BR      _136
000710 D50248         +2376         JMP.L   _136
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  29

ADDR   CODE            LINE SOURCELINE
                       2377 ; cbar.c    715 
                       2378 ; cbar.c    716     case CBar100:
000714                 2380 _62:
                       2381 ; cbar.c    717       if ( system < NTSC_US)
000714 99440002        2383         CMP.W   R4,#02H
000718 FA0D            2384         BGE     _63
                       2385 ; cbar.c    718       {
                       2386 ; cbar.c    719         SRAMVideoLoad( dCBar100_625, SRAMBank1);
00071A 910805          2388         MOV.B   R0L,#05H
00071D 911810          2389         MOV.B   R0H,#010H
000720 C5FC99          2390         CALL    _SRAMVideoLoad
                       2391 ; cbar.c    720 
                       2392 ; cbar.c    721         newTablePtr = &PALFullFieldTable[0];
000723 964842rr        2394         MOV.B   ES,#SEG( _newTablePtr )
000727 9908rrrr        2395         MOV.W   R0,#SOF( _newTablePtr )
00072B 9B080828        2396         MOV.W   [R0+],#SOF( _PALFullFieldTable )
00072F BA00            2397         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2398 ; cbar.c    722       }
                       2400         BR      _136
000731 D50237         +2400         JMP.L   _136
000731 D50237         +2400         JMP.L   _136
000734                 2401 _63:
                       2402 ; cbar.c    723       else
                       2403 ; cbar.c    724       {
                       2404 ; cbar.c    725         SRAMVideoLoad( dFCC_CBar100_525, SRAMBank1);
000734 91082A          2406         MOV.B   R0L,#02AH
000737 911810          2407         MOV.B   R0H,#010H
00073A C5FC8C          2408         CALL    _SRAMVideoLoad
                       2409 ; cbar.c    726 
                       2410 ; cbar.c    727         newTablePtr = &NTSCFullFieldTable[0];
00073D 964842rr        2412         MOV.B   ES,#SEG( _newTablePtr )
000741 9908rrrr        2413         MOV.W   R0,#SOF( _newTablePtr )
000745 9B08093C        2414         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000749 BA00            2415         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2416 ; cbar.c    728       }
                       2417 ; cbar.c    729       break;
                       2419         BR      _136
00074B D5022A         +2419         JMP.L   _136
                       2420 ; cbar.c    730 
                       2421 ; cbar.c    731     case CBarGrey75:
00074E                 2423 _64:
                       2424 ; cbar.c    732       SRAMVideoLoad( dCBar75_STD_625, SRAMBank1);
00074E 910828          2426         MOV.B   R0L,#028H
000751 911810          2427         MOV.B   R0H,#010H
000754 C5FC7F          2428         CALL    _SRAMVideoLoad
                       2429 ; cbar.c    733       SRAMVideoLoad( dGrey75_625, SRAMBank2);
000757 910806          2431         MOV.B   R0L,#06H
00075A 911814          2432         MOV.B   R0H,#014H
00075D C5FC7A          2433         CALL    _SRAMVideoLoad
                       2434 ; cbar.c    734   
                       2435 ; cbar.c    735       newTablePtr = &PALSplitFieldTable[0];
000760 964842rr        2437         MOV.B   ES,#SEG( _newTablePtr )
000764 9908rrrr        2438         MOV.W   R0,#SOF( _newTablePtr )
000768 9B08083A        2439         MOV.W   [R0+],#SOF( _PALSplitFieldTable )
00076C BA00            2440         MOV.W   [R0],#SEG( _PALSplitFieldTable )
                       2441 ; cbar.c    736       break;
                       2443         BR      _136
00076E D50219         +2443         JMP.L   _136
                       2444 ; cbar.c    737 
                       2445 ; cbar.c    738     case CBarRed75:
000772                 2447 _65:
                       2448 ; cbar.c    739       SRAMVideoLoad( dEBUCBar_625, SRAMBank1);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  30

ADDR   CODE            LINE SOURCELINE
000772 910801          2450         MOV.B   R0L,#01H
000775 911810          2451         MOV.B   R0H,#010H
000778 C5FC6D          2452         CALL    _SRAMVideoLoad
                       2453 ; cbar.c    740       SRAMVideoLoad( dRed75_625, SRAMBank2);
00077B 910807          2455         MOV.B   R0L,#07H
00077E 911814          2456         MOV.B   R0H,#014H
000781 C5FC68          2457         CALL    _SRAMVideoLoad
                       2458 ; cbar.c    741 
                       2459 ; cbar.c    742       newTablePtr = &PALSplitFieldTable[0];
000784 964842rr        2461         MOV.B   ES,#SEG( _newTablePtr )
000788 9908rrrr        2462         MOV.W   R0,#SOF( _newTablePtr )
00078C 9B08083A        2463         MOV.W   [R0+],#SOF( _PALSplitFieldTable )
000790 BA00            2464         MOV.W   [R0],#SEG( _PALSplitFieldTable )
                       2465 ; cbar.c    743       break;
                       2467         BR      _136
000792 D50207         +2467         JMP.L   _136
                       2468 ; cbar.c    744       
                       2469 ; cbar.c    745     case Red75:
000796                 2471 _66:
                       2472 ; cbar.c    746       if ( system < NTSC_US)
000796 99440002        2474         CMP.W   R4,#02H
00079A FA0D            2475         BGE     _67
                       2476 ; cbar.c    747       {
                       2477 ; cbar.c    748         SRAMVideoLoad( dRed75_625, SRAMBank1);
00079C 910807          2479         MOV.B   R0L,#07H
00079F 911810          2480         MOV.B   R0H,#010H
0007A2 C5FC58          2481         CALL    _SRAMVideoLoad
                       2482 ; cbar.c    749 
                       2483 ; cbar.c    750         newTablePtr = &PALFullFieldTable[0];
0007A5 964842rr        2485         MOV.B   ES,#SEG( _newTablePtr )
0007A9 9908rrrr        2486         MOV.W   R0,#SOF( _newTablePtr )
0007AD 9B080828        2487         MOV.W   [R0+],#SOF( _PALFullFieldTable )
0007B1 BA00            2488         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2489 ; cbar.c    751       }
                       2491         BR      _136
0007B3 D501F6         +2491         JMP.L   _136
0007B3 D501F6         +2491         JMP.L   _136
0007B6                 2492 _67:
                       2493 ; cbar.c    752       else
                       2494 ; cbar.c    753       {
                       2495 ; cbar.c    754         SRAMVideoLoad( dRed75_525, SRAMBank1);
0007B6 910808          2497         MOV.B   R0L,#08H
0007B9 911810          2498         MOV.B   R0H,#010H
0007BC C5FC4B          2499         CALL    _SRAMVideoLoad
                       2500 ; cbar.c    755 
                       2501 ; cbar.c    756         newTablePtr = &NTSCFullFieldTable[0];
0007BF 964842rr        2503         MOV.B   ES,#SEG( _newTablePtr )
0007C3 9908rrrr        2504         MOV.W   R0,#SOF( _newTablePtr )
0007C7 9B08093C        2505         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
0007CB BA00            2506         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2507 ; cbar.c    757       }
                       2508 ; cbar.c    758       break;
                       2510         BR      _136
0007CD D501E9         +2510         JMP.L   _136
                       2511 ; cbar.c    759 
                       2512 ; cbar.c    760     case Multiburst:
0007D0                 2514 _68:
                       2515 ; cbar.c    761       if ( system < NTSC_US)
0007D0 99440002        2517         CMP.W   R4,#02H
0007D4 FA0D            2518         BGE     _69
                       2519 ; cbar.c    762       {
                       2520 ; cbar.c    763         SRAMVideoLoad( dChroma_Multiburst, SRAMBank1);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  31

ADDR   CODE            LINE SOURCELINE
0007D6 910809          2522         MOV.B   R0L,#09H
0007D9 911810          2523         MOV.B   R0H,#010H
0007DC C5FC3B          2524         CALL    _SRAMVideoLoad
                       2525 ; cbar.c    764 
                       2526 ; cbar.c    765         newTablePtr = &PALFullFieldTable[0];
0007DF 964842rr        2528         MOV.B   ES,#SEG( _newTablePtr )
0007E3 9908rrrr        2529         MOV.W   R0,#SOF( _newTablePtr )
0007E7 9B080828        2530         MOV.W   [R0+],#SOF( _PALFullFieldTable )
0007EB BA00            2531         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2532 ; cbar.c    766       }
                       2534         BR      _136
0007ED D501D9         +2534         JMP.L   _136
0007ED D501D9         +2534         JMP.L   _136
0007F0                 2535 _69:
                       2536 ; cbar.c    767       else
                       2537 ; cbar.c    768       {
                       2538 ; cbar.c    769         SRAMVideoLoad( dFCC_Multiburst_525, SRAMBank1);
0007F0 91080A          2540         MOV.B   R0L,#0AH
0007F3 911810          2541         MOV.B   R0H,#010H
0007F6 C5FC2E          2542         CALL    _SRAMVideoLoad
                       2543 ; cbar.c    770 
                       2544 ; cbar.c    771         newTablePtr = &NTSCFullFieldTable[0];
0007F9 964842rr        2546         MOV.B   ES,#SEG( _newTablePtr )
0007FD 9908rrrr        2547         MOV.W   R0,#SOF( _newTablePtr )
000801 9B08093C        2548         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000805 BA00            2549         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2550 ; cbar.c    772       }
                       2551 ; cbar.c    773       break;
                       2553         BR      _136
000807 D501CC         +2553         JMP.L   _136
                       2554 ; cbar.c    774 
                       2555 ; cbar.c    775     case CCIR18:
00080A                 2557 _70:
                       2558 ; cbar.c    776       SRAMVideoLoad( dCCIR18_625, SRAMBank1);
00080A 91082F          2560         MOV.B   R0L,#02FH
00080D 911810          2561         MOV.B   R0H,#010H
000810 C5FC21          2562         CALL    _SRAMVideoLoad
                       2563 ; cbar.c    777 
                       2564 ; cbar.c    778       newTablePtr = &PALFullFieldTable[0];
000813 964842rr        2566         MOV.B   ES,#SEG( _newTablePtr )
000817 9908rrrr        2567         MOV.W   R0,#SOF( _newTablePtr )
00081B 9B080828        2568         MOV.W   [R0+],#SOF( _PALFullFieldTable )
00081F BA00            2569         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2570 ; cbar.c    779       break;
                       2572         BR      _136
000821 D501BF         +2572         JMP.L   _136
                       2573 ; cbar.c    780 
                       2574 ; cbar.c    781     case Window10:
000824                 2576 _71:
                       2577 ; cbar.c    782       SRAMVideoLoad( dWindow50Marker, SRAMBank1);
000824 91081B          2579         MOV.B   R0L,#01BH
000827 911810          2580         MOV.B   R0H,#010H
00082A C5FC14          2581         CALL    _SRAMVideoLoad
                       2582 ; cbar.c    783       SRAMVideoLoad( dMarkerLine, SRAMBank2);
00082D 911814          2584         MOV.B   R0H,#014H
000830 91081C          2585         MOV.B   R0L,#01CH
000833 C5FC0F          2586         CALL    _SRAMVideoLoad
                       2587 ; cbar.c    784       SRAMVideoLoad( dMarker10, SRAMBank3);
000836 91082C          2589         MOV.B   R0L,#02CH
000839 911818          2590         MOV.B   R0H,#018H
00083C C5FC0B          2591         CALL    _SRAMVideoLoad
                       2592 ; cbar.c    785       SRAMVideoLoad( dWindow10, SRAMBank4);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  32

ADDR   CODE            LINE SOURCELINE
00083F 91082B          2594         MOV.B   R0L,#02BH
000842 91181C          2595         MOV.B   R0H,#01CH
000845 C5FC06          2596         CALL    _SRAMVideoLoad
                       2597 ; cbar.c    786 
                       2598 ; cbar.c    787       if ( system < NTSC_US)
000848 99440002        2600         CMP.W   R4,#02H
00084C FA09            2601         BGE     _72
                       2602 ; cbar.c    788         newTablePtr = &PALWindowTable[0];
00084E 964842rr        2604         MOV.B   ES,#SEG( _newTablePtr )
000852 9908rrrr        2605         MOV.W   R0,#SOF( _newTablePtr )
000856 9B08084C        2606         MOV.W   [R0+],#SOF( _PALWindowTable )
00085A BA00            2607         MOV.W   [R0],#SEG( _PALWindowTable )
                       2608         BR      _136
00085C D501A2         +2608         JMP.L   _136
00085C D501A200       +2608         JMP.L   _136
000860                 2609 _72:
                       2610 ; cbar.c    789       else
                       2611 ; cbar.c    790         newTablePtr = &NTSCWindowTable[0];
000860 964842rr        2613         MOV.B   ES,#SEG( _newTablePtr )
000864 9908rrrr        2614         MOV.W   R0,#SOF( _newTablePtr )
000868 9B080964        2615         MOV.W   [R0+],#SOF( _NTSCWindowTable )
00086C BA00            2616         MOV.W   [R0],#SEG( _NTSCWindowTable )
                       2617 ; cbar.c    791       break;
                       2619         BR      _136
00086E D50199         +2619         JMP.L   _136
                       2620 ; cbar.c    792 
                       2621 ; cbar.c    793     case Window15:
000872                 2623 _73:
                       2624 ; cbar.c    794       SRAMVideoLoad( dWindow50Marker, SRAMBank1);
000872 91081B          2626         MOV.B   R0L,#01BH
000875 911810          2627         MOV.B   R0H,#010H
000878 C5FBED          2628         CALL    _SRAMVideoLoad
                       2629 ; cbar.c    795       SRAMVideoLoad( dMarkerLine, SRAMBank2);
00087B 911814          2631         MOV.B   R0H,#014H
00087E 91081C          2632         MOV.B   R0L,#01CH
000881 C5FBE8          2633         CALL    _SRAMVideoLoad
                       2634 ; cbar.c    796       SRAMVideoLoad( dMarker15, SRAMBank3);
000884 91081E          2636         MOV.B   R0L,#01EH
000887 911818          2637         MOV.B   R0H,#018H
00088A C5FBE4          2638         CALL    _SRAMVideoLoad
                       2639 ; cbar.c    797       SRAMVideoLoad( dWindow15, SRAMBank4);
00088D 91081D          2641         MOV.B   R0L,#01DH
000890 91181C          2642         MOV.B   R0H,#01CH
000893 C5FBDF          2643         CALL    _SRAMVideoLoad
                       2644 ; cbar.c    798 
                       2645 ; cbar.c    799       if ( system < NTSC_US)                        
000896 99440002        2647         CMP.W   R4,#02H
00089A FA09            2648         BGE     _74
                       2649 ; cbar.c    800         newTablePtr = &PALWindowTable[0];
00089C 964842rr        2651         MOV.B   ES,#SEG( _newTablePtr )
0008A0 9908rrrr        2652         MOV.W   R0,#SOF( _newTablePtr )
0008A4 9B08084C        2653         MOV.W   [R0+],#SOF( _PALWindowTable )
0008A8 BA00            2654         MOV.W   [R0],#SEG( _PALWindowTable )
                       2655         BR      _136
0008AA D5017B         +2655         JMP.L   _136
0008AA D5017B00       +2655         JMP.L   _136
0008AE                 2656 _74:
                       2657 ; cbar.c    801       else
                       2658 ; cbar.c    802         newTablePtr = &NTSCWindowTable[0];
0008AE 964842rr        2660         MOV.B   ES,#SEG( _newTablePtr )
0008B2 9908rrrr        2661         MOV.W   R0,#SOF( _newTablePtr )
0008B6 9B080964        2662         MOV.W   [R0+],#SOF( _NTSCWindowTable )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  33

ADDR   CODE            LINE SOURCELINE
0008BA BA00            2663         MOV.W   [R0],#SEG( _NTSCWindowTable )
                       2664 ; cbar.c    803       break;
                       2666         BR      _136
0008BC D50172         +2666         JMP.L   _136
                       2667 ; cbar.c    804 
                       2668 ; cbar.c    805     case Window20:
0008C0                 2670 _75:
                       2671 ; cbar.c    806       SRAMVideoLoad( dWindow50Marker, SRAMBank1);
0008C0 91081B          2673         MOV.B   R0L,#01BH
0008C3 911810          2674         MOV.B   R0H,#010H
0008C6 C5FBC6          2675         CALL    _SRAMVideoLoad
                       2676 ; cbar.c    807       SRAMVideoLoad( dMarkerLine, SRAMBank2);
0008C9 911814          2678         MOV.B   R0H,#014H
0008CC 91081C          2679         MOV.B   R0L,#01CH
0008CF C5FBC1          2680         CALL    _SRAMVideoLoad
                       2681 ; cbar.c    808       SRAMVideoLoad( dMarker20, SRAMBank3);
0008D2 910820          2683         MOV.B   R0L,#020H
0008D5 911818          2684         MOV.B   R0H,#018H
0008D8 C5FBBD          2685         CALL    _SRAMVideoLoad
                       2686 ; cbar.c    809       SRAMVideoLoad( dWindow20, SRAMBank4);
0008DB 91081F          2688         MOV.B   R0L,#01FH
0008DE 91181C          2689         MOV.B   R0H,#01CH
0008E1 C5FBB8          2690         CALL    _SRAMVideoLoad
                       2691 ; cbar.c    810 
                       2692 ; cbar.c    811       if ( system < NTSC_US)
0008E4 99440002        2694         CMP.W   R4,#02H
0008E8 FA09            2695         BGE     _76
                       2696 ; cbar.c    812         newTablePtr = &PALWindowTable[0];
0008EA 964842rr        2698         MOV.B   ES,#SEG( _newTablePtr )
0008EE 9908rrrr        2699         MOV.W   R0,#SOF( _newTablePtr )
0008F2 9B08084C        2700         MOV.W   [R0+],#SOF( _PALWindowTable )
0008F6 BA00            2701         MOV.W   [R0],#SEG( _PALWindowTable )
                       2702         BR      _136
0008F8 D50154         +2702         JMP.L   _136
0008F8 D5015400       +2702         JMP.L   _136
0008FC                 2703 _76:
                       2704 ; cbar.c    813       else
                       2705 ; cbar.c    814         newTablePtr = &NTSCWindowTable[0];
0008FC 964842rr        2707         MOV.B   ES,#SEG( _newTablePtr )
000900 9908rrrr        2708         MOV.W   R0,#SOF( _newTablePtr )
000904 9B080964        2709         MOV.W   [R0+],#SOF( _NTSCWindowTable )
000908 BA00            2710         MOV.W   [R0],#SEG( _NTSCWindowTable )
                       2711 ; cbar.c    815       break;
                       2713         BR      _136
00090A D5014B         +2713         JMP.L   _136
                       2714 ; cbar.c    816 
                       2715 ; cbar.c    817     case Window100:
00090E                 2717 _77:
                       2718 ; cbar.c    818       SRAMVideoLoad( dWindow50Marker, SRAMBank1);
00090E 91081B          2720         MOV.B   R0L,#01BH
000911 911810          2721         MOV.B   R0H,#010H
000914 C5FB9F          2722         CALL    _SRAMVideoLoad
                       2723 ; cbar.c    819       SRAMVideoLoad( dMarkerLine, SRAMBank2);
000917 911814          2725         MOV.B   R0H,#014H
00091A 91081C          2726         MOV.B   R0L,#01CH
00091D C5FB9A          2727         CALL    _SRAMVideoLoad
                       2728 ; cbar.c    820       SRAMVideoLoad( dMarker100, SRAMBank3);
000920 910822          2730         MOV.B   R0L,#022H
000923 911818          2731         MOV.B   R0H,#018H
000926 C5FB96          2732         CALL    _SRAMVideoLoad
                       2733 ; cbar.c    821       SRAMVideoLoad( dWindow100, SRAMBank4);
000929 910821          2735         MOV.B   R0L,#021H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  34

ADDR   CODE            LINE SOURCELINE
00092C 91181C          2736         MOV.B   R0H,#01CH
00092F C5FB91          2737         CALL    _SRAMVideoLoad
                       2738 ; cbar.c    822 
                       2739 ; cbar.c    823       if ( system < NTSC_US)
000932 99440002        2741         CMP.W   R4,#02H
000936 FA09            2742         BGE     _78
                       2743 ; cbar.c    824         newTablePtr = &PALWindowTable[0];
000938 964842rr        2745         MOV.B   ES,#SEG( _newTablePtr )
00093C 9908rrrr        2746         MOV.W   R0,#SOF( _newTablePtr )
000940 9B08084C        2747         MOV.W   [R0+],#SOF( _PALWindowTable )
000944 BA00            2748         MOV.W   [R0],#SEG( _PALWindowTable )
                       2749         BR      _136
000946 D5012D         +2749         JMP.L   _136
000946 D5012D00       +2749         JMP.L   _136
00094A                 2750 _78:
                       2751 ; cbar.c    825       else
                       2752 ; cbar.c    826         newTablePtr = &NTSCWindowTable[0];
00094A 964842rr        2754         MOV.B   ES,#SEG( _newTablePtr )
00094E 9908rrrr        2755         MOV.W   R0,#SOF( _newTablePtr )
000952 9B080964        2756         MOV.W   [R0+],#SOF( _NTSCWindowTable )
000956 BA00            2757         MOV.W   [R0],#SEG( _NTSCWindowTable )
                       2758 ; cbar.c    827       break;
                       2760         BR      _136
000958 D50124         +2760         JMP.L   _136
                       2761 ; cbar.c    828 
                       2762 ; cbar.c    829     case BlWh15kHz:
00095C                 2764 _79:
                       2765 ; cbar.c    830       if ( system < NTSC_US)                        
00095C 99440002        2767         CMP.W   R4,#02H
000960 FA0D            2768         BGE     _80
                       2769 ; cbar.c    831       {
                       2770 ; cbar.c    832         SRAMVideoLoad( dkHz15BlWh_625, SRAMBank1);
000962 91082D          2772         MOV.B   R0L,#02DH
000965 911810          2773         MOV.B   R0H,#010H
000968 C5FB75          2774         CALL    _SRAMVideoLoad
                       2775 ; cbar.c    833 
                       2776 ; cbar.c    834         newTablePtr = &PALFullFieldTable[0];
00096B 964842rr        2778         MOV.B   ES,#SEG( _newTablePtr )
00096F 9908rrrr        2779         MOV.W   R0,#SOF( _newTablePtr )
000973 9B080828        2780         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000977 BA00            2781         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2782 ; cbar.c    835       }
                       2784         BR      _136
000979 D50113         +2784         JMP.L   _136
000979 D50113         +2784         JMP.L   _136
00097C                 2785 _80:
                       2786 ; cbar.c    836       else
                       2787 ; cbar.c    837       {
                       2788 ; cbar.c    838         SRAMVideoLoad( dkHz15BlWh_525, SRAMBank1);
00097C 91082E          2790         MOV.B   R0L,#02EH
00097F 911810          2791         MOV.B   R0H,#010H
000982 C5FB68          2792         CALL    _SRAMVideoLoad
                       2793 ; cbar.c    839 
                       2794 ; cbar.c    840         newTablePtr = &NTSCFullFieldTable[0];
000985 964842rr        2796         MOV.B   ES,#SEG( _newTablePtr )
000989 9908rrrr        2797         MOV.W   R0,#SOF( _newTablePtr )
00098D 9B08093C        2798         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000991 BA00            2799         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2800 ; cbar.c    841       }
                       2801 ; cbar.c    842       break;
                       2803         BR      _136
000993 D50106         +2803         JMP.L   _136
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  35

ADDR   CODE            LINE SOURCELINE
                       2804 ; cbar.c    843 
                       2805 ; cbar.c    844     case White100:
000996                 2807 _81:
                       2808 ; cbar.c    845       if ( system < NTSC_US)
000996 99440002        2810         CMP.W   R4,#02H
00099A FA0D            2811         BGE     _82
                       2812 ; cbar.c    846       {
                       2813 ; cbar.c    847         SRAMVideoLoad( dWhiteLine_625, SRAMBank1);
00099C 91080B          2815         MOV.B   R0L,#0BH
00099F 911810          2816         MOV.B   R0H,#010H
0009A2 C5FB58          2817         CALL    _SRAMVideoLoad
                       2818 ; cbar.c    848 
                       2819 ; cbar.c    849         newTablePtr = &PALFullFieldTable[0];
0009A5 964842rr        2821         MOV.B   ES,#SEG( _newTablePtr )
0009A9 9908rrrr        2822         MOV.W   R0,#SOF( _newTablePtr )
0009AD 9B080828        2823         MOV.W   [R0+],#SOF( _PALFullFieldTable )
0009B1 BA00            2824         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2825 ; cbar.c    850       }
                       2827         BR      _136
0009B3 D500F6         +2827         JMP.L   _136
0009B3 D500F6         +2827         JMP.L   _136
0009B6                 2828 _82:
                       2829 ; cbar.c    851       else
                       2830 ; cbar.c    852       {
                       2831 ; cbar.c    853         SRAMVideoLoad( dWhiteLine_525, SRAMBank1);
0009B6 91080D          2833         MOV.B   R0L,#0DH
0009B9 911810          2834         MOV.B   R0H,#010H
0009BC C5FB4B          2835         CALL    _SRAMVideoLoad
                       2836 ; cbar.c    854 
                       2837 ; cbar.c    855         newTablePtr = &NTSCFullFieldTable[0];
0009BF 964842rr        2839         MOV.B   ES,#SEG( _newTablePtr )
0009C3 9908rrrr        2840         MOV.W   R0,#SOF( _newTablePtr )
0009C7 9B08093C        2841         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
0009CB BA00            2842         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2843 ; cbar.c    856       }
                       2844 ; cbar.c    857       break;
                       2846         BR      _136
0009CD D500E9         +2846         JMP.L   _136
                       2847 ; cbar.c    858 
                       2848 ; cbar.c    859     case Black:
0009D0                 2850 _83:
                       2851 ; cbar.c    860       if ( system < NTSC_US)
0009D0 99440002        2853         CMP.W   R4,#02H
0009D4 FA09            2854         BGE     _84
                       2855 ; cbar.c    861         newTablePtr = &PALBlackTable[0];
0009D6 964842rr        2857         MOV.B   ES,#SEG( _newTablePtr )
0009DA 9908rrrr        2858         MOV.W   R0,#SOF( _newTablePtr )
0009DE 9B080816        2859         MOV.W   [R0+],#SOF( _PALBlackTable )
0009E2 BA00            2860         MOV.W   [R0],#SEG( _PALBlackTable )
                       2861         BR      _136
0009E4 D500DE         +2861         JMP.L   _136
0009E4 D500DE00       +2861         JMP.L   _136
0009E8                 2862 _84:
                       2863 ; cbar.c    862       else
                       2864 ; cbar.c    863         newTablePtr = &NTSCBlackTable[0];
0009E8 964842rr        2866         MOV.B   ES,#SEG( _newTablePtr )
0009EC 9908rrrr        2867         MOV.W   R0,#SOF( _newTablePtr )
0009F0 9B08092A        2868         MOV.W   [R0+],#SOF( _NTSCBlackTable )
0009F4 BA00            2869         MOV.W   [R0],#SEG( _NTSCBlackTable )
                       2870 ; cbar.c    864       break;
                       2872         BR      _136
0009F6 D500D5         +2872         JMP.L   _136
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  36

ADDR   CODE            LINE SOURCELINE
                       2873 ; cbar.c    865 
                       2874 ; cbar.c    866     case CheckField:
0009FA                 2876 _85:
                       2877 ; cbar.c    867       SRAMVideoLoad( dSDI_test_line1, SRAMBank1);
0009FA 910825          2879         MOV.B   R0L,#025H
0009FD 911810          2880         MOV.B   R0H,#010H
000A00 C5FB29          2881         CALL    _SRAMVideoLoad
                       2882 ; cbar.c    868       SRAMVideoLoad( dSDI_test_line2, SRAMBank2);
000A03 910826          2884         MOV.B   R0L,#026H
000A06 911814          2885         MOV.B   R0H,#014H
000A09 C5FB24          2886         CALL    _SRAMVideoLoad
                       2887 ; cbar.c    869       SRAMVideoLoad( dSDI_test_line3, SRAMBank3);
000A0C 910827          2889         MOV.B   R0L,#027H
000A0F 911818          2890         MOV.B   R0H,#018H
000A12 C5FB20          2891         CALL    _SRAMVideoLoad
                       2892 ; cbar.c    870 
                       2893 ; cbar.c    871       if ( system < NTSC_US)
000A15 99440002        2895         CMP.W   R4,#02H
000A19 FA09            2896         BGE     _86
                       2897 ; cbar.c    872         newTablePtr = &PALCheckfieldTable[0];
000A1B 964842rr        2899         MOV.B   ES,#SEG( _newTablePtr )
000A1F 9908rrrr        2900         MOV.W   R0,#SOF( _newTablePtr )
000A23 9B080876        2901         MOV.W   [R0+],#SOF( _PALCheckfieldTable )
000A27 BA00            2902         MOV.W   [R0],#SEG( _PALCheckfieldTable )
                       2903         BR      _136
000A29 D500BB         +2903         JMP.L   _136
000A29 D500BB         +2903         JMP.L   _136
000A2C                 2904 _86:
                       2905 ; cbar.c    873       else
                       2906 ; cbar.c    874         newTablePtr = &NTSCCheckfieldTable[0];
000A2C 964842rr        2908         MOV.B   ES,#SEG( _newTablePtr )
000A30 9908rrrr        2909         MOV.W   R0,#SOF( _newTablePtr )
000A34 9B08098E        2910         MOV.W   [R0+],#SOF( _NTSCCheckfieldTable )
000A38 BA00            2911         MOV.W   [R0],#SEG( _NTSCCheckfieldTable )
                       2912 ; cbar.c    875       break;
                       2914         BR      _136
000A3A D500B3         +2914         JMP.L   _136
                       2915 ; cbar.c    876 
                       2916 ; cbar.c    877     case DigitalGrey:
000A3E                 2918 _87:
                       2919 ; cbar.c    878       if ( system < NTSC_US)
000A3E 99440002        2921         CMP.W   R4,#02H
000A42 FA0D            2922         BGE     _88
                       2923 ; cbar.c    879       {
                       2924 ; cbar.c    880         SRAMVideoLoad( dDigitalGrey_625, SRAMBank1);
000A44 910823          2926         MOV.B   R0L,#023H
000A47 911810          2927         MOV.B   R0H,#010H
000A4A C5FB04          2928         CALL    _SRAMVideoLoad
                       2929 ; cbar.c    881 
                       2930 ; cbar.c    882         newTablePtr = &PALFullFieldTable[0];
000A4D 964842rr        2932         MOV.B   ES,#SEG( _newTablePtr )
000A51 9908rrrr        2933         MOV.W   R0,#SOF( _newTablePtr )
000A55 9B080828        2934         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000A59 BA00            2935         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2936 ; cbar.c    883       }
                       2938         BR      _136
000A5B D500A2         +2938         JMP.L   _136
000A5B D500A2         +2938         JMP.L   _136
000A5E                 2939 _88:
                       2940 ; cbar.c    884       else
                       2941 ; cbar.c    885       {
                       2942 ; cbar.c    886         SRAMVideoLoad( dDigitalGrey_525, SRAMBank1);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  37

ADDR   CODE            LINE SOURCELINE
000A5E 910824          2944         MOV.B   R0L,#024H
000A61 911810          2945         MOV.B   R0H,#010H
000A64 C5FAF7          2946         CALL    _SRAMVideoLoad
                       2947 ; cbar.c    887 
                       2948 ; cbar.c    888         newTablePtr = &NTSCFullFieldTable[0];
000A67 964842rr        2950         MOV.B   ES,#SEG( _newTablePtr )
000A6B 9908rrrr        2951         MOV.W   R0,#SOF( _newTablePtr )
000A6F 9B08093C        2952         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000A73 BA00            2953         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2954 ; cbar.c    889       }
                       2955 ; cbar.c    890       break;
                       2957         BR      _136
000A75 D50095         +2957         JMP.L   _136
                       2958 ; cbar.c    891 
                       2959 ; cbar.c    892     case Stair5:
000A78                 2961 _89:
                       2962 ; cbar.c    893       if ( system < NTSC_US)
000A78 99440002        2964         CMP.W   R4,#02H
000A7C FA0D            2965         BGE     _90
                       2966 ; cbar.c    894       {
                       2967 ; cbar.c    895         SRAMVideoLoad( dGreyScale5_625, SRAMBank1);
000A7E 910817          2969         MOV.B   R0L,#017H
000A81 911810          2970         MOV.B   R0H,#010H
000A84 C5FAE7          2971         CALL    _SRAMVideoLoad
                       2972 ; cbar.c    896 
                       2973 ; cbar.c    897         newTablePtr = &PALFullFieldTable[0];
000A87 964842rr        2975         MOV.B   ES,#SEG( _newTablePtr )
000A8B 9908rrrr        2976         MOV.W   R0,#SOF( _newTablePtr )
000A8F 9B080828        2977         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000A93 BA00            2978         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       2979 ; cbar.c    898       }
                       2981         BR      _136
000A95 D50085         +2981         JMP.L   _136
000A95 D50085         +2981         JMP.L   _136
000A98                 2982 _90:
                       2983 ; cbar.c    899       else
                       2984 ; cbar.c    900       {
                       2985 ; cbar.c    901         SRAMVideoLoad( dGreyScale5_525, SRAMBank1);
000A98 910818          2987         MOV.B   R0L,#018H
000A9B 911810          2988         MOV.B   R0H,#010H
000A9E C5FADA          2989         CALL    _SRAMVideoLoad
                       2990 ; cbar.c    902 
                       2991 ; cbar.c    903         newTablePtr = &NTSCFullFieldTable[0];
000AA1 964842rr        2993         MOV.B   ES,#SEG( _newTablePtr )
000AA5 9908rrrr        2994         MOV.W   R0,#SOF( _newTablePtr )
000AA9 9B08093C        2995         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000AAD BA00            2996         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       2997 ; cbar.c    904       }
                       2998 ; cbar.c    905       break;
000AAF FE79            3000         BR      _136
                       3001 ; cbar.c    906 
                       3002 ; cbar.c    907     case Stair10:
000AB2                 3004 _91:
                       3005 ; cbar.c    908       if ( system < NTSC_US)
000AB2 99440002        3007         CMP.W   R4,#02H
000AB6 FA0D            3008         BGE     _92
                       3009 ; cbar.c    909       {
                       3010 ; cbar.c    910         SRAMVideoLoad( dGreyScale10_625, SRAMBank1);
000AB8 910819          3012         MOV.B   R0L,#019H
000ABB 911810          3013         MOV.B   R0H,#010H
000ABE C5FACA          3014         CALL    _SRAMVideoLoad
                       3015 ; cbar.c    911 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  38

ADDR   CODE            LINE SOURCELINE
                       3016 ; cbar.c    912         newTablePtr = &PALFullFieldTable[0];
000AC1 964842rr        3018         MOV.B   ES,#SEG( _newTablePtr )
000AC5 9908rrrr        3019         MOV.W   R0,#SOF( _newTablePtr )
000AC9 9B080828        3020         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000ACD BA00            3021         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       3022 ; cbar.c    913       }
000ACF FE69            3024         BR      _136
000ACF FE6900          3024         BR      _136
000AD2                 3025 _92:
                       3026 ; cbar.c    914       else
                       3027 ; cbar.c    915       {
                       3028 ; cbar.c    916         SRAMVideoLoad( dGreyScale10_525, SRAMBank1);
000AD2 91081A          3030         MOV.B   R0L,#01AH
000AD5 911810          3031         MOV.B   R0H,#010H
000AD8 C5FABD          3032         CALL    _SRAMVideoLoad
                       3033 ; cbar.c    917 
                       3034 ; cbar.c    918         newTablePtr = &NTSCFullFieldTable[0];
000ADB 964842rr        3036         MOV.B   ES,#SEG( _newTablePtr )
000ADF 9908rrrr        3037         MOV.W   R0,#SOF( _newTablePtr )
000AE3 9B08093C        3038         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000AE7 BA00            3039         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3040 ; cbar.c    919       }
                       3041 ; cbar.c    920       break;
000AE9 FE5C            3043         BR      _136
                       3044 ; cbar.c    921 
                       3045 ; cbar.c    922     case Crosshatch:
000AEC                 3047 _93:
                       3048 ; cbar.c    923       if ( system < NTSC_US)
000AEC 99440002        3050         CMP.W   R4,#02H
000AF0 FA11            3051         BGE     _94
                       3052 ; cbar.c    924       {
                       3053 ; cbar.c    925         SRAMVideoLoad( dCrossHatch19_625, SRAMBank1);
000AF2 91080C          3055         MOV.B   R0L,#0CH
000AF5 911810          3056         MOV.B   R0H,#010H
000AF8 C5FAAD          3057         CALL    _SRAMVideoLoad
                       3058 ; cbar.c    926         SRAMVideoLoad( dWhiteLine_625, SRAMBank2);
000AFB 91080B          3060         MOV.B   R0L,#0BH
000AFE 911814          3061         MOV.B   R0H,#014H
000B01 C5FAA8          3062         CALL    _SRAMVideoLoad
                       3063 ; cbar.c    927 
                       3064 ; cbar.c    928         newTablePtr = &PALCrosshatchTable[0];
000B04 964842rr        3066         MOV.B   ES,#SEG( _newTablePtr )
000B08 9908rrrr        3067         MOV.W   R0,#SOF( _newTablePtr )
000B0C 9B08088A        3068         MOV.W   [R0+],#SOF( _PALCrosshatchTable )
000B10 BA00            3069         MOV.W   [R0],#SEG( _PALCrosshatchTable )
                       3070 ; cbar.c    929       }
000B12 FE47            3072         BR      _136
000B12 FE47            3072         BR      _136
000B14                 3073 _94:
                       3074 ; cbar.c    930       else
                       3075 ; cbar.c    931       {
                       3076 ; cbar.c    932         SRAMVideoLoad( dCrossHatch17_525, SRAMBank1);
000B14 91080E          3078         MOV.B   R0L,#0EH
000B17 911810          3079         MOV.B   R0H,#010H
000B1A C5FA9C          3080         CALL    _SRAMVideoLoad
                       3081 ; cbar.c    933         SRAMVideoLoad( dWhiteLine_525, SRAMBank2);
000B1D 91080D          3083         MOV.B   R0L,#0DH
000B20 911814          3084         MOV.B   R0H,#014H
000B23 C5FA97          3085         CALL    _SRAMVideoLoad
                       3086 ; cbar.c    934 
                       3087 ; cbar.c    935         newTablePtr = &NTSCCrosshatchTable[0];
000B26 964842rr        3089         MOV.B   ES,#SEG( _newTablePtr )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  39

ADDR   CODE            LINE SOURCELINE
000B2A 9908rrrr        3090         MOV.W   R0,#SOF( _newTablePtr )
000B2E 9B0809A2        3091         MOV.W   [R0+],#SOF( _NTSCCrosshatchTable )
000B32 BA00            3092         MOV.W   [R0],#SEG( _NTSCCrosshatchTable )
                       3093 ; cbar.c    936       }
                       3094 ; cbar.c    937       break;
000B34 FE36            3096         BR      _136
                       3097 ; cbar.c    938 
                       3098 ; cbar.c    939     case PLUGE:
000B36                 3100 _95:
                       3101 ; cbar.c    940       if ( system < NTSC_US)
000B36 99440002        3103         CMP.W   R4,#02H
000B3A FA1A            3104         BGE     _96
                       3105 ; cbar.c    941       {
                       3106 ; cbar.c    942         SRAMVideoLoad( dPlugeWhite_625, SRAMBank1);
000B3C 91080F          3108         MOV.B   R0L,#0FH
000B3F 911810          3109         MOV.B   R0H,#010H
000B42 C5FA88          3110         CALL    _SRAMVideoLoad
                       3111 ; cbar.c    943         SRAMVideoLoad( dPlugeGreyC_625, SRAMBank2);
000B45 911814          3113         MOV.B   R0H,#014H
000B48 910810          3114         MOV.B   R0L,#010H
000B4B C5FA83          3115         CALL    _SRAMVideoLoad
                       3116 ; cbar.c    944         SRAMVideoLoad( dPlugeGreyD_625, SRAMBank3);
000B4E 910811          3118         MOV.B   R0L,#011H
000B51 911818          3119         MOV.B   R0H,#018H
000B54 C5FA7F          3120         CALL    _SRAMVideoLoad
                       3121 ; cbar.c    945         SRAMVideoLoad( dPlugeGreyE_625, SRAMBank4);
000B57 910812          3123         MOV.B   R0L,#012H
000B5A 91181C          3124         MOV.B   R0H,#01CH
000B5D C5FA7A          3125         CALL    _SRAMVideoLoad
                       3126 ; cbar.c    946 
                       3127 ; cbar.c    947         newTablePtr = &PALPLUGETable[0];
000B60 964842rr        3129         MOV.B   ES,#SEG( _newTablePtr )
000B64 9908rrrr        3130         MOV.W   R0,#SOF( _newTablePtr )
000B68 9B080908        3131         MOV.W   [R0+],#SOF( _PALPLUGETable )
000B6C BA00            3132         MOV.W   [R0],#SEG( _PALPLUGETable )
                       3133 ; cbar.c    948       }
000B6E FE19            3135         BR      _136
000B6E FE19            3135         BR      _136
000B70                 3136 _96:
                       3137 ; cbar.c    949       else
                       3138 ; cbar.c    950       {
                       3139 ; cbar.c    951         SRAMVideoLoad( dPlugeWhite_525, SRAMBank1);
000B70 910813          3141         MOV.B   R0L,#013H
000B73 911810          3142         MOV.B   R0H,#010H
000B76 C5FA6E          3143         CALL    _SRAMVideoLoad
                       3144 ; cbar.c    952         SRAMVideoLoad( dPlugeGreyC_525, SRAMBank2);
000B79 911814          3146         MOV.B   R0H,#014H
000B7C 8101            3147         MOV.B   R0L,R0H
000B7E C5FA6A          3148         CALL    _SRAMVideoLoad
                       3149 ; cbar.c    953         SRAMVideoLoad( dPlugeGreyD_525, SRAMBank3);
000B81 910815          3151         MOV.B   R0L,#015H
000B84 911818          3152         MOV.B   R0H,#018H
000B87 C5FA65          3153         CALL    _SRAMVideoLoad
                       3154 ; cbar.c    954         SRAMVideoLoad( dPlugeGreyE_525, SRAMBank4);
000B8A 910816          3156         MOV.B   R0L,#016H
000B8D 91181C          3157         MOV.B   R0H,#01CH
000B90 C5FA61          3158         CALL    _SRAMVideoLoad
                       3159 ; cbar.c    955 
                       3160 ; cbar.c    956         newTablePtr = &NTSCPLUGETable[0];
000B93 964842rr        3162         MOV.B   ES,#SEG( _newTablePtr )
000B97 9908rrrr        3163         MOV.W   R0,#SOF( _newTablePtr )
000B9B 9B080A20        3164         MOV.W   [R0+],#SOF( _NTSCPLUGETable )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  40

ADDR   CODE            LINE SOURCELINE
000B9F BA00            3165         MOV.W   [R0],#SEG( _NTSCPLUGETable )
                       3166 ; cbar.c    957       }
                       3167 ; cbar.c    958       break;
                       3168 ; cbar.c    959   }
000BA2                 3170 _136:
                       3171 ; cbar.c    960 
                       3172 ; cbar.c    961   NewPattern = TRUE;
000BA2 964842rr        3174         MOV.B   ES,#SEG( _NewPattern )
000BA6 9908rrrr        3175         MOV.W   R0,#SOF( _NewPattern )
000BAA 9208FF          3176         MOV.B   [R0],#0FFH
                       3177 ; cbar.c    962 
                       3178 ; cbar.c    963   return( OK);
000BAD 9908FFFF        3180         MOV.W   R0,#0FFFFH
                       3181 ; cbar.c    964 }
000BB2                 3183 _137:
000BB2 A972            3184         ADDS.W  R7,#02H
000BB4 2F10            3186         POP.W   R4
000BB6 D680            3188         RET
                       3190 ; cbar.c    965 
                       3191 ; cbar.c    966 /**************************************************************************/
                       3192 ; cbar.c    967 /* SetCBSystem                                     CBAR.C  */
                       3193 ; cbar.c    968 /*                                                  */
                       3194 ; cbar.c    969 /* Author:   Kim Engedahl, DEV, 000331                          */
                       3195 ; cbar.c    970 /* Revised:   000705, KEn, DEV                                 */
                       3196 ; cbar.c    971 /*                                                  */
                       3197 ; cbar.c    972 /* Function:                                           */
                       3198 ; cbar.c    973 /* Remarks:                                            */
                       3199 ; cbar.c    974 /* Returns:                                            */
                       3200 ; cbar.c    975 /* Updates:                                              */
                       3201 ; cbar.c    976 /**************************************************************************/
                       3202 ; cbar.c    977 int SetCBSystem( UC system)
                       3203 ; cbar.c    978 {
                       3204         ALIGN   1
                       3206         PUBLIC  _SetCBSystem
000BB8                 3207 _SetCBSystem:
000BB8 0F10            3211         PUSH.W  R4
                       3215 ; cbar.c    979   Settings.ActivePreset = 0;
000BBA 964842rr        3217         MOV.B   ES,#SEG( _Settings )
000BBE 9918rrrr        3218         MOV.W   R1,#SOF( _Settings )
000BC2 BA10            3219         MOV.W   [R1],#00H
                       3220 ; cbar.c    980 
                       3221 ; cbar.c    981   Settings.CBSetup.System = CBSetup.System = system;
000BC4 8180            3223         MOV.B   R4L,R0L
000BC6 964842rr        3224         MOV.B   ES,#SEG( _CBSetup )
000BCA 9908rrrr        3225         MOV.W   R0,#SOF( _CBSetup )
000BCE 8288            3226         MOV.B   [R0],R4L
000BD0 964842rr        3229         MOV.B   ES,#SEG( _Settings+32 )
000BD4 9908rrrr        3230         MOV.W   R0,#SOF( _Settings+32 )
000BD8 8288            3231         MOV.B   [R0],R4L
                       3232 ; cbar.c    982   NV_Store( &Settings, SettingsPtr, sizeof( Settings));
000BDA 9918rrrr        3234         MOV.W   R1,#SEG( _Settings )
000BDE 9908rrrr        3235         MOV.W   R0,#SOF( _Settings )
000BE2 964842rr        3236         MOV.B   ES,#SEG( _SettingsPtr )
000BE6 9928rrrr        3237         MOV.W   R2,#SOF( _SettingsPtr )
000BEA 8A22            3238         MOV.W   R2,[R2]
000BEC 9938004A        3239         MOV.W   R3,#04AH
                       3240         CALL    _NV_Store
000BF0 C4rrrrrr       +3240 ;       FCALL   _NV_Store
                       3241 ; cbar.c    983 
                       3242 ; cbar.c    984   if ( system < NTSC_US)
000BF4 918402          3244         CMP.B   R4L,#02H
000BF7 F014            3245         BCC     _156
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  41

ADDR   CODE            LINE SOURCELINE
                       3246 ; cbar.c    985   {
                       3247 ; cbar.c    986     Status &= ~SYSSEL;
000BF9 9E1520FFBF      3249         AND.W   _Status,#0FFBFH
                       3250 ; cbar.c    987     //PLD_StatusPort = Status;    // Select new (SDI) system
                       3251 ; cbar.c    988     Update_StatusPort(Status);
000BFE 8E0120          3253         MOV.W   R0,_Status
000C01 C501DB          3254         CALL    _Update_StatusPort
                       3255 ; cbar.c    989 
                       3256 ; cbar.c    990     WriteCBGain( Calibration.CBCalibration.GainG);
000C04 964842rr        3258         MOV.B   ES,#SEG( _Calibration+215 )
000C08 9908rrrr        3259         MOV.W   R0,#SOF( _Calibration+215 )
000C0C 8200            3260         MOV.B   R0L,[R0]
000C0E C5F9F8          3261         CALL    _WriteCBGain
                       3262 ; cbar.c    991     WriteCBChromaGain( Calibration.CBCalibration.ChromaGainG);
000C11 964842rr        3264         MOV.B   ES,#SEG( _Calibration+216 )
000C15 9908rrrr        3265         MOV.W   R0,#SOF( _Calibration+216 )
000C19 8200            3266         MOV.B   R0L,[R0]
000C1B C5F9FC          3267         CALL    _WriteCBChromaGain
                       3268 ; cbar.c    992   }
000C1E FE13            3270         BR      _157
000C1E FE13            3270         BR      _157
000C20                 3271 _156:
                       3272 ; cbar.c    993   else
                       3273 ; cbar.c    994   {
                       3274 ; cbar.c    995     Status |= SYSSEL;
000C20 9E16200040      3276         OR.W    _Status,#040H
                       3277 ; cbar.c    996     //PLD_StatusPort = Status;    // Select new (SDI) system
                       3278 ; cbar.c    997     Update_StatusPort(Status);
000C25 8E0120          3280         MOV.W   R0,_Status
000C28 C501C8          3281         CALL    _Update_StatusPort
                       3282 ; cbar.c    998 
                       3283 ; cbar.c    999     WriteCBGain( Calibration.CBCalibration.GainM);
000C2B 964842rr        3285         MOV.B   ES,#SEG( _Calibration+217 )
000C2F 9908rrrr        3286         MOV.W   R0,#SOF( _Calibration+217 )
000C33 8200            3287         MOV.B   R0L,[R0]
000C35 C5F9E4          3288         CALL    _WriteCBGain
                       3289 ; cbar.c   1000     WriteCBChromaGain( Calibration.CBCalibration.ChromaGainM);
000C38 964842rr        3291         MOV.B   ES,#SEG( _Calibration+218 )
000C3C 9908rrrr        3292         MOV.W   R0,#SOF( _Calibration+218 )
000C40 8200            3293         MOV.B   R0L,[R0]
000C42 C5F9E9          3294         CALL    _WriteCBChromaGain
                       3295 ; cbar.c   1001   }
000C46                 3297 _157:
                       3298 ; cbar.c   1002 
                       3299 ; cbar.c   1003 
                       3300 ; cbar.c   1004   tvp6k_system( system);  // Initialise the composite output
000C46 8108            3302         MOV.B   R0L,R4L
000C48 B110            3303         MOVS.B  R0H,#00H
                       3304         CALL    _tvp6k_system
000C4A C4rrrrrr       +3304 ;       FCALL   _tvp6k_system
                       3305 ; cbar.c   1005 
                       3306 ; cbar.c   1006                           // Validate pattern and change if invalid in new system
                                                                
                       3307 ; cbar.c   1007   ValidateCBPattern( system , &CBSetup.Pattern);
000C4E 9938rrrr        3309         MOV.W   R3,#SEG( _CBSetup+2 )
000C52 9928rrrr        3310         MOV.W   R2,#SOF( _CBSetup+2 )
000C56 8108            3311         MOV.B   R0L,R4L
000C58 C50180          3314         CALL    _ValidateCBPattern
                       3317 ; cbar.c   1008 
                       3318 ; cbar.c   1009                           // This one initialises TablePtr;
                       3319 ; cbar.c   1010   SetCBPattern( CBSetup.Pattern);
000C5B 964842rr        3321         MOV.B   ES,#SEG( _CBSetup+2 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  42

ADDR   CODE            LINE SOURCELINE
000C5F 9908rrrr        3322         MOV.W   R0,#SOF( _CBSetup+2 )
000C63 8A00            3323         MOV.W   R0,[R0]
000C65 C5FCC0          3324         CALL    _SetCBPattern
                       3325 ; cbar.c   1011 
                       3326 ; cbar.c   1012   SetCBScHPhase( CBSetup.ScHPhase);
000C68 964842rr        3328         MOV.B   ES,#SEG( _CBSetup+8 )
000C6C 9908rrrr        3329         MOV.W   R0,#SOF( _CBSetup+8 )
000C70 8A00            3330         MOV.W   R0,[R0]
000C72 C500D4          3331         CALL    _SetCBScHPhase
                       3332 ; cbar.c   1013 
                       3333 ; cbar.c   1014   LEDSet( CBPALLED, system < NTSC_US);
000C75 99080040        3335         MOV.W   R0,#040H
000C79 918402          3336         CMP.B   R4L,#02H
000C7C F002            3337         BCC     _159
000C7E B911            3338         MOVS.W  R1,#01H
000C80 FE01            3339         BR      _161
000C80 FE01            3339         BR      _161
000C82                 3340 _159:
000C82 B910            3341         MOVS.W  R1,#00H
000C82 B910            3341         MOVS.W  R1,#00H
000C84                 3342 _161:
                       3343         CALL    _LEDSet
000C84 C4rrrrrr       +3343 ;       FCALL   _LEDSet
                       3344 ; cbar.c   1015   LEDSet( CBNTSCLED, system >= NTSC_US);
000C88 99080080        3346         MOV.W   R0,#080H
000C8C 918402          3347         CMP.B   R4L,#02H
000C8F F103            3348         BCS     _162
000C91 B911            3349         MOVS.W  R1,#01H
000C93 FE02            3350         BR      _164
000C93 FE0200          3350         BR      _164
000C96                 3351 _162:
000C96 B910            3352         MOVS.W  R1,#00H
000C96 B910            3352         MOVS.W  R1,#00H
000C98                 3353 _164:
                       3354         CALL    _LEDSet
000C98 C4rrrrrr       +3354 ;       FCALL   _LEDSet
                       3355 ; cbar.c   1016 
                       3356 ; cbar.c   1017   return( OK);
000C9C 9908FFFF        3358         MOV.W   R0,#0FFFFH
                       3359 ; cbar.c   1018 }
000CA0 2F10            3361         POP.W   R4
000CA2 D680            3363         RET
                       3366 ; cbar.c   1019 
                       3367 ; cbar.c   1020 /**************************************************************************/
                       3368 ; cbar.c   1021 /* SetCBDelay                                                       CBAR.C  */
                       3369 ; cbar.c   1022 /*                                                                        */
                       3370 ; cbar.c   1023 /* Author:   Kim Engedahl, DEV, 000331                                    */
                       3371 ; cbar.c   1024 /* Revised:   001009, KEn, DEV                                             */
                       3372 ; cbar.c   1025 /*                                                                        */
                       3373 ; cbar.c   1026 /* Function:                                                               */
                       3374 ; cbar.c   1027 /* Remarks:   CB Delay resolution is 37ns                                  */
                       3375 ; cbar.c   1028 /* Returns:                                                                */
                       3376 ; cbar.c   1029 /* Updates:                                                                */
                       3377 ; cbar.c   1030 /**************************************************************************/
                       3378 ; cbar.c   1031 int SetCBDelay( UL delay)
                       3379 ; cbar.c   1032   {
                       3380         ALIGN   1
                       3382         PUBLIC  _SetCBDelay
000CA4                 3383 _SetCBDelay:
000CA4 0F30            3387         PUSH.W  R4, R5
                       3393 ; cbar.c   1033   UL tmpOffset;
                       3394 ; cbar.c   1034 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  43

ADDR   CODE            LINE SOURCELINE
                       3395 ; cbar.c   1035   Settings.ActivePreset = 0;
000CA6 964842rr        3397         MOV.B   ES,#SEG( _Settings )
000CAA 9928rrrr        3398         MOV.W   R2,#SOF( _Settings )
000CAE BA20            3399         MOV.W   [R2],#00H
                       3400 ; cbar.c   1036 
                       3401 ; cbar.c   1037   Settings.CBSetup.Delay = CBSetup.Delay = delay;
000CB0 8951            3403         MOV.W   R5,R1
000CB2 8940            3404         MOV.W   R4,R0
000CB4 964842rr        3405         MOV.B   ES,#SEG( _CBSetup+4 )
000CB8 9908rrrr        3406         MOV.W   R0,#SOF( _CBSetup+4 )
000CBC 8B48            3407         MOV.W   [R0+],R4
000CBE 8A58            3408         MOV.W   [R0],R5
000CC0 964842rr        3411         MOV.B   ES,#SEG( _Settings+36 )
000CC4 9908rrrr        3412         MOV.W   R0,#SOF( _Settings+36 )
000CC8 8B48            3413         MOV.W   [R0+],R4
000CCA 8A58            3414         MOV.W   [R0],R5
                       3415 ; cbar.c   1038   NV_Store( &Settings, SettingsPtr, sizeof( Settings));
000CCC 9918rrrr        3417         MOV.W   R1,#SEG( _Settings )
000CD0 9908rrrr        3418         MOV.W   R0,#SOF( _Settings )
000CD4 964842rr        3419         MOV.B   ES,#SEG( _SettingsPtr )
000CD8 9928rrrr        3420         MOV.W   R2,#SOF( _SettingsPtr )
000CDC 8A22            3421         MOV.W   R2,[R2]
000CDE 9938004A        3422         MOV.W   R3,#04AH
                       3423         CALL    _NV_Store
000CE2 C4rrrrrr       +3423 ;       FCALL   _NV_Store
                       3424 ; cbar.c   1039 
                       3425 ; cbar.c   1040   // Divide GenlockSetup.Delay with 256 as the resulotion is 27ns/256 whereas the
                            
                       3426 ; cbar.c   1041   //  resolution of the TSG is 37ns.
                       3427 ; cbar.c   1042   tmpOffset = delay + GenlockSetup.Delay/256;
000CE6 964842rr        3429         MOV.B   ES,#SEG( _GenlockSetup+2 )
000CEA 9918rrrr        3430         MOV.W   R1,#SOF( _GenlockSetup+2 )
000CEE 8B01            3431         MOV.W   R0,[R1+]
000CF0 8A11            3432         MOV.W   R1,[R1]
000CF2 DC08            3433         LSR.D   R0,#08H
000CF4 0940            3434         ADD.W   R4,R0
000CF6 1951            3435         ADDC.W  R5,R1
000CF8 8935            3437         MOV.W   R3,R5
000CFA 8924            3438         MOV.W   R2,R4
                       3440 ; cbar.c   1043 
                       3441 ; cbar.c   1044   if ( CBSetup.System < NTSC_US)
000CFC 964842rr        3443         MOV.B   ES,#SEG( _CBSetup )
000D00 9908rrrr        3444         MOV.W   R0,#SOF( _CBSetup )
000D04 8200            3445         MOV.B   R0L,[R0]
000D06 910402          3446         CMP.B   R0L,#02H
000D09 F02C            3447         BCC     _165
                       3448 ; cbar.c   1045     {
                       3449 ; cbar.c   1046     tmpOffset += Calibration.CBCalibration.PhaseG;
000D0B 964842rr        3451         MOV.B   ES,#SEG( _Calibration+204 )
000D0F 9938rrrr        3452         MOV.W   R3,#SOF( _Calibration+204 )
000D13 8B23            3453         MOV.W   R2,[R3+]
000D15 8A33            3454         MOV.W   R3,[R3]
000D17 0942            3456         ADD.W   R4,R2
000D19 1953            3457         ADDC.W  R5,R3
000D1B 8915            3458         MOV.W   R1,R5
000D1D 8904            3459         MOV.W   R0,R4
                       3461 ; cbar.c   1047 
                       3462 ; cbar.c   1048     tmpOffset %= 4320000L;            // 4*625*1728
000D1F 99380041        3464         MOV.W   R3,#041H
000D23 9928EB00        3465         MOV.W   R2,#0EB00H
000D27 C4rrrrrr        3466         FCALL   __UMODL
                       3469 ; cbar.c   1049 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  44

ADDR   CODE            LINE SOURCELINE
                       3470 ; cbar.c   1050     LineOffset = 0xFFFF - ( tmpOffset / 1728L);        
000D2B B930            3472         MOV.W   R3,#00H
000D2D 992806C0        3473         MOV.W   R2,#06C0H
000D31 8951            3474         MOV.W   R5,R1
000D33 8940            3475         MOV.W   R4,R0
000D35 C4rrrrrr        3476         FCALL   __UDIVL
000D39 9918FFFF        3479         MOV.W   R1,#0FFFFH
000D3D 2910            3480         SUB.W   R1,R0
000D3F 8E1rrr          3481         MOV.W   _LineOffset,R1
                       3482 ; cbar.c   1051     PhaseOffset = 1727 - ( tmpOffset % 1728L);
000D42 8915            3484         MOV.W   R1,R5
000D44 8904            3485         MOV.W   R0,R4
000D46 B930            3486         MOV.W   R3,#00H
000D48 992806C0        3487         MOV.W   R2,#06C0H
000D4C C4rrrrrr        3488         FCALL   __UMODL
000D50 991806BF        3492         MOV.W   R1,#06BFH
000D54 2910            3493         SUB.W   R1,R0
000D56 964842rr        3494         MOV.B   ES,#SEG( _PhaseOffset )
000D5A 9908rrrr        3495         MOV.W   R0,#SOF( _PhaseOffset )
000D5E 8A18            3496         MOV.W   [R0],R1
                       3497 ; cbar.c   1052     }
000D60 FE3D            3499         BR      _167
000D60 FE3D            3499         BR      _167
000D62                 3500 _165:
                       3502 ; cbar.c   1053   else 
                       3503 ; cbar.c   1054     {
                       3504 ; cbar.c   1055     tmpOffset += Calibration.CBCalibration.PhaseM;
000D62 964842rr        3506         MOV.B   ES,#SEG( _Calibration+210 )
000D66 9918rrrr        3507         MOV.W   R1,#SOF( _Calibration+210 )
000D6A 8B01            3508         MOV.W   R0,[R1+]
000D6C 8A11            3509         MOV.W   R1,[R1]
000D6E 0902            3510         ADD.W   R0,R2
000D70 1913            3511         ADDC.W  R1,R3
                       3514 ; cbar.c   1056 
                       3515 ; cbar.c   1057     tmpOffset %= 1801800L;            // 2*525*1716
000D72 9938001B        3517         MOV.W   R3,#01BH
000D76 99287E48        3518         MOV.W   R2,#07E48H
000D7A C4rrrrrr        3519         FCALL   __UMODL
                       3522 ; cbar.c   1058 
                       3523 ; cbar.c   1059     LineOffset = 0xFFFF - ( tmpOffset / 1716L);        
000D7E B930            3525         MOV.W   R3,#00H
000D80 992806B4        3526         MOV.W   R2,#06B4H
000D84 8951            3527         MOV.W   R5,R1
000D86 8940            3528         MOV.W   R4,R0
000D88 C4rrrrrr        3529         FCALL   __UDIVL
000D8C 9918FFFF        3532         MOV.W   R1,#0FFFFH
000D90 2910            3533         SUB.W   R1,R0
000D92 8E1rrr          3534         MOV.W   _LineOffset,R1
                       3535 ; cbar.c   1060     PhaseOffset = 1715 - ( tmpOffset % 1716L);
000D95 B930            3537         MOV.W   R3,#00H
000D97 992806B4        3538         MOV.W   R2,#06B4H
000D9B 8915            3539         MOV.W   R1,R5
000D9D 8904            3540         MOV.W   R0,R4
000D9F C4rrrrrr        3541         FCALL   __UMODL
000DA3 991806B3        3545         MOV.W   R1,#06B3H
000DA7 2910            3546         SUB.W   R1,R0
000DA9 964842rr        3547         MOV.B   ES,#SEG( _PhaseOffset )
000DAD 9908rrrr        3548         MOV.W   R0,#SOF( _PhaseOffset )
000DB1 8A18            3549         MOV.W   [R0],R1
                       3550 ; cbar.c   1061 
                       3551 ; cbar.c   1062     if ( PhaseOffset > 1687)
000DB3 964842rr        3553         MOV.B   ES,#SEG( _PhaseOffset )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  45

ADDR   CODE            LINE SOURCELINE
000DB7 9908rrrr        3554         MOV.W   R0,#SOF( _PhaseOffset )
000DBB 8A00            3555         MOV.W   R0,[R0]
000DBD 99040697        3556         CMP.W   R0,#0697H
000DC1 FD0D            3557         BLE     _167
                       3558 ; cbar.c   1063       PhaseOffset += 12;
000DC3 964842rr        3560         MOV.B   ES,#SEG( _PhaseOffset )
000DC7 9908rrrr        3561         MOV.W   R0,#SOF( _PhaseOffset )
000DCB 8A00            3562         MOV.W   R0,[R0]
000DCD 9900000C        3563         ADD.W   R0,#0CH
000DD1 964842rr        3564         MOV.B   ES,#SEG( _PhaseOffset )
000DD5 9918rrrr        3565         MOV.W   R1,#SOF( _PhaseOffset )
000DD9 8A09            3566         MOV.W   [R1],R0
                       3567 ; cbar.c   1064     }
000DDC                 3569 _167:
                       3570 ; cbar.c   1065 
                       3571 ; cbar.c   1066   if ( PhaseOffset >= 1443)
000DDC 964842rr        3573         MOV.B   ES,#SEG( _PhaseOffset )
000DE0 9908rrrr        3574         MOV.W   R0,#SOF( _PhaseOffset )
000DE4 8A00            3575         MOV.W   R0,[R0]
000DE6 990405A3        3576         CMP.W   R0,#05A3H
000DEA FB04            3577         BLT     _168
                       3578 ; cbar.c   1067     Status |= PHASEREGSEL;        // Set Phase Register Select
000DEC 9E16204000      3580         OR.W    _Status,#04000H
000DF1 FE04            3581         BR      _169
000DF1 FE0400          3581         BR      _169
000DF4                 3582 _168:
                       3583 ; cbar.c   1068   else    
                       3584 ; cbar.c   1069     Status &= ~PHASEREGSEL;        // Clear Phase Register Select
000DF4 9E1520BFFF      3586         AND.W   _Status,#0BFFFH
000DF4 9E1520BFFF00    3586         AND.W   _Status,#0BFFFH
000DFA                 3587 _169:
                       3588 ; cbar.c   1070     
                       3589 ; cbar.c   1071   //PLD_StatusPort = Status;
                       3590 ; cbar.c   1072   Update_StatusPort(Status);
000DFA 8E0120          3592         MOV.W   R0,_Status
000DFD C500DD          3593         CALL    _Update_StatusPort
                       3594 ; cbar.c   1073 
                       3595 ; cbar.c   1074   HOffsetPort = PhaseOffset;
000E00 964842rr        3597         MOV.B   ES,#SEG( _PhaseOffset )
000E04 9908rrrr        3598         MOV.W   R0,#SOF( _PhaseOffset )
000E08 8A00            3599         MOV.W   R0,[R0]
000E0A 96484206        3600         MOV.B   ES,#SEG( _HOffsetPort )
000E0E 9918A004        3601         MOV.W   R1,#SOF( _HOffsetPort )
000E12 8A09            3602         MOV.W   [R1],R0
                       3603 ; cbar.c   1075 
                       3604 ; cbar.c   1076   return( OK);
000E14 9908FFFF        3606         MOV.W   R0,#0FFFFH
                       3607 ; cbar.c   1077 }
000E18 2F30            3609         POP.W   R4, R5
000E1A D680            3611         RET
                       3613 ; cbar.c   1078 
                       3614 ; cbar.c   1079 /**************************************************************************/
                       3615 ; cbar.c   1080 /* SetCBScHPhase                                                   CBAR.C  */
                       3616 ; cbar.c   1081 /*                                                                        */
                       3617 ; cbar.c   1082 /* Author:   Kim Engedahl, DEV, 000331                                    */
                       3618 ; cbar.c   1083 /* Revised:   000618, KEn, DEV                                             */
                       3619 ; cbar.c   1084 /*                                                                        */
                       3620 ; cbar.c   1085 /* Function:                                                               */
                       3621 ; cbar.c   1086 /* Remarks:   Note that the resolution is different from BlackBurst, (1.4).*/
                       3622 ; cbar.c   1087 /* Returns:                                                                */
                       3623 ; cbar.c   1088 /* Updates:                                                                */
                       3624 ; cbar.c   1089 /**************************************************************************/
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  46

ADDR   CODE            LINE SOURCELINE
                       3625 ; cbar.c   1090 int SetCBScHPhase( int schphase)
                       3626 ; cbar.c   1091 {
                       3627         ALIGN   1
                       3629         PUBLIC  _SetCBScHPhase
000E1C                 3630 _SetCBScHPhase:
000E1C 0F10            3634         PUSH.W  R4
000E1E A97E            3636         ADDS.W  R7,#0EH
                       3644 ; cbar.c   1092   long tmp;
                       3645 ; cbar.c   1093   UC buffer[2];
                       3646 ; cbar.c   1094 
                       3647 ; cbar.c   1095   Settings.ActivePreset = 0;
000E20 964842rr        3649         MOV.B   ES,#SEG( _Settings )
000E24 9918rrrr        3650         MOV.W   R1,#SOF( _Settings )
000E28 BA10            3651         MOV.W   [R1],#00H
                       3652 ; cbar.c   1096 
                       3653 ; cbar.c   1097   Settings.CBSetup.ScHPhase = CBSetup.ScHPhase = schphase;
000E2A 8940            3655         MOV.W   R4,R0
000E2C 964842rr        3656         MOV.B   ES,#SEG( _CBSetup+8 )
000E30 9908rrrr        3657         MOV.W   R0,#SOF( _CBSetup+8 )
000E34 8A48            3658         MOV.W   [R0],R4
000E36 964842rr        3661         MOV.B   ES,#SEG( _Settings+40 )
000E3A 9908rrrr        3662         MOV.W   R0,#SOF( _Settings+40 )
000E3E 8A48            3663         MOV.W   [R0],R4
                       3664 ; cbar.c   1098   NV_Store( &Settings, SettingsPtr, sizeof( Settings));
000E40 9918rrrr        3666         MOV.W   R1,#SEG( _Settings )
000E44 9908rrrr        3667         MOV.W   R0,#SOF( _Settings )
000E48 964842rr        3668         MOV.B   ES,#SEG( _SettingsPtr )
000E4C 9928rrrr        3669         MOV.W   R2,#SOF( _SettingsPtr )
000E50 8A22            3670         MOV.W   R2,[R2]
000E52 9938004A        3671         MOV.W   R3,#04AH
                       3672         CALL    _NV_Store
000E56 C4rrrrrr       +3672 ;       FCALL   _NV_Store
                       3673 ; cbar.c   1099   
                       3674 ; cbar.c   1100   if ( CBSetup.System < NTSC_US)
000E5A 964842rr        3676         MOV.B   ES,#SEG( _CBSetup )
000E5E 9908rrrr        3677         MOV.W   R0,#SOF( _CBSetup )
000E62 8200            3678         MOV.B   R0L,[R0]
000E64 910402          3679         CMP.B   R0L,#02H
000E67 F009            3680         BCC     _173
                       3681 ; cbar.c   1101     tmp = (long) Calibration.CBCalibration.ScHPhaseG;
000E69 964842rr        3683         MOV.B   ES,#SEG( _Calibration+208 )
000E6D 9908rrrr        3684         MOV.W   R0,#SOF( _Calibration+208 )
000E71 8200            3685         MOV.B   R0L,[R0]
000E73 B110            3686         MOVS.B  R0H,#00H
000E75 B910            3687         MOVS.W  R1,#00H
000E77 FE08            3689         BR      _174
000E77 FE0800          3689         BR      _174
000E7A                 3690 _173:
                       3691 ; cbar.c   1102   else 
                       3692 ; cbar.c   1103     tmp = (long) Calibration.CBCalibration.ScHPhaseM;
000E7A 964842rr        3694         MOV.B   ES,#SEG( _Calibration+214 )
000E7E 9908rrrr        3695         MOV.W   R0,#SOF( _Calibration+214 )
000E82 8200            3696         MOV.B   R0L,[R0]
000E84 B110            3698         MOVS.B  R0H,#00H
000E86 B910            3699         MOVS.W  R1,#00H
000E88                 3701 _174:
                       3702 ; cbar.c   1104 
                       3703 ; cbar.c   1105   tmp += (long) schphase;
000E88 8924            3705         MOV.W   R2,R4
000E8A 9839            3706         SEXT.W  R3
000E8C 0902            3707         ADD.W   R0,R2
000E8E 1913            3708         ADDC.W  R1,R3
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  47

ADDR   CODE            LINE SOURCELINE
                       3711 ; cbar.c   1106 
                       3712 ; cbar.c   1107   if ( tmp < 0)                      // -1 deg equ. 359 deg a.s.f.
000E90 99140000        3714         CMP.W   R1,#00H
000E94 FC08            3715         BGT     _175
000E96 FB03            3716         BLT     _177
000E98 99040000        3717         CMP.W   R0,#00H
000E9C F004            3718         BCC     _175
000E9C F004            3718         BCC     _175
000E9E                 3719 _177:
                       3720 ; cbar.c   1108     tmp += 360;
000E9E 99000168        3722         ADD.W   R0,#0168H
000EA2 99110000        3723         ADDC.W  R1,#00H
000EA6                 3726 _175:
                       3727 ; cbar.c   1109 
                       3728 ; cbar.c   1110   tmp *= 256;
000EA6 DD08            3730         ASL.D   R0,#08H
                       3733 ; cbar.c   1111   tmp /= 360;                        // tmp = ( ScHPhase*256)/360;
000EA8 B930            3735         MOV.W   R3,#00H
000EAA 99280168        3736         MOV.W   R2,#0168H
000EAE C4rrrrrr        3737         FCALL   __SDIVL
                       3740 ; cbar.c   1112 
                       3741 ; cbar.c   1113   buffer[0] = C_PHASE_address;
000EB2 92785A          3743         MOV.B   [R7],#05AH
                       3745 ; cbar.c   1114   buffer[1] = tmp & 0xFF;
000EB5 9105FF          3747         AND.B   R0L,#0FFH
000EB8 840F01          3748         MOV.B   [R7+1],R0L
                       3749 ; cbar.c   1115   
                       3750 ; cbar.c   1116   return( TransmitIIC( TVP6K_IIC_address, 2, buffer, IIC_PTV));
000EBB 910840          3752         MOV.B   R0L,#040H
000EBE 911802          3753         MOV.B   R0H,#02H
000EC1 9168rr          3754         MOV.B   R3L,#SEG( __lc_bs )
000EC4 7177            3755         XOR.B   R3H,R3H
000EC6 8927            3756         MOV.W   R2,R7
000EC8 912800          3757         MOV.B   R1L,#00H
                       3758         CALL    _TransmitIIC
000ECB C4rrrrrr       +3758 ;       FCALL   _TransmitIIC
                       3759 ; cbar.c   1117 }
000ECF A972            3761         ADDS.W  R7,#02H
000ED1 2F10            3763         POP.W   R4
000ED3 D680            3765         RET
                       3768 ; cbar.c   1118 
                       3769 ; cbar.c   1119 /**************************************************************************/
                       3770 ; cbar.c   1120 /* SetCBEmbAudioSignal                                             CBAR.C  */
                       3771 ; cbar.c   1121 /*                                                                        */
                       3772 ; cbar.c   1122 /* Author:   Kim Engedahl, DEV, 000331                                    */
                       3773 ; cbar.c   1123 /* Revised:   000618, KEn, DEV                                             */
                       3774 ; cbar.c   1124 /*                                                                        */
                       3775 ; cbar.c   1125 /* Function:                                                               */
                       3776 ; cbar.c   1126 /* Remarks:                                                                */
                       3777 ; cbar.c   1127 /* Returns:                                                                */
                       3778 ; cbar.c   1128 /* Updates:                                                                */
                       3779 ; cbar.c   1129 /**************************************************************************/
                       3780 ; cbar.c   1130 int SetCBEmbAudioSignal( UC signal)
                       3781 ; cbar.c   1131 {
000ED5 00              3782         ALIGN   1
                       3784         PUBLIC  _SetCBEmbAudioSignal
000ED6                 3785 _SetCBEmbAudioSignal:
000ED6 0F10            3789         PUSH.W  R4
                       3793 ; cbar.c   1132   Settings.ActivePreset = 0;
000ED8 964842rr        3795         MOV.B   ES,#SEG( _Settings )
000EDC 9918rrrr        3796         MOV.W   R1,#SOF( _Settings )
000EE0 BA10            3797         MOV.W   [R1],#00H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  48

ADDR   CODE            LINE SOURCELINE
                       3798 ; cbar.c   1133 
                       3799 ; cbar.c   1134   Settings.CBSetup.EmbAudioSignal = CBSetup.EmbAudioSignal = signal;
000EE2 8180            3801         MOV.B   R4L,R0L
000EE4 964842rr        3802         MOV.B   ES,#SEG( _CBSetup+10 )
000EE8 9908rrrr        3803         MOV.W   R0,#SOF( _CBSetup+10 )
000EEC 8288            3804         MOV.B   [R0],R4L
000EEE 964842rr        3807         MOV.B   ES,#SEG( _Settings+42 )
000EF2 9908rrrr        3808         MOV.W   R0,#SOF( _Settings+42 )
000EF6 8288            3809         MOV.B   [R0],R4L
                       3810 ; cbar.c   1135   NV_Store( &Settings, SettingsPtr, sizeof( Settings));
000EF8 9918rrrr        3812         MOV.W   R1,#SEG( _Settings )
000EFC 9908rrrr        3813         MOV.W   R0,#SOF( _Settings )
000F00 964842rr        3814         MOV.B   ES,#SEG( _SettingsPtr )
000F04 9928rrrr        3815         MOV.W   R2,#SOF( _SettingsPtr )
000F08 8A22            3816         MOV.W   R2,[R2]
000F0A 9938004A        3817         MOV.W   R3,#04AH
                       3818         CALL    _NV_Store
000F0E C4rrrrrr       +3818 ;       FCALL   _NV_Store
                       3819 ; cbar.c   1136 
                       3820 ; cbar.c   1137   if ( signal == EmbAudioOff)
000F12 6188            3822         OR.B    R4L,R4L
000F14 F206            3823         BNE     _178
                       3824 ; cbar.c   1138     SoundEnable = FALSE;
000F16 964842rr        3826         MOV.B   ES,#SEG( _SoundEnable )
000F1A 9908rrrr        3827         MOV.W   R0,#SOF( _SoundEnable )
000F1E B200            3828         MOV.B   [R0],#00H
000F20 FE18            3829         BR      _179
000F20 FE18            3829         BR      _179
000F22                 3830 _178:
                       3833 ; cbar.c   1139   else
                       3834 ; cbar.c   1140   {
                       3835 ; cbar.c   1141     SoundEnable = TRUE;
000F22 964842rr        3837         MOV.B   ES,#SEG( _SoundEnable )
000F26 9908rrrr        3838         MOV.W   R0,#SOF( _SoundEnable )
000F2A 9208FF          3839         MOV.B   [R0],#0FFH
                       3840 ; cbar.c   1142 
                       3841 ; cbar.c   1143     Blanking = TRUE;                  // Blank line while loading SRAM
000F2D 964842rr        3843         MOV.B   ES,#SEG( _Blanking )
000F31 9908rrrr        3844         MOV.W   R0,#SOF( _Blanking )
000F35 9208FF          3845         MOV.B   [R0],#0FFH
                       3846 ; cbar.c   1144 
                       3847 ; cbar.c   1145     Status &= ~S5S4S3S2;             // Blank the line immediately
000F38 9E1520FFC3      3849         AND.W   _Status,#0FFC3H
                       3850 ; cbar.c   1146     //PLD_StatusPort = Status;
                       3851 ; cbar.c   1147     Update_StatusPort(Status);
000F3D 8E0120          3853         MOV.W   R0,_Status
000F40 C5003C          3854         CALL    _Update_StatusPort
                       3855 ; cbar.c   1148 
                       3856 ; cbar.c   1149     SRAMSoundLoad( signal);           // Download sound information
000F43 8108            3858         MOV.B   R0L,R4L
000F45 C5F8CF          3859         CALL    _SRAMSoundLoad
                       3863 ; cbar.c   1150 
                       3864 ; cbar.c   1151     Blanking = FALSE;
000F48 964842rr        3866         MOV.B   ES,#SEG( _Blanking )
000F4C 9908rrrr        3867         MOV.W   R0,#SOF( _Blanking )
000F50 B200            3868         MOV.B   [R0],#00H
                       3869 ; cbar.c   1152   }
000F52                 3871 _179:
                       3872 ; cbar.c   1153 
                       3873 ; cbar.c   1154   return( OK);
000F52 9908FFFF        3875         MOV.W   R0,#0FFFFH
                       3876 ; cbar.c   1155 }
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  49

ADDR   CODE            LINE SOURCELINE
000F56 2F10            3878         POP.W   R4
000F58 D680            3880         RET
                       3882 ; cbar.c   1156 
                       3883 ; cbar.c   1157 /**************************************************************************/
                       3884 ; cbar.c   1158 /* ValidateCBPattern                                                CBAR.C  */
                       3885 ; cbar.c   1159 /*                                                                        */
                       3886 ; cbar.c   1160 /* Author:   Kim Engedahl, DEV, 000405                                    */
                       3887 ; cbar.c   1161 /* Revised:   000603, KEn, DEV                                             */
                       3888 ; cbar.c   1162 /*                                                                        */
                       3889 ; cbar.c   1163 /* Function:                                                               */
                       3890 ; cbar.c   1164 /* Remarks:                                                                 */
                       3891 ; cbar.c   1165 /* Returns:                                                                */
                       3892 ; cbar.c   1166 /* Updates:                                                                */
                       3893 ; cbar.c   1167 /**************************************************************************/
                       3894 ; cbar.c   1168 int ValidateCBPattern( UC system, UI *pattern)
                       3895 ; cbar.c   1169 {
                       3896         ALIGN   1
                       3898         PUBLIC  _ValidateCBPattern
000F5A                 3899 _ValidateCBPattern:
                       3909 ; cbar.c   1170   if ( system < NTSC_US)
000F5A 910402          3911         CMP.B   R0L,#02H
000F5D F011            3912         BCC     _183
                       3913 ; cbar.c   1171   {
                       3914 ; cbar.c   1172     switch ( *pattern)
000F5F 866C42          3916         MOV.B   ES,R3L
000F62 8A02            3917         MOV.W   R0,[R2]
000F64 99040000        3919         CMP.W   R0,#00H
000F68 F307            3920         BEQ     _182
000F6A 99040002        3921         CMP.W   R0,#02H
000F6E F304            3922         BEQ     _182
000F70 FE00            3923         BR      _180
                       3924 ; cbar.c   1173     {
                       3925 ; cbar.c   1174       case SMPTECBar:
                       3926 ; cbar.c   1175       case FCCCBar:
                       3927 ; cbar.c   1176         *pattern = EBUCBar;
                       3928 ; cbar.c   1177         break;
                       3929 ; cbar.c   1178 
                       3930 ; cbar.c   1179       default:
000F72                 3932 _180:
                       3933 ; cbar.c   1180         return( OK);
000F72 9908FFFF        3935         MOV.W   R0,#0FFFFH
000F76 D680            3936         RET
000F78                 3938 _182:
000F78 866C42          3942         MOV.B   ES,R3L
000F7B BA21            3943         MOV.W   [R2],#01H
                       3944 ; cbar.c   1181     }
                       3945 ; cbar.c   1182   }
000F7D FE1C            3947         BR      _190
000F7D FE1C00          3947         BR      _190
000F80                 3948 _183:
                       3951 ; cbar.c   1183   else
                       3952 ; cbar.c   1184   {
                       3953 ; cbar.c   1185     switch ( *pattern)
000F80 866C42          3955         MOV.B   ES,R3L
000F83 8A02            3956         MOV.W   R0,[R2]
000F85 99040001        3957         CMP.W   R0,#01H
000F89 F313            3958         BEQ     _188
000F8B 99040005        3959         CMP.W   R0,#05H
000F8F F310            3960         BEQ     _188
000F91 99040006        3961         CMP.W   R0,#06H
000F95 F30D            3962         BEQ     _188
000F97 99040009        3963         CMP.W   R0,#09H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  50

ADDR   CODE            LINE SOURCELINE
000F9B F302            3964         BEQ     _184
000F9D FE06            3965         BR      _185
                       3966 ; cbar.c   1186     {
                       3967 ; cbar.c   1187       case EBUCBar:
                       3968 ; cbar.c   1188       case CBarGrey75:
                       3969 ; cbar.c   1189       case CBarRed75:
                       3970 ; cbar.c   1190         *pattern = SMPTECBar;
                       3971 ; cbar.c   1191         break;
                       3972 ; cbar.c   1192 
                       3973 ; cbar.c   1193       case CCIR18:
000FA0                 3975 _184:
                       3976 ; cbar.c   1194         *pattern = Multiburst;
000FA0 866C42          3978         MOV.B   ES,R3L
000FA3 9A280008        3979         MOV.W   [R2],#08H
                       3980 ; cbar.c   1195         break;
000FA7 FE07            3982         BR      _190
                       3983 ; cbar.c   1196 
                       3984 ; cbar.c   1197       default:
000FAA                 3986 _185:
                       3987 ; cbar.c   1198         return( OK);
000FAA 9908FFFF        3989         MOV.W   R0,#0FFFFH
000FAE D680            3990         RET
000FB0                 3992 _188:
000FB0 866C42          3996         MOV.B   ES,R3L
000FB3 BA20            3997         MOV.W   [R2],#00H
                       3998 ; cbar.c   1199     }
                       3999 ; cbar.c   1200   }
000FB6                 4001 _190:
                       4002 ; cbar.c   1201 
                       4003 ; cbar.c   1202   return( FAIL);
000FB6 B900            4005         MOV.W   R0,#00H
                       4006 ; cbar.c   1203 }/**************************************************************************/
000FB8                 4008 _192:
000FB8 D680            4009         RET
                       4012 ; cbar.c   1204 /* Update_StatusPort                                              CBAR.C  */
                       4013 ; cbar.c   1205 /*                                                                        */
                       4014 ; cbar.c   1206 /* Author:   Kim Stefensen                                                */
                       4015 ; cbar.c   1207 /* Revised:   000617, KEn, DEV                                             */
                       4016 ; cbar.c   1208 /*                                                                        */
                       4017 ; cbar.c   1209 /* Function:    It have been determend that under some conditions          */
                       4018 ; cbar.c   1210 /*              when writing to contens of status to the StatusPort        */   
                       4019 ; cbar.c   1211 /*              a addressing error i introduced !                         */
                       4020 ; cbar.c   1212 /*              To awoid this problem a the following routine forces the  */
                       4021 ; cbar.c   1213 /*              C-compiler to use a R register as the source.             */     
                                
                       4022 ; cbar.c   1214 /* Remarks:                                                                */
                       4023 ; cbar.c   1215 /* Returns:                                                                */
                       4024 ; cbar.c   1216 /* Updates:                                                                */
                       4025 ; cbar.c   1217 /**************************************************************************/
                       4026 ; cbar.c   1218 int Update_StatusPort(UI TempStatus)
                       4027 ; cbar.c   1219 {
                       4028         ALIGN   1
                       4030         PUBLIC  _Update_StatusPort
000FBA                 4031 _Update_StatusPort:
                       4039 ; cbar.c   1220 UI temp_status;
                       4040 ; cbar.c   1221 
                       4041 ; cbar.c   1222    temp_status = TempStatus;
                       4042 ; cbar.c   1223    temp_status &= 0x7FFF;       // Forsing the compiler to write from a register 
                            instead from a
000FBA 99057FFF        4044         AND.W   R0,#07FFFH
                       4047 ; cbar.c   1224                                 // internal memory lacation.
                       4048 ; cbar.c   1225    SDApin =1;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  51

ADDR   CODE            LINE SOURCELINE
000FBE 08138E          4050         SETB    0431H.6
                       4051 ; cbar.c   1226    PLD_StatusPort = (int)temp_status; // Update status port
000FC1 96484206        4053         MOV.B   ES,#SEG( _PLD_StatusPort )
000FC5 9918A000        4054         MOV.W   R1,#SOF( _PLD_StatusPort )
000FC9 8A09            4055         MOV.W   [R1],R0
                       4056 ; cbar.c   1227    //StatusPort = Status;       // Update status port
                       4057 ; cbar.c   1228    SDApin =0;
000FCB 08038E          4059         CLR     0431H.6
                       4060 ; cbar.c   1229    return( OK);
000FCE 9908FFFF        4062         MOV.W   R0,#0FFFFH
                       4064 ; cbar.c   1230 }
000FD2 D680            4066         RET
                       4068 ; cbar.c   1231 
000122                 4074         DSEG AT 0122H
                       4075         ALIGN   1
000122                 4076 _TablePtr:      DS      4
   |  RESERVED             
000125
000002                 4078         RSEG    CBAR_CLR_FA
                       4079         ALIGN   1
000002                 4080 _newTablePtr:   DS      4
   |  RESERVED             
000005
                       4081         EXTRN   HCODE(__UMODL)
000006 RESERVED        4083 _SoundEnable:   DS      1
000006
00012C                 4085         DSEG AT 012CH
00012C RESERVED        4086 _SoundCnt:      DS      1
00012C
                       4091         EXTRN   HCODE(_TransmitIIC)
000128                 4093         DSEG AT 0128H
000128 RESERVED        4094 _FrameCnt:      DS      1
000128
06A004                 4097         HSEG AT 06A004H
                       4098         PUBLIC  _HOffsetPort
                       4099         ALIGN   1
06A004                 4100 _HOffsetPort:   DS      2
   |  RESERVED             
06A005
                       4102         EXTRN   HDATA(_TestLEDMirror)
                       4105         EXTRN   HCODE(_tvp6k_system)
000007                 4108         RSEG    CBAR_CLR_FA
                       4109         PUBLIC  _CBSetup
000007 RESERVED        4110         ALIGN   1
000007
000008                 4111 _CBSetup:       DS      12
   |  RESERVED             
000013
00012B                 4113         DSEG AT 012BH
00012B RESERVED        4114 _SoundFrameCnt: DS      1
00012B
                       4117         EXTRN   HCODE(_LEDSet)
00012D                 4119         DSEG AT 012DH
00012D RESERVED        4120 _SoundPtr:      DS      1
00012D
000014                 4122         RSEG    CBAR_CLR_FA
000014 RESERVED        4123 _Blanking:      DS      1
000014
044000                 4126         HSEG AT 044000H
                       4127         PUBLIC  _SRAMVideoPort
                       4128         ALIGN   1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  52

ADDR   CODE            LINE SOURCELINE
044000                 4129 _SRAMVideoPort: DS      2
   |  RESERVED             
044001
04A000                 4133         HCSEG AT 04A000H
                       4134         PUBLIC  _SoundSignalArray
                       4135         ALIGN   1
                       4135         ALIGN   1
04A000                 4136 _SoundSignalArray:      DS      9216
   |  RESERVED             
04C3FF
                       4139         EXTRN   HCODE(_Write_AD8402)
                       4141         EXTRN   HDATA(_SettingsPtr)
000015                 4144         RSEG    CBAR_CLR_FA
                       4145         PUBLIC  _PhaseOffset
000015 RESERVED        4146         ALIGN   1
000015
000016                 4147 _PhaseOffset:   DS      2
   |  RESERVED             
000017
06A00C                 4150         HSEG AT 06A00CH
                       4151         PUBLIC  _LEDPort
                       4152         ALIGN   1
06A00C                 4153 _LEDPort:       DS      2
   |  RESERVED             
06A00D
                       4155         EXTRN   HDATA(_GenlockSetup)
                       4157         EXTRN   HDATA(_Settings)
000126                 4159         DSEG AT 0126H
                       4160         ALIGN   1
000126                 4161 _LineCnt:       DS      2
   |  RESERVED             
000127
00012A                 4163         DSEG AT 012AH
00012A RESERVED        4164 _SyncLinePtr:   DS      1
00012A
                       4166         EXTRN   HDATA(_LEDMirror)
                       4169         EXTRN   HCODE(_NV_Store)
                       4171         EXTRN   HDATA(_Calibration)
000129                 4173         DSEG AT 0129H
000129 RESERVED        4174 _SyncLineCnt:   DS      1
000129
050000                 4178         HCSEG AT 050000H
                       4179         PUBLIC  _VideoSignalArray
                       4180         ALIGN   1
                       4180         ALIGN   1
050000                 4181 _VideoSignalArray:      DS      196608
   |  RESERVED             
07FFFF
00012E                 4183         DSEG AT 012EH
00012E RESERVED        4184 _SoundPtrMax:   DS      1
00012E
06A014                 4187         HSEG AT 06A014H
                       4188         PUBLIC  _TestLEDPort
                       4189         ALIGN   1
06A014                 4190 _TestLEDPort:   DS      2
   |  RESERVED             
06A015
                       4191         EXTRN   IDATA(__lc_bs)
000120                 4193         DSEG AT 0120H
                       4194         ALIGN   1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  53

ADDR   CODE            LINE SOURCELINE
000120                 4195 _Status:        DS      2
   |  RESERVED             
000121
06A000                 4198         HSEG AT 06A000H
                       4199         PUBLIC  _PLD_StatusPort
                       4200         ALIGN   1
06A000                 4201 _PLD_StatusPort:        DS      2
   |  RESERVED             
06A001
                       4202         EXTRN   HCODE(__SDIVL)
040000                 4205         HSEG AT 040000H
                       4206         PUBLIC  _SRAMSoundPort
                       4207         ALIGN   1
040000                 4208 _SRAMSoundPort: DS      2
   |  RESERVED             
040001
000018                 4210         RSEG    CBAR_CLR_FA
000018 RESERVED        4211 _NewPattern:    DS      1
000018
000000                 4214 CBAR_CLR_NE@DS  SEGMENT DATA JOIN CLEAR
000000                 4215         RSEG    CBAR_CLR_NE@DS
                       4216         PUBLIC  _TimeTickCounter
                       4217         ALIGN   1
000000                 4218 _TimeTickCounter:       DS      2
   |  RESERVED             
000001
                       4219         EXTRN   HCODE(__UDIVL)
06A008                 4222         HSEG AT 06A008H
                       4223         PUBLIC  _ChromaGainPort
                       4224         ALIGN   1
06A008                 4225 _ChromaGainPort:        DS      2
   |  RESERVED             
06A009
000002                 4228         RSEG    CBAR_CLR_NE@DS
                       4229         PUBLIC  _LineOffset
                       4230         ALIGN   1
000002                 4231 _LineOffset:    DS      2
   |  RESERVED             
000003
                       4232         EXTRN   DATA(__lc_ub_xvwbuffer)
                       4233         EXTRN   DATA(__lc_ue_xvwbuffer)
                       4234         CALLS   'WriteCBGain', 'Write_AD8402'
                       4235         CALLS   'SRAMVideoLoad', 'Update_StatusPort'
                       4236         CALLS   'SRAMSoundLoad', 'Update_StatusPort'
                       4237         CALLS   'CBLineInterrupt', 'Update_StatusPort'
                       4238         CALLS   'CBDefaults', 'NV_Store'
                       4239         CALLS   'CBInit', 'Update_StatusPort'
                       4240         CALLS   'CBUpdate', 'SetCBSystem'
                       4241         CALLS   'CBUpdate', 'SetCBDelay'
                       4242         CALLS   'CBUpdate', 'SetCBScHPhase'
                       4243         CALLS   'CBUpdate', 'SetCBEmbAudioSignal'
                       4244         CALLS   'SetCBPattern', 'ValidateCBPattern'
                       4245         CALLS   'SetCBPattern', 'NV_Store'
                       4246         CALLS   'SetCBPattern', 'Update_StatusPort'
                       4247         CALLS   'SetCBPattern', 'SRAMVideoLoad'
                       4248         CALLS   'SetCBSystem', 'NV_Store'
                       4249         CALLS   'SetCBSystem', 'Update_StatusPort'
                       4250         CALLS   'SetCBSystem', 'WriteCBGain'
                       4251         CALLS   'SetCBSystem', 'WriteCBChromaGain'
                       4252         CALLS   'SetCBSystem', 'Update_StatusPort'
                       4253         CALLS   'SetCBSystem', 'WriteCBGain'
                       4254         CALLS   'SetCBSystem', 'WriteCBChromaGain'
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  54

ADDR   CODE            LINE SOURCELINE
                       4255         CALLS   'SetCBSystem', 'tvp6k_system'
                       4256         CALLS   'SetCBSystem', 'ValidateCBPattern'
                       4257         CALLS   'SetCBSystem', 'SetCBPattern'
                       4258         CALLS   'SetCBSystem', 'SetCBScHPhase'
                       4259         CALLS   'SetCBSystem', 'LEDSet'
                       4260         CALLS   'SetCBDelay', 'NV_Store'
                       4261         CALLS   'SetCBDelay', 'Update_StatusPort'
                       4262         CALLS   'SetCBScHPhase', 'NV_Store'
                       4263         CALLS   'SetCBScHPhase', 'TransmitIIC'
                       4264         CALLS   'SetCBEmbAudioSignal', 'NV_Store'
                       4265         CALLS   'SetCBEmbAudioSignal', 'Update_StatusPort'
                       4266         CALLS   'SetCBEmbAudioSignal', 'SRAMSoundLoad'
