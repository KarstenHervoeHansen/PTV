XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   1
C:\LT428\work\ver.4_9\temp\xa\util.src
ADDR   CODE            LINE SOURCELINE
                          1 ; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
                          2 ; options: -A1 -Cxag3 -e -g -Ic:\cxa\include -Ic:\LT428\rtxc\xa\include -I. -Ml
                          3 ;          -O2 -s
                          5 $NOZPAGE
                          6         NAME    UTIL
                         10 ; util.c      1 /****************************************************************************/
                         11 ; util.c      2 /* MODULE:                                                                  */
                         12 ; util.c      3 /*  util.c -    General purpose utility function                                 
                                                                                                                    */
                         13 ; util.c      4 /****************************************************************************/
                         14 ; util.c      5 /* FUNCTIONS:                                                               */
                         15 ; util.c      6 /*                                                                          */
                         16 ; util.c      7 /*                                                                          */
                         17 ; util.c      8 /* TASKS:                                                                   */
                         18 ; util.c      9 /*                                                                          */
                         19 ; util.c     10 /* NOTES:                                                                   */
                         20 ; util.c     11 /*                                                                          */
                         21 ; util.c     12 /****************************************************************************/
                         22 ; util.c     13 /*
                         23 ; util.c     14  *   PTV software for PT5201    
                         24 ; util.c     15  *   Copyright (c) 
                         25 ; util.c     16  *   ProTeleVision Technologies A/S.
                         26 ; util.c     17  *   ALL RIGHTS RESERVED
                         27 ; util.c     18 */
                         28 ; util.c     19 /**************************************************************************/
                         29 ; util.c     20 /* Include files:                                                                
                                                                                                                             
                                                                                                    */
                         30 ; util.c     21 #include <stdio.h>
                         51 ; util.c     22 #include <string.h>
                         54 ; util.c     23 #include <ctype.h>
                         57 ; util.c     24 
                         58 ; util.c     25 #include "define.h"
                         61 ; util.c     26 #include "util.h"
                         64 ; util.c     27 
                         65 ; util.c     28 /*************************************************************************/
                         66 ; util.c     29 /*      NONE                                                                     
                                                                                                                             
                                                                                    UTIL.C */
                         67 ; util.c     30 /*                                                                               
                                                                                                                             
                                                                                                                             
                            */
                         68 ; util.c     31 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                     */
                         69 ; util.c     32 /* Revised:             970105                                                   
                                                                                                                             
                                                             */
                         70 ; util.c     33 /*                                                                               
                                                                                                                             
                                                                                                                             
                            */
                         71 ; util.c     34 /*      Function:       DOES ABSOLUTELY NOTHING!!!                               
                                                                                                                     */
                         72 ; util.c     35 /*      Remarks:                This one is primarily used in menu tables        
                                                                             */
                         73 ; util.c     36 /*      Returns:                --                                               
                                                                                                                             
                                                                                             */
                         74 ; util.c     37 /*      Updates:                --                                               
                                                                                                                             
                                                                                             */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   2

ADDR   CODE            LINE SOURCELINE
                         75 ; util.c     38 /*************************************************************************/
                         76 ; util.c     39 void None( void)
                         77 ; util.c     40 {
000000                   78 UTIL_PR SEGMENT HCODE
000000                   79         RSEG    UTIL_PR
                         80         ALIGN   1
                         82         PUBLIC  _None
000000                   83 _None:
                         87 ; util.c     41 }
000000 D680              89         RET
                         91 ; util.c     42 
                         92 ; util.c     43 /**************************************************************************/
                         93 ; util.c     44 /* BitPos                                                                        
                                                                                                                             
                                                                               UTIL.C */
                         94 ; util.c     45 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                         95 ; util.c     46 /* Author:              Kim Engedahl, DEV, 970919                                
                                                                                                                            *
                            /
                         96 ; util.c     47 /* Revised:             970919                                                   
                                                                                                                             
                                                                      */
                         97 ; util.c     48 /*                                                                               
                                                                                                                             
                                                                                                                             
                                      */
                         98 ; util.c     49 /* Function:    Return the bit position of a variable                            
                                                                                      */
                         99 ; util.c     50 /* Remarks:     If parameter contains more than one bit the number of the       *
                            /
                        100 ; util.c     51 /*                                              first bit is returned            
                                                                                                                             
                                                                    */
                        101 ; util.c     52 /* Returns:             --                                                       
                                                                                                                             
                                                                                                      */
                        102 ; util.c     53 /* Updates:             --                                                       
                                                                                                                             
                                                                                                    */
                        103 ; util.c     54 /**************************************************************************/
                        104 ; util.c     55 UC BitPos( UC value)
                        105 ; util.c     56 {
                        106         ALIGN   1
                        108         PUBLIC  _BitPos
000002                  109 _BitPos:
                        117 ; util.c     57 
                        118 ; util.c     58         UC cnt = 1;
000002 912801           120         MOV.B   R1L,#01H
                        122 ; util.c     59 
                        123 ; util.c     60         while ( !( value & 0x01) && ( cnt < 9))
000005 8110             125         MOV.B   R0H,R0L
000007 911501           126         AND.B   R0H,#01H
00000A F208             127         BNE     _9
00000A F208             127         BNE     _9
00000C                  128 _7:
                        129 ; util.c     61         {
                        130 ; util.c     62                 cnt++;
00000C A121             132         ADDS.B  R1L,#01H
                        135 ; util.c     63                 value >>= 1;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   3

ADDR   CODE            LINE SOURCELINE
00000E D001             137         LSR.B   R0L,#01H
000010 8110             139         MOV.B   R0H,R0L
000012 911501           140         AND.B   R0H,#01H
000015 F203             141         BNE     _9
000017 912409           142         CMP.B   R1L,#09H
00001A F1F8             143         BCS     _7
                        144 ; util.c     64         }
00001C                  146 _9:
                        147 ; util.c     65 
                        148 ; util.c     66         return( cnt);
00001C 8102             150         MOV.B   R0L,R1L
                        153 ; util.c     67 }
00001E D680             155         RET
                        158 ; util.c     68 
                        159 ; util.c     69 /**************************************************************************/
                        160 ; util.c     70 /* HexToByte                                                                     
                                                                                                                             
                                                                       UTIL.C       */
                        161 ; util.c     71 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        162 ; util.c     72 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                        163 ; util.c     73 /* Revised:             970105                                                   
                                                                                                                             
                                                                            */
                        164 ; util.c     74 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        165 ; util.c     75 /* Function:    Converts a char defined in hex to binary                         
                                                                                    */
                        166 ; util.c     76 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                        167 ; util.c     77 /* Returns:             A byte from 0-15                                         
                                                                                                                             
                                                                    */
                        168 ; util.c     78 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                        169 ; util.c     79 /**************************************************************************/
                        170 ; util.c     80 UC HexToByte( char s) {
                        171         ALIGN   1
                        173         PUBLIC  _HexToByte
000020                  174 _HexToByte:
000020 0F10             178         PUSH.W  R4
                        182 ; util.c     81 
                        183 ; util.c     82         toupper( s);
000022 8180             185         MOV.B   R4L,R0L
000024 8108             186         MOV.B   R0L,R4L
000026 9019             187         SEXT.B  R0H
                        190         CALL    _toupper
000028 C4rrrrrr        +190 ;       FCALL   _toupper
                        191 ; util.c     83 
                        192 ; util.c     84         if (( s >= 'A') && ( s <= 'F'))
00002C 918441           194         CMP.B   R4L,#041H
00002F FB07             195         BLT     _12
000031 918446           196         CMP.B   R4L,#046H
000034 FC04             197         BGT     _12
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   4

ADDR   CODE            LINE SOURCELINE
                        198 ; util.c     85                 return( s - 'A' + 10);
000036 918237           200         SUB.B   R4L,#037H
000039 8108             202         MOV.B   R0L,R4L
00003B FE04             203         BR      _13
00003B FE0400           203         BR      _13
00003E                  204 _12:
                        206 ; util.c     86 
                        207 ; util.c     87         return( s - '0');
00003E 918230           209         SUB.B   R4L,#030H
000041 8108             211         MOV.B   R0L,R4L
                        212 ; util.c     88 }
000044                  214 _13:
000044 2F10             215         POP.W   R4
000046 D680             217         RET
                        219 ; util.c     89 
                        220 ; util.c     90 /**************************************************************************/
                        221 ; util.c     91 /* htol                                                                          
                                                                                                                             
                                                                                             UTIL.C */
                        222 ; util.c     92 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        223 ; util.c     93 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                        224 ; util.c     94 /* Revised:             970105                                                   
                                                                                                                             
                                                                            */
                        225 ; util.c     95 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        226 ; util.c     96 /* Function:    Converts a string containg a hex number to an unsigned long     *
                            /
                        227 ; util.c     97 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                        228 ; util.c     98 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                        229 ; util.c     99 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                        230 ; util.c    100 /**************************************************************************/
                        231 ; util.c    101 UC htol( char* s, UL* result)
                        232 ; util.c    102 {
                        233         ALIGN   1
                        235         PUBLIC  _htol
000048                  236 _htol:
000048 0F30             242         PUSH.W  R4, R5
00004A A978             244         ADDS.W  R7,#08H
                        250 ; util.c    103         *result = 0;
00004C 866C42           252         MOV.B   ES,R3L
00004F BA20             253         MOV.W   [R2],#00H
000051 BC2002           254         MOV.W   [R2+2],#00H
000054 8C3F06           255         MOV.W   [R7+6],R3
000057 8C2F04           256         MOV.W   [R7+4],R2
                        259 ; util.c    104 
                        260 ; util.c    105         while ( *s)
00005A 8951             262         MOV.W   R5,R1
00005C 8940             263         MOV.W   R4,R0
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   5

ADDR   CODE            LINE SOURCELINE
00005E 86AC42           264         MOV.B   ES,R5L
000061 8204             265         MOV.B   R0L,[R4]
000063 F323             266         BEQ     _17
000063 F32300           266         BEQ     _17
000066                  267 _16:
                        268 ; util.c    106                 *result = 16*(*result) + HexToByte( *s++);
000066 8C1706           270         MOV.W   R1,[R7+6]
000069 8C0704           271         MOV.W   R0,[R7+4]
00006C 862C42           272         MOV.B   ES,R1L
00006F 8C1002           273         MOV.W   R1,[R0+2]
000072 8A00             274         MOV.W   R0,[R0]
000074 DD04             275         ASL.D   R0,#04H
000076 8C1F02           276         MOV.W   [R7+2],R1
000079 8A0F             277         MOV.W   [R7],R0
00007B 86AC42           278         MOV.B   ES,R5L
00007E 8204             279         MOV.B   R0L,[R4]
000080 C5FFCF           280         CALL    _HexToByte
000083 B110             281         MOVS.B  R0H,#00H
000085 B910             282         MOVS.W  R1,#00H
000087 8C3702           283         MOV.W   R3,[R7+2]
00008A 8A27             284         MOV.W   R2,[R7]
00008C 0902             285         ADD.W   R0,R2
00008E 1913             286         ADDC.W  R1,R3
000090 8C3706           287         MOV.W   R3,[R7+6]
000093 8C2704           288         MOV.W   R2,[R7+4]
000096 866C42           289         MOV.B   ES,R3L
000099 8A0A             290         MOV.W   [R2],R0
00009B 8C1A02           291         MOV.W   [R2+2],R1
00009E 99400001         296         ADD.W   R4,#01H
0000A2 86AC42           298         MOV.B   ES,R5L
0000A5 8204             299         MOV.B   R0L,[R4]
0000A7 F2DF             300         BNE     _16
0000AA                  302 _17:
                        303 ; util.c    107 
                        304 ; util.c    108         return( 0);
0000AA 910800           306         MOV.B   R0L,#00H
                        307 ; util.c    109 }
0000AD 99700008         309         ADD.W   R7,#08H
0000B1 2F30             311         POP.W   R4, R5
0000B3 D680             313         RET
                        316 ; util.c    110 
                        317 ; util.c    111 /**************************************************************************/
                        318 ; util.c    112 /* otol                                                                          
                                                                                                                             
                                                                                       UTIL.C       */
                        319 ; util.c    113 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        320 ; util.c    114 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                        321 ; util.c    115 /* Revised:             970105                                                   
                                                                                                                             
                                                                            */
                        322 ; util.c    116 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        323 ; util.c    117 /* Function:    Converts a string containg an octal number to unsinged long     *
                            /
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   6

ADDR   CODE            LINE SOURCELINE
                        324 ; util.c    118 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                        325 ; util.c    119 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                        326 ; util.c    120 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                        327 ; util.c    121 /**************************************************************************/
                        328 ; util.c    122 UC otol( char* s, UL* result)
                        329 ; util.c    123 {
0000B5 00               330         ALIGN   1
                        332         PUBLIC  _otol
0000B6                  333 _otol:
0000B6 0F70             337         PUSH.W  R4, R5, R6
0000B8 A97C             339         ADDS.W  R7,#0CH
                        345 ; util.c    124         *result = 0;
0000BA 866C42           347         MOV.B   ES,R3L
0000BD BA20             348         MOV.W   [R2],#00H
0000BF BC2002           349         MOV.W   [R2+2],#00H
                        350 ; util.c    125 
                        351 ; util.c    126         while ( *s)
0000C2 862C42           353         MOV.B   ES,R1L
0000C5 8280             354         MOV.B   R4L,[R0]
0000C7 F31E             355         BEQ     _19
0000C7 F31E00           355         BEQ     _19
0000CA                  356 _18:
                        357 ; util.c    127                 *result = 8*(*result) + ( *s++ - '0');
0000CA 866C42           359         MOV.B   ES,R3L
0000CD 8A42             360         MOV.W   R4,[R2]
0000CF 8C5202           361         MOV.W   R5,[R2+2]
0000D2 DD43             362         ASL.D   R4,#03H
0000D4 8C1F02           363         MOV.W   [R7+2],R1
0000D7 8A0F             364         MOV.W   [R7],R0
0000D9 862C42           365         MOV.B   ES,R1L
0000DC 82C0             366         MOV.B   R6L,[R0]
0000DE 90D9             367         SEXT.B  R6H
0000E0 99620030         368         SUB.W   R6,#030H
0000E4 8906             369         MOV.W   R0,R6
0000E6 9819             370         SEXT.W  R1
0000E8 0940             371         ADD.W   R4,R0
0000EA 1951             372         ADDC.W  R5,R1
0000EC 866C42           373         MOV.B   ES,R3L
0000EF 8A4A             374         MOV.W   [R2],R4
0000F1 8C5A02           375         MOV.W   [R2+2],R5
0000F4 8C1702           376         MOV.W   R1,[R7+2]
0000F7 8A07             377         MOV.W   R0,[R7]
0000F9 99000001         378         ADD.W   R0,#01H
0000FD 862C42           380         MOV.B   ES,R1L
000100 8280             381         MOV.B   R4L,[R0]
000102 F2E3             382         BNE     _18
000104                  384 _19:
                        385 ; util.c    128 
                        386 ; util.c    129         return( 0);
000104 910800           388         MOV.B   R0L,#00H
                        389 ; util.c    130 }
000107 A974             391         ADDS.W  R7,#04H
000109 2F70             393         POP.W   R4, R5, R6
00010B D680             395         RET
                        398 ; util.c    131 
                        399 ; util.c    132 /**************************************************************************/
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   7

ADDR   CODE            LINE SOURCELINE
                        400 ; util.c    133 /* btol                                                                          
                                                                                                                             
                                                                                       UTIL.C       */
                        401 ; util.c    134 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        402 ; util.c    135 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                        403 ; util.c    136 /* Revised:             970105                                                   
                                                                                                                             
                                                                            */
                        404 ; util.c    137 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        405 ; util.c    138 /* Function:    Converts a string containg a binary number to unsigned long     *
                            /
                        406 ; util.c    139 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                        407 ; util.c    140 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                        408 ; util.c    141 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                        409 ; util.c    142 /**************************************************************************/
                        410 ; util.c    143 UC btol( char* s, UL* result)
                        411 ; util.c    144 {
00010D 00               412         ALIGN   1
                        414         PUBLIC  _btol
00010E                  415 _btol:
00010E 0F70             419         PUSH.W  R4, R5, R6
000110 A97C             421         ADDS.W  R7,#0CH
                        427 ; util.c    145         *result = 0;
000112 866C42           429         MOV.B   ES,R3L
000115 BA20             430         MOV.W   [R2],#00H
000117 BC2002           431         MOV.W   [R2+2],#00H
                        432 ; util.c    146 
                        433 ; util.c    147         while ( *s)
00011A 862C42           435         MOV.B   ES,R1L
00011D 8280             436         MOV.B   R4L,[R0]
00011F F31E             437         BEQ     _21
00011F F31E00           437         BEQ     _21
000122                  438 _20:
                        439 ; util.c    148                 *result = 2*(*result) + ( *s++ - '0');
000122 866C42           441         MOV.B   ES,R3L
000125 8A42             442         MOV.W   R4,[R2]
000127 8C5202           443         MOV.W   R5,[R2+2]
00012A DD41             444         ASL.D   R4,#01H
00012C 8C1F02           445         MOV.W   [R7+2],R1
00012F 8A0F             446         MOV.W   [R7],R0
000131 862C42           447         MOV.B   ES,R1L
000134 82C0             448         MOV.B   R6L,[R0]
000136 90D9             449         SEXT.B  R6H
000138 99620030         450         SUB.W   R6,#030H
00013C 8906             451         MOV.W   R0,R6
00013E 9819             452         SEXT.W  R1
000140 0940             453         ADD.W   R4,R0
000142 1951             454         ADDC.W  R5,R1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   8

ADDR   CODE            LINE SOURCELINE
000144 866C42           455         MOV.B   ES,R3L
000147 8A4A             456         MOV.W   [R2],R4
000149 8C5A02           457         MOV.W   [R2+2],R5
00014C 8C1702           458         MOV.W   R1,[R7+2]
00014F 8A07             459         MOV.W   R0,[R7]
000151 99000001         460         ADD.W   R0,#01H
000155 862C42           462         MOV.B   ES,R1L
000158 8280             463         MOV.B   R4L,[R0]
00015A F2E3             464         BNE     _20
00015C                  466 _21:
                        467 ; util.c    149 
                        468 ; util.c    150         return( 0);
00015C 910800           470         MOV.B   R0L,#00H
                        471 ; util.c    151 }
00015F A974             473         ADDS.W  R7,#04H
000161 2F70             475         POP.W   R4, R5, R6
000163 D680             477         RET
                        480 ; util.c    152 
                        481 ; util.c    153 /**************************************************************************/
                        482 ; util.c    154 /* _ultoa                                                                        
                                                                                                                             
                                                                                       UTIL.C       */
                        483 ; util.c    155 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        484 ; util.c    156 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                        485 ; util.c    157 /* Revised:             970219                                                   
                                                                                                                             
                                                                            */
                        486 ; util.c    158 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        487 ; util.c    159 /* Function:    Converts an unsigned long to a string                            
                                                                                            */
                        488 ; util.c    160 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                        489 ; util.c    161 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                        490 ; util.c    162 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                        491 ; util.c    163 /**************************************************************************/
                        492 ; util.c    164 void _ultoa( UL val, char* result)
                        493 ; util.c    165 {
000165 00               494         ALIGN   1
                        496         PUBLIC  __ultoa
000166                  497 __ultoa:
000166 0F70             501         PUSH.W  R4, R5, R6
000168 A978             503         ADDS.W  R7,#08H
00016A 8C3F06           507         MOV.W   [R7+6],R3
00016D 8C2F04           508         MOV.W   [R7+4],R2
                        517 ; util.c    166         UL tmp = val;
                        518 ; util.c    167         UC i=0, j=0, TmpChar;
000170 91C800           520         MOV.B   R6L,#00H
000173 91D800           525         MOV.B   R6H,#00H
                        529 ; util.c    168 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   9

ADDR   CODE            LINE SOURCELINE
                        530 ; util.c    169         if ( val == 0)
000176 8931             532         MOV.W   R3,R1
000178 8920             533         MOV.W   R2,R0
00017A 6910             534         OR.W    R1,R0
00017C F20A             537         BNE     _29
                        538 ; util.c    170                 strcpy( result, "0");
00017E 8C1706           540         MOV.W   R1,[R7+6]
000181 8C0704           541         MOV.W   R0,[R7+4]
000184 9938rrrr         542         MOV.W   R3,#SEG( _22 )
000188 9928rrrr         543         MOV.W   R2,#SOF( _22 )
                        544         CALL    _strcpy
00018C C4rrrrrr        +544 ;       FCALL   _strcpy
000190 FE61             549         BR      _34
000190 FE61             549         BR      _34
000192                  550 _29:
                        557 ; util.c    171         else
                        558 ; util.c    172         {
                        559 ; util.c    173                 while ( val)
000192 8953             561         MOV.W   R5,R3
000194 8942             562         MOV.W   R4,R2
000196 6932             563         OR.W    R3,R2
000198 F326             566         BEQ     _31
000198 F326             566         BEQ     _31
00019A                  567 _30:
                        568 ; util.c    174                 {
                        569 ; util.c    175                         tmp = val / 10;
00019A 8915             571         MOV.W   R1,R5
00019C 8904             572         MOV.W   R0,R4
00019E B930             573         MOV.W   R3,#00H
0001A0 9928000A         574         MOV.W   R2,#0AH
0001A4 C4rrrrrr         575         FCALL   __UDIVL
0001A8 8C1F02           576         MOV.W   [R7+2],R1
0001AB 8A0F             577         MOV.W   [R7],R0
                        579 ; util.c    176                         result[i++] = (val % 10) + '0';
0001AD 8915             581         MOV.W   R1,R5
0001AF 8904             582         MOV.W   R0,R4
0001B1 B930             583         MOV.W   R3,#00H
0001B3 9928000A         584         MOV.W   R2,#0AH
0001B7 C4rrrrrr         585         FCALL   __UMODL
0001BB 8180             589         MOV.B   R4L,R0L
0001BD 918030           590         ADD.B   R4L,#030H
0001C0 810C             591         MOV.B   R0L,R6L
0001C2 B110             592         MOVS.B  R0H,#00H
0001C4 8920             593         MOV.W   R2,R0
0001C6 B930             594         MOVS.W  R3,#00H
0001C8 8C1706           595         MOV.W   R1,[R7+6]
0001CB 8C0704           596         MOV.W   R0,[R7+4]
0001CE 0902             597         ADD.W   R0,R2
0001D0 862C42           598         MOV.B   ES,R1L
0001D3 8288             599         MOV.B   [R0],R4L
0001D5 A1C1             600         ADDS.B  R6L,#01H
                        603 ; util.c    177                         val = tmp;
0001D7 8C5702           605         MOV.W   R5,[R7+2]
0001DA 8A47             606         MOV.W   R4,[R7]
0001DC 8C1702           609         MOV.W   R1,[R7+2]
0001DF 8A07             610         MOV.W   R0,[R7]
0001E1 6910             611         OR.W    R1,R0
0001E3 F2DB             614         BNE     _30
                        615 ; util.c    178                 }
0001E6                  617 _31:
                        618 ; util.c    179                 result[i--] = '\0';
0001E6 810C             620         MOV.B   R0L,R6L
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  10

ADDR   CODE            LINE SOURCELINE
0001E8 B110             621         MOVS.B  R0H,#00H
0001EA B910             623         MOVS.W  R1,#00H
0001EC 8C3706           624         MOV.W   R3,[R7+6]
0001EF 8C2704           625         MOV.W   R2,[R7+4]
0001F2 0920             626         ADD.W   R2,R0
0001F4 866C42           627         MOV.B   ES,R3L
0001F7 B220             628         MOV.B   [R2],#00H
0001F9 A1CF             629         ADDS.B  R6L,#0FH
0001FB 814C             631         MOV.B   R2L,R6L
0001FD 910800           633         MOV.B   R0L,#00H
000200 B110             634         MOVS.B  R0H,#00H
000202 B910             635         MOVS.W  R1,#00H
000204 8C5706           636         MOV.W   R5,[R7+6]
000207 8C4704           637         MOV.W   R4,[R7+4]
00020A 0940             638         ADD.W   R4,R0
00020C 8C5F02           640         MOV.W   [R7+2],R5
00020F 8A4F             641         MOV.W   [R7],R4
                        643 ; util.c    180 
                        644 ; util.c    181                 while ( i >= j)                                                 /
                            / Reverse ASCII string
000211 914400           646         CMP.B   R2L,#00H
000214 F11F             647         BCS     _34
000214 F11F             647         BCS     _34
000216                  648 _32:
                        649 ; util.c    182                 {
                        650 ; util.c    183                         TmpChar = result[i];
000216 8184             652         MOV.B   R4L,R2L
000218 B190             653         MOVS.B  R4H,#00H
00021A B950             654         MOVS.W  R5,#00H
00021C 8C1706           655         MOV.W   R1,[R7+6]
00021F 8C0704           656         MOV.W   R0,[R7+4]
000222 0904             657         ADD.W   R0,R4
000224 862C42           658         MOV.B   ES,R1L
000227 8250             659         MOV.B   R2H,[R0]
                        661 ; util.c    184                         result[i] = result[j];
000229 8C5702           663         MOV.W   R5,[R7+2]
00022C 8A47             664         MOV.W   R4,[R7]
00022E 86AC42           665         MOV.B   ES,R5L
000231 8264             666         MOV.B   R3L,[R4]
000233 862C42           667         MOV.B   ES,R1L
000236 8268             668         MOV.B   [R0],R3L
                        669 ; util.c    185                         result[j] = TmpChar;
000238 8C1702           671         MOV.W   R1,[R7+2]
00023B 8A07             672         MOV.W   R0,[R7]
00023D 862C42           673         MOV.B   ES,R1L
000240 8258             674         MOV.B   [R0],R2H
                        677 ; util.c    186                         i--;
000242 A14F             679         ADDS.B  R2L,#0FH
                        682 ; util.c    187                         j++;
000244 99000001         684         ADD.W   R0,#01H
000248 8C1F02           686         MOV.W   [R7+2],R1
00024B 8A0F             687         MOV.W   [R7],R0
00024D A1D1             689         ADDS.B  R6H,#01H
00024F 414D             693         CMP.B   R2L,R6H
000251 F0E2             694         BCC     _32
                        695 ; util.c    188                 }
                        696 ; util.c    189         }
000254                  698 _34:
                        699 ; util.c    190 }
000254 99700008         701         ADD.W   R7,#08H
000258 2F70             703         POP.W   R4, R5, R6
00025A D680             705         RET
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  11

ADDR   CODE            LINE SOURCELINE
                        712 ; util.c    191 
                        713 ; util.c    192 /**************************************************************************/
                        714 ; util.c    193 /* Cstrlen                                                                       
                                                                                                                             
                                                                               UTIL.C       */
                        715 ; util.c    194 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        716 ; util.c    195 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                        717 ; util.c    196 /* Revised:             970105                                                   
                                                                                                                             
                                                                            */
                        718 ; util.c    197 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        719 ; util.c    198 /* Function:    Calculates the length of a string from code memory               
                                                    */
                        720 ; util.c    199 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                        721 ; util.c    200 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                        722 ; util.c    201 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                        723 ; util.c    202 /**************************************************************************/
                        724 ; util.c    203 size_t Cstrlen( register char code* s)
                        725 ; util.c    204 {
                        726         ALIGN   1
                        728         PUBLIC  _Cstrlen
00025C                  729 _Cstrlen:
00025C 0F30             735         PUSH.W  R4, R5
                        741 ; util.c    205         register char code *    cp;
                        742 ; util.c    206 
                        743 ; util.c    207         cp = s;
                        744 ; util.c    208         while( *cp++)
00025E 8951             746         MOV.W   R5,R1
000260 8940             747         MOV.W   R4,R0
000262 86AC43           748         MOV.B   CS,R5L
000265 80A4             749         MOVC.B  R5L,[R4+]
000267 8931             750         MOV.W   R3,R1
000269 8920             751         MOV.W   R2,R0
00026B 99200001         752         ADD.W   R2,#01H
00026F 99310000         753         ADDC.W  R3,#00H
000273 61AA             755         OR.B    R5L,R5L
000275 F30C             756         BEQ     _40
000275 F30C00           756         BEQ     _40
000278                  757 _39:
000278 8953             758         MOV.W   R5,R3
00027A 8942             759         MOV.W   R4,R2
00027C 86AC43           760         MOV.B   CS,R5L
00027F 80A4             761         MOVC.B  R5L,[R4+]
000281 99200001         762         ADD.W   R2,#01H
000285 99310000         763         ADDC.W  R3,#00H
000289 61AA             766         OR.B    R5L,R5L
00028B F2F6             767         BNE     _39
                        768 ; util.c    209                 continue;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  12

ADDR   CODE            LINE SOURCELINE
00028E                  770 _40:
                        771 ; util.c    210 
                        772 ; util.c    211         return( cp-s-1);
00028E 2920             774         SUB.W   R2,R0
000290 3931             775         SUBB.W  R3,R1
000292 8902             777         MOV.W   R0,R2
000294 A90F             778         ADDS.W  R0,#0FH
                        780 ; util.c    212 }
000296 2F30             782         POP.W   R4, R5
000298 D680             784         RET
                        786 ; util.c    213 
                        787 ; util.c    214 /**************************************************************************/
                        788 ; util.c    215 /* Cstrcat                                                                       
                                                                                                                             
                                                                               UTIL.C       */
                        789 ; util.c    216 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        790 ; util.c    217 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                        791 ; util.c    218 /* Revised:             970105                                                   
                                                                                                                             
                                                                            */
                        792 ; util.c    219 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        793 ; util.c    220 /* Function:    Concatenate a string from code memory to data memory             
                                            */
                        794 ; util.c    221 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                        795 ; util.c    222 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                        796 ; util.c    223 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                        797 ; util.c    224 /**************************************************************************/
                        798 ; util.c    225 char* Cstrcat( register char* to, register char code* from)
                        799 ; util.c    226 {
                        800         ALIGN   1
                        802         PUBLIC  _Cstrcat
00029A                  803 _Cstrcat:
00029A 0F70             807         PUSH.W  R4, R5, R6
                        815 ; util.c    227         register char* cp;
                        816 ; util.c    228 
                        817 ; util.c    229         cp = to;
00029C 8951             819         MOV.W   R5,R1
00029E 8940             820         MOV.W   R4,R0
                        822 ; util.c    230         while( *cp)
0002A0 862C42           824         MOV.B   ES,R1L
0002A3 82C0             825         MOV.B   R6L,[R0]
0002A5 F307             826         BEQ     _42
0002A5 F30700           826         BEQ     _42
0002A8                  827 _41:
                        828 ; util.c    231                 cp++;
0002A8 99400001         830         ADD.W   R4,#01H
0002AC 86AC42           834         MOV.B   ES,R5L
0002AF 82C4             835         MOV.B   R6L,[R4]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  13

ADDR   CODE            LINE SOURCELINE
0002B1 F2FB             836         BNE     _41
0002B4                  838 _42:
                        839 ; util.c    232 
                        840 ; util.c    233         *cp = *from++;
0002B4 866C43           842         MOV.B   CS,R3L
0002B7 8062             843         MOVC.B  R3L,[R2+]
0002B9 86AC42           845         MOV.B   ES,R5L
0002BC 826C             846         MOV.B   [R4],R3L
                        847 ; util.c    234         while( *cp++)
0002BE 86AC42           849         MOV.B   ES,R5L
0002C1 82C4             850         MOV.B   R6L,[R4]
0002C3 99400001         851         ADD.W   R4,#01H
0002C7 8935             853         MOV.W   R3,R5
0002C9 8924             854         MOV.W   R2,R4
0002CB 61CC             856         OR.B    R6L,R6L
0002CD F308             857         BEQ     _44
0002CD F30800           857         BEQ     _44
0002D0                  858 _43:
0002D0 866C42           859         MOV.B   ES,R3L
0002D3 8282             860         MOV.B   R4L,[R2]
0002D5 99200001         861         ADD.W   R2,#01H
0002D9 6188             864         OR.B    R4L,R4L
0002DB F2FA             865         BNE     _43
                        866 ; util.c    235                 continue;
0002DE                  868 _44:
                        869 ; util.c    236 
                        870 ; util.c    237         return( to);
                        871 ; util.c    238 }
0002DE 2F70             873         POP.W   R4, R5, R6
0002E0 D680             875         RET
                        879 ; util.c    239 
                        880 ; util.c    240 /**************************************************************************/
                        881 ; util.c    241 /* Cmemcpy                                                                       
                                                                                                                             
                                                                               UTIL.C       */
                        882 ; util.c    242 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        883 ; util.c    243 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                        884 ; util.c    244 /* Revised:             970105                                                   
                                                                                                                             
                                                                            */
                        885 ; util.c    245 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        886 ; util.c    246 /* Function:    Copy a memory-area from code-memory to RAM-memory                
                                                            */
                        887 ; util.c    247 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                        888 ; util.c    248 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                        889 ; util.c    249 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                        890 ; util.c    250 /**************************************************************************/
                        891 ; util.c    251 void* Cmemcpy( void* d1, void code* s1, register size_t n)
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  14

ADDR   CODE            LINE SOURCELINE
                        892 ; util.c    252 {
                        893         ALIGN   1
                        895         PUBLIC  _Cmemcpy
0002E2                  896 _Cmemcpy:
0002E2 0F70             902         PUSH.W  R4, R5, R6
0002E4 A97C             904         ADDS.W  R7,#0CH
                        916 ; util.c    253         register char* d;
                        917 ; util.c    254         register char code* s;
                        918 ; util.c    255 
                        919 ; util.c    256         s = s1;
0002E6 8953             921         MOV.W   R5,R3
0002E8 8942             922         MOV.W   R4,R2
                        924 ; util.c    257         d = d1;
0002EA 8C1F02           926         MOV.W   [R7+2],R1
0002ED 8A0F             927         MOV.W   [R7],R0
0002EF 8931             928         MOV.W   R3,R1
0002F1 8920             929         MOV.W   R2,R0
                        934 ; util.c    258 
                        935 ; util.c    259         while( n--)
0002F3 8906             937         MOV.W   R0,R6
0002F5 A96F             940         ADDS.W  R6,#0FH
0002F7 6900             943         OR.W    R0,R0
0002F9 F314             944         BEQ     _46
0002F9 F31400           944         BEQ     _46
0002FC                  945 _45:
                        946 ; util.c    260                 *d++ = *s++;
0002FC 8915             948         MOV.W   R1,R5
0002FE 8904             949         MOV.W   R0,R4
000300 86AC43           950         MOV.B   CS,R5L
000303 80A4             951         MOVC.B  R5L,[R4+]
000305 866C42           954         MOV.B   ES,R3L
000308 82AA             955         MOV.B   [R2],R5L
00030A 99000001         956         ADD.W   R0,#01H
00030E 99110000         957         ADDC.W  R1,#00H
000312 8951             959         MOV.W   R5,R1
000314 8940             960         MOV.W   R4,R0
000316 99200001         962         ADD.W   R2,#01H
00031A 8906             966         MOV.W   R0,R6
00031C A96F             969         ADDS.W  R6,#0FH
00031E 6900             972         OR.W    R0,R0
000320 F2ED             973         BNE     _45
000322                  975 _46:
                        976 ; util.c    261 
                        977 ; util.c    262         return( d1);
000322 8C1702           979         MOV.W   R1,[R7+2]
000325 8A07             980         MOV.W   R0,[R7]
                        983 ; util.c    263 }
000327 A974             985         ADDS.W  R7,#04H
000329 2F70             987         POP.W   R4, R5, R6
00032B D680             989         RET
                        995 ; util.c    264 
                        996 ; util.c    265 /**************************************************************************/
                        997 ; util.c    266 /* Cstrcpy                                                                       
                                                                                                                             
                                                                               UTIL.C       */
                        998 ; util.c    267 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                        999 ; util.c    268 /* Author:              Kim Engedahl, DEV, 971003                                
                                                                                                                            *
                            /
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  15

ADDR   CODE            LINE SOURCELINE
                       1000 ; util.c    269 /* Revised:             971003                                                   
                                                                                                                             
                                                                            */
                       1001 ; util.c    270 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1002 ; util.c    271 /* Function:    Copy a string in code-memory to a string in RAM-memory           
                                    */
                       1003 ; util.c    272 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                       1004 ; util.c    273 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                       1005 ; util.c    274 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                       1006 ; util.c    275 /**************************************************************************/
                       1007 ; util.c    276 char* Cstrcpy( char* to, register char code * from)
                       1008 ; util.c    277 {
00032D 00              1009         ALIGN   1
                       1011         PUBLIC  _Cstrcpy
00032E                 1012 _Cstrcpy:
00032E 0F30            1016         PUSH.W  R4, R5
000330 A97C            1018         ADDS.W  R7,#0CH
                       1026 ; util.c    278         register char*  cp;
                       1027 ; util.c    279 
                       1028 ; util.c    280         for ( cp=to; *from; *cp++ = *from++ )
000332 8951            1030         MOV.W   R5,R1
000334 8940            1031         MOV.W   R4,R0
000336 8C3F02          1033         MOV.W   [R7+2],R3
000339 8A2F            1034         MOV.W   [R7],R2
00033B 866C43          1035         MOV.B   CS,R3L
00033E 8062            1036         MOVC.B  R3L,[R2+]
000340 F316            1037         BEQ     _48
000340 F316            1037         BEQ     _48
000342                 1038 _47:
000342 8C3702          1039         MOV.W   R3,[R7+2]
000345 8A27            1040         MOV.W   R2,[R7]
000347 866C43          1041         MOV.B   CS,R3L
00034A 8062            1042         MOVC.B  R3L,[R2+]
00034C 86AC42          1043         MOV.B   ES,R5L
00034F 826C            1044         MOV.B   [R4],R3L
000351 8C3702          1045         MOV.W   R3,[R7+2]
000354 8A27            1046         MOV.W   R2,[R7]
000356 99200001        1047         ADD.W   R2,#01H
00035A 99310000        1048         ADDC.W  R3,#00H
00035E 99400001        1049         ADD.W   R4,#01H
000362 8C3F02          1052         MOV.W   [R7+2],R3
000365 8A2F            1053         MOV.W   [R7],R2
000367 866C43          1054         MOV.B   CS,R3L
00036A 8062            1055         MOVC.B  R3L,[R2+]
00036C F2EA            1056         BNE     _47
                       1057 ; util.c    281                 ;
00036E                 1059 _48:
                       1060 ; util.c    282 
                       1061 ; util.c    283         *cp = 0;
00036E 86AC42          1063         MOV.B   ES,R5L
000371 B240            1064         MOV.B   [R4],#00H
                       1065 ; util.c    284 
                       1066 ; util.c    285         return( to);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  16

ADDR   CODE            LINE SOURCELINE
                       1067 ; util.c    286 }
000373 A974            1069         ADDS.W  R7,#04H
000375 2F30            1071         POP.W   R4, R5
000377 D680            1073         RET
                       1077 ; util.c    287 
                       1078 ; util.c    288 /**************************************************************************/
                       1079 ; util.c    289 /* Cstrcmp                                                                       
                                                                                                                             
                                                                                     UTIL.C */
                       1080 ; util.c    290 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1081 ; util.c    291 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                       1082 ; util.c    292 /* Revised:             970105                                                   
                                                                                                                             
                                                                            */
                       1083 ; util.c    293 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1084 ; util.c    294 /* Function:    Compare a string in code-memory to a string in RAM-memory        
                                    */
                       1085 ; util.c    295 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                       1086 ; util.c    296 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                       1087 ; util.c    297 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                       1088 ; util.c    298 /**************************************************************************/
                       1089 ; util.c    299 int Cstrcmp( register const char * s1, register char code * s2)
                       1090 ; util.c    300 {
000379 00              1091         ALIGN   1
                       1093         PUBLIC  _Cstrcmp
00037A                 1094 _Cstrcmp:
00037A 0F70            1098         PUSH.W  R4, R5, R6
                       1106 ; util.c    301         register signed char    r;
                       1107 ; util.c    302 
                       1108 ; util.c    303         while( !(r = *s1 - *s2++) && *s1++)
00037C 862C42          1110         MOV.B   ES,R1L
00037F 82C0            1111         MOV.B   R6L,[R0]
000381 8953            1112         MOV.W   R5,R3
000383 8942            1113         MOV.W   R4,R2
000385 86AC43          1114         MOV.B   CS,R5L
000388 80A4            1115         MOVC.B  R5L,[R4+]
00038A 818C            1116         MOV.B   R4L,R6L
00038C 218A            1117         SUB.B   R4L,R5L
00038E 99200001        1119         ADD.W   R2,#01H
000392 99310000        1120         ADDC.W  R3,#00H
000396 6188            1122         OR.B    R4L,R4L
000398 F21D            1123         BNE     _52
00039A 862C42          1124         MOV.B   ES,R1L
00039D 8290            1125         MOV.B   R4H,[R0]
00039F 99000001        1126         ADD.W   R0,#01H
0003A3 6199            1128         OR.B    R4H,R4H
0003A5 F317            1129         BEQ     _52
0003A5 F31700          1129         BEQ     _52
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  17

ADDR   CODE            LINE SOURCELINE
0003A8                 1130 _49:
0003A8 862C42          1131         MOV.B   ES,R1L
0003AB 82C0            1132         MOV.B   R6L,[R0]
0003AD 8953            1133         MOV.W   R5,R3
0003AF 8942            1134         MOV.W   R4,R2
0003B1 86AC43          1135         MOV.B   CS,R5L
0003B4 80A4            1136         MOVC.B  R5L,[R4+]
0003B6 21CA            1137         SUB.B   R6L,R5L
0003B8 818C            1138         MOV.B   R4L,R6L
0003BA 99200001        1141         ADD.W   R2,#01H
0003BE 99310000        1142         ADDC.W  R3,#00H
0003C2 6188            1145         OR.B    R4L,R4L
0003C4 F207            1146         BNE     _52
0003C6 862C42          1147         MOV.B   ES,R1L
0003C9 8290            1148         MOV.B   R4H,[R0]
0003CB 99000001        1149         ADD.W   R0,#01H
0003CF 6199            1152         OR.B    R4H,R4H
0003D1 F2EB            1153         BNE     _49
                       1154 ; util.c    304                 continue;
0003D4                 1156 _52:
                       1157 ; util.c    305 
                       1158 ; util.c    306         return( r);
0003D4 8108            1160         MOV.B   R0L,R4L
0003D6 9019            1161         SEXT.B  R0H
                       1163 ; util.c    307 }
0003D8 2F70            1165         POP.W   R4, R5, R6
0003DA D680            1167         RET
                       1171 ; util.c    308 
                       1172 ; util.c    309 /**************************************************************************/
                       1173 ; util.c    310 /* Cstrncmp                                                                      
                                                                                                                             
                                                             UTIL.C */
                       1174 ; util.c    311 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1175 ; util.c    312 /* Author:              Kim Engedahl, DEV, 960828                                
                                                                                                                            *
                            /
                       1176 ; util.c    313 /* Revised:       970105                                                         
                                                                                                                             
                                                                            */
                       1177 ; util.c    314 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1178 ; util.c    315 /* Function:    Compare a string in code-memory to a string in RAM-memory        
                                    */
                       1179 ; util.c    316 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                       1180 ; util.c    317 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                       1181 ; util.c    318 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                       1182 ; util.c    319 /**************************************************************************/
                       1183 ; util.c    320 int Cstrncmp( register const char * s1, register char code * s2, size_t len)
                       1184 ; util.c    321 {
                       1185         ALIGN   1
                       1187         PUBLIC  _Cstrncmp
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  18

ADDR   CODE            LINE SOURCELINE
0003DC                 1188 _Cstrncmp:
0003DC 0F50            1192         PUSH.W  R4, R6
0003DE A97C            1194         ADDS.W  R7,#0CH
0003E0 8C3F02          1197         MOV.W   [R7+2],R3
0003E3 8A2F            1198         MOV.W   [R7],R2
                       1204 ; util.c    322         while( len--)
0003E5 8926            1206         MOV.W   R2,R6
0003E7 A96F            1209         ADDS.W  R6,#0FH
0003E9 6922            1212         OR.W    R2,R2
0003EB F32B            1213         BEQ     _56
0003EB F32B00          1213         BEQ     _56
0003EE                 1214 _53:
                       1215 ; util.c    323         {
                       1216 ; util.c    324                 if ( *s1 == 0 || *s1 != *s2)
0003EE 862C42          1218         MOV.B   ES,R1L
0003F1 8280            1219         MOV.B   R4L,[R0]
0003F3 F309            1220         BEQ     _54
0003F5 8C3702          1221         MOV.W   R3,[R7+2]
0003F8 8A27            1222         MOV.W   R2,[R7]
0003FA 866C43          1223         MOV.B   CS,R3L
0003FD 8062            1224         MOVC.B  R3L,[R2+]
0003FF 862C42          1225         MOV.B   ES,R1L
000402 4268            1226         CMP.B   [R0],R3L
000404 F30C            1227         BEQ     _55
000404 F30C            1227         BEQ     _55
000406                 1228 _54:
                       1229 ; util.c    325                         return( *s1 - *s2);
000406 8148            1231         MOV.B   R2L,R4L
000408 9059            1232         SEXT.B  R2H
00040A 8C1702          1233         MOV.W   R1,[R7+2]
00040D 8A07            1234         MOV.W   R0,[R7]
00040F 862C43          1235         MOV.B   CS,R1L
000412 8020            1236         MOVC.B  R1L,[R0+]
000414 8102            1237         MOV.B   R0L,R1L
000416 9019            1238         SEXT.B  R0H
000418 2920            1239         SUB.W   R2,R0
00041A 8902            1240         MOV.W   R0,R2
00041C FE13            1241         BR      _57
00041C FE13            1241         BR      _57
00041E                 1242 _55:
                       1245 ; util.c    326 
                       1246 ; util.c    327                 s1++;
00041E 99000001        1248         ADD.W   R0,#01H
                       1249 ; util.c    328                 s2++;
000422 8C3702          1251         MOV.W   R3,[R7+2]
000425 8A27            1252         MOV.W   R2,[R7]
000427 99200001        1253         ADD.W   R2,#01H
00042B 99310000        1254         ADDC.W  R3,#00H
00042F 8C3F02          1255         MOV.W   [R7+2],R3
000432 8A2F            1256         MOV.W   [R7],R2
000434 8C3702          1257         MOV.W   R3,[R7+2]
000437 8A27            1258         MOV.W   R2,[R7]
000439 8926            1260         MOV.W   R2,R6
00043B A96F            1263         ADDS.W  R6,#0FH
00043D 6922            1266         OR.W    R2,R2
00043F F2D7            1267         BNE     _53
                       1268 ; util.c    329         }
000442                 1270 _56:
                       1271 ; util.c    330 
                       1272 ; util.c    331         return( 0);
000442 B900            1274         MOV.W   R0,#00H
                       1275 ; util.c    332 }
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  19

ADDR   CODE            LINE SOURCELINE
000444                 1277 _57:
000444 A974            1278         ADDS.W  R7,#04H
000446 2F50            1280         POP.W   R4, R6
000448 D680            1282         RET
                       1285 ; util.c    333 
                       1286 ; util.c    334 /**************************************************************************/
                       1287 ; util.c    335 /* ValidateDate                                                                  
                                                                                                                             
                                             UTIL.C */
                       1288 ; util.c    336 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1289 ; util.c    337 /* Author:              Kim Engedahl, DEV, 000504                                
                                                                                                                            *
                            /
                       1290 ; util.c    338 /* Revised:       000504                                                         
                                                                                                                             
                                                                            */
                       1291 ; util.c    339 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1292 ; util.c    340 /* Function:    --                                                               
                                                                                                                             
                                                                                                    */
                       1293 ; util.c    341 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                       1294 ; util.c    342 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                       1295 ; util.c    343 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                       1296 ; util.c    344 /**************************************************************************/
                       1297 ; util.c    345 int ValidateDate( UI year, UI month, UI day)
                       1298 ; util.c    346 {
                       1299         ALIGN   1
                       1301         PUBLIC  _ValidateDate
00044A                 1302 _ValidateDate:
                       1312 ; util.c    347         switch ( month)
00044A 99140001        1314         CMP.W   R1,#01H
00044E F313            1315         BEQ     _64
000450 99140003        1316         CMP.W   R1,#03H
000454 F310            1317         BEQ     _64
000456 99140005        1318         CMP.W   R1,#05H
00045A F30D            1319         BEQ     _64
00045C 99140007        1320         CMP.W   R1,#07H
000460 F30A            1321         BEQ     _64
000462 99140009        1322         CMP.W   R1,#09H
000466 F307            1323         BEQ     _64
000468 9914000B        1324         CMP.W   R1,#0BH
00046C F304            1325         BEQ     _64
00046E 99140002        1326         CMP.W   R1,#02H
000472 F306            1327         BEQ     _65
000474 FE14            1328         BR      _67
                       1329 ; util.c    348         {
                       1330 ; util.c    349                 case January:
                       1331 ; util.c    350                 case March:
                       1332 ; util.c    351                 case May:
                       1333 ; util.c    352                 case July:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  20

ADDR   CODE            LINE SOURCELINE
                       1334 ; util.c    353                 case September:
                       1335 ; util.c    354                 case November:
000476                 1337 _64:
                       1338 ; util.c    355                         if ( day > 31)
000476 9924001F        1340         CMP.W   R2,#01FH
00047A F916            1341         BL      _71
                       1342 ; util.c    356                                 return( FAIL);
00047C B900            1344         MOV.W   R0,#00H
00047E D680            1346         RET
                       1347 ; util.c    357                         break;
                       1348 ; util.c    358 
                       1349 ; util.c    359                 case February:
000480                 1351 _65:
                       1355 ; util.c    360                         if ( year % 4)
000480 7911            1357         XOR.W   R1,R1
000482 E9010004        1358         DIVU.D  R0,#04H
000486 6911            1360         OR.W    R1,R1
000488 F305            1361         BEQ     _66
                       1362 ; util.c    361                         {
                       1363 ; util.c    362                                 if ( day > 29)
00048A 9924001D        1365         CMP.W   R2,#01DH
00048E F90C            1366         BL      _71
                       1367 ; util.c    363                                         return( FAIL);
000490 B900            1369         MOV.W   R0,#00H
000492 D680            1371         RET
                       1372 ; util.c    364                         }
000494                 1374 _66:
                       1377 ; util.c    365                         else
                       1378 ; util.c    366                         {
                       1379 ; util.c    367                                 if ( day > 28)
000494 9924001C        1381         CMP.W   R2,#01CH
000498 F907            1382         BL      _71
                       1383 ; util.c    368                                         return( FAIL);
00049A B900            1385         MOV.W   R0,#00H
00049C D680            1386         RET
                       1387 ; util.c    369                         }
                       1388 ; util.c    370                         break;
                       1389 ; util.c    371 
                       1390 ; util.c    372                 default:
00049E                 1392 _67:
                       1395 ; util.c    373                         if ( day > 30)
00049E 9924001E        1397         CMP.W   R2,#01EH
0004A2 F902            1398         BL      _71
                       1399 ; util.c    374                                 return( FAIL);
0004A4 B900            1401         MOV.W   R0,#00H
0004A6 D680            1402         RET
                       1403 ; util.c    375                         break;
                       1404 ; util.c    376         }
0004A8                 1406 _71:
                       1407 ; util.c    377 
                       1408 ; util.c    378         return( OK);
0004A8 9908FFFF        1410         MOV.W   R0,#0FFFFH
                       1411 ; util.c    379 }
0004AC                 1413 _75:
0004AC D680            1414         RET
                       1417 ; util.c    380 
                       1418 ; util.c    381 /**************************************************************************/
                       1419 ; util.c    382 /* ROMChecksum                                                                   
                                                                                                                             
                                             UTIL.C */
                       1420 ; util.c    383 /*                                                                               
                                                                                                                             
                                                                                                                             
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  21

ADDR   CODE            LINE SOURCELINE
                                            */
                       1421 ; util.c    384 /* Author:              Kim Engedahl, DEV, 000705                                
                                                                                                                            *
                            /
                       1422 ; util.c    385 /* Revised:       000705                                                         
                                                                                                                             
                                                                            */
                       1423 ; util.c    386 /*                                                                               
                                                                                                                             
                                                                                                                             
                                            */
                       1424 ; util.c    387 /* Function:    --                                                               
                                                                                                                             
                                                                                                    */
                       1425 ; util.c    388 /* Remarks:             --                                                       
                                                                                                                             
                                                                                                            */
                       1426 ; util.c    389 /* Returns:             --                                                       
                                                                                                                             
                                                                                                            */
                       1427 ; util.c    390 /* Updates:             --                                                       
                                                                                                                             
                                                                                                            */
                       1428 ; util.c    391 /**************************************************************************/
                       1429 ; util.c    392 UI ROMChecksum( UL start_addr, UL end_addr)
                       1430 ; util.c    393 {
                       1431         ALIGN   1
                       1433         PUBLIC  _ROMChecksum
0004AE                 1434 _ROMChecksum:
0004AE 0F70            1438         PUSH.W  R4, R5, R6
                       1452 ; util.c    394         _rom UC *Sptr;
                       1453 ; util.c    395         _rom UC *Eptr;
                       1454 ; util.c    396 
                       1455 ; util.c    397         UI CalcChecksum = 0;
0004B0 B960            1457         MOV.W   R6,#00H
                       1459 ; util.c    398 
                       1460 ; util.c    399         Sptr = ( _rom UC *) ( start_addr);
0004B2 8951            1462         MOV.W   R5,R1
0004B4 8940            1463         MOV.W   R4,R0
0004B6 8915            1464         MOV.W   R1,R5
0004B8 8904            1465         MOV.W   R0,R4
                       1470 ; util.c    400         Eptr = ( _rom UC *) ( end_addr);
                       1471 ; util.c    401 
                       1472 ; util.c    402         while ( Sptr <= Eptr)
0004BA 4953            1474         CMP.W   R5,R3
0004BC F201            1475         BNE     _82
0004BE 4942            1476         CMP.W   R4,R2
0004BE 4942            1476         CMP.W   R4,R2
0004C0                 1477 _82:
0004C0 F80F            1478         BG      _81
0004C0 F80F            1478         BG      _81
0004C2                 1479 _80:
                       1480 ; util.c    403                 CalcChecksum += *Sptr++;
0004C2 8951            1482         MOV.W   R5,R1
0004C4 8940            1483         MOV.W   R4,R0
0004C6 86AC43          1484         MOV.B   CS,R5L
0004C9 80A4            1485         MOVC.B  R5L,[R4+]
0004CB B1B0            1486         MOVS.B  R5H,#00H
0004CD 0965            1487         ADD.W   R6,R5
0004CF 99000001        1490         ADD.W   R0,#01H
0004D3 99110000        1491         ADDC.W  R1,#00H
0004D7 4913            1495         CMP.W   R1,R3
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  22

ADDR   CODE            LINE SOURCELINE
0004D9 F202            1496         BNE     _83
0004DB 4902            1497         CMP.W   R0,R2
0004DB 490200          1497         CMP.W   R0,R2
0004DE                 1498 _83:
0004DE F9F1            1499         BL      _80
0004E0                 1501 _81:
                       1502 ; util.c    404 
                       1503 ; util.c    405         return( CalcChecksum);
0004E0 8906            1505         MOV.W   R0,R6
                       1509 ; util.c    406 }
0004E2 2F70            1511         POP.W   R4, R5, R6
0004E4 D680            1513         RET
                       1519         EXTRN   HCODE(__UMODL)
                       1522         EXTRN   HCODE(_toupper)
000000                 1523 UTIL_INI_FA     SEGMENT HDATA INSEGMENT INIT
000000                 1524         RSEG    UTIL_INI_FA
000000 3000            1525 _22:    DB      030H,000H
                       1528         EXTRN   HCODE(_strcpy)
                       1529         EXTRN   HCODE(__UDIVL)
                       1530         EXTRN   DATA(__lc_ub_xvwbuffer)
                       1531         EXTRN   DATA(__lc_ue_xvwbuffer)
                       1532         CALLS   'HexToByte', 'toupper'
                       1533         CALLS   'htol', 'HexToByte'
                       1534         CALLS   '_ultoa', 'strcpy'
