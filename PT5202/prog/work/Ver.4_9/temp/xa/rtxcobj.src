; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
; options: -A1 -Cxag3 -e -g -IcF:\PT5202\prog\include
;          -IF:\PT5202\prog\rtxc\xa\include -I. -Ml -O2 -s
$CASE
$NOZPAGE
	NAME	RTXCOBJ
	SYMB	TOOL, "XA C compiler v2.0", 1
	SYMB	TYPE, 256, "bit", 'g', 0, 1
	SYMB	FILE, "rtxcobj.c"
; rtxcobj.c    1	/****************************************************************************/ 
; rtxcobj.c    2	/* MODULE:                                                                  */
; rtxcobj.c    3	/*   RtxcObj.c - Methodes for:                                              */
; rtxcobj.c    4	/*               TTimer objects created 5/5-99 by. Tomas D. Kappelgaard.    */
; rtxcobj.c    5	/*               TThread objects created x/5-99 by. Tomas D. Kappelgaard.   */
; rtxcobj.c    6	/*               TStream objects created 20/10-99 by. Tomas D. Kappelgaard. */
; rtxcobj.c    7	/*                                                                          */
; rtxcobj.c    8	/****************************************************************************/
; rtxcobj.c    9	/* FUNCTIONS:                                                               */
; rtxcobj.c   10	/*               void *Timer_Create(SEMA Event);                            */
; rtxcobj.c   11	/*               void Timer_Period_Set(TTimer Timer, int Time);             */
; rtxcobj.c   12	/*               int Timer_Period_Get(TTimer Timer);                        */
; rtxcobj.c   13	/*               void Timer_Tick(TTimer Timer, int Time);                   */
; rtxcobj.c   14	/*               void * Thread_Create(int Priority, void (far *entry)(void))*/
; rtxcobj.c   15	/*                                                                          */
; rtxcobj.c   16	/* TASKS:                                                                   */
; rtxcobj.c   17	/*                                                                          */
; rtxcobj.c   18	/*                                                                          */
; rtxcobj.c   19	/****************************************************************************/
; rtxcobj.c   20	/* Edit log SAA 991005 */
; rtxcobj.c   21	/* In line 369(++)                                                   */   
; rtxcobj.c   22	/*      removed '&' from address of array of chars (name IS pointer) */
; rtxcobj.c   23	/* In Object EventList, function Wait : removed Timer part if        */
; rtxcobj.c   24	/*                paarmeter *TimeOut is NULL pointer                 */
; rtxcobj.c   25	
; rtxcobj.c   26	
; rtxcobj.c   27	
; rtxcobj.c   28	
; rtxcobj.c   29	
; rtxcobj.c   30	/*
; rtxcobj.c   31	 *   PTV software for PT5765
; rtxcobj.c   32	 *   Copyright (c)
; rtxcobj.c   33	 *   ProTeleVision Technologies A/S.
; rtxcobj.c   34	 *   ALL RIGHTS RESERVED
; rtxcobj.c   35	*/
; rtxcobj.c   36	/****************************************************************************/
; rtxcobj.c   37	
; rtxcobj.c   38	#include <stdlib.h>
	SYMB	FILE, "F:\\PT5202\\prog\\include\\stdlib.h"
	SYMB	FILE, "F:\\PT5202\\prog\\include\\limits.h"
	SYMB	ENDF
	SYMB	TYPE, 257, 'S', 4,\
		 "quot", #16, 0,\
		 "rem", #16, 2
	SYMB	TYPE, 258, "div_t", 'T', #257
	SYMB	TYPE, 259, 'S', 8,\
		 "quot", #6, 0,\
		 "rem", #6, 4
	SYMB	TYPE, 260, "ldiv_t", 'T', #259
	SYMB	TYPE, 261, "size_t", 'T', #18
	SYMB	TYPE, 262, "wchar_t", 'T', #5
	SYMB	ENDF
; rtxcobj.c   39	//#include "rtxcobj.h"
; rtxcobj.c   40	#include "define.h"
	SYMB	FILE, "define.h"
	SYMB	ENDF
; rtxcobj.c   41	#include "rtxcapi.h"
	SYMB	FILE, "F:\\PT5202\\prog\\rtxc\\xa\\include\\rtxcapi.h"
	SYMB	FILE, "F:\\PT5202\\prog\\rtxc\\xa\\include\\typedef.h"
	SYMB	FILE, "F:\\PT5202\\prog\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 263, "KOBJNUM", 'T', #3
	SYMB	TYPE, 264, "TASK", 'T', #2
	SYMB	ENDF
	SYMB	FILE, "F:\\PT5202\\prog\\rtxc\\xa\\include\\rtxstruc.h"
	SYMB	FILE, "F:\\PT5202\\prog\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 265, "KSNUM", 'T', #3
	SYMB	TYPE, 266, "PRIORITY", 'T', #264
	SYMB	TYPE, 267, "TSTATE", 'T', #5
	SYMB	TYPE, 268, "TSLICE", 'T', #3
	SYMB	TYPE, 270, 'n', #269, 130
	SYMB	TYPE, 271, 'P', #270
	SYMB	TYPE, 273, 'n', #272, 130
	SYMB	TYPE, 274, 'P', #273
	SYMB	TYPE, 275, 'n', #265, 130
	SYMB	TYPE, 276, 'P', #275
	SYMB	TYPE, 277, 'X', 12, #1, 30, 0
	SYMB	TYPE, 278, 'n', #277, 129
	SYMB	TYPE, 279, 'P', #278
	SYMB	TYPE, 280, "frame", 'S', 24,\
		 "es", #3, 0,\
		 "cs", #3, 1,\
		 "ssel", #3, 2,\
		 "ds", #3, 3,\
		 "pksnum", #276, 4,\
		 "R2", #18, 8,\
		 "R3", #18, 10,\
		 "R4", #18, 12,\
		 "R5", #18, 14,\
		 "R6", #18, 16,\
		 "psw", #18, 18,\
		 "pc", #279, 20
	SYMB	TYPE, 281, 'n', #280, 130
	SYMB	TYPE, 282, 'P', #281
	SYMB	TYPE, 283, 'X', 12, #1, 30, 0
	SYMB	TYPE, 284, 'n', #283, 129
	SYMB	TYPE, 285, 'P', #284
	SYMB	TYPE, 286, 'n', #2, 130
	SYMB	TYPE, 287, 'P', #286
	SYMB	TYPE, 288, 'n', #1, 130
	SYMB	TYPE, 289, 'P', #288
	SYMB	TYPE, 269, "tcb", 'S', 36,\
		 "flink", #271, 0,\
		 "blink", #271, 4,\
		 "pclkblk", #274, 8,\
		 "task", #264, 12,\
		 "priority", #266, 13,\
		 "sp", #282, 14,\
		 "status", #267, 18,\
		 "pc_t0", #285, 20,\
		 "stackbase", #287, 24,\
		 "stacksize", #261, 28,\
		 "tslice", #268, 30,\
		 "newslice", #268, 31,\
		 "arg", #289, 32
	SYMB	TYPE, 290, "TCB", 'T', #269
	SYMB	TYPE, 291, "SEMA", 'T', #263
	SYMB	TYPE, 292, "MAP", 'T', #263
	SYMB	TYPE, 294, 'n', #293, 130
	SYMB	TYPE, 295, 'P', #294
	SYMB	TYPE, 293, "rtxcmsg", 'S', 8,\
		 "link", #295, 0,\
		 "task", #264, 4,\
		 "priority", #266, 5,\
		 "sema", #291, 6
	SYMB	TYPE, 296, "RTXCMSG", 'T', #293
	SYMB	TYPE, 297, "TICKS", 'T', #16
	SYMB	TYPE, 298, 'N',\
		 "DELAY_OBJ", 0,\
		 "SEMAPHORE_OBJ", 1,\
		 "PARTITION_OBJ", 2,\
		 "QUEUE_OBJ", 3,\
		 "RESOURCE_OBJ", 4,\
		 "MAILBOX_OBJ", 5,\
		 "TIMER_OBJ", 6
	SYMB	TYPE, 299, "OBJTYPE", 'T', #298
	SYMB	TYPE, 272, "clkblk", 'S', 18,\
		 "flink", #274, 0,\
		 "blink", #274, 4,\
		 "remain", #297, 8,\
		 "recycle", #297, 10,\
		 "task", #264, 12,\
		 "state", #2, 13,\
		 "objtype", #299, 14,\
		 "objid", #263, 16
	SYMB	TYPE, 300, 'N',\
		 "PRIORITY_INVERSION_OFF", 0,\
		 "PRIORITY_INVERSION_ON", 1
	SYMB	TYPE, 301, "RESATTR", 'T', #300
	SYMB	ENDF
	SYMB	TYPE, 302, 'N',\
		 "RC_GOOD", 0,\
		 "RC_WAIT_CONFLICT", 1,\
		 "RC_NO_TIMERS", 2,\
		 "RC_TIMER_INACTIVE", 3,\
		 "RC_TIMER_ILLEGAL", 4,\
		 "RC_TIMEOUT", 5,\
		 "RC_QUEUE_FULL", 6,\
		 "RC_QUEUE_EMPTY", 7,\
		 "RC_ILLEGAL_QUEUE_SIZE", 8,\
		 "RC_BUSY", 9,\
		 "RC_NESTED", 10,\
		 "RC_ILLEGAL_TASK", 11,\
		 "RC_ACTIVE_TASK", 12,\
		 "RC_NO_YIELD", 13,\
		 "RC_MISSED_EVENT", 14
	SYMB	TYPE, 303, "KSRC", 'T', #302
	SYMB	TYPE, 304, "SSTATE", 'T', #264
	SYMB	TYPE, 305, "MBOX", 'T', #263
	SYMB	TYPE, 306, "QUEUE", 'T', #263
	SYMB	TYPE, 307, 'N',\
		 "QNE", 0,\
		 "QNF", 1,\
		 "QF", 2,\
		 "QE", 3
	SYMB	TYPE, 308, "QCOND", 'T', #307
	SYMB	TYPE, 309, "RESOURCE", 'T', #263
	SYMB	TYPE, 310, "CLKBLK", 'T', #272
	SYMB	TYPE, 311, "time_t", 'T', #6
	SYMB	TYPE, 312, "FRAME", 'T', #280
	SYMB	ENDF
; rtxcobj.c   42	#include "ctask.h"
	SYMB	FILE, "ctask.h"
	SYMB	ENDF
; rtxcobj.c   43	#include "cclock.h"
	SYMB	FILE, "cclock.h"
	SYMB	ENDF
; rtxcobj.c   44	#include "cpart.h"
	SYMB	FILE, "cpart.h"
	SYMB	ENDF
; rtxcobj.c   45	#include "csema.h"
	SYMB	FILE, "csema.h"
	SYMB	ENDF
; rtxcobj.c   46	#include "cres.h"
	SYMB	FILE, "cres.h"
	SYMB	ENDF
; rtxcobj.c   47	#include "cqueue.h"
	SYMB	FILE, "cqueue.h"
	SYMB	ENDF
; rtxcobj.c   48	#include "stack.h"
	SYMB	FILE, "stack.h"
	SYMB	FILE, "F:\\PT5202\\prog\\rtxc\\xa\\include\\typedef.h"
	SYMB	ENDF
	SYMB	ENDF
; rtxcobj.c   49	#include "objectid.h"
	SYMB	FILE, "objectid.h"
	SYMB	ENDF
; rtxcobj.c   50	//#include "evlog.h"
; rtxcobj.c   51	
; rtxcobj.c   52	
; rtxcobj.c   53	/**************** new and delete *****************/
; rtxcobj.c   54	long HeapAlloc;
; rtxcobj.c   55	
; rtxcobj.c   56	int malloc2(void* arg)
; rtxcobj.c   57	{
RTXCOBJ_PR	SEGMENT	HCODE
	RSEG	RTXCOBJ_PR
	ALIGN	1
	SYMB	LINE, 57
	PUBLIC	_malloc2
_malloc2:
	SYMB	TYPE, 313, 'X', 12, #16, 30, 1, #289
	SYMB	GFUN, "malloc2", _malloc2, #313, 0, 0, 48
	SYMB	ALAB, _malloc2, #313
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	LTIM, "arg", 3, 0, 2253
	SYMB	IDEN, "arg", 3, #289, 0, 2061
; rtxcobj.c   58	 HeapAlloc+=((*(unsigned long*)arg)+4+15)&0xFFF0;
	SYMB	LINE, 58
	MOV.B	ES,#SEG( _HeapAlloc )
	MOV.W	R3,#SOF( _HeapAlloc )
	MOV.W	R2,[R3+]
	MOV.W	R3,[R3]
	MOV.W	R5,R1
	MOV.W	R4,R0
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "arg", 3, 0, 2125
	SYMB	LTIM, "arg", 19, 0, 2253
	MOV.B	ES,R1L
	MOV.W	R1,[R0+2]
	MOV.W	R0,[R0]
	ADD.W	R0,#013H
	ADDC.W	R1,#00H
	AND.W	R0,#0FFF0H
	AND.W	R1,#00H
	ADD.W	R2,R0
	ADDC.W	R3,R1
	MOV.B	ES,#SEG( _HeapAlloc )
	MOV.W	R0,#SOF( _HeapAlloc )
	MOV.W	[R0+],R2
	MOV.W	[R0],R3
; rtxcobj.c   59	 *(void**)arg=malloc(*(unsigned int*)arg);
	SYMB	LINE, 59
	MOV.W	R1,R5
	MOV.W	R0,R4
	MOV.B	ES,R1L
	MOV.W	R0,[R0]
	CALL	_malloc
	SYMB	LTIM, "arg", 19, 0, 2125
	MOV.B	ES,R5L
	MOV.W	[R4],R0
	MOV.W	[R4+2],R1
; rtxcobj.c   60	 return(0);
	SYMB	LINE, 60
	MOV.W	R0,#00H
; rtxcobj.c   61	}
	SYMB	LINE, 61
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rtxcobj.c   62	void* new(long size)
; rtxcobj.c   63	{
	ALIGN	1
	SYMB	LINE, 63
	PUBLIC	_new
_new:
	SYMB	TYPE, 314, 'X', 12, #289, 30, 1, #6
	SYMB	GFUN, "new", _new, #314, 0, 0, 0
	SYMB	ALAB, _new, #314
	ADDS.W	R7,#0CH
	SYMB	SOFF, 4
	SYMB	IDEN, "size", -1, #6, 130, 2053
	SYMB	LTIM, "size", -1, 0, 2117
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
; rtxcobj.c   64	 KS_user(malloc2,&size);
	SYMB	LINE, 64
	MOV.W	R1,#SEG( _malloc2 )
	MOV.W	R0,#SOF( _malloc2 )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	MOV.W	R2,R7
	CALL	_KS_user
	SYMB	LTIM, "size", -4, 130, 2245
; rtxcobj.c   65	// if (!size)
; rtxcobj.c   66	//  LogEvent(EventOutOfMemmory,0);
; rtxcobj.c   67	 return((void*)size);
	SYMB	LINE, 67
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	SYMB	LTIM, "size", -4, 130, 2117
	SYMB	LTIM, "size", 3, 0, 2253
	SYMB	LTIM, "size", 3, 0, 2125
; rtxcobj.c   68	} 
	SYMB	LINE, 68
	ADDS.W	R7,#04H
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rtxcobj.c   69	
; rtxcobj.c   70	int free2(void* addr)
; rtxcobj.c   71	{
	ALIGN	1
	SYMB	LINE, 71
	PUBLIC	_free2
_free2:
	SYMB	TYPE, 315, 'X', 12, #16, 30, 1, #289
	SYMB	GFUN, "free2", _free2, #315, 0, 0, 0
	SYMB	ALAB, _free2, #315
	SYMB	LTIM, "addr", 3, 0, 2253
	SYMB	IDEN, "addr", 3, #289, 0, 2061
; rtxcobj.c   72	 free(addr);
	SYMB	LINE, 72
	CALL	_free
	SYMB	LTIM, "addr", 3, 0, 2125
; rtxcobj.c   73	 return(0);
	SYMB	LINE, 73
	MOV.W	R0,#00H
; rtxcobj.c   74	}
	SYMB	LINE, 74
	RET
	SYMB	EFUN
; rtxcobj.c   75	void delete(void* addr)
; rtxcobj.c   76	{
	ALIGN	1
	SYMB	LINE, 76
	PUBLIC	_delete
_delete:
	SYMB	TYPE, 316, 'X', 12, #1, 30, 1, #289
	SYMB	GFUN, "delete", _delete, #316, 0, 0, 0
	SYMB	ALAB, _delete, #316
	SYMB	LTIM, "addr", 3, 0, 2253
	SYMB	IDEN, "addr", 3, #289, 0, 2061
; rtxcobj.c   77	 KS_user(free2,addr);
	SYMB	LINE, 77
	MOV.W	R3,R1
	MOV.W	R2,R0
	MOV.W	R1,#SEG( _free2 )
	MOV.W	R0,#SOF( _free2 )
	CALL	_KS_user
	SYMB	LTIM, "addr", 3, 0, 2125
	SYMB	LTIM, "addr", 11, 0, 2253
	SYMB	LTIM, "addr", 11, 0, 2125
; rtxcobj.c   78	} 
	SYMB	LINE, 78
	RET
	SYMB	EFUN
; rtxcobj.c   79	
; rtxcobj.c   80	
; rtxcobj.c   81	void Sleep(int time)
; rtxcobj.c   82	{
	ALIGN	1
	SYMB	LINE, 82
	PUBLIC	_Sleep
_Sleep:
	SYMB	TYPE, 317, 'X', 12, #1, 30, 1, #16
	SYMB	GFUN, "Sleep", _Sleep, #317, 0, 0, 0
	SYMB	ALAB, _Sleep, #317
	SYMB	LTIM, "time", 2, 0, 2253
	SYMB	IDEN, "time", 2, #16, 0, 2061
; rtxcobj.c   83	 KS_delay(0,time/CLKTICK);
	SYMB	LINE, 83
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#08H
	SYMB	LTIM, "time", 2, 0, 2125
	MOV.W	R1,R0
	MOV.B	R0L,#00H
	CALL	_KS_delay
; rtxcobj.c   84	}	
	SYMB	LINE, 84
	RET
	SYMB	EFUN
; rtxcobj.c   85	
; rtxcobj.c   86	/**************** TEvent Object *****************/
; rtxcobj.c   87	typedef struct TEvent {
; rtxcobj.c   88	  /* Public: */
; rtxcobj.c   89	  	int	ObjectID;
; rtxcobj.c   90		void	(*TEvent)(struct TEvent *this, char *Name);
; rtxcobj.c   91		void	(*_TEvent)(struct TEvent *this);
; rtxcobj.c   92		int	(*Wait)(struct TEvent *this, long *TimeOut);
; rtxcobj.c   93		void	(*Set)(struct TEvent *this);
; rtxcobj.c   94		void	(*Clear)(struct TEvent *this);
; rtxcobj.c   95		int	(*IsSet)(struct TEvent *this);
; rtxcobj.c   96		SEMA	ID;
; rtxcobj.c   97		char *	Name;
; rtxcobj.c   98	  /* Private: */
; rtxcobj.c   99	} TEvent;
; rtxcobj.c  100	
; rtxcobj.c  101	
; rtxcobj.c  102	struct TEvent	TEventPartition[DNSEMAS];
; rtxcobj.c  103	MAP		TEventMap=0;
RTXCOBJ_INI_FA	SEGMENT	HDATA INSEGMENT INIT
	RSEG	RTXCOBJ_INI_FA
	SYMB	IDEN, "TEventMap", _TEventMap, #292, 130, 0
	SYMB	ALAB, _TEventMap, #292
	PUBLIC	_TEventMap
_TEventMap:
; rtxcobj.c  104	
; rtxcobj.c  105	
; rtxcobj.c  106	void	TEvent_TEvent(struct TEvent *this, char *Name)
; rtxcobj.c  107	{
	DB	000H
	RSEG	RTXCOBJ_PR
	ALIGN	1
	SYMB	LINE, 107
	PUBLIC	_TEvent_TEvent
_TEvent_TEvent:
	SYMB	TYPE, 320, 'n', #319, 130
	SYMB	TYPE, 321, 'P', #320
	SYMB	TYPE, 319, 'X', 12, #1, 30, 2, #321, #287
	SYMB	TYPE, 323, 'n', #322, 129
	SYMB	TYPE, 324, 'P', #323
	SYMB	TYPE, 325, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 326, 'n', #325, 129
	SYMB	TYPE, 327, 'P', #326
	SYMB	TYPE, 328, 'n', #6, 130
	SYMB	TYPE, 329, 'P', #328
	SYMB	TYPE, 328, 'X', 12, #16, 30, 2, #321, #329
	SYMB	TYPE, 331, 'n', #330, 129
	SYMB	TYPE, 332, 'P', #331
	SYMB	TYPE, 333, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 334, 'n', #333, 129
	SYMB	TYPE, 335, 'P', #334
	SYMB	TYPE, 336, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 337, 'n', #336, 129
	SYMB	TYPE, 338, 'P', #337
	SYMB	TYPE, 339, 'X', 12, #16, 30, 1, #321
	SYMB	TYPE, 340, 'n', #339, 129
	SYMB	TYPE, 341, 'P', #340
	SYMB	TYPE, 319, "TEvent", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TEvent", #324, 2,\
		 "_TEvent", #327, 6,\
		 "Wait", #332, 10,\
		 "Set", #335, 14,\
		 "Clear", #338, 18,\
		 "IsSet", #341, 22,\
		 "ID", #291, 26,\
		 "Name", #287, 28
	SYMB	TYPE, 318, 'X', 12, #1, 30, 2, #321, #287
	SYMB	GFUN, "TEvent_TEvent", _TEvent_TEvent, #318, 0, 0, 48
	SYMB	ALAB, _TEvent_TEvent, #318
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "Name", 11, 0, 2253
	SYMB	IDEN, "this", 3, #321, 0, 2061
	SYMB	IDEN, "Name", 11, #287, 0, 2061
	SYMB	IDEN, "Ptr", -1, #321, 130, 5
	SYMB	LTIM, "Ptr", -1, 0, 69
; rtxcobj.c  108	
; rtxcobj.c  109	 struct TEvent *Ptr;
; rtxcobj.c  110	
; rtxcobj.c  111	 if(this>(struct TEvent *)0)
	SYMB	LINE, 111
	CMP.W	R1,#00H
	BNE	_6
	CMP.W	R0,#00H
_6:
	BL	_5
; rtxcobj.c  112	 {
; rtxcobj.c  113	  Ptr=this;
	SYMB	LINE, 113
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "Ptr", 19, 0, 205
; rtxcobj.c  114	  this->ID=NSEMAS+1;
	SYMB	LINE, 114
	MOV.W	[R7+6],R1
	MOV.W	[R7+4],R0
	ADD.W	R0,#01AH
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", -8, 130, 2245
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.W	R1,[R7+6]
	MOV.W	R0,[R7+4]
	MOV.B	ES,R1L
	MOV.B	[R0+26],#01H
	SYMB	LTIM, "this", -8, 130, 2117
	SYMB	LTIM, "this", 3, 0, 2253
; rtxcobj.c  115	  while(Ptr!=&TEventPartition[0])
	SYMB	LINE, 115
	CMP.W	R1,#SEG( _TEventPartition )
	BNE	_7
	CMP.W	R0,#SOF( _TEventPartition )
_7:
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", -8, 130, 2245
	BEQ	_4
_3:
; rtxcobj.c  116	  {
; rtxcobj.c  117	   this->ID++;
	SYMB	LINE, 117
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	MOV.B	ES,R1L
	ADDS.B	[R0],#01H
; rtxcobj.c  118	   Ptr--;
	SYMB	LINE, 118
	SUB.W	R4,#020H
	SYMB	LTIM, "Ptr", 19, 0, 77
	SYMB	LTIM, "Ptr", 19, 0, 205
	SYMB	LINE, 115
	CMP.W	R5,#SEG( _TEventPartition )
	BNE	_3
	CMP.W	R4,#SOF( _TEventPartition )
	BNE	_3
; rtxcobj.c  119	  }
	SYMB	LINE, 119
_4:
; rtxcobj.c  120	 this->ObjectID=TEventID;
	SYMB	LINE, 120
	MOV.W	R1,[R7+6]
	MOV.W	R0,[R7+4]
	MOV.B	ES,R1L
	MOV.W	[R0],#01H
	SYMB	LTIM, "this", -8, 130, 2117
	SYMB	LTIM, "this", 3, 0, 2253
; rtxcobj.c  121	 this->Name=Name;
	SYMB	LINE, 121
	MOV.B	ES,R1L
	MOV.W	[R0+28],R2
	MOV.W	[R0+30],R3
; rtxcobj.c  122	 }
	SYMB	LINE, 122
_5:
; rtxcobj.c  123	}
	SYMB	LINE, 123
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "Name", 11, 0, 2125
	SYMB	LTIM, "Ptr", 19, 0, 77
	SYMB	EFUN
; rtxcobj.c  124	
; rtxcobj.c  125	
; rtxcobj.c  126	void	TEvent__TEvent(struct TEvent *this)
; rtxcobj.c  127	{
	ALIGN	1
	SYMB	LINE, 127
	PUBLIC	_TEvent__TEvent
_TEvent__TEvent:
	SYMB	TYPE, 342, 'X', 12, #1, 30, 1, #321
	SYMB	GFUN, "TEvent__TEvent", _TEvent__TEvent, #342, 0, 0, 0
	SYMB	ALAB, _TEvent__TEvent, #342
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #321, 0, 2061
; rtxcobj.c  128	 if(this>(struct TEvent *)0)
	SYMB	LINE, 128
	CMP.W	R1,#00H
	BNE	_10
	CMP.W	R0,#00H
_10:
	BL	_9
; rtxcobj.c  129	  this->ID=0;
	SYMB	LINE, 129
	MOV.B	ES,R1L
	MOV.B	[R0+26],#00H
_9:
; rtxcobj.c  130	}
	SYMB	LINE, 130
	RET
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	EFUN
; rtxcobj.c  131	
; rtxcobj.c  132	
; rtxcobj.c  133	int	TEvent_Waitt(struct TEvent *this, long *TimeOut)
; rtxcobj.c  134	{
	ALIGN	1
	SYMB	LINE, 134
	PUBLIC	_TEvent_Waitt
_TEvent_Waitt:
	SYMB	TYPE, 343, 'X', 12, #16, 30, 2, #321, #329
	SYMB	GFUN, "TEvent_Waitt", _TEvent_Waitt, #343, 0, 0, 48
	SYMB	ALAB, _TEvent_Waitt, #343
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0CH
	SYMB	SOFF, 8
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "TimeOut", 11, 0, 2253
	SYMB	IDEN, "this", 3, #321, 0, 2061
	SYMB	IDEN, "TimeOut", 11, #329, 0, 2061
	SYMB	IDEN, "ret", -1, #16, 130, 5
	SYMB	LTIM, "ret", -1, 0, 69
; rtxcobj.c  135	
; rtxcobj.c  136	 int ret;
; rtxcobj.c  137	
; rtxcobj.c  138	 if(this==0)
	SYMB	LINE, 138
	MOV.W	R5,R1
	MOV.W	R4,R0
	OR.W	R1,R0
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", 19, 0, 2253
	BNE	_11
; rtxcobj.c  139	  return(0);
	SYMB	LINE, 139
	MOV.W	R0,#00H
	BR	_22
_11:
	SYMB	LTIM, "this", 19, 0, 2125
	SYMB	LTIM, "this", 19, 0, 2253
	SYMB	LTIM, "TimeOut", 11, 0, 2125
	SYMB	LTIM, "TimeOut", 11, 0, 2253
; rtxcobj.c  140	 if(TimeOut==0)
	SYMB	LINE, 140
	MOV.W	R1,R3
	MOV.W	R0,R2
	OR.W	R3,R2
	SYMB	LTIM, "TimeOut", 11, 0, 2125
	SYMB	LTIM, "TimeOut", 3, 0, 2253
	BNE	_12
; rtxcobj.c  141	 {
; rtxcobj.c  142	  KS_wait(this->ID);
	SYMB	LINE, 142
	MOV.B	ES,R5L
	MOV.B	R0L,[R4+26]
	SYMB	LTIM, "TimeOut", 3, 0, 2125
	CALL	_KS_wait
; rtxcobj.c  143	  return(-1);
	SYMB	LINE, 143
	MOV.W	R0,#0FFFFH
	BR	_22
; rtxcobj.c  144	 }
	SYMB	LINE, 144
_12:
	SYMB	LTIM, "this", 19, 0, 2125
	SYMB	LTIM, "this", 19, 0, 2253
	SYMB	LTIM, "TimeOut", 3, 0, 2253
; rtxcobj.c  145	 if(*TimeOut<0)
	SYMB	LINE, 145
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.B	ES,R1L
	MOV.W	R1,[R0+2]
	MOV.W	R0,[R0]
	SYMB	LTIM, "TimeOut", 3, 0, 2125
	SYMB	LTIM, "TimeOut", -8, 130, 2245
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	MOV.B	ES,R3L
	CMP.W	[R2+2],#00H
	BGT	_13
	BLT	_23
	CMP.W	[R2],#00H
	BCC	_13
_23:
; rtxcobj.c  146	  return(-1);
	SYMB	LINE, 146
	MOV.W	R0,#0FFFFH
	BR	_22
_13:
	SYMB	LTIM, "this", 19, 0, 2125
	SYMB	LTIM, "this", 19, 0, 2253
	SYMB	LTIM, "TimeOut", -8, 130, 2117
	SYMB	LTIM, "TimeOut", -8, 130, 2245
; rtxcobj.c  147	 if(*TimeOut>CLKTICK)
	SYMB	LINE, 147
	MOV.W	R3,#00H
	MOV.W	R2,#08H
	CMP.W	R1,R3
	BLT	_16
	BGT	_24
	CMP.W	R0,R2
	BL	_16
_24:
; rtxcobj.c  148	 {
; rtxcobj.c  149	  ret=KS_waitt(this->ID,*TimeOut/CLKTICK);
	SYMB	LINE, 149
	MOV.B	ES,R5L
	MOV.B	R4L,[R4+26]
	SYMB	LTIM, "this", 19, 0, 2125
	FCALL	__SDIVL
	MOV.W	R1,R0
	MOV.B	R0L,R4L
	CALL	_KS_waitt
	SYMB	LTIM, "ret", 2, 0, 205
; rtxcobj.c  150	  if(ret==RC_GOOD)
	SYMB	LINE, 150
	OR.W	R0,R0
	BNE	_14
; rtxcobj.c  151	   return(-1);
	SYMB	LINE, 151
	MOV.W	R0,#0FFFFH
	SYMB	LTIM, "ret", 2, 0, 77
	BR	_22
_14:
	SYMB	LTIM, "TimeOut", -8, 130, 2117
	SYMB	LTIM, "TimeOut", -8, 130, 2245
; rtxcobj.c  152	  else if(ret==RC_TIMEOUT)
	SYMB	LINE, 152
	CMP.W	R0,#05H
	BNE	_15
; rtxcobj.c  153	  {
; rtxcobj.c  154	   *TimeOut=0;
	SYMB	LINE, 154
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	MOV.B	ES,R1L
	MOV.W	[R0],#00H
	MOV.W	[R0+2],#00H
	SYMB	LTIM, "TimeOut", -8, 130, 2117
	SYMB	LTIM, "TimeOut", 3, 0, 2253
; rtxcobj.c  155	   return(-1);
	SYMB	LINE, 155
	MOV.W	R0,#0FFFFH
	SYMB	LTIM, "TimeOut", 3, 0, 2125
	BR	_22
; rtxcobj.c  156	  }
	SYMB	LINE, 156
_15:
; rtxcobj.c  157	  else 
; rtxcobj.c  158	   return(0);
	SYMB	LINE, 158
	MOV.W	R0,#00H
	BR	_22
; rtxcobj.c  159	 }
	SYMB	LINE, 159
_16:
	SYMB	LTIM, "this", 19, 0, 2253
; rtxcobj.c  160	 KS_wait(this->ID);
	SYMB	LINE, 160
	MOV.B	ES,R5L
	MOV.B	R0L,[R4+26]
	CALL	_KS_wait
; rtxcobj.c  161	 return(-1);
	SYMB	LINE, 161
	MOV.W	R0,#0FFFFH
; rtxcobj.c  162	}
	SYMB	LINE, 162
_22:
	ADDS.W	R7,#04H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "this", 19, 0, 2125
	SYMB	EFUN
; rtxcobj.c  163	
; rtxcobj.c  164	
; rtxcobj.c  165	void	TEvent_Signal(struct TEvent *this)
; rtxcobj.c  166	{
	ALIGN	1
	SYMB	LINE, 166
	PUBLIC	_TEvent_Signal
_TEvent_Signal:
	SYMB	TYPE, 344, 'X', 12, #1, 30, 1, #321
	SYMB	GFUN, "TEvent_Signal", _TEvent_Signal, #344, 0, 0, 0
	SYMB	ALAB, _TEvent_Signal, #344
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #321, 0, 2061
; rtxcobj.c  167	 if(this>(struct TEvent *)0)
	SYMB	LINE, 167
	CMP.W	R1,#00H
	BNE	_27
	CMP.W	R0,#00H
_27:
	BL	_26
; rtxcobj.c  168	 {
; rtxcobj.c  169	  KS_signal(this->ID);
	SYMB	LINE, 169
	MOV.B	ES,R1L
	MOV.B	R0L,[R0+26]
	SYMB	LTIM, "this", 3, 0, 2125
	CALL	_KS_signal
; rtxcobj.c  170	 }
	SYMB	LINE, 170
_26:
; rtxcobj.c  171	}
	SYMB	LINE, 171
	RET
	SYMB	EFUN
; rtxcobj.c  172	
; rtxcobj.c  173	
; rtxcobj.c  174	void	TEvent_Pend(struct TEvent *this)
; rtxcobj.c  175	{
	ALIGN	1
	SYMB	LINE, 175
	PUBLIC	_TEvent_Pend
_TEvent_Pend:
	SYMB	TYPE, 345, 'X', 12, #1, 30, 1, #321
	SYMB	GFUN, "TEvent_Pend", _TEvent_Pend, #345, 0, 0, 0
	SYMB	ALAB, _TEvent_Pend, #345
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #321, 0, 2061
; rtxcobj.c  176	 if(this>(struct TEvent *)0)
	SYMB	LINE, 176
	CMP.W	R1,#00H
	BNE	_29
	CMP.W	R0,#00H
_29:
	BL	_28
; rtxcobj.c  177	 {
; rtxcobj.c  178	  KS_pend(this->ID);
	SYMB	LINE, 178
	MOV.B	ES,R1L
	MOV.B	R0L,[R0+26]
	SYMB	LTIM, "this", 3, 0, 2125
	CALL	_KS_pend
; rtxcobj.c  179	 }
	SYMB	LINE, 179
_28:
; rtxcobj.c  180	}
	SYMB	LINE, 180
	RET
	SYMB	EFUN
; rtxcobj.c  181	
; rtxcobj.c  182	
; rtxcobj.c  183	int	TEvent_InqSema(struct TEvent *this)
; rtxcobj.c  184	{
	ALIGN	1
	SYMB	LINE, 184
	PUBLIC	_TEvent_InqSema
_TEvent_InqSema:
	SYMB	TYPE, 346, 'X', 12, #16, 30, 1, #321
	SYMB	GFUN, "TEvent_InqSema", _TEvent_InqSema, #346, 0, 0, 0
	SYMB	ALAB, _TEvent_InqSema, #346
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #321, 0, 2061
; rtxcobj.c  185	 if(this>(struct TEvent *)0)
	SYMB	LINE, 185
	CMP.W	R1,#00H
	BNE	_32
	CMP.W	R0,#00H
_32:
	BL	_30
; rtxcobj.c  186	 {
; rtxcobj.c  187	  return(KS_inqsema(this->ID));
	SYMB	LINE, 187
	MOV.B	ES,R1L
	MOV.B	R0L,[R0+26]
	SYMB	LTIM, "this", 3, 0, 2125
	CALL	_KS_inqsema
	MOV.B	R0L,R0L
	SEXT.B	R0H
	RET
; rtxcobj.c  188	 }
	SYMB	LINE, 188
_30:
; rtxcobj.c  189	 else
; rtxcobj.c  190	 {
; rtxcobj.c  191	  return(0);
	SYMB	LINE, 191
	MOV.W	R0,#00H
; rtxcobj.c  192	 }
; rtxcobj.c  193	}
	SYMB	LINE, 193
_31:
	RET
	SYMB	EFUN
; rtxcobj.c  194	
; rtxcobj.c  195	
; rtxcobj.c  196	
; rtxcobj.c  197	TEvent	*newTEvent(char *Name)
	SYMB	TYPE, 347, "TEvent", 'T', #319
; rtxcobj.c  198	{
	ALIGN	1
	SYMB	LINE, 198
	PUBLIC	_newTEvent
_newTEvent:
	SYMB	TYPE, 348, 'n', #347, 130
	SYMB	TYPE, 349, 'P', #348
	SYMB	TYPE, 350, 'X', 12, #349, 30, 1, #287
	SYMB	GFUN, "newTEvent", _newTEvent, #350, 0, 0, 48
	SYMB	ALAB, _newTEvent, #350
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	LTIM, "Name", 3, 0, 2253
	MOV.W	[R7+6],R1
	MOV.W	[R7+4],R0
	SYMB	LTIM, "Name", 3, 0, 2125
	SYMB	LTIM, "Name", -8, 130, 2245
	SYMB	IDEN, "Name", -5, #287, 130, 2053
	SYMB	IDEN, "Event", -1, #349, 130, 5
	SYMB	LTIM, "Event", -1, 0, 69
; rtxcobj.c  199	
; rtxcobj.c  200	/* VAR */
; rtxcobj.c  201	 TEvent *Event;
; rtxcobj.c  202	
; rtxcobj.c  203	/* BEGIN */
; rtxcobj.c  204	 if(TEventMap==0)
	SYMB	LINE, 204
	MOV.B	ES,#SEG( _TEventMap )
	MOV.W	R0,#SOF( _TEventMap )
	MOV.B	R0L,[R0]
	BNE	_34
; rtxcobj.c  205	 {
; rtxcobj.c  206	  TEventMap=KS_create_part(&TEventPartition,sizeof(struct TEvent),DNSEMAS);  /* Create event map */
	SYMB	LINE, 206
	MOV.W	R1,#SEG( _TEventPartition )
	MOV.W	R0,#SOF( _TEventPartition )
	MOV.W	R2,#020H
	MOV.W	R3,#080H
	CALL	_KS_create_part
	MOV.B	ES,#SEG( _TEventMap )
	MOV.W	R1,#SOF( _TEventMap )
	MOV.B	[R1],R0L
; rtxcobj.c  207	  if(TEventMap==0)
	SYMB	LINE, 207
	OR.B	R0L,R0L
	BNE	_34
; rtxcobj.c  208	   return(0);
	SYMB	LINE, 208
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_39
; rtxcobj.c  209	 }
	SYMB	LINE, 209
_34:
	SYMB	LTIM, "Name", -8, 130, 2117
	SYMB	LTIM, "Name", -8, 130, 2245
; rtxcobj.c  210	 Event=KS_alloc(TEventMap);
	SYMB	LINE, 210
	MOV.B	ES,#SEG( _TEventMap )
	MOV.W	R0,#SOF( _TEventMap )
	MOV.B	R0L,[R0]
	CALL	_KS_alloc
	SYMB	LTIM, "Event", 3, 0, 205
; rtxcobj.c  211	 if(Event==0)
	SYMB	LINE, 211
	MOV.W	R3,R1
	MOV.W	R2,R0
	OR.W	R1,R0
	SYMB	LTIM, "Event", 3, 0, 77
	SYMB	LTIM, "Event", 11, 0, 205
	BNE	_35
; rtxcobj.c  212	 {
; rtxcobj.c  213	//  LogEvent(EventNoMoreEvents,0);
; rtxcobj.c  214	  return(0);	
	SYMB	LINE, 214
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_39
; rtxcobj.c  215	 }
	SYMB	LINE, 215
_35:
	SYMB	LTIM, "Name", -8, 130, 2117
	SYMB	LTIM, "Name", -8, 130, 2245
	SYMB	LTIM, "Event", 11, 0, 77
	SYMB	LTIM, "Event", 11, 0, 205
; rtxcobj.c  216	 Event->TEvent=TEvent_TEvent;
	SYMB	LINE, 216
	MOV.W	R1,R3
	MOV.W	R0,R2
	ADD.W	R0,#02H
	MOV.B	ES,R1L
	MOV.W	[R0],#SOF( _TEvent_TEvent )
	MOV.W	[R0+2],#SEG( _TEvent_TEvent )
; rtxcobj.c  217	 Event->_TEvent=TEvent__TEvent;
	SYMB	LINE, 217
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#06H
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TEvent__TEvent )
	MOV.W	[R4+2],#SEG( _TEvent__TEvent )
; rtxcobj.c  218	 Event->Wait=TEvent_Waitt;
	SYMB	LINE, 218
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#0AH
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TEvent_Waitt )
	MOV.W	[R4+2],#SEG( _TEvent_Waitt )
; rtxcobj.c  219	 Event->Set=TEvent_Signal;
	SYMB	LINE, 219
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#0EH
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TEvent_Signal )
	MOV.W	[R4+2],#SEG( _TEvent_Signal )
; rtxcobj.c  220	 Event->Clear=TEvent_Pend;
	SYMB	LINE, 220
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#012H
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TEvent_Pend )
	MOV.W	[R4+2],#SEG( _TEvent_Pend )
; rtxcobj.c  221	 Event->IsSet=TEvent_InqSema;
	SYMB	LINE, 221
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#016H
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TEvent_InqSema )
	MOV.W	[R4+2],#SEG( _TEvent_InqSema )
; rtxcobj.c  222	 Event->TEvent(Event,Name);
	SYMB	LINE, 222
	MOV.B	ES,R1L
	MOV.W	R4,[R0]
	MOV.W	R5,[R0+2]
	MOV.W	[R7+2],R3
	MOV.W	[R7],R2
	MOV.W	R1,R3
	MOV.W	R0,R2
	SYMB	LTIM, "Event", 11, 0, 77
	SYMB	LTIM, "Event", -12, 130, 197
	SYMB	LTIM, "Event", -12, 130, 69
	SYMB	LTIM, "Event", 3, 0, 205
	MOV.W	R3,[R7+6]
	MOV.W	R2,[R7+4]
	FCALL	__ICALL
	SYMB	LTIM, "Name", -8, 130, 2117
	SYMB	LTIM, "Name", 11, 0, 2253
	SYMB	LTIM, "Name", 11, 0, 2125
	SYMB	LTIM, "Event", 3, 0, 77
	SYMB	LTIM, "Event", -12, 130, 197
; rtxcobj.c  223	 if(Event->ID>(NSEMAS+DNSEMAS+1))
	SYMB	LINE, 223
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	MOV.B	ES,R1L
	CMP.B	[R0+26],#081H
	BL	_36
; rtxcobj.c  224	 {
; rtxcobj.c  225	  KS_free(TEventMap,Event);
	SYMB	LINE, 225
	MOV.B	ES,#SEG( _TEventMap )
	MOV.W	R0,#SOF( _TEventMap )
	MOV.B	R0L,[R0]
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	CALL	_KS_free
	SYMB	LTIM, "Event", -12, 130, 69
	SYMB	LTIM, "Event", 11, 0, 205
	SYMB	LTIM, "Event", 11, 0, 77
; rtxcobj.c  226	  return(0);
	SYMB	LINE, 226
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_39
; rtxcobj.c  227	 }
	SYMB	LINE, 227
_36:
	SYMB	LTIM, "Event", -12, 130, 197
; rtxcobj.c  228	 return(Event);
	SYMB	LINE, 228
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	SYMB	LTIM, "Event", -12, 130, 69
	SYMB	LTIM, "Event", 3, 0, 205
; rtxcobj.c  229	}
	SYMB	LINE, 229
_39:
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "Event", 3, 0, 77
	SYMB	EFUN
; rtxcobj.c  230	
; rtxcobj.c  231	
; rtxcobj.c  232	void deleteTEvent(TEvent *Event)
; rtxcobj.c  233	{
	ALIGN	1
	SYMB	LINE, 233
	PUBLIC	_deleteTEvent
_deleteTEvent:
	SYMB	TYPE, 351, 'X', 12, #1, 30, 1, #349
	SYMB	GFUN, "deleteTEvent", _deleteTEvent, #351, 0, 0, 48
	SYMB	ALAB, _deleteTEvent, #351
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0CH
	SYMB	SOFF, 8
	SYMB	LTIM, "Event", 3, 0, 2253
	SYMB	IDEN, "Event", 3, #349, 0, 2061
; rtxcobj.c  234	 Event->_TEvent(Event);
	SYMB	LINE, 234
	MOV.B	ES,R1L
	MOV.W	R4,[R0+6]
	MOV.W	R5,[R0+8]
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	SYMB	LTIM, "Event", 3, 0, 2125
	SYMB	LTIM, "Event", -8, 130, 2245
	SYMB	LTIM, "Event", -8, 130, 2117
	SYMB	LTIM, "Event", 3, 0, 2253
	FCALL	__ICALL
	SYMB	LTIM, "Event", 3, 0, 2125
	SYMB	LTIM, "Event", -8, 130, 2245
; rtxcobj.c  235	 KS_free(TEventMap,Event);
	SYMB	LINE, 235
	MOV.B	ES,#SEG( _TEventMap )
	MOV.W	R0,#SOF( _TEventMap )
	MOV.B	R0L,[R0]
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	CALL	_KS_free
	SYMB	LTIM, "Event", -8, 130, 2117
	SYMB	LTIM, "Event", 11, 0, 2253
	SYMB	LTIM, "Event", 11, 0, 2125
; rtxcobj.c  236	}
	SYMB	LINE, 236
	ADDS.W	R7,#04H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rtxcobj.c  237	
; rtxcobj.c  238	/**************** TResource Object *****************/
; rtxcobj.c  239	typedef struct TResource {
; rtxcobj.c  240	  /* Public: */
; rtxcobj.c  241	  	int	ObjectID;
; rtxcobj.c  242		void	(*TResource)(struct TResource *this, char *Name);
; rtxcobj.c  243		void	(*_TResource)(struct TResource *this);
; rtxcobj.c  244		void	(*Lock)(struct TResource *this);
; rtxcobj.c  245		void	(*Unlock)(struct TResource *this);
; rtxcobj.c  246		int	(*Owner)(struct TResource *this);
; rtxcobj.c  247		RESOURCE ID;
; rtxcobj.c  248		char *	Name;
; rtxcobj.c  249	  /* Private: */
; rtxcobj.c  250	} TResource;
; rtxcobj.c  251	
; rtxcobj.c  252	
; rtxcobj.c  253	struct TResource TResourcePartition[DNRES];
; rtxcobj.c  254	MAP		 TResourceMap=0;
	RSEG	RTXCOBJ_INI_FA
	SYMB	IDEN, "TResourceMap", _TResourceMap, #292, 130, 0
	SYMB	ALAB, _TResourceMap, #292
	PUBLIC	_TResourceMap
_TResourceMap:
; rtxcobj.c  255	
; rtxcobj.c  256	
; rtxcobj.c  257	void	TResource_TResource(struct TResource *this, char *Name)
; rtxcobj.c  258	{
	DB	000H
	RSEG	RTXCOBJ_PR
	ALIGN	1
	SYMB	LINE, 258
	PUBLIC	_TResource_TResource
_TResource_TResource:
	SYMB	TYPE, 354, 'n', #353, 130
	SYMB	TYPE, 355, 'P', #354
	SYMB	TYPE, 353, 'X', 12, #1, 30, 2, #355, #287
	SYMB	TYPE, 357, 'n', #356, 129
	SYMB	TYPE, 358, 'P', #357
	SYMB	TYPE, 359, 'X', 12, #1, 30, 1, #355
	SYMB	TYPE, 360, 'n', #359, 129
	SYMB	TYPE, 361, 'P', #360
	SYMB	TYPE, 362, 'X', 12, #1, 30, 1, #355
	SYMB	TYPE, 363, 'n', #362, 129
	SYMB	TYPE, 364, 'P', #363
	SYMB	TYPE, 365, 'X', 12, #1, 30, 1, #355
	SYMB	TYPE, 366, 'n', #365, 129
	SYMB	TYPE, 367, 'P', #366
	SYMB	TYPE, 368, 'X', 12, #16, 30, 1, #355
	SYMB	TYPE, 369, 'n', #368, 129
	SYMB	TYPE, 370, 'P', #369
	SYMB	TYPE, 353, "TResource", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TResource", #358, 2,\
		 "_TResource", #361, 6,\
		 "Lock", #364, 10,\
		 "Unlock", #367, 14,\
		 "Owner", #370, 18,\
		 "ID", #309, 22,\
		 "Name", #287, 24
	SYMB	TYPE, 352, 'X', 12, #1, 30, 2, #355, #287
	SYMB	GFUN, "TResource_TResource", _TResource_TResource, #352, 0, 0, 48
	SYMB	ALAB, _TResource_TResource, #352
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "Name", 11, 0, 2253
	SYMB	IDEN, "this", 3, #355, 0, 2061
	SYMB	IDEN, "Name", 11, #287, 0, 2061
	SYMB	IDEN, "Ptr", -1, #355, 130, 5
	SYMB	LTIM, "Ptr", -1, 0, 69
; rtxcobj.c  259	
; rtxcobj.c  260	 struct TResource *Ptr;
; rtxcobj.c  261	
; rtxcobj.c  262	 if(this>(struct TResource *)0)
	SYMB	LINE, 262
	CMP.W	R1,#00H
	BNE	_44
	CMP.W	R0,#00H
_44:
	BL	_43
; rtxcobj.c  263	 {
; rtxcobj.c  264	  Ptr=this;
	SYMB	LINE, 264
	MOV.W	R5,R1
	MOV.W	R4,R0
	SYMB	LTIM, "Ptr", 19, 0, 205
; rtxcobj.c  265	  this->ID=NRES+1;
	SYMB	LINE, 265
	MOV.W	[R7+6],R1
	MOV.W	[R7+4],R0
	ADD.W	R0,#016H
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", -8, 130, 2245
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.W	R1,[R7+6]
	MOV.W	R0,[R7+4]
	MOV.B	ES,R1L
	MOV.B	[R0+22],#01H
	SYMB	LTIM, "this", -8, 130, 2117
	SYMB	LTIM, "this", 3, 0, 2253
; rtxcobj.c  266	  while(Ptr!=&TResourcePartition[0])
	SYMB	LINE, 266
	CMP.W	R1,#SEG( _TResourcePartition )
	BNE	_45
	CMP.W	R0,#SOF( _TResourcePartition )
_45:
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", -8, 130, 2245
	BEQ	_42
_41:
; rtxcobj.c  267	  {
; rtxcobj.c  268	   this->ID++;
	SYMB	LINE, 268
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	MOV.B	ES,R1L
	ADDS.B	[R0],#01H
; rtxcobj.c  269	   Ptr--;
	SYMB	LINE, 269
	SUB.W	R4,#01CH
	SYMB	LTIM, "Ptr", 19, 0, 77
	SYMB	LTIM, "Ptr", 19, 0, 205
	SYMB	LINE, 266
	CMP.W	R5,#SEG( _TResourcePartition )
	BNE	_41
	CMP.W	R4,#SOF( _TResourcePartition )
	BNE	_41
; rtxcobj.c  270	  }
	SYMB	LINE, 270
_42:
; rtxcobj.c  271	 this->ObjectID=TResourceID;
	SYMB	LINE, 271
	MOV.W	R1,[R7+6]
	MOV.W	R0,[R7+4]
	MOV.B	ES,R1L
	MOV.W	[R0],#04H
	SYMB	LTIM, "this", -8, 130, 2117
	SYMB	LTIM, "this", 3, 0, 2253
; rtxcobj.c  272	 this->Name=Name;
	SYMB	LINE, 272
	MOV.B	ES,R1L
	MOV.W	[R0+24],R2
	MOV.W	[R0+26],R3
; rtxcobj.c  273	 }
	SYMB	LINE, 273
_43:
; rtxcobj.c  274	}
	SYMB	LINE, 274
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "Name", 11, 0, 2125
	SYMB	LTIM, "Ptr", 19, 0, 77
	SYMB	EFUN
; rtxcobj.c  275	
; rtxcobj.c  276	
; rtxcobj.c  277	void	TResource__TResource(struct TResource *this)
; rtxcobj.c  278	{
	ALIGN	1
	SYMB	LINE, 278
	PUBLIC	_TResource__TResource
_TResource__TResource:
	SYMB	TYPE, 371, 'X', 12, #1, 30, 1, #355
	SYMB	GFUN, "TResource__TResource", _TResource__TResource, #371, 0, 0, 0
	SYMB	ALAB, _TResource__TResource, #371
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #355, 0, 2061
; rtxcobj.c  279	 if(this>(struct TResource *)0)
	SYMB	LINE, 279
	CMP.W	R1,#00H
	BNE	_48
	CMP.W	R0,#00H
_48:
	BL	_47
; rtxcobj.c  280	  this->ID=0;
	SYMB	LINE, 280
	MOV.B	ES,R1L
	MOV.B	[R0+22],#00H
_47:
; rtxcobj.c  281	}
	SYMB	LINE, 281
	RET
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	EFUN
; rtxcobj.c  282	
; rtxcobj.c  283	
; rtxcobj.c  284	void	TResource_Lock(struct TResource *this)
; rtxcobj.c  285	{
	ALIGN	1
	SYMB	LINE, 285
	PUBLIC	_TResource_Lock
_TResource_Lock:
	SYMB	TYPE, 372, 'X', 12, #1, 30, 1, #355
	SYMB	GFUN, "TResource_Lock", _TResource_Lock, #372, 0, 0, 0
	SYMB	ALAB, _TResource_Lock, #372
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #355, 0, 2061
; rtxcobj.c  286	 if(this>(struct TResource *)0)
	SYMB	LINE, 286
	CMP.W	R1,#00H
	BNE	_50
	CMP.W	R0,#00H
_50:
	BL	_49
; rtxcobj.c  287	 {
; rtxcobj.c  288	  KS_lockw(this->ID);
	SYMB	LINE, 288
	MOV.B	ES,R1L
	MOV.B	R0L,[R0+22]
	SYMB	LTIM, "this", 3, 0, 2125
	CALL	_KS_lockw
; rtxcobj.c  289	 }
	SYMB	LINE, 289
_49:
; rtxcobj.c  290	}
	SYMB	LINE, 290
	RET
	SYMB	EFUN
; rtxcobj.c  291	
; rtxcobj.c  292	
; rtxcobj.c  293	void	TResource_Unlock(struct TResource *this)
; rtxcobj.c  294	{
	ALIGN	1
	SYMB	LINE, 294
	PUBLIC	_TResource_Unlock
_TResource_Unlock:
	SYMB	TYPE, 373, 'X', 12, #1, 30, 1, #355
	SYMB	GFUN, "TResource_Unlock", _TResource_Unlock, #373, 0, 0, 0
	SYMB	ALAB, _TResource_Unlock, #373
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #355, 0, 2061
; rtxcobj.c  295	 if(this>(struct TResource *)0)
	SYMB	LINE, 295
	CMP.W	R1,#00H
	BNE	_52
	CMP.W	R0,#00H
_52:
	BL	_51
; rtxcobj.c  296	 {
; rtxcobj.c  297	  KS_unlock(this->ID);
	SYMB	LINE, 297
	MOV.B	ES,R1L
	MOV.B	R0L,[R0+22]
	SYMB	LTIM, "this", 3, 0, 2125
	CALL	_KS_unlock
; rtxcobj.c  298	 }
	SYMB	LINE, 298
_51:
; rtxcobj.c  299	}
	SYMB	LINE, 299
	RET
	SYMB	EFUN
; rtxcobj.c  300	
; rtxcobj.c  301	
; rtxcobj.c  302	int	TResource_Owner(struct TResource *this)
; rtxcobj.c  303	{
	ALIGN	1
	SYMB	LINE, 303
	PUBLIC	_TResource_Owner
_TResource_Owner:
	SYMB	TYPE, 374, 'X', 12, #16, 30, 1, #355
	SYMB	GFUN, "TResource_Owner", _TResource_Owner, #374, 0, 0, 0
	SYMB	ALAB, _TResource_Owner, #374
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #355, 0, 2061
; rtxcobj.c  304	 if(this>(struct TResource *)0)
	SYMB	LINE, 304
	CMP.W	R1,#00H
	BNE	_55
	CMP.W	R0,#00H
_55:
	BL	_53
; rtxcobj.c  305	 {
; rtxcobj.c  306	  return(KS_inqres(this->ID));
	SYMB	LINE, 306
	MOV.B	ES,R1L
	MOV.B	R0L,[R0+22]
	SYMB	LTIM, "this", 3, 0, 2125
	CALL	_KS_inqres
	MOV.B	R0L,R0L
	SEXT.B	R0H
	RET
; rtxcobj.c  307	 }
	SYMB	LINE, 307
_53:
; rtxcobj.c  308	 else
; rtxcobj.c  309	 {
; rtxcobj.c  310	  return(0);
	SYMB	LINE, 310
	MOV.W	R0,#00H
; rtxcobj.c  311	 }
; rtxcobj.c  312	}
	SYMB	LINE, 312
_54:
	RET
	SYMB	EFUN
; rtxcobj.c  313	
; rtxcobj.c  314	
; rtxcobj.c  315	
; rtxcobj.c  316	TResource *newTResource(char *Name)
	SYMB	TYPE, 375, "TResource", 'T', #353
; rtxcobj.c  317	{
	ALIGN	1
	SYMB	LINE, 317
	PUBLIC	_newTResource
_newTResource:
	SYMB	TYPE, 376, 'n', #375, 130
	SYMB	TYPE, 377, 'P', #376
	SYMB	TYPE, 378, 'X', 12, #377, 30, 1, #287
	SYMB	GFUN, "newTResource", _newTResource, #378, 0, 0, 48
	SYMB	ALAB, _newTResource, #378
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#08H
	SYMB	SOFF, 12
	SYMB	LTIM, "Name", 3, 0, 2253
	MOV.W	[R7+6],R1
	MOV.W	[R7+4],R0
	SYMB	LTIM, "Name", 3, 0, 2125
	SYMB	LTIM, "Name", -8, 130, 2245
	SYMB	IDEN, "Name", -5, #287, 130, 2053
	SYMB	IDEN, "Resource", -1, #377, 130, 5
	SYMB	LTIM, "Resource", -1, 0, 69
; rtxcobj.c  318	
; rtxcobj.c  319	/* VAR */
; rtxcobj.c  320	 TResource *Resource;
; rtxcobj.c  321	
; rtxcobj.c  322	/* BEGIN */
; rtxcobj.c  323	 if(TResourceMap==0)
	SYMB	LINE, 323
	MOV.B	ES,#SEG( _TResourceMap )
	MOV.W	R0,#SOF( _TResourceMap )
	MOV.B	R0L,[R0]
	BNE	_57
; rtxcobj.c  324	 {
; rtxcobj.c  325	  TResourceMap=KS_create_part(&TResourcePartition,sizeof(struct TResource),DNRES);  /* Create Resource map */
	SYMB	LINE, 325
	MOV.W	R1,#SEG( _TResourcePartition )
	MOV.W	R0,#SOF( _TResourcePartition )
	MOV.W	R2,#01CH
	MOV.W	R3,#080H
	CALL	_KS_create_part
	MOV.B	ES,#SEG( _TResourceMap )
	MOV.W	R1,#SOF( _TResourceMap )
	MOV.B	[R1],R0L
; rtxcobj.c  326	  if(TResourceMap==0)
	SYMB	LINE, 326
	OR.B	R0L,R0L
	BNE	_57
; rtxcobj.c  327	   return(0);
	SYMB	LINE, 327
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_62
; rtxcobj.c  328	 }
	SYMB	LINE, 328
_57:
	SYMB	LTIM, "Name", -8, 130, 2117
	SYMB	LTIM, "Name", -8, 130, 2245
; rtxcobj.c  329	 Resource=KS_alloc(TResourceMap);
	SYMB	LINE, 329
	MOV.B	ES,#SEG( _TResourceMap )
	MOV.W	R0,#SOF( _TResourceMap )
	MOV.B	R0L,[R0]
	CALL	_KS_alloc
	SYMB	LTIM, "Resource", 3, 0, 205
; rtxcobj.c  330	 if(Resource==0)
	SYMB	LINE, 330
	MOV.W	R3,R1
	MOV.W	R2,R0
	OR.W	R1,R0
	SYMB	LTIM, "Resource", 3, 0, 77
	SYMB	LTIM, "Resource", 11, 0, 205
	BNE	_58
; rtxcobj.c  331	 {
; rtxcobj.c  332	//  LogEvent(EventNoMoreResources,0);
; rtxcobj.c  333	  return(0);	
	SYMB	LINE, 333
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_62
; rtxcobj.c  334	 }
	SYMB	LINE, 334
_58:
	SYMB	LTIM, "Name", -8, 130, 2117
	SYMB	LTIM, "Name", -8, 130, 2245
	SYMB	LTIM, "Resource", 11, 0, 77
	SYMB	LTIM, "Resource", 11, 0, 205
; rtxcobj.c  335	 Resource->TResource=TResource_TResource;
	SYMB	LINE, 335
	MOV.W	R1,R3
	MOV.W	R0,R2
	ADD.W	R0,#02H
	MOV.B	ES,R1L
	MOV.W	[R0],#SOF( _TResource_TResource )
	MOV.W	[R0+2],#SEG( _TResource_TResource )
; rtxcobj.c  336	 Resource->_TResource=TResource__TResource;
	SYMB	LINE, 336
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#06H
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TResource__TResource )
	MOV.W	[R4+2],#SEG( _TResource__TResource )
; rtxcobj.c  337	 Resource->Lock=TResource_Lock;
	SYMB	LINE, 337
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#0AH
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TResource_Lock )
	MOV.W	[R4+2],#SEG( _TResource_Lock )
; rtxcobj.c  338	 Resource->Unlock=TResource_Unlock;
	SYMB	LINE, 338
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#0EH
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TResource_Unlock )
	MOV.W	[R4+2],#SEG( _TResource_Unlock )
; rtxcobj.c  339	 Resource->Owner=TResource_Owner;
	SYMB	LINE, 339
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#012H
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TResource_Owner )
	MOV.W	[R4+2],#SEG( _TResource_Owner )
; rtxcobj.c  340	 Resource->TResource(Resource,Name);
	SYMB	LINE, 340
	MOV.B	ES,R1L
	MOV.W	R4,[R0]
	MOV.W	R5,[R0+2]
	MOV.W	[R7+2],R3
	MOV.W	[R7],R2
	MOV.W	R1,R3
	MOV.W	R0,R2
	SYMB	LTIM, "Resource", 11, 0, 77
	SYMB	LTIM, "Resource", -12, 130, 197
	SYMB	LTIM, "Resource", -12, 130, 69
	SYMB	LTIM, "Resource", 3, 0, 205
	MOV.W	R3,[R7+6]
	MOV.W	R2,[R7+4]
	FCALL	__ICALL
	SYMB	LTIM, "Name", -8, 130, 2117
	SYMB	LTIM, "Name", 11, 0, 2253
	SYMB	LTIM, "Name", 11, 0, 2125
	SYMB	LTIM, "Resource", 3, 0, 77
	SYMB	LTIM, "Resource", -12, 130, 197
; rtxcobj.c  341	 if(Resource->ID>(NRES+DNRES+1))
	SYMB	LINE, 341
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	MOV.B	ES,R1L
	CMP.B	[R0+22],#081H
	BL	_59
; rtxcobj.c  342	 {
; rtxcobj.c  343	  KS_free(TResourceMap,Resource);
	SYMB	LINE, 343
	MOV.B	ES,#SEG( _TResourceMap )
	MOV.W	R0,#SOF( _TResourceMap )
	MOV.B	R0L,[R0]
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	CALL	_KS_free
	SYMB	LTIM, "Resource", -12, 130, 69
	SYMB	LTIM, "Resource", 11, 0, 205
	SYMB	LTIM, "Resource", 11, 0, 77
; rtxcobj.c  344	  return(0);
	SYMB	LINE, 344
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_62
; rtxcobj.c  345	 }
	SYMB	LINE, 345
_59:
	SYMB	LTIM, "Resource", -12, 130, 197
; rtxcobj.c  346	 return(Resource);
	SYMB	LINE, 346
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	SYMB	LTIM, "Resource", -12, 130, 69
	SYMB	LTIM, "Resource", 3, 0, 205
; rtxcobj.c  347	}
	SYMB	LINE, 347
_62:
	ADD.W	R7,#08H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "Resource", 3, 0, 77
	SYMB	EFUN
; rtxcobj.c  348	
; rtxcobj.c  349	
; rtxcobj.c  350	void deleteTResource(TResource *Resource)
; rtxcobj.c  351	{
	ALIGN	1
	SYMB	LINE, 351
	PUBLIC	_deleteTResource
_deleteTResource:
	SYMB	TYPE, 379, 'X', 12, #1, 30, 1, #377
	SYMB	GFUN, "deleteTResource", _deleteTResource, #379, 0, 0, 48
	SYMB	ALAB, _deleteTResource, #379
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0CH
	SYMB	SOFF, 8
	SYMB	LTIM, "Resource", 3, 0, 2253
	SYMB	IDEN, "Resource", 3, #377, 0, 2061
; rtxcobj.c  352	 Resource->_TResource(Resource);
	SYMB	LINE, 352
	MOV.B	ES,R1L
	MOV.W	R4,[R0+6]
	MOV.W	R5,[R0+8]
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	SYMB	LTIM, "Resource", 3, 0, 2125
	SYMB	LTIM, "Resource", -8, 130, 2245
	SYMB	LTIM, "Resource", -8, 130, 2117
	SYMB	LTIM, "Resource", 3, 0, 2253
	FCALL	__ICALL
	SYMB	LTIM, "Resource", 3, 0, 2125
	SYMB	LTIM, "Resource", -8, 130, 2245
; rtxcobj.c  353	 KS_free(TResourceMap,Resource);
	SYMB	LINE, 353
	MOV.B	ES,#SEG( _TResourceMap )
	MOV.W	R0,#SOF( _TResourceMap )
	MOV.B	R0L,[R0]
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	CALL	_KS_free
	SYMB	LTIM, "Resource", -8, 130, 2117
	SYMB	LTIM, "Resource", 11, 0, 2253
	SYMB	LTIM, "Resource", 11, 0, 2125
; rtxcobj.c  354	}
	SYMB	LINE, 354
	ADDS.W	R7,#04H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rtxcobj.c  355	
; rtxcobj.c  356	
; rtxcobj.c  357	
; rtxcobj.c  358	/**************** TThread Object *****************/
; rtxcobj.c  359	typedef struct TThread {
; rtxcobj.c  360	  /* Public: */
; rtxcobj.c  361	  	int	ObjectID;
; rtxcobj.c  362		void	(*TThread)(struct TThread *this, int Priority, void (*entry)(void));
; rtxcobj.c  363		void	(*Execute)(struct TThread *this);
; rtxcobj.c  364		void	(*Terminate)(struct TThread *this);
; rtxcobj.c  365		void	(*Suspend)(struct TThread *this, int Time);
; rtxcobj.c  366		void	(*Resume)(struct TThread *this);
; rtxcobj.c  367		int	(*GetPriority)(struct TThread *this);
; rtxcobj.c  368		void	(*SetPriority)(struct TThread *this, int Prio);
; rtxcobj.c  369		TASK	ID;
; rtxcobj.c  370		char	Status;
; rtxcobj.c  371	  /* Private: */
; rtxcobj.c  372		char 	*Stack;
; rtxcobj.c  373	} TThread;
; rtxcobj.c  374	
; rtxcobj.c  375	char far stk[DNTASKS][STACK_SIZE];
; rtxcobj.c  376	
; rtxcobj.c  377	void	TThread_TThread(struct TThread *this, int Priority, void (*entry)(void))
; rtxcobj.c  378	{
	ALIGN	1
	SYMB	LINE, 378
	PUBLIC	_TThread_TThread
_TThread_TThread:
	SYMB	TYPE, 381, 'X', 12, #1, 30, 0
	SYMB	TYPE, 382, 'n', #381, 129
	SYMB	TYPE, 383, 'P', #382
	SYMB	TYPE, 384, 'X', 12, #1, 30, 0
	SYMB	TYPE, 385, 'n', #384, 129
	SYMB	TYPE, 386, 'P', #385
	SYMB	TYPE, 388, 'n', #387, 130
	SYMB	TYPE, 389, 'P', #388
	SYMB	TYPE, 384, 'X', 12, #1, 30, 3, #389, #16, #386
	SYMB	TYPE, 391, 'n', #390, 129
	SYMB	TYPE, 392, 'P', #391
	SYMB	TYPE, 393, 'X', 12, #1, 30, 1, #389
	SYMB	TYPE, 394, 'n', #393, 129
	SYMB	TYPE, 395, 'P', #394
	SYMB	TYPE, 396, 'X', 12, #1, 30, 1, #389
	SYMB	TYPE, 397, 'n', #396, 129
	SYMB	TYPE, 398, 'P', #397
	SYMB	TYPE, 399, 'X', 12, #1, 30, 2, #389, #16
	SYMB	TYPE, 400, 'n', #399, 129
	SYMB	TYPE, 401, 'P', #400
	SYMB	TYPE, 402, 'X', 12, #1, 30, 1, #389
	SYMB	TYPE, 403, 'n', #402, 129
	SYMB	TYPE, 404, 'P', #403
	SYMB	TYPE, 405, 'X', 12, #16, 30, 1, #389
	SYMB	TYPE, 406, 'n', #405, 129
	SYMB	TYPE, 407, 'P', #406
	SYMB	TYPE, 408, 'X', 12, #1, 30, 2, #389, #16
	SYMB	TYPE, 409, 'n', #408, 129
	SYMB	TYPE, 410, 'P', #409
	SYMB	TYPE, 387, "TThread", 'S', 36,\
		 "ObjectID", #16, 0,\
		 "TThread", #392, 2,\
		 "Execute", #395, 6,\
		 "Terminate", #398, 10,\
		 "Suspend", #401, 14,\
		 "Resume", #404, 18,\
		 "GetPriority", #407, 22,\
		 "SetPriority", #410, 26,\
		 "ID", #264, 30,\
		 "Status", #2, 31,\
		 "Stack", #287, 32
	SYMB	TYPE, 380, 'X', 12, #1, 30, 3, #389, #16, #383
	SYMB	GFUN, "TThread_TThread", _TThread_TThread, #380, 0, 0, 112
	SYMB	ALAB, _TThread_TThread, #380
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#0CH
	SYMB	SOFF, 10
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "Priority", 10, 0, 2253
	MOV.W	R6,R2
	SYMB	LTIM, "Priority", 10, 0, 2125
	SYMB	LTIM, "Priority", 26, 0, 2253
	SYMB	IDEN, "this", 3, #389, 0, 2061
	SYMB	IDEN, "Priority", 26, #16, 0, 2061
	SYMB	TYPE, 411, 'X', 12, #1, 30, 0
	SYMB	TYPE, 412, 'n', #411, 129
	SYMB	TYPE, 413, 'P', #412
	SYMB	IDEN, "entry", 4, #413, 130, 2053
; rtxcobj.c  379	 if(this>(void *)0)
	SYMB	LINE, 379
	MOV.W	R5,R1
	MOV.W	R4,R0
	CMP.W	R5,#00H
	BNE	_66
	CMP.W	R4,#00H
_66:
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", 19, 0, 2253
	BL	_65
; rtxcobj.c  380	 {
; rtxcobj.c  381	  this->ID=KS_alloc_task();
	SYMB	LINE, 381
	CALL	_KS_alloc_task
	MOV.B	ES,R5L
	MOV.B	[R4+30],R0L
; rtxcobj.c  382	  if(this->ID>0)
	SYMB	LINE, 382
	CMP.B	R0L,#00H
	BLE	_65
; rtxcobj.c  383	  {
; rtxcobj.c  384	   this->ObjectID=TThreadID;
	SYMB	LINE, 384
	MOV.B	ES,R5L
	MOV.W	[R4],#00H
	MOV.W	[R7+2],R5
	MOV.W	[R7],R4
	SYMB	LTIM, "this", 19, 0, 2125
	SYMB	LTIM, "this", -10, 130, 2245
; rtxcobj.c  385	   this->Stack=stk[this->ID];
	SYMB	LINE, 385
	MOV.B	R1L,R0L
	SEXT.B	R1H
	ASL.W	R1,#09H
	MOV.W	R4,R1
	MOVS.W	R5,#00H
	MOV.W	R3,#SEG( _stk )
	MOV.W	R2,#SOF( _stk )
	ADD.W	R2,R4
	MOV.W	R5,[R7+2]
	MOV.W	R4,[R7]
	MOV.B	ES,R5L
	MOV.W	[R4+32],R2
	MOV.W	[R4+34],R3
	SYMB	LTIM, "this", -10, 130, 2117
	SYMB	LTIM, "this", 19, 0, 2253
	SYMB	LTIM, "Priority", 26, 0, 2125
; rtxcobj.c  386	   KS_deftask(this->ID,Priority,this->Stack,STACK_SIZE,entry);
	SYMB	LINE, 386
	MOV.W	R1,#0200H
	MOV.W	R5,[R7+16]
	MOV.W	R4,[R7+14]
	SYMB	LTIM, "this", 19, 0, 2125
	PUSH.W	R4, R5
	SYMB	SOFF, 14
	MOV.B	R0H,R6L
	CALL	_KS_deftask
	ADDS.W	R7,#04H
	SYMB	SOFF, 10
; rtxcobj.c  387	  }
; rtxcobj.c  388	 }
	SYMB	LINE, 388
_65:
; rtxcobj.c  389	}
	SYMB	LINE, 389
	ADDS.W	R7,#04H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rtxcobj.c  390	
; rtxcobj.c  391	
; rtxcobj.c  392	void	TThread_Execute(struct TThread *this)
; rtxcobj.c  393	{
	ALIGN	1
	SYMB	LINE, 393
	PUBLIC	_TThread_Execute
_TThread_Execute:
	SYMB	TYPE, 414, 'X', 12, #1, 30, 1, #389
	SYMB	GFUN, "TThread_Execute", _TThread_Execute, #414, 0, 0, 0
	SYMB	ALAB, _TThread_Execute, #414
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #389, 0, 2061
; rtxcobj.c  394	 KS_execute(this->ID);
	SYMB	LINE, 394
	MOV.B	ES,R1L
	MOV.B	R0L,[R0+30]
	SYMB	LTIM, "this", 3, 0, 2125
	CALL	_KS_execute
; rtxcobj.c  395	}
	SYMB	LINE, 395
	RET
	SYMB	EFUN
; rtxcobj.c  396	
; rtxcobj.c  397	
; rtxcobj.c  398	void	TThread__TThread(struct TThread *this)
; rtxcobj.c  399	{
	ALIGN	1
	SYMB	LINE, 399
	PUBLIC	_TThread__TThread
_TThread__TThread:
	SYMB	TYPE, 415, 'X', 12, #1, 30, 1, #389
	SYMB	GFUN, "TThread__TThread", _TThread__TThread, #415, 0, 0, 0
	SYMB	ALAB, _TThread__TThread, #415
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #389, 0, 2061
; rtxcobj.c  400	 if(this->ID>0)
	SYMB	LINE, 400
	MOV.B	ES,R1L
	MOV.B	R2L,[R0+30]
	MOV.B	ES,R1L
	CMP.B	[R0+30],#00H
	BLE	_68
; rtxcobj.c  401	 {
; rtxcobj.c  402	  KS_terminate(this->ID);
	SYMB	LINE, 402
	MOV.B	R0L,R2L
	CALL	_KS_terminate
	SYMB	LTIM, "this", 3, 0, 2125
; rtxcobj.c  403	 }
	SYMB	LINE, 403
_68:
; rtxcobj.c  404	
; rtxcobj.c  405	}
	SYMB	LINE, 405
	RET
	SYMB	EFUN
; rtxcobj.c  406	
; rtxcobj.c  407	
; rtxcobj.c  408	void	TThread_Suspend(struct TThread *this, int Time)
; rtxcobj.c  409	{
	ALIGN	1
	SYMB	LINE, 409
	PUBLIC	_TThread_Suspend
_TThread_Suspend:
	SYMB	TYPE, 416, 'X', 12, #1, 30, 2, #389, #16
	SYMB	GFUN, "TThread_Suspend", _TThread_Suspend, #416, 0, 0, 48
	SYMB	ALAB, _TThread_Suspend, #416
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "Time", 10, 0, 2253
	SYMB	IDEN, "this", 3, #389, 0, 2061
	SYMB	IDEN, "Time", 10, #16, 0, 2061
; rtxcobj.c  410	 if(this->ID>0)
	SYMB	LINE, 410
	MOV.W	R5,R1
	MOV.W	R4,R0
	ADD.W	R4,#01EH
	MOV.B	ES,R1L
	MOV.B	R3L,[R0+30]
	MOV.B	ES,R1L
	CMP.B	[R0+30],#00H
	BLE	_72
; rtxcobj.c  411	 {
; rtxcobj.c  412	  if(Time<0)
	SYMB	LINE, 412
	CMP.W	R2,#00H
	BGE	_70
; rtxcobj.c  413	  {
; rtxcobj.c  414	   KS_suspend(this->ID);
	SYMB	LINE, 414
	MOV.B	R0L,R3L
	CALL	_KS_suspend
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "Time", 10, 0, 2125
; rtxcobj.c  415	  }
	SYMB	LINE, 415
	BR	_72
_70:
	SYMB	LTIM, "Time", 10, 0, 2253
; rtxcobj.c  416	  else
; rtxcobj.c  417	  {
; rtxcobj.c  418	   KS_delay(this->ID,Time/CLKTICK);
	SYMB	LINE, 418
	MOV.B	ES,R5L
	MOV.B	R0L,[R4]
	MOV.W	R3,R2
	SEXT.W	R3
	DIV.D	R2,#08H
	SYMB	LTIM, "Time", 10, 0, 2125
	MOV.W	R1,R2
	CALL	_KS_delay
; rtxcobj.c  419	  }
; rtxcobj.c  420	 }
	SYMB	LINE, 420
_72:
; rtxcobj.c  421	}
	SYMB	LINE, 421
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rtxcobj.c  422	
; rtxcobj.c  423	
; rtxcobj.c  424	void	TThread_Resume(struct TThread *this)
; rtxcobj.c  425	{
	ALIGN	1
	SYMB	LINE, 425
	PUBLIC	_TThread_Resume
_TThread_Resume:
	SYMB	TYPE, 417, 'X', 12, #1, 30, 1, #389
	SYMB	GFUN, "TThread_Resume", _TThread_Resume, #417, 0, 0, 0
	SYMB	ALAB, _TThread_Resume, #417
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #389, 0, 2061
; rtxcobj.c  426	 if(this->ID>0)
	SYMB	LINE, 426
	MOV.B	ES,R1L
	MOV.B	R2L,[R0+30]
	MOV.B	ES,R1L
	CMP.B	[R0+30],#00H
	BLE	_75
; rtxcobj.c  427	 {
; rtxcobj.c  428	  KS_resume(this->ID);
	SYMB	LINE, 428
	MOV.B	R0L,R2L
	CALL	_KS_resume
	SYMB	LTIM, "this", 3, 0, 2125
; rtxcobj.c  429	 }
	SYMB	LINE, 429
_75:
; rtxcobj.c  430	}
	SYMB	LINE, 430
	RET
	SYMB	EFUN
; rtxcobj.c  431	
; rtxcobj.c  432	
; rtxcobj.c  433	int	TThread_GetPriority(struct TThread *this)
; rtxcobj.c  434	{
	ALIGN	1
	SYMB	LINE, 434
	PUBLIC	_TThread_GetPriority
_TThread_GetPriority:
	SYMB	TYPE, 418, 'X', 12, #16, 30, 1, #389
	SYMB	GFUN, "TThread_GetPriority", _TThread_GetPriority, #418, 0, 0, 0
	SYMB	ALAB, _TThread_GetPriority, #418
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #389, 0, 2061
; rtxcobj.c  435	 if(this->ID>0)
	SYMB	LINE, 435
	MOV.B	ES,R1L
	MOV.B	R2L,[R0+30]
	MOV.B	ES,R1L
	CMP.B	[R0+30],#00H
	BLE	_77
; rtxcobj.c  436	  return(KS_inqpriority(this->ID));
	SYMB	LINE, 436
	MOV.B	R0L,R2L
	CALL	_KS_inqpriority
	SYMB	LTIM, "this", 3, 0, 2125
	MOV.B	R0L,R0L
	SEXT.B	R0H
	RET
_77:
; rtxcobj.c  437	 return(0);
	SYMB	LINE, 437
	MOV.W	R0,#00H
; rtxcobj.c  438	}
	SYMB	LINE, 438
_78:
	RET
	SYMB	EFUN
; rtxcobj.c  439	
; rtxcobj.c  440	
; rtxcobj.c  441	void	TThread_SetPriority(struct TThread *this, int Prio)
; rtxcobj.c  442	{
	ALIGN	1
	SYMB	LINE, 442
	PUBLIC	_TThread_SetPriority
_TThread_SetPriority:
	SYMB	TYPE, 419, 'X', 12, #1, 30, 2, #389, #16
	SYMB	GFUN, "TThread_SetPriority", _TThread_SetPriority, #419, 0, 0, 0
	SYMB	ALAB, _TThread_SetPriority, #419
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "Prio", 10, 0, 2253
	SYMB	IDEN, "this", 3, #389, 0, 2061
	SYMB	IDEN, "Prio", 10, #16, 0, 2061
; rtxcobj.c  443	 if(this->ID>0)
	SYMB	LINE, 443
	MOV.B	ES,R1L
	MOV.B	R3L,[R0+30]
	MOV.B	ES,R1L
	CMP.B	[R0+30],#00H
	BLE	_80
	SYMB	LTIM, "Prio", 10, 0, 2125
; rtxcobj.c  444	  KS_defpriority(this->ID,Prio);
	SYMB	LINE, 444
	MOV.B	R0H,R2L
	MOV.B	R0L,R3L
	CALL	_KS_defpriority
	SYMB	LTIM, "this", 3, 0, 2125
_80:
; rtxcobj.c  445	}
	SYMB	LINE, 445
	RET
	SYMB	EFUN
	SYMB	TYPE, 420, "TThread", 'T', #387
; rtxcobj.c  446	
; rtxcobj.c  447	
; rtxcobj.c  448	TThread		TThreadPartition[DNTASKS];
; rtxcobj.c  449	MAP		TThreadMap=0;
	RSEG	RTXCOBJ_INI_FA
	SYMB	IDEN, "TThreadMap", _TThreadMap, #292, 130, 0
	SYMB	ALAB, _TThreadMap, #292
	PUBLIC	_TThreadMap
_TThreadMap:
; rtxcobj.c  450	
; rtxcobj.c  451	
; rtxcobj.c  452	
; rtxcobj.c  453	TThread	*newTThread(int Priority, void (*entry)(void))
; rtxcobj.c  454	{
	DB	000H
	RSEG	RTXCOBJ_PR
	ALIGN	1
	SYMB	LINE, 454
	PUBLIC	_newTThread
_newTThread:
	SYMB	TYPE, 421, 'n', #420, 130
	SYMB	TYPE, 422, 'P', #421
	SYMB	TYPE, 424, 'X', 12, #1, 30, 0
	SYMB	TYPE, 425, 'n', #424, 129
	SYMB	TYPE, 426, 'P', #425
	SYMB	TYPE, 423, 'X', 12, #422, 30, 2, #16, #426
	SYMB	GFUN, "newTThread", _newTThread, #423, 0, 0, 112
	SYMB	ALAB, _newTThread, #423
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#08H
	SYMB	SOFF, 14
	SYMB	LTIM, "Priority", 2, 0, 2253
	SYMB	LTIM, "entry", 11, 0, 2253
	MOV.W	[R7+6],R3
	MOV.W	[R7+4],R2
	SYMB	LTIM, "entry", 11, 0, 2125
	SYMB	LTIM, "entry", -10, 130, 2245
	MOV.W	R6,R0
	SYMB	LTIM, "Priority", 2, 0, 2125
	SYMB	LTIM, "Priority", 26, 0, 2253
	SYMB	IDEN, "Priority", 26, #16, 0, 2061
	SYMB	TYPE, 427, 'X', 12, #1, 30, 0
	SYMB	TYPE, 428, 'n', #427, 129
	SYMB	TYPE, 429, 'P', #428
	SYMB	IDEN, "entry", -7, #429, 130, 2053
	SYMB	IDEN, "Thread", -1, #422, 130, 5
	SYMB	LTIM, "Thread", -1, 0, 69
; rtxcobj.c  455	
; rtxcobj.c  456	/* VAR */
; rtxcobj.c  457	 TThread *Thread;
; rtxcobj.c  458	
; rtxcobj.c  459	/* BEGIN */
; rtxcobj.c  460	 if(TThreadMap==0)
	SYMB	LINE, 460
	MOV.B	ES,#SEG( _TThreadMap )
	MOV.W	R0,#SOF( _TThreadMap )
	MOV.B	R0L,[R0]
	BNE	_83
; rtxcobj.c  461	 {
; rtxcobj.c  462	  TThreadMap=KS_create_part(&TThreadPartition,sizeof(struct TThread),DNTASKS);  /* Create stack map */
	SYMB	LINE, 462
	MOV.W	R1,#SEG( _TThreadPartition )
	MOV.W	R0,#SOF( _TThreadPartition )
	MOV.W	R2,#024H
	MOV.W	R3,#020H
	CALL	_KS_create_part
	MOV.B	ES,#SEG( _TThreadMap )
	MOV.W	R1,#SOF( _TThreadMap )
	MOV.B	[R1],R0L
; rtxcobj.c  463	  if(TThreadMap==0)
	SYMB	LINE, 463
	OR.B	R0L,R0L
	BNE	_83
; rtxcobj.c  464	   return(0);
	SYMB	LINE, 464
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_88
; rtxcobj.c  465	 }
	SYMB	LINE, 465
_83:
	SYMB	LTIM, "Priority", 26, 0, 2125
	SYMB	LTIM, "Priority", 26, 0, 2253
	SYMB	LTIM, "entry", -10, 130, 2117
	SYMB	LTIM, "entry", -10, 130, 2245
; rtxcobj.c  466	 Thread=KS_alloc(TThreadMap);
	SYMB	LINE, 466
	MOV.B	ES,#SEG( _TThreadMap )
	MOV.W	R0,#SOF( _TThreadMap )
	MOV.B	R0L,[R0]
	CALL	_KS_alloc
	SYMB	LTIM, "Thread", 3, 0, 205
; rtxcobj.c  467	 if(Thread==(void *)0)
	SYMB	LINE, 467
	MOV.W	R3,R1
	MOV.W	R2,R0
	OR.W	R1,R0
	SYMB	LTIM, "Thread", 3, 0, 77
	SYMB	LTIM, "Thread", 11, 0, 205
	BNE	_84
; rtxcobj.c  468	 {
; rtxcobj.c  469	//  LogEvent(EventNoMoreThreads,0);
; rtxcobj.c  470	  return(0);	
	SYMB	LINE, 470
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_88
; rtxcobj.c  471	 }
	SYMB	LINE, 471
_84:
	SYMB	LTIM, "Priority", 26, 0, 2125
	SYMB	LTIM, "Priority", 26, 0, 2253
	SYMB	LTIM, "entry", -10, 130, 2117
	SYMB	LTIM, "entry", -10, 130, 2245
	SYMB	LTIM, "Thread", 11, 0, 77
	SYMB	LTIM, "Thread", 11, 0, 205
; rtxcobj.c  472	 Thread->TThread=TThread_TThread;
	SYMB	LINE, 472
	MOV.W	R1,R3
	MOV.W	R0,R2
	ADD.W	R0,#02H
	MOV.B	ES,R1L
	MOV.W	[R0],#SOF( _TThread_TThread )
	MOV.W	[R0+2],#SEG( _TThread_TThread )
; rtxcobj.c  473	 Thread->Execute=TThread_Execute;
	SYMB	LINE, 473
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#06H
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TThread_Execute )
	MOV.W	[R4+2],#SEG( _TThread_Execute )
; rtxcobj.c  474	 Thread->Terminate=TThread__TThread;
	SYMB	LINE, 474
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#0AH
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TThread__TThread )
	MOV.W	[R4+2],#SEG( _TThread__TThread )
; rtxcobj.c  475	 Thread->Suspend=TThread_Suspend;
	SYMB	LINE, 475
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#0EH
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TThread_Suspend )
	MOV.W	[R4+2],#SEG( _TThread_Suspend )
; rtxcobj.c  476	 Thread->Resume=TThread_Resume;
	SYMB	LINE, 476
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#012H
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TThread_Resume )
	MOV.W	[R4+2],#SEG( _TThread_Resume )
; rtxcobj.c  477	 Thread->GetPriority=TThread_GetPriority;
	SYMB	LINE, 477
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#016H
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TThread_GetPriority )
	MOV.W	[R4+2],#SEG( _TThread_GetPriority )
; rtxcobj.c  478	 Thread->SetPriority=TThread_SetPriority;
	SYMB	LINE, 478
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#01AH
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TThread_SetPriority )
	MOV.W	[R4+2],#SEG( _TThread_SetPriority )
; rtxcobj.c  479	 Thread->TThread(Thread,Priority,entry);
	SYMB	LINE, 479
	MOV.B	ES,R1L
	MOV.W	R4,[R0]
	MOV.W	R5,[R0+2]
	MOV.W	R1,[R7+6]
	MOV.W	R0,[R7+4]
	SYMB	LTIM, "entry", -10, 130, 2117
	SYMB	LTIM, "entry", 3, 0, 2253
	PUSH.W	R0, R1
	SYMB	SOFF, 18
	SYMB	LTIM, "entry", 3, 0, 2125
	MOV.W	[R7+6],R3
	MOV.W	[R7+4],R2
	MOV.W	R1,R3
	MOV.W	R0,R2
	SYMB	LTIM, "Thread", 11, 0, 77
	SYMB	LTIM, "Thread", -14, 130, 197
	SYMB	LTIM, "Thread", -14, 130, 69
	SYMB	LTIM, "Thread", 3, 0, 205
	MOV.W	R2,R6
	FCALL	__ICALL
	ADDS.W	R7,#04H
	SYMB	SOFF, 14
	SYMB	LTIM, "Priority", 26, 0, 2125
	SYMB	LTIM, "Priority", 10, 0, 2253
	SYMB	LTIM, "Priority", 10, 0, 2125
	SYMB	LTIM, "Thread", 3, 0, 77
	SYMB	LTIM, "Thread", -14, 130, 197
; rtxcobj.c  480	 if(Thread->ID==0)
	SYMB	LINE, 480
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	MOV.B	ES,R1L
	MOV.B	R0L,[R0+30]
	BNE	_85
; rtxcobj.c  481	 {
; rtxcobj.c  482	  KS_free(TThreadMap,Thread);
	SYMB	LINE, 482
	MOV.B	ES,#SEG( _TThreadMap )
	MOV.W	R0,#SOF( _TThreadMap )
	MOV.B	R0L,[R0]
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	CALL	_KS_free
	SYMB	LTIM, "Thread", -14, 130, 69
	SYMB	LTIM, "Thread", 11, 0, 205
	SYMB	LTIM, "Thread", 11, 0, 77
; rtxcobj.c  483	  return(0);
	SYMB	LINE, 483
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_88
; rtxcobj.c  484	 }
	SYMB	LINE, 484
_85:
	SYMB	LTIM, "Thread", -14, 130, 197
; rtxcobj.c  485	 return(Thread);
	SYMB	LINE, 485
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	SYMB	LTIM, "Thread", -14, 130, 69
	SYMB	LTIM, "Thread", 3, 0, 205
; rtxcobj.c  486	}
	SYMB	LINE, 486
_88:
	ADD.W	R7,#08H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "Thread", 3, 0, 77
	SYMB	EFUN
; rtxcobj.c  487	
; rtxcobj.c  488	
; rtxcobj.c  489	void deleteTThread(TThread *Thread)
; rtxcobj.c  490	{
	ALIGN	1
	SYMB	LINE, 490
	PUBLIC	_deleteTThread
_deleteTThread:
	SYMB	TYPE, 430, 'X', 12, #1, 30, 1, #422
	SYMB	GFUN, "deleteTThread", _deleteTThread, #430, 0, 0, 48
	SYMB	ALAB, _deleteTThread, #430
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0CH
	SYMB	SOFF, 8
	SYMB	LTIM, "Thread", 3, 0, 2253
	SYMB	IDEN, "Thread", 3, #422, 0, 2061
; rtxcobj.c  491	 Thread->Terminate(Thread);
	SYMB	LINE, 491
	MOV.B	ES,R1L
	MOV.W	R4,[R0+10]
	MOV.W	R5,[R0+12]
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	SYMB	LTIM, "Thread", 3, 0, 2125
	SYMB	LTIM, "Thread", -8, 130, 2245
	SYMB	LTIM, "Thread", -8, 130, 2117
	SYMB	LTIM, "Thread", 3, 0, 2253
	FCALL	__ICALL
	SYMB	LTIM, "Thread", 3, 0, 2125
	SYMB	LTIM, "Thread", -8, 130, 2245
; rtxcobj.c  492	 KS_free(TThreadMap,Thread);
	SYMB	LINE, 492
	MOV.B	ES,#SEG( _TThreadMap )
	MOV.W	R0,#SOF( _TThreadMap )
	MOV.B	R0L,[R0]
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	CALL	_KS_free
	SYMB	LTIM, "Thread", -8, 130, 2117
	SYMB	LTIM, "Thread", 11, 0, 2253
	SYMB	LTIM, "Thread", 11, 0, 2125
; rtxcobj.c  493	}
	SYMB	LINE, 493
	ADDS.W	R7,#04H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rtxcobj.c  494	
; rtxcobj.c  495	
; rtxcobj.c  496	
; rtxcobj.c  497	
; rtxcobj.c  498	/********** TTimer Object **************/
; rtxcobj.c  499	typedef struct TTimer {
; rtxcobj.c  500	  /* Public: */
; rtxcobj.c  501		int	ObjectID;
; rtxcobj.c  502		void	(*TTimer)(struct TTimer *this);
; rtxcobj.c  503		void	(*_TTimer)(struct TTimer *this);
; rtxcobj.c  504		void	(*SetPeriod)(struct TTimer *this, int Time);
; rtxcobj.c  505		int	(*GetPeriod)(struct TTimer *this);
; rtxcobj.c  506		void	(*Tick)(struct TTimer *this, int Time);
; rtxcobj.c  507		TEvent	*TimeOut;
; rtxcobj.c  508	  /* Private: */
; rtxcobj.c  509		short	Period;
; rtxcobj.c  510		CLKBLK	*Handle;
; rtxcobj.c  511	
; rtxcobj.c  512	} TTimer;
; rtxcobj.c  513	  
; rtxcobj.c  514	
; rtxcobj.c  515	void TTimer_TTimer(struct TTimer *this)
; rtxcobj.c  516	{
	ALIGN	1
	SYMB	LINE, 516
	PUBLIC	_TTimer_TTimer
_TTimer_TTimer:
	SYMB	TYPE, 433, 'n', #432, 130
	SYMB	TYPE, 434, 'P', #433
	SYMB	TYPE, 432, 'X', 12, #1, 30, 1, #434
	SYMB	TYPE, 436, 'n', #435, 129
	SYMB	TYPE, 437, 'P', #436
	SYMB	TYPE, 438, 'X', 12, #1, 30, 1, #434
	SYMB	TYPE, 439, 'n', #438, 129
	SYMB	TYPE, 440, 'P', #439
	SYMB	TYPE, 441, 'X', 12, #1, 30, 2, #434, #16
	SYMB	TYPE, 442, 'n', #441, 129
	SYMB	TYPE, 443, 'P', #442
	SYMB	TYPE, 444, 'X', 12, #16, 30, 1, #434
	SYMB	TYPE, 445, 'n', #444, 129
	SYMB	TYPE, 446, 'P', #445
	SYMB	TYPE, 447, 'X', 12, #1, 30, 2, #434, #16
	SYMB	TYPE, 448, 'n', #447, 129
	SYMB	TYPE, 449, 'P', #448
	SYMB	TYPE, 450, 'n', #310, 130
	SYMB	TYPE, 451, 'P', #450
	SYMB	TYPE, 432, "TTimer", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TTimer", #437, 2,\
		 "_TTimer", #440, 6,\
		 "SetPeriod", #443, 10,\
		 "GetPeriod", #446, 14,\
		 "Tick", #449, 18,\
		 "TimeOut", #349, 22,\
		 "Period", #4, 26,\
		 "Handle", #451, 28
	SYMB	TYPE, 431, 'X', 12, #1, 30, 1, #434
	SYMB	GFUN, "TTimer_TTimer", _TTimer_TTimer, #431, 0, 0, 48
	SYMB	ALAB, _TTimer_TTimer, #431
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #434, 0, 2061
; rtxcobj.c  517	 if(this>(void *)0)
	SYMB	LINE, 517
	MOV.W	R5,R1
	MOV.W	R4,R0
	CMP.W	R5,#00H
	BNE	_90
	CMP.W	R4,#00H
_90:
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", 19, 0, 2253
	BL	_89
; rtxcobj.c  518	 { 
; rtxcobj.c  519	  this->Handle=KS_alloc_timer();
	SYMB	LINE, 519
	CALL	_KS_alloc_timer
	MOV.B	ES,R5L
	MOV.W	[R4+28],R0
	MOV.W	[R4+30],R1
; rtxcobj.c  520	  this->TimeOut=newTEvent(0);
	SYMB	LINE, 520
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	CALL	_newTEvent
	MOV.B	ES,R5L
	MOV.W	[R4+22],R0
	MOV.W	[R4+24],R1
; rtxcobj.c  521	  this->Period=0;
	SYMB	LINE, 521
	MOV.B	ES,R5L
	MOV.W	[R4+26],#00H
; rtxcobj.c  522	  this->ObjectID=TTimerID;
	SYMB	LINE, 522
	MOV.B	ES,R5L
	MOV.W	[R4],#03H
; rtxcobj.c  523	 }
	SYMB	LINE, 523
_89:
; rtxcobj.c  524	}
	SYMB	LINE, 524
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "this", 19, 0, 2125
	SYMB	EFUN
; rtxcobj.c  525	
; rtxcobj.c  526	
; rtxcobj.c  527	void TTimer__TTimer(struct TTimer *this)
; rtxcobj.c  528	{
	ALIGN	1
	SYMB	LINE, 528
	PUBLIC	_TTimer__TTimer
_TTimer__TTimer:
	SYMB	TYPE, 452, 'X', 12, #1, 30, 1, #434
	SYMB	GFUN, "TTimer__TTimer", _TTimer__TTimer, #452, 0, 0, 48
	SYMB	ALAB, _TTimer__TTimer, #452
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #434, 0, 2061
; rtxcobj.c  529	 if(this>(void *)0)
	SYMB	LINE, 529
	MOV.W	R5,R1
	MOV.W	R4,R0
	CMP.W	R5,#00H
	BNE	_92
	CMP.W	R4,#00H
_92:
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", 19, 0, 2253
	BL	_91
; rtxcobj.c  530	 { 
; rtxcobj.c  531	  deleteTEvent(this->TimeOut);
	SYMB	LINE, 531
	MOV.B	ES,R5L
	MOV.W	R0,[R4+22]
	MOV.W	R1,[R4+24]
	CALL	_deleteTEvent
; rtxcobj.c  532	  KS_free_timer(this->Handle);
	SYMB	LINE, 532
	MOV.B	ES,R5L
	MOV.W	R0,[R4+28]
	MOV.W	R1,[R4+30]
	CALL	_KS_free_timer
; rtxcobj.c  533	 }
	SYMB	LINE, 533
_91:
; rtxcobj.c  534	}
	SYMB	LINE, 534
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "this", 19, 0, 2125
	SYMB	EFUN
; rtxcobj.c  535	
; rtxcobj.c  536	
; rtxcobj.c  537	void TTimer_SetPeriod(struct TTimer *this, int Time)
; rtxcobj.c  538	{
	ALIGN	1
	SYMB	LINE, 538
	PUBLIC	_TTimer_SetPeriod
_TTimer_SetPeriod:
	SYMB	TYPE, 453, 'X', 12, #1, 30, 2, #434, #16
	SYMB	GFUN, "TTimer_SetPeriod", _TTimer_SetPeriod, #453, 0, 0, 112
	SYMB	ALAB, _TTimer_SetPeriod, #453
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#0AH
	SYMB	SOFF, 12
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "Time", 10, 0, 2253
	MOV.W	[R7+4],R2
	SYMB	LTIM, "Time", 10, 0, 2125
	SYMB	LTIM, "Time", -8, 130, 2245
	SYMB	IDEN, "this", 3, #434, 0, 2061
	SYMB	IDEN, "Time", -7, #16, 130, 2053
; rtxcobj.c  539	 if(this->Period==0)
	SYMB	LINE, 539
	MOV.W	R5,R1
	MOV.W	R4,R0
	ADD.W	R4,#01AH
	MOV.B	ES,R1L
	MOV.W	R2,[R0+26]
	BNE	_93
; rtxcobj.c  540	 {
; rtxcobj.c  541	  if(Time!=0)
	SYMB	LINE, 541
	MOV.W	R2,[R7+4]
	BEQ	_97
; rtxcobj.c  542	  {
; rtxcobj.c  543	   KS_start_timer(this->Handle,(TICKS)Time/CLKTICK,
; rtxcobj.c  544	                 (TICKS)Time/CLKTICK,this->TimeOut->ID);	/* start cyclic timer */
	SYMB	LINE, 544
	MOV.B	ES,R1L
	MOV.W	R2,[R0+28]
	MOV.W	R3,[R0+30]
	MOV.W	[R7+2],R3
	MOV.W	[R7],R2
	MOV.W	R2,[R7+4]
	MOV.W	R3,R2
	SEXT.W	R3
	DIV.D	R2,#08H
	MOV.B	ES,R1L
	MOV.W	R1,[R0+24]
	MOV.W	R0,[R0+22]
	SYMB	LTIM, "this", 3, 0, 2125
	MOV.B	ES,R1L
	MOV.B	R6L,[R0+26]
	MOV.W	R3,R2
	MOV.W	R2,R3
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	CALL	_KS_start_timer
; rtxcobj.c  545	  }
; rtxcobj.c  546	 }
	SYMB	LINE, 546
	BR	_97
_93:
	SYMB	LTIM, "this", 3, 0, 2253
; rtxcobj.c  547	 else
; rtxcobj.c  548	 {
; rtxcobj.c  549	  if(Time==0)
	SYMB	LINE, 549
	MOV.W	R2,[R7+4]
	BNE	_94
; rtxcobj.c  550	  {
; rtxcobj.c  551	   KS_stop_timer(this->Handle);
	SYMB	LINE, 551
	MOV.B	ES,R1L
	MOV.W	R1,[R0+30]
	MOV.W	R0,[R0+28]
	SYMB	LTIM, "this", 3, 0, 2125
	CALL	_KS_stop_timer
; rtxcobj.c  552	  }
	SYMB	LINE, 552
	BR	_97
_94:
	SYMB	LTIM, "this", 3, 0, 2253
; rtxcobj.c  553	  else   						/* stop cyclic timer */
; rtxcobj.c  554	  { 
; rtxcobj.c  555	   KS_restart_timer(this->Handle,(TICKS)Time/CLKTICK,
; rtxcobj.c  556	                    (TICKS)Time/CLKTICK);		/* restart cyclic timer */
	SYMB	LINE, 556
	MOV.B	ES,R1L
	MOV.W	R1,[R0+30]
	MOV.W	R0,[R0+28]
	SYMB	LTIM, "this", 3, 0, 2125
	MOV.W	R2,[R7+4]
	MOV.W	R3,R2
	SEXT.W	R3
	DIV.D	R2,#08H
	MOV.W	R3,R2
	MOV.W	R2,R3
	CALL	_KS_restart_timer
; rtxcobj.c  557	  }
; rtxcobj.c  558	 }
	SYMB	LINE, 558
_97:
; rtxcobj.c  559	 this->Period=Time;
	SYMB	LINE, 559
	MOV.W	R0,[R7+4]
	MOV.B	ES,R5L
	MOV.W	[R4],R0
	SYMB	LTIM, "Time", -8, 130, 2117
	SYMB	LTIM, "Time", 2, 0, 2253
; rtxcobj.c  560	}
	SYMB	LINE, 560
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "Time", 2, 0, 2125
	SYMB	EFUN
; rtxcobj.c  561	
; rtxcobj.c  562	
; rtxcobj.c  563	
; rtxcobj.c  564	int TTimer_GetPeriod(struct TTimer *this)
; rtxcobj.c  565	{
	ALIGN	1
	SYMB	LINE, 565
	PUBLIC	_TTimer_GetPeriod
_TTimer_GetPeriod:
	SYMB	TYPE, 454, 'X', 12, #16, 30, 1, #434
	SYMB	GFUN, "TTimer_GetPeriod", _TTimer_GetPeriod, #454, 0, 0, 0
	SYMB	ALAB, _TTimer_GetPeriod, #454
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #434, 0, 2061
; rtxcobj.c  566	 return(this->Period);
	SYMB	LINE, 566
	MOV.B	ES,R1L
	MOV.W	R0,[R0+26]
	SYMB	LTIM, "this", 3, 0, 2125
; rtxcobj.c  567	}
	SYMB	LINE, 567
	RET
	SYMB	EFUN
; rtxcobj.c  568	
; rtxcobj.c  569	
; rtxcobj.c  570	
; rtxcobj.c  571	void TTimer_Tick(struct TTimer *this, int Time)
; rtxcobj.c  572	{
	ALIGN	1
	SYMB	LINE, 572
	PUBLIC	_TTimer_Tick
_TTimer_Tick:
	SYMB	TYPE, 455, 'X', 12, #1, 30, 2, #434, #16
	SYMB	GFUN, "TTimer_Tick", _TTimer_Tick, #455, 0, 0, 112
	SYMB	ALAB, _TTimer_Tick, #455
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#0CH
	SYMB	SOFF, 10
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "Time", 10, 0, 2253
	SYMB	IDEN, "this", 3, #434, 0, 2061
	SYMB	IDEN, "Time", 10, #16, 0, 2061
; rtxcobj.c  573	 if(this->Period==0)
	SYMB	LINE, 573
	MOV.W	R5,R1
	MOV.W	R4,R0
	ADD.W	R4,#01AH
	MOV.B	ES,R1L
	MOV.W	R3,[R0+26]
	BNE	_98
; rtxcobj.c  574	 {
; rtxcobj.c  575	//  this->TimeOut->Set(this->TimeOut);	/* signal update */
; rtxcobj.c  576	  KS_start_timer(this->Handle,(TICKS)Time/CLKTICK,0,this->TimeOut->ID);
	SYMB	LINE, 576
	MOV.B	ES,R1L
	MOV.W	R4,[R0+28]
	MOV.W	R5,[R0+30]
	MOV.W	[R7+2],R5
	MOV.W	[R7],R4
	MOV.W	R4,R2
	MOV.W	R5,R4
	SEXT.W	R5
	DIV.D	R4,#08H
	SYMB	LTIM, "Time", 10, 0, 2125
	SYMB	LTIM, "Time", 18, 0, 2253
	SYMB	LTIM, "Time", 18, 0, 2125
	MOV.W	R3,#00H
	MOV.B	ES,R1L
	MOV.W	R1,[R0+24]
	MOV.W	R0,[R0+22]
	SYMB	LTIM, "this", 3, 0, 2125
	MOV.B	ES,R1L
	MOV.B	R6L,[R0+26]
	MOV.W	R2,R4
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	CALL	_KS_start_timer
; rtxcobj.c  577	                                             /* single shot timeout */
; rtxcobj.c  578	 }
	SYMB	LINE, 578
	BR	_99
_98:
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "Time", 10, 0, 2253
; rtxcobj.c  579	 else
; rtxcobj.c  580	 {
; rtxcobj.c  581	  KS_restart_timer(this->Handle,(TICKS)Time/CLKTICK,
; rtxcobj.c  582	                  (TICKS)(this->Period)/CLKTICK);   /* restart cyclic timer */
	SYMB	LINE, 582
	MOV.B	ES,R1L
	MOV.W	R1,[R0+30]
	MOV.W	R0,[R0+28]
	SYMB	LTIM, "this", 3, 0, 2125
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.W	R0,R2
	MOV.W	R1,R0
	SEXT.W	R1
	DIV.D	R0,#08H
	SYMB	LTIM, "Time", 10, 0, 2125
	SYMB	LTIM, "Time", 2, 0, 2253
	SYMB	LTIM, "Time", 2, 0, 2125
	MOV.B	ES,R5L
	MOV.W	R2,[R4]
	MOV.W	R3,R2
	SEXT.W	R3
	DIV.D	R2,#08H
	MOV.W	R3,R2
	MOV.W	R2,R0
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	CALL	_KS_restart_timer
; rtxcobj.c  583	 }
	SYMB	LINE, 583
_99:
; rtxcobj.c  584	}
	SYMB	LINE, 584
	ADDS.W	R7,#04H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rtxcobj.c  585	
; rtxcobj.c  586	
; rtxcobj.c  587	//static void Timer_RealThread(void);
; rtxcobj.c  588	
; rtxcobj.c  589	
; rtxcobj.c  590	//int Timer_Thread_Create(void * Timer,int Priority, void (far *entry)(void))
; rtxcobj.c  591	//{
; rtxcobj.c  592	
; rtxcobj.c  593	/* VAR */
; rtxcobj.c  594	
; rtxcobj.c  595	/* BEGIN */
; rtxcobj.c  596	// ((struct TimerObject *)Timer)->Thread=Thread_Create(Priority,Timer_RealThread);
; rtxcobj.c  597	// if(((struct TimerObject *)Timer)->Thread==0)
; rtxcobj.c  598	//  return(0);
; rtxcobj.c  599	// ((struct TimerObject *)Timer)->TimeOutFunc=entry;
; rtxcobj.c  600	// KS_deftask_arg(((struct TimerObject *)Timer)->Thread->Num,Timer);
; rtxcobj.c  601	// Thread_Execute(((struct TimerObject *)Timer)->Thread);
; rtxcobj.c  602	// return(-1);
; rtxcobj.c  603	//}
; rtxcobj.c  604	
; rtxcobj.c  605	
; rtxcobj.c  606	
; rtxcobj.c  607	//static void Timer_RealThread(void)
; rtxcobj.c  608	//{
; rtxcobj.c  609	 /* VAR */
; rtxcobj.c  610	
; rtxcobj.c  611	 /* BEGIN */
; rtxcobj.c  612	// for(;;)
; rtxcobj.c  613	// {
; rtxcobj.c  614	//  KS_wait(((struct TimerObject *)KS_inqtask_arg(0))->TimeOutEvent);
; rtxcobj.c  615	
; rtxcobj.c  616	//  ((struct TimerObject *)KS_inqtask_arg(0))->TimeOutFunc();
; rtxcobj.c  617	// } /* END for */
; rtxcobj.c  618	//} /* END task */
; rtxcobj.c  619	
; rtxcobj.c  620	
; rtxcobj.c  621	
; rtxcobj.c  622	static MAP TTimerMap=0;
	RSEG	RTXCOBJ_INI_FA
	SYMB	IDEN, "TTimerMap", _TTimerMap, #292, 130, 4
_TTimerMap:
	SYMB	TYPE, 456, "TTimer", 'T', #432
; rtxcobj.c  623	static TTimer TTimerPartition[NTMRS];
; rtxcobj.c  624	
; rtxcobj.c  625	
; rtxcobj.c  626	
; rtxcobj.c  627	TTimer *newTTimer(void)
; rtxcobj.c  628	{
	DB	000H
	RSEG	RTXCOBJ_PR
	ALIGN	1
	SYMB	LINE, 628
	PUBLIC	_newTTimer
_newTTimer:
	SYMB	TYPE, 457, 'n', #456, 130
	SYMB	TYPE, 458, 'P', #457
	SYMB	TYPE, 459, 'X', 12, #458, 30, 0
	SYMB	GFUN, "newTTimer", _newTTimer, #459, 0, 0, 48
	SYMB	ALAB, _newTTimer, #459
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0CH
	SYMB	SOFF, 8
	SYMB	IDEN, "Timer", -1, #458, 130, 5
	SYMB	LTIM, "Timer", -1, 0, 69
; rtxcobj.c  629	 
; rtxcobj.c  630	/* VAR */
; rtxcobj.c  631	 TTimer *Timer;
; rtxcobj.c  632	
; rtxcobj.c  633	/* BEGIN */
; rtxcobj.c  634	 if(TTimerMap==0)
	SYMB	LINE, 634
	MOV.B	ES,#SEG( _TTimerMap )
	MOV.W	R0,#SOF( _TTimerMap )
	MOV.B	R0L,[R0]
	BNE	_101
; rtxcobj.c  635	 {
; rtxcobj.c  636	  TTimerMap=KS_create_part(&TTimerPartition,sizeof(struct TTimer),NTMRS);  /* Create Timer map */
	SYMB	LINE, 636
	MOV.W	R1,#SEG( _TTimerPartition )
	MOV.W	R0,#SOF( _TTimerPartition )
	MOV.W	R3,#020H
	MOV.W	R2,R3
	CALL	_KS_create_part
	MOV.B	ES,#SEG( _TTimerMap )
	MOV.W	R1,#SOF( _TTimerMap )
	MOV.B	[R1],R0L
; rtxcobj.c  637	  if(TTimerMap==0)
	SYMB	LINE, 637
	OR.B	R0L,R0L
	BNE	_101
; rtxcobj.c  638	   return(0);
	SYMB	LINE, 638
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_106
; rtxcobj.c  639	 }
	SYMB	LINE, 639
_101:
; rtxcobj.c  640	 Timer=KS_alloc(TTimerMap);
	SYMB	LINE, 640
	MOV.B	ES,#SEG( _TTimerMap )
	MOV.W	R0,#SOF( _TTimerMap )
	MOV.B	R0L,[R0]
	CALL	_KS_alloc
	SYMB	LTIM, "Timer", 3, 0, 205
; rtxcobj.c  641	 if(Timer==(void *)0)
	SYMB	LINE, 641
	MOV.W	R3,R1
	MOV.W	R2,R0
	OR.W	R1,R0
	SYMB	LTIM, "Timer", 3, 0, 77
	SYMB	LTIM, "Timer", 11, 0, 205
	BNE	_102
; rtxcobj.c  642	 {
; rtxcobj.c  643	//  LogEvent(EventNoMoreTimers,0);
; rtxcobj.c  644	  return(0);	
	SYMB	LINE, 644
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_106
; rtxcobj.c  645	 }
	SYMB	LINE, 645
_102:
	SYMB	LTIM, "Timer", 11, 0, 77
	SYMB	LTIM, "Timer", 11, 0, 205
; rtxcobj.c  646	 Timer->TTimer=TTimer_TTimer;
	SYMB	LINE, 646
	MOV.W	R1,R3
	MOV.W	R0,R2
	ADD.W	R0,#02H
	MOV.B	ES,R1L
	MOV.W	[R0],#SOF( _TTimer_TTimer )
	MOV.W	[R0+2],#SEG( _TTimer_TTimer )
; rtxcobj.c  647	 Timer->_TTimer=TTimer__TTimer;
	SYMB	LINE, 647
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#06H
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TTimer__TTimer )
	MOV.W	[R4+2],#SEG( _TTimer__TTimer )
; rtxcobj.c  648	 Timer->SetPeriod=TTimer_SetPeriod;
	SYMB	LINE, 648
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#0AH
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TTimer_SetPeriod )
	MOV.W	[R4+2],#SEG( _TTimer_SetPeriod )
; rtxcobj.c  649	 Timer->GetPeriod=TTimer_GetPeriod;
	SYMB	LINE, 649
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#0EH
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TTimer_GetPeriod )
	MOV.W	[R4+2],#SEG( _TTimer_GetPeriod )
; rtxcobj.c  650	 Timer->Tick=TTimer_Tick;
	SYMB	LINE, 650
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#012H
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TTimer_Tick )
	MOV.W	[R4+2],#SEG( _TTimer_Tick )
; rtxcobj.c  651	 Timer->TTimer(Timer);
	SYMB	LINE, 651
	MOV.B	ES,R1L
	MOV.W	R4,[R0]
	MOV.W	R5,[R0+2]
	MOV.W	[R7+2],R3
	MOV.W	[R7],R2
	MOV.W	R1,R3
	MOV.W	R0,R2
	SYMB	LTIM, "Timer", 11, 0, 77
	SYMB	LTIM, "Timer", -8, 130, 197
	SYMB	LTIM, "Timer", -8, 130, 69
	SYMB	LTIM, "Timer", 3, 0, 205
	FCALL	__ICALL
	SYMB	LTIM, "Timer", 3, 0, 77
	SYMB	LTIM, "Timer", -8, 130, 197
; rtxcobj.c  652	 if(Timer->Handle==(CLKBLK *)0)
	SYMB	LINE, 652
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	MOV.B	ES,R1L
	MOV.W	R1,[R0+30]
	MOV.W	R0,[R0+28]
	OR.W	R1,R0
	BNE	_103
; rtxcobj.c  653	 {
; rtxcobj.c  654	  KS_free(TTimerMap,Timer);
	SYMB	LINE, 654
	MOV.B	ES,#SEG( _TTimerMap )
	MOV.W	R0,#SOF( _TTimerMap )
	MOV.B	R0L,[R0]
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	CALL	_KS_free
	SYMB	LTIM, "Timer", -8, 130, 69
	SYMB	LTIM, "Timer", 11, 0, 205
	SYMB	LTIM, "Timer", 11, 0, 77
; rtxcobj.c  655	  return(0);
	SYMB	LINE, 655
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_106
; rtxcobj.c  656	 }
	SYMB	LINE, 656
_103:
	SYMB	LTIM, "Timer", -8, 130, 197
; rtxcobj.c  657	 return(Timer);
	SYMB	LINE, 657
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	SYMB	LTIM, "Timer", -8, 130, 69
	SYMB	LTIM, "Timer", 3, 0, 205
; rtxcobj.c  658	}
	SYMB	LINE, 658
_106:
	ADDS.W	R7,#04H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "Timer", 3, 0, 77
	SYMB	EFUN
; rtxcobj.c  659	
; rtxcobj.c  660	
; rtxcobj.c  661	void deleteTTimer(TTimer *Timer)
; rtxcobj.c  662	{
	ALIGN	1
	SYMB	LINE, 662
	PUBLIC	_deleteTTimer
_deleteTTimer:
	SYMB	TYPE, 460, 'X', 12, #1, 30, 1, #458
	SYMB	GFUN, "deleteTTimer", _deleteTTimer, #460, 0, 0, 48
	SYMB	ALAB, _deleteTTimer, #460
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0CH
	SYMB	SOFF, 8
	SYMB	LTIM, "Timer", 3, 0, 2253
	SYMB	IDEN, "Timer", 3, #458, 0, 2061
; rtxcobj.c  663	 Timer->_TTimer(Timer);
	SYMB	LINE, 663
	MOV.B	ES,R1L
	MOV.W	R4,[R0+6]
	MOV.W	R5,[R0+8]
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	SYMB	LTIM, "Timer", 3, 0, 2125
	SYMB	LTIM, "Timer", -8, 130, 2245
	SYMB	LTIM, "Timer", -8, 130, 2117
	SYMB	LTIM, "Timer", 3, 0, 2253
	FCALL	__ICALL
	SYMB	LTIM, "Timer", 3, 0, 2125
	SYMB	LTIM, "Timer", -8, 130, 2245
; rtxcobj.c  664	 KS_free(TTimerMap,Timer);
	SYMB	LINE, 664
	MOV.B	ES,#SEG( _TTimerMap )
	MOV.W	R0,#SOF( _TTimerMap )
	MOV.B	R0L,[R0]
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	CALL	_KS_free
	SYMB	LTIM, "Timer", -8, 130, 2117
	SYMB	LTIM, "Timer", 11, 0, 2253
	SYMB	LTIM, "Timer", 11, 0, 2125
; rtxcobj.c  665	}
	SYMB	LINE, 665
	ADDS.W	R7,#04H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rtxcobj.c  666	
; rtxcobj.c  667	
; rtxcobj.c  668	
; rtxcobj.c  669	
; rtxcobj.c  670	/**************** TEventList Object *****************/
; rtxcobj.c  671	typedef struct TEventList {
; rtxcobj.c  672	  /* Public: */
; rtxcobj.c  673	  	int	ObjectID;
; rtxcobj.c  674		void	(*TEventList)(struct TEventList *this);
; rtxcobj.c  675		void	(*_TEventList)(struct TEventList *this);
; rtxcobj.c  676		int	(*Append)(struct TEventList *this, TEvent *Event);
; rtxcobj.c  677		void	(*Clear)(struct TEventList *this, TEvent *Event);
; rtxcobj.c  678		int	(*InList)(struct TEventList *this, TEvent *Event);
; rtxcobj.c  679		TEvent	*(*Wait)(struct TEventList *this, long *TimeOut);
; rtxcobj.c  680	  /* Private: */
; rtxcobj.c  681		TEvent	*Events[16];
; rtxcobj.c  682		SEMA	RTXCList[16];
; rtxcobj.c  683	} TEventList;
; rtxcobj.c  684	
; rtxcobj.c  685	
; rtxcobj.c  686	struct TEventList TEventListPartition[TEVENTLIST_COUNT];
; rtxcobj.c  687	MAP		TEventListMap=0;
	RSEG	RTXCOBJ_INI_FA
	SYMB	IDEN, "TEventListMap", _TEventListMap, #292, 130, 0
	SYMB	ALAB, _TEventListMap, #292
	PUBLIC	_TEventListMap
_TEventListMap:
; rtxcobj.c  688	
; rtxcobj.c  689	
; rtxcobj.c  690	void	TEventList_TEventList(struct TEventList *this)
; rtxcobj.c  691	{
	DB	000H
	RSEG	RTXCOBJ_PR
	ALIGN	1
	SYMB	LINE, 691
	PUBLIC	_TEventList_TEventList
_TEventList_TEventList:
	SYMB	TYPE, 463, 'n', #462, 130
	SYMB	TYPE, 464, 'P', #463
	SYMB	TYPE, 462, 'X', 12, #1, 30, 1, #464
	SYMB	TYPE, 466, 'n', #465, 129
	SYMB	TYPE, 467, 'P', #466
	SYMB	TYPE, 468, 'X', 12, #1, 30, 1, #464
	SYMB	TYPE, 469, 'n', #468, 129
	SYMB	TYPE, 470, 'P', #469
	SYMB	TYPE, 471, 'X', 12, #16, 30, 2, #464, #349
	SYMB	TYPE, 472, 'n', #471, 129
	SYMB	TYPE, 473, 'P', #472
	SYMB	TYPE, 474, 'X', 12, #1, 30, 2, #464, #349
	SYMB	TYPE, 475, 'n', #474, 129
	SYMB	TYPE, 476, 'P', #475
	SYMB	TYPE, 477, 'X', 12, #16, 30, 2, #464, #349
	SYMB	TYPE, 478, 'n', #477, 129
	SYMB	TYPE, 479, 'P', #478
	SYMB	TYPE, 480, 'X', 12, #349, 30, 2, #464, #329
	SYMB	TYPE, 481, 'n', #480, 129
	SYMB	TYPE, 482, 'P', #481
	SYMB	TYPE, 483, 'Z', #349, 15
	SYMB	TYPE, 485, 'Z', #291, 15
	SYMB	TYPE, 462, "TEventList", 'S', 106,\
		 "ObjectID", #16, 0,\
		 "TEventList", #467, 2,\
		 "_TEventList", #470, 6,\
		 "Append", #473, 10,\
		 "Clear", #476, 14,\
		 "InList", #479, 18,\
		 "Wait", #482, 22,\
		 "Events", #483, 26,\
		 "RTXCList", #485, 90
	SYMB	TYPE, 461, 'X', 12, #1, 30, 1, #464
	SYMB	GFUN, "TEventList_TEventList", _TEventList_TEventList, #461, 0, 0, 0
	SYMB	ALAB, _TEventList_TEventList, #461
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #464, 0, 2061
; rtxcobj.c  692	 if(this>(struct TEventList *)0)
	SYMB	LINE, 692
	CMP.W	R1,#00H
	BNE	_108
	CMP.W	R0,#00H
_108:
	BL	_107
; rtxcobj.c  693	 {
; rtxcobj.c  694	  this->ObjectID=TEventListID;
	SYMB	LINE, 694
	MOV.B	ES,R1L
	MOV.W	[R0],#02H
; rtxcobj.c  695	 }
	SYMB	LINE, 695
_107:
; rtxcobj.c  696	}
	SYMB	LINE, 696
	RET
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	EFUN
; rtxcobj.c  697	
; rtxcobj.c  698	
; rtxcobj.c  699	void	TEventList__TEventList(struct TEventList *this)
; rtxcobj.c  700	{
	ALIGN	1
	SYMB	LINE, 700
	PUBLIC	_TEventList__TEventList
_TEventList__TEventList:
	SYMB	TYPE, 487, 'X', 12, #1, 30, 1, #464
	SYMB	GFUN, "TEventList__TEventList", _TEventList__TEventList, #487, 0, 0, 0
	SYMB	ALAB, _TEventList__TEventList, #487
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #464, 0, 2061
; rtxcobj.c  701	 if(this>(struct TEventList *)0)
	SYMB	LINE, 701
	CMP.W	R1,#00H
	BNE	_110
	CMP.W	R0,#00H
_110:
	BL	_109
; rtxcobj.c  702	  this->ObjectID=0;
	SYMB	LINE, 702
	MOV.B	ES,R1L
	MOV.W	[R0],#00H
_109:
; rtxcobj.c  703	}
	SYMB	LINE, 703
	RET
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	EFUN
; rtxcobj.c  704	
; rtxcobj.c  705	
; rtxcobj.c  706	int	TEventList_Append(struct TEventList *this, TEvent *Event)
; rtxcobj.c  707	{
	ALIGN	1
	SYMB	LINE, 707
	PUBLIC	_TEventList_Append
_TEventList_Append:
	SYMB	TYPE, 488, 'X', 12, #16, 30, 2, #464, #349
	SYMB	GFUN, "TEventList_Append", _TEventList_Append, #488, 0, 0, 48
	SYMB	ALAB, _TEventList_Append, #488
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#0CH
	SYMB	SOFF, 16
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "Event", 11, 0, 2253
	SYMB	IDEN, "this", 3, #464, 0, 2061
	SYMB	IDEN, "Event", 11, #349, 0, 2061
	SYMB	TYPE, 489, 'n', #349, 130
	SYMB	TYPE, 490, 'P', #489
	SYMB	IDEN, "Ptr", -1, #490, 130, 5
	SYMB	LTIM, "Ptr", -1, 0, 69
; rtxcobj.c  708	
; rtxcobj.c  709	 TEvent **Ptr;
; rtxcobj.c  710	
; rtxcobj.c  711	 Ptr=&(this->Events[0]);
	SYMB	LINE, 711
	MOV.W	R5,R1
	MOV.W	R4,R0
	ADD.W	R4,#01AH
	MOV.W	[R7+2],R5
	MOV.W	[R7],R4
	SYMB	LTIM, "Ptr", 19, 0, 205
; rtxcobj.c  712	 if(this==0)
	SYMB	LINE, 712
	MOV.W	[R7+10],R1
	MOV.W	[R7+8],R0
	OR.W	R1,R0
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", -8, 130, 2245
	BNE	_111
; rtxcobj.c  713	  return(0);
	SYMB	LINE, 713
	MOV.W	R0,#00H
	BR	_120
_111:
	SYMB	LTIM, "this", -8, 130, 2117
	SYMB	LTIM, "this", -8, 130, 2245
	SYMB	LTIM, "Event", 11, 0, 2125
	SYMB	LTIM, "Event", 11, 0, 2253
	SYMB	LTIM, "Ptr", 19, 0, 77
	SYMB	LTIM, "Ptr", 19, 0, 205
; rtxcobj.c  714	 if(Event==0)
	SYMB	LINE, 714
	MOV.W	[R7+6],R3
	MOV.W	[R7+4],R2
	OR.W	R3,R2
	SYMB	LTIM, "Event", 11, 0, 2125
	SYMB	LTIM, "Event", -12, 130, 2245
	BNE	_112
; rtxcobj.c  715	  return(0);
	SYMB	LINE, 715
	MOV.W	R0,#00H
	BR	_120
_112:
	SYMB	LTIM, "this", -8, 130, 2117
	SYMB	LTIM, "this", -8, 130, 2245
	SYMB	LTIM, "Event", -12, 130, 2117
	SYMB	LTIM, "Event", -12, 130, 2245
	SYMB	LTIM, "Ptr", 19, 0, 77
	SYMB	LTIM, "Ptr", 19, 0, 205
; rtxcobj.c  716	 while(*Ptr!=0)
	SYMB	LINE, 716
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	MOV.B	ES,R1L
	MOV.W	R1,[R0+2]
	MOV.W	R0,[R0]
	OR.W	R1,R0
	BEQ	_115
	MOV.W	R0,#0FFFFH
_113:
; rtxcobj.c  717	 {
; rtxcobj.c  718	  if(*Ptr==Event)
	SYMB	LINE, 718
	MOV.W	R3,[R7+6]
	MOV.W	R2,[R7+4]
	MOV.B	ES,R5L
	CMP.W	[R4+2],R3
	BNE	_121
	CMP.W	[R4],R2
_121:
	BNE	_114
; rtxcobj.c  719	   return(-1);
	SYMB	LINE, 719
	BR	_120
_114:
	SYMB	LTIM, "this", -8, 130, 2117
	SYMB	LTIM, "this", -8, 130, 2245
	SYMB	LTIM, "Event", -12, 130, 2117
	SYMB	LTIM, "Event", -12, 130, 2245
	SYMB	LTIM, "Ptr", 19, 0, 77
	SYMB	LTIM, "Ptr", 19, 0, 205
; rtxcobj.c  720	  Ptr++;
	SYMB	LINE, 720
	ADD.W	R4,#04H
	SYMB	LTIM, "Ptr", 19, 0, 77
	SYMB	LTIM, "Ptr", 19, 0, 205
	SYMB	LINE, 716
	MOV.B	ES,R5L
	MOV.W	R2,[R4]
	MOV.W	R3,[R4+2]
	OR.W	R3,R2
	BNE	_113
; rtxcobj.c  721	 }
	SYMB	LINE, 721
_115:
; rtxcobj.c  722	 if(Ptr>=&(this->Events[15]))
	SYMB	LINE, 722
	MOV.W	R1,[R7+10]
	MOV.W	R0,[R7+8]
	ADD.W	R0,#056H
	SYMB	LTIM, "this", -8, 130, 2117
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "this", 3, 0, 2125
	CMP.W	R5,R1
	BNE	_122
	CMP.W	R4,R0
_122:
	BCS	_116
; rtxcobj.c  723	  return(0);
	SYMB	LINE, 723
	MOV.W	R0,#00H
	BR	_120
_116:
	SYMB	LTIM, "Event", -12, 130, 2117
	SYMB	LTIM, "Event", -12, 130, 2245
	SYMB	LTIM, "Ptr", 19, 0, 77
	SYMB	LTIM, "Ptr", 19, 0, 205
; rtxcobj.c  724	 *Ptr=Event;
	SYMB	LINE, 724
	MOV.W	R1,[R7+6]
	MOV.W	R0,[R7+4]
	MOV.B	ES,R5L
	MOV.W	[R4],R0
	MOV.W	[R4+2],R1
	SYMB	LTIM, "Event", -12, 130, 2117
	SYMB	LTIM, "Event", 3, 0, 2253
; rtxcobj.c  725	 *(Ptr+1)=0;
	SYMB	LINE, 725
	MOV.B	ES,R5L
	MOV.W	[R4+4],#00H
	MOV.W	[R4+6],#00H
; rtxcobj.c  726	 return(-1);
	SYMB	LINE, 726
	MOV.W	R0,#0FFFFH
	SYMB	LTIM, "Event", 3, 0, 2125
; rtxcobj.c  727	}
	SYMB	LINE, 727
_120:
	ADD.W	R7,#0CH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "Ptr", 19, 0, 77
	SYMB	EFUN
; rtxcobj.c  728	
; rtxcobj.c  729	
; rtxcobj.c  730	void	TEventList_Clear(struct TEventList *this, TEvent *Event)
; rtxcobj.c  731	{
	ALIGN	1
	SYMB	LINE, 731
	PUBLIC	_TEventList_Clear
_TEventList_Clear:
	SYMB	TYPE, 491, 'X', 12, #1, 30, 2, #464, #349
	SYMB	GFUN, "TEventList_Clear", _TEventList_Clear, #491, 0, 0, 112
	SYMB	ALAB, _TEventList_Clear, #491
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#08H
	SYMB	SOFF, 14
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "Event", 11, 0, 2253
	SYMB	IDEN, "this", 3, #464, 0, 2061
	SYMB	IDEN, "Event", 11, #349, 0, 2061
	SYMB	IDEN, "found", -1, #2, 130, 5
	SYMB	LTIM, "found", -1, 0, 69
; rtxcobj.c  732	
; rtxcobj.c  733	 char found=0;
	SYMB	LINE, 733
	MOV.B	R6L,#00H
	SYMB	LTIM, "found", 24, 0, 205
	SYMB	IDEN, "Ptr", -1, #490, 130, 5
	SYMB	LTIM, "Ptr", -1, 0, 69
; rtxcobj.c  734	 TEvent **Ptr;
; rtxcobj.c  735	 
; rtxcobj.c  736	 Ptr=&(this->Events[0]);
	SYMB	LINE, 736
	MOV.W	R5,R1
	MOV.W	R4,R0
	ADD.W	R4,#01AH
	SYMB	LTIM, "Ptr", 19, 0, 205
; rtxcobj.c  737	 if(this==0)
	SYMB	LINE, 737
	MOV.W	[R7+6],R1
	MOV.W	[R7+4],R0
	OR.W	R1,R0
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", -10, 130, 2245
	BEQ	_128
; rtxcobj.c  738	  return;
; rtxcobj.c  739	 if(Event==0)
	SYMB	LINE, 739
	MOV.W	[R7+2],R3
	MOV.W	[R7],R2
	OR.W	R3,R2
	SYMB	LTIM, "Event", 11, 0, 2125
	SYMB	LTIM, "Event", -14, 130, 2245
	BEQ	_128
; rtxcobj.c  740	  return;
; rtxcobj.c  741	 while(*Ptr!=0)
	SYMB	LINE, 741
	MOV.W	R1,[R7+6]
	MOV.W	R0,[R7+4]
	MOV.B	ES,R1L
	MOV.W	R1,[R0+28]
	MOV.W	R0,[R0+26]
	SYMB	LTIM, "this", -10, 130, 2117
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "this", 3, 0, 2125
	OR.W	R1,R0
	BEQ	_128
_123:
; rtxcobj.c  742	 {
; rtxcobj.c  743	  if(*Ptr==Event)
	SYMB	LINE, 743
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	MOV.B	ES,R5L
	CMP.W	[R4+2],R1
	BNE	_129
	CMP.W	[R4],R0
_129:
	BNE	_124
; rtxcobj.c  744	   found=-1;
	SYMB	LINE, 744
	MOV.B	R6L,#0FFH
	SYMB	LTIM, "found", 24, 0, 77
	SYMB	LTIM, "found", 24, 0, 205
_124:
; rtxcobj.c  745	  if(found==-1)
	SYMB	LINE, 745
	CMP.B	R6L,#0FFH
	BNE	_125
; rtxcobj.c  746	   *Ptr=*(Ptr+1);
	SYMB	LINE, 746
	MOV.B	ES,R5L
	MOV.W	R0,[R4+4]
	MOV.W	R1,[R4+6]
	MOV.B	ES,R5L
	MOV.W	[R4],R0
	MOV.W	[R4+2],R1
_125:
; rtxcobj.c  747	  Ptr++;
	SYMB	LINE, 747
	ADD.W	R4,#04H
	SYMB	LTIM, "Ptr", 19, 0, 77
	SYMB	LTIM, "Ptr", 19, 0, 205
	SYMB	LINE, 741
	MOV.B	ES,R5L
	MOV.W	R0,[R4]
	MOV.W	R1,[R4+2]
	OR.W	R1,R0
	BNE	_123
; rtxcobj.c  748	 }
; rtxcobj.c  749	}
	SYMB	LINE, 749
_128:
	ADD.W	R7,#08H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "Ptr", 19, 0, 77
	SYMB	LTIM, "found", 24, 0, 77
	SYMB	LTIM, "Event", -14, 130, 2117
	SYMB	EFUN
; rtxcobj.c  750	
; rtxcobj.c  751	
; rtxcobj.c  752	int	TEventList_InList(struct TEventList *this, TEvent *Event)
; rtxcobj.c  753	{
	ALIGN	1
	SYMB	LINE, 753
	PUBLIC	_TEventList_InList
_TEventList_InList:
	SYMB	TYPE, 492, 'X', 12, #16, 30, 2, #464, #349
	SYMB	GFUN, "TEventList_InList", _TEventList_InList, #492, 0, 0, 48
	SYMB	ALAB, _TEventList_InList, #492
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0CH
	SYMB	SOFF, 8
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "Event", 11, 0, 2253
	SYMB	IDEN, "this", 3, #464, 0, 2061
	SYMB	IDEN, "Event", 11, #349, 0, 2061
	SYMB	IDEN, "Ptr", -1, #490, 130, 5
	SYMB	LTIM, "Ptr", -1, 0, 69
; rtxcobj.c  754	 TEvent **Ptr;
; rtxcobj.c  755	 
; rtxcobj.c  756	 if(this==(void *)0)
	SYMB	LINE, 756
	MOV.W	R5,R1
	MOV.W	R4,R0
	OR.W	R1,R0
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", 19, 0, 2253
	BNE	_131
; rtxcobj.c  757	  return(0);
	SYMB	LINE, 757
	MOV.W	R0,#00H
	BR	_138
_131:
	SYMB	LTIM, "this", 19, 0, 2125
	SYMB	LTIM, "this", 19, 0, 2253
	SYMB	LTIM, "Event", 11, 0, 2125
	SYMB	LTIM, "Event", 11, 0, 2253
; rtxcobj.c  758	 if(Event==0)
	SYMB	LINE, 758
	MOV.W	[R7+2],R3
	MOV.W	[R7],R2
	OR.W	R3,R2
	SYMB	LTIM, "Event", 11, 0, 2125
	SYMB	LTIM, "Event", -8, 130, 2245
	BNE	_132
; rtxcobj.c  759	  return(0);
	SYMB	LINE, 759
	MOV.W	R0,#00H
	BR	_138
_132:
	SYMB	LTIM, "this", 19, 0, 2125
	SYMB	LTIM, "this", 19, 0, 2253
	SYMB	LTIM, "Event", -8, 130, 2117
	SYMB	LTIM, "Event", -8, 130, 2245
; rtxcobj.c  760	 Ptr=&(this->Events[0]);
	SYMB	LINE, 760
	MOV.W	R3,R5
	MOV.W	R2,R4
	MOV.W	R1,R3
	MOV.W	R0,R2
	ADD.W	R2,#01AH
	SYMB	LTIM, "this", 19, 0, 2125
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "Ptr", 11, 0, 205
; rtxcobj.c  761	 while(*Ptr!=0)
	SYMB	LINE, 761
	MOV.B	ES,R1L
	MOV.W	R1,[R0+28]
	MOV.W	R0,[R0+26]
	SYMB	LTIM, "this", 3, 0, 2125
	OR.W	R1,R0
	BEQ	_135
	MOV.W	R0,#0FFFFH
_133:
; rtxcobj.c  762	 {
; rtxcobj.c  763	  if(*Ptr==Event)
	SYMB	LINE, 763
	MOV.W	R5,[R7+2]
	MOV.W	R4,[R7]
	MOV.B	ES,R3L
	CMP.W	[R2+2],R5
	BNE	_139
	CMP.W	[R2],R4
_139:
	BNE	_134
; rtxcobj.c  764	   return(-1);
	SYMB	LINE, 764
	BR	_138
_134:
	SYMB	LTIM, "Event", -8, 130, 2117
	SYMB	LTIM, "Event", -8, 130, 2245
	SYMB	LTIM, "Ptr", 11, 0, 77
	SYMB	LTIM, "Ptr", 11, 0, 205
; rtxcobj.c  765	  Ptr++;
	SYMB	LINE, 765
	ADD.W	R2,#04H
	SYMB	LTIM, "Ptr", 11, 0, 77
	SYMB	LTIM, "Ptr", 11, 0, 205
	SYMB	LINE, 761
	MOV.B	ES,R3L
	MOV.W	R4,[R2]
	MOV.W	R5,[R2+2]
	OR.W	R5,R4
	BNE	_133
; rtxcobj.c  766	 }
	SYMB	LINE, 766
_135:
; rtxcobj.c  767	 return(0);
	SYMB	LINE, 767
	MOV.W	R0,#00H
; rtxcobj.c  768	}
	SYMB	LINE, 768
_138:
	ADDS.W	R7,#04H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "Ptr", 11, 0, 77
	SYMB	LTIM, "Event", -8, 130, 2117
	SYMB	EFUN
; rtxcobj.c  769	
; rtxcobj.c  770	
; rtxcobj.c  771	TEvent	*TEventList_Wait(struct TEventList *this, long *TimeOut)
; rtxcobj.c  772	{
	ALIGN	1
	SYMB	LINE, 772
	PUBLIC	_TEventList_Wait
_TEventList_Wait:
	SYMB	TYPE, 493, 'X', 12, #349, 30, 2, #464, #329
	SYMB	GFUN, "TEventList_Wait", _TEventList_Wait, #493, 0, 0, 112
	SYMB	ALAB, _TEventList_Wait, #493
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#018H
	SYMB	SOFF, 30
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "TimeOut", 11, 0, 2253
	SYMB	IDEN, "this", 3, #464, 0, 2061
	SYMB	IDEN, "TimeOut", 11, #329, 0, 2061
	SYMB	IDEN, "cause", -1, #291, 130, 5
	SYMB	LTIM, "cause", -1, 0, 69
	SYMB	IDEN, "index", -1, #16, 130, 5
	SYMB	LTIM, "index", -1, 0, 69
; rtxcobj.c  773	
; rtxcobj.c  774	 SEMA	cause;
; rtxcobj.c  775	 int	index=0;
	SYMB	LINE, 775
	MOV.W	R6,#00H
	SYMB	LTIM, "index", 26, 0, 205
	SYMB	IDEN, "TMOTimer", -1, #458, 130, 5
	SYMB	LTIM, "TMOTimer", -1, 0, 69
; rtxcobj.c  776	 TTimer	*TMOTimer;
; rtxcobj.c  777	
; rtxcobj.c  778	 TMOTimer=0;
	SYMB	LINE, 778
	MOV.W	[R7+14],#00H
	MOV.W	[R7+12],#00H
	SYMB	LTIM, "TMOTimer", -18, 130, 197
; rtxcobj.c  779	 if(this==0)
	SYMB	LINE, 779
	MOV.W	[R7+22],R1
	MOV.W	[R7+20],R0
	OR.W	R1,R0
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", -10, 130, 2245
	BNE	_140
; rtxcobj.c  780	 {
; rtxcobj.c  781	  *TimeOut=-1;			  // Allocation error.
	SYMB	LINE, 781
	MOV.B	ES,R3L
	MOV.W	[R2],#0FFFFH
	MOV.W	[R2+2],#0FFFFH
; rtxcobj.c  782	  return(0);
	SYMB	LINE, 782
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_156
; rtxcobj.c  783	 }
	SYMB	LINE, 783
_140:
	SYMB	LTIM, "this", -10, 130, 2117
	SYMB	LTIM, "this", -10, 130, 2245
	SYMB	LTIM, "TimeOut", 11, 0, 2125
	SYMB	LTIM, "TimeOut", 11, 0, 2253
	SYMB	LTIM, "index", 26, 0, 77
	SYMB	LTIM, "index", 26, 0, 205
	SYMB	LTIM, "TMOTimer", -18, 130, 69
	SYMB	LTIM, "TMOTimer", -18, 130, 197
; rtxcobj.c  784	
; rtxcobj.c  785	// Added test for NULL pointer @ Timeout SAA 991005
; rtxcobj.c  786	// TMOTimer has value zero
; rtxcobj.c  787	
; rtxcobj.c  788	 if(TimeOut != 0)
	SYMB	LINE, 788
	MOV.W	[R7+18],R3
	MOV.W	[R7+16],R2
	OR.W	R3,R2
	SYMB	LTIM, "TimeOut", 11, 0, 2125
	SYMB	LTIM, "TimeOut", -14, 130, 2245
	BEQ	_145
; rtxcobj.c  789	 {
; rtxcobj.c  790	  if(*TimeOut<0)
	SYMB	LINE, 790
	MOV.W	R1,[R7+18]
	MOV.W	R0,[R7+16]
	MOV.B	ES,R1L
	CMP.W	[R0+2],#00H
	BGT	_141
	BLT	_157
	CMP.W	[R0],#00H
	BCC	_141
_157:
; rtxcobj.c  791	  {
; rtxcobj.c  792	   *TimeOut=-1;			  // Allocation error.
	SYMB	LINE, 792
	MOV.W	R1,[R7+18]
	MOV.W	R0,[R7+16]
	MOV.B	ES,R1L
	MOV.W	[R0],#0FFFFH
	MOV.W	[R0+2],#0FFFFH
	SYMB	LTIM, "TimeOut", -14, 130, 2117
	SYMB	LTIM, "TimeOut", 3, 0, 2253
; rtxcobj.c  793	   return(0);
	SYMB	LINE, 793
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	SYMB	LTIM, "TimeOut", 3, 0, 2125
	BR	_156
; rtxcobj.c  794	  }
	SYMB	LINE, 794
_141:
	SYMB	LTIM, "this", -10, 130, 2117
	SYMB	LTIM, "this", -10, 130, 2245
	SYMB	LTIM, "TimeOut", -14, 130, 2245
	SYMB	LTIM, "index", 26, 0, 77
	SYMB	LTIM, "index", 26, 0, 205
	SYMB	LTIM, "TMOTimer", -18, 130, 69
	SYMB	LTIM, "TMOTimer", -18, 130, 197
; rtxcobj.c  795	  if(*TimeOut>CLKTICK)		 // Allocate timer if nessesary.
	SYMB	LINE, 795
	MOV.W	R1,[R7+18]
	MOV.W	R0,[R7+16]
	MOV.B	ES,R1L
	CMP.W	[R0+2],#00H
	BLT	_145
	BGT	_158
	CMP.W	[R0],#08H
	BL	_145
_158:
; rtxcobj.c  796	  {
; rtxcobj.c  797	   TMOTimer=newTTimer();
	SYMB	LINE, 797
	CALL	_newTTimer
	MOV.W	R3,R1
	MOV.W	R2,R0
	SYMB	LTIM, "TMOTimer", -18, 130, 69
	SYMB	LTIM, "TMOTimer", 11, 0, 205
; rtxcobj.c  798	   if(TMOTimer==0)
	SYMB	LINE, 798
	MOV.W	[R7+14],R3
	MOV.W	[R7+12],R2
	OR.W	R3,R2
	SYMB	LTIM, "TMOTimer", 11, 0, 77
	SYMB	LTIM, "TMOTimer", -18, 130, 197
	BNE	_142
; rtxcobj.c  799	   {
; rtxcobj.c  800	    *TimeOut=-1;			  // Allocation error.
	SYMB	LINE, 800
	MOV.W	R1,[R7+18]
	MOV.W	R0,[R7+16]
	MOV.B	ES,R1L
	MOV.W	[R0],#0FFFFH
	MOV.W	[R0+2],#0FFFFH
	SYMB	LTIM, "TimeOut", -14, 130, 2117
	SYMB	LTIM, "TimeOut", 3, 0, 2253
; rtxcobj.c  801	    return(0);
	SYMB	LINE, 801
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	SYMB	LTIM, "TimeOut", 3, 0, 2125
	BR	_156
; rtxcobj.c  802	   }
	SYMB	LINE, 802
_142:
	SYMB	LTIM, "this", -10, 130, 2117
	SYMB	LTIM, "this", -10, 130, 2245
	SYMB	LTIM, "TimeOut", -14, 130, 2245
	SYMB	LTIM, "index", 26, 0, 77
	SYMB	LTIM, "index", 26, 0, 205
	SYMB	LTIM, "TMOTimer", -18, 130, 69
	SYMB	LTIM, "TMOTimer", -18, 130, 197
; rtxcobj.c  803	   TMOTimer->Tick(TMOTimer,*TimeOut); // Set Timeout.
	SYMB	LINE, 803
	MOV.W	R1,[R7+14]
	MOV.W	R0,[R7+12]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+18]
	MOV.W	R5,[R0+20]
	MOV.W	R1,[R7+18]
	MOV.W	R0,[R7+16]
	MOV.B	ES,R1L
	MOV.W	R2,[R0]
	MOV.W	R3,[R0+2]
	MOV.W	R1,[R7+14]
	MOV.W	R0,[R7+12]
	SYMB	LTIM, "TMOTimer", -18, 130, 69
	SYMB	LTIM, "TMOTimer", 3, 0, 205
	FCALL	__ICALL
	SYMB	LTIM, "TMOTimer", 3, 0, 77
	SYMB	LTIM, "TMOTimer", -18, 130, 197
; rtxcobj.c  804	   if(this->Append(this,TMOTimer->TimeOut)==0)
	SYMB	LINE, 804
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+10]
	MOV.W	R5,[R0+12]
	MOV.W	R1,[R7+14]
	MOV.W	R0,[R7+12]
	MOV.B	ES,R1L
	MOV.W	R2,[R0+22]
	MOV.W	R3,[R0+24]
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	SYMB	LTIM, "this", -10, 130, 2117
	SYMB	LTIM, "this", 3, 0, 2253
	FCALL	__ICALL
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", -10, 130, 2245
	OR.W	R0,R0
	BNE	_145
; rtxcobj.c  805	   {
; rtxcobj.c  806	    *TimeOut=-1;			  // Append Error.
	SYMB	LINE, 806
	MOV.W	R1,[R7+18]
	MOV.W	R0,[R7+16]
	MOV.B	ES,R1L
	MOV.W	[R0],#0FFFFH
	MOV.W	[R0+2],#0FFFFH
	SYMB	LTIM, "TimeOut", -14, 130, 2117
	SYMB	LTIM, "TimeOut", 3, 0, 2253
; rtxcobj.c  807	    return(0);
	SYMB	LINE, 807
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	SYMB	LTIM, "TimeOut", 3, 0, 2125
	BR	_156
; rtxcobj.c  808	   }
; rtxcobj.c  809	  }
; rtxcobj.c  810	 }
	SYMB	LINE, 810
_145:
	SYMB	LTIM, "this", -10, 130, 2117
	SYMB	LTIM, "this", -10, 130, 2245
	SYMB	LTIM, "TimeOut", -14, 130, 2245
	SYMB	LTIM, "index", 26, 0, 77
	SYMB	LTIM, "index", 26, 0, 205
	SYMB	LTIM, "TMOTimer", -18, 130, 69
	SYMB	LTIM, "TMOTimer", -18, 130, 197
; rtxcobj.c  811	 while(this->Events[index]!=0)	 // Generate RTXC SEMA-list.
	SYMB	LINE, 811
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,#01AH
	MOV.W	[R7+10],R1
	MOV.W	[R7+8],R0
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	MOV.B	ES,R1L
	MOV.W	R1,[R0+28]
	MOV.W	R0,[R0+26]
	OR.W	R1,R0
	BEQ	_147
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,#05AH
	MOV.W	[R7+6],R1
	MOV.W	[R7+4],R0
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,#01AH
_146:
; rtxcobj.c  812	 {
; rtxcobj.c  813	  this->RTXCList[index]=this->Events[index]->ID;
	SYMB	LINE, 813
	MOV.W	R2,R6
	ASL.W	R2,#02H
	MOV.W	R4,R2
	MOVS.W	R5,#00H
	MOV.W	R3,R1
	MOV.W	R2,R0
	MOV.W	[R7+2],R3
	MOV.W	[R7],R2
	ADD.W	R2,R4
	MOV.B	ES,R3L
	MOV.W	R3,[R2+2]
	MOV.W	R2,[R2]
	MOV.B	ES,R3L
	MOV.B	R4L,[R2+26]
	MOV.W	R2,R6
	SEXT.W	R3
	MOV.W	R1,[R7+6]
	MOV.W	R0,[R7+4]
	ADD.W	R0,R2
	MOV.B	ES,R1L
	MOV.B	[R0],R4L
; rtxcobj.c  814	  index++;
	SYMB	LINE, 814
	ADDS.W	R6,#01H
	SYMB	LTIM, "index", 26, 0, 77
	SYMB	LTIM, "index", 26, 0, 205
	SYMB	LINE, 811
	MOV.W	R2,R6
	ASL.W	R2,#02H
	MOVS.W	R3,#00H
	MOV.W	R5,[R7+2]
	MOV.W	R4,[R7]
	MOV.W	R1,R5
	MOV.W	R0,R4
	ADD.W	R4,R2
	MOV.B	ES,R5L
	MOV.W	R5,[R4+2]
	MOV.W	R4,[R4]
	OR.W	R5,R4
	BNE	_146
; rtxcobj.c  815	 }
	SYMB	LINE, 815
_147:
; rtxcobj.c  816	 this->RTXCList[index]=0;
	SYMB	LINE, 816
	MOV.W	R5,[R7+22]
	MOV.W	R4,[R7+20]
	ADD.W	R4,#05AH
	MOV.W	R2,R6
	SEXT.W	R3
	MOV.W	R1,R5
	MOV.W	R0,R4
	ADD.W	R0,R2
	MOV.B	ES,R1L
	MOV.B	[R0],#00H
	MOV.W	[R7+6],R5
	MOV.W	[R7+4],R4
	MOV.W	R1,R5
	MOV.W	R0,R4
; rtxcobj.c  817	
; rtxcobj.c  818	
; rtxcobj.c  819	 cause=KS_waitm(this->RTXCList); // Perform actual wait.
	SYMB	LINE, 819
	CALL	_KS_waitm
	SYMB	LTIM, "cause", 0, 0, 205
; rtxcobj.c  820	
; rtxcobj.c  821	
; rtxcobj.c  822	 index=0;
	SYMB	LINE, 822
	MOV.W	R6,#00H
	SYMB	LTIM, "index", 26, 0, 77
	SYMB	LTIM, "index", 26, 0, 205
; rtxcobj.c  823	 while(this->Events[index]!=0)	 // Track event-souce from SEMA-list.
	SYMB	LINE, 823
	MOV.W	R3,[R7+10]
	MOV.W	R2,[R7+8]
	MOV.B	ES,R3L
	MOV.W	R3,[R2+2]
	MOV.W	R2,[R2]
	OR.W	R3,R2
	BEQ	_150
	MOV.W	R3,[R7+22]
	MOV.W	R2,[R7+20]
	ADD.W	R2,#01AH
	MOV.W	[R7+10],R3
	MOV.W	[R7+8],R2
_148:
; rtxcobj.c  824	 {
; rtxcobj.c  825	  if(this->RTXCList[index]==cause)
	SYMB	LINE, 825
	MOV.W	R4,R6
	SEXT.W	R5
	MOV.W	R3,[R7+6]
	MOV.W	R2,[R7+4]
	ADD.W	R2,R4
	MOV.B	ES,R3L
	CMP.B	[R2],R0L
	BEQ	_150
; rtxcobj.c  826	   break;
; rtxcobj.c  827	  index++;
	SYMB	LINE, 827
	ADDS.W	R6,#01H
	SYMB	LTIM, "index", 26, 0, 77
	SYMB	LTIM, "index", 26, 0, 205
	SYMB	LINE, 823
	MOV.W	R1,R6
	ASL.W	R1,#02H
	MOV.W	R2,R1
	MOVS.W	R3,#00H
	MOV.W	R5,[R7+10]
	MOV.W	R4,[R7+8]
	ADD.W	R4,R2
	MOV.B	ES,R5L
	MOV.W	R5,[R4+2]
	MOV.W	R4,[R4]
	OR.W	R5,R4
	BNE	_148
; rtxcobj.c  828	 }
	SYMB	LINE, 828
_150:
; rtxcobj.c  829	
; rtxcobj.c  830	 if(TMOTimer!=0)		  // TimeOut was used.
	SYMB	LINE, 830
	MOV.W	R1,[R7+14]
	MOV.W	R0,[R7+12]
	MOV.W	R3,R1
	MOV.W	R2,R0
	OR.W	R1,R0
	SYMB	LTIM, "cause", 0, 0, 77
	SYMB	LTIM, "TMOTimer", -18, 130, 69
	SYMB	LTIM, "TMOTimer", 11, 0, 205
	BEQ	_152
; rtxcobj.c  831	 {
; rtxcobj.c  832	  if(this->Events[index]==TMOTimer->TimeOut)
	SYMB	LINE, 832
	MOV.W	R0,R6
	ASL.W	R0,#02H
	MOVS.W	R1,#00H
	MOV.W	R5,[R7+22]
	MOV.W	R4,[R7+20]
	ADD.W	R4,#01AH
	ADD.W	R4,R0
	MOV.W	R1,R3
	MOV.W	R0,R2
	ADD.W	R0,#016H
	MOV.W	[R7+10],R1
	MOV.W	[R7+8],R0
	MOV.B	ES,R3L
	MOV.W	R0,[R2+22]
	MOV.W	R1,[R2+24]
	MOV.B	ES,R5L
	CMP.W	[R4+2],R1
	BNE	_160
	CMP.W	[R4],R0
_160:
	BNE	_151
; rtxcobj.c  833	   *TimeOut=0;			  // TimeOut.
	SYMB	LINE, 833
	MOV.W	R1,[R7+18]
	MOV.W	R0,[R7+16]
	MOV.B	ES,R1L
	MOV.W	[R0],#00H
	MOV.W	[R0+2],#00H
	SYMB	LTIM, "TimeOut", -14, 130, 2117
	SYMB	LTIM, "TimeOut", 3, 0, 2253
	SYMB	LTIM, "TimeOut", 3, 0, 2125
	SYMB	LTIM, "TimeOut", -14, 130, 2245
_151:
; rtxcobj.c  834	  *TimeOut=CLKTICK*KS_inqtimer(TMOTimer->Handle);
	SYMB	LINE, 834
	MOV.W	[R7+14],R3
	MOV.W	[R7+12],R2
	MOV.B	ES,R3L
	MOV.W	R0,[R2+28]
	MOV.W	R1,[R2+30]
	SYMB	LTIM, "TMOTimer", 11, 0, 77
	SYMB	LTIM, "TMOTimer", -18, 130, 197
	CALL	_KS_inqtimer
	ASL.W	R0,#03H
	MOV.W	R0,R0
	SEXT.W	R1
	MOV.W	R3,[R7+18]
	MOV.W	R2,[R7+16]
	MOV.B	ES,R3L
	MOV.W	[R2],R0
	MOV.W	[R2+2],R1
	SYMB	LTIM, "TimeOut", -14, 130, 2117
	SYMB	LTIM, "TimeOut", 11, 0, 2253
; rtxcobj.c  835	  this->Clear(this,TMOTimer->TimeOut);
	SYMB	LINE, 835
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+14]
	MOV.W	R5,[R0+16]
	MOV.W	R3,[R7+10]
	MOV.W	R2,[R7+8]
	MOV.B	ES,R3L
	MOV.W	R3,[R2+2]
	MOV.W	R2,[R2]
	SYMB	LTIM, "TimeOut", 11, 0, 2125
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	SYMB	LTIM, "this", -10, 130, 2117
	SYMB	LTIM, "this", 3, 0, 2253
	FCALL	__ICALL
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", -10, 130, 2245
; rtxcobj.c  836	  deleteTTimer(TMOTimer);
	SYMB	LINE, 836
	MOV.W	R1,[R7+14]
	MOV.W	R0,[R7+12]
	CALL	_deleteTTimer
	SYMB	LTIM, "TMOTimer", -18, 130, 69
	SYMB	LTIM, "TMOTimer", 3, 0, 205
	SYMB	LTIM, "TMOTimer", 3, 0, 77
; rtxcobj.c  837	 }  
	SYMB	LINE, 837
_152:
; rtxcobj.c  838	 
; rtxcobj.c  839	 return(this->Events[index]);
	SYMB	LINE, 839
	MOV.W	R0,R6
	ASL.W	R0,#02H
	SYMB	LTIM, "index", 26, 0, 77
	SYMB	LTIM, "index", 2, 0, 205
	SYMB	LTIM, "index", 2, 0, 77
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,[R7+22]
	MOV.W	R0,[R7+20]
	ADD.W	R0,#01AH
	SYMB	LTIM, "this", -10, 130, 2117
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "this", 3, 0, 2125
	ADD.W	R0,R2
	MOV.B	ES,R1L
	MOV.W	R1,[R0+2]
	MOV.W	R0,[R0]
; rtxcobj.c  840	}
	SYMB	LINE, 840
_156:
	ADD.W	R7,#018H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
	SYMB	TYPE, 494, "TEventList", 'T', #462
; rtxcobj.c  841	
; rtxcobj.c  842	
; rtxcobj.c  843	
; rtxcobj.c  844	TEventList	*newTEventList(void)
; rtxcobj.c  845	{
	ALIGN	1
	SYMB	LINE, 845
	PUBLIC	_newTEventList
_newTEventList:
	SYMB	TYPE, 495, 'n', #494, 130
	SYMB	TYPE, 496, 'P', #495
	SYMB	TYPE, 497, 'X', 12, #496, 30, 0
	SYMB	GFUN, "newTEventList", _newTEventList, #497, 0, 0, 48
	SYMB	ALAB, _newTEventList, #497
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0CH
	SYMB	SOFF, 8
	SYMB	IDEN, "EventList", -1, #496, 130, 5
	SYMB	LTIM, "EventList", -1, 0, 69
; rtxcobj.c  846	
; rtxcobj.c  847	/* VAR */
; rtxcobj.c  848	 TEventList *EventList;
; rtxcobj.c  849	
; rtxcobj.c  850	/* BEGIN */
; rtxcobj.c  851	 if(TEventListMap==0)
	SYMB	LINE, 851
	MOV.B	ES,#SEG( _TEventListMap )
	MOV.W	R0,#SOF( _TEventListMap )
	MOV.B	R0L,[R0]
	BNE	_162
; rtxcobj.c  852	 {
; rtxcobj.c  853	  TEventListMap=KS_create_part(&TEventListPartition,
; rtxcobj.c  854	                               sizeof(struct TEventList),TEVENTLIST_COUNT);
	SYMB	LINE, 854
	MOV.W	R1,#SEG( _TEventListPartition )
	MOV.W	R0,#SOF( _TEventListPartition )
	MOV.W	R2,#06AH
	MOV.W	R3,#05H
	CALL	_KS_create_part
	MOV.B	ES,#SEG( _TEventListMap )
	MOV.W	R1,#SOF( _TEventListMap )
	MOV.B	[R1],R0L
; rtxcobj.c  855	  if(TEventListMap==0)
	SYMB	LINE, 855
	OR.B	R0L,R0L
	BNE	_162
; rtxcobj.c  856	   return(0);
	SYMB	LINE, 856
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_165
; rtxcobj.c  857	 }
	SYMB	LINE, 857
_162:
; rtxcobj.c  858	 EventList=KS_alloc(TEventListMap);
	SYMB	LINE, 858
	MOV.B	ES,#SEG( _TEventListMap )
	MOV.W	R0,#SOF( _TEventListMap )
	MOV.B	R0L,[R0]
	CALL	_KS_alloc
	SYMB	LTIM, "EventList", 3, 0, 205
; rtxcobj.c  859	 if(EventList==0)
	SYMB	LINE, 859
	MOV.W	R3,R1
	MOV.W	R2,R0
	OR.W	R1,R0
	SYMB	LTIM, "EventList", 3, 0, 77
	SYMB	LTIM, "EventList", 11, 0, 205
	BNE	_163
; rtxcobj.c  860	  return(0);
	SYMB	LINE, 860
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_165
_163:
	SYMB	LTIM, "EventList", 11, 0, 77
	SYMB	LTIM, "EventList", 11, 0, 205
; rtxcobj.c  861	 EventList->TEventList=TEventList_TEventList;
	SYMB	LINE, 861
	MOV.W	R1,R3
	MOV.W	R0,R2
	ADD.W	R0,#02H
	MOV.B	ES,R1L
	MOV.W	[R0],#SOF( _TEventList_TEventList )
	MOV.W	[R0+2],#SEG( _TEventList_TEventList )
; rtxcobj.c  862	 EventList->_TEventList=TEventList__TEventList;
	SYMB	LINE, 862
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#06H
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TEventList__TEventList )
	MOV.W	[R4+2],#SEG( _TEventList__TEventList )
; rtxcobj.c  863	 EventList->Append=TEventList_Append;
	SYMB	LINE, 863
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#0AH
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TEventList_Append )
	MOV.W	[R4+2],#SEG( _TEventList_Append )
; rtxcobj.c  864	 EventList->Clear=TEventList_Clear;
	SYMB	LINE, 864
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#0EH
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TEventList_Clear )
	MOV.W	[R4+2],#SEG( _TEventList_Clear )
; rtxcobj.c  865	 EventList->InList=TEventList_InList;
	SYMB	LINE, 865
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#012H
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TEventList_InList )
	MOV.W	[R4+2],#SEG( _TEventList_InList )
; rtxcobj.c  866	 EventList->Wait=TEventList_Wait;
	SYMB	LINE, 866
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#016H
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TEventList_Wait )
	MOV.W	[R4+2],#SEG( _TEventList_Wait )
; rtxcobj.c  867	 EventList->TEventList(EventList);
	SYMB	LINE, 867
	MOV.B	ES,R1L
	MOV.W	R4,[R0]
	MOV.W	R5,[R0+2]
	MOV.W	[R7+2],R3
	MOV.W	[R7],R2
	MOV.W	R1,R3
	MOV.W	R0,R2
	SYMB	LTIM, "EventList", 11, 0, 77
	SYMB	LTIM, "EventList", -8, 130, 197
	SYMB	LTIM, "EventList", -8, 130, 69
	SYMB	LTIM, "EventList", 3, 0, 205
	FCALL	__ICALL
	SYMB	LTIM, "EventList", 3, 0, 77
	SYMB	LTIM, "EventList", -8, 130, 197
; rtxcobj.c  868	 return(EventList);
	SYMB	LINE, 868
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	SYMB	LTIM, "EventList", -8, 130, 69
	SYMB	LTIM, "EventList", 3, 0, 205
; rtxcobj.c  869	}
	SYMB	LINE, 869
_165:
	ADDS.W	R7,#04H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "EventList", 3, 0, 77
	SYMB	EFUN
; rtxcobj.c  870	
; rtxcobj.c  871	
; rtxcobj.c  872	void deleteTEventList(TEventList *EventList)
; rtxcobj.c  873	{
	ALIGN	1
	SYMB	LINE, 873
	PUBLIC	_deleteTEventList
_deleteTEventList:
	SYMB	TYPE, 498, 'X', 12, #1, 30, 1, #496
	SYMB	GFUN, "deleteTEventList", _deleteTEventList, #498, 0, 0, 48
	SYMB	ALAB, _deleteTEventList, #498
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0CH
	SYMB	SOFF, 8
	SYMB	LTIM, "EventList", 3, 0, 2253
	SYMB	IDEN, "EventList", 3, #496, 0, 2061
; rtxcobj.c  874	 EventList->_TEventList(EventList);
	SYMB	LINE, 874
	MOV.B	ES,R1L
	MOV.W	R4,[R0+6]
	MOV.W	R5,[R0+8]
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	SYMB	LTIM, "EventList", 3, 0, 2125
	SYMB	LTIM, "EventList", -8, 130, 2245
	SYMB	LTIM, "EventList", -8, 130, 2117
	SYMB	LTIM, "EventList", 3, 0, 2253
	FCALL	__ICALL
	SYMB	LTIM, "EventList", 3, 0, 2125
	SYMB	LTIM, "EventList", -8, 130, 2245
; rtxcobj.c  875	 KS_free(TEventListMap,EventList);
	SYMB	LINE, 875
	MOV.B	ES,#SEG( _TEventListMap )
	MOV.W	R0,#SOF( _TEventListMap )
	MOV.B	R0L,[R0]
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	CALL	_KS_free
	SYMB	LTIM, "EventList", -8, 130, 2117
	SYMB	LTIM, "EventList", 11, 0, 2253
	SYMB	LTIM, "EventList", 11, 0, 2125
; rtxcobj.c  876	}
	SYMB	LINE, 876
	ADDS.W	R7,#04H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rtxcobj.c  877	
; rtxcobj.c  878	
; rtxcobj.c  879	
; rtxcobj.c  880	
; rtxcobj.c  881	typedef struct TStream {
; rtxcobj.c  882	  /* Public: */
; rtxcobj.c  883		int		ObjectID;
; rtxcobj.c  884		void		(*TStream)(struct TStream *this, int width, int depth);
; rtxcobj.c  885		void		(*_TStream)(struct TStream *this);
; rtxcobj.c  886		char*		(*Get)(struct TStream *this, void* dest);
; rtxcobj.c  887		void		(*Put)(struct TStream *this, void* Source);
; rtxcobj.c  888		QUEUE		ID;
; rtxcobj.c  889	  /* Private: */
; rtxcobj.c  890		int		Width;
; rtxcobj.c  891		int		Depth;
; rtxcobj.c  892		char*		Handle;
; rtxcobj.c  893	} TStream;
; rtxcobj.c  894	
; rtxcobj.c  895	
; rtxcobj.c  896	struct TStream TStreamPartition[DNQUEUES];
; rtxcobj.c  897	MAP		 TStreamMap=0;
	RSEG	RTXCOBJ_INI_FA
	SYMB	IDEN, "TStreamMap", _TStreamMap, #292, 130, 0
	SYMB	ALAB, _TStreamMap, #292
	PUBLIC	_TStreamMap
_TStreamMap:
; rtxcobj.c  898	
; rtxcobj.c  899	
; rtxcobj.c  900	void	TStream_TStream(struct TStream *this, int width, int depth)
; rtxcobj.c  901	{
	DB	000H
	RSEG	RTXCOBJ_PR
	ALIGN	1
	SYMB	LINE, 901
	PUBLIC	_TStream_TStream
_TStream_TStream:
	SYMB	TYPE, 501, 'n', #500, 130
	SYMB	TYPE, 502, 'P', #501
	SYMB	TYPE, 500, 'X', 12, #1, 30, 3, #502, #16, #16
	SYMB	TYPE, 504, 'n', #503, 129
	SYMB	TYPE, 505, 'P', #504
	SYMB	TYPE, 506, 'X', 12, #1, 30, 1, #502
	SYMB	TYPE, 507, 'n', #506, 129
	SYMB	TYPE, 508, 'P', #507
	SYMB	TYPE, 509, 'X', 12, #287, 30, 2, #502, #289
	SYMB	TYPE, 510, 'n', #509, 129
	SYMB	TYPE, 511, 'P', #510
	SYMB	TYPE, 512, 'X', 12, #1, 30, 2, #502, #289
	SYMB	TYPE, 513, 'n', #512, 129
	SYMB	TYPE, 514, 'P', #513
	SYMB	TYPE, 500, "TStream", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TStream", #505, 2,\
		 "_TStream", #508, 6,\
		 "Get", #511, 10,\
		 "Put", #514, 14,\
		 "ID", #306, 18,\
		 "Width", #16, 20,\
		 "Depth", #16, 22,\
		 "Handle", #287, 24
	SYMB	TYPE, 499, 'X', 12, #1, 30, 3, #502, #16, #16
	SYMB	GFUN, "TStream_TStream", _TStream_TStream, #499, 0, 0, 48
	SYMB	ALAB, _TStream_TStream, #499
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SUB.W	R7,#0CH
	SYMB	SOFF, 16
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "width", 10, 0, 2253
	SYMB	LTIM, "depth", 14, 0, 2253
	SYMB	IDEN, "this", 3, #502, 0, 2061
	SYMB	IDEN, "width", 10, #16, 0, 2061
	SYMB	IDEN, "depth", 14, #16, 0, 2061
	SYMB	IDEN, "Ptr", -1, #502, 130, 5
	SYMB	LTIM, "Ptr", -1, 0, 69
; rtxcobj.c  902	
; rtxcobj.c  903	 struct TStream *Ptr;
; rtxcobj.c  904	
; rtxcobj.c  905	 if(this>(struct TStream *)0)
	SYMB	LINE, 905
	MOV.W	R5,R1
	MOV.W	R4,R0
	CMP.W	R5,#00H
	BNE	_170
	CMP.W	R4,#00H
_170:
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", 19, 0, 2253
	BL	_169
; rtxcobj.c  906	 {
; rtxcobj.c  907	  Ptr=this;
	SYMB	LINE, 907
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "Ptr", 3, 0, 205
; rtxcobj.c  908	  this->ID=NQUEUES+1;
	SYMB	LINE, 908
	MOV.W	[R7+10],R5
	MOV.W	[R7+8],R4
	ADD.W	R4,#012H
	SYMB	LTIM, "this", 19, 0, 2125
	SYMB	LTIM, "this", -8, 130, 2245
	MOV.W	[R7+6],R5
	MOV.W	[R7+4],R4
	MOV.W	R5,[R7+10]
	MOV.W	R4,[R7+8]
	MOV.B	ES,R5L
	MOV.B	[R4+18],#01H
	SYMB	LTIM, "this", -8, 130, 2117
	SYMB	LTIM, "this", 19, 0, 2253
; rtxcobj.c  909	  while(Ptr!=&TStreamPartition[0])
	SYMB	LINE, 909
	CMP.W	R5,#SEG( _TStreamPartition )
	BNE	_171
	CMP.W	R4,#SOF( _TStreamPartition )
_171:
	SYMB	LTIM, "this", 19, 0, 2125
	SYMB	LTIM, "this", -8, 130, 2245
	BEQ	_167
_166:
; rtxcobj.c  910	  {
; rtxcobj.c  911	   this->ID++;
	SYMB	LINE, 911
	MOV.W	R5,[R7+6]
	MOV.W	R4,[R7+4]
	MOV.B	ES,R5L
	ADDS.B	[R4],#01H
; rtxcobj.c  912	   Ptr--;
	SYMB	LINE, 912
	SUB.W	R0,#01CH
	SYMB	LTIM, "Ptr", 3, 0, 77
	SYMB	LTIM, "Ptr", 3, 0, 205
	SYMB	LINE, 909
	CMP.W	R1,#SEG( _TStreamPartition )
	BNE	_166
	CMP.W	R0,#SOF( _TStreamPartition )
	BNE	_166
; rtxcobj.c  913	  }
	SYMB	LINE, 913
_167:
; rtxcobj.c  914	  this->ObjectID=TStreamID;
	SYMB	LINE, 914
	MOV.W	R1,[R7+10]
	MOV.W	R0,[R7+8]
	MOV.B	ES,R1L
	MOV.W	[R0],#06H
	SYMB	LTIM, "Ptr", 3, 0, 77
	SYMB	LTIM, "this", -8, 130, 2117
	SYMB	LTIM, "this", 3, 0, 2253
; rtxcobj.c  915	  this->Width=width;
	SYMB	LINE, 915
	MOV.B	ES,R1L
	MOV.W	[R0+20],R2
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", -8, 130, 2245
; rtxcobj.c  916	  this->Depth=depth;
	SYMB	LINE, 916
	MOV.W	R1,[R7+10]
	MOV.W	R0,[R7+8]
	MOV.B	ES,R1L
	MOV.W	[R0+22],R3
	SYMB	LTIM, "this", -8, 130, 2117
	SYMB	LTIM, "this", 3, 0, 2253
; rtxcobj.c  917	  this->Handle=new(this->Width*this->Depth);
	SYMB	LINE, 917
	MOV.B	ES,R1L
	MOV.W	R0,[R0+20]
	SYMB	LTIM, "this", 3, 0, 2125
	SYMB	LTIM, "this", -8, 130, 2245
	MULU.W	R0,R3
	MOV.W	R0,R0
	SEXT.W	R1
	CALL	_new
	SYMB	LTIM, "depth", 14, 0, 2125
	SYMB	LTIM, "width", 10, 0, 2125
	MOV.W	R3,[R7+10]
	MOV.W	R2,[R7+8]
	MOV.B	ES,R3L
	MOV.W	[R2+24],R0
	MOV.W	[R2+26],R1
	SYMB	LTIM, "this", -8, 130, 2117
	SYMB	LTIM, "this", 11, 0, 2253
; rtxcobj.c  918	  if (this->Handle)
	SYMB	LINE, 918
	MOV.W	R1,R3
	MOV.W	R0,R2
	MOV.B	ES,R1L
	MOV.W	R1,[R0+26]
	MOV.W	R0,[R0+24]
	SYMB	LTIM, "this", 11, 0, 2125
	SYMB	LTIM, "this", -8, 130, 2245
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	OR.W	R1,R0
	BEQ	_169
; rtxcobj.c  919	   KS_defqueue(this->ID,this->Width,this->Depth,this->Handle,0);
	SYMB	LINE, 919
	MOV.W	R5,[R7+6]
	MOV.W	R4,[R7+4]
	MOV.B	ES,R5L
	MOV.B	R0L,[R4]
	MOV.W	R3,[R7+10]
	MOV.W	R2,[R7+8]
	MOV.B	ES,R3L
	MOV.W	R1,[R2+20]
	MOV.W	R3,[R7+10]
	MOV.W	R2,[R7+8]
	MOV.B	ES,R3L
	MOV.W	R2,[R2+22]
	SYMB	LTIM, "this", -8, 130, 2117
	SYMB	LTIM, "this", 11, 0, 2253
	SYMB	LTIM, "this", 11, 0, 2125
	MOV.W	R3,#00H
	MOV.W	R5,[R7+2]
	MOV.W	R4,[R7]
	PUSH.W	R4, R5
	SYMB	SOFF, 20
	CALL	_KS_defqueue
	ADDS.W	R7,#04H
	SYMB	SOFF, 16
; rtxcobj.c  920	 }
	SYMB	LINE, 920
_169:
; rtxcobj.c  921	}
	SYMB	LINE, 921
	ADD.W	R7,#0CH
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rtxcobj.c  922	
; rtxcobj.c  923	
; rtxcobj.c  924	void		TStream__TStream(struct TStream *this)
; rtxcobj.c  925	{
	ALIGN	1
	SYMB	LINE, 925
	PUBLIC	_TStream__TStream
_TStream__TStream:
	SYMB	TYPE, 515, 'X', 12, #1, 30, 1, #502
	SYMB	GFUN, "TStream__TStream", _TStream__TStream, #515, 0, 0, 0
	SYMB	ALAB, _TStream__TStream, #515
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	IDEN, "this", 3, #502, 0, 2061
; rtxcobj.c  926	 if(this>(struct TStream *)0)
	SYMB	LINE, 926
	CMP.W	R1,#00H
	BNE	_175
	CMP.W	R0,#00H
_175:
	BL	_174
; rtxcobj.c  927	 {
; rtxcobj.c  928	  this->ID=0;
	SYMB	LINE, 928
	MOV.B	ES,R1L
	MOV.B	[R0+18],#00H
; rtxcobj.c  929	  if (this->Handle)
	SYMB	LINE, 929
	MOV.B	ES,R1L
	MOV.W	R2,[R0+24]
	MOV.W	R3,[R0+26]
	MOV.W	R1,R3
	MOV.W	R0,R2
	OR.W	R3,R2
	SYMB	LTIM, "this", 3, 0, 2125
	BEQ	_174
; rtxcobj.c  930	   delete(this->Handle);
	SYMB	LINE, 930
	CALL	_delete
; rtxcobj.c  931	 }
	SYMB	LINE, 931
_174:
; rtxcobj.c  932	}
	SYMB	LINE, 932
	RET
	SYMB	EFUN
; rtxcobj.c  933	
; rtxcobj.c  934	
; rtxcobj.c  935	char*		TStream_Get(struct TStream *this, void* Dest)
; rtxcobj.c  936	{
	ALIGN	1
	SYMB	LINE, 936
	PUBLIC	_TStream_Get
_TStream_Get:
	SYMB	TYPE, 516, 'X', 12, #287, 30, 2, #502, #289
	SYMB	GFUN, "TStream_Get", _TStream_Get, #516, 0, 0, 48
	SYMB	ALAB, _TStream_Get, #516
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "Dest", 11, 0, 2253
	SYMB	IDEN, "this", 3, #502, 0, 2061
	SYMB	IDEN, "Dest", 11, #289, 0, 2061
; rtxcobj.c  937	 if(this>(struct TStream *)0)
	SYMB	LINE, 937
	CMP.W	R1,#00H
	BNE	_178
	CMP.W	R0,#00H
_178:
	BL	_176
; rtxcobj.c  938	 {
; rtxcobj.c  939	  KS_dequeuew(this->ID,Dest);
	SYMB	LINE, 939
	MOV.B	ES,R1L
	MOV.B	R0L,[R0+18]
	SYMB	LTIM, "this", 3, 0, 2125
	MOV.W	R5,R3
	MOV.W	R4,R2
	SYMB	LTIM, "Dest", 11, 0, 2125
	SYMB	LTIM, "Dest", 19, 0, 2253
	SYMB	LTIM, "Dest", 19, 0, 2125
	SYMB	LTIM, "Dest", 11, 0, 2253
	CALL	_KS_dequeuew
	SYMB	LTIM, "Dest", 11, 0, 2125
	SYMB	LTIM, "Dest", 19, 0, 2253
; rtxcobj.c  940	  return(Dest);
	SYMB	LINE, 940
	MOV.W	R1,R5
	MOV.W	R0,R4
	SYMB	LTIM, "Dest", 19, 0, 2125
	SYMB	LTIM, "Dest", 3, 0, 2253
	BR	_177
; rtxcobj.c  941	 }
	SYMB	LINE, 941
_176:
; rtxcobj.c  942	 return(0);
	SYMB	LINE, 942
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	SYMB	LTIM, "Dest", 3, 0, 2125
; rtxcobj.c  943	}	
	SYMB	LINE, 943
_177:
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rtxcobj.c  944	
; rtxcobj.c  945	
; rtxcobj.c  946	void		TStream_Put(struct TStream *this, void* Source)
; rtxcobj.c  947	{
	ALIGN	1
	SYMB	LINE, 947
	PUBLIC	_TStream_Put
_TStream_Put:
	SYMB	TYPE, 517, 'X', 12, #1, 30, 2, #502, #289
	SYMB	GFUN, "TStream_Put", _TStream_Put, #517, 0, 0, 0
	SYMB	ALAB, _TStream_Put, #517
	SYMB	LTIM, "this", 3, 0, 2253
	SYMB	LTIM, "Source", 11, 0, 2253
	SYMB	IDEN, "this", 3, #502, 0, 2061
	SYMB	IDEN, "Source", 11, #289, 0, 2061
; rtxcobj.c  948	 if(this>(struct TStream *)0)
	SYMB	LINE, 948
	CMP.W	R1,#00H
	BNE	_180
	CMP.W	R0,#00H
_180:
	BL	_179
; rtxcobj.c  949	 {
; rtxcobj.c  950	  KS_enqueuew(this->ID,Source);
	SYMB	LINE, 950
	MOV.B	ES,R1L
	MOV.B	R0L,[R0+18]
	SYMB	LTIM, "this", 3, 0, 2125
	CALL	_KS_enqueuew
	SYMB	LTIM, "Source", 11, 0, 2125
; rtxcobj.c  951	 }
	SYMB	LINE, 951
_179:
; rtxcobj.c  952	}	
	SYMB	LINE, 952
	RET
	SYMB	EFUN
; rtxcobj.c  953	
; rtxcobj.c  954	
; rtxcobj.c  955	
; rtxcobj.c  956	TStream *newTStream(int Width, int Depth)
	SYMB	TYPE, 518, "TStream", 'T', #500
; rtxcobj.c  957	{
	ALIGN	1
	SYMB	LINE, 957
	PUBLIC	_newTStream
_newTStream:
	SYMB	TYPE, 519, 'n', #518, 130
	SYMB	TYPE, 520, 'P', #519
	SYMB	TYPE, 521, 'X', 12, #520, 30, 2, #16, #16
	SYMB	GFUN, "newTStream", _newTStream, #521, 0, 0, 112
	SYMB	ALAB, _newTStream, #521
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	ADDS.W	R7,#0AH
	SYMB	SOFF, 12
	SYMB	LTIM, "Width", 2, 0, 2253
	SYMB	LTIM, "Depth", 6, 0, 2253
	MOV.W	R6,R1
	SYMB	LTIM, "Depth", 6, 0, 2125
	SYMB	LTIM, "Depth", 26, 0, 2253
	MOV.W	[R7+4],R0
	SYMB	LTIM, "Width", 2, 0, 2125
	SYMB	LTIM, "Width", -8, 130, 2245
	SYMB	IDEN, "Width", -7, #16, 130, 2053
	SYMB	IDEN, "Depth", 26, #16, 0, 2061
	SYMB	IDEN, "Stream", -1, #520, 130, 5
	SYMB	LTIM, "Stream", -1, 0, 69
; rtxcobj.c  958	
; rtxcobj.c  959	/* VAR */
; rtxcobj.c  960	 TStream *Stream;
; rtxcobj.c  961	
; rtxcobj.c  962	/* BEGIN */
; rtxcobj.c  963	 if(TStreamMap==0)
	SYMB	LINE, 963
	MOV.B	ES,#SEG( _TStreamMap )
	MOV.W	R0,#SOF( _TStreamMap )
	MOV.B	R0L,[R0]
	BNE	_182
; rtxcobj.c  964	 {
; rtxcobj.c  965	  TStreamMap=KS_create_part(&TStreamPartition,
; rtxcobj.c  966	                               sizeof(struct TStream),DNQUEUES);
	SYMB	LINE, 966
	MOV.W	R1,#SEG( _TStreamPartition )
	MOV.W	R0,#SOF( _TStreamPartition )
	MOV.W	R2,#01CH
	MOV.W	R3,#08H
	CALL	_KS_create_part
	MOV.B	ES,#SEG( _TStreamMap )
	MOV.W	R1,#SOF( _TStreamMap )
	MOV.B	[R1],R0L
; rtxcobj.c  967	  if(TStreamMap==0)
	SYMB	LINE, 967
	OR.B	R0L,R0L
	BNE	_182
; rtxcobj.c  968	   return(0);
	SYMB	LINE, 968
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_187
; rtxcobj.c  969	 }
	SYMB	LINE, 969
_182:
	SYMB	LTIM, "Width", -8, 130, 2117
	SYMB	LTIM, "Width", -8, 130, 2245
	SYMB	LTIM, "Depth", 26, 0, 2125
	SYMB	LTIM, "Depth", 26, 0, 2253
; rtxcobj.c  970	 Stream=KS_alloc(TStreamMap);
	SYMB	LINE, 970
	MOV.B	ES,#SEG( _TStreamMap )
	MOV.W	R0,#SOF( _TStreamMap )
	MOV.B	R0L,[R0]
	CALL	_KS_alloc
	SYMB	LTIM, "Stream", 3, 0, 205
; rtxcobj.c  971	 if(Stream==0)
	SYMB	LINE, 971
	MOV.W	R3,R1
	MOV.W	R2,R0
	OR.W	R1,R0
	SYMB	LTIM, "Stream", 3, 0, 77
	SYMB	LTIM, "Stream", 11, 0, 205
	BNE	_183
; rtxcobj.c  972	 {
; rtxcobj.c  973	//  LogEvent(EventNoMoreStreams,0);
; rtxcobj.c  974	  return(0);
	SYMB	LINE, 974
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_187
; rtxcobj.c  975	 }
	SYMB	LINE, 975
_183:
	SYMB	LTIM, "Width", -8, 130, 2117
	SYMB	LTIM, "Width", -8, 130, 2245
	SYMB	LTIM, "Depth", 26, 0, 2125
	SYMB	LTIM, "Depth", 26, 0, 2253
	SYMB	LTIM, "Stream", 11, 0, 77
	SYMB	LTIM, "Stream", 11, 0, 205
; rtxcobj.c  976	 Stream->TStream=TStream_TStream;
	SYMB	LINE, 976
	MOV.W	R1,R3
	MOV.W	R0,R2
	ADD.W	R0,#02H
	MOV.B	ES,R1L
	MOV.W	[R0],#SOF( _TStream_TStream )
	MOV.W	[R0+2],#SEG( _TStream_TStream )
; rtxcobj.c  977	 Stream->_TStream=TStream__TStream;
	SYMB	LINE, 977
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#06H
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TStream__TStream )
	MOV.W	[R4+2],#SEG( _TStream__TStream )
; rtxcobj.c  978	 Stream->Put=TStream_Put;
	SYMB	LINE, 978
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#0EH
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TStream_Put )
	MOV.W	[R4+2],#SEG( _TStream_Put )
; rtxcobj.c  979	 Stream->Get=TStream_Get;
	SYMB	LINE, 979
	MOV.W	R5,R3
	MOV.W	R4,R2
	ADD.W	R4,#0AH
	MOV.B	ES,R5L
	MOV.W	[R4],#SOF( _TStream_Get )
	MOV.W	[R4+2],#SEG( _TStream_Get )
; rtxcobj.c  980	 Stream->TStream(Stream,Width,Depth);
	SYMB	LINE, 980
	MOV.B	ES,R1L
	MOV.W	R4,[R0]
	MOV.W	R5,[R0+2]
	MOV.W	[R7+2],R3
	MOV.W	[R7],R2
	MOV.W	R1,R3
	MOV.W	R0,R2
	SYMB	LTIM, "Stream", 11, 0, 77
	SYMB	LTIM, "Stream", -12, 130, 197
	SYMB	LTIM, "Stream", -12, 130, 69
	SYMB	LTIM, "Stream", 3, 0, 205
	MOV.W	R2,[R7+4]
	MOV.W	R3,R6
	FCALL	__ICALL
	SYMB	LTIM, "Width", -8, 130, 2117
	SYMB	LTIM, "Width", 10, 0, 2253
	SYMB	LTIM, "Width", 10, 0, 2125
	SYMB	LTIM, "Depth", 26, 0, 2125
	SYMB	LTIM, "Depth", 14, 0, 2253
	SYMB	LTIM, "Depth", 14, 0, 2125
	SYMB	LTIM, "Stream", 3, 0, 77
	SYMB	LTIM, "Stream", -12, 130, 197
; rtxcobj.c  981	 if(Stream->ID>(NQUEUES+DNQUEUES+1))
	SYMB	LINE, 981
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	MOV.B	ES,R1L
	CMP.B	[R0+18],#09H
	BL	_184
; rtxcobj.c  982	 {
; rtxcobj.c  983	  KS_free(TStreamMap,Stream);
	SYMB	LINE, 983
	MOV.B	ES,#SEG( _TStreamMap )
	MOV.W	R0,#SOF( _TStreamMap )
	MOV.B	R0L,[R0]
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	CALL	_KS_free
	SYMB	LTIM, "Stream", -12, 130, 69
	SYMB	LTIM, "Stream", 11, 0, 205
	SYMB	LTIM, "Stream", 11, 0, 77
; rtxcobj.c  984	  return(0);
	SYMB	LINE, 984
	MOV.W	R1,#00H
	MOV.W	R0,#00H
	BR	_187
; rtxcobj.c  985	 }
	SYMB	LINE, 985
_184:
	SYMB	LTIM, "Stream", -12, 130, 197
; rtxcobj.c  986	 return(Stream);
	SYMB	LINE, 986
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	SYMB	LTIM, "Stream", -12, 130, 69
	SYMB	LTIM, "Stream", 3, 0, 205
; rtxcobj.c  987	}
	SYMB	LINE, 987
_187:
	ADDS.W	R7,#06H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "Stream", 3, 0, 77
	SYMB	EFUN
; rtxcobj.c  988	
; rtxcobj.c  989	
; rtxcobj.c  990	void deleteTStream(TStream* Stream)
; rtxcobj.c  991	{
	ALIGN	1
	SYMB	LINE, 991
	PUBLIC	_deleteTStream
_deleteTStream:
	SYMB	TYPE, 522, 'X', 12, #1, 30, 1, #520
	SYMB	GFUN, "deleteTStream", _deleteTStream, #522, 0, 0, 48
	SYMB	ALAB, _deleteTStream, #522
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	ADDS.W	R7,#0CH
	SYMB	SOFF, 8
	SYMB	LTIM, "Stream", 3, 0, 2253
	SYMB	IDEN, "Stream", 3, #520, 0, 2061
; rtxcobj.c  992	 Stream->_TStream(Stream);
	SYMB	LINE, 992
	MOV.B	ES,R1L
	MOV.W	R4,[R0+6]
	MOV.W	R5,[R0+8]
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	SYMB	LTIM, "Stream", 3, 0, 2125
	SYMB	LTIM, "Stream", -8, 130, 2245
	SYMB	LTIM, "Stream", -8, 130, 2117
	SYMB	LTIM, "Stream", 3, 0, 2253
	FCALL	__ICALL
	SYMB	LTIM, "Stream", 3, 0, 2125
	SYMB	LTIM, "Stream", -8, 130, 2245
; rtxcobj.c  993	 KS_free(TStreamMap,Stream);
	SYMB	LINE, 993
	MOV.B	ES,#SEG( _TStreamMap )
	MOV.W	R0,#SOF( _TStreamMap )
	MOV.B	R0L,[R0]
	MOV.W	R3,[R7+2]
	MOV.W	R2,[R7]
	CALL	_KS_free
	SYMB	LTIM, "Stream", -8, 130, 2117
	SYMB	LTIM, "Stream", 11, 0, 2253
	SYMB	LTIM, "Stream", 11, 0, 2125
; rtxcobj.c  994	}
	SYMB	LINE, 994
	ADDS.W	R7,#04H
	SYMB	SOFF, 4
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; rtxcobj.c  995	
; rtxcobj.c  996	
	SYMB	ENDF

	SYMB	TYPE, 523, 'X', 12, #1, 30, 1, #264
	SYMB	ALAB, _KS_resume, #523
	EXTRN	HCODE(_KS_resume)
	SYMB	TYPE, 524, 'X', 12, #1, 30, 1, #291
	SYMB	ALAB, _KS_pend, #524
	EXTRN	HCODE(_KS_pend)
	SYMB	TYPE, 525, 'X', 12, #297, 30, 1, #451
	SYMB	ALAB, _KS_inqtimer, #525
	EXTRN	HCODE(_KS_inqtimer)
	SYMB	TYPE, 526, 'X', 12, #451, 30, 0
	SYMB	ALAB, _KS_alloc_timer, #526
	EXTRN	HCODE(_KS_alloc_timer)
	SYMB	TYPE, 527, 'X', 12, #303, 30, 2, #291, #297
	SYMB	ALAB, _KS_waitt, #527
	EXTRN	HCODE(_KS_waitt)
	SYMB	TYPE, 528, 'X', 12, #264, 30, 1, #309
	SYMB	ALAB, _KS_inqres, #528
	EXTRN	HCODE(_KS_inqres)
	SYMB	TYPE, 529, 'X', 12, #289, 30, 1, #261
	SYMB	ALAB, _malloc, #529
	EXTRN	HCODE(_malloc)
	SYMB	TYPE, 530, 'X', 12, #1, 30, 2, #306, #289
	SYMB	ALAB, _KS_dequeuew, #530
	EXTRN	HCODE(_KS_dequeuew)
	SYMB	TYPE, 531, 'X', 12, #1, 30, 2, #292, #289
	SYMB	ALAB, _KS_free, #531
	EXTRN	HCODE(_KS_free)
	SYMB	TYPE, 532, 'X', 12, #303, 30, 1, #291
	SYMB	ALAB, _KS_wait, #532
	EXTRN	HCODE(_KS_wait)
	SYMB	TYPE, 533, 'X', 12, #303, 30, 5, #306, #261, #16, #289, #16
	SYMB	ALAB, _KS_defqueue, #533
	EXTRN	HCODE(_KS_defqueue)
	SYMB	TYPE, 534, 'X', 12, #264, 30, 0
	SYMB	ALAB, _KS_alloc_task, #534
	EXTRN	HCODE(_KS_alloc_task)
	SYMB	TYPE, 535, 'X', 12, #1, 30, 1, #264
	SYMB	ALAB, _KS_suspend, #535
	EXTRN	HCODE(_KS_suspend)
	SYMB	TYPE, 537, 'n', #291, 130
	SYMB	TYPE, 538, 'P', #537
	SYMB	TYPE, 536, 'X', 12, #291, 30, 1, #538
	SYMB	ALAB, _KS_waitm, #536
	EXTRN	HCODE(_KS_waitm)
	SYMB	TYPE, 539, 'X', 12, #1, 30, 1, #451
	SYMB	ALAB, _KS_free_timer, #539
	EXTRN	HCODE(_KS_free_timer)
	SYMB	TYPE, 540, 'X', 12, #1, 30, 1, #289
	SYMB	ALAB, _free, #540
	EXTRN	HCODE(_free)
	SYMB	TYPE, 541, 'X', 12, #1, 30, 1, #264
	SYMB	ALAB, _KS_terminate, #541
	EXTRN	HCODE(_KS_terminate)
	SYMB	TYPE, 542, 'X', 12, #1, 30, 2, #264, #266
	SYMB	ALAB, _KS_defpriority, #542
	EXTRN	HCODE(_KS_defpriority)
	SYMB	TYPE, 543, 'X', 12, #289, 30, 1, #292
	SYMB	ALAB, _KS_alloc, #543
	EXTRN	HCODE(_KS_alloc)
	SYMB	TYPE, 544, 'Z', #420, 31
	SYMB	IDEN, "TThreadPartition", _TThreadPartition, #544, 130, 0
	SYMB	ALAB, _TThreadPartition, #544
RTXCOBJ_CLR_FA	SEGMENT	HDATA INSEGMENT CLEAR
	RSEG	RTXCOBJ_CLR_FA
	PUBLIC	_TThreadPartition
	ALIGN	1
_TThreadPartition:	DS	1152
	SYMB	TYPE, 546, 'Z', #456, 31
	SYMB	IDEN, "TTimerPartition", _TTimerPartition, #546, 130, 4
	ALIGN	1
_TTimerPartition:	DS	1024
	SYMB	TYPE, 548, 'X', 12, #303, 30, 1, #309
	SYMB	ALAB, _KS_unlock, #548
	EXTRN	HCODE(_KS_unlock)
	SYMB	TYPE, 549, 'X', 12, #451, 30, 4, #451, #297, #297, #291
	SYMB	ALAB, _KS_start_timer, #549
	EXTRN	HCODE(_KS_start_timer)
	SYMB	TYPE, 551, 'X', 12, #1, 30, 0
	SYMB	TYPE, 552, 'n', #551, 129
	SYMB	TYPE, 553, 'P', #552
	SYMB	TYPE, 550, 'X', 12, #303, 30, 5, #264, #266, #287, #261, #553
	SYMB	ALAB, _KS_deftask, #550
	EXTRN	HCODE(_KS_deftask)
	SYMB	TYPE, 554, 'X', 12, #303, 30, 1, #451
	SYMB	ALAB, _KS_stop_timer, #554
	EXTRN	HCODE(_KS_stop_timer)
	SYMB	TYPE, 555, 'Z', #462, 4
	SYMB	IDEN, "TEventListPartition", _TEventListPartition, #555, 130, 0
	SYMB	ALAB, _TEventListPartition, #555
	PUBLIC	_TEventListPartition
	ALIGN	1
_TEventListPartition:	DS	530
	EXTRN	HCODE(__ICALL)
	SYMB	TYPE, 557, 'X', 12, #266, 30, 1, #264
	SYMB	ALAB, _KS_inqpriority, #557
	EXTRN	HCODE(_KS_inqpriority)
	SYMB	IDEN, "HeapAlloc", _HeapAlloc, #6, 130, 0
	SYMB	ALAB, _HeapAlloc, #6
	PUBLIC	_HeapAlloc
	ALIGN	1
_HeapAlloc:	DS	4
	SYMB	TYPE, 558, 'X', 12, #303, 30, 1, #291
	SYMB	ALAB, _KS_signal, #558
	EXTRN	HCODE(_KS_signal)
	SYMB	TYPE, 559, 'X', 12, #1, 30, 2, #264, #297
	SYMB	ALAB, _KS_delay, #559
	EXTRN	HCODE(_KS_delay)
	EXTRN	IDATA(__lc_bs)
	SYMB	TYPE, 560, 'X', 12, #303, 30, 3, #451, #297, #297
	SYMB	ALAB, _KS_restart_timer, #560
	EXTRN	HCODE(_KS_restart_timer)
	SYMB	TYPE, 561, 'Z', #353, 127
	SYMB	IDEN, "TResourcePartition", _TResourcePartition, #561, 130, 0
	SYMB	ALAB, _TResourcePartition, #561
	PUBLIC	_TResourcePartition
	ALIGN	1
_TResourcePartition:	DS	3584
	SYMB	TYPE, 563, 'Z', #319, 127
	SYMB	IDEN, "TEventPartition", _TEventPartition, #563, 130, 0
	SYMB	ALAB, _TEventPartition, #563
	PUBLIC	_TEventPartition
	ALIGN	1
_TEventPartition:	DS	4096
	EXTRN	HCODE(__SDIVL)
	SYMB	TYPE, 566, 'X', 12, #16, 30, 1, #289
	SYMB	TYPE, 567, 'n', #566, 129
	SYMB	TYPE, 568, 'P', #567
	SYMB	TYPE, 565, 'X', 12, #16, 30, 2, #568, #289
	SYMB	ALAB, _KS_user, #565
	EXTRN	HCODE(_KS_user)
	SYMB	TYPE, 569, 'X', 12, #292, 30, 3, #289, #261, #261
	SYMB	ALAB, _KS_create_part, #569
	EXTRN	HCODE(_KS_create_part)
	SYMB	TYPE, 570, 'Z', #500, 7
	SYMB	IDEN, "TStreamPartition", _TStreamPartition, #570, 130, 0
	SYMB	ALAB, _TStreamPartition, #570
	PUBLIC	_TStreamPartition
	ALIGN	1
_TStreamPartition:	DS	224
	SYMB	TYPE, 572, 'Z', #2, 511
	SYMB	TYPE, 574, 'Z', #572, 31
	SYMB	IDEN, "stk", _stk, #574, 130, 0
	SYMB	ALAB, _stk, #574
	PUBLIC	_stk
_stk:	DS	16384
	SYMB	TYPE, 576, 'X', 12, #303, 30, 1, #309
	SYMB	ALAB, _KS_lockw, #576
	EXTRN	HCODE(_KS_lockw)
	SYMB	TYPE, 577, 'X', 12, #1, 30, 2, #306, #289
	SYMB	ALAB, _KS_enqueuew, #577
	EXTRN	HCODE(_KS_enqueuew)
	SYMB	TYPE, 578, 'X', 12, #304, 30, 1, #291
	SYMB	ALAB, _KS_inqsema, #578
	EXTRN	HCODE(_KS_inqsema)
	SYMB	TYPE, 579, 'X', 12, #1, 30, 1, #264
	SYMB	ALAB, _KS_execute, #579
	EXTRN	HCODE(_KS_execute)
	EXTRN	DATA(__lc_ub_xvwbuffer)
	EXTRN	DATA(__lc_ue_xvwbuffer)
	CALLS	'malloc2', 'malloc'
	CALLS	'new', 'KS_user'
	CALLS	'free2', 'free'
	CALLS	'delete', 'KS_user'
	CALLS	'Sleep', 'KS_delay'
	CALLS	'TEvent_Waitt', 'KS_wait'
	CALLS	'TEvent_Waitt', 'KS_waitt'
	CALLS	'TEvent_Waitt', 'KS_wait'
	CALLS	'TEvent_Signal', 'KS_signal'
	CALLS	'TEvent_Pend', 'KS_pend'
	CALLS	'TEvent_InqSema', 'KS_inqsema'
	CALLS	'newTEvent', 'KS_create_part'
	CALLS	'newTEvent', 'KS_alloc'
	CALLS	'newTEvent', 'KS_free'
	CALLS	'deleteTEvent', 'KS_free'
	CALLS	'TResource_Lock', 'KS_lockw'
	CALLS	'TResource_Unlock', 'KS_unlock'
	CALLS	'TResource_Owner', 'KS_inqres'
	CALLS	'newTResource', 'KS_create_part'
	CALLS	'newTResource', 'KS_alloc'
	CALLS	'newTResource', 'KS_free'
	CALLS	'deleteTResource', 'KS_free'
	CALLS	'TThread_TThread', 'KS_alloc_task'
	CALLS	'TThread_TThread', 'KS_deftask'
	CALLS	'TThread_Execute', 'KS_execute'
	CALLS	'TThread__TThread', 'KS_terminate'
	CALLS	'TThread_Suspend', 'KS_suspend'
	CALLS	'TThread_Suspend', 'KS_delay'
	CALLS	'TThread_Resume', 'KS_resume'
	CALLS	'TThread_GetPriority', 'KS_inqpriority'
	CALLS	'TThread_SetPriority', 'KS_defpriority'
	CALLS	'newTThread', 'KS_create_part'
	CALLS	'newTThread', 'KS_alloc'
	CALLS	'newTThread', 'KS_free'
	CALLS	'deleteTThread', 'KS_free'
	CALLS	'TTimer_TTimer', 'KS_alloc_timer'
	CALLS	'TTimer_TTimer', 'newTEvent'
	CALLS	'TTimer__TTimer', 'deleteTEvent'
	CALLS	'TTimer__TTimer', 'KS_free_timer'
	CALLS	'TTimer_SetPeriod', 'KS_start_timer'
	CALLS	'TTimer_SetPeriod', 'KS_stop_timer'
	CALLS	'TTimer_SetPeriod', 'KS_restart_timer'
	CALLS	'TTimer_Tick', 'KS_start_timer'
	CALLS	'TTimer_Tick', 'KS_restart_timer'
	CALLS	'newTTimer', 'KS_create_part'
	CALLS	'newTTimer', 'KS_alloc'
	CALLS	'newTTimer', 'KS_free'
	CALLS	'deleteTTimer', 'KS_free'
	CALLS	'TEventList_Wait', 'newTTimer'
	CALLS	'TEventList_Wait', 'KS_waitm'
	CALLS	'TEventList_Wait', 'KS_inqtimer'
	CALLS	'TEventList_Wait', 'deleteTTimer'
	CALLS	'newTEventList', 'KS_create_part'
	CALLS	'newTEventList', 'KS_alloc'
	CALLS	'deleteTEventList', 'KS_free'
	CALLS	'TStream_TStream', 'new'
	CALLS	'TStream_TStream', 'KS_defqueue'
	CALLS	'TStream__TStream', 'delete'
	CALLS	'TStream_Get', 'KS_dequeuew'
	CALLS	'TStream_Put', 'KS_enqueuew'
	CALLS	'newTStream', 'KS_create_part'
	CALLS	'newTStream', 'KS_alloc'
	CALLS	'newTStream', 'KS_free'
	CALLS	'deleteTStream', 'KS_free'
	END
