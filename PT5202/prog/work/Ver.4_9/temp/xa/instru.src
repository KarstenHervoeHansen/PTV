; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
; options: -A1 -Cxag3 -e -g -IcF:\PT5202\prog\include
;          -IF:\PT5202\prog\rtxc\xa\include -I. -Ml -O2 -s
$CASE
$NOZPAGE
	NAME	INSTRU
	SYMB	TOOL, "XA C compiler v2.0", 1
	SYMB	TYPE, 256, "bit", 'g', 0, 1
	SYMB	FILE, "instru.c"
; instru.c    1	/****************************************************************************/
; instru.c    2	/* MODULE:                                                                  */
; instru.c    3	/*  instru.c - Instrument control task                                      */
; instru.c    4	/****************************************************************************/
; instru.c    5	/* FUNCTIONS:                                                               */
; instru.c    6	/*                                                                          */
; instru.c    7	/*                                                                          */
; instru.c    8	/* TASKS:                                                                   */
; instru.c    9	    void instru(void);
; instru.c   10	/*                                                                          */
; instru.c   11	/* NOTES:                                                                   */
; instru.c   12	/*  Receives command messages form user control tasks, processes them and   */                               
; instru.c   13	/*  replies according to command.                                           */
; instru.c   14	/*                                                                          */
; instru.c   15	/* EDITOR:                                                                  */
; instru.c   16	/*  Tasking tabs 3 5                                                        */
; instru.c   17	/****************************************************************************/
; instru.c   18	/*
; instru.c   19	 *   PTV software for PT5201    
; instru.c   20	 *   Copyright (c) 
; instru.c   21	 *   ProTeleVision Technologies A/S.
; instru.c   22	 *   ALL RIGHTS RESERVED
; instru.c   23	 */
; instru.c   24	
; instru.c   25	#include <string.h>
	SYMB	FILE, "F:\\PT5202\\prog\\include\\string.h"
	SYMB	TYPE, 257, "size_t", 'T', #18
	SYMB	ENDF
; instru.c   26	#include <stdio.h>
	SYMB	FILE, "F:\\PT5202\\prog\\include\\stdio.h"
	SYMB	FILE, "F:\\PT5202\\prog\\include\\stdarg.h"
	SYMB	ENDF
	SYMB	TYPE, 258, 'n', #2, 130
	SYMB	TYPE, 259, 'P', #258
	SYMB	TYPE, 260, "_iobuf", 'S', 14,\
		 "_ptr", #259, 0,\
		 "_cnt", #16, 4,\
		 "_base", #259, 6,\
		 "_flag", #2, 10,\
		 "_file", #2, 11,\
		 "_bufsiz", #16, 12
	SYMB	TYPE, 261, "FILE", 'T', #260
	SYMB	TYPE, 262, 'n', #1, 130
	SYMB	TYPE, 263, 'P', #262
	SYMB	TYPE, 264, 'Z', #263, 0
	SYMB	TYPE, 266, "va_list", 'T', #264
	SYMB	TYPE, 267, "fpos_t", 'T', #7
	SYMB	ENDF
; instru.c   27	#include <stdlib.h>
	SYMB	FILE, "F:\\PT5202\\prog\\include\\stdlib.h"
	SYMB	FILE, "F:\\PT5202\\prog\\include\\limits.h"
	SYMB	ENDF
	SYMB	TYPE, 268, 'S', 4,\
		 "quot", #16, 0,\
		 "rem", #16, 2
	SYMB	TYPE, 269, "div_t", 'T', #268
	SYMB	TYPE, 270, 'S', 8,\
		 "quot", #6, 0,\
		 "rem", #6, 4
	SYMB	TYPE, 271, "ldiv_t", 'T', #270
	SYMB	TYPE, 272, "wchar_t", 'T', #5
	SYMB	ENDF
; instru.c   28	#include "define.h"
	SYMB	FILE, "define.h"
	SYMB	ENDF
; instru.c   29	#include "eventdef.h"
	SYMB	FILE, "eventdef.h"
	SYMB	ENDF
; instru.c   30	#include "rtxcobj.h"
	SYMB	FILE, "rtxcobj.h"
	SYMB	FILE, "F:\\PT5202\\prog\\rtxc\\xa\\include\\rtxcapi.h"
	SYMB	FILE, "F:\\PT5202\\prog\\rtxc\\xa\\include\\typedef.h"
	SYMB	FILE, "F:\\PT5202\\prog\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 273, "KOBJNUM", 'T', #3
	SYMB	TYPE, 274, "TASK", 'T', #2
	SYMB	ENDF
	SYMB	FILE, "F:\\PT5202\\prog\\rtxc\\xa\\include\\rtxstruc.h"
	SYMB	FILE, "F:\\PT5202\\prog\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 275, "KSNUM", 'T', #3
	SYMB	TYPE, 276, "PRIORITY", 'T', #274
	SYMB	TYPE, 277, "TSTATE", 'T', #5
	SYMB	TYPE, 278, "TSLICE", 'T', #3
	SYMB	TYPE, 280, 'n', #279, 130
	SYMB	TYPE, 281, 'P', #280
	SYMB	TYPE, 283, 'n', #282, 130
	SYMB	TYPE, 284, 'P', #283
	SYMB	TYPE, 285, 'n', #275, 130
	SYMB	TYPE, 286, 'P', #285
	SYMB	TYPE, 287, 'X', 12, #1, 30, 0
	SYMB	TYPE, 288, 'n', #287, 129
	SYMB	TYPE, 289, 'P', #288
	SYMB	TYPE, 290, "frame", 'S', 24,\
		 "es", #3, 0,\
		 "cs", #3, 1,\
		 "ssel", #3, 2,\
		 "ds", #3, 3,\
		 "pksnum", #286, 4,\
		 "R2", #18, 8,\
		 "R3", #18, 10,\
		 "R4", #18, 12,\
		 "R5", #18, 14,\
		 "R6", #18, 16,\
		 "psw", #18, 18,\
		 "pc", #289, 20
	SYMB	TYPE, 291, 'n', #290, 130
	SYMB	TYPE, 292, 'P', #291
	SYMB	TYPE, 293, 'X', 12, #1, 30, 0
	SYMB	TYPE, 294, 'n', #293, 129
	SYMB	TYPE, 295, 'P', #294
	SYMB	TYPE, 279, "tcb", 'S', 36,\
		 "flink", #281, 0,\
		 "blink", #281, 4,\
		 "pclkblk", #284, 8,\
		 "task", #274, 12,\
		 "priority", #276, 13,\
		 "sp", #292, 14,\
		 "status", #277, 18,\
		 "pc_t0", #295, 20,\
		 "stackbase", #259, 24,\
		 "stacksize", #257, 28,\
		 "tslice", #278, 30,\
		 "newslice", #278, 31,\
		 "arg", #263, 32
	SYMB	TYPE, 296, "TCB", 'T', #279
	SYMB	TYPE, 297, "SEMA", 'T', #273
	SYMB	TYPE, 298, "MAP", 'T', #273
	SYMB	TYPE, 300, 'n', #299, 130
	SYMB	TYPE, 301, 'P', #300
	SYMB	TYPE, 299, "rtxcmsg", 'S', 8,\
		 "link", #301, 0,\
		 "task", #274, 4,\
		 "priority", #276, 5,\
		 "sema", #297, 6
	SYMB	TYPE, 302, "RTXCMSG", 'T', #299
	SYMB	TYPE, 303, "TICKS", 'T', #16
	SYMB	TYPE, 304, 'N',\
		 "DELAY_OBJ", 0,\
		 "SEMAPHORE_OBJ", 1,\
		 "PARTITION_OBJ", 2,\
		 "QUEUE_OBJ", 3,\
		 "RESOURCE_OBJ", 4,\
		 "MAILBOX_OBJ", 5,\
		 "TIMER_OBJ", 6
	SYMB	TYPE, 305, "OBJTYPE", 'T', #304
	SYMB	TYPE, 282, "clkblk", 'S', 18,\
		 "flink", #284, 0,\
		 "blink", #284, 4,\
		 "remain", #303, 8,\
		 "recycle", #303, 10,\
		 "task", #274, 12,\
		 "state", #2, 13,\
		 "objtype", #305, 14,\
		 "objid", #273, 16
	SYMB	TYPE, 306, 'N',\
		 "PRIORITY_INVERSION_OFF", 0,\
		 "PRIORITY_INVERSION_ON", 1
	SYMB	TYPE, 307, "RESATTR", 'T', #306
	SYMB	ENDF
	SYMB	TYPE, 308, 'N',\
		 "RC_GOOD", 0,\
		 "RC_WAIT_CONFLICT", 1,\
		 "RC_NO_TIMERS", 2,\
		 "RC_TIMER_INACTIVE", 3,\
		 "RC_TIMER_ILLEGAL", 4,\
		 "RC_TIMEOUT", 5,\
		 "RC_QUEUE_FULL", 6,\
		 "RC_QUEUE_EMPTY", 7,\
		 "RC_ILLEGAL_QUEUE_SIZE", 8,\
		 "RC_BUSY", 9,\
		 "RC_NESTED", 10,\
		 "RC_ILLEGAL_TASK", 11,\
		 "RC_ACTIVE_TASK", 12,\
		 "RC_NO_YIELD", 13,\
		 "RC_MISSED_EVENT", 14
	SYMB	TYPE, 309, "KSRC", 'T', #308
	SYMB	TYPE, 310, "SSTATE", 'T', #274
	SYMB	TYPE, 311, "MBOX", 'T', #273
	SYMB	TYPE, 312, "QUEUE", 'T', #273
	SYMB	TYPE, 313, 'N',\
		 "QNE", 0,\
		 "QNF", 1,\
		 "QF", 2,\
		 "QE", 3
	SYMB	TYPE, 314, "QCOND", 'T', #313
	SYMB	TYPE, 315, "RESOURCE", 'T', #273
	SYMB	TYPE, 316, "CLKBLK", 'T', #282
	SYMB	TYPE, 317, "time_t", 'T', #6
	SYMB	TYPE, 318, "FRAME", 'T', #290
	SYMB	ENDF
	SYMB	FILE, "ctask.h"
	SYMB	ENDF
	SYMB	FILE, "csema.h"
	SYMB	ENDF
	SYMB	FILE, "cres.h"
	SYMB	ENDF
	SYMB	FILE, "cqueue.h"
	SYMB	ENDF
	SYMB	FILE, "cpart.h"
	SYMB	ENDF
	SYMB	FILE, "cmbox.h"
	SYMB	ENDF
	SYMB	FILE, "cclock.h"
	SYMB	ENDF
	SYMB	TYPE, 320, 'n', #319, 130
	SYMB	TYPE, 321, 'P', #320
	SYMB	TYPE, 319, 'X', 12, #1, 30, 2, #321, #259
	SYMB	TYPE, 323, 'n', #322, 129
	SYMB	TYPE, 324, 'P', #323
	SYMB	TYPE, 325, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 326, 'n', #325, 129
	SYMB	TYPE, 327, 'P', #326
	SYMB	TYPE, 328, 'n', #6, 130
	SYMB	TYPE, 329, 'P', #328
	SYMB	TYPE, 328, 'X', 12, #16, 30, 2, #321, #329
	SYMB	TYPE, 331, 'n', #330, 129
	SYMB	TYPE, 332, 'P', #331
	SYMB	TYPE, 333, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 334, 'n', #333, 129
	SYMB	TYPE, 335, 'P', #334
	SYMB	TYPE, 336, 'X', 12, #1, 30, 1, #321
	SYMB	TYPE, 337, 'n', #336, 129
	SYMB	TYPE, 338, 'P', #337
	SYMB	TYPE, 339, 'X', 12, #16, 30, 1, #321
	SYMB	TYPE, 340, 'n', #339, 129
	SYMB	TYPE, 341, 'P', #340
	SYMB	TYPE, 319, "TEvent", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TEvent", #324, 2,\
		 "_TEvent", #327, 6,\
		 "Wait", #332, 10,\
		 "Set", #335, 14,\
		 "Clear", #338, 18,\
		 "IsSet", #341, 22,\
		 "ID", #297, 26,\
		 "Name", #259, 28
	SYMB	TYPE, 342, "TEvent", 'T', #319
	SYMB	TYPE, 344, 'n', #343, 130
	SYMB	TYPE, 345, 'P', #344
	SYMB	TYPE, 343, 'X', 12, #1, 30, 1, #345
	SYMB	TYPE, 347, 'n', #346, 129
	SYMB	TYPE, 348, 'P', #347
	SYMB	TYPE, 349, 'X', 12, #1, 30, 1, #345
	SYMB	TYPE, 350, 'n', #349, 129
	SYMB	TYPE, 351, 'P', #350
	SYMB	TYPE, 352, 'n', #342, 130
	SYMB	TYPE, 353, 'P', #352
	SYMB	TYPE, 352, 'X', 12, #16, 30, 2, #345, #353
	SYMB	TYPE, 355, 'n', #354, 129
	SYMB	TYPE, 356, 'P', #355
	SYMB	TYPE, 357, 'X', 12, #1, 30, 2, #345, #353
	SYMB	TYPE, 358, 'n', #357, 129
	SYMB	TYPE, 359, 'P', #358
	SYMB	TYPE, 360, 'X', 12, #16, 30, 2, #345, #353
	SYMB	TYPE, 361, 'n', #360, 129
	SYMB	TYPE, 362, 'P', #361
	SYMB	TYPE, 363, 'X', 12, #353, 30, 2, #345, #329
	SYMB	TYPE, 364, 'n', #363, 129
	SYMB	TYPE, 365, 'P', #364
	SYMB	TYPE, 366, 'Z', #2, 95
	SYMB	TYPE, 343, "TEventList", 'S', 122,\
		 "ObjectID", #16, 0,\
		 "TEventList", #348, 2,\
		 "_TEventList", #351, 6,\
		 "Append", #356, 10,\
		 "Clear", #359, 14,\
		 "InList", #362, 18,\
		 "Wait", #365, 22,\
		 "Align", #366, 26
	SYMB	TYPE, 368, "TEventList", 'T', #343
	SYMB	TYPE, 370, 'n', #369, 130
	SYMB	TYPE, 371, 'P', #370
	SYMB	TYPE, 369, 'X', 12, #1, 30, 2, #371, #259
	SYMB	TYPE, 373, 'n', #372, 129
	SYMB	TYPE, 374, 'P', #373
	SYMB	TYPE, 375, 'X', 12, #1, 30, 1, #371
	SYMB	TYPE, 376, 'n', #375, 129
	SYMB	TYPE, 377, 'P', #376
	SYMB	TYPE, 378, 'X', 12, #1, 30, 1, #371
	SYMB	TYPE, 379, 'n', #378, 129
	SYMB	TYPE, 380, 'P', #379
	SYMB	TYPE, 381, 'X', 12, #1, 30, 1, #371
	SYMB	TYPE, 382, 'n', #381, 129
	SYMB	TYPE, 383, 'P', #382
	SYMB	TYPE, 384, 'X', 12, #16, 30, 1, #371
	SYMB	TYPE, 385, 'n', #384, 129
	SYMB	TYPE, 386, 'P', #385
	SYMB	TYPE, 369, "TResource", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TResource", #374, 2,\
		 "_TResource", #377, 6,\
		 "Lock", #380, 10,\
		 "Unlock", #383, 14,\
		 "Owner", #386, 18,\
		 "ID", #315, 22,\
		 "Name", #259, 24
	SYMB	TYPE, 387, "TResource", 'T', #369
	SYMB	TYPE, 388, 'X', 12, #1, 30, 0
	SYMB	TYPE, 389, 'n', #388, 129
	SYMB	TYPE, 390, 'P', #389
	SYMB	TYPE, 392, 'n', #391, 130
	SYMB	TYPE, 393, 'P', #392
	SYMB	TYPE, 388, 'X', 12, #1, 30, 3, #393, #16, #390
	SYMB	TYPE, 395, 'n', #394, 129
	SYMB	TYPE, 396, 'P', #395
	SYMB	TYPE, 397, 'X', 12, #1, 30, 1, #393
	SYMB	TYPE, 398, 'n', #397, 129
	SYMB	TYPE, 399, 'P', #398
	SYMB	TYPE, 400, 'X', 12, #1, 30, 1, #393
	SYMB	TYPE, 401, 'n', #400, 129
	SYMB	TYPE, 402, 'P', #401
	SYMB	TYPE, 403, 'X', 12, #1, 30, 2, #393, #16
	SYMB	TYPE, 404, 'n', #403, 129
	SYMB	TYPE, 405, 'P', #404
	SYMB	TYPE, 406, 'X', 12, #1, 30, 1, #393
	SYMB	TYPE, 407, 'n', #406, 129
	SYMB	TYPE, 408, 'P', #407
	SYMB	TYPE, 409, 'X', 12, #16, 30, 1, #393
	SYMB	TYPE, 410, 'n', #409, 129
	SYMB	TYPE, 411, 'P', #410
	SYMB	TYPE, 412, 'X', 12, #1, 30, 2, #393, #16
	SYMB	TYPE, 413, 'n', #412, 129
	SYMB	TYPE, 414, 'P', #413
	SYMB	TYPE, 391, "TThread", 'S', 36,\
		 "ObjectID", #16, 0,\
		 "TThread", #396, 2,\
		 "Execute", #399, 6,\
		 "Terminate", #402, 10,\
		 "Suspend", #405, 14,\
		 "Resume", #408, 18,\
		 "GetPriority", #411, 22,\
		 "SetPriority", #414, 26,\
		 "ID", #274, 30,\
		 "Status", #2, 31,\
		 "Stack", #259, 32
	SYMB	TYPE, 415, "TThread", 'T', #391
	SYMB	TYPE, 417, 'n', #416, 130
	SYMB	TYPE, 418, 'P', #417
	SYMB	TYPE, 416, 'X', 12, #1, 30, 1, #418
	SYMB	TYPE, 420, 'n', #419, 129
	SYMB	TYPE, 421, 'P', #420
	SYMB	TYPE, 422, 'X', 12, #1, 30, 1, #418
	SYMB	TYPE, 423, 'n', #422, 129
	SYMB	TYPE, 424, 'P', #423
	SYMB	TYPE, 425, 'X', 12, #1, 30, 2, #418, #16
	SYMB	TYPE, 426, 'n', #425, 129
	SYMB	TYPE, 427, 'P', #426
	SYMB	TYPE, 428, 'X', 12, #16, 30, 1, #418
	SYMB	TYPE, 429, 'n', #428, 129
	SYMB	TYPE, 430, 'P', #429
	SYMB	TYPE, 431, 'X', 12, #1, 30, 2, #418, #16
	SYMB	TYPE, 432, 'n', #431, 129
	SYMB	TYPE, 433, 'P', #432
	SYMB	TYPE, 434, 'n', #316, 130
	SYMB	TYPE, 435, 'P', #434
	SYMB	TYPE, 416, "TTimer", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TTimer", #421, 2,\
		 "_TTimer", #424, 6,\
		 "SetPeriod", #427, 10,\
		 "GetPeriod", #430, 14,\
		 "Tick", #433, 18,\
		 "TimeOut", #353, 22,\
		 "Period", #4, 26,\
		 "Handle", #435, 28
	SYMB	TYPE, 436, "TTimer", 'T', #416
	SYMB	TYPE, 438, 'n', #437, 130
	SYMB	TYPE, 439, 'P', #438
	SYMB	TYPE, 437, 'X', 12, #1, 30, 3, #439, #16, #16
	SYMB	TYPE, 441, 'n', #440, 129
	SYMB	TYPE, 442, 'P', #441
	SYMB	TYPE, 443, 'X', 12, #1, 30, 1, #439
	SYMB	TYPE, 444, 'n', #443, 129
	SYMB	TYPE, 445, 'P', #444
	SYMB	TYPE, 446, 'X', 12, #259, 30, 2, #439, #263
	SYMB	TYPE, 447, 'n', #446, 129
	SYMB	TYPE, 448, 'P', #447
	SYMB	TYPE, 449, 'X', 12, #1, 30, 2, #439, #263
	SYMB	TYPE, 450, 'n', #449, 129
	SYMB	TYPE, 451, 'P', #450
	SYMB	TYPE, 437, "TStream", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TStream", #442, 2,\
		 "_TStream", #445, 6,\
		 "Get", #448, 10,\
		 "Put", #451, 14,\
		 "ID", #312, 18,\
		 "Width", #16, 20,\
		 "Depth", #16, 22,\
		 "Handle", #259, 24
	SYMB	TYPE, 452, "TStream", 'T', #437
	SYMB	ENDF
; instru.c   31	#include "rs232.h"
	SYMB	FILE, "rs232.h"
	SYMB	FILE, "define.h"
	SYMB	ENDF
	SYMB	FILE, "rtxcobj.h"
	SYMB	ENDF
	SYMB	ENDF
; instru.c   32	#include "sio0drv.h"
	SYMB	FILE, "sio0drv.h"
	SYMB	FILE, "define.h"
	SYMB	ENDF
	SYMB	FILE, "rtxcobj.h"
	SYMB	ENDF
	SYMB	ENDF
; instru.c   33	#include "tim0drv.h"
	SYMB	FILE, "tim0drv.h"
	SYMB	FILE, "define.h"
	SYMB	ENDF
	SYMB	ENDF
; instru.c   34	#include "i2c_drv.h"
	SYMB	FILE, "i2c_drv.h"
	SYMB	ENDF
; instru.c   35	#include "tvp6kdrv.h"
	SYMB	FILE, "tvp6kdrv.h"
	SYMB	ENDF
; instru.c   36	#include "nv_drv.h"
	SYMB	FILE, "nv_drv.h"
	SYMB	TYPE, 453, "NvPointer", 'T', #18
	SYMB	ENDF
; instru.c   37	#include "led_hw.h"
	SYMB	FILE, "led_hw.h"
	SYMB	TYPE, 454, 'N',\
		 "true", -1,\
		 "false", 0
	SYMB	TYPE, 455, "bool", 'T', #454
	SYMB	ENDF
; instru.c   38	#include "genlock.h"
	SYMB	FILE, "genlock.h"
	SYMB	TYPE, 456, 'S', 6,\
		 "System", #3, 0,\
		 "Delay", #7, 2
	SYMB	TYPE, 457, "GenlockObject", 'T', #456
	SYMB	ENDF
; instru.c   39	#include "bb.h"
	SYMB	FILE, "bb.h"
	SYMB	TYPE, 458, 'S', 8,\
		 "System", #3, 0,\
		 "Delay", #7, 2,\
		 "ScHPhase", #16, 6
	SYMB	TYPE, 459, "BBObject", 'T', #458
	SYMB	ENDF
; instru.c   40	#include "cbar.h"
	SYMB	FILE, "cbar.h"
	SYMB	TYPE, 460, 'S', 12,\
		 "System", #3, 0,\
		 "Pattern", #18, 2,\
		 "Delay", #7, 4,\
		 "ScHPhase", #16, 8,\
		 "EmbAudioSignal", #3, 10
	SYMB	TYPE, 461, "CBObject", 'T', #460
	SYMB	ENDF
; instru.c   41	#include "audio.h"
	SYMB	FILE, "audio.h"
	SYMB	TYPE, 462, 'S', 14,\
		 "System", #16, 0,\
		 "Signal", #16, 2,\
		 "Level", #16, 4,\
		 "Timing", #10, 6,\
		 "Frequency", #16, 10,\
		 "Click", #16, 12
	SYMB	TYPE, 463, "AudioObject", 'T', #462
	SYMB	ENDF
; instru.c   42	#include "keyscan.h"
	SYMB	FILE, "keyscan.h"
	SYMB	ENDF
; instru.c   43	#include "front.h"
	SYMB	FILE, "front.h"
	SYMB	ENDF
; instru.c   44	#include "unitprg.h"
	SYMB	FILE, "unitprg.h"
	SYMB	ENDF
; instru.c   45	
; instru.c   46	#include "instru.h"
	SYMB	FILE, "instru.h"
	SYMB	FILE, "nv_drv.h"
	SYMB	ENDF
	SYMB	FILE, "genlock.h"
	SYMB	ENDF
	SYMB	FILE, "bb.h"
	SYMB	ENDF
	SYMB	FILE, "cbar.h"
	SYMB	ENDF
	SYMB	FILE, "audio.h"
	SYMB	ENDF
	SYMB	TYPE, 464, 'S', 34,\
		 "Date", #7, 0,\
		 "DACFactDate", #7, 4,\
		 "DACUserDate", #7, 8,\
		 "DACFactValue", #18, 12,\
		 "DACUserValue", #18, 14,\
		 "HPHZeroG", #7, 16,\
		 "PhaseG", #7, 20,\
		 "HPHZeroM", #7, 24,\
		 "PhaseM", #7, 28,\
		 "DACOffset", #16, 32
	SYMB	TYPE, 465, "GenlockCalibrationObject", 'T', #464
	SYMB	TYPE, 466, 'S', 20,\
		 "Date", #7, 0,\
		 "PhaseG", #7, 4,\
		 "ScHPhaseG", #18, 8,\
		 "PhaseM", #7, 10,\
		 "ScHPhaseM", #18, 14,\
		 "DACGain", #3, 16,\
		 "DACOffset", #3, 17,\
		 "DACLevel", #3, 18
	SYMB	TYPE, 467, "BBCalibrationObject", 'T', #466
	SYMB	TYPE, 468, 'S', 20,\
		 "Date", #7, 0,\
		 "PhaseG", #7, 4,\
		 "ScHPhaseG", #3, 8,\
		 "PhaseM", #7, 10,\
		 "ScHPhaseM", #3, 14,\
		 "GainG", #3, 15,\
		 "ChromaGainG", #3, 16,\
		 "GainM", #3, 17,\
		 "ChromaGainM", #3, 18
	SYMB	TYPE, 469, "CBCalibrationObject", 'T', #468
	SYMB	TYPE, 470, 'S', 6,\
		 "Date", #7, 0,\
		 "AnalogLeftChannel", #3, 4,\
		 "AnalogRightChannel", #3, 5
	SYMB	TYPE, 471, "AudioCalibrationObject", 'T', #470
	SYMB	TYPE, 472, 'Z', #459, 2
	SYMB	TYPE, 474, 'Z', #463, 1
	SYMB	TYPE, 476, 'S', 74,\
		 "ActivePreset", #16, 0,\
		 "GenlockSetup", #457, 2,\
		 "BBSetup", #472, 8,\
		 "CBSetup", #461, 32,\
		 "AudioOutput", #16, 44,\
		 "AudioSetup", #474, 46
	SYMB	TYPE, 477, "SettingsObject", 'T', #476
	SYMB	TYPE, 478, 'Z', #2, 32
	SYMB	TYPE, 480, 'Z', #2, 8
	SYMB	TYPE, 482, 'Z', #2, 12
	SYMB	TYPE, 484, 'Z', #467, 2
	SYMB	TYPE, 486, 'S', 226,\
		 "Company", #478, 0,\
		 "Type", #478, 33,\
		 "KUNumber", #480, 66,\
		 "SWRevision", #480, 75,\
		 "NC12", #482, 84,\
		 "ResetSystem", #3, 97,\
		 "ProdDate", #7, 98,\
		 "UpdateDate", #7, 102,\
		 "GenlockCalibration", #465, 106,\
		 "BBCalibration", #484, 140,\
		 "CBCalibration", #469, 200,\
		 "AudioCalibration", #471, 220
	SYMB	TYPE, 487, "CalibrationObject", 'T', #486
	SYMB	ENDF
; instru.c   47	#include "interp.h"
	SYMB	FILE, "interp.h"
	SYMB	FILE, "rtxcobj.h"
	SYMB	ENDF
	SYMB	ENDF
; instru.c   48	
; instru.c   49	TTimer*  InstruTimer;
; instru.c   50	TThread* InstrumentControl;
; instru.c   51	TThread* InterpreterThread;
; instru.c   52	TThread* KeyScanThread;
; instru.c   53	TThread* FrontThread;
; instru.c   54	
; instru.c   55	NvPointer SettingsPtr;
; instru.c   56	NvPointer PresetPtr[NoOfPresets];
; instru.c   57	NvPointer CalibrationPtr;
; instru.c   58	
; instru.c   59	SettingsObject Settings;
; instru.c   60	CalibrationObject Calibration;
; instru.c   61	
; instru.c   62	
; instru.c   63	UC GenlockStatus;
; instru.c   64	
; instru.c   65	/**/
; instru.c   66	extern UI LEDMirror;
; instru.c   67	extern UI TestLEDMirror;
; instru.c   68	
; instru.c   69	
; instru.c   70	/**************************************************************************/
; instru.c   71	/* Instrument_Control_Task                                   INSTRU.C     */
; instru.c   72	/* Author:              Kim Engedahl, DEV, 000321                         */
; instru.c   73	/* Revised:             001219, KEn, DEV                                  */
; instru.c   74	/* Function:                                                              */
; instru.c   75	/**************************************************************************/
; instru.c   76	void Instrument_Control_Task( void)
; instru.c   77	  {
INSTRU_PR	SEGMENT	HCODE
	RSEG	INSTRU_PR
	ALIGN	1
	SYMB	LINE, 77
	SYMB	TYPE, 488, 'Z', #2, 16
	SYMB	TYPE, 490, 'S', 110,\
		 "Name", #488, 0,\
		 "Author", #488, 17,\
		 "Date", #7, 34,\
		 "GenlockSetup", #457, 38,\
		 "BBSetup", #472, 44,\
		 "CBSetup", #461, 68,\
		 "AudioOutput", #16, 80,\
		 "AudioSetup", #474, 82
	SYMB	TYPE, 491, "PresetObject", 'T', #490
	PUBLIC	_Instrument_Control_Task
_Instrument_Control_Task:
	SYMB	TYPE, 492, 'X', 12, #1, 30, 0
	SYMB	GFUN, "Instrument_Control_Task", _Instrument_Control_Task, #492, 0, 0, 112
	SYMB	ALAB, _Instrument_Control_Task, #492
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#0AH
	SYMB	SOFF, 16
	SYMB	IDEN, "Test1LEDFlag", -1, #455, 130, 5
	SYMB	LTIM, "Test1LEDFlag", -1, 0, 69
	SYMB	TYPE, 493, 'n', #453, 130
	SYMB	TYPE, 494, 'P', #493
	SYMB	IDEN, "__#STR0001S", -1, #494, 130, 5
	SYMB	LTIM, "__#STR0001S", -1, 0, 69
	SYMB	IDEN, "__#STR0002S", -1, #494, 130, 5
	SYMB	LTIM, "__#STR0002S", -1, 0, 69
; instru.c   78	  /* VAR */
; instru.c   79	  bool Test1LEDFlag = FALSE;
	SYMB	LINE, 79
	MOV.W	R6,#00H
	SYMB	LTIM, "Test1LEDFlag", 26, 0, 205
	SYMB	TYPE, 495, 'Z', #2, 9
	SYMB	IDEN, "result", -16, #495, 130, 5
	SYMB	IDEN, "i", -1, #2, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
	SYMB	IDEN, "tmp", -1, #16, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; instru.c   80	  char result[10], i;
; instru.c   81	  int tmp;
; instru.c   82	
; instru.c   83	  /* BEGIN */
; instru.c   84	  UnitPgmMode = 0;     // IMPORTANT!!! see module UNITPRG.C
	SYMB	LINE, 84
	CLR	_UnitPgmMode
; instru.c   85	
; instru.c   86	  rs232_init();        // init the rs232 driver
	SYMB	LINE, 86
	CALL	_rs232_init
; instru.c   87	  sio0_init();         // init the sio0 driver
	SYMB	LINE, 87
	CALL	_sio0_init
; instru.c   88	  tim0_init();         // init the T0 counter for field
	SYMB	LINE, 88
	CALL	_tim0_init
; instru.c   89	  InitBus( IIC_PTV);   // init the IIC bus
	SYMB	LINE, 89
	MOV.B	R0L,#00H
	CALL	_InitBus
; instru.c   90	  tvp6k_init();        // init the TI TVP6000 Multimedie chip
	SYMB	LINE, 90
	CALL	_tvp6k_init
; instru.c   91	
; instru.c   92	  NV_Init();           // init the NV RAM
	SYMB	LINE, 92
	CALL	_NV_Init
; instru.c   93	                       // init the calibraion values
; instru.c   94	  CalibrationPtr = NV_AllocP( sizeof( CalibrationObject));
	SYMB	LINE, 94
	MOV.W	R0,#0E2H
	CALL	_NV_AllocP
	MOV.W	R2,R0
	MOV.B	ES,#SEG( _CalibrationPtr )
	MOV.W	R0,#SOF( _CalibrationPtr )
	MOV.W	[R0],R2
; instru.c   95	
; instru.c   96	  if ( NV_Recall( &Calibration, CalibrationPtr, sizeof( Calibration)) == FAIL)
	SYMB	LINE, 96
	MOV.W	R3,#0E2H
	MOV.W	R1,#SEG( _Calibration )
	MOV.W	R0,#SOF( _Calibration )
	CALL	_NV_Recall
	OR.W	R0,R0
	BNE	_4
; instru.c   97	    {
; instru.c   98	    SystemsLEDSet( ErrorLEDs, 0);
	SYMB	LINE, 98
	MOV.B	R0L,#03H
	MOV.B	R0H,#00H
	CALL	_SystemsLEDSet
; instru.c   99	  
; instru.c  100	    Sleep( 1000);
	SYMB	LINE, 100
	MOV.W	R0,#03E8H
	CALL	_Sleep
; instru.c  101	    // error reading calibration values
; instru.c  102	    }
	SYMB	LINE, 102
_4:
; instru.c  103	  // init the presets
; instru.c  104	  for ( i = 0; i < NoOfPresets; i++)
	SYMB	LINE, 104
	MOV.W	R5,#SEG( _PresetPtr )
	MOV.W	R4,#SOF( _PresetPtr )
	SYMB	LTIM, "__#STR0001S", 19, 0, 205
_5:
; instru.c  105	    PresetPtr[i] = NV_AllocP( sizeof( PresetObject));
	SYMB	LINE, 105
	MOV.W	R0,#06EH
	CALL	_NV_AllocP
	MOV.B	ES,R5L
	MOV.W	[R4],R0
	SYMB	LINE, 104
	ADD.W	R4,#02H
	SYMB	LTIM, "__#STR0001S", 19, 0, 77
	SYMB	LTIM, "__#STR0001S", 19, 0, 205
	CMP.W	R5,#SEG( _PresetPtr+8 )
	BNE	_17
	CMP.W	R4,#SOF( _PresetPtr+8 )
_17:
	BCS	_5
; instru.c  106	
; instru.c  107	  // init the last selected values
; instru.c  108	  SettingsPtr = NV_AllocP( sizeof( SettingsObject));
	SYMB	LINE, 108
	MOV.W	R0,#04AH
	CALL	_NV_AllocP
	MOV.W	R2,R0
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R0,#SOF( _SettingsPtr )
	MOV.W	[R0],R2
; instru.c  109	
; instru.c  110	  if ( NV_Recall( &Settings, SettingsPtr, sizeof( Settings)) == FAIL)
	SYMB	LINE, 110
	MOV.W	R3,#04AH
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	CALL	_NV_Recall
	OR.W	R0,R0
	BNE	_6
; instru.c  111	    ResetInstrument();
	SYMB	LINE, 111
	CALL	_ResetInstrument
	BR	_8
_6:
; instru.c  112	  else
; instru.c  113	    {
; instru.c  114	    // NOTE!! The Init()-routines WILL clear
; instru.c  115	    //  Settings.ActivePreset!!!!!!!!!!
; instru.c  116	    tmp = Settings.ActivePreset;
	SYMB	LINE, 116
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R4,#SOF( _Settings )
	MOV.W	R4,[R4]
	SYMB	LTIM, "__#STR0001S", 19, 0, 77
	SYMB	LTIM, "tmp", 18, 0, 205
; instru.c  117	
; instru.c  118	    GenlockInit();     // restore the genlock settings.
	SYMB	LINE, 118
	CALL	_GenlockInit
; instru.c  119	    CBInit();          // restore the colorbar generator settings
	SYMB	LINE, 119
	CALL	_CBInit
; instru.c  120	    BBInit();          // restore the black burst settings
	SYMB	LINE, 120
	CALL	_BBInit
; instru.c  121	    AudioInit();       // restore the audio settings
	SYMB	LINE, 121
	CALL	_AudioInit
; instru.c  122	
; instru.c  123	    GenlockUpdate();   // update the genlock setup.
	SYMB	LINE, 123
	CALL	_GenlockUpdate
; instru.c  124	    CBUpdate();        // update the colorbar generator (PAL,EBU ColorBar)
	SYMB	LINE, 124
	CALL	_CBUpdate
; instru.c  125	    BBUpdate();        // update the black burst setups
	SYMB	LINE, 125
	CALL	_BBUpdate
; instru.c  126	    AudioUpdate();     // update the audio setup
	SYMB	LINE, 126
	CALL	_AudioUpdate
; instru.c  127	
; instru.c  128	    Settings.ActivePreset = tmp;
	SYMB	LINE, 128
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.W	[R0],R4
; instru.c  129	
; instru.c  130	    if ( Settings.ActivePreset)
	SYMB	LINE, 130
	OR.W	R4,R4
	BEQ	_8
; instru.c  131	      RecallPreset( tmp);
	SYMB	LINE, 131
	MOV.W	R0,R4
	CALL	_RecallPreset
	SYMB	LTIM, "tmp", 18, 0, 77
	SYMB	LTIM, "tmp", 2, 0, 205
	SYMB	LTIM, "tmp", 2, 0, 77
; instru.c  132	    }
	SYMB	LINE, 132
_8:
; instru.c  133	
; instru.c  134	  KeyScanThread = newTThread( 3, keyscan);
	SYMB	LINE, 134
	MOV.W	R0,#03H
	MOV.W	R3,#SEG( _keyscan )
	MOV.W	R2,#SOF( _keyscan )
	CALL	_newTThread
	MOV.B	ES,#SEG( _KeyScanThread )
	MOV.W	R2,#SOF( _KeyScanThread )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; instru.c  135	  FrontThread = newTThread( 4, front);
	SYMB	LINE, 135
	MOV.W	R0,#04H
	MOV.W	R3,#SEG( _front )
	MOV.W	R2,#SOF( _front )
	CALL	_newTThread
	MOV.B	ES,#SEG( _FrontThread )
	MOV.W	R2,#SOF( _FrontThread )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; instru.c  136	  InterpreterThread = newTThread( 5, Interpreter);
	SYMB	LINE, 136
	MOV.W	R0,#05H
	MOV.W	R3,#SEG( _Interpreter )
	MOV.W	R2,#SOF( _Interpreter )
	CALL	_newTThread
	MOV.B	ES,#SEG( _InterpreterThread )
	MOV.W	R2,#SOF( _InterpreterThread )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; instru.c  137	
; instru.c  138	  KeyScanThread->Execute( KeyScanThread);
	SYMB	LINE, 138
	MOV.B	ES,#SEG( _KeyScanThread )
	MOV.W	R1,#SOF( _KeyScanThread )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+6]
	MOV.W	R5,[R0+8]
	FCALL	__ICALL
; instru.c  139	  FrontThread->Execute( FrontThread);
	SYMB	LINE, 139
	MOV.B	ES,#SEG( _FrontThread )
	MOV.W	R1,#SOF( _FrontThread )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+6]
	MOV.W	R5,[R0+8]
	FCALL	__ICALL
; instru.c  140	  InterpreterThread->Execute( InterpreterThread);
	SYMB	LINE, 140
	MOV.B	ES,#SEG( _InterpreterThread )
	MOV.W	R1,#SOF( _InterpreterThread )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+6]
	MOV.W	R5,[R0+8]
	FCALL	__ICALL
; instru.c  141	
; instru.c  142	  InstruTimer = newTTimer();
	SYMB	LINE, 142
	CALL	_newTTimer
	MOV.B	ES,#SEG( _InstruTimer )
	MOV.W	R2,#SOF( _InstruTimer )
	MOV.W	[R2+],R0
	MOV.W	[R2],R1
; instru.c  143	  InstruTimer->SetPeriod( InstruTimer, 1000);  //250
	SYMB	LINE, 143
	MOV.B	ES,R1L
	MOV.W	R4,[R0+10]
	MOV.W	R5,[R0+12]
	MOV.W	R2,#03E8H
	FCALL	__ICALL
; instru.c  144	
; instru.c  145	  for(;;)
	SYMB	LINE, 145
_9:
_10:
; instru.c  146	    {
; instru.c  147	    InstruTimer->TimeOut->Wait( InstruTimer->TimeOut, 0);
	SYMB	LINE, 147
	MOV.B	ES,#SEG( _InstruTimer )
	MOV.W	R1,#SOF( _InstruTimer )
	MOV.W	R0,[R1+]
	MOV.W	R1,[R1]
	MOV.B	ES,R1L
	MOV.W	R4,[R0+22]
	MOV.W	R5,[R0+24]
	MOV.B	ES,R5L
	MOV.W	R5,[R4+12]
	MOV.W	R4,[R4+10]
	MOV.B	ES,R1L
	MOV.W	R1,[R0+24]
	MOV.W	R0,[R0+22]
	MOV.W	R3,#00H
	MOV.W	R2,#00H
	FCALL	__ICALL
; instru.c  148	/*    if ( !GenlockSetup.System == Internal)                    :JK change */
; instru.c  149	    sio0SndRequest( 12, SPG_V24_address, result, "GS?");
	SYMB	LINE, 149
	MOV.W	R0,#0CH
	MOV.W	R1,#015H
	MOV.B	R5L,#SEG( __lc_bs )
	XOR.B	R5H,R5H
	MOV.W	R4,R7
	MOV.W	R3,#SEG( _3 )
	MOV.W	R2,#SOF( _3 )
	PUSH.W	R2, R3
	SYMB	SOFF, 20
	MOV.W	R3,R5
	MOV.W	R2,R4
	CALL	_sio0SndRequest
	ADDS.W	R7,#04H
	SYMB	SOFF, 16
; instru.c  150	    GenlockStatus = (UC) atoi( result);
	SYMB	LINE, 150
	MOV.W	R1,R5
	MOV.W	R0,R4
	CALL	_atoi
	MOV.B	ES,#SEG( _GenlockStatus )
	MOV.W	R1,#SOF( _GenlockStatus )
	MOV.B	[R1],R0L
; instru.c  151	    if ( GenlockSetup.System == MHzLock10)
	SYMB	LINE, 151
	MOV.B	ES,#SEG( _GenlockSetup )
	MOV.W	R1,#SOF( _GenlockSetup )
	MOV.B	R0H,[R1]
	CMP.B	R0H,#03H
	BNE	_11
; instru.c  152	      GenlockStatus &= 0x02;
	SYMB	LINE, 152
	AND.B	R0L,#02H
	MOV.B	ES,#SEG( _GenlockStatus )
	MOV.W	R1,#SOF( _GenlockStatus )
	MOV.B	[R1],R0L
	BR	_12
_11:
; instru.c  153	    else
; instru.c  154	      GenlockStatus &= 0x01;
	SYMB	LINE, 154
	MOV.B	ES,#SEG( _GenlockStatus )
	MOV.W	R0,#SOF( _GenlockStatus )
	MOV.B	R0L,[R0]
	AND.B	R0L,#01H
	MOV.B	ES,#SEG( _GenlockStatus )
	MOV.W	R1,#SOF( _GenlockStatus )
	MOV.B	[R1],R0L
_12:
; instru.c  155			if ( GenlockStatus > 0)
	SYMB	LINE, 155
	MOV.B	ES,#SEG( _GenlockStatus )
	MOV.W	R0,#SOF( _GenlockStatus )
	MOV.B	R0L,[R0]
	CMP.B	R0L,#00H
	BL	_13
; instru.c  156		 		LEDMirror |= GenlockLED;
	SYMB	LINE, 156
	MOV.B	ES,#SEG( _LEDMirror )
	MOV.W	R0,#SOF( _LEDMirror )
	MOV.W	R0,[R0]
	OR.W	R0,#04000H
	MOV.B	ES,#SEG( _LEDMirror )
	MOV.W	R1,#SOF( _LEDMirror )
	MOV.W	[R1],R0
	BR	_14
_13:
; instru.c  157			else
; instru.c  158				LEDMirror &= ~ GenlockLED;
	SYMB	LINE, 158
	MOV.B	ES,#SEG( _LEDMirror )
	MOV.W	R0,#SOF( _LEDMirror )
	MOV.W	R0,[R0]
	AND.W	R0,#0BFFFH
	MOV.B	ES,#SEG( _LEDMirror )
	MOV.W	R1,#SOF( _LEDMirror )
	MOV.W	[R1],R0
_14:
; instru.c  159	    
; instru.c  160	    Test1LEDFlag ^= 1;                                    /* Togge L28 ON/OFF */
	SYMB	LINE, 160
	XOR.W	R6,#01H
	SYMB	LTIM, "Test1LEDFlag", 26, 0, 77
	SYMB	LTIM, "Test1LEDFlag", 26, 0, 205
; instru.c  161			if ( Test1LEDFlag)
	SYMB	LINE, 161
	BEQ	_15
; instru.c  162		 		TestLEDMirror |= Test1LED;
	SYMB	LINE, 162
	MOV.B	ES,#SEG( _TestLEDMirror )
	MOV.W	R0,#SOF( _TestLEDMirror )
	MOV.W	R0,[R0]
	OR.W	R0,#01H
	MOV.B	ES,#SEG( _TestLEDMirror )
	MOV.W	R1,#SOF( _TestLEDMirror )
	MOV.W	[R1],R0
	BR	_10
_15:
	SYMB	LTIM, "Test1LEDFlag", 26, 0, 77
	SYMB	LTIM, "Test1LEDFlag", 26, 0, 205
; instru.c  163			else
; instru.c  164				TestLEDMirror &= ~Test1LED;
	SYMB	LINE, 164
	MOV.B	ES,#SEG( _TestLEDMirror )
	MOV.W	R0,#SOF( _TestLEDMirror )
	MOV.W	R0,[R0]
	AND.W	R0,#0FFFEH
	MOV.B	ES,#SEG( _TestLEDMirror )
	MOV.W	R1,#SOF( _TestLEDMirror )
	MOV.W	[R1],R0
	SYMB	LINE, 145
	BR	_9
; instru.c  165	    }
; instru.c  166	  }
	SYMB	LINE, 166
	ADD.W	R7,#0AH
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "Test1LEDFlag", 26, 0, 77
	SYMB	EFUN
; instru.c  167	
; instru.c  168	/**************************************************************************/
; instru.c  169	/* ResetInstrument                                           INSTRU.C     */
; instru.c  170	/* Author:              Kim Engedahl, DEV, 000411                         */
; instru.c  171	/* Revised:             000914, KEn, DEV                                  */
; instru.c  172	/* Function:                                                              */
; instru.c  173	/**************************************************************************/
; instru.c  174	int ResetInstrument( void)
; instru.c  175	  {
	ALIGN	1
	SYMB	LINE, 175
	PUBLIC	_ResetInstrument
_ResetInstrument:
	SYMB	TYPE, 497, 'X', 12, #16, 30, 0
	SYMB	GFUN, "ResetInstrument", _ResetInstrument, #497, 0, 0, 0
	SYMB	ALAB, _ResetInstrument, #497
; instru.c  176	  BBDefaults();         
	SYMB	LINE, 176
	CALL	_BBDefaults
; instru.c  177	  CBDefaults();         
	SYMB	LINE, 177
	CALL	_CBDefaults
; instru.c  178	  AudioDefaults();          
	SYMB	LINE, 178
	CALL	_AudioDefaults
; instru.c  179	  GenlockDefaults();
	SYMB	LINE, 179
	CALL	_GenlockDefaults
; instru.c  180	
; instru.c  181	  BBInit();                // init the black burst setups
	SYMB	LINE, 181
	CALL	_BBInit
; instru.c  182	  CBInit();                // init the colorbar generator (PAL,EBU ColorBar)
	SYMB	LINE, 182
	CALL	_CBInit
; instru.c  183	  AudioInit();             // init the audio setup, (this includes an AudioTimer)
	SYMB	LINE, 183
	CALL	_AudioInit
; instru.c  184	  GenlockInit();           // init the genlock setup.
	SYMB	LINE, 184
	CALL	_GenlockInit
; instru.c  185	
; instru.c  186	  GenlockUpdate();         // update the genlock setup.
	SYMB	LINE, 186
	CALL	_GenlockUpdate
; instru.c  187	  CBUpdate();              // update the colorbar generator (PAL,EBU ColorBar)
	SYMB	LINE, 187
	CALL	_CBUpdate
; instru.c  188	  BBUpdate();              // update the black burst setups
	SYMB	LINE, 188
	CALL	_BBUpdate
; instru.c  189	  AudioUpdate();           // update the audio setup
	SYMB	LINE, 189
	CALL	_AudioUpdate
; instru.c  190	
; instru.c  191	  Settings.ActivePreset = 0;
	SYMB	LINE, 191
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.W	[R0],#00H
; instru.c  192	  NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 192
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	CALL	_NV_Store
; instru.c  193	
; instru.c  194	  return( OK);
	SYMB	LINE, 194
	MOV.W	R0,#0FFFFH
; instru.c  195	  }
	SYMB	LINE, 195
	RET
	SYMB	EFUN
; instru.c  196	
; instru.c  197	/**************************************************************************/
; instru.c  198	/* StorePreset                                               INSTRU.C     */
; instru.c  199	/* Author:              Kim Engedahl, DEV, 000411                         */
; instru.c  200	/* Revised:             000618, KEn, DEV                                  */
; instru.c  201	/* Function:                                                              */
; instru.c  202	/**************************************************************************/
; instru.c  203	int StorePreset( int no)
; instru.c  204	  {
	ALIGN	1
	SYMB	LINE, 204
	PUBLIC	_StorePreset
_StorePreset:
	SYMB	TYPE, 498, 'X', 12, #16, 30, 1, #16
	SYMB	GFUN, "StorePreset", _StorePreset, #498, 0, 0, 112
	SYMB	ALAB, _StorePreset, #498
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#072H
	SYMB	SOFF, 120
	SYMB	LTIM, "no", 2, 0, 2253
	SYMB	IDEN, "no", 2, #16, 0, 2061
	SYMB	IDEN, "i", -1, #16, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
	SYMB	IDEN, "Preset", -116, #491, 130, 5
; instru.c  205	  int i;
; instru.c  206	  PresetObject Preset;
; instru.c  207	
; instru.c  208	  if (( no == 0) || ( no > NoOfPresets))
	SYMB	LINE, 208
	MOV.W	R5,R0
	SYMB	LTIM, "no", 2, 0, 2125
	SYMB	LTIM, "no", 22, 0, 2253
	BEQ	_20
	CMP.W	R5,#04H
	BLE	_21
_20:
; instru.c  209	    return( FAIL);
	SYMB	LINE, 209
	MOV.W	R0,#00H
	BR	_24
_21:
	SYMB	LTIM, "no", 22, 0, 2125
	SYMB	LTIM, "no", 22, 0, 2253
; instru.c  210	
; instru.c  211	  // Copy genlock setup to preset
; instru.c  212	  memcpy( &Preset.GenlockSetup, &GenlockSetup, sizeof( GenlockSetup));
	SYMB	LINE, 212
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+42
	MOV.W	R3,#SEG( _GenlockSetup )
	MOV.W	R2,#SOF( _GenlockSetup )
	MOV.W	R6,#06H
	CALL	_memcpy
; instru.c  213	
; instru.c  214	  // Copy black burst setup to preset
; instru.c  215	  for ( i = 0; i < NoOfBBOutputs; i++)
	SYMB	LINE, 215
	MOV.W	R4,#00H
	SYMB	LTIM, "i", 18, 0, 205
_22:
; instru.c  216	          memcpy( &Preset.BBSetup[i], &BBSetup[i], sizeof( BBSetup[0]));
	SYMB	LINE, 216
	MOV.W	R0,R4
	ASL.W	R0,#03H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+48
	ADD.W	R0,R2
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.W	R1,#SEG( _BBSetup )
	MOV.W	R0,#SOF( _BBSetup )
	ADD.W	R0,R2
	MOV.W	R6,#08H
	MOV.W	R3,R1
	MOV.W	R2,R0
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	CALL	_memcpy
	SYMB	LINE, 215
	ADDS.W	R4,#01H
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
	CMP.W	R4,#03H
	BLT	_22
; instru.c  217	
; instru.c  218	  // Copy Colorbar setup to preset
; instru.c  219	  memcpy( &Preset.CBSetup, &CBSetup, sizeof( CBSetup));
	SYMB	LINE, 219
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+72
	MOV.W	R3,#SEG( _CBSetup )
	MOV.W	R2,#SOF( _CBSetup )
	MOV.W	R6,#0CH
	CALL	_memcpy
; instru.c  220	
; instru.c  221	  // Copy currently selected audio output to preset
; instru.c  222	  Preset.AudioOutput = AudioOutput;
	SYMB	LINE, 222
	MOV.B	ES,#SEG( _AudioOutput )
	MOV.W	R0,#SOF( _AudioOutput )
	MOV.W	R0,[R0]
	MOV.W	[R7+84],R0
; instru.c  223	
; instru.c  224	  // Copy audio setup to preset
; instru.c  225	  for ( i = 0; i < NoOfAudioOutputs; i++)
	SYMB	LINE, 225
	MOV.W	R4,#00H
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
_23:
; instru.c  226	    memcpy( &Preset.AudioSetup[i], &AudioSetup[i], sizeof( AudioSetup[0]));
	SYMB	LINE, 226
	MOV.W	R2,#0EH
	MULU.W	R2,R4
	MOVS.W	R3,#00H
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+86
	ADD.W	R0,R2
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.W	R1,#SEG( _AudioSetup )
	MOV.W	R0,#SOF( _AudioSetup )
	ADD.W	R0,R2
	MOV.W	R6,#0EH
	MOV.W	R3,R1
	MOV.W	R2,R0
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	CALL	_memcpy
	SYMB	LINE, 225
	ADDS.W	R4,#01H
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
	CMP.W	R4,#02H
	BLT	_23
; instru.c  227	
; instru.c  228	  // Store preset in setected preset number
; instru.c  229	  NV_Store( &Preset, PresetPtr[no-1], sizeof( Preset));
	SYMB	LINE, 229
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	MOV.W	R4,R5
	ASL.W	R5,#01H
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "no", 22, 0, 2125
	SYMB	LTIM, "no", 18, 0, 2253
	MOV.W	R2,R5
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#06EH
	CALL	_NV_Store
; instru.c  230	
; instru.c  231	  Settings.ActivePreset = no;
	SYMB	LINE, 231
	MOV.W	R0,R4
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R1,#SOF( _Settings )
	MOV.W	[R1],R0
	SYMB	LTIM, "no", 18, 0, 2125
	SYMB	LTIM, "no", 2, 0, 2253
; instru.c  232	  NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 232
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	SYMB	LTIM, "no", 2, 0, 2125
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	CALL	_NV_Store
; instru.c  233	
; instru.c  234	  return( OK);
	SYMB	LINE, 234
	MOV.W	R0,#0FFFFH
; instru.c  235	  }
	SYMB	LINE, 235
_24:
	ADD.W	R7,#072H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	EFUN
; instru.c  236	
; instru.c  237	/**************************************************************************/
; instru.c  238	/* RecallPreset                                              INSTRU.C     */
; instru.c  239	/* Author:              Kim Engedahl, DEV, 000411                         */
; instru.c  240	/* Revised:             000618, KEn, DEV                                  */
; instru.c  241	/* Function:                                                              */
; instru.c  242	/**************************************************************************/
; instru.c  243	int RecallPreset( int no)
; instru.c  244	  {
	ALIGN	1
	SYMB	LINE, 244
	PUBLIC	_RecallPreset
_RecallPreset:
	SYMB	TYPE, 499, 'X', 12, #16, 30, 1, #16
	SYMB	GFUN, "RecallPreset", _RecallPreset, #499, 0, 0, 112
	SYMB	ALAB, _RecallPreset, #499
	PUSH.W	R4, R5, R6
	SYMB	SOFF, 6
	SUB.W	R7,#072H
	SYMB	SOFF, 120
	SYMB	LTIM, "no", 2, 0, 2253
	SYMB	IDEN, "no", 2, #16, 0, 2061
	SYMB	IDEN, "i", -1, #16, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
	SYMB	IDEN, "Preset", -116, #491, 130, 5
; instru.c  245	  int i;
; instru.c  246	  PresetObject Preset;
; instru.c  247	
; instru.c  248	  if (( no == 0) || ( no > NoOfPresets))
	SYMB	LINE, 248
	MOV.W	R5,R0
	OR.W	R0,R0
	SYMB	LTIM, "no", 2, 0, 2125
	SYMB	LTIM, "no", 22, 0, 2253
	BEQ	_28
	CMP.W	R5,#04H
	BLE	_29
_28:
; instru.c  249	    return( FAIL);
	SYMB	LINE, 249
	MOV.W	R0,#00H
	BR	_34
_29:
	SYMB	LTIM, "no", 22, 0, 2125
	SYMB	LTIM, "no", 22, 0, 2253
; instru.c  250	
; instru.c  251	  if ( NV_Recall( &Preset, PresetPtr[no-1], sizeof( Preset)))
	SYMB	LINE, 251
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+4
	MOV.W	R2,R5
	ASL.W	R2,#01H
	MOVS.W	R3,#00H
	MOV.B	ES,#SEG( _PresetPtr+-2 )
	MOV.W	R2,[R2+SOF( _PresetPtr+-2 )]
	MOV.W	R3,#06EH
	CALL	_NV_Recall
	OR.W	R0,R0
	BEQ	_32
; instru.c  252	    {
; instru.c  253	    // Recall genlock setup from preset
; instru.c  254	    memcpy( &GenlockSetup, &Preset.GenlockSetup, sizeof( GenlockSetup));
	SYMB	LINE, 254
	MOV.W	R1,#SEG( _GenlockSetup )
	MOV.W	R0,#SOF( _GenlockSetup )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+42
	MOV.W	R6,#06H
	CALL	_memcpy
; instru.c  255	
; instru.c  256	    GenlockUpdate();                // update the genlock setup
	SYMB	LINE, 256
	CALL	_GenlockUpdate
; instru.c  257	
; instru.c  258	
; instru.c  259	    // Recall black burst setup from preset
; instru.c  260	    for ( i = 0; i < NoOfBBOutputs; i++)
	SYMB	LINE, 260
	MOV.W	R4,#00H
	SYMB	LTIM, "i", 18, 0, 205
_30:
; instru.c  261	      memcpy( &BBSetup[i], &Preset.BBSetup[i], sizeof( BBSetup[0]));
	SYMB	LINE, 261
	MOV.W	R0,R4
	ASL.W	R0,#03H
	MOV.W	R2,R0
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _BBSetup )
	MOV.W	R0,#SOF( _BBSetup )
	ADD.W	R0,R2
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+48
	ADD.W	R0,R2
	MOV.W	R6,#08H
	MOV.W	R3,R1
	MOV.W	R2,R0
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	CALL	_memcpy
	SYMB	LINE, 260
	ADDS.W	R4,#01H
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
	CMP.W	R4,#03H
	BLT	_30
; instru.c  262	
; instru.c  263	    BBUpdate();   // update the black burst setups
	SYMB	LINE, 263
	CALL	_BBUpdate
; instru.c  264	
; instru.c  265	
; instru.c  266	    // Recall Colorbar setup from preset
; instru.c  267	    memcpy( &CBSetup, &Preset.CBSetup, sizeof( CBSetup));
	SYMB	LINE, 267
	MOV.W	R1,#SEG( _CBSetup )
	MOV.W	R0,#SOF( _CBSetup )
	MOV.B	R3L,#SEG( __lc_bs )
	XOR.B	R3H,R3H
	LEA	R2,R7+72
	MOV.W	R6,#0CH
	CALL	_memcpy
; instru.c  268	
; instru.c  269	    CBUpdate();   // update the colorbar generator (PAL,EBU ColorBar)
	SYMB	LINE, 269
	CALL	_CBUpdate
; instru.c  270	
; instru.c  271	    // Recall currently selected audio output from preset
; instru.c  272	    AudioOutput = Preset.AudioOutput;
	SYMB	LINE, 272
	MOV.W	R0,[R7+84]
	MOV.B	ES,#SEG( _AudioOutput )
	MOV.W	R1,#SOF( _AudioOutput )
	MOV.W	[R1],R0
; instru.c  273	
; instru.c  274	    // Recall audio setup from preset
; instru.c  275	    for ( i = 0; i < NoOfAudioOutputs; i++)
	SYMB	LINE, 275
	MOV.W	R4,#00H
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
_31:
; instru.c  276	      memcpy( &AudioSetup[i], &Preset.AudioSetup[i], sizeof( AudioSetup[0]));
	SYMB	LINE, 276
	MOV.W	R2,#0EH
	MULU.W	R2,R4
	MOVS.W	R3,#00H
	MOV.W	R1,#SEG( _AudioSetup )
	MOV.W	R0,#SOF( _AudioSetup )
	ADD.W	R0,R2
	MOV.W	[R7+2],R1
	MOV.W	[R7],R0
	MOV.B	R1L,#SEG( __lc_bs )
	XOR.B	R1H,R1H
	LEA	R0,R7+86
	ADD.W	R0,R2
	MOV.W	R6,#0EH
	MOV.W	R3,R1
	MOV.W	R2,R0
	MOV.W	R1,[R7+2]
	MOV.W	R0,[R7]
	CALL	_memcpy
	SYMB	LINE, 275
	ADDS.W	R4,#01H
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	LTIM, "i", 18, 0, 205
	CMP.W	R4,#02H
	BLT	_31
; instru.c  277	
; instru.c  278	    SetAudioOutput( AudioOutput);  // update the audio setup
	SYMB	LINE, 278
	MOV.B	ES,#SEG( _AudioOutput )
	MOV.W	R0,#SOF( _AudioOutput )
	MOV.W	R0,[R0]
	CALL	_SetAudioOutput
; instru.c  279	
; instru.c  280	    Settings.ActivePreset = no;
	SYMB	LINE, 280
	MOV.B	ES,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.W	[R0],R5
; instru.c  281	    NV_Store( &Settings, SettingsPtr, sizeof( Settings));
	SYMB	LINE, 281
	MOV.W	R1,#SEG( _Settings )
	MOV.W	R0,#SOF( _Settings )
	MOV.B	ES,#SEG( _SettingsPtr )
	MOV.W	R2,#SOF( _SettingsPtr )
	MOV.W	R2,[R2]
	MOV.W	R3,#04AH
	CALL	_NV_Store
; instru.c  282	
; instru.c  283	    return( OK);
	SYMB	LINE, 283
	MOV.W	R0,#0FFFFH
	BR	_34
; instru.c  284	    }
	SYMB	LINE, 284
_32:
; instru.c  285	  return( FAIL);
	SYMB	LINE, 285
	MOV.W	R0,#00H
; instru.c  286	  }
	SYMB	LINE, 286
_34:
	ADD.W	R7,#072H
	SYMB	SOFF, 6
	POP.W	R4, R5, R6
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "no", 22, 0, 2125
	SYMB	LTIM, "i", 18, 0, 77
	SYMB	EFUN
	SYMB	ENDF

	SYMB	TYPE, 500, 'X', 12, #1, 30, 0
	SYMB	ALAB, _sio0_init, #500
	EXTRN	HCODE(_sio0_init)
	SYMB	TYPE, 501, 'Z', #453, 3
	SYMB	IDEN, "PresetPtr", _PresetPtr, #501, 130, 0
	SYMB	ALAB, _PresetPtr, #501
INSTRU_CLR_FA	SEGMENT	HDATA INSEGMENT CLEAR
	RSEG	INSTRU_CLR_FA
	PUBLIC	_PresetPtr
	ALIGN	1
_PresetPtr:	DS	8
	SYMB	TYPE, 503, 'X', 12, #1, 30, 0
	SYMB	ALAB, _front, #503
	EXTRN	HCODE(_front)
	SYMB	TYPE, 504, 'X', 12, #16, 30, 1, #3
	SYMB	ALAB, _InitBus, #504
	EXTRN	HCODE(_InitBus)
	SYMB	TYPE, 505, 'X', 12, #16, 30, 0
	SYMB	ALAB, _tvp6k_init, #505
	EXTRN	HCODE(_tvp6k_init)
INSTRU_INI_FA	SEGMENT	HDATA INSEGMENT INIT
	RSEG	INSTRU_INI_FA
_3:	DB	047H,053H,03FH,000H
	SYMB	TYPE, 506, 'X', 12, #16, 30, 0
	SYMB	ALAB, _BBUpdate, #506
	EXTRN	HCODE(_BBUpdate)
	SYMB	TYPE, 507, 'n', #415, 130
	SYMB	TYPE, 508, 'P', #507
	SYMB	IDEN, "FrontThread", _FrontThread, #508, 130, 0
	SYMB	ALAB, _FrontThread, #508
	RSEG	INSTRU_CLR_FA
	PUBLIC	_FrontThread
	ALIGN	1
_FrontThread:	DS	4
	SYMB	ALAB, _AudioOutput, #16
	EXTRN	HDATA(_AudioOutput)
	SYMB	TYPE, 509, 'X', 12, #16, 30, 0
	SYMB	ALAB, _CBUpdate, #509
	EXTRN	HCODE(_CBUpdate)
	SYMB	IDEN, "InstrumentControl", _InstrumentControl, #508, 130, 0
	SYMB	ALAB, _InstrumentControl, #508
	PUBLIC	_InstrumentControl
	ALIGN	1
_InstrumentControl:	DS	4
	SYMB	TYPE, 510, 'X', 12, #1, 30, 0
	SYMB	ALAB, _tim0_init, #510
	EXTRN	HCODE(_tim0_init)
	SYMB	TYPE, 511, 'X', 12, #453, 30, 1, #16
	SYMB	ALAB, _NV_AllocP, #511
	EXTRN	HCODE(_NV_AllocP)
	SYMB	IDEN, "InterpreterThread", _InterpreterThread, #508, 130, 0
	SYMB	ALAB, _InterpreterThread, #508
	PUBLIC	_InterpreterThread
	ALIGN	1
_InterpreterThread:	DS	4
	SYMB	ALAB, _TestLEDMirror, #18
	EXTRN	HDATA(_TestLEDMirror)
	SYMB	TYPE, 512, 'X', 12, #16, 30, 1, #259
	SYMB	ALAB, _atoi, #512
	EXTRN	HCODE(_atoi)
	SYMB	TYPE, 513, 'n', #436, 130
	SYMB	TYPE, 514, 'P', #513
	SYMB	TYPE, 515, 'X', 12, #514, 30, 0
	SYMB	ALAB, _newTTimer, #515
	EXTRN	HCODE(_newTTimer)
	SYMB	ALAB, _CBSetup, #461
	EXTRN	HDATA(_CBSetup)
	SYMB	ALAB, _BBSetup, #472
	EXTRN	HDATA(_BBSetup)
	SYMB	TYPE, 516, 'X', 12, #16, 30, 0
	SYMB	ALAB, _NV_Init, #516
	EXTRN	HCODE(_NV_Init)
	SYMB	TYPE, 517, 'X', 12, #16, 30, 0
	SYMB	ALAB, _GenlockInit, #517
	EXTRN	HCODE(_GenlockInit)
	SYMB	TYPE, 518, 'X', 12, #16, 30, 0
	SYMB	ALAB, _GenlockUpdate, #518
	EXTRN	HCODE(_GenlockUpdate)
	SYMB	TYPE, 519, 'X', 12, #16, 30, 0
	SYMB	ALAB, _CBInit, #519
	EXTRN	HCODE(_CBInit)
	SYMB	TYPE, 520, 'X', 12, #16, 30, 3, #263, #453, #16
	SYMB	ALAB, _NV_Recall, #520
	EXTRN	HCODE(_NV_Recall)
	SYMB	IDEN, "GenlockStatus", _GenlockStatus, #3, 130, 0
	SYMB	ALAB, _GenlockStatus, #3
	PUBLIC	_GenlockStatus
_GenlockStatus:	DS	1
	SYMB	TYPE, 521, 'X', 12, #16, 30, 1, #16
	SYMB	ALAB, _SetAudioOutput, #521
	EXTRN	HCODE(_SetAudioOutput)
	SYMB	IDEN, "CalibrationPtr", _CalibrationPtr, #453, 130, 0
	SYMB	ALAB, _CalibrationPtr, #453
	PUBLIC	_CalibrationPtr
	ALIGN	1
_CalibrationPtr:	DS	2
	SYMB	ALAB, _AudioSetup, #474
	EXTRN	HDATA(_AudioSetup)
	SYMB	IDEN, "InstruTimer", _InstruTimer, #514, 130, 0
	SYMB	ALAB, _InstruTimer, #514
	PUBLIC	_InstruTimer
	ALIGN	1
_InstruTimer:	DS	4
	SYMB	TYPE, 522, 'X', 12, #1, 30, 0
	SYMB	ALAB, _BBDefaults, #522
	EXTRN	HCODE(_BBDefaults)
	SYMB	IDEN, "SettingsPtr", _SettingsPtr, #453, 130, 0
	SYMB	ALAB, _SettingsPtr, #453
	PUBLIC	_SettingsPtr
	ALIGN	1
_SettingsPtr:	DS	2
	SYMB	TYPE, 523, 'X', 12, #16, 30, 0
	SYMB	ALAB, _BBInit, #523
	EXTRN	HCODE(_BBInit)
	SYMB	TYPE, 524, 'X', 12, #1, 30, 0
	SYMB	ALAB, _CBDefaults, #524
	EXTRN	HCODE(_CBDefaults)
	SYMB	ALAB, _GenlockSetup, #457
	EXTRN	HDATA(_GenlockSetup)
	SYMB	TYPE, 525, 'X', 12, #16, 30, 0
	SYMB	ALAB, _AudioUpdate, #525
	EXTRN	HCODE(_AudioUpdate)
	SYMB	TYPE, 526, 'X', 12, #1, 30, 0
	SYMB	ALAB, _keyscan, #526
	EXTRN	HCODE(_keyscan)
	SYMB	IDEN, "Settings", _Settings, #477, 130, 0
	SYMB	ALAB, _Settings, #477
	PUBLIC	_Settings
	ALIGN	1
_Settings:	DS	74
	SYMB	TYPE, 527, 'X', 12, #1, 30, 0
	SYMB	ALAB, _rs232_init, #527
	EXTRN	HCODE(_rs232_init)
	SYMB	TYPE, 528, 'X', 12, #16, 30, 2, #3, #3
	SYMB	ALAB, _SystemsLEDSet, #528
	EXTRN	HCODE(_SystemsLEDSet)
	SYMB	ALAB, _LEDMirror, #18
	EXTRN	HDATA(_LEDMirror)
	EXTRN	HCODE(__ICALL)
	SYMB	IDEN, "KeyScanThread", _KeyScanThread, #508, 130, 0
	SYMB	ALAB, _KeyScanThread, #508
	PUBLIC	_KeyScanThread
	ALIGN	1
_KeyScanThread:	DS	4
	SYMB	TYPE, 529, 'X', 12, #16, 30, 3, #263, #453, #16
	SYMB	ALAB, _NV_Store, #529
	EXTRN	HCODE(_NV_Store)
	SYMB	TYPE, 530, 'X', 12, #16, 30, 0
	SYMB	ALAB, _AudioInit, #530
	EXTRN	HCODE(_AudioInit)
	SYMB	IDEN, "Calibration", _Calibration, #487, 130, 0
	SYMB	ALAB, _Calibration, #487
	PUBLIC	_Calibration
	ALIGN	1
_Calibration:	DS	226
	SYMB	TYPE, 531, 'X', 12, #1, 30, 0
	SYMB	ALAB, _Interpreter, #531
	EXTRN	HCODE(_Interpreter)
	EXTRN	IDATA(__lc_bs)
	SYMB	ALAB, _UnitPgmMode, #256
	EXTRN	BIT(_UnitPgmMode)
	SYMB	TYPE, 532, 'X', 12, #1, 30, 0
	SYMB	ALAB, _GenlockDefaults, #532
	EXTRN	HCODE(_GenlockDefaults)
	SYMB	TYPE, 534, 'X', 12, #1, 30, 0
	SYMB	TYPE, 535, 'n', #534, 129
	SYMB	TYPE, 536, 'P', #535
	SYMB	TYPE, 533, 'X', 12, #508, 30, 2, #16, #536
	SYMB	ALAB, _newTThread, #533
	EXTRN	HCODE(_newTThread)
	SYMB	TYPE, 537, 'X', 12, #1, 30, 0
	SYMB	ALAB, _AudioDefaults, #537
	EXTRN	HCODE(_AudioDefaults)
	SYMB	TYPE, 538, 'X', 12, #1, 30, 1, #16
	SYMB	ALAB, _Sleep, #538
	EXTRN	HCODE(_Sleep)
	SYMB	TYPE, 539, 'X', 12, #263, 30, 3, #263, #263, #257
	SYMB	ALAB, _memcpy, #539
	EXTRN	HCODE(_memcpy)
	SYMB	TYPE, 540, 'X', 12, #16, 30, 5, #16, #16, #259, #259, #1
	SYMB	ALAB, _sio0SndRequest, #540
	EXTRN	HCODE(_sio0SndRequest)
	EXTRN	DATA(__lc_ub_xvwbuffer)
	EXTRN	DATA(__lc_ue_xvwbuffer)
	CALLS	'Instrument_Control_Task', 'rs232_init'
	CALLS	'Instrument_Control_Task', 'sio0_init'
	CALLS	'Instrument_Control_Task', 'tim0_init'
	CALLS	'Instrument_Control_Task', 'InitBus'
	CALLS	'Instrument_Control_Task', 'tvp6k_init'
	CALLS	'Instrument_Control_Task', 'NV_Init'
	CALLS	'Instrument_Control_Task', 'NV_AllocP'
	CALLS	'Instrument_Control_Task', 'NV_Recall'
	CALLS	'Instrument_Control_Task', 'SystemsLEDSet'
	CALLS	'Instrument_Control_Task', 'Sleep'
	CALLS	'Instrument_Control_Task', 'NV_AllocP'
	CALLS	'Instrument_Control_Task', 'NV_Recall'
	CALLS	'Instrument_Control_Task', 'ResetInstrument'
	CALLS	'Instrument_Control_Task', 'GenlockInit'
	CALLS	'Instrument_Control_Task', 'CBInit'
	CALLS	'Instrument_Control_Task', 'BBInit'
	CALLS	'Instrument_Control_Task', 'AudioInit'
	CALLS	'Instrument_Control_Task', 'GenlockUpdate'
	CALLS	'Instrument_Control_Task', 'CBUpdate'
	CALLS	'Instrument_Control_Task', 'BBUpdate'
	CALLS	'Instrument_Control_Task', 'AudioUpdate'
	CALLS	'Instrument_Control_Task', 'RecallPreset'
	CALLS	'Instrument_Control_Task', 'newTThread'
	CALLS	'Instrument_Control_Task', 'newTTimer'
	CALLS	'Instrument_Control_Task', 'sio0SndRequest'
	CALLS	'Instrument_Control_Task', 'atoi'
	CALLS	'ResetInstrument', 'BBDefaults'
	CALLS	'ResetInstrument', 'CBDefaults'
	CALLS	'ResetInstrument', 'AudioDefaults'
	CALLS	'ResetInstrument', 'GenlockDefaults'
	CALLS	'ResetInstrument', 'BBInit'
	CALLS	'ResetInstrument', 'CBInit'
	CALLS	'ResetInstrument', 'AudioInit'
	CALLS	'ResetInstrument', 'GenlockInit'
	CALLS	'ResetInstrument', 'GenlockUpdate'
	CALLS	'ResetInstrument', 'CBUpdate'
	CALLS	'ResetInstrument', 'BBUpdate'
	CALLS	'ResetInstrument', 'AudioUpdate'
	CALLS	'ResetInstrument', 'NV_Store'
	CALLS	'StorePreset', 'memcpy'
	CALLS	'StorePreset', 'NV_Store'
	CALLS	'RecallPreset', 'NV_Recall'
	CALLS	'RecallPreset', 'memcpy'
	CALLS	'RecallPreset', 'GenlockUpdate'
	CALLS	'RecallPreset', 'memcpy'
	CALLS	'RecallPreset', 'BBUpdate'
	CALLS	'RecallPreset', 'memcpy'
	CALLS	'RecallPreset', 'CBUpdate'
	CALLS	'RecallPreset', 'memcpy'
	CALLS	'RecallPreset', 'SetAudioOutput'
	CALLS	'RecallPreset', 'NV_Store'
	END
