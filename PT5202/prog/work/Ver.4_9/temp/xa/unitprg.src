; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
; options: -A1 -Cxag3 -e -g -IcF:\PT5202\prog\include
;          -IF:\PT5202\prog\rtxc\xa\include -I. -Ml -O2 -s
$CASE
$NOZPAGE
	NAME	UNITPRG
	SYMB	TOOL, "XA C compiler v2.0", 1
	SYMB	TYPE, 256, "bit", 'g', 0, 1
	SYMB	FILE, "unitprg.c"
; unitprg.c    1	/****************************************************************************/
; unitprg.c    2	/* MODULE:                                                                  */
; unitprg.c    3	/*  unitprg.c - 							                                              */
; unitprg.c    4	/****************************************************************************/
; unitprg.c    5	/* FUNCTIONS:                                                               */
; unitprg.c    6	/*                                                                          */
; unitprg.c    7	/*                                                                          */
; unitprg.c    8	/* TASKS:                                                                   */
; unitprg.c    9	/*                                                                          */
; unitprg.c   10	/* NOTES:                                                                   */
; unitprg.c   11	/*                                                                          */
; unitprg.c   12	/****************************************************************************/
; unitprg.c   13	/*
; unitprg.c   14	 *   PTV software for PT5201    
; unitprg.c   15	 *   Copyright (c) 
; unitprg.c   16	 *   ProTeleVision Technologies A/S.
; unitprg.c   17	 *   ALL RIGHTS RESERVED
; unitprg.c   18	*/
; unitprg.c   19	/****************************************************************************/
; unitprg.c   20	#include <stdlib.h>
	SYMB	FILE, "F:\\PT5202\\prog\\include\\stdlib.h"
	SYMB	FILE, "F:\\PT5202\\prog\\include\\limits.h"
	SYMB	ENDF
	SYMB	TYPE, 257, 'S', 4,\
		 "quot", #16, 0,\
		 "rem", #16, 2
	SYMB	TYPE, 258, "div_t", 'T', #257
	SYMB	TYPE, 259, 'S', 8,\
		 "quot", #6, 0,\
		 "rem", #6, 4
	SYMB	TYPE, 260, "ldiv_t", 'T', #259
	SYMB	TYPE, 261, "size_t", 'T', #18
	SYMB	TYPE, 262, "wchar_t", 'T', #5
	SYMB	ENDF
; unitprg.c   21	#include <string.h>
	SYMB	FILE, "F:\\PT5202\\prog\\include\\string.h"
	SYMB	ENDF
; unitprg.c   22	
; unitprg.c   23	#include "reg8051.h"
	SYMB	FILE, "reg8051.h"
	SYMB	ENDF
; unitprg.c   24	#include "define.h"        // Standard PTV defines
	SYMB	FILE, "define.h"
	SYMB	ENDF
; unitprg.c   25	#include "nv_drv.h"
	SYMB	FILE, "nv_drv.h"
	SYMB	TYPE, 263, "NvPointer", 'T', #18
	SYMB	ENDF
; unitprg.c   26	#include "unitprg.h"
	SYMB	FILE, "unitprg.h"
	SYMB	TYPE, 264, 'N',\
		 "true", -1,\
		 "false", 0
	SYMB	TYPE, 265, "bool", 'T', #264
	SYMB	ENDF
; unitprg.c   27	#include "led_hw.h"
	SYMB	FILE, "led_hw.h"
	SYMB	ENDF
; unitprg.c   28	#include "rs232.h"
	SYMB	FILE, "rs232.h"
	SYMB	FILE, "define.h"
	SYMB	ENDF
	SYMB	FILE, "rtxcobj.h"
	SYMB	FILE, "F:\\PT5202\\prog\\rtxc\\xa\\include\\rtxcapi.h"
	SYMB	FILE, "F:\\PT5202\\prog\\rtxc\\xa\\include\\typedef.h"
	SYMB	FILE, "F:\\PT5202\\prog\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 266, "KOBJNUM", 'T', #3
	SYMB	TYPE, 267, "TASK", 'T', #2
	SYMB	ENDF
	SYMB	FILE, "F:\\PT5202\\prog\\rtxc\\xa\\include\\rtxstruc.h"
	SYMB	FILE, "F:\\PT5202\\prog\\rtxc\\xa\\include\\rtxcopts.h"
	SYMB	ENDF
	SYMB	TYPE, 268, "KSNUM", 'T', #3
	SYMB	TYPE, 269, "PRIORITY", 'T', #267
	SYMB	TYPE, 270, "TSTATE", 'T', #5
	SYMB	TYPE, 271, "TSLICE", 'T', #3
	SYMB	TYPE, 273, 'n', #272, 130
	SYMB	TYPE, 274, 'P', #273
	SYMB	TYPE, 276, 'n', #275, 130
	SYMB	TYPE, 277, 'P', #276
	SYMB	TYPE, 278, 'n', #268, 130
	SYMB	TYPE, 279, 'P', #278
	SYMB	TYPE, 280, 'X', 12, #1, 30, 0
	SYMB	TYPE, 281, 'n', #280, 129
	SYMB	TYPE, 282, 'P', #281
	SYMB	TYPE, 283, "frame", 'S', 24,\
		 "es", #3, 0,\
		 "cs", #3, 1,\
		 "ssel", #3, 2,\
		 "ds", #3, 3,\
		 "pksnum", #279, 4,\
		 "R2", #18, 8,\
		 "R3", #18, 10,\
		 "R4", #18, 12,\
		 "R5", #18, 14,\
		 "R6", #18, 16,\
		 "psw", #18, 18,\
		 "pc", #282, 20
	SYMB	TYPE, 284, 'n', #283, 130
	SYMB	TYPE, 285, 'P', #284
	SYMB	TYPE, 286, 'X', 12, #1, 30, 0
	SYMB	TYPE, 287, 'n', #286, 129
	SYMB	TYPE, 288, 'P', #287
	SYMB	TYPE, 289, 'n', #2, 130
	SYMB	TYPE, 290, 'P', #289
	SYMB	TYPE, 291, 'n', #1, 130
	SYMB	TYPE, 292, 'P', #291
	SYMB	TYPE, 272, "tcb", 'S', 36,\
		 "flink", #274, 0,\
		 "blink", #274, 4,\
		 "pclkblk", #277, 8,\
		 "task", #267, 12,\
		 "priority", #269, 13,\
		 "sp", #285, 14,\
		 "status", #270, 18,\
		 "pc_t0", #288, 20,\
		 "stackbase", #290, 24,\
		 "stacksize", #261, 28,\
		 "tslice", #271, 30,\
		 "newslice", #271, 31,\
		 "arg", #292, 32
	SYMB	TYPE, 293, "TCB", 'T', #272
	SYMB	TYPE, 294, "SEMA", 'T', #266
	SYMB	TYPE, 295, "MAP", 'T', #266
	SYMB	TYPE, 297, 'n', #296, 130
	SYMB	TYPE, 298, 'P', #297
	SYMB	TYPE, 296, "rtxcmsg", 'S', 8,\
		 "link", #298, 0,\
		 "task", #267, 4,\
		 "priority", #269, 5,\
		 "sema", #294, 6
	SYMB	TYPE, 299, "RTXCMSG", 'T', #296
	SYMB	TYPE, 300, "TICKS", 'T', #16
	SYMB	TYPE, 301, 'N',\
		 "DELAY_OBJ", 0,\
		 "SEMAPHORE_OBJ", 1,\
		 "PARTITION_OBJ", 2,\
		 "QUEUE_OBJ", 3,\
		 "RESOURCE_OBJ", 4,\
		 "MAILBOX_OBJ", 5,\
		 "TIMER_OBJ", 6
	SYMB	TYPE, 302, "OBJTYPE", 'T', #301
	SYMB	TYPE, 275, "clkblk", 'S', 18,\
		 "flink", #277, 0,\
		 "blink", #277, 4,\
		 "remain", #300, 8,\
		 "recycle", #300, 10,\
		 "task", #267, 12,\
		 "state", #2, 13,\
		 "objtype", #302, 14,\
		 "objid", #266, 16
	SYMB	TYPE, 303, 'N',\
		 "PRIORITY_INVERSION_OFF", 0,\
		 "PRIORITY_INVERSION_ON", 1
	SYMB	TYPE, 304, "RESATTR", 'T', #303
	SYMB	ENDF
	SYMB	TYPE, 305, 'N',\
		 "RC_GOOD", 0,\
		 "RC_WAIT_CONFLICT", 1,\
		 "RC_NO_TIMERS", 2,\
		 "RC_TIMER_INACTIVE", 3,\
		 "RC_TIMER_ILLEGAL", 4,\
		 "RC_TIMEOUT", 5,\
		 "RC_QUEUE_FULL", 6,\
		 "RC_QUEUE_EMPTY", 7,\
		 "RC_ILLEGAL_QUEUE_SIZE", 8,\
		 "RC_BUSY", 9,\
		 "RC_NESTED", 10,\
		 "RC_ILLEGAL_TASK", 11,\
		 "RC_ACTIVE_TASK", 12,\
		 "RC_NO_YIELD", 13,\
		 "RC_MISSED_EVENT", 14
	SYMB	TYPE, 306, "KSRC", 'T', #305
	SYMB	TYPE, 307, "SSTATE", 'T', #267
	SYMB	TYPE, 308, "MBOX", 'T', #266
	SYMB	TYPE, 309, "QUEUE", 'T', #266
	SYMB	TYPE, 310, 'N',\
		 "QNE", 0,\
		 "QNF", 1,\
		 "QF", 2,\
		 "QE", 3
	SYMB	TYPE, 311, "QCOND", 'T', #310
	SYMB	TYPE, 312, "RESOURCE", 'T', #266
	SYMB	TYPE, 313, "CLKBLK", 'T', #275
	SYMB	TYPE, 314, "time_t", 'T', #6
	SYMB	TYPE, 315, "FRAME", 'T', #283
	SYMB	ENDF
	SYMB	FILE, "ctask.h"
	SYMB	ENDF
	SYMB	FILE, "csema.h"
	SYMB	ENDF
	SYMB	FILE, "cres.h"
	SYMB	ENDF
	SYMB	FILE, "cqueue.h"
	SYMB	ENDF
	SYMB	FILE, "cpart.h"
	SYMB	ENDF
	SYMB	FILE, "cmbox.h"
	SYMB	ENDF
	SYMB	FILE, "cclock.h"
	SYMB	ENDF
	SYMB	TYPE, 317, 'n', #316, 130
	SYMB	TYPE, 318, 'P', #317
	SYMB	TYPE, 316, 'X', 12, #1, 30, 2, #318, #290
	SYMB	TYPE, 320, 'n', #319, 129
	SYMB	TYPE, 321, 'P', #320
	SYMB	TYPE, 322, 'X', 12, #1, 30, 1, #318
	SYMB	TYPE, 323, 'n', #322, 129
	SYMB	TYPE, 324, 'P', #323
	SYMB	TYPE, 325, 'n', #6, 130
	SYMB	TYPE, 326, 'P', #325
	SYMB	TYPE, 325, 'X', 12, #16, 30, 2, #318, #326
	SYMB	TYPE, 328, 'n', #327, 129
	SYMB	TYPE, 329, 'P', #328
	SYMB	TYPE, 330, 'X', 12, #1, 30, 1, #318
	SYMB	TYPE, 331, 'n', #330, 129
	SYMB	TYPE, 332, 'P', #331
	SYMB	TYPE, 333, 'X', 12, #1, 30, 1, #318
	SYMB	TYPE, 334, 'n', #333, 129
	SYMB	TYPE, 335, 'P', #334
	SYMB	TYPE, 336, 'X', 12, #16, 30, 1, #318
	SYMB	TYPE, 337, 'n', #336, 129
	SYMB	TYPE, 338, 'P', #337
	SYMB	TYPE, 316, "TEvent", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TEvent", #321, 2,\
		 "_TEvent", #324, 6,\
		 "Wait", #329, 10,\
		 "Set", #332, 14,\
		 "Clear", #335, 18,\
		 "IsSet", #338, 22,\
		 "ID", #294, 26,\
		 "Name", #290, 28
	SYMB	TYPE, 339, "TEvent", 'T', #316
	SYMB	TYPE, 341, 'n', #340, 130
	SYMB	TYPE, 342, 'P', #341
	SYMB	TYPE, 340, 'X', 12, #1, 30, 1, #342
	SYMB	TYPE, 344, 'n', #343, 129
	SYMB	TYPE, 345, 'P', #344
	SYMB	TYPE, 346, 'X', 12, #1, 30, 1, #342
	SYMB	TYPE, 347, 'n', #346, 129
	SYMB	TYPE, 348, 'P', #347
	SYMB	TYPE, 349, 'n', #339, 130
	SYMB	TYPE, 350, 'P', #349
	SYMB	TYPE, 349, 'X', 12, #16, 30, 2, #342, #350
	SYMB	TYPE, 352, 'n', #351, 129
	SYMB	TYPE, 353, 'P', #352
	SYMB	TYPE, 354, 'X', 12, #1, 30, 2, #342, #350
	SYMB	TYPE, 355, 'n', #354, 129
	SYMB	TYPE, 356, 'P', #355
	SYMB	TYPE, 357, 'X', 12, #16, 30, 2, #342, #350
	SYMB	TYPE, 358, 'n', #357, 129
	SYMB	TYPE, 359, 'P', #358
	SYMB	TYPE, 360, 'X', 12, #350, 30, 2, #342, #326
	SYMB	TYPE, 361, 'n', #360, 129
	SYMB	TYPE, 362, 'P', #361
	SYMB	TYPE, 363, 'Z', #2, 95
	SYMB	TYPE, 340, "TEventList", 'S', 122,\
		 "ObjectID", #16, 0,\
		 "TEventList", #345, 2,\
		 "_TEventList", #348, 6,\
		 "Append", #353, 10,\
		 "Clear", #356, 14,\
		 "InList", #359, 18,\
		 "Wait", #362, 22,\
		 "Align", #363, 26
	SYMB	TYPE, 365, "TEventList", 'T', #340
	SYMB	TYPE, 367, 'n', #366, 130
	SYMB	TYPE, 368, 'P', #367
	SYMB	TYPE, 366, 'X', 12, #1, 30, 2, #368, #290
	SYMB	TYPE, 370, 'n', #369, 129
	SYMB	TYPE, 371, 'P', #370
	SYMB	TYPE, 372, 'X', 12, #1, 30, 1, #368
	SYMB	TYPE, 373, 'n', #372, 129
	SYMB	TYPE, 374, 'P', #373
	SYMB	TYPE, 375, 'X', 12, #1, 30, 1, #368
	SYMB	TYPE, 376, 'n', #375, 129
	SYMB	TYPE, 377, 'P', #376
	SYMB	TYPE, 378, 'X', 12, #1, 30, 1, #368
	SYMB	TYPE, 379, 'n', #378, 129
	SYMB	TYPE, 380, 'P', #379
	SYMB	TYPE, 381, 'X', 12, #16, 30, 1, #368
	SYMB	TYPE, 382, 'n', #381, 129
	SYMB	TYPE, 383, 'P', #382
	SYMB	TYPE, 366, "TResource", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TResource", #371, 2,\
		 "_TResource", #374, 6,\
		 "Lock", #377, 10,\
		 "Unlock", #380, 14,\
		 "Owner", #383, 18,\
		 "ID", #312, 22,\
		 "Name", #290, 24
	SYMB	TYPE, 384, "TResource", 'T', #366
	SYMB	TYPE, 385, 'X', 12, #1, 30, 0
	SYMB	TYPE, 386, 'n', #385, 129
	SYMB	TYPE, 387, 'P', #386
	SYMB	TYPE, 389, 'n', #388, 130
	SYMB	TYPE, 390, 'P', #389
	SYMB	TYPE, 385, 'X', 12, #1, 30, 3, #390, #16, #387
	SYMB	TYPE, 392, 'n', #391, 129
	SYMB	TYPE, 393, 'P', #392
	SYMB	TYPE, 394, 'X', 12, #1, 30, 1, #390
	SYMB	TYPE, 395, 'n', #394, 129
	SYMB	TYPE, 396, 'P', #395
	SYMB	TYPE, 397, 'X', 12, #1, 30, 1, #390
	SYMB	TYPE, 398, 'n', #397, 129
	SYMB	TYPE, 399, 'P', #398
	SYMB	TYPE, 400, 'X', 12, #1, 30, 2, #390, #16
	SYMB	TYPE, 401, 'n', #400, 129
	SYMB	TYPE, 402, 'P', #401
	SYMB	TYPE, 403, 'X', 12, #1, 30, 1, #390
	SYMB	TYPE, 404, 'n', #403, 129
	SYMB	TYPE, 405, 'P', #404
	SYMB	TYPE, 406, 'X', 12, #16, 30, 1, #390
	SYMB	TYPE, 407, 'n', #406, 129
	SYMB	TYPE, 408, 'P', #407
	SYMB	TYPE, 409, 'X', 12, #1, 30, 2, #390, #16
	SYMB	TYPE, 410, 'n', #409, 129
	SYMB	TYPE, 411, 'P', #410
	SYMB	TYPE, 388, "TThread", 'S', 36,\
		 "ObjectID", #16, 0,\
		 "TThread", #393, 2,\
		 "Execute", #396, 6,\
		 "Terminate", #399, 10,\
		 "Suspend", #402, 14,\
		 "Resume", #405, 18,\
		 "GetPriority", #408, 22,\
		 "SetPriority", #411, 26,\
		 "ID", #267, 30,\
		 "Status", #2, 31,\
		 "Stack", #290, 32
	SYMB	TYPE, 412, "TThread", 'T', #388
	SYMB	TYPE, 414, 'n', #413, 130
	SYMB	TYPE, 415, 'P', #414
	SYMB	TYPE, 413, 'X', 12, #1, 30, 1, #415
	SYMB	TYPE, 417, 'n', #416, 129
	SYMB	TYPE, 418, 'P', #417
	SYMB	TYPE, 419, 'X', 12, #1, 30, 1, #415
	SYMB	TYPE, 420, 'n', #419, 129
	SYMB	TYPE, 421, 'P', #420
	SYMB	TYPE, 422, 'X', 12, #1, 30, 2, #415, #16
	SYMB	TYPE, 423, 'n', #422, 129
	SYMB	TYPE, 424, 'P', #423
	SYMB	TYPE, 425, 'X', 12, #16, 30, 1, #415
	SYMB	TYPE, 426, 'n', #425, 129
	SYMB	TYPE, 427, 'P', #426
	SYMB	TYPE, 428, 'X', 12, #1, 30, 2, #415, #16
	SYMB	TYPE, 429, 'n', #428, 129
	SYMB	TYPE, 430, 'P', #429
	SYMB	TYPE, 431, 'n', #313, 130
	SYMB	TYPE, 432, 'P', #431
	SYMB	TYPE, 413, "TTimer", 'S', 32,\
		 "ObjectID", #16, 0,\
		 "TTimer", #418, 2,\
		 "_TTimer", #421, 6,\
		 "SetPeriod", #424, 10,\
		 "GetPeriod", #427, 14,\
		 "Tick", #430, 18,\
		 "TimeOut", #350, 22,\
		 "Period", #4, 26,\
		 "Handle", #432, 28
	SYMB	TYPE, 433, "TTimer", 'T', #413
	SYMB	TYPE, 435, 'n', #434, 130
	SYMB	TYPE, 436, 'P', #435
	SYMB	TYPE, 434, 'X', 12, #1, 30, 3, #436, #16, #16
	SYMB	TYPE, 438, 'n', #437, 129
	SYMB	TYPE, 439, 'P', #438
	SYMB	TYPE, 440, 'X', 12, #1, 30, 1, #436
	SYMB	TYPE, 441, 'n', #440, 129
	SYMB	TYPE, 442, 'P', #441
	SYMB	TYPE, 443, 'X', 12, #290, 30, 2, #436, #292
	SYMB	TYPE, 444, 'n', #443, 129
	SYMB	TYPE, 445, 'P', #444
	SYMB	TYPE, 446, 'X', 12, #1, 30, 2, #436, #292
	SYMB	TYPE, 447, 'n', #446, 129
	SYMB	TYPE, 448, 'P', #447
	SYMB	TYPE, 434, "TStream", 'S', 28,\
		 "ObjectID", #16, 0,\
		 "TStream", #439, 2,\
		 "_TStream", #442, 6,\
		 "Get", #445, 10,\
		 "Put", #448, 14,\
		 "ID", #309, 18,\
		 "Width", #16, 20,\
		 "Depth", #16, 22,\
		 "Handle", #290, 24
	SYMB	TYPE, 449, "TStream", 'T', #434
	SYMB	ENDF
	SYMB	ENDF
; unitprg.c   29	
; unitprg.c   30	volatile UI BBSPGResetPort _at( 0x6a018);		// Port defined in PLD
; unitprg.c   31	
; unitprg.c   32	_bit UnitPgmMode;
; unitprg.c   33	_bit JKflag;
; unitprg.c   34	
; unitprg.c   35	/**************************************************************************/
; unitprg.c   36	/* BBSPGReset																									  UNITPRG.C	*/
; unitprg.c   37	/*																																				*/
; unitprg.c   38	/* Author:	 Kim Engedahl, DEV, 000330																		*/
; unitprg.c   39	/* Revised:	 000330, KEn, DEV     																				*/
; unitprg.c   40	/*																																				*/
; unitprg.c   41	/* Function:   																														*/
; unitprg.c   42	/* Remarks:	 																															*/
; unitprg.c   43	/* Returns:																																*/
; unitprg.c   44	/* Updates:																																*/
; unitprg.c   45	/**************************************************************************/
; unitprg.c   46	void BBSPGReset( bool SPGReset, bool BBReset, bool SPGPrg)
; unitprg.c   47	{
UNITPRG_PR	SEGMENT	HCODE
	RSEG	UNITPRG_PR
	ALIGN	1
	SYMB	LINE, 47
	PUBLIC	_BBSPGReset
_BBSPGReset:
	SYMB	TYPE, 450, 'X', 12, #1, 30, 3, #265, #265, #265
	SYMB	GFUN, "BBSPGReset", _BBSPGReset, #450, 0, 0, 0
	SYMB	ALAB, _BBSPGReset, #450
	SYMB	LTIM, "SPGReset", 2, 0, 2253
	SYMB	LTIM, "BBReset", 6, 0, 2253
	SYMB	LTIM, "SPGPrg", 10, 0, 2253
	SYMB	IDEN, "SPGReset", 2, #265, 0, 2061
	SYMB	IDEN, "BBReset", 6, #265, 0, 2061
	SYMB	IDEN, "SPGPrg", 10, #265, 0, 2061
	SYMB	IDEN, "tmp", -1, #18, 130, 5
	SYMB	LTIM, "tmp", -1, 0, 69
; unitprg.c   48		UI tmp = 3;
	SYMB	LINE, 48
	MOV.W	R3,#03H
	SYMB	LTIM, "tmp", 14, 0, 205
; unitprg.c   49	
; unitprg.c   50		if ( SPGReset)
	SYMB	LINE, 50
	OR.W	R0,R0
	BEQ	_3
; unitprg.c   51			tmp &= 0xFE;
	SYMB	LINE, 51
	MOV.W	R3,#02H
	SYMB	LTIM, "tmp", 14, 0, 77
	SYMB	LTIM, "tmp", 14, 0, 205
_3:
; unitprg.c   52	
; unitprg.c   53		if ( BBReset)
	SYMB	LINE, 53
	OR.W	R1,R1
	BEQ	_4
; unitprg.c   54			tmp &= 0xFD;
	SYMB	LINE, 54
	AND.W	R3,#0FDH
	SYMB	LTIM, "tmp", 14, 0, 77
	SYMB	LTIM, "tmp", 14, 0, 205
_4:
; unitprg.c   55	
; unitprg.c   56		if ( SPGPrg)
	SYMB	LINE, 56
	OR.W	R2,R2
	BEQ	_5
; unitprg.c   57			tmp |= 0x04;
	SYMB	LINE, 57
	OR.W	R3,#04H
	SYMB	LTIM, "tmp", 14, 0, 77
	SYMB	LTIM, "tmp", 14, 0, 205
_5:
; unitprg.c   58	
; unitprg.c   59		BBSPGResetPort = tmp;
	SYMB	LINE, 59
	MOV.B	ES,#SEG( _BBSPGResetPort )
	MOV.W	R0,#SOF( _BBSPGResetPort )
	MOV.W	[R0],R3
; unitprg.c   60	}
	SYMB	LINE, 60
	RET
	SYMB	LTIM, "tmp", 14, 0, 77
	SYMB	LTIM, "SPGPrg", 10, 0, 2125
	SYMB	LTIM, "BBReset", 6, 0, 2125
	SYMB	LTIM, "SPGReset", 2, 0, 2125
	SYMB	EFUN
; unitprg.c   61	
; unitprg.c   62	/**************************************************************************/
; unitprg.c   63	/* BBSPGCommunication																					  UNITPRG.C	*/
; unitprg.c   64	/*																																				*/
; unitprg.c   65	/* Author:	 Kim Engedahl, DEV, 000407																		*/
; unitprg.c   66	/* Revised:	 000607, KEn DEV 	    																				*/
; unitprg.c   67	/*							         																									*/
; unitprg.c   68	/* Function:   																														*/
; unitprg.c   69	/* Remarks:	 																															*/
; unitprg.c   70	/* Returns:																																*/
; unitprg.c   71	/* Updates:																																*/
; unitprg.c   72	/**************************************************************************/
; unitprg.c   73	void BBSPGCommunication( int unit)
; unitprg.c   74	{
	ALIGN	1
	SYMB	LINE, 74
	PUBLIC	_BBSPGCommunication
_BBSPGCommunication:
	SYMB	TYPE, 451, 'X', 12, #1, 30, 1, #16
	SYMB	GFUN, "BBSPGCommunication", _BBSPGCommunication, #451, 0, 0, 48
	SYMB	ALAB, _BBSPGCommunication, #451
	PUSH.W	R4, R5
	SYMB	SOFF, 4
	SYMB	LTIM, "unit", 2, 0, 2253
	MOV.W	R5,R0
	SYMB	LTIM, "unit", 2, 0, 2125
	SYMB	LTIM, "unit", 22, 0, 2253
	SYMB	IDEN, "unit", 22, #16, 0, 2061
	SYMB	IDEN, "i", -1, #18, 130, 5
	SYMB	LTIM, "i", -1, 0, 69
	SYMB	IDEN, "Test1LEDFlag", -1, #265, 130, 5
	SYMB	LTIM, "Test1LEDFlag", -1, 0, 69
; unitprg.c   75		UI i;
; unitprg.c   76	 	bool Test1LEDFlag = FALSE;
	SYMB	LINE, 76
	MOV.W	R4,#00H
	SYMB	LTIM, "Test1LEDFlag", 18, 0, 205
; unitprg.c   77	
; unitprg.c   78		EA = 0;
	SYMB	LINE, 78
	CLR	0337H
; unitprg.c   79	
; unitprg.c   80		BBSPGReset( true, true, true); 			// Set program bit and reset units
	SYMB	LINE, 80
	MOV.W	R0,#0FFFFH
	MOV.W	R1,#0FFFFH
	MOV.W	R2,#0FFFFH
	CALL	_BBSPGReset
; unitprg.c   81	
; unitprg.c   82		for ( i = 0; i < 60000; i++)	 			//  Wait
	SYMB	LINE, 82
	MOV.W	R0,#00H
	SYMB	LTIM, "i", 2, 0, 205
_6:
	ADDS.W	R0,#01H
	SYMB	LTIM, "i", 2, 0, 77
	SYMB	LTIM, "i", 2, 0, 205
	CMP.W	R0,#0EA60H
	BCS	_6
; unitprg.c   83			;
; unitprg.c   84	
; unitprg.c   85		if ( unit == 0)
	SYMB	LINE, 85
	OR.W	R5,R5
	BNE	_7
; unitprg.c   86	 		BBSPGReset( true, false, true);		// Release reset for unit to be programmed
	SYMB	LINE, 86
	MOV.W	R0,#0FFFFH
	SYMB	LTIM, "i", 2, 0, 77
	MOV.W	R1,#00H
	MOV.W	R2,#0FFFFH
	CALL	_BBSPGReset
	BR	_8
_7:
; unitprg.c   87		else
; unitprg.c   88	 		BBSPGReset( false, true, true);		// Release reset for unit to be programmed
	SYMB	LINE, 88
	MOV.W	R1,#0FFFFH
	MOV.W	R0,#00H
	MOV.W	R2,#0FFFFH
	CALL	_BBSPGReset
_8:
; unitprg.c   89	
; unitprg.c   90		IEH = 0;										// Disable ALL interrupts
	SYMB	LINE, 90
	MOV.B	0427H,#00H
; unitprg.c   91		IEL = 0;
	SYMB	LINE, 91
	MOV.B	0426H,#00H
; unitprg.c   92	
; unitprg.c   93		UnitPgmMode = 1;
	SYMB	LINE, 93
	SETB	_UnitPgmMode
; unitprg.c   94	
; unitprg.c   95		TR2 = 0;										// Stop timer 2
	SYMB	LINE, 95
	CLR	02C2H
; unitprg.c   96		T2CON &= 0xCF;							// Use timer 1 as baud rate generator for both
	SYMB	LINE, 96
	AND.B	0418H,#0CFH
; unitprg.c   97		T2MOD &= 0xCF;							//  serial ports.
	SYMB	LINE, 97
	AND.B	0419H,#0CFH
; unitprg.c   98	
; unitprg.c   99		S0CON = 0xD8;								// UART mode 1: 1 start, 9 data, 1 stop,
	SYMB	LINE, 99
	MOV.B	0420H,#0D8H
; unitprg.c  100																//  (9th bit used as stop bit)
; unitprg.c  101	
; unitprg.c  102		S1CON = 0xD8;								// UART mode 1: 1 start, 9 data, 1 stop,
	SYMB	LINE, 102
	MOV.B	0424H,#0D8H
; unitprg.c  103																//  (9th bit used as stop bit)
; unitprg.c  104	
; unitprg.c  105		TR1 = 0;										// Stop Timer 1, just in case you know
	SYMB	LINE, 105
	CLR	0286H
; unitprg.c  106	
; unitprg.c  107		TMOD &= 0x0F;								// Timer 1: 16-bit auto-reload timer
	SYMB	LINE, 107
	AND.B	045CH,#0FH
; unitprg.c  108	
; unitprg.c  109		TH1 = RTH1 = 0xFF; 					// 115200 baud
	SYMB	LINE, 109
	MOV.B	0457H,#0FFH
	MOV.B	0453H,0457H
; unitprg.c  110		TL1 = RTL1 = 0xFC;
	SYMB	LINE, 110
	MOV.B	0456H,#0FCH
	MOV.B	0452H,0456H
; unitprg.c  111	
; unitprg.c  112		TR1 = 1;										// Start Timer 1
	SYMB	LINE, 112
	SETB	0286H
; unitprg.c  113	
; unitprg.c  114		RI_0 = 0;					 					// Clear possible Interrupt flag RI_0
	SYMB	LINE, 114
	CLR	0300H
; unitprg.c  115		TI_0 = 0;					 					// Clear possible Interrupt flag TI_0
	SYMB	LINE, 115
	CLR	0301H
; unitprg.c  116	
; unitprg.c  117		RI_1 = 0;					 					// Clear possible Interrupt flag RI_1
	SYMB	LINE, 117
	CLR	0320H
; unitprg.c  118		TI_1 = 0;					 					// Clear possible Interrupt flag TI_1
	SYMB	LINE, 118
	CLR	0321H
; unitprg.c  119	
; unitprg.c  120		ERI0 = 1;										// Enable SIO0 Rx-interrupt
	SYMB	LINE, 120
	SETB	0338H
; unitprg.c  121		ETI0 = 1;										// Enable SIO0 Tx-interrupt
	SYMB	LINE, 121
	SETB	0339H
; unitprg.c  122	
; unitprg.c  123		ERI1 = 1;										// Enable SIO1 Rx-interrupt
	SYMB	LINE, 123
	SETB	033AH
; unitprg.c  124		ETI1 = 1;										// Enable SIO1 Tx-interrupt
	SYMB	LINE, 124
	SETB	033BH
; unitprg.c  125	
; unitprg.c  126		EA = 1;
	SYMB	LINE, 126
	SETB	0337H
; unitprg.c  127	
; unitprg.c  128		while ( true)
	SYMB	LINE, 128
_9:
; unitprg.c  129		{
; unitprg.c  130			for ( i = 0; i < 60000; i++)
	SYMB	LINE, 130
	MOV.W	R0,#00H
	SYMB	LTIM, "i", 2, 0, 205
_10:
	ADDS.W	R0,#01H
	SYMB	LTIM, "i", 2, 0, 77
	SYMB	LTIM, "i", 2, 0, 205
	CMP.W	R0,#0EA60H
	BCS	_10
; unitprg.c  131				;
; unitprg.c  132	
; unitprg.c  133			Test1LEDFlag ^= 1;
	SYMB	LINE, 133
	XOR.W	R4,#01H
	SYMB	LTIM, "Test1LEDFlag", 18, 0, 77
	SYMB	LTIM, "Test1LEDFlag", 18, 0, 205
; unitprg.c  134			TestLEDSet( Test1LED, Test1LEDFlag);
	SYMB	LINE, 134
	MOV.W	R0,#01H
	SYMB	LTIM, "i", 2, 0, 77
	MOV.W	R1,R4
	SYMB	LTIM, "Test1LEDFlag", 18, 0, 77
	SYMB	LTIM, "Test1LEDFlag", 6, 0, 205
	CALL	_TestLEDSet
	SYMB	LTIM, "Test1LEDFlag", 6, 0, 77
	SYMB	LTIM, "Test1LEDFlag", 18, 0, 205
	SYMB	LINE, 128
	BR	_9
; unitprg.c  135		}
; unitprg.c  136	}
	SYMB	LINE, 136
	POP.W	R4, R5
	SYMB	SOFF, 0
	RET
	SYMB	LTIM, "Test1LEDFlag", 18, 0, 77
	SYMB	LTIM, "unit", 22, 0, 2125
	SYMB	EFUN
; unitprg.c  137	
	SYMB	ENDF

	SYMB	IDEN, "BBSPGResetPort", _BBSPGResetPort, #18, 130, 0
	SYMB	ALAB, _BBSPGResetPort, #18
	HSEG AT 06A018H
	PUBLIC	_BBSPGResetPort
	ALIGN	1
_BBSPGResetPort:	DS	2
	SYMB	TYPE, 452, 'X', 12, #16, 30, 2, #18, #265
	SYMB	ALAB, _TestLEDSet, #452
	EXTRN	HCODE(_TestLEDSet)
	SYMB	IDEN, "JKflag", _JKflag, #256, 22, 0
	SYMB	ALAB, _JKflag, #256
UNITPRG_CLR_BI@DS	SEGMENT	BIT JOIN
	RSEG	UNITPRG_CLR_BI@DS
	PUBLIC	_JKflag
_JKflag:	DBIT	1
	SYMB	IDEN, "UnitPgmMode", _UnitPgmMode, #256, 22, 0
	SYMB	ALAB, _UnitPgmMode, #256
	PUBLIC	_UnitPgmMode
_UnitPgmMode:	DBIT	1
	EXTRN	DATA(__lc_ub_xvwbuffer)
	EXTRN	DATA(__lc_ue_xvwbuffer)
	CALLS	'BBSPGCommunication', 'BBSPGReset'
	CALLS	'BBSPGCommunication', 'TestLEDSet'
	END
