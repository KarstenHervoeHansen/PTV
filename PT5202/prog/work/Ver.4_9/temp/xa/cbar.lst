XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   1
F:\PT5202\prog\work\Ver.4_9\temp\xa\cbar.src
ADDR   CODE            LINE SOURCELINE
                          1 ; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
                          2 ; options: -A1 -Cxag3 -e -g -IcF:\PT5202\prog\include
                          3 ;          -IF:\PT5202\prog\rtxc\xa\include -I. -Ml -O2 -s
                          5 $NOZPAGE
                          6         NAME    CBAR
                         10 ; cbar.c      1 /****************************************************************************/
                         11 ; cbar.c      2 /* MODULE:                                                                  */
                         12 ; cbar.c      3 /*  cbar.c - ColorBar generator                                             */
                         13 ; cbar.c      4 /****************************************************************************/
                         14 ; cbar.c      5 /* FUNCTIONS:                                                               */
                         15 ; cbar.c      6 /*                                                                          */
                         16 ; cbar.c      7 /*  int WriteCBGain( UC gain)                                               */
                         17 ; cbar.c      8 /*  int WriteCBChromaGain( UC gain)                                          */
                         18 ; cbar.c      9 /*  int SRAMVideoLoad( UC signal, UC bank)                                  */
                         19 ; cbar.c     10 /*  int SRAMSoundLoad( UC signal)                                           */
                         20 ; cbar.c     11 /*  void CBLineInterrupt( void)                                             */
                         21 ; cbar.c     12 /*  void CBDefaults( void)                                                  */
                         22 ; cbar.c     13 /*  int CBInit( void)                                                        */
                         23 ; cbar.c     14 /*  int CBUpdate( void)                                                      */
                         24 ; cbar.c     15 /*  int SetCBPattern( UI pattern)                                            */
                         25 ; cbar.c     16 /*  int SetCBSystem( UC system)                                              */
                         26 ; cbar.c     17 /*  int SetCBDelay( UL delay)                                                */
                         27 ; cbar.c     18 /*  int SetCBScHPhase( int schphase)                                        */
                         28 ; cbar.c     19 /*  int SetCBEmbAudioSignal( UC signal)                                     */
                         29 ; cbar.c     20 /*  int ValidateCBPattern( UC system, UI *pattern)                          */  
                         30 ; cbar.c     21 /*                                                                          */
                         31 ; cbar.c     22 /* TASKS:                                                                   */
                         32 ; cbar.c     23 /*                                                                          */
                         33 ; cbar.c     24 /* NOTES:                                                                   */
                         34 ; cbar.c     25 /*                                                                          */
                         35 ; cbar.c     26 /****************************************************************************/
                         36 ; cbar.c     27 /*
                         37 ; cbar.c     28  *   PTV software for PT5201    
                         38 ; cbar.c     29  *   Copyright (c) 
                         39 ; cbar.c     30  *   ProTeleVision Technologies A/S.
                         40 ; cbar.c     31  *   ALL RIGHTS RESERVED
                         41 ; cbar.c     32 */
                         42 ; cbar.c     33 /****************************************************************************/
                         43 ; cbar.c     34 
                         44 ; cbar.c     35 #include "reg8051.h"
                         47 ; cbar.c     36 #include "define.h"        // Standard PTV defines
                         50 ; cbar.c     37 #include "rtxcobj.h"
                        380 ; cbar.c     38 #include "config.h" 
                        383 ; cbar.c     39 #include "audio.h"
                        394 ; cbar.c     40 #include "cbar.h"
                        404 ; cbar.c     41 #include "tables.h"
                        407 ; cbar.c     42 #include "led_hw.h"
                        414 ; cbar.c     43 #include "tvp6kdrv.h"
                        417 ; cbar.c     44 #include "i2c_drv.h"
                        420 ; cbar.c     45 #include "instru.h"
                        509 ; cbar.c     46 
                        510 ; cbar.c     47 #define SRAMBank0      0x00
                        511 ; cbar.c     48 #define SRAMBank1      0x10
                        512 ; cbar.c     49 #define SRAMBank2      0x14
                        513 ; cbar.c     50 #define SRAMBank3      0x18
                        514 ; cbar.c     51 #define SRAMBank4      0x1C
                        515 ; cbar.c     52 #define SRAMBank5      0x20
                        516 ; cbar.c     53 #define SRAMBank6      0x24
                        517 ; cbar.c     54 #define SRAMBank7      0x28
                        518 ; cbar.c     55 #define SRAMBank8      0x2C
                        519 ; cbar.c     56 #define SRAMBank9      0x30
                        520 ; cbar.c     57 #define SRAMBank10    0x34
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   2

ADDR   CODE            LINE SOURCELINE
                        521 ; cbar.c     58 #define SRAMBank11    0x38
                        522 ; cbar.c     59 #define SRAMBank12    0x3C
                        523 ; cbar.c     60 
                        524 ; cbar.c     61 #define dEBUCBar_8bit_625           0
                        525 ; cbar.c     62 #define dEBUCBar_625              1
                        526 ; cbar.c     63 #define dSMPTECBar                2
                        527 ; cbar.c     64 #define dBlueBars                  3
                        528 ; cbar.c     65 #define dIWhiteQ                  4
                        529 ; cbar.c     66 #define dCBar100_625              5
                        530 ; cbar.c     67 #define dGrey75_625                6
                        531 ; cbar.c     68 #define dRed75_625                7
                        532 ; cbar.c     69 #define dRed75_525                8
                        533 ; cbar.c     70 #define dChroma_Multiburst        9
                        534 ; cbar.c     71 #define d_CCIR18_625              9
                        535 ; cbar.c     72 #define dFCC_Multiburst_525        10
                        536 ; cbar.c     73 #define dChroma_Multiburst_525    11
                        537 ; cbar.c     74 #define dWhiteLine_625            11
                        538 ; cbar.c     75 #define dCrossHatch19_625          12
                        539 ; cbar.c     76 #define dWhiteLine_525            13
                        540 ; cbar.c     77 #define dCrossHatch17_525          14
                        541 ; cbar.c     78 #define dPlugeWhite_625            15
                        542 ; cbar.c     79 #define dPlugeGreyC_625            16
                        543 ; cbar.c     80 #define dPlugeGreyD_625            17
                        544 ; cbar.c     81 #define dPlugeGreyE_625            18
                        545 ; cbar.c     82 #define dPlugeWhite_525            19
                        546 ; cbar.c     83 #define dPlugeGreyC_525            20
                        547 ; cbar.c     84 #define dPlugeGreyD_525            21
                        548 ; cbar.c     85 #define dPlugeGreyE_525            22
                        549 ; cbar.c     86 #define dGreyScale5_625            23
                        550 ; cbar.c     87 #define dGreyScale5_525            24
                        551 ; cbar.c     88 #define dGreyScale10_625          25
                        552 ; cbar.c     89 #define dGreyScale10_525          26
                        553 ; cbar.c     90 #define dWindow50Marker            27
                        554 ; cbar.c     91 #define dMarkerLine              28
                        555 ; cbar.c     92 #define dWindow15                29
                        556 ; cbar.c     93 #define dMarker15                30
                        557 ; cbar.c     94 #define dWindow20                31
                        558 ; cbar.c     95 #define dMarker20                32
                        559 ; cbar.c     96 #define dWindow100              33
                        560 ; cbar.c     97 #define dMarker100              34
                        561 ; cbar.c     98 #define dDigitalGrey_625          35
                        562 ; cbar.c     99 #define dDigitalGrey_525          36
                        563 ; cbar.c    100 #define dSDI_test_line1            37
                        564 ; cbar.c    101 #define dSDI_test_line2            38
                        565 ; cbar.c    102 #define dSDI_test_line3            39
                        566 ; cbar.c    103 #define dCBar75_STD_625             40
                        567 ; cbar.c    104 #define dFCC_CBar_525              41
                        568 ; cbar.c    105 #define dFCC_CBar100_525          42
                        569 ; cbar.c    106 #define dWindow10                  43
                        570 ; cbar.c    107 #define dMarker10                  44
                        571 ; cbar.c    108 #define dkHz15BlWh_625            45
                        572 ; cbar.c    109 #define dkHz15BlWh_525            46
                        573 ; cbar.c    110 #define dCCIR18_625                47
                        574 ; cbar.c    111 
                        575 ; cbar.c    112 /****************************************************************************/
                        576 ; cbar.c    113 /*
                        577 ; cbar.c    114 The statusport is defined in the PLD as:
                        578 ; cbar.c    115 
                        579 ; cbar.c    116   bit 0:  S0        Background system
                        580 ; cbar.c    117   bit 1:  S1
                        581 ; cbar.c    118 
                        582 ; cbar.c    119   bit 2:  S2        Linetype
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   3

ADDR   CODE            LINE SOURCELINE
                        583 ; cbar.c    120   bit 3:  S3
                        584 ; cbar.c    121   bit 4:  S4
                        585 ; cbar.c    122   bit 5:  S5
                        586 ; cbar.c    123 
                        587 ; cbar.c    124   bit 6:  SYSSEL    System select ( 0:G, 1:M)
                        588 ; cbar.c    125   bit 7:  SOUND      Sound ( 0:off, 1:on)
                        589 ; cbar.c    126 
                        590 ; cbar.c    127   bit 8:  3OR4      Samples in sound ( 0:3 samples, 1:4 samples)
                        591 ; cbar.c    128   bit 9:  FIELD1    Field one bit ( 1 in Field 1/line 1 (out of 8/4) otherwise 0)
                            
                        592 ; cbar.c    129   bit 10: CB  
                        593 ; cbar.c    130   bit 11: EDHON      EDH bit for future use ( 0:off, 1:on)
                        594 ; cbar.c    131 
                        595 ; cbar.c    132   bit 12: PS        PS ( 0:disable writing in SRAM, 1: enable writing in SRAM)
                        596 ; cbar.c    133   bit 13: Line7      Line 7 pulse in PAL w/PAL_ID
                        597 ; cbar.c    134   bit 14: PhaseReg  Phase offset register select
                        598 ; cbar.c    135   bit 15: -          Not used
                        599 ; cbar.c    136 */
                        600 ; cbar.c    137 /****************************************************************************/
                        601 ; cbar.c    138                     
                        602 ; cbar.c    139 #define S1S0        0x0003
                        603 ; cbar.c    140 #define S5S4S3S2    0x003C
                        604 ; cbar.c    141 #define SYSSEL      0x0040
                        605 ; cbar.c    142 #define SOUNDON      0x0080
                        606 ; cbar.c    143 #define S3OR4        0x0100
                        607 ; cbar.c    144 #define FIELD1      0x0200
                        608 ; cbar.c    145 #define CB          0x0400
                        609 ; cbar.c    146 #define EDHON        0x0800
                        610 ; cbar.c    147 #define PS          0x1000
                        611 ; cbar.c    148 #define LINE7PULSE  0x2000
                        612 ; cbar.c    149 #define PHASEREGSEL  0x4000
                        613 ; cbar.c    150 
                        614 ; cbar.c    151 #define SOUND        (int)(SOUNDON + S3OR4)
                        615 ; cbar.c    152 
                        616 ; cbar.c    153 #define SyncLineA    1
                        617 ; cbar.c    154 #define SyncLineB   0
                        618 ; cbar.c    155 #define SyncLineC   2
                        619 ; cbar.c    156 #define SyncLineD   3
                        620 ; cbar.c    157 
                        621 ; cbar.c    158 /****************************************************************************/
                        622 ; cbar.c    159 // Prototypes internal functions
                        623 ; cbar.c    160 
                        624 ; cbar.c    161 int ValidateCBPattern( UC system, UI *pattern);
                        625 ; cbar.c    162 
                        626 ; cbar.c    163 /* Tables start at TSTART  */
                        627 ; cbar.c    164 
                        628 ; cbar.c    165 #define TSTART 0x800
                        629 ; cbar.c    166 
                        630 ; cbar.c    167 _ROM_ UI TEST_SMPTECBarTable[] _at(TSTART) =
000800                  631         HCSEG AT 0800H
                        635         PUBLIC  _TEST_SMPTECBarTable
                        636         ALIGN   1
                        636         ALIGN   1
000800                  637 _TEST_SMPTECBarTable:
000800 0103001012A416   638         DW      00301H,01000H,0A412H,01316H,03D1AH,00200H,01101H,0A313H
       131A3D00020111       
       13A3                 
                        639 ; cbar.c    168 {
                        640 ; cbar.c    169         3*256   +                                                       SyncLineA
                            ,
                        641 ; cbar.c    170         16*256  +                                                       SyncLineB
                            ,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   4

ADDR   CODE            LINE SOURCELINE
                        642 ; cbar.c    171         164*256 +       SRAMBank1 + SyncLineC,
                        643 ; cbar.c    172         19*256  +       SRAMBank2 + SyncLineC,
                        644 ; cbar.c    173         61*256  +       SRAMBank3 + SyncLineC,
                        645 ; cbar.c    174 
                        646 ; cbar.c    175         2*256           +                                                       S
                            yncLineB,
                        647 ; cbar.c    176         17*256  +                                                       SyncLineA
                            ,
                        648 ; cbar.c    177         163*256 +       SRAMBank1 + SyncLineD,
                        649 ; cbar.c    178         19*256  +       SRAMBank2 + SyncLineD,
                        650 ; cbar.c    179         61*256  +       SRAMBank3 + SyncLineD,
                        651 ; cbar.c    180         0
                        652 ; cbar.c    181 };
                        653 ; cbar.c    182 
                        654 ; cbar.c    183 #define TA1 (TSTART + sizeof(TEST_SMPTECBarTable))
                        655 ; cbar.c    184 
                        656 ; cbar.c    185 _ROM_   UI PALBlackTable[] _at(TA1) =
000810 17131B3D0000     657         DW      01317H,03D1BH,00000H
000816                  658         HCSEG AT 0816H
                        661         PUBLIC  _PALBlackTable
                        662         ALIGN   1
                        662         ALIGN   1
000816                  663 _PALBlackTable:
000816 00160290029000   664         DW      01600H,09002H,09002H,00200H,01701H,09003H,09003H,00201H
       02011703900390       
       0102                 
                        665 ; cbar.c    186 {
                        666 ; cbar.c    187         22*256  +                                                       SyncLineB
                            ,
                        667 ; cbar.c    188         144*256 +                                                       SyncLineC
                            ,
                        668 ; cbar.c    189         144*256 +                                                       SyncLineC
                            ,
                        669 ; cbar.c    190         2*256           +                                                       S
                            yncLineB,
                        670 ; cbar.c    191 
                        671 ; cbar.c    192         23*256  +                                                       SyncLineA
                            ,
                        672 ; cbar.c    193         144*256 +                                                       SyncLineD
                            ,
                        673 ; cbar.c    194         144*256 +                                                       SyncLineD
                            ,
                        674 ; cbar.c    195         2*256           +                                                       S
                            yncLineA,
                        675 ; cbar.c    196         0
                        676 ; cbar.c    197 };
                        677 ; cbar.c    198 
                        678 ; cbar.c    199 #define TA2 (TA1 + sizeof(PALBlackTable))
                        679 ; cbar.c    200 
                        680 ; cbar.c    201 _ROM_ UI PALFullFieldTable[] _at(TA2)=
000826 0000             681         DW      00000H
000828                  682         HCSEG AT 0828H
                        685         PUBLIC  _PALFullFieldTable
                        686         ALIGN   1
                        686         ALIGN   1
000828                  687 _PALFullFieldTable:
000828 00161290129000   688         DW      01600H,09012H,09012H,00200H,01701H,09013H,09013H,00201H
       02011713901390       
       0102                 
                        689 ; cbar.c    202 {
                        690 ; cbar.c    203         22*256  +                                                       SyncLineB
                            ,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   5

ADDR   CODE            LINE SOURCELINE
                        691 ; cbar.c    204         144*256 +       SRAMBank1 + SyncLineC,
                        692 ; cbar.c    205         144*256 +       SRAMBank1 + SyncLineC,
                        693 ; cbar.c    206         2*256           +                                                       S
                            yncLineB,
                        694 ; cbar.c    207 
                        695 ; cbar.c    208         23*256  +                                                       SyncLineA
                            ,
                        696 ; cbar.c    209         144*256 +       SRAMBank1 + SyncLineD,
                        697 ; cbar.c    210         144*256 +       SRAMBank1 + SyncLineD,
                        698 ; cbar.c    211         2*256           +                                                       S
                            yncLineA,
                        699 ; cbar.c    212         0
                        700 ; cbar.c    213 };
                        701 ; cbar.c    214 #define TA3 (TA2 + sizeof(PALFullFieldTable))
                        702 ; cbar.c    215 
                        703 ; cbar.c    216 _ROM_ UI PALSplitFieldTable[] _at(TA3) =
000838 0000             704         DW      00000H
00083A                  705         HCSEG AT 083AH
                        708         PUBLIC  _PALSplitFieldTable
                        709         ALIGN   1
                        709         ALIGN   1
00083A                  710 _PALSplitFieldTable:
00083A 001612C0166000   711         DW      01600H,0C012H,06016H,00200H,01701H,0C013H,06017H,00201H
       02011713C01760       
       0102                 
                        712 ; cbar.c    217 {
                        713 ; cbar.c    218         22*256  +                                                       SyncLineB
                            ,
                        714 ; cbar.c    219         192*256 +       SRAMBank1 + SyncLineC,
                        715 ; cbar.c    220         96*256  +       SRAMBank2 + SyncLineC,
                        716 ; cbar.c    221         2*256           +                                                       S
                            yncLineB,
                        717 ; cbar.c    222 
                        718 ; cbar.c    223         23*256  +                                                       SyncLineA
                            ,
                        719 ; cbar.c    224         192*256 +       SRAMBank1 + SyncLineD,
                        720 ; cbar.c    225         96*256  +       SRAMBank2 + SyncLineD,
                        721 ; cbar.c    226         2*256           +                                                       S
                            yncLineA,
                        722 ; cbar.c    227         0
                        723 ; cbar.c    228 };
                        724 ; cbar.c    229 #define TA4 (TA3 + sizeof(PALSplitFieldTable))
                        725 ; cbar.c    230 
                        726 ; cbar.c    231 _ROM_ UI PALWindowTable[] _at(TA4) =
00084A 0000             727         DW      00000H
00084C                  728         HCSEG AT 084CH
                        731         PUBLIC  _PALWindowTable
                        732         ALIGN   1
                        732         ALIGN   1
00084C                  733 _PALWindowTable:
00084C 00160218120116   734         DW      01600H,01802H,00112H,00116H,00102H,0011AH,02C02H,0901EH
       0102011A01022C       
       1E90                 
00085C 02480002011703   735         DW      04802H,00200H,01701H,01803H,00113H,00117H,00103H,0011BH
       18130117010301       
       1B01                 
                        736 ; cbar.c    232 {
                        737 ; cbar.c    233         22*256  +                                                       SyncLineB
                            ,
                        738 ; cbar.c    234         24*256  +                       SyncLineC,
                        739 ; cbar.c    235         1*256           +       SRAMBank1 + SyncLineC,
                        740 ; cbar.c    236         1*256           +       SRAMBank2 + SyncLineC,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   6

ADDR   CODE            LINE SOURCELINE
                        741 ; cbar.c    237         1*256           +                             SyncLineC,
                        742 ; cbar.c    238         1*256           +       SRAMBank3 + SyncLineC,
                        743 ; cbar.c    239         44*256  +                         SyncLineC,
                        744 ; cbar.c    240         144*256 +       SRAMBank4 + SyncLineC,
                        745 ; cbar.c    241         72*256  +                           SyncLineC,
                        746 ; cbar.c    242         2*256           +                                                       S
                            yncLineB,
                        747 ; cbar.c    243 
                        748 ; cbar.c    244         23*256  +                                                       SyncLineA
                            ,
                        749 ; cbar.c    245         24*256  +                       SyncLineD,
                        750 ; cbar.c    246         1*256           +       SRAMBank1 + SyncLineD,
                        751 ; cbar.c    247         1*256           +       SRAMBank2 + SyncLineD,
                        752 ; cbar.c    248         1*256           +                         SyncLineD,
                        753 ; cbar.c    249         1*256           +       SRAMBank3 + SyncLineD,
                        754 ; cbar.c    250         44*256  +                                     SyncLineD,
                        755 ; cbar.c    251         144*256 +       SRAMBank4 + SyncLineD,
                        756 ; cbar.c    252         72*256  +                         SyncLineD,
                        757 ; cbar.c    253         2*256           +                                                       S
                            yncLineA,
                        758 ; cbar.c    254         0
                        759 ; cbar.c    255 };
                        760 ; cbar.c    256 
                        761 ; cbar.c    257 #define TA5 (TA4 + sizeof(PALWindowTable))
                        762 ; cbar.c    258 
                        763 ; cbar.c    259 _ROM_ UI PALCheckfieldTable[] _at(TA5) =
00086C 032C1F90034801   764         DW      02C03H,0901FH,04803H,00201H,00000H
       020000               
000876                  765         HCSEG AT 0876H
                        768         PUBLIC  _PALCheckfieldTable
                        769         ALIGN   1
                        769         ALIGN   1
000876                  770 _PALCheckfieldTable:
000876 00161201168F1A   771         DW      01600H,00112H,08F16H,0901AH,00200H,01701H,09017H,0901BH
       90000201171790       
       1B90                 
                        772 ; cbar.c    260 {
                        773 ; cbar.c    261         22*256  +                                                       SyncLineB
                            ,
                        774 ; cbar.c    262         1*256           +       SRAMBank1 + SyncLineC,
                        775 ; cbar.c    263         143*256 +       SRAMBank2 + SyncLineC,
                        776 ; cbar.c    264         144*256 +       SRAMBank3 + SyncLineC,
                        777 ; cbar.c    265         2*256           +                                                       S
                            yncLineB,
                        778 ; cbar.c    266 
                        779 ; cbar.c    267         23*256  +                                                       SyncLineA
                            ,
                        780 ; cbar.c    268         144*256 +       SRAMBank2 + SyncLineD,
                        781 ; cbar.c    269         144*256 +       SRAMBank3 + SyncLineD,
                        782 ; cbar.c    270         2*256           +                                                       S
                            yncLineA,
                        783 ; cbar.c    271         0
                        784 ; cbar.c    272 };
                        785 ; cbar.c    273 
                        786 ; cbar.c    274 #define TA6 (TA5 + sizeof(PALCheckfieldTable))
                        787 ; cbar.c    275 
                        788 ; cbar.c    276 _ROM_ UI PALCrosshatchTable[] _at(TA6) =
000886 01020000         789         DW      00201H,00000H
00088A                  790         HCSEG AT 088AH
                        793         PUBLIC  _PALCrosshatchTable
                        794         ALIGN   1
                        794         ALIGN   1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   7

ADDR   CODE            LINE SOURCELINE
00088A                  795 _PALCrosshatchTable:
00088A 00161207160112   796         DW      01600H,00712H,00116H,01412H,00116H,01412H,00116H,01412H
       14160112141601       
       1214                 
00089A 16011214160112   797         DW      00116H,01412H,00116H,01412H,00116H,01412H,00116H,01412H
       14160112141601       
       1214                 
0008AA 16011214160112   798         DW      00116H,01412H,00116H,01412H,00116H,01412H,00116H,01412H
       14160112141601       
       1214                 
0008BA 16011214160112   799         DW      00116H,01412H,00116H,01412H,00116H,00712H,00200H,01701H
       14160112070002       
       0117                 
0008CA 13071701131417   800         DW      00713H,00117H,01413H,00117H,01413H,00117H,01413H,00117H
       01131417011314       
       1701                 
0008DA 13141701131417   801         DW      01413H,00117H,01413H,00117H,01413H,00117H,01413H,00117H
       01131417011314       
       1701                 
0008EA 13141701131417   802         DW      01413H,00117H,01413H,00117H,01413H,00117H,01413H,00117H
       01131417011314       
       1701                 
                        803 ; cbar.c    277 {
                        804 ; cbar.c    278         22*256  +                                                       SyncLineB
                            ,
                        805 ; cbar.c    279         7*256           + SRAMBank1 + SyncLineC,
                        806 ; cbar.c    280         1*256           +       SRAMBank2 + SyncLineC,
                        807 ; cbar.c    281         20*256  +       SRAMBank1 + SyncLineC,
                        808 ; cbar.c    282         1*256           +       SRAMBank2 + SyncLineC,
                        809 ; cbar.c    283         20*256  +       SRAMBank1 + SyncLineC,
                        810 ; cbar.c    284         1*256           +       SRAMBank2 + SyncLineC,
                        811 ; cbar.c    285         20*256  +       SRAMBank1 + SyncLineC,
                        812 ; cbar.c    286         1*256           +       SRAMBank2 + SyncLineC,
                        813 ; cbar.c    287         20*256  +       SRAMBank1 + SyncLineC,
                        814 ; cbar.c    288         1*256           +       SRAMBank2 + SyncLineC,
                        815 ; cbar.c    289         20*256  +       SRAMBank1 + SyncLineC,
                        816 ; cbar.c    290         1*256           +       SRAMBank2 + SyncLineC,
                        817 ; cbar.c    291         20*256  +       SRAMBank1 + SyncLineC,
                        818 ; cbar.c    292         1*256           +       SRAMBank2 + SyncLineC,
                        819 ; cbar.c    293         20*256  +       SRAMBank1 + SyncLineC,
                        820 ; cbar.c    294         1*256           +       SRAMBank2 + SyncLineC,
                        821 ; cbar.c    295         20*256  +       SRAMBank1 + SyncLineC,
                        822 ; cbar.c    296         1*256           +       SRAMBank2 + SyncLineC,
                        823 ; cbar.c    297         20*256  +       SRAMBank1 + SyncLineC,
                        824 ; cbar.c    298         1*256           +       SRAMBank2 + SyncLineC,
                        825 ; cbar.c    299         20*256  +       SRAMBank1 + SyncLineC,
                        826 ; cbar.c    300         1*256           +       SRAMBank2 + SyncLineC,
                        827 ; cbar.c    301         20*256  +       SRAMBank1 + SyncLineC,
                        828 ; cbar.c    302         1*256           +       SRAMBank2 + SyncLineC,
                        829 ; cbar.c    303         20*256  +       SRAMBank1 + SyncLineC,
                        830 ; cbar.c    304         1*256           +       SRAMBank2 + SyncLineC,
                        831 ; cbar.c    305         20*256  +       SRAMBank1 + SyncLineC,
                        832 ; cbar.c    306         1*256           +       SRAMBank2 + SyncLineC,
                        833 ; cbar.c    307         7*256     +     SRAMBank1 + SyncLineC,
                        834 ; cbar.c    308         2*256           +                                                       S
                            yncLineB,
                        835 ; cbar.c    309 
                        836 ; cbar.c    310         23*256  +                                                       SyncLineA
                            ,
                        837 ; cbar.c    311         7*256           + SRAMBank1 + SyncLineD,
                        838 ; cbar.c    312         1*256           +       SRAMBank2 + SyncLineD,
                        839 ; cbar.c    313         20*256  +       SRAMBank1 + SyncLineD,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   8

ADDR   CODE            LINE SOURCELINE
                        840 ; cbar.c    314         1*256           +       SRAMBank2 + SyncLineD,
                        841 ; cbar.c    315         20*256  +       SRAMBank1 + SyncLineD,
                        842 ; cbar.c    316         1*256           +       SRAMBank2 + SyncLineD,
                        843 ; cbar.c    317         20*256  +       SRAMBank1 + SyncLineD,
                        844 ; cbar.c    318         1*256           +       SRAMBank2 + SyncLineD,
                        845 ; cbar.c    319         20*256  +       SRAMBank1 + SyncLineD,
                        846 ; cbar.c    320         1*256           +       SRAMBank2 + SyncLineD,
                        847 ; cbar.c    321         20*256  +       SRAMBank1 + SyncLineD,
                        848 ; cbar.c    322         1*256           +       SRAMBank2 + SyncLineD,
                        849 ; cbar.c    323         20*256  +       SRAMBank1 + SyncLineD,
                        850 ; cbar.c    324         1*256           +       SRAMBank2 + SyncLineD,
                        851 ; cbar.c    325         20*256  +       SRAMBank1 + SyncLineD,
                        852 ; cbar.c    326         1*256           +       SRAMBank2 + SyncLineD,
                        853 ; cbar.c    327         20*256  +       SRAMBank1 + SyncLineD,
                        854 ; cbar.c    328         1*256           +       SRAMBank2 + SyncLineD,
                        855 ; cbar.c    329         20*256  +       SRAMBank1 + SyncLineD,
                        856 ; cbar.c    330         1*256           +       SRAMBank2 + SyncLineD,
                        857 ; cbar.c    331         20*256  +       SRAMBank1 + SyncLineD,
                        858 ; cbar.c    332         1*256           +       SRAMBank2 + SyncLineD,
                        859 ; cbar.c    333         20*256  +       SRAMBank1 + SyncLineD,
                        860 ; cbar.c    334         1*256           +       SRAMBank2 + SyncLineD,
                        861 ; cbar.c    335         20*256  +       SRAMBank1 + SyncLineD,
                        862 ; cbar.c    336         1*256           +       SRAMBank2 + SyncLineD,
                        863 ; cbar.c    337         20*256  +       SRAMBank1 + SyncLineD,
                        864 ; cbar.c    338         1*256           +       SRAMBank2 + SyncLineD,
                        865 ; cbar.c    339         7*256     +     SRAMBank1 + SyncLineD,
                        866 ; cbar.c    340         2*256           +                                                       S
                            yncLineA,
                        867 ; cbar.c    341         0
                        868 ; cbar.c    342 };
                        869 ; cbar.c    343 
                        870 ; cbar.c    344 #define TA7 (TA6 + sizeof(PALCrosshatchTable))
                        871 ; cbar.c    345 
                        872 ; cbar.c    346 _ROM_ UI PALPLUGETable[] _at(TA7) =
0008FA 13141701131417   873         DW      01413H,00117H,01413H,00117H,00713H,00201H,00000H
       01130701020000       
000908                  874         HCSEG AT 0908H
                        877         PUBLIC  _PALPLUGETable
                        878         ALIGN   1
                        878         ALIGN   1
000908                  879 _PALPLUGETable:
000908 00160226123516   880         DW      01600H,02602H,03512H,03516H,0351AH,0351EH,02602H,00200H
       351A351E350226       
       0002                 
000918 01170326133517   881         DW      01701H,02603H,03513H,03517H,0351BH,0351FH,02603H,00201H
       351B351F350326       
       0102                 
                        882 ; cbar.c    347 {
                        883 ; cbar.c    348         22*256  +                                                       SyncLineB
                            ,
                        884 ; cbar.c    349         38*256  +                         SyncLineC,
                        885 ; cbar.c    350         53*256  +       SRAMBank1 + SyncLineC,
                        886 ; cbar.c    351         53*256  +       SRAMBank2 + SyncLineC,
                        887 ; cbar.c    352         53*256  +       SRAMBank3 + SyncLineC,
                        888 ; cbar.c    353         53*256  +       SRAMBank4 + SyncLineC,
                        889 ; cbar.c    354         38*256  +                             SyncLineC,
                        890 ; cbar.c    355         2*256           +                                                       S
                            yncLineB,
                        891 ; cbar.c    356 
                        892 ; cbar.c    357         23*256  +                                                       SyncLineA
                            ,
                        893 ; cbar.c    358         38*256  +                   SyncLineD,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   9

ADDR   CODE            LINE SOURCELINE
                        894 ; cbar.c    359         53*256  +       SRAMBank1 + SyncLineD,
                        895 ; cbar.c    360         53*256  +       SRAMBank2 + SyncLineD,
                        896 ; cbar.c    361         53*256  +       SRAMBank3 + SyncLineD,
                        897 ; cbar.c    362         53*256  +       SRAMBank4 + SyncLineD,
                        898 ; cbar.c    363         38*256  +                                 SyncLineD,
                        899 ; cbar.c    364         2*256           +                                                       S
                            yncLineA,
                        900 ; cbar.c    365         0
                        901 ; cbar.c    366 };
                        902 ; cbar.c    367 
                        903 ; cbar.c    368 #define TA8 (TA7 + sizeof(PALPLUGETable))
                        904 ; cbar.c    369 
                        905 ; cbar.c    370 _ROM_ UI NTSCBlackTable[] _at(TA8) =
000928 0000             906         DW      00000H
00092A                  907         HCSEG AT 092AH
                        910         PUBLIC  _NTSCBlackTable
                        911         ALIGN   1
                        911         ALIGN   1
00092A                  912 _NTSCBlackTable:
00092A 01030010027A02   913         DW      00301H,01000H,07A02H,07A02H,00200H,01101H,07A03H,07903H
       7A00020111037A       
       0379                 
                        914 ; cbar.c    371 {
                        915 ; cbar.c    372         3*256   +                                                       SyncLineA
                            ,
                        916 ; cbar.c    373         16*256  +                                                       SyncLineB
                            ,
                        917 ; cbar.c    374         122*256 +                                                       SyncLineC
                            ,
                        918 ; cbar.c    375         122*256 +                                                       SyncLineC
                            ,
                        919 ; cbar.c    376 
                        920 ; cbar.c    377         2*256           +                                                       S
                            yncLineB,
                        921 ; cbar.c    378         17*256  +                                                       SyncLineA
                            ,
                        922 ; cbar.c    379         122*256 +                                                       SyncLineD
                            ,
                        923 ; cbar.c    380         121*256 +                                                       SyncLineD
                            ,
                        924 ; cbar.c    381         0
                        925 ; cbar.c    382 };
                        926 ; cbar.c    383 
                        927 ; cbar.c    384 #define TA9 (TA8 + sizeof(NTSCBlackTable))
                        928 ; cbar.c    385 
                        929 ; cbar.c    386 _ROM_ UI NTSCFullFieldTable[] _at(TA9) =
00093A 0000             930         DW      00000H
00093C                  931         HCSEG AT 093CH
                        934         PUBLIC  _NTSCFullFieldTable
                        935         ALIGN   1
                        935         ALIGN   1
00093C                  936 _NTSCFullFieldTable:
00093C 01030010127A12   937         DW      00301H,01000H,07A12H,07A12H,00200H,01101H,07A13H,07913H
       7A00020111137A       
       1379                 
                        938 ; cbar.c    387 {
                        939 ; cbar.c    388         3*256   +                                                       SyncLineA
                            ,
                        940 ; cbar.c    389         16*256  +                                                       SyncLineB
                            ,
                        941 ; cbar.c    390         122*256 +       SRAMBank1       +       SyncLineC,
                        942 ; cbar.c    391         122*256 +       SRAMBank1 + SyncLineC,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  10

ADDR   CODE            LINE SOURCELINE
                        943 ; cbar.c    392 
                        944 ; cbar.c    393         2*256           +                                                       S
                            yncLineB,
                        945 ; cbar.c    394         17*256  +                                                       SyncLineA
                            ,
                        946 ; cbar.c    395         122*256 +       SRAMBank1 + SyncLineD,
                        947 ; cbar.c    396         121*256 +       SRAMBank1 + SyncLineD,
                        948 ; cbar.c    397         0
                        949 ; cbar.c    398 };
                        950 ; cbar.c    399 
                        951 ; cbar.c    400 #define TA10 (TA9 + sizeof(NTSCFullFieldTable))
                        952 ; cbar.c    401 
                        953 ; cbar.c    402 _ROM_ UI SMPTECBarTable[] _at(TA10) =
00094C 0000             954         DW      00000H
00094E                  955         HCSEG AT 094EH
                        958         PUBLIC  _SMPTECBarTable
                        959         ALIGN   1
                        959         ALIGN   1
00094E                  960 _SMPTECBarTable:
00094E 0103001012A416   961         DW      00301H,01000H,0A412H,01316H,03D1AH,00200H,01101H,0A313H
       131A3D00020111       
       13A3                 
                        962 ; cbar.c    403 {
                        963 ; cbar.c    404         3*256   +                                                       SyncLineA
                            ,
                        964 ; cbar.c    405         16*256  +                                                       SyncLineB
                            ,
                        965 ; cbar.c    406         164*256 +       SRAMBank1 + SyncLineC,
                        966 ; cbar.c    407         19*256  +       SRAMBank2 + SyncLineC,
                        967 ; cbar.c    408         61*256  +       SRAMBank3 + SyncLineC,
                        968 ; cbar.c    409 
                        969 ; cbar.c    410         2*256           +                                                       S
                            yncLineB,
                        970 ; cbar.c    411         17*256  +                                                       SyncLineA
                            ,
                        971 ; cbar.c    412         163*256 +       SRAMBank1 + SyncLineD,
                        972 ; cbar.c    413         19*256  +       SRAMBank2 + SyncLineD,
                        973 ; cbar.c    414         61*256  +       SRAMBank3 + SyncLineD,
                        974 ; cbar.c    415         0
                        975 ; cbar.c    416 };
                        976 ; cbar.c    417 
                        977 ; cbar.c    418 #define TA11 (TA10 + sizeof(SMPTECBarTable))
                        978 ; cbar.c    419 
                        979 ; cbar.c    420 _ROM_ UI NTSCWindowTable[] _at(TA11) =
00095E 17131B3D0000     980         DW      01317H,03D1BH,00000H
000964                  981         HCSEG AT 0964H
                        984         PUBLIC  _NTSCWindowTable
                        985         ALIGN   1
                        985         ALIGN   1
000964                  986 _NTSCWindowTable:
000964 01030010021E12   987         DW      00301H,01000H,01E02H,00112H,00116H,00102H,0011AH,01D02H
       01160102011A01       
       021D                 
000974 1E77023E000201   988         DW      0771EH,03E02H,00200H,01101H,01D03H,00113H,00117H,00103H
       11031D13011701       
       0301                 
                        989 ; cbar.c    421 {
                        990 ; cbar.c    422         3*256   +                                                       SyncLineA
                            ,
                        991 ; cbar.c    423         16*256  +                                                       SyncLineB
                            ,
                        992 ; cbar.c    424         30*256  +                               SyncLineC,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  11

ADDR   CODE            LINE SOURCELINE
                        993 ; cbar.c    425         1*256           +       SRAMBank1 + SyncLineC,
                        994 ; cbar.c    426         1*256           +       SRAMBank2 + SyncLineC,
                        995 ; cbar.c    427         1*256           +                           SyncLineC,
                        996 ; cbar.c    428         1*256           +       SRAMBank3 + SyncLineC,
                        997 ; cbar.c    429         29*256  +                                       SyncLineC,
                        998 ; cbar.c    430         119*256 +       SRAMBank4 + SyncLineC,
                        999 ; cbar.c    431         62*256  +                               SyncLineC,
                       1000 ; cbar.c    432 
                       1001 ; cbar.c    433         2*256           +                                                       S
                            yncLineB,
                       1002 ; cbar.c    434         17*256  +                                                       SyncLineA
                            ,
                       1003 ; cbar.c    435         29*256  +                               SyncLineD,
                       1004 ; cbar.c    436         1*256           +       SRAMBank1 + SyncLineD,
                       1005 ; cbar.c    437         1*256           +       SRAMBank2 + SyncLineD,
                       1006 ; cbar.c    438         1*256           +                             SyncLineD,
                       1007 ; cbar.c    439         1*256           +       SRAMBank3 + SyncLineD,
                       1008 ; cbar.c    440         29*256  +                         SyncLineD,
                       1009 ; cbar.c    441         119*256 +       SRAMBank4 + SyncLineD,
                       1010 ; cbar.c    442         62*256  +                           SyncLineD,
                       1011 ; cbar.c    443         0
                       1012 ; cbar.c    444 };
                       1013 ; cbar.c    445 
                       1014 ; cbar.c    446 #define TA12 (TA11 + sizeof(NTSCWindowTable))
                       1015 ; cbar.c    447 
                       1016 ; cbar.c    448 _ROM_ UI NTSCCheckfieldTable[] _at(TA12) =
000984 1B01031D1F7703  1017         DW      0011BH,01D03H,0771FH,03E03H,00000H
       3E0000               
00098E                 1018         HCSEG AT 098EH
                       1021         PUBLIC  _NTSCCheckfieldTable
                       1022         ALIGN   1
                       1022         ALIGN   1
00098E                 1023 _NTSCCheckfieldTable:
00098E 01030010120116  1024         DW      00301H,01000H,00112H,07916H,07A1AH,00200H,01101H,07A17H
       791A7A00020111       
       177A                 
                       1025 ; cbar.c    449 {
                       1026 ; cbar.c    450         3*256   +                                                       SyncLineA
                            ,
                       1027 ; cbar.c    451         16*256  +                                                       SyncLineB
                            ,
                       1028 ; cbar.c    452         1*256           +       SRAMBank1 + SyncLineC,
                       1029 ; cbar.c    453         121*256 +       SRAMBank2 + SyncLineC,
                       1030 ; cbar.c    454         122*256 +       SRAMBank3 + SyncLineC,
                       1031 ; cbar.c    455 
                       1032 ; cbar.c    456         2*256           +                                                       S
                            yncLineB,
                       1033 ; cbar.c    457         17*256  +                                                       SyncLineA
                            ,
                       1034 ; cbar.c    458         122*256 +       SRAMBank2 + SyncLineD,
                       1035 ; cbar.c    459         121*256 +       SRAMBank3 + SyncLineD,
                       1036 ; cbar.c    460         0
                       1037 ; cbar.c    461 };
                       1038 ; cbar.c    462 
                       1039 ; cbar.c    463 #define TA13 (TA12 + sizeof(NTSCCheckfieldTable))
                       1040 ; cbar.c    464 
                       1041 ; cbar.c    465 _ROM_ UI NTSCCrosshatchTable[] _at(TA13) =
00099E 1B790000        1042         DW      0791BH,00000H
0009A2                 1043         HCSEG AT 09A2H
                       1046         PUBLIC  _NTSCCrosshatchTable
                       1047         ALIGN   1
                       1047         ALIGN   1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  12

ADDR   CODE            LINE SOURCELINE
0009A2                 1048 _NTSCCrosshatchTable:
0009A2 01030010120916  1049         DW      00301H,01000H,00912H,00116H,01012H,00116H,01112H,00116H
       01121016011211       
       1601                 
0009B2 12101601121116  1050         DW      01012H,00116H,01112H,00116H,01012H,00116H,01112H,00116H
       01121016011211       
       1601                 
0009C2 12101601121116  1051         DW      01012H,00116H,01112H,00116H,01012H,00116H,01112H,00116H
       01121016011211       
       1601                 
0009D2 12101601121116  1052         DW      01012H,00116H,01112H,00116H,01012H,00116H,00712H,00200H
       01121016011207       
       0002                 
0009E2 01111308170113  1053         DW      01101H,00813H,00117H,01113H,00117H,01013H,00117H,01113H
       11170113101701       
       1311                 
0009F2 17011310170113  1054         DW      00117H,01013H,00117H,01113H,00117H,01013H,00117H,01113H
       11170113101701       
       1311                 
000A02 17011310170113  1055         DW      00117H,01013H,00117H,01113H,00117H,01013H,00117H,01113H
       11170113101701       
       1311                 
                       1056 ; cbar.c    466 {
                       1057 ; cbar.c    467         3*256   +                                                       SyncLineA
                            ,
                       1058 ; cbar.c    468         16*256  +                                                       SyncLineB
                            ,
                       1059 ; cbar.c    469         9*256           +       SRAMBank1 + SyncLineC,
                       1060 ; cbar.c    470         1*256           +       SRAMBank2 + SyncLineC,
                       1061 ; cbar.c    471         16*256  +       SRAMBank1 + SyncLineC,
                       1062 ; cbar.c    472         1*256           +       SRAMBank2 + SyncLineC,
                       1063 ; cbar.c    473         17*256  +       SRAMBank1 + SyncLineC,
                       1064 ; cbar.c    474         1*256           +       SRAMBank2 + SyncLineC,
                       1065 ; cbar.c    475         16*256  +       SRAMBank1 + SyncLineC,
                       1066 ; cbar.c    476         1*256           +       SRAMBank2 + SyncLineC,
                       1067 ; cbar.c    477         17*256  +       SRAMBank1 + SyncLineC,
                       1068 ; cbar.c    478         1*256           +       SRAMBank2 + SyncLineC,
                       1069 ; cbar.c    479         16*256  +       SRAMBank1 + SyncLineC,
                       1070 ; cbar.c    480         1*256           +       SRAMBank2 + SyncLineC,
                       1071 ; cbar.c    481         17*256  +       SRAMBank1 + SyncLineC,
                       1072 ; cbar.c    482         1*256           +       SRAMBank2 + SyncLineC,
                       1073 ; cbar.c    483         16*256  +       SRAMBank1 + SyncLineC,
                       1074 ; cbar.c    484         1*256           +       SRAMBank2 + SyncLineC,
                       1075 ; cbar.c    485         17*256  +       SRAMBank1 + SyncLineC,
                       1076 ; cbar.c    486         1*256           +       SRAMBank2 + SyncLineC,
                       1077 ; cbar.c    487         16*256  +       SRAMBank1 + SyncLineC,
                       1078 ; cbar.c    488         1*256           +       SRAMBank2 + SyncLineC,
                       1079 ; cbar.c    489         17*256  +       SRAMBank1 + SyncLineC,
                       1080 ; cbar.c    490         1*256           +       SRAMBank2 + SyncLineC,
                       1081 ; cbar.c    491         16*256  +       SRAMBank1 + SyncLineC,
                       1082 ; cbar.c    492         1*256           +       SRAMBank2 + SyncLineC,
                       1083 ; cbar.c    493         17*256  +       SRAMBank1 + SyncLineC,
                       1084 ; cbar.c    494         1*256           +       SRAMBank2 + SyncLineC,
                       1085 ; cbar.c    495         16*256  +       SRAMBank1 + SyncLineC,
                       1086 ; cbar.c    496         1*256           +       SRAMBank2 + SyncLineC,
                       1087 ; cbar.c    497         7*256           +       SRAMBank1 + SyncLineC,
                       1088 ; cbar.c    498 
                       1089 ; cbar.c    499         2*256           +                                                       S
                            yncLineB,
                       1090 ; cbar.c    500         17*256  +                                                       SyncLineA
                            ,
                       1091 ; cbar.c    501         8*256           +       SRAMBank1 + SyncLineD,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  13

ADDR   CODE            LINE SOURCELINE
                       1092 ; cbar.c    502         1*256           +       SRAMBank2 + SyncLineD,
                       1093 ; cbar.c    503         17*256  +       SRAMBank1 + SyncLineD,
                       1094 ; cbar.c    504         1*256           +       SRAMBank2 + SyncLineD,
                       1095 ; cbar.c    505         16*256  +       SRAMBank1 + SyncLineD,
                       1096 ; cbar.c    506         1*256           +       SRAMBank2 + SyncLineD,
                       1097 ; cbar.c    507         17*256  +       SRAMBank1 + SyncLineD,
                       1098 ; cbar.c    508         1*256           +       SRAMBank2 + SyncLineD,
                       1099 ; cbar.c    509         16*256  +       SRAMBank1 + SyncLineD,
                       1100 ; cbar.c    510         1*256           +       SRAMBank2 + SyncLineD,
                       1101 ; cbar.c    511         17*256  +       SRAMBank1 + SyncLineD,
                       1102 ; cbar.c    512         1*256           +       SRAMBank2 + SyncLineD,
                       1103 ; cbar.c    513         16*256  +       SRAMBank1 + SyncLineD,
                       1104 ; cbar.c    514         1*256           +       SRAMBank2 + SyncLineD,
                       1105 ; cbar.c    515         17*256  +       SRAMBank1 + SyncLineD,
                       1106 ; cbar.c    516         1*256           +       SRAMBank2 + SyncLineD,
                       1107 ; cbar.c    517         16*256  +       SRAMBank1 + SyncLineD,
                       1108 ; cbar.c    518         1*256           +       SRAMBank2 + SyncLineD,
                       1109 ; cbar.c    519         17*256  +       SRAMBank1 + SyncLineD,
                       1110 ; cbar.c    520         1*256           +       SRAMBank2 + SyncLineD,
                       1111 ; cbar.c    521         16*256  +       SRAMBank1 + SyncLineD,
                       1112 ; cbar.c    522         1*256           +       SRAMBank2 + SyncLineD,
                       1113 ; cbar.c    523         17*256  +       SRAMBank1 + SyncLineD,
                       1114 ; cbar.c    524         1*256           +       SRAMBank2 + SyncLineD,
                       1115 ; cbar.c    525         16*256  +       SRAMBank1 + SyncLineD,
                       1116 ; cbar.c    526         1*256           +       SRAMBank2 + SyncLineD,
                       1117 ; cbar.c    527         17*256  +       SRAMBank1 + SyncLineD,
                       1118 ; cbar.c    528         1*256           +       SRAMBank2 + SyncLineD,
                       1119 ; cbar.c    529         6*256           +       SRAMBank1 + SyncLineD,
                       1120 ; cbar.c    530         0
                       1121 ; cbar.c    531 };
                       1122 ; cbar.c    532 
                       1123 ; cbar.c    533 #define TA14 (TA13 + sizeof(NTSCCrosshatchTable))
                       1124 ; cbar.c    534 
                       1125 ; cbar.c    535 _ROM_ UI NTSCPLUGETable[] _at(TA14) =
000A12 17011310170113  1126         DW      00117H,01013H,00117H,01113H,00117H,00613H,00000H
       11170113060000       
000A20                 1127         HCSEG AT 0A20H
                       1130         PUBLIC  _NTSCPLUGETable
                       1131         ALIGN   1
                       1131         ALIGN   1
000A20                 1132 _NTSCPLUGETable:
000A20 01030010023512  1133         DW      00301H,01000H,03502H,03812H,01316H,0131AH,0131EH,04E02H
       3816131A131E13       
       024E                 
000A30 00020111033413  1134         DW      00200H,01101H,03403H,03813H,01317H,0131BH,0131FH,04E03H
       3817131B131F13       
       034E                 
                       1135 ; cbar.c    536 {
                       1136 ; cbar.c    537         3*256   +                                                       SyncLineA
                            ,
                       1137 ; cbar.c    538         16*256  +                                                       SyncLineB
                            ,
                       1138 ; cbar.c    539         53*256  +                               SyncLineC,
                       1139 ; cbar.c    540         56*256  +       SRAMBank1 + SyncLineC,
                       1140 ; cbar.c    541         19*256  +       SRAMBank2 + SyncLineC,
                       1141 ; cbar.c    542         19*256  +       SRAMBank3 + SyncLineC,
                       1142 ; cbar.c    543         19*256  +       SRAMBank4 + SyncLineC,
                       1143 ; cbar.c    544         78*256  +                           SyncLineC,
                       1144 ; cbar.c    545 
                       1145 ; cbar.c    546         2*256           +                                                       S
                            yncLineB,
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  14

ADDR   CODE            LINE SOURCELINE
                       1146 ; cbar.c    547         17*256  +                                                       SyncLineA
                            ,
                       1147 ; cbar.c    548         52*256  +                           SyncLineD,
                       1148 ; cbar.c    549         56*256  +       SRAMBank1 + SyncLineD,
                       1149 ; cbar.c    550         19*256  +       SRAMBank2 + SyncLineD,
                       1150 ; cbar.c    551         19*256  +       SRAMBank3 + SyncLineD,
                       1151 ; cbar.c    552         19*256  +       SRAMBank4 + SyncLineD,
                       1152 ; cbar.c    553         78*256  +                               SyncLineD,
                       1153 ; cbar.c    554         0
                       1154 ; cbar.c    555 };
                       1155 ; cbar.c    556 
                       1156 ; cbar.c    557 #define TA15 (TA14 + sizeof(NTSCPLUGETable))
                       1157 ; cbar.c    558 
                       1158 ; cbar.c    559         _ROM_ UI Sound525[] _at(TA15) = 
000A40 0000            1159         DW      00000H
000A42                 1160         HCSEG AT 0A42H
                       1163         PUBLIC  _Sound525
                       1164         ALIGN   1
                       1164         ALIGN   1
000A42                 1165 _Sound525:
000A42 83008101850003  1166         DW      00083H,00181H,00085H,00003H,00086H,00181H,0008BH,00181H
       00860081018B00       
       8101                 
000A52 8B0081018B0081  1167         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
       018B0081018B00       
       8101                 
000A62 8B0081018B0081  1168         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
       018B0081018B00       
       8101                 
000A72 8B0081018B0081  1169         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
       018B0081018B00       
       8101                 
000A82 8B0081018B0081  1170         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,0008BH,00181H
       018B0081018B00       
       8101                 
                       1171 ; cbar.c    560     {
                       1172 ; cbar.c    561         0x083, 0x181, 0x085, 0x003, 0x086, 0x181, 0x08B, 0x181,
                       1173 ; cbar.c    562         0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181,
                       1174 ; cbar.c    563         0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181,
                       1175 ; cbar.c    564         0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181,
                       1176 ; cbar.c    565         0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181,
                       1177 ; cbar.c    566         0x08B, 0x181, 0x08B, 0x181, 0x08B, 0x181, 0x083, 0x081
                       1178 ; cbar.c    567     };
                       1179 ; cbar.c    568 
                       1180 ; cbar.c    569 #define TA16 (TA15 + sizeof(Sound525))
                       1181 ; cbar.c    570 
                       1182 ; cbar.c    571         _ROM_ UI Sound625[65] _at(TA16) = 
000A92 8B0081018B0081  1183         DW      0008BH,00181H,0008BH,00181H,0008BH,00181H,00083H,00081H
       018B0081018300       
       8100                 
000AA2                 1184         HCSEG AT 0AA2H
                       1188         PUBLIC  _Sound625
                       1189         ALIGN   1
                       1189         ALIGN   1
000AA2                 1190 _Sound625:
000AA2 81018400030085  1191         DW      00181H,00084H,00003H,00085H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000AB2 81018900810189  1192         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  15

ADDR   CODE            LINE SOURCELINE
000AC2 81018900810189  1193         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000AD2 81018900810189  1194         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000AE2 81018900810189  1195         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000AF2 81018900810189  1196         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000B02 81018900810189  1197         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00089H
       00810189008101       
       8900                 
000B12 81018900810189  1198         DW      00181H,00089H,00181H,00089H,00181H,00089H,00181H,00088H
       00810189008101       
       8800                 
                       1199 ; cbar.c    572           {
                       1200 ; cbar.c    573         0x181,  0x084,  0x003,  0x085,  0x181,  0x089,  0x181,  0x089,
                       1201 ; cbar.c    574         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                       1202 ; cbar.c    575         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                       1203 ; cbar.c    576         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                       1204 ; cbar.c    577         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                       1205 ; cbar.c    578         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                       1206 ; cbar.c    579         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x089,
                       1207 ; cbar.c    580         0x181,  0x089,  0x181,  0x089,  0x181,  0x089,  0x181,  0x088,
                       1208 ; cbar.c    581         0x181
                       1209 ; cbar.c    582     };
                       1210 ; cbar.c    583 
                       1211 ; cbar.c    584 //Emulates the 8 lines avalible for text.
                       1212 ; cbar.c    585 //Would be implemented ase a seperat table.
                       1213 ; cbar.c    586 
                       1214 ; cbar.c    587 #define TA17 (TA16 + sizeof(Sound625))
                       1215 ; cbar.c    588 
                       1216 ; cbar.c    589 _ROM_ UI TextLines_SyncLineC[] _at(TA17) =              //Interlaced 
000B22 8101            1217         DW      00181H
000B24                 1218         HCSEG AT 0B24H
                       1221         PUBLIC  _TextLines_SyncLineC
                       1222         ALIGN   1
                       1222         ALIGN   1
000B24                 1223 _TextLines_SyncLineC:
                       1224 ; cbar.c    590         {
                       1225 ; cbar.c    591         1*256   +       SRAMBank5 + SyncLineC,          //Line 0
                       1226 ; cbar.c    592         1*256   +       SRAMBank6 + SyncLineC,
                       1227 ; cbar.c    593         1*256   +       SRAMBank7 + SyncLineC,
                       1228 ; cbar.c    594         1*256   +       SRAMBank8 + SyncLineC,
                       1229 ; cbar.c    595         1*256   +       SRAMBank9 + SyncLineC,
                       1230 ; cbar.c    596         1*256   +       SRAMBank10 + SyncLineC,
                       1231 ; cbar.c    597         1*256   +       SRAMBank11 + SyncLineC,
                       1232 ; cbar.c    598         1*256   +       SRAMBank12 + SyncLineC,
                       1233 ; cbar.c    599         };
                       1234 ; cbar.c    600 
                       1235 ; cbar.c    601 #define TA18 (TA17 + sizeof(Sound625))
                       1236 ; cbar.c    602 
                       1237 ; cbar.c    603 _ROM_ UI TextLines_SyncLineD[] _at(TA18) =              //De-Interlaced 
000B24 220126012A012E  1238         DW      00122H,00126H,0012AH,0012EH,00132H,00136H,0013AH,0013EH
       01320136013A01       
       3E01                 
000BA6                 1239         HCSEG AT 0BA6H
                       1242         PUBLIC  _TextLines_SyncLineD
                       1243         ALIGN   1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  16

ADDR   CODE            LINE SOURCELINE
                       1243         ALIGN   1
000BA6                 1244 _TextLines_SyncLineD:
                       1245 ; cbar.c    604         {
                       1246 ; cbar.c    605         1*256   +       SRAMBank5 + SyncLineD,          //Line 0
                       1247 ; cbar.c    606         1*256   +       SRAMBank6 + SyncLineD,
                       1248 ; cbar.c    607         1*256   +       SRAMBank7 + SyncLineD,
                       1249 ; cbar.c    608         1*256   +       SRAMBank8 + SyncLineD,
                       1250 ; cbar.c    609         1*256   +       SRAMBank9 + SyncLineD,
                       1251 ; cbar.c    610         1*256   +       SRAMBank10 + SyncLineD,
                       1252 ; cbar.c    611         1*256   +       SRAMBank11 + SyncLineD,
                       1253 ; cbar.c    612         1*256   +       SRAMBank12 + SyncLineD,
                       1254 ; cbar.c    613         };
                       1255 ; cbar.c    614 
                       1256 ; cbar.c    615                                               // Signal array defined in ROM
                       1257 ; cbar.c    616                                               //  (size/start is specified in BYT
                            ES
                       1258 ; cbar.c    617                                               //  in config.h)
                       1259 ; cbar.c    618 _ROM_ int VideoSignalArray[SizeOfCBVideoCode/2] _at( StartOfCBVideoCode);
                       1260 ; cbar.c    619 _ROM_ int SoundSignalArray[SizeOfEmbAudioCode/2] _at( StartOfEmbAudioCode);
                       1261 ; cbar.c    620 
                       1262 ; cbar.c    621 //KS. Extended Video SRAM. Test Only.
                       1263 ; cbar.c    622 volatile int ESRAMVideoPort _at( 0x54000);       // Port defined in PLD
                       1264 ; cbar.c    623 volatile int SRAMVideoPort _at( 0x44000);       // Port defined in PLD
                       1265 ; cbar.c    624 volatile int SRAMSoundPort _at( 0x40000);       // Port defined in PLD
                       1266 ; cbar.c    625 volatile int StatusPort _at( 0x6a000);         // Port defined in PLD
                       1267 ; cbar.c    626 volatile int HOffsetPort _at( 0x6a004);       // Port defined in PLD
                       1268 ; cbar.c    627 volatile int ChromaGainPort _at( 0x6a008);    // Port defined in PLD
                       1269 ; cbar.c    628 
                       1270 ; cbar.c    629 /***/
                       1271 ; cbar.c    630 volatile UI LEDPort _at( 0x6a00C);        // Port defined in PLD
                       1272 ; cbar.c    631 volatile UI TestLEDPort _at( 0x6a014);  // Port defined in PLD
                       1273 ; cbar.c    632 
                       1274 ; cbar.c    633 
                       1275 ; cbar.c    634 volatile _near UI TimeTickCounter;
                       1276 ; cbar.c    635 volatile _near int LineOffset;
                       1277 ; cbar.c    636 
                       1278 ; cbar.c    637 volatile int PhaseOffset;
                       1279 ; cbar.c    638 
                       1280 ; cbar.c    639 CBObject CBSetup;
                       1281 ; cbar.c    640 
                       1282 ; cbar.c    641 typedef struct cbtag
                       1283 ; cbar.c    642     {
                       1284 ; cbar.c    643     _ROM_  UI * TablePtr;    // 4 bytes
                       1285 ; cbar.c    644     _ROM_  UI * newTablePtr; // 4 bytes
                       1286 ; cbar.c    645     UI LineCnt;              // 2 bytes
                       1287 ; cbar.c    646     UC FrameCnt;             // 1 byte
                       1288 ; cbar.c    647     UC SyncLineCnt;
                       1289 ; cbar.c    648     UC SyncLinePtr;
                       1290 ; cbar.c    649     UC SoundFrameCnt;
                       1291 ; cbar.c    650     UC SoundCnt;
                       1292 ; cbar.c    651     UC SoundPtr;
                       1293 ; cbar.c    652     UC SoundPtrMax;
                       1294 ; cbar.c    653     char Blanking;
                       1295 ; cbar.c    654     char NewPattern; 
                       1296 ; cbar.c    655     char SoundEnable;
                       1297 ; cbar.c    656     UI Status;               // 2 bytes
                       1298 ; cbar.c    657     } JK;
                       1317 ; cbar.c    658 
                       1318 ; cbar.c    659 
                       1319 ; cbar.c    660 
                       1320 ; cbar.c    661 typedef union xxtag
                       1321 ; cbar.c    662   {
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  17

ADDR   CODE            LINE SOURCELINE
                       1322 ; cbar.c    663   JK  CBX;
                       1323 ; cbar.c    664   UC  array[sizeof(JK)];
                       1324 ; cbar.c    665   } CBVARS;
                       1330 ; cbar.c    666   
                       1331 ; cbar.c    667 CBVARS cb_vars;
                       1332 ; cbar.c    668 CBVARS test_vars;
                       1333 ; cbar.c    669 
                       1334 ; cbar.c    670 extern       _bit JKflag;
                       1335 ; cbar.c    671 _sfrbit    JKpin   _atbit(P1,5);    // P1^5
                       1336 ; cbar.c    672 _sfrbit    SDApin  _atbit(P1,6);    // P1^6
                       1337 ; cbar.c    673 
                       1338 ; cbar.c    674 extern UI LEDMirror;
                       1339 ; cbar.c    675 extern UI TestLEDMirror;
                       1340 ; cbar.c    676 
                       1341 ; cbar.c    677 #define CLASSIC
                       1342 ; cbar.c    678 //#undef  CLASSIC
                       1343 ; cbar.c    679 
                       1344 ; cbar.c    680 /**************************************************************************/
                       1345 ; cbar.c    681 /* CBLineInterrupt                                  CBAR.C */
                       1346 ; cbar.c    682 /*                                                  */
                       1347 ; cbar.c    683 /* Author:   Kim Engedahl, DEV, 000322                          */
                       1348 ; cbar.c    684 /* Revised:   000603, KEn, DEV                                 */
                       1349 ; cbar.c    685 /*                                                        */
                       1350 ; cbar.c    686 /* Function:                                           */
                       1351 ; cbar.c    687 /* Remarks:   Delayed field interrupt is synchronized to line ??/??      */
                       1352 ; cbar.c    688 /* Returns:                                            */
                       1353 ; cbar.c    689 /* Updates:                                            */
                       1354 ; cbar.c    690 /**************************************************************************/
                       1355 ; cbar.c    691 void CBLineInterrupt( void)
                       1356 ; cbar.c    692   {
000BA6 230127012B012F  1357         DW      00123H,00127H,0012BH,0012FH,00133H,00137H,0013BH,0013FH
       01330137013B01       
       3F01                 
000000                 1358 CBAR_PR SEGMENT HCODE
000000                 1359         RSEG    CBAR_PR
                       1360         ALIGN   1
000000                 1362 CBAR_CLR_FA     SEGMENT HDATA INSEGMENT CLEAR
000000                 1363         RSEG    CBAR_CLR_FA
                       1364         ALIGN   1
000000                 1365 _3:     DS      2
   |  RESERVED             
000001
000002 RESERVED        1366 _4:     DS      1
000002
000003 RESERVED        1367 _5:     DS      1
000003
                       1368         ALIGN   1
000004                 1369 _6:     DS      2
   |  RESERVED             
000005
                       1370         ALIGN   1
000006                 1371 _7:     DS      2
   |  RESERVED             
000007
                       1372         PUBLIC  _CBLineInterrupt
000000                 1373         RSEG    CBAR_PR
000000                 1373         RSEG    CBAR_PR
000000                 1374 _CBLineInterrupt:
000000 0F70            1378         PUSH.W  R4, R5, R6
                       1385 ; cbar.c    693   static UI tmp;
                       1386 ; cbar.c    694   static UI tmpv;
                       1387 ; cbar.c    695 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  18

ADDR   CODE            LINE SOURCELINE
                       1388 ; cbar.c    696   static UC TextLineCnt;  //Indicated from which line the Text lines have to be i
                            nserted !       
                       1389 ; cbar.c    697   static UC TextLineDir;  //Indicates direction of the movement of the text line 
                            !               
                       1390 ; cbar.c    698 
                       1391 ; cbar.c    699   static UI LineNum;  //Used to prevent Interlaving flicker ! 
                       1392 ; cbar.c    700 
                       1393 ; cbar.c    701   //UI i;
                       1394 ; cbar.c    702   
                       1395 ; cbar.c    703   //JKpin = 0;
                       1396 ; cbar.c    704 
                       1397 ; cbar.c    705   if ( CBSetup.System < NTSC_US)
000002 964842rr        1399         MOV.B   ES,#SEG( _CBSetup )
000006 9908rrrr        1400         MOV.W   R0,#SOF( _CBSetup )
00000A 8200            1401         MOV.B   R0L,[R0]
00000C 910402          1402         CMP.B   R0L,#02H
                       1403         BCS     _18
00000F F002           +1403 ;       BCC     _LG_0
000011 D50142         +1403 ;       JMP.L   _18
000011 D50142         +1403 ;       JMP.L   _18
000014                +1403 _LG_0:
                       1404 ; cbar.c    706     {
                       1405 ; cbar.c    707     ;
                       1406 ; cbar.c    708     }
                       1407 ; cbar.c    709   else    // NTSC
                       1408 ; cbar.c    710     {
                       1409 ; cbar.c    711     
                       1410 ; cbar.c    712     if ( TF0)                        // If delayed field interrupt...
000014 082285          1412         MOV     C,0285H
                       1413         BCC     _11
000017 F102           +1413 ;       BCS     _LG_2
000019 D500B7         +1413 ;       JMP.L   _11
000019 D500B7         +1413 ;       JMP.L   _11
00001C                +1413 _LG_2:
                       1414 ; cbar.c    713       {
                       1415 ; cbar.c    714       TF0 = 0;                      // Clear delayed field interrupt
00001C 080285          1417         CLR     0285H
                       1418 ; cbar.c    715 #if 1
                       1419 ; cbar.c    716       if ( cb_vars.CBX.FrameCnt > 9)
00001F 964842rr        1421         MOV.B   ES,#SEG( _cb_vars+10 )
000023 9908rrrr        1422         MOV.W   R0,#SOF( _cb_vars+10 )
000027 8200            1423         MOV.B   R0L,[R0]
000029 910409          1424         CMP.B   R0L,#09H
00002C F90A            1425         BL      _8
                       1426 ; cbar.c    717         {
                       1427 ; cbar.c    718         cb_vars.CBX.FrameCnt = 1;
00002E 964842rr        1429         MOV.B   ES,#SEG( _cb_vars+10 )
000032 9908rrrr        1430         MOV.W   R0,#SOF( _cb_vars+10 )
000036 B201            1431         MOV.B   [R0],#01H
                       1432 ; cbar.c    719         cb_vars.CBX.SoundFrameCnt = 1;
000038 964842rr        1434         MOV.B   ES,#SEG( _cb_vars+13 )
00003C 9908rrrr        1435         MOV.W   R0,#SOF( _cb_vars+13 )
000040 B201            1436         MOV.B   [R0],#01H
                       1437 ; cbar.c    720         }
000042                 1439 _8:
                       1440 ; cbar.c    721 
                       1441 ; cbar.c    722       cb_vars.CBX.SyncLineCnt = 12;              // Next interrupt in 12 lines
000042 964842rr        1443         MOV.B   ES,#SEG( _cb_vars+11 )
000046 9908rrrr        1444         MOV.W   R0,#SOF( _cb_vars+11 )
00004A 92080C          1445         MOV.B   [R0],#0CH
                       1446 ; cbar.c    723       test_vars.CBX.SyncLineCnt = 12;              // Next interrupt in 12 lines
00004D 964842rr        1448         MOV.B   ES,#SEG( _test_vars+11 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  19

ADDR   CODE            LINE SOURCELINE
000051 9908rrrr        1449         MOV.W   R0,#SOF( _test_vars+11 )
000055 92080C          1450         MOV.B   [R0],#0CH
                       1451 ; cbar.c    724       cb_vars.CBX.SyncLinePtr = 1;
000058 964842rr        1453         MOV.B   ES,#SEG( _cb_vars+12 )
00005C 9908rrrr        1454         MOV.W   R0,#SOF( _cb_vars+12 )
000060 B201            1455         MOV.B   [R0],#01H
                       1456 ; cbar.c    725 
                       1457 ; cbar.c    726       cb_vars.CBX.LineCnt = 6;
000062 964842rr        1459         MOV.B   ES,#SEG( _cb_vars+8 )
000066 9908rrrr        1460         MOV.W   R0,#SOF( _cb_vars+8 )
00006A BA06            1461         MOV.W   [R0],#06H
                       1462 ; cbar.c    727 
                       1463 ; cbar.c    728       cb_vars.CBX.SoundCnt = 2;
00006C 964842rr        1465         MOV.B   ES,#SEG( _cb_vars+14 )
000070 9908rrrr        1466         MOV.W   R0,#SOF( _cb_vars+14 )
000074 B202            1467         MOV.B   [R0],#02H
                       1468 ; cbar.c    729       cb_vars.CBX.SoundPtr = 3;
000076 964842rr        1470         MOV.B   ES,#SEG( _cb_vars+15 )
00007A 9908rrrr        1471         MOV.W   R0,#SOF( _cb_vars+15 )
00007E B203            1472         MOV.B   [R0],#03H
                       1473 ; cbar.c    730       cb_vars.CBX.SoundPtrMax = 47;
000080 964842rr        1475         MOV.B   ES,#SEG( _cb_vars+16 )
000084 9908rrrr        1476         MOV.W   R0,#SOF( _cb_vars+16 )
000088 92082F          1477         MOV.B   [R0],#02FH
                       1478 ; cbar.c    731 
                       1479 ; cbar.c    732       cb_vars.CBX.Status |= FIELD1;                // This is field 1 of 4
00008B 964842rr        1481         MOV.B   ES,#SEG( _cb_vars+20 )
00008F 9908rrrr        1482         MOV.W   R0,#SOF( _cb_vars+20 )
000093 8A00            1483         MOV.W   R0,[R0]
000095 99060200        1484         OR.W    R0,#0200H
000099 964842rr        1485         MOV.B   ES,#SEG( _cb_vars+20 )
00009D 9918rrrr        1486         MOV.W   R1,#SOF( _cb_vars+20 )
0000A1 8A09            1487         MOV.W   [R1],R0
                       1488 ; cbar.c    733       StatusPort = cb_vars.CBX.Status;
0000A3 96484206        1490         MOV.B   ES,#SEG( _StatusPort )
0000A7 9918A000        1491         MOV.W   R1,#SOF( _StatusPort )
0000AB 8A09            1492         MOV.W   [R1],R0
                       1493 ; cbar.c    734 //#else      
                       1494 ; cbar.c    735 //again
                       1495 ; cbar.c    736       if ( test_vars.CBX.FrameCnt > 9)
0000AD 964842rr        1497         MOV.B   ES,#SEG( _test_vars+10 )
0000B1 9908rrrr        1498         MOV.W   R0,#SOF( _test_vars+10 )
0000B5 8200            1499         MOV.B   R0L,[R0]
0000B7 910409          1500         CMP.B   R0L,#09H
0000BA F90A            1501         BL      _9
                       1502 ; cbar.c    737         {
                       1503 ; cbar.c    738         test_vars.CBX.FrameCnt = 1;
0000BC 964842rr        1505         MOV.B   ES,#SEG( _test_vars+10 )
0000C0 9908rrrr        1506         MOV.W   R0,#SOF( _test_vars+10 )
0000C4 B201            1507         MOV.B   [R0],#01H
                       1508 ; cbar.c    739         test_vars.CBX.SoundFrameCnt = 1;
0000C6 964842rr        1510         MOV.B   ES,#SEG( _test_vars+13 )
0000CA 9908rrrr        1511         MOV.W   R0,#SOF( _test_vars+13 )
0000CE B201            1512         MOV.B   [R0],#01H
                       1513 ; cbar.c    740         }
0000D0                 1515 _9:
                       1516 ; cbar.c    741 
                       1517 ; cbar.c    742       test_vars.CBX.SyncLineCnt = 12;              // Next interrupt in 12 lines
0000D0 964842rr        1519         MOV.B   ES,#SEG( _test_vars+11 )
0000D4 9908rrrr        1520         MOV.W   R0,#SOF( _test_vars+11 )
0000D8 92080C          1521         MOV.B   [R0],#0CH
                       1522 ; cbar.c    743       test_vars.CBX.SyncLinePtr = 1;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  20

ADDR   CODE            LINE SOURCELINE
0000DB 964842rr        1524         MOV.B   ES,#SEG( _test_vars+12 )
0000DF 9908rrrr        1525         MOV.W   R0,#SOF( _test_vars+12 )
0000E3 B201            1526         MOV.B   [R0],#01H
                       1527 ; cbar.c    744 
                       1528 ; cbar.c    745       test_vars.CBX.LineCnt = 6;
0000E5 964842rr        1530         MOV.B   ES,#SEG( _test_vars+8 )
0000E9 9908rrrr        1531         MOV.W   R0,#SOF( _test_vars+8 )
0000ED BA06            1532         MOV.W   [R0],#06H
                       1533 ; cbar.c    746 
                       1534 ; cbar.c    747       test_vars.CBX.SoundCnt = 2;
0000EF 964842rr        1536         MOV.B   ES,#SEG( _test_vars+14 )
0000F3 9908rrrr        1537         MOV.W   R0,#SOF( _test_vars+14 )
0000F7 B202            1538         MOV.B   [R0],#02H
                       1539 ; cbar.c    748       test_vars.CBX.SoundPtr = 3;
0000F9 964842rr        1541         MOV.B   ES,#SEG( _test_vars+15 )
0000FD 9908rrrr        1542         MOV.W   R0,#SOF( _test_vars+15 )
000101 B203            1543         MOV.B   [R0],#03H
                       1544 ; cbar.c    749       test_vars.CBX.SoundPtrMax = 47;
000103 964842rr        1546         MOV.B   ES,#SEG( _test_vars+16 )
000107 9908rrrr        1547         MOV.W   R0,#SOF( _test_vars+16 )
00010B 92082F          1548         MOV.B   [R0],#02FH
                       1549 ; cbar.c    750 
                       1550 ; cbar.c    751       test_vars.CBX.Status = cb_vars.CBX.Status; //FIELD1;                // This
                             is field 1 of 4
00010E 964842rr        1552         MOV.B   ES,#SEG( _cb_vars+20 )
000112 9908rrrr        1553         MOV.W   R0,#SOF( _cb_vars+20 )
000116 8A00            1554         MOV.W   R0,[R0]
000118 964842rr        1555         MOV.B   ES,#SEG( _test_vars+20 )
00011C 9918rrrr        1556         MOV.W   R1,#SOF( _test_vars+20 )
000120 8A09            1557         MOV.W   [R1],R0
                       1558 ; cbar.c    752       //StatusPort = test_vars.CBX.Status;
                       1559 ; cbar.c    753 #endif
                       1560 ; cbar.c    754 //KS. Controls position of the text lines in the test pattern.
                       1561 ; cbar.c    755         
                       1562 ; cbar.c    756       if (TextLineDir==0)
000122 964842rr        1564         MOV.B   ES,#SEG( _4 )
000126 9908rrrr        1565         MOV.W   R0,#SOF( _4 )
00012A 8200            1566         MOV.B   R0L,[R0]
00012C F217            1567         BNE     _10
                       1568 ; cbar.c    757         {       
                       1569 ; cbar.c    758         if (TextLineCnt++ == 100) 
00012E 964842rr        1571         MOV.B   ES,#SEG( _5 )
000132 9908rrrr        1572         MOV.W   R0,#SOF( _5 )
000136 8200            1573         MOV.B   R0L,[R0]
000138 8110            1574         MOV.B   R0H,R0L
00013A A101            1575         ADDS.B  R0L,#01H
00013C 964842rr        1576         MOV.B   ES,#SEG( _5 )
000140 9918rrrr        1577         MOV.W   R1,#SOF( _5 )
000144 8209            1578         MOV.B   [R1],R0L
000146 911464          1579         CMP.B   R0H,#064H
                       1580         BNE     _38
000149 F302           +1580 ;       BEQ     _LG_10
00014B D50356         +1580 ;       JMP.L   _38
00014B D50356         +1580 ;       JMP.L   _38
00014E                +1580 _LG_10:
                       1581 ; cbar.c    759                 TextLineDir = 1;        
00014E 964842rr        1583         MOV.B   ES,#SEG( _4 )
000152 9908rrrr        1584         MOV.W   R0,#SOF( _4 )
000156 B201            1585         MOV.B   [R0],#01H
                       1586 ; cbar.c    760         }
                       1588         BR      _38
000158 D50350         +1588         JMP.L   _38
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  21

ADDR   CODE            LINE SOURCELINE
000158 D5035000       +1588         JMP.L   _38
00015C                 1589 _10:
                       1590 ; cbar.c    761       else
                       1591 ; cbar.c    762         {       
                       1592 ; cbar.c    763         if (TextLineCnt-- == 50)        
00015C 964842rr        1594         MOV.B   ES,#SEG( _5 )
000160 9908rrrr        1595         MOV.W   R0,#SOF( _5 )
000164 8200            1596         MOV.B   R0L,[R0]
000166 8110            1597         MOV.B   R0H,R0L
000168 A10F            1598         ADDS.B  R0L,#0FH
00016A 964842rr        1599         MOV.B   ES,#SEG( _5 )
00016E 9918rrrr        1600         MOV.W   R1,#SOF( _5 )
000172 8209            1601         MOV.B   [R1],R0L
000174 911432          1602         CMP.B   R0H,#032H
                       1603         BNE     _38
000177 F302           +1603 ;       BEQ     _LG_12
000179 D5033F         +1603 ;       JMP.L   _38
000179 D5033F         +1603 ;       JMP.L   _38
00017C                +1603 _LG_12:
                       1604 ; cbar.c    764                 TextLineDir = 0;        
00017C 964842rr        1606         MOV.B   ES,#SEG( _4 )
000180 9908rrrr        1607         MOV.W   R0,#SOF( _4 )
000184 B200            1608         MOV.B   [R0],#00H
                       1609 ; cbar.c    765         }
                       1610 ; cbar.c    766 
                       1611 ; cbar.c    767       goto JKexit;
                       1613         BR      _38
000186 D50339         +1613         JMP.L   _38
                       1614 ; cbar.c    768       }
00018A                 1616 _11:
                       1617 ; cbar.c    769     else
                       1618 ; cbar.c    770       {
                       1619 ; cbar.c    771 #if 1    
                       1620 ; cbar.c    772       if ( cb_vars.CBX.Status & FIELD1)
00018A 964842rr        1622         MOV.B   ES,#SEG( _cb_vars+20 )
00018E 9908rrrr        1623         MOV.W   R0,#SOF( _cb_vars+20 )
000192 8A00            1624         MOV.W   R0,[R0]
000194 8910            1625         MOV.W   R1,R0
000196 99280200        1626         MOV.W   R2,#0200H
00019A 99150200        1627         AND.W   R1,#0200H
00019E F30C            1628         BEQ     _12
                       1629 ; cbar.c    773         {
                       1630 ; cbar.c    774         cb_vars.CBX.Status &= ~FIELD1;
0001A0 9905FDFF        1632         AND.W   R0,#0FDFFH
0001A4 964842rr        1633         MOV.B   ES,#SEG( _cb_vars+20 )
0001A8 9918rrrr        1634         MOV.W   R1,#SOF( _cb_vars+20 )
0001AC 8A09            1635         MOV.W   [R1],R0
                       1636 ; cbar.c    775         StatusPort = cb_vars.CBX.Status;
0001AE 96484206        1638         MOV.B   ES,#SEG( _StatusPort )
0001B2 9918A000        1639         MOV.W   R1,#SOF( _StatusPort )
0001B6 8A09            1640         MOV.W   [R1],R0
                       1641 ; cbar.c    776         }
0001B8                 1643 _12:
                       1644 ; cbar.c    777 
                       1645 ; cbar.c    778       if ( ++cb_vars.CBX.LineCnt >= 525)
0001B8 964842rr        1647         MOV.B   ES,#SEG( _cb_vars+8 )
0001BC 9908rrrr        1648         MOV.W   R0,#SOF( _cb_vars+8 )
0001C0 8A00            1649         MOV.W   R0,[R0]
0001C2 A901            1650         ADDS.W  R0,#01H
0001C4 964842rr        1651         MOV.B   ES,#SEG( _cb_vars+8 )
0001C8 9918rrrr        1652         MOV.W   R1,#SOF( _cb_vars+8 )
0001CC 8A09            1653         MOV.W   [R1],R0
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  22

ADDR   CODE            LINE SOURCELINE
0001CE 9904020D        1654         CMP.W   R0,#020DH
0001D2 F123            1655         BCS     _14
                       1656 ; cbar.c    779         {
                       1657 ; cbar.c    780         cb_vars.CBX.FrameCnt++;
0001D4 964842rr        1659         MOV.B   ES,#SEG( _cb_vars+10 )
0001D8 9908rrrr        1660         MOV.W   R0,#SOF( _cb_vars+10 )
0001DC 8200            1661         MOV.B   R0L,[R0]
0001DE A101            1662         ADDS.B  R0L,#01H
0001E0 964842rr        1663         MOV.B   ES,#SEG( _cb_vars+10 )
0001E4 9918rrrr        1664         MOV.W   R1,#SOF( _cb_vars+10 )
0001E8 8209            1665         MOV.B   [R1],R0L
                       1666 ; cbar.c    781         cb_vars.CBX.LineCnt = 0;
0001EA 964842rr        1668         MOV.B   ES,#SEG( _cb_vars+8 )
0001EE 9908rrrr        1669         MOV.W   R0,#SOF( _cb_vars+8 )
0001F2 BA00            1670         MOV.W   [R0],#00H
                       1671 ; cbar.c    782         if ( ++cb_vars.CBX.SoundFrameCnt > 5)
0001F4 964842rr        1673         MOV.B   ES,#SEG( _cb_vars+13 )
0001F8 9908rrrr        1674         MOV.W   R0,#SOF( _cb_vars+13 )
0001FC 8200            1675         MOV.B   R0L,[R0]
0001FE A101            1676         ADDS.B  R0L,#01H
000200 964842rr        1677         MOV.B   ES,#SEG( _cb_vars+13 )
000204 9918rrrr        1678         MOV.W   R1,#SOF( _cb_vars+13 )
000208 8209            1679         MOV.B   [R1],R0L
00020A 910405          1680         CMP.B   R0L,#05H
00020D F906            1681         BL      _14
                       1682 ; cbar.c    783           cb_vars.CBX.SoundFrameCnt = 1;
00020F 964842rr        1684         MOV.B   ES,#SEG( _cb_vars+13 )
000213 9908rrrr        1685         MOV.W   R0,#SOF( _cb_vars+13 )
000217 B201            1686         MOV.B   [R0],#01H
                       1687 ; cbar.c    784         }
00021A                 1689 _14:
                       1690 ; cbar.c    785 #if 0
                       1691 ; cbar.c    786       if ( !--cb_vars.CBX.SoundCnt)
                       1692 ; cbar.c    787         {
                       1693 ; cbar.c    788         if ( cb_vars.CBX.SoundPtr > cb_vars.CBX.SoundPtrMax)
                       1694 ; cbar.c    789           {
                       1695 ; cbar.c    790           cb_vars.CBX.SoundPtr = 0;
                       1696 ; cbar.c    791 
                       1697 ; cbar.c    792           if ( cb_vars.CBX.SoundPtrMax == 46)
                       1698 ; cbar.c    793             cb_vars.CBX.SoundPtrMax = 47;
                       1699 ; cbar.c    794           else
                       1700 ; cbar.c    795             cb_vars.CBX.SoundPtrMax = 46;
                       1701 ; cbar.c    796           }
                       1702 ; cbar.c    797         tmp = Sound525[cb_vars.CBX.SoundPtr];      // Get sound information
                       1703 ; cbar.c    798 
                       1704 ; cbar.c    799         if ( cb_vars.CBX.SoundPtr++ == 47)        // Prepare for line 263
                       1705 ; cbar.c    800           if ( cb_vars.CBX.SoundFrameCnt & 0x01)  // Sound frames 1,3,5 are speci
                            al
                       1706 ; cbar.c    801             tmp |= S3OR4;
                       1707 ; cbar.c    802 
                       1708 ; cbar.c    803         cb_vars.CBX.Status &= ~SOUND;              // Clear previous sound sample
                            
                       1709 ; cbar.c    804 
                       1710 ; cbar.c    805         if ( cb_vars.CBX.SoundEnable)
                       1711 ; cbar.c    806           {
                       1712 ; cbar.c    807           cb_vars.CBX.Status |= ( tmp & SOUND);    // Sound samples
                       1713 ; cbar.c    808           }
                       1714 ; cbar.c    809         cb_vars.CBX.SoundCnt = tmp & 0x0F;         // Lines to next sound update
                       1715 ; cbar.c    810         StatusPort = cb_vars.CBX.Status;          // Update status port
                       1716 ; cbar.c    811         }
                       1717 ; cbar.c    812 #endif          
                       1718 ; cbar.c    813 //#else
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  23

ADDR   CODE            LINE SOURCELINE
                       1719 ; cbar.c    814 //again
                       1720 ; cbar.c    815       if ( test_vars.CBX.Status & FIELD1)
00021A 964842rr        1722         MOV.B   ES,#SEG( _test_vars+20 )
00021E 9908rrrr        1723         MOV.W   R0,#SOF( _test_vars+20 )
000222 8A00            1724         MOV.W   R0,[R0]
000224 5920            1725         AND.W   R2,R0
000226 F307            1726         BEQ     _15
                       1727 ; cbar.c    816         {
                       1728 ; cbar.c    817         test_vars.CBX.Status &= ~FIELD1;
000228 9905FDFF        1730         AND.W   R0,#0FDFFH
00022C 964842rr        1731         MOV.B   ES,#SEG( _test_vars+20 )
000230 9918rrrr        1732         MOV.W   R1,#SOF( _test_vars+20 )
000234 8A09            1733         MOV.W   [R1],R0
                       1734 ; cbar.c    818         //StatusPort = test_vars.CBX.Status;
                       1735 ; cbar.c    819         }
000236                 1737 _15:
                       1738 ; cbar.c    820 
                       1739 ; cbar.c    821       if ( ++test_vars.CBX.LineCnt >= 525)
000236 964842rr        1741         MOV.B   ES,#SEG( _test_vars+8 )
00023A 9908rrrr        1742         MOV.W   R0,#SOF( _test_vars+8 )
00023E 8A00            1743         MOV.W   R0,[R0]
000240 A901            1744         ADDS.W  R0,#01H
000242 964842rr        1745         MOV.B   ES,#SEG( _test_vars+8 )
000246 9918rrrr        1746         MOV.W   R1,#SOF( _test_vars+8 )
00024A 8A09            1747         MOV.W   [R1],R0
00024C 9904020D        1748         CMP.W   R0,#020DH
000250 F123            1749         BCS     _18
                       1750 ; cbar.c    822         {
                       1751 ; cbar.c    823         test_vars.CBX.FrameCnt++;
000252 964842rr        1753         MOV.B   ES,#SEG( _test_vars+10 )
000256 9908rrrr        1754         MOV.W   R0,#SOF( _test_vars+10 )
00025A 8200            1755         MOV.B   R0L,[R0]
00025C A101            1756         ADDS.B  R0L,#01H
00025E 964842rr        1757         MOV.B   ES,#SEG( _test_vars+10 )
000262 9918rrrr        1758         MOV.W   R1,#SOF( _test_vars+10 )
000266 8209            1759         MOV.B   [R1],R0L
                       1760 ; cbar.c    824         test_vars.CBX.LineCnt = 0;
000268 964842rr        1762         MOV.B   ES,#SEG( _test_vars+8 )
00026C 9908rrrr        1763         MOV.W   R0,#SOF( _test_vars+8 )
000270 BA00            1764         MOV.W   [R0],#00H
                       1765 ; cbar.c    825         if ( ++test_vars.CBX.SoundFrameCnt > 5)
000272 964842rr        1767         MOV.B   ES,#SEG( _test_vars+13 )
000276 9908rrrr        1768         MOV.W   R0,#SOF( _test_vars+13 )
00027A 8200            1769         MOV.B   R0L,[R0]
00027C A101            1770         ADDS.B  R0L,#01H
00027E 964842rr        1771         MOV.B   ES,#SEG( _test_vars+13 )
000282 9918rrrr        1772         MOV.W   R1,#SOF( _test_vars+13 )
000286 8209            1773         MOV.B   [R1],R0L
000288 910405          1774         CMP.B   R0L,#05H
00028B F906            1775         BL      _18
                       1776 ; cbar.c    826           test_vars.CBX.SoundFrameCnt = 1;
00028D 964842rr        1778         MOV.B   ES,#SEG( _test_vars+13 )
000291 9908rrrr        1779         MOV.W   R0,#SOF( _test_vars+13 )
000295 B201            1780         MOV.B   [R0],#01H
                       1781 ; cbar.c    827         }
                       1782 ; cbar.c    828 #if 0
                       1783 ; cbar.c    829       if ( !--test_vars.CBX.SoundCnt)
                       1784 ; cbar.c    830         {
                       1785 ; cbar.c    831         if ( test_vars.CBX.SoundPtr > test_vars.CBX.SoundPtrMax)
                       1786 ; cbar.c    832           {
                       1787 ; cbar.c    833           test_vars.CBX.SoundPtr = 0;
                       1788 ; cbar.c    834 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  24

ADDR   CODE            LINE SOURCELINE
                       1789 ; cbar.c    835           if ( test_vars.CBX.SoundPtrMax == 46)
                       1790 ; cbar.c    836             test_vars.CBX.SoundPtrMax = 47;
                       1791 ; cbar.c    837           else
                       1792 ; cbar.c    838             test_vars.CBX.SoundPtrMax = 46;
                       1793 ; cbar.c    839           }
                       1794 ; cbar.c    840         tmpv = Sound525[test_vars.CBX.SoundPtr];      // Get sound information
                       1795 ; cbar.c    841 
                       1796 ; cbar.c    842         if ( test_vars.CBX.SoundPtr++ == 47)        // Prepare for line 263
                       1797 ; cbar.c    843           if ( test_vars.CBX.SoundFrameCnt & 0x01)  // Sound frames 1,3,5 are spe
                            cial
                       1798 ; cbar.c    844             tmpv |= S3OR4;
                       1799 ; cbar.c    845 
                       1800 ; cbar.c    846         test_vars.CBX.Status &= ~SOUND;              // Clear previous sound samp
                            le
                       1801 ; cbar.c    847 
                       1802 ; cbar.c    848         if ( test_vars.CBX.SoundEnable)
                       1803 ; cbar.c    849           test_vars.CBX.Status |= ( tmpv & SOUND);    // Sound samples
                       1804 ; cbar.c    850         test_vars.CBX.SoundCnt = tmpv & 0x0F;         // Lines to next sound upda
                            te
                       1805 ; cbar.c    851         //StatusPort = test_vars.CBX.Status;          // Update status port
                       1806 ; cbar.c    852         }
                       1807 ; cbar.c    853 #endif
                       1808 ; cbar.c    854 #endif        
                       1809 ; cbar.c    855      }
                       1810 ; cbar.c    856     } // if NTSC
000298                 1812 _18:
                       1813 ; cbar.c    857 #ifdef CLASSIC   
                       1814 ; cbar.c    858   if ( --cb_vars.CBX.SyncLineCnt == 0)
000298 964842rr        1816         MOV.B   ES,#SEG( _cb_vars+11 )
00029C 9908rrrr        1817         MOV.W   R0,#SOF( _cb_vars+11 )
0002A0 8200            1818         MOV.B   R0L,[R0]
0002A2 A10F            1819         ADDS.B  R0L,#0FH
0002A4 964842rr        1820         MOV.B   ES,#SEG( _cb_vars+11 )
0002A8 9918rrrr        1821         MOV.W   R1,#SOF( _cb_vars+11 )
0002AC 8209            1822         MOV.B   [R1],R0L
0002AE 6100            1823         OR.B    R0L,R0L
                       1824         BNE     _22
0002B0 F302           +1824 ;       BEQ     _LG_26
0002B2 D500A0         +1824 ;       JMP.L   _22
0002B2 D500A000       +1824 ;       JMP.L   _22
0002B6                +1824 _LG_26:
                       1825 ; cbar.c    859     {
                       1826 ; cbar.c    860     JKpin = 1;
0002B6 08138D          1828         SETB    0431H.5
                       1829 ; cbar.c    861     tmp = cb_vars.CBX.TablePtr[++cb_vars.CBX.SyncLinePtr];
0002B9 964842rr        1831         MOV.B   ES,#SEG( _cb_vars+12 )
0002BD 9908rrrr        1832         MOV.W   R0,#SOF( _cb_vars+12 )
0002C1 8200            1833         MOV.B   R0L,[R0]
0002C3 A101            1834         ADDS.B  R0L,#01H
0002C5 8120            1835         MOV.B   R1L,R0L
0002C7 8102            1836         MOV.B   R0L,R1L
0002C9 B110            1837         MOVS.B  R0H,#00H
0002CB 964842rr        1838         MOV.B   ES,#SEG( _cb_vars+12 )
0002CF 9928rrrr        1839         MOV.W   R2,#SOF( _cb_vars+12 )
0002D3 822A            1840         MOV.B   [R2],R1L
0002D5 D901            1841         ASL.W   R0,#01H
0002D7 8920            1842         MOV.W   R2,R0
0002D9 9839            1843         SEXT.W  R3
0002DB 964842rr        1844         MOV.B   ES,#SEG( _cb_vars )
0002DF 9918rrrr        1845         MOV.W   R1,#SOF( _cb_vars )
0002E3 8B01            1846         MOV.W   R0,[R1+]
0002E5 8A11            1847         MOV.W   R1,[R1]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  25

ADDR   CODE            LINE SOURCELINE
0002E7 0902            1848         ADD.W   R0,R2
0002E9 1913            1849         ADDC.W  R1,R3
0002EB 862C43          1850         MOV.B   CS,R1L
0002EE 8810            1851         MOVC.W  R1,[R0+]
0002F0 964842rr        1852         MOV.B   ES,#SEG( _7 )
0002F4 9908rrrr        1853         MOV.W   R0,#SOF( _7 )
0002F8 8A18            1854         MOV.W   [R0],R1
                       1855 ; cbar.c    862     JKpin = 0;
0002FA 08038D          1857         CLR     0431H.5
                       1858 ; cbar.c    863     if ( tmp == 0)
0002FD 6911            1860         OR.W    R1,R1
0002FF F230            1861         BNE     _20
                       1862 ; cbar.c    864       {
                       1863 ; cbar.c    865       if ( cb_vars.CBX.NewPattern)
000301 964842rr        1865         MOV.B   ES,#SEG( _cb_vars+18 )
000305 9908rrrr        1866         MOV.W   R0,#SOF( _cb_vars+18 )
000309 8200            1867         MOV.B   R0L,[R0]
00030B F317            1868         BEQ     _19
                       1869 ; cbar.c    866         {     
                       1870 ; cbar.c    867         cb_vars.CBX.NewPattern = cb_vars.CBX.Blanking = FALSE;
00030D 964842rr        1872         MOV.B   ES,#SEG( _cb_vars+17 )
000311 9908rrrr        1873         MOV.W   R0,#SOF( _cb_vars+17 )
000315 B200            1874         MOV.B   [R0],#00H
000317 964842rr        1875         MOV.B   ES,#SEG( _cb_vars+18 )
00031B 9908rrrr        1876         MOV.W   R0,#SOF( _cb_vars+18 )
00031F B200            1877         MOV.B   [R0],#00H
                       1878 ; cbar.c    868 
                       1879 ; cbar.c    869         cb_vars.CBX.TablePtr = cb_vars.CBX.newTablePtr;
000321 964842rr        1881         MOV.B   ES,#SEG( _cb_vars+4 )
000325 9918rrrr        1882         MOV.W   R1,#SOF( _cb_vars+4 )
000329 8B01            1883         MOV.W   R0,[R1+]
00032B 8A11            1884         MOV.W   R1,[R1]
00032D 964842rr        1885         MOV.B   ES,#SEG( _cb_vars )
000331 9928rrrr        1886         MOV.W   R2,#SOF( _cb_vars )
000335 8B0A            1887         MOV.W   [R2+],R0
000337 8A1A            1888         MOV.W   [R2],R1
                       1889 ; cbar.c    870         }
00033A                 1891 _19:
                       1892 ; cbar.c    871       cb_vars.CBX.SyncLinePtr = 0;
00033A 964842rr        1894         MOV.B   ES,#SEG( _cb_vars+12 )
00033E 9908rrrr        1895         MOV.W   R0,#SOF( _cb_vars+12 )
000342 B200            1896         MOV.B   [R0],#00H
                       1897 ; cbar.c    872       tmp = cb_vars.CBX.TablePtr[0];
000344 964842rr        1899         MOV.B   ES,#SEG( _cb_vars )
000348 9918rrrr        1900         MOV.W   R1,#SOF( _cb_vars )
00034C 8B01            1901         MOV.W   R0,[R1+]
00034E 8A11            1902         MOV.W   R1,[R1]
000350 862C43          1903         MOV.B   CS,R1L
000353 8810            1904         MOVC.W  R1,[R0+]
000355 964842rr        1905         MOV.B   ES,#SEG( _7 )
000359 9908rrrr        1906         MOV.W   R0,#SOF( _7 )
00035D 8A18            1907         MOV.W   [R0],R1
                       1908 ; cbar.c    873       }
000360                 1910 _20:
                       1911 ; cbar.c    874 
                       1912 ; cbar.c    875     cb_vars.CBX.SyncLineCnt = tmp / 256; // extract line cnt to SyncLineCnt
000360 964842rr        1914         MOV.B   ES,#SEG( _7 )
000364 9908rrrr        1915         MOV.W   R0,#SOF( _7 )
000368 8A00            1916         MOV.W   R0,[R0]
00036A 8940            1917         MOV.W   R4,R0
00036C D808            1918         LSR.W   R0,#08H
00036E 964842rr        1919         MOV.B   ES,#SEG( _cb_vars+11 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  26

ADDR   CODE            LINE SOURCELINE
000372 9928rrrr        1920         MOV.W   R2,#SOF( _cb_vars+11 )
000376 820A            1921         MOV.B   [R2],R0L
                       1922 ; cbar.c    876     tmp %= 256;              // extract SramBankX + SyncLineX tmp
000378 7955            1924         XOR.W   R5,R5
00037A E9410100        1925         DIVU.D  R4,#0100H
00037E 8915            1926         MOV.W   R1,R5
000380 964842rr        1927         MOV.B   ES,#SEG( _7 )
000384 9908rrrr        1928         MOV.W   R0,#SOF( _7 )
000388 8A58            1929         MOV.W   [R0],R5
                       1930 ; cbar.c    877     tmp &= 0x3F;
00038A 9915003F        1932         AND.W   R1,#03FH
00038E 964842rr        1933         MOV.B   ES,#SEG( _7 )
000392 9908rrrr        1934         MOV.W   R0,#SOF( _7 )
000396 8A18            1935         MOV.W   [R0],R1
                       1936 ; cbar.c    878     cb_vars.CBX.Status &= ~( S5S4S3S2 | S1S0);
000398 964842rr        1938         MOV.B   ES,#SEG( _cb_vars+20 )
00039C 9908rrrr        1939         MOV.W   R0,#SOF( _cb_vars+20 )
0003A0 8A00            1940         MOV.W   R0,[R0]
0003A2 9905FFC0        1941         AND.W   R0,#0FFC0H
0003A6 964842rr        1942         MOV.B   ES,#SEG( _cb_vars+20 )
0003AA 9928rrrr        1943         MOV.W   R2,#SOF( _cb_vars+20 )
0003AE 8A0A            1944         MOV.W   [R2],R0
                       1945 ; cbar.c    879     cb_vars.CBX.Status |= tmp;
0003B0 6901            1947         OR.W    R0,R1
0003B2 964842rr        1948         MOV.B   ES,#SEG( _cb_vars+20 )
0003B6 9918rrrr        1949         MOV.W   R1,#SOF( _cb_vars+20 )
0003BA 8A09            1950         MOV.W   [R1],R0
                       1951 ; cbar.c    880 
                       1952 ; cbar.c    881     if ( cb_vars.CBX.Blanking)                    // If blanking do NOT enable an
                            y
0003BC 964842rr        1954         MOV.B   ES,#SEG( _cb_vars+17 )
0003C0 9908rrrr        1955         MOV.W   R0,#SOF( _cb_vars+17 )
0003C4 8200            1956         MOV.B   R0L,[R0]
0003C6 F30C            1957         BEQ     _21
                       1958 ; cbar.c    882       cb_vars.CBX.Status &= ~S5S4S3S2;            //  bank
0003C8 964842rr        1960         MOV.B   ES,#SEG( _cb_vars+20 )
0003CC 9908rrrr        1961         MOV.W   R0,#SOF( _cb_vars+20 )
0003D0 8A00            1962         MOV.W   R0,[R0]
0003D2 9905FFC3        1963         AND.W   R0,#0FFC3H
0003D6 964842rr        1964         MOV.B   ES,#SEG( _cb_vars+20 )
0003DA 9918rrrr        1965         MOV.W   R1,#SOF( _cb_vars+20 )
0003DE 8A09            1966         MOV.W   [R1],R0
0003DE 8A09            1966         MOV.W   [R1],R0
0003E0                 1967 _21:
                       1968 ; cbar.c    883     StatusPort = cb_vars.CBX.Status;
0003E0 964842rr        1970         MOV.B   ES,#SEG( _cb_vars+20 )
0003E4 9908rrrr        1971         MOV.W   R0,#SOF( _cb_vars+20 )
0003E8 8A00            1972         MOV.W   R0,[R0]
0003EA 96484206        1973         MOV.B   ES,#SEG( _StatusPort )
0003EE 9918A000        1974         MOV.W   R1,#SOF( _StatusPort )
0003F2 8A09            1975         MOV.W   [R1],R0
                       1976 ; cbar.c    884     }
0003F4                 1978 _22:
                       1979 ; cbar.c    885 //KS.Test of text line moving in the test pattern. 
                       1980 ; cbar.c    886 
                       1981 ; cbar.c    887 //Field #1.
                       1982 ; cbar.c    888 
                       1983 ; cbar.c    889      if (cb_vars.CBX.LineCnt >= TextLineCnt)            //Start of text lines !
0003F4 964842rr        1985         MOV.B   ES,#SEG( _cb_vars+8 )
0003F8 9908rrrr        1986         MOV.W   R0,#SOF( _cb_vars+8 )
0003FC 8A00            1987         MOV.W   R0,[R0]
0003FE 964842rr        1988         MOV.B   ES,#SEG( _5 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  27

ADDR   CODE            LINE SOURCELINE
000402 9918rrrr        1989         MOV.W   R1,#SOF( _5 )
000406 82A1            1990         MOV.B   R5L,[R1]
000408 818A            1991         MOV.B   R4L,R5L
00040A B190            1992         MOVS.B  R4H,#00H
00040C 4904            1993         CMP.W   R0,R4
00040E F143            1994         BCS     _24
                       1995 ; cbar.c    890         {
                       1996 ; cbar.c    891         if (cb_vars.CBX.LineCnt <= (TextLineCnt+7))
000410 812A            1998         MOV.B   R1L,R5L
000412 B130            1999         MOVS.B  R1H,#00H
000414 A917            2000         ADDS.W  R1,#07H
000416 4901            2001         CMP.W   R0,R1
000418 F83E            2002         BG      _24
                       2003 ; cbar.c    892                 {
                       2004 ; cbar.c    893                 tmp = TextLines_SyncLineC[cb_vars.CBX.LineCnt - TextLineCnt];
00041A 2904            2006         SUB.W   R0,R4
00041C D901            2007         ASL.W   R0,#01H
00041E 8920            2008         MOV.W   R2,R0
000420 B930            2009         MOVS.W  R3,#00H
000422 B910            2010         MOV.W   R1,#SEG( _TextLines_SyncLineC )
000424 99080B24        2011         MOV.W   R0,#SOF( _TextLines_SyncLineC )
000428 0902            2012         ADD.W   R0,R2
00042A 1913            2013         ADDC.W  R1,R3
00042C 862C43          2014         MOV.B   CS,R1L
00042F 8810            2015         MOVC.W  R1,[R0+]
000431 8921            2016         MOV.W   R2,R1
000433 964842rr        2017         MOV.B   ES,#SEG( _7 )
000437 9908rrrr        2018         MOV.W   R0,#SOF( _7 )
00043B 8A18            2019         MOV.W   [R0],R1
                       2020 ; cbar.c    894                 tmp %= 256;              // extract SramBankX + SyncLineX tmp
00043D 7933            2022         XOR.W   R3,R3
00043F E9210100        2023         DIVU.D  R2,#0100H
000443 8913            2024         MOV.W   R1,R3
000445 964842rr        2025         MOV.B   ES,#SEG( _7 )
000449 9908rrrr        2026         MOV.W   R0,#SOF( _7 )
00044D 8A38            2027         MOV.W   [R0],R3
                       2028 ; cbar.c    895                 tmp &= 0x3F;
00044F 9915003F        2030         AND.W   R1,#03FH
000453 964842rr        2031         MOV.B   ES,#SEG( _7 )
000457 9908rrrr        2032         MOV.W   R0,#SOF( _7 )
00045B 8A18            2033         MOV.W   [R0],R1
                       2034 ; cbar.c    896                 cb_vars.CBX.Status &= ~( S5S4S3S2 | S1S0);
00045D 964842rr        2036         MOV.B   ES,#SEG( _cb_vars+20 )
000461 9908rrrr        2037         MOV.W   R0,#SOF( _cb_vars+20 )
000465 8A00            2038         MOV.W   R0,[R0]
000467 9905FFC0        2039         AND.W   R0,#0FFC0H
00046B 964842rr        2040         MOV.B   ES,#SEG( _cb_vars+20 )
00046F 9928rrrr        2041         MOV.W   R2,#SOF( _cb_vars+20 )
000473 8A0A            2042         MOV.W   [R2],R0
                       2043 ; cbar.c    897                 cb_vars.CBX.Status |= tmp;
000475 6901            2045         OR.W    R0,R1
000477 964842rr        2046         MOV.B   ES,#SEG( _cb_vars+20 )
00047B 9918rrrr        2047         MOV.W   R1,#SOF( _cb_vars+20 )
00047F 8A09            2048         MOV.W   [R1],R0
                       2049 ; cbar.c    898                 StatusPort = cb_vars.CBX.Status;
000481 964842rr        2051         MOV.B   ES,#SEG( _cb_vars+20 )
000485 9908rrrr        2052         MOV.W   R0,#SOF( _cb_vars+20 )
000489 8A00            2053         MOV.W   R0,[R0]
00048B 96484206        2054         MOV.B   ES,#SEG( _StatusPort )
00048F 9918A000        2055         MOV.W   R1,#SOF( _StatusPort )
000493 8A09            2056         MOV.W   [R1],R0
                       2057 ; cbar.c    899                 } 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  28

ADDR   CODE            LINE SOURCELINE
                       2058 ; cbar.c    900        }
000496                 2060 _24:
                       2061 ; cbar.c    901      if (cb_vars.CBX.LineCnt == (TextLineCnt + 8))      //Restore original patter
                            n 
000496 964842rr        2063         MOV.B   ES,#SEG( _cb_vars+8 )
00049A 9908rrrr        2064         MOV.W   R0,#SOF( _cb_vars+8 )
00049E 8A00            2065         MOV.W   R0,[R0]
0004A0 81CA            2066         MOV.B   R6L,R5L
0004A2 B1D0            2067         MOVS.B  R6H,#00H
0004A4 99580008        2068         MOV.W   R5,#08H
0004A8 0956            2069         ADD.W   R5,R6
0004AA 4905            2070         CMP.W   R0,R5
0004AC F246            2071         BNE     _25
                       2072 ; cbar.c    902         {
                       2073 ; cbar.c    903         tmp = cb_vars.CBX.TablePtr[cb_vars.CBX.SyncLinePtr];
0004AE 964842rr        2075         MOV.B   ES,#SEG( _cb_vars+12 )
0004B2 9908rrrr        2076         MOV.W   R0,#SOF( _cb_vars+12 )
0004B6 8200            2077         MOV.B   R0L,[R0]
0004B8 B110            2078         MOVS.B  R0H,#00H
0004BA D901            2079         ASL.W   R0,#01H
0004BC 8920            2080         MOV.W   R2,R0
0004BE 9839            2081         SEXT.W  R3
0004C0 964842rr        2082         MOV.B   ES,#SEG( _cb_vars )
0004C4 9918rrrr        2083         MOV.W   R1,#SOF( _cb_vars )
0004C8 8B01            2084         MOV.W   R0,[R1+]
0004CA 8A11            2085         MOV.W   R1,[R1]
0004CC 0902            2086         ADD.W   R0,R2
0004CE 1913            2087         ADDC.W  R1,R3
0004D0 862C43          2088         MOV.B   CS,R1L
0004D3 8810            2089         MOVC.W  R1,[R0+]
0004D5 8921            2090         MOV.W   R2,R1
0004D7 964842rr        2091         MOV.B   ES,#SEG( _7 )
0004DB 9908rrrr        2092         MOV.W   R0,#SOF( _7 )
0004DF 8A18            2093         MOV.W   [R0],R1
                       2094 ; cbar.c    904         tmp %= 256;              // extract SramBankX + SyncLineX tmp
0004E1 7933            2096         XOR.W   R3,R3
0004E3 E9210100        2097         DIVU.D  R2,#0100H
0004E7 8913            2098         MOV.W   R1,R3
0004E9 964842rr        2099         MOV.B   ES,#SEG( _7 )
0004ED 9908rrrr        2100         MOV.W   R0,#SOF( _7 )
0004F1 8A38            2101         MOV.W   [R0],R3
                       2102 ; cbar.c    905         tmp &= 0x3F;
0004F3 9915003F        2104         AND.W   R1,#03FH
0004F7 964842rr        2105         MOV.B   ES,#SEG( _7 )
0004FB 9908rrrr        2106         MOV.W   R0,#SOF( _7 )
0004FF 8A18            2107         MOV.W   [R0],R1
                       2108 ; cbar.c    906         cb_vars.CBX.Status &= ~( S5S4S3S2 | S1S0);
000501 964842rr        2110         MOV.B   ES,#SEG( _cb_vars+20 )
000505 9908rrrr        2111         MOV.W   R0,#SOF( _cb_vars+20 )
000509 8A00            2112         MOV.W   R0,[R0]
00050B 9905FFC0        2113         AND.W   R0,#0FFC0H
00050F 964842rr        2114         MOV.B   ES,#SEG( _cb_vars+20 )
000513 9928rrrr        2115         MOV.W   R2,#SOF( _cb_vars+20 )
000517 8A0A            2116         MOV.W   [R2],R0
                       2117 ; cbar.c    907         cb_vars.CBX.Status |= tmp;
000519 6901            2119         OR.W    R0,R1
00051B 964842rr        2120         MOV.B   ES,#SEG( _cb_vars+20 )
00051F 9918rrrr        2121         MOV.W   R1,#SOF( _cb_vars+20 )
000523 8A09            2122         MOV.W   [R1],R0
                       2123 ; cbar.c    908         StatusPort = cb_vars.CBX.Status;
000525 964842rr        2125         MOV.B   ES,#SEG( _cb_vars+20 )
000529 9908rrrr        2126         MOV.W   R0,#SOF( _cb_vars+20 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  29

ADDR   CODE            LINE SOURCELINE
00052D 8A00            2127         MOV.W   R0,[R0]
00052F 96484206        2128         MOV.B   ES,#SEG( _StatusPort )
000533 9918A000        2129         MOV.W   R1,#SOF( _StatusPort )
000537 8A09            2130         MOV.W   [R1],R0
                       2131 ; cbar.c    909         }
00053A                 2133 _25:
                       2134 ; cbar.c    910 
                       2135 ; cbar.c    911 
                       2136 ; cbar.c    912 //Field #2.
                       2137 ; cbar.c    913 //To prevent Interlacing "flicker" Down and Up movements is handled differently.
                       2138 ; cbar.c    914 
                       2139 ; cbar.c    915      if (TextLineDir == 0)      //Down movement.
00053A 964842rr        2141         MOV.B   ES,#SEG( _4 )
00053E 9908rrrr        2142         MOV.W   R0,#SOF( _4 )
000542 8200            2143         MOV.B   R0L,[R0]
000544 F207            2144         BNE     _26
                       2145 ; cbar.c    916         {
                       2146 ; cbar.c    917         LineNum =       263;    
000546 964842rr        2148         MOV.B   ES,#SEG( _3 )
00054A 9908rrrr        2149         MOV.W   R0,#SOF( _3 )
00054E 9A080107        2150         MOV.W   [R0],#0107H
                       2151 ; cbar.c    918         }
000552 FE06            2153         BR      _27
000552 FE06            2153         BR      _27
000554                 2154 _26:
                       2155 ; cbar.c    919      else                       //Up movement.
                       2156 ; cbar.c    920         {
                       2157 ; cbar.c    921         LineNum =       262;    
000554 964842rr        2159         MOV.B   ES,#SEG( _3 )
000558 9908rrrr        2160         MOV.W   R0,#SOF( _3 )
00055C 9A080106        2161         MOV.W   [R0],#0106H
                       2162 ; cbar.c    922         }       
000560                 2164 _27:
                       2165 ; cbar.c    923 
                       2166 ; cbar.c    924      if (cb_vars.CBX.LineCnt >= (TextLineCnt + LineNum))   //263 = number of line
                            s in a feeld #1. !
000560 964842rr        2168         MOV.B   ES,#SEG( _cb_vars+8 )
000564 9908rrrr        2169         MOV.W   R0,#SOF( _cb_vars+8 )
000568 8A00            2170         MOV.W   R0,[R0]
00056A 964842rr        2171         MOV.B   ES,#SEG( _3 )
00056E 9918rrrr        2172         MOV.W   R1,#SOF( _3 )
000572 8A11            2173         MOV.W   R1,[R1]
000574 964842rr        2174         MOV.B   ES,#SEG( _3 )
000578 9928rrrr        2175         MOV.W   R2,#SOF( _3 )
00057C 8A1A            2176         MOV.W   [R2],R1
00057E 0941            2177         ADD.W   R4,R1
000580 4904            2178         CMP.W   R0,R4
000582 F148            2179         BCS     _29
                       2180 ; cbar.c    925         {
                       2181 ; cbar.c    926         if (cb_vars.CBX.LineCnt <= (TextLineCnt + 7 + LineNum))
000584 A967            2183         ADDS.W  R6,#07H
000586 964842rr        2184         MOV.B   ES,#SEG( _3 )
00058A 9918rrrr        2185         MOV.W   R1,#SOF( _3 )
00058E 8A11            2186         MOV.W   R1,[R1]
000590 8936            2187         MOV.W   R3,R6
000592 0931            2188         ADD.W   R3,R1
000594 4903            2189         CMP.W   R0,R3
000596 F83E            2190         BG      _29
                       2191 ; cbar.c    927                 {
                       2192 ; cbar.c    928                 tmp = TextLines_SyncLineD[cb_vars.CBX.LineCnt - (TextLineCnt + Li
                            neNum)];
000598 2904            2194         SUB.W   R0,R4
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  30

ADDR   CODE            LINE SOURCELINE
00059A D901            2195         ASL.W   R0,#01H
00059C 8920            2196         MOV.W   R2,R0
00059E B930            2197         MOVS.W  R3,#00H
0005A0 B910            2198         MOV.W   R1,#SEG( _TextLines_SyncLineD )
0005A2 99080BA6        2199         MOV.W   R0,#SOF( _TextLines_SyncLineD )
0005A6 0902            2200         ADD.W   R0,R2
0005A8 1913            2201         ADDC.W  R1,R3
0005AA 862C43          2202         MOV.B   CS,R1L
0005AD 8810            2203         MOVC.W  R1,[R0+]
0005AF 8921            2204         MOV.W   R2,R1
0005B1 964842rr        2205         MOV.B   ES,#SEG( _7 )
0005B5 9908rrrr        2206         MOV.W   R0,#SOF( _7 )
0005B9 8A18            2207         MOV.W   [R0],R1
                       2208 ; cbar.c    929                 tmp %= 256;              // extract SramBankX + SyncLineX tmp
0005BB 7933            2210         XOR.W   R3,R3
0005BD E9210100        2211         DIVU.D  R2,#0100H
0005C1 8913            2212         MOV.W   R1,R3
0005C3 964842rr        2213         MOV.B   ES,#SEG( _7 )
0005C7 9908rrrr        2214         MOV.W   R0,#SOF( _7 )
0005CB 8A38            2215         MOV.W   [R0],R3
                       2216 ; cbar.c    930                 tmp &= 0x3F;
0005CD 9915003F        2218         AND.W   R1,#03FH
0005D1 964842rr        2219         MOV.B   ES,#SEG( _7 )
0005D5 9908rrrr        2220         MOV.W   R0,#SOF( _7 )
0005D9 8A18            2221         MOV.W   [R0],R1
                       2222 ; cbar.c    931                 cb_vars.CBX.Status &= ~( S5S4S3S2 | S1S0);
0005DB 964842rr        2224         MOV.B   ES,#SEG( _cb_vars+20 )
0005DF 9908rrrr        2225         MOV.W   R0,#SOF( _cb_vars+20 )
0005E3 8A00            2226         MOV.W   R0,[R0]
0005E5 9905FFC0        2227         AND.W   R0,#0FFC0H
0005E9 964842rr        2228         MOV.B   ES,#SEG( _cb_vars+20 )
0005ED 9928rrrr        2229         MOV.W   R2,#SOF( _cb_vars+20 )
0005F1 8A0A            2230         MOV.W   [R2],R0
                       2231 ; cbar.c    932                 cb_vars.CBX.Status |= tmp;
0005F3 6901            2233         OR.W    R0,R1
0005F5 964842rr        2234         MOV.B   ES,#SEG( _cb_vars+20 )
0005F9 9918rrrr        2235         MOV.W   R1,#SOF( _cb_vars+20 )
0005FD 8A09            2236         MOV.W   [R1],R0
                       2237 ; cbar.c    933                 StatusPort = cb_vars.CBX.Status;
0005FF 964842rr        2239         MOV.B   ES,#SEG( _cb_vars+20 )
000603 9908rrrr        2240         MOV.W   R0,#SOF( _cb_vars+20 )
000607 8A00            2241         MOV.W   R0,[R0]
000609 96484206        2242         MOV.B   ES,#SEG( _StatusPort )
00060D 9918A000        2243         MOV.W   R1,#SOF( _StatusPort )
000611 8A09            2244         MOV.W   [R1],R0
                       2245 ; cbar.c    934                 } 
                       2246 ; cbar.c    935        }
000614                 2248 _29:
                       2249 ; cbar.c    936      if (cb_vars.CBX.LineCnt == (TextLineCnt + 8 + LineNum))  //Restore original 
                            pattern
000614 964842rr        2251         MOV.B   ES,#SEG( _cb_vars+8 )
000618 9908rrrr        2252         MOV.W   R0,#SOF( _cb_vars+8 )
00061C 8A00            2253         MOV.W   R0,[R0]
00061E 964842rr        2254         MOV.B   ES,#SEG( _3 )
000622 9918rrrr        2255         MOV.W   R1,#SOF( _3 )
000626 8A11            2256         MOV.W   R1,[R1]
000628 0951            2257         ADD.W   R5,R1
00062A 4905            2258         CMP.W   R0,R5
00062C F246            2259         BNE     _30
                       2260 ; cbar.c    937         {
                       2261 ; cbar.c    938         tmp = cb_vars.CBX.TablePtr[cb_vars.CBX.SyncLinePtr];
00062E 964842rr        2263         MOV.B   ES,#SEG( _cb_vars+12 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  31

ADDR   CODE            LINE SOURCELINE
000632 9908rrrr        2264         MOV.W   R0,#SOF( _cb_vars+12 )
000636 8200            2265         MOV.B   R0L,[R0]
000638 B110            2266         MOVS.B  R0H,#00H
00063A D901            2267         ASL.W   R0,#01H
00063C 8920            2268         MOV.W   R2,R0
00063E 9839            2269         SEXT.W  R3
000640 964842rr        2270         MOV.B   ES,#SEG( _cb_vars )
000644 9918rrrr        2271         MOV.W   R1,#SOF( _cb_vars )
000648 8B01            2272         MOV.W   R0,[R1+]
00064A 8A11            2273         MOV.W   R1,[R1]
00064C 0902            2274         ADD.W   R0,R2
00064E 1913            2275         ADDC.W  R1,R3
000650 862C43          2276         MOV.B   CS,R1L
000653 8810            2277         MOVC.W  R1,[R0+]
000655 8921            2278         MOV.W   R2,R1
000657 964842rr        2279         MOV.B   ES,#SEG( _7 )
00065B 9908rrrr        2280         MOV.W   R0,#SOF( _7 )
00065F 8A18            2281         MOV.W   [R0],R1
                       2282 ; cbar.c    939         tmp %= 256;              // extract SramBankX + SyncLineX tmp
000661 7933            2284         XOR.W   R3,R3
000663 E9210100        2285         DIVU.D  R2,#0100H
000667 8913            2286         MOV.W   R1,R3
000669 964842rr        2287         MOV.B   ES,#SEG( _7 )
00066D 9908rrrr        2288         MOV.W   R0,#SOF( _7 )
000671 8A38            2289         MOV.W   [R0],R3
                       2290 ; cbar.c    940         tmp &= 0x3F;
000673 9915003F        2292         AND.W   R1,#03FH
000677 964842rr        2293         MOV.B   ES,#SEG( _7 )
00067B 9908rrrr        2294         MOV.W   R0,#SOF( _7 )
00067F 8A18            2295         MOV.W   [R0],R1
                       2296 ; cbar.c    941         cb_vars.CBX.Status &= ~( S5S4S3S2 | S1S0);
000681 964842rr        2298         MOV.B   ES,#SEG( _cb_vars+20 )
000685 9908rrrr        2299         MOV.W   R0,#SOF( _cb_vars+20 )
000689 8A00            2300         MOV.W   R0,[R0]
00068B 9905FFC0        2301         AND.W   R0,#0FFC0H
00068F 964842rr        2302         MOV.B   ES,#SEG( _cb_vars+20 )
000693 9928rrrr        2303         MOV.W   R2,#SOF( _cb_vars+20 )
000697 8A0A            2304         MOV.W   [R2],R0
                       2305 ; cbar.c    942         cb_vars.CBX.Status |= tmp;
000699 6901            2307         OR.W    R0,R1
00069B 964842rr        2308         MOV.B   ES,#SEG( _cb_vars+20 )
00069F 9918rrrr        2309         MOV.W   R1,#SOF( _cb_vars+20 )
0006A3 8A09            2310         MOV.W   [R1],R0
                       2311 ; cbar.c    943         StatusPort = cb_vars.CBX.Status;
0006A5 964842rr        2313         MOV.B   ES,#SEG( _cb_vars+20 )
0006A9 9908rrrr        2314         MOV.W   R0,#SOF( _cb_vars+20 )
0006AD 8A00            2315         MOV.W   R0,[R0]
0006AF 96484206        2316         MOV.B   ES,#SEG( _StatusPort )
0006B3 9918A000        2317         MOV.W   R1,#SOF( _StatusPort )
0006B7 8A09            2318         MOV.W   [R1],R0
                       2319 ; cbar.c    944         }
0006BA                 2321 _30:
                       2322 ; cbar.c    945 
                       2323 ; cbar.c    946 //#else
                       2324 ; cbar.c    947   // again for test_vars *****************************************
                       2325 ; cbar.c    948   if ( --test_vars.CBX.SyncLineCnt == 0)
0006BA 964842rr        2327         MOV.B   ES,#SEG( _test_vars+11 )
0006BE 9908rrrr        2328         MOV.W   R0,#SOF( _test_vars+11 )
0006C2 8200            2329         MOV.B   R0L,[R0]
0006C4 A10F            2330         ADDS.B  R0L,#0FH
0006C6 964842rr        2331         MOV.B   ES,#SEG( _test_vars+11 )
0006CA 9918rrrr        2332         MOV.W   R1,#SOF( _test_vars+11 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  32

ADDR   CODE            LINE SOURCELINE
0006CE 8209            2333         MOV.B   [R1],R0L
0006D0 6100            2334         OR.B    R0L,R0L
                       2335         BNE     _38
0006D2 F302           +2335 ;       BEQ     _LG_48
0006D4 D50092         +2335 ;       JMP.L   _38
0006D4 D5009200       +2335 ;       JMP.L   _38
0006D8                +2335 _LG_48:
                       2336 ; cbar.c    949     {
                       2337 ; cbar.c    950      tmpv = test_vars.CBX.TablePtr[++test_vars.CBX.SyncLinePtr];
0006D8 964842rr        2339         MOV.B   ES,#SEG( _test_vars+12 )
0006DC 9908rrrr        2340         MOV.W   R0,#SOF( _test_vars+12 )
0006E0 8220            2341         MOV.B   R1L,[R0]
0006E2 A121            2342         ADDS.B  R1L,#01H
0006E4 8102            2343         MOV.B   R0L,R1L
0006E6 B110            2344         MOVS.B  R0H,#00H
0006E8 964842rr        2345         MOV.B   ES,#SEG( _test_vars+12 )
0006EC 9928rrrr        2346         MOV.W   R2,#SOF( _test_vars+12 )
0006F0 822A            2347         MOV.B   [R2],R1L
0006F2 D901            2348         ASL.W   R0,#01H
0006F4 8920            2349         MOV.W   R2,R0
0006F6 9839            2350         SEXT.W  R3
0006F8 964842rr        2351         MOV.B   ES,#SEG( _test_vars )
0006FC 9918rrrr        2352         MOV.W   R1,#SOF( _test_vars )
000700 8B01            2353         MOV.W   R0,[R1+]
000702 8A11            2354         MOV.W   R1,[R1]
000704 0902            2355         ADD.W   R0,R2
000706 1913            2356         ADDC.W  R1,R3
000708 862C43          2357         MOV.B   CS,R1L
00070B 8810            2358         MOVC.W  R1,[R0+]
00070D 964842rr        2359         MOV.B   ES,#SEG( _6 )
000711 9908rrrr        2360         MOV.W   R0,#SOF( _6 )
000715 8A18            2361         MOV.W   [R0],R1
                       2362 ; cbar.c    951     if ( tmpv == 0)
000717 6911            2364         OR.W    R1,R1
000719 F230            2365         BNE     _32
                       2366 ; cbar.c    952       {
                       2367 ; cbar.c    953       if ( test_vars.CBX.NewPattern)
00071B 964842rr        2369         MOV.B   ES,#SEG( _test_vars+18 )
00071F 9908rrrr        2370         MOV.W   R0,#SOF( _test_vars+18 )
000723 8200            2371         MOV.B   R0L,[R0]
000725 F317            2372         BEQ     _31
                       2373 ; cbar.c    954         {
                       2374 ; cbar.c    955         test_vars.CBX.NewPattern = test_vars.CBX.Blanking = FALSE;
000727 964842rr        2376         MOV.B   ES,#SEG( _test_vars+17 )
00072B 9908rrrr        2377         MOV.W   R0,#SOF( _test_vars+17 )
00072F B200            2378         MOV.B   [R0],#00H
000731 964842rr        2379         MOV.B   ES,#SEG( _test_vars+18 )
000735 9908rrrr        2380         MOV.W   R0,#SOF( _test_vars+18 )
000739 B200            2381         MOV.B   [R0],#00H
                       2382 ; cbar.c    956 
                       2383 ; cbar.c    957         test_vars.CBX.TablePtr = test_vars.CBX.newTablePtr;
00073B 964842rr        2385         MOV.B   ES,#SEG( _test_vars+4 )
00073F 9918rrrr        2386         MOV.W   R1,#SOF( _test_vars+4 )
000743 8B01            2387         MOV.W   R0,[R1+]
000745 8A11            2388         MOV.W   R1,[R1]
000747 964842rr        2389         MOV.B   ES,#SEG( _test_vars )
00074B 9928rrrr        2390         MOV.W   R2,#SOF( _test_vars )
00074F 8B0A            2391         MOV.W   [R2+],R0
000751 8A1A            2392         MOV.W   [R2],R1
                       2393 ; cbar.c    958         }
000754                 2395 _31:
                       2396 ; cbar.c    959       test_vars.CBX.SyncLinePtr = 0;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  33

ADDR   CODE            LINE SOURCELINE
000754 964842rr        2398         MOV.B   ES,#SEG( _test_vars+12 )
000758 9908rrrr        2399         MOV.W   R0,#SOF( _test_vars+12 )
00075C B200            2400         MOV.B   [R0],#00H
                       2401 ; cbar.c    960       tmpv = test_vars.CBX.TablePtr[0];
00075E 964842rr        2403         MOV.B   ES,#SEG( _test_vars )
000762 9918rrrr        2404         MOV.W   R1,#SOF( _test_vars )
000766 8B01            2405         MOV.W   R0,[R1+]
000768 8A11            2406         MOV.W   R1,[R1]
00076A 862C43          2407         MOV.B   CS,R1L
00076D 8810            2408         MOVC.W  R1,[R0+]
00076F 964842rr        2409         MOV.B   ES,#SEG( _6 )
000773 9908rrrr        2410         MOV.W   R0,#SOF( _6 )
000777 8A18            2411         MOV.W   [R0],R1
                       2412 ; cbar.c    961       }
00077A                 2414 _32:
                       2415 ; cbar.c    962 
                       2416 ; cbar.c    963     test_vars.CBX.SyncLineCnt = tmpv / 256; // extract line cnt to SyncLineCnt
00077A 964842rr        2418         MOV.B   ES,#SEG( _6 )
00077E 9908rrrr        2419         MOV.W   R0,#SOF( _6 )
000782 8A00            2420         MOV.W   R0,[R0]
000784 8940            2421         MOV.W   R4,R0
000786 D808            2422         LSR.W   R0,#08H
000788 964842rr        2423         MOV.B   ES,#SEG( _test_vars+11 )
00078C 9928rrrr        2424         MOV.W   R2,#SOF( _test_vars+11 )
000790 820A            2425         MOV.B   [R2],R0L
                       2426 ; cbar.c    964     tmpv %= 256;              // extract SramBankX + SyncLineX tmp
000792 7955            2428         XOR.W   R5,R5
000794 E9410100        2429         DIVU.D  R4,#0100H
000798 8915            2430         MOV.W   R1,R5
00079A 964842rr        2431         MOV.B   ES,#SEG( _6 )
00079E 9908rrrr        2432         MOV.W   R0,#SOF( _6 )
0007A2 8A58            2433         MOV.W   [R0],R5
                       2434 ; cbar.c    965     tmpv &= 0x3F;
0007A4 9915003F        2436         AND.W   R1,#03FH
0007A8 964842rr        2437         MOV.B   ES,#SEG( _6 )
0007AC 9908rrrr        2438         MOV.W   R0,#SOF( _6 )
0007B0 8A18            2439         MOV.W   [R0],R1
                       2440 ; cbar.c    966     test_vars.CBX.Status &= ~( S5S4S3S2 | S1S0);
0007B2 964842rr        2442         MOV.B   ES,#SEG( _test_vars+20 )
0007B6 9908rrrr        2443         MOV.W   R0,#SOF( _test_vars+20 )
0007BA 8A00            2444         MOV.W   R0,[R0]
0007BC 9905FFC0        2445         AND.W   R0,#0FFC0H
0007C0 964842rr        2446         MOV.B   ES,#SEG( _test_vars+20 )
0007C4 9928rrrr        2447         MOV.W   R2,#SOF( _test_vars+20 )
0007C8 8A0A            2448         MOV.W   [R2],R0
                       2449 ; cbar.c    967     test_vars.CBX.Status |= tmpv;
0007CA 6901            2451         OR.W    R0,R1
0007CC 964842rr        2452         MOV.B   ES,#SEG( _test_vars+20 )
0007D0 9918rrrr        2453         MOV.W   R1,#SOF( _test_vars+20 )
0007D4 8A09            2454         MOV.W   [R1],R0
                       2455 ; cbar.c    968 
                       2456 ; cbar.c    969     if ( test_vars.CBX.Blanking)                    // If blanking do NOT enable 
                            any
0007D6 964842rr        2458         MOV.B   ES,#SEG( _test_vars+17 )
0007DA 9908rrrr        2459         MOV.W   R0,#SOF( _test_vars+17 )
0007DE 8200            2460         MOV.B   R0L,[R0]
0007E0 F30C            2461         BEQ     _38
                       2462 ; cbar.c    970       test_vars.CBX.Status &= ~S5S4S3S2;            //  bank
0007E2 964842rr        2464         MOV.B   ES,#SEG( _test_vars+20 )
0007E6 9908rrrr        2465         MOV.W   R0,#SOF( _test_vars+20 )
0007EA 8A00            2466         MOV.W   R0,[R0]
0007EC 9905FFC3        2467         AND.W   R0,#0FFC3H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  34

ADDR   CODE            LINE SOURCELINE
0007F0 964842rr        2468         MOV.B   ES,#SEG( _test_vars+20 )
0007F4 9918rrrr        2469         MOV.W   R1,#SOF( _test_vars+20 )
0007F8 8A09            2470         MOV.W   [R1],R0
                       2471 ; cbar.c    971     //StatusPort = test_vars.CBX.Status;
                       2472 ; cbar.c    972     
                       2473 ; cbar.c    973     }
                       2474 ; cbar.c    974 #endif 
                       2475 ; cbar.c    975 JKexit: 
0007FA                 2477 _38:
                       2479 ; cbar.c    976   LEDPort     = LEDMirror;
0007FA 964842rr        2481         MOV.B   ES,#SEG( _LEDMirror )
0007FE 9908rrrr        2482         MOV.W   R0,#SOF( _LEDMirror )
000802 8A00            2483         MOV.W   R0,[R0]
000804 96484206        2484         MOV.B   ES,#SEG( _LEDPort )
000808 9918A00C        2485         MOV.W   R1,#SOF( _LEDPort )
00080C 8A09            2486         MOV.W   [R1],R0
                       2487 ; cbar.c    977   TestLEDPort = TestLEDMirror;
00080E 964842rr        2489         MOV.B   ES,#SEG( _TestLEDMirror )
000812 9908rrrr        2490         MOV.W   R0,#SOF( _TestLEDMirror )
000816 8A00            2491         MOV.W   R0,[R0]
000818 96484206        2492         MOV.B   ES,#SEG( _TestLEDPort )
00081C 9918A014        2493         MOV.W   R1,#SOF( _TestLEDPort )
000820 8A09            2494         MOV.W   [R1],R0
                       2495 ; cbar.c    978 
                       2496 ; cbar.c    979 #if 0
                       2497 ; cbar.c    980   for (i = 12; i < 13; i++)
                       2498 ; cbar.c    981     //if (test_vars.array[i] != cb_vars.array[i])
                       2499 ; cbar.c    982      if (test_vars.CBX.Status != cb_vars.CBX.Status)
                       2500 ; cbar.c    983       JKpin = 1;
                       2501 ; cbar.c    984 #endif
                       2502 ; cbar.c    985   //JKpin = 1;
                       2503 ; cbar.c    986   return;      
                       2504 ; cbar.c    987   }
000822 2F70            2506         POP.W   R4, R5, R6
000824 D680            2508         RET
                       2510 ; cbar.c    988 
                       2511 ; cbar.c    989 
                       2512 ; cbar.c    990 
                       2513 ; cbar.c    991 /**************************************************************************/
                       2514 ; cbar.c    992 /* WriteCBGain                                                       CBAR.C */
                       2515 ; cbar.c    993 /*                                                                        */
                       2516 ; cbar.c    994 /* Author:   Kim Engedahl, DEV, 000504                                    */
                       2517 ; cbar.c    995 /* Revised:   000606, KEn, DEV                                             */
                       2518 ; cbar.c    996 /*                                                                        */
                       2519 ; cbar.c    997 /* Function:                                                               */
                       2520 ; cbar.c    998 /* Remarks:                                                                 */
                       2521 ; cbar.c    999 /* Returns:                                                                */
                       2522 ; cbar.c   1000 /* Updates:                                                                */
                       2523 ; cbar.c   1001 /**************************************************************************/
                       2524 ; cbar.c   1002 int WriteCBGain( UC gain)
                       2525 ; cbar.c   1003 {
                       2526         ALIGN   1
                       2528         PUBLIC  _WriteCBGain
000826                 2529 _WriteCBGain:
000826 A97E            2533         ADDS.W  R7,#0EH
                       2537 ; cbar.c   1004   return( Write_AD8402( CBPotMeter, 0, gain));
000828 911800          2539         MOV.B   R0H,#00H
00082B 8121            2540         MOV.B   R1L,R0H
00082D 820F            2541         MOV.B   [R7],R0L
00082F 8102            2544         MOV.B   R0L,R1L
000831 8227            2545         MOV.B   R1L,[R7]
                       2546         CALL    _Write_AD8402
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  35

ADDR   CODE            LINE SOURCELINE
000833 C4rrrrrr       +2546 ;       FCALL   _Write_AD8402
                       2550 ; cbar.c   1005 }
000837 A972            2552         ADDS.W  R7,#02H
000839 D680            2554         RET
                       2556 ; cbar.c   1006 
                       2557 ; cbar.c   1007 /**************************************************************************/
                       2558 ; cbar.c   1008 /* WriteCBChromaGain                                                 CBAR.C */
                       2559 ; cbar.c   1009 /*                                                                        */
                       2560 ; cbar.c   1010 /* Author:   Kim Engedahl, DEV, 000504                                    */
                       2561 ; cbar.c   1011 /* Revised:   000603, KEn, DEV                                             */
                       2562 ; cbar.c   1012 /*                                                                        */
                       2563 ; cbar.c   1013 /* Function:                                                               */
                       2564 ; cbar.c   1014 /* Remarks:   The resistor at V118 has been swapped ie. bit 0 is bit 3 etc.*/
                       2565 ; cbar.c   1015 /*           The conversion is done in SW instead of correcting the parts  */
                       2566 ; cbar.c   1016 /*           list.                                                        */
                       2567 ; cbar.c   1017 /* Returns:                                                                */
                       2568 ; cbar.c   1018 /* Updates:                                                                */
                       2569 ; cbar.c   1019 /**************************************************************************/
                       2570 ; cbar.c   1020 int WriteCBChromaGain( UC gain)
                       2571 ; cbar.c   1021 {
00083B 00              2572         ALIGN   1
                       2574         PUBLIC  _WriteCBChromaGain
00083C                 2575 _WriteCBChromaGain:
                       2583 ; cbar.c   1022   UC tmp = 0;
00083C 911800          2585         MOV.B   R0H,#00H
                       2587 ; cbar.c   1023 
                       2588 ; cbar.c   1024   // gain bit 1 = bit4
                       2589 ; cbar.c   1025   // gain bit 2 = bit3
                       2590 ; cbar.c   1026   // gain bit 3 = bit2
                       2591 ; cbar.c   1027   // gain bit 4 = bit1
                       2592 ; cbar.c   1028 
                       2593 ; cbar.c   1029   if ( gain & 0x01)
00083F 8120            2595         MOV.B   R1L,R0L
000841 912501          2596         AND.B   R1L,#01H
000844 F302            2597         BEQ     _54
                       2598 ; cbar.c   1030     tmp += 0x08;
000846 911808          2600         MOV.B   R0H,#08H
00084A                 2603 _54:
                       2604 ; cbar.c   1031 
                       2605 ; cbar.c   1032   if ( gain & 0x02)
00084A 8120            2607         MOV.B   R1L,R0L
00084C 912502          2608         AND.B   R1L,#02H
00084F F302            2609         BEQ     _55
                       2610 ; cbar.c   1033     tmp += 0x04;
000851 A114            2612         ADDS.B  R0H,#04H
000854                 2615 _55:
                       2616 ; cbar.c   1034 
                       2617 ; cbar.c   1035   if ( gain & 0x04)
000854 912804          2619         MOV.B   R1L,#04H
000857 5120            2620         AND.B   R1L,R0L
000859 F302            2621         BEQ     _56
                       2622 ; cbar.c   1036     tmp += 0x02;
00085B A112            2624         ADDS.B  R0H,#02H
00085E                 2627 _56:
                       2628 ; cbar.c   1037 
                       2629 ; cbar.c   1038   if ( gain & 0x08)
00085E 910508          2631         AND.B   R0L,#08H
000861 F302            2633         BEQ     _57
                       2634 ; cbar.c   1039     tmp += 0x01;
000863 A111            2636         ADDS.B  R0H,#01H
000866                 2639 _57:
                       2640 ; cbar.c   1040 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  36

ADDR   CODE            LINE SOURCELINE
                       2641 ; cbar.c   1041   ChromaGainPort = tmp;
000866 8101            2643         MOV.B   R0L,R0H
000868 B110            2644         MOVS.B  R0H,#00H
00086A 96484206        2646         MOV.B   ES,#SEG( _ChromaGainPort )
00086E 9918A008        2647         MOV.W   R1,#SOF( _ChromaGainPort )
000872 8A09            2648         MOV.W   [R1],R0
                       2649 ; cbar.c   1042 
                       2650 ; cbar.c   1043   return( OK);
000874 9908FFFF        2652         MOV.W   R0,#0FFFFH
                       2653 ; cbar.c   1044 }
000878 D680            2655         RET
                       2657 ; cbar.c   1045 
                       2658 ; cbar.c   1046 /**************************************************************************/
                       2659 ; cbar.c   1047 /* SRAMVideoLoad                                    CBAR.C               */
                       2660 ; cbar.c   1048 /*                                                                      */
                       2661 ; cbar.c   1049 /* Author:   Kim Steffensen,                                            */
                       2662 ; cbar.c   1050 /* Revised:                                                             */
                       2663 ; cbar.c   1051 /*                                                                      */
                       2664 ; cbar.c   1052 /* Function: Copy video data to extended video RAM                        */
                       2665 ; cbar.c   1053 /* Remarks:  S5,S4,S3 and S2 should be kept at ZERO while loading AND the */
                       2666 ; cbar.c   1054 /*           interrupt system should NOT clear the PS bit.              */
                       2667 ; cbar.c   1055 /* Returns:                                                             */
                       2668 ; cbar.c   1056 /* Updates:                                                             */
                       2669 ; cbar.c   1057 /**************************************************************************/
                       2670 ; cbar.c   1058 int SRAMVideoLoad( UC signal, UC bank)
                       2671 ; cbar.c   1059 {
                       2672         ALIGN   1
                       2674         PUBLIC  _SRAMVideoLoad
00087A                 2675 _SRAMVideoLoad:
00087A 0F30            2679         PUSH.W  R4, R5
00087C A978            2681         ADDS.W  R7,#08H
                       2696 ; cbar.c   1060   volatile int *VideoDstPtr;
                       2697 ; cbar.c   1061   _ROM_  int *VideoSrcPtr;
                       2698 ; cbar.c   1062   int i;
                       2699 ; cbar.c   1063 
                       2700 ; cbar.c   1064 //  bit 12: PS(Bit 12 in status register)  PS ( 0:disable writing in SRAM, 1: ena
                            ble writing in SRAM)
                       2701 ; cbar.c   1065 
                       2702 ; cbar.c   1066   test_vars.CBX.Status |= PS;                    // Set PS bit while loading
00087E 964842rr        2704         MOV.B   ES,#SEG( _test_vars+20 )
000882 9918rrrr        2705         MOV.W   R1,#SOF( _test_vars+20 )
000886 8A11            2706         MOV.W   R1,[R1]
000888 99161000        2707         OR.W    R1,#01000H
00088C 964842rr        2708         MOV.B   ES,#SEG( _test_vars+20 )
000890 9928rrrr        2709         MOV.W   R2,#SOF( _test_vars+20 )
000894 8A1A            2710         MOV.W   [R2],R1
                       2711 ; cbar.c   1067   cb_vars.CBX.Status |= PS;                    // Set PS bit while loading
000896 964842rr        2713         MOV.B   ES,#SEG( _cb_vars+20 )
00089A 9918rrrr        2714         MOV.W   R1,#SOF( _cb_vars+20 )
00089E 8A11            2715         MOV.W   R1,[R1]
0008A0 99161000        2716         OR.W    R1,#01000H
0008A4 964842rr        2717         MOV.B   ES,#SEG( _cb_vars+20 )
0008A8 9928rrrr        2718         MOV.W   R2,#SOF( _cb_vars+20 )
0008AC 8A1A            2719         MOV.W   [R2],R1
                       2720 ; cbar.c   1068 #ifdef CLASSIC    
                       2721 ; cbar.c   1069   StatusPort = cb_vars.CBX.Status;
0008AE 96484206        2723         MOV.B   ES,#SEG( _StatusPort )
0008B2 9928A000        2724         MOV.W   R2,#SOF( _StatusPort )
0008B6 8A1A            2725         MOV.W   [R2],R1
                       2726 ; cbar.c   1070 #else  
                       2727 ; cbar.c   1071   StatusPort = test_vars.CBX.Status;
                       2728 ; cbar.c   1072 #endif
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  37

ADDR   CODE            LINE SOURCELINE
                       2729 ; cbar.c   1073                                                  
                       2730 ; cbar.c   1074   VideoDstPtr = &SRAMVideoPort + (( bank/4)-4) * 0x0800;        //Destination Poi
                            nter
0008B8 D012            2732         LSR.B   R0H,#02H
0008BA 8121            2734         MOV.B   R1L,R0H
0008BC B130            2735         MOVS.B  R1H,#00H
0008BE D91C            2736         ASL.W   R1,#0CH
0008C0 8921            2737         MOV.W   R2,R1
0008C2 B930            2738         MOVS.W  R3,#00H
0008C4 99580004        2739         MOV.W   R5,#SEG( _SRAMVideoPort+-16384 )
0008C8 99480000        2740         MOV.W   R4,#SOF( _SRAMVideoPort+-16384 )
0008CC 0942            2741         ADD.W   R4,R2
0008CE 8C5F06          2742         MOV.W   [R7+6],R5
0008D1 8C4F04          2743         MOV.W   [R7+4],R4
                       2744 ; cbar.c   1075   VideoSrcPtr = &VideoSignalArray[ 0x800 * (long)signal];       //Source Pointer
0008D4 B110            2746         MOVS.B  R0H,#00H
0008D6 B910            2747         MOVS.W  R1,#00H
0008D8 DD0C            2749         ASL.D   R0,#0CH
0008DA 99380005        2750         MOV.W   R3,#SEG( _VideoSignalArray )
0008DE 99280000        2751         MOV.W   R2,#SOF( _VideoSignalArray )
0008E2 0920            2752         ADD.W   R2,R0
0008E4 1931            2753         ADDC.W  R3,R1
                       2755 ; cbar.c   1076 
                       2756 ; cbar.c   1077   for ( i = 0; i < 2048; i++)
0008E6 B900            2758         MOV.W   R0,#00H
0008E8                 2760 _58:
                       2761 ; cbar.c   1078     *VideoDstPtr++ = *VideoSrcPtr++;
0008E8 8953            2763         MOV.W   R5,R3
0008EA 8942            2764         MOV.W   R4,R2
0008EC 8C5F02          2765         MOV.W   [R7+2],R5
0008EF 8A4F            2766         MOV.W   [R7],R4
0008F1 86AC43          2767         MOV.B   CS,R5L
0008F4 8854            2768         MOVC.W  R5,[R4+]
0008F6 8C3706          2771         MOV.W   R3,[R7+6]
0008F9 8C2704          2772         MOV.W   R2,[R7+4]
0008FC 866C42          2773         MOV.B   ES,R3L
0008FF 8A5A            2774         MOV.W   [R2],R5
000901 8C3702          2775         MOV.W   R3,[R7+2]
000904 8A27            2776         MOV.W   R2,[R7]
000906 99200002        2777         ADD.W   R2,#02H
00090A 99310000        2778         ADDC.W  R3,#00H
00090E 9C70040002      2783         ADD.W   [R7+4],#02H
000913 A901            2785         ADDS.W  R0,#01H
000915 99040800        2788         CMP.W   R0,#0800H
000919 FBE7            2789         BLT     _58
                       2790 ; cbar.c   1079 
                       2791 ; cbar.c   1080   test_vars.CBX.Status &= ~PS;                  // Clear PS bit again
00091B 964842rr        2793         MOV.B   ES,#SEG( _test_vars+20 )
00091F 9908rrrr        2794         MOV.W   R0,#SOF( _test_vars+20 )
000923 8A00            2795         MOV.W   R0,[R0]
000925 9905EFFF        2797         AND.W   R0,#0EFFFH
000929 964842rr        2798         MOV.B   ES,#SEG( _test_vars+20 )
00092D 9918rrrr        2799         MOV.W   R1,#SOF( _test_vars+20 )
000931 8A09            2800         MOV.W   [R1],R0
                       2801 ; cbar.c   1081   cb_vars.CBX.Status &= ~PS;                  // Clear PS bit again
000933 964842rr        2803         MOV.B   ES,#SEG( _cb_vars+20 )
000937 9908rrrr        2804         MOV.W   R0,#SOF( _cb_vars+20 )
00093B 8A00            2805         MOV.W   R0,[R0]
00093D 9905EFFF        2806         AND.W   R0,#0EFFFH
000941 964842rr        2807         MOV.B   ES,#SEG( _cb_vars+20 )
000945 9918rrrr        2808         MOV.W   R1,#SOF( _cb_vars+20 )
000949 8A09            2809         MOV.W   [R1],R0
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  38

ADDR   CODE            LINE SOURCELINE
                       2810 ; cbar.c   1082 #ifdef CLASSIC    
                       2811 ; cbar.c   1083   StatusPort = cb_vars.CBX.Status;
00094B 96484206        2813         MOV.B   ES,#SEG( _StatusPort )
00094F 9918A000        2814         MOV.W   R1,#SOF( _StatusPort )
000953 8A09            2815         MOV.W   [R1],R0
                       2816 ; cbar.c   1084 #else  
                       2817 ; cbar.c   1085   StatusPort = test_vars.CBX.Status;
                       2818 ; cbar.c   1086 #endif
                       2819 ; cbar.c   1087 
                       2820 ; cbar.c   1088   return( OK);
000955 9908FFFF        2822         MOV.W   R0,#0FFFFH
                       2823 ; cbar.c   1089 }
000959 99700008        2825         ADD.W   R7,#08H
00095D 2F30            2827         POP.W   R4, R5
00095F D680            2829         RET
                       2832 ; cbar.c   1090 
                       2833 ; cbar.c   1091 /**************************************************************************/
                       2834 ; cbar.c   1092 /* ESRAMVideoLoad                                    CBAR.C              */
                       2835 ; cbar.c   1093 /*                                                                      */
                       2836 ; cbar.c   1094 /* Author:   Kim Steffensen,                                            */
                       2837 ; cbar.c   1095 /* Revised:                                                             */
                       2838 ; cbar.c   1096 /*                                                                      */
                       2839 ; cbar.c   1097 /* Function: Copy video data to extended video RAM                        */
                       2840 ; cbar.c   1098 /* Remarks:  S5,S4,S3 and S2 should be kept at ZERO while loading AND the */
                       2841 ; cbar.c   1099 /*           interrupt system should NOT clear the PS bit.              */
                       2842 ; cbar.c   1100 /* Returns:                                                             */
                       2843 ; cbar.c   1101 /* Updates:                                                             */
                       2844 ; cbar.c   1102 /**************************************************************************/
                       2845 ; cbar.c   1103 int ESRAMVideoLoad( UC signal, UC bank)
                       2846 ; cbar.c   1104 {
000961 00              2847         ALIGN   1
                       2849         PUBLIC  _ESRAMVideoLoad
000962                 2850 _ESRAMVideoLoad:
000962 0F30            2854         PUSH.W  R4, R5
000964 A978            2856         ADDS.W  R7,#08H
                       2867 ; cbar.c   1105   volatile int *VideoDstPtr;
                       2868 ; cbar.c   1106   _ROM_  int *VideoSrcPtr;
                       2869 ; cbar.c   1107   int i;
                       2870 ; cbar.c   1108 
                       2871 ; cbar.c   1109 //  bit 12: PS(Bit 12 in status register)  PS ( 0:disable writing in SRAM, 1: ena
                            ble writing in SRAM)
                       2872 ; cbar.c   1110 
                       2873 ; cbar.c   1111   test_vars.CBX.Status |= PS;                    // Set PS bit while loading
000966 964842rr        2875         MOV.B   ES,#SEG( _test_vars+20 )
00096A 9918rrrr        2876         MOV.W   R1,#SOF( _test_vars+20 )
00096E 8A11            2877         MOV.W   R1,[R1]
000970 99161000        2878         OR.W    R1,#01000H
000974 964842rr        2879         MOV.B   ES,#SEG( _test_vars+20 )
000978 9928rrrr        2880         MOV.W   R2,#SOF( _test_vars+20 )
00097C 8A1A            2881         MOV.W   [R2],R1
                       2882 ; cbar.c   1112   cb_vars.CBX.Status |= PS;                    // Set PS bit while loading
00097E 964842rr        2884         MOV.B   ES,#SEG( _cb_vars+20 )
000982 9918rrrr        2885         MOV.W   R1,#SOF( _cb_vars+20 )
000986 8A11            2886         MOV.W   R1,[R1]
000988 99161000        2887         OR.W    R1,#01000H
00098C 964842rr        2888         MOV.B   ES,#SEG( _cb_vars+20 )
000990 9928rrrr        2889         MOV.W   R2,#SOF( _cb_vars+20 )
000994 8A1A            2890         MOV.W   [R2],R1
                       2891 ; cbar.c   1113 #ifdef CLASSIC    
                       2892 ; cbar.c   1114   StatusPort = cb_vars.CBX.Status;
000996 96484206        2894         MOV.B   ES,#SEG( _StatusPort )
00099A 9928A000        2895         MOV.W   R2,#SOF( _StatusPort )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  39

ADDR   CODE            LINE SOURCELINE
00099E 8A1A            2896         MOV.W   [R2],R1
                       2897 ; cbar.c   1115 #else  
                       2898 ; cbar.c   1116   StatusPort = test_vars.CBX.Status;
                       2899 ; cbar.c   1117 #endif
                       2900 ; cbar.c   1118                                                  
                       2901 ; cbar.c   1119   VideoDstPtr = &ESRAMVideoPort + (( bank/4)-4) * 0x0800;       //Destination Poi
                            nter
0009A0 D012            2903         LSR.B   R0H,#02H
0009A2 8121            2905         MOV.B   R1L,R0H
0009A4 B130            2906         MOVS.B  R1H,#00H
0009A6 D91C            2907         ASL.W   R1,#0CH
0009A8 8921            2908         MOV.W   R2,R1
0009AA B930            2909         MOVS.W  R3,#00H
0009AC 99580005        2910         MOV.W   R5,#SEG( _ESRAMVideoPort+-16384 )
0009B0 99480000        2911         MOV.W   R4,#SOF( _ESRAMVideoPort+-16384 )
0009B4 0942            2912         ADD.W   R4,R2
0009B6 8C5F06          2913         MOV.W   [R7+6],R5
0009B9 8C4F04          2914         MOV.W   [R7+4],R4
                       2915 ; cbar.c   1120   VideoSrcPtr = &VideoSignalArray[ 0x800 * (long)signal];       //Source Pointer
0009BC B110            2917         MOVS.B  R0H,#00H
0009BE B910            2918         MOVS.W  R1,#00H
0009C0 DD0C            2920         ASL.D   R0,#0CH
0009C2 99380005        2921         MOV.W   R3,#SEG( _VideoSignalArray )
0009C6 99280000        2922         MOV.W   R2,#SOF( _VideoSignalArray )
0009CA 0920            2923         ADD.W   R2,R0
0009CC 1931            2924         ADDC.W  R3,R1
                       2926 ; cbar.c   1121 
                       2927 ; cbar.c   1122   for ( i = 0; i < 2048; i++)
0009CE B900            2929         MOV.W   R0,#00H
0009D0                 2931 _60:
                       2932 ; cbar.c   1123     *VideoDstPtr++ = *VideoSrcPtr++;
0009D0 8953            2934         MOV.W   R5,R3
0009D2 8942            2935         MOV.W   R4,R2
0009D4 8C5F02          2936         MOV.W   [R7+2],R5
0009D7 8A4F            2937         MOV.W   [R7],R4
0009D9 86AC43          2938         MOV.B   CS,R5L
0009DC 8854            2939         MOVC.W  R5,[R4+]
0009DE 8C3706          2942         MOV.W   R3,[R7+6]
0009E1 8C2704          2943         MOV.W   R2,[R7+4]
0009E4 866C42          2944         MOV.B   ES,R3L
0009E7 8A5A            2945         MOV.W   [R2],R5
0009E9 8C3702          2946         MOV.W   R3,[R7+2]
0009EC 8A27            2947         MOV.W   R2,[R7]
0009EE 99200002        2948         ADD.W   R2,#02H
0009F2 99310000        2949         ADDC.W  R3,#00H
0009F6 9C70040002      2954         ADD.W   [R7+4],#02H
0009FB A901            2956         ADDS.W  R0,#01H
0009FD 99040800        2959         CMP.W   R0,#0800H
000A01 FBE7            2960         BLT     _60
                       2961 ; cbar.c   1124 
                       2962 ; cbar.c   1125   test_vars.CBX.Status &= ~PS;                  // Clear PS bit again
000A03 964842rr        2964         MOV.B   ES,#SEG( _test_vars+20 )
000A07 9908rrrr        2965         MOV.W   R0,#SOF( _test_vars+20 )
000A0B 8A00            2966         MOV.W   R0,[R0]
000A0D 9905EFFF        2968         AND.W   R0,#0EFFFH
000A11 964842rr        2969         MOV.B   ES,#SEG( _test_vars+20 )
000A15 9918rrrr        2970         MOV.W   R1,#SOF( _test_vars+20 )
000A19 8A09            2971         MOV.W   [R1],R0
                       2972 ; cbar.c   1126   cb_vars.CBX.Status &= ~PS;                  // Clear PS bit again
000A1B 964842rr        2974         MOV.B   ES,#SEG( _cb_vars+20 )
000A1F 9908rrrr        2975         MOV.W   R0,#SOF( _cb_vars+20 )
000A23 8A00            2976         MOV.W   R0,[R0]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  40

ADDR   CODE            LINE SOURCELINE
000A25 9905EFFF        2977         AND.W   R0,#0EFFFH
000A29 964842rr        2978         MOV.B   ES,#SEG( _cb_vars+20 )
000A2D 9918rrrr        2979         MOV.W   R1,#SOF( _cb_vars+20 )
000A31 8A09            2980         MOV.W   [R1],R0
                       2981 ; cbar.c   1127 #ifdef CLASSIC    
                       2982 ; cbar.c   1128   StatusPort = cb_vars.CBX.Status;
000A33 96484206        2984         MOV.B   ES,#SEG( _StatusPort )
000A37 9918A000        2985         MOV.W   R1,#SOF( _StatusPort )
000A3B 8A09            2986         MOV.W   [R1],R0
                       2987 ; cbar.c   1129 #else  
                       2988 ; cbar.c   1130   StatusPort = test_vars.CBX.Status;
                       2989 ; cbar.c   1131 #endif
                       2990 ; cbar.c   1132 
                       2991 ; cbar.c   1133   return( OK);
000A3D 9908FFFF        2993         MOV.W   R0,#0FFFFH
                       2994 ; cbar.c   1134 }
000A41 99700008        2996         ADD.W   R7,#08H
000A45 2F30            2998         POP.W   R4, R5
000A47 D680            3000         RET
                       3003 ; cbar.c   1135 
                       3004 ; cbar.c   1136 /**************************************************************************/
                       3005 ; cbar.c   1137 /* SRAMSoundLoad                                    CBAR.C */
                       3006 ; cbar.c   1138 /*                                                  */
                       3007 ; cbar.c   1139 /* Author:   Kim Engedahl, DEV, 000410                          */
                       3008 ; cbar.c   1140 /* Revised:   000603, KEn, DEV                                 */
                       3009 ; cbar.c   1141 /*                                                  */
                       3010 ; cbar.c   1142 /* Function: Copy sound data to sound RAM                        */
                       3011 ; cbar.c   1143 /* Remarks:                                             */
                       3012 ; cbar.c   1144 /* Returns:                                            */
                       3013 ; cbar.c   1145 /* Updates:                                            */
                       3014 ; cbar.c   1146 /**************************************************************************/
                       3015 ; cbar.c   1147 int SRAMSoundLoad( UC signal)
                       3016 ; cbar.c   1148 {
000A49 00              3017         ALIGN   1
                       3019         PUBLIC  _SRAMSoundLoad
000A4A                 3020 _SRAMSoundLoad:
000A4A 0F30            3024         PUSH.W  R4, R5
000A4C A978            3026         ADDS.W  R7,#08H
                       3035 ; cbar.c   1149   volatile int *SoundDstPtr;
                       3036 ; cbar.c   1150   _ROM_  int *SoundSrcPtr;
                       3037 ; cbar.c   1151   int i;
                       3038 ; cbar.c   1152 
                       3039 ; cbar.c   1153   signal = ( signal == EmbAudioStereo1kHz);
000A4E 910402          3041         CMP.B   R0L,#02H
000A51 F203            3042         BNE     _63
000A53 B121            3043         MOVS.B  R1L,#01H
000A55 FE02            3044         BR      _65
000A55 FE0200          3044         BR      _65
000A58                 3045 _63:
000A58 B120            3046         MOVS.B  R1L,#00H
000A58 B120            3046         MOVS.B  R1L,#00H
000A5A                 3047 _65:
                       3050 ; cbar.c   1154 
                       3051 ; cbar.c   1155   test_vars.CBX.Status |= PS;                  // Set PS bit while loading
000A5A 964842rr        3053         MOV.B   ES,#SEG( _test_vars+20 )
000A5E 9908rrrr        3054         MOV.W   R0,#SOF( _test_vars+20 )
000A62 8A00            3055         MOV.W   R0,[R0]
000A64 99061000        3056         OR.W    R0,#01000H
000A68 964842rr        3057         MOV.B   ES,#SEG( _test_vars+20 )
000A6C 9928rrrr        3058         MOV.W   R2,#SOF( _test_vars+20 )
000A70 8A0A            3059         MOV.W   [R2],R0
                       3060 ; cbar.c   1156   cb_vars.CBX.Status |= PS;                  // Set PS bit while loading
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  41

ADDR   CODE            LINE SOURCELINE
000A72 964842rr        3062         MOV.B   ES,#SEG( _cb_vars+20 )
000A76 9908rrrr        3063         MOV.W   R0,#SOF( _cb_vars+20 )
000A7A 8A00            3064         MOV.W   R0,[R0]
000A7C 99061000        3065         OR.W    R0,#01000H
000A80 964842rr        3066         MOV.B   ES,#SEG( _cb_vars+20 )
000A84 9928rrrr        3067         MOV.W   R2,#SOF( _cb_vars+20 )
000A88 8A0A            3068         MOV.W   [R2],R0
                       3069 ; cbar.c   1157 #ifdef CLASSIC    
                       3070 ; cbar.c   1158   StatusPort = cb_vars.CBX.Status;
000A8A 96484206        3072         MOV.B   ES,#SEG( _StatusPort )
000A8E 9928A000        3073         MOV.W   R2,#SOF( _StatusPort )
000A92 8A0A            3074         MOV.W   [R2],R0
                       3075 ; cbar.c   1159 #else  
                       3076 ; cbar.c   1160   StatusPort = test_vars.CBX.Status;
                       3077 ; cbar.c   1161 #endif
                       3078 ; cbar.c   1162                                              
                       3079 ; cbar.c   1163   SoundDstPtr = &SRAMSoundPort;
000A94 9D7800060004    3081         MOV.W   [R7+6],#SEG( _SRAMSoundPort )
000A9A 9C78040000      3082         MOV.W   [R7+4],#SOF( _SRAMSoundPort )
                       3083 ; cbar.c   1164   SoundSrcPtr = &SoundSignalArray[2304*signal];
000A9F 8102            3085         MOV.B   R0L,R1L
000AA1 B110            3086         MOVS.B  R0H,#00H
000AA3 E9001200        3087         MULU.W  R0,#01200H
000AA7 B910            3088         MOVS.W  R1,#00H
000AA9 99380004        3090         MOV.W   R3,#SEG( _SoundSignalArray )
000AAD 9928A000        3091         MOV.W   R2,#SOF( _SoundSignalArray )
000AB1 0920            3092         ADD.W   R2,R0
000AB3 1931            3093         ADDC.W  R3,R1
                       3095 ; cbar.c   1165 
                       3096 ; cbar.c   1166   for ( i = 0; i < 2304; i++)
000AB5 B900            3098         MOV.W   R0,#00H
000AB8                 3100 _62:
                       3101 ; cbar.c   1167     *SoundDstPtr++ = *SoundSrcPtr++;
000AB8 8953            3103         MOV.W   R5,R3
000ABA 8942            3104         MOV.W   R4,R2
000ABC 8C5F02          3105         MOV.W   [R7+2],R5
000ABF 8A4F            3106         MOV.W   [R7],R4
000AC1 86AC43          3107         MOV.B   CS,R5L
000AC4 8854            3108         MOVC.W  R5,[R4+]
000AC6 8C3706          3111         MOV.W   R3,[R7+6]
000AC9 8C2704          3112         MOV.W   R2,[R7+4]
000ACC 866C42          3113         MOV.B   ES,R3L
000ACF 8A5A            3114         MOV.W   [R2],R5
000AD1 8C3702          3115         MOV.W   R3,[R7+2]
000AD4 8A27            3116         MOV.W   R2,[R7]
000AD6 99200002        3117         ADD.W   R2,#02H
000ADA 99310000        3118         ADDC.W  R3,#00H
000ADE 9C70040002      3123         ADD.W   [R7+4],#02H
000AE3 A901            3125         ADDS.W  R0,#01H
000AE5 99040900        3128         CMP.W   R0,#0900H
000AE9 FBE7            3129         BLT     _62
                       3130 ; cbar.c   1168 
                       3131 ; cbar.c   1169   test_vars.CBX.Status &= ~PS;                  // Clear PS bit again
000AEB 964842rr        3133         MOV.B   ES,#SEG( _test_vars+20 )
000AEF 9908rrrr        3134         MOV.W   R0,#SOF( _test_vars+20 )
000AF3 8A00            3135         MOV.W   R0,[R0]
000AF5 9905EFFF        3137         AND.W   R0,#0EFFFH
000AF9 964842rr        3138         MOV.B   ES,#SEG( _test_vars+20 )
000AFD 9918rrrr        3139         MOV.W   R1,#SOF( _test_vars+20 )
000B01 8A09            3140         MOV.W   [R1],R0
                       3141 ; cbar.c   1170   cb_vars.CBX.Status &= ~PS;                  // Clear PS bit again
000B03 964842rr        3143         MOV.B   ES,#SEG( _cb_vars+20 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  42

ADDR   CODE            LINE SOURCELINE
000B07 9908rrrr        3144         MOV.W   R0,#SOF( _cb_vars+20 )
000B0B 8A00            3145         MOV.W   R0,[R0]
000B0D 9905EFFF        3146         AND.W   R0,#0EFFFH
000B11 964842rr        3147         MOV.B   ES,#SEG( _cb_vars+20 )
000B15 9918rrrr        3148         MOV.W   R1,#SOF( _cb_vars+20 )
000B19 8A09            3149         MOV.W   [R1],R0
                       3150 ; cbar.c   1171 #ifdef CLASSIC    
                       3151 ; cbar.c   1172   StatusPort = cb_vars.CBX.Status;
000B1B 96484206        3153         MOV.B   ES,#SEG( _StatusPort )
000B1F 9918A000        3154         MOV.W   R1,#SOF( _StatusPort )
000B23 8A09            3155         MOV.W   [R1],R0
                       3156 ; cbar.c   1173 #else  
                       3157 ; cbar.c   1174   StatusPort = test_vars.CBX.Status;
                       3158 ; cbar.c   1175 #endif
                       3159 ; cbar.c   1176 
                       3160 ; cbar.c   1177   return( OK);
000B25 9908FFFF        3162         MOV.W   R0,#0FFFFH
                       3163 ; cbar.c   1178 }
000B29 99700008        3165         ADD.W   R7,#08H
000B2D 2F30            3167         POP.W   R4, R5
000B2F D680            3169         RET
                       3172 ; cbar.c   1179 
                       3173 ; cbar.c   1180 
                       3174 ; cbar.c   1181 /**************************************************************************/
                       3175 ; cbar.c   1182 /* CBDefaults                                                       CBAR.C  */
                       3176 ; cbar.c   1183 /*                                                                        */
                       3177 ; cbar.c   1184 /* Author:   Kim Engedahl, DEV, 000526                                    */
                       3178 ; cbar.c   1185 /* Revised:   000617, KEn, DEV                                             */
                       3179 ; cbar.c   1186 /*                                                                        */
                       3180 ; cbar.c   1187 /* Function:                                                               */
                       3181 ; cbar.c   1188 /* Remarks:                                                                */
                       3182 ; cbar.c   1189 /* Returns:                                                                */
                       3183 ; cbar.c   1190 /* Updates:                                                                */
                       3184 ; cbar.c   1191 /**************************************************************************/
                       3185 ; cbar.c   1192 void CBDefaults( void)
                       3186 ; cbar.c   1193 {
000B31 00              3187         ALIGN   1
                       3189         PUBLIC  _CBDefaults
000B32                 3190 _CBDefaults:
                       3194 ; cbar.c   1194   Settings.CBSetup.System = CBSetup.System = Calibration.ResetSystem;
000B32 964842rr        3196         MOV.B   ES,#SEG( _Calibration+97 )
000B36 9908rrrr        3197         MOV.W   R0,#SOF( _Calibration+97 )
000B3A 8200            3198         MOV.B   R0L,[R0]
000B3C 964842rr        3199         MOV.B   ES,#SEG( _CBSetup )
000B40 9918rrrr        3200         MOV.W   R1,#SOF( _CBSetup )
000B44 8209            3201         MOV.B   [R1],R0L
000B46 964842rr        3202         MOV.B   ES,#SEG( _Settings+32 )
000B4A 9918rrrr        3203         MOV.W   R1,#SOF( _Settings+32 )
000B4E 8209            3204         MOV.B   [R1],R0L
                       3205 ; cbar.c   1195 
                       3206 ; cbar.c   1196   if ( CBSetup.System < NTSC_US)
000B50 964842rr        3208         MOV.B   ES,#SEG( _CBSetup )
000B54 9908rrrr        3209         MOV.W   R0,#SOF( _CBSetup )
000B58 8200            3210         MOV.B   R0L,[R0]
000B5A 910402          3211         CMP.B   R0L,#02H
000B5D F00C            3212         BCC     _67
                       3213 ; cbar.c   1197     Settings.CBSetup.Pattern = CBSetup.Pattern = EBUCBar;
000B5F 964842rr        3215         MOV.B   ES,#SEG( _CBSetup+2 )
000B63 9908rrrr        3216         MOV.W   R0,#SOF( _CBSetup+2 )
000B67 BA01            3217         MOV.W   [R0],#01H
000B69 964842rr        3218         MOV.B   ES,#SEG( _Settings+34 )
000B6D 9908rrrr        3219         MOV.W   R0,#SOF( _Settings+34 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  43

ADDR   CODE            LINE SOURCELINE
000B71 BA01            3220         MOV.W   [R0],#01H
000B73 FE0B            3221         BR      _68
000B73 FE0B00          3221         BR      _68
000B76                 3222 _67:
                       3223 ; cbar.c   1198   else
                       3224 ; cbar.c   1199     Settings.CBSetup.Pattern = CBSetup.Pattern = SMPTECBar;
000B76 964842rr        3226         MOV.B   ES,#SEG( _CBSetup+2 )
000B7A 9908rrrr        3227         MOV.W   R0,#SOF( _CBSetup+2 )
000B7E BA00            3228         MOV.W   [R0],#00H
000B80 964842rr        3229         MOV.B   ES,#SEG( _Settings+34 )
000B84 9908rrrr        3230         MOV.W   R0,#SOF( _Settings+34 )
000B88 BA00            3231         MOV.W   [R0],#00H
000B88 BA00            3231         MOV.W   [R0],#00H
000B8A                 3232 _68:
                       3233 ; cbar.c   1200 
                       3234 ; cbar.c   1201   Settings.CBSetup.Delay = CBSetup.Delay = 0;
000B8A 964842rr        3236         MOV.B   ES,#SEG( _CBSetup+4 )
000B8E 9908rrrr        3237         MOV.W   R0,#SOF( _CBSetup+4 )
000B92 BB00            3238         MOV.W   [R0+],#00H
000B94 BA00            3239         MOV.W   [R0],#00H
000B96 964842rr        3240         MOV.B   ES,#SEG( _Settings+36 )
000B9A 9908rrrr        3241         MOV.W   R0,#SOF( _Settings+36 )
000B9E BB00            3242         MOV.W   [R0+],#00H
000BA0 BA00            3243         MOV.W   [R0],#00H
                       3244 ; cbar.c   1202   Settings.CBSetup.ScHPhase = CBSetup.ScHPhase = 0;
000BA2 964842rr        3246         MOV.B   ES,#SEG( _CBSetup+8 )
000BA6 9908rrrr        3247         MOV.W   R0,#SOF( _CBSetup+8 )
000BAA BA00            3248         MOV.W   [R0],#00H
000BAC 964842rr        3249         MOV.B   ES,#SEG( _Settings+40 )
000BB0 9908rrrr        3250         MOV.W   R0,#SOF( _Settings+40 )
000BB4 BA00            3251         MOV.W   [R0],#00H
                       3252 ; cbar.c   1203   Settings.CBSetup.EmbAudioSignal = CBSetup.EmbAudioSignal = EmbAudioOff;
000BB6 964842rr        3254         MOV.B   ES,#SEG( _CBSetup+10 )
000BBA 9908rrrr        3255         MOV.W   R0,#SOF( _CBSetup+10 )
000BBE B200            3256         MOV.B   [R0],#00H
000BC0 964842rr        3257         MOV.B   ES,#SEG( _Settings+42 )
000BC4 9908rrrr        3258         MOV.W   R0,#SOF( _Settings+42 )
000BC8 B200            3259         MOV.B   [R0],#00H
                       3260 ; cbar.c   1204 
                       3261 ; cbar.c   1205   NV_Store( &Settings, SettingsPtr, sizeof( Settings));
000BCA 9918rrrr        3263         MOV.W   R1,#SEG( _Settings )
000BCE 9908rrrr        3264         MOV.W   R0,#SOF( _Settings )
000BD2 964842rr        3265         MOV.B   ES,#SEG( _SettingsPtr )
000BD6 9928rrrr        3266         MOV.W   R2,#SOF( _SettingsPtr )
000BDA 8A22            3267         MOV.W   R2,[R2]
000BDC 9938004A        3268         MOV.W   R3,#04AH
                       3269         CALL    _NV_Store
000BE0 C4rrrrrr       +3269 ;       FCALL   _NV_Store
                       3270 ; cbar.c   1206 }
000BE4 D680            3272         RET
                       3274 ; cbar.c   1207 
                       3275 ; cbar.c   1208 /**************************************************************************/
                       3276 ; cbar.c   1209 /* CBInit                                                           CBAR.C  */
                       3277 ; cbar.c   1210 /*                                                                        */
                       3278 ; cbar.c   1211 /* Author:   Kim Engedahl, DEV, 000322                                    */
                       3279 ; cbar.c   1212 /* Revised:   0009145, KEn, DEV                                             */
                       3280 ; cbar.c   1213 /*                                                                        */
                       3281 ; cbar.c   1214 /* Function:                                                               */
                       3282 ; cbar.c   1215 /* Remarks:                                                                 */
                       3283 ; cbar.c   1216 /* Returns:                                                                */
                       3284 ; cbar.c   1217 /* Updates:                                                                */
                       3285 ; cbar.c   1218 /**************************************************************************/
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  44

ADDR   CODE            LINE SOURCELINE
                       3286 ; cbar.c   1219 int CBInit( void)
                       3287 ; cbar.c   1220 {
                       3288         ALIGN   1
                       3290         PUBLIC  _CBInit
000BE6                 3291 _CBInit:
                       3295 ; cbar.c   1221   cb_vars.CBX.SyncLinePtr = 0;
000BE6 964842rr        3297         MOV.B   ES,#SEG( _cb_vars+12 )
000BEA 9908rrrr        3298         MOV.W   R0,#SOF( _cb_vars+12 )
000BEE B200            3299         MOV.B   [R0],#00H
                       3300 ; cbar.c   1222   cb_vars.CBX.TablePtr = &NTSCFullFieldTable[0];
000BF0 964842rr        3302         MOV.B   ES,#SEG( _cb_vars )
000BF4 9908rrrr        3303         MOV.W   R0,#SOF( _cb_vars )
000BF8 9B08093C        3304         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000BFC BA00            3305         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3306 ; cbar.c   1223 
                       3307 ; cbar.c   1224   cb_vars.CBX.NewPattern = FALSE;
000BFE 964842rr        3309         MOV.B   ES,#SEG( _cb_vars+18 )
000C02 9908rrrr        3310         MOV.W   R0,#SOF( _cb_vars+18 )
000C06 B200            3311         MOV.B   [R0],#00H
                       3312 ; cbar.c   1225   cb_vars.CBX.Blanking = TRUE;
000C08 964842rr        3314         MOV.B   ES,#SEG( _cb_vars+17 )
000C0C 9908rrrr        3315         MOV.W   R0,#SOF( _cb_vars+17 )
000C10 9208FF          3316         MOV.B   [R0],#0FFH
                       3317 ; cbar.c   1226   cb_vars.CBX.SoundEnable = FALSE;
000C13 964842rr        3319         MOV.B   ES,#SEG( _cb_vars+19 )
000C17 9908rrrr        3320         MOV.W   R0,#SOF( _cb_vars+19 )
000C1B B200            3321         MOV.B   [R0],#00H
                       3322 ; cbar.c   1227 
                       3323 ; cbar.c   1228   test_vars.CBX.SyncLinePtr = 0;
000C1D 964842rr        3325         MOV.B   ES,#SEG( _test_vars+12 )
000C21 9908rrrr        3326         MOV.W   R0,#SOF( _test_vars+12 )
000C25 B200            3327         MOV.B   [R0],#00H
                       3328 ; cbar.c   1229   test_vars.CBX.TablePtr = &NTSCFullFieldTable[0];
000C27 964842rr        3330         MOV.B   ES,#SEG( _test_vars )
000C2B 9908rrrr        3331         MOV.W   R0,#SOF( _test_vars )
000C2F 9B08093C        3332         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000C33 BA00            3333         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3334 ; cbar.c   1230 
                       3335 ; cbar.c   1231   test_vars.CBX.NewPattern = FALSE;
000C35 964842rr        3337         MOV.B   ES,#SEG( _test_vars+18 )
000C39 9908rrrr        3338         MOV.W   R0,#SOF( _test_vars+18 )
000C3D B200            3339         MOV.B   [R0],#00H
                       3340 ; cbar.c   1232   test_vars.CBX.Blanking = TRUE;
000C3F 964842rr        3342         MOV.B   ES,#SEG( _test_vars+17 )
000C43 9908rrrr        3343         MOV.W   R0,#SOF( _test_vars+17 )
000C47 9208FF          3344         MOV.B   [R0],#0FFH
                       3345 ; cbar.c   1233   test_vars.CBX.SoundEnable = FALSE;
000C4A 964842rr        3347         MOV.B   ES,#SEG( _test_vars+19 )
000C4E 9908rrrr        3348         MOV.W   R0,#SOF( _test_vars+19 )
000C52 B200            3349         MOV.B   [R0],#00H
                       3350 ; cbar.c   1234 
                       3351 ; cbar.c   1235   cb_vars.CBX.Status |= SYSSEL;
000C54 964842rr        3353         MOV.B   ES,#SEG( _cb_vars+20 )
000C58 9908rrrr        3354         MOV.W   R0,#SOF( _cb_vars+20 )
000C5C 8A00            3355         MOV.W   R0,[R0]
000C5E 99060040        3356         OR.W    R0,#040H
000C62 964842rr        3357         MOV.B   ES,#SEG( _cb_vars+20 )
000C66 9918rrrr        3358         MOV.W   R1,#SOF( _cb_vars+20 )
000C6A 8A09            3359         MOV.W   [R1],R0
                       3360 ; cbar.c   1236   test_vars.CBX.Status |= SYSSEL;
000C6C 964842rr        3362         MOV.B   ES,#SEG( _test_vars+20 )
000C70 9908rrrr        3363         MOV.W   R0,#SOF( _test_vars+20 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  45

ADDR   CODE            LINE SOURCELINE
000C74 8A00            3364         MOV.W   R0,[R0]
000C76 99060040        3365         OR.W    R0,#040H
000C7A 964842rr        3366         MOV.B   ES,#SEG( _test_vars+20 )
000C7E 9918rrrr        3367         MOV.W   R1,#SOF( _test_vars+20 )
000C82 8A09            3368         MOV.W   [R1],R0
                       3369 ; cbar.c   1237 #ifdef CLASSIC    
                       3370 ; cbar.c   1238   StatusPort = cb_vars.CBX.Status;
000C84 964842rr        3372         MOV.B   ES,#SEG( _cb_vars+20 )
000C88 9908rrrr        3373         MOV.W   R0,#SOF( _cb_vars+20 )
000C8C 8A00            3374         MOV.W   R0,[R0]
000C8E 96484206        3375         MOV.B   ES,#SEG( _StatusPort )
000C92 9918A000        3376         MOV.W   R1,#SOF( _StatusPort )
000C96 8A09            3377         MOV.W   [R1],R0
                       3378 ; cbar.c   1239 #else  
                       3379 ; cbar.c   1240   StatusPort = test_vars.CBX.Status;
                       3380 ; cbar.c   1241 #endif
                       3381 ; cbar.c   1242 
                       3382 ; cbar.c   1243   cb_vars.CBX.SyncLineCnt = 1;                  // Interrupt in 1 line
000C98 964842rr        3384         MOV.B   ES,#SEG( _cb_vars+11 )
000C9C 9908rrrr        3385         MOV.W   R0,#SOF( _cb_vars+11 )
000CA0 B201            3386         MOV.B   [R0],#01H
                       3387 ; cbar.c   1244   test_vars.CBX.SyncLineCnt = 1;                  // Interrupt in 1 line
000CA2 964842rr        3389         MOV.B   ES,#SEG( _test_vars+11 )
000CA6 9908rrrr        3390         MOV.W   R0,#SOF( _test_vars+11 )
000CAA B201            3391         MOV.B   [R0],#01H
                       3392 ; cbar.c   1245 
                       3393 ; cbar.c   1246   CBSetup.System = Settings.CBSetup.System;
000CAC 964842rr        3395         MOV.B   ES,#SEG( _Settings+32 )
000CB0 9908rrrr        3396         MOV.W   R0,#SOF( _Settings+32 )
000CB4 8200            3397         MOV.B   R0L,[R0]
000CB6 964842rr        3398         MOV.B   ES,#SEG( _CBSetup )
000CBA 9918rrrr        3399         MOV.W   R1,#SOF( _CBSetup )
000CBE 8209            3400         MOV.B   [R1],R0L
                       3401 ; cbar.c   1247   CBSetup.Pattern = Settings.CBSetup.Pattern;
000CC0 964842rr        3403         MOV.B   ES,#SEG( _Settings+34 )
000CC4 9908rrrr        3404         MOV.W   R0,#SOF( _Settings+34 )
000CC8 8A00            3405         MOV.W   R0,[R0]
000CCA 964842rr        3406         MOV.B   ES,#SEG( _CBSetup+2 )
000CCE 9918rrrr        3407         MOV.W   R1,#SOF( _CBSetup+2 )
000CD2 8A09            3408         MOV.W   [R1],R0
                       3409 ; cbar.c   1248   CBSetup.Delay = Settings.CBSetup.Delay;
000CD4 964842rr        3411         MOV.B   ES,#SEG( _Settings+36 )
000CD8 9918rrrr        3412         MOV.W   R1,#SOF( _Settings+36 )
000CDC 8B01            3413         MOV.W   R0,[R1+]
000CDE 8A11            3414         MOV.W   R1,[R1]
000CE0 964842rr        3415         MOV.B   ES,#SEG( _CBSetup+4 )
000CE4 9928rrrr        3416         MOV.W   R2,#SOF( _CBSetup+4 )
000CE8 8B0A            3417         MOV.W   [R2+],R0
000CEA 8A1A            3418         MOV.W   [R2],R1
                       3419 ; cbar.c   1249   CBSetup.ScHPhase = Settings.CBSetup.ScHPhase;
000CEC 964842rr        3421         MOV.B   ES,#SEG( _Settings+40 )
000CF0 9908rrrr        3422         MOV.W   R0,#SOF( _Settings+40 )
000CF4 8A00            3423         MOV.W   R0,[R0]
000CF6 964842rr        3424         MOV.B   ES,#SEG( _CBSetup+8 )
000CFA 9918rrrr        3425         MOV.W   R1,#SOF( _CBSetup+8 )
000CFE 8A09            3426         MOV.W   [R1],R0
                       3427 ; cbar.c   1250   CBSetup.EmbAudioSignal = Settings.CBSetup.EmbAudioSignal;
000D00 964842rr        3429         MOV.B   ES,#SEG( _Settings+42 )
000D04 9908rrrr        3430         MOV.W   R0,#SOF( _Settings+42 )
000D08 8200            3431         MOV.B   R0L,[R0]
000D0A 964842rr        3432         MOV.B   ES,#SEG( _CBSetup+10 )
000D0E 9918rrrr        3433         MOV.W   R1,#SOF( _CBSetup+10 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  46

ADDR   CODE            LINE SOURCELINE
000D12 8209            3434         MOV.B   [R1],R0L
                       3435 ; cbar.c   1251 
                       3436 ; cbar.c   1252   return( 0);
000D14 B900            3438         MOV.W   R0,#00H
                       3439 ; cbar.c   1253 }
000D16 D680            3441         RET
                       3443 ; cbar.c   1254 
                       3444 ; cbar.c   1255 /**************************************************************************/
                       3445 ; cbar.c   1256 /* CBUpdate                                                          CBAR.C  */
                       3446 ; cbar.c   1257 /*                                                                        */
                       3447 ; cbar.c   1258 /* Author:   Kim Engedahl, DEV, 000413                                    */
                       3448 ; cbar.c   1259 /* Revised:   000603, KEn, DEV                                             */
                       3449 ; cbar.c   1260 /*                                                                        */
                       3450 ; cbar.c   1261 /* Function:                                                               */
                       3451 ; cbar.c   1262 /* Remarks:                                                                */
                       3452 ; cbar.c   1263 /* Returns:                                                                */
                       3453 ; cbar.c   1264 /* Updates:                                                                */
                       3454 ; cbar.c   1265 /**************************************************************************/
                       3455 ; cbar.c   1266 int CBUpdate( void)
                       3456 ; cbar.c   1267 {
                       3457         ALIGN   1
                       3459         PUBLIC  _CBUpdate
000D18                 3460 _CBUpdate:
                       3464 ; cbar.c   1268   SetCBSystem( CBSetup.System);      // Also updates pattern
000D18 964842rr        3466         MOV.B   ES,#SEG( _CBSetup )
000D1C 9908rrrr        3467         MOV.W   R0,#SOF( _CBSetup )
000D20 8200            3468         MOV.B   R0L,[R0]
000D22 C50352          3469         CALL    _SetCBSystem
                       3470 ; cbar.c   1269 
                       3471 ; cbar.c   1270   SetCBDelay( CBSetup.Delay);
000D25 964842rr        3473         MOV.B   ES,#SEG( _CBSetup+4 )
000D29 9918rrrr        3474         MOV.W   R1,#SOF( _CBSetup+4 )
000D2D 8B01            3475         MOV.W   R0,[R1+]
000D2F 8A11            3476         MOV.W   R1,[R1]
000D31 C503EF          3477         CALL    _SetCBDelay
                       3478 ; cbar.c   1271   SetCBScHPhase( CBSetup.ScHPhase);
000D34 964842rr        3480         MOV.B   ES,#SEG( _CBSetup+8 )
000D38 9908rrrr        3481         MOV.W   R0,#SOF( _CBSetup+8 )
000D3C 8A00            3482         MOV.W   R0,[R0]
000D3E C504D6          3483         CALL    _SetCBScHPhase
                       3484 ; cbar.c   1272   SetCBEmbAudioSignal( CBSetup.EmbAudioSignal);
000D41 964842rr        3486         MOV.B   ES,#SEG( _CBSetup+10 )
000D45 9908rrrr        3487         MOV.W   R0,#SOF( _CBSetup+10 )
000D49 8200            3488         MOV.B   R0L,[R0]
000D4B C5052C          3489         CALL    _SetCBEmbAudioSignal
                       3490 ; cbar.c   1273 
                       3491 ; cbar.c   1274   return( OK);
000D4E 9908FFFF        3493         MOV.W   R0,#0FFFFH
                       3494 ; cbar.c   1275 }
000D52 D680            3496         RET
                       3498 ; cbar.c   1276 
                       3499 ; cbar.c   1277 /**************************************************************************/
                       3500 ; cbar.c   1278 /* SetCBPattern                                                     CBAR.C  */
                       3501 ; cbar.c   1279 /*                                                                        */
                       3502 ; cbar.c   1280 /* Author:   Kim Engedahl, DEV, 000331                                    */
                       3503 ; cbar.c   1281 /* Revised:   000618, KEn, DEV                                             */
                       3504 ; cbar.c   1282 /*                                                                        */
                       3505 ; cbar.c   1283 /* Function:                                                               */
                       3506 ; cbar.c   1284 /* Remarks:                                                                 */
                       3507 ; cbar.c   1285 /* Returns:                                                                */
                       3508 ; cbar.c   1286 /* Updates:                                                                */
                       3509 ; cbar.c   1287 /**************************************************************************/
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  47

ADDR   CODE            LINE SOURCELINE
                       3510 ; cbar.c   1288 int SetCBPattern( UI pattern)
                       3511 ; cbar.c   1289 {
                       3512         ALIGN   1
                       3514         PUBLIC  _SetCBPattern
000D54                 3515 _SetCBPattern:
000D54 0F10            3519         PUSH.W  R4
000D56 A97E            3521         ADDS.W  R7,#0EH
                       3527 ; cbar.c   1290   int system = CBSetup.System;
000D58 8A0F            3529         MOV.W   [R7],R0
000D5A 964842rr        3530         MOV.B   ES,#SEG( _CBSetup )
000D5E 9908rrrr        3531         MOV.W   R0,#SOF( _CBSetup )
000D62 8200            3532         MOV.B   R0L,[R0]
000D64 8180            3533         MOV.B   R4L,R0L
000D66 B190            3534         MOVS.B  R4H,#00H
                       3536 ; cbar.c   1291 
                       3537 ; cbar.c   1292   if ( ValidateCBPattern( system , &pattern) == FAIL)
000D68 8904            3539         MOV.W   R0,R4
000D6A 9168rr          3540         MOV.B   R3L,#SEG( __lc_bs )
000D6D 7177            3541         XOR.B   R3H,R3H
000D6F 8927            3542         MOV.W   R2,R7
000D71 C50588          3543         CALL    _ValidateCBPattern
000000                 3544 CBAR_IR SEGMENT HCODE INSEGMENT ROMDATA
000000                 3545         RSEG    CBAR_IR
                       3546         ALIGN   1
000000                 3547 __swtable152:
000000 rrrrrrrrrrrrrr  3548         DW      SOF _71,SEG _71
       rrrrrrrrrrrrrr       
       rrrr                 
000004 rrrrrrrrrrrrrr  3549         DW      SOF _72,SEG _72
       rrrrrrrrrrrrrr       
       rrrr                 
000008 rrrrrrrrrrrrrr  3550         DW      SOF _73,SEG _73
       rrrrrrrrrrrrrr       
       rrrr                 
00000C rrrrrrrrrrrrrr  3551         DW      SOF _74,SEG _74
       rrrrrrrrrrrrrr       
       rrrr                 
000010 rrrrrrrrrrrrrr  3552         DW      SOF _76,SEG _76
       rrrrrrrrrrrrrr       
       rrrr                 
000014 rrrrrrrrrrrrrr  3553         DW      SOF _78,SEG _78
       rrrrrrrrrrrrrr       
       rrrr                 
000018 rrrrrrrrrrrrrr  3554         DW      SOF _79,SEG _79
       rrrrrrrrrrrrrr       
       rrrr                 
00001C rrrrrrrrrrrrrr  3555         DW      SOF _80,SEG _80
       rrrrrrrrrrrrrr       
       rrrr                 
000020 rrrrrrrrrrrrrr  3556         DW      SOF _82,SEG _82
       rrrrrrrrrrrrrr       
       rrrr                 
000024 rrrrrrrrrrrrrr  3557         DW      SOF _84,SEG _84
       rrrrrrrrrrrrrr       
       rrrr                 
000028 rrrrrrrrrrrrrr  3558         DW      SOF _85,SEG _85
       rrrrrrrrrrrrrr       
       rrrr                 
00002C rrrrrrrrrrrrrr  3559         DW      SOF _87,SEG _87
       rrrrrrrrrrrrrr       
       rrrr                 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  48

ADDR   CODE            LINE SOURCELINE
000030 rrrrrrrrrrrrrr  3560         DW      SOF _89,SEG _89
       rrrrrrrrrrrrrr       
       rrrr                 
000034 rrrrrrrrrrrrrr  3561         DW      SOF _91,SEG _91
       rrrrrrrrrrrrrr       
       rrrr                 
000038 rrrrrrrrrrrrrr  3562         DW      SOF _93,SEG _93
       rrrrrrrrrrrrrr       
       rrrr                 
00003C rrrrrrrrrrrrrr  3563         DW      SOF _95,SEG _95
       rrrrrrrrrrrrrr       
       rrrr                 
000040 rrrrrrrrrrrrrr  3564         DW      SOF _97,SEG _97
       rrrrrrrrrrrrrr       
       rrrr                 
000044 rrrrrrrrrrrrrr  3565         DW      SOF _99,SEG _99
       rrrrrrrrrrrrrr       
       rrrr                 
000048 rrrrrrrrrrrrrr  3566         DW      SOF _101,SEG _101
       rrrrrrrrrrrrrr       
       rrrr                 
00004C rrrrrrrrrrrrrr  3567         DW      SOF _103,SEG _103
       rrrrrrrrrrrrrr       
       rrrr                 
000050 rrrrrrrrrrrrrr  3568         DW      SOF _105,SEG _105
       rrrrrrrrrrrrrr       
       rrrr                 
000054 rrrrrrrrrrrrrr  3569         DW      SOF _107,SEG _107
       rrrrrrrrrrrrrr       
       rrrr                 
000058 rrrrrrrrrrrrrr  3570         DW      SOF _109,SEG _109
       rrrrrrrrrrrrrr       
       rrrr                 
000D74                 3571         RSEG    CBAR_PR
000D74 6900            3572         OR.W    R0,R0
000D76 F203            3573         BNE     _70
                       3574 ; cbar.c   1293     return( FAIL);
000D78 B900            3576         MOV.W   R0,#00H
                       3577         BR      _151
000D7A D50323         +3577         JMP.L   _151
000D7A D5032300       +3577         JMP.L   _151
000D7E                 3578 _70:
                       3580 ; cbar.c   1294 
                       3581 ; cbar.c   1295   Settings.ActivePreset = 0;
000D7E 964842rr        3583         MOV.B   ES,#SEG( _Settings )
000D82 9908rrrr        3584         MOV.W   R0,#SOF( _Settings )
000D86 BA00            3585         MOV.W   [R0],#00H
                       3586 ; cbar.c   1296 
                       3587 ; cbar.c   1297   Settings.CBSetup.Pattern = CBSetup.Pattern = pattern;
000D88 8A07            3589         MOV.W   R0,[R7]
000D8A 964842rr        3591         MOV.B   ES,#SEG( _CBSetup+2 )
000D8E 9918rrrr        3592         MOV.W   R1,#SOF( _CBSetup+2 )
000D92 8A09            3593         MOV.W   [R1],R0
000D94 964842rr        3594         MOV.B   ES,#SEG( _Settings+34 )
000D98 9918rrrr        3595         MOV.W   R1,#SOF( _Settings+34 )
000D9C 8A09            3596         MOV.W   [R1],R0
                       3597 ; cbar.c   1298   NV_Store( &Settings, SettingsPtr, sizeof( Settings));
000D9E 9918rrrr        3599         MOV.W   R1,#SEG( _Settings )
000DA2 9908rrrr        3600         MOV.W   R0,#SOF( _Settings )
000DA6 964842rr        3602         MOV.B   ES,#SEG( _SettingsPtr )
000DAA 9928rrrr        3603         MOV.W   R2,#SOF( _SettingsPtr )
000DAE 8A22            3604         MOV.W   R2,[R2]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  49

ADDR   CODE            LINE SOURCELINE
000DB0 9938004A        3605         MOV.W   R3,#04AH
                       3606         CALL    _NV_Store
000DB4 C4rrrrrr       +3606 ;       FCALL   _NV_Store
                       3607 ; cbar.c   1299 
                       3608 ; cbar.c   1300   cb_vars.CBX.Blanking = TRUE;
000DB8 964842rr        3610         MOV.B   ES,#SEG( _cb_vars+17 )
000DBC 9908rrrr        3611         MOV.W   R0,#SOF( _cb_vars+17 )
000DC0 9208FF          3612         MOV.B   [R0],#0FFH
                       3613 ; cbar.c   1301   test_vars.CBX.Blanking = TRUE;
000DC3 964842rr        3615         MOV.B   ES,#SEG( _test_vars+17 )
000DC7 9908rrrr        3616         MOV.W   R0,#SOF( _test_vars+17 )
000DCB 9208FF          3617         MOV.B   [R0],#0FFH
                       3618 ; cbar.c   1302 
                       3619 ; cbar.c   1303   cb_vars.CBX.Status &= ~S5S4S3S2;                         // Blank line immediat
                            ely
000DCE 964842rr        3621         MOV.B   ES,#SEG( _cb_vars+20 )
000DD2 9908rrrr        3622         MOV.W   R0,#SOF( _cb_vars+20 )
000DD6 8A00            3623         MOV.W   R0,[R0]
000DD8 9905FFC3        3624         AND.W   R0,#0FFC3H
000DDC 964842rr        3625         MOV.B   ES,#SEG( _cb_vars+20 )
000DE0 9918rrrr        3626         MOV.W   R1,#SOF( _cb_vars+20 )
000DE4 8A09            3627         MOV.W   [R1],R0
                       3628 ; cbar.c   1304   test_vars.CBX.Status &= ~S5S4S3S2;                         // Blank line immedi
                            ately
000DE6 964842rr        3630         MOV.B   ES,#SEG( _test_vars+20 )
000DEA 9908rrrr        3631         MOV.W   R0,#SOF( _test_vars+20 )
000DEE 8A00            3632         MOV.W   R0,[R0]
000DF0 9905FFC3        3633         AND.W   R0,#0FFC3H
000DF4 964842rr        3634         MOV.B   ES,#SEG( _test_vars+20 )
000DF8 9918rrrr        3635         MOV.W   R1,#SOF( _test_vars+20 )
000DFC 8A09            3636         MOV.W   [R1],R0
                       3637 ; cbar.c   1305 #ifdef CLASSIC    
                       3638 ; cbar.c   1306   StatusPort = cb_vars.CBX.Status;
000DFE 964842rr        3640         MOV.B   ES,#SEG( _cb_vars+20 )
000E02 9908rrrr        3641         MOV.W   R0,#SOF( _cb_vars+20 )
000E06 8A00            3642         MOV.W   R0,[R0]
000E08 96484206        3643         MOV.B   ES,#SEG( _StatusPort )
000E0C 9918A000        3644         MOV.W   R1,#SOF( _StatusPort )
000E10 8A09            3645         MOV.W   [R1],R0
                       3647 ; cbar.c   1307 #else  
                       3648 ; cbar.c   1308   StatusPort = test_vars.CBX.Status;
                       3649 ; cbar.c   1309 #endif
                       3650 ; cbar.c   1310 
                       3651 ; cbar.c   1311   switch ( pattern)
000E12 8A17            3653         MOV.W   R1,[R7]
000E14 99140016        3654         CMP.W   R1,#016H
                       3655         BG      _150
000E18 F902           +3655 ;       BL      _LG_76
000E1A D502C6         +3655 ;       JMP.L   _150
000E1A D502C600       +3655 ;       JMP.L   _150
000E1E                +3655 _LG_76:
000E1E D912            3656         ASL.W   R1,#02H
000E20 964843rr        3657         MOV.B   CS,#SEG( __swtable152 )
000E24 9910rrrr        3658         ADD.W   R1,#SOF( __swtable152 )
000E28 8801            3659         MOVC.W  R0,[R1+]
000E2A 0F01            3660         PUSH.W  R0
000E2C 8801            3661         MOVC.W  R0,[R1+]
000E2E 0F01            3662         PUSH.W  R0
000E30 D680            3663         RET
                       3666 ; cbar.c   1312   {
                       3667 ; cbar.c   1313     case SMPTECBar:
000E32                 3669 _71:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  50

ADDR   CODE            LINE SOURCELINE
                       3670 ; cbar.c   1314       SRAMVideoLoad( dSMPTECBar, SRAMBank1);
000E32 910802          3672         MOV.B   R0L,#02H
000E35 911810          3673         MOV.B   R0H,#010H
000E38 C5FD20          3674         CALL    _SRAMVideoLoad
                       3676 ; cbar.c   1315       SRAMVideoLoad( dBlueBars, SRAMBank2);
000E3B 910803          3678         MOV.B   R0L,#03H
000E3E 911814          3679         MOV.B   R0H,#014H
000E41 C5FD1B          3680         CALL    _SRAMVideoLoad
                       3681 ; cbar.c   1316       SRAMVideoLoad( dIWhiteQ, SRAMBank3);
000E44 910804          3683         MOV.B   R0L,#04H
000E47 911818          3684         MOV.B   R0H,#018H
000E4A C5FD17          3685         CALL    _SRAMVideoLoad
                       3686 ; cbar.c   1317 
                       3687 ; cbar.c   1318 //KS. Emulates a 8 line/pixel text field ! 
                       3688 ; cbar.c   1319 //Must be setup no matter whitch pattern is selected. 
                       3689 ; cbar.c   1320 //Bank 5 -12 Can be initialised with the text lines at power 
                       3690 ; cbar.c   1321 //up and when a new text line is entered by the user(via the front or the PC)  
                       3691 ; cbar.c   1322 
                       3692 ; cbar.c   1323       SRAMVideoLoad( dWindow100, SRAMBank5);
000E4D 911820          3694         MOV.B   R0H,#020H
000E50 910821          3695         MOV.B   R0L,#021H
000E53 C5FD12          3696         CALL    _SRAMVideoLoad
                       3697 ; cbar.c   1324       SRAMVideoLoad( dWindow20, SRAMBank6);
000E56 911824          3699         MOV.B   R0H,#024H
000E59 91081F          3700         MOV.B   R0L,#01FH
000E5C C5FD0E          3701         CALL    _SRAMVideoLoad
                       3702 ; cbar.c   1325       SRAMVideoLoad( dWindow15, SRAMBank7);
000E5F 911828          3704         MOV.B   R0H,#028H
000E62 91081D          3705         MOV.B   R0L,#01DH
000E65 C5FD09          3706         CALL    _SRAMVideoLoad
                       3707 ; cbar.c   1326       SRAMVideoLoad( dWindow10, SRAMBank8);
000E68 91182C          3709         MOV.B   R0H,#02CH
000E6B 91082B          3710         MOV.B   R0L,#02BH
000E6E C5FD05          3711         CALL    _SRAMVideoLoad
                       3712 ; cbar.c   1327       SRAMVideoLoad( dWindow10, SRAMBank9);
000E71 911830          3714         MOV.B   R0H,#030H
000E74 91082B          3715         MOV.B   R0L,#02BH
000E77 C5FD00          3716         CALL    _SRAMVideoLoad
                       3717 ; cbar.c   1328       SRAMVideoLoad( dWindow15, SRAMBank10);
000E7A 911834          3719         MOV.B   R0H,#034H
000E7D 91081D          3720         MOV.B   R0L,#01DH
000E80 C5FCFC          3721         CALL    _SRAMVideoLoad
                       3722 ; cbar.c   1329       SRAMVideoLoad( dWindow20, SRAMBank11);
000E83 911838          3724         MOV.B   R0H,#038H
000E86 91081F          3725         MOV.B   R0L,#01FH
000E89 C5FCF7          3726         CALL    _SRAMVideoLoad
                       3727 ; cbar.c   1330       SRAMVideoLoad( dWindow100, SRAMBank12);
000E8C 91183C          3729         MOV.B   R0H,#03CH
000E8F 910821          3730         MOV.B   R0L,#021H
000E92 C5FCF3          3731         CALL    _SRAMVideoLoad
                       3732 ; cbar.c   1331 
                       3733 ; cbar.c   1332       cb_vars.CBX.newTablePtr = &SMPTECBarTable[0];
000E95 964842rr        3735         MOV.B   ES,#SEG( _cb_vars+4 )
000E99 9908rrrr        3736         MOV.W   R0,#SOF( _cb_vars+4 )
000E9D 9B08094E        3737         MOV.W   [R0+],#SOF( _SMPTECBarTable )
000EA1 BA00            3738         MOV.W   [R0],#SEG( _SMPTECBarTable )
                       3739 ; cbar.c   1333       test_vars.CBX.newTablePtr = &TEST_SMPTECBarTable[0];
000EA3 964842rr        3741         MOV.B   ES,#SEG( _test_vars+4 )
000EA7 9908rrrr        3742         MOV.W   R0,#SOF( _test_vars+4 )
000EAB 9B080800        3743         MOV.W   [R0+],#SOF( _TEST_SMPTECBarTable )
000EAF BA00            3744         MOV.W   [R0],#SEG( _TEST_SMPTECBarTable )
                       3745 ; cbar.c   1334       break;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  51

ADDR   CODE            LINE SOURCELINE
                       3747         BR      _150
000EB1 D5027A         +3747         JMP.L   _150
                       3748 ; cbar.c   1335 
                       3749 ; cbar.c   1336     case EBUCBar:
000EB4                 3751 _72:
                       3752 ; cbar.c   1337       SRAMVideoLoad( dEBUCBar_625, SRAMBank1);
000EB4 910801          3754         MOV.B   R0L,#01H
000EB7 911810          3755         MOV.B   R0H,#010H
000EBA C5FCDF          3756         CALL    _SRAMVideoLoad
                       3757 ; cbar.c   1338 
                       3758 ; cbar.c   1339       cb_vars.CBX.newTablePtr = &PALFullFieldTable[0];
000EBD 964842rr        3760         MOV.B   ES,#SEG( _cb_vars+4 )
000EC1 9908rrrr        3761         MOV.W   R0,#SOF( _cb_vars+4 )
000EC5 9B080828        3762         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000EC9 BA00            3763         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       3764 ; cbar.c   1340       break;
                       3766         BR      _150
000ECB D5026D         +3766         JMP.L   _150
                       3767 ; cbar.c   1341 
                       3768 ; cbar.c   1342     case FCCCBar:
000ECE                 3770 _73:
                       3771 ; cbar.c   1343       SRAMVideoLoad( dFCC_CBar_525, SRAMBank1);
000ECE 910829          3773         MOV.B   R0L,#029H
000ED1 911810          3774         MOV.B   R0H,#010H
000ED4 C5FCD2          3775         CALL    _SRAMVideoLoad
                       3776 ; cbar.c   1344 
                       3777 ; cbar.c   1345       cb_vars.CBX.newTablePtr = &NTSCFullFieldTable[0];
000ED7 964842rr        3779         MOV.B   ES,#SEG( _cb_vars+4 )
000EDB 9908rrrr        3780         MOV.W   R0,#SOF( _cb_vars+4 )
000EDF 9B08093C        3781         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000EE3 BA00            3782         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3783 ; cbar.c   1346       break;
                       3785         BR      _150
000EE5 D50260         +3785         JMP.L   _150
                       3786 ; cbar.c   1347 
                       3787 ; cbar.c   1348     case EBUCBarITU:
000EE8                 3789 _74:
                       3790 ; cbar.c   1349       SRAMVideoLoad( dEBUCBar_8bit_625, SRAMBank1);
000EE8 910800          3792         MOV.B   R0L,#00H
000EEB 911810          3793         MOV.B   R0H,#010H
000EEE C5FCC5          3794         CALL    _SRAMVideoLoad
                       3795 ; cbar.c   1350 
                       3796 ; cbar.c   1351       if ( system < NTSC_US)
000EF1 99440002        3798         CMP.W   R4,#02H
000EF5 FA09            3799         BGE     _75
                       3800 ; cbar.c   1352         cb_vars.CBX.newTablePtr = &PALFullFieldTable[0];
000EF7 964842rr        3802         MOV.B   ES,#SEG( _cb_vars+4 )
000EFB 9908rrrr        3803         MOV.W   R0,#SOF( _cb_vars+4 )
000EFF 9B080828        3804         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000F03 BA00            3805         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       3806         BR      _150
000F05 D50250         +3806         JMP.L   _150
000F05 D50250         +3806         JMP.L   _150
000F08                 3807 _75:
                       3808 ; cbar.c   1353       else
                       3809 ; cbar.c   1354         cb_vars.CBX.newTablePtr = &NTSCFullFieldTable[0];
000F08 964842rr        3811         MOV.B   ES,#SEG( _cb_vars+4 )
000F0C 9908rrrr        3812         MOV.W   R0,#SOF( _cb_vars+4 )
000F10 9B08093C        3813         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000F14 BA00            3814         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3815 ; cbar.c   1355       break;
                       3817         BR      _150
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  52

ADDR   CODE            LINE SOURCELINE
000F16 D50248         +3817         JMP.L   _150
                       3818 ; cbar.c   1356 
                       3819 ; cbar.c   1357     case CBar100:
000F1A                 3821 _76:
                       3822 ; cbar.c   1358       if ( system < NTSC_US)
000F1A 99440002        3824         CMP.W   R4,#02H
000F1E FA0D            3825         BGE     _77
                       3826 ; cbar.c   1359       {
                       3827 ; cbar.c   1360         SRAMVideoLoad( dCBar100_625, SRAMBank1);
000F20 910805          3829         MOV.B   R0L,#05H
000F23 911810          3830         MOV.B   R0H,#010H
000F26 C5FCA9          3831         CALL    _SRAMVideoLoad
                       3832 ; cbar.c   1361 
                       3833 ; cbar.c   1362         cb_vars.CBX.newTablePtr = &PALFullFieldTable[0];
000F29 964842rr        3835         MOV.B   ES,#SEG( _cb_vars+4 )
000F2D 9908rrrr        3836         MOV.W   R0,#SOF( _cb_vars+4 )
000F31 9B080828        3837         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000F35 BA00            3838         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       3839 ; cbar.c   1363       }
                       3841         BR      _150
000F37 D50237         +3841         JMP.L   _150
000F37 D50237         +3841         JMP.L   _150
000F3A                 3842 _77:
                       3843 ; cbar.c   1364       else
                       3844 ; cbar.c   1365       {
                       3845 ; cbar.c   1366         SRAMVideoLoad( dFCC_CBar100_525, SRAMBank1);
000F3A 91082A          3847         MOV.B   R0L,#02AH
000F3D 911810          3848         MOV.B   R0H,#010H
000F40 C5FC9C          3849         CALL    _SRAMVideoLoad
                       3850 ; cbar.c   1367 
                       3851 ; cbar.c   1368         cb_vars.CBX.newTablePtr = &NTSCFullFieldTable[0];
000F43 964842rr        3853         MOV.B   ES,#SEG( _cb_vars+4 )
000F47 9908rrrr        3854         MOV.W   R0,#SOF( _cb_vars+4 )
000F4B 9B08093C        3855         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000F4F BA00            3856         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3857 ; cbar.c   1369       }
                       3858 ; cbar.c   1370       break;
                       3860         BR      _150
000F51 D5022A         +3860         JMP.L   _150
                       3861 ; cbar.c   1371 
                       3862 ; cbar.c   1372     case CBarGrey75:
000F54                 3864 _78:
                       3865 ; cbar.c   1373       SRAMVideoLoad( dCBar75_STD_625, SRAMBank1);
000F54 910828          3867         MOV.B   R0L,#028H
000F57 911810          3868         MOV.B   R0H,#010H
000F5A C5FC8F          3869         CALL    _SRAMVideoLoad
                       3870 ; cbar.c   1374       SRAMVideoLoad( dGrey75_625, SRAMBank2);
000F5D 910806          3872         MOV.B   R0L,#06H
000F60 911814          3873         MOV.B   R0H,#014H
000F63 C5FC8A          3874         CALL    _SRAMVideoLoad
                       3875 ; cbar.c   1375   
                       3876 ; cbar.c   1376       cb_vars.CBX.newTablePtr = &PALSplitFieldTable[0];
000F66 964842rr        3878         MOV.B   ES,#SEG( _cb_vars+4 )
000F6A 9908rrrr        3879         MOV.W   R0,#SOF( _cb_vars+4 )
000F6E 9B08083A        3880         MOV.W   [R0+],#SOF( _PALSplitFieldTable )
000F72 BA00            3881         MOV.W   [R0],#SEG( _PALSplitFieldTable )
                       3882 ; cbar.c   1377       break;
                       3884         BR      _150
000F74 D50219         +3884         JMP.L   _150
                       3885 ; cbar.c   1378 
                       3886 ; cbar.c   1379     case CBarRed75:
000F78                 3888 _79:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  53

ADDR   CODE            LINE SOURCELINE
                       3889 ; cbar.c   1380       SRAMVideoLoad( dEBUCBar_625, SRAMBank1);
000F78 910801          3891         MOV.B   R0L,#01H
000F7B 911810          3892         MOV.B   R0H,#010H
000F7E C5FC7D          3893         CALL    _SRAMVideoLoad
                       3894 ; cbar.c   1381       SRAMVideoLoad( dRed75_625, SRAMBank2);
000F81 910807          3896         MOV.B   R0L,#07H
000F84 911814          3897         MOV.B   R0H,#014H
000F87 C5FC78          3898         CALL    _SRAMVideoLoad
                       3899 ; cbar.c   1382 
                       3900 ; cbar.c   1383       cb_vars.CBX.newTablePtr = &PALSplitFieldTable[0];
000F8A 964842rr        3902         MOV.B   ES,#SEG( _cb_vars+4 )
000F8E 9908rrrr        3903         MOV.W   R0,#SOF( _cb_vars+4 )
000F92 9B08083A        3904         MOV.W   [R0+],#SOF( _PALSplitFieldTable )
000F96 BA00            3905         MOV.W   [R0],#SEG( _PALSplitFieldTable )
                       3906 ; cbar.c   1384       break;
                       3908         BR      _150
000F98 D50207         +3908         JMP.L   _150
                       3909 ; cbar.c   1385       
                       3910 ; cbar.c   1386     case Red75:
000F9C                 3912 _80:
                       3913 ; cbar.c   1387       if ( system < NTSC_US)
000F9C 99440002        3915         CMP.W   R4,#02H
000FA0 FA0D            3916         BGE     _81
                       3917 ; cbar.c   1388       {
                       3918 ; cbar.c   1389         SRAMVideoLoad( dRed75_625, SRAMBank1);
000FA2 910807          3920         MOV.B   R0L,#07H
000FA5 911810          3921         MOV.B   R0H,#010H
000FA8 C5FC68          3922         CALL    _SRAMVideoLoad
                       3923 ; cbar.c   1390 
                       3924 ; cbar.c   1391         cb_vars.CBX.newTablePtr = &PALFullFieldTable[0];
000FAB 964842rr        3926         MOV.B   ES,#SEG( _cb_vars+4 )
000FAF 9908rrrr        3927         MOV.W   R0,#SOF( _cb_vars+4 )
000FB3 9B080828        3928         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000FB7 BA00            3929         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       3930 ; cbar.c   1392       }
                       3932         BR      _150
000FB9 D501F6         +3932         JMP.L   _150
000FB9 D501F6         +3932         JMP.L   _150
000FBC                 3933 _81:
                       3934 ; cbar.c   1393       else
                       3935 ; cbar.c   1394       {
                       3936 ; cbar.c   1395         SRAMVideoLoad( dRed75_525, SRAMBank1);
000FBC 910808          3938         MOV.B   R0L,#08H
000FBF 911810          3939         MOV.B   R0H,#010H
000FC2 C5FC5B          3940         CALL    _SRAMVideoLoad
                       3941 ; cbar.c   1396 
                       3942 ; cbar.c   1397         cb_vars.CBX.newTablePtr = &NTSCFullFieldTable[0];
000FC5 964842rr        3944         MOV.B   ES,#SEG( _cb_vars+4 )
000FC9 9908rrrr        3945         MOV.W   R0,#SOF( _cb_vars+4 )
000FCD 9B08093C        3946         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
000FD1 BA00            3947         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3948 ; cbar.c   1398       }
                       3949 ; cbar.c   1399       break;
                       3951         BR      _150
000FD3 D501E9         +3951         JMP.L   _150
                       3952 ; cbar.c   1400 
                       3953 ; cbar.c   1401     case Multiburst:
000FD6                 3955 _82:
                       3956 ; cbar.c   1402       if ( system < NTSC_US)
000FD6 99440002        3958         CMP.W   R4,#02H
000FDA FA0D            3959         BGE     _83
                       3960 ; cbar.c   1403       {
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  54

ADDR   CODE            LINE SOURCELINE
                       3961 ; cbar.c   1404         SRAMVideoLoad( dChroma_Multiburst, SRAMBank1);
000FDC 910809          3963         MOV.B   R0L,#09H
000FDF 911810          3964         MOV.B   R0H,#010H
000FE2 C5FC4B          3965         CALL    _SRAMVideoLoad
                       3966 ; cbar.c   1405 
                       3967 ; cbar.c   1406         cb_vars.CBX.newTablePtr = &PALFullFieldTable[0];
000FE5 964842rr        3969         MOV.B   ES,#SEG( _cb_vars+4 )
000FE9 9908rrrr        3970         MOV.W   R0,#SOF( _cb_vars+4 )
000FED 9B080828        3971         MOV.W   [R0+],#SOF( _PALFullFieldTable )
000FF1 BA00            3972         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       3973 ; cbar.c   1407       }
                       3975         BR      _150
000FF3 D501D9         +3975         JMP.L   _150
000FF3 D501D9         +3975         JMP.L   _150
000FF6                 3976 _83:
                       3977 ; cbar.c   1408       else
                       3978 ; cbar.c   1409       {
                       3979 ; cbar.c   1410         SRAMVideoLoad( dFCC_Multiburst_525, SRAMBank1);
000FF6 91080A          3981         MOV.B   R0L,#0AH
000FF9 911810          3982         MOV.B   R0H,#010H
000FFC C5FC3E          3983         CALL    _SRAMVideoLoad
                       3984 ; cbar.c   1411 
                       3985 ; cbar.c   1412         cb_vars.CBX.newTablePtr = &NTSCFullFieldTable[0];
000FFF 964842rr        3987         MOV.B   ES,#SEG( _cb_vars+4 )
001003 9908rrrr        3988         MOV.W   R0,#SOF( _cb_vars+4 )
001007 9B08093C        3989         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
00100B BA00            3990         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       3991 ; cbar.c   1413       }
                       3992 ; cbar.c   1414       break;
                       3994         BR      _150
00100D D501CC         +3994         JMP.L   _150
                       3995 ; cbar.c   1415 
                       3996 ; cbar.c   1416     case CCIR18:
001010                 3998 _84:
                       3999 ; cbar.c   1417       SRAMVideoLoad( dCCIR18_625, SRAMBank1);
001010 91082F          4001         MOV.B   R0L,#02FH
001013 911810          4002         MOV.B   R0H,#010H
001016 C5FC31          4003         CALL    _SRAMVideoLoad
                       4004 ; cbar.c   1418 
                       4005 ; cbar.c   1419       cb_vars.CBX.newTablePtr = &PALFullFieldTable[0];
001019 964842rr        4007         MOV.B   ES,#SEG( _cb_vars+4 )
00101D 9908rrrr        4008         MOV.W   R0,#SOF( _cb_vars+4 )
001021 9B080828        4009         MOV.W   [R0+],#SOF( _PALFullFieldTable )
001025 BA00            4010         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       4011 ; cbar.c   1420       break;
                       4013         BR      _150
001027 D501BF         +4013         JMP.L   _150
                       4014 ; cbar.c   1421 
                       4015 ; cbar.c   1422     case Window10:
00102A                 4017 _85:
                       4018 ; cbar.c   1423       SRAMVideoLoad( dWindow50Marker, SRAMBank1);
00102A 91081B          4020         MOV.B   R0L,#01BH
00102D 911810          4021         MOV.B   R0H,#010H
001030 C5FC24          4022         CALL    _SRAMVideoLoad
                       4023 ; cbar.c   1424       SRAMVideoLoad( dMarkerLine, SRAMBank2);
001033 911814          4025         MOV.B   R0H,#014H
001036 91081C          4026         MOV.B   R0L,#01CH
001039 C5FC1F          4027         CALL    _SRAMVideoLoad
                       4028 ; cbar.c   1425       SRAMVideoLoad( dMarker10, SRAMBank3);
00103C 91082C          4030         MOV.B   R0L,#02CH
00103F 911818          4031         MOV.B   R0H,#018H
001042 C5FC1B          4032         CALL    _SRAMVideoLoad
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  55

ADDR   CODE            LINE SOURCELINE
                       4033 ; cbar.c   1426       SRAMVideoLoad( dWindow10, SRAMBank4);
001045 91082B          4035         MOV.B   R0L,#02BH
001048 91181C          4036         MOV.B   R0H,#01CH
00104B C5FC16          4037         CALL    _SRAMVideoLoad
                       4038 ; cbar.c   1427 
                       4039 ; cbar.c   1428       if ( system < NTSC_US)
00104E 99440002        4041         CMP.W   R4,#02H
001052 FA09            4042         BGE     _86
                       4043 ; cbar.c   1429         cb_vars.CBX.newTablePtr = &PALWindowTable[0];
001054 964842rr        4045         MOV.B   ES,#SEG( _cb_vars+4 )
001058 9908rrrr        4046         MOV.W   R0,#SOF( _cb_vars+4 )
00105C 9B08084C        4047         MOV.W   [R0+],#SOF( _PALWindowTable )
001060 BA00            4048         MOV.W   [R0],#SEG( _PALWindowTable )
                       4049         BR      _150
001062 D501A2         +4049         JMP.L   _150
001062 D501A200       +4049         JMP.L   _150
001066                 4050 _86:
                       4051 ; cbar.c   1430       else
                       4052 ; cbar.c   1431         cb_vars.CBX.newTablePtr = &NTSCWindowTable[0];
001066 964842rr        4054         MOV.B   ES,#SEG( _cb_vars+4 )
00106A 9908rrrr        4055         MOV.W   R0,#SOF( _cb_vars+4 )
00106E 9B080964        4056         MOV.W   [R0+],#SOF( _NTSCWindowTable )
001072 BA00            4057         MOV.W   [R0],#SEG( _NTSCWindowTable )
                       4058 ; cbar.c   1432       break;
                       4060         BR      _150
001074 D50199         +4060         JMP.L   _150
                       4061 ; cbar.c   1433 
                       4062 ; cbar.c   1434     case Window15:
001078                 4064 _87:
                       4065 ; cbar.c   1435       SRAMVideoLoad( dWindow50Marker, SRAMBank1);
001078 91081B          4067         MOV.B   R0L,#01BH
00107B 911810          4068         MOV.B   R0H,#010H
00107E C5FBFD          4069         CALL    _SRAMVideoLoad
                       4070 ; cbar.c   1436       SRAMVideoLoad( dMarkerLine, SRAMBank2);
001081 911814          4072         MOV.B   R0H,#014H
001084 91081C          4073         MOV.B   R0L,#01CH
001087 C5FBF8          4074         CALL    _SRAMVideoLoad
                       4075 ; cbar.c   1437       SRAMVideoLoad( dMarker15, SRAMBank3);
00108A 91081E          4077         MOV.B   R0L,#01EH
00108D 911818          4078         MOV.B   R0H,#018H
001090 C5FBF4          4079         CALL    _SRAMVideoLoad
                       4080 ; cbar.c   1438       SRAMVideoLoad( dWindow15, SRAMBank4);
001093 91081D          4082         MOV.B   R0L,#01DH
001096 91181C          4083         MOV.B   R0H,#01CH
001099 C5FBEF          4084         CALL    _SRAMVideoLoad
                       4085 ; cbar.c   1439 
                       4086 ; cbar.c   1440       if ( system < NTSC_US)                        
00109C 99440002        4088         CMP.W   R4,#02H
0010A0 FA09            4089         BGE     _88
                       4090 ; cbar.c   1441         cb_vars.CBX.newTablePtr = &PALWindowTable[0];
0010A2 964842rr        4092         MOV.B   ES,#SEG( _cb_vars+4 )
0010A6 9908rrrr        4093         MOV.W   R0,#SOF( _cb_vars+4 )
0010AA 9B08084C        4094         MOV.W   [R0+],#SOF( _PALWindowTable )
0010AE BA00            4095         MOV.W   [R0],#SEG( _PALWindowTable )
                       4096         BR      _150
0010B0 D5017B         +4096         JMP.L   _150
0010B0 D5017B00       +4096         JMP.L   _150
0010B4                 4097 _88:
                       4098 ; cbar.c   1442       else
                       4099 ; cbar.c   1443         cb_vars.CBX.newTablePtr = &NTSCWindowTable[0];
0010B4 964842rr        4101         MOV.B   ES,#SEG( _cb_vars+4 )
0010B8 9908rrrr        4102         MOV.W   R0,#SOF( _cb_vars+4 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  56

ADDR   CODE            LINE SOURCELINE
0010BC 9B080964        4103         MOV.W   [R0+],#SOF( _NTSCWindowTable )
0010C0 BA00            4104         MOV.W   [R0],#SEG( _NTSCWindowTable )
                       4105 ; cbar.c   1444       break;
                       4107         BR      _150
0010C2 D50172         +4107         JMP.L   _150
                       4108 ; cbar.c   1445 
                       4109 ; cbar.c   1446     case Window20:
0010C6                 4111 _89:
                       4112 ; cbar.c   1447       SRAMVideoLoad( dWindow50Marker, SRAMBank1);
0010C6 91081B          4114         MOV.B   R0L,#01BH
0010C9 911810          4115         MOV.B   R0H,#010H
0010CC C5FBD6          4116         CALL    _SRAMVideoLoad
                       4117 ; cbar.c   1448       SRAMVideoLoad( dMarkerLine, SRAMBank2);
0010CF 911814          4119         MOV.B   R0H,#014H
0010D2 91081C          4120         MOV.B   R0L,#01CH
0010D5 C5FBD1          4121         CALL    _SRAMVideoLoad
                       4122 ; cbar.c   1449       SRAMVideoLoad( dMarker20, SRAMBank3);
0010D8 910820          4124         MOV.B   R0L,#020H
0010DB 911818          4125         MOV.B   R0H,#018H
0010DE C5FBCD          4126         CALL    _SRAMVideoLoad
                       4127 ; cbar.c   1450       SRAMVideoLoad( dWindow20, SRAMBank4);
0010E1 91081F          4129         MOV.B   R0L,#01FH
0010E4 91181C          4130         MOV.B   R0H,#01CH
0010E7 C5FBC8          4131         CALL    _SRAMVideoLoad
                       4132 ; cbar.c   1451 
                       4133 ; cbar.c   1452       if ( system < NTSC_US)
0010EA 99440002        4135         CMP.W   R4,#02H
0010EE FA09            4136         BGE     _90
                       4137 ; cbar.c   1453         cb_vars.CBX.newTablePtr = &PALWindowTable[0];
0010F0 964842rr        4139         MOV.B   ES,#SEG( _cb_vars+4 )
0010F4 9908rrrr        4140         MOV.W   R0,#SOF( _cb_vars+4 )
0010F8 9B08084C        4141         MOV.W   [R0+],#SOF( _PALWindowTable )
0010FC BA00            4142         MOV.W   [R0],#SEG( _PALWindowTable )
                       4143         BR      _150
0010FE D50154         +4143         JMP.L   _150
0010FE D5015400       +4143         JMP.L   _150
001102                 4144 _90:
                       4145 ; cbar.c   1454       else
                       4146 ; cbar.c   1455         cb_vars.CBX.newTablePtr = &NTSCWindowTable[0];
001102 964842rr        4148         MOV.B   ES,#SEG( _cb_vars+4 )
001106 9908rrrr        4149         MOV.W   R0,#SOF( _cb_vars+4 )
00110A 9B080964        4150         MOV.W   [R0+],#SOF( _NTSCWindowTable )
00110E BA00            4151         MOV.W   [R0],#SEG( _NTSCWindowTable )
                       4152 ; cbar.c   1456       break;
                       4154         BR      _150
001110 D5014B         +4154         JMP.L   _150
                       4155 ; cbar.c   1457 
                       4156 ; cbar.c   1458     case Window100:
001114                 4158 _91:
                       4159 ; cbar.c   1459       SRAMVideoLoad( dWindow50Marker, SRAMBank1);
001114 91081B          4161         MOV.B   R0L,#01BH
001117 911810          4162         MOV.B   R0H,#010H
00111A C5FBAF          4163         CALL    _SRAMVideoLoad
                       4164 ; cbar.c   1460       SRAMVideoLoad( dMarkerLine, SRAMBank2);
00111D 911814          4166         MOV.B   R0H,#014H
001120 91081C          4167         MOV.B   R0L,#01CH
001123 C5FBAA          4168         CALL    _SRAMVideoLoad
                       4169 ; cbar.c   1461       SRAMVideoLoad( dMarker100, SRAMBank3);
001126 910822          4171         MOV.B   R0L,#022H
001129 911818          4172         MOV.B   R0H,#018H
00112C C5FBA6          4173         CALL    _SRAMVideoLoad
                       4174 ; cbar.c   1462       SRAMVideoLoad( dWindow100, SRAMBank4);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  57

ADDR   CODE            LINE SOURCELINE
00112F 910821          4176         MOV.B   R0L,#021H
001132 91181C          4177         MOV.B   R0H,#01CH
001135 C5FBA1          4178         CALL    _SRAMVideoLoad
                       4179 ; cbar.c   1463 
                       4180 ; cbar.c   1464       if ( system < NTSC_US)
001138 99440002        4182         CMP.W   R4,#02H
00113C FA09            4183         BGE     _92
                       4184 ; cbar.c   1465         cb_vars.CBX.newTablePtr = &PALWindowTable[0];
00113E 964842rr        4186         MOV.B   ES,#SEG( _cb_vars+4 )
001142 9908rrrr        4187         MOV.W   R0,#SOF( _cb_vars+4 )
001146 9B08084C        4188         MOV.W   [R0+],#SOF( _PALWindowTable )
00114A BA00            4189         MOV.W   [R0],#SEG( _PALWindowTable )
                       4190         BR      _150
00114C D5012D         +4190         JMP.L   _150
00114C D5012D00       +4190         JMP.L   _150
001150                 4191 _92:
                       4192 ; cbar.c   1466       else
                       4193 ; cbar.c   1467         cb_vars.CBX.newTablePtr = &NTSCWindowTable[0];
001150 964842rr        4195         MOV.B   ES,#SEG( _cb_vars+4 )
001154 9908rrrr        4196         MOV.W   R0,#SOF( _cb_vars+4 )
001158 9B080964        4197         MOV.W   [R0+],#SOF( _NTSCWindowTable )
00115C BA00            4198         MOV.W   [R0],#SEG( _NTSCWindowTable )
                       4199 ; cbar.c   1468       break;
                       4201         BR      _150
00115E D50124         +4201         JMP.L   _150
                       4202 ; cbar.c   1469 
                       4203 ; cbar.c   1470     case BlWh15kHz:
001162                 4205 _93:
                       4206 ; cbar.c   1471       if ( system < NTSC_US)                        
001162 99440002        4208         CMP.W   R4,#02H
001166 FA0D            4209         BGE     _94
                       4210 ; cbar.c   1472       {
                       4211 ; cbar.c   1473         SRAMVideoLoad( dkHz15BlWh_625, SRAMBank1);
001168 91082D          4213         MOV.B   R0L,#02DH
00116B 911810          4214         MOV.B   R0H,#010H
00116E C5FB85          4215         CALL    _SRAMVideoLoad
                       4216 ; cbar.c   1474 
                       4217 ; cbar.c   1475         cb_vars.CBX.newTablePtr = &PALFullFieldTable[0];
001171 964842rr        4219         MOV.B   ES,#SEG( _cb_vars+4 )
001175 9908rrrr        4220         MOV.W   R0,#SOF( _cb_vars+4 )
001179 9B080828        4221         MOV.W   [R0+],#SOF( _PALFullFieldTable )
00117D BA00            4222         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       4223 ; cbar.c   1476       }
                       4225         BR      _150
00117F D50113         +4225         JMP.L   _150
00117F D50113         +4225         JMP.L   _150
001182                 4226 _94:
                       4227 ; cbar.c   1477       else
                       4228 ; cbar.c   1478       {
                       4229 ; cbar.c   1479         SRAMVideoLoad( dkHz15BlWh_525, SRAMBank1);
001182 91082E          4231         MOV.B   R0L,#02EH
001185 911810          4232         MOV.B   R0H,#010H
001188 C5FB78          4233         CALL    _SRAMVideoLoad
                       4234 ; cbar.c   1480 
                       4235 ; cbar.c   1481         cb_vars.CBX.newTablePtr = &NTSCFullFieldTable[0];
00118B 964842rr        4237         MOV.B   ES,#SEG( _cb_vars+4 )
00118F 9908rrrr        4238         MOV.W   R0,#SOF( _cb_vars+4 )
001193 9B08093C        4239         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
001197 BA00            4240         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       4241 ; cbar.c   1482       }
                       4242 ; cbar.c   1483       break;
                       4244         BR      _150
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  58

ADDR   CODE            LINE SOURCELINE
001199 D50106         +4244         JMP.L   _150
                       4245 ; cbar.c   1484 
                       4246 ; cbar.c   1485     case White100:
00119C                 4248 _95:
                       4249 ; cbar.c   1486       if ( system < NTSC_US)
00119C 99440002        4251         CMP.W   R4,#02H
0011A0 FA0D            4252         BGE     _96
                       4253 ; cbar.c   1487       {
                       4254 ; cbar.c   1488         SRAMVideoLoad( dWhiteLine_625, SRAMBank1);
0011A2 91080B          4256         MOV.B   R0L,#0BH
0011A5 911810          4257         MOV.B   R0H,#010H
0011A8 C5FB68          4258         CALL    _SRAMVideoLoad
                       4259 ; cbar.c   1489 
                       4260 ; cbar.c   1490         cb_vars.CBX.newTablePtr = &PALFullFieldTable[0];
0011AB 964842rr        4262         MOV.B   ES,#SEG( _cb_vars+4 )
0011AF 9908rrrr        4263         MOV.W   R0,#SOF( _cb_vars+4 )
0011B3 9B080828        4264         MOV.W   [R0+],#SOF( _PALFullFieldTable )
0011B7 BA00            4265         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       4266 ; cbar.c   1491       }
                       4268         BR      _150
0011B9 D500F6         +4268         JMP.L   _150
0011B9 D500F6         +4268         JMP.L   _150
0011BC                 4269 _96:
                       4270 ; cbar.c   1492       else
                       4271 ; cbar.c   1493       {
                       4272 ; cbar.c   1494         SRAMVideoLoad( dWhiteLine_525, SRAMBank1);
0011BC 91080D          4274         MOV.B   R0L,#0DH
0011BF 911810          4275         MOV.B   R0H,#010H
0011C2 C5FB5B          4276         CALL    _SRAMVideoLoad
                       4277 ; cbar.c   1495 
                       4278 ; cbar.c   1496         cb_vars.CBX.newTablePtr = &NTSCFullFieldTable[0];
0011C5 964842rr        4280         MOV.B   ES,#SEG( _cb_vars+4 )
0011C9 9908rrrr        4281         MOV.W   R0,#SOF( _cb_vars+4 )
0011CD 9B08093C        4282         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
0011D1 BA00            4283         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       4284 ; cbar.c   1497       }
                       4285 ; cbar.c   1498       break;
                       4287         BR      _150
0011D3 D500E9         +4287         JMP.L   _150
                       4288 ; cbar.c   1499 
                       4289 ; cbar.c   1500     case Black:
0011D6                 4291 _97:
                       4292 ; cbar.c   1501       if ( system < NTSC_US)
0011D6 99440002        4294         CMP.W   R4,#02H
0011DA FA09            4295         BGE     _98
                       4296 ; cbar.c   1502         cb_vars.CBX.newTablePtr = &PALBlackTable[0];
0011DC 964842rr        4298         MOV.B   ES,#SEG( _cb_vars+4 )
0011E0 9908rrrr        4299         MOV.W   R0,#SOF( _cb_vars+4 )
0011E4 9B080816        4300         MOV.W   [R0+],#SOF( _PALBlackTable )
0011E8 BA00            4301         MOV.W   [R0],#SEG( _PALBlackTable )
                       4302         BR      _150
0011EA D500DE         +4302         JMP.L   _150
0011EA D500DE00       +4302         JMP.L   _150
0011EE                 4303 _98:
                       4304 ; cbar.c   1503       else
                       4305 ; cbar.c   1504         cb_vars.CBX.newTablePtr = &NTSCBlackTable[0];
0011EE 964842rr        4307         MOV.B   ES,#SEG( _cb_vars+4 )
0011F2 9908rrrr        4308         MOV.W   R0,#SOF( _cb_vars+4 )
0011F6 9B08092A        4309         MOV.W   [R0+],#SOF( _NTSCBlackTable )
0011FA BA00            4310         MOV.W   [R0],#SEG( _NTSCBlackTable )
                       4311 ; cbar.c   1505       break;
                       4313         BR      _150
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  59

ADDR   CODE            LINE SOURCELINE
0011FC D500D5         +4313         JMP.L   _150
                       4314 ; cbar.c   1506 
                       4315 ; cbar.c   1507     case CheckField:
001200                 4317 _99:
                       4318 ; cbar.c   1508       SRAMVideoLoad( dSDI_test_line1, SRAMBank1);
001200 910825          4320         MOV.B   R0L,#025H
001203 911810          4321         MOV.B   R0H,#010H
001206 C5FB39          4322         CALL    _SRAMVideoLoad
                       4323 ; cbar.c   1509       SRAMVideoLoad( dSDI_test_line2, SRAMBank2);
001209 910826          4325         MOV.B   R0L,#026H
00120C 911814          4326         MOV.B   R0H,#014H
00120F C5FB34          4327         CALL    _SRAMVideoLoad
                       4328 ; cbar.c   1510       SRAMVideoLoad( dSDI_test_line3, SRAMBank3);
001212 910827          4330         MOV.B   R0L,#027H
001215 911818          4331         MOV.B   R0H,#018H
001218 C5FB30          4332         CALL    _SRAMVideoLoad
                       4333 ; cbar.c   1511 
                       4334 ; cbar.c   1512       if ( system < NTSC_US)
00121B 99440002        4336         CMP.W   R4,#02H
00121F FA09            4337         BGE     _100
                       4338 ; cbar.c   1513         cb_vars.CBX.newTablePtr = &PALCheckfieldTable[0];
001221 964842rr        4340         MOV.B   ES,#SEG( _cb_vars+4 )
001225 9908rrrr        4341         MOV.W   R0,#SOF( _cb_vars+4 )
001229 9B080876        4342         MOV.W   [R0+],#SOF( _PALCheckfieldTable )
00122D BA00            4343         MOV.W   [R0],#SEG( _PALCheckfieldTable )
                       4344         BR      _150
00122F D500BB         +4344         JMP.L   _150
00122F D500BB         +4344         JMP.L   _150
001232                 4345 _100:
                       4346 ; cbar.c   1514       else
                       4347 ; cbar.c   1515         cb_vars.CBX.newTablePtr = &NTSCCheckfieldTable[0];
001232 964842rr        4349         MOV.B   ES,#SEG( _cb_vars+4 )
001236 9908rrrr        4350         MOV.W   R0,#SOF( _cb_vars+4 )
00123A 9B08098E        4351         MOV.W   [R0+],#SOF( _NTSCCheckfieldTable )
00123E BA00            4352         MOV.W   [R0],#SEG( _NTSCCheckfieldTable )
                       4353 ; cbar.c   1516       break;
                       4355         BR      _150
001240 D500B3         +4355         JMP.L   _150
                       4356 ; cbar.c   1517 
                       4357 ; cbar.c   1518     case DigitalGrey:
001244                 4359 _101:
                       4360 ; cbar.c   1519       if ( system < NTSC_US)
001244 99440002        4362         CMP.W   R4,#02H
001248 FA0D            4363         BGE     _102
                       4364 ; cbar.c   1520       {
                       4365 ; cbar.c   1521         SRAMVideoLoad( dDigitalGrey_625, SRAMBank1);
00124A 910823          4367         MOV.B   R0L,#023H
00124D 911810          4368         MOV.B   R0H,#010H
001250 C5FB14          4369         CALL    _SRAMVideoLoad
                       4370 ; cbar.c   1522 
                       4371 ; cbar.c   1523         cb_vars.CBX.newTablePtr = &PALFullFieldTable[0];
001253 964842rr        4373         MOV.B   ES,#SEG( _cb_vars+4 )
001257 9908rrrr        4374         MOV.W   R0,#SOF( _cb_vars+4 )
00125B 9B080828        4375         MOV.W   [R0+],#SOF( _PALFullFieldTable )
00125F BA00            4376         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       4377 ; cbar.c   1524       }
                       4379         BR      _150
001261 D500A2         +4379         JMP.L   _150
001261 D500A2         +4379         JMP.L   _150
001264                 4380 _102:
                       4381 ; cbar.c   1525       else
                       4382 ; cbar.c   1526       {
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  60

ADDR   CODE            LINE SOURCELINE
                       4383 ; cbar.c   1527         SRAMVideoLoad( dDigitalGrey_525, SRAMBank1);
001264 910824          4385         MOV.B   R0L,#024H
001267 911810          4386         MOV.B   R0H,#010H
00126A C5FB07          4387         CALL    _SRAMVideoLoad
                       4388 ; cbar.c   1528 
                       4389 ; cbar.c   1529         cb_vars.CBX.newTablePtr = &NTSCFullFieldTable[0];
00126D 964842rr        4391         MOV.B   ES,#SEG( _cb_vars+4 )
001271 9908rrrr        4392         MOV.W   R0,#SOF( _cb_vars+4 )
001275 9B08093C        4393         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
001279 BA00            4394         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       4395 ; cbar.c   1530       }
                       4396 ; cbar.c   1531       break;
                       4398         BR      _150
00127B D50095         +4398         JMP.L   _150
                       4399 ; cbar.c   1532 
                       4400 ; cbar.c   1533     case Stair5:
00127E                 4402 _103:
                       4403 ; cbar.c   1534       if ( system < NTSC_US)
00127E 99440002        4405         CMP.W   R4,#02H
001282 FA0D            4406         BGE     _104
                       4407 ; cbar.c   1535       {
                       4408 ; cbar.c   1536         SRAMVideoLoad( dGreyScale5_625, SRAMBank1);
001284 910817          4410         MOV.B   R0L,#017H
001287 911810          4411         MOV.B   R0H,#010H
00128A C5FAF7          4412         CALL    _SRAMVideoLoad
                       4413 ; cbar.c   1537 
                       4414 ; cbar.c   1538         cb_vars.CBX.newTablePtr = &PALFullFieldTable[0];
00128D 964842rr        4416         MOV.B   ES,#SEG( _cb_vars+4 )
001291 9908rrrr        4417         MOV.W   R0,#SOF( _cb_vars+4 )
001295 9B080828        4418         MOV.W   [R0+],#SOF( _PALFullFieldTable )
001299 BA00            4419         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       4420 ; cbar.c   1539       }
                       4422         BR      _150
00129B D50085         +4422         JMP.L   _150
00129B D50085         +4422         JMP.L   _150
00129E                 4423 _104:
                       4424 ; cbar.c   1540       else
                       4425 ; cbar.c   1541       {
                       4426 ; cbar.c   1542         SRAMVideoLoad( dGreyScale5_525, SRAMBank1);
00129E 910818          4428         MOV.B   R0L,#018H
0012A1 911810          4429         MOV.B   R0H,#010H
0012A4 C5FAEA          4430         CALL    _SRAMVideoLoad
                       4431 ; cbar.c   1543 
                       4432 ; cbar.c   1544         cb_vars.CBX.newTablePtr = &NTSCFullFieldTable[0];
0012A7 964842rr        4434         MOV.B   ES,#SEG( _cb_vars+4 )
0012AB 9908rrrr        4435         MOV.W   R0,#SOF( _cb_vars+4 )
0012AF 9B08093C        4436         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
0012B3 BA00            4437         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       4438 ; cbar.c   1545       }
                       4439 ; cbar.c   1546       break;
0012B5 FE79            4441         BR      _150
                       4442 ; cbar.c   1547 
                       4443 ; cbar.c   1548     case Stair10:
0012B8                 4445 _105:
                       4446 ; cbar.c   1549       if ( system < NTSC_US)
0012B8 99440002        4448         CMP.W   R4,#02H
0012BC FA0D            4449         BGE     _106
                       4450 ; cbar.c   1550       {
                       4451 ; cbar.c   1551         SRAMVideoLoad( dGreyScale10_625, SRAMBank1);
0012BE 910819          4453         MOV.B   R0L,#019H
0012C1 911810          4454         MOV.B   R0H,#010H
0012C4 C5FADA          4455         CALL    _SRAMVideoLoad
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  61

ADDR   CODE            LINE SOURCELINE
                       4456 ; cbar.c   1552 
                       4457 ; cbar.c   1553         cb_vars.CBX.newTablePtr = &PALFullFieldTable[0];
0012C7 964842rr        4459         MOV.B   ES,#SEG( _cb_vars+4 )
0012CB 9908rrrr        4460         MOV.W   R0,#SOF( _cb_vars+4 )
0012CF 9B080828        4461         MOV.W   [R0+],#SOF( _PALFullFieldTable )
0012D3 BA00            4462         MOV.W   [R0],#SEG( _PALFullFieldTable )
                       4463 ; cbar.c   1554       }
0012D5 FE69            4465         BR      _150
0012D5 FE6900          4465         BR      _150
0012D8                 4466 _106:
                       4467 ; cbar.c   1555       else
                       4468 ; cbar.c   1556       {
                       4469 ; cbar.c   1557         SRAMVideoLoad( dGreyScale10_525, SRAMBank1);
0012D8 91081A          4471         MOV.B   R0L,#01AH
0012DB 911810          4472         MOV.B   R0H,#010H
0012DE C5FACD          4473         CALL    _SRAMVideoLoad
                       4474 ; cbar.c   1558 
                       4475 ; cbar.c   1559         cb_vars.CBX.newTablePtr = &NTSCFullFieldTable[0];
0012E1 964842rr        4477         MOV.B   ES,#SEG( _cb_vars+4 )
0012E5 9908rrrr        4478         MOV.W   R0,#SOF( _cb_vars+4 )
0012E9 9B08093C        4479         MOV.W   [R0+],#SOF( _NTSCFullFieldTable )
0012ED BA00            4480         MOV.W   [R0],#SEG( _NTSCFullFieldTable )
                       4481 ; cbar.c   1560       }
                       4482 ; cbar.c   1561       break;
0012EF FE5C            4484         BR      _150
                       4485 ; cbar.c   1562 
                       4486 ; cbar.c   1563     case Crosshatch:
0012F2                 4488 _107:
                       4489 ; cbar.c   1564       if ( system < NTSC_US)
0012F2 99440002        4491         CMP.W   R4,#02H
0012F6 FA11            4492         BGE     _108
                       4493 ; cbar.c   1565       {
                       4494 ; cbar.c   1566         SRAMVideoLoad( dCrossHatch19_625, SRAMBank1);
0012F8 91080C          4496         MOV.B   R0L,#0CH
0012FB 911810          4497         MOV.B   R0H,#010H
0012FE C5FABD          4498         CALL    _SRAMVideoLoad
                       4499 ; cbar.c   1567         SRAMVideoLoad( dWhiteLine_625, SRAMBank2);
001301 91080B          4501         MOV.B   R0L,#0BH
001304 911814          4502         MOV.B   R0H,#014H
001307 C5FAB8          4503         CALL    _SRAMVideoLoad
                       4504 ; cbar.c   1568 
                       4505 ; cbar.c   1569         cb_vars.CBX.newTablePtr = &PALCrosshatchTable[0];
00130A 964842rr        4507         MOV.B   ES,#SEG( _cb_vars+4 )
00130E 9908rrrr        4508         MOV.W   R0,#SOF( _cb_vars+4 )
001312 9B08088A        4509         MOV.W   [R0+],#SOF( _PALCrosshatchTable )
001316 BA00            4510         MOV.W   [R0],#SEG( _PALCrosshatchTable )
                       4511 ; cbar.c   1570       }
001318 FE47            4513         BR      _150
001318 FE47            4513         BR      _150
00131A                 4514 _108:
                       4515 ; cbar.c   1571       else
                       4516 ; cbar.c   1572       {
                       4517 ; cbar.c   1573         SRAMVideoLoad( dCrossHatch17_525, SRAMBank1);
00131A 91080E          4519         MOV.B   R0L,#0EH
00131D 911810          4520         MOV.B   R0H,#010H
001320 C5FAAC          4521         CALL    _SRAMVideoLoad
                       4522 ; cbar.c   1574         SRAMVideoLoad( dWhiteLine_525, SRAMBank2);
001323 91080D          4524         MOV.B   R0L,#0DH
001326 911814          4525         MOV.B   R0H,#014H
001329 C5FAA7          4526         CALL    _SRAMVideoLoad
                       4527 ; cbar.c   1575 
                       4528 ; cbar.c   1576         cb_vars.CBX.newTablePtr = &NTSCCrosshatchTable[0];
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  62

ADDR   CODE            LINE SOURCELINE
00132C 964842rr        4530         MOV.B   ES,#SEG( _cb_vars+4 )
001330 9908rrrr        4531         MOV.W   R0,#SOF( _cb_vars+4 )
001334 9B0809A2        4532         MOV.W   [R0+],#SOF( _NTSCCrosshatchTable )
001338 BA00            4533         MOV.W   [R0],#SEG( _NTSCCrosshatchTable )
                       4534 ; cbar.c   1577       }
                       4535 ; cbar.c   1578       break;
00133A FE36            4537         BR      _150
                       4538 ; cbar.c   1579 
                       4539 ; cbar.c   1580     case PLUGE:
00133C                 4541 _109:
                       4542 ; cbar.c   1581       if ( system < NTSC_US)
00133C 99440002        4544         CMP.W   R4,#02H
001340 FA1A            4545         BGE     _110
                       4546 ; cbar.c   1582       {
                       4547 ; cbar.c   1583         SRAMVideoLoad( dPlugeWhite_625, SRAMBank1);
001342 91080F          4549         MOV.B   R0L,#0FH
001345 911810          4550         MOV.B   R0H,#010H
001348 C5FA98          4551         CALL    _SRAMVideoLoad
                       4552 ; cbar.c   1584         SRAMVideoLoad( dPlugeGreyC_625, SRAMBank2);
00134B 911814          4554         MOV.B   R0H,#014H
00134E 910810          4555         MOV.B   R0L,#010H
001351 C5FA93          4556         CALL    _SRAMVideoLoad
                       4557 ; cbar.c   1585         SRAMVideoLoad( dPlugeGreyD_625, SRAMBank3);
001354 910811          4559         MOV.B   R0L,#011H
001357 911818          4560         MOV.B   R0H,#018H
00135A C5FA8F          4561         CALL    _SRAMVideoLoad
                       4562 ; cbar.c   1586         SRAMVideoLoad( dPlugeGreyE_625, SRAMBank4);
00135D 910812          4564         MOV.B   R0L,#012H
001360 91181C          4565         MOV.B   R0H,#01CH
001363 C5FA8A          4566         CALL    _SRAMVideoLoad
                       4567 ; cbar.c   1587 
                       4568 ; cbar.c   1588         cb_vars.CBX.newTablePtr = &PALPLUGETable[0];
001366 964842rr        4570         MOV.B   ES,#SEG( _cb_vars+4 )
00136A 9908rrrr        4571         MOV.W   R0,#SOF( _cb_vars+4 )
00136E 9B080908        4572         MOV.W   [R0+],#SOF( _PALPLUGETable )
001372 BA00            4573         MOV.W   [R0],#SEG( _PALPLUGETable )
                       4574 ; cbar.c   1589       }
001374 FE19            4576         BR      _150
001374 FE19            4576         BR      _150
001376                 4577 _110:
                       4578 ; cbar.c   1590       else
                       4579 ; cbar.c   1591       {
                       4580 ; cbar.c   1592         SRAMVideoLoad( dPlugeWhite_525, SRAMBank1);
001376 910813          4582         MOV.B   R0L,#013H
001379 911810          4583         MOV.B   R0H,#010H
00137C C5FA7E          4584         CALL    _SRAMVideoLoad
                       4585 ; cbar.c   1593         SRAMVideoLoad( dPlugeGreyC_525, SRAMBank2);
00137F 911814          4587         MOV.B   R0H,#014H
001382 8101            4588         MOV.B   R0L,R0H
001384 C5FA7A          4589         CALL    _SRAMVideoLoad
                       4590 ; cbar.c   1594         SRAMVideoLoad( dPlugeGreyD_525, SRAMBank3);
001387 910815          4592         MOV.B   R0L,#015H
00138A 911818          4593         MOV.B   R0H,#018H
00138D C5FA75          4594         CALL    _SRAMVideoLoad
                       4595 ; cbar.c   1595         SRAMVideoLoad( dPlugeGreyE_525, SRAMBank4);
001390 910816          4597         MOV.B   R0L,#016H
001393 91181C          4598         MOV.B   R0H,#01CH
001396 C5FA71          4599         CALL    _SRAMVideoLoad
                       4600 ; cbar.c   1596 
                       4601 ; cbar.c   1597         cb_vars.CBX.newTablePtr = &NTSCPLUGETable[0];
001399 964842rr        4603         MOV.B   ES,#SEG( _cb_vars+4 )
00139D 9908rrrr        4604         MOV.W   R0,#SOF( _cb_vars+4 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  63

ADDR   CODE            LINE SOURCELINE
0013A1 9B080A20        4605         MOV.W   [R0+],#SOF( _NTSCPLUGETable )
0013A5 BA00            4606         MOV.W   [R0],#SEG( _NTSCPLUGETable )
                       4607 ; cbar.c   1598       }
                       4608 ; cbar.c   1599       break;
                       4609 ; cbar.c   1600   }
0013A8                 4611 _150:
                       4612 ; cbar.c   1601 
                       4613 ; cbar.c   1602   test_vars.CBX.NewPattern = TRUE;
0013A8 964842rr        4615         MOV.B   ES,#SEG( _test_vars+18 )
0013AC 9908rrrr        4616         MOV.W   R0,#SOF( _test_vars+18 )
0013B0 9208FF          4617         MOV.B   [R0],#0FFH
                       4618 ; cbar.c   1603   cb_vars.CBX.NewPattern = TRUE;
0013B3 964842rr        4620         MOV.B   ES,#SEG( _cb_vars+18 )
0013B7 9908rrrr        4621         MOV.W   R0,#SOF( _cb_vars+18 )
0013BB 9208FF          4622         MOV.B   [R0],#0FFH
                       4623 ; cbar.c   1604 
                       4624 ; cbar.c   1605   return( OK);
0013BE 9908FFFF        4626         MOV.W   R0,#0FFFFH
                       4627 ; cbar.c   1606 }
0013C2                 4629 _151:
0013C2 A972            4630         ADDS.W  R7,#02H
0013C4 2F10            4632         POP.W   R4
0013C6 D680            4634         RET
                       4636 ; cbar.c   1607 
                       4637 ; cbar.c   1608 /**************************************************************************/
                       4638 ; cbar.c   1609 /* SetCBSystem                                     CBAR.C  */
                       4639 ; cbar.c   1610 /*                                                  */
                       4640 ; cbar.c   1611 /* Author:   Kim Engedahl, DEV, 000331                          */
                       4641 ; cbar.c   1612 /* Revised:   000705, KEn, DEV                                 */
                       4642 ; cbar.c   1613 /*                                                  */
                       4643 ; cbar.c   1614 /* Function:                                           */
                       4644 ; cbar.c   1615 /* Remarks:                                            */
                       4645 ; cbar.c   1616 /* Returns:                                            */
                       4646 ; cbar.c   1617 /* Updates:                                              */
                       4647 ; cbar.c   1618 /**************************************************************************/
                       4648 ; cbar.c   1619 int SetCBSystem( UC system)
                       4649 ; cbar.c   1620 {
                       4650         ALIGN   1
                       4652         PUBLIC  _SetCBSystem
0013C8                 4653 _SetCBSystem:
0013C8 0F10            4657         PUSH.W  R4
                       4661 ; cbar.c   1621   Settings.ActivePreset = 0;
0013CA 964842rr        4663         MOV.B   ES,#SEG( _Settings )
0013CE 9918rrrr        4664         MOV.W   R1,#SOF( _Settings )
0013D2 BA10            4665         MOV.W   [R1],#00H
                       4666 ; cbar.c   1622 
                       4667 ; cbar.c   1623   Settings.CBSetup.System = CBSetup.System = system;
0013D4 8180            4669         MOV.B   R4L,R0L
0013D6 964842rr        4670         MOV.B   ES,#SEG( _CBSetup )
0013DA 9908rrrr        4671         MOV.W   R0,#SOF( _CBSetup )
0013DE 8288            4672         MOV.B   [R0],R4L
0013E0 964842rr        4675         MOV.B   ES,#SEG( _Settings+32 )
0013E4 9908rrrr        4676         MOV.W   R0,#SOF( _Settings+32 )
0013E8 8288            4677         MOV.B   [R0],R4L
                       4678 ; cbar.c   1624   NV_Store( &Settings, SettingsPtr, sizeof( Settings));
0013EA 9918rrrr        4680         MOV.W   R1,#SEG( _Settings )
0013EE 9908rrrr        4681         MOV.W   R0,#SOF( _Settings )
0013F2 964842rr        4682         MOV.B   ES,#SEG( _SettingsPtr )
0013F6 9928rrrr        4683         MOV.W   R2,#SOF( _SettingsPtr )
0013FA 8A22            4684         MOV.W   R2,[R2]
0013FC 9938004A        4685         MOV.W   R3,#04AH
                       4686         CALL    _NV_Store
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  64

ADDR   CODE            LINE SOURCELINE
001400 C4rrrrrr       +4686 ;       FCALL   _NV_Store
                       4687 ; cbar.c   1625 
                       4688 ; cbar.c   1626   if ( system < NTSC_US)
001404 918402          4690         CMP.B   R4L,#02H
001407 F02C            4691         BCC     _170
                       4692 ; cbar.c   1627   {
                       4693 ; cbar.c   1628     test_vars.CBX.Status &= ~SYSSEL;
001409 964842rr        4695         MOV.B   ES,#SEG( _test_vars+20 )
00140D 9908rrrr        4696         MOV.W   R0,#SOF( _test_vars+20 )
001411 8A00            4697         MOV.W   R0,[R0]
001413 9905FFBF        4698         AND.W   R0,#0FFBFH
001417 964842rr        4699         MOV.B   ES,#SEG( _test_vars+20 )
00141B 9918rrrr        4700         MOV.W   R1,#SOF( _test_vars+20 )
00141F 8A09            4701         MOV.W   [R1],R0
                       4702 ; cbar.c   1629     cb_vars.CBX.Status &= ~SYSSEL;
001421 964842rr        4704         MOV.B   ES,#SEG( _cb_vars+20 )
001425 9908rrrr        4705         MOV.W   R0,#SOF( _cb_vars+20 )
001429 8A00            4706         MOV.W   R0,[R0]
00142B 9905FFBF        4707         AND.W   R0,#0FFBFH
00142F 964842rr        4708         MOV.B   ES,#SEG( _cb_vars+20 )
001433 9918rrrr        4709         MOV.W   R1,#SOF( _cb_vars+20 )
001437 8A09            4710         MOV.W   [R1],R0
                       4711 ; cbar.c   1630 #ifdef CLASSIC    
                       4712 ; cbar.c   1631   StatusPort = cb_vars.CBX.Status;
001439 96484206        4714         MOV.B   ES,#SEG( _StatusPort )
00143D 9918A000        4715         MOV.W   R1,#SOF( _StatusPort )
001441 8A09            4716         MOV.W   [R1],R0
                       4717 ; cbar.c   1632 #else  
                       4718 ; cbar.c   1633   StatusPort = test_vars.CBX.Status;
                       4719 ; cbar.c   1634 #endif
                       4720 ; cbar.c   1635 
                       4721 ; cbar.c   1636     WriteCBGain( Calibration.CBCalibration.GainG);
001443 964842rr        4723         MOV.B   ES,#SEG( _Calibration+215 )
001447 9908rrrr        4724         MOV.W   R0,#SOF( _Calibration+215 )
00144B 8200            4725         MOV.B   R0L,[R0]
00144D C5F9EB          4726         CALL    _WriteCBGain
                       4727 ; cbar.c   1637     WriteCBChromaGain( Calibration.CBCalibration.ChromaGainG);
001450 964842rr        4729         MOV.B   ES,#SEG( _Calibration+216 )
001454 9908rrrr        4730         MOV.W   R0,#SOF( _Calibration+216 )
001458 8200            4731         MOV.B   R0L,[R0]
00145A C5F9F0          4732         CALL    _WriteCBChromaGain
                       4733 ; cbar.c   1638   }
00145D FE2B            4735         BR      _171
00145D FE2B00          4735         BR      _171
001460                 4736 _170:
                       4737 ; cbar.c   1639   else
                       4738 ; cbar.c   1640   {
                       4739 ; cbar.c   1641     test_vars.CBX.Status |= SYSSEL;
001460 964842rr        4741         MOV.B   ES,#SEG( _test_vars+20 )
001464 9908rrrr        4742         MOV.W   R0,#SOF( _test_vars+20 )
001468 8A00            4743         MOV.W   R0,[R0]
00146A 99060040        4744         OR.W    R0,#040H
00146E 964842rr        4745         MOV.B   ES,#SEG( _test_vars+20 )
001472 9918rrrr        4746         MOV.W   R1,#SOF( _test_vars+20 )
001476 8A09            4747         MOV.W   [R1],R0
                       4748 ; cbar.c   1642     cb_vars.CBX.Status |= SYSSEL;
001478 964842rr        4750         MOV.B   ES,#SEG( _cb_vars+20 )
00147C 9908rrrr        4751         MOV.W   R0,#SOF( _cb_vars+20 )
001480 8A00            4752         MOV.W   R0,[R0]
001482 99060040        4753         OR.W    R0,#040H
001486 964842rr        4754         MOV.B   ES,#SEG( _cb_vars+20 )
00148A 9918rrrr        4755         MOV.W   R1,#SOF( _cb_vars+20 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  65

ADDR   CODE            LINE SOURCELINE
00148E 8A09            4756         MOV.W   [R1],R0
                       4757 ; cbar.c   1643 #ifdef CLASSIC    
                       4758 ; cbar.c   1644   StatusPort = cb_vars.CBX.Status;
001490 96484206        4760         MOV.B   ES,#SEG( _StatusPort )
001494 9918A000        4761         MOV.W   R1,#SOF( _StatusPort )
001498 8A09            4762         MOV.W   [R1],R0
                       4763 ; cbar.c   1645 #else  
                       4764 ; cbar.c   1646   StatusPort = test_vars.CBX.Status;
                       4765 ; cbar.c   1647 #endif
                       4766 ; cbar.c   1648 
                       4767 ; cbar.c   1649     WriteCBGain( Calibration.CBCalibration.GainM);
00149A 964842rr        4769         MOV.B   ES,#SEG( _Calibration+217 )
00149E 9908rrrr        4770         MOV.W   R0,#SOF( _Calibration+217 )
0014A2 8200            4771         MOV.B   R0L,[R0]
0014A4 C5F9C0          4772         CALL    _WriteCBGain
                       4773 ; cbar.c   1650     WriteCBChromaGain( Calibration.CBCalibration.ChromaGainM);
0014A7 964842rr        4775         MOV.B   ES,#SEG( _Calibration+218 )
0014AB 9908rrrr        4776         MOV.W   R0,#SOF( _Calibration+218 )
0014AF 8200            4777         MOV.B   R0L,[R0]
0014B1 C5F9C4          4778         CALL    _WriteCBChromaGain
                       4779 ; cbar.c   1651   }
0014B4                 4781 _171:
                       4782 ; cbar.c   1652 
                       4783 ; cbar.c   1653 
                       4784 ; cbar.c   1654   tvp6k_system( system);  // Initialise the composite output
0014B4 8108            4786         MOV.B   R0L,R4L
0014B6 B110            4787         MOVS.B  R0H,#00H
                       4788         CALL    _tvp6k_system
0014B8 C4rrrrrr       +4788 ;       FCALL   _tvp6k_system
                       4789 ; cbar.c   1655 
                       4790 ; cbar.c   1656                           // Validate pattern and change if invalid in new system
                                                                
                       4791 ; cbar.c   1657   ValidateCBPattern( system , &CBSetup.Pattern);
0014BC 9938rrrr        4793         MOV.W   R3,#SEG( _CBSetup+2 )
0014C0 9928rrrr        4794         MOV.W   R2,#SOF( _CBSetup+2 )
0014C4 8108            4795         MOV.B   R0L,R4L
0014C6 C501DE          4798         CALL    _ValidateCBPattern
                       4801 ; cbar.c   1658 
                       4802 ; cbar.c   1659                           // This one initialises TablePtr;
                       4803 ; cbar.c   1660   SetCBPattern( CBSetup.Pattern);
0014C9 964842rr        4805         MOV.B   ES,#SEG( _CBSetup+2 )
0014CD 9908rrrr        4806         MOV.W   R0,#SOF( _CBSetup+2 )
0014D1 8A00            4807         MOV.W   R0,[R0]
0014D3 C5FC3F          4808         CALL    _SetCBPattern
                       4809 ; cbar.c   1661 
                       4810 ; cbar.c   1662   SetCBScHPhase( CBSetup.ScHPhase);
0014D6 964842rr        4812         MOV.B   ES,#SEG( _CBSetup+8 )
0014DA 9908rrrr        4813         MOV.W   R0,#SOF( _CBSetup+8 )
0014DE 8A00            4814         MOV.W   R0,[R0]
0014E0 C50105          4815         CALL    _SetCBScHPhase
                       4816 ; cbar.c   1663 
                       4817 ; cbar.c   1664   LEDSet( CBPALLED, system < NTSC_US);
0014E3 99080040        4819         MOV.W   R0,#040H
0014E7 918402          4820         CMP.B   R4L,#02H
0014EA F002            4821         BCC     _173
0014EC B911            4822         MOVS.W  R1,#01H
0014EE FE01            4823         BR      _175
0014EE FE01            4823         BR      _175
0014F0                 4824 _173:
0014F0 B910            4825         MOVS.W  R1,#00H
0014F0 B910            4825         MOVS.W  R1,#00H
0014F2                 4826 _175:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  66

ADDR   CODE            LINE SOURCELINE
                       4827         CALL    _LEDSet
0014F2 C4rrrrrr       +4827 ;       FCALL   _LEDSet
                       4828 ; cbar.c   1665   LEDSet( CBNTSCLED, system >= NTSC_US);
0014F6 99080080        4830         MOV.W   R0,#080H
0014FA 918402          4831         CMP.B   R4L,#02H
0014FD F103            4832         BCS     _176
0014FF B911            4833         MOVS.W  R1,#01H
001501 FE02            4834         BR      _178
001501 FE0200          4834         BR      _178
001504                 4835 _176:
001504 B910            4836         MOVS.W  R1,#00H
001504 B910            4836         MOVS.W  R1,#00H
001506                 4837 _178:
                       4838         CALL    _LEDSet
001506 C4rrrrrr       +4838 ;       FCALL   _LEDSet
                       4839 ; cbar.c   1666 
                       4840 ; cbar.c   1667   return( OK);
00150A 9908FFFF        4842         MOV.W   R0,#0FFFFH
                       4843 ; cbar.c   1668 }
00150E 2F10            4845         POP.W   R4
001510 D680            4847         RET
                       4850 ; cbar.c   1669 
                       4851 ; cbar.c   1670 /**************************************************************************/
                       4852 ; cbar.c   1671 /* SetCBDelay                                                       CBAR.C  */
                       4853 ; cbar.c   1672 /*                                                                        */
                       4854 ; cbar.c   1673 /* Author:   Kim Engedahl, DEV, 000331                                    */
                       4855 ; cbar.c   1674 /* Revised:   001009, KEn, DEV                                             */
                       4856 ; cbar.c   1675 /*                                                                        */
                       4857 ; cbar.c   1676 /* Function:                                                               */
                       4858 ; cbar.c   1677 /* Remarks:   CB Delay resolution is 37ns                                  */
                       4859 ; cbar.c   1678 /* Returns:                                                                */
                       4860 ; cbar.c   1679 /* Updates:                                                                */
                       4861 ; cbar.c   1680 /**************************************************************************/
                       4862 ; cbar.c   1681 int SetCBDelay( UL delay)
                       4863 ; cbar.c   1682   {
                       4864         ALIGN   1
                       4866         PUBLIC  _SetCBDelay
001512                 4867 _SetCBDelay:
001512 0F30            4871         PUSH.W  R4, R5
                       4877 ; cbar.c   1683   UL tmpOffset;
                       4878 ; cbar.c   1684 
                       4879 ; cbar.c   1685   Settings.ActivePreset = 0;
001514 964842rr        4881         MOV.B   ES,#SEG( _Settings )
001518 9928rrrr        4882         MOV.W   R2,#SOF( _Settings )
00151C BA20            4883         MOV.W   [R2],#00H
                       4884 ; cbar.c   1686 
                       4885 ; cbar.c   1687   Settings.CBSetup.Delay = CBSetup.Delay = delay;
00151E 8951            4887         MOV.W   R5,R1
001520 8940            4888         MOV.W   R4,R0
001522 964842rr        4889         MOV.B   ES,#SEG( _CBSetup+4 )
001526 9908rrrr        4890         MOV.W   R0,#SOF( _CBSetup+4 )
00152A 8B48            4891         MOV.W   [R0+],R4
00152C 8A58            4892         MOV.W   [R0],R5
00152E 964842rr        4895         MOV.B   ES,#SEG( _Settings+36 )
001532 9908rrrr        4896         MOV.W   R0,#SOF( _Settings+36 )
001536 8B48            4897         MOV.W   [R0+],R4
001538 8A58            4898         MOV.W   [R0],R5
                       4899 ; cbar.c   1688   NV_Store( &Settings, SettingsPtr, sizeof( Settings));
00153A 9918rrrr        4901         MOV.W   R1,#SEG( _Settings )
00153E 9908rrrr        4902         MOV.W   R0,#SOF( _Settings )
001542 964842rr        4903         MOV.B   ES,#SEG( _SettingsPtr )
001546 9928rrrr        4904         MOV.W   R2,#SOF( _SettingsPtr )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  67

ADDR   CODE            LINE SOURCELINE
00154A 8A22            4905         MOV.W   R2,[R2]
00154C 9938004A        4906         MOV.W   R3,#04AH
                       4907         CALL    _NV_Store
001550 C4rrrrrr       +4907 ;       FCALL   _NV_Store
                       4908 ; cbar.c   1689 
                       4909 ; cbar.c   1690   // Divide GenlockSetup.Delay with 256 as the resulotion is 27ns/256 whereas the
                            
                       4910 ; cbar.c   1691   //  resolution of the TSG is 37ns.
                       4911 ; cbar.c   1692   tmpOffset = delay + GenlockSetup.Delay/256;
001554 964842rr        4913         MOV.B   ES,#SEG( _GenlockSetup+2 )
001558 9918rrrr        4914         MOV.W   R1,#SOF( _GenlockSetup+2 )
00155C 8B01            4915         MOV.W   R0,[R1+]
00155E 8A11            4916         MOV.W   R1,[R1]
001560 DC08            4917         LSR.D   R0,#08H
001562 0940            4918         ADD.W   R4,R0
001564 1951            4919         ADDC.W  R5,R1
001566 8935            4921         MOV.W   R3,R5
001568 8924            4922         MOV.W   R2,R4
                       4924 ; cbar.c   1693 
                       4925 ; cbar.c   1694   if ( CBSetup.System < NTSC_US)
00156A 964842rr        4927         MOV.B   ES,#SEG( _CBSetup )
00156E 9908rrrr        4928         MOV.W   R0,#SOF( _CBSetup )
001572 8200            4929         MOV.B   R0L,[R0]
001574 910402          4930         CMP.B   R0L,#02H
001577 F02C            4931         BCC     _179
                       4932 ; cbar.c   1695     {
                       4933 ; cbar.c   1696     tmpOffset += Calibration.CBCalibration.PhaseG;
001579 964842rr        4935         MOV.B   ES,#SEG( _Calibration+204 )
00157D 9938rrrr        4936         MOV.W   R3,#SOF( _Calibration+204 )
001581 8B23            4937         MOV.W   R2,[R3+]
001583 8A33            4938         MOV.W   R3,[R3]
001585 0942            4940         ADD.W   R4,R2
001587 1953            4941         ADDC.W  R5,R3
001589 8915            4942         MOV.W   R1,R5
00158B 8904            4943         MOV.W   R0,R4
                       4945 ; cbar.c   1697 
                       4946 ; cbar.c   1698     tmpOffset %= 4320000L;            // 4*625*1728
00158D 99380041        4948         MOV.W   R3,#041H
001591 9928EB00        4949         MOV.W   R2,#0EB00H
001595 C4rrrrrr        4950         FCALL   __UMODL
                       4953 ; cbar.c   1699 
                       4954 ; cbar.c   1700     LineOffset = 0xFFFF - ( tmpOffset / 1728L);        
001599 B930            4956         MOV.W   R3,#00H
00159B 992806C0        4957         MOV.W   R2,#06C0H
00159F 8951            4958         MOV.W   R5,R1
0015A1 8940            4959         MOV.W   R4,R0
0015A3 C4rrrrrr        4960         FCALL   __UDIVL
0015A7 9918FFFF        4963         MOV.W   R1,#0FFFFH
0015AB 2910            4964         SUB.W   R1,R0
0015AD 8E1rrr          4965         MOV.W   _LineOffset,R1
                       4966 ; cbar.c   1701     PhaseOffset = 1727 - ( tmpOffset % 1728L);
0015B0 8915            4968         MOV.W   R1,R5
0015B2 8904            4969         MOV.W   R0,R4
0015B4 B930            4970         MOV.W   R3,#00H
0015B6 992806C0        4971         MOV.W   R2,#06C0H
0015BA C4rrrrrr        4972         FCALL   __UMODL
0015BE 991806BF        4976         MOV.W   R1,#06BFH
0015C2 2910            4977         SUB.W   R1,R0
0015C4 964842rr        4978         MOV.B   ES,#SEG( _PhaseOffset )
0015C8 9908rrrr        4979         MOV.W   R0,#SOF( _PhaseOffset )
0015CC 8A18            4980         MOV.W   [R0],R1
                       4981 ; cbar.c   1702     }
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  68

ADDR   CODE            LINE SOURCELINE
0015CE FE3D            4983         BR      _181
0015CE FE3D            4983         BR      _181
0015D0                 4984 _179:
                       4986 ; cbar.c   1703   else 
                       4987 ; cbar.c   1704     {
                       4988 ; cbar.c   1705     tmpOffset += Calibration.CBCalibration.PhaseM;
0015D0 964842rr        4990         MOV.B   ES,#SEG( _Calibration+210 )
0015D4 9918rrrr        4991         MOV.W   R1,#SOF( _Calibration+210 )
0015D8 8B01            4992         MOV.W   R0,[R1+]
0015DA 8A11            4993         MOV.W   R1,[R1]
0015DC 0902            4994         ADD.W   R0,R2
0015DE 1913            4995         ADDC.W  R1,R3
                       4998 ; cbar.c   1706 
                       4999 ; cbar.c   1707     tmpOffset %= 1801800L;            // 2*525*1716
0015E0 9938001B        5001         MOV.W   R3,#01BH
0015E4 99287E48        5002         MOV.W   R2,#07E48H
0015E8 C4rrrrrr        5003         FCALL   __UMODL
                       5006 ; cbar.c   1708 
                       5007 ; cbar.c   1709     LineOffset = 0xFFFF - ( tmpOffset / 1716L);        
0015EC B930            5009         MOV.W   R3,#00H
0015EE 992806B4        5010         MOV.W   R2,#06B4H
0015F2 8951            5011         MOV.W   R5,R1
0015F4 8940            5012         MOV.W   R4,R0
0015F6 C4rrrrrr        5013         FCALL   __UDIVL
0015FA 9918FFFF        5016         MOV.W   R1,#0FFFFH
0015FE 2910            5017         SUB.W   R1,R0
001600 8E1rrr          5018         MOV.W   _LineOffset,R1
                       5019 ; cbar.c   1710     PhaseOffset = 1715 - ( tmpOffset % 1716L);
001603 B930            5021         MOV.W   R3,#00H
001605 992806B4        5022         MOV.W   R2,#06B4H
001609 8915            5023         MOV.W   R1,R5
00160B 8904            5024         MOV.W   R0,R4
00160D C4rrrrrr        5025         FCALL   __UMODL
001611 991806B3        5029         MOV.W   R1,#06B3H
001615 2910            5030         SUB.W   R1,R0
001617 964842rr        5031         MOV.B   ES,#SEG( _PhaseOffset )
00161B 9908rrrr        5032         MOV.W   R0,#SOF( _PhaseOffset )
00161F 8A18            5033         MOV.W   [R0],R1
                       5034 ; cbar.c   1711 
                       5035 ; cbar.c   1712     if ( PhaseOffset > 1687)
001621 964842rr        5037         MOV.B   ES,#SEG( _PhaseOffset )
001625 9908rrrr        5038         MOV.W   R0,#SOF( _PhaseOffset )
001629 8A00            5039         MOV.W   R0,[R0]
00162B 99040697        5040         CMP.W   R0,#0697H
00162F FD0D            5041         BLE     _181
                       5042 ; cbar.c   1713       PhaseOffset += 12;
001631 964842rr        5044         MOV.B   ES,#SEG( _PhaseOffset )
001635 9908rrrr        5045         MOV.W   R0,#SOF( _PhaseOffset )
001639 8A00            5046         MOV.W   R0,[R0]
00163B 9900000C        5047         ADD.W   R0,#0CH
00163F 964842rr        5048         MOV.B   ES,#SEG( _PhaseOffset )
001643 9918rrrr        5049         MOV.W   R1,#SOF( _PhaseOffset )
001647 8A09            5050         MOV.W   [R1],R0
                       5051 ; cbar.c   1714     }
00164A                 5053 _181:
                       5054 ; cbar.c   1715 
                       5055 ; cbar.c   1716   if ( PhaseOffset >= 1443)
00164A 964842rr        5057         MOV.B   ES,#SEG( _PhaseOffset )
00164E 9908rrrr        5058         MOV.W   R0,#SOF( _PhaseOffset )
001652 8A00            5059         MOV.W   R0,[R0]
001654 990405A3        5060         CMP.W   R0,#05A3H
001658 FB19            5061         BLT     _182
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  69

ADDR   CODE            LINE SOURCELINE
                       5062 ; cbar.c   1717     {
                       5063 ; cbar.c   1718     test_vars.CBX.Status |= PHASEREGSEL;        // Set Phase Register Select
00165A 964842rr        5065         MOV.B   ES,#SEG( _test_vars+20 )
00165E 9908rrrr        5066         MOV.W   R0,#SOF( _test_vars+20 )
001662 8A00            5067         MOV.W   R0,[R0]
001664 99064000        5068         OR.W    R0,#04000H
001668 964842rr        5069         MOV.B   ES,#SEG( _test_vars+20 )
00166C 9918rrrr        5070         MOV.W   R1,#SOF( _test_vars+20 )
001670 8A09            5071         MOV.W   [R1],R0
                       5072 ; cbar.c   1719     cb_vars.CBX.Status |= PHASEREGSEL;        // Set Phase Register Select
001672 964842rr        5074         MOV.B   ES,#SEG( _cb_vars+20 )
001676 9908rrrr        5075         MOV.W   R0,#SOF( _cb_vars+20 )
00167A 8A00            5076         MOV.W   R0,[R0]
00167C 99064000        5077         OR.W    R0,#04000H
001680 964842rr        5078         MOV.B   ES,#SEG( _cb_vars+20 )
001684 9918rrrr        5079         MOV.W   R1,#SOF( _cb_vars+20 )
001688 8A09            5080         MOV.W   [R1],R0
                       5081 ; cbar.c   1720     }
00168A FE18            5083         BR      _183
00168A FE18            5083         BR      _183
00168C                 5084 _182:
                       5085 ; cbar.c   1721   else   
                       5086 ; cbar.c   1722     { 
                       5087 ; cbar.c   1723     test_vars.CBX.Status &= ~PHASEREGSEL;        // Clear Phase Register Select
00168C 964842rr        5089         MOV.B   ES,#SEG( _test_vars+20 )
001690 9908rrrr        5090         MOV.W   R0,#SOF( _test_vars+20 )
001694 8A00            5091         MOV.W   R0,[R0]
001696 9905BFFF        5092         AND.W   R0,#0BFFFH
00169A 964842rr        5093         MOV.B   ES,#SEG( _test_vars+20 )
00169E 9918rrrr        5094         MOV.W   R1,#SOF( _test_vars+20 )
0016A2 8A09            5095         MOV.W   [R1],R0
                       5096 ; cbar.c   1724     cb_vars.CBX.Status &= ~PHASEREGSEL;        // Clear Phase Register Select
0016A4 964842rr        5098         MOV.B   ES,#SEG( _cb_vars+20 )
0016A8 9908rrrr        5099         MOV.W   R0,#SOF( _cb_vars+20 )
0016AC 8A00            5100         MOV.W   R0,[R0]
0016AE 9905BFFF        5101         AND.W   R0,#0BFFFH
0016B2 964842rr        5102         MOV.B   ES,#SEG( _cb_vars+20 )
0016B6 9918rrrr        5103         MOV.W   R1,#SOF( _cb_vars+20 )
0016BA 8A09            5104         MOV.W   [R1],R0
                       5105 ; cbar.c   1725     }
0016BC                 5107 _183:
                       5108 ; cbar.c   1726 #ifdef CLASSIC    
                       5109 ; cbar.c   1727   StatusPort = cb_vars.CBX.Status;
0016BC 964842rr        5111         MOV.B   ES,#SEG( _cb_vars+20 )
0016C0 9908rrrr        5112         MOV.W   R0,#SOF( _cb_vars+20 )
0016C4 8A00            5113         MOV.W   R0,[R0]
0016C6 96484206        5114         MOV.B   ES,#SEG( _StatusPort )
0016CA 9918A000        5115         MOV.W   R1,#SOF( _StatusPort )
0016CE 8A09            5116         MOV.W   [R1],R0
                       5117 ; cbar.c   1728 #else  
                       5118 ; cbar.c   1729   StatusPort = test_vars.CBX.Status;
                       5119 ; cbar.c   1730 #endif
                       5120 ; cbar.c   1731   HOffsetPort = PhaseOffset;
0016D0 964842rr        5122         MOV.B   ES,#SEG( _PhaseOffset )
0016D4 9908rrrr        5123         MOV.W   R0,#SOF( _PhaseOffset )
0016D8 8A00            5124         MOV.W   R0,[R0]
0016DA 96484206        5125         MOV.B   ES,#SEG( _HOffsetPort )
0016DE 9918A004        5126         MOV.W   R1,#SOF( _HOffsetPort )
0016E2 8A09            5127         MOV.W   [R1],R0
                       5128 ; cbar.c   1732 
                       5129 ; cbar.c   1733   return( OK);
0016E4 9908FFFF        5131         MOV.W   R0,#0FFFFH
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  70

ADDR   CODE            LINE SOURCELINE
                       5132 ; cbar.c   1734 }
0016E8 2F30            5134         POP.W   R4, R5
0016EA D680            5136         RET
                       5138 ; cbar.c   1735 
                       5139 ; cbar.c   1736 /**************************************************************************/
                       5140 ; cbar.c   1737 /* SetCBScHPhase                                                   CBAR.C  */
                       5141 ; cbar.c   1738 /*                                                                        */
                       5142 ; cbar.c   1739 /* Author:   Kim Engedahl, DEV, 000331                                    */
                       5143 ; cbar.c   1740 /* Revised:   000618, KEn, DEV                                             */
                       5144 ; cbar.c   1741 /*                                                                        */
                       5145 ; cbar.c   1742 /* Function:                                                               */
                       5146 ; cbar.c   1743 /* Remarks:   Note that the resolution is different from BlackBurst, (1.4).*/
                       5147 ; cbar.c   1744 /* Returns:                                                                */
                       5148 ; cbar.c   1745 /* Updates:                                                                */
                       5149 ; cbar.c   1746 /**************************************************************************/
                       5150 ; cbar.c   1747 int SetCBScHPhase( int schphase)
                       5151 ; cbar.c   1748 {
                       5152         ALIGN   1
                       5154         PUBLIC  _SetCBScHPhase
0016EC                 5155 _SetCBScHPhase:
0016EC 0F10            5159         PUSH.W  R4
0016EE A97E            5161         ADDS.W  R7,#0EH
                       5169 ; cbar.c   1749   long tmp;
                       5170 ; cbar.c   1750   UC buffer[2];
                       5171 ; cbar.c   1751 
                       5172 ; cbar.c   1752   Settings.ActivePreset = 0;
0016F0 964842rr        5174         MOV.B   ES,#SEG( _Settings )
0016F4 9918rrrr        5175         MOV.W   R1,#SOF( _Settings )
0016F8 BA10            5176         MOV.W   [R1],#00H
                       5177 ; cbar.c   1753 
                       5178 ; cbar.c   1754   Settings.CBSetup.ScHPhase = CBSetup.ScHPhase = schphase;
0016FA 8940            5180         MOV.W   R4,R0
0016FC 964842rr        5181         MOV.B   ES,#SEG( _CBSetup+8 )
001700 9908rrrr        5182         MOV.W   R0,#SOF( _CBSetup+8 )
001704 8A48            5183         MOV.W   [R0],R4
001706 964842rr        5186         MOV.B   ES,#SEG( _Settings+40 )
00170A 9908rrrr        5187         MOV.W   R0,#SOF( _Settings+40 )
00170E 8A48            5188         MOV.W   [R0],R4
                       5189 ; cbar.c   1755   NV_Store( &Settings, SettingsPtr, sizeof( Settings));
001710 9918rrrr        5191         MOV.W   R1,#SEG( _Settings )
001714 9908rrrr        5192         MOV.W   R0,#SOF( _Settings )
001718 964842rr        5193         MOV.B   ES,#SEG( _SettingsPtr )
00171C 9928rrrr        5194         MOV.W   R2,#SOF( _SettingsPtr )
001720 8A22            5195         MOV.W   R2,[R2]
001722 9938004A        5196         MOV.W   R3,#04AH
                       5197         CALL    _NV_Store
001726 C4rrrrrr       +5197 ;       FCALL   _NV_Store
                       5198 ; cbar.c   1756   
                       5199 ; cbar.c   1757   if ( CBSetup.System < NTSC_US)
00172A 964842rr        5201         MOV.B   ES,#SEG( _CBSetup )
00172E 9908rrrr        5202         MOV.W   R0,#SOF( _CBSetup )
001732 8200            5203         MOV.B   R0L,[R0]
001734 910402          5204         CMP.B   R0L,#02H
001737 F009            5205         BCC     _187
                       5206 ; cbar.c   1758     tmp = (long) Calibration.CBCalibration.ScHPhaseG;
001739 964842rr        5208         MOV.B   ES,#SEG( _Calibration+208 )
00173D 9908rrrr        5209         MOV.W   R0,#SOF( _Calibration+208 )
001741 8200            5210         MOV.B   R0L,[R0]
001743 B110            5211         MOVS.B  R0H,#00H
001745 B910            5212         MOVS.W  R1,#00H
001747 FE08            5214         BR      _188
001747 FE0800          5214         BR      _188
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  71

ADDR   CODE            LINE SOURCELINE
00174A                 5215 _187:
                       5216 ; cbar.c   1759   else 
                       5217 ; cbar.c   1760     tmp = (long) Calibration.CBCalibration.ScHPhaseM;
00174A 964842rr        5219         MOV.B   ES,#SEG( _Calibration+214 )
00174E 9908rrrr        5220         MOV.W   R0,#SOF( _Calibration+214 )
001752 8200            5221         MOV.B   R0L,[R0]
001754 B110            5223         MOVS.B  R0H,#00H
001756 B910            5224         MOVS.W  R1,#00H
001758                 5226 _188:
                       5227 ; cbar.c   1761 
                       5228 ; cbar.c   1762   tmp += (long) schphase;
001758 8924            5230         MOV.W   R2,R4
00175A 9839            5231         SEXT.W  R3
00175C 0902            5232         ADD.W   R0,R2
00175E 1913            5233         ADDC.W  R1,R3
                       5236 ; cbar.c   1763 
                       5237 ; cbar.c   1764   if ( tmp < 0)                      // -1 deg equ. 359 deg a.s.f.
001760 99140000        5239         CMP.W   R1,#00H
001764 FC08            5240         BGT     _189
001766 FB03            5241         BLT     _191
001768 99040000        5242         CMP.W   R0,#00H
00176C F004            5243         BCC     _189
00176C F004            5243         BCC     _189
00176E                 5244 _191:
                       5245 ; cbar.c   1765     tmp += 360;
00176E 99000168        5247         ADD.W   R0,#0168H
001772 99110000        5248         ADDC.W  R1,#00H
001776                 5251 _189:
                       5252 ; cbar.c   1766 
                       5253 ; cbar.c   1767   tmp *= 256;
001776 DD08            5255         ASL.D   R0,#08H
                       5258 ; cbar.c   1768   tmp /= 360;                        // tmp = ( ScHPhase*256)/360;
001778 B930            5260         MOV.W   R3,#00H
00177A 99280168        5261         MOV.W   R2,#0168H
00177E C4rrrrrr        5262         FCALL   __SDIVL
                       5265 ; cbar.c   1769 
                       5266 ; cbar.c   1770   buffer[0] = C_PHASE_address;
001782 92785A          5268         MOV.B   [R7],#05AH
                       5270 ; cbar.c   1771   buffer[1] = tmp & 0xFF;
001785 9105FF          5272         AND.B   R0L,#0FFH
001788 840F01          5273         MOV.B   [R7+1],R0L
                       5274 ; cbar.c   1772   
                       5275 ; cbar.c   1773   return( TransmitIIC( TVP6K_IIC_address, 2, buffer, IIC_PTV));
00178B 910840          5277         MOV.B   R0L,#040H
00178E 911802          5278         MOV.B   R0H,#02H
001791 9168rr          5279         MOV.B   R3L,#SEG( __lc_bs )
001794 7177            5280         XOR.B   R3H,R3H
001796 8927            5281         MOV.W   R2,R7
001798 912800          5282         MOV.B   R1L,#00H
                       5283         CALL    _TransmitIIC
00179B C4rrrrrr       +5283 ;       FCALL   _TransmitIIC
                       5284 ; cbar.c   1774 }
00179F A972            5286         ADDS.W  R7,#02H
0017A1 2F10            5288         POP.W   R4
0017A3 D680            5290         RET
                       5293 ; cbar.c   1775 
                       5294 ; cbar.c   1776 /**************************************************************************/
                       5295 ; cbar.c   1777 /* SetCBEmbAudioSignal                                             CBAR.C  */
                       5296 ; cbar.c   1778 /*                                                                        */
                       5297 ; cbar.c   1779 /* Author:   Kim Engedahl, DEV, 000331                                    */
                       5298 ; cbar.c   1780 /* Revised:   000618, KEn, DEV                                             */
                       5299 ; cbar.c   1781 /*                                                                        */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  72

ADDR   CODE            LINE SOURCELINE
                       5300 ; cbar.c   1782 /* Function:                                                               */
                       5301 ; cbar.c   1783 /* Remarks:                                                                */
                       5302 ; cbar.c   1784 /* Returns:                                                                */
                       5303 ; cbar.c   1785 /* Updates:                                                                */
                       5304 ; cbar.c   1786 /**************************************************************************/
                       5305 ; cbar.c   1787 int SetCBEmbAudioSignal( UC signal)
                       5306 ; cbar.c   1788 {
0017A5 00              5307         ALIGN   1
                       5309         PUBLIC  _SetCBEmbAudioSignal
0017A6                 5310 _SetCBEmbAudioSignal:
0017A6 0F10            5314         PUSH.W  R4
                       5318 ; cbar.c   1789   Settings.ActivePreset = 0;
0017A8 964842rr        5320         MOV.B   ES,#SEG( _Settings )
0017AC 9918rrrr        5321         MOV.W   R1,#SOF( _Settings )
0017B0 BA10            5322         MOV.W   [R1],#00H
                       5323 ; cbar.c   1790 
                       5324 ; cbar.c   1791   Settings.CBSetup.EmbAudioSignal = CBSetup.EmbAudioSignal = signal;
0017B2 8180            5326         MOV.B   R4L,R0L
0017B4 964842rr        5327         MOV.B   ES,#SEG( _CBSetup+10 )
0017B8 9908rrrr        5328         MOV.W   R0,#SOF( _CBSetup+10 )
0017BC 8288            5329         MOV.B   [R0],R4L
0017BE 964842rr        5332         MOV.B   ES,#SEG( _Settings+42 )
0017C2 9908rrrr        5333         MOV.W   R0,#SOF( _Settings+42 )
0017C6 8288            5334         MOV.B   [R0],R4L
                       5335 ; cbar.c   1792   NV_Store( &Settings, SettingsPtr, sizeof( Settings));
0017C8 9918rrrr        5337         MOV.W   R1,#SEG( _Settings )
0017CC 9908rrrr        5338         MOV.W   R0,#SOF( _Settings )
0017D0 964842rr        5339         MOV.B   ES,#SEG( _SettingsPtr )
0017D4 9928rrrr        5340         MOV.W   R2,#SOF( _SettingsPtr )
0017D8 8A22            5341         MOV.W   R2,[R2]
0017DA 9938004A        5342         MOV.W   R3,#04AH
                       5343         CALL    _NV_Store
0017DE C4rrrrrr       +5343 ;       FCALL   _NV_Store
                       5344 ; cbar.c   1793 
                       5345 ; cbar.c   1794   if ( signal == EmbAudioOff)
0017E2 6188            5347         OR.B    R4L,R4L
0017E4 F20B            5348         BNE     _192
                       5349 ; cbar.c   1795     {
                       5350 ; cbar.c   1796     test_vars.CBX.SoundEnable = FALSE;
0017E6 964842rr        5352         MOV.B   ES,#SEG( _test_vars+19 )
0017EA 9908rrrr        5353         MOV.W   R0,#SOF( _test_vars+19 )
0017EE B200            5354         MOV.B   [R0],#00H
                       5355 ; cbar.c   1797     cb_vars.CBX.SoundEnable = FALSE;
0017F0 964842rr        5357         MOV.B   ES,#SEG( _cb_vars+19 )
0017F4 9908rrrr        5358         MOV.W   R0,#SOF( _cb_vars+19 )
0017F8 B200            5359         MOV.B   [R0],#00H
                       5360 ; cbar.c   1798     }
0017FA FE40            5362         BR      _193
0017FA FE40            5362         BR      _193
0017FC                 5363 _192:
                       5366 ; cbar.c   1799   else
                       5367 ; cbar.c   1800     {
                       5368 ; cbar.c   1801     test_vars.CBX.SoundEnable = TRUE;
0017FC 964842rr        5370         MOV.B   ES,#SEG( _test_vars+19 )
001800 9908rrrr        5371         MOV.W   R0,#SOF( _test_vars+19 )
001804 9208FF          5372         MOV.B   [R0],#0FFH
                       5373 ; cbar.c   1802     cb_vars.CBX.SoundEnable = TRUE;
001807 964842rr        5375         MOV.B   ES,#SEG( _cb_vars+19 )
00180B 9908rrrr        5376         MOV.W   R0,#SOF( _cb_vars+19 )
00180F 9208FF          5377         MOV.B   [R0],#0FFH
                       5378 ; cbar.c   1803 
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  73

ADDR   CODE            LINE SOURCELINE
                       5379 ; cbar.c   1804     test_vars.CBX.Blanking = TRUE;                  // Blank line while loading S
                            RAM
001812 964842rr        5381         MOV.B   ES,#SEG( _test_vars+17 )
001816 9908rrrr        5382         MOV.W   R0,#SOF( _test_vars+17 )
00181A 9208FF          5383         MOV.B   [R0],#0FFH
                       5384 ; cbar.c   1805     cb_vars.CBX.Blanking = TRUE;                  // Blank line while loading SRA
                            M
00181D 964842rr        5386         MOV.B   ES,#SEG( _cb_vars+17 )
001821 9908rrrr        5387         MOV.W   R0,#SOF( _cb_vars+17 )
001825 9208FF          5388         MOV.B   [R0],#0FFH
                       5389 ; cbar.c   1806 
                       5390 ; cbar.c   1807     test_vars.CBX.Status &= ~S5S4S3S2;             // Blank the line immediately
001828 964842rr        5392         MOV.B   ES,#SEG( _test_vars+20 )
00182C 9908rrrr        5393         MOV.W   R0,#SOF( _test_vars+20 )
001830 8A00            5394         MOV.W   R0,[R0]
001832 9905FFC3        5395         AND.W   R0,#0FFC3H
001836 964842rr        5396         MOV.B   ES,#SEG( _test_vars+20 )
00183A 9918rrrr        5397         MOV.W   R1,#SOF( _test_vars+20 )
00183E 8A09            5398         MOV.W   [R1],R0
                       5399 ; cbar.c   1808     cb_vars.CBX.Status &= ~S5S4S3S2;             // Blank the line immediately
001840 964842rr        5401         MOV.B   ES,#SEG( _cb_vars+20 )
001844 9908rrrr        5402         MOV.W   R0,#SOF( _cb_vars+20 )
001848 8A00            5403         MOV.W   R0,[R0]
00184A 9905FFC3        5404         AND.W   R0,#0FFC3H
00184E 964842rr        5405         MOV.B   ES,#SEG( _cb_vars+20 )
001852 9918rrrr        5406         MOV.W   R1,#SOF( _cb_vars+20 )
001856 8A09            5407         MOV.W   [R1],R0
                       5408 ; cbar.c   1809 #ifdef CLASSIC    
                       5409 ; cbar.c   1810   StatusPort = cb_vars.CBX.Status;
001858 96484206        5411         MOV.B   ES,#SEG( _StatusPort )
00185C 9918A000        5412         MOV.W   R1,#SOF( _StatusPort )
001860 8A09            5413         MOV.W   [R1],R0
                       5414 ; cbar.c   1811 #else  
                       5415 ; cbar.c   1812   StatusPort = test_vars.CBX.Status;
                       5416 ; cbar.c   1813 #endif
                       5417 ; cbar.c   1814 
                       5418 ; cbar.c   1815     SRAMSoundLoad( signal);           // Download sound information
001862 8108            5420         MOV.B   R0L,R4L
001864 C5F8F2          5421         CALL    _SRAMSoundLoad
                       5425 ; cbar.c   1816 
                       5426 ; cbar.c   1817     test_vars.CBX.Blanking = FALSE;
001867 964842rr        5428         MOV.B   ES,#SEG( _test_vars+17 )
00186B 9908rrrr        5429         MOV.W   R0,#SOF( _test_vars+17 )
00186F B200            5430         MOV.B   [R0],#00H
                       5431 ; cbar.c   1818     cb_vars.CBX.Blanking = FALSE;
001871 964842rr        5433         MOV.B   ES,#SEG( _cb_vars+17 )
001875 9908rrrr        5434         MOV.W   R0,#SOF( _cb_vars+17 )
001879 B200            5435         MOV.B   [R0],#00H
                       5436 ; cbar.c   1819     }
00187C                 5438 _193:
                       5439 ; cbar.c   1820 
                       5440 ; cbar.c   1821   return( OK);
00187C 9908FFFF        5442         MOV.W   R0,#0FFFFH
                       5443 ; cbar.c   1822 }
001880 2F10            5445         POP.W   R4
001882 D680            5447         RET
                       5449 ; cbar.c   1823 
                       5450 ; cbar.c   1824 /**************************************************************************/
                       5451 ; cbar.c   1825 /* ValidateCBPattern                                                CBAR.C  */
                       5452 ; cbar.c   1826 /*                                                                        */
                       5453 ; cbar.c   1827 /* Author:   Kim Engedahl, DEV, 000405                                    */
                       5454 ; cbar.c   1828 /* Revised:   000603, KEn, DEV                                             */
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  74

ADDR   CODE            LINE SOURCELINE
                       5455 ; cbar.c   1829 /*                                                                        */
                       5456 ; cbar.c   1830 /* Function:                                                               */
                       5457 ; cbar.c   1831 /* Remarks:                                                                 */
                       5458 ; cbar.c   1832 /* Returns:                                                                */
                       5459 ; cbar.c   1833 /* Updates:                                                                */
                       5460 ; cbar.c   1834 /**************************************************************************/
                       5461 ; cbar.c   1835 int ValidateCBPattern( UC system, UI *pattern)
                       5462 ; cbar.c   1836 {
                       5463         ALIGN   1
                       5465         PUBLIC  _ValidateCBPattern
001884                 5466 _ValidateCBPattern:
                       5476 ; cbar.c   1837   if ( system < NTSC_US)
001884 910402          5478         CMP.B   R0L,#02H
001887 F011            5479         BCC     _197
                       5480 ; cbar.c   1838   {
                       5481 ; cbar.c   1839     switch ( *pattern)
001889 866C42          5483         MOV.B   ES,R3L
00188C 8A02            5484         MOV.W   R0,[R2]
00188E 99040000        5486         CMP.W   R0,#00H
001892 F307            5487         BEQ     _196
001894 99040002        5488         CMP.W   R0,#02H
001898 F304            5489         BEQ     _196
00189A FE00            5490         BR      _194
                       5491 ; cbar.c   1840     {
                       5492 ; cbar.c   1841       case SMPTECBar:
                       5493 ; cbar.c   1842       case FCCCBar:
                       5494 ; cbar.c   1843         *pattern = EBUCBar;
                       5495 ; cbar.c   1844         break;
                       5496 ; cbar.c   1845 
                       5497 ; cbar.c   1846       default:
00189C                 5499 _194:
                       5500 ; cbar.c   1847         return( OK);
00189C 9908FFFF        5502         MOV.W   R0,#0FFFFH
0018A0 D680            5503         RET
0018A2                 5505 _196:
0018A2 866C42          5509         MOV.B   ES,R3L
0018A5 BA21            5510         MOV.W   [R2],#01H
                       5511 ; cbar.c   1848     }
                       5512 ; cbar.c   1849   }
0018A7 FE1C            5514         BR      _204
0018A7 FE1C00          5514         BR      _204
0018AA                 5515 _197:
                       5518 ; cbar.c   1850   else
                       5519 ; cbar.c   1851   {
                       5520 ; cbar.c   1852     switch ( *pattern)
0018AA 866C42          5522         MOV.B   ES,R3L
0018AD 8A02            5523         MOV.W   R0,[R2]
0018AF 99040001        5524         CMP.W   R0,#01H
0018B3 F313            5525         BEQ     _202
0018B5 99040005        5526         CMP.W   R0,#05H
0018B9 F310            5527         BEQ     _202
0018BB 99040006        5528         CMP.W   R0,#06H
0018BF F30D            5529         BEQ     _202
0018C1 99040009        5530         CMP.W   R0,#09H
0018C5 F302            5531         BEQ     _198
0018C7 FE06            5532         BR      _199
                       5533 ; cbar.c   1853     {
                       5534 ; cbar.c   1854       case EBUCBar:
                       5535 ; cbar.c   1855       case CBarGrey75:
                       5536 ; cbar.c   1856       case CBarRed75:
                       5537 ; cbar.c   1857         *pattern = SMPTECBar;
                       5538 ; cbar.c   1858         break;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  75

ADDR   CODE            LINE SOURCELINE
                       5539 ; cbar.c   1859 
                       5540 ; cbar.c   1860       case CCIR18:
0018CA                 5542 _198:
                       5543 ; cbar.c   1861         *pattern = Multiburst;
0018CA 866C42          5545         MOV.B   ES,R3L
0018CD 9A280008        5546         MOV.W   [R2],#08H
                       5547 ; cbar.c   1862         break;
0018D1 FE07            5549         BR      _204
                       5550 ; cbar.c   1863 
                       5551 ; cbar.c   1864       default:
0018D4                 5553 _199:
                       5554 ; cbar.c   1865         return( OK);
0018D4 9908FFFF        5556         MOV.W   R0,#0FFFFH
0018D8 D680            5557         RET
0018DA                 5559 _202:
0018DA 866C42          5563         MOV.B   ES,R3L
0018DD BA20            5564         MOV.W   [R2],#00H
                       5565 ; cbar.c   1866     }
                       5566 ; cbar.c   1867   }
0018E0                 5568 _204:
                       5569 ; cbar.c   1868 
                       5570 ; cbar.c   1869   return( FAIL);
0018E0 B900            5572         MOV.W   R0,#00H
                       5573 ; cbar.c   1870 }
0018E2                 5575 _206:
0018E2 D680            5576         RET
                       5579 ; cbar.c   1871 
                       5582         EXTRN   HCODE(__UMODL)
000008                 5585         RSEG    CBAR_CLR_FA
                       5586         PUBLIC  _test_vars
                       5587         ALIGN   1
000008                 5588 _test_vars:     DS      22
   |  RESERVED             
00001D
                       5593         EXTRN   HCODE(_TransmitIIC)
06A000                 5596         HSEG AT 06A000H
                       5597         PUBLIC  _StatusPort
                       5598         ALIGN   1
06A000                 5599 _StatusPort:    DS      2
   |  RESERVED             
06A001
06A004                 5602         HSEG AT 06A004H
                       5603         PUBLIC  _HOffsetPort
                       5604         ALIGN   1
06A004                 5605 _HOffsetPort:   DS      2
   |  RESERVED             
06A005
                       5607         EXTRN   HDATA(_TestLEDMirror)
                       5610         EXTRN   HCODE(_tvp6k_system)
00001E                 5613         RSEG    CBAR_CLR_FA
                       5614         PUBLIC  _CBSetup
                       5615         ALIGN   1
00001E                 5616 _CBSetup:       DS      12
   |  RESERVED             
000029
                       5619         EXTRN   HCODE(_LEDSet)
044000                 5622         HSEG AT 044000H
                       5623         PUBLIC  _SRAMVideoPort
                       5624         ALIGN   1
044000                 5625 _SRAMVideoPort: DS      2
   |  RESERVED             
044001
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  76

ADDR   CODE            LINE SOURCELINE
04A000                 5629         HCSEG AT 04A000H
                       5630         PUBLIC  _SoundSignalArray
                       5631         ALIGN   1
                       5631         ALIGN   1
04A000                 5632 _SoundSignalArray:      DS      9216
   |  RESERVED             
04C3FF
                       5635         EXTRN   HCODE(_Write_AD8402)
                       5637         EXTRN   HDATA(_SettingsPtr)
00002A                 5640         RSEG    CBAR_CLR_FA
                       5641         PUBLIC  _PhaseOffset
                       5642         ALIGN   1
00002A                 5643 _PhaseOffset:   DS      2
   |  RESERVED             
00002B
06A00C                 5646         HSEG AT 06A00CH
                       5647         PUBLIC  _LEDPort
                       5648         ALIGN   1
06A00C                 5649 _LEDPort:       DS      2
   |  RESERVED             
06A00D
                       5651         EXTRN   HDATA(_GenlockSetup)
                       5653         EXTRN   HDATA(_Settings)
                       5655         EXTRN   HDATA(_LEDMirror)
                       5658         EXTRN   HCODE(_NV_Store)
                       5660         EXTRN   HDATA(_Calibration)
050000                 5664         HCSEG AT 050000H
                       5665         PUBLIC  _VideoSignalArray
                       5666         ALIGN   1
                       5666         ALIGN   1
050000                 5667 _VideoSignalArray:      DS      196608
   |  RESERVED             
07FFFF
06A014                 5670         HSEG AT 06A014H
                       5671         PUBLIC  _TestLEDPort
                       5672         ALIGN   1
06A014                 5673 _TestLEDPort:   DS      2
   |  RESERVED             
06A015
                       5674         EXTRN   IDATA(__lc_bs)
00002C                 5677         RSEG    CBAR_CLR_FA
                       5678         PUBLIC  _cb_vars
                       5679         ALIGN   1
00002C                 5680 _cb_vars:       DS      22
   |  RESERVED             
000041
                       5681         EXTRN   HCODE(__SDIVL)
040000                 5684         HSEG AT 040000H
                       5685         PUBLIC  _SRAMSoundPort
                       5686         ALIGN   1
040000                 5687 _SRAMSoundPort: DS      2
   |  RESERVED             
040001
054000                 5690         HSEG AT 054000H
                       5691         PUBLIC  _ESRAMVideoPort
                       5692         ALIGN   1
054000                 5693 _ESRAMVideoPort:        DS      2
   |  RESERVED             
054001
000000                 5696 CBAR_CLR_NE@DS  SEGMENT DATA JOIN CLEAR
000000                 5697         RSEG    CBAR_CLR_NE@DS
                       5698         PUBLIC  _TimeTickCounter
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  77

ADDR   CODE            LINE SOURCELINE
                       5699         ALIGN   1
000000                 5700 _TimeTickCounter:       DS      2
   |  RESERVED             
000001
                       5701         EXTRN   HCODE(__UDIVL)
06A008                 5704         HSEG AT 06A008H
                       5705         PUBLIC  _ChromaGainPort
                       5706         ALIGN   1
06A008                 5707 _ChromaGainPort:        DS      2
   |  RESERVED             
06A009
000002                 5710         RSEG    CBAR_CLR_NE@DS
                       5711         PUBLIC  _LineOffset
                       5712         ALIGN   1
000002                 5713 _LineOffset:    DS      2
   |  RESERVED             
000003
                       5714         EXTRN   DATA(__lc_ub_xvwbuffer)
                       5715         EXTRN   DATA(__lc_ue_xvwbuffer)
                       5716         CALLS   'WriteCBGain', 'Write_AD8402'
                       5717         CALLS   'CBDefaults', 'NV_Store'
                       5718         CALLS   'CBUpdate', 'SetCBSystem'
                       5719         CALLS   'CBUpdate', 'SetCBDelay'
                       5720         CALLS   'CBUpdate', 'SetCBScHPhase'
                       5721         CALLS   'CBUpdate', 'SetCBEmbAudioSignal'
                       5722         CALLS   'SetCBPattern', 'ValidateCBPattern'
                       5723         CALLS   'SetCBPattern', 'NV_Store'
                       5724         CALLS   'SetCBPattern', 'SRAMVideoLoad'
                       5725         CALLS   'SetCBSystem', 'NV_Store'
                       5726         CALLS   'SetCBSystem', 'WriteCBGain'
                       5727         CALLS   'SetCBSystem', 'WriteCBChromaGain'
                       5728         CALLS   'SetCBSystem', 'WriteCBGain'
                       5729         CALLS   'SetCBSystem', 'WriteCBChromaGain'
                       5730         CALLS   'SetCBSystem', 'tvp6k_system'
                       5731         CALLS   'SetCBSystem', 'ValidateCBPattern'
                       5732         CALLS   'SetCBSystem', 'SetCBPattern'
                       5733         CALLS   'SetCBSystem', 'SetCBScHPhase'
                       5734         CALLS   'SetCBSystem', 'LEDSet'
                       5735         CALLS   'SetCBDelay', 'NV_Store'
                       5736         CALLS   'SetCBScHPhase', 'NV_Store'
                       5737         CALLS   'SetCBScHPhase', 'TransmitIIC'
                       5738         CALLS   'SetCBEmbAudioSignal', 'NV_Store'
                       5739         CALLS   'SetCBEmbAudioSignal', 'SRAMSoundLoad'
