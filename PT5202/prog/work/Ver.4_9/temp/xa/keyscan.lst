XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   1
F:\PT5202\prog\work\Ver.4_9\temp\xa\keyscan.src
ADDR   CODE            LINE SOURCELINE
                          1 ; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
                          2 ; options: -A1 -Cxag3 -e -g -IcF:\PT5202\prog\include
                          3 ;          -IF:\PT5202\prog\rtxc\xa\include -I. -Ml -O2 -s
                          5 $NOZPAGE
                          6         NAME    KEYSCAN
                         10 ; keyscan.c    1        // 990818 SAA Adjusted speed and delay in repeat
                         11 ; keyscan.c    2        //
                         12 ; keyscan.c    3        
                         13 ; keyscan.c    4        #include "rtxcobj.h"
                        343 ; keyscan.c    5        
                        344 ; keyscan.c    6        #include "define.h"                             /* Standard PTV definitio
                            ns */
                        347 ; keyscan.c    7        #include "KeyCodes.h"                                   /* defines codes 
                            used for key queue */
                        350 ; keyscan.c    8        #include "Key_hw.h"                             /* Haedware interface to 
                            keyboard   */
                        353 ; keyscan.c    9        
                        354 ; keyscan.c   10        
                        355 ; keyscan.c   11        /* Define parameters for keyboard scanning */
                        356 ; keyscan.c   12        
                        357 ; keyscan.c   13        #define ScanRate        20              /* Scanrate in Milliseconds */
                        358 ; keyscan.c   14        
                        359 ; keyscan.c   15        #define DebounceTimeout 1       /* Number of readings identical
                        360 ; keyscan.c   16                                       to the first before keyaccept */
                        361 ; keyscan.c   17        
                        362 ; keyscan.c   18        #define RepDelay        50      /* Time (in scanrate units)  before repea
                            ting */
                        363 ; keyscan.c   19        
                        364 ; keyscan.c   20        #define AutoEscDelay    3000    /* 60 sec = 1 minut */
                        365 ; keyscan.c   21        
                        366 ; keyscan.c   22        #define InitRepRate     15      /* Time between each rep (initial value) 
                            */
                        367 ; keyscan.c   23        #define Acc2RepRate     15      /* Time between each rep acc level 2 */
                        368 ; keyscan.c   24        #define Acc3RepRate     15      /* Time between each rep acc level 3 */
                        369 ; keyscan.c   25        #define Acc4RepRate     15      /* Time between each rep acc level 4 */
                        370 ; keyscan.c   26        
                        371 ; keyscan.c   27        #define Acc2            10      /* Number of keys sent before changing
                        372 ; keyscan.c   28                                                to acceleration level 2*/
                        373 ; keyscan.c   29        
                        374 ; keyscan.c   30        #define Acc3            50      /* Number of keys sent before changing
                        375 ; keyscan.c   31                                                to acceleration level 3*/
                        376 ; keyscan.c   32        
                        377 ; keyscan.c   33        #define Acc4            300     /* Number of keys sent before changing
                        378 ; keyscan.c   34                                                to acceleration level 4*/
                        379 ; keyscan.c   35        
                        380 ; keyscan.c   36        
                        381 ; keyscan.c   37        /*#define Acc2            10     Number of keys sent before changing
                        382 ; keyscan.c   38                                                to acceleration level 2*/
                        383 ; keyscan.c   39        
                        384 ; keyscan.c   40        /*#define Acc3            19     Number of keys sent before changing
                        385 ; keyscan.c   41                                                to acceleration level 3*/
                        386 ; keyscan.c   42        
                        387 ; keyscan.c   43        /*#define Acc4            28     Number of keys sent before changing
                        388 ; keyscan.c   44                                                to acceleration level 4*/
                        389 ; keyscan.c   45        
                        390 ; keyscan.c   46        /* Define states for state-machine */
                        391 ; keyscan.c   47        enum KeyStates{
                        392 ; keyscan.c   48                KeyDebounce,
                        393 ; keyscan.c   49                KeyStable,
                        394 ; keyscan.c   50                KeyRepeat,
                        395 ; keyscan.c   51                KeyFree
                        396 ; keyscan.c   52        };
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   2

ADDR   CODE            LINE SOURCELINE
                        397 ; keyscan.c   53        
                        398 ; keyscan.c   54        /* Task definition */
                        399 ; keyscan.c   55        TStream *KeyScanStream;
                        400 ; keyscan.c   56        
                        401 ; keyscan.c   57        static TTimer *KeyScanTimer;
                        402 ; keyscan.c   58        
                        403 ; keyscan.c   59        /*  Task for scanning keyboard */
                        404 ; keyscan.c   60        void keyscan( void)
                        405 ; keyscan.c   61        {
000000                  406 KEYSCAN_PR      SEGMENT HCODE
000000                  407         RSEG    KEYSCAN_PR
                        408         ALIGN   1
000000                  414 KEYSCAN_CLR_FA  SEGMENT HDATA INSEGMENT CLEAR
000000                  415         RSEG    KEYSCAN_CLR_FA
                        416         ALIGN   1
000000                  417 _3:     DS      2
   |  RESERVED             
000001
                        418         ALIGN   1
000002                  419 _4:     DS      2
   |  RESERVED             
000003
                        420         ALIGN   1
000004                  421 _5:     DS      2
   |  RESERVED             
000005
000006 RESERVED         422 _6:     DS      1
000006
000007 RESERVED         423 _7:     DS      1
000007
000008 RESERVED         424 _8:     DS      1
000008
                        425         PUBLIC  _keyscan
000000                  426         RSEG    KEYSCAN_PR
000000                  426         RSEG    KEYSCAN_PR
000000                  427 _keyscan:
000000 0F30             431         PUSH.W  R4, R5
                        439 ; keyscan.c   62                /* Internal vars */
                        440 ; keyscan.c   63          static UC KeyState, OldKeyCode, RepRate;
                        441 ; keyscan.c   64          static KeyPress Key;
                        442 ; keyscan.c   65          static UI KeyCount, KeyTimer;
                        443 ; keyscan.c   66        
                        444 ; keyscan.c   67                KeyScanStream = newTStream( 2, 10);
000002 B902             446         MOV.W   R0,#02H
000004 9918000A         447         MOV.W   R1,#0AH
                        448         CALL    _newTStream
000008 C4rrrrrr        +448 ;       FCALL   _newTStream
00000C 964842rr         449         MOV.B   ES,#SEG( _KeyScanStream )
000010 9928rrrr         450         MOV.W   R2,#SOF( _KeyScanStream )
000014 8B0A             451         MOV.W   [R2+],R0
000016 8A1A             452         MOV.W   [R2],R1
                        453 ; keyscan.c   68                KS_purgequeue( KeyScanStream->ID);
000018 862C42           455         MOV.B   ES,R1L
00001B 840012           456         MOV.B   R0L,[R0+18]
                        457         CALL    _KS_purgequeue
00001E C4rrrrrr        +457 ;       FCALL   _KS_purgequeue
                        458 ; keyscan.c   69        
                        459 ; keyscan.c   70                KeyScanTimer = newTTimer();
                        461         CALL    _newTTimer
000022 C4rrrrrr        +461 ;       FCALL   _newTTimer
000026 964842rr         462         MOV.B   ES,#SEG( _KeyScanTimer )
00002A 9928rrrr         463         MOV.W   R2,#SOF( _KeyScanTimer )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   3

ADDR   CODE            LINE SOURCELINE
00002E 8B0A             464         MOV.W   [R2+],R0
000030 8A1A             465         MOV.W   [R2],R1
                        466 ; keyscan.c   71                KeyScanTimer->SetPeriod( KeyScanTimer, 10);  //20); <- original v
                            alue !!!!!!!!!!!!
000032 862C42           468         MOV.B   ES,R1L
000035 8C400A           469         MOV.W   R4,[R0+10]
000038 8C500C           470         MOV.W   R5,[R0+12]
00003B 9928000A         471         MOV.W   R2,#0AH
00003F C4rrrrrr         472         FCALL   __ICALL
                        473 ; keyscan.c   72        
                        474 ; keyscan.c   73                /* Initialisation part */
                        475 ; keyscan.c   74          KeyState   = KeyDebounce ;  /* Initial state */
000043 964842rr         477         MOV.B   ES,#SEG( _8 )
000047 9908rrrr         478         MOV.W   R0,#SOF( _8 )
00004B B200             479         MOV.B   [R0],#00H
                        480 ; keyscan.c   75          OldKeyCode = KeyNone;       /* Program last key as 'none' */
00004D 964842rr         482         MOV.B   ES,#SEG( _7 )
000051 9908rrrr         483         MOV.W   R0,#SOF( _7 )
000055 9208FF           484         MOV.B   [R0],#0FFH
                        485 ; keyscan.c   76          Key.Repeat = RepeatOff;
000058 964842rr         487         MOV.B   ES,#SEG( _5+1 )
00005C 9908rrrr         488         MOV.W   R0,#SOF( _5+1 )
000060 B200             489         MOV.B   [R0],#00H
                        490 ; keyscan.c   77          RepRate    = InitRepRate;
000062 964842rr         492         MOV.B   ES,#SEG( _6 )
000066 9908rrrr         493         MOV.W   R0,#SOF( _6 )
00006A 92080F           494         MOV.B   [R0],#0FH
                        495 ; keyscan.c   78          KeyTimer   = 1;
00006D 964842rr         497         MOV.B   ES,#SEG( _3 )
000071 9908rrrr         498         MOV.W   R0,#SOF( _3 )
000075 BA01             499         MOV.W   [R0],#01H
                        500 ; keyscan.c   79        
                        501 ; keyscan.c   80          /* Get initial key press */
                        502 ; keyscan.c   81          /* OR : does above initialisation give the init key as the first ? */
                        503 ; keyscan.c   82          /* Set up timer for scan rate */
                        504 ; keyscan.c   83        
                        505 ; keyscan.c   84                /* Task loop start */
                        506 ; keyscan.c   85                for (;;)
000078                  508 _9:
                        509 ; keyscan.c   86          {
                        510 ; keyscan.c   87                /* Wait for timeout */
                        511 ; keyscan.c   88                        KeyScanTimer->TimeOut->Wait( KeyScanTimer->TimeOut, 0);
000078 964842rr         513         MOV.B   ES,#SEG( _KeyScanTimer )
00007C 9918rrrr         514         MOV.W   R1,#SOF( _KeyScanTimer )
000080 8B01             515         MOV.W   R0,[R1+]
000082 8A11             516         MOV.W   R1,[R1]
000084 862C42           517         MOV.B   ES,R1L
000087 8C4016           518         MOV.W   R4,[R0+22]
00008A 8C5018           519         MOV.W   R5,[R0+24]
00008D 86AC42           520         MOV.B   ES,R5L
000090 8C540C           521         MOV.W   R5,[R4+12]
000093 8C440A           522         MOV.W   R4,[R4+10]
000096 862C42           523         MOV.B   ES,R1L
000099 8C1018           524         MOV.W   R1,[R0+24]
00009C 8C0016           525         MOV.W   R0,[R0+22]
00009F B930             526         MOV.W   R3,#00H
0000A1 B920             527         MOV.W   R2,#00H
0000A3 C4rrrrrr         528         FCALL   __ICALL
                        529 ; keyscan.c   89        
                        530 ; keyscan.c   90                        /* Get actual key scan reading */
                        531 ; keyscan.c   91            switch ( KeyboardGet( &Key.Code) )
0000A7 9918rrrr         533         MOV.W   R1,#SEG( _5 )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   4

ADDR   CODE            LINE SOURCELINE
0000AB 9908rrrr         534         MOV.W   R0,#SOF( _5 )
                        535         CALL    _KeyboardGet
0000AF C4rrrrrr        +535 ;       FCALL   _KeyboardGet
                        536 ; keyscan.c   92            {
                        537 ; keyscan.c   93                case OK:
                        538 ; keyscan.c   94                break;
                        539 ; keyscan.c   95        
                        540 ; keyscan.c   96                                default:
                        541 ; keyscan.c   97                break;
                        542 ; keyscan.c   98            }/*end switch*/
                        543 ; keyscan.c   99        
                        544 ; keyscan.c  100            /* Execute state machine */
                        545 ; keyscan.c  101            switch ( KeyState){
0000B3 964842rr         547         MOV.B   ES,#SEG( _8 )
0000B7 9908rrrr         548         MOV.W   R0,#SOF( _8 )
0000BB 8200             549         MOV.B   R0L,[R0]
0000BD 910400           550         CMP.B   R0L,#00H
0000C0 F30D             551         BEQ     _10
0000C2 910403           552         CMP.B   R0L,#03H
0000C5 F364             553         BEQ     _13
0000C7 910401           554         CMP.B   R0L,#01H
                        555         BEQ     _15
0000CA F202            +555 ;       BNE     _LG_4
0000CC D500A7          +555 ;       JMP.L   _15
0000CC D500A700        +555 ;       JMP.L   _15
0000D0                 +555 _LG_4:
0000D0 910402           556         CMP.B   R0L,#02H
                        557         BEQ     _17
0000D3 F202            +557 ;       BNE     _LG_6
0000D5 D500F7          +557 ;       JMP.L   _17
0000D5 D500F7          +557 ;       JMP.L   _17
0000D8                 +557 _LG_6:
                        558         BR      _36
0000D8 D50170          +558         JMP.L   _36
                        559 ; keyscan.c  102                    case KeyDebounce:
0000DC                  561 _10:
                        562 ; keyscan.c  103                    if (Key.Code != OldKeyCode)
0000DC 964842rr         564         MOV.B   ES,#SEG( _5 )
0000E0 9908rrrr         565         MOV.W   R0,#SOF( _5 )
0000E4 8200             566         MOV.B   R0L,[R0]
0000E6 964842rr         567         MOV.B   ES,#SEG( _7 )
0000EA 9918rrrr         568         MOV.W   R1,#SOF( _7 )
0000EE 8211             569         MOV.B   R0H,[R1]
0000F0 4101             570         CMP.B   R0L,R0H
                        571         BNE     _23
0000F2 F302            +571 ;       BEQ     _LG_8
0000F4 D5015D          +571 ;       JMP.L   _23
0000F4 D5015D00        +571 ;       JMP.L   _23
0000F8                 +571 _LG_8:
                        572 ; keyscan.c  104                {
                        573 ; keyscan.c  105                    KeyTimer = DebounceTimeout;
                        574 ; keyscan.c  106                }
                        575 ; keyscan.c  107                else
                        576 ; keyscan.c  108                {
                        577 ; keyscan.c  109                  if (0 == --KeyTimer)
0000F8 964842rr         579         MOV.B   ES,#SEG( _3 )
0000FC 9918rrrr         580         MOV.W   R1,#SOF( _3 )
000100 8A11             581         MOV.W   R1,[R1]
000102 A91F             582         ADDS.W  R1,#0FH
000104 964842rr         583         MOV.B   ES,#SEG( _3 )
000108 9928rrrr         584         MOV.W   R2,#SOF( _3 )
00010C 8A1A             585         MOV.W   [R2],R1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   5

ADDR   CODE            LINE SOURCELINE
00010E 6911             586         OR.W    R1,R1
                        587         BNE     _36
000110 F302            +587 ;       BEQ     _LG_10
000112 D50153          +587 ;       JMP.L   _36
000112 D5015300        +587 ;       JMP.L   _36
000116                 +587 _LG_10:
                        588 ; keyscan.c  110                  {
                        589 ; keyscan.c  111                          if ( Key.Code == KeyNone )
000116 9104FF           591         CMP.B   R0L,#0FFH
000119 F20D             592         BNE     _11
                        593 ; keyscan.c  112                    {
                        594 ; keyscan.c  113                          KeyState     = KeyFree;
00011B 964842rr         596         MOV.B   ES,#SEG( _8 )
00011F 9908rrrr         597         MOV.W   R0,#SOF( _8 )
000123 B203             598         MOV.B   [R0],#03H
                        599 ; keyscan.c  114                      KeyTimer     = AutoEscDelay;
000125 964842rr         601         MOV.B   ES,#SEG( _3 )
000129 9908rrrr         602         MOV.W   R0,#SOF( _3 )
00012D 9A080BB8         603         MOV.W   [R0],#0BB8H
                        604 ; keyscan.c  115                    }
000131 FE0C             606         BR      _12
000131 FE0C00           606         BR      _12
000134                  607 _11:
                        608 ; keyscan.c  116                    else
                        609 ; keyscan.c  117                    {
                        610 ; keyscan.c  118                        KeyTimer     = RepDelay;
000134 964842rr         612         MOV.B   ES,#SEG( _3 )
000138 9908rrrr         613         MOV.W   R0,#SOF( _3 )
00013C 9A080032         614         MOV.W   [R0],#032H
                        615 ; keyscan.c  119                      KeyState     = KeyStable;
000140 964842rr         617         MOV.B   ES,#SEG( _8 )
000144 9908rrrr         618         MOV.W   R0,#SOF( _8 )
000148 B201             619         MOV.B   [R0],#01H
                        620 ; keyscan.c  120                    }
00014A                  622 _12:
                        623 ; keyscan.c  121        
                        624 ; keyscan.c  122                    Key.Repeat   = RepeatOff;
00014A 964842rr         626         MOV.B   ES,#SEG( _5+1 )
00014E 9908rrrr         627         MOV.W   R0,#SOF( _5+1 )
000152 B200             628         MOV.B   [R0],#00H
                        629 ; keyscan.c  123                    KeyCount     = 1;
000154 964842rr         631         MOV.B   ES,#SEG( _4 )
000158 9908rrrr         632         MOV.W   R0,#SOF( _4 )
00015C BA01             633         MOV.W   [R0],#01H
                        634 ; keyscan.c  124                    RepRate    = InitRepRate;
00015E 964842rr         636         MOV.B   ES,#SEG( _6 )
000162 9908rrrr         637         MOV.W   R0,#SOF( _6 )
000166 92080F           638         MOV.B   [R0],#0FH
                        639 ; keyscan.c  125                                                        KeyScanStream->Put( KeySc
                            anStream, &Key);
000169 964842rr         641         MOV.B   ES,#SEG( _KeyScanStream )
00016D 9918rrrr         642         MOV.W   R1,#SOF( _KeyScanStream )
000171 8B01             643         MOV.W   R0,[R1+]
000173 8A11             644         MOV.W   R1,[R1]
000175 862C42           645         MOV.B   ES,R1L
000178 8C400E           646         MOV.W   R4,[R0+14]
00017B 8C5010           647         MOV.W   R5,[R0+16]
00017E 9938rrrr         648         MOV.W   R3,#SEG( _5 )
000182 9928rrrr         649         MOV.W   R2,#SOF( _5 )
000186 C4rrrrrr         650         FCALL   __ICALL
                        651 ; keyscan.c  126                  }
                        652 ; keyscan.c  127                }
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   6

ADDR   CODE            LINE SOURCELINE
                        653 ; keyscan.c  128                break;
                        655         BR      _36
00018A D50117          +655         JMP.L   _36
                        656 ; keyscan.c  129        
                        657 ; keyscan.c  130                                case KeyFree:
00018E                  659 _13:
                        660 ; keyscan.c  131                if (Key.Code != OldKeyCode)
00018E 964842rr         662         MOV.B   ES,#SEG( _5 )
000192 9908rrrr         663         MOV.W   R0,#SOF( _5 )
000196 8200             664         MOV.B   R0L,[R0]
000198 964842rr         665         MOV.B   ES,#SEG( _7 )
00019C 9918rrrr         666         MOV.W   R1,#SOF( _7 )
0001A0 8211             667         MOV.B   R0H,[R1]
0001A2 4101             668         CMP.B   R0L,R0H
0001A4 F30C             669         BEQ     _14
                        670 ; keyscan.c  132                {
                        671 ; keyscan.c  133                        KeyTimer = DebounceTimeout;
0001A6 964842rr         673         MOV.B   ES,#SEG( _3 )
0001AA 9908rrrr         674         MOV.W   R0,#SOF( _3 )
0001AE BA01             675         MOV.W   [R0],#01H
                        676 ; keyscan.c  134                  KeyState = KeyDebounce;
0001B0 964842rr         678         MOV.B   ES,#SEG( _8 )
0001B4 9908rrrr         679         MOV.W   R0,#SOF( _8 )
0001B8 B200             680         MOV.B   [R0],#00H
                        681 ; keyscan.c  135                }
                        683         BR      _36
0001BA D500FF          +683         JMP.L   _36
0001BA D500FF00        +683         JMP.L   _36
0001BE                  684 _14:
                        685 ; keyscan.c  136                else
                        686 ; keyscan.c  137                {
                        687 ; keyscan.c  138                        if (KeyTimer != 0)
0001BE 964842rr         689         MOV.B   ES,#SEG( _3 )
0001C2 9908rrrr         690         MOV.W   R0,#SOF( _3 )
0001C6 8A00             691         MOV.W   R0,[R0]
                        692         BEQ     _36
0001C8 F202            +692 ;       BNE     _LG_16
0001CA D500F7          +692 ;       JMP.L   _36
0001CA D500F700        +692 ;       JMP.L   _36
0001CE                 +692 _LG_16:
                        693 ; keyscan.c  139                  {
                        694 ; keyscan.c  140                        KeyTimer--;
0001CE A90F             696         ADDS.W  R0,#0FH
0001D0 964842rr         697         MOV.B   ES,#SEG( _3 )
0001D4 9918rrrr         698         MOV.W   R1,#SOF( _3 )
0001D8 8A09             699         MOV.W   [R1],R0
                        700 ; keyscan.c  141                    if (KeyTimer == 0)
0001DA 6900             702         OR.W    R0,R0
                        703         BNE     _36
0001DC F302            +703 ;       BEQ     _LG_18
0001DE D500ED          +703 ;       JMP.L   _36
0001DE D500ED00        +703 ;       JMP.L   _36
0001E2                 +703 _LG_18:
                        704 ; keyscan.c  142                    {
                        705 ; keyscan.c  143                        Key.Code = KeyAutoEsc;
0001E2 964842rr         707         MOV.B   ES,#SEG( _5 )
0001E6 9908rrrr         708         MOV.W   R0,#SOF( _5 )
0001EA 92081B           709         MOV.B   [R0],#01BH
                        710 ; keyscan.c  144                                                                KeyScanStream->Pu
                            t( KeyScanStream, &Key);
0001ED 964842rr         712         MOV.B   ES,#SEG( _KeyScanStream )
0001F1 9918rrrr         713         MOV.W   R1,#SOF( _KeyScanStream )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   7

ADDR   CODE            LINE SOURCELINE
0001F5 8B01             714         MOV.W   R0,[R1+]
0001F7 8A11             715         MOV.W   R1,[R1]
0001F9 862C42           716         MOV.B   ES,R1L
0001FC 8C400E           717         MOV.W   R4,[R0+14]
0001FF 8C5010           718         MOV.W   R5,[R0+16]
000202 9938rrrr         719         MOV.W   R3,#SEG( _5 )
000206 9928rrrr         720         MOV.W   R2,#SOF( _5 )
00020A C4rrrrrr         721         FCALL   __ICALL
                        722 ; keyscan.c  145                      Key.Code = KeyNone;
00020E 964842rr         724         MOV.B   ES,#SEG( _5 )
000212 9908rrrr         725         MOV.W   R0,#SOF( _5 )
000216 9208FF           726         MOV.B   [R0],#0FFH
                        727 ; keyscan.c  146                    }
                        728 ; keyscan.c  147                  }
                        729 ; keyscan.c  148                }
                        730 ; keyscan.c  149                break;
                        732         BR      _36
000219 D500CF          +732         JMP.L   _36
                        733 ; keyscan.c  150        
                        734 ; keyscan.c  151              case KeyStable:
00021C                  736 _15:
                        737 ; keyscan.c  152                if (Key.Code != OldKeyCode)
00021C 964842rr         739         MOV.B   ES,#SEG( _5 )
000220 9908rrrr         740         MOV.W   R0,#SOF( _5 )
000224 8200             741         MOV.B   R0L,[R0]
000226 964842rr         742         MOV.B   ES,#SEG( _7 )
00022A 9918rrrr         743         MOV.W   R1,#SOF( _7 )
00022E 8211             744         MOV.B   R0H,[R1]
000230 4101             745         CMP.B   R0L,R0H
000232 F30C             746         BEQ     _16
                        747 ; keyscan.c  153                {
                        748 ; keyscan.c  154                        KeyTimer = DebounceTimeout;
000234 964842rr         750         MOV.B   ES,#SEG( _3 )
000238 9908rrrr         751         MOV.W   R0,#SOF( _3 )
00023C BA01             752         MOV.W   [R0],#01H
                        753 ; keyscan.c  155                  KeyState = KeyDebounce;
00023E 964842rr         755         MOV.B   ES,#SEG( _8 )
000242 9908rrrr         756         MOV.W   R0,#SOF( _8 )
000246 B200             757         MOV.B   [R0],#00H
                        758 ; keyscan.c  156                }
                        760         BR      _36
000248 D500B8          +760         JMP.L   _36
000248 D500B800        +760         JMP.L   _36
00024C                  761 _16:
                        762 ; keyscan.c  157                else
                        763 ; keyscan.c  158                {
                        764 ; keyscan.c  159                        if (0 == KeyTimer--)
00024C 964842rr         766         MOV.B   ES,#SEG( _3 )
000250 9908rrrr         767         MOV.W   R0,#SOF( _3 )
000254 8A00             768         MOV.W   R0,[R0]
000256 8910             769         MOV.W   R1,R0
000258 A90F             770         ADDS.W  R0,#0FH
00025A 964842rr         771         MOV.B   ES,#SEG( _3 )
00025E 9928rrrr         772         MOV.W   R2,#SOF( _3 )
000262 8A0A             773         MOV.W   [R2],R0
000264 6911             774         OR.W    R1,R1
                        775         BNE     _36
000266 F302            +775 ;       BEQ     _LG_22
000268 D500A8          +775 ;       JMP.L   _36
000268 D500A800        +775 ;       JMP.L   _36
00026C                 +775 _LG_22:
                        776 ; keyscan.c  160                  {
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   8

ADDR   CODE            LINE SOURCELINE
                        777 ; keyscan.c  161                        KeyState = KeyRepeat;
00026C 964842rr         779         MOV.B   ES,#SEG( _8 )
000270 9908rrrr         780         MOV.W   R0,#SOF( _8 )
000274 B202             781         MOV.B   [R0],#02H
                        782 ; keyscan.c  162                    KeyTimer = RepRate;
000276 964842rr         784         MOV.B   ES,#SEG( _3 )
00027A 9908rrrr         785         MOV.W   R0,#SOF( _3 )
00027E 9A08000F         786         MOV.W   [R0],#0FH
                        787 ; keyscan.c  163                    Key.Repeat = Repeat1;
000282 964842rr         789         MOV.B   ES,#SEG( _5+1 )
000286 9908rrrr         790         MOV.W   R0,#SOF( _5+1 )
00028A B201             791         MOV.B   [R0],#01H
                        792 ; keyscan.c  164                                                        KeyScanStream->Put( KeySc
                            anStream, &Key);
00028C 964842rr         794         MOV.B   ES,#SEG( _KeyScanStream )
000290 9918rrrr         795         MOV.W   R1,#SOF( _KeyScanStream )
000294 8B01             796         MOV.W   R0,[R1+]
000296 8A11             797         MOV.W   R1,[R1]
000298 862C42           798         MOV.B   ES,R1L
00029B 8C400E           799         MOV.W   R4,[R0+14]
00029E 8C5010           800         MOV.W   R5,[R0+16]
0002A1 9938rrrr         801         MOV.W   R3,#SEG( _5 )
0002A5 9928rrrr         802         MOV.W   R2,#SOF( _5 )
0002A9 C4rrrrrr         803         FCALL   __ICALL
                        804 ; keyscan.c  165                    KeyCount++;
0002AD 964842rr         806         MOV.B   ES,#SEG( _4 )
0002B1 9908rrrr         807         MOV.W   R0,#SOF( _4 )
0002B5 8A00             808         MOV.W   R0,[R0]
0002B7 A901             809         ADDS.W  R0,#01H
0002B9 964842rr         810         MOV.B   ES,#SEG( _4 )
0002BD 9918rrrr         811         MOV.W   R1,#SOF( _4 )
0002C1 8A09             812         MOV.W   [R1],R0
                        813 ; keyscan.c  166                  }
                        814 ; keyscan.c  167                }
                        815 ; keyscan.c  168                break;
0002C3 FE7B             817         BR      _36
                        818 ; keyscan.c  169        
                        819 ; keyscan.c  170              case KeyRepeat:
0002C6                  821 _17:
                        822 ; keyscan.c  171                if (Key.Code != OldKeyCode)
0002C6 964842rr         824         MOV.B   ES,#SEG( _5 )
0002CA 9908rrrr         825         MOV.W   R0,#SOF( _5 )
0002CE 8200             826         MOV.B   R0L,[R0]
0002D0 964842rr         827         MOV.B   ES,#SEG( _7 )
0002D4 9918rrrr         828         MOV.W   R1,#SOF( _7 )
0002D8 8211             829         MOV.B   R0H,[R1]
0002DA 4101             830         CMP.B   R0L,R0H
0002DC F30B             831         BEQ     _18
                        832 ; keyscan.c  172                {
                        833 ; keyscan.c  173                        KeyTimer   = DebounceTimeout;
0002DE 964842rr         835         MOV.B   ES,#SEG( _3 )
0002E2 9908rrrr         836         MOV.W   R0,#SOF( _3 )
0002E6 BA01             837         MOV.W   [R0],#01H
                        838 ; keyscan.c  174                  KeyState   = KeyDebounce;
0002E8 964842rr         840         MOV.B   ES,#SEG( _8 )
0002EC 9908rrrr         841         MOV.W   R0,#SOF( _8 )
0002F0 B200             842         MOV.B   [R0],#00H
                        843 ; keyscan.c  175                }
0002F2 FE63             845         BR      _36
0002F2 FE63             845         BR      _36
0002F4                  846 _18:
                        847 ; keyscan.c  176                else
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   9

ADDR   CODE            LINE SOURCELINE
                        848 ; keyscan.c  177                {
                        849 ; keyscan.c  178                        if (0 == KeyTimer--)
0002F4 964842rr         851         MOV.B   ES,#SEG( _3 )
0002F8 9908rrrr         852         MOV.W   R0,#SOF( _3 )
0002FC 8A00             853         MOV.W   R0,[R0]
0002FE 8910             854         MOV.W   R1,R0
000300 A90F             855         ADDS.W  R0,#0FH
000302 964842rr         856         MOV.B   ES,#SEG( _3 )
000306 9928rrrr         857         MOV.W   R2,#SOF( _3 )
00030A 8A0A             858         MOV.W   [R2],R0
00030C 6911             859         OR.W    R1,R1
00030E F255             860         BNE     _36
                        861 ; keyscan.c  179                  {
                        862 ; keyscan.c  180        
                        863 ; keyscan.c  181                                                        if (KeyCount == Acc2)
000310 964842rr         865         MOV.B   ES,#SEG( _4 )
000314 9908rrrr         866         MOV.W   R0,#SOF( _4 )
000318 8A00             867         MOV.W   R0,[R0]
00031A 9904000A         868         CMP.W   R0,#0AH
00031E F20B             869         BNE     _19
                        870 ; keyscan.c  182                    {
                        871 ; keyscan.c  183                        Key.Repeat = Repeat2;
000320 964842rr         873         MOV.B   ES,#SEG( _5+1 )
000324 9918rrrr         874         MOV.W   R1,#SOF( _5+1 )
000328 B212             875         MOV.B   [R1],#02H
                        876 ; keyscan.c  184                      RepRate    = Acc2RepRate;
00032A 964842rr         878         MOV.B   ES,#SEG( _6 )
00032E 9918rrrr         879         MOV.W   R1,#SOF( _6 )
000332 92180F           880         MOV.B   [R1],#0FH
                        881 ; keyscan.c  185                    }
000336                  883 _19:
                        884 ; keyscan.c  186        
                        885 ; keyscan.c  187                    if (KeyCount == Acc3)
000336 99040032         887         CMP.W   R0,#032H
00033A F20B             888         BNE     _20
                        889 ; keyscan.c  188                    {
                        890 ; keyscan.c  189                        Key.Repeat = Repeat3;
00033C 964842rr         892         MOV.B   ES,#SEG( _5+1 )
000340 9918rrrr         893         MOV.W   R1,#SOF( _5+1 )
000344 B213             894         MOV.B   [R1],#03H
                        895 ; keyscan.c  190                            RepRate    = Acc3RepRate;
000346 964842rr         897         MOV.B   ES,#SEG( _6 )
00034A 9918rrrr         898         MOV.W   R1,#SOF( _6 )
00034E 92180F           899         MOV.B   [R1],#0FH
                        900 ; keyscan.c  191                    }
000352                  902 _20:
                        903 ; keyscan.c  192                                                        
                        904 ; keyscan.c  193                                                        if (KeyCount == Acc4)
000352 9904012C         906         CMP.W   R0,#012CH
000356 F20B             907         BNE     _21
                        908 ; keyscan.c  194                    {
                        909 ; keyscan.c  195                        Key.Repeat = Repeat4;
000358 964842rr         911         MOV.B   ES,#SEG( _5+1 )
00035C 9918rrrr         912         MOV.W   R1,#SOF( _5+1 )
000360 B214             913         MOV.B   [R1],#04H
                        914 ; keyscan.c  196                      RepRate    = Acc4RepRate;
000362 964842rr         916         MOV.B   ES,#SEG( _6 )
000366 9918rrrr         917         MOV.W   R1,#SOF( _6 )
00036A 92180F           918         MOV.B   [R1],#0FH
                        919 ; keyscan.c  197                    }
00036E                  921 _21:
                        922 ; keyscan.c  198        
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  10

ADDR   CODE            LINE SOURCELINE
                        923 ; keyscan.c  199                    if (KeyCount < 1000)
00036E 990403E8         925         CMP.W   R0,#03E8H
000372 F006             926         BCC     _22
                        927 ; keyscan.c  200                        KeyCount++;
000374 A901             929         ADDS.W  R0,#01H
000376 964842rr         930         MOV.B   ES,#SEG( _4 )
00037A 9918rrrr         931         MOV.W   R1,#SOF( _4 )
00037E 8A09             932         MOV.W   [R1],R0
00037E 8A09             932         MOV.W   [R1],R0
000380                  933 _22:
                        934 ; keyscan.c  201        
                        935 ; keyscan.c  202                    KeyTimer = RepRate;
000380 964842rr         937         MOV.B   ES,#SEG( _3 )
000384 9908rrrr         938         MOV.W   R0,#SOF( _3 )
000388 9A08000F         939         MOV.W   [R0],#0FH
                        940 ; keyscan.c  203        
                        941 ; keyscan.c  204                                                        KeyScanStream->Put( KeySc
                            anStream, &Key);
00038C 964842rr         943         MOV.B   ES,#SEG( _KeyScanStream )
000390 9918rrrr         944         MOV.W   R1,#SOF( _KeyScanStream )
000394 8B01             945         MOV.W   R0,[R1+]
000396 8A11             946         MOV.W   R1,[R1]
000398 862C42           947         MOV.B   ES,R1L
00039B 8C400E           948         MOV.W   R4,[R0+14]
00039E 8C5010           949         MOV.W   R5,[R0+16]
0003A1 9938rrrr         950         MOV.W   R3,#SEG( _5 )
0003A5 9928rrrr         951         MOV.W   R2,#SOF( _5 )
0003A9 C4rrrrrr         952         FCALL   __ICALL
                        953 ; keyscan.c  205                                                }
                        954 ; keyscan.c  206                }
                        955 ; keyscan.c  207                break;
0003AD FE06             957         BR      _36
0003B0                  959 _23:
0003B0 964842rr         960         MOV.B   ES,#SEG( _3 )
0003B4 9908rrrr         961         MOV.W   R0,#SOF( _3 )
0003B8 BA01             962         MOV.W   [R0],#01H
                        963 ; keyscan.c  208        
                        964 ; keyscan.c  209                default:
                        965 ; keyscan.c  210                        break;
                        966 ; keyscan.c  211                                }/*end switch*/
0003BA                  968 _36:
                        969 ; keyscan.c  212        
                        970 ; keyscan.c  213                                OldKeyCode = Key.Code;
0003BA 964842rr         972         MOV.B   ES,#SEG( _5 )
0003BE 9908rrrr         973         MOV.W   R0,#SOF( _5 )
0003C2 8200             974         MOV.B   R0L,[R0]
0003C4 964842rr         975         MOV.B   ES,#SEG( _7 )
0003C8 9918rrrr         976         MOV.W   R1,#SOF( _7 )
0003CC 8209             977         MOV.B   [R1],R0L
                        979         BR      _9
0003CE D5FE54          +979         JMP.L   _9
                        980 ; keyscan.c  214                        }
                        981 ; keyscan.c  215                        /*End task loop*/
                        982 ; keyscan.c  216        } /* End Keyscan task  */
0003D1 2F30             984         POP.W   R4, R5
0003D3 D680             986         RET
                        988 ; keyscan.c  217        
                        989 ; keyscan.c  218        
                        990 ; keyscan.c  219        
                        997         EXTRN   HCODE(_newTStream)
000009                 1001         RSEG    KEYSCAN_CLR_FA
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  11

ADDR   CODE            LINE SOURCELINE
000009 RESERVED        1002         ALIGN   1
000009
00000A                 1003 _KeyScanTimer:  DS      4
   |  RESERVED             
00000D
                       1006         EXTRN   HCODE(_newTTimer)
                       1009         EXTRN   HCODE(_KS_purgequeue)
                       1014         EXTRN   HCODE(_KeyboardGet)
                       1017         PUBLIC  _KeyScanStream
                       1018         ALIGN   1
00000E                 1019 _KeyScanStream: DS      4
   |  RESERVED             
000011
                       1020         EXTRN   HCODE(__ICALL)
                       1021         EXTRN   DATA(__lc_ub_xvwbuffer)
                       1022         EXTRN   DATA(__lc_ue_xvwbuffer)
                       1023         CALLS   'keyscan', 'newTStream'
                       1024         CALLS   'keyscan', 'KS_purgequeue'
                       1025         CALLS   'keyscan', 'newTTimer'
                       1026         CALLS   'keyscan', 'KeyboardGet'
