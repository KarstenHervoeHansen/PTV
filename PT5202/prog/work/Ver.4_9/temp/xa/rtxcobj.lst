XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   1
F:\PT5202\prog\work\Ver.4_9\temp\xa\rtxcobj.src
ADDR   CODE            LINE SOURCELINE
                          1 ; XA C compiler v2.0 r2                   SN00085795-Ccz (c) 1998 TASKING, Inc.
                          2 ; options: -A1 -Cxag3 -e -g -IcF:\PT5202\prog\include
                          3 ;          -IF:\PT5202\prog\rtxc\xa\include -I. -Ml -O2 -s
                          5 $NOZPAGE
                          6         NAME    RTXCOBJ
                         10 ; rtxcobj.c    1        /************************************************************************
                            ****/ 
                         11 ; rtxcobj.c    2        /* MODULE:                                                               
                               */
                         12 ; rtxcobj.c    3        /*   RtxcObj.c - Methodes for:                                           
                               */
                         13 ; rtxcobj.c    4        /*               TTimer objects created 5/5-99 by. Tomas D. Kappelgaard. 
                               */
                         14 ; rtxcobj.c    5        /*               TThread objects created x/5-99 by. Tomas D. Kappelgaard.
                               */
                         15 ; rtxcobj.c    6        /*               TStream objects created 20/10-99 by. Tomas D. Kappelgaar
                            d. */
                         16 ; rtxcobj.c    7        /*                                                                       
                               */
                         17 ; rtxcobj.c    8        /************************************************************************
                            ****/
                         18 ; rtxcobj.c    9        /* FUNCTIONS:                                                            
                               */
                         19 ; rtxcobj.c   10        /*               void *Timer_Create(SEMA Event);                         
                               */
                         20 ; rtxcobj.c   11        /*               void Timer_Period_Set(TTimer Timer, int Time);          
                               */
                         21 ; rtxcobj.c   12        /*               int Timer_Period_Get(TTimer Timer);                     
                               */
                         22 ; rtxcobj.c   13        /*               void Timer_Tick(TTimer Timer, int Time);                
                               */
                         23 ; rtxcobj.c   14        /*               void * Thread_Create(int Priority, void (far *entry)(voi
                            d))*/
                         24 ; rtxcobj.c   15        /*                                                                       
                               */
                         25 ; rtxcobj.c   16        /* TASKS:                                                                
                               */
                         26 ; rtxcobj.c   17        /*                                                                       
                               */
                         27 ; rtxcobj.c   18        /*                                                                       
                               */
                         28 ; rtxcobj.c   19        /************************************************************************
                            ****/
                         29 ; rtxcobj.c   20        /* Edit log SAA 991005 */
                         30 ; rtxcobj.c   21        /* In line 369(++)                                                   */  
                             
                         31 ; rtxcobj.c   22        /*      removed '&' from address of array of chars (name IS pointer) */
                         32 ; rtxcobj.c   23        /* In Object EventList, function Wait : removed Timer part if        */
                         33 ; rtxcobj.c   24        /*                paarmeter *TimeOut is NULL pointer                 */
                         34 ; rtxcobj.c   25        
                         35 ; rtxcobj.c   26        
                         36 ; rtxcobj.c   27        
                         37 ; rtxcobj.c   28        
                         38 ; rtxcobj.c   29        
                         39 ; rtxcobj.c   30        /*
                         40 ; rtxcobj.c   31         *   PTV software for PT5765
                         41 ; rtxcobj.c   32         *   Copyright (c)
                         42 ; rtxcobj.c   33         *   ProTeleVision Technologies A/S.
                         43 ; rtxcobj.c   34         *   ALL RIGHTS RESERVED
                         44 ; rtxcobj.c   35        */
                         45 ; rtxcobj.c   36        /************************************************************************
                            ****/
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   2

ADDR   CODE            LINE SOURCELINE
                         46 ; rtxcobj.c   37        
                         47 ; rtxcobj.c   38        #include <stdlib.h>
                         62 ; rtxcobj.c   39        //#include "rtxcobj.h"
                         63 ; rtxcobj.c   40        #include "define.h"
                         66 ; rtxcobj.c   41        #include "rtxcapi.h"
                        192 ; rtxcobj.c   42        #include "ctask.h"
                        195 ; rtxcobj.c   43        #include "cclock.h"
                        198 ; rtxcobj.c   44        #include "cpart.h"
                        201 ; rtxcobj.c   45        #include "csema.h"
                        204 ; rtxcobj.c   46        #include "cres.h"
                        207 ; rtxcobj.c   47        #include "cqueue.h"
                        210 ; rtxcobj.c   48        #include "stack.h"
                        215 ; rtxcobj.c   49        #include "objectid.h"
                        218 ; rtxcobj.c   50        //#include "evlog.h"
                        219 ; rtxcobj.c   51        
                        220 ; rtxcobj.c   52        
                        221 ; rtxcobj.c   53        /**************** new and delete *****************/
                        222 ; rtxcobj.c   54        long HeapAlloc;
                        223 ; rtxcobj.c   55        
                        224 ; rtxcobj.c   56        int malloc2(void* arg)
                        225 ; rtxcobj.c   57        {
000000                  226 RTXCOBJ_PR      SEGMENT HCODE
000000                  227         RSEG    RTXCOBJ_PR
                        228         ALIGN   1
                        230         PUBLIC  _malloc2
000000                  231 _malloc2:
000000 0F30             235         PUSH.W  R4, R5
                        239 ; rtxcobj.c   58         HeapAlloc+=((*(unsigned long*)arg)+4+15)&0xFFF0;
000002 964842rr         241         MOV.B   ES,#SEG( _HeapAlloc )
000006 9938rrrr         242         MOV.W   R3,#SOF( _HeapAlloc )
00000A 8B23             243         MOV.W   R2,[R3+]
00000C 8A33             244         MOV.W   R3,[R3]
00000E 8951             245         MOV.W   R5,R1
000010 8940             246         MOV.W   R4,R0
000012 8915             247         MOV.W   R1,R5
000014 8904             248         MOV.W   R0,R4
000016 862C42           251         MOV.B   ES,R1L
000019 8C1002           252         MOV.W   R1,[R0+2]
00001C 8A00             253         MOV.W   R0,[R0]
00001E 99000013         254         ADD.W   R0,#013H
000022 99110000         255         ADDC.W  R1,#00H
000026 9905FFF0         256         AND.W   R0,#0FFF0H
00002A 99150000         257         AND.W   R1,#00H
00002E 0920             258         ADD.W   R2,R0
000030 1931             259         ADDC.W  R3,R1
000032 964842rr         260         MOV.B   ES,#SEG( _HeapAlloc )
000036 9908rrrr         261         MOV.W   R0,#SOF( _HeapAlloc )
00003A 8B28             262         MOV.W   [R0+],R2
00003C 8A38             263         MOV.W   [R0],R3
                        264 ; rtxcobj.c   59         *(void**)arg=malloc(*(unsigned int*)arg);
00003E 8915             266         MOV.W   R1,R5
000040 8904             267         MOV.W   R0,R4
000042 862C42           268         MOV.B   ES,R1L
000045 8A00             269         MOV.W   R0,[R0]
                        270         CALL    _malloc
000047 C4rrrrrr        +270 ;       FCALL   _malloc
00004B 86AC42           272         MOV.B   ES,R5L
00004E 8A0C             273         MOV.W   [R4],R0
000050 8C1C02           274         MOV.W   [R4+2],R1
                        275 ; rtxcobj.c   60         return(0);
000053 B900             277         MOV.W   R0,#00H
                        278 ; rtxcobj.c   61        }
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   3

ADDR   CODE            LINE SOURCELINE
000055 2F30             280         POP.W   R4, R5
000057 D680             282         RET
                        284 ; rtxcobj.c   62        void* new(long size)
                        285 ; rtxcobj.c   63        {
000059 00               286         ALIGN   1
                        288         PUBLIC  _new
00005A                  289 _new:
00005A A97C             293         ADDS.W  R7,#0CH
00005C 8C1F02           297         MOV.W   [R7+2],R1
00005F 8A0F             298         MOV.W   [R7],R0
                        299 ; rtxcobj.c   64         KS_user(malloc2,&size);
000061 9918rrrr         301         MOV.W   R1,#SEG( _malloc2 )
000065 9908rrrr         302         MOV.W   R0,#SOF( _malloc2 )
000069 9168rr           303         MOV.B   R3L,#SEG( __lc_bs )
00006C 7177             304         XOR.B   R3H,R3H
00006E 8927             305         MOV.W   R2,R7
                        306         CALL    _KS_user
000070 C4rrrrrr        +306 ;       FCALL   _KS_user
                        308 ; rtxcobj.c   65        // if (!size)
                        309 ; rtxcobj.c   66        //  LogEvent(EventOutOfMemmory,0);
                        310 ; rtxcobj.c   67         return((void*)size);
000074 8C1702           312         MOV.W   R1,[R7+2]
000077 8A07             313         MOV.W   R0,[R7]
                        317 ; rtxcobj.c   68        } 
000079 A974             319         ADDS.W  R7,#04H
00007B D680             321         RET
                        323 ; rtxcobj.c   69        
                        324 ; rtxcobj.c   70        int free2(void* addr)
                        325 ; rtxcobj.c   71        {
00007D 00               326         ALIGN   1
                        328         PUBLIC  _free2
00007E                  329 _free2:
                        335 ; rtxcobj.c   72         free(addr);
                        337         CALL    _free
00007E C4rrrrrr        +337 ;       FCALL   _free
                        339 ; rtxcobj.c   73         return(0);
000082 B900             341         MOV.W   R0,#00H
                        342 ; rtxcobj.c   74        }
000084 D680             344         RET
                        346 ; rtxcobj.c   75        void delete(void* addr)
                        347 ; rtxcobj.c   76        {
                        348         ALIGN   1
                        350         PUBLIC  _delete
000086                  351 _delete:
                        357 ; rtxcobj.c   77         KS_user(free2,addr);
000086 8931             359         MOV.W   R3,R1
000088 8920             360         MOV.W   R2,R0
00008A 9918rrrr         361         MOV.W   R1,#SEG( _free2 )
00008E 9908rrrr         362         MOV.W   R0,#SOF( _free2 )
                        363         CALL    _KS_user
000092 C4rrrrrr        +363 ;       FCALL   _KS_user
                        367 ; rtxcobj.c   78        } 
000096 D680             369         RET
                        371 ; rtxcobj.c   79        
                        372 ; rtxcobj.c   80        
                        373 ; rtxcobj.c   81        void Sleep(int time)
                        374 ; rtxcobj.c   82        {
                        375         ALIGN   1
                        377         PUBLIC  _Sleep
000098                  378 _Sleep:
                        384 ; rtxcobj.c   83         KS_delay(0,time/CLKTICK);
000098 8910             386         MOV.W   R1,R0
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   4

ADDR   CODE            LINE SOURCELINE
00009A 9819             387         SEXT.W  R1
00009C E9090008         388         DIV.D   R0,#08H
0000A0 8910             390         MOV.W   R1,R0
0000A2 910800           391         MOV.B   R0L,#00H
                        392         CALL    _KS_delay
0000A5 C4rrrrrr        +392 ;       FCALL   _KS_delay
                        393 ; rtxcobj.c   84        }       
0000A9 D680             395         RET
                        397 ; rtxcobj.c   85        
                        398 ; rtxcobj.c   86        /**************** TEvent Object *****************/
                        399 ; rtxcobj.c   87        typedef struct TEvent {
                        400 ; rtxcobj.c   88          /* Public: */
                        401 ; rtxcobj.c   89                int     ObjectID;
                        402 ; rtxcobj.c   90                void    (*TEvent)(struct TEvent *this, char *Name);
                        403 ; rtxcobj.c   91                void    (*_TEvent)(struct TEvent *this);
                        404 ; rtxcobj.c   92                int     (*Wait)(struct TEvent *this, long *TimeOut);
                        405 ; rtxcobj.c   93                void    (*Set)(struct TEvent *this);
                        406 ; rtxcobj.c   94                void    (*Clear)(struct TEvent *this);
                        407 ; rtxcobj.c   95                int     (*IsSet)(struct TEvent *this);
                        408 ; rtxcobj.c   96                SEMA    ID;
                        409 ; rtxcobj.c   97                char *  Name;
                        410 ; rtxcobj.c   98          /* Private: */
                        411 ; rtxcobj.c   99        } TEvent;
                        412 ; rtxcobj.c  100        
                        413 ; rtxcobj.c  101        
                        414 ; rtxcobj.c  102        struct TEvent   TEventPartition[DNSEMAS];
                        415 ; rtxcobj.c  103        MAP             TEventMap=0;
000000                  416 RTXCOBJ_INI_FA  SEGMENT HDATA INSEGMENT INIT
000000                  417         RSEG    RTXCOBJ_INI_FA
                        420         PUBLIC  _TEventMap
000000                  421 _TEventMap:
                        422 ; rtxcobj.c  104        
                        423 ; rtxcobj.c  105        
                        424 ; rtxcobj.c  106        void    TEvent_TEvent(struct TEvent *this, char *Name)
                        425 ; rtxcobj.c  107        {
000000 00               426         DB      000H
0000AB                  427         RSEG    RTXCOBJ_PR
0000AB 00               428         ALIGN   1
                        430         PUBLIC  _TEvent_TEvent
0000AC                  431 _TEvent_TEvent:
0000AC 0F30             467         PUSH.W  R4, R5
0000AE A978             469         ADDS.W  R7,#08H
                        477 ; rtxcobj.c  108        
                        478 ; rtxcobj.c  109         struct TEvent *Ptr;
                        479 ; rtxcobj.c  110        
                        480 ; rtxcobj.c  111         if(this>(struct TEvent *)0)
0000B0 99140000         482         CMP.W   R1,#00H
0000B4 F202             483         BNE     _6
0000B6 99040000         484         CMP.W   R0,#00H
0000B6 99040000         484         CMP.W   R0,#00H
0000BA                  485 _6:
0000BA F92D             486         BL      _5
                        487 ; rtxcobj.c  112         {
                        488 ; rtxcobj.c  113          Ptr=this;
0000BC 8951             490         MOV.W   R5,R1
0000BE 8940             491         MOV.W   R4,R0
                        493 ; rtxcobj.c  114          this->ID=NSEMAS+1;
0000C0 8C1F06           495         MOV.W   [R7+6],R1
0000C3 8C0F04           496         MOV.W   [R7+4],R0
0000C6 9900001A         497         ADD.W   R0,#01AH
0000CA 8C1F02           500         MOV.W   [R7+2],R1
0000CD 8A0F             501         MOV.W   [R7],R0
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   5

ADDR   CODE            LINE SOURCELINE
0000CF 8C1706           502         MOV.W   R1,[R7+6]
0000D2 8C0704           503         MOV.W   R0,[R7+4]
0000D5 862C42           504         MOV.B   ES,R1L
0000D8 B4011A           505         MOV.B   [R0+26],#01H
                        508 ; rtxcobj.c  115          while(Ptr!=&TEventPartition[0])
0000DB 9914rrrr         510         CMP.W   R1,#SEG( _TEventPartition )
0000DF F203             511         BNE     _7
0000E1 9904rrrr         512         CMP.W   R0,#SOF( _TEventPartition )
0000E1 9904rrrr00       512         CMP.W   R0,#SOF( _TEventPartition )
0000E6                  513 _7:
0000E6 F30D             516         BEQ     _4
0000E6 F30D             516         BEQ     _4
0000E8                  517 _3:
                        518 ; rtxcobj.c  116          {
                        519 ; rtxcobj.c  117           this->ID++;
0000E8 8C1702           521         MOV.W   R1,[R7+2]
0000EB 8A07             522         MOV.W   R0,[R7]
0000ED 862C42           523         MOV.B   ES,R1L
0000F0 A201             524         ADDS.B  [R0],#01H
                        525 ; rtxcobj.c  118           Ptr--;
0000F2 99420020         527         SUB.W   R4,#020H
0000F6 9954rrrr         531         CMP.W   R5,#SEG( _TEventPartition )
0000FA F2F6             532         BNE     _3
0000FC 9944rrrr         533         CMP.W   R4,#SOF( _TEventPartition )
000100 F2F3             534         BNE     _3
                        535 ; rtxcobj.c  119          }
000102                  537 _4:
                        538 ; rtxcobj.c  120         this->ObjectID=TEventID;
000102 8C1706           540         MOV.W   R1,[R7+6]
000105 8C0704           541         MOV.W   R0,[R7+4]
000108 862C42           542         MOV.B   ES,R1L
00010B BA01             543         MOV.W   [R0],#01H
                        546 ; rtxcobj.c  121         this->Name=Name;
00010D 862C42           548         MOV.B   ES,R1L
000110 8C281C           549         MOV.W   [R0+28],R2
000113 8C381E           550         MOV.W   [R0+30],R3
                        551 ; rtxcobj.c  122         }
000116                  553 _5:
                        554 ; rtxcobj.c  123        }
000116 99700008         556         ADD.W   R7,#08H
00011A 2F30             558         POP.W   R4, R5
00011C D680             560         RET
                        565 ; rtxcobj.c  124        
                        566 ; rtxcobj.c  125        
                        567 ; rtxcobj.c  126        void    TEvent__TEvent(struct TEvent *this)
                        568 ; rtxcobj.c  127        {
                        569         ALIGN   1
                        571         PUBLIC  _TEvent__TEvent
00011E                  572 _TEvent__TEvent:
                        578 ; rtxcobj.c  128         if(this>(struct TEvent *)0)
00011E 99140000         580         CMP.W   R1,#00H
000122 F202             581         BNE     _10
000124 99040000         582         CMP.W   R0,#00H
000124 99040000         582         CMP.W   R0,#00H
000128                  583 _10:
000128 F903             584         BL      _9
                        585 ; rtxcobj.c  129          this->ID=0;
00012A 862C42           587         MOV.B   ES,R1L
00012D B4001A           588         MOV.B   [R0+26],#00H
00012D B4001A           588         MOV.B   [R0+26],#00H
000130                  589 _9:
                        590 ; rtxcobj.c  130        }
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   6

ADDR   CODE            LINE SOURCELINE
000130 D680             592         RET
                        595 ; rtxcobj.c  131        
                        596 ; rtxcobj.c  132        
                        597 ; rtxcobj.c  133        int     TEvent_Waitt(struct TEvent *this, long *TimeOut)
                        598 ; rtxcobj.c  134        {
                        599         ALIGN   1
                        601         PUBLIC  _TEvent_Waitt
000132                  602 _TEvent_Waitt:
000132 0F30             606         PUSH.W  R4, R5
000134 A97C             608         ADDS.W  R7,#0CH
                        616 ; rtxcobj.c  135        
                        617 ; rtxcobj.c  136         int ret;
                        618 ; rtxcobj.c  137        
                        619 ; rtxcobj.c  138         if(this==0)
000136 8951             621         MOV.W   R5,R1
000138 8940             622         MOV.W   R4,R0
00013A 6910             623         OR.W    R1,R0
00013C F202             626         BNE     _11
                        627 ; rtxcobj.c  139          return(0);
00013E B900             629         MOV.W   R0,#00H
000140 FE4D             630         BR      _22
000140 FE4D             630         BR      _22
000142                  631 _11:
                        636 ; rtxcobj.c  140         if(TimeOut==0)
000142 8913             638         MOV.W   R1,R3
000144 8902             639         MOV.W   R0,R2
000146 6932             640         OR.W    R3,R2
000148 F208             643         BNE     _12
                        644 ; rtxcobj.c  141         {
                        645 ; rtxcobj.c  142          KS_wait(this->ID);
00014A 86AC42           647         MOV.B   ES,R5L
00014D 84041A           648         MOV.B   R0L,[R4+26]
                        650         CALL    _KS_wait
000150 C4rrrrrr        +650 ;       FCALL   _KS_wait
                        651 ; rtxcobj.c  143          return(-1);
000154 9908FFFF         653         MOV.W   R0,#0FFFFH
000158 FE41             654         BR      _22
                        655 ; rtxcobj.c  144         }
00015A                  657 _12:
                        661 ; rtxcobj.c  145         if(*TimeOut<0)
00015A 8C1F02           663         MOV.W   [R7+2],R1
00015D 8A0F             664         MOV.W   [R7],R0
00015F 862C42           665         MOV.B   ES,R1L
000162 8C1002           666         MOV.W   R1,[R0+2]
000165 8A00             667         MOV.W   R0,[R0]
000167 8C3702           670         MOV.W   R3,[R7+2]
00016A 8A27             671         MOV.W   R2,[R7]
00016C 866C42           672         MOV.B   ES,R3L
00016F 9C24020000       673         CMP.W   [R2+2],#00H
000174 FC07             674         BGT     _13
000176 FB03             675         BLT     _23
000178 9A240000         676         CMP.W   [R2],#00H
00017C F003             677         BCC     _13
00017C F003             677         BCC     _13
00017E                  678 _23:
                        679 ; rtxcobj.c  146          return(-1);
00017E 9908FFFF         681         MOV.W   R0,#0FFFFH
000182 FE2C             682         BR      _22
000182 FE2C             682         BR      _22
000184                  683 _13:
                        688 ; rtxcobj.c  147         if(*TimeOut>CLKTICK)
000184 B930             690         MOV.W   R3,#00H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   7

ADDR   CODE            LINE SOURCELINE
000186 99280008         691         MOV.W   R2,#08H
00018A 4913             692         CMP.W   R1,R3
00018C FB20             693         BLT     _16
00018E FC02             694         BGT     _24
000190 4902             695         CMP.W   R0,R2
000192 F91D             696         BL      _16
000192 F91D             696         BL      _16
000194                  697 _24:
                        698 ; rtxcobj.c  148         {
                        699 ; rtxcobj.c  149          ret=KS_waitt(this->ID,*TimeOut/CLKTICK);
000194 86AC42           701         MOV.B   ES,R5L
000197 84841A           702         MOV.B   R4L,[R4+26]
00019A C4rrrrrr         704         FCALL   __SDIVL
00019E 8910             705         MOV.W   R1,R0
0001A0 8108             706         MOV.B   R0L,R4L
                        707         CALL    _KS_waitt
0001A2 C4rrrrrr        +707 ;       FCALL   _KS_waitt
                        709 ; rtxcobj.c  150          if(ret==RC_GOOD)
0001A6 6900             711         OR.W    R0,R0
0001A8 F203             712         BNE     _14
                        713 ; rtxcobj.c  151           return(-1);
0001AA 9908FFFF         715         MOV.W   R0,#0FFFFH
0001AE FE16             717         BR      _22
0001AE FE16             717         BR      _22
0001B0                  718 _14:
                        721 ; rtxcobj.c  152          else if(ret==RC_TIMEOUT)
0001B0 99040005         723         CMP.W   R0,#05H
0001B4 F20A             724         BNE     _15
                        725 ; rtxcobj.c  153          {
                        726 ; rtxcobj.c  154           *TimeOut=0;
0001B6 8C1702           728         MOV.W   R1,[R7+2]
0001B9 8A07             729         MOV.W   R0,[R7]
0001BB 862C42           730         MOV.B   ES,R1L
0001BE BA00             731         MOV.W   [R0],#00H
0001C0 BC0002           732         MOV.W   [R0+2],#00H
                        735 ; rtxcobj.c  155           return(-1);
0001C3 9908FFFF         737         MOV.W   R0,#0FFFFH
0001C7 FE0A             739         BR      _22
                        740 ; rtxcobj.c  156          }
0001CA                  742 _15:
                        743 ; rtxcobj.c  157          else 
                        744 ; rtxcobj.c  158           return(0);
0001CA B900             746         MOV.W   R0,#00H
0001CC FE07             747         BR      _22
                        748 ; rtxcobj.c  159         }
0001CE                  750 _16:
                        752 ; rtxcobj.c  160         KS_wait(this->ID);
0001CE 86AC42           754         MOV.B   ES,R5L
0001D1 84041A           755         MOV.B   R0L,[R4+26]
                        756         CALL    _KS_wait
0001D4 C4rrrrrr        +756 ;       FCALL   _KS_wait
                        757 ; rtxcobj.c  161         return(-1);
0001D8 9908FFFF         759         MOV.W   R0,#0FFFFH
                        760 ; rtxcobj.c  162        }
0001DC                  762 _22:
0001DC A974             763         ADDS.W  R7,#04H
0001DE 2F30             765         POP.W   R4, R5
0001E0 D680             767         RET
                        770 ; rtxcobj.c  163        
                        771 ; rtxcobj.c  164        
                        772 ; rtxcobj.c  165        void    TEvent_Signal(struct TEvent *this)
                        773 ; rtxcobj.c  166        {
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   8

ADDR   CODE            LINE SOURCELINE
                        774         ALIGN   1
                        776         PUBLIC  _TEvent_Signal
0001E2                  777 _TEvent_Signal:
                        783 ; rtxcobj.c  167         if(this>(struct TEvent *)0)
0001E2 99140000         785         CMP.W   R1,#00H
0001E6 F202             786         BNE     _27
0001E8 99040000         787         CMP.W   R0,#00H
0001E8 99040000         787         CMP.W   R0,#00H
0001EC                  788 _27:
0001EC F905             789         BL      _26
                        790 ; rtxcobj.c  168         {
                        791 ; rtxcobj.c  169          KS_signal(this->ID);
0001EE 862C42           793         MOV.B   ES,R1L
0001F1 84001A           794         MOV.B   R0L,[R0+26]
                        796         CALL    _KS_signal
0001F4 C4rrrrrr        +796 ;       FCALL   _KS_signal
                        797 ; rtxcobj.c  170         }
0001F8                  799 _26:
                        800 ; rtxcobj.c  171        }
0001F8 D680             802         RET
                        804 ; rtxcobj.c  172        
                        805 ; rtxcobj.c  173        
                        806 ; rtxcobj.c  174        void    TEvent_Pend(struct TEvent *this)
                        807 ; rtxcobj.c  175        {
                        808         ALIGN   1
                        810         PUBLIC  _TEvent_Pend
0001FA                  811 _TEvent_Pend:
                        817 ; rtxcobj.c  176         if(this>(struct TEvent *)0)
0001FA 99140000         819         CMP.W   R1,#00H
0001FE F202             820         BNE     _29
000200 99040000         821         CMP.W   R0,#00H
000200 99040000         821         CMP.W   R0,#00H
000204                  822 _29:
000204 F905             823         BL      _28
                        824 ; rtxcobj.c  177         {
                        825 ; rtxcobj.c  178          KS_pend(this->ID);
000206 862C42           827         MOV.B   ES,R1L
000209 84001A           828         MOV.B   R0L,[R0+26]
                        830         CALL    _KS_pend
00020C C4rrrrrr        +830 ;       FCALL   _KS_pend
                        831 ; rtxcobj.c  179         }
000210                  833 _28:
                        834 ; rtxcobj.c  180        }
000210 D680             836         RET
                        838 ; rtxcobj.c  181        
                        839 ; rtxcobj.c  182        
                        840 ; rtxcobj.c  183        int     TEvent_InqSema(struct TEvent *this)
                        841 ; rtxcobj.c  184        {
                        842         ALIGN   1
                        844         PUBLIC  _TEvent_InqSema
000212                  845 _TEvent_InqSema:
                        851 ; rtxcobj.c  185         if(this>(struct TEvent *)0)
000212 99140000         853         CMP.W   R1,#00H
000216 F202             854         BNE     _32
000218 99040000         855         CMP.W   R0,#00H
000218 99040000         855         CMP.W   R0,#00H
00021C                  856 _32:
00021C F908             857         BL      _30
                        858 ; rtxcobj.c  186         {
                        859 ; rtxcobj.c  187          return(KS_inqsema(this->ID));
00021E 862C42           861         MOV.B   ES,R1L
000221 84001A           862         MOV.B   R0L,[R0+26]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page   9

ADDR   CODE            LINE SOURCELINE
                        864         CALL    _KS_inqsema
000224 C4rrrrrr        +864 ;       FCALL   _KS_inqsema
000228 8100             865         MOV.B   R0L,R0L
00022A 9019             866         SEXT.B  R0H
00022C D680             867         RET
                        868 ; rtxcobj.c  188         }
00022E                  870 _30:
                        871 ; rtxcobj.c  189         else
                        872 ; rtxcobj.c  190         {
                        873 ; rtxcobj.c  191          return(0);
00022E B900             875         MOV.W   R0,#00H
                        876 ; rtxcobj.c  192         }
                        877 ; rtxcobj.c  193        }
000230                  879 _31:
000230 D680             880         RET
                        882 ; rtxcobj.c  194        
                        883 ; rtxcobj.c  195        
                        884 ; rtxcobj.c  196        
                        885 ; rtxcobj.c  197        TEvent  *newTEvent(char *Name)
                        887 ; rtxcobj.c  198        {
                        888         ALIGN   1
                        890         PUBLIC  _newTEvent
000232                  891 _newTEvent:
000232 0F30             897         PUSH.W  R4, R5
000234 A978             899         ADDS.W  R7,#08H
000236 8C1F06           902         MOV.W   [R7+6],R1
000239 8C0F04           903         MOV.W   [R7+4],R0
                        909 ; rtxcobj.c  199        
                        910 ; rtxcobj.c  200        /* VAR */
                        911 ; rtxcobj.c  201         TEvent *Event;
                        912 ; rtxcobj.c  202        
                        913 ; rtxcobj.c  203        /* BEGIN */
                        914 ; rtxcobj.c  204         if(TEventMap==0)
00023C 964842rr         916         MOV.B   ES,#SEG( _TEventMap )
000240 9908rrrr         917         MOV.W   R0,#SOF( _TEventMap )
000244 8200             918         MOV.B   R0L,[R0]
000246 F214             919         BNE     _34
                        920 ; rtxcobj.c  205         {
                        921 ; rtxcobj.c  206          TEventMap=KS_create_part(&TEventPartition,sizeof(struct TEvent),DNSEMAS
                            );  /* Create event map */
000248 9918rrrr         923         MOV.W   R1,#SEG( _TEventPartition )
00024C 9908rrrr         924         MOV.W   R0,#SOF( _TEventPartition )
000250 99280020         925         MOV.W   R2,#020H
000254 99380080         926         MOV.W   R3,#080H
                        927         CALL    _KS_create_part
000258 C4rrrrrr        +927 ;       FCALL   _KS_create_part
00025C 964842rr         928         MOV.B   ES,#SEG( _TEventMap )
000260 9918rrrr         929         MOV.W   R1,#SOF( _TEventMap )
000264 8209             930         MOV.B   [R1],R0L
                        931 ; rtxcobj.c  207          if(TEventMap==0)
000266 6100             933         OR.B    R0L,R0L
000268 F203             934         BNE     _34
                        935 ; rtxcobj.c  208           return(0);
00026A B910             937         MOV.W   R1,#00H
00026C B900             938         MOV.W   R0,#00H
00026E FE71             939         BR      _39
                        940 ; rtxcobj.c  209         }
000270                  942 _34:
                        945 ; rtxcobj.c  210         Event=KS_alloc(TEventMap);
000270 964842rr         947         MOV.B   ES,#SEG( _TEventMap )
000274 9908rrrr         948         MOV.W   R0,#SOF( _TEventMap )
000278 8200             949         MOV.B   R0L,[R0]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  10

ADDR   CODE            LINE SOURCELINE
                        950         CALL    _KS_alloc
00027A C4rrrrrr        +950 ;       FCALL   _KS_alloc
                        952 ; rtxcobj.c  211         if(Event==0)
00027E 8931             954         MOV.W   R3,R1
000280 8920             955         MOV.W   R2,R0
000282 6910             956         OR.W    R1,R0
000284 F203             959         BNE     _35
                        960 ; rtxcobj.c  212         {
                        961 ; rtxcobj.c  213        //  LogEvent(EventNoMoreEvents,0);
                        962 ; rtxcobj.c  214          return(0);    
000286 B910             964         MOV.W   R1,#00H
000288 B900             965         MOV.W   R0,#00H
00028A FE63             966         BR      _39
                        967 ; rtxcobj.c  215         }
00028C                  969 _35:
                        974 ; rtxcobj.c  216         Event->TEvent=TEvent_TEvent;
00028C 8913             976         MOV.W   R1,R3
00028E 8902             977         MOV.W   R0,R2
000290 99000002         978         ADD.W   R0,#02H
000294 862C42           979         MOV.B   ES,R1L
000297 9A08rrrr         980         MOV.W   [R0],#SOF( _TEvent_TEvent )
00029B 9D080002rrrr     981         MOV.W   [R0+2],#SEG( _TEvent_TEvent )
                        982 ; rtxcobj.c  217         Event->_TEvent=TEvent__TEvent;
0002A1 8953             984         MOV.W   R5,R3
0002A3 8942             985         MOV.W   R4,R2
0002A5 99400006         986         ADD.W   R4,#06H
0002A9 86AC42           987         MOV.B   ES,R5L
0002AC 9A48rrrr         988         MOV.W   [R4],#SOF( _TEvent__TEvent )
0002B0 9D480002rrrr     989         MOV.W   [R4+2],#SEG( _TEvent__TEvent )
                        990 ; rtxcobj.c  218         Event->Wait=TEvent_Waitt;
0002B6 8953             992         MOV.W   R5,R3
0002B8 8942             993         MOV.W   R4,R2
0002BA 9940000A         994         ADD.W   R4,#0AH
0002BE 86AC42           995         MOV.B   ES,R5L
0002C1 9A48rrrr         996         MOV.W   [R4],#SOF( _TEvent_Waitt )
0002C5 9D480002rrrr     997         MOV.W   [R4+2],#SEG( _TEvent_Waitt )
                        998 ; rtxcobj.c  219         Event->Set=TEvent_Signal;
0002CB 8953            1000         MOV.W   R5,R3
0002CD 8942            1001         MOV.W   R4,R2
0002CF 9940000E        1002         ADD.W   R4,#0EH
0002D3 86AC42          1003         MOV.B   ES,R5L
0002D6 9A48rrrr        1004         MOV.W   [R4],#SOF( _TEvent_Signal )
0002DA 9D480002rrrr    1005         MOV.W   [R4+2],#SEG( _TEvent_Signal )
                       1006 ; rtxcobj.c  220         Event->Clear=TEvent_Pend;
0002E0 8953            1008         MOV.W   R5,R3
0002E2 8942            1009         MOV.W   R4,R2
0002E4 99400012        1010         ADD.W   R4,#012H
0002E8 86AC42          1011         MOV.B   ES,R5L
0002EB 9A48rrrr        1012         MOV.W   [R4],#SOF( _TEvent_Pend )
0002EF 9D480002rrrr    1013         MOV.W   [R4+2],#SEG( _TEvent_Pend )
                       1014 ; rtxcobj.c  221         Event->IsSet=TEvent_InqSema;
0002F5 8953            1016         MOV.W   R5,R3
0002F7 8942            1017         MOV.W   R4,R2
0002F9 99400016        1018         ADD.W   R4,#016H
0002FD 86AC42          1019         MOV.B   ES,R5L
000300 9A48rrrr        1020         MOV.W   [R4],#SOF( _TEvent_InqSema )
000304 9D480002rrrr    1021         MOV.W   [R4+2],#SEG( _TEvent_InqSema )
                       1022 ; rtxcobj.c  222         Event->TEvent(Event,Name);
00030A 862C42          1024         MOV.B   ES,R1L
00030D 8A40            1025         MOV.W   R4,[R0]
00030F 8C5002          1026         MOV.W   R5,[R0+2]
000312 8C3F02          1027         MOV.W   [R7+2],R3
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  11

ADDR   CODE            LINE SOURCELINE
000315 8A2F            1028         MOV.W   [R7],R2
000317 8913            1029         MOV.W   R1,R3
000319 8902            1030         MOV.W   R0,R2
00031B 8C3706          1035         MOV.W   R3,[R7+6]
00031E 8C2704          1036         MOV.W   R2,[R7+4]
000321 C4rrrrrr        1037         FCALL   __ICALL
                       1043 ; rtxcobj.c  223         if(Event->ID>(NSEMAS+DNSEMAS+1))
000325 8C1702          1045         MOV.W   R1,[R7+2]
000328 8A07            1046         MOV.W   R0,[R7]
00032A 862C42          1047         MOV.B   ES,R1L
00032D 94041A81        1048         CMP.B   [R0+26],#081H
000331 F90D            1049         BL      _36
                       1050 ; rtxcobj.c  224         {
                       1051 ; rtxcobj.c  225          KS_free(TEventMap,Event);
000333 964842rr        1053         MOV.B   ES,#SEG( _TEventMap )
000337 9908rrrr        1054         MOV.W   R0,#SOF( _TEventMap )
00033B 8200            1055         MOV.B   R0L,[R0]
00033D 8C3702          1056         MOV.W   R3,[R7+2]
000340 8A27            1057         MOV.W   R2,[R7]
                       1058         CALL    _KS_free
000342 C4rrrrrr       +1058 ;       FCALL   _KS_free
                       1062 ; rtxcobj.c  226          return(0);
000346 B910            1064         MOV.W   R1,#00H
000348 B900            1065         MOV.W   R0,#00H
00034A FE03            1066         BR      _39
                       1067 ; rtxcobj.c  227         }
00034C                 1069 _36:
                       1071 ; rtxcobj.c  228         return(Event);
00034C 8C1702          1073         MOV.W   R1,[R7+2]
00034F 8A07            1074         MOV.W   R0,[R7]
                       1077 ; rtxcobj.c  229        }
000352                 1079 _39:
000352 99700008        1080         ADD.W   R7,#08H
000356 2F30            1082         POP.W   R4, R5
000358 D680            1084         RET
                       1087 ; rtxcobj.c  230        
                       1088 ; rtxcobj.c  231        
                       1089 ; rtxcobj.c  232        void deleteTEvent(TEvent *Event)
                       1090 ; rtxcobj.c  233        {
                       1091         ALIGN   1
                       1093         PUBLIC  _deleteTEvent
00035A                 1094 _deleteTEvent:
00035A 0F30            1098         PUSH.W  R4, R5
00035C A97C            1100         ADDS.W  R7,#0CH
                       1104 ; rtxcobj.c  234         Event->_TEvent(Event);
00035E 862C42          1106         MOV.B   ES,R1L
000361 8C4006          1107         MOV.W   R4,[R0+6]
000364 8C5008          1108         MOV.W   R5,[R0+8]
000367 8C1F02          1109         MOV.W   [R7+2],R1
00036A 8A0F            1110         MOV.W   [R7],R0
00036C C4rrrrrr        1115         FCALL   __ICALL
                       1118 ; rtxcobj.c  235         KS_free(TEventMap,Event);
000370 964842rr        1120         MOV.B   ES,#SEG( _TEventMap )
000374 9908rrrr        1121         MOV.W   R0,#SOF( _TEventMap )
000378 8200            1122         MOV.B   R0L,[R0]
00037A 8C3702          1123         MOV.W   R3,[R7+2]
00037D 8A27            1124         MOV.W   R2,[R7]
                       1125         CALL    _KS_free
00037F C4rrrrrr       +1125 ;       FCALL   _KS_free
                       1129 ; rtxcobj.c  236        }
000383 A974            1131         ADDS.W  R7,#04H
000385 2F30            1133         POP.W   R4, R5
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  12

ADDR   CODE            LINE SOURCELINE
000387 D680            1135         RET
                       1137 ; rtxcobj.c  237        
                       1138 ; rtxcobj.c  238        /**************** TResource Object *****************/
                       1139 ; rtxcobj.c  239        typedef struct TResource {
                       1140 ; rtxcobj.c  240          /* Public: */
                       1141 ; rtxcobj.c  241                int     ObjectID;
                       1142 ; rtxcobj.c  242                void    (*TResource)(struct TResource *this, char *Name);
                       1143 ; rtxcobj.c  243                void    (*_TResource)(struct TResource *this);
                       1144 ; rtxcobj.c  244                void    (*Lock)(struct TResource *this);
                       1145 ; rtxcobj.c  245                void    (*Unlock)(struct TResource *this);
                       1146 ; rtxcobj.c  246                int     (*Owner)(struct TResource *this);
                       1147 ; rtxcobj.c  247                RESOURCE ID;
                       1148 ; rtxcobj.c  248                char *  Name;
                       1149 ; rtxcobj.c  249          /* Private: */
                       1150 ; rtxcobj.c  250        } TResource;
                       1151 ; rtxcobj.c  251        
                       1152 ; rtxcobj.c  252        
                       1153 ; rtxcobj.c  253        struct TResource TResourcePartition[DNRES];
                       1154 ; rtxcobj.c  254        MAP              TResourceMap=0;
000001                 1155         RSEG    RTXCOBJ_INI_FA
                       1158         PUBLIC  _TResourceMap
000001                 1159 _TResourceMap:
                       1160 ; rtxcobj.c  255        
                       1161 ; rtxcobj.c  256        
                       1162 ; rtxcobj.c  257        void    TResource_TResource(struct TResource *this, char *Name)
                       1163 ; rtxcobj.c  258        {
000001 00              1164         DB      000H
000389                 1165         RSEG    RTXCOBJ_PR
000389 00              1166         ALIGN   1
                       1168         PUBLIC  _TResource_TResource
00038A                 1169 _TResource_TResource:
00038A 0F30            1199         PUSH.W  R4, R5
00038C A978            1201         ADDS.W  R7,#08H
                       1209 ; rtxcobj.c  259        
                       1210 ; rtxcobj.c  260         struct TResource *Ptr;
                       1211 ; rtxcobj.c  261        
                       1212 ; rtxcobj.c  262         if(this>(struct TResource *)0)
00038E 99140000        1214         CMP.W   R1,#00H
000392 F202            1215         BNE     _44
000394 99040000        1216         CMP.W   R0,#00H
000394 99040000        1216         CMP.W   R0,#00H
000398                 1217 _44:
000398 F92D            1218         BL      _43
                       1219 ; rtxcobj.c  263         {
                       1220 ; rtxcobj.c  264          Ptr=this;
00039A 8951            1222         MOV.W   R5,R1
00039C 8940            1223         MOV.W   R4,R0
                       1225 ; rtxcobj.c  265          this->ID=NRES+1;
00039E 8C1F06          1227         MOV.W   [R7+6],R1
0003A1 8C0F04          1228         MOV.W   [R7+4],R0
0003A4 99000016        1229         ADD.W   R0,#016H
0003A8 8C1F02          1232         MOV.W   [R7+2],R1
0003AB 8A0F            1233         MOV.W   [R7],R0
0003AD 8C1706          1234         MOV.W   R1,[R7+6]
0003B0 8C0704          1235         MOV.W   R0,[R7+4]
0003B3 862C42          1236         MOV.B   ES,R1L
0003B6 B40116          1237         MOV.B   [R0+22],#01H
                       1240 ; rtxcobj.c  266          while(Ptr!=&TResourcePartition[0])
0003B9 9914rrrr        1242         CMP.W   R1,#SEG( _TResourcePartition )
0003BD F203            1243         BNE     _45
0003BF 9904rrrr        1244         CMP.W   R0,#SOF( _TResourcePartition )
0003BF 9904rrrr00      1244         CMP.W   R0,#SOF( _TResourcePartition )
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  13

ADDR   CODE            LINE SOURCELINE
0003C4                 1245 _45:
0003C4 F30D            1248         BEQ     _42
0003C4 F30D            1248         BEQ     _42
0003C6                 1249 _41:
                       1250 ; rtxcobj.c  267          {
                       1251 ; rtxcobj.c  268           this->ID++;
0003C6 8C1702          1253         MOV.W   R1,[R7+2]
0003C9 8A07            1254         MOV.W   R0,[R7]
0003CB 862C42          1255         MOV.B   ES,R1L
0003CE A201            1256         ADDS.B  [R0],#01H
                       1257 ; rtxcobj.c  269           Ptr--;
0003D0 9942001C        1259         SUB.W   R4,#01CH
0003D4 9954rrrr        1263         CMP.W   R5,#SEG( _TResourcePartition )
0003D8 F2F6            1264         BNE     _41
0003DA 9944rrrr        1265         CMP.W   R4,#SOF( _TResourcePartition )
0003DE F2F3            1266         BNE     _41
                       1267 ; rtxcobj.c  270          }
0003E0                 1269 _42:
                       1270 ; rtxcobj.c  271         this->ObjectID=TResourceID;
0003E0 8C1706          1272         MOV.W   R1,[R7+6]
0003E3 8C0704          1273         MOV.W   R0,[R7+4]
0003E6 862C42          1274         MOV.B   ES,R1L
0003E9 BA04            1275         MOV.W   [R0],#04H
                       1278 ; rtxcobj.c  272         this->Name=Name;
0003EB 862C42          1280         MOV.B   ES,R1L
0003EE 8C2818          1281         MOV.W   [R0+24],R2
0003F1 8C381A          1282         MOV.W   [R0+26],R3
                       1283 ; rtxcobj.c  273         }
0003F4                 1285 _43:
                       1286 ; rtxcobj.c  274        }
0003F4 99700008        1288         ADD.W   R7,#08H
0003F8 2F30            1290         POP.W   R4, R5
0003FA D680            1292         RET
                       1297 ; rtxcobj.c  275        
                       1298 ; rtxcobj.c  276        
                       1299 ; rtxcobj.c  277        void    TResource__TResource(struct TResource *this)
                       1300 ; rtxcobj.c  278        {
                       1301         ALIGN   1
                       1303         PUBLIC  _TResource__TResource
0003FC                 1304 _TResource__TResource:
                       1310 ; rtxcobj.c  279         if(this>(struct TResource *)0)
0003FC 99140000        1312         CMP.W   R1,#00H
000400 F202            1313         BNE     _48
000402 99040000        1314         CMP.W   R0,#00H
000402 99040000        1314         CMP.W   R0,#00H
000406                 1315 _48:
000406 F903            1316         BL      _47
                       1317 ; rtxcobj.c  280          this->ID=0;
000408 862C42          1319         MOV.B   ES,R1L
00040B B40016          1320         MOV.B   [R0+22],#00H
00040B B40016          1320         MOV.B   [R0+22],#00H
00040E                 1321 _47:
                       1322 ; rtxcobj.c  281        }
00040E D680            1324         RET
                       1327 ; rtxcobj.c  282        
                       1328 ; rtxcobj.c  283        
                       1329 ; rtxcobj.c  284        void    TResource_Lock(struct TResource *this)
                       1330 ; rtxcobj.c  285        {
                       1331         ALIGN   1
                       1333         PUBLIC  _TResource_Lock
000410                 1334 _TResource_Lock:
                       1340 ; rtxcobj.c  286         if(this>(struct TResource *)0)
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  14

ADDR   CODE            LINE SOURCELINE
000410 99140000        1342         CMP.W   R1,#00H
000414 F202            1343         BNE     _50
000416 99040000        1344         CMP.W   R0,#00H
000416 99040000        1344         CMP.W   R0,#00H
00041A                 1345 _50:
00041A F905            1346         BL      _49
                       1347 ; rtxcobj.c  287         {
                       1348 ; rtxcobj.c  288          KS_lockw(this->ID);
00041C 862C42          1350         MOV.B   ES,R1L
00041F 840016          1351         MOV.B   R0L,[R0+22]
                       1353         CALL    _KS_lockw
000422 C4rrrrrr       +1353 ;       FCALL   _KS_lockw
                       1354 ; rtxcobj.c  289         }
000426                 1356 _49:
                       1357 ; rtxcobj.c  290        }
000426 D680            1359         RET
                       1361 ; rtxcobj.c  291        
                       1362 ; rtxcobj.c  292        
                       1363 ; rtxcobj.c  293        void    TResource_Unlock(struct TResource *this)
                       1364 ; rtxcobj.c  294        {
                       1365         ALIGN   1
                       1367         PUBLIC  _TResource_Unlock
000428                 1368 _TResource_Unlock:
                       1374 ; rtxcobj.c  295         if(this>(struct TResource *)0)
000428 99140000        1376         CMP.W   R1,#00H
00042C F202            1377         BNE     _52
00042E 99040000        1378         CMP.W   R0,#00H
00042E 99040000        1378         CMP.W   R0,#00H
000432                 1379 _52:
000432 F905            1380         BL      _51
                       1381 ; rtxcobj.c  296         {
                       1382 ; rtxcobj.c  297          KS_unlock(this->ID);
000434 862C42          1384         MOV.B   ES,R1L
000437 840016          1385         MOV.B   R0L,[R0+22]
                       1387         CALL    _KS_unlock
00043A C4rrrrrr       +1387 ;       FCALL   _KS_unlock
                       1388 ; rtxcobj.c  298         }
00043E                 1390 _51:
                       1391 ; rtxcobj.c  299        }
00043E D680            1393         RET
                       1395 ; rtxcobj.c  300        
                       1396 ; rtxcobj.c  301        
                       1397 ; rtxcobj.c  302        int     TResource_Owner(struct TResource *this)
                       1398 ; rtxcobj.c  303        {
                       1399         ALIGN   1
                       1401         PUBLIC  _TResource_Owner
000440                 1402 _TResource_Owner:
                       1408 ; rtxcobj.c  304         if(this>(struct TResource *)0)
000440 99140000        1410         CMP.W   R1,#00H
000444 F202            1411         BNE     _55
000446 99040000        1412         CMP.W   R0,#00H
000446 99040000        1412         CMP.W   R0,#00H
00044A                 1413 _55:
00044A F908            1414         BL      _53
                       1415 ; rtxcobj.c  305         {
                       1416 ; rtxcobj.c  306          return(KS_inqres(this->ID));
00044C 862C42          1418         MOV.B   ES,R1L
00044F 840016          1419         MOV.B   R0L,[R0+22]
                       1421         CALL    _KS_inqres
000452 C4rrrrrr       +1421 ;       FCALL   _KS_inqres
000456 8100            1422         MOV.B   R0L,R0L
000458 9019            1423         SEXT.B  R0H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  15

ADDR   CODE            LINE SOURCELINE
00045A D680            1424         RET
                       1425 ; rtxcobj.c  307         }
00045C                 1427 _53:
                       1428 ; rtxcobj.c  308         else
                       1429 ; rtxcobj.c  309         {
                       1430 ; rtxcobj.c  310          return(0);
00045C B900            1432         MOV.W   R0,#00H
                       1433 ; rtxcobj.c  311         }
                       1434 ; rtxcobj.c  312        }
00045E                 1436 _54:
00045E D680            1437         RET
                       1439 ; rtxcobj.c  313        
                       1440 ; rtxcobj.c  314        
                       1441 ; rtxcobj.c  315        
                       1442 ; rtxcobj.c  316        TResource *newTResource(char *Name)
                       1444 ; rtxcobj.c  317        {
                       1445         ALIGN   1
                       1447         PUBLIC  _newTResource
000460                 1448 _newTResource:
000460 0F30            1454         PUSH.W  R4, R5
000462 A978            1456         ADDS.W  R7,#08H
000464 8C1F06          1459         MOV.W   [R7+6],R1
000467 8C0F04          1460         MOV.W   [R7+4],R0
                       1466 ; rtxcobj.c  318        
                       1467 ; rtxcobj.c  319        /* VAR */
                       1468 ; rtxcobj.c  320         TResource *Resource;
                       1469 ; rtxcobj.c  321        
                       1470 ; rtxcobj.c  322        /* BEGIN */
                       1471 ; rtxcobj.c  323         if(TResourceMap==0)
00046A 964842rr        1473         MOV.B   ES,#SEG( _TResourceMap )
00046E 9908rrrr        1474         MOV.W   R0,#SOF( _TResourceMap )
000472 8200            1475         MOV.B   R0L,[R0]
000474 F214            1476         BNE     _57
                       1477 ; rtxcobj.c  324         {
                       1478 ; rtxcobj.c  325          TResourceMap=KS_create_part(&TResourcePartition,sizeof(struct TResource
                            ),DNRES);  /* Create Resource map */
000476 9918rrrr        1480         MOV.W   R1,#SEG( _TResourcePartition )
00047A 9908rrrr        1481         MOV.W   R0,#SOF( _TResourcePartition )
00047E 9928001C        1482         MOV.W   R2,#01CH
000482 99380080        1483         MOV.W   R3,#080H
                       1484         CALL    _KS_create_part
000486 C4rrrrrr       +1484 ;       FCALL   _KS_create_part
00048A 964842rr        1485         MOV.B   ES,#SEG( _TResourceMap )
00048E 9918rrrr        1486         MOV.W   R1,#SOF( _TResourceMap )
000492 8209            1487         MOV.B   [R1],R0L
                       1488 ; rtxcobj.c  326          if(TResourceMap==0)
000494 6100            1490         OR.B    R0L,R0L
000496 F203            1491         BNE     _57
                       1492 ; rtxcobj.c  327           return(0);
000498 B910            1494         MOV.W   R1,#00H
00049A B900            1495         MOV.W   R0,#00H
00049C FE67            1496         BR      _62
                       1497 ; rtxcobj.c  328         }
00049E                 1499 _57:
                       1502 ; rtxcobj.c  329         Resource=KS_alloc(TResourceMap);
00049E 964842rr        1504         MOV.B   ES,#SEG( _TResourceMap )
0004A2 9908rrrr        1505         MOV.W   R0,#SOF( _TResourceMap )
0004A6 8200            1506         MOV.B   R0L,[R0]
                       1507         CALL    _KS_alloc
0004A8 C4rrrrrr       +1507 ;       FCALL   _KS_alloc
                       1509 ; rtxcobj.c  330         if(Resource==0)
0004AC 8931            1511         MOV.W   R3,R1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  16

ADDR   CODE            LINE SOURCELINE
0004AE 8920            1512         MOV.W   R2,R0
0004B0 6910            1513         OR.W    R1,R0
0004B2 F203            1516         BNE     _58
                       1517 ; rtxcobj.c  331         {
                       1518 ; rtxcobj.c  332        //  LogEvent(EventNoMoreResources,0);
                       1519 ; rtxcobj.c  333          return(0);    
0004B4 B910            1521         MOV.W   R1,#00H
0004B6 B900            1522         MOV.W   R0,#00H
0004B8 FE59            1523         BR      _62
                       1524 ; rtxcobj.c  334         }
0004BA                 1526 _58:
                       1531 ; rtxcobj.c  335         Resource->TResource=TResource_TResource;
0004BA 8913            1533         MOV.W   R1,R3
0004BC 8902            1534         MOV.W   R0,R2
0004BE 99000002        1535         ADD.W   R0,#02H
0004C2 862C42          1536         MOV.B   ES,R1L
0004C5 9A08rrrr        1537         MOV.W   [R0],#SOF( _TResource_TResource )
0004C9 9D080002rrrr    1538         MOV.W   [R0+2],#SEG( _TResource_TResource )
                       1539 ; rtxcobj.c  336         Resource->_TResource=TResource__TResource;
0004CF 8953            1541         MOV.W   R5,R3
0004D1 8942            1542         MOV.W   R4,R2
0004D3 99400006        1543         ADD.W   R4,#06H
0004D7 86AC42          1544         MOV.B   ES,R5L
0004DA 9A48rrrr        1545         MOV.W   [R4],#SOF( _TResource__TResource )
0004DE 9D480002rrrr    1546         MOV.W   [R4+2],#SEG( _TResource__TResource )
                       1547 ; rtxcobj.c  337         Resource->Lock=TResource_Lock;
0004E4 8953            1549         MOV.W   R5,R3
0004E6 8942            1550         MOV.W   R4,R2
0004E8 9940000A        1551         ADD.W   R4,#0AH
0004EC 86AC42          1552         MOV.B   ES,R5L
0004EF 9A48rrrr        1553         MOV.W   [R4],#SOF( _TResource_Lock )
0004F3 9D480002rrrr    1554         MOV.W   [R4+2],#SEG( _TResource_Lock )
                       1555 ; rtxcobj.c  338         Resource->Unlock=TResource_Unlock;
0004F9 8953            1557         MOV.W   R5,R3
0004FB 8942            1558         MOV.W   R4,R2
0004FD 9940000E        1559         ADD.W   R4,#0EH
000501 86AC42          1560         MOV.B   ES,R5L
000504 9A48rrrr        1561         MOV.W   [R4],#SOF( _TResource_Unlock )
000508 9D480002rrrr    1562         MOV.W   [R4+2],#SEG( _TResource_Unlock )
                       1563 ; rtxcobj.c  339         Resource->Owner=TResource_Owner;
00050E 8953            1565         MOV.W   R5,R3
000510 8942            1566         MOV.W   R4,R2
000512 99400012        1567         ADD.W   R4,#012H
000516 86AC42          1568         MOV.B   ES,R5L
000519 9A48rrrr        1569         MOV.W   [R4],#SOF( _TResource_Owner )
00051D 9D480002rrrr    1570         MOV.W   [R4+2],#SEG( _TResource_Owner )
                       1571 ; rtxcobj.c  340         Resource->TResource(Resource,Name);
000523 862C42          1573         MOV.B   ES,R1L
000526 8A40            1574         MOV.W   R4,[R0]
000528 8C5002          1575         MOV.W   R5,[R0+2]
00052B 8C3F02          1576         MOV.W   [R7+2],R3
00052E 8A2F            1577         MOV.W   [R7],R2
000530 8913            1578         MOV.W   R1,R3
000532 8902            1579         MOV.W   R0,R2
000534 8C3706          1584         MOV.W   R3,[R7+6]
000537 8C2704          1585         MOV.W   R2,[R7+4]
00053A C4rrrrrr        1586         FCALL   __ICALL
                       1592 ; rtxcobj.c  341         if(Resource->ID>(NRES+DNRES+1))
00053E 8C1702          1594         MOV.W   R1,[R7+2]
000541 8A07            1595         MOV.W   R0,[R7]
000543 862C42          1596         MOV.B   ES,R1L
000546 94041681        1597         CMP.B   [R0+22],#081H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  17

ADDR   CODE            LINE SOURCELINE
00054A F90D            1598         BL      _59
                       1599 ; rtxcobj.c  342         {
                       1600 ; rtxcobj.c  343          KS_free(TResourceMap,Resource);
00054C 964842rr        1602         MOV.B   ES,#SEG( _TResourceMap )
000550 9908rrrr        1603         MOV.W   R0,#SOF( _TResourceMap )
000554 8200            1604         MOV.B   R0L,[R0]
000556 8C3702          1605         MOV.W   R3,[R7+2]
000559 8A27            1606         MOV.W   R2,[R7]
                       1607         CALL    _KS_free
00055B C4rrrrrr       +1607 ;       FCALL   _KS_free
                       1611 ; rtxcobj.c  344          return(0);
00055F B910            1613         MOV.W   R1,#00H
000561 B900            1614         MOV.W   R0,#00H
000563 FE04            1615         BR      _62
                       1616 ; rtxcobj.c  345         }
000566                 1618 _59:
                       1620 ; rtxcobj.c  346         return(Resource);
000566 8C1702          1622         MOV.W   R1,[R7+2]
000569 8A07            1623         MOV.W   R0,[R7]
                       1626 ; rtxcobj.c  347        }
00056C                 1628 _62:
00056C 99700008        1629         ADD.W   R7,#08H
000570 2F30            1631         POP.W   R4, R5
000572 D680            1633         RET
                       1636 ; rtxcobj.c  348        
                       1637 ; rtxcobj.c  349        
                       1638 ; rtxcobj.c  350        void deleteTResource(TResource *Resource)
                       1639 ; rtxcobj.c  351        {
                       1640         ALIGN   1
                       1642         PUBLIC  _deleteTResource
000574                 1643 _deleteTResource:
000574 0F30            1647         PUSH.W  R4, R5
000576 A97C            1649         ADDS.W  R7,#0CH
                       1653 ; rtxcobj.c  352         Resource->_TResource(Resource);
000578 862C42          1655         MOV.B   ES,R1L
00057B 8C4006          1656         MOV.W   R4,[R0+6]
00057E 8C5008          1657         MOV.W   R5,[R0+8]
000581 8C1F02          1658         MOV.W   [R7+2],R1
000584 8A0F            1659         MOV.W   [R7],R0
000586 C4rrrrrr        1664         FCALL   __ICALL
                       1667 ; rtxcobj.c  353         KS_free(TResourceMap,Resource);
00058A 964842rr        1669         MOV.B   ES,#SEG( _TResourceMap )
00058E 9908rrrr        1670         MOV.W   R0,#SOF( _TResourceMap )
000592 8200            1671         MOV.B   R0L,[R0]
000594 8C3702          1672         MOV.W   R3,[R7+2]
000597 8A27            1673         MOV.W   R2,[R7]
                       1674         CALL    _KS_free
000599 C4rrrrrr       +1674 ;       FCALL   _KS_free
                       1678 ; rtxcobj.c  354        }
00059D A974            1680         ADDS.W  R7,#04H
00059F 2F30            1682         POP.W   R4, R5
0005A1 D680            1684         RET
                       1686 ; rtxcobj.c  355        
                       1687 ; rtxcobj.c  356        
                       1688 ; rtxcobj.c  357        
                       1689 ; rtxcobj.c  358        /**************** TThread Object *****************/
                       1690 ; rtxcobj.c  359        typedef struct TThread {
                       1691 ; rtxcobj.c  360          /* Public: */
                       1692 ; rtxcobj.c  361                int     ObjectID;
                       1693 ; rtxcobj.c  362                void    (*TThread)(struct TThread *this, int Priority, void (*ent
                            ry)(void));
                       1694 ; rtxcobj.c  363                void    (*Execute)(struct TThread *this);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  18

ADDR   CODE            LINE SOURCELINE
                       1695 ; rtxcobj.c  364                void    (*Terminate)(struct TThread *this);
                       1696 ; rtxcobj.c  365                void    (*Suspend)(struct TThread *this, int Time);
                       1697 ; rtxcobj.c  366                void    (*Resume)(struct TThread *this);
                       1698 ; rtxcobj.c  367                int     (*GetPriority)(struct TThread *this);
                       1699 ; rtxcobj.c  368                void    (*SetPriority)(struct TThread *this, int Prio);
                       1700 ; rtxcobj.c  369                TASK    ID;
                       1701 ; rtxcobj.c  370                char    Status;
                       1702 ; rtxcobj.c  371          /* Private: */
                       1703 ; rtxcobj.c  372                char    *Stack;
                       1704 ; rtxcobj.c  373        } TThread;
                       1705 ; rtxcobj.c  374        
                       1706 ; rtxcobj.c  375        char far stk[DNTASKS][STACK_SIZE];
                       1707 ; rtxcobj.c  376        
                       1708 ; rtxcobj.c  377        void    TThread_TThread(struct TThread *this, int Priority, void (*entry)
                            (void))
                       1709 ; rtxcobj.c  378        {
0005A3 00              1710         ALIGN   1
                       1712         PUBLIC  _TThread_TThread
0005A4                 1713 _TThread_TThread:
0005A4 0F70            1758         PUSH.W  R4, R5, R6
0005A6 A97C            1760         ADDS.W  R7,#0CH
0005A8 8962            1764         MOV.W   R6,R2
                       1773 ; rtxcobj.c  379         if(this>(void *)0)
0005AA 8951            1775         MOV.W   R5,R1
0005AC 8940            1776         MOV.W   R4,R0
0005AE 99540000        1777         CMP.W   R5,#00H
0005B2 F202            1778         BNE     _66
0005B4 99440000        1779         CMP.W   R4,#00H
0005B4 99440000        1779         CMP.W   R4,#00H
0005B8                 1780 _66:
0005B8 F928            1783         BL      _65
                       1784 ; rtxcobj.c  380         {
                       1785 ; rtxcobj.c  381          this->ID=KS_alloc_task();
                       1787         CALL    _KS_alloc_task
0005BA C4rrrrrr       +1787 ;       FCALL   _KS_alloc_task
0005BE 86AC42          1788         MOV.B   ES,R5L
0005C1 840C1E          1789         MOV.B   [R4+30],R0L
                       1790 ; rtxcobj.c  382          if(this->ID>0)
0005C4 910400          1792         CMP.B   R0L,#00H
0005C7 FD21            1793         BLE     _65
                       1794 ; rtxcobj.c  383          {
                       1795 ; rtxcobj.c  384           this->ObjectID=TThreadID;
0005C9 86AC42          1797         MOV.B   ES,R5L
0005CC BA40            1798         MOV.W   [R4],#00H
0005CE 8C5F02          1799         MOV.W   [R7+2],R5
0005D1 8A4F            1800         MOV.W   [R7],R4
                       1803 ; rtxcobj.c  385           this->Stack=stk[this->ID];
0005D3 8120            1805         MOV.B   R1L,R0L
0005D5 9039            1806         SEXT.B  R1H
0005D7 D919            1807         ASL.W   R1,#09H
0005D9 8941            1808         MOV.W   R4,R1
0005DB B950            1809         MOVS.W  R5,#00H
0005DD 9938rrrr        1810         MOV.W   R3,#SEG( _stk )
0005E1 9928rrrr        1811         MOV.W   R2,#SOF( _stk )
0005E5 0924            1812         ADD.W   R2,R4
0005E7 8C5702          1813         MOV.W   R5,[R7+2]
0005EA 8A47            1814         MOV.W   R4,[R7]
0005EC 86AC42          1815         MOV.B   ES,R5L
0005EF 8C2C20          1816         MOV.W   [R4+32],R2
0005F2 8C3C22          1817         MOV.W   [R4+34],R3
                       1821 ; rtxcobj.c  386           KS_deftask(this->ID,Priority,this->Stack,STACK_SIZE,entry);
0005F5 99180200        1823         MOV.W   R1,#0200H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  19

ADDR   CODE            LINE SOURCELINE
0005F9 8C5710          1824         MOV.W   R5,[R7+16]
0005FC 8C470E          1825         MOV.W   R4,[R7+14]
0005FF 0F30            1827         PUSH.W  R4, R5
000601 811C            1829         MOV.B   R0H,R6L
                       1830         CALL    _KS_deftask
000603 C4rrrrrr       +1830 ;       FCALL   _KS_deftask
000607 A974            1831         ADDS.W  R7,#04H
                       1833 ; rtxcobj.c  387          }
                       1834 ; rtxcobj.c  388         }
00060A                 1836 _65:
                       1837 ; rtxcobj.c  389        }
00060A A974            1839         ADDS.W  R7,#04H
00060C 2F70            1841         POP.W   R4, R5, R6
00060E D680            1843         RET
                       1845 ; rtxcobj.c  390        
                       1846 ; rtxcobj.c  391        
                       1847 ; rtxcobj.c  392        void    TThread_Execute(struct TThread *this)
                       1848 ; rtxcobj.c  393        {
                       1849         ALIGN   1
                       1851         PUBLIC  _TThread_Execute
000610                 1852 _TThread_Execute:
                       1858 ; rtxcobj.c  394         KS_execute(this->ID);
000610 862C42          1860         MOV.B   ES,R1L
000613 84001E          1861         MOV.B   R0L,[R0+30]
                       1863         CALL    _KS_execute
000616 C4rrrrrr       +1863 ;       FCALL   _KS_execute
                       1864 ; rtxcobj.c  395        }
00061A D680            1866         RET
                       1868 ; rtxcobj.c  396        
                       1869 ; rtxcobj.c  397        
                       1870 ; rtxcobj.c  398        void    TThread__TThread(struct TThread *this)
                       1871 ; rtxcobj.c  399        {
                       1872         ALIGN   1
                       1874         PUBLIC  _TThread__TThread
00061C                 1875 _TThread__TThread:
                       1881 ; rtxcobj.c  400         if(this->ID>0)
00061C 862C42          1883         MOV.B   ES,R1L
00061F 84401E          1884         MOV.B   R2L,[R0+30]
000622 862C42          1885         MOV.B   ES,R1L
000625 94041E00        1886         CMP.B   [R0+30],#00H
000629 FD04            1887         BLE     _68
                       1888 ; rtxcobj.c  401         {
                       1889 ; rtxcobj.c  402          KS_terminate(this->ID);
00062B 8104            1891         MOV.B   R0L,R2L
                       1892         CALL    _KS_terminate
00062D C4rrrrrr       +1892 ;       FCALL   _KS_terminate
                       1894 ; rtxcobj.c  403         }
000632                 1896 _68:
                       1897 ; rtxcobj.c  404        
                       1898 ; rtxcobj.c  405        }
000632 D680            1900         RET
                       1902 ; rtxcobj.c  406        
                       1903 ; rtxcobj.c  407        
                       1904 ; rtxcobj.c  408        void    TThread_Suspend(struct TThread *this, int Time)
                       1905 ; rtxcobj.c  409        {
                       1906         ALIGN   1
                       1908         PUBLIC  _TThread_Suspend
000634                 1909 _TThread_Suspend:
000634 0F30            1913         PUSH.W  R4, R5
                       1919 ; rtxcobj.c  410         if(this->ID>0)
000636 8951            1921         MOV.W   R5,R1
000638 8940            1922         MOV.W   R4,R0
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  20

ADDR   CODE            LINE SOURCELINE
00063A 9940001E        1923         ADD.W   R4,#01EH
00063E 862C42          1924         MOV.B   ES,R1L
000641 84601E          1925         MOV.B   R3L,[R0+30]
000644 862C42          1926         MOV.B   ES,R1L
000647 94041E00        1927         CMP.B   [R0+30],#00H
00064B FD12            1928         BLE     _72
                       1929 ; rtxcobj.c  411         {
                       1930 ; rtxcobj.c  412          if(Time<0)
00064D 99240000        1932         CMP.W   R2,#00H
000651 FA05            1933         BGE     _70
                       1934 ; rtxcobj.c  413          {
                       1935 ; rtxcobj.c  414           KS_suspend(this->ID);
000653 8106            1937         MOV.B   R0L,R3L
                       1938         CALL    _KS_suspend
000655 C4rrrrrr       +1938 ;       FCALL   _KS_suspend
                       1941 ; rtxcobj.c  415          }
000659 FE0B            1943         BR      _72
000659 FE0B00          1943         BR      _72
00065C                 1944 _70:
                       1946 ; rtxcobj.c  416          else
                       1947 ; rtxcobj.c  417          {
                       1948 ; rtxcobj.c  418           KS_delay(this->ID,Time/CLKTICK);
00065C 86AC42          1950         MOV.B   ES,R5L
00065F 8204            1951         MOV.B   R0L,[R4]
000661 8932            1952         MOV.W   R3,R2
000663 9839            1953         SEXT.W  R3
000665 E9290008        1954         DIV.D   R2,#08H
000669 8912            1956         MOV.W   R1,R2
                       1957         CALL    _KS_delay
00066B C4rrrrrr       +1957 ;       FCALL   _KS_delay
                       1958 ; rtxcobj.c  419          }
                       1959 ; rtxcobj.c  420         }
000670                 1961 _72:
                       1962 ; rtxcobj.c  421        }
000670 2F30            1964         POP.W   R4, R5
000672 D680            1966         RET
                       1968 ; rtxcobj.c  422        
                       1969 ; rtxcobj.c  423        
                       1970 ; rtxcobj.c  424        void    TThread_Resume(struct TThread *this)
                       1971 ; rtxcobj.c  425        {
                       1972         ALIGN   1
                       1974         PUBLIC  _TThread_Resume
000674                 1975 _TThread_Resume:
                       1981 ; rtxcobj.c  426         if(this->ID>0)
000674 862C42          1983         MOV.B   ES,R1L
000677 84401E          1984         MOV.B   R2L,[R0+30]
00067A 862C42          1985         MOV.B   ES,R1L
00067D 94041E00        1986         CMP.B   [R0+30],#00H
000681 FD04            1987         BLE     _75
                       1988 ; rtxcobj.c  427         {
                       1989 ; rtxcobj.c  428          KS_resume(this->ID);
000683 8104            1991         MOV.B   R0L,R2L
                       1992         CALL    _KS_resume
000685 C4rrrrrr       +1992 ;       FCALL   _KS_resume
                       1994 ; rtxcobj.c  429         }
00068A                 1996 _75:
                       1997 ; rtxcobj.c  430        }
00068A D680            1999         RET
                       2001 ; rtxcobj.c  431        
                       2002 ; rtxcobj.c  432        
                       2003 ; rtxcobj.c  433        int     TThread_GetPriority(struct TThread *this)
                       2004 ; rtxcobj.c  434        {
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  21

ADDR   CODE            LINE SOURCELINE
                       2005         ALIGN   1
                       2007         PUBLIC  _TThread_GetPriority
00068C                 2008 _TThread_GetPriority:
                       2014 ; rtxcobj.c  435         if(this->ID>0)
00068C 862C42          2016         MOV.B   ES,R1L
00068F 84401E          2017         MOV.B   R2L,[R0+30]
000692 862C42          2018         MOV.B   ES,R1L
000695 94041E00        2019         CMP.B   [R0+30],#00H
000699 FD07            2020         BLE     _77
                       2021 ; rtxcobj.c  436          return(KS_inqpriority(this->ID));
00069B 8104            2023         MOV.B   R0L,R2L
                       2024         CALL    _KS_inqpriority
00069D C4rrrrrr       +2024 ;       FCALL   _KS_inqpriority
0006A1 8100            2026         MOV.B   R0L,R0L
0006A3 9019            2027         SEXT.B  R0H
0006A5 D680            2028         RET
0006A5 D68000          2028         RET
0006A8                 2029 _77:
                       2030 ; rtxcobj.c  437         return(0);
0006A8 B900            2032         MOV.W   R0,#00H
                       2033 ; rtxcobj.c  438        }
0006AA                 2035 _78:
0006AA D680            2036         RET
                       2038 ; rtxcobj.c  439        
                       2039 ; rtxcobj.c  440        
                       2040 ; rtxcobj.c  441        void    TThread_SetPriority(struct TThread *this, int Prio)
                       2041 ; rtxcobj.c  442        {
                       2042         ALIGN   1
                       2044         PUBLIC  _TThread_SetPriority
0006AC                 2045 _TThread_SetPriority:
                       2053 ; rtxcobj.c  443         if(this->ID>0)
0006AC 862C42          2055         MOV.B   ES,R1L
0006AF 84601E          2056         MOV.B   R3L,[R0+30]
0006B2 862C42          2057         MOV.B   ES,R1L
0006B5 94041E00        2058         CMP.B   [R0+30],#00H
0006B9 FD05            2059         BLE     _80
                       2061 ; rtxcobj.c  444          KS_defpriority(this->ID,Prio);
0006BB 8114            2063         MOV.B   R0H,R2L
0006BD 8106            2064         MOV.B   R0L,R3L
                       2065         CALL    _KS_defpriority
0006BF C4rrrrrr       +2065 ;       FCALL   _KS_defpriority
0006C4                 2067 _80:
                       2068 ; rtxcobj.c  445        }
0006C4 D680            2070         RET
                       2073 ; rtxcobj.c  446        
                       2074 ; rtxcobj.c  447        
                       2075 ; rtxcobj.c  448        TThread         TThreadPartition[DNTASKS];
                       2076 ; rtxcobj.c  449        MAP             TThreadMap=0;
000002                 2077         RSEG    RTXCOBJ_INI_FA
                       2080         PUBLIC  _TThreadMap
000002                 2081 _TThreadMap:
                       2082 ; rtxcobj.c  450        
                       2083 ; rtxcobj.c  451        
                       2084 ; rtxcobj.c  452        
                       2085 ; rtxcobj.c  453        TThread *newTThread(int Priority, void (*entry)(void))
                       2086 ; rtxcobj.c  454        {
000002 00              2087         DB      000H
0006C6                 2088         RSEG    RTXCOBJ_PR
                       2089         ALIGN   1
                       2091         PUBLIC  _newTThread
0006C6                 2092 _newTThread:
0006C6 0F70            2101         PUSH.W  R4, R5, R6
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  22

ADDR   CODE            LINE SOURCELINE
0006C8 A978            2103         ADDS.W  R7,#08H
0006CA 8C3F06          2107         MOV.W   [R7+6],R3
0006CD 8C2F04          2108         MOV.W   [R7+4],R2
0006D0 8960            2111         MOV.W   R6,R0
                       2121 ; rtxcobj.c  455        
                       2122 ; rtxcobj.c  456        /* VAR */
                       2123 ; rtxcobj.c  457         TThread *Thread;
                       2124 ; rtxcobj.c  458        
                       2125 ; rtxcobj.c  459        /* BEGIN */
                       2126 ; rtxcobj.c  460         if(TThreadMap==0)
0006D2 964842rr        2128         MOV.B   ES,#SEG( _TThreadMap )
0006D6 9908rrrr        2129         MOV.W   R0,#SOF( _TThreadMap )
0006DA 8200            2130         MOV.B   R0L,[R0]
0006DC F214            2131         BNE     _83
                       2132 ; rtxcobj.c  461         {
                       2133 ; rtxcobj.c  462          TThreadMap=KS_create_part(&TThreadPartition,sizeof(struct TThread),DNTA
                            SKS);  /* Create stack map */
0006DE 9918rrrr        2135         MOV.W   R1,#SEG( _TThreadPartition )
0006E2 9908rrrr        2136         MOV.W   R0,#SOF( _TThreadPartition )
0006E6 99280024        2137         MOV.W   R2,#024H
0006EA 99380020        2138         MOV.W   R3,#020H
                       2139         CALL    _KS_create_part
0006EE C4rrrrrr       +2139 ;       FCALL   _KS_create_part
0006F2 964842rr        2140         MOV.B   ES,#SEG( _TThreadMap )
0006F6 9918rrrr        2141         MOV.W   R1,#SOF( _TThreadMap )
0006FA 8209            2142         MOV.B   [R1],R0L
                       2143 ; rtxcobj.c  463          if(TThreadMap==0)
0006FC 6100            2145         OR.B    R0L,R0L
0006FE F203            2146         BNE     _83
                       2147 ; rtxcobj.c  464           return(0);
000700 B910            2149         MOV.W   R1,#00H
000702 B900            2150         MOV.W   R0,#00H
000704 FE7F            2151         BR      _88
                       2152 ; rtxcobj.c  465         }
000706                 2154 _83:
                       2159 ; rtxcobj.c  466         Thread=KS_alloc(TThreadMap);
000706 964842rr        2161         MOV.B   ES,#SEG( _TThreadMap )
00070A 9908rrrr        2162         MOV.W   R0,#SOF( _TThreadMap )
00070E 8200            2163         MOV.B   R0L,[R0]
                       2164         CALL    _KS_alloc
000710 C4rrrrrr       +2164 ;       FCALL   _KS_alloc
                       2166 ; rtxcobj.c  467         if(Thread==(void *)0)
000714 8931            2168         MOV.W   R3,R1
000716 8920            2169         MOV.W   R2,R0
000718 6910            2170         OR.W    R1,R0
00071A F203            2173         BNE     _84
                       2174 ; rtxcobj.c  468         {
                       2175 ; rtxcobj.c  469        //  LogEvent(EventNoMoreThreads,0);
                       2176 ; rtxcobj.c  470          return(0);    
00071C B910            2178         MOV.W   R1,#00H
00071E B900            2179         MOV.W   R0,#00H
000720 FE71            2180         BR      _88
                       2181 ; rtxcobj.c  471         }
000722                 2183 _84:
                       2190 ; rtxcobj.c  472         Thread->TThread=TThread_TThread;
000722 8913            2192         MOV.W   R1,R3
000724 8902            2193         MOV.W   R0,R2
000726 99000002        2194         ADD.W   R0,#02H
00072A 862C42          2195         MOV.B   ES,R1L
00072D 9A08rrrr        2196         MOV.W   [R0],#SOF( _TThread_TThread )
000731 9D080002rrrr    2197         MOV.W   [R0+2],#SEG( _TThread_TThread )
                       2198 ; rtxcobj.c  473         Thread->Execute=TThread_Execute;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  23

ADDR   CODE            LINE SOURCELINE
000737 8953            2200         MOV.W   R5,R3
000739 8942            2201         MOV.W   R4,R2
00073B 99400006        2202         ADD.W   R4,#06H
00073F 86AC42          2203         MOV.B   ES,R5L
000742 9A48rrrr        2204         MOV.W   [R4],#SOF( _TThread_Execute )
000746 9D480002rrrr    2205         MOV.W   [R4+2],#SEG( _TThread_Execute )
                       2206 ; rtxcobj.c  474         Thread->Terminate=TThread__TThread;
00074C 8953            2208         MOV.W   R5,R3
00074E 8942            2209         MOV.W   R4,R2
000750 9940000A        2210         ADD.W   R4,#0AH
000754 86AC42          2211         MOV.B   ES,R5L
000757 9A48rrrr        2212         MOV.W   [R4],#SOF( _TThread__TThread )
00075B 9D480002rrrr    2213         MOV.W   [R4+2],#SEG( _TThread__TThread )
                       2214 ; rtxcobj.c  475         Thread->Suspend=TThread_Suspend;
000761 8953            2216         MOV.W   R5,R3
000763 8942            2217         MOV.W   R4,R2
000765 9940000E        2218         ADD.W   R4,#0EH
000769 86AC42          2219         MOV.B   ES,R5L
00076C 9A48rrrr        2220         MOV.W   [R4],#SOF( _TThread_Suspend )
000770 9D480002rrrr    2221         MOV.W   [R4+2],#SEG( _TThread_Suspend )
                       2222 ; rtxcobj.c  476         Thread->Resume=TThread_Resume;
000776 8953            2224         MOV.W   R5,R3
000778 8942            2225         MOV.W   R4,R2
00077A 99400012        2226         ADD.W   R4,#012H
00077E 86AC42          2227         MOV.B   ES,R5L
000781 9A48rrrr        2228         MOV.W   [R4],#SOF( _TThread_Resume )
000785 9D480002rrrr    2229         MOV.W   [R4+2],#SEG( _TThread_Resume )
                       2230 ; rtxcobj.c  477         Thread->GetPriority=TThread_GetPriority;
00078B 8953            2232         MOV.W   R5,R3
00078D 8942            2233         MOV.W   R4,R2
00078F 99400016        2234         ADD.W   R4,#016H
000793 86AC42          2235         MOV.B   ES,R5L
000796 9A48rrrr        2236         MOV.W   [R4],#SOF( _TThread_GetPriority )
00079A 9D480002rrrr    2237         MOV.W   [R4+2],#SEG( _TThread_GetPriority )
                       2238 ; rtxcobj.c  478         Thread->SetPriority=TThread_SetPriority;
0007A0 8953            2240         MOV.W   R5,R3
0007A2 8942            2241         MOV.W   R4,R2
0007A4 9940001A        2242         ADD.W   R4,#01AH
0007A8 86AC42          2243         MOV.B   ES,R5L
0007AB 9A48rrrr        2244         MOV.W   [R4],#SOF( _TThread_SetPriority )
0007AF 9D480002rrrr    2245         MOV.W   [R4+2],#SEG( _TThread_SetPriority )
                       2246 ; rtxcobj.c  479         Thread->TThread(Thread,Priority,entry);
0007B5 862C42          2248         MOV.B   ES,R1L
0007B8 8A40            2249         MOV.W   R4,[R0]
0007BA 8C5002          2250         MOV.W   R5,[R0+2]
0007BD 8C1706          2251         MOV.W   R1,[R7+6]
0007C0 8C0704          2252         MOV.W   R0,[R7+4]
0007C3 0F03            2255         PUSH.W  R0, R1
0007C5 8C3F06          2258         MOV.W   [R7+6],R3
0007C8 8C2F04          2259         MOV.W   [R7+4],R2
0007CB 8913            2260         MOV.W   R1,R3
0007CD 8902            2261         MOV.W   R0,R2
0007CF 8926            2266         MOV.W   R2,R6
0007D1 C4rrrrrr        2267         FCALL   __ICALL
0007D5 A974            2268         ADDS.W  R7,#04H
                       2275 ; rtxcobj.c  480         if(Thread->ID==0)
0007D7 8C1702          2277         MOV.W   R1,[R7+2]
0007DA 8A07            2278         MOV.W   R0,[R7]
0007DC 862C42          2279         MOV.B   ES,R1L
0007DF 84001E          2280         MOV.B   R0L,[R0+30]
0007E2 F20D            2281         BNE     _85
                       2282 ; rtxcobj.c  481         {
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  24

ADDR   CODE            LINE SOURCELINE
                       2283 ; rtxcobj.c  482          KS_free(TThreadMap,Thread);
0007E4 964842rr        2285         MOV.B   ES,#SEG( _TThreadMap )
0007E8 9908rrrr        2286         MOV.W   R0,#SOF( _TThreadMap )
0007EC 8200            2287         MOV.B   R0L,[R0]
0007EE 8C3702          2288         MOV.W   R3,[R7+2]
0007F1 8A27            2289         MOV.W   R2,[R7]
                       2290         CALL    _KS_free
0007F3 C4rrrrrr       +2290 ;       FCALL   _KS_free
                       2294 ; rtxcobj.c  483          return(0);
0007F7 B910            2296         MOV.W   R1,#00H
0007F9 B900            2297         MOV.W   R0,#00H
0007FB FE04            2298         BR      _88
                       2299 ; rtxcobj.c  484         }
0007FE                 2301 _85:
                       2303 ; rtxcobj.c  485         return(Thread);
0007FE 8C1702          2305         MOV.W   R1,[R7+2]
000801 8A07            2306         MOV.W   R0,[R7]
                       2309 ; rtxcobj.c  486        }
000804                 2311 _88:
000804 99700008        2312         ADD.W   R7,#08H
000808 2F70            2314         POP.W   R4, R5, R6
00080A D680            2316         RET
                       2319 ; rtxcobj.c  487        
                       2320 ; rtxcobj.c  488        
                       2321 ; rtxcobj.c  489        void deleteTThread(TThread *Thread)
                       2322 ; rtxcobj.c  490        {
                       2323         ALIGN   1
                       2325         PUBLIC  _deleteTThread
00080C                 2326 _deleteTThread:
00080C 0F30            2330         PUSH.W  R4, R5
00080E A97C            2332         ADDS.W  R7,#0CH
                       2336 ; rtxcobj.c  491         Thread->Terminate(Thread);
000810 862C42          2338         MOV.B   ES,R1L
000813 8C400A          2339         MOV.W   R4,[R0+10]
000816 8C500C          2340         MOV.W   R5,[R0+12]
000819 8C1F02          2341         MOV.W   [R7+2],R1
00081C 8A0F            2342         MOV.W   [R7],R0
00081E C4rrrrrr        2347         FCALL   __ICALL
                       2350 ; rtxcobj.c  492         KS_free(TThreadMap,Thread);
000822 964842rr        2352         MOV.B   ES,#SEG( _TThreadMap )
000826 9908rrrr        2353         MOV.W   R0,#SOF( _TThreadMap )
00082A 8200            2354         MOV.B   R0L,[R0]
00082C 8C3702          2355         MOV.W   R3,[R7+2]
00082F 8A27            2356         MOV.W   R2,[R7]
                       2357         CALL    _KS_free
000831 C4rrrrrr       +2357 ;       FCALL   _KS_free
                       2361 ; rtxcobj.c  493        }
000835 A974            2363         ADDS.W  R7,#04H
000837 2F30            2365         POP.W   R4, R5
000839 D680            2367         RET
                       2369 ; rtxcobj.c  494        
                       2370 ; rtxcobj.c  495        
                       2371 ; rtxcobj.c  496        
                       2372 ; rtxcobj.c  497        
                       2373 ; rtxcobj.c  498        /********** TTimer Object **************/
                       2374 ; rtxcobj.c  499        typedef struct TTimer {
                       2375 ; rtxcobj.c  500          /* Public: */
                       2376 ; rtxcobj.c  501                int     ObjectID;
                       2377 ; rtxcobj.c  502                void    (*TTimer)(struct TTimer *this);
                       2378 ; rtxcobj.c  503                void    (*_TTimer)(struct TTimer *this);
                       2379 ; rtxcobj.c  504                void    (*SetPeriod)(struct TTimer *this, int Time);
                       2380 ; rtxcobj.c  505                int     (*GetPeriod)(struct TTimer *this);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  25

ADDR   CODE            LINE SOURCELINE
                       2381 ; rtxcobj.c  506                void    (*Tick)(struct TTimer *this, int Time);
                       2382 ; rtxcobj.c  507                TEvent  *TimeOut;
                       2383 ; rtxcobj.c  508          /* Private: */
                       2384 ; rtxcobj.c  509                short   Period;
                       2385 ; rtxcobj.c  510                CLKBLK  *Handle;
                       2386 ; rtxcobj.c  511        
                       2387 ; rtxcobj.c  512        } TTimer;
                       2388 ; rtxcobj.c  513          
                       2389 ; rtxcobj.c  514        
                       2390 ; rtxcobj.c  515        void TTimer_TTimer(struct TTimer *this)
                       2391 ; rtxcobj.c  516        {
00083B 00              2392         ALIGN   1
                       2394         PUBLIC  _TTimer_TTimer
00083C                 2395 _TTimer_TTimer:
00083C 0F30            2428         PUSH.W  R4, R5
                       2432 ; rtxcobj.c  517         if(this>(void *)0)
00083E 8951            2434         MOV.W   R5,R1
000840 8940            2435         MOV.W   R4,R0
000842 99540000        2436         CMP.W   R5,#00H
000846 F202            2437         BNE     _90
000848 99440000        2438         CMP.W   R4,#00H
000848 99440000        2438         CMP.W   R4,#00H
00084C                 2439 _90:
00084C F914            2442         BL      _89
                       2443 ; rtxcobj.c  518         { 
                       2444 ; rtxcobj.c  519          this->Handle=KS_alloc_timer();
                       2446         CALL    _KS_alloc_timer
00084E C4rrrrrr       +2446 ;       FCALL   _KS_alloc_timer
000852 86AC42          2447         MOV.B   ES,R5L
000855 8C0C1C          2448         MOV.W   [R4+28],R0
000858 8C1C1E          2449         MOV.W   [R4+30],R1
                       2450 ; rtxcobj.c  520          this->TimeOut=newTEvent(0);
00085B B910            2452         MOV.W   R1,#00H
00085D B900            2453         MOV.W   R0,#00H
00085F C5FCE8          2454         CALL    _newTEvent
000862 86AC42          2455         MOV.B   ES,R5L
000865 8C0C16          2456         MOV.W   [R4+22],R0
000868 8C1C18          2457         MOV.W   [R4+24],R1
                       2458 ; rtxcobj.c  521          this->Period=0;
00086B 86AC42          2460         MOV.B   ES,R5L
00086E BC401A          2461         MOV.W   [R4+26],#00H
                       2462 ; rtxcobj.c  522          this->ObjectID=TTimerID;
000871 86AC42          2464         MOV.B   ES,R5L
000874 BA43            2465         MOV.W   [R4],#03H
                       2466 ; rtxcobj.c  523         }
000876                 2468 _89:
                       2469 ; rtxcobj.c  524        }
000876 2F30            2471         POP.W   R4, R5
000878 D680            2473         RET
                       2476 ; rtxcobj.c  525        
                       2477 ; rtxcobj.c  526        
                       2478 ; rtxcobj.c  527        void TTimer__TTimer(struct TTimer *this)
                       2479 ; rtxcobj.c  528        {
                       2480         ALIGN   1
                       2482         PUBLIC  _TTimer__TTimer
00087A                 2483 _TTimer__TTimer:
00087A 0F30            2487         PUSH.W  R4, R5
                       2491 ; rtxcobj.c  529         if(this>(void *)0)
00087C 8951            2493         MOV.W   R5,R1
00087E 8940            2494         MOV.W   R4,R0
000880 99540000        2495         CMP.W   R5,#00H
000884 F202            2496         BNE     _92
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  26

ADDR   CODE            LINE SOURCELINE
000886 99440000        2497         CMP.W   R4,#00H
000886 99440000        2497         CMP.W   R4,#00H
00088A                 2498 _92:
00088A F90D            2501         BL      _91
                       2502 ; rtxcobj.c  530         { 
                       2503 ; rtxcobj.c  531          deleteTEvent(this->TimeOut);
00088C 86AC42          2505         MOV.B   ES,R5L
00088F 8C0416          2506         MOV.W   R0,[R4+22]
000892 8C1418          2507         MOV.W   R1,[R4+24]
000895 C5FD61          2508         CALL    _deleteTEvent
                       2509 ; rtxcobj.c  532          KS_free_timer(this->Handle);
000898 86AC42          2511         MOV.B   ES,R5L
00089B 8C041C          2512         MOV.W   R0,[R4+28]
00089E 8C141E          2513         MOV.W   R1,[R4+30]
                       2514         CALL    _KS_free_timer
0008A1 C4rrrrrr       +2514 ;       FCALL   _KS_free_timer
                       2515 ; rtxcobj.c  533         }
0008A6                 2517 _91:
                       2518 ; rtxcobj.c  534        }
0008A6 2F30            2520         POP.W   R4, R5
0008A8 D680            2522         RET
                       2525 ; rtxcobj.c  535        
                       2526 ; rtxcobj.c  536        
                       2527 ; rtxcobj.c  537        void TTimer_SetPeriod(struct TTimer *this, int Time)
                       2528 ; rtxcobj.c  538        {
                       2529         ALIGN   1
                       2531         PUBLIC  _TTimer_SetPeriod
0008AA                 2532 _TTimer_SetPeriod:
0008AA 0F70            2536         PUSH.W  R4, R5, R6
0008AC A97A            2538         ADDS.W  R7,#0AH
0008AE 8C2F04          2542         MOV.W   [R7+4],R2
                       2547 ; rtxcobj.c  539         if(this->Period==0)
0008B1 8951            2549         MOV.W   R5,R1
0008B3 8940            2550         MOV.W   R4,R0
0008B5 9940001A        2551         ADD.W   R4,#01AH
0008B9 862C42          2552         MOV.B   ES,R1L
0008BC 8C201A          2553         MOV.W   R2,[R0+26]
0008BF F21F            2554         BNE     _93
                       2555 ; rtxcobj.c  540         {
                       2556 ; rtxcobj.c  541          if(Time!=0)
0008C1 8C2704          2558         MOV.W   R2,[R7+4]
0008C4 F334            2559         BEQ     _97
                       2560 ; rtxcobj.c  542          {
                       2561 ; rtxcobj.c  543           KS_start_timer(this->Handle,(TICKS)Time/CLKTICK,
                       2562 ; rtxcobj.c  544                         (TICKS)Time/CLKTICK,this->TimeOut->ID);        /* start 
                            cyclic timer */
0008C6 862C42          2564         MOV.B   ES,R1L
0008C9 8C201C          2565         MOV.W   R2,[R0+28]
0008CC 8C301E          2566         MOV.W   R3,[R0+30]
0008CF 8C3F02          2567         MOV.W   [R7+2],R3
0008D2 8A2F            2568         MOV.W   [R7],R2
0008D4 8C2704          2569         MOV.W   R2,[R7+4]
0008D7 8932            2570         MOV.W   R3,R2
0008D9 9839            2571         SEXT.W  R3
0008DB E9290008        2572         DIV.D   R2,#08H
0008DF 862C42          2573         MOV.B   ES,R1L
0008E2 8C1018          2574         MOV.W   R1,[R0+24]
0008E5 8C0016          2575         MOV.W   R0,[R0+22]
0008E8 862C42          2577         MOV.B   ES,R1L
0008EB 84C01A          2578         MOV.B   R6L,[R0+26]
0008EE 8932            2579         MOV.W   R3,R2
0008F0 8923            2580         MOV.W   R2,R3
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  27

ADDR   CODE            LINE SOURCELINE
0008F2 8C1702          2581         MOV.W   R1,[R7+2]
0008F5 8A07            2582         MOV.W   R0,[R7]
                       2583         CALL    _KS_start_timer
0008F7 C4rrrrrr       +2583 ;       FCALL   _KS_start_timer
                       2584 ; rtxcobj.c  545          }
                       2585 ; rtxcobj.c  546         }
0008FB FE19            2587         BR      _97
0008FB FE1900          2587         BR      _97
0008FE                 2588 _93:
                       2590 ; rtxcobj.c  547         else
                       2591 ; rtxcobj.c  548         {
                       2592 ; rtxcobj.c  549          if(Time==0)
0008FE 8C2704          2594         MOV.W   R2,[R7+4]
000901 F208            2595         BNE     _94
                       2596 ; rtxcobj.c  550          {
                       2597 ; rtxcobj.c  551           KS_stop_timer(this->Handle);
000903 862C42          2599         MOV.B   ES,R1L
000906 8C101E          2600         MOV.W   R1,[R0+30]
000909 8C001C          2601         MOV.W   R0,[R0+28]
                       2603         CALL    _KS_stop_timer
00090C C4rrrrrr       +2603 ;       FCALL   _KS_stop_timer
                       2604 ; rtxcobj.c  552          }
000910 FE0E            2606         BR      _97
000910 FE0E            2606         BR      _97
000912                 2607 _94:
                       2609 ; rtxcobj.c  553          else                                                  /* stop cyclic ti
                            mer */
                       2610 ; rtxcobj.c  554          { 
                       2611 ; rtxcobj.c  555           KS_restart_timer(this->Handle,(TICKS)Time/CLKTICK,
                       2612 ; rtxcobj.c  556                            (TICKS)Time/CLKTICK);               /* restart cyclic
                             timer */
000912 862C42          2614         MOV.B   ES,R1L
000915 8C101E          2615         MOV.W   R1,[R0+30]
000918 8C001C          2616         MOV.W   R0,[R0+28]
00091B 8C2704          2618         MOV.W   R2,[R7+4]
00091E 8932            2619         MOV.W   R3,R2
000920 9839            2620         SEXT.W  R3
000922 E9290008        2621         DIV.D   R2,#08H
000926 8932            2622         MOV.W   R3,R2
000928 8923            2623         MOV.W   R2,R3
                       2624         CALL    _KS_restart_timer
00092A C4rrrrrr       +2624 ;       FCALL   _KS_restart_timer
                       2625 ; rtxcobj.c  557          }
                       2626 ; rtxcobj.c  558         }
00092E                 2628 _97:
                       2629 ; rtxcobj.c  559         this->Period=Time;
00092E 8C0704          2631         MOV.W   R0,[R7+4]
000931 86AC42          2632         MOV.B   ES,R5L
000934 8A0C            2633         MOV.W   [R4],R0
                       2636 ; rtxcobj.c  560        }
000936 A976            2638         ADDS.W  R7,#06H
000938 2F70            2640         POP.W   R4, R5, R6
00093A D680            2642         RET
                       2645 ; rtxcobj.c  561        
                       2646 ; rtxcobj.c  562        
                       2647 ; rtxcobj.c  563        
                       2648 ; rtxcobj.c  564        int TTimer_GetPeriod(struct TTimer *this)
                       2649 ; rtxcobj.c  565        {
                       2650         ALIGN   1
                       2652         PUBLIC  _TTimer_GetPeriod
00093C                 2653 _TTimer_GetPeriod:
                       2659 ; rtxcobj.c  566         return(this->Period);
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  28

ADDR   CODE            LINE SOURCELINE
00093C 862C42          2661         MOV.B   ES,R1L
00093F 8C001A          2662         MOV.W   R0,[R0+26]
                       2664 ; rtxcobj.c  567        }
000942 D680            2666         RET
                       2668 ; rtxcobj.c  568        
                       2669 ; rtxcobj.c  569        
                       2670 ; rtxcobj.c  570        
                       2671 ; rtxcobj.c  571        void TTimer_Tick(struct TTimer *this, int Time)
                       2672 ; rtxcobj.c  572        {
                       2673         ALIGN   1
                       2675         PUBLIC  _TTimer_Tick
000944                 2676 _TTimer_Tick:
000944 0F70            2680         PUSH.W  R4, R5, R6
000946 A97C            2682         ADDS.W  R7,#0CH
                       2688 ; rtxcobj.c  573         if(this->Period==0)
000948 8951            2690         MOV.W   R5,R1
00094A 8940            2691         MOV.W   R4,R0
00094C 9940001A        2692         ADD.W   R4,#01AH
000950 862C42          2693         MOV.B   ES,R1L
000953 8C301A          2694         MOV.W   R3,[R0+26]
000956 F21B            2695         BNE     _98
                       2696 ; rtxcobj.c  574         {
                       2697 ; rtxcobj.c  575        //  this->TimeOut->Set(this->TimeOut);  /* signal update */
                       2698 ; rtxcobj.c  576          KS_start_timer(this->Handle,(TICKS)Time/CLKTICK,0,this->TimeOut->ID);
000958 862C42          2700         MOV.B   ES,R1L
00095B 8C401C          2701         MOV.W   R4,[R0+28]
00095E 8C501E          2702         MOV.W   R5,[R0+30]
000961 8C5F02          2703         MOV.W   [R7+2],R5
000964 8A4F            2704         MOV.W   [R7],R4
000966 8942            2705         MOV.W   R4,R2
000968 8954            2706         MOV.W   R5,R4
00096A 9859            2707         SEXT.W  R5
00096C E9490008        2708         DIV.D   R4,#08H
000970 B930            2712         MOV.W   R3,#00H
000972 862C42          2713         MOV.B   ES,R1L
000975 8C1018          2714         MOV.W   R1,[R0+24]
000978 8C0016          2715         MOV.W   R0,[R0+22]
00097B 862C42          2717         MOV.B   ES,R1L
00097E 84C01A          2718         MOV.B   R6L,[R0+26]
000981 8924            2719         MOV.W   R2,R4
000983 8C1702          2720         MOV.W   R1,[R7+2]
000986 8A07            2721         MOV.W   R0,[R7]
                       2722         CALL    _KS_start_timer
000988 C4rrrrrr       +2722 ;       FCALL   _KS_start_timer
                       2723 ; rtxcobj.c  577                                                     /* single shot timeout */
                       2724 ; rtxcobj.c  578         }
00098C FE19            2726         BR      _99
00098C FE19            2726         BR      _99
00098E                 2727 _98:
                       2730 ; rtxcobj.c  579         else
                       2731 ; rtxcobj.c  580         {
                       2732 ; rtxcobj.c  581          KS_restart_timer(this->Handle,(TICKS)Time/CLKTICK,
                       2733 ; rtxcobj.c  582                          (TICKS)(this->Period)/CLKTICK);   /* restart cyclic tim
                            er */
00098E 862C42          2735         MOV.B   ES,R1L
000991 8C101E          2736         MOV.W   R1,[R0+30]
000994 8C001C          2737         MOV.W   R0,[R0+28]
000997 8C1F02          2739         MOV.W   [R7+2],R1
00099A 8A0F            2740         MOV.W   [R7],R0
00099C 8902            2741         MOV.W   R0,R2
00099E 8910            2742         MOV.W   R1,R0
0009A0 9819            2743         SEXT.W  R1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  29

ADDR   CODE            LINE SOURCELINE
0009A2 E9090008        2744         DIV.D   R0,#08H
0009A6 86AC42          2748         MOV.B   ES,R5L
0009A9 8A24            2749         MOV.W   R2,[R4]
0009AB 8932            2750         MOV.W   R3,R2
0009AD 9839            2751         SEXT.W  R3
0009AF E9290008        2752         DIV.D   R2,#08H
0009B3 8932            2753         MOV.W   R3,R2
0009B5 8920            2754         MOV.W   R2,R0
0009B7 8C1702          2755         MOV.W   R1,[R7+2]
0009BA 8A07            2756         MOV.W   R0,[R7]
                       2757         CALL    _KS_restart_timer
0009BC C4rrrrrr       +2757 ;       FCALL   _KS_restart_timer
                       2758 ; rtxcobj.c  583         }
0009C0                 2760 _99:
                       2761 ; rtxcobj.c  584        }
0009C0 A974            2763         ADDS.W  R7,#04H
0009C2 2F70            2765         POP.W   R4, R5, R6
0009C4 D680            2767         RET
                       2769 ; rtxcobj.c  585        
                       2770 ; rtxcobj.c  586        
                       2771 ; rtxcobj.c  587        //static void Timer_RealThread(void);
                       2772 ; rtxcobj.c  588        
                       2773 ; rtxcobj.c  589        
                       2774 ; rtxcobj.c  590        //int Timer_Thread_Create(void * Timer,int Priority, void (far *entry)(vo
                            id))
                       2775 ; rtxcobj.c  591        //{
                       2776 ; rtxcobj.c  592        
                       2777 ; rtxcobj.c  593        /* VAR */
                       2778 ; rtxcobj.c  594        
                       2779 ; rtxcobj.c  595        /* BEGIN */
                       2780 ; rtxcobj.c  596        // ((struct TimerObject *)Timer)->Thread=Thread_Create(Priority,Timer_Rea
                            lThread);
                       2781 ; rtxcobj.c  597        // if(((struct TimerObject *)Timer)->Thread==0)
                       2782 ; rtxcobj.c  598        //  return(0);
                       2783 ; rtxcobj.c  599        // ((struct TimerObject *)Timer)->TimeOutFunc=entry;
                       2784 ; rtxcobj.c  600        // KS_deftask_arg(((struct TimerObject *)Timer)->Thread->Num,Timer);
                       2785 ; rtxcobj.c  601        // Thread_Execute(((struct TimerObject *)Timer)->Thread);
                       2786 ; rtxcobj.c  602        // return(-1);
                       2787 ; rtxcobj.c  603        //}
                       2788 ; rtxcobj.c  604        
                       2789 ; rtxcobj.c  605        
                       2790 ; rtxcobj.c  606        
                       2791 ; rtxcobj.c  607        //static void Timer_RealThread(void)
                       2792 ; rtxcobj.c  608        //{
                       2793 ; rtxcobj.c  609         /* VAR */
                       2794 ; rtxcobj.c  610        
                       2795 ; rtxcobj.c  611         /* BEGIN */
                       2796 ; rtxcobj.c  612        // for(;;)
                       2797 ; rtxcobj.c  613        // {
                       2798 ; rtxcobj.c  614        //  KS_wait(((struct TimerObject *)KS_inqtask_arg(0))->TimeOutEvent);
                       2799 ; rtxcobj.c  615        
                       2800 ; rtxcobj.c  616        //  ((struct TimerObject *)KS_inqtask_arg(0))->TimeOutFunc();
                       2801 ; rtxcobj.c  617        // } /* END for */
                       2802 ; rtxcobj.c  618        //} /* END task */
                       2803 ; rtxcobj.c  619        
                       2804 ; rtxcobj.c  620        
                       2805 ; rtxcobj.c  621        
                       2806 ; rtxcobj.c  622        static MAP TTimerMap=0;
000003                 2807         RSEG    RTXCOBJ_INI_FA
000003                 2809 _TTimerMap:
                       2811 ; rtxcobj.c  623        static TTimer TTimerPartition[NTMRS];
                       2812 ; rtxcobj.c  624        
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  30

ADDR   CODE            LINE SOURCELINE
                       2813 ; rtxcobj.c  625        
                       2814 ; rtxcobj.c  626        
                       2815 ; rtxcobj.c  627        TTimer *newTTimer(void)
                       2816 ; rtxcobj.c  628        {
000003 00              2817         DB      000H
0009C6                 2818         RSEG    RTXCOBJ_PR
                       2819         ALIGN   1
                       2821         PUBLIC  _newTTimer
0009C6                 2822 _newTTimer:
0009C6 0F30            2828         PUSH.W  R4, R5
0009C8 A97C            2830         ADDS.W  R7,#0CH
                       2834 ; rtxcobj.c  629         
                       2835 ; rtxcobj.c  630        /* VAR */
                       2836 ; rtxcobj.c  631         TTimer *Timer;
                       2837 ; rtxcobj.c  632        
                       2838 ; rtxcobj.c  633        /* BEGIN */
                       2839 ; rtxcobj.c  634         if(TTimerMap==0)
0009CA 964842rr        2841         MOV.B   ES,#SEG( _TTimerMap )
0009CE 9908rrrr        2842         MOV.W   R0,#SOF( _TTimerMap )
0009D2 8200            2843         MOV.B   R0L,[R0]
0009D4 F213            2844         BNE     _101
                       2845 ; rtxcobj.c  635         {
                       2846 ; rtxcobj.c  636          TTimerMap=KS_create_part(&TTimerPartition,sizeof(struct TTimer),NTMRS);
                              /* Create Timer map */
0009D6 9918rrrr        2848         MOV.W   R1,#SEG( _TTimerPartition )
0009DA 9908rrrr        2849         MOV.W   R0,#SOF( _TTimerPartition )
0009DE 99380020        2850         MOV.W   R3,#020H
0009E2 8923            2851         MOV.W   R2,R3
                       2852         CALL    _KS_create_part
0009E4 C4rrrrrr       +2852 ;       FCALL   _KS_create_part
0009E8 964842rr        2853         MOV.B   ES,#SEG( _TTimerMap )
0009EC 9918rrrr        2854         MOV.W   R1,#SOF( _TTimerMap )
0009F0 8209            2855         MOV.B   [R1],R0L
                       2856 ; rtxcobj.c  637          if(TTimerMap==0)
0009F2 6100            2858         OR.B    R0L,R0L
0009F4 F203            2859         BNE     _101
                       2860 ; rtxcobj.c  638           return(0);
0009F6 B910            2862         MOV.W   R1,#00H
0009F8 B900            2863         MOV.W   R0,#00H
0009FA FE66            2864         BR      _106
                       2865 ; rtxcobj.c  639         }
0009FC                 2867 _101:
                       2868 ; rtxcobj.c  640         Timer=KS_alloc(TTimerMap);
0009FC 964842rr        2870         MOV.B   ES,#SEG( _TTimerMap )
000A00 9908rrrr        2871         MOV.W   R0,#SOF( _TTimerMap )
000A04 8200            2872         MOV.B   R0L,[R0]
                       2873         CALL    _KS_alloc
000A06 C4rrrrrr       +2873 ;       FCALL   _KS_alloc
                       2875 ; rtxcobj.c  641         if(Timer==(void *)0)
000A0A 8931            2877         MOV.W   R3,R1
000A0C 8920            2878         MOV.W   R2,R0
000A0E 6910            2879         OR.W    R1,R0
000A10 F203            2882         BNE     _102
                       2883 ; rtxcobj.c  642         {
                       2884 ; rtxcobj.c  643        //  LogEvent(EventNoMoreTimers,0);
                       2885 ; rtxcobj.c  644          return(0);    
000A12 B910            2887         MOV.W   R1,#00H
000A14 B900            2888         MOV.W   R0,#00H
000A16 FE58            2889         BR      _106
                       2890 ; rtxcobj.c  645         }
000A18                 2892 _102:
                       2895 ; rtxcobj.c  646         Timer->TTimer=TTimer_TTimer;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  31

ADDR   CODE            LINE SOURCELINE
000A18 8913            2897         MOV.W   R1,R3
000A1A 8902            2898         MOV.W   R0,R2
000A1C 99000002        2899         ADD.W   R0,#02H
000A20 862C42          2900         MOV.B   ES,R1L
000A23 9A08rrrr        2901         MOV.W   [R0],#SOF( _TTimer_TTimer )
000A27 9D080002rrrr    2902         MOV.W   [R0+2],#SEG( _TTimer_TTimer )
                       2903 ; rtxcobj.c  647         Timer->_TTimer=TTimer__TTimer;
000A2D 8953            2905         MOV.W   R5,R3
000A2F 8942            2906         MOV.W   R4,R2
000A31 99400006        2907         ADD.W   R4,#06H
000A35 86AC42          2908         MOV.B   ES,R5L
000A38 9A48rrrr        2909         MOV.W   [R4],#SOF( _TTimer__TTimer )
000A3C 9D480002rrrr    2910         MOV.W   [R4+2],#SEG( _TTimer__TTimer )
                       2911 ; rtxcobj.c  648         Timer->SetPeriod=TTimer_SetPeriod;
000A42 8953            2913         MOV.W   R5,R3
000A44 8942            2914         MOV.W   R4,R2
000A46 9940000A        2915         ADD.W   R4,#0AH
000A4A 86AC42          2916         MOV.B   ES,R5L
000A4D 9A48rrrr        2917         MOV.W   [R4],#SOF( _TTimer_SetPeriod )
000A51 9D480002rrrr    2918         MOV.W   [R4+2],#SEG( _TTimer_SetPeriod )
                       2919 ; rtxcobj.c  649         Timer->GetPeriod=TTimer_GetPeriod;
000A57 8953            2921         MOV.W   R5,R3
000A59 8942            2922         MOV.W   R4,R2
000A5B 9940000E        2923         ADD.W   R4,#0EH
000A5F 86AC42          2924         MOV.B   ES,R5L
000A62 9A48rrrr        2925         MOV.W   [R4],#SOF( _TTimer_GetPeriod )
000A66 9D480002rrrr    2926         MOV.W   [R4+2],#SEG( _TTimer_GetPeriod )
                       2927 ; rtxcobj.c  650         Timer->Tick=TTimer_Tick;
000A6C 8953            2929         MOV.W   R5,R3
000A6E 8942            2930         MOV.W   R4,R2
000A70 99400012        2931         ADD.W   R4,#012H
000A74 86AC42          2932         MOV.B   ES,R5L
000A77 9A48rrrr        2933         MOV.W   [R4],#SOF( _TTimer_Tick )
000A7B 9D480002rrrr    2934         MOV.W   [R4+2],#SEG( _TTimer_Tick )
                       2935 ; rtxcobj.c  651         Timer->TTimer(Timer);
000A81 862C42          2937         MOV.B   ES,R1L
000A84 8A40            2938         MOV.W   R4,[R0]
000A86 8C5002          2939         MOV.W   R5,[R0+2]
000A89 8C3F02          2940         MOV.W   [R7+2],R3
000A8C 8A2F            2941         MOV.W   [R7],R2
000A8E 8913            2942         MOV.W   R1,R3
000A90 8902            2943         MOV.W   R0,R2
000A92 C4rrrrrr        2948         FCALL   __ICALL
                       2951 ; rtxcobj.c  652         if(Timer->Handle==(CLKBLK *)0)
000A96 8C1702          2953         MOV.W   R1,[R7+2]
000A99 8A07            2954         MOV.W   R0,[R7]
000A9B 862C42          2955         MOV.B   ES,R1L
000A9E 8C101E          2956         MOV.W   R1,[R0+30]
000AA1 8C001C          2957         MOV.W   R0,[R0+28]
000AA4 6910            2958         OR.W    R1,R0
000AA6 F20D            2959         BNE     _103
                       2960 ; rtxcobj.c  653         {
                       2961 ; rtxcobj.c  654          KS_free(TTimerMap,Timer);
000AA8 964842rr        2963         MOV.B   ES,#SEG( _TTimerMap )
000AAC 9908rrrr        2964         MOV.W   R0,#SOF( _TTimerMap )
000AB0 8200            2965         MOV.B   R0L,[R0]
000AB2 8C3702          2966         MOV.W   R3,[R7+2]
000AB5 8A27            2967         MOV.W   R2,[R7]
                       2968         CALL    _KS_free
000AB7 C4rrrrrr       +2968 ;       FCALL   _KS_free
                       2972 ; rtxcobj.c  655          return(0);
000ABB B910            2974         MOV.W   R1,#00H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  32

ADDR   CODE            LINE SOURCELINE
000ABD B900            2975         MOV.W   R0,#00H
000ABF FE04            2976         BR      _106
                       2977 ; rtxcobj.c  656         }
000AC2                 2979 _103:
                       2981 ; rtxcobj.c  657         return(Timer);
000AC2 8C1702          2983         MOV.W   R1,[R7+2]
000AC5 8A07            2984         MOV.W   R0,[R7]
                       2987 ; rtxcobj.c  658        }
000AC8                 2989 _106:
000AC8 A974            2990         ADDS.W  R7,#04H
000ACA 2F30            2992         POP.W   R4, R5
000ACC D680            2994         RET
                       2997 ; rtxcobj.c  659        
                       2998 ; rtxcobj.c  660        
                       2999 ; rtxcobj.c  661        void deleteTTimer(TTimer *Timer)
                       3000 ; rtxcobj.c  662        {
                       3001         ALIGN   1
                       3003         PUBLIC  _deleteTTimer
000ACE                 3004 _deleteTTimer:
000ACE 0F30            3008         PUSH.W  R4, R5
000AD0 A97C            3010         ADDS.W  R7,#0CH
                       3014 ; rtxcobj.c  663         Timer->_TTimer(Timer);
000AD2 862C42          3016         MOV.B   ES,R1L
000AD5 8C4006          3017         MOV.W   R4,[R0+6]
000AD8 8C5008          3018         MOV.W   R5,[R0+8]
000ADB 8C1F02          3019         MOV.W   [R7+2],R1
000ADE 8A0F            3020         MOV.W   [R7],R0
000AE0 C4rrrrrr        3025         FCALL   __ICALL
                       3028 ; rtxcobj.c  664         KS_free(TTimerMap,Timer);
000AE4 964842rr        3030         MOV.B   ES,#SEG( _TTimerMap )
000AE8 9908rrrr        3031         MOV.W   R0,#SOF( _TTimerMap )
000AEC 8200            3032         MOV.B   R0L,[R0]
000AEE 8C3702          3033         MOV.W   R3,[R7+2]
000AF1 8A27            3034         MOV.W   R2,[R7]
                       3035         CALL    _KS_free
000AF3 C4rrrrrr       +3035 ;       FCALL   _KS_free
                       3039 ; rtxcobj.c  665        }
000AF7 A974            3041         ADDS.W  R7,#04H
000AF9 2F30            3043         POP.W   R4, R5
000AFB D680            3045         RET
                       3047 ; rtxcobj.c  666        
                       3048 ; rtxcobj.c  667        
                       3049 ; rtxcobj.c  668        
                       3050 ; rtxcobj.c  669        
                       3051 ; rtxcobj.c  670        /**************** TEventList Object *****************/
                       3052 ; rtxcobj.c  671        typedef struct TEventList {
                       3053 ; rtxcobj.c  672          /* Public: */
                       3054 ; rtxcobj.c  673                int     ObjectID;
                       3055 ; rtxcobj.c  674                void    (*TEventList)(struct TEventList *this);
                       3056 ; rtxcobj.c  675                void    (*_TEventList)(struct TEventList *this);
                       3057 ; rtxcobj.c  676                int     (*Append)(struct TEventList *this, TEvent *Event);
                       3058 ; rtxcobj.c  677                void    (*Clear)(struct TEventList *this, TEvent *Event);
                       3059 ; rtxcobj.c  678                int     (*InList)(struct TEventList *this, TEvent *Event);
                       3060 ; rtxcobj.c  679                TEvent  *(*Wait)(struct TEventList *this, long *TimeOut);
                       3061 ; rtxcobj.c  680          /* Private: */
                       3062 ; rtxcobj.c  681                TEvent  *Events[16];
                       3063 ; rtxcobj.c  682                SEMA    RTXCList[16];
                       3064 ; rtxcobj.c  683        } TEventList;
                       3065 ; rtxcobj.c  684        
                       3066 ; rtxcobj.c  685        
                       3067 ; rtxcobj.c  686        struct TEventList TEventListPartition[TEVENTLIST_COUNT];
                       3068 ; rtxcobj.c  687        MAP             TEventListMap=0;
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  33

ADDR   CODE            LINE SOURCELINE
000004                 3069         RSEG    RTXCOBJ_INI_FA
                       3072         PUBLIC  _TEventListMap
000004                 3073 _TEventListMap:
                       3074 ; rtxcobj.c  688        
                       3075 ; rtxcobj.c  689        
                       3076 ; rtxcobj.c  690        void    TEventList_TEventList(struct TEventList *this)
                       3077 ; rtxcobj.c  691        {
000004 00              3078         DB      000H
000AFD                 3079         RSEG    RTXCOBJ_PR
000AFD 00              3080         ALIGN   1
                       3082         PUBLIC  _TEventList_TEventList
000AFE                 3083 _TEventList_TEventList:
                       3121 ; rtxcobj.c  692         if(this>(struct TEventList *)0)
000AFE 99140000        3123         CMP.W   R1,#00H
000B02 F202            3124         BNE     _108
000B04 99040000        3125         CMP.W   R0,#00H
000B04 99040000        3125         CMP.W   R0,#00H
000B08                 3126 _108:
000B08 F903            3127         BL      _107
                       3128 ; rtxcobj.c  693         {
                       3129 ; rtxcobj.c  694          this->ObjectID=TEventListID;
000B0A 862C42          3131         MOV.B   ES,R1L
000B0D BA02            3132         MOV.W   [R0],#02H
                       3133 ; rtxcobj.c  695         }
000B10                 3135 _107:
                       3136 ; rtxcobj.c  696        }
000B10 D680            3138         RET
                       3141 ; rtxcobj.c  697        
                       3142 ; rtxcobj.c  698        
                       3143 ; rtxcobj.c  699        void    TEventList__TEventList(struct TEventList *this)
                       3144 ; rtxcobj.c  700        {
                       3145         ALIGN   1
                       3147         PUBLIC  _TEventList__TEventList
000B12                 3148 _TEventList__TEventList:
                       3154 ; rtxcobj.c  701         if(this>(struct TEventList *)0)
000B12 99140000        3156         CMP.W   R1,#00H
000B16 F202            3157         BNE     _110
000B18 99040000        3158         CMP.W   R0,#00H
000B18 99040000        3158         CMP.W   R0,#00H
000B1C                 3159 _110:
000B1C F903            3160         BL      _109
                       3161 ; rtxcobj.c  702          this->ObjectID=0;
000B1E 862C42          3163         MOV.B   ES,R1L
000B21 BA00            3164         MOV.W   [R0],#00H
000B21 BA0000          3164         MOV.W   [R0],#00H
000B24                 3165 _109:
                       3166 ; rtxcobj.c  703        }
000B24 D680            3168         RET
                       3171 ; rtxcobj.c  704        
                       3172 ; rtxcobj.c  705        
                       3173 ; rtxcobj.c  706        int     TEventList_Append(struct TEventList *this, TEvent *Event)
                       3174 ; rtxcobj.c  707        {
                       3175         ALIGN   1
                       3177         PUBLIC  _TEventList_Append
000B26                 3178 _TEventList_Append:
000B26 0F30            3182         PUSH.W  R4, R5
000B28 9972000C        3184         SUB.W   R7,#0CH
                       3194 ; rtxcobj.c  708        
                       3195 ; rtxcobj.c  709         TEvent **Ptr;
                       3196 ; rtxcobj.c  710        
                       3197 ; rtxcobj.c  711         Ptr=&(this->Events[0]);
000B2C 8951            3199         MOV.W   R5,R1
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  34

ADDR   CODE            LINE SOURCELINE
000B2E 8940            3200         MOV.W   R4,R0
000B30 9940001A        3201         ADD.W   R4,#01AH
000B34 8C5F02          3202         MOV.W   [R7+2],R5
000B37 8A4F            3203         MOV.W   [R7],R4
                       3205 ; rtxcobj.c  712         if(this==0)
000B39 8C1F0A          3207         MOV.W   [R7+10],R1
000B3C 8C0F08          3208         MOV.W   [R7+8],R0
000B3F 6910            3209         OR.W    R1,R0
000B41 F203            3212         BNE     _111
                       3213 ; rtxcobj.c  713          return(0);
000B43 B900            3215         MOV.W   R0,#00H
000B45 FE3E            3216         BR      _120
000B45 FE3E00          3216         BR      _120
000B48                 3217 _111:
                       3224 ; rtxcobj.c  714         if(Event==0)
000B48 8C3F06          3226         MOV.W   [R7+6],R3
000B4B 8C2F04          3227         MOV.W   [R7+4],R2
000B4E 6932            3228         OR.W    R3,R2
000B50 F202            3231         BNE     _112
                       3232 ; rtxcobj.c  715          return(0);
000B52 B900            3234         MOV.W   R0,#00H
000B54 FE36            3235         BR      _120
000B54 FE36            3235         BR      _120
000B56                 3236 _112:
                       3243 ; rtxcobj.c  716         while(*Ptr!=0)
000B56 8C1702          3245         MOV.W   R1,[R7+2]
000B59 8A07            3246         MOV.W   R0,[R7]
000B5B 862C42          3247         MOV.B   ES,R1L
000B5E 8C1002          3248         MOV.W   R1,[R0+2]
000B61 8A00            3249         MOV.W   R0,[R0]
000B63 6910            3250         OR.W    R1,R0
000B65 F315            3251         BEQ     _115
000B67 9908FFFF        3252         MOV.W   R0,#0FFFFH
000B67 9908FFFF00      3252         MOV.W   R0,#0FFFFH
000B6C                 3253 _113:
                       3254 ; rtxcobj.c  717         {
                       3255 ; rtxcobj.c  718          if(*Ptr==Event)
000B6C 8C3706          3257         MOV.W   R3,[R7+6]
000B6F 8C2704          3258         MOV.W   R2,[R7+4]
000B72 86AC42          3259         MOV.B   ES,R5L
000B75 4C3C02          3260         CMP.W   [R4+2],R3
000B78 F201            3261         BNE     _121
000B7A 4A2C            3262         CMP.W   [R4],R2
000B7A 4A2C            3262         CMP.W   [R4],R2
000B7C                 3263 _121:
000B7C F201            3264         BNE     _114
                       3265 ; rtxcobj.c  719           return(-1);
000B7E FE21            3267         BR      _120
000B7E FE21            3267         BR      _120
000B80                 3268 _114:
                       3275 ; rtxcobj.c  720          Ptr++;
000B80 99400004        3277         ADD.W   R4,#04H
000B84 86AC42          3281         MOV.B   ES,R5L
000B87 8A24            3282         MOV.W   R2,[R4]
000B89 8C3402          3283         MOV.W   R3,[R4+2]
000B8C 6932            3284         OR.W    R3,R2
000B8E F2EE            3285         BNE     _113
                       3286 ; rtxcobj.c  721         }
000B90                 3288 _115:
                       3289 ; rtxcobj.c  722         if(Ptr>=&(this->Events[15]))
000B90 8C170A          3291         MOV.W   R1,[R7+10]
000B93 8C0708          3292         MOV.W   R0,[R7+8]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  35

ADDR   CODE            LINE SOURCELINE
000B96 99000056        3293         ADD.W   R0,#056H
000B9A 4951            3297         CMP.W   R5,R1
000B9C F201            3298         BNE     _122
000B9E 4940            3299         CMP.W   R4,R0
000B9E 4940            3299         CMP.W   R4,R0
000BA0                 3300 _122:
000BA0 F102            3301         BCS     _116
                       3302 ; rtxcobj.c  723          return(0);
000BA2 B900            3304         MOV.W   R0,#00H
000BA4 FE0E            3305         BR      _120
000BA4 FE0E            3305         BR      _120
000BA6                 3306 _116:
                       3311 ; rtxcobj.c  724         *Ptr=Event;
000BA6 8C1706          3313         MOV.W   R1,[R7+6]
000BA9 8C0704          3314         MOV.W   R0,[R7+4]
000BAC 86AC42          3315         MOV.B   ES,R5L
000BAF 8A0C            3316         MOV.W   [R4],R0
000BB1 8C1C02          3317         MOV.W   [R4+2],R1
                       3320 ; rtxcobj.c  725         *(Ptr+1)=0;
000BB4 86AC42          3322         MOV.B   ES,R5L
000BB7 BC4004          3323         MOV.W   [R4+4],#00H
000BBA BC4006          3324         MOV.W   [R4+6],#00H
                       3325 ; rtxcobj.c  726         return(-1);
000BBD 9908FFFF        3327         MOV.W   R0,#0FFFFH
                       3329 ; rtxcobj.c  727        }
000BC2                 3331 _120:
000BC2 9970000C        3332         ADD.W   R7,#0CH
000BC6 2F30            3334         POP.W   R4, R5
000BC8 D680            3336         RET
                       3339 ; rtxcobj.c  728        
                       3340 ; rtxcobj.c  729        
                       3341 ; rtxcobj.c  730        void    TEventList_Clear(struct TEventList *this, TEvent *Event)
                       3342 ; rtxcobj.c  731        {
                       3343         ALIGN   1
                       3345         PUBLIC  _TEventList_Clear
000BCA                 3346 _TEventList_Clear:
000BCA 0F70            3350         PUSH.W  R4, R5, R6
000BCC A978            3352         ADDS.W  R7,#08H
                       3360 ; rtxcobj.c  732        
                       3361 ; rtxcobj.c  733         char found=0;
000BCE 91C800          3363         MOV.B   R6L,#00H
                       3367 ; rtxcobj.c  734         TEvent **Ptr;
                       3368 ; rtxcobj.c  735         
                       3369 ; rtxcobj.c  736         Ptr=&(this->Events[0]);
000BD1 8951            3371         MOV.W   R5,R1
000BD3 8940            3372         MOV.W   R4,R0
000BD5 9940001A        3373         ADD.W   R4,#01AH
                       3375 ; rtxcobj.c  737         if(this==0)
000BD9 8C1F06          3377         MOV.W   [R7+6],R1
000BDC 8C0F04          3378         MOV.W   [R7+4],R0
000BDF 6910            3379         OR.W    R1,R0
000BE1 F32D            3382         BEQ     _128
                       3383 ; rtxcobj.c  738          return;
                       3384 ; rtxcobj.c  739         if(Event==0)
000BE3 8C3F02          3386         MOV.W   [R7+2],R3
000BE6 8A2F            3387         MOV.W   [R7],R2
000BE8 6932            3388         OR.W    R3,R2
000BEA F328            3391         BEQ     _128
                       3392 ; rtxcobj.c  740          return;
                       3393 ; rtxcobj.c  741         while(*Ptr!=0)
000BEC 8C1706          3395         MOV.W   R1,[R7+6]
000BEF 8C0704          3396         MOV.W   R0,[R7+4]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  36

ADDR   CODE            LINE SOURCELINE
000BF2 862C42          3397         MOV.B   ES,R1L
000BF5 8C101C          3398         MOV.W   R1,[R0+28]
000BF8 8C001A          3399         MOV.W   R0,[R0+26]
000BFB 6910            3403         OR.W    R1,R0
000BFD F31F            3404         BEQ     _128
000BFD F31F00          3404         BEQ     _128
000C00                 3405 _123:
                       3406 ; rtxcobj.c  742         {
                       3407 ; rtxcobj.c  743          if(*Ptr==Event)
000C00 8C1702          3409         MOV.W   R1,[R7+2]
000C03 8A07            3410         MOV.W   R0,[R7]
000C05 86AC42          3411         MOV.B   ES,R5L
000C08 4C1C02          3412         CMP.W   [R4+2],R1
000C0B F202            3413         BNE     _129
000C0D 4A0C            3414         CMP.W   [R4],R0
000C0D 4A0C00          3414         CMP.W   [R4],R0
000C10                 3415 _129:
000C10 F202            3416         BNE     _124
                       3417 ; rtxcobj.c  744           found=-1;
000C12 91C8FF          3419         MOV.B   R6L,#0FFH
000C16                 3422 _124:
                       3423 ; rtxcobj.c  745          if(found==-1)
000C16 91C4FF          3425         CMP.B   R6L,#0FFH
000C19 F209            3426         BNE     _125
                       3427 ; rtxcobj.c  746           *Ptr=*(Ptr+1);
000C1B 86AC42          3429         MOV.B   ES,R5L
000C1E 8C0404          3430         MOV.W   R0,[R4+4]
000C21 8C1406          3431         MOV.W   R1,[R4+6]
000C24 86AC42          3432         MOV.B   ES,R5L
000C27 8A0C            3433         MOV.W   [R4],R0
000C29 8C1C02          3434         MOV.W   [R4+2],R1
000C29 8C1C02          3434         MOV.W   [R4+2],R1
000C2C                 3435 _125:
                       3436 ; rtxcobj.c  747          Ptr++;
000C2C 99400004        3438         ADD.W   R4,#04H
000C30 86AC42          3442         MOV.B   ES,R5L
000C33 8A04            3443         MOV.W   R0,[R4]
000C35 8C1402          3444         MOV.W   R1,[R4+2]
000C38 6910            3445         OR.W    R1,R0
000C3A F2E2            3446         BNE     _123
                       3447 ; rtxcobj.c  748         }
                       3448 ; rtxcobj.c  749        }
000C3C                 3450 _128:
000C3C 99700008        3451         ADD.W   R7,#08H
000C40 2F70            3453         POP.W   R4, R5, R6
000C42 D680            3455         RET
                       3460 ; rtxcobj.c  750        
                       3461 ; rtxcobj.c  751        
                       3462 ; rtxcobj.c  752        int     TEventList_InList(struct TEventList *this, TEvent *Event)
                       3463 ; rtxcobj.c  753        {
                       3464         ALIGN   1
                       3466         PUBLIC  _TEventList_InList
000C44                 3467 _TEventList_InList:
000C44 0F30            3471         PUSH.W  R4, R5
000C46 A97C            3473         ADDS.W  R7,#0CH
                       3481 ; rtxcobj.c  754         TEvent **Ptr;
                       3482 ; rtxcobj.c  755         
                       3483 ; rtxcobj.c  756         if(this==(void *)0)
000C48 8951            3485         MOV.W   R5,R1
000C4A 8940            3486         MOV.W   R4,R0
000C4C 6910            3487         OR.W    R1,R0
000C4E F202            3490         BNE     _131
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  37

ADDR   CODE            LINE SOURCELINE
                       3491 ; rtxcobj.c  757          return(0);
000C50 B900            3493         MOV.W   R0,#00H
000C52 FE29            3494         BR      _138
000C52 FE29            3494         BR      _138
000C54                 3495 _131:
                       3500 ; rtxcobj.c  758         if(Event==0)
000C54 8C3F02          3502         MOV.W   [R7+2],R3
000C57 8A2F            3503         MOV.W   [R7],R2
000C59 6932            3504         OR.W    R3,R2
000C5B F203            3507         BNE     _132
                       3508 ; rtxcobj.c  759          return(0);
000C5D B900            3510         MOV.W   R0,#00H
000C5F FE23            3511         BR      _138
000C5F FE2300          3511         BR      _138
000C62                 3512 _132:
                       3517 ; rtxcobj.c  760         Ptr=&(this->Events[0]);
000C62 8935            3519         MOV.W   R3,R5
000C64 8924            3520         MOV.W   R2,R4
000C66 8913            3521         MOV.W   R1,R3
000C68 8902            3522         MOV.W   R0,R2
000C6A 9920001A        3523         ADD.W   R2,#01AH
                       3527 ; rtxcobj.c  761         while(*Ptr!=0)
000C6E 862C42          3529         MOV.B   ES,R1L
000C71 8C101C          3530         MOV.W   R1,[R0+28]
000C74 8C001A          3531         MOV.W   R0,[R0+26]
000C77 6910            3533         OR.W    R1,R0
000C79 F315            3534         BEQ     _135
000C7B 9908FFFF        3535         MOV.W   R0,#0FFFFH
000C7B 9908FFFF00      3535         MOV.W   R0,#0FFFFH
000C80                 3536 _133:
                       3537 ; rtxcobj.c  762         {
                       3538 ; rtxcobj.c  763          if(*Ptr==Event)
000C80 8C5702          3540         MOV.W   R5,[R7+2]
000C83 8A47            3541         MOV.W   R4,[R7]
000C85 866C42          3542         MOV.B   ES,R3L
000C88 4C5A02          3543         CMP.W   [R2+2],R5
000C8B F202            3544         BNE     _139
000C8D 4A4A            3545         CMP.W   [R2],R4
000C8D 4A4A00          3545         CMP.W   [R2],R4
000C90                 3546 _139:
000C90 F201            3547         BNE     _134
                       3548 ; rtxcobj.c  764           return(-1);
000C92 FE09            3550         BR      _138
000C92 FE09            3550         BR      _138
000C94                 3551 _134:
                       3556 ; rtxcobj.c  765          Ptr++;
000C94 99200004        3558         ADD.W   R2,#04H
000C98 866C42          3562         MOV.B   ES,R3L
000C9B 8A42            3563         MOV.W   R4,[R2]
000C9D 8C5202          3564         MOV.W   R5,[R2+2]
000CA0 6954            3565         OR.W    R5,R4
000CA2 F2EE            3566         BNE     _133
                       3567 ; rtxcobj.c  766         }
000CA4                 3569 _135:
                       3570 ; rtxcobj.c  767         return(0);
000CA4 B900            3572         MOV.W   R0,#00H
                       3573 ; rtxcobj.c  768        }
000CA6                 3575 _138:
000CA6 A974            3576         ADDS.W  R7,#04H
000CA8 2F30            3578         POP.W   R4, R5
000CAA D680            3580         RET
                       3584 ; rtxcobj.c  769        
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  38

ADDR   CODE            LINE SOURCELINE
                       3585 ; rtxcobj.c  770        
                       3586 ; rtxcobj.c  771        TEvent  *TEventList_Wait(struct TEventList *this, long *TimeOut)
                       3587 ; rtxcobj.c  772        {
                       3588         ALIGN   1
                       3590         PUBLIC  _TEventList_Wait
000CAC                 3591 _TEventList_Wait:
000CAC 0F70            3595         PUSH.W  R4, R5, R6
000CAE 99720018        3597         SUB.W   R7,#018H
                       3607 ; rtxcobj.c  773        
                       3608 ; rtxcobj.c  774         SEMA   cause;
                       3609 ; rtxcobj.c  775         int    index=0;
000CB2 B960            3611         MOV.W   R6,#00H
                       3615 ; rtxcobj.c  776         TTimer *TMOTimer;
                       3616 ; rtxcobj.c  777        
                       3617 ; rtxcobj.c  778         TMOTimer=0;
000CB4 BC700E          3619         MOV.W   [R7+14],#00H
000CB7 BC700C          3620         MOV.W   [R7+12],#00H
                       3622 ; rtxcobj.c  779         if(this==0)
000CBA 8C1F16          3624         MOV.W   [R7+22],R1
000CBD 8C0F14          3625         MOV.W   [R7+20],R0
000CC0 6910            3626         OR.W    R1,R0
000CC2 F20A            3629         BNE     _140
                       3630 ; rtxcobj.c  780         {
                       3631 ; rtxcobj.c  781          *TimeOut=-1;                    // Allocation error.
000CC4 866C42          3633         MOV.B   ES,R3L
000CC7 9A28FFFF        3634         MOV.W   [R2],#0FFFFH
000CCB 9C2802FFFF      3635         MOV.W   [R2+2],#0FFFFH
                       3636 ; rtxcobj.c  782          return(0);
000CD0 B910            3638         MOV.W   R1,#00H
000CD2 B900            3639         MOV.W   R0,#00H
                       3640         BR      _156
000CD4 D50160         +3640         JMP.L   _156
                       3641 ; rtxcobj.c  783         }
000CD8                 3643 _140:
                       3652 ; rtxcobj.c  784        
                       3653 ; rtxcobj.c  785        // Added test for NULL pointer @ Timeout SAA 991005
                       3654 ; rtxcobj.c  786        // TMOTimer has value zero
                       3655 ; rtxcobj.c  787        
                       3656 ; rtxcobj.c  788         if(TimeOut != 0)
000CD8 8C3F12          3658         MOV.W   [R7+18],R3
000CDB 8C2F10          3659         MOV.W   [R7+16],R2
000CDE 6932            3660         OR.W    R3,R2
000CE0 F370            3663         BEQ     _145
                       3664 ; rtxcobj.c  789         {
                       3665 ; rtxcobj.c  790          if(*TimeOut<0)
000CE2 8C1712          3667         MOV.W   R1,[R7+18]
000CE5 8C0710          3668         MOV.W   R0,[R7+16]
000CE8 862C42          3669         MOV.B   ES,R1L
000CEB 9C04020000      3670         CMP.W   [R0+2],#00H
000CF0 FC11            3671         BGT     _141
000CF2 FB03            3672         BLT     _157
000CF4 9A040000        3673         CMP.W   [R0],#00H
000CF8 F00D            3674         BCC     _141
000CF8 F00D            3674         BCC     _141
000CFA                 3675 _157:
                       3676 ; rtxcobj.c  791          {
                       3677 ; rtxcobj.c  792           *TimeOut=-1;                   // Allocation error.
000CFA 8C1712          3679         MOV.W   R1,[R7+18]
000CFD 8C0710          3680         MOV.W   R0,[R7+16]
000D00 862C42          3681         MOV.B   ES,R1L
000D03 9A08FFFF        3682         MOV.W   [R0],#0FFFFH
000D07 9C0802FFFF      3683         MOV.W   [R0+2],#0FFFFH
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  39

ADDR   CODE            LINE SOURCELINE
                       3686 ; rtxcobj.c  793           return(0);
000D0C B910            3688         MOV.W   R1,#00H
000D0E B900            3689         MOV.W   R0,#00H
                       3691         BR      _156
000D10 D50142         +3691         JMP.L   _156
                       3692 ; rtxcobj.c  794          }
000D14                 3694 _141:
                       3702 ; rtxcobj.c  795          if(*TimeOut>CLKTICK)           // Allocate timer if nessesary.
000D14 8C1712          3704         MOV.W   R1,[R7+18]
000D17 8C0710          3705         MOV.W   R0,[R7+16]
000D1A 862C42          3706         MOV.B   ES,R1L
000D1D 9C04020000      3707         CMP.W   [R0+2],#00H
000D22 FB4F            3708         BLT     _145
000D24 FC03            3709         BGT     _158
000D26 9A040008        3710         CMP.W   [R0],#08H
000D2A F94B            3711         BL      _145
000D2A F94B            3711         BL      _145
000D2C                 3712 _158:
                       3713 ; rtxcobj.c  796          {
                       3714 ; rtxcobj.c  797           TMOTimer=newTTimer();
000D2C C5FE4C          3716         CALL    _newTTimer
000D2F 8931            3717         MOV.W   R3,R1
000D31 8920            3718         MOV.W   R2,R0
                       3721 ; rtxcobj.c  798           if(TMOTimer==0)
000D33 8C3F0E          3723         MOV.W   [R7+14],R3
000D36 8C2F0C          3724         MOV.W   [R7+12],R2
000D39 6932            3725         OR.W    R3,R2
000D3B F20D            3728         BNE     _142
                       3729 ; rtxcobj.c  799           {
                       3730 ; rtxcobj.c  800            *TimeOut=-1;                          // Allocation error.
000D3D 8C1712          3732         MOV.W   R1,[R7+18]
000D40 8C0710          3733         MOV.W   R0,[R7+16]
000D43 862C42          3734         MOV.B   ES,R1L
000D46 9A08FFFF        3735         MOV.W   [R0],#0FFFFH
000D4A 9C0802FFFF      3736         MOV.W   [R0+2],#0FFFFH
                       3739 ; rtxcobj.c  801            return(0);
000D4F B910            3741         MOV.W   R1,#00H
000D51 B900            3742         MOV.W   R0,#00H
                       3744         BR      _156
000D53 D50120         +3744         JMP.L   _156
                       3745 ; rtxcobj.c  802           }
000D56                 3747 _142:
                       3755 ; rtxcobj.c  803           TMOTimer->Tick(TMOTimer,*TimeOut); // Set Timeout.
000D56 8C170E          3757         MOV.W   R1,[R7+14]
000D59 8C070C          3758         MOV.W   R0,[R7+12]
000D5C 862C42          3759         MOV.B   ES,R1L
000D5F 8C4012          3760         MOV.W   R4,[R0+18]
000D62 8C5014          3761         MOV.W   R5,[R0+20]
000D65 8C1712          3762         MOV.W   R1,[R7+18]
000D68 8C0710          3763         MOV.W   R0,[R7+16]
000D6B 862C42          3764         MOV.B   ES,R1L
000D6E 8A20            3765         MOV.W   R2,[R0]
000D70 8C3002          3766         MOV.W   R3,[R0+2]
000D73 8C170E          3767         MOV.W   R1,[R7+14]
000D76 8C070C          3768         MOV.W   R0,[R7+12]
000D79 C4rrrrrr        3771         FCALL   __ICALL
                       3774 ; rtxcobj.c  804           if(this->Append(this,TMOTimer->TimeOut)==0)
000D7D 8C1716          3776         MOV.W   R1,[R7+22]
000D80 8C0714          3777         MOV.W   R0,[R7+20]
000D83 862C42          3778         MOV.B   ES,R1L
000D86 8C400A          3779         MOV.W   R4,[R0+10]
000D89 8C500C          3780         MOV.W   R5,[R0+12]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  40

ADDR   CODE            LINE SOURCELINE
000D8C 8C170E          3781         MOV.W   R1,[R7+14]
000D8F 8C070C          3782         MOV.W   R0,[R7+12]
000D92 862C42          3783         MOV.B   ES,R1L
000D95 8C2016          3784         MOV.W   R2,[R0+22]
000D98 8C3018          3785         MOV.W   R3,[R0+24]
000D9B 8C1716          3786         MOV.W   R1,[R7+22]
000D9E 8C0714          3787         MOV.W   R0,[R7+20]
000DA1 C4rrrrrr        3790         FCALL   __ICALL
000DA5 6900            3793         OR.W    R0,R0
000DA7 F20D            3794         BNE     _145
                       3795 ; rtxcobj.c  805           {
                       3796 ; rtxcobj.c  806            *TimeOut=-1;                          // Append Error.
000DA9 8C1712          3798         MOV.W   R1,[R7+18]
000DAC 8C0710          3799         MOV.W   R0,[R7+16]
000DAF 862C42          3800         MOV.B   ES,R1L
000DB2 9A08FFFF        3801         MOV.W   [R0],#0FFFFH
000DB6 9C0802FFFF      3802         MOV.W   [R0+2],#0FFFFH
                       3805 ; rtxcobj.c  807            return(0);
000DBB B910            3807         MOV.W   R1,#00H
000DBD B900            3808         MOV.W   R0,#00H
                       3810         BR      _156
000DBF D500EA         +3810         JMP.L   _156
                       3811 ; rtxcobj.c  808           }
                       3812 ; rtxcobj.c  809          }
                       3813 ; rtxcobj.c  810         }
000DC2                 3815 _145:
                       3823 ; rtxcobj.c  811         while(this->Events[index]!=0)   // Generate RTXC SEMA-list.
000DC2 8C1716          3825         MOV.W   R1,[R7+22]
000DC5 8C0714          3826         MOV.W   R0,[R7+20]
000DC8 9900001A        3827         ADD.W   R0,#01AH
000DCC 8C1F0A          3828         MOV.W   [R7+10],R1
000DCF 8C0F08          3829         MOV.W   [R7+8],R0
000DD2 8C1716          3830         MOV.W   R1,[R7+22]
000DD5 8C0714          3831         MOV.W   R0,[R7+20]
000DD8 862C42          3832         MOV.B   ES,R1L
000DDB 8C101C          3833         MOV.W   R1,[R0+28]
000DDE 8C001A          3834         MOV.W   R0,[R0+26]
000DE1 6910            3835         OR.W    R1,R0
000DE3 F337            3836         BEQ     _147
000DE5 8C1716          3837         MOV.W   R1,[R7+22]
000DE8 8C0714          3838         MOV.W   R0,[R7+20]
000DEB 9900005A        3839         ADD.W   R0,#05AH
000DEF 8C1F06          3840         MOV.W   [R7+6],R1
000DF2 8C0F04          3841         MOV.W   [R7+4],R0
000DF5 8C1716          3842         MOV.W   R1,[R7+22]
000DF8 8C0714          3843         MOV.W   R0,[R7+20]
000DFB 9900001A        3844         ADD.W   R0,#01AH
000DFB 9900001A00      3844         ADD.W   R0,#01AH
000E00                 3845 _146:
                       3846 ; rtxcobj.c  812         {
                       3847 ; rtxcobj.c  813          this->RTXCList[index]=this->Events[index]->ID;
000E00 8926            3849         MOV.W   R2,R6
000E02 D922            3850         ASL.W   R2,#02H
000E04 8942            3851         MOV.W   R4,R2
000E06 B950            3852         MOVS.W  R5,#00H
000E08 8931            3853         MOV.W   R3,R1
000E0A 8920            3854         MOV.W   R2,R0
000E0C 8C3F02          3855         MOV.W   [R7+2],R3
000E0F 8A2F            3856         MOV.W   [R7],R2
000E11 0924            3857         ADD.W   R2,R4
000E13 866C42          3858         MOV.B   ES,R3L
000E16 8C3202          3859         MOV.W   R3,[R2+2]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  41

ADDR   CODE            LINE SOURCELINE
000E19 8A22            3860         MOV.W   R2,[R2]
000E1B 866C42          3861         MOV.B   ES,R3L
000E1E 84821A          3862         MOV.B   R4L,[R2+26]
000E21 8926            3863         MOV.W   R2,R6
000E23 9839            3864         SEXT.W  R3
000E25 8C1706          3865         MOV.W   R1,[R7+6]
000E28 8C0704          3866         MOV.W   R0,[R7+4]
000E2B 0902            3867         ADD.W   R0,R2
000E2D 862C42          3868         MOV.B   ES,R1L
000E30 8288            3869         MOV.B   [R0],R4L
                       3870 ; rtxcobj.c  814          index++;
000E32 A961            3872         ADDS.W  R6,#01H
000E34 8926            3876         MOV.W   R2,R6
000E36 D922            3877         ASL.W   R2,#02H
000E38 B930            3878         MOVS.W  R3,#00H
000E3A 8C5702          3879         MOV.W   R5,[R7+2]
000E3D 8A47            3880         MOV.W   R4,[R7]
000E3F 8915            3881         MOV.W   R1,R5
000E41 8904            3882         MOV.W   R0,R4
000E43 0942            3883         ADD.W   R4,R2
000E45 86AC42          3884         MOV.B   ES,R5L
000E48 8C5402          3885         MOV.W   R5,[R4+2]
000E4B 8A44            3886         MOV.W   R4,[R4]
000E4D 6954            3887         OR.W    R5,R4
000E4F F2D8            3888         BNE     _146
                       3889 ; rtxcobj.c  815         }
000E52                 3891 _147:
                       3892 ; rtxcobj.c  816         this->RTXCList[index]=0;
000E52 8C5716          3894         MOV.W   R5,[R7+22]
000E55 8C4714          3895         MOV.W   R4,[R7+20]
000E58 9940005A        3896         ADD.W   R4,#05AH
000E5C 8926            3897         MOV.W   R2,R6
000E5E 9839            3898         SEXT.W  R3
000E60 8915            3899         MOV.W   R1,R5
000E62 8904            3900         MOV.W   R0,R4
000E64 0902            3901         ADD.W   R0,R2
000E66 862C42          3902         MOV.B   ES,R1L
000E69 B200            3903         MOV.B   [R0],#00H
000E6B 8C5F06          3904         MOV.W   [R7+6],R5
000E6E 8C4F04          3905         MOV.W   [R7+4],R4
000E71 8915            3906         MOV.W   R1,R5
000E73 8904            3907         MOV.W   R0,R4
                       3908 ; rtxcobj.c  817        
                       3909 ; rtxcobj.c  818        
                       3910 ; rtxcobj.c  819         cause=KS_waitm(this->RTXCList); // Perform actual wait.
                       3912         CALL    _KS_waitm
000E75 C4rrrrrr       +3912 ;       FCALL   _KS_waitm
                       3914 ; rtxcobj.c  820        
                       3915 ; rtxcobj.c  821        
                       3916 ; rtxcobj.c  822         index=0;
000E79 B960            3918         MOV.W   R6,#00H
                       3921 ; rtxcobj.c  823         while(this->Events[index]!=0)   // Track event-souce from SEMA-list.
000E7B 8C370A          3923         MOV.W   R3,[R7+10]
000E7E 8C2708          3924         MOV.W   R2,[R7+8]
000E81 866C42          3925         MOV.B   ES,R3L
000E84 8C3202          3926         MOV.W   R3,[R2+2]
000E87 8A22            3927         MOV.W   R2,[R2]
000E89 6932            3928         OR.W    R3,R2
000E8B F322            3929         BEQ     _150
000E8D 8C3716          3930         MOV.W   R3,[R7+22]
000E90 8C2714          3931         MOV.W   R2,[R7+20]
000E93 9920001A        3932         ADD.W   R2,#01AH
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  42

ADDR   CODE            LINE SOURCELINE
000E97 8C3F0A          3933         MOV.W   [R7+10],R3
000E9A 8C2F08          3934         MOV.W   [R7+8],R2
000E9A 8C2F0800        3934         MOV.W   [R7+8],R2
000E9E                 3935 _148:
                       3936 ; rtxcobj.c  824         {
                       3937 ; rtxcobj.c  825          if(this->RTXCList[index]==cause)
000E9E 8946            3939         MOV.W   R4,R6
000EA0 9859            3940         SEXT.W  R5
000EA2 8C3706          3941         MOV.W   R3,[R7+6]
000EA5 8C2704          3942         MOV.W   R2,[R7+4]
000EA8 0924            3943         ADD.W   R2,R4
000EAA 866C42          3944         MOV.B   ES,R3L
000EAD 420A            3945         CMP.B   [R2],R0L
000EAF F310            3946         BEQ     _150
                       3947 ; rtxcobj.c  826           break;
                       3948 ; rtxcobj.c  827          index++;
000EB1 A961            3950         ADDS.W  R6,#01H
000EB3 8916            3954         MOV.W   R1,R6
000EB5 D912            3955         ASL.W   R1,#02H
000EB7 8921            3956         MOV.W   R2,R1
000EB9 B930            3957         MOVS.W  R3,#00H
000EBB 8C570A          3958         MOV.W   R5,[R7+10]
000EBE 8C4708          3959         MOV.W   R4,[R7+8]
000EC1 0942            3960         ADD.W   R4,R2
000EC3 86AC42          3961         MOV.B   ES,R5L
000EC6 8C5402          3962         MOV.W   R5,[R4+2]
000EC9 8A44            3963         MOV.W   R4,[R4]
000ECB 6954            3964         OR.W    R5,R4
000ECD F2E8            3965         BNE     _148
                       3966 ; rtxcobj.c  828         }
000ED0                 3968 _150:
                       3969 ; rtxcobj.c  829        
                       3970 ; rtxcobj.c  830         if(TMOTimer!=0)                  // TimeOut was used.
000ED0 8C170E          3972         MOV.W   R1,[R7+14]
000ED3 8C070C          3973         MOV.W   R0,[R7+12]
000ED6 8931            3974         MOV.W   R3,R1
000ED8 8920            3975         MOV.W   R2,R0
000EDA 6910            3976         OR.W    R1,R0
000EDC F34E            3980         BEQ     _152
                       3981 ; rtxcobj.c  831         {
                       3982 ; rtxcobj.c  832          if(this->Events[index]==TMOTimer->TimeOut)
000EDE 8906            3984         MOV.W   R0,R6
000EE0 D902            3985         ASL.W   R0,#02H
000EE2 B910            3986         MOVS.W  R1,#00H
000EE4 8C5716          3987         MOV.W   R5,[R7+22]
000EE7 8C4714          3988         MOV.W   R4,[R7+20]
000EEA 9940001A        3989         ADD.W   R4,#01AH
000EEE 0940            3990         ADD.W   R4,R0
000EF0 8913            3991         MOV.W   R1,R3
000EF2 8902            3992         MOV.W   R0,R2
000EF4 99000016        3993         ADD.W   R0,#016H
000EF8 8C1F0A          3994         MOV.W   [R7+10],R1
000EFB 8C0F08          3995         MOV.W   [R7+8],R0
000EFE 866C42          3996         MOV.B   ES,R3L
000F01 8C0216          3997         MOV.W   R0,[R2+22]
000F04 8C1218          3998         MOV.W   R1,[R2+24]
000F07 86AC42          3999         MOV.B   ES,R5L
000F0A 4C1C02          4000         CMP.W   [R4+2],R1
000F0D F202            4001         BNE     _160
000F0F 4A0C            4002         CMP.W   [R4],R0
000F0F 4A0C00          4002         CMP.W   [R4],R0
000F12                 4003 _160:
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  43

ADDR   CODE            LINE SOURCELINE
000F12 F207            4004         BNE     _151
                       4005 ; rtxcobj.c  833           *TimeOut=0;                    // TimeOut.
000F14 8C1712          4007         MOV.W   R1,[R7+18]
000F17 8C0710          4008         MOV.W   R0,[R7+16]
000F1A 862C42          4009         MOV.B   ES,R1L
000F1D BA00            4010         MOV.W   [R0],#00H
000F1F BC0002          4011         MOV.W   [R0+2],#00H
000F22                 4016 _151:
                       4017 ; rtxcobj.c  834          *TimeOut=CLKTICK*KS_inqtimer(TMOTimer->Handle);
000F22 8C3F0E          4019         MOV.W   [R7+14],R3
000F25 8C2F0C          4020         MOV.W   [R7+12],R2
000F28 866C42          4021         MOV.B   ES,R3L
000F2B 8C021C          4022         MOV.W   R0,[R2+28]
000F2E 8C121E          4023         MOV.W   R1,[R2+30]
                       4026         CALL    _KS_inqtimer
000F31 C4rrrrrr       +4026 ;       FCALL   _KS_inqtimer
000F35 D903            4027         ASL.W   R0,#03H
000F37 8900            4028         MOV.W   R0,R0
000F39 9819            4029         SEXT.W  R1
000F3B 8C3712          4030         MOV.W   R3,[R7+18]
000F3E 8C2710          4031         MOV.W   R2,[R7+16]
000F41 866C42          4032         MOV.B   ES,R3L
000F44 8A0A            4033         MOV.W   [R2],R0
000F46 8C1A02          4034         MOV.W   [R2+2],R1
                       4037 ; rtxcobj.c  835          this->Clear(this,TMOTimer->TimeOut);
000F49 8C1716          4039         MOV.W   R1,[R7+22]
000F4C 8C0714          4040         MOV.W   R0,[R7+20]
000F4F 862C42          4041         MOV.B   ES,R1L
000F52 8C400E          4042         MOV.W   R4,[R0+14]
000F55 8C5010          4043         MOV.W   R5,[R0+16]
000F58 8C370A          4044         MOV.W   R3,[R7+10]
000F5B 8C2708          4045         MOV.W   R2,[R7+8]
000F5E 866C42          4046         MOV.B   ES,R3L
000F61 8C3202          4047         MOV.W   R3,[R2+2]
000F64 8A22            4048         MOV.W   R2,[R2]
000F66 8C1716          4050         MOV.W   R1,[R7+22]
000F69 8C0714          4051         MOV.W   R0,[R7+20]
000F6C C4rrrrrr        4054         FCALL   __ICALL
                       4057 ; rtxcobj.c  836          deleteTTimer(TMOTimer);
000F70 8C170E          4059         MOV.W   R1,[R7+14]
000F73 8C070C          4060         MOV.W   R0,[R7+12]
000F76 C5FDAB          4061         CALL    _deleteTTimer
                       4065 ; rtxcobj.c  837         }  
000F7A                 4067 _152:
                       4068 ; rtxcobj.c  838         
                       4069 ; rtxcobj.c  839         return(this->Events[index]);
000F7A 8906            4071         MOV.W   R0,R6
000F7C D902            4072         ASL.W   R0,#02H
000F7E 8920            4076         MOV.W   R2,R0
000F80 B930            4077         MOVS.W  R3,#00H
000F82 8C1716          4078         MOV.W   R1,[R7+22]
000F85 8C0714          4079         MOV.W   R0,[R7+20]
000F88 9900001A        4080         ADD.W   R0,#01AH
000F8C 0902            4084         ADD.W   R0,R2
000F8E 862C42          4085         MOV.B   ES,R1L
000F91 8C1002          4086         MOV.W   R1,[R0+2]
000F94 8A00            4087         MOV.W   R0,[R0]
                       4088 ; rtxcobj.c  840        }
000F96                 4090 _156:
000F96 99700018        4091         ADD.W   R7,#018H
000F9A 2F70            4093         POP.W   R4, R5, R6
000F9C D680            4095         RET
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  44

ADDR   CODE            LINE SOURCELINE
                       4098 ; rtxcobj.c  841        
                       4099 ; rtxcobj.c  842        
                       4100 ; rtxcobj.c  843        
                       4101 ; rtxcobj.c  844        TEventList      *newTEventList(void)
                       4102 ; rtxcobj.c  845        {
                       4103         ALIGN   1
                       4105         PUBLIC  _newTEventList
000F9E                 4106 _newTEventList:
000F9E 0F30            4112         PUSH.W  R4, R5
000FA0 A97C            4114         ADDS.W  R7,#0CH
                       4118 ; rtxcobj.c  846        
                       4119 ; rtxcobj.c  847        /* VAR */
                       4120 ; rtxcobj.c  848         TEventList *EventList;
                       4121 ; rtxcobj.c  849        
                       4122 ; rtxcobj.c  850        /* BEGIN */
                       4123 ; rtxcobj.c  851         if(TEventListMap==0)
000FA2 964842rr        4125         MOV.B   ES,#SEG( _TEventListMap )
000FA6 9908rrrr        4126         MOV.W   R0,#SOF( _TEventListMap )
000FAA 8200            4127         MOV.B   R0L,[R0]
000FAC F213            4128         BNE     _162
                       4129 ; rtxcobj.c  852         {
                       4130 ; rtxcobj.c  853          TEventListMap=KS_create_part(&TEventListPartition,
                       4131 ; rtxcobj.c  854                                       sizeof(struct TEventList),TEVENTLIST_COUNT
                            );
000FAE 9918rrrr        4133         MOV.W   R1,#SEG( _TEventListPartition )
000FB2 9908rrrr        4134         MOV.W   R0,#SOF( _TEventListPartition )
000FB6 9928006A        4135         MOV.W   R2,#06AH
000FBA B935            4136         MOV.W   R3,#05H
                       4137         CALL    _KS_create_part
000FBC C4rrrrrr       +4137 ;       FCALL   _KS_create_part
000FC0 964842rr        4138         MOV.B   ES,#SEG( _TEventListMap )
000FC4 9918rrrr        4139         MOV.W   R1,#SOF( _TEventListMap )
000FC8 8209            4140         MOV.B   [R1],R0L
                       4141 ; rtxcobj.c  855          if(TEventListMap==0)
000FCA 6100            4143         OR.B    R0L,R0L
000FCC F203            4144         BNE     _162
                       4145 ; rtxcobj.c  856           return(0);
000FCE B910            4147         MOV.W   R1,#00H
000FD0 B900            4148         MOV.W   R0,#00H
000FD2 FE5A            4149         BR      _165
                       4150 ; rtxcobj.c  857         }
000FD4                 4152 _162:
                       4153 ; rtxcobj.c  858         EventList=KS_alloc(TEventListMap);
000FD4 964842rr        4155         MOV.B   ES,#SEG( _TEventListMap )
000FD8 9908rrrr        4156         MOV.W   R0,#SOF( _TEventListMap )
000FDC 8200            4157         MOV.B   R0L,[R0]
                       4158         CALL    _KS_alloc
000FDE C4rrrrrr       +4158 ;       FCALL   _KS_alloc
                       4160 ; rtxcobj.c  859         if(EventList==0)
000FE2 8931            4162         MOV.W   R3,R1
000FE4 8920            4163         MOV.W   R2,R0
000FE6 6910            4164         OR.W    R1,R0
000FE8 F203            4167         BNE     _163
                       4168 ; rtxcobj.c  860          return(0);
000FEA B910            4170         MOV.W   R1,#00H
000FEC B900            4171         MOV.W   R0,#00H
000FEE FE4C            4172         BR      _165
000FEE FE4C            4172         BR      _165
000FF0                 4173 _163:
                       4176 ; rtxcobj.c  861         EventList->TEventList=TEventList_TEventList;
000FF0 8913            4178         MOV.W   R1,R3
000FF2 8902            4179         MOV.W   R0,R2
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  45

ADDR   CODE            LINE SOURCELINE
000FF4 99000002        4180         ADD.W   R0,#02H
000FF8 862C42          4181         MOV.B   ES,R1L
000FFB 9A08rrrr        4182         MOV.W   [R0],#SOF( _TEventList_TEventList )
000FFF 9D080002rrrr    4183         MOV.W   [R0+2],#SEG( _TEventList_TEventList )
                       4184 ; rtxcobj.c  862         EventList->_TEventList=TEventList__TEventList;
001005 8953            4186         MOV.W   R5,R3
001007 8942            4187         MOV.W   R4,R2
001009 99400006        4188         ADD.W   R4,#06H
00100D 86AC42          4189         MOV.B   ES,R5L
001010 9A48rrrr        4190         MOV.W   [R4],#SOF( _TEventList__TEventList )
001014 9D480002rrrr    4191         MOV.W   [R4+2],#SEG( _TEventList__TEventList )
                       4192 ; rtxcobj.c  863         EventList->Append=TEventList_Append;
00101A 8953            4194         MOV.W   R5,R3
00101C 8942            4195         MOV.W   R4,R2
00101E 9940000A        4196         ADD.W   R4,#0AH
001022 86AC42          4197         MOV.B   ES,R5L
001025 9A48rrrr        4198         MOV.W   [R4],#SOF( _TEventList_Append )
001029 9D480002rrrr    4199         MOV.W   [R4+2],#SEG( _TEventList_Append )
                       4200 ; rtxcobj.c  864         EventList->Clear=TEventList_Clear;
00102F 8953            4202         MOV.W   R5,R3
001031 8942            4203         MOV.W   R4,R2
001033 9940000E        4204         ADD.W   R4,#0EH
001037 86AC42          4205         MOV.B   ES,R5L
00103A 9A48rrrr        4206         MOV.W   [R4],#SOF( _TEventList_Clear )
00103E 9D480002rrrr    4207         MOV.W   [R4+2],#SEG( _TEventList_Clear )
                       4208 ; rtxcobj.c  865         EventList->InList=TEventList_InList;
001044 8953            4210         MOV.W   R5,R3
001046 8942            4211         MOV.W   R4,R2
001048 99400012        4212         ADD.W   R4,#012H
00104C 86AC42          4213         MOV.B   ES,R5L
00104F 9A48rrrr        4214         MOV.W   [R4],#SOF( _TEventList_InList )
001053 9D480002rrrr    4215         MOV.W   [R4+2],#SEG( _TEventList_InList )
                       4216 ; rtxcobj.c  866         EventList->Wait=TEventList_Wait;
001059 8953            4218         MOV.W   R5,R3
00105B 8942            4219         MOV.W   R4,R2
00105D 99400016        4220         ADD.W   R4,#016H
001061 86AC42          4221         MOV.B   ES,R5L
001064 9A48rrrr        4222         MOV.W   [R4],#SOF( _TEventList_Wait )
001068 9D480002rrrr    4223         MOV.W   [R4+2],#SEG( _TEventList_Wait )
                       4224 ; rtxcobj.c  867         EventList->TEventList(EventList);
00106E 862C42          4226         MOV.B   ES,R1L
001071 8A40            4227         MOV.W   R4,[R0]
001073 8C5002          4228         MOV.W   R5,[R0+2]
001076 8C3F02          4229         MOV.W   [R7+2],R3
001079 8A2F            4230         MOV.W   [R7],R2
00107B 8913            4231         MOV.W   R1,R3
00107D 8902            4232         MOV.W   R0,R2
00107F C4rrrrrr        4237         FCALL   __ICALL
                       4240 ; rtxcobj.c  868         return(EventList);
001083 8C1702          4242         MOV.W   R1,[R7+2]
001086 8A07            4243         MOV.W   R0,[R7]
                       4246 ; rtxcobj.c  869        }
001088                 4248 _165:
001088 A974            4249         ADDS.W  R7,#04H
00108A 2F30            4251         POP.W   R4, R5
00108C D680            4253         RET
                       4256 ; rtxcobj.c  870        
                       4257 ; rtxcobj.c  871        
                       4258 ; rtxcobj.c  872        void deleteTEventList(TEventList *EventList)
                       4259 ; rtxcobj.c  873        {
                       4260         ALIGN   1
                       4262         PUBLIC  _deleteTEventList
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  46

ADDR   CODE            LINE SOURCELINE
00108E                 4263 _deleteTEventList:
00108E 0F30            4267         PUSH.W  R4, R5
001090 A97C            4269         ADDS.W  R7,#0CH
                       4273 ; rtxcobj.c  874         EventList->_TEventList(EventList);
001092 862C42          4275         MOV.B   ES,R1L
001095 8C4006          4276         MOV.W   R4,[R0+6]
001098 8C5008          4277         MOV.W   R5,[R0+8]
00109B 8C1F02          4278         MOV.W   [R7+2],R1
00109E 8A0F            4279         MOV.W   [R7],R0
0010A0 C4rrrrrr        4284         FCALL   __ICALL
                       4287 ; rtxcobj.c  875         KS_free(TEventListMap,EventList);
0010A4 964842rr        4289         MOV.B   ES,#SEG( _TEventListMap )
0010A8 9908rrrr        4290         MOV.W   R0,#SOF( _TEventListMap )
0010AC 8200            4291         MOV.B   R0L,[R0]
0010AE 8C3702          4292         MOV.W   R3,[R7+2]
0010B1 8A27            4293         MOV.W   R2,[R7]
                       4294         CALL    _KS_free
0010B3 C4rrrrrr       +4294 ;       FCALL   _KS_free
                       4298 ; rtxcobj.c  876        }
0010B7 A974            4300         ADDS.W  R7,#04H
0010B9 2F30            4302         POP.W   R4, R5
0010BB D680            4304         RET
                       4306 ; rtxcobj.c  877        
                       4307 ; rtxcobj.c  878        
                       4308 ; rtxcobj.c  879        
                       4309 ; rtxcobj.c  880        
                       4310 ; rtxcobj.c  881        typedef struct TStream {
                       4311 ; rtxcobj.c  882          /* Public: */
                       4312 ; rtxcobj.c  883                int             ObjectID;
                       4313 ; rtxcobj.c  884                void            (*TStream)(struct TStream *this, int width, int d
                            epth);
                       4314 ; rtxcobj.c  885                void            (*_TStream)(struct TStream *this);
                       4315 ; rtxcobj.c  886                char*           (*Get)(struct TStream *this, void* dest);
                       4316 ; rtxcobj.c  887                void            (*Put)(struct TStream *this, void* Source);
                       4317 ; rtxcobj.c  888                QUEUE           ID;
                       4318 ; rtxcobj.c  889          /* Private: */
                       4319 ; rtxcobj.c  890                int             Width;
                       4320 ; rtxcobj.c  891                int             Depth;
                       4321 ; rtxcobj.c  892                char*           Handle;
                       4322 ; rtxcobj.c  893        } TStream;
                       4323 ; rtxcobj.c  894        
                       4324 ; rtxcobj.c  895        
                       4325 ; rtxcobj.c  896        struct TStream TStreamPartition[DNQUEUES];
                       4326 ; rtxcobj.c  897        MAP              TStreamMap=0;
000005                 4327         RSEG    RTXCOBJ_INI_FA
                       4330         PUBLIC  _TStreamMap
000005                 4331 _TStreamMap:
                       4332 ; rtxcobj.c  898        
                       4333 ; rtxcobj.c  899        
                       4334 ; rtxcobj.c  900        void    TStream_TStream(struct TStream *this, int width, int depth)
                       4335 ; rtxcobj.c  901        {
000005 00              4336         DB      000H
0010BD                 4337         RSEG    RTXCOBJ_PR
0010BD 00              4338         ALIGN   1
                       4340         PUBLIC  _TStream_TStream
0010BE                 4341 _TStream_TStream:
0010BE 0F30            4369         PUSH.W  R4, R5
0010C0 9972000C        4371         SUB.W   R7,#0CH
                       4381 ; rtxcobj.c  902        
                       4382 ; rtxcobj.c  903         struct TStream *Ptr;
                       4383 ; rtxcobj.c  904        
                       4384 ; rtxcobj.c  905         if(this>(struct TStream *)0)
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  47

ADDR   CODE            LINE SOURCELINE
0010C4 8951            4386         MOV.W   R5,R1
0010C6 8940            4387         MOV.W   R4,R0
0010C8 99540000        4388         CMP.W   R5,#00H
0010CC F202            4389         BNE     _170
0010CE 99440000        4390         CMP.W   R4,#00H
0010CE 99440000        4390         CMP.W   R4,#00H
0010D2                 4391 _170:
0010D2 F966            4394         BL      _169
                       4395 ; rtxcobj.c  906         {
                       4396 ; rtxcobj.c  907          Ptr=this;
0010D4 8915            4398         MOV.W   R1,R5
0010D6 8904            4399         MOV.W   R0,R4
                       4401 ; rtxcobj.c  908          this->ID=NQUEUES+1;
0010D8 8C5F0A          4403         MOV.W   [R7+10],R5
0010DB 8C4F08          4404         MOV.W   [R7+8],R4
0010DE 99400012        4405         ADD.W   R4,#012H
0010E2 8C5F06          4408         MOV.W   [R7+6],R5
0010E5 8C4F04          4409         MOV.W   [R7+4],R4
0010E8 8C570A          4410         MOV.W   R5,[R7+10]
0010EB 8C4708          4411         MOV.W   R4,[R7+8]
0010EE 86AC42          4412         MOV.B   ES,R5L
0010F1 B44112          4413         MOV.B   [R4+18],#01H
                       4416 ; rtxcobj.c  909          while(Ptr!=&TStreamPartition[0])
0010F4 9954rrrr        4418         CMP.W   R5,#SEG( _TStreamPartition )
0010F8 F202            4419         BNE     _171
0010FA 9944rrrr        4420         CMP.W   R4,#SOF( _TStreamPartition )
0010FA 9944rrrr        4420         CMP.W   R4,#SOF( _TStreamPartition )
0010FE                 4421 _171:
0010FE F30E            4424         BEQ     _167
0010FE F30E            4424         BEQ     _167
001100                 4425 _166:
                       4426 ; rtxcobj.c  910          {
                       4427 ; rtxcobj.c  911           this->ID++;
001100 8C5706          4429         MOV.W   R5,[R7+6]
001103 8C4704          4430         MOV.W   R4,[R7+4]
001106 86AC42          4431         MOV.B   ES,R5L
001109 A241            4432         ADDS.B  [R4],#01H
                       4433 ; rtxcobj.c  912           Ptr--;
00110B 9902001C        4435         SUB.W   R0,#01CH
00110F 9914rrrr        4439         CMP.W   R1,#SEG( _TStreamPartition )
001113 F2F6            4440         BNE     _166
001115 9904rrrr        4441         CMP.W   R0,#SOF( _TStreamPartition )
001119 F2F3            4442         BNE     _166
                       4443 ; rtxcobj.c  913          }
00111C                 4445 _167:
                       4446 ; rtxcobj.c  914          this->ObjectID=TStreamID;
00111C 8C170A          4448         MOV.W   R1,[R7+10]
00111F 8C0708          4449         MOV.W   R0,[R7+8]
001122 862C42          4450         MOV.B   ES,R1L
001125 BA06            4451         MOV.W   [R0],#06H
                       4455 ; rtxcobj.c  915          this->Width=width;
001127 862C42          4457         MOV.B   ES,R1L
00112A 8C2814          4458         MOV.W   [R0+20],R2
                       4461 ; rtxcobj.c  916          this->Depth=depth;
00112D 8C170A          4463         MOV.W   R1,[R7+10]
001130 8C0708          4464         MOV.W   R0,[R7+8]
001133 862C42          4465         MOV.B   ES,R1L
001136 8C3816          4466         MOV.W   [R0+22],R3
                       4469 ; rtxcobj.c  917          this->Handle=new(this->Width*this->Depth);
001139 862C42          4471         MOV.B   ES,R1L
00113C 8C0014          4472         MOV.W   R0,[R0+20]
00113F E403            4475         MULU.W  R0,R3
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  48

ADDR   CODE            LINE SOURCELINE
001141 8900            4476         MOV.W   R0,R0
001143 9819            4477         SEXT.W  R1
001145 C5F789          4478         CALL    _new
001148 8C370A          4481         MOV.W   R3,[R7+10]
00114B 8C2708          4482         MOV.W   R2,[R7+8]
00114E 866C42          4483         MOV.B   ES,R3L
001151 8C0A18          4484         MOV.W   [R2+24],R0
001154 8C1A1A          4485         MOV.W   [R2+26],R1
                       4488 ; rtxcobj.c  918          if (this->Handle)
001157 8913            4490         MOV.W   R1,R3
001159 8902            4491         MOV.W   R0,R2
00115B 862C42          4492         MOV.B   ES,R1L
00115E 8C101A          4493         MOV.W   R1,[R0+26]
001161 8C0018          4494         MOV.W   R0,[R0+24]
001164 8C1F02          4497         MOV.W   [R7+2],R1
001167 8A0F            4498         MOV.W   [R7],R0
001169 6910            4499         OR.W    R1,R0
00116B F31A            4500         BEQ     _169
                       4501 ; rtxcobj.c  919           KS_defqueue(this->ID,this->Width,this->Depth,this->Handle,0);
00116D 8C5706          4503         MOV.W   R5,[R7+6]
001170 8C4704          4504         MOV.W   R4,[R7+4]
001173 86AC42          4505         MOV.B   ES,R5L
001176 8204            4506         MOV.B   R0L,[R4]
001178 8C370A          4507         MOV.W   R3,[R7+10]
00117B 8C2708          4508         MOV.W   R2,[R7+8]
00117E 866C42          4509         MOV.B   ES,R3L
001181 8C1214          4510         MOV.W   R1,[R2+20]
001184 8C370A          4511         MOV.W   R3,[R7+10]
001187 8C2708          4512         MOV.W   R2,[R7+8]
00118A 866C42          4513         MOV.B   ES,R3L
00118D 8C2216          4514         MOV.W   R2,[R2+22]
001190 B930            4518         MOV.W   R3,#00H
001192 8C5702          4519         MOV.W   R5,[R7+2]
001195 8A47            4520         MOV.W   R4,[R7]
001197 0F30            4521         PUSH.W  R4, R5
                       4523         CALL    _KS_defqueue
001199 C4rrrrrr       +4523 ;       FCALL   _KS_defqueue
00119D A974            4524         ADDS.W  R7,#04H
                       4526 ; rtxcobj.c  920         }
0011A0                 4528 _169:
                       4529 ; rtxcobj.c  921        }
0011A0 9970000C        4531         ADD.W   R7,#0CH
0011A4 2F30            4533         POP.W   R4, R5
0011A6 D680            4535         RET
                       4537 ; rtxcobj.c  922        
                       4538 ; rtxcobj.c  923        
                       4539 ; rtxcobj.c  924        void            TStream__TStream(struct TStream *this)
                       4540 ; rtxcobj.c  925        {
                       4541         ALIGN   1
                       4543         PUBLIC  _TStream__TStream
0011A8                 4544 _TStream__TStream:
                       4550 ; rtxcobj.c  926         if(this>(struct TStream *)0)
0011A8 99140000        4552         CMP.W   R1,#00H
0011AC F202            4553         BNE     _175
0011AE 99040000        4554         CMP.W   R0,#00H
0011AE 99040000        4554         CMP.W   R0,#00H
0011B2                 4555 _175:
0011B2 F90D            4556         BL      _174
                       4557 ; rtxcobj.c  927         {
                       4558 ; rtxcobj.c  928          this->ID=0;
0011B4 862C42          4560         MOV.B   ES,R1L
0011B7 B40012          4561         MOV.B   [R0+18],#00H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  49

ADDR   CODE            LINE SOURCELINE
                       4562 ; rtxcobj.c  929          if (this->Handle)
0011BA 862C42          4564         MOV.B   ES,R1L
0011BD 8C2018          4565         MOV.W   R2,[R0+24]
0011C0 8C301A          4566         MOV.W   R3,[R0+26]
0011C3 8913            4567         MOV.W   R1,R3
0011C5 8902            4568         MOV.W   R0,R2
0011C7 6932            4569         OR.W    R3,R2
0011C9 F302            4571         BEQ     _174
                       4572 ; rtxcobj.c  930           delete(this->Handle);
0011CB C5F75C          4574         CALL    _delete
                       4575 ; rtxcobj.c  931         }
0011CE                 4577 _174:
                       4578 ; rtxcobj.c  932        }
0011CE D680            4580         RET
                       4582 ; rtxcobj.c  933        
                       4583 ; rtxcobj.c  934        
                       4584 ; rtxcobj.c  935        char*           TStream_Get(struct TStream *this, void* Dest)
                       4585 ; rtxcobj.c  936        {
                       4586         ALIGN   1
                       4588         PUBLIC  _TStream_Get
0011D0                 4589 _TStream_Get:
0011D0 0F30            4593         PUSH.W  R4, R5
                       4599 ; rtxcobj.c  937         if(this>(struct TStream *)0)
0011D2 99140000        4601         CMP.W   R1,#00H
0011D6 F202            4602         BNE     _178
0011D8 99040000        4603         CMP.W   R0,#00H
0011D8 99040000        4603         CMP.W   R0,#00H
0011DC                 4604 _178:
0011DC F90A            4605         BL      _176
                       4606 ; rtxcobj.c  938         {
                       4607 ; rtxcobj.c  939          KS_dequeuew(this->ID,Dest);
0011DE 862C42          4609         MOV.B   ES,R1L
0011E1 840012          4610         MOV.B   R0L,[R0+18]
0011E4 8953            4612         MOV.W   R5,R3
0011E6 8942            4613         MOV.W   R4,R2
                       4618         CALL    _KS_dequeuew
0011E8 C4rrrrrr       +4618 ;       FCALL   _KS_dequeuew
                       4621 ; rtxcobj.c  940          return(Dest);
0011EC 8915            4623         MOV.W   R1,R5
0011EE 8904            4624         MOV.W   R0,R4
0011F0 FE02            4627         BR      _177
                       4628 ; rtxcobj.c  941         }
0011F2                 4630 _176:
                       4631 ; rtxcobj.c  942         return(0);
0011F2 B910            4633         MOV.W   R1,#00H
0011F4 B900            4634         MOV.W   R0,#00H
                       4636 ; rtxcobj.c  943        }       
0011F6                 4638 _177:
0011F6 2F30            4639         POP.W   R4, R5
0011F8 D680            4641         RET
                       4643 ; rtxcobj.c  944        
                       4644 ; rtxcobj.c  945        
                       4645 ; rtxcobj.c  946        void            TStream_Put(struct TStream *this, void* Source)
                       4646 ; rtxcobj.c  947        {
                       4647         ALIGN   1
                       4649         PUBLIC  _TStream_Put
0011FA                 4650 _TStream_Put:
                       4658 ; rtxcobj.c  948         if(this>(struct TStream *)0)
0011FA 99140000        4660         CMP.W   R1,#00H
0011FE F202            4661         BNE     _180
001200 99040000        4662         CMP.W   R0,#00H
001200 99040000        4662         CMP.W   R0,#00H
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  50

ADDR   CODE            LINE SOURCELINE
001204                 4663 _180:
001204 F905            4664         BL      _179
                       4665 ; rtxcobj.c  949         {
                       4666 ; rtxcobj.c  950          KS_enqueuew(this->ID,Source);
001206 862C42          4668         MOV.B   ES,R1L
001209 840012          4669         MOV.B   R0L,[R0+18]
                       4671         CALL    _KS_enqueuew
00120C C4rrrrrr       +4671 ;       FCALL   _KS_enqueuew
                       4673 ; rtxcobj.c  951         }
001210                 4675 _179:
                       4676 ; rtxcobj.c  952        }       
001210 D680            4678         RET
                       4680 ; rtxcobj.c  953        
                       4681 ; rtxcobj.c  954        
                       4682 ; rtxcobj.c  955        
                       4683 ; rtxcobj.c  956        TStream *newTStream(int Width, int Depth)
                       4685 ; rtxcobj.c  957        {
                       4686         ALIGN   1
                       4688         PUBLIC  _newTStream
001212                 4689 _newTStream:
001212 0F70            4695         PUSH.W  R4, R5, R6
001214 A97A            4697         ADDS.W  R7,#0AH
001216 8961            4701         MOV.W   R6,R1
001218 8C0F04          4704         MOV.W   [R7+4],R0
                       4711 ; rtxcobj.c  958        
                       4712 ; rtxcobj.c  959        /* VAR */
                       4713 ; rtxcobj.c  960         TStream *Stream;
                       4714 ; rtxcobj.c  961        
                       4715 ; rtxcobj.c  962        /* BEGIN */
                       4716 ; rtxcobj.c  963         if(TStreamMap==0)
00121B 964842rr        4718         MOV.B   ES,#SEG( _TStreamMap )
00121F 9908rrrr        4719         MOV.W   R0,#SOF( _TStreamMap )
001223 8200            4720         MOV.B   R0L,[R0]
001225 F215            4721         BNE     _182
                       4722 ; rtxcobj.c  964         {
                       4723 ; rtxcobj.c  965          TStreamMap=KS_create_part(&TStreamPartition,
                       4724 ; rtxcobj.c  966                                       sizeof(struct TStream),DNQUEUES);
001227 9918rrrr        4726         MOV.W   R1,#SEG( _TStreamPartition )
00122B 9908rrrr        4727         MOV.W   R0,#SOF( _TStreamPartition )
00122F 9928001C        4728         MOV.W   R2,#01CH
001233 99380008        4729         MOV.W   R3,#08H
                       4730         CALL    _KS_create_part
001237 C4rrrrrr       +4730 ;       FCALL   _KS_create_part
00123B 964842rr        4731         MOV.B   ES,#SEG( _TStreamMap )
00123F 9918rrrr        4732         MOV.W   R1,#SOF( _TStreamMap )
001243 8209            4733         MOV.B   [R1],R0L
                       4734 ; rtxcobj.c  967          if(TStreamMap==0)
001245 6100            4736         OR.B    R0L,R0L
001247 F204            4737         BNE     _182
                       4738 ; rtxcobj.c  968           return(0);
001249 B910            4740         MOV.W   R1,#00H
00124B B900            4741         MOV.W   R0,#00H
00124D FE5D            4742         BR      _187
                       4743 ; rtxcobj.c  969         }
001250                 4745 _182:
                       4750 ; rtxcobj.c  970         Stream=KS_alloc(TStreamMap);
001250 964842rr        4752         MOV.B   ES,#SEG( _TStreamMap )
001254 9908rrrr        4753         MOV.W   R0,#SOF( _TStreamMap )
001258 8200            4754         MOV.B   R0L,[R0]
                       4755         CALL    _KS_alloc
00125A C4rrrrrr       +4755 ;       FCALL   _KS_alloc
                       4757 ; rtxcobj.c  971         if(Stream==0)
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  51

ADDR   CODE            LINE SOURCELINE
00125E 8931            4759         MOV.W   R3,R1
001260 8920            4760         MOV.W   R2,R0
001262 6910            4761         OR.W    R1,R0
001264 F203            4764         BNE     _183
                       4765 ; rtxcobj.c  972         {
                       4766 ; rtxcobj.c  973        //  LogEvent(EventNoMoreStreams,0);
                       4767 ; rtxcobj.c  974          return(0);
001266 B910            4769         MOV.W   R1,#00H
001268 B900            4770         MOV.W   R0,#00H
00126A FE4E            4771         BR      _187
                       4772 ; rtxcobj.c  975         }
00126C                 4774 _183:
                       4781 ; rtxcobj.c  976         Stream->TStream=TStream_TStream;
00126C 8913            4783         MOV.W   R1,R3
00126E 8902            4784         MOV.W   R0,R2
001270 99000002        4785         ADD.W   R0,#02H
001274 862C42          4786         MOV.B   ES,R1L
001277 9A08rrrr        4787         MOV.W   [R0],#SOF( _TStream_TStream )
00127B 9D080002rrrr    4788         MOV.W   [R0+2],#SEG( _TStream_TStream )
                       4789 ; rtxcobj.c  977         Stream->_TStream=TStream__TStream;
001281 8953            4791         MOV.W   R5,R3
001283 8942            4792         MOV.W   R4,R2
001285 99400006        4793         ADD.W   R4,#06H
001289 86AC42          4794         MOV.B   ES,R5L
00128C 9A48rrrr        4795         MOV.W   [R4],#SOF( _TStream__TStream )
001290 9D480002rrrr    4796         MOV.W   [R4+2],#SEG( _TStream__TStream )
                       4797 ; rtxcobj.c  978         Stream->Put=TStream_Put;
001296 8953            4799         MOV.W   R5,R3
001298 8942            4800         MOV.W   R4,R2
00129A 9940000E        4801         ADD.W   R4,#0EH
00129E 86AC42          4802         MOV.B   ES,R5L
0012A1 9A48rrrr        4803         MOV.W   [R4],#SOF( _TStream_Put )
0012A5 9D480002rrrr    4804         MOV.W   [R4+2],#SEG( _TStream_Put )
                       4805 ; rtxcobj.c  979         Stream->Get=TStream_Get;
0012AB 8953            4807         MOV.W   R5,R3
0012AD 8942            4808         MOV.W   R4,R2
0012AF 9940000A        4809         ADD.W   R4,#0AH
0012B3 86AC42          4810         MOV.B   ES,R5L
0012B6 9A48rrrr        4811         MOV.W   [R4],#SOF( _TStream_Get )
0012BA 9D480002rrrr    4812         MOV.W   [R4+2],#SEG( _TStream_Get )
                       4813 ; rtxcobj.c  980         Stream->TStream(Stream,Width,Depth);
0012C0 862C42          4815         MOV.B   ES,R1L
0012C3 8A40            4816         MOV.W   R4,[R0]
0012C5 8C5002          4817         MOV.W   R5,[R0+2]
0012C8 8C3F02          4818         MOV.W   [R7+2],R3
0012CB 8A2F            4819         MOV.W   [R7],R2
0012CD 8913            4820         MOV.W   R1,R3
0012CF 8902            4821         MOV.W   R0,R2
0012D1 8C2704          4826         MOV.W   R2,[R7+4]
0012D4 8936            4827         MOV.W   R3,R6
0012D6 C4rrrrrr        4828         FCALL   __ICALL
                       4837 ; rtxcobj.c  981         if(Stream->ID>(NQUEUES+DNQUEUES+1))
0012DA 8C1702          4839         MOV.W   R1,[R7+2]
0012DD 8A07            4840         MOV.W   R0,[R7]
0012DF 862C42          4841         MOV.B   ES,R1L
0012E2 94041209        4842         CMP.B   [R0+18],#09H
0012E6 F90D            4843         BL      _184
                       4844 ; rtxcobj.c  982         {
                       4845 ; rtxcobj.c  983          KS_free(TStreamMap,Stream);
0012E8 964842rr        4847         MOV.B   ES,#SEG( _TStreamMap )
0012EC 9908rrrr        4848         MOV.W   R0,#SOF( _TStreamMap )
0012F0 8200            4849         MOV.B   R0L,[R0]
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  52

ADDR   CODE            LINE SOURCELINE
0012F2 8C3702          4850         MOV.W   R3,[R7+2]
0012F5 8A27            4851         MOV.W   R2,[R7]
                       4852         CALL    _KS_free
0012F7 C4rrrrrr       +4852 ;       FCALL   _KS_free
                       4856 ; rtxcobj.c  984          return(0);
0012FB B910            4858         MOV.W   R1,#00H
0012FD B900            4859         MOV.W   R0,#00H
0012FF FE04            4860         BR      _187
                       4861 ; rtxcobj.c  985         }
001302                 4863 _184:
                       4865 ; rtxcobj.c  986         return(Stream);
001302 8C1702          4867         MOV.W   R1,[R7+2]
001305 8A07            4868         MOV.W   R0,[R7]
                       4871 ; rtxcobj.c  987        }
001308                 4873 _187:
001308 A976            4874         ADDS.W  R7,#06H
00130A 2F70            4876         POP.W   R4, R5, R6
00130C D680            4878         RET
                       4881 ; rtxcobj.c  988        
                       4882 ; rtxcobj.c  989        
                       4883 ; rtxcobj.c  990        void deleteTStream(TStream* Stream)
                       4884 ; rtxcobj.c  991        {
                       4885         ALIGN   1
                       4887         PUBLIC  _deleteTStream
00130E                 4888 _deleteTStream:
00130E 0F30            4892         PUSH.W  R4, R5
001310 A97C            4894         ADDS.W  R7,#0CH
                       4898 ; rtxcobj.c  992         Stream->_TStream(Stream);
001312 862C42          4900         MOV.B   ES,R1L
001315 8C4006          4901         MOV.W   R4,[R0+6]
001318 8C5008          4902         MOV.W   R5,[R0+8]
00131B 8C1F02          4903         MOV.W   [R7+2],R1
00131E 8A0F            4904         MOV.W   [R7],R0
001320 C4rrrrrr        4909         FCALL   __ICALL
                       4912 ; rtxcobj.c  993         KS_free(TStreamMap,Stream);
001324 964842rr        4914         MOV.B   ES,#SEG( _TStreamMap )
001328 9908rrrr        4915         MOV.W   R0,#SOF( _TStreamMap )
00132C 8200            4916         MOV.B   R0L,[R0]
00132E 8C3702          4917         MOV.W   R3,[R7+2]
001331 8A27            4918         MOV.W   R2,[R7]
                       4919         CALL    _KS_free
001333 C4rrrrrr       +4919 ;       FCALL   _KS_free
                       4923 ; rtxcobj.c  994        }
001337 A974            4925         ADDS.W  R7,#04H
001339 2F30            4927         POP.W   R4, R5
00133B D680            4929         RET
                       4931 ; rtxcobj.c  995        
                       4932 ; rtxcobj.c  996        
                       4937         EXTRN   HCODE(_KS_resume)
                       4940         EXTRN   HCODE(_KS_pend)
                       4943         EXTRN   HCODE(_KS_inqtimer)
                       4946         EXTRN   HCODE(_KS_alloc_timer)
                       4949         EXTRN   HCODE(_KS_waitt)
                       4952         EXTRN   HCODE(_KS_inqres)
                       4955         EXTRN   HCODE(_malloc)
                       4958         EXTRN   HCODE(_KS_dequeuew)
                       4961         EXTRN   HCODE(_KS_free)
                       4964         EXTRN   HCODE(_KS_wait)
                       4967         EXTRN   HCODE(_KS_defqueue)
                       4970         EXTRN   HCODE(_KS_alloc_task)
                       4973         EXTRN   HCODE(_KS_suspend)
                       4978         EXTRN   HCODE(_KS_waitm)
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  53

ADDR   CODE            LINE SOURCELINE
                       4981         EXTRN   HCODE(_KS_free_timer)
                       4984         EXTRN   HCODE(_free)
                       4987         EXTRN   HCODE(_KS_terminate)
                       4990         EXTRN   HCODE(_KS_defpriority)
                       4993         EXTRN   HCODE(_KS_alloc)
000000                 4997 RTXCOBJ_CLR_FA  SEGMENT HDATA INSEGMENT CLEAR
000000                 4998         RSEG    RTXCOBJ_CLR_FA
                       4999         PUBLIC  _TThreadPartition
                       5000         ALIGN   1
000000                 5001 _TThreadPartition:      DS      1152
   |  RESERVED             
00047F
                       5004         ALIGN   1
000480                 5005 _TTimerPartition:       DS      1024
   |  RESERVED             
00087F
                       5008         EXTRN   HCODE(_KS_unlock)
                       5011         EXTRN   HCODE(_KS_start_timer)
                       5017         EXTRN   HCODE(_KS_deftask)
                       5020         EXTRN   HCODE(_KS_stop_timer)
                       5024         PUBLIC  _TEventListPartition
                       5025         ALIGN   1
000880                 5026 _TEventListPartition:   DS      530
   |  RESERVED             
000A91
                       5027         EXTRN   HCODE(__ICALL)
                       5030         EXTRN   HCODE(_KS_inqpriority)
                       5033         PUBLIC  _HeapAlloc
                       5034         ALIGN   1
000A92                 5035 _HeapAlloc:     DS      4
   |  RESERVED             
000A95
                       5038         EXTRN   HCODE(_KS_signal)
                       5041         EXTRN   HCODE(_KS_delay)
                       5042         EXTRN   IDATA(__lc_bs)
                       5045         EXTRN   HCODE(_KS_restart_timer)
                       5049         PUBLIC  _TResourcePartition
                       5050         ALIGN   1
000A96                 5051 _TResourcePartition:    DS      3584
   |  RESERVED             
001895
                       5055         PUBLIC  _TEventPartition
                       5056         ALIGN   1
001896                 5057 _TEventPartition:       DS      4096
   |  RESERVED             
002895
                       5058         EXTRN   HCODE(__SDIVL)
                       5064         EXTRN   HCODE(_KS_user)
                       5067         EXTRN   HCODE(_KS_create_part)
                       5071         PUBLIC  _TStreamPartition
                       5072         ALIGN   1
002896                 5073 _TStreamPartition:      DS      224
   |  RESERVED             
002975
                       5078         PUBLIC  _stk
002976                 5079 _stk:   DS      16384
   |  RESERVED             
006975
                       5082         EXTRN   HCODE(_KS_lockw)
                       5085         EXTRN   HCODE(_KS_enqueuew)
                       5088         EXTRN   HCODE(_KS_inqsema)
                       5091         EXTRN   HCODE(_KS_execute)
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  54

ADDR   CODE            LINE SOURCELINE
                       5092         EXTRN   DATA(__lc_ub_xvwbuffer)
                       5093         EXTRN   DATA(__lc_ue_xvwbuffer)
                       5094         CALLS   'malloc2', 'malloc'
                       5095         CALLS   'new', 'KS_user'
                       5096         CALLS   'free2', 'free'
                       5097         CALLS   'delete', 'KS_user'
                       5098         CALLS   'Sleep', 'KS_delay'
                       5099         CALLS   'TEvent_Waitt', 'KS_wait'
                       5100         CALLS   'TEvent_Waitt', 'KS_waitt'
                       5101         CALLS   'TEvent_Waitt', 'KS_wait'
                       5102         CALLS   'TEvent_Signal', 'KS_signal'
                       5103         CALLS   'TEvent_Pend', 'KS_pend'
                       5104         CALLS   'TEvent_InqSema', 'KS_inqsema'
                       5105         CALLS   'newTEvent', 'KS_create_part'
                       5106         CALLS   'newTEvent', 'KS_alloc'
                       5107         CALLS   'newTEvent', 'KS_free'
                       5108         CALLS   'deleteTEvent', 'KS_free'
                       5109         CALLS   'TResource_Lock', 'KS_lockw'
                       5110         CALLS   'TResource_Unlock', 'KS_unlock'
                       5111         CALLS   'TResource_Owner', 'KS_inqres'
                       5112         CALLS   'newTResource', 'KS_create_part'
                       5113         CALLS   'newTResource', 'KS_alloc'
                       5114         CALLS   'newTResource', 'KS_free'
                       5115         CALLS   'deleteTResource', 'KS_free'
                       5116         CALLS   'TThread_TThread', 'KS_alloc_task'
                       5117         CALLS   'TThread_TThread', 'KS_deftask'
                       5118         CALLS   'TThread_Execute', 'KS_execute'
                       5119         CALLS   'TThread__TThread', 'KS_terminate'
                       5120         CALLS   'TThread_Suspend', 'KS_suspend'
                       5121         CALLS   'TThread_Suspend', 'KS_delay'
                       5122         CALLS   'TThread_Resume', 'KS_resume'
                       5123         CALLS   'TThread_GetPriority', 'KS_inqpriority'
                       5124         CALLS   'TThread_SetPriority', 'KS_defpriority'
                       5125         CALLS   'newTThread', 'KS_create_part'
                       5126         CALLS   'newTThread', 'KS_alloc'
                       5127         CALLS   'newTThread', 'KS_free'
                       5128         CALLS   'deleteTThread', 'KS_free'
                       5129         CALLS   'TTimer_TTimer', 'KS_alloc_timer'
                       5130         CALLS   'TTimer_TTimer', 'newTEvent'
                       5131         CALLS   'TTimer__TTimer', 'deleteTEvent'
                       5132         CALLS   'TTimer__TTimer', 'KS_free_timer'
                       5133         CALLS   'TTimer_SetPeriod', 'KS_start_timer'
                       5134         CALLS   'TTimer_SetPeriod', 'KS_stop_timer'
                       5135         CALLS   'TTimer_SetPeriod', 'KS_restart_timer'
                       5136         CALLS   'TTimer_Tick', 'KS_start_timer'
                       5137         CALLS   'TTimer_Tick', 'KS_restart_timer'
                       5138         CALLS   'newTTimer', 'KS_create_part'
                       5139         CALLS   'newTTimer', 'KS_alloc'
                       5140         CALLS   'newTTimer', 'KS_free'
                       5141         CALLS   'deleteTTimer', 'KS_free'
                       5142         CALLS   'TEventList_Wait', 'newTTimer'
                       5143         CALLS   'TEventList_Wait', 'KS_waitm'
                       5144         CALLS   'TEventList_Wait', 'KS_inqtimer'
                       5145         CALLS   'TEventList_Wait', 'deleteTTimer'
                       5146         CALLS   'newTEventList', 'KS_create_part'
                       5147         CALLS   'newTEventList', 'KS_alloc'
                       5148         CALLS   'deleteTEventList', 'KS_free'
                       5149         CALLS   'TStream_TStream', 'new'
                       5150         CALLS   'TStream_TStream', 'KS_defqueue'
                       5151         CALLS   'TStream__TStream', 'delete'
                       5152         CALLS   'TStream_Get', 'KS_dequeuew'
                       5153         CALLS   'TStream_Put', 'KS_enqueuew'
XA assembler v2.0 r2                    SN00085795-037 (c) 1998 TASKING, Inc.
                                                                                                                            Page  55

ADDR   CODE            LINE SOURCELINE
                       5154         CALLS   'newTStream', 'KS_create_part'
                       5155         CALLS   'newTStream', 'KS_alloc'
                       5156         CALLS   'newTStream', 'KS_free'
                       5157         CALLS   'deleteTStream', 'KS_free'
