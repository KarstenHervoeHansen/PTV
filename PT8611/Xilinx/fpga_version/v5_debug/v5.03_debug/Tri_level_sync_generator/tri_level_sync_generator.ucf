#PINLOCK_BEGIN
# IOBANK 0 :
#NET "rcr<4>"	LOC = "P189"
#NET "bcr<0>"	LOC = "P197"
#NET "bcr<5>"	LOC = "P205"
#NET "bcr<4>"	LOC = "P204"
#NET "bcr<3>"	LOC = "P203"
#NET "bcr<2>"	LOC = "P199"
#NET "bcr<1>"	LOC = "P198"
#NET "rcr<0>"	LOC = "P196"
#NET "rcr<1>"	LOC = "P194"
#NET "rcr<2>"	LOC = "P191"
#NET "rcr<3>"	LOC = "P190"
#NET "rcr<5>"	LOC = "P187"
#NET "rcr<6>"	LOC = "P185"
#NET "rcr<7>"	LOC = "P184"
NET "f27"	LOC = "P184";   # lus på board fra IC12 pin 1 til IC
NET "tsg1_out<3>" LOC = "P183";
# IOBANK 1 :
NET "tsg2_out<1>" LOC = "P175";
NET "tsg1_out<2>" LOC = "P182";
NET "tsg4_out<1>" LOC = "P162";
NET "tsg4_out<0>" LOC = "P161";
NET "tsg4_out<3>" LOC = "P166";
NET "tsg4_out<2>" LOC = "P165";
NET "tsg3_out<2>" LOC = "P169";
NET "tsg3_out<1>" LOC = "P168";
NET "tsg2_out<0>" LOC = "P172";
NET "tsg3_out<3>" LOC = "P171";
NET "tsg2_out<3>" LOC = "P178";
NET "tsg2_out<2>" LOC = "P176";
NET "tsg1_out<1>" LOC = "P181";
NET "tsg1_out<0>" LOC = "P180";
NET "tsg3_out<0>" LOC = "P167";
# IOBANK 2 :
NET "tsg2_lvl" LOC = "P156";
NET "tsg1_lvl" LOC = "P155";
NET "tsg4_lvl" LOC = "P152";
NET "tsg3_lvl" LOC = "P150";
NET "clmp1" LOC = "P149";
NET "clmp2" LOC = "P148";
NET "clmp3" LOC = "P147";
NET "clmp4" LOC = "P146";
NET "led3" LOC = "P141";
# IOBANK 3 :
NET "cs4" LOC = "P107";
NET "p1<5>"	LOC = "P106";
NET "p0<2>"	LOC = "P113";
NET "cs3" LOC = "P111";
NET "sck" LOC = "P115";
NET "p0<3>"	LOC = "P114";
NET "p0<5>"	LOC = "P117";
NET "p0<4>"	LOC = "P116";
NET "p0<7>"	LOC = "P120";
NET "p0<6>"	LOC = "P119";
NET "mosi" LOC = "P123";
#NET "miso"	LOC = "P122"
NET "cs2" LOC = "P125";
NET "cs1" LOC = "P124";
NET "led1" LOC = "P126"; # 'no connect' i xc3s50
# IOBANK 7 :
NET "ext3_out<3>"	LOC = "P26";
NET "ext3_out<2>"	LOC = "P27";
NET "ext2_out<1>"	LOC = "P20";
NET "ext2_out<0>"	LOC = "P21";
NET "ext2_out<3>"	LOC = "P18";
NET "ext2_out<2>"	LOC = "P19";
NET "ext1_out<1>" LOC = "P15";
NET "ext1_out<0>" LOC = "P16";
NET "ext1_out<3>" LOC = "P12";
NET "ext1_out<2>" LOC = "P13";
#NET "dacm2"	LOC = "P10"
#NET "dacm1"	LOC = "P11"
#NET "bcr8"	LOC = "P7"
#NET "bcr9"	LOC = "P9"
#NET "bcr6"	LOC = "P2"
#NET "bcr7"	LOC = "P3"
# IOBANK 6 :
NET "ext3_out<1>"	LOC = "P28";
NET "ext3_out<0>"	LOC = "P29";
NET "ext4_out<3>"	LOC = "P34";
NET "ext4_out<2>"	LOC = "P35";
NET "ext4_out<1>"	LOC = "P36";
NET "ext4_out<0>"	LOC = "P37";
NET "spare<0>"	LOC = "P39";
NET "spare<1>"	LOC = "P40";
NET "spare<2>"	LOC = "P42";
NET "spare<3>"	LOC = "P43";
NET "spare<4>"	LOC = "P44";
NET "spare<5>"	LOC = "P45";
NET "spare<6>"	LOC = "P46";
NET "spare<7>"	LOC = "P48";
# IOBANK 5 :
NET "f1484" LOC = "P76"; # GCK pin
#NET "f1485" LOC = "P77"; # GCK pin
NET "f1485" LOC = "P79";    # lus på board fra IC12 pin4 til FPGA pin79
# IOBANK 4 :
#NET "f27" LOC = "P79";
NET "mreset" LOC = "P80";
NET "f4m" LOC = "P81";
#NET "fhm"	LOC = "P86"
#NET "fhg"	LOC = "P87"
NET "res2" LOC = "P90";
NET "p1<0>"	LOC = "P94";
NET "p1<1>"	LOC = "P95";
NET "p1<2>"	LOC = "P100";
NET "p1<3>"	LOC = "P101";
NET "p1<4>"	LOC = "P102";
NET "f8g" LOC = "P85";
NET "led2" LOC = "P97"; # 'no connect' in xc3s50 device
NET "res1" LOC = "P93";
##PINLOCK_END
##############################################
#      BASIC UCF SYNTAX EXAMPLES V2.1.5      #
##############################################
#
#              TIMING SPECIFICATIONS
#
# Timing specifications can be applied to the entire device (global) or to
# specific groups of login in your PLD design (called "time groups').
# The time groups are declared in two basic ways.
#
# Method 1: Based on a net name, where 'my_net' is a net that touchs all the
#           logic to be grouped in to 'logic_grp'. Example:
#NET my_net TNM_NET = logic_grp ;
#
# Method 2: Group uing the key word 'TIMEGRP' and declare using the names of
#           logic in your design. Example:
#TIMEGRP group_name = FFS ("U1/*");
#           creates a group called 'group_name' for all flip-flops with in
#           the hierarchical block called U1. Wildcards are valid.
#
# Grouping is very important because it lets you tell the software which parts
# of a design run at which speeds.  For the majority of the designs with only
# one clock the very simple global constraints.
#
# The type of grouping constraint you use can vary depending on the synthesis
# tools you are using.  For example, Synplicity does well with Method 1, while
# FPGA Express does beter with Method 2.
#
#
############################################################
# Internal to the device clock speed specifications - Tsys #
############################################################
#
# data      _________      /^^^^^\       _________   out
# ----------| D   Q |-----{ LOGIC } -----| D   Q |------
#           |       |      \vvvvv/       |       |
#        ---|> CLK  |                 ---|> CLK  |
# clock  |  ---------                 |  ---------
# ------------------------------------
#
# ---------------
# Single Clock
# ---------------
#
# ----------------
# PERIOD TIME-SPEC
# ----------------
# The PERIOD spec. covers all timing paths that start or end at a
# register, latch, or synchronous RAM which are clocked by the reference
# net (excluding pad destinations).  Also covered is the setup
# requirement of the synchronous element relative to other elements
# (ex. flip flops, pads, etc...).
# NOTE:  The default unit for time is nanoseconds.
#
#NET clock PERIOD = 50ns ;
#
#       -OR-
#
# ------------------
# FROM:TO TIME-SPECs
# ------------------
# FROM:TO style timespecs can be used to constrain paths between time
# groups.  NOTE:  Keywords:  RAMS, FFS, PADS, and LATCHES are predefined
# time groups used to specify all elements of each type in a design.
#TIMEGRP RFFS = RISING FFS ("*");  // creates a rising group called RFFS
#TIMEGRP FFFS = FALLING FFS ("*");  // creates a falling group called FFFS
#TIMESPEC TSF2F  = FROM : FFS   : TO : FFS   : 50 ns; // Flip-flips with the same edge
#TIMESPEC TSR2F  = FROM : RFFS  : TO : FFFS  : 25 ns; // rising edge to falling edge
#TIMESPEC TSF2R  = FROM : FFFS  : TO : RFFS  : 25 ns; // falling edge to rising edge
#
# ---------------
# Multiple Clocks
# ---------------
# Requires a combination of the 'Period' and 'FROM:TO' type time specifications
#NET clock1 TNM_NET = clk1_grp ;
#NET clock2 TNM_NET = clk2_grp ;
#
#TIMESPEC TS_clk1 = PERIOD : clk1_grp : 50 ;
#TIMESPEC TS_clk2 = PERIOD : clk2_grp : 30 ;
#TIMESPEC TS_ck1_2_ck2 = FROM : clk1_grp : TO : clk2_grp : 50 ;
#TIMESPEC TS_ck2_2_ck1 = FROM : clk2_grp : TO : clk1_grp : 30 ;
#
#
############################################################
# CLOCK TO OUT specifications - Tco                        #
############################################################
#
# from      _________      /^^^^^\       --------\
# ----------| D   Q |-----{ LOGIC } -----| Pad    >
# PLD       |       |      \vvvvv/       --------/
#        ---|> CLK  |
# clock  |  ---------
# --------
#
# ----------------
# OFFSET TIME-SPEC
# ----------------
# To automatically include clock buffer/routing delay in your
# clock-to-out timing specifications, use OFFSET constraints .
# For an output where the maximum clock-to-out (Tco) is 25 ns:
#NET out_net_name OFFSET = OUT 25 AFTER clock_net_name ;
#
#      -OR-
#
# ------------------
# FROM:TO TIME-SPECs
# ------------------
#TIMESPEC TSF2P  = FROM : FFS   : TO : PADS  : 25 ns;
# Note that FROM: FFS : TO: PADS constraints start the delay analysis
# at the flip flop itself, and not the clock input pin.  The recommended
# method to create a clock-to-out constraint is to use an OFFSET constraint.
#
#
############################################################
# Pad to Flip-Flop speed specifications - Tsu              #
############################################################
#
# ------\         /^^^^^\       _________   into PLD
# |pad   >-------{ LOGIC } -----| D   Q |------
# ------/         \vvvvv/       |       |
#                            ---|> CLK  |
# clock                      |  ---------
# ----------------------------
#
# ----------------
# OFFSET TIME-SPEC
# ----------------
# To automatically account for clock delay in your input setup timing
# specifications, use OFFSET constraints.
# For an input where the maximum setup time is 25 ns:
#NET in_net_name OFFSET = IN 25 BEFORE clock_net_name ;
#
#      -OR-
#
# ------------------
# FROM:TO TIME-SPECs
# ------------------
#TIMESPEC TSP2F  = FROM : PADS  : TO : FFS   : 25 ns;
# Note that FROM: PADS : TO: FFS constraints do not take into account any
# delay for the clock path.  The recommended method to create an input
# setup time constraint is to use an OFFSET constraint.
#
#
############################################################
# Pad to Pad speed specifications - Tpd                    #
############################################################
#
# ------\         /^^^^^\       -------\
# |pad   >-------{ LOGIC } -----| pad   >
# ------/         \vvvvv/       -------/
#
# ------------------
# FROM:TO TIME-SPECs
# ------------------
#TIMESPEC TSP2P  = FROM : PADS  : TO : PADS  : 125 ns;
#
#
############################################################
# Other timing specifications                              #
############################################################
#
# -------------
# TIMING IGNORE
# -------------
# If you can ignore timing of paths, use Timing Ignore (TIG). NOTE: The
# "*" character is a wild-card which can be used for bus names.  A "?"
# character can be used to wild-card one character.
# Ignore timing of net reset_n:
#NET : reset_n : TIG ;
#
# Ignore data_reg(7:0) net in instance mux_mem:
#NET : mux_mem/data_reg* : TIG ;
#
# Ignore data_reg(7:0) net in instance mux_mem as related to a TIMESPEC
# named TS01 only:
#NET : mux_mem/data_reg* : TIG = TS01 ;
#
# Ignore data1_sig and data2_sig nets:
#NET : data?_sig : TIG ;
#
# ---------------
# PATH EXCEPTIONS
# ---------------
# If your design has outputs that can be slower than others, you can
# create specific timespecs similar to this example for output nets
# named out_data(7:0) and irq_n:
#TIMEGRP slow_outs = PADS(out_data* : irq_n) ;
#TIMEGRP fast_outs = PADS : EXCEPT : slow_outs ;
#TIMESPEC TS08 = FROM : FFS : TO : fast_outs : 22 ;
#TIMESPEC TS09 = FROM : FFS : TO : slow_outs : 75 ;
#
# If you have multi-cycle FF to FF paths, you can create a time group
# using either the TIMEGRP or TNM statements.
#
# WARNING:  Many VHDL/verilog synthesizers do not predictably name flip
# flop Q output nets.  Most synthesizers do assign predictable instance
# names to flip flops, however.
#
# TIMEGRP example:
#TIMEGRP slowffs = FFS(inst_path/ff_q_output_net1* :
#inst_path/ff_q_output_net2*);
#
# TNM attached to instance example:
#INST inst_path/ff_instance_name1_reg* TNM = slowffs ;
#INST inst_path/ff_instance_name2_reg* TNM = slowffs ;
#
# If a FF clock-enable is used on all flip flops of a multi-cycle path,
# you can attach TNM to the clock enable net.  NOTE:  TNM attached to a
# net "forward traces" to any FF, LATCH, RAM, or PAD attached to the
# net.
#NET ff_clock_enable_net TNM = slowffs ;
#
# Example of using "slowffs" timegroup, in a FROM:TO timespec, with
# either of the three timegroup methods shown above:
#TIMESPEC TS10 = FROM : slowffs : TO : FFS : 100 ;
#
# Constrain the skew or delay associate with a net.
#NET any_net_name MAXSKEW = 7 ;
#NET any_net_name MAXDELAY = 20 ns;
#
#
# Constraint priority in your .ucf file is as follows:
#
#    highest 1.  Timing Ignore (TIG)
#                 2.  FROM : THRU : TO specs
#             3.  FROM : TO specs
#    lowest  4.  PERIOD specs
#
# See the on-line "Library Reference Guide" document for
# additional timespec features and more information.
#
#
############################################################
#                                                                                                                    #
#         LOCATION and ATTRIBUTE SPECIFICATIONS                        #
#                                                                                                                    #
############################################################
# Pin and CLB location locking constraints                 #
############################################################
#
# -----------------------
# Assign an IO pin number
# -----------------------
#INST io_buf_instance_name  LOC = P110 ;
#NET io_net_name  LOC = P111 ;
#
# -----------------------
# Assign a signal to a range of I/O pins
# -----------------------
#NET "signal_name" LOC=P32, P33, P34;
#
# -----------------------
# Place a logic element(called a BEL) in a specific CLB location.  BEL = FF, LUT, RAM, etc...
# -----------------------
#INST instance_path/BEL_inst_name  LOC = CLB_R17C36 ;
#
# -----------------------
# Place CLB in rectangular area from CLB R1C1 to CLB R5C7
# -----------------------
#INST /U1/U2/reg<0> LOC=clb_r1c1:clb_r5c7;
#
# -----------------------
# Place Heirarchial logic block in rectangular area from CLB R1C1 to CLB R5C7
# -----------------------
#INST /U1* LOC=clb_r1c1:clb_r5c7;
#
# -----------------------
# Prohibit IO pin P26 or CLBR5C3 from being used:
# -----------------------
#CONFIG PROHIBIT = P26 ;
#CONFIG PROHIBIT = CLB_R5C3 ;
# Config Prohibit is very important for frocing the software to not use critical
# configuration pins like INIT or DOUT on the FPGA.  The Mode pins and JTAG
# Pins require a special pad so they will not be availabe to this constraint
#
# -----------------------
# Assign an OBUF to be FAST or SLOW:
# -----------------------
#INST obuf_instance_name FAST ;
#INST obuf_instance_name SLOW ;
#
# -----------------------
# FPGAs only:  IOB input Flip-flop delay specifcation
# -----------------------
# Declare an IOB input FF delay (default = MAXDELAY).
# NOTE:  MEDDELAY/NODELAY can be attached to a CLB FF that is pushed
# into an IOB by the "map -pr i" option.
#INST input_ff_instance_name MEDDELAY ;
#INST input_ff_instance_name NODELAY ;
#
# -----------------------
# Assign Global Clock Buffers Lower Left Right Side
# -----------------------
# INST gbuf1 LOC=SSW
#
# #
NET "f1485" TNM_NET = "f1485";
TIMESPEC "TS_f1485" = PERIOD "f1485" 150 MHz HIGH 50 %;
NET "f1484" TNM_NET = "f1484";
TIMESPEC "TS_f1484" = PERIOD "f1484" 150 MHz HIGH 50 %;
