--------------------------------------------------------------------------------
-- Copyright (c) 1995-2003 Xilinx, Inc.
-- All Right Reserved.
--------------------------------------------------------------------------------
--   ____  ____ 
--  /   /\/   / 
-- /___/  \  /    Vendor: Xilinx 
-- \   \   \/     Version : 7.1i
--  \   \         Application : 
--  /   /         Filename : MGT.vhd
-- /___/   /\     Timestamp : 08/31/2005 08:26:50
-- \   \  /  \ 
--  \___\/\___\ 
--
--Command: 
--Design Name: MGT
--
-- Module MGT
-- Generated by Xilinx Architecture Wizard
-- Written for synthesis tool: XST

library ieee;
use ieee.std_logic_1164.ALL;
use ieee.numeric_std.ALL;
-- synopsys translate_off
library UNISIM;
use UNISIM.Vcomponents.ALL;
-- synopsys translate_on

entity MGT is
   port ( DADDR_IN               : in    std_logic_vector (7 downto 0); 
          DADDR_IN_BLK2          : in    std_logic_vector (7 downto 0); 
          DCLK_IN                : in    std_logic; 
          DCLK_IN_BLK2           : in    std_logic; 
          DEN_IN                 : in    std_logic; 
          DEN_IN_BLK2            : in    std_logic; 
          DI_IN                  : in    std_logic_vector (15 downto 0); 
          DI_IN_BLK2             : in    std_logic_vector (15 downto 0); 
          DWE_IN                 : in    std_logic; 
          DWE_IN_BLK2            : in    std_logic; 
          MGTCLKN_IN             : in    std_logic; 
          MGTCLKP_IN             : in    std_logic; 
          POWERDOWN_IN           : in    std_logic; 
          POWERDOWN_IN_BLK2      : in    std_logic; 
          RXUSRCLK_IN            : in    std_logic; 
          RXUSRCLK_IN_BLK2       : in    std_logic; 
          RXUSRCLK2_IN           : in    std_logic; 
          RXUSRCLK2_IN_BLK2      : in    std_logic; 
          TXCHARDISPMODE_IN      : in    std_logic_vector (3 downto 0); 
          TXCHARDISPMODE_IN_BLK2 : in    std_logic_vector (3 downto 0); 
          TXCHARDISPVAL_IN       : in    std_logic_vector (3 downto 0); 
          TXCHARDISPVAL_IN_BLK2  : in    std_logic_vector (3 downto 0); 
          TXCLKSTABLE_IN         : in    std_logic; 
          TXCLKSTABLE_IN_BLK2    : in    std_logic; 
          TXCRCCLK_IN            : in    std_logic; 
          TXCRCCLK_IN_BLK2       : in    std_logic; 
          TXCRCDATAVALID_IN      : in    std_logic; 
          TXCRCDATAVALID_IN_BLK2 : in    std_logic; 
          TXCRCDATAWIDTH_IN      : in    std_logic_vector (2 downto 0); 
          TXCRCDATAWIDTH_IN_BLK2 : in    std_logic_vector (2 downto 0); 
          TXCRCINIT_IN           : in    std_logic; 
          TXCRCINIT_IN_BLK2      : in    std_logic; 
          TXCRCINTCLK_IN         : in    std_logic; 
          TXCRCINTCLK_IN_BLK2    : in    std_logic; 
          TXCRCIN_IN             : in    std_logic_vector (63 downto 0); 
          TXCRCIN_IN_BLK2        : in    std_logic_vector (63 downto 0); 
          TXCRCPD_IN             : in    std_logic; 
          TXCRCPD_IN_BLK2        : in    std_logic; 
          TXCRCRESET_IN          : in    std_logic; 
          TXCRCRESET_IN_BLK2     : in    std_logic; 
          TXDATAWIDTH_IN         : in    std_logic_vector (1 downto 0); 
          TXDATAWIDTH_IN_BLK2    : in    std_logic_vector (1 downto 0); 
          TXDATA_IN              : in    std_logic_vector (31 downto 0); 
          TXDATA_IN_BLK2         : in    std_logic_vector (31 downto 0); 
          TXENOOB_IN             : in    std_logic; 
          TXENOOB_IN_BLK2        : in    std_logic; 
          TXINHIBIT_IN           : in    std_logic; 
          TXINHIBIT_IN_BLK2      : in    std_logic; 
          TXINTDATAWIDTH_IN      : in    std_logic_vector (1 downto 0); 
          TXINTDATAWIDTH_IN_BLK2 : in    std_logic_vector (1 downto 0); 
          TXPMARESET_IN          : in    std_logic; 
          TXPMARESET_IN_BLK2     : in    std_logic; 
          TXPOLARITY_IN          : in    std_logic; 
          TXPOLARITY_IN_BLK2     : in    std_logic; 
          TXRESET_IN             : in    std_logic; 
          TXRESET_IN_BLK2        : in    std_logic; 
          TXSYNC_IN              : in    std_logic; 
          TXSYNC_IN_BLK2         : in    std_logic; 
          TXUSRCLK_IN            : in    std_logic; 
          TXUSRCLK_IN_BLK2       : in    std_logic; 
          TXUSRCLK2_IN           : in    std_logic; 
          TXUSRCLK2_IN_BLK2      : in    std_logic; 
          DO_OUT                 : out   std_logic_vector (15 downto 0); 
          DO_OUT_BLK2            : out   std_logic_vector (15 downto 0); 
          DRDY_OUT               : out   std_logic; 
          DRDY_OUT_BLK2          : out   std_logic; 
          TXBUFERR_OUT           : out   std_logic; 
          TXBUFERR_OUT_BLK2      : out   std_logic; 
          TXCALFAIL_OUT          : out   std_logic; 
          TXCALFAIL_OUT_BLK2     : out   std_logic; 
          TXCRCOUT_OUT           : out   std_logic_vector (31 downto 0); 
          TXCRCOUT_OUT_BLK2      : out   std_logic_vector (31 downto 0); 
          TXCYCLELIMIT_OUT       : out   std_logic; 
          TXCYCLELIMIT_OUT_BLK2  : out   std_logic; 
          TXLOCK_OUT             : out   std_logic; 
          TXLOCK_OUT_BLK2        : out   std_logic; 
          TXOUTCLK1_OUT          : out   std_logic; 
          TXOUTCLK1_OUT_BLK2     : out   std_logic; 
          TXOUTCLK2_OUT          : out   std_logic; 
          TXOUTCLK2_OUT_BLK2     : out   std_logic; 
          TXPCSHCLKOUT_OUT       : out   std_logic; 
          TXPCSHCLKOUT_OUT_BLK2  : out   std_logic; 
          TXRUNDISP_OUT          : out   std_logic_vector (3 downto 0); 
          TXRUNDISP_OUT_BLK2     : out   std_logic_vector (3 downto 0); 
          TX1N_OUT               : out   std_logic; 
          TX1N_OUT_BLK2          : out   std_logic; 
          TX1P_OUT               : out   std_logic; 
          TX1P_OUT_BLK2          : out   std_logic);
end MGT;

architecture BEHAVIORAL of MGT is
   signal COMBUSOUT              : std_logic_vector (15 downto 0);
   signal COMBUSOUT_BLK2         : std_logic_vector (15 downto 0);
   signal GND                    : std_logic_vector (4 downto 0);
   signal GND1                   : std_logic;
   signal GND2                   : std_logic_vector (1 downto 0);
   signal GND3                   : std_logic_vector (3 downto 0);
   signal GND4                   : std_logic_vector (7 downto 0);
   signal GND5                   : std_logic_vector (31 downto 0);
   signal GND6                   : std_logic_vector (63 downto 0);
   signal GND7                   : std_logic_vector (2 downto 0);
   signal SYNCLK1OUT             : std_logic;
   signal SYNCLK2OUT             : std_logic;
   signal TXRUNDISP_float        : std_logic_vector (3 downto 0);
   signal TXRUNDISP_float1       : std_logic_vector (3 downto 0);
   signal VCC                    : std_logic_vector (7 downto 0);
   component GT11CLK_MGT
      generic( SYNCLK1OUTEN : string :=  "ENABLE";
               SYNCLK2OUTEN : string :=  "DISABLE");
      port ( MGTCLKN    : in    std_logic; 
             MGTCLKP    : in    std_logic; 
             SYNCLK1OUT : out   std_logic; 
             SYNCLK2OUT : out   std_logic);
   end component;
   
   component GT11
      generic( GT11_MODE : string :=  "DONT_CARE";
               CHAN_BOND_SEQ_1_1 : bit_vector :=  "00000000000";
               CHAN_BOND_SEQ_1_2 : bit_vector :=  "00000000000";
               CHAN_BOND_SEQ_1_3 : bit_vector :=  "00000000000";
               CHAN_BOND_SEQ_1_4 : bit_vector :=  "00000000000";
               CHAN_BOND_SEQ_1_MASK : bit_vector :=  "0000";
               CHAN_BOND_LIMIT : integer :=  16;
               CHAN_BOND_MODE : string :=  "NONE";
               CHAN_BOND_ONE_SHOT : boolean :=  FALSE;
               CHAN_BOND_SEQ_2_USE : boolean :=  FALSE;
               CHAN_BOND_SEQ_LEN : integer :=  1;
               RX_BUFFER_USE : boolean :=  TRUE;
               TX_BUFFER_USE : boolean :=  TRUE;
               CHAN_BOND_SEQ_2_1 : bit_vector :=  "00000000000";
               CHAN_BOND_SEQ_2_2 : bit_vector :=  "00000000000";
               CHAN_BOND_SEQ_2_3 : bit_vector :=  "00000000000";
               CHAN_BOND_SEQ_2_4 : bit_vector :=  "00000000000";
               CHAN_BOND_SEQ_2_MASK : bit_vector :=  "0000";
               POWER_ENABLE : boolean :=  TRUE;
               OPPOSITE_SELECT : boolean :=  FALSE;
               CCCB_ARBITRATOR_DISABLE : boolean :=  FALSE;
               CLK_COR_SEQ_1_1 : bit_vector :=  "00000000000";
               CLK_COR_SEQ_1_2 : bit_vector :=  "00000000000";
               CLK_COR_SEQ_1_3 : bit_vector :=  "00000000000";
               CLK_COR_SEQ_1_4 : bit_vector :=  "00000000000";
               CLK_COR_SEQ_1_MASK : bit_vector :=  "0000";
               DIGRX_SYNC_MODE : boolean :=  FALSE;
               DIGRX_FWDCLK : bit_vector :=  "00";
               PCS_BIT_SLIP : boolean :=  FALSE;
               CLK_COR_MIN_LAT : integer :=  36;
               TXDATA_SEL : bit_vector :=  "00";
               RXDATA_SEL : bit_vector :=  "00";
               CLK_COR_SEQ_2_1 : bit_vector :=  "00000000000";
               CLK_COR_SEQ_2_2 : bit_vector :=  "00000000000";
               CLK_COR_SEQ_2_3 : bit_vector :=  "00000000000";
               CLK_COR_SEQ_2_4 : bit_vector :=  "00000000000";
               CLK_COR_SEQ_2_MASK : bit_vector :=  "0000";
               RX_LOS_INVALID_INCR : integer :=  1;
               RX_LOS_THRESHOLD : integer :=  4;
               CLK_COR_MAX_LAT : integer :=  48;
               CLK_COR_SEQ_2_USE : boolean :=  FALSE;
               CLK_COR_SEQ_DROP : boolean :=  FALSE;
               CLK_COR_SEQ_LEN : integer :=  1;
               CLK_CORRECT_USE : boolean :=  TRUE;
               CLK_COR_8B10B_DE : boolean :=  FALSE;
               SH_CNT_MAX : integer :=  64;
               SH_INVALID_CNT_MAX : integer :=  16;
               ALIGN_COMMA_WORD : integer :=  1;
               DEC_MCOMMA_DETECT : boolean :=  TRUE;
               DEC_PCOMMA_DETECT : boolean :=  TRUE;
               DEC_VALID_COMMA_ONLY : boolean :=  TRUE;
               MCOMMA_DETECT : boolean :=  TRUE;
               PCOMMA_DETECT : boolean :=  TRUE;
               COMMA32 : boolean :=  FALSE;
               COMMA_10B_MASK : bit_vector :=  x"3FF";
               MCOMMA_32B_VALUE : bit_vector :=  x"000000F6";
               PCOMMA_32B_VALUE : bit_vector :=  x"F6F62828";
               RXUSRDIVISOR : integer :=  1;
               DCDR_FILTER : bit_vector :=  "010";
               SAMPLE_8X : boolean :=  FALSE;
               ENABLE_DCDR : boolean :=  FALSE;
               REPEATER : boolean :=  FALSE;
               RXBY_32 : boolean :=  TRUE;
               TXFDCAL_CLOCK_DIVIDE : string :=  "NONE";
               RXFDCAL_CLOCK_DIVIDE : string :=  "NONE";
               RXCYCLE_LIMIT_SEL : bit_vector :=  "00";
               RXVCO_CTRL_ENABLE : boolean :=  TRUE;
               RXFDET_LCK_SEL : bit_vector :=  "101";
               RXFDET_HYS_SEL : bit_vector :=  "110";
               RXFDET_LCK_CAL : bit_vector :=  "101";
               RXFDET_HYS_CAL : bit_vector :=  "110";
               RXLOOPCAL_WAIT : bit_vector :=  "00";
               RXSLOWDOWN_CAL : bit_vector :=  "00";
               RXVCODAC_INIT : bit_vector :=  "1010000000";
               CYCLE_LIMIT_SEL : bit_vector :=  "00";
               VCO_CTRL_ENABLE : boolean :=  TRUE;
               FDET_LCK_SEL : bit_vector :=  "101";
               FDET_HYS_SEL : bit_vector :=  "110";
               FDET_LCK_CAL : bit_vector :=  "101";
               FDET_HYS_CAL : bit_vector :=  "110";
               LOOPCAL_WAIT : bit_vector :=  "00";
               SLOWDOWN_CAL : bit_vector :=  "00";
               VCODAC_INIT : bit_vector :=  "1010000000";
               RXCRCCLOCKDOUBLE : boolean :=  FALSE;
               RXCRCINVERTGEN : boolean :=  FALSE;
               RXCRCSAMECLOCK : boolean :=  FALSE;
               RXCRCENABLE : boolean :=  FALSE;
               RXCRCINITVAL : bit_vector :=  x"00000000";
               TXCRCCLOCKDOUBLE : boolean :=  FALSE;
               TXCRCINVERTGEN : boolean :=  FALSE;
               TXCRCSAMECLOCK : boolean :=  FALSE;
               TXCRCINITVAL : bit_vector :=  x"00000000";
               TXCRCENABLE : boolean :=  FALSE;
               RX_CLOCK_DIVIDER : bit_vector :=  "00";
               TX_CLOCK_DIVIDER : bit_vector :=  "00";
               RXCLK0_FORCE_PMACLK : boolean :=  FALSE;
               TXCLK0_FORCE_PMACLK : boolean :=  FALSE;
               TXOUTCLK1_USE_SYNC : boolean :=  FALSE;
               RXRECCLK1_USE_SYNC : boolean :=  FALSE;
               RXPMACLKSEL : string :=  "REFCLK1";
               TXABPMACLKSEL : string :=  "REFCLK1";
               PMAVBGCTRL : bit_vector :=  "00000";
               BANDGAPSEL : boolean :=  FALSE;
               PMAIREFTRIM : bit_vector :=  "0111";
               IREFBIASMODE : bit_vector :=  "11";
               BIASRESSEL : boolean :=  TRUE;
               PMAVREFTRIM : bit_vector :=  "0111";
               VREFBIASMODE : bit_vector :=  "11";
               TXPHASESEL : boolean :=  FALSE;
               PMACLKENABLE : boolean :=  TRUE;
               PMACOREPWRENABLE : boolean :=  TRUE;
               PMA_BIT_SLIP : boolean :=  FALSE;
               RXASYNCDIVIDE : bit_vector :=  "11";
               RXCLKMODE : bit_vector :=  "110001";
               RXLB : boolean :=  FALSE;
               RXFETUNE : bit_vector :=  "01";
               RXRCPADJ : bit_vector :=  "011";
               RXRIBADJ : bit_vector :=  "11";
               RXAFEEQ : bit_vector :=  "000000000";
               RXCMADJ : bit_vector :=  "10";
               RXCDRLOS : bit_vector :=  "000000";
               RXDCCOUPLE : boolean :=  FALSE;
               RXLKADJ : bit_vector :=  "00000";
               RXDIGRESET : boolean :=  FALSE;
               RXFECONTROL2 : bit_vector :=  "000";
               RXCPTST : boolean :=  FALSE;
               RXPDDTST : boolean :=  FALSE;
               RXACTST : boolean :=  FALSE;
               RXAFETST : boolean :=  FALSE;
               RXFECONTROL1 : bit_vector :=  "00";
               RXLKAPD : boolean :=  FALSE;
               RXRSDPD : boolean :=  FALSE;
               RXRCPPD : boolean :=  FALSE;
               RXRPDPD : boolean :=  FALSE;
               RXAFEPD : boolean :=  FALSE;
               RXPD : boolean :=  FALSE;
               RXEQ : bit_vector :=  x"4000000000000000";
               TXOUTDIV2SEL : integer :=  1;
               TXPLLNDIVSEL : integer :=  8;
               TXLOOPFILT : bit_vector :=  "0111";
               TXCPSEL : boolean :=  TRUE;
               TXCTRL1 : bit_vector :=  x"200";
               TXAPD : boolean :=  FALSE;
               TXLVLSHFTPD : boolean :=  FALSE;
               TXPRE_PRDRV_DAC : bit_vector :=  "111";
               TXPRE_TAP_PD : boolean :=  TRUE;
               TXPRE_TAP_DAC : bit_vector :=  "00000";
               TXDIGPD : boolean :=  FALSE;
               TXCLKMODE : bit_vector :=  "1001";
               TXHIGHSIGNALEN : boolean :=  TRUE;
               TXAREFBIASSEL : boolean :=  FALSE;
               TXTERMTRIM : bit_vector :=  "1100";
               TXASYNCDIVIDE : bit_vector :=  "11";
               TXSLEWRATE : boolean :=  FALSE;
               TXPOST_PRDRV_DAC : bit_vector :=  "111";
               TXDAT_PRDRV_DAC : bit_vector :=  "111";
               TXPOST_TAP_PD : boolean :=  TRUE;
               TXPOST_TAP_DAC : bit_vector :=  "01110";
               TXDAT_TAP_DAC : bit_vector :=  "10110";
               TXPD : boolean :=  FALSE;
               RXOUTDIV2SEL : integer :=  1;
               RXPLLNDIVSEL : integer :=  8;
               RXLOOPFILT : bit_vector :=  "0111";
               RXDIGRX : boolean :=  FALSE;
               RXCPSEL : boolean :=  TRUE;
               RXCTRL1 : bit_vector :=  x"200";
               RXAPD : boolean :=  FALSE;
               IN_DELAY : time :=  0 ps);
      port ( CHBONDI              : in    std_logic_vector (4 downto 0); 
             ENCHANSYNC           : in    std_logic; 
             ENMCOMMAALIGN        : in    std_logic; 
             ENPCOMMAALIGN        : in    std_logic; 
             LOOPBACK             : in    std_logic_vector (1 downto 0); 
             POWERDOWN            : in    std_logic; 
             RXBLOCKSYNC64B66BUSE : in    std_logic; 
             RXCOMMADETUSE        : in    std_logic; 
             RXDATAWIDTH          : in    std_logic_vector (1 downto 0); 
             RXDEC64B66BUSE       : in    std_logic; 
             RXDEC8B10BUSE        : in    std_logic; 
             RXDESCRAM64B66BUSE   : in    std_logic; 
             RXIGNOREBTF          : in    std_logic; 
             RXINTDATAWIDTH       : in    std_logic_vector (1 downto 0); 
             RXPOLARITY           : in    std_logic; 
             RXRESET              : in    std_logic; 
             RXSLIDE              : in    std_logic; 
             RXUSRCLK             : in    std_logic; 
             RXUSRCLK2            : in    std_logic; 
             TXBYPASS8B10B        : in    std_logic_vector (7 downto 0); 
             TXCHARDISPMODE       : in    std_logic_vector (7 downto 0); 
             TXCHARDISPVAL        : in    std_logic_vector (7 downto 0); 
             TXCHARISK            : in    std_logic_vector (7 downto 0); 
             TXDATA               : in    std_logic_vector (63 downto 0); 
             TXDATAWIDTH          : in    std_logic_vector (1 downto 0); 
             TXENC64B66BUSE       : in    std_logic; 
             TXENC8B10BUSE        : in    std_logic; 
             TXGEARBOX64B66BUSE   : in    std_logic; 
             TXINHIBIT            : in    std_logic; 
             TXINTDATAWIDTH       : in    std_logic_vector (1 downto 0); 
             TXPOLARITY           : in    std_logic; 
             TXRESET              : in    std_logic; 
             TXSCRAM64B66BUSE     : in    std_logic; 
             TXUSRCLK             : in    std_logic; 
             TXUSRCLK2            : in    std_logic; 
             RXCLKSTABLE          : in    std_logic; 
             RXPMARESET           : in    std_logic; 
             TXCLKSTABLE          : in    std_logic; 
             TXPMARESET           : in    std_logic; 
             RXCRCIN              : in    std_logic_vector (63 downto 0); 
             RXCRCDATAWIDTH       : in    std_logic_vector (2 downto 0); 
             RXCRCDATAVALID       : in    std_logic; 
             RXCRCINIT            : in    std_logic; 
             RXCRCRESET           : in    std_logic; 
             RXCRCPD              : in    std_logic; 
             RXCRCCLK             : in    std_logic; 
             RXCRCINTCLK          : in    std_logic; 
             TXCRCIN              : in    std_logic_vector (63 downto 0); 
             TXCRCDATAWIDTH       : in    std_logic_vector (2 downto 0); 
             TXCRCDATAVALID       : in    std_logic; 
             TXCRCINIT            : in    std_logic; 
             TXCRCRESET           : in    std_logic; 
             TXCRCPD              : in    std_logic; 
             TXCRCCLK             : in    std_logic; 
             TXCRCINTCLK          : in    std_logic; 
             TXSYNC               : in    std_logic; 
             RXSYNC               : in    std_logic; 
             TXENOOB              : in    std_logic; 
             DCLK                 : in    std_logic; 
             DADDR                : in    std_logic_vector (7 downto 0); 
             DEN                  : in    std_logic; 
             DWE                  : in    std_logic; 
             DI                   : in    std_logic_vector (15 downto 0); 
             RX1P                 : in    std_logic; 
             RX1N                 : in    std_logic; 
             GREFCLK              : in    std_logic; 
             REFCLK1              : in    std_logic; 
             REFCLK2              : in    std_logic; 
             CHBONDO              : out   std_logic_vector (4 downto 0); 
             RXSTATUS             : out   std_logic_vector (5 downto 0); 
             RXCHARISCOMMA        : out   std_logic_vector (7 downto 0); 
             RXCHARISK            : out   std_logic_vector (7 downto 0); 
             RXCOMMADET           : out   std_logic; 
             RXDATA               : out   std_logic_vector (63 downto 0); 
             RXDISPERR            : out   std_logic_vector (7 downto 0); 
             RXLOSSOFSYNC         : out   std_logic_vector (1 downto 0); 
             RXNOTINTABLE         : out   std_logic_vector (7 downto 0); 
             RXREALIGN            : out   std_logic; 
             RXRUNDISP            : out   std_logic_vector (7 downto 0); 
             RXBUFERR             : out   std_logic; 
             TXBUFERR             : out   std_logic; 
             TXKERR               : out   std_logic_vector (7 downto 0); 
             TXRUNDISP            : out   std_logic_vector (7 downto 0); 
             RXRECCLK1            : out   std_logic; 
             RXRECCLK2            : out   std_logic; 
             TXOUTCLK1            : out   std_logic; 
             TXOUTCLK2            : out   std_logic; 
             RXLOCK               : out   std_logic; 
             TXLOCK               : out   std_logic; 
             RXCYCLELIMIT         : out   std_logic; 
             TXCYCLELIMIT         : out   std_logic; 
             RXCALFAIL            : out   std_logic; 
             TXCALFAIL            : out   std_logic; 
             RXCRCOUT             : out   std_logic_vector (31 downto 0); 
             TXCRCOUT             : out   std_logic_vector (31 downto 0); 
             RXSIGDET             : out   std_logic; 
             DRDY                 : out   std_logic; 
             DO                   : out   std_logic_vector (15 downto 0); 
             RXMCLK               : out   std_logic; 
             TX1P                 : out   std_logic; 
             TX1N                 : out   std_logic; 
             TXPCSHCLKOUT         : out   std_logic; 
             RXPCSHCLKOUT         : out   std_logic; 
             COMBUSIN             : in    std_logic_vector (15 downto 0); 
             COMBUSOUT            : out   std_logic_vector (15 downto 0));
   end component;
   
begin
   GND(4 downto 0) <= "00000";
   GND1 <= '0';
   GND2(1 downto 0) <= "00";
   GND3(3 downto 0) <= "0000";
   GND4(7 downto 0) <= "00000000";
   GND5(31 downto 0) <= "00000000000000000000000000000000";
   GND6(63 downto 0) <= 
         "0000000000000000000000000000000000000000000000000000000000000000";
   GND7(2 downto 0) <= "000";
   VCC(7 downto 0) <= "11111111";
   GT11CLK_MGT_INST : GT11CLK_MGT
   generic map( SYNCLK1OUTEN => "ENABLE",
            SYNCLK2OUTEN => "DISABLE")
      port map (MGTCLKN=>MGTCLKN_IN,
                MGTCLKP=>MGTCLKP_IN,
                SYNCLK1OUT=>SYNCLK1OUT,
                SYNCLK2OUT=>SYNCLK2OUT);
   
   GT11_CUSTOM_INST : GT11
   generic map( GT11_MODE => "B",
            CHAN_BOND_SEQ_1_1 => "00000000000",
            CHAN_BOND_SEQ_1_2 => "00000000000",
            CHAN_BOND_SEQ_1_3 => "00000000000",
            CHAN_BOND_SEQ_1_4 => "00000000000",
            CHAN_BOND_SEQ_1_MASK => "0000",
            CHAN_BOND_LIMIT => 16,
            CHAN_BOND_MODE => "NONE",
            CHAN_BOND_ONE_SHOT => FALSE,
            CHAN_BOND_SEQ_2_USE => FALSE,
            CHAN_BOND_SEQ_LEN => 1,
            RX_BUFFER_USE => TRUE,
            TX_BUFFER_USE => TRUE,
            CHAN_BOND_SEQ_2_1 => "00000000000",
            CHAN_BOND_SEQ_2_2 => "00000000000",
            CHAN_BOND_SEQ_2_3 => "00000000000",
            CHAN_BOND_SEQ_2_4 => "00000000000",
            CHAN_BOND_SEQ_2_MASK => "0000",
            POWER_ENABLE => TRUE,
            OPPOSITE_SELECT => FALSE,
            CCCB_ARBITRATOR_DISABLE => FALSE,
            CLK_COR_SEQ_1_1 => "00000000000",
            CLK_COR_SEQ_1_2 => "00000000000",
            CLK_COR_SEQ_1_3 => "00000000000",
            CLK_COR_SEQ_1_4 => "00000000000",
            CLK_COR_SEQ_1_MASK => "0000",
            DIGRX_SYNC_MODE => FALSE,
            DIGRX_FWDCLK => "00",
            PCS_BIT_SLIP => FALSE,
            CLK_COR_MIN_LAT => 36,
            TXDATA_SEL => "00",
            RXDATA_SEL => "00",
            CLK_COR_SEQ_2_1 => "00000000000",
            CLK_COR_SEQ_2_2 => "00000000000",
            CLK_COR_SEQ_2_3 => "00000000000",
            CLK_COR_SEQ_2_4 => "00000000000",
            CLK_COR_SEQ_2_MASK => "0000",
            RX_LOS_INVALID_INCR => 1,
            RX_LOS_THRESHOLD => 4,
            CLK_COR_MAX_LAT => 48,
            CLK_COR_SEQ_2_USE => FALSE,
            CLK_COR_SEQ_DROP => FALSE,
            CLK_COR_SEQ_LEN => 1,
            CLK_CORRECT_USE => TRUE,
            CLK_COR_8B10B_DE => FALSE,
            SH_CNT_MAX => 64,
            SH_INVALID_CNT_MAX => 16,
            ALIGN_COMMA_WORD => 1,
            DEC_MCOMMA_DETECT => TRUE,
            DEC_PCOMMA_DETECT => TRUE,
            DEC_VALID_COMMA_ONLY => TRUE,
            MCOMMA_DETECT => TRUE,
            PCOMMA_DETECT => TRUE,
            COMMA32 => FALSE,
            COMMA_10B_MASK => x"3FF",
            MCOMMA_32B_VALUE => x"000000F6",
            PCOMMA_32B_VALUE => x"F6F62828",
            RXUSRDIVISOR => 1,
            DCDR_FILTER => "010",
            SAMPLE_8X => FALSE,
            ENABLE_DCDR => FALSE,
            REPEATER => FALSE,
            RXBY_32 => TRUE,
            TXFDCAL_CLOCK_DIVIDE => "NONE",
            RXFDCAL_CLOCK_DIVIDE => "NONE",
            RXCYCLE_LIMIT_SEL => "00",
            RXVCO_CTRL_ENABLE => TRUE,
            RXFDET_LCK_SEL => "101",
            RXFDET_HYS_SEL => "110",
            RXFDET_LCK_CAL => "101",
            RXFDET_HYS_CAL => "110",
            RXLOOPCAL_WAIT => "00",
            RXSLOWDOWN_CAL => "00",
            RXVCODAC_INIT => "1010000000",
            CYCLE_LIMIT_SEL => "00",
            VCO_CTRL_ENABLE => TRUE,
            FDET_LCK_SEL => "101",
            FDET_HYS_SEL => "110",
            FDET_LCK_CAL => "101",
            FDET_HYS_CAL => "110",
            LOOPCAL_WAIT => "00",
            SLOWDOWN_CAL => "00",
            VCODAC_INIT => "1010000000",
            RXCRCCLOCKDOUBLE => FALSE,
            RXCRCINVERTGEN => FALSE,
            RXCRCSAMECLOCK => FALSE,
            RXCRCENABLE => FALSE,
            RXCRCINITVAL => x"00000000",
            TXCRCCLOCKDOUBLE => FALSE,
            TXCRCINVERTGEN => FALSE,
            TXCRCSAMECLOCK => FALSE,
            TXCRCINITVAL => x"00000000",
            TXCRCENABLE => FALSE,
            RX_CLOCK_DIVIDER => "00",
            TX_CLOCK_DIVIDER => "00",
            RXCLK0_FORCE_PMACLK => FALSE,
            TXCLK0_FORCE_PMACLK => FALSE,
            TXOUTCLK1_USE_SYNC => FALSE,
            RXRECCLK1_USE_SYNC => FALSE,
            RXPMACLKSEL => "REFCLK1",
            TXABPMACLKSEL => "REFCLK1",
            PMAVBGCTRL => "00000",
            BANDGAPSEL => FALSE,
            PMAIREFTRIM => "0111",
            IREFBIASMODE => "11",
            BIASRESSEL => TRUE,
            PMAVREFTRIM => "0111",
            VREFBIASMODE => "11",
            TXPHASESEL => FALSE,
            PMACLKENABLE => TRUE,
            PMACOREPWRENABLE => TRUE,
            PMA_BIT_SLIP => FALSE,
            RXASYNCDIVIDE => "11",
            RXCLKMODE => "110001",
            RXLB => FALSE,
            RXFETUNE => "01",
            RXRCPADJ => "011",
            RXRIBADJ => "11",
            RXAFEEQ => "000000000",
            RXCMADJ => "10",
            RXCDRLOS => "000000",
            RXDCCOUPLE => FALSE,
            RXLKADJ => "00000",
            RXDIGRESET => FALSE,
            RXFECONTROL2 => "000",
            RXCPTST => FALSE,
            RXPDDTST => FALSE,
            RXACTST => FALSE,
            RXAFETST => FALSE,
            RXFECONTROL1 => "00",
            RXLKAPD => FALSE,
            RXRSDPD => FALSE,
            RXRCPPD => FALSE,
            RXRPDPD => FALSE,
            RXAFEPD => FALSE,
            RXPD => FALSE,
            RXEQ => x"4000000000000000",
            TXOUTDIV2SEL => 1,
            TXPLLNDIVSEL => 8,
            TXLOOPFILT => "0111",
            TXCPSEL => TRUE,
            TXCTRL1 => x"200",
            TXAPD => FALSE,
            TXLVLSHFTPD => FALSE,
            TXPRE_PRDRV_DAC => "111",
            TXPRE_TAP_PD => TRUE,
            TXPRE_TAP_DAC => "00000",
            TXDIGPD => FALSE,
            TXCLKMODE => "1001",
            TXHIGHSIGNALEN => TRUE,
            TXAREFBIASSEL => FALSE,
            TXTERMTRIM => "1100",
            TXASYNCDIVIDE => "11",
            TXSLEWRATE => FALSE,
            TXPOST_PRDRV_DAC => "111",
            TXDAT_PRDRV_DAC => "111",
            TXPOST_TAP_PD => TRUE,
            TXPOST_TAP_DAC => "01110",
            TXDAT_TAP_DAC => "10110",
            TXPD => FALSE,
            RXOUTDIV2SEL => 1,
            RXPLLNDIVSEL => 8,
            RXLOOPFILT => "0111",
            RXDIGRX => FALSE,
            RXCPSEL => TRUE,
            RXCTRL1 => x"200",
            RXAPD => FALSE)
      port map (CHBONDI(4 downto 0)=>GND(4 downto 0),
                COMBUSIN(15 downto 0)=>COMBUSOUT_BLK2(15 downto 0),
                DADDR(7 downto 0)=>DADDR_IN(7 downto 0),
                DCLK=>DCLK_IN,
                DEN=>DEN_IN,
                DI(15 downto 0)=>DI_IN(15 downto 0),
                DWE=>DWE_IN,
                ENCHANSYNC=>GND1,
                ENMCOMMAALIGN=>GND1,
                ENPCOMMAALIGN=>GND1,
                GREFCLK=>GND1,
                LOOPBACK(1 downto 0)=>GND2(1 downto 0),
                POWERDOWN=>POWERDOWN_IN,
                REFCLK1=>SYNCLK1OUT,
                REFCLK2=>SYNCLK2OUT,
                RXBLOCKSYNC64B66BUSE=>GND1,
                RXCLKSTABLE=>GND1,
                RXCOMMADETUSE=>GND1,
                RXCRCCLK=>GND1,
                RXCRCDATAVALID=>GND1,
                RXCRCDATAWIDTH(2 downto 0)=>GND7(2 downto 0),
                RXCRCIN(63 downto 0)=>GND6(63 downto 0),
                RXCRCINIT=>GND1,
                RXCRCINTCLK=>GND1,
                RXCRCPD=>GND1,
                RXCRCRESET=>GND1,
                RXDATAWIDTH(1 downto 0)=>GND2(1 downto 0),
                RXDEC8B10BUSE=>GND1,
                RXDEC64B66BUSE=>GND1,
                RXDESCRAM64B66BUSE=>GND1,
                RXIGNOREBTF=>GND1,
                RXINTDATAWIDTH(1 downto 0)=>GND2(1 downto 0),
                RXPMARESET=>GND1,
                RXPOLARITY=>GND1,
                RXRESET=>GND1,
                RXSLIDE=>GND1,
                RXSYNC=>GND1,
                RXUSRCLK=>RXUSRCLK_IN,
                RXUSRCLK2=>RXUSRCLK2_IN,
                RX1N=>GND1,
                RX1P=>GND1,
                TXBYPASS8B10B(7 downto 0)=>VCC(7 downto 0),
                TXCHARDISPMODE(7 downto 4)=>GND3(3 downto 0),
                TXCHARDISPMODE(3 downto 0)=>TXCHARDISPMODE_IN(3 downto 0),
                TXCHARDISPVAL(7 downto 4)=>GND3(3 downto 0),
                TXCHARDISPVAL(3 downto 0)=>TXCHARDISPVAL_IN(3 downto 0),
                TXCHARISK(7 downto 0)=>GND4(7 downto 0),
                TXCLKSTABLE=>TXCLKSTABLE_IN,
                TXCRCCLK=>TXCRCCLK_IN,
                TXCRCDATAVALID=>TXCRCDATAVALID_IN,
                TXCRCDATAWIDTH(2 downto 0)=>TXCRCDATAWIDTH_IN(2 downto 0),
                TXCRCIN(63 downto 0)=>TXCRCIN_IN(63 downto 0),
                TXCRCINIT=>TXCRCINIT_IN,
                TXCRCINTCLK=>TXCRCINTCLK_IN,
                TXCRCPD=>TXCRCPD_IN,
                TXCRCRESET=>TXCRCRESET_IN,
                TXDATA(63 downto 32)=>GND5(31 downto 0),
                TXDATA(31 downto 0)=>TXDATA_IN(31 downto 0),
                TXDATAWIDTH(1 downto 0)=>TXDATAWIDTH_IN(1 downto 0),
                TXENC8B10BUSE=>GND1,
                TXENC64B66BUSE=>GND1,
                TXENOOB=>TXENOOB_IN,
                TXGEARBOX64B66BUSE=>GND1,
                TXINHIBIT=>TXINHIBIT_IN,
                TXINTDATAWIDTH(1 downto 0)=>TXINTDATAWIDTH_IN(1 downto 0),
                TXPMARESET=>TXPMARESET_IN,
                TXPOLARITY=>TXPOLARITY_IN,
                TXRESET=>TXRESET_IN,
                TXSCRAM64B66BUSE=>GND1,
                TXSYNC=>TXSYNC_IN,
                TXUSRCLK=>TXUSRCLK_IN,
                TXUSRCLK2=>TXUSRCLK2_IN,
                CHBONDO=>open,
                COMBUSOUT(15 downto 0)=>COMBUSOUT(15 downto 0),
                DO(15 downto 0)=>DO_OUT(15 downto 0),
                DRDY=>DRDY_OUT,
                RXBUFERR=>open,
                RXCALFAIL=>open,
                RXCHARISCOMMA=>open,
                RXCHARISK=>open,
                RXCOMMADET=>open,
                RXCRCOUT=>open,
                RXCYCLELIMIT=>open,
                RXDATA=>open,
                RXDISPERR=>open,
                RXLOCK=>open,
                RXLOSSOFSYNC=>open,
                RXMCLK=>open,
                RXNOTINTABLE=>open,
                RXPCSHCLKOUT=>open,
                RXREALIGN=>open,
                RXRECCLK1=>open,
                RXRECCLK2=>open,
                RXRUNDISP=>open,
                RXSIGDET=>open,
                RXSTATUS=>open,
                TXBUFERR=>TXBUFERR_OUT,
                TXCALFAIL=>TXCALFAIL_OUT,
                TXCRCOUT(31 downto 0)=>TXCRCOUT_OUT(31 downto 0),
                TXCYCLELIMIT=>TXCYCLELIMIT_OUT,
                TXKERR=>open,
                TXLOCK=>TXLOCK_OUT,
                TXOUTCLK1=>TXOUTCLK1_OUT,
                TXOUTCLK2=>TXOUTCLK2_OUT,
                TXPCSHCLKOUT=>TXPCSHCLKOUT_OUT,
                TXRUNDISP(7 downto 4)=>TXRUNDISP_float(3 downto 0),
                TXRUNDISP(3 downto 0)=>TXRUNDISP_OUT(3 downto 0),
                TX1N=>TX1N_OUT,
                TX1P=>TX1P_OUT);
   
   GT11_CUSTOM_INST2 : GT11
   generic map( GT11_MODE => "A",
            CHAN_BOND_SEQ_1_1 => "00000000000",
            CHAN_BOND_SEQ_1_2 => "00000000000",
            CHAN_BOND_SEQ_1_3 => "00000000000",
            CHAN_BOND_SEQ_1_4 => "00000000000",
            CHAN_BOND_SEQ_1_MASK => "0000",
            CHAN_BOND_LIMIT => 16,
            CHAN_BOND_MODE => "NONE",
            CHAN_BOND_ONE_SHOT => FALSE,
            CHAN_BOND_SEQ_2_USE => FALSE,
            CHAN_BOND_SEQ_LEN => 1,
            RX_BUFFER_USE => TRUE,
            TX_BUFFER_USE => TRUE,
            CHAN_BOND_SEQ_2_1 => "00000000000",
            CHAN_BOND_SEQ_2_2 => "00000000000",
            CHAN_BOND_SEQ_2_3 => "00000000000",
            CHAN_BOND_SEQ_2_4 => "00000000000",
            CHAN_BOND_SEQ_2_MASK => "0000",
            POWER_ENABLE => TRUE,
            OPPOSITE_SELECT => FALSE,
            CCCB_ARBITRATOR_DISABLE => FALSE,
            CLK_COR_SEQ_1_1 => "00000000000",
            CLK_COR_SEQ_1_2 => "00000000000",
            CLK_COR_SEQ_1_3 => "00000000000",
            CLK_COR_SEQ_1_4 => "00000000000",
            CLK_COR_SEQ_1_MASK => "0000",
            DIGRX_SYNC_MODE => FALSE,
            DIGRX_FWDCLK => "00",
            PCS_BIT_SLIP => FALSE,
            CLK_COR_MIN_LAT => 36,
            TXDATA_SEL => "00",
            RXDATA_SEL => "00",
            CLK_COR_SEQ_2_1 => "00000000000",
            CLK_COR_SEQ_2_2 => "00000000000",
            CLK_COR_SEQ_2_3 => "00000000000",
            CLK_COR_SEQ_2_4 => "00000000000",
            CLK_COR_SEQ_2_MASK => "0000",
            RX_LOS_INVALID_INCR => 1,
            RX_LOS_THRESHOLD => 4,
            CLK_COR_MAX_LAT => 48,
            CLK_COR_SEQ_2_USE => FALSE,
            CLK_COR_SEQ_DROP => FALSE,
            CLK_COR_SEQ_LEN => 1,
            CLK_CORRECT_USE => TRUE,
            CLK_COR_8B10B_DE => FALSE,
            SH_CNT_MAX => 64,
            SH_INVALID_CNT_MAX => 16,
            ALIGN_COMMA_WORD => 1,
            DEC_MCOMMA_DETECT => TRUE,
            DEC_PCOMMA_DETECT => TRUE,
            DEC_VALID_COMMA_ONLY => TRUE,
            MCOMMA_DETECT => TRUE,
            PCOMMA_DETECT => TRUE,
            COMMA32 => FALSE,
            COMMA_10B_MASK => x"3FF",
            MCOMMA_32B_VALUE => x"000000F6",
            PCOMMA_32B_VALUE => x"F6F62828",
            RXUSRDIVISOR => 1,
            DCDR_FILTER => "010",
            SAMPLE_8X => FALSE,
            ENABLE_DCDR => FALSE,
            REPEATER => FALSE,
            RXBY_32 => TRUE,
            TXFDCAL_CLOCK_DIVIDE => "NONE",
            RXFDCAL_CLOCK_DIVIDE => "NONE",
            RXCYCLE_LIMIT_SEL => "00",
            RXVCO_CTRL_ENABLE => TRUE,
            RXFDET_LCK_SEL => "101",
            RXFDET_HYS_SEL => "110",
            RXFDET_LCK_CAL => "101",
            RXFDET_HYS_CAL => "110",
            RXLOOPCAL_WAIT => "00",
            RXSLOWDOWN_CAL => "00",
            RXVCODAC_INIT => "1010000000",
            CYCLE_LIMIT_SEL => "00",
            VCO_CTRL_ENABLE => TRUE,
            FDET_LCK_SEL => "101",
            FDET_HYS_SEL => "110",
            FDET_LCK_CAL => "101",
            FDET_HYS_CAL => "110",
            LOOPCAL_WAIT => "00",
            SLOWDOWN_CAL => "00",
            VCODAC_INIT => "1010000000",
            RXCRCCLOCKDOUBLE => FALSE,
            RXCRCINVERTGEN => FALSE,
            RXCRCSAMECLOCK => FALSE,
            RXCRCENABLE => FALSE,
            RXCRCINITVAL => x"00000000",
            TXCRCCLOCKDOUBLE => FALSE,
            TXCRCINVERTGEN => FALSE,
            TXCRCSAMECLOCK => FALSE,
            TXCRCINITVAL => x"00000000",
            TXCRCENABLE => FALSE,
            RX_CLOCK_DIVIDER => "00",
            TX_CLOCK_DIVIDER => "00",
            RXCLK0_FORCE_PMACLK => FALSE,
            TXCLK0_FORCE_PMACLK => FALSE,
            TXOUTCLK1_USE_SYNC => FALSE,
            RXRECCLK1_USE_SYNC => FALSE,
            RXPMACLKSEL => "REFCLK1",
            TXABPMACLKSEL => "REFCLK1",
            PMAVBGCTRL => "00000",
            BANDGAPSEL => FALSE,
            PMAIREFTRIM => "0111",
            IREFBIASMODE => "11",
            BIASRESSEL => TRUE,
            PMAVREFTRIM => "0111",
            VREFBIASMODE => "11",
            TXPHASESEL => FALSE,
            PMACLKENABLE => TRUE,
            PMACOREPWRENABLE => TRUE,
            PMA_BIT_SLIP => FALSE,
            RXASYNCDIVIDE => "11",
            RXCLKMODE => "110001",
            RXLB => FALSE,
            RXFETUNE => "01",
            RXRCPADJ => "011",
            RXRIBADJ => "11",
            RXAFEEQ => "000000000",
            RXCMADJ => "10",
            RXCDRLOS => "000000",
            RXDCCOUPLE => FALSE,
            RXLKADJ => "00000",
            RXDIGRESET => FALSE,
            RXFECONTROL2 => "000",
            RXCPTST => FALSE,
            RXPDDTST => FALSE,
            RXACTST => FALSE,
            RXAFETST => FALSE,
            RXFECONTROL1 => "00",
            RXLKAPD => FALSE,
            RXRSDPD => FALSE,
            RXRCPPD => FALSE,
            RXRPDPD => FALSE,
            RXAFEPD => FALSE,
            RXPD => FALSE,
            RXEQ => x"4000000000000000",
            TXOUTDIV2SEL => 1,
            TXPLLNDIVSEL => 8,
            TXLOOPFILT => "0111",
            TXCPSEL => TRUE,
            TXCTRL1 => x"200",
            TXAPD => FALSE,
            TXLVLSHFTPD => FALSE,
            TXPRE_PRDRV_DAC => "111",
            TXPRE_TAP_PD => TRUE,
            TXPRE_TAP_DAC => "00000",
            TXDIGPD => FALSE,
            TXCLKMODE => "1001",
            TXHIGHSIGNALEN => TRUE,
            TXAREFBIASSEL => FALSE,
            TXTERMTRIM => "1100",
            TXASYNCDIVIDE => "11",
            TXSLEWRATE => FALSE,
            TXPOST_PRDRV_DAC => "111",
            TXDAT_PRDRV_DAC => "111",
            TXPOST_TAP_PD => TRUE,
            TXPOST_TAP_DAC => "01110",
            TXDAT_TAP_DAC => "10110",
            TXPD => FALSE,
            RXOUTDIV2SEL => 1,
            RXPLLNDIVSEL => 8,
            RXLOOPFILT => "0111",
            RXDIGRX => FALSE,
            RXCPSEL => TRUE,
            RXCTRL1 => x"200",
            RXAPD => FALSE)
      port map (CHBONDI(4 downto 0)=>GND(4 downto 0),
                COMBUSIN(15 downto 0)=>COMBUSOUT(15 downto 0),
                DADDR(7 downto 0)=>DADDR_IN_BLK2(7 downto 0),
                DCLK=>DCLK_IN_BLK2,
                DEN=>DEN_IN_BLK2,
                DI(15 downto 0)=>DI_IN_BLK2(15 downto 0),
                DWE=>DWE_IN_BLK2,
                ENCHANSYNC=>GND1,
                ENMCOMMAALIGN=>GND1,
                ENPCOMMAALIGN=>GND1,
                GREFCLK=>GND1,
                LOOPBACK(1 downto 0)=>GND2(1 downto 0),
                POWERDOWN=>POWERDOWN_IN_BLK2,
                REFCLK1=>SYNCLK1OUT,
                REFCLK2=>SYNCLK2OUT,
                RXBLOCKSYNC64B66BUSE=>GND1,
                RXCLKSTABLE=>GND1,
                RXCOMMADETUSE=>GND1,
                RXCRCCLK=>GND1,
                RXCRCDATAVALID=>GND1,
                RXCRCDATAWIDTH(2 downto 0)=>GND7(2 downto 0),
                RXCRCIN(63 downto 0)=>GND6(63 downto 0),
                RXCRCINIT=>GND1,
                RXCRCINTCLK=>GND1,
                RXCRCPD=>GND1,
                RXCRCRESET=>GND1,
                RXDATAWIDTH(1 downto 0)=>GND2(1 downto 0),
                RXDEC8B10BUSE=>GND1,
                RXDEC64B66BUSE=>GND1,
                RXDESCRAM64B66BUSE=>GND1,
                RXIGNOREBTF=>GND1,
                RXINTDATAWIDTH(1 downto 0)=>GND2(1 downto 0),
                RXPMARESET=>GND1,
                RXPOLARITY=>GND1,
                RXRESET=>GND1,
                RXSLIDE=>GND1,
                RXSYNC=>GND1,
                RXUSRCLK=>RXUSRCLK_IN_BLK2,
                RXUSRCLK2=>RXUSRCLK2_IN_BLK2,
                RX1N=>GND1,
                RX1P=>GND1,
                TXBYPASS8B10B(7 downto 0)=>VCC(7 downto 0),
                TXCHARDISPMODE(7 downto 4)=>GND3(3 downto 0),
                TXCHARDISPMODE(3 downto 0)=>TXCHARDISPMODE_IN_BLK2(3 downto 0),
                TXCHARDISPVAL(7 downto 4)=>GND3(3 downto 0),
                TXCHARDISPVAL(3 downto 0)=>TXCHARDISPVAL_IN_BLK2(3 downto 0),
                TXCHARISK(7 downto 0)=>GND4(7 downto 0),
                TXCLKSTABLE=>TXCLKSTABLE_IN_BLK2,
                TXCRCCLK=>TXCRCCLK_IN_BLK2,
                TXCRCDATAVALID=>TXCRCDATAVALID_IN_BLK2,
                TXCRCDATAWIDTH(2 downto 0)=>TXCRCDATAWIDTH_IN_BLK2(2 downto 0),
                TXCRCIN(63 downto 0)=>TXCRCIN_IN_BLK2(63 downto 0),
                TXCRCINIT=>TXCRCINIT_IN_BLK2,
                TXCRCINTCLK=>TXCRCINTCLK_IN_BLK2,
                TXCRCPD=>TXCRCPD_IN_BLK2,
                TXCRCRESET=>TXCRCRESET_IN_BLK2,
                TXDATA(63 downto 32)=>GND5(31 downto 0),
                TXDATA(31 downto 0)=>TXDATA_IN_BLK2(31 downto 0),
                TXDATAWIDTH(1 downto 0)=>TXDATAWIDTH_IN_BLK2(1 downto 0),
                TXENC8B10BUSE=>GND1,
                TXENC64B66BUSE=>GND1,
                TXENOOB=>TXENOOB_IN_BLK2,
                TXGEARBOX64B66BUSE=>GND1,
                TXINHIBIT=>TXINHIBIT_IN_BLK2,
                TXINTDATAWIDTH(1 downto 0)=>TXINTDATAWIDTH_IN_BLK2(1 downto 0),
                TXPMARESET=>TXPMARESET_IN_BLK2,
                TXPOLARITY=>TXPOLARITY_IN_BLK2,
                TXRESET=>TXRESET_IN_BLK2,
                TXSCRAM64B66BUSE=>GND1,
                TXSYNC=>TXSYNC_IN_BLK2,
                TXUSRCLK=>TXUSRCLK_IN_BLK2,
                TXUSRCLK2=>TXUSRCLK2_IN_BLK2,
                CHBONDO=>open,
                COMBUSOUT(15 downto 0)=>COMBUSOUT_BLK2(15 downto 0),
                DO(15 downto 0)=>DO_OUT_BLK2(15 downto 0),
                DRDY=>DRDY_OUT_BLK2,
                RXBUFERR=>open,
                RXCALFAIL=>open,
                RXCHARISCOMMA=>open,
                RXCHARISK=>open,
                RXCOMMADET=>open,
                RXCRCOUT=>open,
                RXCYCLELIMIT=>open,
                RXDATA=>open,
                RXDISPERR=>open,
                RXLOCK=>open,
                RXLOSSOFSYNC=>open,
                RXMCLK=>open,
                RXNOTINTABLE=>open,
                RXPCSHCLKOUT=>open,
                RXREALIGN=>open,
                RXRECCLK1=>open,
                RXRECCLK2=>open,
                RXRUNDISP=>open,
                RXSIGDET=>open,
                RXSTATUS=>open,
                TXBUFERR=>TXBUFERR_OUT_BLK2,
                TXCALFAIL=>TXCALFAIL_OUT_BLK2,
                TXCRCOUT(31 downto 0)=>TXCRCOUT_OUT_BLK2(31 downto 0),
                TXCYCLELIMIT=>TXCYCLELIMIT_OUT_BLK2,
                TXKERR=>open,
                TXLOCK=>TXLOCK_OUT_BLK2,
                TXOUTCLK1=>TXOUTCLK1_OUT_BLK2,
                TXOUTCLK2=>TXOUTCLK2_OUT_BLK2,
                TXPCSHCLKOUT=>TXPCSHCLKOUT_OUT_BLK2,
                TXRUNDISP(7 downto 4)=>TXRUNDISP_float1(3 downto 0),
                TXRUNDISP(3 downto 0)=>TXRUNDISP_OUT_BLK2(3 downto 0),
                TX1N=>TX1N_OUT_BLK2,
                TX1P=>TX1P_OUT_BLK2);
   
end BEHAVIORAL;


