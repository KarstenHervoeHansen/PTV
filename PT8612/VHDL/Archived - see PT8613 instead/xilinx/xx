File BACKUP~1\RIOIMP\VHDL\ANC_PK~1.VHD:
-- Define a datatype for the UDW memory array
type udw_ram_type is array (UDW_MEM_SIZE - 1 downto 0) of video_type; 
File BACKUP~1\RIOIMP\VHDL\TEST_A~1.VHD:
-- called one_frame.txt is loaded into a memory array and used as the source 
            array (MAX_MEM - 1 downto 0) of video_type; 
shared variable memory :    mem_type;       -- Memory array holding test video
signal d:               video_type;         -- output of memory array
signal vid_in:          video_type;         -- modified output of memory array
type dly_bit_type       is array (LATENCY-1 downto 0) of std_ulogic;
type dly_vidstd_type    is array (LATENCY-1 downto 0) of vidstd_type;
type dly_video_type     is array (LATENCY-1 downto 0) of video_type;
type dly_hpos_type      is array (LATENCY-1 downto 0) of hpos_type;
type dly_vpos_type      is array (LATENCY-1 downto 0) of vpos_type;
signal i:                    integer;           -- index into memory array
    -- Read in one frame of NTSC video into memory array
                memory(words) := video_type(data(9 downto 0));  -- write word to the memory array
    -- This code generates the index into the memory array and the frame counter.
    -- maximum size of the memory array, it is reset to zero and the frame counter
    -- memory array and assign that value to d.
File BACKUP~1\RIOIMP\VHDL\TEST_A~2.VHD:
    type mem_type is array (MAX_MEM - 1 downto 0) of video_type;    
shared variable memory :    mem_type;       -- Memory array holding test video
signal d:               video_type;         -- output of memory array
type dly_video_type     is array (LATENCY-1 downto 0) of video_type;
signal i:               integer;            -- index into memory array
    -- Read in one frame of NTSC video into memory array
                memory(words) := video_type(data(9 downto 0));  -- write word to the memory array
    -- This code generates the index into the memory array and the frame counter.
    -- maximum size of the memory array, it is reset to zero and the frame counter
    -- memory array and assign that value to d.
File BACKUP~1\RIOIMP\VHDL\TEST_A~3.VHD:
-- into a memory array. This frame of video is fed into the anc_edh_processor 
    type mem_type is array (MAX_MEM - 1 downto 0) of video_type;    
shared variable memory :    mem_type;       -- Memory array holding test video
signal vid_in :         video_type;         -- output of memory array
type dly_video_type     is array (LATENCY-1 downto 0) of video_type;
signal i:               integer;            -- index into memory array
    -- Read in one frame of NTSC video into memory array
                memory(words) := video_type(data(9 downto 0));  -- write word to the memory array
    -- This code generates the index into the memory array and the frame counter.
    -- maximum size of the memory array, it is reset to zero and the frame counter
    -- memory array and assign that value to vid_in. 
File BACKUP~1\RIOIMP\VHDL\TEST_EDH.VHD:
-- frames. A data file called one_frame.txt is loaded into a memory array and 
        array (MAX_MEM - 1 downto 0) of video_type; 
shared variable memory :    mem_type;       -- Memory array holding test video
signal d:                   video_type;         -- output of memory array
signal vid_in:              video_type;         -- modified output of memory array
signal i:                    integer;                       -- index into memory array
    -- Read in one frame of NTSC video into memory array
                memory(words) := video_type(data(9 downto 0));  -- write word to the memory array
    -- This code generates the index into the memory array and the frame counter.
    -- maximum size of the memory array, it is reset to zero and the frame counter
    -- memory array and assign that value to d.
File BACKUP~1\RIOIMP\VHDL\TEST_V~1.VHD:
-- The vid_array type is used as a video FIFO.
type vid_array is array (MAX_VID_DELAY - 1 downto 0) of video;
signal vid_delay :      vid_array;                          -- video delay pipeline;
File BACKUP~1\SDIGEN\SDIGEN~1\THH\PWMFPGA.VHD:
  type FifoType is array (0 to FifoN-1) of std_logic_vector(FifoW-1 downto 0);
File BACKUP~4\CHROMA~1.VHD:
type delay_line is array (0 to 9) of std_logic_vector(11 downto 0);
File DELME~1\SDHD_M~1\CHROMA~1.VHD:
type delay_line is array (0 to 9) of std_logic_vector(11 downto 0);
File DELME~1\SDHD_M~1.11)\CHROMA~1.VHD:
type delay_line is array (0 to 9) of std_logic_vector(11 downto 0);
File HDSDGE~2\HDVB0_~1.VHD:
Error: Line too long (file may be binary) - search aborted
File RIOIMP\VHDL\ANC_PK~1.VHD:
-- Define a datatype for the UDW memory array
type udw_ram_type is array (UDW_MEM_SIZE - 1 downto 0) of video_type; 
File RIOIMP\VHDL\TEST_A~1.VHD:
-- called one_frame.txt is loaded into a memory array and used as the source 
            array (MAX_MEM - 1 downto 0) of video_type; 
shared variable memory :    mem_type;       -- Memory array holding test video
signal d:               video_type;         -- output of memory array
signal vid_in:          video_type;         -- modified output of memory array
type dly_bit_type       is array (LATENCY-1 downto 0) of std_ulogic;
type dly_vidstd_type    is array (LATENCY-1 downto 0) of vidstd_type;
type dly_video_type     is array (LATENCY-1 downto 0) of video_type;
type dly_hpos_type      is array (LATENCY-1 downto 0) of hpos_type;
type dly_vpos_type      is array (LATENCY-1 downto 0) of vpos_type;
signal i:                    integer;           -- index into memory array
    -- Read in one frame of NTSC video into memory array
                memory(words) := video_type(data(9 downto 0));  -- write word to the memory array
    -- This code generates the index into the memory array and the frame counter.
    -- maximum size of the memory array, it is reset to zero and the frame counter
    -- memory array and assign that value to d.
File RIOIMP\VHDL\TEST_A~2.VHD:
    type mem_type is array (MAX_MEM - 1 downto 0) of video_type;    
shared variable memory :    mem_type;       -- Memory array holding test video
signal d:               video_type;         -- output of memory array
type dly_video_type     is array (LATENCY-1 downto 0) of video_type;
signal i:               integer;            -- index into memory array
    -- Read in one frame of NTSC video into memory array
                memory(words) := video_type(data(9 downto 0));  -- write word to the memory array
    -- This code generates the index into the memory array and the frame counter.
    -- maximum size of the memory array, it is reset to zero and the frame counter
    -- memory array and assign that value to d.
File RIOIMP\VHDL\TEST_A~3.VHD:
-- into a memory array. This frame of video is fed into the anc_edh_processor 
    type mem_type is array (MAX_MEM - 1 downto 0) of video_type;    
shared variable memory :    mem_type;       -- Memory array holding test video
signal vid_in :         video_type;         -- output of memory array
type dly_video_type     is array (LATENCY-1 downto 0) of video_type;
signal i:               integer;            -- index into memory array
    -- Read in one frame of NTSC video into memory array
                memory(words) := video_type(data(9 downto 0));  -- write word to the memory array
    -- This code generates the index into the memory array and the frame counter.
    -- maximum size of the memory array, it is reset to zero and the frame counter
    -- memory array and assign that value to vid_in. 
File RIOIMP\VHDL\TEST_EDH.VHD:
-- frames. A data file called one_frame.txt is loaded into a memory array and 
        array (MAX_MEM - 1 downto 0) of video_type; 
shared variable memory :    mem_type;       -- Memory array holding test video
signal d:                   video_type;         -- output of memory array
signal vid_in:              video_type;         -- modified output of memory array
signal i:                    integer;                       -- index into memory array
    -- Read in one frame of NTSC video into memory array
                memory(words) := video_type(data(9 downto 0));  -- write word to the memory array
    -- This code generates the index into the memory array and the frame counter.
    -- maximum size of the memory array, it is reset to zero and the frame counter
    -- memory array and assign that value to d.
File RIOIMP\VHDL\TEST_V~1.VHD:
-- The vid_array type is used as a video FIFO.
type vid_array is array (MAX_VID_DELAY - 1 downto 0) of video;
signal vid_delay :      vid_array;                          -- video delay pipeline;
File SD0BDD~1\CHROMA~1.VHD:
type delay_line is array (0 to 9) of std_logic_vector(11 downto 0);
File SDHD_M~1\CHROMA~1.VHD:
type delay_line is array (0 to 9) of std_logic_vector(11 downto 0);
File SDHD_M~1.1)\CHROMA~1.VHD:
type delay_line is array (0 to 9) of std_logic_vector(11 downto 0);
File SDHD_M~2\CHROMA~1.VHD:
type delay_line is array (0 to 9) of std_logic_vector(11 downto 0);
File SDHD_M~4\CHROMA~1.VHD:
type delay_line is array (0 to 9) of std_logic_vector(11 downto 0);
File SDIGEN\SDIGEN~1\THH\PWMFPGA.VHD:
  type FifoType is array (0 to FifoN-1) of std_logic_vector(FifoW-1 downto 0);
File SPI_IN~1\SOURCE~1\SERIAL~1.VHD:
type channel_array is array(4 downto 1) of channel_settings;
signal settings: channel_array;
File SPI_IN~1\SOURCE~1\SPI_TEST.VHD:
type channel_array is array(4 downto 1) of channel_settings;
signal settings: channel_array;
File SPI_IN~1\SI.VHD:
type channel_array is array(4 downto 1) of channel_settings;
signal settings: channel_array;
File TEST_V~1\AUDIO_~1\BKUP\TOP.VHD:
type m_array is array(0 to 2) of std_logic_vector(11 downto 0);
signal counter_buffer : m_array;
File TEST_V~1\AUDIO_~1\SIMU\BKUP\TOP_BK1.VHD:
type m_array is array(0 to 2) of std_logic_vector(12 downto 0);
signal counter_buffer : m_array;
signal output_counter_buffer: m_array;
File TEST_V~1\AUDIO_~1\SIMU\BKUP\TOP_BK2.VHD:
type m_array is array(0 to 2) of std_logic_vector(12 downto 0);
signal counter_buffer : m_array;
signal output_counter_buffer: m_array;
File TEST_V~1\AUDIO_~1\SIMU\BKUP\TOP_BK3.VHD:
type m_array is array(0 to 2) of std_logic_vector(12 downto 0);
type m_array_4x4 is array(1 to 4, 1 to 4) of std_logic_vector(23 downto 0);
signal counter_buffer : m_array;
signal output_counter_buffer: m_array;
signal audio_data: m_array_4x4;      --audio_data[group][channel] : audio data channel 5 = audio_data[2][1]
File TEST_V~1\AUDIO_~1\SIMU\TOP.VHD:
type m_array is array(0 to 2) of std_logic_vector(12 downto 0);
type m_array_4x4 is array(1 to 4, 1 to 4) of std_logic_vector(23 downto 0);
signal counter_buffer : m_array;
signal output_counter_buffer: m_array;
--signal audio_data: m_array_4x4;      --audio_data[group][channel] : audio data channel 5 = audio_data[2][1]
File TEST_V~1\AUDIO_~1\TOP.VHD:
type m_array is array(0 to 2) of std_logic_vector(11 downto 0);
signal counter_buffer : m_array;
File TEST_V~1\HDSDGE~1\HDVB0_~1.VHD:
Error: Line too long (file may be binary) - search aborted
