--F1_result[0] is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|result[0]
--DSP Block Operation Mode: Simple Multiplier (18-bit)
F1_result[0] = F1L11;

--F1_result[1] is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|result[1]
F1_result[1] = F1L21;

--F1_result[2] is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|result[2]
F1_result[2] = F1L31;

--F1_result[3] is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|result[3]
F1_result[3] = F1L41;

--F1_result[4] is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|result[4]
F1_result[4] = F1L51;

--F1_result[5] is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|result[5]
F1_result[5] = F1L61;

--F1_result[6] is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|result[6]
F1_result[6] = F1L71;

--F1_result[7] is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|result[7]
F1_result[7] = F1L81;

--F1_result[8] is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|result[8]
F1_result[8] = F1L91;

--F1_result[9] is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|result[9]
F1_result[9] = F1L02;


--E1_result[0] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[0]
--DSP Block Operation Mode: Simple Multiplier (18-bit)
E1_result[0] = E1_mac_mult1;

--E1_result[1] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[1]
E1_result[1] = E1L2;

--E1_result[2] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[2]
E1_result[2] = E1L3;

--E1_result[3] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[3]
E1_result[3] = E1L4;

--E1_result[4] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[4]
E1_result[4] = E1L5;

--E1_result[5] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[5]
E1_result[5] = E1L6;

--E1_result[6] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[6]
E1_result[6] = E1L7;

--E1_result[7] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[7]
E1_result[7] = E1L8;

--E1_result[8] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[8]
E1_result[8] = E1L9;

--E1_result[9] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[9]
E1_result[9] = E1L01;

--E1_result[10] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[10]
E1_result[10] = E1L11;

--E1_result[11] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[11]
E1_result[11] = E1L21;

--E1_result[12] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[12]
E1_result[12] = E1L31;

--E1_result[13] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[13]
E1_result[13] = E1L41;

--E1_result[14] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[14]
E1_result[14] = E1L51;

--E1_result[15] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[15]
E1_result[15] = E1L61;

--E1_result[16] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[16]
E1_result[16] = E1L71;

--E1_result[17] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[17]
E1_result[17] = E1L81;

--E1_result[18] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[18]
E1_result[18] = E1L91;

--E1_result[19] is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|result[19]
E1_result[19] = E1L02;


--F1_mac_mult1 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1
--DSP Block Multiplier Base Width: 18-bits
F1_mac_mult1_a_data = DATA(op1_new[9], op1_new[8], op1_new[7], op1_new[6], op1_new[5], op1_new[4], op1_new[3], op1_new[2], op1_new[1], op1_new[0]);
F1_mac_mult1_a_rep = UNSIGNED(F1_mac_mult1_a_data);
F1_mac_mult1_b_data = DATA(op2[9], op2[8], op2[7], op2[6], op2[5], op2[4], op2[3], op2[2], op2[1], op2[0]);
F1_mac_mult1_b_rep = UNSIGNED(F1_mac_mult1_b_data);
F1_mac_mult1_result = F1_mac_mult1_a_rep * F1_mac_mult1_b_rep;
F1_mac_mult1 = F1_mac_mult1_result[0];

--F1L2 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT1
F1L2 = F1_mac_mult1_result[1];

--F1L3 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT2
F1L3 = F1_mac_mult1_result[2];

--F1L4 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT3
F1L4 = F1_mac_mult1_result[3];

--F1L5 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT4
F1L5 = F1_mac_mult1_result[4];

--F1L6 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT5
F1L6 = F1_mac_mult1_result[5];

--F1L7 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT6
F1L7 = F1_mac_mult1_result[6];

--F1L8 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT7
F1L8 = F1_mac_mult1_result[7];

--F1L9 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT8
F1L9 = F1_mac_mult1_result[8];

--F1L01 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT9
F1L01 = F1_mac_mult1_result[9];

--F1L11 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT10
F1L11 = F1_mac_mult1_result[10];

--F1L21 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT11
F1L21 = F1_mac_mult1_result[11];

--F1L31 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT12
F1L31 = F1_mac_mult1_result[12];

--F1L41 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT13
F1L41 = F1_mac_mult1_result[13];

--F1L51 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT14
F1L51 = F1_mac_mult1_result[14];

--F1L61 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT15
F1L61 = F1_mac_mult1_result[15];

--F1L71 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT16
F1L71 = F1_mac_mult1_result[16];

--F1L81 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT17
F1L81 = F1_mac_mult1_result[17];

--F1L91 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT18
F1L91 = F1_mac_mult1_result[18];

--F1L02 is mult10:u2|lpm_mult:lpm_mult_component|mult_b4s:auto_generated|mac_mult1~DATAOUT19
F1L02 = F1_mac_mult1_result[19];


--E1_mac_mult1 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1
--DSP Block Multiplier Base Width: 18-bits
E1_mac_mult1_a_data = DATA(op1_new[9], op1_new[8], op1_new[7], op1_new[6], op1_new[5], op1_new[4], op1_new[3], op1_new[2], op1_new[1], op1_new[0]);
E1_mac_mult1_a_rep = UNSIGNED(E1_mac_mult1_a_data);
E1_mac_mult1_b_data = DATA(op2[9], op2[8], op2[7], op2[6], op2[5], op2[4], op2[3], op2[2], op2[1], op2[0]);
E1_mac_mult1_b_rep = UNSIGNED(E1_mac_mult1_b_data);
E1_mac_mult1_result = E1_mac_mult1_a_rep * E1_mac_mult1_b_rep;
E1_mac_mult1 = E1_mac_mult1_result[0];

--E1L2 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT1
E1L2 = E1_mac_mult1_result[1];

--E1L3 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT2
E1L3 = E1_mac_mult1_result[2];

--E1L4 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT3
E1L4 = E1_mac_mult1_result[3];

--E1L5 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT4
E1L5 = E1_mac_mult1_result[4];

--E1L6 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT5
E1L6 = E1_mac_mult1_result[5];

--E1L7 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT6
E1L7 = E1_mac_mult1_result[6];

--E1L8 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT7
E1L8 = E1_mac_mult1_result[7];

--E1L9 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT8
E1L9 = E1_mac_mult1_result[8];

--E1L01 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT9
E1L01 = E1_mac_mult1_result[9];

--E1L11 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT10
E1L11 = E1_mac_mult1_result[10];

--E1L21 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT11
E1L21 = E1_mac_mult1_result[11];

--E1L31 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT12
E1L31 = E1_mac_mult1_result[12];

--E1L41 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT13
E1L41 = E1_mac_mult1_result[13];

--E1L51 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT14
E1L51 = E1_mac_mult1_result[14];

--E1L61 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT15
E1L61 = E1_mac_mult1_result[15];

--E1L71 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT16
E1L71 = E1_mac_mult1_result[16];

--E1L81 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT17
E1L81 = E1_mac_mult1_result[17];

--E1L91 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT18
E1L91 = E1_mac_mult1_result[18];

--E1L02 is mult:u1|lpm_mult:lpm_mult_component|mult_0ho:auto_generated|mac_mult1~DATAOUT19
E1L02 = E1_mac_mult1_result[19];


--op1_new[0] is op1_new[0]
op1_new[0]_D_input = op1[0];
op1_new[0] = DFFE(op1_new[0]_D_input, clk,  ,  ,  );


--op1_new[1] is op1_new[1]
op1_new[1]_D_input = op1[1];
op1_new[1] = DFFE(op1_new[1]_D_input, clk,  ,  ,  );


--op1_new[2] is op1_new[2]
op1_new[2]_D_input = op1[2];
op1_new[2] = DFFE(op1_new[2]_D_input, clk,  ,  ,  );


--op1_new[3] is op1_new[3]
op1_new[3]_D_input = op1[3];
op1_new[3] = DFFE(op1_new[3]_D_input, clk,  ,  ,  );


--op1_new[4] is op1_new[4]
op1_new[4]_D_input = op1[4];
op1_new[4] = DFFE(op1_new[4]_D_input, clk,  ,  ,  );


--op1_new[5] is op1_new[5]
op1_new[5]_D_input = op1[5];
op1_new[5] = DFFE(op1_new[5]_D_input, clk,  ,  ,  );


--op1_new[6] is op1_new[6]
op1_new[6]_D_input = op1[6];
op1_new[6] = DFFE(op1_new[6]_D_input, clk,  ,  ,  );


--op1_new[7] is op1_new[7]
op1_new[7]_D_input = op1[7];
op1_new[7] = DFFE(op1_new[7]_D_input, clk,  ,  ,  );


--op1_new[8] is op1_new[8]
op1_new[8]_D_input = op1[8];
op1_new[8] = DFFE(op1_new[8]_D_input, clk,  ,  ,  );


--op1_new[9] is op1_new[9]
op1_new[9]_D_input = op1[9];
op1_new[9] = DFFE(op1_new[9]_D_input, clk,  ,  ,  );


--op2[0] is op2[0]
--operation mode is input

op2[0] = INPUT();


--op2[1] is op2[1]
--operation mode is input

op2[1] = INPUT();


--op2[2] is op2[2]
--operation mode is input

op2[2] = INPUT();


--op2[3] is op2[3]
--operation mode is input

op2[3] = INPUT();


--op2[4] is op2[4]
--operation mode is input

op2[4] = INPUT();


--op2[5] is op2[5]
--operation mode is input

op2[5] = INPUT();


--op2[6] is op2[6]
--operation mode is input

op2[6] = INPUT();


--op2[7] is op2[7]
--operation mode is input

op2[7] = INPUT();


--op2[8] is op2[8]
--operation mode is input

op2[8] = INPUT();


--op2[9] is op2[9]
--operation mode is input

op2[9] = INPUT();


--op1[0] is op1[0]
--operation mode is input

op1[0] = INPUT();


--clk is clk
--operation mode is input

clk = INPUT();


--op1[1] is op1[1]
--operation mode is input

op1[1] = INPUT();


--op1[2] is op1[2]
--operation mode is input

op1[2] = INPUT();


--op1[3] is op1[3]
--operation mode is input

op1[3] = INPUT();


--op1[4] is op1[4]
--operation mode is input

op1[4] = INPUT();


--op1[5] is op1[5]
--operation mode is input

op1[5] = INPUT();


--op1[6] is op1[6]
--operation mode is input

op1[6] = INPUT();


--op1[7] is op1[7]
--operation mode is input

op1[7] = INPUT();


--op1[8] is op1[8]
--operation mode is input

op1[8] = INPUT();


--op1[9] is op1[9]
--operation mode is input

op1[9] = INPUT();


--res10[9] is res10[9]
--operation mode is output

res10[9] = OUTPUT(F1_result[9]);


--res10[8] is res10[8]
--operation mode is output

res10[8] = OUTPUT(F1_result[8]);


--res10[7] is res10[7]
--operation mode is output

res10[7] = OUTPUT(F1_result[7]);


--res10[6] is res10[6]
--operation mode is output

res10[6] = OUTPUT(F1_result[6]);


--res10[5] is res10[5]
--operation mode is output

res10[5] = OUTPUT(F1_result[5]);


--res10[4] is res10[4]
--operation mode is output

res10[4] = OUTPUT(F1_result[4]);


--res10[3] is res10[3]
--operation mode is output

res10[3] = OUTPUT(F1_result[3]);


--res10[2] is res10[2]
--operation mode is output

res10[2] = OUTPUT(F1_result[2]);


--res10[1] is res10[1]
--operation mode is output

res10[1] = OUTPUT(F1_result[1]);


--res10[0] is res10[0]
--operation mode is output

res10[0] = OUTPUT(F1_result[0]);


--res[19] is res[19]
--operation mode is output

res[19] = OUTPUT(E1_result[19]);


--res[18] is res[18]
--operation mode is output

res[18] = OUTPUT(E1_result[18]);


--res[17] is res[17]
--operation mode is output

res[17] = OUTPUT(E1_result[17]);


--res[16] is res[16]
--operation mode is output

res[16] = OUTPUT(E1_result[16]);


--res[15] is res[15]
--operation mode is output

res[15] = OUTPUT(E1_result[15]);


--res[14] is res[14]
--operation mode is output

res[14] = OUTPUT(E1_result[14]);


--res[13] is res[13]
--operation mode is output

res[13] = OUTPUT(E1_result[13]);


--res[12] is res[12]
--operation mode is output

res[12] = OUTPUT(E1_result[12]);


--res[11] is res[11]
--operation mode is output

res[11] = OUTPUT(E1_result[11]);


--res[10] is res[10]
--operation mode is output

res[10] = OUTPUT(E1_result[10]);


--res[9] is res[9]
--operation mode is output

res[9] = OUTPUT(E1_result[9]);


--res[8] is res[8]
--operation mode is output

res[8] = OUTPUT(E1_result[8]);


--res[7] is res[7]
--operation mode is output

res[7] = OUTPUT(E1_result[7]);


--res[6] is res[6]
--operation mode is output

res[6] = OUTPUT(E1_result[6]);


--res[5] is res[5]
--operation mode is output

res[5] = OUTPUT(E1_result[5]);


--res[4] is res[4]
--operation mode is output

res[4] = OUTPUT(E1_result[4]);


--res[3] is res[3]
--operation mode is output

res[3] = OUTPUT(E1_result[3]);


--res[2] is res[2]
--operation mode is output

res[2] = OUTPUT(E1_result[2]);


--res[1] is res[1]
--operation mode is output

res[1] = OUTPUT(E1_result[1]);


--res[0] is res[0]
--operation mode is output

res[0] = OUTPUT(E1_result[0]);


