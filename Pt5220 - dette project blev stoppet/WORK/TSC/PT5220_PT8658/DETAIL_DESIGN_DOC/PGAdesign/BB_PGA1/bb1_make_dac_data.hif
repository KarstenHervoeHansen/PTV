HIF003
--
-- Copyright (C) 1988-1998 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	bb1_play_timecode.vhd
	{
		bb1_play_timecode [] [U1147235.DLS,U7449008.DLS,U9587408.DLS]
		{
			5 [] [];
		}
	}
	bb1_play_line7.vhd
	{
		bb1_play_line7 [] [U9587408.DLS,U7449008.DLS,U1147235.DLS]
		{
			4 [] [];
		}
	}
	bb1_play_pedistal.vhd
	{
		bb1_play_pedistal [] [U1147235.DLS,U7449008.DLS,U9587408.DLS]
		{
			3 [] [];
		}
	}
	bb1_play_sync.vhd
	{
		bb1_play_sync [] [U9587408.DLS,U7449008.DLS,U1147235.DLS]
		{
			2 [] [];
		}
	}
	bb1_play_burst.vhd
	{
		bb1_play_burst [] [U9587408.DLS,U7449008.DLS,U1147235.DLS]
		{
			1 [] [];
		}
	}
	lpm_add_sub.tdf
	{
		lpm_add_sub [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY,STYLE] [aglobal.inc,altshift.inc,bypassff.inc,look_add.inc,addcore.inc,lpm_add_sub.inc]
		{
			6 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=5,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX6000,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,CIN,RESULT0,RESULT1,RESULT2,RESULT3,RESULT4];
			10 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=13,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX6000,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAA5,DATAA6,DATAA7,DATAA8,DATAA9,DATAA10,DATAA11,DATAA12,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,DATAB5,DATAB6,DATAB7,DATAB8,DATAB9,DATAB10,DATAB11,DATAB12,CIN,RESULT0,RESULT1,RESULT2,RESULT3,RESULT4,RESULT5,RESULT6,RESULT7,RESULT8,RESULT9,RESULT10,RESULT11,RESULT12];
		}
	}
	addcore.tdf
	{
		addcore [USE_LPM_FOR_AHDL_OPERATORS,width,CONSTANT_CIN,CARRY_CHAIN,CARRY_CHAIN_LENGTH,DEVICE_FAMILY] [aglobal.inc,addcore.inc]
		{
			7 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=5,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX6000] [cin,datab0,datab1,datab2,datab3,datab4,dataa0,dataa1,dataa2,dataa3,dataa4,result0,result1,result2,result3,result4];
			11 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=13,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX6000] [cin,datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,datab8,datab9,datab10,datab11,datab12,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,dataa8,dataa9,dataa10,dataa11,dataa12,result0,result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12];
		}
	}
	altshift.tdf
	{
		altshift [USE_LPM_FOR_AHDL_OPERATORS,WIDTH=4,DEPTH=0] []
		{
			8 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=5,DEPTH=0] [data0,data1,data2,data3,data4,result0,result1,result2,result3,result4];
			9 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=1,DEPTH=0] [data0,result0];
			12 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=13,DEPTH=0] [data0,data1,data2,data3,data4,data5,data6,data7,data8,data9,data10,data11,data12,result0,result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12];
		}
	}
	bb1_make_dac_data.gdf
	{
		bb1_make_dac_data [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	bb1_make_dac_data::(0,0):(0): bb1_make_dac_data.gdf
	{
		bb1_play_line7::(0,0):(4): bb1_play_line7.vhd;
		bb1_play_sync::(0,0):(32): bb1_play_sync.vhd
		{
			lpm_add_sub:6:(64,33):(255): lpm_add_sub.tdf
			{
				altshift:9:(225,2):(92,oflow_ext_latency_ffs): altshift.tdf;
				altshift:9:(223,2):(85,carry_ext_latency_ffs): altshift.tdf;
				altshift:8:(221,2):(70,result_ext_latency_ffs): altshift.tdf;
				addcore:7:(211,4):(48,adder): addcore.tdf;
			}
			lpm_add_sub:6:(53,33):(194): lpm_add_sub.tdf
			{
				altshift:9:(225,2):(92,oflow_ext_latency_ffs): altshift.tdf;
				altshift:9:(223,2):(85,carry_ext_latency_ffs): altshift.tdf;
				altshift:8:(221,2):(70,result_ext_latency_ffs): altshift.tdf;
				addcore:7:(211,4):(48,adder): addcore.tdf;
			}
		}
		bb1_play_pedistal::(0,0):(35): bb1_play_pedistal.vhd;
		bb1_play_burst::(0,0):(36): bb1_play_burst.vhd
		{
			lpm_add_sub:10:(54,41):(292): lpm_add_sub.tdf
			{
				altshift:9:(225,2):(156,oflow_ext_latency_ffs): altshift.tdf;
				altshift:9:(223,2):(149,carry_ext_latency_ffs): altshift.tdf;
				altshift:12:(221,2):(118,result_ext_latency_ffs): altshift.tdf;
				addcore:11:(211,4):(72,adder): addcore.tdf;
			}
		}
	}
}
