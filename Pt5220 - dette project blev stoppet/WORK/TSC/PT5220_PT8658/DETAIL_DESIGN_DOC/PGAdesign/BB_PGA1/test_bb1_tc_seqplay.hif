HIF003
--
-- Copyright (C) 1988-1998 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	altshift.tdf
	{
		altshift [USE_LPM_FOR_AHDL_OPERATORS,WIDTH=4,DEPTH=0] []
		{
			10 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=9,DEPTH=0] [result8,result7,result6,result5,result4,result3,result2,result1,result0,data8,data7,data6,data5,data4,data3,data2,data1,data0];
			7 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=1,DEPTH=0] [result0,data0];
			6 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=5,DEPTH=0] [result4,result3,result2,result1,result0,data4,data3,data2,data1,data0];
		}
	}
	addcore.tdf
	{
		addcore [USE_LPM_FOR_AHDL_OPERATORS,width,CONSTANT_CIN,CARRY_CHAIN,CARRY_CHAIN_LENGTH,DEVICE_FAMILY] [aglobal.inc,addcore.inc]
		{
			9 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=9,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX6000] [result8,result7,result6,result5,result4,result3,result2,result1,result0,dataa8,dataa7,dataa6,dataa5,dataa4,dataa3,dataa2,dataa1,dataa0,datab8,datab7,datab6,datab5,datab4,datab3,datab2,datab1,datab0,cin];
			5 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=5,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX6000] [result4,result3,result2,result1,result0,dataa4,dataa3,dataa2,dataa1,dataa0,datab4,datab3,datab2,datab1,datab0,cin];
		}
	}
	lpm_add_sub.tdf
	{
		lpm_add_sub [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY,STYLE] [aglobal.inc,altshift.inc,bypassff.inc,look_add.inc,addcore.inc,lpm_add_sub.inc]
		{
			8 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=9,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX6000,STYLE=NORMAL] [RESULT8,RESULT7,RESULT6,RESULT5,RESULT4,RESULT3,RESULT2,RESULT1,RESULT0,CIN,DATAB8,DATAB7,DATAB6,DATAB5,DATAB4,DATAB3,DATAB2,DATAB1,DATAB0,DATAA8,DATAA7,DATAA6,DATAA5,DATAA4,DATAA3,DATAA2,DATAA1,DATAA0];
			4 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=5,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX6000,STYLE=NORMAL] [RESULT4,RESULT3,RESULT2,RESULT1,RESULT0,CIN,DATAB4,DATAB3,DATAB2,DATAB1,DATAB0,DATAA4,DATAA3,DATAA2,DATAA1,DATAA0];
		}
	}
	bb1_play_timecode.vhd
	{
		bb1_play_timecode [] [U1147235.DLS,U7449008.DLS,U9587408.DLS]
		{
			3 [] [];
		}
	}
	bb1_tc_sequenze.vhd
	{
		bb1_tc_sequenze [] [U1147235.DLS,U7449008.DLS,U9587408.DLS]
		{
			1 [] [];
		}
	}
	test_bb1_tc_seqplay.gdf
	{
		test_bb1_tc_seqplay [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	test_bb1_tc_seqplay::(0,0):(0): test_bb1_tc_seqplay.gdf
	{
		bb1_play_timecode::(0,0):(18): bb1_play_timecode.vhd
		{
			lpm_add_sub:4:(76,41):(282): lpm_add_sub.tdf
			{
				altshift:7:(225,2):(92,oflow_ext_latency_ffs): altshift.tdf;
				altshift:7:(223,2):(85,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(221,2):(70,result_ext_latency_ffs): altshift.tdf;
				addcore:5:(211,4):(48,adder): addcore.tdf;
			}
			lpm_add_sub:4:(68,41):(241): lpm_add_sub.tdf
			{
				altshift:7:(225,2):(92,oflow_ext_latency_ffs): altshift.tdf;
				altshift:7:(223,2):(85,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(221,2):(70,result_ext_latency_ffs): altshift.tdf;
				addcore:5:(211,4):(48,adder): addcore.tdf;
			}
		}
		bb1_tc_sequenze::(0,0):(16): bb1_tc_sequenze.vhd
		{
			lpm_add_sub:8:(122,41):(861): lpm_add_sub.tdf
			{
				altshift:7:(225,2):(124,oflow_ext_latency_ffs): altshift.tdf;
				altshift:7:(223,2):(117,carry_ext_latency_ffs): altshift.tdf;
				altshift:10:(221,2):(94,result_ext_latency_ffs): altshift.tdf;
				addcore:9:(211,4):(60,adder): addcore.tdf;
			}
			lpm_add_sub:8:(120,41):(835): lpm_add_sub.tdf
			{
				altshift:7:(225,2):(124,oflow_ext_latency_ffs): altshift.tdf;
				altshift:7:(223,2):(117,carry_ext_latency_ffs): altshift.tdf;
				altshift:10:(221,2):(94,result_ext_latency_ffs): altshift.tdf;
				addcore:9:(211,4):(60,adder): addcore.tdf;
			}
			lpm_add_sub:4:(114,33):(792): lpm_add_sub.tdf
			{
				altshift:7:(225,2):(92,oflow_ext_latency_ffs): altshift.tdf;
				altshift:7:(223,2):(85,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(221,2):(70,result_ext_latency_ffs): altshift.tdf;
				addcore:5:(211,4):(48,adder): addcore.tdf;
			}
			lpm_add_sub:8:(107,41):(702): lpm_add_sub.tdf
			{
				altshift:7:(225,2):(124,oflow_ext_latency_ffs): altshift.tdf;
				altshift:7:(223,2):(117,carry_ext_latency_ffs): altshift.tdf;
				altshift:10:(221,2):(94,result_ext_latency_ffs): altshift.tdf;
				addcore:9:(211,4):(60,adder): addcore.tdf;
			}
			lpm_add_sub:8:(105,41):(676): lpm_add_sub.tdf
			{
				altshift:7:(225,2):(124,oflow_ext_latency_ffs): altshift.tdf;
				altshift:7:(223,2):(117,carry_ext_latency_ffs): altshift.tdf;
				altshift:10:(221,2):(94,result_ext_latency_ffs): altshift.tdf;
				addcore:9:(211,4):(60,adder): addcore.tdf;
			}
			lpm_add_sub:4:(99,33):(633): lpm_add_sub.tdf
			{
				altshift:7:(225,2):(92,oflow_ext_latency_ffs): altshift.tdf;
				altshift:7:(223,2):(85,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(221,2):(70,result_ext_latency_ffs): altshift.tdf;
				addcore:5:(211,4):(48,adder): addcore.tdf;
			}
			lpm_add_sub:4:(95,33):(603): lpm_add_sub.tdf
			{
				altshift:7:(225,2):(92,oflow_ext_latency_ffs): altshift.tdf;
				altshift:7:(223,2):(85,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(221,2):(70,result_ext_latency_ffs): altshift.tdf;
				addcore:5:(211,4):(48,adder): addcore.tdf;
			}
			lpm_add_sub:4:(80,33):(572): lpm_add_sub.tdf
			{
				altshift:7:(225,2):(92,oflow_ext_latency_ffs): altshift.tdf;
				altshift:7:(223,2):(85,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(221,2):(70,result_ext_latency_ffs): altshift.tdf;
				addcore:5:(211,4):(48,adder): addcore.tdf;
			}
			lpm_add_sub:4:(70,33):(334): lpm_add_sub.tdf
			{
				altshift:7:(225,2):(92,oflow_ext_latency_ffs): altshift.tdf;
				altshift:7:(223,2):(85,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(221,2):(70,result_ext_latency_ffs): altshift.tdf;
				addcore:5:(211,4):(48,adder): addcore.tdf;
			}
		}
	}
}
