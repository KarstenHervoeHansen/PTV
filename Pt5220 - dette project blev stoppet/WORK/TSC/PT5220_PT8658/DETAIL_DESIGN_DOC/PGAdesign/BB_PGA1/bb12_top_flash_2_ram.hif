HIF003
--
-- Copyright (C) 1988-1998 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	tribuf.gdf
	{
		tribuf [] []
		{
			1 [] [];
		}
	}
	lpm_add_sub.tdf
	{
		lpm_add_sub [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY,STYLE] [aglobal.inc,altshift.inc,bypassff.inc,look_add.inc,addcore.inc,lpm_add_sub.inc]
		{
			3 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=8,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX6000,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAA5,DATAA6,DATAA7,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,DATAB5,DATAB6,DATAB7,CIN,RESULT0,RESULT1,RESULT2,RESULT3,RESULT4,RESULT5,RESULT6,RESULT7];
			8 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=9,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX6000,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAA5,DATAA6,DATAA7,DATAA8,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,DATAB5,DATAB6,DATAB7,DATAB8,CIN,RESULT0,RESULT1,RESULT2,RESULT3,RESULT4,RESULT5,RESULT6,RESULT7,RESULT8];
			12 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=7,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX6000,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAA5,DATAA6,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,DATAB5,DATAB6,CIN,RESULT0,RESULT1,RESULT2,RESULT3,RESULT4,RESULT5,RESULT6];
		}
	}
	addcore.tdf
	{
		addcore [USE_LPM_FOR_AHDL_OPERATORS,width,CONSTANT_CIN,CARRY_CHAIN,CARRY_CHAIN_LENGTH,DEVICE_FAMILY] [aglobal.inc,addcore.inc]
		{
			4 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=8,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX6000] [cin,datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,result0,result1,result2,result3,result4,result5,result6,result7];
			9 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=9,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX6000] [cin,datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,datab8,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,dataa8,result0,result1,result2,result3,result4,result5,result6,result7,result8];
			13 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=7,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX6000] [cin,datab0,datab1,datab2,datab3,datab4,datab5,datab6,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,result0,result1,result2,result3,result4,result5,result6];
		}
	}
	altshift.tdf
	{
		altshift [USE_LPM_FOR_AHDL_OPERATORS,WIDTH=4,DEPTH=0] []
		{
			5 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=8,DEPTH=0] [data0,data1,data2,data3,data4,data5,data6,data7,result0,result1,result2,result3,result4,result5,result6,result7];
			6 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=1,DEPTH=0] [data0,result0];
			10 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=9,DEPTH=0] [data0,data1,data2,data3,data4,data5,data6,data7,data8,result0,result1,result2,result3,result4,result5,result6,result7,result8];
			14 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=7,DEPTH=0] [data0,data1,data2,data3,data4,data5,data6,result0,result1,result2,result3,result4,result5,result6];
		}
	}
}
TREE
{
	bb12_top_flash_2_ram::(0,0):(0): bb12_top_flash_2_ram.gdf
	{
		bb12_flash_burst_ram_on::(0,0):(3): bb12_flash_burst_ram_on.vhd
		{
			lpm_add_sub:8:(42,33):(175): lpm_add_sub.tdf
			{
				addcore:9:(211,4):(60,adder): addcore.tdf;
				altshift:10:(221,2):(94,result_ext_latency_ffs): altshift.tdf;
				altshift:6:(223,2):(117,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(225,2):(124,oflow_ext_latency_ffs): altshift.tdf;
			}
		}
		tribuf::(0,0):(56): tribuf.gdf;
		tribuf::(0,0):(57): tribuf.gdf;
		bb12_make_burststop:11:(0,0):(4): bb12_make_burststop.vhd
		{
			lpm_add_sub:12:(46,33):(134): lpm_add_sub.tdf
			{
				addcore:13:(211,4):(54,adder): addcore.tdf;
				altshift:14:(221,2):(82,result_ext_latency_ffs): altshift.tdf;
				altshift:6:(223,2):(101,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(225,2):(108,oflow_ext_latency_ffs): altshift.tdf;
			}
		}
		bb12_load_flash_2_ram:2:(0,0):(2): bb12_load_flash_2_ram.vhd
		{
			lpm_add_sub:3:(56,33):(172): lpm_add_sub.tdf
			{
				addcore:4:(211,4):(57,adder): addcore.tdf;
				altshift:5:(221,2):(88,result_ext_latency_ffs): altshift.tdf;
				altshift:6:(223,2):(109,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(225,2):(116,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:3:(69,33):(263): lpm_add_sub.tdf
			{
				addcore:4:(211,4):(57,adder): addcore.tdf;
				altshift:5:(221,2):(88,result_ext_latency_ffs): altshift.tdf;
				altshift:6:(223,2):(109,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(225,2):(116,oflow_ext_latency_ffs): altshift.tdf;
			}
		}
		tribuf:1:(0,0):(27): tribuf.gdf;
		tribuf:1:(0,0):(28): tribuf.gdf;
		tribuf:1:(0,0):(29): tribuf.gdf;
		tribuf:1:(0,0):(30): tribuf.gdf;
		tribuf:1:(0,0):(31): tribuf.gdf;
		tribuf:1:(0,0):(32): tribuf.gdf;
		tribuf:1:(0,0):(33): tribuf.gdf;
		tribuf:1:(0,0):(10): tribuf.gdf;
		tribuf:1:(0,0):(11): tribuf.gdf;
		tribuf:1:(0,0):(12): tribuf.gdf;
		tribuf:1:(0,0):(13): tribuf.gdf;
		tribuf:1:(0,0):(14): tribuf.gdf;
		tribuf:1:(0,0):(15): tribuf.gdf;
		tribuf:1:(0,0):(16): tribuf.gdf;
		tribuf:1:(0,0):(1): tribuf.gdf;
		tribuf:1:(0,0):(5): tribuf.gdf;
		tribuf:1:(0,0):(6): tribuf.gdf;
		tribuf:1:(0,0):(7): tribuf.gdf;
		tribuf:1:(0,0):(8): tribuf.gdf;
		tribuf:1:(0,0):(53): tribuf.gdf;
		tribuf:1:(0,0):(17): tribuf.gdf;
		tribuf:1:(0,0):(18): tribuf.gdf;
		tribuf:1:(0,0):(19): tribuf.gdf;
		tribuf:1:(0,0):(20): tribuf.gdf;
		tribuf:1:(0,0):(21): tribuf.gdf;
		tribuf:1:(0,0):(23): tribuf.gdf;
		tribuf:1:(0,0):(24): tribuf.gdf;
		tribuf:1:(0,0):(25): tribuf.gdf;
		tribuf:1:(0,0):(26): tribuf.gdf;
		tribuf:1:(0,0):(37): tribuf.gdf;
		tribuf:1:(0,0):(38): tribuf.gdf;
		tribuf:1:(0,0):(39): tribuf.gdf;
		tribuf:1:(0,0):(40): tribuf.gdf;
		tribuf:1:(0,0):(35): tribuf.gdf;
	}
}
