HIF003
--
-- Copyright (C) 1988-1998 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	lpm_dff.tdf
	{
		lpm_dff [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_AVALUE=0,LPM_SVALUE=0,DEVICE_FAMILY] [aglobal.inc,dffeea.inc,lpm_constant.inc]
		{
			10 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=8,LPM_AVALUE=0,LPM_SVALUE=0,DEVICE_FAMILY=FLEX6000] [enable,clock,data7,data6,data5,data4,data3,data2,data1,data0,q7,q6,q5,q4,q3,q2,q1,q0];
		}
	}
	lpm_bustri.tdf
	{
		lpm_bustri [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH] []
		{
			17 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=8] [result7,result6,result5,result4,result3,result2,result1,result0,enabletr];
			19 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=8] [data7,data6,data5,data4,data3,data2,data1,data0,tridata7,tridata6,tridata5,tridata4,tridata3,tridata2,tridata1,tridata0,enabledt];
		}
	}
	lpm_mux.tdf
	{
		lpm_mux [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_SIZE,LPM_WIDTHS,LPM_PIPELINE=0] [altshift.inc,bypassff.inc,muxlut.inc]
		{
			11 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=8,LPM_SIZE=8,LPM_WIDTHS=3,LPM_PIPELINE=0] [sel2,sel1,sel0,data7_7,data7_6,data7_5,data7_4,data7_3,data7_2,data7_1,data7_0,data6_7,data6_6,data6_5,data6_4,data6_3,data6_2,data6_1,data6_0,data5_7,data5_6,data5_5,data5_4,data5_3,data5_2,data5_1,data5_0,data4_7,data4_6,data4_5,data4_4,data4_3,data4_2,data4_1,data4_0,data3_7,data3_6,data3_5,data3_4,data3_3,data3_2,data3_1,data3_0,data2_7,data2_6,data2_5,data2_4,data2_3,data2_2,data2_1,data2_0,data1_7,data1_6,data1_5,data1_4,data1_3,data1_2,data1_1,data1_0,data0_7,data0_6,data0_5,data0_4,data0_3,data0_2,data0_1,data0_0];
			18 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=8,LPM_SIZE=8,LPM_WIDTHS=3,LPM_PIPELINE=0] [result7,result6,result5,result4,result3,result2,result1,result0,sel2,sel1,sel0,data7_7,data7_6,data7_5,data7_4,data7_3,data7_2,data7_1,data7_0,data6_7,data6_6,data6_5,data6_4,data6_3,data6_2,data6_1,data6_0,data5_7,data5_6,data5_5,data5_4,data5_3,data5_2,data5_1,data5_0,data4_7,data4_6,data4_5,data4_4,data4_3,data4_2,data4_1,data4_0,data3_7,data3_6,data3_5,data3_4,data3_3,data3_2,data3_1,data3_0,data2_7,data2_6,data2_5,data2_4,data2_3,data2_2,data2_1,data2_0,data1_7,data1_6,data1_5,data1_4,data1_3,data1_2,data1_1,data1_0,data0_7,data0_6,data0_5,data0_4,data0_3,data0_2,data0_1,data0_0];
		}
	}
	lpm_counter.tdf
	{
		lpm_counter [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_DIRECTION=DEFAULT,LPM_MODULUS=0,LPM_AVALUE=0,LPM_SVALUE=0,DEVICE_FAMILY,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,NOT_GATE_PUSH_BACK=OFF,CARRY_CNT_EN=SMART,LABWIDE_SCLR=ON] [aglobal.inc,dffeea.inc,lpm_counter.inc,lpm_compare.inc,cmpconst.inc,lpm_add_sub.inc,lpm_decode.inc,lpm_constant.inc]
		{
			1 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=4,LPM_DIRECTION=DEFAULT,LPM_MODULUS=0,LPM_AVALUE=0,LPM_SVALUE=0,DEVICE_FAMILY=FLEX6000,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,NOT_GATE_PUSH_BACK=ON,CARRY_CNT_EN=SMART,LABWIDE_SCLR=ON] [cnt_en,clock,clk_en,sclr,eq9,eq8,eq7,eq6,eq5,eq4,eq3,eq2,eq1];
			20 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=4,LPM_DIRECTION=DEFAULT,LPM_MODULUS=0,LPM_AVALUE=0,LPM_SVALUE=0,DEVICE_FAMILY=FLEX6000,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,NOT_GATE_PUSH_BACK=ON,CARRY_CNT_EN=SMART,LABWIDE_SCLR=ON] [cnt_en,clock,clk_en,sclr,eq15,eq14,eq13,eq12,eq11,eq10,eq9,eq8,eq7,eq6,eq5,eq4,eq3,eq2,eq1,eq0];
			21 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=4,LPM_DIRECTION=DEFAULT,LPM_MODULUS=0,LPM_AVALUE=0,LPM_SVALUE=0,DEVICE_FAMILY=FLEX6000,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,NOT_GATE_PUSH_BACK=ON,CARRY_CNT_EN=SMART,LABWIDE_SCLR=ON] [cnt_en,clock,sclr,eq15,eq14,eq13,eq12,eq11,eq10,eq9,eq8,eq7,eq6,eq5,eq4,eq3,eq2,eq1,eq0];
		}
	}
	lpm_add_sub.tdf
	{
		lpm_add_sub [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY,STYLE] [aglobal.inc,altshift.inc,bypassff.inc,look_add.inc,addcore.inc,lpm_add_sub.inc]
		{
			2 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=4,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=ADD,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX6000,STYLE=NORMAL] [datab0,datab1,datab2,datab3,dataa0,dataa1,dataa2,dataa3,result0,result1,result2,result3];
		}
	}
	addcore.tdf
	{
		addcore [USE_LPM_FOR_AHDL_OPERATORS,width,CONSTANT_CIN=0,CARRY_CHAIN,CARRY_CHAIN_LENGTH,DEVICE_FAMILY] [aglobal.inc,addcore.inc]
		{
			3 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=4,CONSTANT_CIN=1,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY=FLEX6000] [cin,datab0,datab1,datab2,datab3,dataa0,dataa1,dataa2,dataa3,cout,result0,result1,result2,result3];
		}
	}
	altshift.tdf
	{
		altshift [USE_LPM_FOR_AHDL_OPERATORS,WIDTH=4,DEPTH=0] []
		{
			4 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=4,DEPTH=0] [data0,data1,data2,data3,result0,result1,result2,result3];
			5 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=1,DEPTH=0] [data0,result0];
			8 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=16,DEPTH=0] [data0,data1,data2,data3,data4,data5,data6,data7,data8,data9,data10,data11,data12,data13,data14,data15,result0,result1,result2,result3,result4,result5,result6,result7,result8,result9,result10,result11,result12,result13,result14,result15];
			13 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=8,DEPTH=0] [data0,data1,data2,data3,data4,data5,data6,data7,result0,result1,result2,result3,result4,result5,result6,result7];
		}
	}
	lpm_constant.tdf
	{
		lpm_constant [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_CVALUE] []
		{
			6 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=4,LPM_CVALUE=0] [];
		}
	}
	lpm_decode.tdf
	{
		lpm_decode [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_DECODES,LPM_PIPELINE=0,CASCADE_CHAIN,DEVICE_FAMILY] [aglobal.inc,lpm_constant.inc,lpm_compare.inc,altshift.inc,declut.inc]
		{
			7 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=4,LPM_DECODES=16,LPM_PIPELINE=0,CASCADE_CHAIN=IGNORE,DEVICE_FAMILY=FLEX6000] [data0,data1,data2,data3,eq0,eq1,eq2,eq3,eq4,eq5,eq6,eq7,eq8,eq9,eq10,eq11,eq12,eq13,eq14,eq15];
		}
	}
	declut.tdf
	{
		declut [USE_LPM_FOR_AHDL_OPERATORS,width,STAGE,TOT_LEVELS,LATENCY] [bypassff.inc,declut.inc]
		{
			9 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=3,STAGE=0,TOT_LEVELS=1,LATENCY=0] [enable,data0,data1,data2,eq0,eq1,eq2,eq3,eq4,eq5,eq6,eq7];
		}
	}
	bypassff.tdf
	{
		bypassff [USE_LPM_FOR_AHDL_OPERATORS,WIDTH=8] []
		{
			12 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=3] [d0,d1,d2,q2];
		}
	}
	muxlut.tdf
	{
		muxlut [USE_LPM_FOR_AHDL_OPERATORS,SIZE,LEVEL,TOT_LEVELS,LATENCY,REM_LATENCY,LOCAL=0,CASCADE_CHAIN] [altshift.inc,muxlut.inc]
		{
			14 [USE_LPM_FOR_AHDL_OPERATORS=OFF,SIZE=8,LEVEL=1,TOT_LEVELS=2,LATENCY=0,LOCAL=0,CASCADE_CHAIN=IGNORE] [select0,select1,select2,data0,data1,data2,data3,data4,data5,data6,data7,result];
			15 [USE_LPM_FOR_AHDL_OPERATORS=OFF,SIZE=4,LEVEL=0,TOT_LEVELS=2,LATENCY=0,LOCAL=0,CASCADE_CHAIN=IGNORE] [select0,select1,data0,data1,data2,data3,result];
			16 [USE_LPM_FOR_AHDL_OPERATORS=OFF,SIZE=2,LEVEL=1,TOT_LEVELS=2,LATENCY=0,LOCAL=1,CASCADE_CHAIN=IGNORE] [select0,data0,data1,result];
		}
	}
	dram.gdf
	{
		dram [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	dram::(0,0):(0): dram.gdf
	{
		lpm_counter::(0,0):(1): lpm_counter.tdf
		{
			lpm_add_sub:2:(307,7):(63,add_sub): lpm_add_sub.tdf
			{
				addcore:3:(206,4):(45,adder): addcore.tdf;
				altshift:4:(216,2):(64,result_ext_latency_ffs): altshift.tdf;
				altshift:5:(218,2):(77,carry_ext_latency_ffs): altshift.tdf;
				altshift:5:(220,2):(84,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_constant:6:(326,6):(85,scdw): lpm_constant.tdf;
			lpm_decode:7:(333,4):(92,decode): lpm_decode.tdf
			{
				altshift:8:(75,2):(50,external_latency_ffs): altshift.tdf;
				declut:9:(97,5):(87,decoder0): declut.tdf;
				declut:9:(100,5):(108,decoder1): declut.tdf;
			}
		}
		lpm_mux::(0,0):(3): lpm_mux.tdf
		{
			bypassff:12:(82,17):(104,sel_latency_ff0): bypassff.tdf;
			altshift:13:(88,2):(114,external_latency_ffs): altshift.tdf;
			muxlut:14:(167,21):(135): muxlut.tdf
			{
				muxlut:15:(250,27):(43): muxlut.tdf;
				muxlut:15:(250,27):(60): muxlut.tdf;
				muxlut:16:(273,21):(77): muxlut.tdf;
			}
			muxlut:14:(167,21):(156): muxlut.tdf
			{
				muxlut:15:(250,27):(43): muxlut.tdf;
				muxlut:15:(250,27):(60): muxlut.tdf;
				muxlut:16:(273,21):(77): muxlut.tdf;
			}
			muxlut:14:(167,21):(177): muxlut.tdf
			{
				muxlut:15:(250,27):(43): muxlut.tdf;
				muxlut:15:(250,27):(60): muxlut.tdf;
				muxlut:16:(273,21):(77): muxlut.tdf;
			}
			muxlut:14:(167,21):(198): muxlut.tdf
			{
				muxlut:15:(250,27):(43): muxlut.tdf;
				muxlut:15:(250,27):(60): muxlut.tdf;
				muxlut:16:(273,21):(77): muxlut.tdf;
			}
			muxlut:14:(167,21):(219): muxlut.tdf
			{
				muxlut:15:(250,27):(43): muxlut.tdf;
				muxlut:15:(250,27):(60): muxlut.tdf;
				muxlut:16:(273,21):(77): muxlut.tdf;
			}
			muxlut:14:(167,21):(240): muxlut.tdf
			{
				muxlut:15:(250,27):(43): muxlut.tdf;
				muxlut:15:(250,27):(60): muxlut.tdf;
				muxlut:16:(273,21):(77): muxlut.tdf;
			}
			muxlut:14:(167,21):(261): muxlut.tdf
			{
				muxlut:15:(250,27):(43): muxlut.tdf;
				muxlut:15:(250,27):(60): muxlut.tdf;
				muxlut:16:(273,21):(77): muxlut.tdf;
			}
			muxlut:14:(167,21):(282): muxlut.tdf
			{
				muxlut:15:(250,27):(43): muxlut.tdf;
				muxlut:15:(250,27):(60): muxlut.tdf;
				muxlut:16:(273,21):(77): muxlut.tdf;
			}
		}
		lpm_bustri::(0,0):(4): lpm_bustri.tdf;
		lpm_dff::(0,0):(6): lpm_dff.tdf;
		lpm_dff::(0,0):(7): lpm_dff.tdf;
		lpm_dff::(0,0):(8): lpm_dff.tdf;
		lpm_dff::(0,0):(9): lpm_dff.tdf;
		lpm_dff::(0,0):(10): lpm_dff.tdf;
		lpm_dff::(0,0):(11): lpm_dff.tdf;
		lpm_dff::(0,0):(12): lpm_dff.tdf;
		lpm_dff::(0,0):(13): lpm_dff.tdf;
	}
}
