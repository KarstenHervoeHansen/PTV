--------------------------------------------------------------------------------
-- Copyright (c) 1995-2003 Xilinx, Inc.
-- All Right Reserved.
--------------------------------------------------------------------------------
--   ____  ____ 
--  /   /\/   / 
-- /___/  \  /    Vendor: Xilinx 
-- \   \   \/     Version : 7.1.04i
--  \   \         Application : 
--  /   /         Filename : rocketio.vhd
-- /___/   /\     Timestamp : 11/21/2005 09:12:06
-- \   \  /  \ 
--  \___\/\___\ 
--
--Command: 
--Design Name: rocketio
--
-- Module rocketio
-- Generated by Xilinx Architecture Wizard
-- Written for synthesis tool: XST

library ieee;
use ieee.std_logic_1164.ALL;
use ieee.numeric_std.ALL;
-- synopsys translate_off
library UNISIM;
use UNISIM.Vcomponents.ALL;
-- synopsys translate_on

entity rocketio is
   port ( BREFCLK_IN       : in    std_logic; 
          BREFCLK2_IN      : in    std_logic; 
          ENMCOMMAALIGN_IN : in    std_logic; 
          ENPCOMMAALIGN_IN : in    std_logic; 
          LOOPBACK_IN      : in    std_logic_vector (1 downto 0); 
          POWERDOWN_IN     : in    std_logic; 
          REFCLKSEL_IN     : in    std_logic; 
          RXN_IN           : in    std_logic; 
          RXPOLARITY_IN    : in    std_logic; 
          RXP_IN           : in    std_logic; 
          RXRESET_IN       : in    std_logic; 
          RXUSRCLK_IN      : in    std_logic; 
          RXUSRCLK2_IN     : in    std_logic; 
          TXDATA_IN        : in    std_logic_vector (19 downto 0); 
          TXINHIBIT_IN     : in    std_logic; 
          TXPOLARITY_IN    : in    std_logic; 
          TXRESET_IN       : in    std_logic; 
          TXUSRCLK_IN      : in    std_logic; 
          TXUSRCLK2_IN     : in    std_logic; 
          RXBUFSTATUS_OUT  : out   std_logic_vector (1 downto 0); 
          RXDATA_OUT       : out   std_logic_vector (19 downto 0); 
          RXRECCLK_OUT     : out   std_logic; 
          TXBUFERR_OUT     : out   std_logic; 
          TXN_OUT          : out   std_logic; 
          TXP_OUT          : out   std_logic);
end rocketio;

architecture BEHAVIORAL of rocketio is
   signal GND                : std_logic_vector (3 downto 0);
   signal GND1               : std_logic;
   signal RXCHARISK_float    : std_logic_vector (1 downto 0);
   signal RXDATA_float       : std_logic_vector (15 downto 0);
   signal RXRUNDISP_float    : std_logic_vector (1 downto 0);
   signal TXCHARDISPMODE_GND : std_logic_vector (1 downto 0);
   signal TXCHARDISPVAL_GND  : std_logic_vector (1 downto 0);
   signal TXDATA_GND         : std_logic_vector (15 downto 0);
   signal VCC                : std_logic_vector (3 downto 0);
   component GT_CUSTOM
      generic( ALIGN_COMMA_MSB : boolean :=  FALSE;
               CHAN_BOND_LIMIT : integer :=  16;
               CHAN_BOND_MODE : string :=  "OFF";
               CHAN_BOND_OFFSET : integer :=  8;
               CHAN_BOND_ONE_SHOT : boolean :=  FALSE;
               CHAN_BOND_SEQ_1_1 : bit_vector :=  "00000000000";
               CHAN_BOND_SEQ_1_2 : bit_vector :=  "00000000000";
               CHAN_BOND_SEQ_1_3 : bit_vector :=  "00000000000";
               CHAN_BOND_SEQ_1_4 : bit_vector :=  "00000000000";
               CHAN_BOND_SEQ_2_1 : bit_vector :=  "00000000000";
               CHAN_BOND_SEQ_2_2 : bit_vector :=  "00000000000";
               CHAN_BOND_SEQ_2_3 : bit_vector :=  "00000000000";
               CHAN_BOND_SEQ_2_4 : bit_vector :=  "00000000000";
               CHAN_BOND_SEQ_2_USE : boolean :=  FALSE;
               CHAN_BOND_SEQ_LEN : integer :=  1;
               CHAN_BOND_WAIT : integer :=  8;
               CLK_CORRECT_USE : boolean :=  TRUE;
               CLK_COR_INSERT_IDLE_FLAG : boolean :=  FALSE;
               CLK_COR_KEEP_IDLE : boolean :=  FALSE;
               CLK_COR_REPEAT_WAIT : integer :=  1;
               CLK_COR_SEQ_1_1 : bit_vector :=  "00000000000";
               CLK_COR_SEQ_1_2 : bit_vector :=  "00000000000";
               CLK_COR_SEQ_1_3 : bit_vector :=  "00000000000";
               CLK_COR_SEQ_1_4 : bit_vector :=  "00000000000";
               CLK_COR_SEQ_2_1 : bit_vector :=  "00000000000";
               CLK_COR_SEQ_2_2 : bit_vector :=  "00000000000";
               CLK_COR_SEQ_2_3 : bit_vector :=  "00000000000";
               CLK_COR_SEQ_2_4 : bit_vector :=  "00000000000";
               CLK_COR_SEQ_2_USE : boolean :=  FALSE;
               CLK_COR_SEQ_LEN : integer :=  1;
               COMMA_10B_MASK : bit_vector :=  "1111111000";
               CRC_END_OF_PKT : string :=  "K29_7";
               CRC_FORMAT : string :=  "USER_MODE";
               CRC_START_OF_PKT : string :=  "K27_7";
               DEC_MCOMMA_DETECT : boolean :=  TRUE;
               DEC_PCOMMA_DETECT : boolean :=  TRUE;
               DEC_VALID_COMMA_ONLY : boolean :=  TRUE;
               MCOMMA_10B_VALUE : bit_vector :=  "1100000000";
               MCOMMA_DETECT : boolean :=  TRUE;
               PCOMMA_10B_VALUE : bit_vector :=  "0011111000";
               PCOMMA_DETECT : boolean :=  TRUE;
               RX_BUFFER_USE : boolean :=  TRUE;
               RX_CRC_USE : boolean :=  FALSE;
               RX_DATA_WIDTH : integer :=  2;
               RX_DECODE_USE : boolean :=  TRUE;
               RX_LOSS_OF_SYNC_FSM : boolean :=  TRUE;
               RX_LOS_INVALID_INCR : integer :=  1;
               RX_LOS_THRESHOLD : integer :=  4;
               TERMINATION_IMP : integer :=  50;
               SERDES_10B : boolean :=  FALSE;
               TX_BUFFER_USE : boolean :=  TRUE;
               TX_CRC_FORCE_VALUE : bit_vector :=  "11010110";
               TX_CRC_USE : boolean :=  FALSE;
               TX_DATA_WIDTH : integer :=  2;
               TX_DIFF_CTRL : integer :=  500;
               TX_PREEMPHASIS : integer :=  0;
               REF_CLK_V_SEL : integer :=  0);
      port ( CHBONDI        : in    std_logic_vector (3 downto 0); 
             CONFIGENABLE   : in    std_logic; 
             CONFIGIN       : in    std_logic; 
             ENMCOMMAALIGN  : in    std_logic; 
             ENPCOMMAALIGN  : in    std_logic; 
             ENCHANSYNC     : in    std_logic; 
             LOOPBACK       : in    std_logic_vector (1 downto 0); 
             POWERDOWN      : in    std_logic; 
             REFCLK         : in    std_logic; 
             REFCLK2        : in    std_logic; 
             REFCLKSEL      : in    std_logic; 
             BREFCLK        : in    std_logic; 
             BREFCLK2       : in    std_logic; 
             RXN            : in    std_logic; 
             RXP            : in    std_logic; 
             RXPOLARITY     : in    std_logic; 
             RXRESET        : in    std_logic; 
             RXUSRCLK       : in    std_logic; 
             RXUSRCLK2      : in    std_logic; 
             TXBYPASS8B10B  : in    std_logic_vector (3 downto 0); 
             TXCHARDISPMODE : in    std_logic_vector (3 downto 0); 
             TXCHARDISPVAL  : in    std_logic_vector (3 downto 0); 
             TXCHARISK      : in    std_logic_vector (3 downto 0); 
             TXDATA         : in    std_logic_vector (31 downto 0); 
             TXFORCECRCERR  : in    std_logic; 
             TXINHIBIT      : in    std_logic; 
             TXPOLARITY     : in    std_logic; 
             TXRESET        : in    std_logic; 
             TXUSRCLK       : in    std_logic; 
             TXUSRCLK2      : in    std_logic; 
             CHBONDDONE     : out   std_logic; 
             CHBONDO        : out   std_logic_vector (3 downto 0); 
             CONFIGOUT      : out   std_logic; 
             RXBUFSTATUS    : out   std_logic_vector (1 downto 0); 
             RXCHARISCOMMA  : out   std_logic_vector (3 downto 0); 
             RXCHARISK      : out   std_logic_vector (3 downto 0); 
             RXCHECKINGCRC  : out   std_logic; 
             RXCLKCORCNT    : out   std_logic_vector (2 downto 0); 
             RXCOMMADET     : out   std_logic; 
             RXCRCERR       : out   std_logic; 
             RXDATA         : out   std_logic_vector (31 downto 0); 
             RXDISPERR      : out   std_logic_vector (3 downto 0); 
             RXLOSSOFSYNC   : out   std_logic_vector (1 downto 0); 
             RXNOTINTABLE   : out   std_logic_vector (3 downto 0); 
             RXREALIGN      : out   std_logic; 
             RXRECCLK       : out   std_logic; 
             RXRUNDISP      : out   std_logic_vector (3 downto 0); 
             TXBUFERR       : out   std_logic; 
             TXKERR         : out   std_logic_vector (3 downto 0); 
             TXN            : out   std_logic; 
             TXP            : out   std_logic; 
             TXRUNDISP      : out   std_logic_vector (3 downto 0));
   end component;
   
begin
   GND(3 downto 0) <= "0000";
   GND1 <= '0';
   TXCHARDISPMODE_GND(1 downto 0) <= "00";
   TXCHARDISPVAL_GND(1 downto 0) <= "00";
   TXDATA_GND(15 downto 0) <= "0000000000000000";
   VCC(3 downto 0) <= "1111";
   GT_CUSTOM_INST : GT_CUSTOM
      generic map( 
         ALIGN_COMMA_MSB => FALSE,
         CHAN_BOND_LIMIT => 16,
         CHAN_BOND_MODE => "OFF",
         CHAN_BOND_OFFSET => 8,
         CHAN_BOND_ONE_SHOT => FALSE,
         CHAN_BOND_SEQ_1_1 => "00000000000",
         CHAN_BOND_SEQ_1_2 => "00000000000",
         CHAN_BOND_SEQ_1_3 => "00000000000",
         CHAN_BOND_SEQ_1_4 => "00000000000",
         CHAN_BOND_SEQ_2_1 => "00000000000",
         CHAN_BOND_SEQ_2_2 => "00000000000",
         CHAN_BOND_SEQ_2_3 => "00000000000",
         CHAN_BOND_SEQ_2_4 => "00000000000",
         CHAN_BOND_SEQ_2_USE => FALSE,
         CHAN_BOND_SEQ_LEN => 1,
         CHAN_BOND_WAIT => 8,
         CLK_CORRECT_USE => FALSE,
         CLK_COR_INSERT_IDLE_FLAG => FALSE,
         CLK_COR_KEEP_IDLE => FALSE,
         CLK_COR_REPEAT_WAIT => 1,
         CLK_COR_SEQ_1_1 => "00000000000",
         CLK_COR_SEQ_1_2 => "00000000000",
         CLK_COR_SEQ_1_3 => "00000000000",
         CLK_COR_SEQ_1_4 => "00000000000",
         CLK_COR_SEQ_2_1 => "00000000000",
         CLK_COR_SEQ_2_2 => "00000000000",
         CLK_COR_SEQ_2_3 => "00000000000",
         CLK_COR_SEQ_2_4 => "00000000000",
         CLK_COR_SEQ_2_USE => FALSE,
         CLK_COR_SEQ_LEN => 1,
         COMMA_10B_MASK => "1111111000",
         CRC_END_OF_PKT => "K29_7",
         CRC_FORMAT => "USER_MODE",
         CRC_START_OF_PKT => "K27_7",
         DEC_MCOMMA_DETECT => FALSE,
         DEC_PCOMMA_DETECT => FALSE,
         DEC_VALID_COMMA_ONLY => FALSE,
         MCOMMA_10B_VALUE => "1100000000",
         MCOMMA_DETECT => FALSE,
         PCOMMA_10B_VALUE => "0011111000",
         PCOMMA_DETECT => FALSE,
         RX_BUFFER_USE => TRUE,
         RX_CRC_USE => FALSE,
         RX_DATA_WIDTH => 2,
         RX_DECODE_USE => FALSE,
         RX_LOSS_OF_SYNC_FSM => FALSE,
         RX_LOS_INVALID_INCR => 1,
         RX_LOS_THRESHOLD => 4,
         TERMINATION_IMP => 50,
         SERDES_10B => FALSE,
         TX_BUFFER_USE => TRUE,
         TX_CRC_FORCE_VALUE => "11010110",
         TX_CRC_USE => FALSE,
         TX_DATA_WIDTH => 2,
         TX_DIFF_CTRL => 800,
         TX_PREEMPHASIS => 0,
         REF_CLK_V_SEL => 1
      )
      port map (
         BREFCLK=>BREFCLK_IN,
         BREFCLK2=>BREFCLK2_IN,
         CHBONDI(3 downto 0)=>GND(3 downto 0),
         CONFIGENABLE=>GND1,
         CONFIGIN=>GND1,
         ENCHANSYNC=>GND1,
         ENMCOMMAALIGN=>ENMCOMMAALIGN_IN,
         ENPCOMMAALIGN=>ENPCOMMAALIGN_IN,
         LOOPBACK(1 downto 0)=>LOOPBACK_IN(1 downto 0),
         POWERDOWN=>POWERDOWN_IN,
         REFCLK=>GND1,
         REFCLKSEL=>REFCLKSEL_IN,
         REFCLK2=>GND1,
         RXN=>RXN_IN,
         RXP=>RXP_IN,
         RXPOLARITY=>RXPOLARITY_IN,
         RXRESET=>RXRESET_IN,
         RXUSRCLK=>RXUSRCLK_IN,
         RXUSRCLK2=>RXUSRCLK2_IN,
         TXBYPASS8B10B(3 downto 0)=>VCC(3 downto 0),
         TXCHARDISPMODE(3 downto 2)=>TXCHARDISPMODE_GND(1 downto 0),
         TXCHARDISPMODE(1)=>TXDATA_IN(19),
         TXCHARDISPMODE(0)=>TXDATA_IN(9),
         TXCHARDISPVAL(3 downto 2)=>TXCHARDISPVAL_GND(1 downto 0),
         TXCHARDISPVAL(1)=>TXDATA_IN(18),
         TXCHARDISPVAL(0)=>TXDATA_IN(8),
         TXCHARISK(3 downto 0)=>GND(3 downto 0),
         TXDATA(31 downto 16)=>TXDATA_GND(15 downto 0),
         TXDATA(15 downto 8)=>TXDATA_IN(17 downto 10),
         TXDATA(7 downto 0)=>TXDATA_IN(7 downto 0),
         TXFORCECRCERR=>GND1,
         TXINHIBIT=>TXINHIBIT_IN,
         TXPOLARITY=>TXPOLARITY_IN,
         TXRESET=>TXRESET_IN,
         TXUSRCLK=>TXUSRCLK_IN,
         TXUSRCLK2=>TXUSRCLK2_IN,
         CHBONDDONE=>open,
         CHBONDO=>open,
         CONFIGOUT=>open,
         RXBUFSTATUS(1 downto 0)=>RXBUFSTATUS_OUT(1 downto 0),
         RXCHARISCOMMA=>open,
         RXCHARISK(3 downto 2)=>RXCHARISK_float(1 downto 0),
         RXCHARISK(1)=>RXDATA_OUT(19),
         RXCHARISK(0)=>RXDATA_OUT(9),
         RXCHECKINGCRC=>open,
         RXCLKCORCNT=>open,
         RXCOMMADET=>open,
         RXCRCERR=>open,
         RXDATA(31 downto 16)=>RXDATA_float(15 downto 0),
         RXDATA(15 downto 8)=>RXDATA_OUT(17 downto 10),
         RXDATA(7 downto 0)=>RXDATA_OUT(7 downto 0),
         RXDISPERR=>open,
         RXLOSSOFSYNC=>open,
         RXNOTINTABLE=>open,
         RXREALIGN=>open,
         RXRECCLK=>RXRECCLK_OUT,
         RXRUNDISP(3 downto 2)=>RXRUNDISP_float(1 downto 0),
         RXRUNDISP(1)=>RXDATA_OUT(18),
         RXRUNDISP(0)=>RXDATA_OUT(8),
         TXBUFERR=>TXBUFERR_OUT,
         TXKERR=>open,
         TXN=>TXN_OUT,
         TXP=>TXP_OUT,
         TXRUNDISP=>open
      );
   
end BEHAVIORAL;


