// Subs-Functions01.txt.
//
// Création : 2011-03-28 par Robert Tremblay.
// Modification : 2012-01-16 par Robert Tremblay.
// Copyright © 2011-2012 - Miranda Technologies inc., tous droits réservés.
// 
// Module de sous-routines de fonctions.
// Note : Il s'agit ici des même fonctions que celles se trouvant dans le répertoire Functions,
//        mais ici toutes réunies dans le même fichier et de manière plus compacte.


MLongs(kmlFCTNumArrays=256,kmlFCTNumDims=16,kmlFCTNumArraysDims=4096)
MLongs(mlFCTNumDims[kmlFCTNumArrays],mlFCTDimi[kmlFCTNumArraysDims])


BeginSub(Add)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>0)
    GetSubArgi(0,ldResult)
    If(llNumArgs>1)
      Assign(1,llArgIndex)
      BeginLoop()
        GetSubArgi(llArgIndex,ldArgi)
        Add(ldResult,ldArgi,ldResult)
        Incr(llArgIndex)
        ExitLoopIf(llArgIndex>=llNumArgs)
      EndLoop()
    EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Add)


BeginSub(Sub)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>0)
    GetSubArgi(0,ldResult)
    If(llNumArgs>1)
      Assign(1,llArgIndex)
      BeginLoop()
        GetSubArgi(llArgIndex,ldArgi)
        Sub(ldResult,ldArgi,ldResult)
        Incr(llArgIndex)
        ExitLoopIf(llArgIndex>=llNumArgs)
      EndLoop()
    EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Sub)


BeginSub(Mul)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>0)
    GetSubArgi(0,ldResult)
    If(llNumArgs>1)
      Assign(1,llArgIndex)
      BeginLoop()
        GetSubArgi(llArgIndex,ldArgi)
        Mul(ldResult,ldArgi,ldResult)
        Incr(llArgIndex)
        ExitLoopIf(llArgIndex>=llNumArgs)
      EndLoop()
    EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Mul)


BeginSub(Div)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>0)
    GetSubArgi(0,ldResult)
    If(llNumArgs>1)
      Assign(1,llArgIndex)
      BeginLoop()
        GetSubArgi(llArgIndex,ldArgi)
        If(ldArgi!=0)
          Div(ldResult,ldArgi,ldResult)
        EndIf()
        Incr(llArgIndex)
        ExitLoopIf(llArgIndex>=llNumArgs)
      EndLoop()
    EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Div)


BeginSub(Incr)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldArg2,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Assign(ldArg1,ldResult)
    Incr(ldResult)
    SetSubArgs(ldResult)
  ElseIf(llNumArgs=2)
    GetSubArgs(ldArg1,ldArg2)
    Assign(ldArg1,ldResult)
    Incr(ldResult,ldArg2)
    SetSubArgs(ldResult,-)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Incr)


BeginSub(Decr)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldArg2,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Assign(ldArg1,ldResult)
    Decr(ldResult)
    SetSubArgs(ldResult)
  ElseIf(llNumArgs=2)
    GetSubArgs(ldArg1,ldArg2)
    Assign(ldArg1,ldResult)
    Decr(ldResult,ldArg2)
    SetSubArgs(ldResult,-)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Decr)


BeginSub(Abs)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Abs(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Abs)


BeginSub(Neg)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Negate(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Neg)


BeginSub(Inv)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    If(ldArg1!=0)
      Invert(ldArg1,ldResult)
    Else
      Assign(0,ldResult)
    EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Inv)


BeginSub(Round)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Round(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Round)


BeginSub(Int)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    IntegerPart(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Int)


BeginSub(Dec)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    DecimalPart(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Dec)


BeginSub(Mod)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldArg2,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=2)
    GetSubArgs(ldArg1,ldArg2)
    Mod(ldArg1,ldArg2,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Mod)


BeginSub(Max)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>0)
    GetSubArgi(0,ldResult)
    If(llNumArgs>1)
      Assign(1,llArgIndex)
      BeginLoop()
        GetSubArgi(llArgIndex,ldArgi)
        Max(ldArgi,ldResult,ldResult)
        Incr(llArgIndex)
        ExitLoopIf(llArgIndex>=llNumArgs)
      EndLoop()
    EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Max)


BeginSub(Min)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>0)
    GetSubArgi(0,ldResult)
    If(llNumArgs>1)
      Assign(1,llArgIndex)
      BeginLoop()
        GetSubArgi(llArgIndex,ldArgi)
        Min(ldArgi,ldResult,ldResult)
        Incr(llArgIndex)
        ExitLoopIf(llArgIndex>=llNumArgs)
      EndLoop()
    EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Min)


BeginSub(MaxAbs)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>0)
    GetSubArgi(0,ldResult)
    If(llNumArgs>1)
      Assign(1,llArgIndex)
      BeginLoop()
        GetSubArgi(llArgIndex,ldArgi)
        MaxAbs(ldArgi,ldResult,ldResult)
        Incr(llArgIndex)
        ExitLoopIf(llArgIndex>=llNumArgs)
      EndLoop()
    EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(MaxAbs)


BeginSub(MinAbs)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>0)
    GetSubArgi(0,ldResult)
    If(llNumArgs>1)
      Assign(1,llArgIndex)
      BeginLoop()
        GetSubArgi(llArgIndex,ldArgi)
        MinAbs(ldArgi,ldResult,ldResult)
        Incr(llArgIndex)
        ExitLoopIf(llArgIndex>=llNumArgs)
      EndLoop()
    EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(MinAbs)


BeginSub(WithinAbsLimits)
  LShorts(lsResult)
  LLongs(llNumArgs)
  LDoubles(ldValue,ldLowerLimit,ldHigherLimit)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=3)
    GetSubArgs(ldValue,ldLowerLimit,ldHigherLimit)
    Ifn(ldValue>=ldLowerLimit,ldValue<=ldHigherLimit,AND)
      Assign(1,lsResult)
    Else()
      Assign(0,lsResult)
    EndIf()
  Else()
    Assign(0,lsResult)
  EndIf()
  Return(lsResult)
EndSub(WithinAbsLimits)


BeginSub(WithinRelLimits)
  LShorts(lsResult)
  LLongs(llNumArgs)
  LDoubles(ldValue,ldRef,ldLowerRelLimit,ldHigherRelLimit,ldLowerLimit,ldHigherLimit)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=4)
    GetSubArgs(ldValue,ldRef,ldLowerRelLimit,ldHigherRelLimit)
    Mul(ldLowerRelLimit,ldRef,ldLowerLimit)
    Mul(ldHigherRelLimit,ldRef,ldHigherLimit)
    Ifn(ldValue>=ldLowerLimit,ldValue<=ldHigherLimit,AND)
      Assign(1,lsResult)
    Else()
      Assign(0,lsResult)
    EndIf()
  Else()
    Assign(0,lsResult)
  EndIf()
  Return(lsResult)
EndSub(WithinRelLimits)


BeginSub(SummateArray)
  LLongs(llNumArgs,llIndexStart,llIndexStop,llIndex)
  LDoubles(ldArray[1],ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=3)
    GetSubArgs(ldArray,llIndexStart,llIndexStop)
    Assign(0,ldResult,llIndexStart,llIndex)
    BeginLoop()
      RPN(ldResult,ldArray[llIndex],+,ldResult)
      Incr(llIndex)
      ExitLoopIf(llIndex>llIndexStop)
    EndLoop()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(SummateArray)


BeginSub(SummateFunction)
  LStrings(lstrFunctionName)
  LLongs(llNumArgs)
  LDoubles(ldXStart,ldXStop,ldDX,ldX,ldXPrev,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=4)
    GetSubArgs(lstrFunctionName,ldXStart,ldXStop,ldDX)
    Assign(0,ldResult,ldXStart,ldX)
    BeginLoop()
      RPN(ldResult,Fct@(lstrFunctionName,ldX),+,ldResult)
      Incr(ldX,ldDX)
      ExitLoopIf(ldX>ldXStop)
    EndLoop()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(SummateFunction)


BeginSub(IntegrateArray)
  LLongs(llNumArgs,llIndexStart,llIndexStop,llIndex,llIndexPrev)
  LDoubles(ldArray[1],ldDX,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=4)
    GetSubArgs(ldArray,llIndexStart,llIndexStop,ldDX)
    Assign(0,ldResult,llIndexStart,llIndexPrev)
    Add(llIndexStart,1,llIndex)
    BeginLoop()
      RPN(ldResult,ldArray[llIndexPrev],ldArray[llIndex],+,2,/,ldDX,*,+,ldResult)ç
      Incr(llIndexPrev)
      Incr(llIndex)
      ExitLoopIf(llIndex>llIndexStop)
    EndLoop()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(IntegrateArray)


BeginSub(IntegrateFunction)
  LStrings(lstrFunctionName)
  LLongs(llNumArgs)
  LDoubles(ldXStart,ldXStop,ldDX,ldX,ldXPrev,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=4)
    GetSubArgs(lstrFunctionName,ldXStart,ldXStop,ldDX)
    Assign(0,ldResult,ldXStart,ldXPrev)
    Add(ldXStart,ldDX,ldX)
    BeginLoop()
      RPN(ldResult,Fct@(lstrFunctionName,ldXPrev),Fct@(lstrFunctionName,ldX),+,2,/,ldDX,*,+,ldResult)
      Incr(ldXPrev,ldDX)
      Incr(ldX,ldDX)
      ExitLoopIf(ldX>ldXStop)
    EndLoop()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(IntegrateFunction)


BeginSub(Sqr)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Sqr(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Sqr)


BeginSub(Cub)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Cub(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Cub)


BeginSub(Pwr)
  LLongs(llNumArgs)
  LDoubles(ldBase,ldExp,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=2)
    GetSubArgs(ldBase,ldExp)
    Pwr(ldBase,ldExp,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Pwr)


BeginSub(Sqrt)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Sqrt(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Sqrt)


BeginSub(ExpE)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    ExpE(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(ExpE)


BeginSub(Exp10)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Exp10(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Exp10)


BeginSub(ExpX)
  LLongs(llNumArgs)
  LDoubles(ldBase,ldExp,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=2)
    GetSubArgs(ldBase,ldExp)
    ExpBase(ldBase,ldExp,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(ExpX)


BeginSub(LogE)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    If(ldArg1>0)
      LogE(ldArg1,ldResult)
    Else()
      Assign(0,ldResult)
    EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(LogE)


BeginSub(Log10)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    If(ldArg1>0)
      Log10(ldArg1,ldResult)
    Else()
      Assign(0,ldResult)
    EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Log10)


BeginSub(LogX)
  LLongs(llNumArgs)
  LDoubles(ldBase,ldExp,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=2)
    GetSubArgs(ldBase,ldExp)
    Ifn(ldBase>0,ldExp>0,AND)
      LogBase(ldBase,ldExp,ldResult)
    Else()
      Assign(0,ldResult)
    EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(LogX)


BeginSub(dBVI)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    If(ldArg1>0)
      20Log10(ldArg1,ldResult)
    Else()
      Assign(0,ldResult)
    EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(dBVI)


BeginSub(dBP)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    If(ldArg1>0)
      10Log10(ldArg1,ldResult)
    Else()
      Assign(0,ldResult)
    EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(dBP)


BeginSub(Sin)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Sin(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Sin)


BeginSub(Cos)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Cos(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Cos)


BeginSub(Tan)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Tan(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Tan)


BeginSub(ArcSin)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    ArcSin(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(ArcSin)


BeginSub(ArcCos)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    ArcCos(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(ArcCos)


BeginSub(ArcTan90)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    ArcTan180(1.0,ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(ArcTan90)


BeginSub(ArcTan180)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldArg2,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=2)
    GetSubArgs(ldArg1,ldArg2)
    ArcTan180(ldArg1,ldArg2,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(ArcTan180)


BeginSub(ArcTan360)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldArg2,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=2)
    GetSubArgs(ldArg1,ldArg2)
    ArcTan360(ldArg1,ldArg2,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(ArcTan360)


BeginSub(LimAng180)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    LimAng180(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(LimAng180)


BeginSub(LimAng360)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    LimAng360(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(LimAng360)


BeginSub(DegToRad)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Div(ldArg1,57.295779513082320876798154814105,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(DegToRad)


BeginSub(RadToDeg)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Mul(ldArg1,57.295779513082320876798154814105,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(RadToDeg)


BeginSub(Sinh)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Sinh(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Sinh)


BeginSub(Cosh)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Cosh(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Cosh)


BeginSub(Tanh)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Tanh(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Tanh)


BeginSub(Rnd)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldArg2,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg2)
    RndInt(0,ldArg2,ldResult)
  ElseIf(llNumArgs=2)
    GetSubArgs(ldArg1,ldArg2)
    RndInt(ldArg1,ldArg2,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Rnd)


BeginSub(CRC)
  LStrings(lstrCRCType)
  LBytes(lbArray[1])
  LShorts(lsArgType,lsVarType,lsArray[1])
  LLongs(llNumArgs,llCRCFeed,llArray[1],llFirstArrayIndex,llArrayLength,llCRC)
  LFloats(lfArray[1])
  LDoubles(ldArray[1])
  GetSubNumArgs(llNumArgs)
  GetSubArgTypei(2,lsArgType,lsVarType)
  Ifn(llNumArgs=5,lsArgType=2,AND,lsVarType=8,lsVarType=9,OR,lsVarType=10,OR,lsVarType=11,OR,lsVarType=12,OR,AND)
    GetSubArgi(0,lstrCRCType)
    GetSubArgi(1,llCRCFeed)
    GetSubArgi(3,llFirstArrayIndex)
    GetSubArgi(4,llArrayLength)
    If(lsVarType=8)
      GetSubArgi(2,lbArray)
      CRC(lstrCRCType,llCRCFeed,lbArray,llFirstArrayIndex,llArrayLength,llCRC)
    ElseIf(lsVarType=9)
      GetSubArgi(2,lsArray)
      CRC(lstrCRCType,llCRCFeed,lsArray,llFirstArrayIndex,llArrayLength,llCRC)
    ElseIf(lsVarType=10)
      GetSubArgi(2,llArray)
      CRC(lstrCRCType,llCRCFeed,llArray,llFirstArrayIndex,llArrayLength,llCRC)
    ElseIf(lsVarType=11)
      GetSubArgi(2,lfArray)
      CRC(lstrCRCType,llCRCFeed,lfArray,llFirstArrayIndex,llArrayLength,llCRC)
    ElseIf(lsVarType=12)
      GetSubArgi(2,ldArray)
      CRC(lstrCRCType,llCRCFeed,ldArray,llFirstArrayIndex,llArrayLength,llCRC)
    EndIf()
  Else()
    Assign(0,llCRC)
  EndIf()
  Return(llCRC)
EndSub(CRC)


BeginSub(And)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>=2)
    GetSubArgi(0,ldResult)
    Assign(1,llArgIndex)
    BeginLoop()
      GetSubArgi(llArgIndex,ldArgi)
      And(ldResult,ldArgi,ldResult)
      Incr(llArgIndex)
      ExitLoopIf(llArgIndex>=llNumArgs)
      ExitLoopIf(ldResult=0)
    EndLoop()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(And)


BeginSub(Or)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>=2)
    GetSubArgi(0,ldResult)
    Assign(1,llArgIndex)
    BeginLoop()
      GetSubArgi(llArgIndex,ldArgi)
      Or(ldResult,ldArgi,ldResult)
      Incr(llArgIndex)
      ExitLoopIf(llArgIndex>=llNumArgs)
      ExitLoopIf(ldResult!=0)
    EndLoop()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Or)


BeginSub(XOr)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>=2)
    GetSubArgi(0,ldResult)
    Assign(1,llArgIndex)
    BeginLoop()
      GetSubArgi(llArgIndex,ldArgi)
      XOr(ldResult,ldArgi,ldResult)
      Incr(llArgIndex)
      ExitLoopIf(llArgIndex>=llNumArgs)
    EndLoop()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(XOr)


BeginSub(NAnd)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>=2)
    GetSubArgi(0,ldResult)
    Assign(1,llArgIndex)
    BeginLoop()
      GetSubArgi(llArgIndex,ldArgi)
      And(ldResult,ldArgi,ldResult)
      Incr(llArgIndex)
      ExitLoopIf(llArgIndex>=llNumArgs)
      ExitLoopIf(ldResult=0)
    EndLoop()
    If(ldResult=0):::Assign(1,ldResult):::Else():::Assign(0,ldResult):::EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(NAnd)


BeginSub(NOr)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>=2)
    GetSubArgi(0,ldResult)
    Assign(1,llArgIndex)
    BeginLoop()
      GetSubArgi(llArgIndex,ldArgi)
      Or(ldResult,ldArgi,ldResult)
      Incr(llArgIndex)
      ExitLoopIf(llArgIndex>=llNumArgs)
      ExitLoopIf(ldResult!=0)
    EndLoop()
    If(ldResult=0):::Assign(1,ldResult):::Else():::Assign(0,ldResult):::EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(NOr)


BeginSub(NXOr)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>=2)
    GetSubArgi(0,ldResult)
    Assign(1,llArgIndex)
    BeginLoop()
      GetSubArgi(llArgIndex,ldArgi)
      XOr(ldResult,ldArgi,ldResult)
      Incr(llArgIndex)
      ExitLoopIf(llArgIndex>=llNumArgs)
    EndLoop()
    If(ldResult=0):::Assign(1,ldResult):::Else():::Assign(0,ldResult):::EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(NXOr)


BeginSub(Not)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    Not(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(Not)


BeginSub(BWAnd)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>=2)
    GetSubArgi(0,ldResult)
    Assign(1,llArgIndex)
    BeginLoop()
      GetSubArgi(llArgIndex,ldArgi)
      BWAnd(ldResult,ldArgi,ldResult)
      Incr(llArgIndex)
      ExitLoopIf(llArgIndex>=llNumArgs)
    EndLoop()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(BWAnd)


BeginSub(BWOr)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>=2)
    GetSubArgi(0,ldResult)
    Assign(1,llArgIndex)
    BeginLoop()
      GetSubArgi(llArgIndex,ldArgi)
      BWOr(ldResult,ldArgi,ldResult)
      Incr(llArgIndex)
      ExitLoopIf(llArgIndex>=llNumArgs)
    EndLoop()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(BWOr)


BeginSub(BWXOr)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>=2)
    GetSubArgi(0,ldResult)
    Assign(1,llArgIndex)
    BeginLoop()
      GetSubArgi(llArgIndex,ldArgi)
      BWXOr(ldResult,ldArgi,ldResult)
      Incr(llArgIndex)
      ExitLoopIf(llArgIndex>=llNumArgs)
    EndLoop()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(BWXOr)


BeginSub(BWNAnd)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>=2)
    GetSubArgi(0,ldResult)
    Assign(1,llArgIndex)
    BeginLoop()
      GetSubArgi(llArgIndex,ldArgi)
      BWAnd(ldResult,ldArgi,ldResult)
      Incr(llArgIndex)
      ExitLoopIf(llArgIndex>=llNumArgs)
    EndLoop()
    BWNot(ldResult,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(BWNAnd)


BeginSub(BWNOr)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>=2)
    GetSubArgi(0,ldResult)
    Assign(1,llArgIndex)
    BeginLoop()
      GetSubArgi(llArgIndex,ldArgi)
      BWOr(ldResult,ldArgi,ldResult)
      Incr(llArgIndex)
      ExitLoopIf(llArgIndex>=llNumArgs)
    EndLoop()
    BWNot(ldResult,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(BWNOr)


BeginSub(BWNXOr)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>=2)
    GetSubArgi(0,ldResult)
    Assign(1,llArgIndex)
    BeginLoop()
      GetSubArgi(llArgIndex,ldArgi)
      BWXOr(ldResult,ldArgi,ldResult)
      Incr(llArgIndex)
      ExitLoopIf(llArgIndex>=llNumArgs)
    EndLoop()
    BWNot(ldResult,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(BWNXOr)


BeginSub(BWNot)
  LLongs(llNumArgs)
  LDoubles(ldArg1,ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(ldArg1)
    BWNot(ldArg1,ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(BWNot)


BeginSub(StrAdd)
  LStrings(lstrArgi,lstrResult)
  LLongs(llNumArgs,llArgIndex)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>0)
    GetSubArgi(0,lstrArgi)
    If(llNumArgs>1)
      Assign(1,llArgIndex,lstrArgi,lstrResult)
      BeginLoop()
        GetSubArgi(llArgIndex,lstrArgi)
        Add(lstrResult,lstrArgi,lstrResult)
        Incr(llArgIndex)
        ExitLoopIf(llArgIndex>=llNumArgs)
      EndLoop()
    Else()
      Assign(lstrArgi,lstrResult)
    EndIf()
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrAdd)


BeginSub(StrInsert)
  LStrings(lstrSource,lstrInserted,lstrResult)
  LLongs(llNumArgs,llPosition)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=3)
    GetSubArgs(lstrSource,lstrInserted,llPosition)
    StringTools(Insert,lstrSource,lstrInserted,llPosition,lstrResult)
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrInsert)


BeginSub(StrDelete)
  LStrings(lstrSource,lstrResult)
  LLongs(llNumArgs,llPosition,llLength)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=3)
    GetSubArgs(lstrSource,llPosition,llLength)
    StringTools(Delete,lstrSource,llPosition,llLength,lstrResult)
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrDelete)


BeginSub(StrChars)
  LStrings(lstrArg1,lstrResult)
  LLongs(llNumArgs,llNumAdd,llArgIndex)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=2)
    GetSubArgs(lstrArg1,llNumAdd)
    If(llNumAdd>0)
      Assign(lstrArg1,lstrResult)
      If(llNumAdd>1)
        Assign(1,llArgIndex)
        BeginLoop()
          Add(lstrResult,lstrArg1,lstrResult)
          Incr(llArgIndex)
          ExitLoopIf(llArgIndex>=llNumAdd)
        EndLoop()
      EndIf()
    Else()
      Assign("",lstrResult)
    EndIf()
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrChars)


BeginSub(StrUCase)
  LStrings(lstrArg,lstrResult)
  LLongs(llNumArgs)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(lstrArg)
    StringTools(UpperCase,lstrArg,lstrResult)
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrUCase)


BeginSub(StrLCase)
  LStrings(lstrArg,lstrResult)
  LLongs(llNumArgs)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(lstrArg)
    StringTools(LowerCase,lstrArg,lstrResult)
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrLCase)


BeginSub(StrLeft)
  LStrings(lstrArg,lstrResult)
  LLongs(llStrLen1,llStrLen2)
  LLongs(llNumArgs)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=2)
    GetSubArgs(lstrArg,llStrLen1)
    StringLength(lstrArg,llStrLen2)
    If(llStrLen2<llStrLen1)
      Assign(llStrLen2,llStrLen1)
    EndIf()
    If(llStrLen1>0)
      SubString(lstrArg,Left,0,llStrLen1,lstrResult)
    Else()
      Assign("",lstrResult)
    EndIf()
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrLeft)


BeginSub(StrRight)
  LStrings(lstrArg,lstrResult)
  LLongs(llStrLen1,llStrLen2)
  LLongs(llNumArgs)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=2)
    GetSubArgs(lstrArg,llStrLen1)
    StringLength(lstrArg,llStrLen2)
    If(llStrLen2<llStrLen1)
      Assign(llStrLen2,llStrLen1)
    EndIf()
    If(llStrLen1>0)
      SubString(lstrArg,Right,0,llStrLen1,lstrResult)
    Else()
      Assign("",lstrResult)
    EndIf()
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrRight)


BeginSub(StrMid)
  LStrings(lstrArg,lstrResult)
  LLongs(llPos,llStrLen)
  LLongs(llNumArgs)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=3)
    GetSubArgs(lstrArg,llPos,llStrLen)
    SubString(lstrArg,Mid,llPos,llStrLen,lstrResult)
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrMid)


BeginSub(StrLen)
  LStrings(lstrArg1)
  LLongs(llNumArgs)
  LDoubles(ldStrlen)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(lstrArg1)
    StringLength(lstrArg1,ldStrlen)
  Else()
    Assign(0,ldStrlen)
  EndIf()
  Return(ldStrlen)
EndSub(StrLen)


BeginSub(StrFind)
  LStrings(lstrMainStr,lstrSubStr)
  LLongs(llNumArgs)
  LDoubles(ldStartPos,ldFoundPos)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=3)
    GetSubArgs(lstrMainStr,lstrSubStr,ldStartPos)
    FindString(lstrMainStr,lstrSubStr,ldStartPos,ldFoundPos)
  Else()
    Assign(0,ldFoundPos)
  EndIf()
  Return(ldFoundPos)
EndSub(StrFind)


BeginSub(StrNumDec)
  LStrings(lstrSource)
  LShorts(lsConvError)
  LLongs(llNumArgs)
  LDoubles(ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(lstrSource)
    StringToNum(lstrSource,ldResult,lsConvError)
    If(lsConvError!=0):::Assign(0,ldResult):::EndIf()
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(StrNumDec)


BeginSub(StrNumHex)
  LStrings(lstrSource)
  LShorts(lsConvError)
  LLongs(llNumArgs,llResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(lstrSource)
    HexStringToNum(lstrSource,llResult,lsConvError)
    If(lsConvError!=0):::Assign(0,llResult):::EndIf()
  Else()
    Assign(0,llResult)
  EndIf()
  Return(llResult)
EndSub(StrNumHex)


BeginSub(StrNumBin)
  LStrings(lstrSource)
  LShorts(lsConvError)
  LLongs(llNumArgs,llResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(lstrSource)
    BinaryStringToNum(lstrSource,llResult,lsConvError)
    If(lsConvError!=0):::Assign(0,llResult):::EndIf()
  Else()
    Assign(0,llResult)
  EndIf()
  Return(llResult)
EndSub(StrNumBin)


BeginSub(StrFormat)
  LStrings(lstrStringArg,lstrFormat,lstrSubResult,lstrResult)
  LBytes(lbByteArg)
  LShorts(lsShortArg,lsArgType,lsVarType)
  LLongs(llLongArg,llNumArgs,llArgIndex1,llArgIndex2,llEvenCheck)
  LFloats(lfFloatArg)
  LDoubles(ldDoubleArg)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs>0)
    Mod(llNumArgs,2,llEvenCheck)
    Assign("",lstrResult)
    If(llEvenCheck=0)
      Assign(0,llArgIndex1,1,llArgIndex2)
      BeginLoop()
        GetSubArgTypei(llArgIndex2,lsArgType,lsVarType)
        Ifn(lsArgType=1,lsVarType=1,AND,lsArgType=3,lsVarType=7,AND,OR) // String ou String[i].
          GetSubArgi(llArgIndex1,lstrFormat)
          GetSubArgi(llArgIndex2,lstrStringArg)
          StringTools(FormatStringCStyle,lstrStringArg,lstrFormat,lstrSubResult)
        ElseIfn(lsArgType=1,lsVarType=2,AND,lsArgType=3,lsVarType=8,AND,OR) // Byte ou Byte[i].
          GetSubArgi(llArgIndex1,lstrFormat)
          GetSubArgi(llArgIndex2,lbByteArg)
          StringTools(FormatStringCStyle,lbByteArg,lstrFormat,lstrSubResult)
        ElseIfn(lsArgType=1,lsVarType=3,AND,lsArgType=3,lsVarType=9,AND,OR) // Short ou Short[i].
          GetSubArgi(llArgIndex1,lstrFormat)
          GetSubArgi(llArgIndex2,lsShortArg)
          StringTools(FormatStringCStyle,lsShortArg,lstrFormat,lstrSubResult)
        ElseIfn(lsArgType=1,lsVarType=4,AND,lsArgType=3,lsVarType=10,AND,OR) // Long ou Long[i].
          GetSubArgi(llArgIndex1,lstrFormat)
          GetSubArgi(llArgIndex2,llLongArg)
          StringTools(FormatStringCStyle,llLongArg,lstrFormat,lstrSubResult)
        ElseIfn(lsArgType=1,lsVarType=5,AND,lsArgType=3,lsVarType=11,AND,OR) // Float ou Float[i].
          GetSubArgi(llArgIndex1,lstrFormat)
          GetSubArgi(llArgIndex2,lfFloatArg)
          StringTools(FormatStringCStyle,lfFloatArg,lstrFormat,lstrSubResult)
        ElseIfn(lsArgType=1,lsVarType=6,AND,lsArgType=3,lsVarType=12,AND,OR) // Double ou Double[i].
          GetSubArgi(llArgIndex1,lstrFormat)
          GetSubArgi(llArgIndex2,ldDoubleArg)
          StringTools(FormatStringCStyle,ldDoubleArg,lstrFormat,lstrSubResult)
        Else()
          Assign("",lstrSubResult)
        EndIf()
        Add(lstrResult,lstrSubResult,lstrResult)
        Incr(llArgIndex1,2)
        Incr(llArgIndex2,2)
        ExitLoopIf(llArgIndex1>=llNumArgs)
      EndLoop()
    EndIf()
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrFormat)


BeginSub(StrSpaceFree)
  LStrings(lstrArg,lstrResult)
  LLongs(llNumArgs)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=2)
    GetSubArgs(lstrArg)
    StringTools(RemoveUnquotedSpaces,lstrArg,lstrResult)
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrSpaceFree)


BeginSub(StrTrimLeft)
  LStrings(lstrArg,lstrResult)
  LLongs(llNumArgs)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(lstrArg)
    StringTools(TrimLeft,lstrArg,lstrResult)
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrTrimLeft)


BeginSub(StrTrimRight)
  LStrings(lstrArg,lstrResult)
  LLongs(llNumArgs)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(lstrArg)
    StringTools(TrimRight,lstrArg,lstrResult)
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrTrimRight)


BeginSub(StrTrim)
  LStrings(lstrArg,lstrResult)
  LLongs(llNumArgs)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(lstrArg)
    StringTools(Trim,lstrArg,lstrResult)
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrTrim)


BeginSub(StrNumLines)
  LStrings(lstrSourceString)
  LLongs(llNumArgs,llNumLines)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(lstrSourceString)
    StringTools(GetNumLines,lstrSourceString,llNumLines)
  Else()
    Assign(0,llNumLines)
  EndIf()
  Return(llNumLines)
EndSub(StrNumLines)


BeginSub(StrGetLine)
  LStrings(lstrSourceString,lstrDestString)
  LLongs(llNumArgs)
  LDoubles(llLineIndex)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=2)
    GetSubArgs(lstrSourceString,llLineIndex)
    StringTools(GetLine,lstrSourceString,llLineIndex,lstrDestString)
  Else()
    Assign("",lstrDestString)
  EndIf()
  Return(lstrDestString)
EndSub(StrGetLine)


BeginSub(StrGetLines)
  LStrings(lstrSourceString,lstrDestString)
  LLongs(llNumArgs)
  LDoubles(llLineIndex,llNumLines)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=3)
    GetSubArgs(lstrSourceString,llLineIndex,llNumLines)
    StringTools(GetLines,lstrSourceString,llLineIndex,llNumLines,lstrDestString)
  Else()
    Assign("",lstrDestString)
  EndIf()
  Return(lstrDestString)
EndSub(StrGetLines)


BeginSub(StrReplaceLine)
  LStrings(lstrSourceString,lstrNewString,lstrDestString)
  LLongs(llNumArgs)
  LDoubles(llLineIndex)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=3)
    GetSubArgs(lstrSourceString,llLineIndex,lstrNewString)
    StringTools(ReplaceLine,lstrSourceString,llLineIndex,lstrNewString,lstrDestString)
  Else()
    Assign("",lstrDestString)
  EndIf()
  Return(lstrDestString)
EndSub(StrReplaceLine)


BeginSub(StrReplaceLines)
  LStrings(lstrSourceString,lstrNewString,lstrDestString)
  LLongs(llNumArgs)
  LDoubles(llFirstLineIndex,llNumLines)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=4)
    GetSubArgs(lstrSourceString,llFirstLineIndex,llNumLines,lstrNewString)
    StringTools(ReplaceLines,lstrSourceString,llFirstLineIndex,llNumLines,lstrNewString,lstrDestString)
  Else()
    Assign("",lstrDestString)
  EndIf()
  Return(lstrDestString)
EndSub(StrReplaceLines)


BeginSub(StrAddLine)
  LStrings(lstrSourceString,lstrNewString,lstrDestString)
  LLongs(llNumArgs)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=2)
    GetSubArgs(lstrSourceString,lstrNewString)
    StringTools(AddLine,lstrSourceString,lstrNewString,lstrDestString)
  Else()
    Assign("",lstrDestString)
  EndIf()
  Return(lstrDestString)
EndSub(StrAddLine)


BeginSub(StrInsertLine)
  LStrings(lstrSourceString,lstrNewString,lstrDestString)
  LLongs(llNumArgs)
  LDoubles(llLineIndex)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=3)
    GetSubArgs(lstrSourceString,llLineIndex,lstrNewString)
    StringTools(InsertLine,lstrSourceString,llLineIndex,lstrNewString,lstrDestString)
  Else()
    Assign("",lstrDestString)
  EndIf()
  Return(lstrDestString)
EndSub(StrInsertLine)


BeginSub(StrDeleteLine)
  LStrings(lstrSourceString,lstrDestString)
  LLongs(llNumArgs)
  LDoubles(llLineIndex)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=2)
    GetSubArgs(lstrSourceString,llLineIndex)
    StringTools(DeleteLine,lstrSourceString,llLineIndex,lstrDestString)
  Else()
    Assign("",lstrDestString)
  EndIf()
  Return(lstrDestString)
EndSub(StrDeleteLine)


BeginSub(StrDeleteLines)
  LStrings(lstrSourceString,lstrDestString)
  LLongs(llNumArgs)
  LDoubles(lFirstLineIndex,llNumLines)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=3)
    GetSubArgs(lstrSourceString,lFirstLineIndex,llNumLines)
    StringTools(DeleteLines,lstrSourceString,lFirstLineIndex,llNumLines,lstrDestString)
  Else()
    Assign("",lstrDestString)
  EndIf()
  Return(lstrDestString)
EndSub(StrDeleteLines)


BeginSub(StrCRC32)
  LStrings(lstrArg)
  LBytes(lbByteArray[1])
  LLongs(llNumArgs,llStrLen,llConvlen)
  LDoubles(ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(lstrArg)
    StringLength(lstrArg,llStrLen)
    ResizeArrays(lbByteArray,llStrLen)
    CommTools(StringToByteArray,lstrArg,lbByteArray,0,llConvlen)
    CRC(CRC32,0,lbByteArray,0,llConvlen,ldResult)
    ResizeArrays(lbByteArray,1)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(StrCRC32)


BeginSub(StrCRLF)
  LStrings(lstrCRLF,lstrResult)
  LBytes(lbArray[2])
  LLongs(llNumArgs,llNumCRLF,llCRLFIndex)
  GetSubNumArgs(llNumArgs)
  AssignArray(13,10,lbArray,0)
  CommTools(ByteArrayToString,lbArray,0,2,lstrCRLF)
  If(llNumArgs=0)
    Assign(lstrCRLF,lstrResult)
  ElseIf(llNumArgs=1)
    GetSubArgs(llNumCRLF)
    If(llNumCRLF>0)
      Assign(lstrCRLF,lstrResult)
      If(llNumCRLF>1)
        Assign(1,llCRLFIndex)
        BeginLoop()
          Add(lstrResult,lstrCRLF,lstrResult)
          Incr(llCRLFIndex)
          ExitLoopIf(llCRLFIndex>=llNumCRLF)
        EndLoop()
      EndIf()
    Else()
      Assign("",lstrResult)
    EndIf()
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrCRLF)


BeginSub(StrCR)
  LStrings(lstrCR,lstrResult)
  LBytes(lbArray[1])
  LLongs(llNumArgs,llNumCR,llCRIndex)
  GetSubNumArgs(llNumArgs)
  AssignArray(13,lbArray,0)
  CommTools(ByteArrayToString,lbArray,0,1,lstrCR)
  If(llNumArgs=0)
    Assign(lstrCR,lstrResult)
  ElseIf(llNumArgs=1)
    GetSubArgs(llNumCR)
    If(llNumCR>0)
      Assign(lstrCR,lstrResult)
      If(llNumCR>1)
        Assign(1,llCRIndex)
        BeginLoop()
          Add(lstrResult,lstrCR,lstrResult)
          Incr(llCRIndex)
          ExitLoopIf(llCRIndex>=llNumCR)
        EndLoop()
      EndIf()
    Else()
      Assign("",lstrResult)
    EndIf()
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrCR)


BeginSub(StrLF)
  LStrings(lstrLF,lstrResult)
  LBytes(lbArray[1])
  LLongs(llNumArgs,llNumLF,llLFIndex)
  GetSubNumArgs(llNumArgs)
  AssignArray(10,lbArray,0)
  CommTools(ByteArrayToString,lbArray,0,1,lstrLF)
  If(llNumArgs=0)
    Assign(lstrLF,lstrResult)
  ElseIf(llNumArgs=1)
    GetSubArgs(llNumLF)
    If(llNumLF>0)
      Assign(lstrLF,lstrResult)
      If(llNumLF>1)
        Assign(1,llLFIndex)
        BeginLoop()
          Add(lstrResult,lstrLF,lstrResult)
          Incr(llLFIndex)
          ExitLoopIf(llLFIndex>=llNumLF)
        EndLoop()
      EndIf()
    Else()
      Assign("",lstrResult)
    EndIf()
  Else()
    Assign("",lstrResult)
  EndIf()
  Return(lstrResult)
EndSub(StrLF)


BeginSub(BytesToInt)
  LLongs(llNumArgs)
  LBytes(lbArgi[4])
  LLongs(llResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(lbArgi[0])
    MathTools(BytesToInteger,lbArgi,llResult)
  ElseIf(llNumArgs=2)
    GetSubArgs(lbArgi[0],lbArgi[1])
    MathTools(BytesToInteger,lbArgi[0],lbArgi[1],llResult)
  ElseIf(llNumArgs=3)
    GetSubArgs(lbArgi[0],lbArgi[1],lbArgi[2])
    MathTools(BytesToInteger,lbArgi[0],lbArgi[1],lbArgi[2],llResult)
  ElseIf(llNumArgs=4)
    GetSubArgs(lbArgi[0],lbArgi[1],lbArgi[2],lbArgi[3])
    MathTools(BytesToInteger,lbArgi[0],lbArgi[1],lbArgi[2],lbArgi[3],llResult)
  Else()
    Assign(0,llResult)
  EndIf()
  Return(llResult)
EndSub(BytesToInt)


BeginSub(BytesToFloat)
  LLongs(llNumArgs,llArgIndex)
  LBytes(lbArgi[4])
  LFloats(lfResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=4)
    GetSubArgs(lbArgi[0],lbArgi[1],lbArgi[2],lbArgi[3])
    MathTools(Cast4BytesToFloat,lbArgi[0],lbArgi[1],lbArgi[2],lbArgi[3],lfResult)
  Else()
    Assign(0,lfResult)
  EndIf()
  Return(lfResult)
EndSub(BytesToFloat)


BeginSub(BytesToDouble)
  LLongs(llNumArgs,llArgIndex)
  LBytes(lbArgi[8])
  LDoubles(ldResult)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=8)
    GetSubArgs(lbArgi[0],lbArgi[1],lbArgi[2],lbArgi[3],lbArgi[4],lbArgi[5],lbArgi[6],lbArgi[7])
    MathTools(Cast8BytesToDouble,lbArgi[0],lbArgi[1],lbArgi[2],lbArgi[3],lbArgi[4],lbArgi[5],lbArgi[6],lbArgi[7],ldResult)
  Else()
    Assign(0,ldResult)
  EndIf()
  Return(ldResult)
EndSub(BytesToDouble)


BeginSub(ArrayDim)
  LShorts(lsArrayIndex,lsUpperBound)
  LLongs(llNumArgs,llArgIndex1,llArgIndex2,llDimIndex)
  LDoubles(ldSize)
  GetSubNumArgs(llNumArgs)
  Add(kmlFCTNumDims,1,lsUpperBound)
  Ifn(llNumArgs>=2,llNumArgs<=lsUpperBound,AND)
    GetSubArgi(0,lsArrayIndex)
    Ifn(lsArrayIndex>=0,lsArrayIndex<kmlFCTNumArrays,AND)
      Sub(llNumArgs,1,mlFCTNumDims[lsArrayIndex])
      Assign(0,llArgIndex1,1,llArgIndex2,1,ldSize)
      BeginLoop()
        ComputeMultiDimArrayIndex(lsArrayIndex,llArgIndex1,kmlFCTNumArrays,kmlFCTNumDims,llDimIndex)
        GetSubArgi(llArgIndex2,mlFCTDimi[llDimIndex])
        Mul(ldSize,mlFCTDimi[llDimIndex],ldSize)
        Incr(llArgIndex1)
        Incr(llArgIndex2)
        ExitLoopIf(llArgIndex2>=llNumArgs)
      EndLoop()
      BeginLoop()
        ComputeMultiDimArrayIndex(lsArrayIndex,llArgIndex1,kmlFCTNumArrays,kmlFCTNumDims,llDimIndex)
        Assign(1,mlFCTDimi[llDimIndex])
        Incr(llArgIndex1)
        ExitLoopIf(llArgIndex1>=kmlFCTNumDims)
      EndLoop()
    Else()
      Assign(0,ldSize)
    EndIf()
  Else()
    Assign(0,ldSize)
  EndIf()
  Return(ldSize)
EndSub(ArrayDim)


BeginSub(ArrayIndex)
  LShorts(lsArrayIndex,lsUpperBound)
  LLongs(llNumArgs,llArgIndex1,llArgIndex2,llDimiIndex[kmlFCTNumDims])
  LDoubles(ldDimi[kmlFCTNumDims],ldIndex)
  GetSubNumArgs(llNumArgs)
  Add(kmlFCTNumDims,1,lsUpperBound)
  Ifn(llNumArgs>=2,llNumArgs<=lsUpperBound,AND)
    GetSubArgi(0,lsArrayIndex)
    Assign(1,llArgIndex1,0,llArgIndex2)
    BeginLoop()
      GetSubArgi(llArgIndex1,ldDimi[llArgIndex2])
      RPN(lsArrayIndex,kmlFCTNumDims,*,llArgIndex2,+,llDimiIndex[llArgIndex2])
      Incr(llArgIndex1)
      Incr(llArgIndex2)
      ExitLoopIf(llArgIndex1>=llNumArgs)
    EndLoop()
    BeginLoop()
      Assign(0,ldDimi[llArgIndex2])
      RPN(lsArrayIndex,kmlFCTNumDims,*,llArgIndex2,+,llDimiIndex[llArgIndex2])
      Incr(llArgIndex1)
      Incr(llArgIndex2)
      ExitLoopIf(llArgIndex2>=kmlFCTNumDims)
    EndLoop()
    Ifn(kmlFCTNumDims=16,lsArrayIndex>=0,AND,lsArrayIndex<kmlFCTNumArrays,AND)
      ComputeMultiDimArrayIndex(ldDimi[0],ldDimi[1],ldDimi[2],ldDimi[3],/+
                                ldDimi[4],ldDimi[5],ldDimi[6],ldDimi[7],/+
                                ldDimi[8],ldDimi[9],ldDimi[10],ldDimi[11],/+
                                ldDimi[12],ldDimi[13],ldDimi[14],ldDimi[15],/+
                                mlFCTDimi[llDimiIndex[0]],mlFCTDimi[llDimiIndex[1]],mlFCTDimi[llDimiIndex[2]],mlFCTDimi[llDimiIndex[3]],/+
                                mlFCTDimi[llDimiIndex[4]],mlFCTDimi[llDimiIndex[5]],mlFCTDimi[llDimiIndex[6]],mlFCTDimi[llDimiIndex[7]],/+
                                mlFCTDimi[llDimiIndex[8]],mlFCTDimi[llDimiIndex[9]],mlFCTDimi[llDimiIndex[10]],mlFCTDimi[llDimiIndex[11]],/+
                                mlFCTDimi[llDimiIndex[12]],mlFCTDimi[llDimiIndex[13]],mlFCTDimi[llDimiIndex[14]],mlFCTDimi[llDimiIndex[15]],/+
                                ldIndex)
    Else()
      Assign(0,ldIndex)
    EndIf()
  Else()
    Assign(0,ldIndex)
  EndIf()
  Return(ldIndex)
EndSub(ArrayIndex)


BeginSub(ArrDim)
  LLongs(llNumArgs,llArgIndex)
  LDoubles(ldArgi,ldSize)
  GetSubNumArgs(llNumArgs)
  GetSubArgi(0,ldSize)
  Assign(1,llArgIndex)
  BeginLoop()
    GetSubArgi(llArgIndex,ldArgi)
    Mul(ldSize,ldArgi,ldSize)
    Incr(llArgIndex)
    ExitLoopIf(llArgIndex>=llNumArgs)
  EndLoop()
  Return(ldSize)
EndSub(ArrDim)


BeginSub(ArrIndex)
  LLongs(llNumArgs,llIndex[16],llDim[16])
  LDoubles(ldArgi,ldIndex)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=2)
    GetSubArgs(llIndex[0],/+
               llDim[0])
    ComputeMultiDimArrayIndex(llIndex[0],/+
                              llDim[0],/+
                              ldIndex)
  ElseIf(llNumArgs=4)
    GetSubArgs(llIndex[0],llIndex[1],/+
               llDim[0],llDim[1])
    ComputeMultiDimArrayIndex(llIndex[0],llIndex[1],/+
                              llDim[0],llDim[1],/+
                              ldIndex)
  ElseIf(llNumArgs=6)
    GetSubArgs(llIndex[0],llIndex[1],llIndex[2],/+
               llDim[0],llDim[1],llDim[2])
    ComputeMultiDimArrayIndex(llIndex[0],llIndex[1],llIndex[2],/+
                              llDim[0],llDim[1],llDim[2],/+
                              ldIndex)
  ElseIf(llNumArgs=8)
    GetSubArgs(llIndex[0],llIndex[1],llIndex[2],llIndex[3],/+
               llDim[0],llDim[1],llDim[2],llDim[3])
    ComputeMultiDimArrayIndex(llIndex[0],llIndex[1],llIndex[2],llIndex[3],/+
                              llDim[0],llDim[1],llDim[2],llDim[3],/+
                              ldIndex)
  ElseIf(llNumArgs=10)
    GetSubArgs(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],/+
               llDim[0],llDim[1],llDim[2],llDim[3],llDim[4])
    ComputeMultiDimArrayIndex(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],/+
                              llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],/+
                              ldIndex)
  ElseIf(llNumArgs=12)
    GetSubArgs(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],/+
               llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5])
    ComputeMultiDimArrayIndex(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],/+
                              llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],/+
                              ldIndex)
  ElseIf(llNumArgs=14)
    GetSubArgs(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],/+
               llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6])
    ComputeMultiDimArrayIndex(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],/+
                              llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],/+
                              ldIndex)
  ElseIf(llNumArgs=16)
    GetSubArgs(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],/+
               llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7])
    ComputeMultiDimArrayIndex(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],/+
                              llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],/+
                              ldIndex)
  ElseIf(llNumArgs=18)
    GetSubArgs(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],llIndex[8],/+
               llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],llDim[8])
    ComputeMultiDimArrayIndex(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],llIndex[8],/+
                              llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],llDim[8],/+
                              ldIndex)
  ElseIf(llNumArgs=20)
    GetSubArgs(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],llIndex[8],llIndex[9],/+
               llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],llDim[8],llDim[9])
    ComputeMultiDimArrayIndex(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],llIndex[8],llIndex[9],/+
                              llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],llDim[8],llDim[9],/+
                              ldIndex)
  ElseIf(llNumArgs=22)
    GetSubArgs(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],llIndex[8],llIndex[9],llIndex[10],/+
               llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],llDim[8],llDim[9],llDim[10])
    ComputeMultiDimArrayIndex(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],llIndex[8],llIndex[9],llIndex[10],/+
                              llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],llDim[8],llDim[9],llDim[10],/+
                              ldIndex)
  ElseIf(llNumArgs=24)
    GetSubArgs(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],llIndex[8],llIndex[9],llIndex[10],llIndex[11],/+
               llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],llDim[8],llDim[9],llDim[10],llDim[11])
    ComputeMultiDimArrayIndex(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],llIndex[8],llIndex[9],llIndex[10],llIndex[11],/+
                              llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],llDim[8],llDim[9],llDim[10],llDim[11],/+
                              ldIndex)
  ElseIf(llNumArgs=26)
    GetSubArgs(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],llIndex[8],llIndex[9],llIndex[10],llIndex[11],llIndex[12],/+
               llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],llDim[8],llDim[9],llDim[10],llDim[11],llDim[12])
    ComputeMultiDimArrayIndex(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],llIndex[8],llIndex[9],llIndex[10],llIndex[11],llIndex[12],/+
                              llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],llDim[8],llDim[9],llDim[10],llDim[11],llDim[12],/+
                              ldIndex)
  ElseIf(llNumArgs=28)
    GetSubArgs(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],llIndex[8],llIndex[9],llIndex[10],llIndex[11],llIndex[12],llIndex[13],/+
               llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],llDim[8],llDim[9],llDim[10],llDim[11],llDim[12],llDim[13])
    ComputeMultiDimArrayIndex(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],llIndex[8],llIndex[9],llIndex[10],llIndex[11],llIndex[12],llIndex[13],/+
                              llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],llDim[8],llDim[9],llDim[10],llDim[11],llDim[12],llDim[13],/+
                              ldIndex)
  ElseIf(llNumArgs=30)
    GetSubArgs(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],llIndex[8],llIndex[9],llIndex[10],llIndex[11],llIndex[12],llIndex[13],llIndex[14],/+
               llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],llDim[8],llDim[9],llDim[10],llDim[11],llDim[12],llDim[13],llDim[14])
    ComputeMultiDimArrayIndex(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],llIndex[8],llIndex[9],llIndex[10],llIndex[11],llIndex[12],llIndex[13],llIndex[14],/+
                              llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],llDim[8],llDim[9],llDim[10],llDim[11],llDim[12],llDim[13],llDim[14],/+
                              ldIndex)
  ElseIf(llNumArgs=32)
    GetSubArgs(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],llIndex[8],llIndex[9],llIndex[10],llIndex[11],llIndex[12],llIndex[13],llIndex[14],llIndex[15],/+
               llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],llDim[8],llDim[9],llDim[10],llDim[11],llDim[12],llDim[13],llDim[14],llDim[15])
    ComputeMultiDimArrayIndex(llIndex[0],llIndex[1],llIndex[2],llIndex[3],llIndex[4],llIndex[5],llIndex[6],llIndex[7],llIndex[8],llIndex[9],llIndex[10],llIndex[11],llIndex[12],llIndex[13],llIndex[14],llIndex[15],/+
                              llDim[0],llDim[1],llDim[2],llDim[3],llDim[4],llDim[5],llDim[6],llDim[7],llDim[8],llDim[9],llDim[10],llDim[11],llDim[12],llDim[13],llDim[14],llDim[15],/+
                              ldIndex)
  Else()
    Assign(0,ldIndex)
  EndIf()
  Return(ldIndex)
EndSub(ArrIndex)


BeginSub(OptionFlag)
  LStrings(lstrArg)
  LShorts(lsFlag)
  LLongs(llNumArgs)
  GetSubNumArgs(llNumArgs)
  If(llNumArgs=1)
    GetSubArgs(lstrArg)
    GetTestBlocFlag(lstrArg,lsFlag)
  Else()
    Assign(0,lsFlag)
  EndIf()
  Return(lsFlag)
EndSub(OptionFlag)


// Subs-Functions01.txt... Fin.

----------------------------------------------------------------------------------------------------
